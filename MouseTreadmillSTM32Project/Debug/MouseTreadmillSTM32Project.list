
MouseTreadmillSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001304  08007f5c  08007f5c  00017f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009260  08009260  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009260  08009260  00019260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009268  08009268  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800926c  0800926c  0001926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016cc8  20000070  080092e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016d38  080092e0  00026d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002217c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000303a  00000000  00000000  0004221c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001493b  00000000  00000000  00045256  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000010d8  00000000  00000000  00059b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000017b0  00000000  00000000  0005ac70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00029547  00000000  00000000  0005c420  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001095c  00000000  00000000  00085967  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f86f5  00000000  00000000  000962c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0018e9b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030c0  00000000  00000000  0018ea34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f44 	.word	0x08007f44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007f44 	.word	0x08007f44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <mavlink_sha256_update>:
    G += GG;
    H += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000574:	b0df      	sub	sp, #380	; 0x17c
 8000576:	9004      	str	r0, [sp, #16]
 8000578:	9103      	str	r1, [sp, #12]
 800057a:	9202      	str	r2, [sp, #8]
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
 800057c:	6806      	ldr	r6, [r0, #0]
    uint32_t offset;

    m->sz[0] += len * 8;
 800057e:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 8000582:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
 8000584:	42b3      	cmp	r3, r6
 8000586:	d202      	bcs.n	800058e <mavlink_sha256_update+0x1e>
	++m->sz[1];
 8000588:	6843      	ldr	r3, [r0, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	6043      	str	r3, [r0, #4]
    offset = (old_sz / 8) % 64;
 800058e:	f3c6 06c5 	ubfx	r6, r6, #3, #6
    while(len > 0){
 8000592:	9b02      	ldr	r3, [sp, #8]
 8000594:	2b00      	cmp	r3, #0
 8000596:	f000 80c3 	beq.w	8000720 <mavlink_sha256_update+0x1b0>
 800059a:	ab1d      	add	r3, sp, #116	; 0x74
 800059c:	930d      	str	r3, [sp, #52]	; 0x34
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800059e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8000728 <mavlink_sha256_update+0x1b8>
 80005a2:	e053      	b.n	800064c <mavlink_sha256_update+0xdc>
    for (i = 0; i < 64; i++) {
 80005a4:	4635      	mov	r5, r6
 80005a6:	4606      	mov	r6, r0
	AA = T1 + T2;
 80005a8:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 80005aa:	4667      	mov	r7, ip
 80005ac:	468c      	mov	ip, r1
	EE = DD + T1;
 80005ae:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80005b0:	ea4f 23f1 	mov.w	r3, r1, ror #11
 80005b4:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 80005b8:	ea83 6a71 	eor.w	sl, r3, r1, ror #25
 80005bc:	ea27 0301 	bic.w	r3, r7, r1
 80005c0:	ea01 0b0c 	and.w	fp, r1, ip
 80005c4:	ea83 030b 	eor.w	r3, r3, fp
 80005c8:	4453      	add	r3, sl
 80005ca:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 80005ce:	4413      	add	r3, r2
 80005d0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80005d4:	4413      	add	r3, r2
 80005d6:	9a01      	ldr	r2, [sp, #4]
 80005d8:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80005da:	ea4f 3270 	mov.w	r2, r0, ror #13
 80005de:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 80005e2:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 80005e6:	ea86 0a05 	eor.w	sl, r6, r5
 80005ea:	ea0a 0a00 	and.w	sl, sl, r0
 80005ee:	ea06 0b05 	and.w	fp, r6, r5
 80005f2:	ea8a 0a0b 	eor.w	sl, sl, fp
 80005f6:	4452      	add	r2, sl
	EE = DD + T1;
 80005f8:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 80005fc:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 80005fe:	3401      	adds	r4, #1
 8000600:	9701      	str	r7, [sp, #4]
 8000602:	46ae      	mov	lr, r5
 8000604:	2c40      	cmp	r4, #64	; 0x40
 8000606:	d1cd      	bne.n	80005a4 <mavlink_sha256_update+0x34>
    A += AA;
 8000608:	9a05      	ldr	r2, [sp, #20]
 800060a:	441a      	add	r2, r3
 800060c:	4613      	mov	r3, r2
 800060e:	9a04      	ldr	r2, [sp, #16]
 8000610:	6093      	str	r3, [r2, #8]
    B += BB;
 8000612:	9b06      	ldr	r3, [sp, #24]
 8000614:	4403      	add	r3, r0
 8000616:	4618      	mov	r0, r3
 8000618:	60d0      	str	r0, [r2, #12]
    C += CC;
 800061a:	9b07      	ldr	r3, [sp, #28]
 800061c:	4433      	add	r3, r6
 800061e:	461e      	mov	r6, r3
 8000620:	6116      	str	r6, [r2, #16]
    D += DD;
 8000622:	9b08      	ldr	r3, [sp, #32]
 8000624:	442b      	add	r3, r5
 8000626:	461d      	mov	r5, r3
 8000628:	6155      	str	r5, [r2, #20]
    E += EE;
 800062a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800062c:	445b      	add	r3, fp
 800062e:	6193      	str	r3, [r2, #24]
    F += FF;
 8000630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000632:	440b      	add	r3, r1
 8000634:	4619      	mov	r1, r3
 8000636:	61d1      	str	r1, [r2, #28]
    G += GG;
 8000638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800063a:	4463      	add	r3, ip
 800063c:	6213      	str	r3, [r2, #32]
    H += HH;
 800063e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000640:	443b      	add	r3, r7
 8000642:	6253      	str	r3, [r2, #36]	; 0x24
                p2[1] = p1[2];
                p2[2] = p1[1];
                p2[3] = p1[0];
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8000644:	2600      	movs	r6, #0
    while(len > 0){
 8000646:	9b02      	ldr	r3, [sp, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d069      	beq.n	8000720 <mavlink_sha256_update+0x1b0>
	uint32_t l = 64 - offset;
 800064c:	f1c6 0540 	rsb	r5, r6, #64	; 0x40
 8000650:	9f02      	ldr	r7, [sp, #8]
 8000652:	42bd      	cmp	r5, r7
 8000654:	bf28      	it	cs
 8000656:	463d      	movcs	r5, r7
	memcpy(m->u.save_bytes + offset, p, l);
 8000658:	9b04      	ldr	r3, [sp, #16]
 800065a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800065e:	462a      	mov	r2, r5
 8000660:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8000664:	4649      	mov	r1, r9
 8000666:	19a0      	adds	r0, r4, r6
 8000668:	f007 f85d 	bl	8007726 <memcpy>
	offset += l;
 800066c:	442e      	add	r6, r5
	p += l;
 800066e:	464b      	mov	r3, r9
 8000670:	442b      	add	r3, r5
 8000672:	9303      	str	r3, [sp, #12]
	len -= l;
 8000674:	1b7b      	subs	r3, r7, r5
 8000676:	9302      	str	r3, [sp, #8]
	if(offset == 64){
 8000678:	2e40      	cmp	r6, #64	; 0x40
 800067a:	d1e4      	bne.n	8000646 <mavlink_sha256_update+0xd6>
 800067c:	4622      	mov	r2, r4
 800067e:	a81e      	add	r0, sp, #120	; 0x78
 8000680:	ab0e      	add	r3, sp, #56	; 0x38
                p2[0] = p1[3];
 8000682:	78d1      	ldrb	r1, [r2, #3]
 8000684:	7019      	strb	r1, [r3, #0]
                p2[1] = p1[2];
 8000686:	7891      	ldrb	r1, [r2, #2]
 8000688:	7059      	strb	r1, [r3, #1]
                p2[2] = p1[1];
 800068a:	7851      	ldrb	r1, [r2, #1]
 800068c:	7099      	strb	r1, [r3, #2]
                p2[3] = p1[0];
 800068e:	f812 1b04 	ldrb.w	r1, [r2], #4
 8000692:	70d9      	strb	r1, [r3, #3]
 8000694:	3304      	adds	r3, #4
	    for (i = 0; i < 16; i++){
 8000696:	4283      	cmp	r3, r0
 8000698:	d1f3      	bne.n	8000682 <mavlink_sha256_update+0x112>
    AA = A;
 800069a:	9b04      	ldr	r3, [sp, #16]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	9205      	str	r2, [sp, #20]
    BB = B;
 80006a0:	68da      	ldr	r2, [r3, #12]
 80006a2:	9206      	str	r2, [sp, #24]
    CC = C;
 80006a4:	691a      	ldr	r2, [r3, #16]
 80006a6:	9207      	str	r2, [sp, #28]
    DD = D;
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	9208      	str	r2, [sp, #32]
    EE = E;
 80006ac:	699a      	ldr	r2, [r3, #24]
 80006ae:	9209      	str	r2, [sp, #36]	; 0x24
    FF = F;
 80006b0:	69da      	ldr	r2, [r3, #28]
 80006b2:	920a      	str	r2, [sp, #40]	; 0x28
    GG = G;
 80006b4:	6a1a      	ldr	r2, [r3, #32]
 80006b6:	920b      	str	r2, [sp, #44]	; 0x2c
    HH = H;
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	930c      	str	r3, [sp, #48]	; 0x30
 80006bc:	ab0d      	add	r3, sp, #52	; 0x34
 80006be:	aa1d      	add	r2, sp, #116	; 0x74
 80006c0:	980d      	ldr	r0, [sp, #52]	; 0x34
	data[i] = in[i];
 80006c2:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80006c6:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 80006ca:	4298      	cmp	r0, r3
 80006cc:	d1f9      	bne.n	80006c2 <mavlink_sha256_update+0x152>
 80006ce:	ac1e      	add	r4, sp, #120	; 0x78
 80006d0:	ad4e      	add	r5, sp, #312	; 0x138
 80006d2:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 80006d6:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006da:	ea4f 43f2 	mov.w	r3, r2, ror #19
 80006de:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 80006e2:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80006e6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80006e8:	6800      	ldr	r0, [r0, #0]
 80006ea:	4402      	add	r2, r0
 80006ec:	4413      	add	r3, r2
 80006ee:	ea4f 42b1 	mov.w	r2, r1, ror #18
 80006f2:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 80006f6:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80006fa:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 80006fe:	42a5      	cmp	r5, r4
 8000700:	d1e7      	bne.n	80006d2 <mavlink_sha256_update+0x162>
    DD = D;
 8000702:	f8dd e020 	ldr.w	lr, [sp, #32]
    CC = C;
 8000706:	9d07      	ldr	r5, [sp, #28]
    BB = B;
 8000708:	9e06      	ldr	r6, [sp, #24]
    AA = A;
 800070a:	9805      	ldr	r0, [sp, #20]
    GG = G;
 800070c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    FF = F;
 800070e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    HH = H;
 8000712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    EE = E;
 8000714:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (i = 0; i < 64; i++) {
 8000716:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000718:	f10d 0978 	add.w	r9, sp, #120	; 0x78
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	e747      	b.n	80005b0 <mavlink_sha256_update+0x40>
	}
    }
}
 8000720:	b05f      	add	sp, #380	; 0x17c
 8000722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000726:	bf00      	nop
 8000728:	08007f5c 	.word	0x08007f5c

0800072c <mouseDriver_initSetpoint>:

/* Private functions for mouseDriver.c*/
/* Private Init functions */

void mouseDriver_initSetpoint(void){
	actual_speed_setpoint.setpoint_x = 0;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <mouseDriver_initSetpoint+0xc>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
	actual_speed_setpoint.setpoint_y = 0;
 8000732:	605a      	str	r2, [r3, #4]
}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	200000b4 	.word	0x200000b4

0800073c <mouseDriver_getSpeedFromSensors>:
void mouseDriver_initMode(void){
	actual_mode = MOUSE_MODE_STOP;
}

void mouseDriver_getSpeedFromSensors(void){
	actual_speed_measure.speed_x = 1;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <mouseDriver_getSpeedFromSensors+0x10>)
 800073e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000742:	605a      	str	r2, [r3, #4]
	actual_speed_measure.speed_y = 2;
 8000744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000748:	609a      	str	r2, [r3, #8]
}
 800074a:	4770      	bx	lr
 800074c:	200000a8 	.word	0x200000a8

08000750 <mouseDriver_initPoints>:
void mouseDriver_initPoints(void){
 8000750:	b470      	push	{r4, r5, r6}
 8000752:	4c0e      	ldr	r4, [pc, #56]	; (800078c <mouseDriver_initPoints+0x3c>)
	for(int i=0; i<MAX_POINTS; i++){
 8000754:	2300      	movs	r3, #0
		points[i].duration = 0;
 8000756:	4626      	mov	r6, r4
 8000758:	4619      	mov	r1, r3
		points[i].setpoint_x = 0;
 800075a:	2500      	movs	r5, #0
		points[i].duration = 0;
 800075c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8000760:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000764:	1832      	adds	r2, r6, r0
 8000766:	5431      	strb	r1, [r6, r0]
 8000768:	7051      	strb	r1, [r2, #1]
 800076a:	7091      	strb	r1, [r2, #2]
 800076c:	70d1      	strb	r1, [r2, #3]
		points[i].setpoint_x = 0;
 800076e:	6055      	str	r5, [r2, #4]
		points[i].setpoint_y = 0;
 8000770:	6095      	str	r5, [r2, #8]
		points[i].point_id = 0;
 8000772:	7321      	strb	r1, [r4, #12]
	for(int i=0; i<MAX_POINTS; i++){
 8000774:	3301      	adds	r3, #1
 8000776:	340d      	adds	r4, #13
 8000778:	2bff      	cmp	r3, #255	; 0xff
 800077a:	d1ef      	bne.n	800075c <mouseDriver_initPoints+0xc>
	}
	actual_point = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <mouseDriver_initPoints+0x40>)
 8000780:	7013      	strb	r3, [r2, #0]
	actual_point_start_time = 0;
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <mouseDriver_initPoints+0x44>)
 8000784:	6013      	str	r3, [r2, #0]
}
 8000786:	bc70      	pop	{r4, r5, r6}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000310 	.word	0x20000310
 8000790:	200000a0 	.word	0x200000a0
 8000794:	200000a4 	.word	0x200000a4

08000798 <mouseDriver_sendMsg>:
	actual_speed_setpoint = speed;
}


/* Private message functions */
void mouseDriver_sendMsg(uint32_t msgid){
 8000798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800079c:	b0fe      	sub	sp, #504	; 0x1f8
 800079e:	4605      	mov	r5, r0
	static uint8_t outBuffer[MAX_BYTE_BUFFER_SIZE];
	static uint16_t msg_size = 0;

	while (main_get_huart_tx_state() == HAL_BUSY){
		/*Wait for other messages to be sent*/
		HAL_Delay(1);
 80007a0:	2401      	movs	r4, #1
	while (main_get_huart_tx_state() == HAL_BUSY){
 80007a2:	e002      	b.n	80007aa <mouseDriver_sendMsg+0x12>
		HAL_Delay(1);
 80007a4:	4620      	mov	r0, r4
 80007a6:	f003 fc1f 	bl	8003fe8 <HAL_Delay>
	while (main_get_huart_tx_state() == HAL_BUSY){
 80007aa:	f002 f86f 	bl	800288c <main_get_huart_tx_state>
 80007ae:	2802      	cmp	r0, #2
 80007b0:	d0f8      	beq.n	80007a4 <mouseDriver_sendMsg+0xc>
	}

	switch(msgid){
 80007b2:	2d07      	cmp	r5, #7
 80007b4:	f200 811a 	bhi.w	80009ec <mouseDriver_sendMsg+0x254>
 80007b8:	e8df f015 	tbh	[pc, r5, lsl #1]
 80007bc:	05db0008 	.word	0x05db0008
 80007c0:	011801f6 	.word	0x011801f6
 80007c4:	09d003f8 	.word	0x09d003f8
 80007c8:	07e20bbc 	.word	0x07e20bbc
		case MAVLINK_MSG_ID_HEARTBEAT:
			mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &msg, actual_mode, mouseDriver_getTime());
 80007cc:	4b98      	ldr	r3, [pc, #608]	; (8000a30 <mouseDriver_sendMsg+0x298>)
 80007ce:	781c      	ldrb	r4, [r3, #0]

	/* Init sensor as well */
	return sensorDriver_powerup();
}
uint32_t mouseDriver_getTime (void){
	return (HAL_GetTick());
 80007d0:	f003 fc04 	bl	8003fdc <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
    _mav_put_uint8_t(buf, 4, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.time = time;
 80007d6:	466b      	mov	r3, sp
 80007d8:	6018      	str	r0, [r3, #0]
    packet.mode = mode;
 80007da:	711c      	strb	r4, [r3, #4]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80007dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007e0:	9238      	str	r2, [sp, #224]	; 0xe0
 80007e2:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f88d 30dd 	strb.w	r3, [sp, #221]	; 0xdd
 80007ec:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 80007f0:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80007f4:	4b8f      	ldr	r3, [pc, #572]	; (8000a34 <mouseDriver_sendMsg+0x29c>)
 80007f6:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80007f8:	f013 0502 	ands.w	r5, r3, #2
 80007fc:	d12e      	bne.n	800085c <mouseDriver_sendMsg+0xc4>
 80007fe:	4b8d      	ldr	r3, [pc, #564]	; (8000a34 <mouseDriver_sendMsg+0x29c>)
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	2b00      	cmp	r3, #0
 8000804:	f000 80f5 	beq.w	80009f2 <mouseDriver_sendMsg+0x25a>
 8000808:	7818      	ldrb	r0, [r3, #0]
 800080a:	f000 0001 	and.w	r0, r0, #1
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
		msg->magic = MAVLINK_STX_MAVLINK1;
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
	} else {
		msg->magic = MAVLINK_STX;
 800080e:	23fd      	movs	r3, #253	; 0xfd
 8000810:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8000814:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8000818:	2b00      	cmp	r3, #0
 800081a:	f040 80ec 	bne.w	80009f6 <mouseDriver_sendMsg+0x25e>
 800081e:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 80e9 	bne.w	80009fa <mouseDriver_sendMsg+0x262>
 8000828:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 800082c:	2b00      	cmp	r3, #0
 800082e:	f040 80e6 	bne.w	80009fe <mouseDriver_sendMsg+0x266>
 8000832:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
		length--;
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf0c      	ite	eq
 800083a:	2301      	moveq	r3, #1
 800083c:	2302      	movne	r3, #2
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800083e:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8000842:	2200      	movs	r2, #0
 8000844:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8000848:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	msg->incompat_flags = 0;
	if (signing) {
 800084c:	2800      	cmp	r0, #0
 800084e:	f000 80d8 	beq.w	8000a02 <mouseDriver_sendMsg+0x26a>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000852:	2201      	movs	r2, #1
 8000854:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 8000858:	240a      	movs	r4, #10
 800085a:	e00e      	b.n	800087a <mouseDriver_sendMsg+0xe2>
		msg->magic = MAVLINK_STX_MAVLINK1;
 800085c:	23fe      	movs	r3, #254	; 0xfe
 800085e:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000862:	2305      	movs	r3, #5
 8000864:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8000868:	2000      	movs	r0, #0
 800086a:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 800086e:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000872:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8000874:	2200      	movs	r2, #0
 8000876:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	}
	msg->compat_flags = 0;
 800087a:	2200      	movs	r2, #0
 800087c:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 8000880:	496c      	ldr	r1, [pc, #432]	; (8000a34 <mouseDriver_sendMsg+0x29c>)
 8000882:	798a      	ldrb	r2, [r1, #6]
 8000884:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8000888:	1c56      	adds	r6, r2, #1
 800088a:	718e      	strb	r6, [r1, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 800088c:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8000890:	f88d 1014 	strb.w	r1, [sp, #20]
	buf[1] = msg->len;
 8000894:	f88d 3015 	strb.w	r3, [sp, #21]
	if (mavlink1) {
 8000898:	2d00      	cmp	r5, #0
 800089a:	f000 80b4 	beq.w	8000a06 <mouseDriver_sendMsg+0x26e>
		buf[2] = msg->seq;
 800089e:	f88d 2016 	strb.w	r2, [sp, #22]
		buf[3] = msg->sysid;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->compid;
 80008a8:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 80008ac:	f88d 3019 	strb.w	r3, [sp, #25]
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
 80008b0:	1ea6      	subs	r6, r4, #2
 80008b2:	b2b6      	uxth	r6, r6
 80008b4:	ab7e      	add	r3, sp, #504	; 0x1f8
 80008b6:	441e      	add	r6, r3
 80008b8:	f5a6 76f1 	sub.w	r6, r6, #482	; 0x1e2
        *crcAccum = X25_INIT_CRC;
 80008bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 80008c0:	f10d 0515 	add.w	r5, sp, #21
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80008c4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80008c8:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 80008ca:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80008ce:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80008d0:	0913      	lsrs	r3, r2, #4
 80008d2:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80008d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80008da:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80008de:	42b5      	cmp	r5, r6
 80008e0:	d1f0      	bne.n	80008c4 <mouseDriver_sendMsg+0x12c>
		buf[8] = (msg->msgid >> 8) & 0xFF;
		buf[9] = (msg->msgid >> 16) & 0xFF;
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80008e2:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 80008e6:	b2ba      	uxth	r2, r7
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
 80008e8:	1e53      	subs	r3, r2, #1
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b1a2      	cbz	r2, 8000918 <mouseDriver_sendMsg+0x180>
 80008ee:	aa7e      	add	r2, sp, #504	; 0x1f8
 80008f0:	4413      	add	r3, r2
 80008f2:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 80008f6:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80008f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80008fc:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80008fe:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000902:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000904:	091a      	lsrs	r2, r3, #4
 8000906:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800090a:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 800090e:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8000912:	b299      	uxth	r1, r3
	while (length--) {
 8000914:	42b5      	cmp	r5, r6
 8000916:	d1ef      	bne.n	80008f8 <mouseDriver_sendMsg+0x160>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000918:	f081 0389 	eor.w	r3, r1, #137	; 0x89
        tmp ^= (tmp<<4);
 800091c:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8000920:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000922:	0913      	lsrs	r3, r2, #4
 8000924:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000928:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 800092c:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8000930:	b21b      	sxth	r3, r3
 8000932:	b29a      	uxth	r2, r3
	crc_accumulate(crc_extra, &checksum);
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000934:	a938      	add	r1, sp, #224	; 0xe0
 8000936:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000938:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 800093c:	0a15      	lsrs	r5, r2, #8
 800093e:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 8000942:	54cd      	strb	r5, [r1, r3]

	msg->checksum = checksum;
 8000944:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4

	if (signing) {
 8000948:	2800      	cmp	r0, #0
 800094a:	d177      	bne.n	8000a3c <mouseDriver_sendMsg+0x2a4>
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
	}
	
	return msg->len + header_len + 2 + signature_len;
 800094c:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
{
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000950:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8000954:	29fe      	cmp	r1, #254	; 0xfe
 8000956:	f000 810d 	beq.w	8000b74 <mouseDriver_sendMsg+0x3dc>
	while (length > 1 && payload[length-1] == 0) {
 800095a:	2c01      	cmp	r4, #1
 800095c:	d911      	bls.n	8000982 <mouseDriver_sendMsg+0x1ea>
 800095e:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8000962:	5d1b      	ldrb	r3, [r3, r4]
 8000964:	b96b      	cbnz	r3, 8000982 <mouseDriver_sendMsg+0x1ea>
 8000966:	1e63      	subs	r3, r4, #1
 8000968:	aa7e      	add	r2, sp, #504	; 0x1f8
 800096a:	fa52 f383 	uxtab	r3, r2, r3
 800096e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8000972:	3c01      	subs	r4, #1
 8000974:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8000976:	2c01      	cmp	r4, #1
 8000978:	d003      	beq.n	8000982 <mouseDriver_sendMsg+0x1ea>
 800097a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800097e:	2a00      	cmp	r2, #0
 8000980:	d0f7      	beq.n	8000972 <mouseDriver_sendMsg+0x1da>
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
		ck = buf + header_len + 1 + (uint16_t)msg->len;
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
		header_len = MAVLINK_CORE_HEADER_LEN;
		buf[0] = msg->magic;
 8000982:	4d2d      	ldr	r5, [pc, #180]	; (8000a38 <mouseDriver_sendMsg+0x2a0>)
 8000984:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8000986:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8000988:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 800098c:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 800098e:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8000992:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8000994:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8000998:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 800099a:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 800099e:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 80009a0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80009a4:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 80009a6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80009a8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80009ac:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80009ae:	121a      	asrs	r2, r3, #8
 80009b0:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80009b2:	141b      	asrs	r3, r3, #16
 80009b4:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80009b6:	4622      	mov	r2, r4
 80009b8:	a938      	add	r1, sp, #224	; 0xe0
 80009ba:	f105 000a 	add.w	r0, r5, #10
 80009be:	f006 feb2 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80009c2:	f104 020a 	add.w	r2, r4, #10
 80009c6:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80009c8:	f016 0f01 	tst.w	r6, #1
 80009cc:	f041 84a1 	bne.w	8002312 <mouseDriver_sendMsg+0x1b7a>
		header_len = MAVLINK_CORE_HEADER_LEN;
 80009d0:	2109      	movs	r1, #9
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80009d2:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 80009d6:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80009d8:	0a12      	lsrs	r2, r2, #8
 80009da:	705a      	strb	r2, [r3, #1]
 80009dc:	2300      	movs	r3, #0
	if (signature_len > 0) {
		memcpy(&ck[2], msg->signature, signature_len);
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80009de:	4421      	add	r1, r4
 80009e0:	3103      	adds	r1, #3
 80009e2:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 80009e4:	b289      	uxth	r1, r1
 80009e6:	4814      	ldr	r0, [pc, #80]	; (8000a38 <mouseDriver_sendMsg+0x2a0>)
 80009e8:	f001 ff58 	bl	800289c <main_transmit_buffer>
}
 80009ec:	b07e      	add	sp, #504	; 0x1f8
 80009ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80009f2:	2000      	movs	r0, #0
 80009f4:	e70b      	b.n	800080e <mouseDriver_sendMsg+0x76>
	while (length > 1 && payload[length-1] == 0) {
 80009f6:	2305      	movs	r3, #5
 80009f8:	e721      	b.n	800083e <mouseDriver_sendMsg+0xa6>
		length--;
 80009fa:	2304      	movs	r3, #4
 80009fc:	e71f      	b.n	800083e <mouseDriver_sendMsg+0xa6>
 80009fe:	2303      	movs	r3, #3
 8000a00:	e71d      	b.n	800083e <mouseDriver_sendMsg+0xa6>
	if (signing) {
 8000a02:	240a      	movs	r4, #10
 8000a04:	e736      	b.n	8000874 <mouseDriver_sendMsg+0xdc>
		buf[2] = msg->incompat_flags;
 8000a06:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 8000a0a:	f88d 3016 	strb.w	r3, [sp, #22]
		buf[3] = msg->compat_flags;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->seq;
 8000a14:	f88d 2018 	strb.w	r2, [sp, #24]
		buf[5] = msg->sysid;
 8000a18:	f88d 3019 	strb.w	r3, [sp, #25]
		buf[6] = msg->compid;
 8000a1c:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[7] = msg->msgid & 0xFF;
 8000a20:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000a24:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000a28:	f88d 301d 	strb.w	r3, [sp, #29]
 8000a2c:	e740      	b.n	80008b0 <mouseDriver_sendMsg+0x118>
 8000a2e:	bf00      	nop
 8000a30:	20000091 	.word	0x20000091
 8000a34:	200000bc 	.word	0x200000bc
 8000a38:	2000011c 	.word	0x2000011c
		mavlink_sign_packet(status->signing,
 8000a3c:	4b7b      	ldr	r3, [pc, #492]	; (8000c2c <mouseDriver_sendMsg+0x494>)
 8000a3e:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d083      	beq.n	800094c <mouseDriver_sendMsg+0x1b4>
 8000a44:	782a      	ldrb	r2, [r5, #0]
 8000a46:	f012 0f01 	tst.w	r2, #1
 8000a4a:	f43f af7f 	beq.w	800094c <mouseDriver_sendMsg+0x1b4>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000a4e:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8000a52:	786a      	ldrb	r2, [r5, #1]
 8000a54:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8000a58:	68aa      	ldr	r2, [r5, #8]
 8000a5a:	68e9      	ldr	r1, [r5, #12]
 8000a5c:	9202      	str	r2, [sp, #8]
 8000a5e:	9103      	str	r1, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8000a60:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 8000a64:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000a68:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8000a6c:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8000a70:	1c42      	adds	r2, r0, #1
 8000a72:	f141 0300 	adc.w	r3, r1, #0
 8000a76:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 8000a7a:	2700      	movs	r7, #0
 8000a7c:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8000a7e:	4a6c      	ldr	r2, [pc, #432]	; (8000c30 <mouseDriver_sendMsg+0x498>)
 8000a80:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8000a82:	4a6c      	ldr	r2, [pc, #432]	; (8000c34 <mouseDriver_sendMsg+0x49c>)
 8000a84:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8000a86:	4a6c      	ldr	r2, [pc, #432]	; (8000c38 <mouseDriver_sendMsg+0x4a0>)
 8000a88:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8000a8a:	4a6c      	ldr	r2, [pc, #432]	; (8000c3c <mouseDriver_sendMsg+0x4a4>)
 8000a8c:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 8000a8e:	4a6c      	ldr	r2, [pc, #432]	; (8000c40 <mouseDriver_sendMsg+0x4a8>)
 8000a90:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8000a92:	4a6c      	ldr	r2, [pc, #432]	; (8000c44 <mouseDriver_sendMsg+0x4ac>)
 8000a94:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8000a96:	4a6c      	ldr	r2, [pc, #432]	; (8000c48 <mouseDriver_sendMsg+0x4b0>)
 8000a98:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8000a9a:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8000a9e:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 8000aa2:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 8000aa6:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 8000aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aac:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 8000aae:	ae25      	add	r6, sp, #148	; 0x94
 8000ab0:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8000ab4:	6869      	ldr	r1, [r5, #4]
 8000ab6:	68aa      	ldr	r2, [r5, #8]
 8000ab8:	68eb      	ldr	r3, [r5, #12]
 8000aba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000abc:	6928      	ldr	r0, [r5, #16]
 8000abe:	6969      	ldr	r1, [r5, #20]
 8000ac0:	69aa      	ldr	r2, [r5, #24]
 8000ac2:	69eb      	ldr	r3, [r5, #28]
 8000ac4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8000ac6:	4622      	mov	r2, r4
 8000ac8:	a905      	add	r1, sp, #20
 8000aca:	a81b      	add	r0, sp, #108	; 0x6c
 8000acc:	f7ff fd50 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000ad0:	4642      	mov	r2, r8
 8000ad2:	a938      	add	r1, sp, #224	; 0xe0
 8000ad4:	a81b      	add	r0, sp, #108	; 0x6c
 8000ad6:	f7ff fd4b 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000ada:	2202      	movs	r2, #2
 8000adc:	ab38      	add	r3, sp, #224	; 0xe0
 8000ade:	eb03 0108 	add.w	r1, r3, r8
 8000ae2:	a81b      	add	r0, sp, #108	; 0x6c
 8000ae4:	f7ff fd44 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000ae8:	2207      	movs	r2, #7
 8000aea:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8000aee:	a81b      	add	r0, sp, #108	; 0x6c
 8000af0:	f7ff fd3e 	bl	8000570 <mavlink_sha256_update>
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000af4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000af6:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000afa:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8000afe:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000b08:	2247      	movs	r2, #71	; 0x47
 8000b0a:	4639      	mov	r1, r7
 8000b0c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8000b10:	f006 fe14 	bl	800773c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000b14:	ab09      	add	r3, sp, #36	; 0x24
 8000b16:	442b      	add	r3, r5
 8000b18:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000b1a:	0a22      	lsrs	r2, r4, #8
 8000b1c:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000b1e:	0c22      	lsrs	r2, r4, #16
 8000b20:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000b22:	0e24      	lsrs	r4, r4, #24
 8000b24:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000b26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8000b28:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000b2a:	0a11      	lsrs	r1, r2, #8
 8000b2c:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000b2e:	0c11      	lsrs	r1, r2, #16
 8000b30:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	705a      	strb	r2, [r3, #1]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000b36:	f105 0209 	add.w	r2, r5, #9
 8000b3a:	a909      	add	r1, sp, #36	; 0x24
 8000b3c:	a81b      	add	r0, sp, #108	; 0x6c
 8000b3e:	f7ff fd17 	bl	8000570 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000b42:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8000b46:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8000b4a:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8000b4e:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8000b52:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8000b56:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8000b5a:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8000b5e:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8000b62:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8000b66:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8000b6a:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8000b6e:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8000b72:	e6eb      	b.n	800094c <mouseDriver_sendMsg+0x1b4>
		buf[0] = msg->magic;
 8000b74:	4d35      	ldr	r5, [pc, #212]	; (8000c4c <mouseDriver_sendMsg+0x4b4>)
 8000b76:	23fe      	movs	r3, #254	; 0xfe
 8000b78:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8000b7a:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8000b7c:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8000b80:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8000b82:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8000b86:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8000b88:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8000b8c:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8000b8e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8000b90:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000b94:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8000b96:	4622      	mov	r2, r4
 8000b98:	a938      	add	r1, sp, #224	; 0xe0
 8000b9a:	1da8      	adds	r0, r5, #6
 8000b9c:	f006 fdc3 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8000ba0:	1da3      	adds	r3, r4, #6
 8000ba2:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	e714      	b.n	80009d2 <mouseDriver_sendMsg+0x23a>
 * @param msg The MAVLink message to compress the data into
 * @param speed_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_setpoint_t* speed_setpoint)
{
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y);
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <mouseDriver_sendMsg+0x4b8>)
 8000baa:	6851      	ldr	r1, [r2, #4]
    packet.setpoint_x = setpoint_x;
 8000bac:	ab02      	add	r3, sp, #8
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	9202      	str	r2, [sp, #8]
    packet.setpoint_y = setpoint_y;
 8000bb2:	9103      	str	r1, [sp, #12]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8000bb4:	aa38      	add	r2, sp, #224	; 0xe0
 8000bb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bba:	e882 0003 	stmia.w	r2, {r0, r1}
    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8000bc6:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 8000bca:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <mouseDriver_sendMsg+0x494>)
 8000bd0:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000bd2:	ea13 0602 	ands.w	r6, r3, r2
 8000bd6:	d13d      	bne.n	8000c54 <mouseDriver_sendMsg+0x4bc>
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <mouseDriver_sendMsg+0x494>)
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	b123      	cbz	r3, 8000be8 <mouseDriver_sendMsg+0x450>
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	f013 0f01 	tst.w	r3, #1
 8000be4:	f041 843f 	bne.w	8002466 <mouseDriver_sendMsg+0x1cce>
		msg->magic = MAVLINK_STX;
 8000be8:	23fd      	movs	r3, #253	; 0xfd
 8000bea:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8000bee:	f89d 30e7 	ldrb.w	r3, [sp, #231]	; 0xe7
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 80f8 	bne.w	8000de8 <mouseDriver_sendMsg+0x650>
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f10d 02e7 	add.w	r2, sp, #231	; 0xe7
		length--;
 8000bfe:	2307      	movs	r3, #7
	while (length > 1 && payload[length-1] == 0) {
 8000c00:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8000c04:	b919      	cbnz	r1, 8000c0e <mouseDriver_sendMsg+0x476>
		length--;
 8000c06:	3b01      	subs	r3, #1
 8000c08:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d1f8      	bne.n	8000c00 <mouseDriver_sendMsg+0x468>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000c0e:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8000c12:	2200      	movs	r2, #0
 8000c14:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8000c18:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	f000 80e6 	beq.w	8000dee <mouseDriver_sendMsg+0x656>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000c22:	2201      	movs	r2, #1
 8000c24:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 8000c28:	240a      	movs	r4, #10
 8000c2a:	e022      	b.n	8000c72 <mouseDriver_sendMsg+0x4da>
 8000c2c:	200000bc 	.word	0x200000bc
 8000c30:	6a09e667 	.word	0x6a09e667
 8000c34:	bb67ae85 	.word	0xbb67ae85
 8000c38:	3c6ef372 	.word	0x3c6ef372
 8000c3c:	a54ff53a 	.word	0xa54ff53a
 8000c40:	510e527f 	.word	0x510e527f
 8000c44:	9b05688c 	.word	0x9b05688c
 8000c48:	1f83d9ab 	.word	0x1f83d9ab
 8000c4c:	2000011c 	.word	0x2000011c
 8000c50:	200000b4 	.word	0x200000b4
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000c54:	23fe      	movs	r3, #254	; 0xfe
 8000c56:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8000c60:	2000      	movs	r0, #0
 8000c62:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8000c66:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000c6a:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8000c72:	2200      	movs	r2, #0
 8000c74:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 8000c78:	49c3      	ldr	r1, [pc, #780]	; (8000f88 <mouseDriver_sendMsg+0x7f0>)
 8000c7a:	798a      	ldrb	r2, [r1, #6]
 8000c7c:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8000c80:	1c55      	adds	r5, r2, #1
 8000c82:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8000c84:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8000c88:	f88d 1014 	strb.w	r1, [sp, #20]
	buf[1] = msg->len;
 8000c8c:	f88d 3015 	strb.w	r3, [sp, #21]
	if (mavlink1) {
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	f000 80ae 	beq.w	8000df2 <mouseDriver_sendMsg+0x65a>
		buf[2] = msg->seq;
 8000c96:	f88d 2016 	strb.w	r2, [sp, #22]
		buf[3] = msg->sysid;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->compid;
 8000ca0:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	f88d 3019 	strb.w	r3, [sp, #25]
	while (length--) {
 8000caa:	1ea6      	subs	r6, r4, #2
 8000cac:	b2b6      	uxth	r6, r6
 8000cae:	ab7e      	add	r3, sp, #504	; 0x1f8
 8000cb0:	441e      	add	r6, r3
 8000cb2:	f5a6 76f1 	sub.w	r6, r6, #482	; 0x1e2
        *crcAccum = X25_INIT_CRC;
 8000cb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8000cba:	f10d 0515 	add.w	r5, sp, #21
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000cbe:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000cc2:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8000cc4:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8000cc8:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000cca:	0913      	lsrs	r3, r2, #4
 8000ccc:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000cd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000cd4:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8000cd8:	42b5      	cmp	r5, r6
 8000cda:	d1f0      	bne.n	8000cbe <mouseDriver_sendMsg+0x526>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8000cdc:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 8000ce0:	b2ba      	uxth	r2, r7
	while (length--) {
 8000ce2:	1e53      	subs	r3, r2, #1
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	b1a2      	cbz	r2, 8000d12 <mouseDriver_sendMsg+0x57a>
 8000ce8:	aa7e      	add	r2, sp, #504	; 0x1f8
 8000cea:	4413      	add	r3, r2
 8000cec:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000cf0:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000cf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000cf6:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8000cf8:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000cfc:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000cfe:	091a      	lsrs	r2, r3, #4
 8000d00:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000d04:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8000d08:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8000d0c:	b299      	uxth	r1, r3
	while (length--) {
 8000d0e:	42b5      	cmp	r5, r6
 8000d10:	d1ef      	bne.n	8000cf2 <mouseDriver_sendMsg+0x55a>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000d12:	f081 0326 	eor.w	r3, r1, #38	; 0x26
        tmp ^= (tmp<<4);
 8000d16:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8000d1a:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000d1c:	0913      	lsrs	r3, r2, #4
 8000d1e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000d22:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8000d26:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000d2e:	a938      	add	r1, sp, #224	; 0xe0
 8000d30:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000d32:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 8000d36:	0a15      	lsrs	r5, r2, #8
 8000d38:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 8000d3c:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8000d3e:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 8000d42:	2800      	cmp	r0, #0
 8000d44:	d16a      	bne.n	8000e1c <mouseDriver_sendMsg+0x684>
	return msg->len + header_len + 2 + signature_len;
 8000d46:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000d4a:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8000d4e:	29fe      	cmp	r1, #254	; 0xfe
 8000d50:	f000 80ff 	beq.w	8000f52 <mouseDriver_sendMsg+0x7ba>
	while (length > 1 && payload[length-1] == 0) {
 8000d54:	2c01      	cmp	r4, #1
 8000d56:	d911      	bls.n	8000d7c <mouseDriver_sendMsg+0x5e4>
 8000d58:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8000d5c:	5d1b      	ldrb	r3, [r3, r4]
 8000d5e:	b96b      	cbnz	r3, 8000d7c <mouseDriver_sendMsg+0x5e4>
 8000d60:	1e63      	subs	r3, r4, #1
 8000d62:	aa7e      	add	r2, sp, #504	; 0x1f8
 8000d64:	fa52 f383 	uxtab	r3, r2, r3
 8000d68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8000d6c:	3c01      	subs	r4, #1
 8000d6e:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8000d70:	2c01      	cmp	r4, #1
 8000d72:	d003      	beq.n	8000d7c <mouseDriver_sendMsg+0x5e4>
 8000d74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	d0f7      	beq.n	8000d6c <mouseDriver_sendMsg+0x5d4>
		buf[0] = msg->magic;
 8000d7c:	4d83      	ldr	r5, [pc, #524]	; (8000f8c <mouseDriver_sendMsg+0x7f4>)
 8000d7e:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8000d80:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8000d82:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 8000d86:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8000d88:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8000d8c:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8000d8e:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8000d92:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8000d94:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8000d98:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8000d9a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8000d9e:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8000da0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8000da2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000da6:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000da8:	121a      	asrs	r2, r3, #8
 8000daa:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000dac:	141b      	asrs	r3, r3, #16
 8000dae:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8000db0:	4622      	mov	r2, r4
 8000db2:	a938      	add	r1, sp, #224	; 0xe0
 8000db4:	f105 000a 	add.w	r0, r5, #10
 8000db8:	f006 fcb5 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8000dbc:	f104 020a 	add.w	r2, r4, #10
 8000dc0:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8000dc2:	f016 0f01 	tst.w	r6, #1
 8000dc6:	f041 82bb 	bne.w	8002340 <mouseDriver_sendMsg+0x1ba8>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8000dca:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8000dcc:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8000dd0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8000dd2:	0a12      	lsrs	r2, r2, #8
 8000dd4:	705a      	strb	r2, [r3, #1]
 8000dd6:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8000dd8:	4421      	add	r1, r4
 8000dda:	3103      	adds	r1, #3
 8000ddc:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 8000dde:	b289      	uxth	r1, r1
 8000de0:	486a      	ldr	r0, [pc, #424]	; (8000f8c <mouseDriver_sendMsg+0x7f4>)
 8000de2:	f001 fd5b 	bl	800289c <main_transmit_buffer>
			break;
 8000de6:	e601      	b.n	80009ec <mouseDriver_sendMsg+0x254>
	while (length > 1 && payload[length-1] == 0) {
 8000de8:	2000      	movs	r0, #0
 8000dea:	2308      	movs	r3, #8
 8000dec:	e70f      	b.n	8000c0e <mouseDriver_sendMsg+0x476>
	if (signing) {
 8000dee:	240a      	movs	r4, #10
 8000df0:	e73c      	b.n	8000c6c <mouseDriver_sendMsg+0x4d4>
		buf[2] = msg->incompat_flags;
 8000df2:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 8000df6:	f88d 3016 	strb.w	r3, [sp, #22]
		buf[3] = msg->compat_flags;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->seq;
 8000e00:	f88d 2018 	strb.w	r2, [sp, #24]
		buf[5] = msg->sysid;
 8000e04:	f88d 3019 	strb.w	r3, [sp, #25]
		buf[6] = msg->compid;
 8000e08:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[7] = msg->msgid & 0xFF;
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	f88d 201b 	strb.w	r2, [sp, #27]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000e12:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000e16:	f88d 301d 	strb.w	r3, [sp, #29]
 8000e1a:	e746      	b.n	8000caa <mouseDriver_sendMsg+0x512>
		mavlink_sign_packet(status->signing,
 8000e1c:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <mouseDriver_sendMsg+0x7f0>)
 8000e1e:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000e20:	2d00      	cmp	r5, #0
 8000e22:	d090      	beq.n	8000d46 <mouseDriver_sendMsg+0x5ae>
 8000e24:	782a      	ldrb	r2, [r5, #0]
 8000e26:	f012 0f01 	tst.w	r2, #1
 8000e2a:	d08c      	beq.n	8000d46 <mouseDriver_sendMsg+0x5ae>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000e2c:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8000e30:	786a      	ldrb	r2, [r5, #1]
 8000e32:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8000e36:	68aa      	ldr	r2, [r5, #8]
 8000e38:	68e9      	ldr	r1, [r5, #12]
 8000e3a:	9200      	str	r2, [sp, #0]
 8000e3c:	9101      	str	r1, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8000e3e:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 8000e42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8000e46:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8000e4a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8000e4e:	1c42      	adds	r2, r0, #1
 8000e50:	f141 0300 	adc.w	r3, r1, #0
 8000e54:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 8000e58:	2700      	movs	r7, #0
 8000e5a:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <mouseDriver_sendMsg+0x7f8>)
 8000e5e:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8000e60:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <mouseDriver_sendMsg+0x7fc>)
 8000e62:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8000e64:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <mouseDriver_sendMsg+0x800>)
 8000e66:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8000e68:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <mouseDriver_sendMsg+0x804>)
 8000e6a:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 8000e6c:	4a4c      	ldr	r2, [pc, #304]	; (8000fa0 <mouseDriver_sendMsg+0x808>)
 8000e6e:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8000e70:	4a4c      	ldr	r2, [pc, #304]	; (8000fa4 <mouseDriver_sendMsg+0x80c>)
 8000e72:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <mouseDriver_sendMsg+0x810>)
 8000e76:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8000e78:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8000e7c:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 8000e80:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 8000e84:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 8000e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e8a:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 8000e8c:	ae25      	add	r6, sp, #148	; 0x94
 8000e8e:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8000e92:	6869      	ldr	r1, [r5, #4]
 8000e94:	68aa      	ldr	r2, [r5, #8]
 8000e96:	68eb      	ldr	r3, [r5, #12]
 8000e98:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e9a:	6928      	ldr	r0, [r5, #16]
 8000e9c:	6969      	ldr	r1, [r5, #20]
 8000e9e:	69aa      	ldr	r2, [r5, #24]
 8000ea0:	69eb      	ldr	r3, [r5, #28]
 8000ea2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8000ea4:	4622      	mov	r2, r4
 8000ea6:	a905      	add	r1, sp, #20
 8000ea8:	a81b      	add	r0, sp, #108	; 0x6c
 8000eaa:	f7ff fb61 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000eae:	4642      	mov	r2, r8
 8000eb0:	a938      	add	r1, sp, #224	; 0xe0
 8000eb2:	a81b      	add	r0, sp, #108	; 0x6c
 8000eb4:	f7ff fb5c 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000eb8:	2202      	movs	r2, #2
 8000eba:	ab38      	add	r3, sp, #224	; 0xe0
 8000ebc:	eb03 0108 	add.w	r1, r3, r8
 8000ec0:	a81b      	add	r0, sp, #108	; 0x6c
 8000ec2:	f7ff fb55 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8000ecc:	a81b      	add	r0, sp, #108	; 0x6c
 8000ece:	f7ff fb4f 	bl	8000570 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8000ed2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000ed4:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000ed8:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8000edc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000ee6:	2247      	movs	r2, #71	; 0x47
 8000ee8:	4639      	mov	r1, r7
 8000eea:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8000eee:	f006 fc25 	bl	800773c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000ef2:	ab09      	add	r3, sp, #36	; 0x24
 8000ef4:	442b      	add	r3, r5
 8000ef6:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000ef8:	0a22      	lsrs	r2, r4, #8
 8000efa:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000efc:	0c22      	lsrs	r2, r4, #16
 8000efe:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000f00:	0e24      	lsrs	r4, r4, #24
 8000f02:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000f04:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8000f06:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000f08:	0a11      	lsrs	r1, r2, #8
 8000f0a:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000f10:	0e12      	lsrs	r2, r2, #24
 8000f12:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8000f14:	f105 0209 	add.w	r2, r5, #9
 8000f18:	a909      	add	r1, sp, #36	; 0x24
 8000f1a:	a81b      	add	r0, sp, #108	; 0x6c
 8000f1c:	f7ff fb28 	bl	8000570 <mavlink_sha256_update>
    result[0] = p[3];
 8000f20:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8000f24:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8000f28:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8000f2c:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8000f30:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8000f34:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8000f38:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8000f3c:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8000f40:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8000f44:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8000f48:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8000f4c:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8000f50:	e6f9      	b.n	8000d46 <mouseDriver_sendMsg+0x5ae>
		buf[0] = msg->magic;
 8000f52:	4d0e      	ldr	r5, [pc, #56]	; (8000f8c <mouseDriver_sendMsg+0x7f4>)
 8000f54:	23fe      	movs	r3, #254	; 0xfe
 8000f56:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8000f58:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8000f5a:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8000f5e:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8000f60:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8000f64:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8000f66:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8000f6a:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8000f6c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8000f6e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000f72:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8000f74:	4622      	mov	r2, r4
 8000f76:	a938      	add	r1, sp, #224	; 0xe0
 8000f78:	1da8      	adds	r0, r5, #6
 8000f7a:	f006 fbd4 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8000f7e:	1da3      	adds	r3, r4, #6
 8000f80:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000f82:	2105      	movs	r1, #5
 8000f84:	e722      	b.n	8000dcc <mouseDriver_sendMsg+0x634>
 8000f86:	bf00      	nop
 8000f88:	200000bc 	.word	0x200000bc
 8000f8c:	2000011c 	.word	0x2000011c
 8000f90:	6a09e667 	.word	0x6a09e667
 8000f94:	bb67ae85 	.word	0xbb67ae85
 8000f98:	3c6ef372 	.word	0x3c6ef372
 8000f9c:	a54ff53a 	.word	0xa54ff53a
 8000fa0:	510e527f 	.word	0x510e527f
 8000fa4:	9b05688c 	.word	0x9b05688c
 8000fa8:	1f83d9ab 	.word	0x1f83d9ab
 * @param msg The MAVLink message to compress the data into
 * @param motor_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_motor_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_motor_setpoint_t* motor_setpoint)
{
    return mavlink_msg_motor_setpoint_pack(system_id, component_id, msg, motor_setpoint->time, motor_setpoint->motor_x, motor_setpoint->motor_y);
 8000fac:	4a93      	ldr	r2, [pc, #588]	; (80011fc <mouseDriver_sendMsg+0xa64>)
 8000fae:	6850      	ldr	r0, [r2, #4]
 8000fb0:	6891      	ldr	r1, [r2, #8]
    packet.time = time;
 8000fb2:	ab05      	add	r3, sp, #20
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	9205      	str	r2, [sp, #20]
    packet.motor_x = motor_x;
 8000fb8:	9006      	str	r0, [sp, #24]
    packet.motor_y = motor_y;
 8000fba:	9107      	str	r1, [sp, #28]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
 8000fbc:	ac38      	add	r4, sp, #224	; 0xe0
 8000fbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_MOTOR_SETPOINT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2204      	movs	r2, #4
 8000fca:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8000fce:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 8000fd2:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000fd6:	4b8a      	ldr	r3, [pc, #552]	; (8001200 <mouseDriver_sendMsg+0xa68>)
 8000fd8:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000fda:	f013 0602 	ands.w	r6, r3, #2
 8000fde:	d129      	bne.n	8001034 <mouseDriver_sendMsg+0x89c>
 8000fe0:	4b87      	ldr	r3, [pc, #540]	; (8001200 <mouseDriver_sendMsg+0xa68>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	b123      	cbz	r3, 8000ff0 <mouseDriver_sendMsg+0x858>
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f013 0f01 	tst.w	r3, #1
 8000fec:	f041 8250 	bne.w	8002490 <mouseDriver_sendMsg+0x1cf8>
		msg->magic = MAVLINK_STX;
 8000ff0:	23fd      	movs	r3, #253	; 0xfd
 8000ff2:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8000ff6:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 80e4 	bne.w	80011c8 <mouseDriver_sendMsg+0xa30>
 8001000:	2000      	movs	r0, #0
 8001002:	f10d 02eb 	add.w	r2, sp, #235	; 0xeb
		length--;
 8001006:	230b      	movs	r3, #11
	while (length > 1 && payload[length-1] == 0) {
 8001008:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 800100c:	b919      	cbnz	r1, 8001016 <mouseDriver_sendMsg+0x87e>
		length--;
 800100e:	3b01      	subs	r3, #1
 8001010:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8001012:	2b01      	cmp	r3, #1
 8001014:	d1f8      	bne.n	8001008 <mouseDriver_sendMsg+0x870>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001016:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 800101a:	2200      	movs	r2, #0
 800101c:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001020:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8001024:	2800      	cmp	r0, #0
 8001026:	f000 80d2 	beq.w	80011ce <mouseDriver_sendMsg+0xa36>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 800102a:	2201      	movs	r2, #1
 800102c:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 8001030:	240a      	movs	r4, #10
 8001032:	e00e      	b.n	8001052 <mouseDriver_sendMsg+0x8ba>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001034:	23fe      	movs	r3, #254	; 0xfe
 8001036:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800103a:	230c      	movs	r3, #12
 800103c:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001040:	2000      	movs	r0, #0
 8001042:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001046:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800104a:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 800104c:	2200      	movs	r2, #0
 800104e:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8001052:	2200      	movs	r2, #0
 8001054:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 8001058:	4969      	ldr	r1, [pc, #420]	; (8001200 <mouseDriver_sendMsg+0xa68>)
 800105a:	798a      	ldrb	r2, [r1, #6]
 800105c:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8001060:	1c55      	adds	r5, r2, #1
 8001062:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8001064:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8001068:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 800106c:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 8001070:	2e00      	cmp	r6, #0
 8001072:	f000 80ae 	beq.w	80011d2 <mouseDriver_sendMsg+0xa3a>
		buf[2] = msg->seq;
 8001076:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 800107a:	2300      	movs	r3, #0
 800107c:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 8001080:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 8001084:	2304      	movs	r3, #4
 8001086:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 800108a:	1ea6      	subs	r6, r4, #2
 800108c:	b2b6      	uxth	r6, r6
 800108e:	ab7e      	add	r3, sp, #504	; 0x1f8
 8001090:	441e      	add	r6, r3
 8001092:	f5a6 76f7 	sub.w	r6, r6, #494	; 0x1ee
        *crcAccum = X25_INIT_CRC;
 8001096:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 800109a:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800109e:	f815 2b01 	ldrb.w	r2, [r5], #1
 80010a2:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 80010a4:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80010a8:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80010aa:	0913      	lsrs	r3, r2, #4
 80010ac:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80010b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80010b4:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80010b8:	42b5      	cmp	r5, r6
 80010ba:	d1f0      	bne.n	800109e <mouseDriver_sendMsg+0x906>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80010bc:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 80010c0:	b2ba      	uxth	r2, r7
	while (length--) {
 80010c2:	1e53      	subs	r3, r2, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	b1a2      	cbz	r2, 80010f2 <mouseDriver_sendMsg+0x95a>
 80010c8:	aa7e      	add	r2, sp, #504	; 0x1f8
 80010ca:	4413      	add	r3, r2
 80010cc:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 80010d0:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80010d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80010d6:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80010d8:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80010dc:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80010de:	091a      	lsrs	r2, r3, #4
 80010e0:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80010e4:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 80010e8:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 80010ec:	b299      	uxth	r1, r3
	while (length--) {
 80010ee:	42b5      	cmp	r5, r6
 80010f0:	d1ef      	bne.n	80010d2 <mouseDriver_sendMsg+0x93a>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80010f2:	f081 0370 	eor.w	r3, r1, #112	; 0x70
        tmp ^= (tmp<<4);
 80010f6:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80010fa:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80010fc:	0913      	lsrs	r3, r2, #4
 80010fe:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001102:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8001106:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 800110a:	b21b      	sxth	r3, r3
 800110c:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800110e:	a938      	add	r1, sp, #224	; 0xe0
 8001110:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001112:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 8001116:	0a15      	lsrs	r5, r2, #8
 8001118:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 800111c:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 800111e:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 8001122:	2800      	cmp	r0, #0
 8001124:	d170      	bne.n	8001208 <mouseDriver_sendMsg+0xa70>
	return msg->len + header_len + 2 + signature_len;
 8001126:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800112a:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 800112e:	29fe      	cmp	r1, #254	; 0xfe
 8001130:	f000 8105 	beq.w	800133e <mouseDriver_sendMsg+0xba6>
	while (length > 1 && payload[length-1] == 0) {
 8001134:	2c01      	cmp	r4, #1
 8001136:	d911      	bls.n	800115c <mouseDriver_sendMsg+0x9c4>
 8001138:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 800113c:	5d1b      	ldrb	r3, [r3, r4]
 800113e:	b96b      	cbnz	r3, 800115c <mouseDriver_sendMsg+0x9c4>
 8001140:	1e63      	subs	r3, r4, #1
 8001142:	aa7e      	add	r2, sp, #504	; 0x1f8
 8001144:	fa52 f383 	uxtab	r3, r2, r3
 8001148:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 800114c:	3c01      	subs	r4, #1
 800114e:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8001150:	2c01      	cmp	r4, #1
 8001152:	d003      	beq.n	800115c <mouseDriver_sendMsg+0x9c4>
 8001154:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001158:	2a00      	cmp	r2, #0
 800115a:	d0f7      	beq.n	800114c <mouseDriver_sendMsg+0x9b4>
		buf[0] = msg->magic;
 800115c:	4d29      	ldr	r5, [pc, #164]	; (8001204 <mouseDriver_sendMsg+0xa6c>)
 800115e:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8001160:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8001162:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 8001166:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8001168:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 800116c:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 800116e:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001172:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8001174:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001178:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 800117a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800117e:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8001180:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001182:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001186:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001188:	121a      	asrs	r2, r3, #8
 800118a:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800118c:	141b      	asrs	r3, r3, #16
 800118e:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001190:	4622      	mov	r2, r4
 8001192:	a938      	add	r1, sp, #224	; 0xe0
 8001194:	f105 000a 	add.w	r0, r5, #10
 8001198:	f006 fac5 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 800119c:	f104 020a 	add.w	r2, r4, #10
 80011a0:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80011a2:	f016 0f01 	tst.w	r6, #1
 80011a6:	f041 80e2 	bne.w	800236e <mouseDriver_sendMsg+0x1bd6>
		header_len = MAVLINK_CORE_HEADER_LEN;
 80011aa:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80011ac:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 80011b0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80011b2:	0a12      	lsrs	r2, r2, #8
 80011b4:	705a      	strb	r2, [r3, #1]
 80011b6:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80011b8:	4421      	add	r1, r4
 80011ba:	3103      	adds	r1, #3
 80011bc:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 80011be:	b289      	uxth	r1, r1
 80011c0:	4810      	ldr	r0, [pc, #64]	; (8001204 <mouseDriver_sendMsg+0xa6c>)
 80011c2:	f001 fb6b 	bl	800289c <main_transmit_buffer>
			break;
 80011c6:	e411      	b.n	80009ec <mouseDriver_sendMsg+0x254>
	while (length > 1 && payload[length-1] == 0) {
 80011c8:	2000      	movs	r0, #0
 80011ca:	230c      	movs	r3, #12
 80011cc:	e723      	b.n	8001016 <mouseDriver_sendMsg+0x87e>
	if (signing) {
 80011ce:	240a      	movs	r4, #10
 80011d0:	e73c      	b.n	800104c <mouseDriver_sendMsg+0x8b4>
		buf[2] = msg->incompat_flags;
 80011d2:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 80011d6:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 80011da:	2300      	movs	r3, #0
 80011dc:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 80011e0:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 80011e4:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 80011e8:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 80011ec:	2204      	movs	r2, #4
 80011ee:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80011f2:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80011f6:	f88d 3011 	strb.w	r3, [sp, #17]
 80011fa:	e746      	b.n	800108a <mouseDriver_sendMsg+0x8f2>
 80011fc:	20000094 	.word	0x20000094
 8001200:	200000bc 	.word	0x200000bc
 8001204:	2000011c 	.word	0x2000011c
		mavlink_sign_packet(status->signing,
 8001208:	4b7d      	ldr	r3, [pc, #500]	; (8001400 <mouseDriver_sendMsg+0xc68>)
 800120a:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 800120c:	2d00      	cmp	r5, #0
 800120e:	d08a      	beq.n	8001126 <mouseDriver_sendMsg+0x98e>
 8001210:	782a      	ldrb	r2, [r5, #0]
 8001212:	f012 0f01 	tst.w	r2, #1
 8001216:	d086      	beq.n	8001126 <mouseDriver_sendMsg+0x98e>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001218:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 800121c:	786a      	ldrb	r2, [r5, #1]
 800121e:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8001222:	68aa      	ldr	r2, [r5, #8]
 8001224:	68e9      	ldr	r1, [r5, #12]
 8001226:	9200      	str	r2, [sp, #0]
 8001228:	9101      	str	r1, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 800122a:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 800122e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001232:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8001236:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 800123a:	1c42      	adds	r2, r0, #1
 800123c:	f141 0300 	adc.w	r3, r1, #0
 8001240:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 8001244:	2700      	movs	r7, #0
 8001246:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8001248:	4a6e      	ldr	r2, [pc, #440]	; (8001404 <mouseDriver_sendMsg+0xc6c>)
 800124a:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 800124c:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <mouseDriver_sendMsg+0xc70>)
 800124e:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8001250:	4a6e      	ldr	r2, [pc, #440]	; (800140c <mouseDriver_sendMsg+0xc74>)
 8001252:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8001254:	4a6e      	ldr	r2, [pc, #440]	; (8001410 <mouseDriver_sendMsg+0xc78>)
 8001256:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 8001258:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <mouseDriver_sendMsg+0xc7c>)
 800125a:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 800125c:	4a6e      	ldr	r2, [pc, #440]	; (8001418 <mouseDriver_sendMsg+0xc80>)
 800125e:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8001260:	4a6e      	ldr	r2, [pc, #440]	; (800141c <mouseDriver_sendMsg+0xc84>)
 8001262:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8001264:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8001268:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 800126c:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 8001270:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 8001272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001276:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 8001278:	ae25      	add	r6, sp, #148	; 0x94
 800127a:	f855 0f10 	ldr.w	r0, [r5, #16]!
 800127e:	6869      	ldr	r1, [r5, #4]
 8001280:	68aa      	ldr	r2, [r5, #8]
 8001282:	68eb      	ldr	r3, [r5, #12]
 8001284:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001286:	6928      	ldr	r0, [r5, #16]
 8001288:	6969      	ldr	r1, [r5, #20]
 800128a:	69aa      	ldr	r2, [r5, #24]
 800128c:	69eb      	ldr	r3, [r5, #28]
 800128e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8001290:	4622      	mov	r2, r4
 8001292:	a902      	add	r1, sp, #8
 8001294:	a81b      	add	r0, sp, #108	; 0x6c
 8001296:	f7ff f96b 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 800129a:	4642      	mov	r2, r8
 800129c:	a938      	add	r1, sp, #224	; 0xe0
 800129e:	a81b      	add	r0, sp, #108	; 0x6c
 80012a0:	f7ff f966 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80012a4:	2202      	movs	r2, #2
 80012a6:	ab38      	add	r3, sp, #224	; 0xe0
 80012a8:	eb03 0108 	add.w	r1, r3, r8
 80012ac:	a81b      	add	r0, sp, #108	; 0x6c
 80012ae:	f7ff f95f 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80012b2:	2207      	movs	r2, #7
 80012b4:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 80012b8:	a81b      	add	r0, sp, #108	; 0x6c
 80012ba:	f7ff f959 	bl	8000570 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 80012be:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80012c0:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80012c4:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 80012c8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80012d2:	2247      	movs	r2, #71	; 0x47
 80012d4:	4639      	mov	r1, r7
 80012d6:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 80012da:	f006 fa2f 	bl	800773c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80012de:	ab09      	add	r3, sp, #36	; 0x24
 80012e0:	442b      	add	r3, r5
 80012e2:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80012e4:	0a22      	lsrs	r2, r4, #8
 80012e6:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80012e8:	0c22      	lsrs	r2, r4, #16
 80012ea:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80012ec:	0e24      	lsrs	r4, r4, #24
 80012ee:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80012f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80012f2:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80012f4:	0a11      	lsrs	r1, r2, #8
 80012f6:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80012f8:	0c11      	lsrs	r1, r2, #16
 80012fa:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80012fc:	0e12      	lsrs	r2, r2, #24
 80012fe:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8001300:	f105 0209 	add.w	r2, r5, #9
 8001304:	a909      	add	r1, sp, #36	; 0x24
 8001306:	a81b      	add	r0, sp, #108	; 0x6c
 8001308:	f7ff f932 	bl	8000570 <mavlink_sha256_update>
    result[0] = p[3];
 800130c:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8001310:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8001314:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8001318:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 800131c:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8001320:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8001324:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8001328:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 800132c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8001330:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8001334:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8001338:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 800133c:	e6f3      	b.n	8001126 <mouseDriver_sendMsg+0x98e>
		buf[0] = msg->magic;
 800133e:	4d38      	ldr	r5, [pc, #224]	; (8001420 <mouseDriver_sendMsg+0xc88>)
 8001340:	23fe      	movs	r3, #254	; 0xfe
 8001342:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8001344:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8001346:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 800134a:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 800134c:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001350:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8001352:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001356:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8001358:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800135a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800135e:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001360:	4622      	mov	r2, r4
 8001362:	a938      	add	r1, sp, #224	; 0xe0
 8001364:	1da8      	adds	r0, r5, #6
 8001366:	f006 f9de 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800136a:	1da3      	adds	r3, r4, #6
 800136c:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800136e:	2105      	movs	r1, #5
 8001370:	e71c      	b.n	80011ac <mouseDriver_sendMsg+0xa14>
	return (HAL_GetTick());
 8001372:	f002 fe33 	bl	8003fdc <HAL_GetTick>
				actual_speed_measure.time = mouseDriver_getTime();
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <mouseDriver_sendMsg+0xc8c>)
 8001378:	6018      	str	r0, [r3, #0]
 * @param msg The MAVLink message to compress the data into
 * @param speed_info C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_info_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_info_t* speed_info)
{
    return mavlink_msg_speed_info_pack(system_id, component_id, msg, speed_info->time, speed_info->speed_x, speed_info->speed_y);
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	689a      	ldr	r2, [r3, #8]
    packet.time = time;
 800137e:	ab05      	add	r3, sp, #20
 8001380:	9005      	str	r0, [sp, #20]
    packet.speed_x = speed_x;
 8001382:	9106      	str	r1, [sp, #24]
    packet.speed_y = speed_y;
 8001384:	9207      	str	r2, [sp, #28]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_INFO_LEN);
 8001386:	ac38      	add	r4, sp, #224	; 0xe0
 8001388:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800138c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_SPEED_INFO;
 8001390:	2300      	movs	r3, #0
 8001392:	2201      	movs	r2, #1
 8001394:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8001398:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 800139c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <mouseDriver_sendMsg+0xc68>)
 80013a2:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80013a4:	f013 0502 	ands.w	r5, r3, #2
 80013a8:	d13e      	bne.n	8001428 <mouseDriver_sendMsg+0xc90>
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <mouseDriver_sendMsg+0xc68>)
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	b123      	cbz	r3, 80013ba <mouseDriver_sendMsg+0xc22>
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	f013 0f01 	tst.w	r3, #1
 80013b6:	f041 8080 	bne.w	80024ba <mouseDriver_sendMsg+0x1d22>
		msg->magic = MAVLINK_STX;
 80013ba:	23fd      	movs	r3, #253	; 0xfd
 80013bc:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 80013c0:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f040 80fa 	bne.w	80015be <mouseDriver_sendMsg+0xe26>
 80013ca:	2000      	movs	r0, #0
 80013cc:	f10d 02eb 	add.w	r2, sp, #235	; 0xeb
		length--;
 80013d0:	230b      	movs	r3, #11
	while (length > 1 && payload[length-1] == 0) {
 80013d2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80013d6:	b919      	cbnz	r1, 80013e0 <mouseDriver_sendMsg+0xc48>
		length--;
 80013d8:	3b01      	subs	r3, #1
 80013da:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d1f8      	bne.n	80013d2 <mouseDriver_sendMsg+0xc3a>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80013e0:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80013e4:	2200      	movs	r2, #0
 80013e6:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80013ea:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 80013ee:	2800      	cmp	r0, #0
 80013f0:	f000 80e8 	beq.w	80015c4 <mouseDriver_sendMsg+0xe2c>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80013f4:	2201      	movs	r2, #1
 80013f6:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 80013fa:	240a      	movs	r4, #10
 80013fc:	e023      	b.n	8001446 <mouseDriver_sendMsg+0xcae>
 80013fe:	bf00      	nop
 8001400:	200000bc 	.word	0x200000bc
 8001404:	6a09e667 	.word	0x6a09e667
 8001408:	bb67ae85 	.word	0xbb67ae85
 800140c:	3c6ef372 	.word	0x3c6ef372
 8001410:	a54ff53a 	.word	0xa54ff53a
 8001414:	510e527f 	.word	0x510e527f
 8001418:	9b05688c 	.word	0x9b05688c
 800141c:	1f83d9ab 	.word	0x1f83d9ab
 8001420:	2000011c 	.word	0x2000011c
 8001424:	200000a8 	.word	0x200000a8
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001428:	23fe      	movs	r3, #254	; 0xfe
 800142a:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800142e:	230c      	movs	r3, #12
 8001430:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001434:	2000      	movs	r0, #0
 8001436:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 800143a:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800143e:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8001440:	2200      	movs	r2, #0
 8001442:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8001446:	2200      	movs	r2, #0
 8001448:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 800144c:	49c3      	ldr	r1, [pc, #780]	; (800175c <mouseDriver_sendMsg+0xfc4>)
 800144e:	798a      	ldrb	r2, [r1, #6]
 8001450:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8001454:	1c56      	adds	r6, r2, #1
 8001456:	718e      	strb	r6, [r1, #6]
	buf[0] = msg->magic;
 8001458:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 800145c:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 8001460:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 8001464:	2d00      	cmp	r5, #0
 8001466:	f000 80af 	beq.w	80015c8 <mouseDriver_sendMsg+0xe30>
		buf[2] = msg->seq;
 800146a:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 800146e:	2300      	movs	r3, #0
 8001470:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 8001474:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 8001478:	2301      	movs	r3, #1
 800147a:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 800147e:	1ea6      	subs	r6, r4, #2
 8001480:	b2b6      	uxth	r6, r6
 8001482:	ab7e      	add	r3, sp, #504	; 0x1f8
 8001484:	441e      	add	r6, r3
 8001486:	f5a6 76f7 	sub.w	r6, r6, #494	; 0x1ee
        *crcAccum = X25_INIT_CRC;
 800148a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 800148e:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001492:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001496:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8001498:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 800149c:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800149e:	0913      	lsrs	r3, r2, #4
 80014a0:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80014a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014a8:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80014ac:	42b5      	cmp	r5, r6
 80014ae:	d1f0      	bne.n	8001492 <mouseDriver_sendMsg+0xcfa>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80014b0:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 80014b4:	b2ba      	uxth	r2, r7
	while (length--) {
 80014b6:	1e53      	subs	r3, r2, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b1a2      	cbz	r2, 80014e6 <mouseDriver_sendMsg+0xd4e>
 80014bc:	aa7e      	add	r2, sp, #504	; 0x1f8
 80014be:	4413      	add	r3, r2
 80014c0:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 80014c4:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80014c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80014ca:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80014cc:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80014d0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80014d2:	091a      	lsrs	r2, r3, #4
 80014d4:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80014d8:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 80014dc:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 80014e0:	b299      	uxth	r1, r3
	while (length--) {
 80014e2:	42b5      	cmp	r5, r6
 80014e4:	d1ef      	bne.n	80014c6 <mouseDriver_sendMsg+0xd2e>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80014e6:	f081 034c 	eor.w	r3, r1, #76	; 0x4c
        tmp ^= (tmp<<4);
 80014ea:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80014ee:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80014f0:	0913      	lsrs	r3, r2, #4
 80014f2:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80014f6:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80014fa:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80014fe:	b21b      	sxth	r3, r3
 8001500:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001502:	a938      	add	r1, sp, #224	; 0xe0
 8001504:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001506:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 800150a:	0a15      	lsrs	r5, r2, #8
 800150c:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 8001510:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8001512:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 8001516:	2800      	cmp	r0, #0
 8001518:	d16b      	bne.n	80015f2 <mouseDriver_sendMsg+0xe5a>
	return msg->len + header_len + 2 + signature_len;
 800151a:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800151e:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8001522:	29fe      	cmp	r1, #254	; 0xfe
 8001524:	f000 8100 	beq.w	8001728 <mouseDriver_sendMsg+0xf90>
	while (length > 1 && payload[length-1] == 0) {
 8001528:	2c01      	cmp	r4, #1
 800152a:	d911      	bls.n	8001550 <mouseDriver_sendMsg+0xdb8>
 800152c:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8001530:	5d1b      	ldrb	r3, [r3, r4]
 8001532:	b96b      	cbnz	r3, 8001550 <mouseDriver_sendMsg+0xdb8>
 8001534:	1e63      	subs	r3, r4, #1
 8001536:	aa7e      	add	r2, sp, #504	; 0x1f8
 8001538:	fa52 f383 	uxtab	r3, r2, r3
 800153c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8001540:	3c01      	subs	r4, #1
 8001542:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8001544:	2c01      	cmp	r4, #1
 8001546:	d003      	beq.n	8001550 <mouseDriver_sendMsg+0xdb8>
 8001548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800154c:	2a00      	cmp	r2, #0
 800154e:	d0f7      	beq.n	8001540 <mouseDriver_sendMsg+0xda8>
		buf[0] = msg->magic;
 8001550:	4d83      	ldr	r5, [pc, #524]	; (8001760 <mouseDriver_sendMsg+0xfc8>)
 8001552:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8001554:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8001556:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 800155a:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 800155c:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8001560:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8001562:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001566:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8001568:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 800156c:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 800156e:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001572:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8001574:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001576:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800157a:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800157c:	121a      	asrs	r2, r3, #8
 800157e:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001580:	141b      	asrs	r3, r3, #16
 8001582:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001584:	4622      	mov	r2, r4
 8001586:	a938      	add	r1, sp, #224	; 0xe0
 8001588:	f105 000a 	add.w	r0, r5, #10
 800158c:	f006 f8cb 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001590:	f104 020a 	add.w	r2, r4, #10
 8001594:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001596:	f016 0f01 	tst.w	r6, #1
 800159a:	f040 86ff 	bne.w	800239c <mouseDriver_sendMsg+0x1c04>
		header_len = MAVLINK_CORE_HEADER_LEN;
 800159e:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80015a0:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 80015a4:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80015a6:	0a12      	lsrs	r2, r2, #8
 80015a8:	705a      	strb	r2, [r3, #1]
 80015aa:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80015ac:	4421      	add	r1, r4
 80015ae:	3103      	adds	r1, #3
 80015b0:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 80015b2:	b289      	uxth	r1, r1
 80015b4:	486a      	ldr	r0, [pc, #424]	; (8001760 <mouseDriver_sendMsg+0xfc8>)
 80015b6:	f001 f971 	bl	800289c <main_transmit_buffer>
			break;
 80015ba:	f7ff ba17 	b.w	80009ec <mouseDriver_sendMsg+0x254>
	while (length > 1 && payload[length-1] == 0) {
 80015be:	2000      	movs	r0, #0
 80015c0:	230c      	movs	r3, #12
 80015c2:	e70d      	b.n	80013e0 <mouseDriver_sendMsg+0xc48>
	if (signing) {
 80015c4:	240a      	movs	r4, #10
 80015c6:	e73b      	b.n	8001440 <mouseDriver_sendMsg+0xca8>
		buf[2] = msg->incompat_flags;
 80015c8:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 80015cc:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 80015d6:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 80015da:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 80015de:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 80015e2:	2201      	movs	r2, #1
 80015e4:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80015e8:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80015ec:	f88d 3011 	strb.w	r3, [sp, #17]
 80015f0:	e745      	b.n	800147e <mouseDriver_sendMsg+0xce6>
		mavlink_sign_packet(status->signing,
 80015f2:	4b5a      	ldr	r3, [pc, #360]	; (800175c <mouseDriver_sendMsg+0xfc4>)
 80015f4:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80015f6:	2d00      	cmp	r5, #0
 80015f8:	d08f      	beq.n	800151a <mouseDriver_sendMsg+0xd82>
 80015fa:	782a      	ldrb	r2, [r5, #0]
 80015fc:	f012 0f01 	tst.w	r2, #1
 8001600:	d08b      	beq.n	800151a <mouseDriver_sendMsg+0xd82>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001602:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8001606:	786a      	ldrb	r2, [r5, #1]
 8001608:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 800160c:	68aa      	ldr	r2, [r5, #8]
 800160e:	68e9      	ldr	r1, [r5, #12]
 8001610:	9200      	str	r2, [sp, #0]
 8001612:	9101      	str	r1, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8001614:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 8001618:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800161c:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8001620:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8001624:	1c42      	adds	r2, r0, #1
 8001626:	f141 0300 	adc.w	r3, r1, #0
 800162a:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 800162e:	2700      	movs	r7, #0
 8001630:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8001632:	4a4c      	ldr	r2, [pc, #304]	; (8001764 <mouseDriver_sendMsg+0xfcc>)
 8001634:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8001636:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <mouseDriver_sendMsg+0xfd0>)
 8001638:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 800163a:	4a4c      	ldr	r2, [pc, #304]	; (800176c <mouseDriver_sendMsg+0xfd4>)
 800163c:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 800163e:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <mouseDriver_sendMsg+0xfd8>)
 8001640:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 8001642:	4a4c      	ldr	r2, [pc, #304]	; (8001774 <mouseDriver_sendMsg+0xfdc>)
 8001644:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8001646:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <mouseDriver_sendMsg+0xfe0>)
 8001648:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 800164a:	4a4c      	ldr	r2, [pc, #304]	; (800177c <mouseDriver_sendMsg+0xfe4>)
 800164c:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 800164e:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8001652:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 8001656:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 800165a:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 800165c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001660:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 8001662:	ae25      	add	r6, sp, #148	; 0x94
 8001664:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8001668:	6869      	ldr	r1, [r5, #4]
 800166a:	68aa      	ldr	r2, [r5, #8]
 800166c:	68eb      	ldr	r3, [r5, #12]
 800166e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001670:	6928      	ldr	r0, [r5, #16]
 8001672:	6969      	ldr	r1, [r5, #20]
 8001674:	69aa      	ldr	r2, [r5, #24]
 8001676:	69eb      	ldr	r3, [r5, #28]
 8001678:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 800167a:	4622      	mov	r2, r4
 800167c:	a902      	add	r1, sp, #8
 800167e:	a81b      	add	r0, sp, #108	; 0x6c
 8001680:	f7fe ff76 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001684:	4642      	mov	r2, r8
 8001686:	a938      	add	r1, sp, #224	; 0xe0
 8001688:	a81b      	add	r0, sp, #108	; 0x6c
 800168a:	f7fe ff71 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 800168e:	2202      	movs	r2, #2
 8001690:	ab38      	add	r3, sp, #224	; 0xe0
 8001692:	eb03 0108 	add.w	r1, r3, r8
 8001696:	a81b      	add	r0, sp, #108	; 0x6c
 8001698:	f7fe ff6a 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 800169c:	2207      	movs	r2, #7
 800169e:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 80016a2:	a81b      	add	r0, sp, #108	; 0x6c
 80016a4:	f7fe ff64 	bl	8000570 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 80016a8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80016aa:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80016ae:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 80016b2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80016bc:	2247      	movs	r2, #71	; 0x47
 80016be:	4639      	mov	r1, r7
 80016c0:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 80016c4:	f006 f83a 	bl	800773c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80016c8:	ab09      	add	r3, sp, #36	; 0x24
 80016ca:	442b      	add	r3, r5
 80016cc:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80016ce:	0a22      	lsrs	r2, r4, #8
 80016d0:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80016d2:	0c22      	lsrs	r2, r4, #16
 80016d4:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80016d6:	0e24      	lsrs	r4, r4, #24
 80016d8:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80016da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80016dc:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80016de:	0a11      	lsrs	r1, r2, #8
 80016e0:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80016e2:	0c11      	lsrs	r1, r2, #16
 80016e4:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80016e6:	0e12      	lsrs	r2, r2, #24
 80016e8:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80016ea:	f105 0209 	add.w	r2, r5, #9
 80016ee:	a909      	add	r1, sp, #36	; 0x24
 80016f0:	a81b      	add	r0, sp, #108	; 0x6c
 80016f2:	f7fe ff3d 	bl	8000570 <mavlink_sha256_update>
    result[0] = p[3];
 80016f6:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 80016fa:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 80016fe:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8001702:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8001706:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 800170a:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 800170e:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8001712:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8001716:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800171a:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 800171e:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8001722:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8001726:	e6f8      	b.n	800151a <mouseDriver_sendMsg+0xd82>
		buf[0] = msg->magic;
 8001728:	4d0d      	ldr	r5, [pc, #52]	; (8001760 <mouseDriver_sendMsg+0xfc8>)
 800172a:	23fe      	movs	r3, #254	; 0xfe
 800172c:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 800172e:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8001730:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001734:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8001736:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 800173a:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 800173c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001740:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8001742:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001744:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001748:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 800174a:	4622      	mov	r2, r4
 800174c:	a938      	add	r1, sp, #224	; 0xe0
 800174e:	1da8      	adds	r0, r5, #6
 8001750:	f005 ffe9 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001754:	1da3      	adds	r3, r4, #6
 8001756:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001758:	2105      	movs	r1, #5
 800175a:	e721      	b.n	80015a0 <mouseDriver_sendMsg+0xe08>
 800175c:	200000bc 	.word	0x200000bc
 8001760:	2000011c 	.word	0x2000011c
 8001764:	6a09e667 	.word	0x6a09e667
 8001768:	bb67ae85 	.word	0xbb67ae85
 800176c:	3c6ef372 	.word	0x3c6ef372
 8001770:	a54ff53a 	.word	0xa54ff53a
 8001774:	510e527f 	.word	0x510e527f
 8001778:	9b05688c 	.word	0x9b05688c
 800177c:	1f83d9ab 	.word	0x1f83d9ab
 * @param msg The MAVLink message to compress the data into
 * @param error C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_error_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_error_t* error)
{
    return mavlink_msg_error_pack(system_id, component_id, msg, error->time, error->error);
 8001780:	4a98      	ldr	r2, [pc, #608]	; (80019e4 <mouseDriver_sendMsg+0x124c>)
 8001782:	7911      	ldrb	r1, [r2, #4]
    packet.time = time;
 8001784:	466b      	mov	r3, sp
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	601a      	str	r2, [r3, #0]
    packet.error = error;
 800178a:	7119      	strb	r1, [r3, #4]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ERROR_LEN);
 800178c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001790:	9238      	str	r2, [sp, #224]	; 0xe0
 8001792:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4
    msg->msgid = MAVLINK_MSG_ID_ERROR;
 8001796:	2300      	movs	r3, #0
 8001798:	2207      	movs	r2, #7
 800179a:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 800179e:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 80017a2:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80017a6:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <mouseDriver_sendMsg+0x1250>)
 80017a8:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80017aa:	f013 0602 	ands.w	r6, r3, #2
 80017ae:	d12e      	bne.n	800180e <mouseDriver_sendMsg+0x1076>
 80017b0:	4b8d      	ldr	r3, [pc, #564]	; (80019e8 <mouseDriver_sendMsg+0x1250>)
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80f5 	beq.w	80019a4 <mouseDriver_sendMsg+0x120c>
 80017ba:	7818      	ldrb	r0, [r3, #0]
 80017bc:	f000 0001 	and.w	r0, r0, #1
		msg->magic = MAVLINK_STX;
 80017c0:	23fd      	movs	r3, #253	; 0xfd
 80017c2:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 80017c6:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80ec 	bne.w	80019a8 <mouseDriver_sendMsg+0x1210>
 80017d0:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 80e9 	bne.w	80019ac <mouseDriver_sendMsg+0x1214>
 80017da:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 80e6 	bne.w	80019b0 <mouseDriver_sendMsg+0x1218>
 80017e4:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
		length--;
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2302      	movne	r3, #2
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80017f0:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80017f4:	2200      	movs	r2, #0
 80017f6:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80017fa:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 80017fe:	2800      	cmp	r0, #0
 8001800:	f000 80d8 	beq.w	80019b4 <mouseDriver_sendMsg+0x121c>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001804:	2201      	movs	r2, #1
 8001806:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 800180a:	240a      	movs	r4, #10
 800180c:	e00e      	b.n	800182c <mouseDriver_sendMsg+0x1094>
		msg->magic = MAVLINK_STX_MAVLINK1;
 800180e:	23fe      	movs	r3, #254	; 0xfe
 8001810:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001814:	2305      	movs	r3, #5
 8001816:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 800181a:	2000      	movs	r0, #0
 800181c:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001820:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001824:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8001826:	2200      	movs	r2, #0
 8001828:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 800182c:	2200      	movs	r2, #0
 800182e:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 8001832:	496d      	ldr	r1, [pc, #436]	; (80019e8 <mouseDriver_sendMsg+0x1250>)
 8001834:	798a      	ldrb	r2, [r1, #6]
 8001836:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 800183a:	1c55      	adds	r5, r2, #1
 800183c:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 800183e:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8001842:	f88d 1014 	strb.w	r1, [sp, #20]
	buf[1] = msg->len;
 8001846:	f88d 3015 	strb.w	r3, [sp, #21]
	if (mavlink1) {
 800184a:	2e00      	cmp	r6, #0
 800184c:	f000 80b4 	beq.w	80019b8 <mouseDriver_sendMsg+0x1220>
		buf[2] = msg->seq;
 8001850:	f88d 2016 	strb.w	r2, [sp, #22]
		buf[3] = msg->sysid;
 8001854:	2300      	movs	r3, #0
 8001856:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->compid;
 800185a:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 800185e:	2307      	movs	r3, #7
 8001860:	f88d 3019 	strb.w	r3, [sp, #25]
	while (length--) {
 8001864:	1ea6      	subs	r6, r4, #2
 8001866:	b2b6      	uxth	r6, r6
 8001868:	ab7e      	add	r3, sp, #504	; 0x1f8
 800186a:	441e      	add	r6, r3
 800186c:	f5a6 76f1 	sub.w	r6, r6, #482	; 0x1e2
        *crcAccum = X25_INIT_CRC;
 8001870:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8001874:	f10d 0515 	add.w	r5, sp, #21
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001878:	f815 2b01 	ldrb.w	r2, [r5], #1
 800187c:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 800187e:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8001882:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001884:	0913      	lsrs	r3, r2, #4
 8001886:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800188a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800188e:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8001892:	42b5      	cmp	r5, r6
 8001894:	d1f0      	bne.n	8001878 <mouseDriver_sendMsg+0x10e0>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001896:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 800189a:	b2ba      	uxth	r2, r7
	while (length--) {
 800189c:	1e53      	subs	r3, r2, #1
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b1a2      	cbz	r2, 80018cc <mouseDriver_sendMsg+0x1134>
 80018a2:	aa7e      	add	r2, sp, #504	; 0x1f8
 80018a4:	4413      	add	r3, r2
 80018a6:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 80018aa:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80018ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80018b0:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80018b2:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80018b6:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80018b8:	091a      	lsrs	r2, r3, #4
 80018ba:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80018be:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 80018c2:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 80018c6:	b299      	uxth	r1, r3
	while (length--) {
 80018c8:	42b5      	cmp	r5, r6
 80018ca:	d1ef      	bne.n	80018ac <mouseDriver_sendMsg+0x1114>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80018cc:	f081 0316 	eor.w	r3, r1, #22
        tmp ^= (tmp<<4);
 80018d0:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80018d4:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80018d6:	0913      	lsrs	r3, r2, #4
 80018d8:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80018dc:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80018e0:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80018e8:	a938      	add	r1, sp, #224	; 0xe0
 80018ea:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80018ec:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 80018f0:	0a15      	lsrs	r5, r2, #8
 80018f2:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 80018f6:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 80018f8:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d177      	bne.n	80019f0 <mouseDriver_sendMsg+0x1258>
	return msg->len + header_len + 2 + signature_len;
 8001900:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001904:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8001908:	29fe      	cmp	r1, #254	; 0xfe
 800190a:	f000 810d 	beq.w	8001b28 <mouseDriver_sendMsg+0x1390>
	while (length > 1 && payload[length-1] == 0) {
 800190e:	2c01      	cmp	r4, #1
 8001910:	d911      	bls.n	8001936 <mouseDriver_sendMsg+0x119e>
 8001912:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8001916:	5d1b      	ldrb	r3, [r3, r4]
 8001918:	b96b      	cbnz	r3, 8001936 <mouseDriver_sendMsg+0x119e>
 800191a:	1e63      	subs	r3, r4, #1
 800191c:	aa7e      	add	r2, sp, #504	; 0x1f8
 800191e:	fa52 f383 	uxtab	r3, r2, r3
 8001922:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8001926:	3c01      	subs	r4, #1
 8001928:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 800192a:	2c01      	cmp	r4, #1
 800192c:	d003      	beq.n	8001936 <mouseDriver_sendMsg+0x119e>
 800192e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001932:	2a00      	cmp	r2, #0
 8001934:	d0f7      	beq.n	8001926 <mouseDriver_sendMsg+0x118e>
		buf[0] = msg->magic;
 8001936:	4d2d      	ldr	r5, [pc, #180]	; (80019ec <mouseDriver_sendMsg+0x1254>)
 8001938:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 800193a:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 800193c:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 8001940:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8001942:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8001946:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8001948:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 800194c:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 800194e:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001952:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8001954:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001958:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 800195a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800195c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001960:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001962:	121a      	asrs	r2, r3, #8
 8001964:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001966:	141b      	asrs	r3, r3, #16
 8001968:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 800196a:	4622      	mov	r2, r4
 800196c:	a938      	add	r1, sp, #224	; 0xe0
 800196e:	f105 000a 	add.w	r0, r5, #10
 8001972:	f005 fed8 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001976:	f104 020a 	add.w	r2, r4, #10
 800197a:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800197c:	f016 0f01 	tst.w	r6, #1
 8001980:	f040 8523 	bne.w	80023ca <mouseDriver_sendMsg+0x1c32>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001984:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001986:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 800198a:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800198c:	0a12      	lsrs	r2, r2, #8
 800198e:	705a      	strb	r2, [r3, #1]
 8001990:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001992:	4421      	add	r1, r4
 8001994:	3103      	adds	r1, #3
 8001996:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 8001998:	b289      	uxth	r1, r1
 800199a:	4814      	ldr	r0, [pc, #80]	; (80019ec <mouseDriver_sendMsg+0x1254>)
 800199c:	f000 ff7e 	bl	800289c <main_transmit_buffer>
			break;
 80019a0:	f7ff b824 	b.w	80009ec <mouseDriver_sendMsg+0x254>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80019a4:	2000      	movs	r0, #0
 80019a6:	e70b      	b.n	80017c0 <mouseDriver_sendMsg+0x1028>
	while (length > 1 && payload[length-1] == 0) {
 80019a8:	2305      	movs	r3, #5
 80019aa:	e721      	b.n	80017f0 <mouseDriver_sendMsg+0x1058>
		length--;
 80019ac:	2304      	movs	r3, #4
 80019ae:	e71f      	b.n	80017f0 <mouseDriver_sendMsg+0x1058>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e71d      	b.n	80017f0 <mouseDriver_sendMsg+0x1058>
	if (signing) {
 80019b4:	240a      	movs	r4, #10
 80019b6:	e736      	b.n	8001826 <mouseDriver_sendMsg+0x108e>
		buf[2] = msg->incompat_flags;
 80019b8:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 80019bc:	f88d 3016 	strb.w	r3, [sp, #22]
		buf[3] = msg->compat_flags;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->seq;
 80019c6:	f88d 2018 	strb.w	r2, [sp, #24]
		buf[5] = msg->sysid;
 80019ca:	f88d 3019 	strb.w	r3, [sp, #25]
		buf[6] = msg->compid;
 80019ce:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[7] = msg->msgid & 0xFF;
 80019d2:	2207      	movs	r2, #7
 80019d4:	f88d 201b 	strb.w	r2, [sp, #27]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80019d8:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80019dc:	f88d 301d 	strb.w	r3, [sp, #29]
 80019e0:	e740      	b.n	8001864 <mouseDriver_sendMsg+0x10cc>
 80019e2:	bf00      	nop
 80019e4:	2000008c 	.word	0x2000008c
 80019e8:	200000bc 	.word	0x200000bc
 80019ec:	2000011c 	.word	0x2000011c
		mavlink_sign_packet(status->signing,
 80019f0:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <mouseDriver_sendMsg+0x141c>)
 80019f2:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80019f4:	2d00      	cmp	r5, #0
 80019f6:	d083      	beq.n	8001900 <mouseDriver_sendMsg+0x1168>
 80019f8:	782a      	ldrb	r2, [r5, #0]
 80019fa:	f012 0f01 	tst.w	r2, #1
 80019fe:	f43f af7f 	beq.w	8001900 <mouseDriver_sendMsg+0x1168>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001a02:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8001a06:	786a      	ldrb	r2, [r5, #1]
 8001a08:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8001a0c:	68aa      	ldr	r2, [r5, #8]
 8001a0e:	68e9      	ldr	r1, [r5, #12]
 8001a10:	9202      	str	r2, [sp, #8]
 8001a12:	9103      	str	r1, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8001a14:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 8001a18:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8001a1c:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8001a20:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8001a24:	1c42      	adds	r2, r0, #1
 8001a26:	f141 0300 	adc.w	r3, r1, #0
 8001a2a:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 8001a2e:	2700      	movs	r7, #0
 8001a30:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8001a32:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <mouseDriver_sendMsg+0x1420>)
 8001a34:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8001a36:	4a61      	ldr	r2, [pc, #388]	; (8001bbc <mouseDriver_sendMsg+0x1424>)
 8001a38:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8001a3a:	4a61      	ldr	r2, [pc, #388]	; (8001bc0 <mouseDriver_sendMsg+0x1428>)
 8001a3c:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8001a3e:	4a61      	ldr	r2, [pc, #388]	; (8001bc4 <mouseDriver_sendMsg+0x142c>)
 8001a40:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 8001a42:	4a61      	ldr	r2, [pc, #388]	; (8001bc8 <mouseDriver_sendMsg+0x1430>)
 8001a44:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8001a46:	4a61      	ldr	r2, [pc, #388]	; (8001bcc <mouseDriver_sendMsg+0x1434>)
 8001a48:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8001a4a:	4a61      	ldr	r2, [pc, #388]	; (8001bd0 <mouseDriver_sendMsg+0x1438>)
 8001a4c:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8001a4e:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8001a52:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 8001a56:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 8001a5a:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 8001a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a60:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 8001a62:	ae25      	add	r6, sp, #148	; 0x94
 8001a64:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8001a68:	6869      	ldr	r1, [r5, #4]
 8001a6a:	68aa      	ldr	r2, [r5, #8]
 8001a6c:	68eb      	ldr	r3, [r5, #12]
 8001a6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a70:	6928      	ldr	r0, [r5, #16]
 8001a72:	6969      	ldr	r1, [r5, #20]
 8001a74:	69aa      	ldr	r2, [r5, #24]
 8001a76:	69eb      	ldr	r3, [r5, #28]
 8001a78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	a905      	add	r1, sp, #20
 8001a7e:	a81b      	add	r0, sp, #108	; 0x6c
 8001a80:	f7fe fd76 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001a84:	4642      	mov	r2, r8
 8001a86:	a938      	add	r1, sp, #224	; 0xe0
 8001a88:	a81b      	add	r0, sp, #108	; 0x6c
 8001a8a:	f7fe fd71 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001a8e:	2202      	movs	r2, #2
 8001a90:	ab38      	add	r3, sp, #224	; 0xe0
 8001a92:	eb03 0108 	add.w	r1, r3, r8
 8001a96:	a81b      	add	r0, sp, #108	; 0x6c
 8001a98:	f7fe fd6a 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8001aa2:	a81b      	add	r0, sp, #108	; 0x6c
 8001aa4:	f7fe fd64 	bl	8000570 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8001aa8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8001aaa:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001aae:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8001ab2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001abc:	2247      	movs	r2, #71	; 0x47
 8001abe:	4639      	mov	r1, r7
 8001ac0:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8001ac4:	f005 fe3a 	bl	800773c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001ac8:	ab09      	add	r3, sp, #36	; 0x24
 8001aca:	442b      	add	r3, r5
 8001acc:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001ace:	0a22      	lsrs	r2, r4, #8
 8001ad0:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001ad2:	0c22      	lsrs	r2, r4, #16
 8001ad4:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001ad6:	0e24      	lsrs	r4, r4, #24
 8001ad8:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001ada:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001adc:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001ade:	0a11      	lsrs	r1, r2, #8
 8001ae0:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001ae2:	0c11      	lsrs	r1, r2, #16
 8001ae4:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001ae6:	0e12      	lsrs	r2, r2, #24
 8001ae8:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8001aea:	f105 0209 	add.w	r2, r5, #9
 8001aee:	a909      	add	r1, sp, #36	; 0x24
 8001af0:	a81b      	add	r0, sp, #108	; 0x6c
 8001af2:	f7fe fd3d 	bl	8000570 <mavlink_sha256_update>
    result[0] = p[3];
 8001af6:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8001afa:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8001afe:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8001b02:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8001b06:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8001b0a:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8001b0e:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8001b12:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8001b16:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8001b1a:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8001b1e:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8001b22:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8001b26:	e6eb      	b.n	8001900 <mouseDriver_sendMsg+0x1168>
		buf[0] = msg->magic;
 8001b28:	4d2a      	ldr	r5, [pc, #168]	; (8001bd4 <mouseDriver_sendMsg+0x143c>)
 8001b2a:	23fe      	movs	r3, #254	; 0xfe
 8001b2c:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8001b2e:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8001b30:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001b34:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8001b36:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001b3a:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8001b3c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001b40:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8001b42:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001b44:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001b48:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	a938      	add	r1, sp, #224	; 0xe0
 8001b4e:	1da8      	adds	r0, r5, #6
 8001b50:	f005 fde9 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001b54:	1da3      	adds	r3, r4, #6
 8001b56:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001b58:	2105      	movs	r1, #5
 8001b5a:	e714      	b.n	8001986 <mouseDriver_sendMsg+0x11ee>
			mavlink_msg_point_loaded_pack(SYS_ID,COMP_ID,&msg,actual_point);
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <mouseDriver_sendMsg+0x1440>)
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_POINT_LOADED_LEN);
#else
    mavlink_point_loaded_t packet;
    packet.point_id = point_id;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LOADED_LEN);
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
#endif

    msg->msgid = MAVLINK_MSG_ID_POINT_LOADED;
 8001b64:	2300      	movs	r3, #0
 8001b66:	2205      	movs	r2, #5
 8001b68:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8001b6c:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 8001b70:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <mouseDriver_sendMsg+0x141c>)
 8001b76:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001b78:	f013 0502 	ands.w	r5, r3, #2
 8001b7c:	d12e      	bne.n	8001bdc <mouseDriver_sendMsg+0x1444>
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <mouseDriver_sendMsg+0x141c>)
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80f6 	beq.w	8001d74 <mouseDriver_sendMsg+0x15dc>
 8001b88:	7818      	ldrb	r0, [r3, #0]
 8001b8a:	f000 0001 	and.w	r0, r0, #1
		msg->magic = MAVLINK_STX;
 8001b8e:	23fd      	movs	r3, #253	; 0xfd
 8001b90:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001b94:	2301      	movs	r3, #1
 8001b96:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001ba0:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	f000 80e7 	beq.w	8001d78 <mouseDriver_sendMsg+0x15e0>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001bb0:	240a      	movs	r4, #10
 8001bb2:	e022      	b.n	8001bfa <mouseDriver_sendMsg+0x1462>
 8001bb4:	200000bc 	.word	0x200000bc
 8001bb8:	6a09e667 	.word	0x6a09e667
 8001bbc:	bb67ae85 	.word	0xbb67ae85
 8001bc0:	3c6ef372 	.word	0x3c6ef372
 8001bc4:	a54ff53a 	.word	0xa54ff53a
 8001bc8:	510e527f 	.word	0x510e527f
 8001bcc:	9b05688c 	.word	0x9b05688c
 8001bd0:	1f83d9ab 	.word	0x1f83d9ab
 8001bd4:	2000011c 	.word	0x2000011c
 8001bd8:	200000a0 	.word	0x200000a0
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001bdc:	23fe      	movs	r3, #254	; 0xfe
 8001bde:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001be2:	2301      	movs	r3, #1
 8001be4:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001be8:	2000      	movs	r0, #0
 8001bea:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001bee:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001bf2:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 8001c00:	4ac3      	ldr	r2, [pc, #780]	; (8001f10 <mouseDriver_sendMsg+0x1778>)
 8001c02:	7993      	ldrb	r3, [r2, #6]
 8001c04:	f88d 30da 	strb.w	r3, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8001c08:	1c59      	adds	r1, r3, #1
 8001c0a:	7191      	strb	r1, [r2, #6]
	buf[0] = msg->magic;
 8001c0c:	f89d 20d6 	ldrb.w	r2, [sp, #214]	; 0xd6
 8001c10:	f88d 2014 	strb.w	r2, [sp, #20]
	buf[1] = msg->len;
 8001c14:	2201      	movs	r2, #1
 8001c16:	f88d 2015 	strb.w	r2, [sp, #21]
	if (mavlink1) {
 8001c1a:	2d00      	cmp	r5, #0
 8001c1c:	f000 80ae 	beq.w	8001d7c <mouseDriver_sendMsg+0x15e4>
		buf[2] = msg->seq;
 8001c20:	f88d 3016 	strb.w	r3, [sp, #22]
		buf[3] = msg->sysid;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->compid;
 8001c2a:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 8001c2e:	2305      	movs	r3, #5
 8001c30:	f88d 3019 	strb.w	r3, [sp, #25]
	while (length--) {
 8001c34:	1ea6      	subs	r6, r4, #2
 8001c36:	b2b6      	uxth	r6, r6
 8001c38:	ab7e      	add	r3, sp, #504	; 0x1f8
 8001c3a:	441e      	add	r6, r3
 8001c3c:	f5a6 76f1 	sub.w	r6, r6, #482	; 0x1e2
        *crcAccum = X25_INIT_CRC;
 8001c40:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8001c44:	f10d 0515 	add.w	r5, sp, #21
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001c48:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001c4c:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8001c4e:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8001c52:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001c54:	0913      	lsrs	r3, r2, #4
 8001c56:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001c5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c5e:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8001c62:	42b5      	cmp	r5, r6
 8001c64:	d1f0      	bne.n	8001c48 <mouseDriver_sendMsg+0x14b0>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001c66:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 8001c6a:	b2ba      	uxth	r2, r7
	while (length--) {
 8001c6c:	1e53      	subs	r3, r2, #1
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b1a2      	cbz	r2, 8001c9c <mouseDriver_sendMsg+0x1504>
 8001c72:	aa7e      	add	r2, sp, #504	; 0x1f8
 8001c74:	4413      	add	r3, r2
 8001c76:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8001c7a:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001c7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c80:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8001c82:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8001c86:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001c88:	091a      	lsrs	r2, r3, #4
 8001c8a:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8001c8e:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8001c92:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8001c96:	b299      	uxth	r1, r3
	while (length--) {
 8001c98:	42b5      	cmp	r5, r6
 8001c9a:	d1ef      	bne.n	8001c7c <mouseDriver_sendMsg+0x14e4>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001c9c:	f081 039b 	eor.w	r3, r1, #155	; 0x9b
        tmp ^= (tmp<<4);
 8001ca0:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8001ca4:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001ca6:	0913      	lsrs	r3, r2, #4
 8001ca8:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001cac:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8001cb0:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001cb8:	a938      	add	r1, sp, #224	; 0xe0
 8001cba:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001cbc:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 8001cc0:	0a15      	lsrs	r5, r2, #8
 8001cc2:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 8001cc6:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8001cc8:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d16a      	bne.n	8001da6 <mouseDriver_sendMsg+0x160e>
	return msg->len + header_len + 2 + signature_len;
 8001cd0:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001cd4:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8001cd8:	29fe      	cmp	r1, #254	; 0xfe
 8001cda:	f000 80ff 	beq.w	8001edc <mouseDriver_sendMsg+0x1744>
	while (length > 1 && payload[length-1] == 0) {
 8001cde:	2c01      	cmp	r4, #1
 8001ce0:	d911      	bls.n	8001d06 <mouseDriver_sendMsg+0x156e>
 8001ce2:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8001ce6:	5d1b      	ldrb	r3, [r3, r4]
 8001ce8:	b96b      	cbnz	r3, 8001d06 <mouseDriver_sendMsg+0x156e>
 8001cea:	1e63      	subs	r3, r4, #1
 8001cec:	aa7e      	add	r2, sp, #504	; 0x1f8
 8001cee:	fa52 f383 	uxtab	r3, r2, r3
 8001cf2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8001cf6:	3c01      	subs	r4, #1
 8001cf8:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8001cfa:	2c01      	cmp	r4, #1
 8001cfc:	d003      	beq.n	8001d06 <mouseDriver_sendMsg+0x156e>
 8001cfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d0f7      	beq.n	8001cf6 <mouseDriver_sendMsg+0x155e>
		buf[0] = msg->magic;
 8001d06:	4d83      	ldr	r5, [pc, #524]	; (8001f14 <mouseDriver_sendMsg+0x177c>)
 8001d08:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8001d0a:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8001d0c:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 8001d10:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8001d12:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8001d16:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8001d18:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001d1c:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8001d1e:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001d22:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8001d24:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001d28:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8001d2a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001d2c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001d30:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001d32:	121a      	asrs	r2, r3, #8
 8001d34:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001d36:	141b      	asrs	r3, r3, #16
 8001d38:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	a938      	add	r1, sp, #224	; 0xe0
 8001d3e:	f105 000a 	add.w	r0, r5, #10
 8001d42:	f005 fcf0 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001d46:	f104 020a 	add.w	r2, r4, #10
 8001d4a:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001d4c:	f016 0f01 	tst.w	r6, #1
 8001d50:	f040 8352 	bne.w	80023f8 <mouseDriver_sendMsg+0x1c60>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001d54:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001d56:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8001d5a:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001d5c:	0a12      	lsrs	r2, r2, #8
 8001d5e:	705a      	strb	r2, [r3, #1]
 8001d60:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001d62:	4421      	add	r1, r4
 8001d64:	3103      	adds	r1, #3
 8001d66:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 8001d68:	b289      	uxth	r1, r1
 8001d6a:	486a      	ldr	r0, [pc, #424]	; (8001f14 <mouseDriver_sendMsg+0x177c>)
 8001d6c:	f000 fd96 	bl	800289c <main_transmit_buffer>
			break;
 8001d70:	f7fe be3c 	b.w	80009ec <mouseDriver_sendMsg+0x254>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001d74:	2000      	movs	r0, #0
 8001d76:	e70a      	b.n	8001b8e <mouseDriver_sendMsg+0x13f6>
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001d78:	240a      	movs	r4, #10
 8001d7a:	e73b      	b.n	8001bf4 <mouseDriver_sendMsg+0x145c>
		buf[2] = msg->incompat_flags;
 8001d7c:	f89d 20d8 	ldrb.w	r2, [sp, #216]	; 0xd8
 8001d80:	f88d 2016 	strb.w	r2, [sp, #22]
		buf[3] = msg->compat_flags;
 8001d84:	2200      	movs	r2, #0
 8001d86:	f88d 2017 	strb.w	r2, [sp, #23]
		buf[4] = msg->seq;
 8001d8a:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->sysid;
 8001d8e:	f88d 2019 	strb.w	r2, [sp, #25]
		buf[6] = msg->compid;
 8001d92:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[7] = msg->msgid & 0xFF;
 8001d96:	2305      	movs	r3, #5
 8001d98:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001d9c:	f88d 201c 	strb.w	r2, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001da0:	f88d 201d 	strb.w	r2, [sp, #29]
 8001da4:	e746      	b.n	8001c34 <mouseDriver_sendMsg+0x149c>
		mavlink_sign_packet(status->signing,
 8001da6:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <mouseDriver_sendMsg+0x1778>)
 8001da8:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	d090      	beq.n	8001cd0 <mouseDriver_sendMsg+0x1538>
 8001dae:	782a      	ldrb	r2, [r5, #0]
 8001db0:	f012 0f01 	tst.w	r2, #1
 8001db4:	d08c      	beq.n	8001cd0 <mouseDriver_sendMsg+0x1538>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001db6:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8001dba:	786a      	ldrb	r2, [r5, #1]
 8001dbc:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8001dc0:	68aa      	ldr	r2, [r5, #8]
 8001dc2:	68e9      	ldr	r1, [r5, #12]
 8001dc4:	9202      	str	r2, [sp, #8]
 8001dc6:	9103      	str	r1, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8001dc8:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 8001dcc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8001dd0:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8001dd4:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8001dd8:	1c42      	adds	r2, r0, #1
 8001dda:	f141 0300 	adc.w	r3, r1, #0
 8001dde:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 8001de2:	2700      	movs	r7, #0
 8001de4:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8001de6:	4a4c      	ldr	r2, [pc, #304]	; (8001f18 <mouseDriver_sendMsg+0x1780>)
 8001de8:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8001dea:	4a4c      	ldr	r2, [pc, #304]	; (8001f1c <mouseDriver_sendMsg+0x1784>)
 8001dec:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8001dee:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <mouseDriver_sendMsg+0x1788>)
 8001df0:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8001df2:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <mouseDriver_sendMsg+0x178c>)
 8001df4:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 8001df6:	4a4c      	ldr	r2, [pc, #304]	; (8001f28 <mouseDriver_sendMsg+0x1790>)
 8001df8:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8001dfa:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <mouseDriver_sendMsg+0x1794>)
 8001dfc:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8001dfe:	4a4c      	ldr	r2, [pc, #304]	; (8001f30 <mouseDriver_sendMsg+0x1798>)
 8001e00:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8001e02:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8001e06:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 8001e0a:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 8001e0e:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 8001e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e14:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 8001e16:	ae25      	add	r6, sp, #148	; 0x94
 8001e18:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8001e1c:	6869      	ldr	r1, [r5, #4]
 8001e1e:	68aa      	ldr	r2, [r5, #8]
 8001e20:	68eb      	ldr	r3, [r5, #12]
 8001e22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e24:	6928      	ldr	r0, [r5, #16]
 8001e26:	6969      	ldr	r1, [r5, #20]
 8001e28:	69aa      	ldr	r2, [r5, #24]
 8001e2a:	69eb      	ldr	r3, [r5, #28]
 8001e2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8001e2e:	4622      	mov	r2, r4
 8001e30:	a905      	add	r1, sp, #20
 8001e32:	a81b      	add	r0, sp, #108	; 0x6c
 8001e34:	f7fe fb9c 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001e38:	4642      	mov	r2, r8
 8001e3a:	a938      	add	r1, sp, #224	; 0xe0
 8001e3c:	a81b      	add	r0, sp, #108	; 0x6c
 8001e3e:	f7fe fb97 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001e42:	2202      	movs	r2, #2
 8001e44:	ab38      	add	r3, sp, #224	; 0xe0
 8001e46:	eb03 0108 	add.w	r1, r3, r8
 8001e4a:	a81b      	add	r0, sp, #108	; 0x6c
 8001e4c:	f7fe fb90 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001e50:	2207      	movs	r2, #7
 8001e52:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8001e56:	a81b      	add	r0, sp, #108	; 0x6c
 8001e58:	f7fe fb8a 	bl	8000570 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8001e5c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8001e5e:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001e62:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8001e66:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001e70:	2247      	movs	r2, #71	; 0x47
 8001e72:	4639      	mov	r1, r7
 8001e74:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8001e78:	f005 fc60 	bl	800773c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001e7c:	ab09      	add	r3, sp, #36	; 0x24
 8001e7e:	442b      	add	r3, r5
 8001e80:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001e82:	0a22      	lsrs	r2, r4, #8
 8001e84:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001e86:	0c22      	lsrs	r2, r4, #16
 8001e88:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001e8a:	0e24      	lsrs	r4, r4, #24
 8001e8c:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001e8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001e90:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001e92:	0a11      	lsrs	r1, r2, #8
 8001e94:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001e96:	0c11      	lsrs	r1, r2, #16
 8001e98:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001e9a:	0e12      	lsrs	r2, r2, #24
 8001e9c:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8001e9e:	f105 0209 	add.w	r2, r5, #9
 8001ea2:	a909      	add	r1, sp, #36	; 0x24
 8001ea4:	a81b      	add	r0, sp, #108	; 0x6c
 8001ea6:	f7fe fb63 	bl	8000570 <mavlink_sha256_update>
    result[0] = p[3];
 8001eaa:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8001eae:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8001eb2:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8001eb6:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8001eba:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8001ebe:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8001ec2:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8001ec6:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8001eca:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8001ece:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8001ed2:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8001ed6:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8001eda:	e6f9      	b.n	8001cd0 <mouseDriver_sendMsg+0x1538>
		buf[0] = msg->magic;
 8001edc:	4d0d      	ldr	r5, [pc, #52]	; (8001f14 <mouseDriver_sendMsg+0x177c>)
 8001ede:	23fe      	movs	r3, #254	; 0xfe
 8001ee0:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8001ee2:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8001ee4:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001ee8:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8001eea:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001eee:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8001ef0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001ef4:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8001ef6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001ef8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001efc:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001efe:	4622      	mov	r2, r4
 8001f00:	a938      	add	r1, sp, #224	; 0xe0
 8001f02:	1da8      	adds	r0, r5, #6
 8001f04:	f005 fc0f 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001f08:	1da3      	adds	r3, r4, #6
 8001f0a:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	e722      	b.n	8001d56 <mouseDriver_sendMsg+0x15be>
 8001f10:	200000bc 	.word	0x200000bc
 8001f14:	2000011c 	.word	0x2000011c
 8001f18:	6a09e667 	.word	0x6a09e667
 8001f1c:	bb67ae85 	.word	0xbb67ae85
 8001f20:	3c6ef372 	.word	0x3c6ef372
 8001f24:	a54ff53a 	.word	0xa54ff53a
 8001f28:	510e527f 	.word	0x510e527f
 8001f2c:	9b05688c 	.word	0x9b05688c
 8001f30:	1f83d9ab 	.word	0x1f83d9ab
			mavlink_msg_point_encode(SYS_ID,COMP_ID,&msg,&points[actual_point]);
 8001f34:	4b98      	ldr	r3, [pc, #608]	; (8002198 <mouseDriver_sendMsg+0x1a00>)
 8001f36:	781a      	ldrb	r2, [r3, #0]
 * @param msg The MAVLink message to compress the data into
 * @param point C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_point_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_point_t* point)
{
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 8001f38:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001f3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001f40:	4a96      	ldr	r2, [pc, #600]	; (800219c <mouseDriver_sendMsg+0x1a04>)
 8001f42:	441a      	add	r2, r3
 8001f44:	7b11      	ldrb	r1, [r2, #12]
 8001f46:	6854      	ldr	r4, [r2, #4]
 8001f48:	6890      	ldr	r0, [r2, #8]
    packet.duration = duration;
 8001f4a:	ab05      	add	r3, sp, #20
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 8001f4c:	6812      	ldr	r2, [r2, #0]
    packet.duration = duration;
 8001f4e:	9205      	str	r2, [sp, #20]
    packet.setpoint_x = setpoint_x;
 8001f50:	9406      	str	r4, [sp, #24]
    packet.setpoint_y = setpoint_y;
 8001f52:	9007      	str	r0, [sp, #28]
    packet.point_id = point_id;
 8001f54:	f88d 1020 	strb.w	r1, [sp, #32]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LEN);
 8001f58:	ac38      	add	r4, sp, #224	; 0xe0
 8001f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f5c:	c407      	stmia	r4!, {r0, r1, r2}
 8001f5e:	7023      	strb	r3, [r4, #0]
    msg->msgid = MAVLINK_MSG_ID_POINT;
 8001f60:	2300      	movs	r3, #0
 8001f62:	2206      	movs	r2, #6
 8001f64:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8001f68:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 8001f6c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001f70:	4b8b      	ldr	r3, [pc, #556]	; (80021a0 <mouseDriver_sendMsg+0x1a08>)
 8001f72:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001f74:	f013 0502 	ands.w	r5, r3, #2
 8001f78:	d128      	bne.n	8001fcc <mouseDriver_sendMsg+0x1834>
 8001f7a:	4b89      	ldr	r3, [pc, #548]	; (80021a0 <mouseDriver_sendMsg+0x1a08>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	b123      	cbz	r3, 8001f8a <mouseDriver_sendMsg+0x17f2>
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f013 0f01 	tst.w	r3, #1
 8001f86:	f040 82ac 	bne.w	80024e2 <mouseDriver_sendMsg+0x1d4a>
		msg->magic = MAVLINK_STX;
 8001f8a:	23fd      	movs	r3, #253	; 0xfd
 8001f8c:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8001f90:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 80e4 	bne.w	8002162 <mouseDriver_sendMsg+0x19ca>
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	aa3b      	add	r2, sp, #236	; 0xec
		length--;
 8001f9e:	230c      	movs	r3, #12
	while (length > 1 && payload[length-1] == 0) {
 8001fa0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8001fa4:	b919      	cbnz	r1, 8001fae <mouseDriver_sendMsg+0x1816>
		length--;
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d1f8      	bne.n	8001fa0 <mouseDriver_sendMsg+0x1808>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001fae:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001fb8:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	f000 80d3 	beq.w	8002168 <mouseDriver_sendMsg+0x19d0>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 8001fc8:	240a      	movs	r4, #10
 8001fca:	e00e      	b.n	8001fea <mouseDriver_sendMsg+0x1852>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001fcc:	23fe      	movs	r3, #254	; 0xfe
 8001fce:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001fd2:	230d      	movs	r3, #13
 8001fd4:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001fde:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001fe2:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8001fea:	2200      	movs	r2, #0
 8001fec:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 8001ff0:	496b      	ldr	r1, [pc, #428]	; (80021a0 <mouseDriver_sendMsg+0x1a08>)
 8001ff2:	798a      	ldrb	r2, [r1, #6]
 8001ff4:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8001ff8:	1c56      	adds	r6, r2, #1
 8001ffa:	718e      	strb	r6, [r1, #6]
	buf[0] = msg->magic;
 8001ffc:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8002000:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 8002004:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 8002008:	2d00      	cmp	r5, #0
 800200a:	f000 80af 	beq.w	800216c <mouseDriver_sendMsg+0x19d4>
		buf[2] = msg->seq;
 800200e:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 8002012:	2300      	movs	r3, #0
 8002014:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 8002018:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 800201c:	2306      	movs	r3, #6
 800201e:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 8002022:	1ea6      	subs	r6, r4, #2
 8002024:	b2b6      	uxth	r6, r6
 8002026:	ab7e      	add	r3, sp, #504	; 0x1f8
 8002028:	441e      	add	r6, r3
 800202a:	f5a6 76f7 	sub.w	r6, r6, #494	; 0x1ee
        *crcAccum = X25_INIT_CRC;
 800202e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8002032:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002036:	f815 2b01 	ldrb.w	r2, [r5], #1
 800203a:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 800203c:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8002040:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002042:	0913      	lsrs	r3, r2, #4
 8002044:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8002048:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800204c:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8002050:	42ae      	cmp	r6, r5
 8002052:	d1f0      	bne.n	8002036 <mouseDriver_sendMsg+0x189e>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8002054:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 8002058:	b2ba      	uxth	r2, r7
	while (length--) {
 800205a:	1e53      	subs	r3, r2, #1
 800205c:	b29b      	uxth	r3, r3
 800205e:	b1a2      	cbz	r2, 800208a <mouseDriver_sendMsg+0x18f2>
 8002060:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002062:	4413      	add	r3, r2
 8002064:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002068:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800206a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800206e:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8002070:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002074:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002076:	091a      	lsrs	r2, r3, #4
 8002078:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800207c:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8002080:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8002084:	b299      	uxth	r1, r3
	while (length--) {
 8002086:	42ae      	cmp	r6, r5
 8002088:	d1ef      	bne.n	800206a <mouseDriver_sendMsg+0x18d2>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800208a:	f081 034b 	eor.w	r3, r1, #75	; 0x4b
        tmp ^= (tmp<<4);
 800208e:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8002092:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002094:	0913      	lsrs	r3, r2, #4
 8002096:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800209a:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 800209e:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80020a6:	a938      	add	r1, sp, #224	; 0xe0
 80020a8:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80020aa:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 80020ae:	0a15      	lsrs	r5, r2, #8
 80020b0:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 80020b4:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 80020b6:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d174      	bne.n	80021a8 <mouseDriver_sendMsg+0x1a10>
	return msg->len + header_len + 2 + signature_len;
 80020be:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80020c2:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 80020c6:	29fe      	cmp	r1, #254	; 0xfe
 80020c8:	f000 8109 	beq.w	80022de <mouseDriver_sendMsg+0x1b46>
	while (length > 1 && payload[length-1] == 0) {
 80020cc:	2c01      	cmp	r4, #1
 80020ce:	d911      	bls.n	80020f4 <mouseDriver_sendMsg+0x195c>
 80020d0:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 80020d4:	5d1b      	ldrb	r3, [r3, r4]
 80020d6:	b96b      	cbnz	r3, 80020f4 <mouseDriver_sendMsg+0x195c>
 80020d8:	1e63      	subs	r3, r4, #1
 80020da:	aa7e      	add	r2, sp, #504	; 0x1f8
 80020dc:	fa52 f383 	uxtab	r3, r2, r3
 80020e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 80020e4:	3c01      	subs	r4, #1
 80020e6:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 80020e8:	2c01      	cmp	r4, #1
 80020ea:	d003      	beq.n	80020f4 <mouseDriver_sendMsg+0x195c>
 80020ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d0f7      	beq.n	80020e4 <mouseDriver_sendMsg+0x194c>
		buf[0] = msg->magic;
 80020f4:	4d2b      	ldr	r5, [pc, #172]	; (80021a4 <mouseDriver_sendMsg+0x1a0c>)
 80020f6:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 80020f8:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 80020fa:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 80020fe:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8002100:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8002104:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8002106:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 800210a:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 800210c:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8002110:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8002112:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8002116:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8002118:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800211a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800211e:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8002120:	121a      	asrs	r2, r3, #8
 8002122:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8002124:	141b      	asrs	r3, r3, #16
 8002126:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8002128:	4622      	mov	r2, r4
 800212a:	a938      	add	r1, sp, #224	; 0xe0
 800212c:	f105 000a 	add.w	r0, r5, #10
 8002130:	f005 faf9 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8002134:	f104 020a 	add.w	r2, r4, #10
 8002138:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800213a:	f016 0f01 	tst.w	r6, #1
 800213e:	f040 8171 	bne.w	8002424 <mouseDriver_sendMsg+0x1c8c>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002142:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002144:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8002148:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800214a:	0a12      	lsrs	r2, r2, #8
 800214c:	705a      	strb	r2, [r3, #1]
 800214e:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8002150:	4421      	add	r1, r4
 8002152:	3103      	adds	r1, #3
 8002154:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 8002156:	b289      	uxth	r1, r1
 8002158:	4812      	ldr	r0, [pc, #72]	; (80021a4 <mouseDriver_sendMsg+0x1a0c>)
 800215a:	f000 fb9f 	bl	800289c <main_transmit_buffer>
}
 800215e:	f7fe bc45 	b.w	80009ec <mouseDriver_sendMsg+0x254>
	while (length > 1 && payload[length-1] == 0) {
 8002162:	2000      	movs	r0, #0
 8002164:	230d      	movs	r3, #13
 8002166:	e722      	b.n	8001fae <mouseDriver_sendMsg+0x1816>
	if (signing) {
 8002168:	240a      	movs	r4, #10
 800216a:	e73b      	b.n	8001fe4 <mouseDriver_sendMsg+0x184c>
		buf[2] = msg->incompat_flags;
 800216c:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 8002170:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 8002174:	2300      	movs	r3, #0
 8002176:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 800217a:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 800217e:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 8002182:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 8002186:	2206      	movs	r2, #6
 8002188:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800218c:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8002190:	f88d 3011 	strb.w	r3, [sp, #17]
 8002194:	e745      	b.n	8002022 <mouseDriver_sendMsg+0x188a>
 8002196:	bf00      	nop
 8002198:	200000a0 	.word	0x200000a0
 800219c:	20000310 	.word	0x20000310
 80021a0:	200000bc 	.word	0x200000bc
 80021a4:	2000011c 	.word	0x2000011c
		mavlink_sign_packet(status->signing,
 80021a8:	4bd2      	ldr	r3, [pc, #840]	; (80024f4 <mouseDriver_sendMsg+0x1d5c>)
 80021aa:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80021ac:	2d00      	cmp	r5, #0
 80021ae:	d086      	beq.n	80020be <mouseDriver_sendMsg+0x1926>
 80021b0:	782a      	ldrb	r2, [r5, #0]
 80021b2:	f012 0f01 	tst.w	r2, #1
 80021b6:	d082      	beq.n	80020be <mouseDriver_sendMsg+0x1926>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80021b8:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 80021bc:	786a      	ldrb	r2, [r5, #1]
 80021be:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 80021c2:	68aa      	ldr	r2, [r5, #8]
 80021c4:	68e9      	ldr	r1, [r5, #12]
 80021c6:	9200      	str	r2, [sp, #0]
 80021c8:	9101      	str	r1, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 80021ca:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 80021ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80021d2:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 80021d6:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80021da:	1c42      	adds	r2, r0, #1
 80021dc:	f141 0300 	adc.w	r3, r1, #0
 80021e0:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 80021e4:	2700      	movs	r7, #0
 80021e6:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 80021e8:	4ac3      	ldr	r2, [pc, #780]	; (80024f8 <mouseDriver_sendMsg+0x1d60>)
 80021ea:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 80021ec:	4ac3      	ldr	r2, [pc, #780]	; (80024fc <mouseDriver_sendMsg+0x1d64>)
 80021ee:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 80021f0:	4ac3      	ldr	r2, [pc, #780]	; (8002500 <mouseDriver_sendMsg+0x1d68>)
 80021f2:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 80021f4:	4ac3      	ldr	r2, [pc, #780]	; (8002504 <mouseDriver_sendMsg+0x1d6c>)
 80021f6:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 80021f8:	4ac3      	ldr	r2, [pc, #780]	; (8002508 <mouseDriver_sendMsg+0x1d70>)
 80021fa:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 80021fc:	4ac3      	ldr	r2, [pc, #780]	; (800250c <mouseDriver_sendMsg+0x1d74>)
 80021fe:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8002200:	4ac3      	ldr	r2, [pc, #780]	; (8002510 <mouseDriver_sendMsg+0x1d78>)
 8002202:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8002204:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8002208:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 800220c:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 8002210:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 8002212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002216:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 8002218:	ae25      	add	r6, sp, #148	; 0x94
 800221a:	f855 0f10 	ldr.w	r0, [r5, #16]!
 800221e:	6869      	ldr	r1, [r5, #4]
 8002220:	68aa      	ldr	r2, [r5, #8]
 8002222:	68eb      	ldr	r3, [r5, #12]
 8002224:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002226:	6928      	ldr	r0, [r5, #16]
 8002228:	6969      	ldr	r1, [r5, #20]
 800222a:	69aa      	ldr	r2, [r5, #24]
 800222c:	69eb      	ldr	r3, [r5, #28]
 800222e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8002230:	4622      	mov	r2, r4
 8002232:	a902      	add	r1, sp, #8
 8002234:	a81b      	add	r0, sp, #108	; 0x6c
 8002236:	f7fe f99b 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 800223a:	4642      	mov	r2, r8
 800223c:	a938      	add	r1, sp, #224	; 0xe0
 800223e:	a81b      	add	r0, sp, #108	; 0x6c
 8002240:	f7fe f996 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8002244:	2202      	movs	r2, #2
 8002246:	ab38      	add	r3, sp, #224	; 0xe0
 8002248:	eb03 0108 	add.w	r1, r3, r8
 800224c:	a81b      	add	r0, sp, #108	; 0x6c
 800224e:	f7fe f98f 	bl	8000570 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8002252:	2207      	movs	r2, #7
 8002254:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8002258:	a81b      	add	r0, sp, #108	; 0x6c
 800225a:	f7fe f989 	bl	8000570 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 800225e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8002260:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002264:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8002268:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002272:	2247      	movs	r2, #71	; 0x47
 8002274:	4639      	mov	r1, r7
 8002276:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 800227a:	f005 fa5f 	bl	800773c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800227e:	ab09      	add	r3, sp, #36	; 0x24
 8002280:	442b      	add	r3, r5
 8002282:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002284:	0a22      	lsrs	r2, r4, #8
 8002286:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002288:	0c22      	lsrs	r2, r4, #16
 800228a:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800228c:	0e24      	lsrs	r4, r4, #24
 800228e:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8002290:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002292:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8002294:	0a11      	lsrs	r1, r2, #8
 8002296:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002298:	0c11      	lsrs	r1, r2, #16
 800229a:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800229c:	0e12      	lsrs	r2, r2, #24
 800229e:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80022a0:	f105 0209 	add.w	r2, r5, #9
 80022a4:	a909      	add	r1, sp, #36	; 0x24
 80022a6:	a81b      	add	r0, sp, #108	; 0x6c
 80022a8:	f7fe f962 	bl	8000570 <mavlink_sha256_update>
    result[0] = p[3];
 80022ac:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 80022b0:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 80022b4:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 80022b8:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 80022bc:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 80022c0:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 80022c4:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 80022c8:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 80022cc:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80022d0:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 80022d4:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 80022d8:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 80022dc:	e6ef      	b.n	80020be <mouseDriver_sendMsg+0x1926>
		buf[0] = msg->magic;
 80022de:	4d8d      	ldr	r5, [pc, #564]	; (8002514 <mouseDriver_sendMsg+0x1d7c>)
 80022e0:	23fe      	movs	r3, #254	; 0xfe
 80022e2:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 80022e4:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 80022e6:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 80022ea:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 80022ec:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 80022f0:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 80022f2:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80022f6:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 80022f8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80022fa:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80022fe:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8002300:	4622      	mov	r2, r4
 8002302:	a938      	add	r1, sp, #224	; 0xe0
 8002304:	1da8      	adds	r0, r5, #6
 8002306:	f005 fa0e 	bl	8007726 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800230a:	1da3      	adds	r3, r4, #6
 800230c:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800230e:	2105      	movs	r1, #5
 8002310:	e718      	b.n	8002144 <mouseDriver_sendMsg+0x19ac>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002312:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 8002316:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002318:	0a09      	lsrs	r1, r1, #8
 800231a:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 800231c:	1c99      	adds	r1, r3, #2
 800231e:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002320:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8002324:	6855      	ldr	r5, [r2, #4]
 8002326:	6890      	ldr	r0, [r2, #8]
 8002328:	f8c3 6002 	str.w	r6, [r3, #2]
 800232c:	f8c3 5006 	str.w	r5, [r3, #6]
 8002330:	f8c3 000a 	str.w	r0, [r3, #10]
 8002334:	7b13      	ldrb	r3, [r2, #12]
 8002336:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002338:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800233a:	230d      	movs	r3, #13
 800233c:	f7fe bb4f 	b.w	80009de <mouseDriver_sendMsg+0x246>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002340:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 8002344:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002346:	0a09      	lsrs	r1, r1, #8
 8002348:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 800234a:	1c99      	adds	r1, r3, #2
 800234c:	aa7e      	add	r2, sp, #504	; 0x1f8
 800234e:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8002352:	6855      	ldr	r5, [r2, #4]
 8002354:	6890      	ldr	r0, [r2, #8]
 8002356:	f8c3 6002 	str.w	r6, [r3, #2]
 800235a:	f8c3 5006 	str.w	r5, [r3, #6]
 800235e:	f8c3 000a 	str.w	r0, [r3, #10]
 8002362:	7b13      	ldrb	r3, [r2, #12]
 8002364:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002366:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002368:	230d      	movs	r3, #13
 800236a:	f7fe bd35 	b.w	8000dd8 <mouseDriver_sendMsg+0x640>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800236e:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 8002372:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002374:	0a09      	lsrs	r1, r1, #8
 8002376:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8002378:	1c99      	adds	r1, r3, #2
 800237a:	aa7e      	add	r2, sp, #504	; 0x1f8
 800237c:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8002380:	6855      	ldr	r5, [r2, #4]
 8002382:	6890      	ldr	r0, [r2, #8]
 8002384:	f8c3 6002 	str.w	r6, [r3, #2]
 8002388:	f8c3 5006 	str.w	r5, [r3, #6]
 800238c:	f8c3 000a 	str.w	r0, [r3, #10]
 8002390:	7b13      	ldrb	r3, [r2, #12]
 8002392:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002394:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002396:	230d      	movs	r3, #13
 8002398:	f7fe bf0e 	b.w	80011b8 <mouseDriver_sendMsg+0xa20>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800239c:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 80023a0:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80023a2:	0a09      	lsrs	r1, r1, #8
 80023a4:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 80023a6:	1c99      	adds	r1, r3, #2
 80023a8:	aa7e      	add	r2, sp, #504	; 0x1f8
 80023aa:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 80023ae:	6855      	ldr	r5, [r2, #4]
 80023b0:	6890      	ldr	r0, [r2, #8]
 80023b2:	f8c3 6002 	str.w	r6, [r3, #2]
 80023b6:	f8c3 5006 	str.w	r5, [r3, #6]
 80023ba:	f8c3 000a 	str.w	r0, [r3, #10]
 80023be:	7b13      	ldrb	r3, [r2, #12]
 80023c0:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80023c2:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80023c4:	230d      	movs	r3, #13
 80023c6:	f7ff b8f1 	b.w	80015ac <mouseDriver_sendMsg+0xe14>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80023ca:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 80023ce:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80023d0:	0a09      	lsrs	r1, r1, #8
 80023d2:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 80023d4:	1c99      	adds	r1, r3, #2
 80023d6:	aa7e      	add	r2, sp, #504	; 0x1f8
 80023d8:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 80023dc:	6855      	ldr	r5, [r2, #4]
 80023de:	6890      	ldr	r0, [r2, #8]
 80023e0:	f8c3 6002 	str.w	r6, [r3, #2]
 80023e4:	f8c3 5006 	str.w	r5, [r3, #6]
 80023e8:	f8c3 000a 	str.w	r0, [r3, #10]
 80023ec:	7b13      	ldrb	r3, [r2, #12]
 80023ee:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80023f0:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80023f2:	230d      	movs	r3, #13
 80023f4:	f7ff bacd 	b.w	8001992 <mouseDriver_sendMsg+0x11fa>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80023f8:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 80023fc:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80023fe:	0a09      	lsrs	r1, r1, #8
 8002400:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8002402:	1c99      	adds	r1, r3, #2
 8002404:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002406:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 800240a:	6855      	ldr	r5, [r2, #4]
 800240c:	6890      	ldr	r0, [r2, #8]
 800240e:	f8c3 6002 	str.w	r6, [r3, #2]
 8002412:	f8c3 5006 	str.w	r5, [r3, #6]
 8002416:	f8c3 000a 	str.w	r0, [r3, #10]
 800241a:	7b13      	ldrb	r3, [r2, #12]
 800241c:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800241e:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002420:	230d      	movs	r3, #13
 8002422:	e49e      	b.n	8001d62 <mouseDriver_sendMsg+0x15ca>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002424:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 8002428:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800242a:	0a09      	lsrs	r1, r1, #8
 800242c:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 800242e:	1c99      	adds	r1, r3, #2
 8002430:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002432:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8002436:	6855      	ldr	r5, [r2, #4]
 8002438:	6890      	ldr	r0, [r2, #8]
 800243a:	f8c3 6002 	str.w	r6, [r3, #2]
 800243e:	f8c3 5006 	str.w	r5, [r3, #6]
 8002442:	f8c3 000a 	str.w	r0, [r3, #10]
 8002446:	7b13      	ldrb	r3, [r2, #12]
 8002448:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800244a:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800244c:	230d      	movs	r3, #13
 800244e:	e67f      	b.n	8002150 <mouseDriver_sendMsg+0x19b8>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8002450:	2308      	movs	r3, #8
 8002452:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8002456:	2200      	movs	r2, #0
 8002458:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 800245c:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002460:	2001      	movs	r0, #1
 8002462:	f7fe bbde 	b.w	8000c22 <mouseDriver_sendMsg+0x48a>
		msg->magic = MAVLINK_STX;
 8002466:	23fd      	movs	r3, #253	; 0xfd
 8002468:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 800246c:	f89d 30e7 	ldrb.w	r3, [sp, #231]	; 0xe7
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ed      	bne.n	8002450 <mouseDriver_sendMsg+0x1cb8>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002474:	2001      	movs	r0, #1
 8002476:	f7fe bbc0 	b.w	8000bfa <mouseDriver_sendMsg+0x462>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800247a:	230c      	movs	r3, #12
 800247c:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8002480:	2200      	movs	r2, #0
 8002482:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8002486:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800248a:	2001      	movs	r0, #1
 800248c:	f7fe bdcd 	b.w	800102a <mouseDriver_sendMsg+0x892>
		msg->magic = MAVLINK_STX;
 8002490:	23fd      	movs	r3, #253	; 0xfd
 8002492:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8002496:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1ed      	bne.n	800247a <mouseDriver_sendMsg+0x1ce2>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800249e:	2001      	movs	r0, #1
 80024a0:	f7fe bdaf 	b.w	8001002 <mouseDriver_sendMsg+0x86a>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80024a4:	230c      	movs	r3, #12
 80024a6:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80024aa:	2200      	movs	r2, #0
 80024ac:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80024b0:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7fe bf9d 	b.w	80013f4 <mouseDriver_sendMsg+0xc5c>
		msg->magic = MAVLINK_STX;
 80024ba:	23fd      	movs	r3, #253	; 0xfd
 80024bc:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 80024c0:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ed      	bne.n	80024a4 <mouseDriver_sendMsg+0x1d0c>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7fe bf7f 	b.w	80013cc <mouseDriver_sendMsg+0xc34>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80024ce:	230d      	movs	r3, #13
 80024d0:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80024d4:	2200      	movs	r2, #0
 80024d6:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80024da:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80024de:	2001      	movs	r0, #1
 80024e0:	e56f      	b.n	8001fc2 <mouseDriver_sendMsg+0x182a>
		msg->magic = MAVLINK_STX;
 80024e2:	23fd      	movs	r3, #253	; 0xfd
 80024e4:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 80024e8:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ee      	bne.n	80024ce <mouseDriver_sendMsg+0x1d36>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80024f0:	2001      	movs	r0, #1
 80024f2:	e553      	b.n	8001f9c <mouseDriver_sendMsg+0x1804>
 80024f4:	200000bc 	.word	0x200000bc
 80024f8:	6a09e667 	.word	0x6a09e667
 80024fc:	bb67ae85 	.word	0xbb67ae85
 8002500:	3c6ef372 	.word	0x3c6ef372
 8002504:	a54ff53a 	.word	0xa54ff53a
 8002508:	510e527f 	.word	0x510e527f
 800250c:	9b05688c 	.word	0x9b05688c
 8002510:	1f83d9ab 	.word	0x1f83d9ab
 8002514:	2000011c 	.word	0x2000011c

08002518 <mouseDriver_setMode>:
void mouseDriver_setMode(uint8_t mode){
 8002518:	b538      	push	{r3, r4, r5, lr}
	if (mode == MOUSE_MODE_STOP){
 800251a:	4604      	mov	r4, r0
 800251c:	b1c0      	cbz	r0, 8002550 <mouseDriver_setMode+0x38>
	if (mode == MOUSE_MODE_AUTO_LOAD){
 800251e:	2802      	cmp	r0, #2
 8002520:	d022      	beq.n	8002568 <mouseDriver_setMode+0x50>
	if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <mouseDriver_setMode+0x64>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d119      	bne.n	800255e <mouseDriver_setMode+0x46>
 800252a:	2803      	cmp	r0, #3
 800252c:	d119      	bne.n	8002562 <mouseDriver_setMode+0x4a>
		actual_point = 0;
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <mouseDriver_setMode+0x68>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
	return (HAL_GetTick());
 8002534:	f001 fd52 	bl	8003fdc <HAL_GetTick>
		actual_point_start_time = mouseDriver_getTime();
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <mouseDriver_setMode+0x6c>)
 800253a:	6018      	str	r0, [r3, #0]
		actual_speed_setpoint.setpoint_x = points[0].setpoint_x;
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <mouseDriver_setMode+0x70>)
 800253e:	4a13      	ldr	r2, [pc, #76]	; (800258c <mouseDriver_setMode+0x74>)
 8002540:	6851      	ldr	r1, [r2, #4]
 8002542:	6019      	str	r1, [r3, #0]
		actual_speed_setpoint.setpoint_y = points[0].setpoint_y;
 8002544:	6892      	ldr	r2, [r2, #8]
 8002546:	605a      	str	r2, [r3, #4]
		actual_mode = mode;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <mouseDriver_setMode+0x64>)
 800254a:	2203      	movs	r2, #3
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e00a      	b.n	8002566 <mouseDriver_setMode+0x4e>
		main_stop_motors();
 8002550:	f000 f9ae 	bl	80028b0 <main_stop_motors>
		actual_point = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <mouseDriver_setMode+0x68>)
 8002558:	7013      	strb	r3, [r2, #0]
		actual_mode = MOUSE_MODE_STOP;
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <mouseDriver_setMode+0x64>)
 800255c:	7013      	strb	r3, [r2, #0]
	if (actual_mode != MOUSE_MODE_AUTO_RUN)
 800255e:	2b03      	cmp	r3, #3
 8002560:	d001      	beq.n	8002566 <mouseDriver_setMode+0x4e>
		actual_mode = mode;
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <mouseDriver_setMode+0x64>)
 8002564:	701c      	strb	r4, [r3, #0]
}
 8002566:	bd38      	pop	{r3, r4, r5, pc}
		actual_mode = mode;
 8002568:	4d04      	ldr	r5, [pc, #16]	; (800257c <mouseDriver_setMode+0x64>)
 800256a:	2302      	movs	r3, #2
 800256c:	702b      	strb	r3, [r5, #0]
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe f912 	bl	8000798 <mouseDriver_sendMsg>
	if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 8002574:	782b      	ldrb	r3, [r5, #0]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d0f3      	beq.n	8002562 <mouseDriver_setMode+0x4a>
 800257a:	e7f0      	b.n	800255e <mouseDriver_setMode+0x46>
 800257c:	20000091 	.word	0x20000091
 8002580:	200000a0 	.word	0x200000a0
 8002584:	200000a4 	.word	0x200000a4
 8002588:	200000b4 	.word	0x200000b4
 800258c:	20000310 	.word	0x20000310

08002590 <mouseDriver_init>:
uint8_t mouseDriver_init(void){
 8002590:	b508      	push	{r3, lr}
	actual_mode = MOUSE_MODE_STOP;
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <mouseDriver_init+0x1c>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
	mouseDriver_getSpeedFromSensors();
 8002598:	f7fe f8d0 	bl	800073c <mouseDriver_getSpeedFromSensors>
	mouseDriver_initSetpoint();
 800259c:	f7fe f8c6 	bl	800072c <mouseDriver_initSetpoint>
	mouseDriver_initPoints();
 80025a0:	f7fe f8d6 	bl	8000750 <mouseDriver_initPoints>
	return sensorDriver_powerup();
 80025a4:	f000 f878 	bl	8002698 <sensorDriver_powerup>
}
 80025a8:	bd08      	pop	{r3, pc}
 80025aa:	bf00      	nop
 80025ac:	20000091 	.word	0x20000091

080025b0 <mouseDriver_readMsg>:
}
/* Message related functions */
void mouseDriver_readMsg(const mavlink_message_t msg){
 80025b0:	b084      	sub	sp, #16
 80025b2:	b538      	push	{r3, r4, r5, lr}
 80025b4:	ac04      	add	r4, sp, #16
 80025b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch(msg.msgid){
 80025ba:	9b06      	ldr	r3, [sp, #24]
 80025bc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80025c0:	3b02      	subs	r3, #2
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d808      	bhi.n	80025d8 <mouseDriver_readMsg+0x28>
 80025c6:	e8df f003 	tbb	[pc, r3]
 80025ca:	030b      	.short	0x030b
 80025cc:	071c      	.short	0x071c
 80025ce:	2d          	.byte	0x2d
 80025cf:	00          	.byte	0x00

	case MAVLINK_MSG_ID_MODE_SELECTION:
		mouseDriver_setMode( mavlink_msg_mode_selection_get_mode(&msg));
 80025d0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80025d4:	f7ff ffa0 	bl	8002518 <mouseDriver_setMode>
		}
		break;
	default:
		break;
	};
}
 80025d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025dc:	b004      	add	sp, #16
 80025de:	4770      	bx	lr
		if (actual_mode == MOUSE_MODE_SPEED)
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <mouseDriver_readMsg+0xd0>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d1f7      	bne.n	80025d8 <mouseDriver_readMsg+0x28>
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    speed_setpoint->setpoint_x = mavlink_msg_speed_setpoint_get_setpoint_x(msg);
    speed_setpoint->setpoint_y = mavlink_msg_speed_setpoint_get_setpoint_y(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 80025e8:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 80025ec:	4825      	ldr	r0, [pc, #148]	; (8002684 <mouseDriver_readMsg+0xd4>)
 80025ee:	2300      	movs	r3, #0
 80025f0:	6003      	str	r3, [r0, #0]
 80025f2:	6043      	str	r3, [r0, #4]
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 80025f4:	2a08      	cmp	r2, #8
 80025f6:	bf28      	it	cs
 80025f8:	2208      	movcs	r2, #8
 80025fa:	a907      	add	r1, sp, #28
 80025fc:	f005 f893 	bl	8007726 <memcpy>
 8002600:	e7ea      	b.n	80025d8 <mouseDriver_readMsg+0x28>
		if (actual_mode == MOUSE_MODE_SPEED)
 8002602:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <mouseDriver_readMsg+0xd0>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d1e6      	bne.n	80025d8 <mouseDriver_readMsg+0x28>
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 800260a:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 800260e:	481d      	ldr	r0, [pc, #116]	; (8002684 <mouseDriver_readMsg+0xd4>)
 8002610:	2300      	movs	r3, #0
 8002612:	6003      	str	r3, [r0, #0]
 8002614:	6043      	str	r3, [r0, #4]
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 8002616:	2a08      	cmp	r2, #8
 8002618:	bf28      	it	cs
 800261a:	2208      	movcs	r2, #8
 800261c:	a907      	add	r1, sp, #28
 800261e:	f005 f882 	bl	8007726 <memcpy>
 8002622:	e7d9      	b.n	80025d8 <mouseDriver_readMsg+0x28>
		if(actual_mode == MOUSE_MODE_AUTO_LOAD){
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <mouseDriver_readMsg+0xd0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d1d5      	bne.n	80025d8 <mouseDriver_readMsg+0x28>
			mavlink_msg_point_decode(&msg, &points[actual_point]);
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <mouseDriver_readMsg+0xd8>)
 800262e:	781c      	ldrb	r4, [r3, #0]
 8002630:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002634:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002638:	4d14      	ldr	r5, [pc, #80]	; (800268c <mouseDriver_readMsg+0xdc>)
 800263a:	1948      	adds	r0, r1, r5
    point->duration = mavlink_msg_point_get_duration(msg);
    point->setpoint_x = mavlink_msg_point_get_setpoint_x(msg);
    point->setpoint_y = mavlink_msg_point_get_setpoint_y(msg);
    point->point_id = mavlink_msg_point_get_point_id(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POINT_LEN? msg->len : MAVLINK_MSG_ID_POINT_LEN;
 800263c:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(point, 0, MAVLINK_MSG_ID_POINT_LEN);
 8002640:	2300      	movs	r3, #0
 8002642:	514b      	str	r3, [r1, r5]
 8002644:	6043      	str	r3, [r0, #4]
 8002646:	6083      	str	r3, [r0, #8]
 8002648:	7303      	strb	r3, [r0, #12]
    memcpy(point, _MAV_PAYLOAD(msg), len);
 800264a:	2a0d      	cmp	r2, #13
 800264c:	bf28      	it	cs
 800264e:	220d      	movcs	r2, #13
 8002650:	a907      	add	r1, sp, #28
 8002652:	f005 f868 	bl	8007726 <memcpy>
			if (actual_point == 255){
 8002656:	2cff      	cmp	r4, #255	; 0xff
 8002658:	d007      	beq.n	800266a <mouseDriver_readMsg+0xba>
			mouseDriver_sendMsg(MAVLINK_MSG_ID_POINT_LOADED);
 800265a:	2005      	movs	r0, #5
 800265c:	f7fe f89c 	bl	8000798 <mouseDriver_sendMsg>
			actual_point ++;
 8002660:	4a09      	ldr	r2, [pc, #36]	; (8002688 <mouseDriver_readMsg+0xd8>)
 8002662:	7813      	ldrb	r3, [r2, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	7013      	strb	r3, [r2, #0]
}
 8002668:	e7b6      	b.n	80025d8 <mouseDriver_readMsg+0x28>
				actual_error.error = MOUSE_ROUTINE_TOO_LONG;
 800266a:	4c09      	ldr	r4, [pc, #36]	; (8002690 <mouseDriver_readMsg+0xe0>)
 800266c:	2303      	movs	r3, #3
 800266e:	7123      	strb	r3, [r4, #4]
	return (HAL_GetTick());
 8002670:	f001 fcb4 	bl	8003fdc <HAL_GetTick>
				actual_error.time = mouseDriver_getTime();
 8002674:	6020      	str	r0, [r4, #0]
				mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 8002676:	2007      	movs	r0, #7
 8002678:	f7fe f88e 	bl	8000798 <mouseDriver_sendMsg>
 800267c:	e7ed      	b.n	800265a <mouseDriver_readMsg+0xaa>
 800267e:	bf00      	nop
 8002680:	20000091 	.word	0x20000091
 8002684:	200000b4 	.word	0x200000b4
 8002688:	200000a0 	.word	0x200000a0
 800268c:	20000310 	.word	0x20000310
 8002690:	2000008c 	.word	0x2000008c

08002694 <mouseDriver_controlISR>:
}

/* ISR Functions */
void mouseDriver_controlISR(void){

}
 8002694:	4770      	bx	lr
	...

08002698 <sensorDriver_powerup>:
 *      Author: Didier
 */

# include "sensorDriver.h"

uint8_t sensorDriver_powerup(void){
 8002698:	b538      	push	{r3, r4, r5, lr}
	uint8_t value = 0;

	/* Disable the sensor */
	HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_SET);
 800269a:	4c48      	ldr	r4, [pc, #288]	; (80027bc <sensorDriver_powerup+0x124>)
 800269c:	2201      	movs	r2, #1
 800269e:	4611      	mov	r1, r2
 80026a0:	4620      	mov	r0, r4
 80026a2:	f002 f80d 	bl	80046c0 <HAL_GPIO_WritePin>

	/* Make sure all sensor is switched off */
	HAL_GPIO_WritePin(PW_0_GPIO_Port, PW_0_Pin, GPIO_PIN_RESET);
 80026a6:	4d46      	ldr	r5, [pc, #280]	; (80027c0 <sensorDriver_powerup+0x128>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	2101      	movs	r1, #1
 80026ac:	4628      	mov	r0, r5
 80026ae:	f002 f807 	bl	80046c0 <HAL_GPIO_WritePin>
	main_write_sensor(SENSOR_X, 0x00, 0x00);
 80026b2:	2200      	movs	r2, #0
 80026b4:	4611      	mov	r1, r2
 80026b6:	4610      	mov	r0, r2
 80026b8:	f000 f962 	bl	8002980 <main_write_sensor>
	HAL_Delay(100);
 80026bc:	2064      	movs	r0, #100	; 0x64
 80026be:	f001 fc93 	bl	8003fe8 <HAL_Delay>

	/* Gives voltage to sensors */
	HAL_GPIO_WritePin(PW_0_GPIO_Port, PW_0_Pin, GPIO_PIN_SET);
 80026c2:	2201      	movs	r2, #1
 80026c4:	4611      	mov	r1, r2
 80026c6:	4628      	mov	r0, r5
 80026c8:	f001 fffa 	bl	80046c0 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80026cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026d0:	f001 fc8a 	bl	8003fe8 <HAL_Delay>

	/* Reset SPI port */
	HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_SET);
 80026d4:	2201      	movs	r2, #1
 80026d6:	4611      	mov	r1, r2
 80026d8:	4620      	mov	r0, r4
 80026da:	f001 fff1 	bl	80046c0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80026de:	2005      	movs	r0, #5
 80026e0:	f001 fc82 	bl	8003fe8 <HAL_Delay>
	HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	2101      	movs	r1, #1
 80026e8:	4620      	mov	r0, r4
 80026ea:	f001 ffe9 	bl	80046c0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80026ee:	2005      	movs	r0, #5
 80026f0:	f001 fc7a 	bl	8003fe8 <HAL_Delay>
	HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_SET);
 80026f4:	2201      	movs	r2, #1
 80026f6:	4611      	mov	r1, r2
 80026f8:	4620      	mov	r0, r4
 80026fa:	f001 ffe1 	bl	80046c0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80026fe:	2005      	movs	r0, #5
 8002700:	f001 fc72 	bl	8003fe8 <HAL_Delay>

	/* Write to Power_up_Reset register */
	main_write_sensor(SENSOR_X, Power_Up_Reset, 0x5A);
 8002704:	225a      	movs	r2, #90	; 0x5a
 8002706:	213a      	movs	r1, #58	; 0x3a
 8002708:	2000      	movs	r0, #0
 800270a:	f000 f939 	bl	8002980 <main_write_sensor>

	/* Wait at least 50 ms */
	HAL_Delay(50);
 800270e:	2032      	movs	r0, #50	; 0x32
 8002710:	f001 fc6a 	bl	8003fe8 <HAL_Delay>

	/* Read from data registers */
	main_read_sensor(SENSOR_X, 0x02);
 8002714:	2102      	movs	r1, #2
 8002716:	2000      	movs	r0, #0
 8002718:	f000 f8d8 	bl	80028cc <main_read_sensor>
	main_read_sensor(SENSOR_X, 0x03);
 800271c:	2103      	movs	r1, #3
 800271e:	2000      	movs	r0, #0
 8002720:	f000 f8d4 	bl	80028cc <main_read_sensor>
	main_read_sensor(SENSOR_X, 0x04);
 8002724:	2104      	movs	r1, #4
 8002726:	2000      	movs	r0, #0
 8002728:	f000 f8d0 	bl	80028cc <main_read_sensor>
	main_read_sensor(SENSOR_X, 0x05);
 800272c:	2105      	movs	r1, #5
 800272e:	2000      	movs	r0, #0
 8002730:	f000 f8cc 	bl	80028cc <main_read_sensor>
	main_read_sensor(SENSOR_X, 0x06);
 8002734:	2106      	movs	r1, #6
 8002736:	2000      	movs	r0, #0
 8002738:	f000 f8c8 	bl	80028cc <main_read_sensor>

	/* Start ROM Download */
	main_write_sensor(SENSOR_X, Config2, 0x20);
 800273c:	2220      	movs	r2, #32
 800273e:	2110      	movs	r1, #16
 8002740:	2000      	movs	r0, #0
 8002742:	f000 f91d 	bl	8002980 <main_write_sensor>
	main_write_sensor(SENSOR_X, SROM_Enable, 0x1d);
 8002746:	221d      	movs	r2, #29
 8002748:	2113      	movs	r1, #19
 800274a:	2000      	movs	r0, #0
 800274c:	f000 f918 	bl	8002980 <main_write_sensor>
	HAL_Delay(10);
 8002750:	200a      	movs	r0, #10
 8002752:	f001 fc49 	bl	8003fe8 <HAL_Delay>
	main_write_sensor(SENSOR_X,SROM_Enable, 0x18);
 8002756:	2218      	movs	r2, #24
 8002758:	2113      	movs	r1, #19
 800275a:	2000      	movs	r0, #0
 800275c:	f000 f910 	bl	8002980 <main_write_sensor>
	main_wait_160us();
 8002760:	f000 f86e 	bl	8002840 <main_wait_160us>
	main_wait_20us();
 8002764:	f000 f879 	bl	800285a <main_wait_20us>

	/* Burst start with adress */
	HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2101      	movs	r1, #1
 800276c:	4620      	mov	r0, r4
 800276e:	f001 ffa7 	bl	80046c0 <HAL_GPIO_WritePin>
	main_write_sensor_burst(SROM_Load_Burst|0x80);
 8002772:	20e2      	movs	r0, #226	; 0xe2
 8002774:	f000 f946 	bl	8002a04 <main_write_sensor_burst>
 8002778:	4d12      	ldr	r5, [pc, #72]	; (80027c4 <sensorDriver_powerup+0x12c>)
 800277a:	1e6c      	subs	r4, r5, #1
 800277c:	f605 75fd 	addw	r5, r5, #4093	; 0xffd
	for (int i = 0; i < firmware_length; i++ ){
		main_write_sensor_burst(firmware_data[i]);
 8002780:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002784:	f000 f93e 	bl	8002a04 <main_write_sensor_burst>
	for (int i = 0; i < firmware_length; i++ ){
 8002788:	42ac      	cmp	r4, r5
 800278a:	d1f9      	bne.n	8002780 <sensorDriver_powerup+0xe8>
	}
	HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_SET);
 800278c:	2201      	movs	r2, #1
 800278e:	4611      	mov	r1, r2
 8002790:	480a      	ldr	r0, [pc, #40]	; (80027bc <sensorDriver_powerup+0x124>)
 8002792:	f001 ff95 	bl	80046c0 <HAL_GPIO_WritePin>
	main_wait_160us();
 8002796:	f000 f853 	bl	8002840 <main_wait_160us>
	main_wait_20us();
 800279a:	f000 f85e 	bl	800285a <main_wait_20us>
	main_wait_20us();
 800279e:	f000 f85c 	bl	800285a <main_wait_20us>

	/* Read SROM_ID for verification */
	value = main_read_sensor(SENSOR_X, SROM_ID);
 80027a2:	212a      	movs	r1, #42	; 0x2a
 80027a4:	2000      	movs	r0, #0
 80027a6:	f000 f891 	bl	80028cc <main_read_sensor>
 80027aa:	4604      	mov	r4, r0

	/* Write to Config2 for wired mouse */
	main_write_sensor(SENSOR_X, Config2, 0x00);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2110      	movs	r1, #16
 80027b0:	4610      	mov	r0, r2
 80027b2:	f000 f8e5 	bl	8002980 <main_write_sensor>
	return value;
}
 80027b6:	4620      	mov	r0, r4
 80027b8:	bd38      	pop	{r3, r4, r5, pc}
 80027ba:	bf00      	nop
 80027bc:	48000800 	.word	0x48000800
 80027c0:	48000400 	.word	0x48000400
 80027c4:	0800805c 	.word	0x0800805c

080027c8 <sensorDrive_motion_read>:

void sensorDrive_motion_read(sensor_data_t * sensor_data){
 80027c8:	b530      	push	{r4, r5, lr}
 80027ca:	b085      	sub	sp, #20
 80027cc:	4604      	mov	r4, r0
	uint8_t data[12];
	uint8_t temp_l = 0;
	uint8_t temp_h = 0;

	/* write to motion burst adress */
	main_write_sensor(SENSOR_X, Motion_Burst, 0xbb);
 80027ce:	22bb      	movs	r2, #187	; 0xbb
 80027d0:	2150      	movs	r1, #80	; 0x50
 80027d2:	2000      	movs	r0, #0
 80027d4:	f000 f8d4 	bl	8002980 <main_write_sensor>

	/* Prepare for burst */
	HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_RESET);
 80027d8:	4d18      	ldr	r5, [pc, #96]	; (800283c <sensorDrive_motion_read+0x74>)
 80027da:	2200      	movs	r2, #0
 80027dc:	2101      	movs	r1, #1
 80027de:	4628      	mov	r0, r5
 80027e0:	f001 ff6e 	bl	80046c0 <HAL_GPIO_WritePin>
	main_write_sensor_burst(Motion_Burst);
 80027e4:	2050      	movs	r0, #80	; 0x50
 80027e6:	f000 f90d 	bl	8002a04 <main_write_sensor_burst>
	/* Start burst */
	main_read_sensor_motion_burst(data);
 80027ea:	a801      	add	r0, sp, #4
 80027ec:	f000 f91c 	bl	8002a28 <main_read_sensor_motion_burst>
	HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_SET);
 80027f0:	2201      	movs	r2, #1
 80027f2:	4611      	mov	r1, r2
 80027f4:	4628      	mov	r0, r5
 80027f6:	f001 ff63 	bl	80046c0 <HAL_GPIO_WritePin>
	/* END of burst */
	main_wait_20us();
 80027fa:	f000 f82e 	bl	800285a <main_wait_20us>

	/* Read other register for stopping burst mode */
	main_read_sensor(SENSOR_X,  Observation);
 80027fe:	2124      	movs	r1, #36	; 0x24
 8002800:	2000      	movs	r0, #0
 8002802:	f000 f863 	bl	80028cc <main_read_sensor>

	/* TWO's Complement */
	temp_l = ~(data[DELTA_X_L]) + 1;
	temp_h = ~(data[DELTA_X_H]) + 1;
 8002806:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800280a:	425b      	negs	r3, r3
	sensor_data->delta[0] = (temp_h<<8) | (temp_l);
 800280c:	b2da      	uxtb	r2, r3
	temp_l = ~(data[DELTA_X_L]) + 1;
 800280e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002812:	425b      	negs	r3, r3
	sensor_data->delta[0] = (temp_h<<8) | (temp_l);
 8002814:	b2db      	uxtb	r3, r3
 8002816:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800281a:	8023      	strh	r3, [r4, #0]
	temp_l = ~(data[DELTA_Y_L]) + 1;
	temp_h = ~(data[DELTA_Y_H]) + 1;
 800281c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002820:	425b      	negs	r3, r3
	sensor_data->delta[1] = (temp_h<<8) | (temp_l);
 8002822:	b2da      	uxtb	r2, r3
	temp_l = ~(data[DELTA_Y_L]) + 1;
 8002824:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002828:	425b      	negs	r3, r3
	sensor_data->delta[1] = (temp_h<<8) | (temp_l);
 800282a:	b2db      	uxtb	r3, r3
 800282c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002830:	8063      	strh	r3, [r4, #2]
	sensor_data->squal = data[SQUAL_READ];
 8002832:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002836:	7123      	strb	r3, [r4, #4]
}
 8002838:	b005      	add	sp, #20
 800283a:	bd30      	pop	{r4, r5, pc}
 800283c:	48000800 	.word	0x48000800

08002840 <main_wait_160us>:
static void MX_TIM7_Init(void);
static void MX_TIM1_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
void main_wait_160us(void){
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	f44f 7461 	mov.w	r4, #900	; 0x384
	int i = 0;
	i = 0;
	while(i<900){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002846:	2620      	movs	r6, #32
 8002848:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 800284c:	4631      	mov	r1, r6
 800284e:	4628      	mov	r0, r5
 8002850:	f001 ff3b 	bl	80046ca <HAL_GPIO_TogglePin>
	while(i<900){
 8002854:	3c01      	subs	r4, #1
 8002856:	d1f9      	bne.n	800284c <main_wait_160us+0xc>
		i++;
	}
}
 8002858:	bd70      	pop	{r4, r5, r6, pc}

0800285a <main_wait_20us>:
void main_wait_20us(void){
 800285a:	b570      	push	{r4, r5, r6, lr}
 800285c:	24b9      	movs	r4, #185	; 0xb9
	int i = 0;
	i = 0;
	while(i<185){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800285e:	2620      	movs	r6, #32
 8002860:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8002864:	4631      	mov	r1, r6
 8002866:	4628      	mov	r0, r5
 8002868:	f001 ff2f 	bl	80046ca <HAL_GPIO_TogglePin>
	while(i<185){
 800286c:	3c01      	subs	r4, #1
 800286e:	d1f9      	bne.n	8002864 <main_wait_20us+0xa>
		i++;
	}
}
 8002870:	bd70      	pop	{r4, r5, r6, pc}

08002872 <main_wait_1us>:
void main_wait_1us(void){
 8002872:	b570      	push	{r4, r5, r6, lr}
 8002874:	2419      	movs	r4, #25
	int i = 0;
	i = 0;
	while(i<25){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002876:	2620      	movs	r6, #32
 8002878:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 800287c:	4631      	mov	r1, r6
 800287e:	4628      	mov	r0, r5
 8002880:	f001 ff23 	bl	80046ca <HAL_GPIO_TogglePin>
	while(i<25){
 8002884:	3c01      	subs	r4, #1
 8002886:	d1f9      	bne.n	800287c <main_wait_1us+0xa>
		i++;
	}
}
 8002888:	bd70      	pop	{r4, r5, r6, pc}
	...

0800288c <main_get_huart_tx_state>:
int main_get_huart_tx_state(void){
 800288c:	b508      	push	{r3, lr}
	return (HAL_DMA_GetState(&hdma_usart2_tx));
 800288e:	4802      	ldr	r0, [pc, #8]	; (8002898 <main_get_huart_tx_state+0xc>)
 8002890:	f001 fd7d 	bl	800438e <HAL_DMA_GetState>
}
 8002894:	bd08      	pop	{r3, pc}
 8002896:	bf00      	nop
 8002898:	20016be8 	.word	0x20016be8

0800289c <main_transmit_buffer>:
void main_transmit_buffer(uint8_t *outBuffer, uint16_t msg_size){
 800289c:	b508      	push	{r3, lr}
	HAL_UART_Transmit_DMA(&huart2, outBuffer,msg_size);
 800289e:	460a      	mov	r2, r1
 80028a0:	4601      	mov	r1, r0
 80028a2:	4802      	ldr	r0, [pc, #8]	; (80028ac <main_transmit_buffer+0x10>)
 80028a4:	f004 f9b0 	bl	8006c08 <HAL_UART_Transmit_DMA>
}
 80028a8:	bd08      	pop	{r3, pc}
 80028aa:	bf00      	nop
 80028ac:	20016c70 	.word	0x20016c70

080028b0 <main_stop_motors>:
void main_stop_motors(void)
{
 80028b0:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80028b2:	4c05      	ldr	r4, [pc, #20]	; (80028c8 <main_stop_motors+0x18>)
 80028b4:	2100      	movs	r1, #0
 80028b6:	4620      	mov	r0, r4
 80028b8:	f004 f872 	bl	80069a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80028bc:	2104      	movs	r1, #4
 80028be:	4620      	mov	r0, r4
 80028c0:	f004 f86e 	bl	80069a0 <HAL_TIM_PWM_Stop>
}
 80028c4:	bd10      	pop	{r4, pc}
 80028c6:	bf00      	nop
 80028c8:	20016c30 	.word	0x20016c30

080028cc <main_read_sensor>:
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

}
uint8_t main_read_sensor (uint8_t sensor, uint8_t adress ){
 80028cc:	b530      	push	{r4, r5, lr}
 80028ce:	b083      	sub	sp, #12
	uint8_t value = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t adress_read = adress & 0x7F;
 80028d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80028da:	f88d 1006 	strb.w	r1, [sp, #6]

	switch(sensor){
 80028de:	b118      	cbz	r0, 80028e8 <main_read_sensor+0x1c>
 80028e0:	2801      	cmp	r0, #1
 80028e2:	d025      	beq.n	8002930 <main_read_sensor+0x64>
		HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_SET);
		main_wait_20us();
		return (value);
	break;
	default:
		return (0);
 80028e4:	2000      	movs	r0, #0
 80028e6:	e021      	b.n	800292c <main_read_sensor+0x60>
		HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_RESET);
 80028e8:	4c23      	ldr	r4, [pc, #140]	; (8002978 <main_read_sensor+0xac>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	2101      	movs	r1, #1
 80028ee:	4620      	mov	r0, r4
 80028f0:	f001 fee6 	bl	80046c0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &adress_read, 1, 100);
 80028f4:	4d21      	ldr	r5, [pc, #132]	; (800297c <main_read_sensor+0xb0>)
 80028f6:	2364      	movs	r3, #100	; 0x64
 80028f8:	2201      	movs	r2, #1
 80028fa:	f10d 0106 	add.w	r1, sp, #6
 80028fe:	4628      	mov	r0, r5
 8002900:	f003 f896 	bl	8005a30 <HAL_SPI_Transmit>
		main_wait_160us();
 8002904:	f7ff ff9c 	bl	8002840 <main_wait_160us>
		HAL_SPI_Receive(&hspi2, &value, 1, 100);
 8002908:	2364      	movs	r3, #100	; 0x64
 800290a:	2201      	movs	r2, #1
 800290c:	f10d 0107 	add.w	r1, sp, #7
 8002910:	4628      	mov	r0, r5
 8002912:	f003 fae6 	bl	8005ee2 <HAL_SPI_Receive>
		main_wait_1us();
 8002916:	f7ff ffac 	bl	8002872 <main_wait_1us>
		HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_SET);
 800291a:	2201      	movs	r2, #1
 800291c:	4611      	mov	r1, r2
 800291e:	4620      	mov	r0, r4
 8002920:	f001 fece 	bl	80046c0 <HAL_GPIO_WritePin>
		main_wait_20us();
 8002924:	f7ff ff99 	bl	800285a <main_wait_20us>
		return (value);
 8002928:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
}
 800292c:	b003      	add	sp, #12
 800292e:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_RESET);
 8002930:	4c11      	ldr	r4, [pc, #68]	; (8002978 <main_read_sensor+0xac>)
 8002932:	2200      	movs	r2, #0
 8002934:	2102      	movs	r1, #2
 8002936:	4620      	mov	r0, r4
 8002938:	f001 fec2 	bl	80046c0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &adress_read, 1, 100);
 800293c:	4d0f      	ldr	r5, [pc, #60]	; (800297c <main_read_sensor+0xb0>)
 800293e:	2364      	movs	r3, #100	; 0x64
 8002940:	2201      	movs	r2, #1
 8002942:	f10d 0106 	add.w	r1, sp, #6
 8002946:	4628      	mov	r0, r5
 8002948:	f003 f872 	bl	8005a30 <HAL_SPI_Transmit>
		main_wait_160us();
 800294c:	f7ff ff78 	bl	8002840 <main_wait_160us>
		HAL_SPI_Receive(&hspi2, &value, 1, 100);
 8002950:	2364      	movs	r3, #100	; 0x64
 8002952:	2201      	movs	r2, #1
 8002954:	f10d 0107 	add.w	r1, sp, #7
 8002958:	4628      	mov	r0, r5
 800295a:	f003 fac2 	bl	8005ee2 <HAL_SPI_Receive>
		main_wait_1us();
 800295e:	f7ff ff88 	bl	8002872 <main_wait_1us>
		HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_SET);
 8002962:	2201      	movs	r2, #1
 8002964:	2102      	movs	r1, #2
 8002966:	4620      	mov	r0, r4
 8002968:	f001 feaa 	bl	80046c0 <HAL_GPIO_WritePin>
		main_wait_20us();
 800296c:	f7ff ff75 	bl	800285a <main_wait_20us>
		return (value);
 8002970:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002974:	e7da      	b.n	800292c <main_read_sensor+0x60>
 8002976:	bf00      	nop
 8002978:	48000800 	.word	0x48000800
 800297c:	20016b84 	.word	0x20016b84

08002980 <main_write_sensor>:

void main_write_sensor (uint8_t sensor, uint8_t adress, uint8_t data){
 8002980:	b510      	push	{r4, lr}
 8002982:	b082      	sub	sp, #8
	uint8_t value = data;
	uint8_t adress_write = adress | 0x80;
 8002984:	f061 017f 	orn	r1, r1, #127	; 0x7f
	uint8_t pack[2];
	pack[0] = adress_write;
 8002988:	f88d 1004 	strb.w	r1, [sp, #4]
	pack[1] = value;
 800298c:	f88d 2005 	strb.w	r2, [sp, #5]

	switch(sensor){
 8002990:	b118      	cbz	r0, 800299a <main_write_sensor+0x1a>
 8002992:	2801      	cmp	r0, #1
 8002994:	d019      	beq.n	80029ca <main_write_sensor+0x4a>
		main_wait_20us();
	break;
	default:
		return;
	}
}
 8002996:	b002      	add	sp, #8
 8002998:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_RESET);
 800299a:	4c18      	ldr	r4, [pc, #96]	; (80029fc <main_write_sensor+0x7c>)
 800299c:	2200      	movs	r2, #0
 800299e:	2101      	movs	r1, #1
 80029a0:	4620      	mov	r0, r4
 80029a2:	f001 fe8d 	bl	80046c0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, pack, 2, 10);
 80029a6:	230a      	movs	r3, #10
 80029a8:	2202      	movs	r2, #2
 80029aa:	a901      	add	r1, sp, #4
 80029ac:	4814      	ldr	r0, [pc, #80]	; (8002a00 <main_write_sensor+0x80>)
 80029ae:	f003 f83f 	bl	8005a30 <HAL_SPI_Transmit>
		main_wait_20us();
 80029b2:	f7ff ff52 	bl	800285a <main_wait_20us>
		HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_SET);
 80029b6:	2201      	movs	r2, #1
 80029b8:	4611      	mov	r1, r2
 80029ba:	4620      	mov	r0, r4
 80029bc:	f001 fe80 	bl	80046c0 <HAL_GPIO_WritePin>
		main_wait_160us();
 80029c0:	f7ff ff3e 	bl	8002840 <main_wait_160us>
		main_wait_20us();
 80029c4:	f7ff ff49 	bl	800285a <main_wait_20us>
	break;
 80029c8:	e7e5      	b.n	8002996 <main_write_sensor+0x16>
		HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_RESET);
 80029ca:	4c0c      	ldr	r4, [pc, #48]	; (80029fc <main_write_sensor+0x7c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	2102      	movs	r1, #2
 80029d0:	4620      	mov	r0, r4
 80029d2:	f001 fe75 	bl	80046c0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, pack, 2, 10);
 80029d6:	230a      	movs	r3, #10
 80029d8:	2202      	movs	r2, #2
 80029da:	a901      	add	r1, sp, #4
 80029dc:	4808      	ldr	r0, [pc, #32]	; (8002a00 <main_write_sensor+0x80>)
 80029de:	f003 f827 	bl	8005a30 <HAL_SPI_Transmit>
		main_wait_20us();
 80029e2:	f7ff ff3a 	bl	800285a <main_wait_20us>
		HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_SET);
 80029e6:	2201      	movs	r2, #1
 80029e8:	2102      	movs	r1, #2
 80029ea:	4620      	mov	r0, r4
 80029ec:	f001 fe68 	bl	80046c0 <HAL_GPIO_WritePin>
		main_wait_160us();
 80029f0:	f7ff ff26 	bl	8002840 <main_wait_160us>
		main_wait_20us();
 80029f4:	f7ff ff31 	bl	800285a <main_wait_20us>
	break;
 80029f8:	e7cd      	b.n	8002996 <main_write_sensor+0x16>
 80029fa:	bf00      	nop
 80029fc:	48000800 	.word	0x48000800
 8002a00:	20016b84 	.word	0x20016b84

08002a04 <main_write_sensor_burst>:
void main_write_sensor_burst(uint8_t data){
 8002a04:	b500      	push	{lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	a902      	add	r1, sp, #8
 8002a0a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi2, &data, 1, 10);
 8002a0e:	230a      	movs	r3, #10
 8002a10:	2201      	movs	r2, #1
 8002a12:	4804      	ldr	r0, [pc, #16]	; (8002a24 <main_write_sensor_burst+0x20>)
 8002a14:	f003 f80c 	bl	8005a30 <HAL_SPI_Transmit>
	main_wait_20us();
 8002a18:	f7ff ff1f 	bl	800285a <main_wait_20us>
}
 8002a1c:	b003      	add	sp, #12
 8002a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a22:	bf00      	nop
 8002a24:	20016b84 	.word	0x20016b84

08002a28 <main_read_sensor_motion_burst>:
void main_read_sensor_motion_burst(uint8_t *data ){
 8002a28:	b508      	push	{r3, lr}
	HAL_SPI_Receive(&hspi2,data,12,100);
 8002a2a:	2364      	movs	r3, #100	; 0x64
 8002a2c:	220c      	movs	r2, #12
 8002a2e:	4601      	mov	r1, r0
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <main_read_sensor_motion_burst+0x14>)
 8002a32:	f003 fa56 	bl	8005ee2 <HAL_SPI_Receive>
	main_wait_1us();
 8002a36:	f7ff ff1c 	bl	8002872 <main_wait_1us>
}
 8002a3a:	bd08      	pop	{r3, pc}
 8002a3c:	20016b84 	.word	0x20016b84

08002a40 <HAL_UART_RxCpltCallback>:
	HAL_TIM_IRQHandler(&htim7);

}

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a44:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 8002a48:	4604      	mov	r4, r0
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002a4a:	2026      	movs	r0, #38	; 0x26
 8002a4c:	f001 fb32 	bl	80040b4 <HAL_NVIC_DisableIRQ>
	mavlink_message_t inmsg;
	mavlink_status_t msgStatus;
	if (huart->Instance == USART2){
 8002a50:	6822      	ldr	r2, [r4, #0]
 8002a52:	4bb1      	ldr	r3, [pc, #708]	; (8002d18 <HAL_UART_RxCpltCallback+0x2d8>)
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d006      	beq.n	8002a66 <HAL_UART_RxCpltCallback+0x26>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){

			mouseDriver_readMsg(inmsg);
		}
	}
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a58:	2026      	movs	r0, #38	; 0x26
 8002a5a:	f001 fb1d 	bl	8004098 <HAL_NVIC_EnableIRQ>
}
 8002a5e:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 8002a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_UART_Receive_IT(&huart2, &inByte, 1);
 8002a66:	4cad      	ldr	r4, [pc, #692]	; (8002d1c <HAL_UART_RxCpltCallback+0x2dc>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	48ac      	ldr	r0, [pc, #688]	; (8002d20 <HAL_UART_RxCpltCallback+0x2e0>)
 8002a6e:	f004 f861 	bl	8006b34 <HAL_UART_Receive_IT>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 8002a72:	7823      	ldrb	r3, [r4, #0]
 8002a74:	9346      	str	r3, [sp, #280]	; 0x118
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002a76:	4bab      	ldr	r3, [pc, #684]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8002a7c:	78db      	ldrb	r3, [r3, #3]
 8002a7e:	2b0f      	cmp	r3, #15
 8002a80:	f200 8205 	bhi.w	8002e8e <HAL_UART_RxCpltCallback+0x44e>
 8002a84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a88:	00100010 	.word	0x00100010
 8002a8c:	00580036 	.word	0x00580036
 8002a90:	00a10075 	.word	0x00a10075
 8002a94:	00c900b5 	.word	0x00c900b5
 8002a98:	010600dd 	.word	0x010600dd
 8002a9c:	01520124 	.word	0x01520124
 8002aa0:	01c40171 	.word	0x01c40171
 8002aa4:	022601c4 	.word	0x022601c4
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8002aa8:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002aaa:	2bfd      	cmp	r3, #253	; 0xfd
 8002aac:	d012      	beq.n	8002ad4 <HAL_UART_RxCpltCallback+0x94>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		} else if (c == MAVLINK_STX_MAVLINK1)
 8002aae:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002ab0:	2bfe      	cmp	r3, #254	; 0xfe
 8002ab2:	d171      	bne.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002ab4:	4a9b      	ldr	r2, [pc, #620]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	70d3      	strb	r3, [r2, #3]
			rxmsg->len = 0;
 8002aba:	4b9b      	ldr	r3, [pc, #620]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002abc:	2100      	movs	r1, #0
 8002abe:	70d9      	strb	r1, [r3, #3]
			rxmsg->magic = c;
 8002ac0:	21fe      	movs	r1, #254	; 0xfe
 8002ac2:	7099      	strb	r1, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002ac4:	7b11      	ldrb	r1, [r2, #12]
 8002ac6:	f041 0101 	orr.w	r1, r1, #1
 8002aca:	7311      	strb	r1, [r2, #12]
	msg->checksum = crcTmp;
 8002acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	e061      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002ad4:	4a93      	ldr	r2, [pc, #588]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	70d3      	strb	r3, [r2, #3]
			rxmsg->len = 0;
 8002ada:	4b93      	ldr	r3, [pc, #588]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002adc:	2100      	movs	r1, #0
 8002ade:	70d9      	strb	r1, [r3, #3]
			rxmsg->magic = c;
 8002ae0:	21fd      	movs	r1, #253	; 0xfd
 8002ae2:	7099      	strb	r1, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002ae4:	7b11      	ldrb	r1, [r2, #12]
 8002ae6:	f021 0101 	bic.w	r1, r1, #1
 8002aea:	7311      	strb	r1, [r2, #12]
	msg->checksum = crcTmp;
 8002aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af0:	801a      	strh	r2, [r3, #0]
 8002af2:	e051      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
 8002af4:	498c      	ldr	r1, [pc, #560]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002af6:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8002af8:	70ca      	strb	r2, [r1, #3]
			status->packet_idx = 0;
 8002afa:	488a      	ldr	r0, [pc, #552]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002afc:	2300      	movs	r3, #0
 8002afe:	7103      	strb	r3, [r0, #4]
	uint16_t checksum = msg->checksum;
 8002b00:	880c      	ldrh	r4, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002b02:	ea82 0304 	eor.w	r3, r2, r4
        tmp ^= (tmp<<4);
 8002b06:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002b0a:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002b0c:	091a      	lsrs	r2, r3, #4
 8002b0e:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 8002b12:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002b16:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8002b1a:	800b      	strh	r3, [r1, #0]
			mavlink_update_checksum(rxmsg, c);
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002b1c:	7b03      	ldrb	r3, [r0, #12]
 8002b1e:	f013 0f01 	tst.w	r3, #1
 8002b22:	d005      	beq.n	8002b30 <HAL_UART_RxCpltCallback+0xf0>
                            rxmsg->incompat_flags = 0;
 8002b24:	2200      	movs	r2, #0
 8002b26:	710a      	strb	r2, [r1, #4]
                            rxmsg->compat_flags = 0;
 8002b28:	714a      	strb	r2, [r1, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	70c2      	strb	r2, [r0, #3]
 8002b2e:	e033      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8002b30:	4b7c      	ldr	r3, [pc, #496]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002b32:	2203      	movs	r2, #3
 8002b34:	70da      	strb	r2, [r3, #3]
 8002b36:	e02f      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
                        }
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8002b38:	4b7b      	ldr	r3, [pc, #492]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002b3a:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8002b3c:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8002b3e:	f032 0301 	bics.w	r3, r2, #1
 8002b42:	d003      	beq.n	8002b4c <HAL_UART_RxCpltCallback+0x10c>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
			status->msg_received = 0;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002b44:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	70da      	strb	r2, [r3, #3]
 8002b4a:	e025      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
	uint16_t checksum = msg->checksum;
 8002b4c:	4976      	ldr	r1, [pc, #472]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002b4e:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002b50:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002b52:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8002b54:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002b58:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002b5a:	091a      	lsrs	r2, r3, #4
 8002b5c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8002b60:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002b64:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8002b68:	800b      	strh	r3, [r1, #0]
			break;
		}
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	70da      	strb	r2, [r3, #3]
 8002b70:	e012      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
		break;

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8002b72:	496d      	ldr	r1, [pc, #436]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002b74:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002b76:	714b      	strb	r3, [r1, #5]
	uint16_t checksum = msg->checksum;
 8002b78:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002b7a:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8002b7c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002b80:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002b82:	091a      	lsrs	r2, r3, #4
 8002b84:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8002b88:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002b8c:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8002b90:	800b      	strh	r3, [r1, #0]
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002b92:	4b64      	ldr	r3, [pc, #400]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002b94:	2205      	movs	r2, #5
 8002b96:	70da      	strb	r2, [r3, #3]
		break;
	}

	bufferIndex++;
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8002b98:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
		// Count this packet as received
		status->packet_rx_success_count++;
	}

       if (r_message != NULL) {
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8002b9c:	4a62      	ldr	r2, [pc, #392]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002b9e:	78d2      	ldrb	r2, [r2, #3]
 8002ba0:	f88d 234f 	strb.w	r2, [sp, #847]	; 0x34f
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
           r_mavlink_status->flags = status->flags;
       }
       status->parse_error = 0;
 8002ba4:	4a5f      	ldr	r2, [pc, #380]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	7091      	strb	r1, [r2, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	f040 85f9 	bne.w	80037a2 <HAL_UART_RxCpltCallback+0xd62>
    status->parse_error++;
 8002bb0:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	709a      	strb	r2, [r3, #2]
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 8002bba:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002bbc:	2bfd      	cmp	r3, #253	; 0xfd
 8002bbe:	f000 85fa 	beq.w	80037b6 <HAL_UART_RxCpltCallback+0xd76>
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002bc2:	4b58      	ldr	r3, [pc, #352]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	70da      	strb	r2, [r3, #3]
 8002bc8:	e746      	b.n	8002a58 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->seq = c;
 8002bca:	4957      	ldr	r1, [pc, #348]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002bcc:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002bce:	718b      	strb	r3, [r1, #6]
	uint16_t checksum = msg->checksum;
 8002bd0:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002bd2:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8002bd4:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002bd8:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002bda:	091a      	lsrs	r2, r3, #4
 8002bdc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8002be0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002be4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8002be8:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8002bea:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002bec:	2206      	movs	r2, #6
 8002bee:	70da      	strb	r2, [r3, #3]
 8002bf0:	e7d2      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->sysid = c;
 8002bf2:	494d      	ldr	r1, [pc, #308]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002bf4:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002bf6:	71cb      	strb	r3, [r1, #7]
	uint16_t checksum = msg->checksum;
 8002bf8:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002bfa:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8002bfc:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002c00:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002c02:	091a      	lsrs	r2, r3, #4
 8002c04:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8002c08:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002c0c:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8002c10:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8002c12:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	70da      	strb	r2, [r3, #3]
 8002c18:	e7be      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->compid = c;
 8002c1a:	4943      	ldr	r1, [pc, #268]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002c1c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8002c1e:	720b      	strb	r3, [r1, #8]
	uint16_t checksum = msg->checksum;
 8002c20:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002c22:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8002c24:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002c28:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002c2a:	091a      	lsrs	r2, r3, #4
 8002c2c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8002c30:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002c34:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8002c38:	800b      	strh	r3, [r1, #0]
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8002c3a:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	70da      	strb	r2, [r3, #3]
 8002c40:	e7aa      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid = c;
 8002c42:	4939      	ldr	r1, [pc, #228]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002c44:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8002c46:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8002c4a:	724b      	strb	r3, [r1, #9]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	728b      	strb	r3, [r1, #10]
 8002c50:	72cb      	strb	r3, [r1, #11]
	uint16_t checksum = msg->checksum;
 8002c52:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002c54:	ea82 0300 	eor.w	r3, r2, r0
        tmp ^= (tmp<<4);
 8002c58:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002c5c:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002c5e:	091a      	lsrs	r2, r3, #4
 8002c60:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8002c64:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002c68:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8002c6c:	800b      	strh	r3, [r1, #0]
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002c70:	7b1b      	ldrb	r3, [r3, #12]
 8002c72:	f013 0f01 	tst.w	r3, #1
 8002c76:	d009      	beq.n	8002c8c <HAL_UART_RxCpltCallback+0x24c>
			if(rxmsg->len > 0) {
 8002c78:	78cb      	ldrb	r3, [r1, #3]
 8002c7a:	b11b      	cbz	r3, 8002c84 <HAL_UART_RxCpltCallback+0x244>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002c7e:	220b      	movs	r2, #11
 8002c80:	70da      	strb	r2, [r3, #3]
 8002c82:	e789      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002c86:	220c      	movs	r2, #12
 8002c88:	70da      	strb	r2, [r3, #3]
 8002c8a:	e785      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002c8e:	2209      	movs	r2, #9
 8002c90:	70da      	strb	r2, [r3, #3]
 8002c92:	e781      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid |= c<<8;
 8002c94:	4924      	ldr	r1, [pc, #144]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002c96:	688a      	ldr	r2, [r1, #8]
 8002c98:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 8002ca0:	724b      	strb	r3, [r1, #9]
 8002ca2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002ca6:	728a      	strb	r2, [r1, #10]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	72cb      	strb	r3, [r1, #11]
	uint16_t checksum = msg->checksum;
 8002cac:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002cae:	ea84 0300 	eor.w	r3, r4, r0
        tmp ^= (tmp<<4);
 8002cb2:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002cb6:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002cb8:	091a      	lsrs	r2, r3, #4
 8002cba:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8002cbe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002cc2:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8002cc6:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8002cc8:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002cca:	220a      	movs	r2, #10
 8002ccc:	70da      	strb	r2, [r3, #3]
 8002cce:	e763      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <HAL_UART_RxCpltCallback+0x2e8>)
 8002cd2:	6891      	ldr	r1, [r2, #8]
 8002cd4:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8002cd6:	0423      	lsls	r3, r4, #16
 8002cd8:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 8002cdc:	7253      	strb	r3, [r2, #9]
 8002cde:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002ce2:	7291      	strb	r1, [r2, #10]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	72d3      	strb	r3, [r2, #11]
	uint16_t checksum = msg->checksum;
 8002ce8:	8810      	ldrh	r0, [r2, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002cea:	ea84 0300 	eor.w	r3, r4, r0
        tmp ^= (tmp<<4);
 8002cee:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002cf2:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002cf4:	0919      	lsrs	r1, r3, #4
 8002cf6:	ea81 2110 	eor.w	r1, r1, r0, lsr #8
 8002cfa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8002cfe:	ea81 03c3 	eor.w	r3, r1, r3, lsl #3
	msg->checksum = checksum;
 8002d02:	8013      	strh	r3, [r2, #0]
		if(rxmsg->len > 0){
 8002d04:	78d3      	ldrb	r3, [r2, #3]
 8002d06:	b11b      	cbz	r3, 8002d10 <HAL_UART_RxCpltCallback+0x2d0>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002d0a:	220b      	movs	r2, #11
 8002d0c:	70da      	strb	r2, [r3, #3]
 8002d0e:	e743      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <HAL_UART_RxCpltCallback+0x2e4>)
 8002d12:	220c      	movs	r2, #12
 8002d14:	70da      	strb	r2, [r3, #3]
 8002d16:	e73f      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
 8002d18:	40004400 	.word	0x40004400
 8002d1c:	20016688 	.word	0x20016688
 8002d20:	20016c70 	.word	0x20016c70
 8002d24:	20016b18 	.word	0x20016b18
 8002d28:	2001668c 	.word	0x2001668c
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8002d2c:	4a91      	ldr	r2, [pc, #580]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002d2e:	7913      	ldrb	r3, [r2, #4]
 8002d30:	1c59      	adds	r1, r3, #1
 8002d32:	b2c9      	uxtb	r1, r1
 8002d34:	7111      	strb	r1, [r2, #4]
 8002d36:	4890      	ldr	r0, [pc, #576]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002d38:	4403      	add	r3, r0
 8002d3a:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8002d3c:	731a      	strb	r2, [r3, #12]
	uint16_t checksum = msg->checksum;
 8002d3e:	8804      	ldrh	r4, [r0, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002d40:	ea82 0304 	eor.w	r3, r2, r4
        tmp ^= (tmp<<4);
 8002d44:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002d48:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002d4a:	091a      	lsrs	r2, r3, #4
 8002d4c:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 8002d50:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002d54:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8002d58:	8003      	strh	r3, [r0, #0]
		if (status->packet_idx == rxmsg->len)
 8002d5a:	78c3      	ldrb	r3, [r0, #3]
 8002d5c:	428b      	cmp	r3, r1
 8002d5e:	f47f af1b 	bne.w	8002b98 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002d62:	4b84      	ldr	r3, [pc, #528]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002d64:	220c      	movs	r2, #12
 8002d66:	70da      	strb	r2, [r3, #3]
 8002d68:	e716      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002d6a:	4b83      	ldr	r3, [pc, #524]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	f3c2 2217 	ubfx	r2, r2, #8, #24
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8002d72:	2007      	movs	r0, #7
 8002d74:	2400      	movs	r4, #0
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8002d76:	4d81      	ldr	r5, [pc, #516]	; (8002f7c <HAL_UART_RxCpltCallback+0x53c>)
            uint32_t mid = (low+1+high)/2;
 8002d78:	1823      	adds	r3, r4, r0
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	085b      	lsrs	r3, r3, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8002d7e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002d82:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8002d86:	428a      	cmp	r2, r1
 8002d88:	d334      	bcc.n	8002df4 <HAL_UART_RxCpltCallback+0x3b4>
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8002d8a:	428a      	cmp	r2, r1
 8002d8c:	d837      	bhi.n	8002dfe <HAL_UART_RxCpltCallback+0x3be>
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002d8e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002d92:	487a      	ldr	r0, [pc, #488]	; (8002f7c <HAL_UART_RxCpltCallback+0x53c>)
 8002d94:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d032      	beq.n	8002e02 <HAL_UART_RxCpltCallback+0x3c2>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002d9c:	2100      	movs	r1, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 8002d9e:	460b      	mov	r3, r1
	uint16_t checksum = msg->checksum;
 8002da0:	4875      	ldr	r0, [pc, #468]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002da2:	8804      	ldrh	r4, [r0, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002da4:	4063      	eors	r3, r4
        tmp ^= (tmp<<4);
 8002da6:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8002daa:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002dac:	0913      	lsrs	r3, r2, #4
 8002dae:	ea83 2314 	eor.w	r3, r3, r4, lsr #8
 8002db2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002db6:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
	msg->checksum = checksum;
 8002dba:	8003      	strh	r3, [r0, #0]
		if (c != (rxmsg->checksum & 0xFF)) {
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8002dc0:	429a      	cmp	r2, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8002dc2:	4b6c      	ldr	r3, [pc, #432]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002dc4:	bf14      	ite	ne
 8002dc6:	220e      	movne	r2, #14
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8002dc8:	220d      	moveq	r2, #13
 8002dca:	70da      	strb	r2, [r3, #3]
                rxmsg->ck[0] = c;
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002dce:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8002dd0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                if (e && status->packet_idx < e->max_msg_len) {
 8002dd4:	2900      	cmp	r1, #0
 8002dd6:	f43f aedf 	beq.w	8002b98 <HAL_UART_RxCpltCallback+0x158>
 8002dda:	4b66      	ldr	r3, [pc, #408]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002ddc:	791b      	ldrb	r3, [r3, #4]
 8002dde:	798a      	ldrb	r2, [r1, #6]
 8002de0:	4293      	cmp	r3, r2
 8002de2:	f4bf aed9 	bcs.w	8002b98 <HAL_UART_RxCpltCallback+0x158>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8002de6:	1ad2      	subs	r2, r2, r3
 8002de8:	2100      	movs	r1, #0
 8002dea:	4865      	ldr	r0, [pc, #404]	; (8002f80 <HAL_UART_RxCpltCallback+0x540>)
 8002dec:	4418      	add	r0, r3
 8002dee:	f004 fca5 	bl	800773c <memset>
 8002df2:	e6d1      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
                high = mid-1;
 8002df4:	1e58      	subs	r0, r3, #1
        while (low < high) {
 8002df6:	42a0      	cmp	r0, r4
 8002df8:	d8be      	bhi.n	8002d78 <HAL_UART_RxCpltCallback+0x338>
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	e7c7      	b.n	8002d8e <HAL_UART_RxCpltCallback+0x34e>
                low = mid;
 8002dfe:	461c      	mov	r4, r3
 8002e00:	e7f9      	b.n	8002df6 <HAL_UART_RxCpltCallback+0x3b6>
        return &mavlink_message_crcs[low];
 8002e02:	4602      	mov	r2, r0
 8002e04:	0058      	lsls	r0, r3, #1
 8002e06:	18c1      	adds	r1, r0, r3
 8002e08:	eb02 0181 	add.w	r1, r2, r1, lsl #2
		uint8_t crc_extra = e?e->crc_extra:0;
 8002e0c:	790b      	ldrb	r3, [r1, #4]
 8002e0e:	e7c7      	b.n	8002da0 <HAL_UART_RxCpltCallback+0x360>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8002e10:	2b0e      	cmp	r3, #14
 8002e12:	d005      	beq.n	8002e20 <HAL_UART_RxCpltCallback+0x3e0>
 8002e14:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8002e1a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 8002e1e:	d017      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x410>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8002e20:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e22:	2202      	movs	r2, #2
 8002e24:	701a      	strb	r2, [r3, #0]
		rxmsg->ck[1] = c;
 8002e26:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002e28:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8002e2a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8002e2e:	791b      	ldrb	r3, [r3, #4]
 8002e30:	f013 0f01 	tst.w	r3, #1
 8002e34:	d010      	beq.n	8002e58 <HAL_UART_RxCpltCallback+0x418>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8002e36:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e38:	220f      	movs	r2, #15
 8002e3a:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8002e3c:	220d      	movs	r2, #13
 8002e3e:	735a      	strb	r2, [r3, #13]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	f43f aea8 	beq.w	8002b98 <HAL_UART_RxCpltCallback+0x158>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002e48:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e6a3      	b.n	8002b98 <HAL_UART_RxCpltCallback+0x158>
			status->msg_received = MAVLINK_FRAMING_OK;
 8002e50:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e7e6      	b.n	8002e26 <HAL_UART_RxCpltCallback+0x3e6>
			if (status->signing &&
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	b173      	cbz	r3, 8002e7c <HAL_UART_RxCpltCallback+0x43c>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8002e60:	b12b      	cbz	r3, 8002e6e <HAL_UART_RxCpltCallback+0x42e>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002e62:	4a45      	ldr	r2, [pc, #276]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002e64:	6891      	ldr	r1, [r2, #8]
 8002e66:	0a09      	lsrs	r1, r1, #8
 8002e68:	4842      	ldr	r0, [pc, #264]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e6a:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002e6c:	b930      	cbnz	r0, 8002e7c <HAL_UART_RxCpltCallback+0x43c>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_RxCpltCallback+0x43c>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8002e76:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e78:	2203      	movs	r2, #3
 8002e7a:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002e7c:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	70da      	strb	r2, [r3, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002e82:	f240 1223 	movw	r2, #291	; 0x123
 8002e86:	493c      	ldr	r1, [pc, #240]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002e88:	a8d3      	add	r0, sp, #844	; 0x34c
 8002e8a:	f004 fc4c 	bl	8007726 <memcpy>
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	f47f ae82 	bne.w	8002b9c <HAL_UART_RxCpltCallback+0x15c>
		status->current_rx_seq = rxmsg->seq;
 8002e98:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002e9a:	4a37      	ldr	r2, [pc, #220]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002e9c:	7992      	ldrb	r2, [r2, #6]
 8002e9e:	715a      	strb	r2, [r3, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8002ea0:	891b      	ldrh	r3, [r3, #8]
 8002ea2:	b913      	cbnz	r3, 8002eaa <HAL_UART_RxCpltCallback+0x46a>
 8002ea4:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	8151      	strh	r1, [r2, #10]
		status->packet_rx_success_count++;
 8002eaa:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002eac:	3301      	adds	r3, #1
 8002eae:	8113      	strh	r3, [r2, #8]
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8002eb0:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002eb2:	78db      	ldrb	r3, [r3, #3]
 8002eb4:	f88d 334f 	strb.w	r3, [sp, #847]	; 0x34f
       status->parse_error = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	7093      	strb	r3, [r2, #2]
			mouseDriver_readMsg(inmsg);
 8002ebc:	acd3      	add	r4, sp, #844	; 0x34c
 8002ebe:	f240 1213 	movw	r2, #275	; 0x113
 8002ec2:	a9d7      	add	r1, sp, #860	; 0x35c
 8002ec4:	4668      	mov	r0, sp
 8002ec6:	f004 fc2e 	bl	8007726 <memcpy>
 8002eca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ece:	f7ff fb6f 	bl	80025b0 <mouseDriver_readMsg>
 8002ed2:	e5c1      	b.n	8002a58 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8002ed4:	4927      	ldr	r1, [pc, #156]	; (8002f74 <HAL_UART_RxCpltCallback+0x534>)
 8002ed6:	7b4b      	ldrb	r3, [r1, #13]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <HAL_UART_RxCpltCallback+0x544>)
 8002eda:	1ad2      	subs	r2, r2, r3
 8002edc:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002ede:	f882 0116 	strb.w	r0, [r2, #278]	; 0x116
		status->signature_wait--;
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	734b      	strb	r3, [r1, #13]
		if (status->signature_wait == 0) {
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f ae55 	bne.w	8002b98 <HAL_UART_RxCpltCallback+0x158>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8002eee:	690d      	ldr	r5, [r1, #16]
 8002ef0:	954b      	str	r5, [sp, #300]	; 0x12c
	if (signing == NULL) {
 8002ef2:	2d00      	cmp	r5, #0
 8002ef4:	f000 83c9 	beq.w	800368a <HAL_UART_RxCpltCallback+0xc4a>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8002ef8:	694b      	ldr	r3, [r1, #20]
 8002efa:	9354      	str	r3, [sp, #336]	; 0x150
    m->sz[1] = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	9379      	str	r3, [sp, #484]	; 0x1e4
    A = 0x6a09e667;
 8002f00:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <HAL_UART_RxCpltCallback+0x548>)
 8002f02:	937a      	str	r3, [sp, #488]	; 0x1e8
    B = 0xbb67ae85;
 8002f04:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <HAL_UART_RxCpltCallback+0x54c>)
 8002f06:	937b      	str	r3, [sp, #492]	; 0x1ec
    C = 0x3c6ef372;
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_UART_RxCpltCallback+0x550>)
 8002f0a:	937c      	str	r3, [sp, #496]	; 0x1f0
    D = 0xa54ff53a;
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_UART_RxCpltCallback+0x554>)
 8002f0e:	937d      	str	r3, [sp, #500]	; 0x1f4
    E = 0x510e527f;
 8002f10:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_UART_RxCpltCallback+0x558>)
 8002f12:	937e      	str	r3, [sp, #504]	; 0x1f8
    F = 0x9b05688c;
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_UART_RxCpltCallback+0x55c>)
 8002f16:	937f      	str	r3, [sp, #508]	; 0x1fc
    G = 0x1f83d9ab;
 8002f18:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_UART_RxCpltCallback+0x560>)
 8002f1a:	9380      	str	r3, [sp, #512]	; 0x200
    H = 0x5be0cd19;
 8002f1c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8002f20:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8002f24:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8002f28:	9381      	str	r3, [sp, #516]	; 0x204
	memcpy(m->u.save_bytes + offset, p, l);
 8002f2a:	ac82      	add	r4, sp, #520	; 0x208
 8002f2c:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8002f30:	6869      	ldr	r1, [r5, #4]
 8002f32:	68aa      	ldr	r2, [r5, #8]
 8002f34:	68eb      	ldr	r3, [r5, #12]
 8002f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f38:	6928      	ldr	r0, [r5, #16]
 8002f3a:	6969      	ldr	r1, [r5, #20]
 8002f3c:	69aa      	ldr	r2, [r5, #24]
 8002f3e:	69eb      	ldr	r3, [r5, #28]
 8002f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <HAL_UART_RxCpltCallback+0x538>)
 8002f44:	78db      	ldrb	r3, [r3, #3]
 8002f46:	330a      	adds	r3, #10
 8002f48:	9348      	str	r3, [sp, #288]	; 0x120
    m->sz[0] += len * 8;
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f50:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8002f52:	2bff      	cmp	r3, #255	; 0xff
	++m->sz[1];
 8002f54:	bf9c      	itt	ls
 8002f56:	2301      	movls	r3, #1
 8002f58:	9379      	strls	r3, [sp, #484]	; 0x1e4
    while(len > 0){
 8002f5a:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80dd 	beq.w	800311c <HAL_UART_RxCpltCallback+0x6dc>
    const unsigned char *p = (const unsigned char *)v;
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_UART_RxCpltCallback+0x564>)
 8002f64:	9349      	str	r3, [sp, #292]	; 0x124
    offset = (old_sz / 8) % 64;
 8002f66:	2520      	movs	r5, #32
 8002f68:	ab75      	add	r3, sp, #468	; 0x1d4
 8002f6a:	9353      	str	r3, [sp, #332]	; 0x14c
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002f6c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8002fa8 <HAL_UART_RxCpltCallback+0x568>
 8002f70:	e06a      	b.n	8003048 <HAL_UART_RxCpltCallback+0x608>
 8002f72:	bf00      	nop
 8002f74:	20016b18 	.word	0x20016b18
 8002f78:	2001668c 	.word	0x2001668c
 8002f7c:	08009084 	.word	0x08009084
 8002f80:	20016698 	.word	0x20016698
 8002f84:	20016699 	.word	0x20016699
 8002f88:	6a09e667 	.word	0x6a09e667
 8002f8c:	bb67ae85 	.word	0xbb67ae85
 8002f90:	3c6ef372 	.word	0x3c6ef372
 8002f94:	a54ff53a 	.word	0xa54ff53a
 8002f98:	510e527f 	.word	0x510e527f
 8002f9c:	9b05688c 	.word	0x9b05688c
 8002fa0:	1f83d9ab 	.word	0x1f83d9ab
 8002fa4:	2001668e 	.word	0x2001668e
 8002fa8:	080090e4 	.word	0x080090e4
    for (i = 0; i < 64; i++) {
 8002fac:	4635      	mov	r5, r6
 8002fae:	4606      	mov	r6, r0
	AA = T1 + T2;
 8002fb0:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 8002fb2:	4667      	mov	r7, ip
 8002fb4:	468c      	mov	ip, r1
	EE = DD + T1;
 8002fb6:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002fb8:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8002fbc:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8002fc0:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8002fc4:	ea27 0a01 	bic.w	sl, r7, r1
 8002fc8:	ea01 0b0c 	and.w	fp, r1, ip
 8002fcc:	ea8a 0a0b 	eor.w	sl, sl, fp
 8002fd0:	4453      	add	r3, sl
 8002fd2:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8002fdc:	4413      	add	r3, r2
 8002fde:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8002fe0:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002fe2:	ea4f 3270 	mov.w	r2, r0, ror #13
 8002fe6:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8002fea:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8002fee:	ea86 0a05 	eor.w	sl, r6, r5
 8002ff2:	ea0a 0a00 	and.w	sl, sl, r0
 8002ff6:	ea06 0b05 	and.w	fp, r6, r5
 8002ffa:	ea8a 0a0b 	eor.w	sl, sl, fp
 8002ffe:	4452      	add	r2, sl
	EE = DD + T1;
 8003000:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 8003004:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 8003006:	3401      	adds	r4, #1
 8003008:	9747      	str	r7, [sp, #284]	; 0x11c
 800300a:	46ae      	mov	lr, r5
 800300c:	2c40      	cmp	r4, #64	; 0x40
 800300e:	d1cd      	bne.n	8002fac <HAL_UART_RxCpltCallback+0x56c>
    A += AA;
 8003010:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8003012:	441a      	add	r2, r3
 8003014:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 8003016:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8003018:	4403      	add	r3, r0
 800301a:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 800301c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800301e:	4433      	add	r3, r6
 8003020:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 8003022:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8003024:	442b      	add	r3, r5
 8003026:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 8003028:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800302a:	445b      	add	r3, fp
 800302c:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 800302e:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8003030:	440b      	add	r3, r1
 8003032:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 8003034:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8003036:	4463      	add	r3, ip
 8003038:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 800303a:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800303c:	443b      	add	r3, r7
 800303e:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 8003040:	2500      	movs	r5, #0
    while(len > 0){
 8003042:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8003044:	2b00      	cmp	r3, #0
 8003046:	d069      	beq.n	800311c <HAL_UART_RxCpltCallback+0x6dc>
	uint32_t l = 64 - offset;
 8003048:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 800304c:	9e48      	ldr	r6, [sp, #288]	; 0x120
 800304e:	42b4      	cmp	r4, r6
 8003050:	bf28      	it	cs
 8003052:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8003054:	4622      	mov	r2, r4
 8003056:	9f49      	ldr	r7, [sp, #292]	; 0x124
 8003058:	4639      	mov	r1, r7
 800305a:	ab82      	add	r3, sp, #520	; 0x208
 800305c:	1958      	adds	r0, r3, r5
 800305e:	f004 fb62 	bl	8007726 <memcpy>
	offset += l;
 8003062:	4425      	add	r5, r4
	p += l;
 8003064:	463b      	mov	r3, r7
 8003066:	4423      	add	r3, r4
 8003068:	9349      	str	r3, [sp, #292]	; 0x124
	len -= l;
 800306a:	1b33      	subs	r3, r6, r4
 800306c:	9348      	str	r3, [sp, #288]	; 0x120
	if(offset == 64){
 800306e:	2d40      	cmp	r5, #64	; 0x40
 8003070:	d1e7      	bne.n	8003042 <HAL_UART_RxCpltCallback+0x602>
 8003072:	ab78      	add	r3, sp, #480	; 0x1e0
 8003074:	a888      	add	r0, sp, #544	; 0x220
 8003076:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 8003078:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 800307c:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 800307e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8003082:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 8003084:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8003088:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 800308a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800308e:	70d1      	strb	r1, [r2, #3]
 8003090:	3304      	adds	r3, #4
 8003092:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 8003094:	4298      	cmp	r0, r3
 8003096:	d1ef      	bne.n	8003078 <HAL_UART_RxCpltCallback+0x638>
    AA = A;
 8003098:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 800309a:	934a      	str	r3, [sp, #296]	; 0x128
    BB = B;
 800309c:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 800309e:	934c      	str	r3, [sp, #304]	; 0x130
    CC = C;
 80030a0:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 80030a2:	934d      	str	r3, [sp, #308]	; 0x134
    DD = D;
 80030a4:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 80030a6:	934e      	str	r3, [sp, #312]	; 0x138
    EE = E;
 80030a8:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 80030aa:	934f      	str	r3, [sp, #316]	; 0x13c
    FF = F;
 80030ac:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 80030ae:	9350      	str	r3, [sp, #320]	; 0x140
    GG = G;
 80030b0:	9b80      	ldr	r3, [sp, #512]	; 0x200
 80030b2:	9351      	str	r3, [sp, #324]	; 0x144
    HH = H;
 80030b4:	9b81      	ldr	r3, [sp, #516]	; 0x204
 80030b6:	9352      	str	r3, [sp, #328]	; 0x148
 80030b8:	ab65      	add	r3, sp, #404	; 0x194
 80030ba:	aa91      	add	r2, sp, #580	; 0x244
 80030bc:	9853      	ldr	r0, [sp, #332]	; 0x14c
	data[i] = in[i];
 80030be:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80030c2:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 80030c6:	4298      	cmp	r0, r3
 80030c8:	d1f9      	bne.n	80030be <HAL_UART_RxCpltCallback+0x67e>
 80030ca:	ac92      	add	r4, sp, #584	; 0x248
 80030cc:	adc2      	add	r5, sp, #776	; 0x308
 80030ce:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80030d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 80030d2:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80030d6:	ea4f 43f2 	mov.w	r3, r2, ror #19
 80030da:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 80030de:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80030e2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80030e4:	6800      	ldr	r0, [r0, #0]
 80030e6:	4402      	add	r2, r0
 80030e8:	4413      	add	r3, r2
 80030ea:	ea4f 42b1 	mov.w	r2, r1, ror #18
 80030ee:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 80030f2:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80030f6:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80030f8:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 80030fa:	42ac      	cmp	r4, r5
 80030fc:	d1e7      	bne.n	80030ce <HAL_UART_RxCpltCallback+0x68e>
    DD = D;
 80030fe:	f8dd e138 	ldr.w	lr, [sp, #312]	; 0x138
    CC = C;
 8003102:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    BB = B;
 8003104:	9e4c      	ldr	r6, [sp, #304]	; 0x130
    AA = A;
 8003106:	984a      	ldr	r0, [sp, #296]	; 0x128
    GG = G;
 8003108:	9f51      	ldr	r7, [sp, #324]	; 0x144
    FF = F;
 800310a:	f8dd c140 	ldr.w	ip, [sp, #320]	; 0x140
    HH = H;
 800310e:	9a52      	ldr	r2, [sp, #328]	; 0x148
    EE = E;
 8003110:	994f      	ldr	r1, [sp, #316]	; 0x13c
    for (i = 0; i < 64; i++) {
 8003112:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003114:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8003118:	9247      	str	r2, [sp, #284]	; 0x11c
 800311a:	e74d      	b.n	8002fb8 <HAL_UART_RxCpltCallback+0x578>
    uint32_t old_sz = m->sz[0];
 800311c:	9d78      	ldr	r5, [sp, #480]	; 0x1e0
    m->sz[0] += len * 8;
 800311e:	f105 0310 	add.w	r3, r5, #16
 8003122:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8003124:	429d      	cmp	r5, r3
 8003126:	d902      	bls.n	800312e <HAL_UART_RxCpltCallback+0x6ee>
	++m->sz[1];
 8003128:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 800312a:	3301      	adds	r3, #1
 800312c:	9379      	str	r3, [sp, #484]	; 0x1e4
    offset = (old_sz / 8) % 64;
 800312e:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    const unsigned char *p = (const unsigned char *)v;
 8003132:	4b6a      	ldr	r3, [pc, #424]	; (80032dc <HAL_UART_RxCpltCallback+0x89c>)
 8003134:	9348      	str	r3, [sp, #288]	; 0x120
    offset = (old_sz / 8) % 64;
 8003136:	2302      	movs	r3, #2
 8003138:	9349      	str	r3, [sp, #292]	; 0x124
 800313a:	ab75      	add	r3, sp, #468	; 0x1d4
 800313c:	9353      	str	r3, [sp, #332]	; 0x14c
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800313e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80032e4 <HAL_UART_RxCpltCallback+0x8a4>
 8003142:	e04d      	b.n	80031e0 <HAL_UART_RxCpltCallback+0x7a0>
    for (i = 0; i < 64; i++) {
 8003144:	4635      	mov	r5, r6
 8003146:	4606      	mov	r6, r0
	AA = T1 + T2;
 8003148:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 800314a:	4667      	mov	r7, ip
 800314c:	468c      	mov	ip, r1
	EE = DD + T1;
 800314e:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003150:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8003154:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8003158:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 800315c:	ea27 0a01 	bic.w	sl, r7, r1
 8003160:	ea01 0b0c 	and.w	fp, r1, ip
 8003164:	ea8a 0a0b 	eor.w	sl, sl, fp
 8003168:	4453      	add	r3, sl
 800316a:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 800316e:	4413      	add	r3, r2
 8003170:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8003174:	4413      	add	r3, r2
 8003176:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8003178:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800317a:	ea4f 3270 	mov.w	r2, r0, ror #13
 800317e:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8003182:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8003186:	ea86 0a05 	eor.w	sl, r6, r5
 800318a:	ea0a 0a00 	and.w	sl, sl, r0
 800318e:	ea06 0b05 	and.w	fp, r6, r5
 8003192:	ea8a 0a0b 	eor.w	sl, sl, fp
 8003196:	4452      	add	r2, sl
	EE = DD + T1;
 8003198:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 800319c:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 800319e:	3401      	adds	r4, #1
 80031a0:	9747      	str	r7, [sp, #284]	; 0x11c
 80031a2:	46ae      	mov	lr, r5
 80031a4:	2c40      	cmp	r4, #64	; 0x40
 80031a6:	d1cd      	bne.n	8003144 <HAL_UART_RxCpltCallback+0x704>
    A += AA;
 80031a8:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 80031aa:	441a      	add	r2, r3
 80031ac:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 80031ae:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 80031b0:	4403      	add	r3, r0
 80031b2:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 80031b4:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80031b6:	4433      	add	r3, r6
 80031b8:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 80031ba:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80031bc:	442b      	add	r3, r5
 80031be:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 80031c0:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80031c2:	445b      	add	r3, fp
 80031c4:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 80031c6:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80031c8:	440b      	add	r3, r1
 80031ca:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 80031cc:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80031ce:	4463      	add	r3, ip
 80031d0:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 80031d2:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80031d4:	443b      	add	r3, r7
 80031d6:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 80031d8:	2500      	movs	r5, #0
    while(len > 0){
 80031da:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d069      	beq.n	80032b4 <HAL_UART_RxCpltCallback+0x874>
	uint32_t l = 64 - offset;
 80031e0:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 80031e4:	9e49      	ldr	r6, [sp, #292]	; 0x124
 80031e6:	42b4      	cmp	r4, r6
 80031e8:	bf28      	it	cs
 80031ea:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 80031ec:	4622      	mov	r2, r4
 80031ee:	9f48      	ldr	r7, [sp, #288]	; 0x120
 80031f0:	4639      	mov	r1, r7
 80031f2:	ab82      	add	r3, sp, #520	; 0x208
 80031f4:	1958      	adds	r0, r3, r5
 80031f6:	f004 fa96 	bl	8007726 <memcpy>
	offset += l;
 80031fa:	4425      	add	r5, r4
	p += l;
 80031fc:	463b      	mov	r3, r7
 80031fe:	4423      	add	r3, r4
 8003200:	9348      	str	r3, [sp, #288]	; 0x120
	len -= l;
 8003202:	1b33      	subs	r3, r6, r4
 8003204:	9349      	str	r3, [sp, #292]	; 0x124
	if(offset == 64){
 8003206:	2d40      	cmp	r5, #64	; 0x40
 8003208:	d1e7      	bne.n	80031da <HAL_UART_RxCpltCallback+0x79a>
 800320a:	ab78      	add	r3, sp, #480	; 0x1e0
 800320c:	a888      	add	r0, sp, #544	; 0x220
 800320e:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 8003210:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8003214:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8003216:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 800321a:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 800321c:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8003220:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8003222:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003226:	70d1      	strb	r1, [r2, #3]
 8003228:	3304      	adds	r3, #4
 800322a:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 800322c:	4283      	cmp	r3, r0
 800322e:	d1ef      	bne.n	8003210 <HAL_UART_RxCpltCallback+0x7d0>
    AA = A;
 8003230:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8003232:	934a      	str	r3, [sp, #296]	; 0x128
    BB = B;
 8003234:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 8003236:	934c      	str	r3, [sp, #304]	; 0x130
    CC = C;
 8003238:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 800323a:	934d      	str	r3, [sp, #308]	; 0x134
    DD = D;
 800323c:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 800323e:	934e      	str	r3, [sp, #312]	; 0x138
    EE = E;
 8003240:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8003242:	934f      	str	r3, [sp, #316]	; 0x13c
    FF = F;
 8003244:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 8003246:	9350      	str	r3, [sp, #320]	; 0x140
    GG = G;
 8003248:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800324a:	9351      	str	r3, [sp, #324]	; 0x144
    HH = H;
 800324c:	9b81      	ldr	r3, [sp, #516]	; 0x204
 800324e:	9352      	str	r3, [sp, #328]	; 0x148
 8003250:	ab65      	add	r3, sp, #404	; 0x194
 8003252:	aa91      	add	r2, sp, #580	; 0x244
 8003254:	9853      	ldr	r0, [sp, #332]	; 0x14c
	data[i] = in[i];
 8003256:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800325a:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 800325e:	4283      	cmp	r3, r0
 8003260:	d1f9      	bne.n	8003256 <HAL_UART_RxCpltCallback+0x816>
 8003262:	ac92      	add	r4, sp, #584	; 0x248
 8003264:	adc2      	add	r5, sp, #776	; 0x308
 8003266:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003268:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 800326a:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800326e:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8003272:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 8003276:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800327a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800327c:	6800      	ldr	r0, [r0, #0]
 800327e:	4402      	add	r2, r0
 8003280:	4413      	add	r3, r2
 8003282:	ea4f 42b1 	mov.w	r2, r1, ror #18
 8003286:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 800328a:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 800328e:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003290:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8003292:	42ac      	cmp	r4, r5
 8003294:	d1e7      	bne.n	8003266 <HAL_UART_RxCpltCallback+0x826>
    DD = D;
 8003296:	f8dd e138 	ldr.w	lr, [sp, #312]	; 0x138
    CC = C;
 800329a:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    BB = B;
 800329c:	9e4c      	ldr	r6, [sp, #304]	; 0x130
    AA = A;
 800329e:	984a      	ldr	r0, [sp, #296]	; 0x128
    GG = G;
 80032a0:	9f51      	ldr	r7, [sp, #324]	; 0x144
    FF = F;
 80032a2:	f8dd c140 	ldr.w	ip, [sp, #320]	; 0x140
    HH = H;
 80032a6:	9a52      	ldr	r2, [sp, #328]	; 0x148
    EE = E;
 80032a8:	994f      	ldr	r1, [sp, #316]	; 0x13c
    for (i = 0; i < 64; i++) {
 80032aa:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80032ac:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 80032b0:	9247      	str	r2, [sp, #284]	; 0x11c
 80032b2:	e74d      	b.n	8003150 <HAL_UART_RxCpltCallback+0x710>
    uint32_t old_sz = m->sz[0];
 80032b4:	9d78      	ldr	r5, [sp, #480]	; 0x1e0
    m->sz[0] += len * 8;
 80032b6:	f105 0338 	add.w	r3, r5, #56	; 0x38
 80032ba:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 80032bc:	429d      	cmp	r5, r3
 80032be:	d902      	bls.n	80032c6 <HAL_UART_RxCpltCallback+0x886>
	++m->sz[1];
 80032c0:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 80032c2:	3301      	adds	r3, #1
 80032c4:	9379      	str	r3, [sp, #484]	; 0x1e4
    offset = (old_sz / 8) % 64;
 80032c6:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    const unsigned char *p = (const unsigned char *)v;
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_UART_RxCpltCallback+0x8a0>)
 80032cc:	934a      	str	r3, [sp, #296]	; 0x128
    offset = (old_sz / 8) % 64;
 80032ce:	2307      	movs	r3, #7
 80032d0:	9348      	str	r3, [sp, #288]	; 0x120
 80032d2:	ab75      	add	r3, sp, #468	; 0x1d4
 80032d4:	9355      	str	r3, [sp, #340]	; 0x154
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80032d6:	f8df 800c 	ldr.w	r8, [pc, #12]	; 80032e4 <HAL_UART_RxCpltCallback+0x8a4>
 80032da:	e053      	b.n	8003384 <HAL_UART_RxCpltCallback+0x944>
 80032dc:	200167a0 	.word	0x200167a0
 80032e0:	200167a2 	.word	0x200167a2
 80032e4:	080090e4 	.word	0x080090e4
    for (i = 0; i < 64; i++) {
 80032e8:	4635      	mov	r5, r6
 80032ea:	4606      	mov	r6, r0
	AA = T1 + T2;
 80032ec:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 80032ee:	4667      	mov	r7, ip
 80032f0:	468c      	mov	ip, r1
	EE = DD + T1;
 80032f2:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80032f4:	ea4f 23f1 	mov.w	r3, r1, ror #11
 80032f8:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 80032fc:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8003300:	ea27 0a01 	bic.w	sl, r7, r1
 8003304:	ea01 0b0c 	and.w	fp, r1, ip
 8003308:	ea8a 0a0b 	eor.w	sl, sl, fp
 800330c:	4453      	add	r3, sl
 800330e:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8003312:	4413      	add	r3, r2
 8003314:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8003318:	4413      	add	r3, r2
 800331a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800331c:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800331e:	ea4f 3270 	mov.w	r2, r0, ror #13
 8003322:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8003326:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 800332a:	ea86 0a05 	eor.w	sl, r6, r5
 800332e:	ea0a 0a00 	and.w	sl, sl, r0
 8003332:	ea06 0b05 	and.w	fp, r6, r5
 8003336:	ea8a 0a0b 	eor.w	sl, sl, fp
 800333a:	4452      	add	r2, sl
	EE = DD + T1;
 800333c:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 8003340:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 8003342:	3401      	adds	r4, #1
 8003344:	9747      	str	r7, [sp, #284]	; 0x11c
 8003346:	46ae      	mov	lr, r5
 8003348:	2c40      	cmp	r4, #64	; 0x40
 800334a:	d1cd      	bne.n	80032e8 <HAL_UART_RxCpltCallback+0x8a8>
    A += AA;
 800334c:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 800334e:	441a      	add	r2, r3
 8003350:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 8003352:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8003354:	4403      	add	r3, r0
 8003356:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 8003358:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800335a:	4433      	add	r3, r6
 800335c:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 800335e:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8003360:	442b      	add	r3, r5
 8003362:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 8003364:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8003366:	445b      	add	r3, fp
 8003368:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 800336a:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800336c:	440b      	add	r3, r1
 800336e:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 8003370:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8003372:	4463      	add	r3, ip
 8003374:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 8003376:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8003378:	443b      	add	r3, r7
 800337a:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 800337c:	9d49      	ldr	r5, [sp, #292]	; 0x124
    while(len > 0){
 800337e:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8003380:	2b00      	cmp	r3, #0
 8003382:	d069      	beq.n	8003458 <HAL_UART_RxCpltCallback+0xa18>
	uint32_t l = 64 - offset;
 8003384:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 8003388:	9e48      	ldr	r6, [sp, #288]	; 0x120
 800338a:	42b4      	cmp	r4, r6
 800338c:	bf28      	it	cs
 800338e:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8003390:	4622      	mov	r2, r4
 8003392:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8003394:	4639      	mov	r1, r7
 8003396:	ab82      	add	r3, sp, #520	; 0x208
 8003398:	1958      	adds	r0, r3, r5
 800339a:	f004 f9c4 	bl	8007726 <memcpy>
	offset += l;
 800339e:	4425      	add	r5, r4
	p += l;
 80033a0:	463b      	mov	r3, r7
 80033a2:	4423      	add	r3, r4
 80033a4:	934a      	str	r3, [sp, #296]	; 0x128
	len -= l;
 80033a6:	1b33      	subs	r3, r6, r4
 80033a8:	9348      	str	r3, [sp, #288]	; 0x120
	if(offset == 64){
 80033aa:	2d40      	cmp	r5, #64	; 0x40
 80033ac:	d1e7      	bne.n	800337e <HAL_UART_RxCpltCallback+0x93e>
 80033ae:	ab78      	add	r3, sp, #480	; 0x1e0
 80033b0:	a888      	add	r0, sp, #544	; 0x220
 80033b2:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 80033b4:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 80033b8:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 80033ba:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 80033be:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 80033c0:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 80033c4:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 80033c6:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80033ca:	70d1      	strb	r1, [r2, #3]
 80033cc:	3304      	adds	r3, #4
 80033ce:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 80033d0:	4298      	cmp	r0, r3
 80033d2:	d1ef      	bne.n	80033b4 <HAL_UART_RxCpltCallback+0x974>
    AA = A;
 80033d4:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 80033d6:	934c      	str	r3, [sp, #304]	; 0x130
    BB = B;
 80033d8:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 80033da:	934d      	str	r3, [sp, #308]	; 0x134
    CC = C;
 80033dc:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 80033de:	934e      	str	r3, [sp, #312]	; 0x138
    DD = D;
 80033e0:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 80033e2:	934f      	str	r3, [sp, #316]	; 0x13c
    EE = E;
 80033e4:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 80033e6:	9350      	str	r3, [sp, #320]	; 0x140
    FF = F;
 80033e8:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 80033ea:	9351      	str	r3, [sp, #324]	; 0x144
    GG = G;
 80033ec:	9b80      	ldr	r3, [sp, #512]	; 0x200
 80033ee:	9352      	str	r3, [sp, #328]	; 0x148
    HH = H;
 80033f0:	9b81      	ldr	r3, [sp, #516]	; 0x204
 80033f2:	9353      	str	r3, [sp, #332]	; 0x14c
 80033f4:	ab65      	add	r3, sp, #404	; 0x194
 80033f6:	aa91      	add	r2, sp, #580	; 0x244
 80033f8:	9855      	ldr	r0, [sp, #340]	; 0x154
	data[i] = in[i];
 80033fa:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80033fe:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 8003402:	4283      	cmp	r3, r0
 8003404:	d1f9      	bne.n	80033fa <HAL_UART_RxCpltCallback+0x9ba>
 8003406:	ac92      	add	r4, sp, #584	; 0x248
 8003408:	adc2      	add	r5, sp, #776	; 0x308
 800340a:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800340c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 800340e:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003412:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8003416:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 800341a:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800341e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003420:	6800      	ldr	r0, [r0, #0]
 8003422:	4402      	add	r2, r0
 8003424:	4413      	add	r3, r2
 8003426:	ea4f 42b1 	mov.w	r2, r1, ror #18
 800342a:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 800342e:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 8003432:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003434:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8003436:	42ac      	cmp	r4, r5
 8003438:	d1e7      	bne.n	800340a <HAL_UART_RxCpltCallback+0x9ca>
    DD = D;
 800343a:	f8dd e13c 	ldr.w	lr, [sp, #316]	; 0x13c
    CC = C;
 800343e:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    BB = B;
 8003440:	9e4d      	ldr	r6, [sp, #308]	; 0x134
    AA = A;
 8003442:	984c      	ldr	r0, [sp, #304]	; 0x130
    GG = G;
 8003444:	9f52      	ldr	r7, [sp, #328]	; 0x148
    FF = F;
 8003446:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    HH = H;
 800344a:	9a53      	ldr	r2, [sp, #332]	; 0x14c
    EE = E;
 800344c:	9950      	ldr	r1, [sp, #320]	; 0x140
    for (i = 0; i < 64; i++) {
 800344e:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003450:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8003454:	9247      	str	r2, [sp, #284]	; 0x11c
 8003456:	e74d      	b.n	80032f4 <HAL_UART_RxCpltCallback+0x8b4>
    unsigned offset = (m->sz[0] / 8) % 64;
 8003458:	9c78      	ldr	r4, [sp, #480]	; 0x1e0
 800345a:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800345e:	f1c5 0677 	rsb	r6, r5, #119	; 0x77
 8003462:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    *zeros = 0x80;
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	f88d 3198 	strb.w	r3, [sp, #408]	; 0x198
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800346c:	2247      	movs	r2, #71	; 0x47
 800346e:	2100      	movs	r1, #0
 8003470:	f20d 1099 	addw	r0, sp, #409	; 0x199
 8003474:	f004 f962 	bl	800773c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8003478:	ab66      	add	r3, sp, #408	; 0x198
 800347a:	4433      	add	r3, r6
 800347c:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800347e:	0a22      	lsrs	r2, r4, #8
 8003480:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8003482:	0c22      	lsrs	r2, r4, #16
 8003484:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8003486:	0e22      	lsrs	r2, r4, #24
 8003488:	715a      	strb	r2, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800348a:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 800348c:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800348e:	0a11      	lsrs	r1, r2, #8
 8003490:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8003492:	0c11      	lsrs	r1, r2, #16
 8003494:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8003496:	0e11      	lsrs	r1, r2, #24
 8003498:	7059      	strb	r1, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 800349a:	f106 0309 	add.w	r3, r6, #9
 800349e:	9349      	str	r3, [sp, #292]	; 0x124
    m->sz[0] += len * 8;
 80034a0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80034a4:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 80034a6:	429c      	cmp	r4, r3
 80034a8:	d901      	bls.n	80034ae <HAL_UART_RxCpltCallback+0xa6e>
	++m->sz[1];
 80034aa:	3201      	adds	r2, #1
 80034ac:	9279      	str	r2, [sp, #484]	; 0x1e4
    while(len > 0){
 80034ae:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80bf 	beq.w	8003634 <HAL_UART_RxCpltCallback+0xbf4>
 80034b6:	ab66      	add	r3, sp, #408	; 0x198
 80034b8:	934a      	str	r3, [sp, #296]	; 0x128
 80034ba:	ab65      	add	r3, sp, #404	; 0x194
 80034bc:	9355      	str	r3, [sp, #340]	; 0x154
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80034be:	f8df 8328 	ldr.w	r8, [pc, #808]	; 80037e8 <HAL_UART_RxCpltCallback+0xda8>
 80034c2:	e04d      	b.n	8003560 <HAL_UART_RxCpltCallback+0xb20>
    for (i = 0; i < 64; i++) {
 80034c4:	4635      	mov	r5, r6
 80034c6:	4606      	mov	r6, r0
	AA = T1 + T2;
 80034c8:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 80034ca:	4667      	mov	r7, ip
 80034cc:	468c      	mov	ip, r1
	EE = DD + T1;
 80034ce:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80034d0:	ea4f 23f1 	mov.w	r3, r1, ror #11
 80034d4:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 80034d8:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 80034dc:	ea27 0a01 	bic.w	sl, r7, r1
 80034e0:	ea01 0b0c 	and.w	fp, r1, ip
 80034e4:	ea8a 0a0b 	eor.w	sl, sl, fp
 80034e8:	4453      	add	r3, sl
 80034ea:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 80034ee:	4413      	add	r3, r2
 80034f0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80034f4:	4413      	add	r3, r2
 80034f6:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80034f8:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80034fa:	ea4f 3270 	mov.w	r2, r0, ror #13
 80034fe:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8003502:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8003506:	ea86 0a05 	eor.w	sl, r6, r5
 800350a:	ea0a 0a00 	and.w	sl, sl, r0
 800350e:	ea06 0b05 	and.w	fp, r6, r5
 8003512:	ea8a 0a0b 	eor.w	sl, sl, fp
 8003516:	4452      	add	r2, sl
	EE = DD + T1;
 8003518:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 800351c:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 800351e:	3401      	adds	r4, #1
 8003520:	9747      	str	r7, [sp, #284]	; 0x11c
 8003522:	46ae      	mov	lr, r5
 8003524:	2c40      	cmp	r4, #64	; 0x40
 8003526:	d1cd      	bne.n	80034c4 <HAL_UART_RxCpltCallback+0xa84>
    A += AA;
 8003528:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 800352a:	441a      	add	r2, r3
 800352c:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 800352e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8003530:	4403      	add	r3, r0
 8003532:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 8003534:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8003536:	4433      	add	r3, r6
 8003538:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 800353a:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800353c:	442b      	add	r3, r5
 800353e:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 8003540:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8003542:	445b      	add	r3, fp
 8003544:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 8003546:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8003548:	440b      	add	r3, r1
 800354a:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 800354c:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800354e:	4463      	add	r3, ip
 8003550:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 8003552:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8003554:	443b      	add	r3, r7
 8003556:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 8003558:	9d48      	ldr	r5, [sp, #288]	; 0x120
    while(len > 0){
 800355a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800355c:	2b00      	cmp	r3, #0
 800355e:	d069      	beq.n	8003634 <HAL_UART_RxCpltCallback+0xbf4>
	uint32_t l = 64 - offset;
 8003560:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 8003564:	9e49      	ldr	r6, [sp, #292]	; 0x124
 8003566:	42b4      	cmp	r4, r6
 8003568:	bf28      	it	cs
 800356a:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800356c:	4622      	mov	r2, r4
 800356e:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8003570:	4639      	mov	r1, r7
 8003572:	ab82      	add	r3, sp, #520	; 0x208
 8003574:	1958      	adds	r0, r3, r5
 8003576:	f004 f8d6 	bl	8007726 <memcpy>
	offset += l;
 800357a:	4425      	add	r5, r4
	p += l;
 800357c:	463b      	mov	r3, r7
 800357e:	4423      	add	r3, r4
 8003580:	934a      	str	r3, [sp, #296]	; 0x128
	len -= l;
 8003582:	1b33      	subs	r3, r6, r4
 8003584:	9349      	str	r3, [sp, #292]	; 0x124
	if(offset == 64){
 8003586:	2d40      	cmp	r5, #64	; 0x40
 8003588:	d1e7      	bne.n	800355a <HAL_UART_RxCpltCallback+0xb1a>
 800358a:	ab78      	add	r3, sp, #480	; 0x1e0
 800358c:	a888      	add	r0, sp, #544	; 0x220
 800358e:	aa56      	add	r2, sp, #344	; 0x158
                p2[0] = p1[3];
 8003590:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8003594:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8003596:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 800359a:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 800359c:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 80035a0:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 80035a2:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80035a6:	70d1      	strb	r1, [r2, #3]
 80035a8:	3304      	adds	r3, #4
 80035aa:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 80035ac:	4298      	cmp	r0, r3
 80035ae:	d1ef      	bne.n	8003590 <HAL_UART_RxCpltCallback+0xb50>
    AA = A;
 80035b0:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 80035b2:	934c      	str	r3, [sp, #304]	; 0x130
    BB = B;
 80035b4:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 80035b6:	934d      	str	r3, [sp, #308]	; 0x134
    CC = C;
 80035b8:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 80035ba:	934e      	str	r3, [sp, #312]	; 0x138
    DD = D;
 80035bc:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 80035be:	934f      	str	r3, [sp, #316]	; 0x13c
    EE = E;
 80035c0:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 80035c2:	9350      	str	r3, [sp, #320]	; 0x140
    FF = F;
 80035c4:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 80035c6:	9351      	str	r3, [sp, #324]	; 0x144
    GG = G;
 80035c8:	9b80      	ldr	r3, [sp, #512]	; 0x200
 80035ca:	9352      	str	r3, [sp, #328]	; 0x148
    HH = H;
 80035cc:	9b81      	ldr	r3, [sp, #516]	; 0x204
 80035ce:	9353      	str	r3, [sp, #332]	; 0x14c
 80035d0:	ab55      	add	r3, sp, #340	; 0x154
 80035d2:	aa91      	add	r2, sp, #580	; 0x244
 80035d4:	9855      	ldr	r0, [sp, #340]	; 0x154
	data[i] = in[i];
 80035d6:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80035da:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 80035de:	4283      	cmp	r3, r0
 80035e0:	d1f9      	bne.n	80035d6 <HAL_UART_RxCpltCallback+0xb96>
 80035e2:	ac92      	add	r4, sp, #584	; 0x248
 80035e4:	adc2      	add	r5, sp, #776	; 0x308
 80035e6:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80035e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 80035ea:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80035ee:	ea4f 43f2 	mov.w	r3, r2, ror #19
 80035f2:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 80035f6:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80035fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80035fc:	6800      	ldr	r0, [r0, #0]
 80035fe:	4402      	add	r2, r0
 8003600:	4413      	add	r3, r2
 8003602:	ea4f 42b1 	mov.w	r2, r1, ror #18
 8003606:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 800360a:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 800360e:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003610:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8003612:	42ac      	cmp	r4, r5
 8003614:	d1e7      	bne.n	80035e6 <HAL_UART_RxCpltCallback+0xba6>
    DD = D;
 8003616:	f8dd e13c 	ldr.w	lr, [sp, #316]	; 0x13c
    CC = C;
 800361a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    BB = B;
 800361c:	9e4d      	ldr	r6, [sp, #308]	; 0x134
    AA = A;
 800361e:	984c      	ldr	r0, [sp, #304]	; 0x130
    GG = G;
 8003620:	9f52      	ldr	r7, [sp, #328]	; 0x148
    FF = F;
 8003622:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    HH = H;
 8003626:	9a53      	ldr	r2, [sp, #332]	; 0x14c
    EE = E;
 8003628:	9950      	ldr	r1, [sp, #320]	; 0x140
    for (i = 0; i < 64; i++) {
 800362a:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800362c:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8003630:	9247      	str	r2, [sp, #284]	; 0x11c
 8003632:	e74d      	b.n	80034d0 <HAL_UART_RxCpltCallback+0xa90>
    result[0] = p[3];
 8003634:	f89d 31eb 	ldrb.w	r3, [sp, #491]	; 0x1eb
 8003638:	f88d 3158 	strb.w	r3, [sp, #344]	; 0x158
    result[1] = p[2];
 800363c:	f89d 31ea 	ldrb.w	r3, [sp, #490]	; 0x1ea
 8003640:	f88d 3159 	strb.w	r3, [sp, #345]	; 0x159
    result[2] = p[1];
 8003644:	f89d 31e9 	ldrb.w	r3, [sp, #489]	; 0x1e9
 8003648:	f88d 315a 	strb.w	r3, [sp, #346]	; 0x15a
    result[3] = p[0];
 800364c:	f89d 31e8 	ldrb.w	r3, [sp, #488]	; 0x1e8
 8003650:	f88d 315b 	strb.w	r3, [sp, #347]	; 0x15b
    result[4] = p[7];
 8003654:	f89d 31ef 	ldrb.w	r3, [sp, #495]	; 0x1ef
 8003658:	f88d 315c 	strb.w	r3, [sp, #348]	; 0x15c
    result[5] = p[6];
 800365c:	f89d 31ee 	ldrb.w	r3, [sp, #494]	; 0x1ee
 8003660:	f88d 315d 	strb.w	r3, [sp, #349]	; 0x15d
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8003664:	2206      	movs	r2, #6
 8003666:	495b      	ldr	r1, [pc, #364]	; (80037d4 <HAL_UART_RxCpltCallback+0xd94>)
 8003668:	a856      	add	r0, sp, #344	; 0x158
 800366a:	f004 f84d 	bl	8007708 <memcmp>
 800366e:	b1d0      	cbz	r0, 80036a6 <HAL_UART_RxCpltCallback+0xc66>
			   	(status->signing->accept_unsigned_callback &&
 8003670:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a9 	beq.w	80037cc <HAL_UART_RxCpltCallback+0xd8c>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800367a:	4a57      	ldr	r2, [pc, #348]	; (80037d8 <HAL_UART_RxCpltCallback+0xd98>)
 800367c:	6891      	ldr	r1, [r2, #8]
 800367e:	0a09      	lsrs	r1, r1, #8
 8003680:	4856      	ldr	r0, [pc, #344]	; (80037dc <HAL_UART_RxCpltCallback+0xd9c>)
 8003682:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback &&
 8003684:	2800      	cmp	r0, #0
 8003686:	f000 80a1 	beq.w	80037cc <HAL_UART_RxCpltCallback+0xd8c>
				status->msg_received = MAVLINK_FRAMING_OK;
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <HAL_UART_RxCpltCallback+0xd9c>)
 800368c:	2201      	movs	r2, #1
 800368e:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8003690:	4b52      	ldr	r3, [pc, #328]	; (80037dc <HAL_UART_RxCpltCallback+0xd9c>)
 8003692:	2201      	movs	r2, #1
 8003694:	70da      	strb	r2, [r3, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8003696:	f240 1223 	movw	r2, #291	; 0x123
 800369a:	494f      	ldr	r1, [pc, #316]	; (80037d8 <HAL_UART_RxCpltCallback+0xd98>)
 800369c:	a8d3      	add	r0, sp, #844	; 0x34c
 800369e:	f004 f842 	bl	8007726 <memcpy>
 80036a2:	f7ff bbf4 	b.w	8002e8e <HAL_UART_RxCpltCallback+0x44e>
	uint8_t link_id = psig[0];
 80036a6:	4b4c      	ldr	r3, [pc, #304]	; (80037d8 <HAL_UART_RxCpltCallback+0xd98>)
 80036a8:	f893 6116 	ldrb.w	r6, [r3, #278]	; 0x116
	tstamp.t64 = 0;
 80036ac:	aa66      	add	r2, sp, #408	; 0x198
 80036ae:	2000      	movs	r0, #0
 80036b0:	2100      	movs	r1, #0
 80036b2:	e9c2 0100 	strd	r0, r1, [r2]
	memcpy(tstamp.t8, psig+1, 6);
 80036b6:	f8d3 0117 	ldr.w	r0, [r3, #279]	; 0x117
 80036ba:	f203 1317 	addw	r3, r3, #279	; 0x117
 80036be:	9066      	str	r0, [sp, #408]	; 0x198
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	f8ad 319c 	strh.w	r3, [sp, #412]	; 0x19c
	if (signing_streams == NULL) {
 80036c6:	9a54      	ldr	r2, [sp, #336]	; 0x150
 80036c8:	2a00      	cmp	r2, #0
 80036ca:	d0d1      	beq.n	8003670 <HAL_UART_RxCpltCallback+0xc30>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80036cc:	8810      	ldrh	r0, [r2, #0]
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d065      	beq.n	800379e <HAL_UART_RxCpltCallback+0xd5e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_UART_RxCpltCallback+0xd98>)
 80036d4:	79dc      	ldrb	r4, [r3, #7]
		    msg->compid == signing_streams->stream[i].compid &&
 80036d6:	7a1f      	ldrb	r7, [r3, #8]
 80036d8:	1c93      	adds	r3, r2, #2
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80036da:	2100      	movs	r1, #0
 80036dc:	e004      	b.n	80036e8 <HAL_UART_RxCpltCallback+0xca8>
 80036de:	3101      	adds	r1, #1
 80036e0:	b289      	uxth	r1, r1
 80036e2:	3309      	adds	r3, #9
 80036e4:	4288      	cmp	r0, r1
 80036e6:	d03a      	beq.n	800375e <HAL_UART_RxCpltCallback+0xd1e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80036e8:	785a      	ldrb	r2, [r3, #1]
 80036ea:	42a2      	cmp	r2, r4
 80036ec:	d1f7      	bne.n	80036de <HAL_UART_RxCpltCallback+0xc9e>
 80036ee:	789a      	ldrb	r2, [r3, #2]
 80036f0:	42ba      	cmp	r2, r7
 80036f2:	d1f4      	bne.n	80036de <HAL_UART_RxCpltCallback+0xc9e>
		    msg->compid == signing_streams->stream[i].compid &&
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	42b2      	cmp	r2, r6
 80036f8:	d1f1      	bne.n	80036de <HAL_UART_RxCpltCallback+0xc9e>
	if (i == signing_streams->num_signing_streams) {
 80036fa:	4288      	cmp	r0, r1
 80036fc:	d030      	beq.n	8003760 <HAL_UART_RxCpltCallback+0xd20>
		last_tstamp.t64 = 0;
 80036fe:	aa92      	add	r2, sp, #584	; 0x248
 8003700:	2400      	movs	r4, #0
 8003702:	2500      	movs	r5, #0
 8003704:	e9c2 4500 	strd	r4, r5, [r2]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8003708:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800370c:	3305      	adds	r3, #5
 800370e:	9854      	ldr	r0, [sp, #336]	; 0x150
 8003710:	4403      	add	r3, r0
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	9092      	str	r0, [sp, #584]	; 0x248
 8003716:	889b      	ldrh	r3, [r3, #4]
 8003718:	f8ad 324c 	strh.w	r3, [sp, #588]	; 0x24c
		if (tstamp.t64 <= last_tstamp.t64) {
 800371c:	ab66      	add	r3, sp, #408	; 0x198
 800371e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003722:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003726:	42ab      	cmp	r3, r5
 8003728:	bf08      	it	eq
 800372a:	42a2      	cmpeq	r2, r4
 800372c:	d2a0      	bcs.n	8003670 <HAL_UART_RxCpltCallback+0xc30>
 800372e:	4608      	mov	r0, r1
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8003730:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003734:	1d43      	adds	r3, r0, #5
 8003736:	9c54      	ldr	r4, [sp, #336]	; 0x150
 8003738:	18e1      	adds	r1, r4, r3
 800373a:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <HAL_UART_RxCpltCallback+0xda0>)
 800373c:	6810      	ldr	r0, [r2, #0]
 800373e:	50e0      	str	r0, [r4, r3]
 8003740:	8893      	ldrh	r3, [r2, #4]
 8003742:	808b      	strh	r3, [r1, #4]
	if (tstamp.t64 > signing->timestamp) {
 8003744:	ab66      	add	r3, sp, #408	; 0x198
 8003746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800374a:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 800374c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003750:	428b      	cmp	r3, r1
 8003752:	bf08      	it	eq
 8003754:	4282      	cmpeq	r2, r0
 8003756:	d298      	bcs.n	800368a <HAL_UART_RxCpltCallback+0xc4a>
		signing->timestamp = tstamp.t64;
 8003758:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800375c:	e795      	b.n	800368a <HAL_UART_RxCpltCallback+0xc4a>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800375e:	4601      	mov	r1, r0
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8003760:	280f      	cmp	r0, #15
 8003762:	d885      	bhi.n	8003670 <HAL_UART_RxCpltCallback+0xc30>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8003764:	ab66      	add	r3, sp, #408	; 0x198
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	4c1e      	ldr	r4, [pc, #120]	; (80037e4 <HAL_UART_RxCpltCallback+0xda4>)
 800376c:	2500      	movs	r5, #0
 800376e:	18a7      	adds	r7, r4, r2
 8003770:	eb45 0803 	adc.w	r8, r5, r3
 8003774:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8003776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800377a:	4598      	cmp	r8, r3
 800377c:	bf08      	it	eq
 800377e:	4297      	cmpeq	r7, r2
 8003780:	f4ff af76 	bcc.w	8003670 <HAL_UART_RxCpltCallback+0xc30>
		signing_streams->stream[i].sysid = msg->sysid;
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_UART_RxCpltCallback+0xd98>)
 8003786:	79d4      	ldrb	r4, [r2, #7]
 8003788:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800378c:	9d54      	ldr	r5, [sp, #336]	; 0x150
 800378e:	186b      	adds	r3, r5, r1
 8003790:	70dc      	strb	r4, [r3, #3]
		signing_streams->stream[i].compid = msg->compid;
 8003792:	7a12      	ldrb	r2, [r2, #8]
 8003794:	711a      	strb	r2, [r3, #4]
		signing_streams->stream[i].link_id = link_id;
 8003796:	709e      	strb	r6, [r3, #2]
		signing_streams->num_signing_streams++;
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	802b      	strh	r3, [r5, #0]
 800379c:	e7c8      	b.n	8003730 <HAL_UART_RxCpltCallback+0xcf0>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800379e:	4601      	mov	r1, r0
 80037a0:	e7e0      	b.n	8003764 <HAL_UART_RxCpltCallback+0xd24>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 80037a2:	1e9a      	subs	r2, r3, #2
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	2a01      	cmp	r2, #1
 80037a8:	f67f aa02 	bls.w	8002bb0 <HAL_UART_RxCpltCallback+0x170>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f43f a953 	beq.w	8002a58 <HAL_UART_RxCpltCallback+0x18>
 80037b2:	f7ff bb83 	b.w	8002ebc <HAL_UART_RxCpltCallback+0x47c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_UART_RxCpltCallback+0xd9c>)
 80037b8:	2202      	movs	r2, #2
 80037ba:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_UART_RxCpltCallback+0xd98>)
 80037be:	2200      	movs	r2, #0
 80037c0:	70da      	strb	r2, [r3, #3]
	msg->checksum = crcTmp;
 80037c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	f7ff b946 	b.w	8002a58 <HAL_UART_RxCpltCallback+0x18>
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_UART_RxCpltCallback+0xd9c>)
 80037ce:	2203      	movs	r2, #3
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e75d      	b.n	8003690 <HAL_UART_RxCpltCallback+0xc50>
 80037d4:	200167a9 	.word	0x200167a9
 80037d8:	2001668c 	.word	0x2001668c
 80037dc:	20016b18 	.word	0x20016b18
 80037e0:	200167a3 	.word	0x200167a3
 80037e4:	005b8d80 	.word	0x005b8d80
 80037e8:	080090e4 	.word	0x080090e4

080037ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80037ec:	b508      	push	{r3, lr}
    if (htim->Instance==TIM7){
 80037ee:	6802      	ldr	r2, [r0, #0]
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d000      	beq.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0xc>
    	/*HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);*/
    	mouseDriver_controlISR();
    }
}
 80037f6:	bd08      	pop	{r3, pc}
    	mouseDriver_controlISR();
 80037f8:	f7fe ff4c 	bl	8002694 <mouseDriver_controlISR>
}
 80037fc:	e7fb      	b.n	80037f6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80037fe:	bf00      	nop
 8003800:	40001400 	.word	0x40001400

08003804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003804:	b530      	push	{r4, r5, lr}
 8003806:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003808:	2224      	movs	r2, #36	; 0x24
 800380a:	2100      	movs	r1, #0
 800380c:	a828      	add	r0, sp, #160	; 0xa0
 800380e:	f003 ff95 	bl	800773c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003812:	2400      	movs	r4, #0
 8003814:	9422      	str	r4, [sp, #136]	; 0x88
 8003816:	9423      	str	r4, [sp, #140]	; 0x8c
 8003818:	9424      	str	r4, [sp, #144]	; 0x90
 800381a:	9425      	str	r4, [sp, #148]	; 0x94
 800381c:	9426      	str	r4, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800381e:	2288      	movs	r2, #136	; 0x88
 8003820:	4621      	mov	r1, r4
 8003822:	4668      	mov	r0, sp
 8003824:	f003 ff8a 	bl	800773c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003828:	2502      	movs	r5, #2
 800382a:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800382c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003830:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003832:	2310      	movs	r3, #16
 8003834:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003836:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003838:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800383a:	2301      	movs	r3, #1
 800383c:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800383e:	230a      	movs	r3, #10
 8003840:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003842:	2307      	movs	r3, #7
 8003844:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003846:	9536      	str	r5, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003848:	9537      	str	r5, [sp, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800384a:	a827      	add	r0, sp, #156	; 0x9c
 800384c:	f001 f830 	bl	80048b0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003850:	230f      	movs	r3, #15
 8003852:	9322      	str	r3, [sp, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003854:	2303      	movs	r3, #3
 8003856:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003858:	9424      	str	r4, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800385a:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800385c:	9426      	str	r4, [sp, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800385e:	2104      	movs	r1, #4
 8003860:	a822      	add	r0, sp, #136	; 0x88
 8003862:	f001 fb15 	bl	8004e90 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003866:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003868:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800386a:	4668      	mov	r0, sp
 800386c:	f001 fd32 	bl	80052d4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003870:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003874:	f000 ff38 	bl	80046e8 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8003878:	b039      	add	sp, #228	; 0xe4
 800387a:	bd30      	pop	{r4, r5, pc}

0800387c <main>:
{
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
  HAL_Init();
 8003884:	f000 fb88 	bl	8003f98 <HAL_Init>
  SystemClock_Config();
 8003888:	f7ff ffbc 	bl	8003804 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	2400      	movs	r4, #0
 800388e:	9417      	str	r4, [sp, #92]	; 0x5c
 8003890:	9418      	str	r4, [sp, #96]	; 0x60
 8003892:	9419      	str	r4, [sp, #100]	; 0x64
 8003894:	941a      	str	r4, [sp, #104]	; 0x68
 8003896:	941b      	str	r4, [sp, #108]	; 0x6c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003898:	4daf      	ldr	r5, [pc, #700]	; (8003b58 <main+0x2dc>)
 800389a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800389c:	f043 0304 	orr.w	r3, r3, #4
 80038a0:	64eb      	str	r3, [r5, #76]	; 0x4c
 80038a2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	9305      	str	r3, [sp, #20]
 80038aa:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038ac:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80038b4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	9306      	str	r3, [sp, #24]
 80038bc:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038be:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80038c6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	9307      	str	r3, [sp, #28]
 80038ce:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80038d2:	f043 0302 	orr.w	r3, r3, #2
 80038d6:	64eb      	str	r3, [r5, #76]	; 0x4c
 80038d8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	9308      	str	r3, [sp, #32]
 80038e0:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_0_Pin|CS_1_Pin, GPIO_PIN_RESET);
 80038e2:	4622      	mov	r2, r4
 80038e4:	2103      	movs	r1, #3
 80038e6:	489d      	ldr	r0, [pc, #628]	; (8003b5c <main+0x2e0>)
 80038e8:	f000 feea 	bl	80046c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PW_1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80038ec:	4622      	mov	r2, r4
 80038ee:	2130      	movs	r1, #48	; 0x30
 80038f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f4:	f000 fee4 	bl	80046c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PW_0_GPIO_Port, PW_0_Pin, GPIO_PIN_RESET);
 80038f8:	4e99      	ldr	r6, [pc, #612]	; (8003b60 <main+0x2e4>)
 80038fa:	4622      	mov	r2, r4
 80038fc:	2101      	movs	r1, #1
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 fede 	bl	80046c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003904:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8003908:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800390c:	4b95      	ldr	r3, [pc, #596]	; (8003b64 <main+0x2e8>)
 800390e:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003912:	a917      	add	r1, sp, #92	; 0x5c
 8003914:	4891      	ldr	r0, [pc, #580]	; (8003b5c <main+0x2e0>)
 8003916:	f000 fd3d 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_0_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_0_Pin|CS_1_Pin;
 800391a:	f04f 0a03 	mov.w	sl, #3
 800391e:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003922:	f04f 0801 	mov.w	r8, #1
 8003926:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392c:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800392e:	a917      	add	r1, sp, #92	; 0x5c
 8003930:	488a      	ldr	r0, [pc, #552]	; (8003b5c <main+0x2e0>)
 8003932:	f000 fd2f 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PW_1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = PW_1_Pin|LD2_Pin;
 8003936:	2330      	movs	r3, #48	; 0x30
 8003938:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800393a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003940:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003942:	a917      	add	r1, sp, #92	; 0x5c
 8003944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003948:	f000 fd24 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_0_Pin */
  GPIO_InitStruct.Pin = PW_0_Pin;
 800394c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003950:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(PW_0_GPIO_Port, &GPIO_InitStruct);
 8003958:	a917      	add	r1, sp, #92	; 0x5c
 800395a:	4630      	mov	r0, r6
 800395c:	f000 fd1a 	bl	8004394 <HAL_GPIO_Init>
  __DMA1_CLK_ENABLE();
 8003960:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003962:	ea43 0308 	orr.w	r3, r3, r8
 8003966:	64ab      	str	r3, [r5, #72]	; 0x48
 8003968:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800396a:	ea03 0308 	and.w	r3, r3, r8
 800396e:	9304      	str	r3, [sp, #16]
 8003970:	9b04      	ldr	r3, [sp, #16]
  hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003972:	4f7d      	ldr	r7, [pc, #500]	; (8003b68 <main+0x2ec>)
 8003974:	2310      	movs	r3, #16
 8003976:	60bb      	str	r3, [r7, #8]
  hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003978:	60fc      	str	r4, [r7, #12]
  hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	613b      	str	r3, [r7, #16]
  hdma_usart2_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 800397e:	617c      	str	r4, [r7, #20]
  hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003980:	61bc      	str	r4, [r7, #24]
  hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003982:	61fc      	str	r4, [r7, #28]
  hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003984:	623c      	str	r4, [r7, #32]
  HAL_DMA_Init(&hdma_usart2_tx);
 8003986:	4638      	mov	r0, r7
 8003988:	f000 fbbe 	bl	8004108 <HAL_DMA_Init>
  __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 800398c:	4e77      	ldr	r6, [pc, #476]	; (8003b6c <main+0x2f0>)
 800398e:	66b7      	str	r7, [r6, #104]	; 0x68
 8003990:	62be      	str	r6, [r7, #40]	; 0x28
  huart2.Instance = USART2;
 8003992:	4b77      	ldr	r3, [pc, #476]	; (8003b70 <main+0x2f4>)
 8003994:	6033      	str	r3, [r6, #0]
  huart2.Init.BaudRate = 230400;
 8003996:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 800399a:	6073      	str	r3, [r6, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800399c:	60b4      	str	r4, [r6, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800399e:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039a0:	6134      	str	r4, [r6, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039a2:	230c      	movs	r3, #12
 80039a4:	6173      	str	r3, [r6, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039a6:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039a8:	61f4      	str	r4, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039aa:	6234      	str	r4, [r6, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039ac:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039ae:	4630      	mov	r0, r6
 80039b0:	f003 fe4d 	bl	800764e <HAL_UART_Init>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b4:	9417      	str	r4, [sp, #92]	; 0x5c
 80039b6:	9418      	str	r4, [sp, #96]	; 0x60
 80039b8:	9419      	str	r4, [sp, #100]	; 0x64
  htim7.Instance = TIM7;
 80039ba:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8003b88 <main+0x30c>
 80039be:	4b6d      	ldr	r3, [pc, #436]	; (8003b74 <main+0x2f8>)
 80039c0:	f8c9 3000 	str.w	r3, [r9]
  htim7.Init.Prescaler = PRESCALER_HEART;
 80039c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c8:	f8c9 3004 	str.w	r3, [r9, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039cc:	f8c9 4008 	str.w	r4, [r9, #8]
  htim7.Init.Period = COUNTER_PERIOD_HEART;
 80039d0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80039d4:	f8c9 300c 	str.w	r3, [r9, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d8:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80039dc:	4648      	mov	r0, r9
 80039de:	f002 fe0b 	bl	80065f8 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e2:	9417      	str	r4, [sp, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e4:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80039e6:	a917      	add	r1, sp, #92	; 0x5c
 80039e8:	4648      	mov	r0, r9
 80039ea:	f003 f817 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ee:	940c      	str	r4, [sp, #48]	; 0x30
 80039f0:	940d      	str	r4, [sp, #52]	; 0x34
 80039f2:	940e      	str	r4, [sp, #56]	; 0x38
 80039f4:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f6:	9409      	str	r4, [sp, #36]	; 0x24
 80039f8:	940a      	str	r4, [sp, #40]	; 0x28
 80039fa:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039fc:	9410      	str	r4, [sp, #64]	; 0x40
 80039fe:	9411      	str	r4, [sp, #68]	; 0x44
 8003a00:	9412      	str	r4, [sp, #72]	; 0x48
 8003a02:	9413      	str	r4, [sp, #76]	; 0x4c
 8003a04:	9414      	str	r4, [sp, #80]	; 0x50
 8003a06:	9415      	str	r4, [sp, #84]	; 0x54
 8003a08:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a0a:	222c      	movs	r2, #44	; 0x2c
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	a817      	add	r0, sp, #92	; 0x5c
 8003a10:	f003 fe94 	bl	800773c <memset>
  htim1.Instance = TIM1;
 8003a14:	4f58      	ldr	r7, [pc, #352]	; (8003b78 <main+0x2fc>)
 8003a16:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <main+0x300>)
 8003a18:	603b      	str	r3, [r7, #0]
  htim1.Init.Prescaler = PRESCALER_PWM;
 8003a1a:	2309      	movs	r3, #9
 8003a1c:	607b      	str	r3, [r7, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1e:	60bc      	str	r4, [r7, #8]
  htim1.Init.Period = COUNTER_PERIOD_PWM;
 8003a20:	23ff      	movs	r3, #255	; 0xff
 8003a22:	60fb      	str	r3, [r7, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a24:	613c      	str	r4, [r7, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a26:	617c      	str	r4, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a28:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a2a:	4638      	mov	r0, r7
 8003a2c:	f002 fde4 	bl	80065f8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a34:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a36:	a90c      	add	r1, sp, #48	; 0x30
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f002 fefd 	bl	8006838 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a3e:	4638      	mov	r0, r7
 8003a40:	f002 fdf3 	bl	800662a <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a44:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a46:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a48:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a4a:	a909      	add	r1, sp, #36	; 0x24
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	f002 ffe5 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a52:	2360      	movs	r3, #96	; 0x60
 8003a54:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.Pulse = PULSE_PWM;
 8003a56:	230a      	movs	r3, #10
 8003a58:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a5a:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a5c:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a5e:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a60:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a62:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a64:	4622      	mov	r2, r4
 8003a66:	a910      	add	r1, sp, #64	; 0x40
 8003a68:	4638      	mov	r0, r7
 8003a6a:	f002 fe3f 	bl	80066ec <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a6e:	2204      	movs	r2, #4
 8003a70:	a910      	add	r1, sp, #64	; 0x40
 8003a72:	4638      	mov	r0, r7
 8003a74:	f002 fe3a 	bl	80066ec <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a78:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a7a:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a7c:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a7e:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a80:	941b      	str	r4, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a82:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a86:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a88:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a8e:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003a90:	9420      	str	r4, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a92:	9421      	str	r4, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a94:	a917      	add	r1, sp, #92	; 0x5c
 8003a96:	4638      	mov	r0, r7
 8003a98:	f002 fff2 	bl	8006a80 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f000 f943 	bl	8003d28 <HAL_TIM_MspPostInit>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003aa2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003aa4:	ea43 0308 	orr.w	r3, r3, r8
 8003aa8:	64ab      	str	r3, [r5, #72]	; 0x48
 8003aaa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003aac:	ea03 0308 	and.w	r3, r3, r8
 8003ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8003ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	2011      	movs	r0, #17
 8003aba:	f000 fabb 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003abe:	2011      	movs	r0, #17
 8003ac0:	f000 faea 	bl	8004098 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 8003ac4:	2108      	movs	r1, #8
 8003ac6:	4825      	ldr	r0, [pc, #148]	; (8003b5c <main+0x2e0>)
 8003ac8:	f000 fd5a 	bl	8004580 <HAL_GPIO_DeInit>
  __HAL_RCC_SPI2_CLK_ENABLE();
 8003acc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad2:	65ab      	str	r3, [r5, #88]	; 0x58
 8003ad4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	9b03      	ldr	r3, [sp, #12]
  __SPI2_CLK_ENABLE();
 8003ade:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae4:	65ab      	str	r3, [r5, #88]	; 0x58
 8003ae6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aec:	9309      	str	r3, [sp, #36]	; 0x24
 8003aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hspi2.Instance = SPI2;
 8003af0:	4823      	ldr	r0, [pc, #140]	; (8003b80 <main+0x304>)
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <main+0x308>)
 8003af4:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003af6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003afa:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003afc:	6084      	str	r4, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003afe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003b02:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003b04:	2502      	movs	r5, #2
 8003b06:	6105      	str	r5, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b08:	f8c0 8014 	str.w	r8, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b10:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003b12:	2338      	movs	r3, #56	; 0x38
 8003b14:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b16:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b18:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1a:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003b1c:	2307      	movs	r3, #7
 8003b1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b20:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b22:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b24:	f001 ff13 	bl	800594e <HAL_SPI_Init>
  HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 8003b28:	4622      	mov	r2, r4
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	2026      	movs	r0, #38	; 0x26
 8003b2e:	f000 fa81 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b32:	2026      	movs	r0, #38	; 0x26
 8003b34:	f000 fab0 	bl	8004098 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM7_IRQn,2,2);
 8003b38:	462a      	mov	r2, r5
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	2037      	movs	r0, #55	; 0x37
 8003b3e:	f000 fa79 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003b42:	2037      	movs	r0, #55	; 0x37
 8003b44:	f000 faa8 	bl	8004098 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, CS_0_Pin|CS_1_Pin, GPIO_PIN_SET);
 8003b48:	4642      	mov	r2, r8
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	4803      	ldr	r0, [pc, #12]	; (8003b5c <main+0x2e0>)
 8003b4e:	f000 fdb7 	bl	80046c0 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, &inByte, 1);
 8003b52:	4642      	mov	r2, r8
 8003b54:	e01a      	b.n	8003b8c <main+0x310>
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	48000800 	.word	0x48000800
 8003b60:	48000400 	.word	0x48000400
 8003b64:	10210000 	.word	0x10210000
 8003b68:	20016be8 	.word	0x20016be8
 8003b6c:	20016c70 	.word	0x20016c70
 8003b70:	40004400 	.word	0x40004400
 8003b74:	40001400 	.word	0x40001400
 8003b78:	20016c30 	.word	0x20016c30
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	20016b84 	.word	0x20016b84
 8003b84:	40003800 	.word	0x40003800
 8003b88:	20016cf0 	.word	0x20016cf0
 8003b8c:	4918      	ldr	r1, [pc, #96]	; (8003bf0 <main+0x374>)
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f002 ffd0 	bl	8006b34 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003b94:	4648      	mov	r0, r9
 8003b96:	f002 fbab 	bl	80062f0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003b9a:	4642      	mov	r2, r8
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	4815      	ldr	r0, [pc, #84]	; (8003bf4 <main+0x378>)
 8003ba0:	f000 fd8e 	bl	80046c0 <HAL_GPIO_WritePin>
  uint8_t value = 0;
 8003ba4:	f88d 4447 	strb.w	r4, [sp, #1095]	; 0x447
  value = mouseDriver_init();
 8003ba8:	f7fe fcf2 	bl	8002590 <mouseDriver_init>
 8003bac:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
 8003bb0:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&huart2, &value, 1, 100);
 8003bb4:	2364      	movs	r3, #100	; 0x64
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f003 fc9e 	bl	80074fa <HAL_UART_Transmit>
	  len=sprintf(buffer, "DELTA_X = %d, DELTA_Y = %d, SQUAL = %d\n", dx, dy, (int)data.squal);
 8003bbe:	4d0e      	ldr	r5, [pc, #56]	; (8003bf8 <main+0x37c>)
	  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8003bc0:	4634      	mov	r4, r6
	  sensorDrive_motion_read (&data);
 8003bc2:	a810      	add	r0, sp, #64	; 0x40
 8003bc4:	f7fe fe00 	bl	80027c8 <sensorDrive_motion_read>
	  len=sprintf(buffer, "DELTA_X = %d, DELTA_Y = %d, SQUAL = %d\n", dx, dy, (int)data.squal);
 8003bc8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8003bcc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8003bd0:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8003bd4:	9100      	str	r1, [sp, #0]
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	a817      	add	r0, sp, #92	; 0x5c
 8003bda:	f003 fdb7 	bl	800774c <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8003bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be2:	b282      	uxth	r2, r0
 8003be4:	a917      	add	r1, sp, #92	; 0x5c
 8003be6:	4620      	mov	r0, r4
 8003be8:	f003 fc87 	bl	80074fa <HAL_UART_Transmit>
 8003bec:	e7e9      	b.n	8003bc2 <main+0x346>
 8003bee:	bf00      	nop
 8003bf0:	20016688 	.word	0x20016688
 8003bf4:	48000800 	.word	0x48000800
 8003bf8:	0800905c 	.word	0x0800905c

08003bfc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c00:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_MspInit+0x2c>)
 8003c04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	661a      	str	r2, [r3, #96]	; 0x60
 8003c0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c0e:	f002 0201 	and.w	r2, r2, #1
 8003c12:	9200      	str	r2, [sp, #0]
 8003c14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c1c:	659a      	str	r2, [r3, #88]	; 0x58
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c28:	b002      	add	sp, #8
 8003c2a:	4770      	bx	lr
 8003c2c:	40021000 	.word	0x40021000

08003c30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c34:	2300      	movs	r3, #0
 8003c36:	9303      	str	r3, [sp, #12]
 8003c38:	9304      	str	r3, [sp, #16]
 8003c3a:	9305      	str	r3, [sp, #20]
 8003c3c:	9306      	str	r3, [sp, #24]
 8003c3e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8003c40:	6802      	ldr	r2, [r0, #0]
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_SPI_MspInit+0x8c>)
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c48:	b008      	add	sp, #32
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c4c:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8003c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58
 8003c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003c5e:	9200      	str	r2, [sp, #0]
 8003c60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c64:	f042 0204 	orr.w	r2, r2, #4
 8003c68:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c6c:	f002 0204 	and.w	r2, r2, #4
 8003c70:	9201      	str	r2, [sp, #4]
 8003c72:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c76:	f042 0202 	orr.w	r2, r2, #2
 8003c7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	9302      	str	r3, [sp, #8]
 8003c84:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c86:	230c      	movs	r3, #12
 8003c88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2602      	movs	r6, #2
 8003c8c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8e:	2503      	movs	r5, #3
 8003c90:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c92:	2405      	movs	r4, #5
 8003c94:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c96:	eb0d 0103 	add.w	r1, sp, r3
 8003c9a:	4809      	ldr	r0, [pc, #36]	; (8003cc0 <HAL_SPI_MspInit+0x90>)
 8003c9c:	f000 fb7a 	bl	8004394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cac:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cae:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb0:	a903      	add	r1, sp, #12
 8003cb2:	4804      	ldr	r0, [pc, #16]	; (8003cc4 <HAL_SPI_MspInit+0x94>)
 8003cb4:	f000 fb6e 	bl	8004394 <HAL_GPIO_Init>
}
 8003cb8:	e7c6      	b.n	8003c48 <HAL_SPI_MspInit+0x18>
 8003cba:	bf00      	nop
 8003cbc:	40003800 	.word	0x40003800
 8003cc0:	48000800 	.word	0x48000800
 8003cc4:	48000400 	.word	0x48000400

08003cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cc8:	b500      	push	{lr}
 8003cca:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8003ccc:	6803      	ldr	r3, [r0, #0]
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <HAL_TIM_Base_MspInit+0x54>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d005      	beq.n	8003ce0 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8003cd4:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <HAL_TIM_Base_MspInit+0x58>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00d      	beq.n	8003cf6 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003cda:	b003      	add	sp, #12
 8003cdc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ce0:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_TIM_Base_MspInit+0x5c>)
 8003ce2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce8:	661a      	str	r2, [r3, #96]	; 0x60
 8003cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	9b00      	ldr	r3, [sp, #0]
 8003cf4:	e7f1      	b.n	8003cda <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_TIM_Base_MspInit+0x5c>)
 8003cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cfa:	f042 0220 	orr.w	r2, r2, #32
 8003cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	2037      	movs	r0, #55	; 0x37
 8003d10:	f000 f990 	bl	8004034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d14:	2037      	movs	r0, #55	; 0x37
 8003d16:	f000 f9bf 	bl	8004098 <HAL_NVIC_EnableIRQ>
}
 8003d1a:	e7de      	b.n	8003cda <HAL_TIM_Base_MspInit+0x12>
 8003d1c:	40012c00 	.word	0x40012c00
 8003d20:	40001400 	.word	0x40001400
 8003d24:	40021000 	.word	0x40021000

08003d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d28:	b500      	push	{lr}
 8003d2a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	9302      	str	r3, [sp, #8]
 8003d32:	9303      	str	r3, [sp, #12]
 8003d34:	9304      	str	r3, [sp, #16]
 8003d36:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8003d38:	6802      	ldr	r2, [r0, #0]
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <HAL_TIM_MspPostInit+0x50>)
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d002      	beq.n	8003d46 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d40:	b007      	add	sp, #28
 8003d42:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d46:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d66:	2301      	movs	r3, #1
 8003d68:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6a:	a901      	add	r1, sp, #4
 8003d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d70:	f000 fb10 	bl	8004394 <HAL_GPIO_Init>
}
 8003d74:	e7e4      	b.n	8003d40 <HAL_TIM_MspPostInit+0x18>
 8003d76:	bf00      	nop
 8003d78:	40012c00 	.word	0x40012c00

08003d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d7c:	b530      	push	{r4, r5, lr}
 8003d7e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	2300      	movs	r3, #0
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	9305      	str	r3, [sp, #20]
 8003d88:	9306      	str	r3, [sp, #24]
 8003d8a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8003d8c:	6802      	ldr	r2, [r0, #0]
 8003d8e:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_UART_MspInit+0xa0>)
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d94:	b009      	add	sp, #36	; 0x24
 8003d96:	bd30      	pop	{r4, r5, pc}
 8003d98:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d9a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003d9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003da0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003da4:	659a      	str	r2, [r3, #88]	; 0x58
 8003da6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003da8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003dac:	9201      	str	r2, [sp, #4]
 8003dae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc6:	2502      	movs	r5, #2
 8003dc8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dce:	2307      	movs	r3, #7
 8003dd0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd2:	a903      	add	r1, sp, #12
 8003dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dd8:	f000 fadc 	bl	8004394 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003ddc:	4810      	ldr	r0, [pc, #64]	; (8003e20 <HAL_UART_MspInit+0xa4>)
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <HAL_UART_MspInit+0xa8>)
 8003de0:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8003de2:	6045      	str	r5, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003de4:	2310      	movs	r3, #16
 8003de6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003df0:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003df2:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003df4:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003df6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003df8:	f000 f986 	bl	8004108 <HAL_DMA_Init>
 8003dfc:	b958      	cbnz	r0, 8003e16 <HAL_UART_MspInit+0x9a>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <HAL_UART_MspInit+0xa4>)
 8003e00:	66a3      	str	r3, [r4, #104]	; 0x68
 8003e02:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e04:	2200      	movs	r2, #0
 8003e06:	4611      	mov	r1, r2
 8003e08:	2026      	movs	r0, #38	; 0x26
 8003e0a:	f000 f913 	bl	8004034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e0e:	2026      	movs	r0, #38	; 0x26
 8003e10:	f000 f942 	bl	8004098 <HAL_NVIC_EnableIRQ>
}
 8003e14:	e7be      	b.n	8003d94 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8003e16:	f7ff fef1 	bl	8003bfc <Error_Handler>
 8003e1a:	e7f0      	b.n	8003dfe <HAL_UART_MspInit+0x82>
 8003e1c:	40004400 	.word	0x40004400
 8003e20:	20016be8 	.word	0x20016be8
 8003e24:	40020080 	.word	0x40020080

08003e28 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e28:	4770      	bx	lr

08003e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e2a:	e7fe      	b.n	8003e2a <HardFault_Handler>

08003e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e2c:	e7fe      	b.n	8003e2c <MemManage_Handler>

08003e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e2e:	e7fe      	b.n	8003e2e <BusFault_Handler>

08003e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e30:	e7fe      	b.n	8003e30 <UsageFault_Handler>

08003e32 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e32:	4770      	bx	lr

08003e34 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e34:	4770      	bx	lr

08003e36 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e36:	4770      	bx	lr

08003e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e3a:	f000 f8c3 	bl	8003fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e3e:	bd08      	pop	{r3, pc}

08003e40 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003e40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003e42:	4802      	ldr	r0, [pc, #8]	; (8003e4c <DMA1_Channel7_IRQHandler+0xc>)
 8003e44:	f000 fa41 	bl	80042ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003e48:	bd08      	pop	{r3, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20016be8 	.word	0x20016be8

08003e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e52:	4802      	ldr	r0, [pc, #8]	; (8003e5c <USART2_IRQHandler+0xc>)
 8003e54:	f002 ffd6 	bl	8006e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e58:	bd08      	pop	{r3, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20016c70 	.word	0x20016c70

08003e60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e62:	4802      	ldr	r0, [pc, #8]	; (8003e6c <TIM7_IRQHandler+0xc>)
 8003e64:	f002 fa5f 	bl	8006326 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e68:	bd08      	pop	{r3, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20016cf0 	.word	0x20016cf0

08003e70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003e70:	b508      	push	{r3, lr}
 8003e72:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e74:	4a0b      	ldr	r2, [pc, #44]	; (8003ea4 <_sbrk+0x34>)
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	b142      	cbz	r2, 8003e8c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <_sbrk+0x34>)
 8003e7c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003e7e:	4403      	add	r3, r0
 8003e80:	466a      	mov	r2, sp
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d806      	bhi.n	8003e94 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003e86:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <_sbrk+0x34>)
 8003e88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003e8a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003e8c:	4a05      	ldr	r2, [pc, #20]	; (8003ea4 <_sbrk+0x34>)
 8003e8e:	4906      	ldr	r1, [pc, #24]	; (8003ea8 <_sbrk+0x38>)
 8003e90:	6011      	str	r1, [r2, #0]
 8003e92:	e7f2      	b.n	8003e7a <_sbrk+0xa>
		errno = ENOMEM;
 8003e94:	f003 fc0e 	bl	80076b4 <__errno>
 8003e98:	230c      	movs	r3, #12
 8003e9a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ea0:	e7f3      	b.n	8003e8a <_sbrk+0x1a>
 8003ea2:	bf00      	nop
 8003ea4:	20016b78 	.word	0x20016b78
 8003ea8:	20016d38 	.word	0x20016d38

08003eac <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eac:	490f      	ldr	r1, [pc, #60]	; (8003eec <SystemInit+0x40>)
 8003eae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003eb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <SystemInit+0x44>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003ece:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ed8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003ee2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ee4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ee8:	608b      	str	r3, [r1, #8]
#endif
}
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ef8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003efa:	e003      	b.n	8003f04 <LoopCopyDataInit>

08003efc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003efe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f02:	3104      	adds	r1, #4

08003f04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f04:	480b      	ldr	r0, [pc, #44]	; (8003f34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f0c:	d3f6      	bcc.n	8003efc <CopyDataInit>
	ldr	r2, =_sbss
 8003f0e:	4a0b      	ldr	r2, [pc, #44]	; (8003f3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f10:	e002      	b.n	8003f18 <LoopFillZerobss>

08003f12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f14:	f842 3b04 	str.w	r3, [r2], #4

08003f18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <LoopForever+0x16>)
	cmp	r2, r3
 8003f1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f1c:	d3f9      	bcc.n	8003f12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f1e:	f7ff ffc5 	bl	8003eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f22:	f003 fbcd 	bl	80076c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f26:	f7ff fca9 	bl	800387c <main>

08003f2a <LoopForever>:

LoopForever:
    b LoopForever
 8003f2a:	e7fe      	b.n	8003f2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f2c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003f30:	08009270 	.word	0x08009270
	ldr	r0, =_sdata
 8003f34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f38:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003f3c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003f40:	20016d38 	.word	0x20016d38

08003f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f44:	e7fe      	b.n	8003f44 <ADC1_2_IRQHandler>
	...

08003f48 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_InitTick+0x44>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b90b      	cbnz	r3, 8003f52 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f4e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003f50:	4770      	bx	lr
{
 8003f52:	b510      	push	{r4, lr}
 8003f54:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5e:	4a0c      	ldr	r2, [pc, #48]	; (8003f90 <HAL_InitTick+0x48>)
 8003f60:	6810      	ldr	r0, [r2, #0]
 8003f62:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f66:	f000 f8b9 	bl	80040dc <HAL_SYSTICK_Config>
 8003f6a:	b968      	cbnz	r0, 8003f88 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f6c:	2c0f      	cmp	r4, #15
 8003f6e:	d901      	bls.n	8003f74 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8003f70:	2001      	movs	r0, #1
 8003f72:	e00a      	b.n	8003f8a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f74:	2200      	movs	r2, #0
 8003f76:	4621      	mov	r1, r4
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f7c:	f000 f85a 	bl	8004034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <HAL_InitTick+0x4c>)
 8003f82:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f84:	2000      	movs	r0, #0
 8003f86:	e000      	b.n	8003f8a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8003f88:	2001      	movs	r0, #1
}
 8003f8a:	bd10      	pop	{r4, pc}
 8003f8c:	20000004 	.word	0x20000004
 8003f90:	20000000 	.word	0x20000000
 8003f94:	20000008 	.word	0x20000008

08003f98 <HAL_Init>:
{
 8003f98:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f9a:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <HAL_Init+0x28>)
 8003f9c:	6813      	ldr	r3, [r2, #0]
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa4:	2003      	movs	r0, #3
 8003fa6:	f000 f833 	bl	8004010 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7ff ffcc 	bl	8003f48 <HAL_InitTick>
 8003fb0:	b110      	cbz	r0, 8003fb8 <HAL_Init+0x20>
    status = HAL_ERROR;
 8003fb2:	2401      	movs	r4, #1
}
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	bd10      	pop	{r4, pc}
 8003fb8:	4604      	mov	r4, r0
    HAL_MspInit();
 8003fba:	f7ff fe21 	bl	8003c00 <HAL_MspInit>
 8003fbe:	e7f9      	b.n	8003fb4 <HAL_Init+0x1c>
 8003fc0:	40022000 	.word	0x40022000

08003fc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003fc4:	4a03      	ldr	r2, [pc, #12]	; (8003fd4 <HAL_IncTick+0x10>)
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	4903      	ldr	r1, [pc, #12]	; (8003fd8 <HAL_IncTick+0x14>)
 8003fca:	6809      	ldr	r1, [r1, #0]
 8003fcc:	440b      	add	r3, r1
 8003fce:	6013      	str	r3, [r2, #0]
}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20016d30 	.word	0x20016d30
 8003fd8:	20000004 	.word	0x20000004

08003fdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003fdc:	4b01      	ldr	r3, [pc, #4]	; (8003fe4 <HAL_GetTick+0x8>)
 8003fde:	6818      	ldr	r0, [r3, #0]
}
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20016d30 	.word	0x20016d30

08003fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003fec:	f7ff fff6 	bl	8003fdc <HAL_GetTick>
 8003ff0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ff2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003ff6:	d002      	beq.n	8003ffe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <HAL_Delay+0x24>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ffe:	f7ff ffed 	bl	8003fdc <HAL_GetTick>
 8004002:	1b40      	subs	r0, r0, r5
 8004004:	42a0      	cmp	r0, r4
 8004006:	d3fa      	bcc.n	8003ffe <HAL_Delay+0x16>
  {
  }
}
 8004008:	bd38      	pop	{r3, r4, r5, pc}
 800400a:	bf00      	nop
 800400c:	20000004 	.word	0x20000004

08004010 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004010:	4a07      	ldr	r2, [pc, #28]	; (8004030 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004012:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004014:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	0c1b      	lsrs	r3, r3, #16
 800401c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004024:	0200      	lsls	r0, r0, #8
 8004026:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800402a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800402c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800402e:	4770      	bx	lr
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004034:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004036:	4b16      	ldr	r3, [pc, #88]	; (8004090 <HAL_NVIC_SetPriority+0x5c>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800403e:	f1c3 0407 	rsb	r4, r3, #7
 8004042:	2c04      	cmp	r4, #4
 8004044:	bf28      	it	cs
 8004046:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004048:	1d1d      	adds	r5, r3, #4
 800404a:	2d06      	cmp	r5, #6
 800404c:	bf8c      	ite	hi
 800404e:	3b03      	subhi	r3, #3
 8004050:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004052:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004056:	fa05 f404 	lsl.w	r4, r5, r4
 800405a:	ea21 0104 	bic.w	r1, r1, r4
 800405e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004060:	fa05 f303 	lsl.w	r3, r5, r3
 8004064:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004068:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800406a:	2800      	cmp	r0, #0
 800406c:	db09      	blt.n	8004082 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406e:	0109      	lsls	r1, r1, #4
 8004070:	b2c9      	uxtb	r1, r1
 8004072:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004076:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800407a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800407e:	bc30      	pop	{r4, r5}
 8004080:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004082:	f000 000f 	and.w	r0, r0, #15
 8004086:	0109      	lsls	r1, r1, #4
 8004088:	b2c9      	uxtb	r1, r1
 800408a:	4b02      	ldr	r3, [pc, #8]	; (8004094 <HAL_NVIC_SetPriority+0x60>)
 800408c:	5419      	strb	r1, [r3, r0]
 800408e:	e7f6      	b.n	800407e <HAL_NVIC_SetPriority+0x4a>
 8004090:	e000ed00 	.word	0xe000ed00
 8004094:	e000ed14 	.word	0xe000ed14

08004098 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004098:	2800      	cmp	r0, #0
 800409a:	db08      	blt.n	80040ae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800409c:	0942      	lsrs	r2, r0, #5
 800409e:	f000 001f 	and.w	r0, r0, #31
 80040a2:	2301      	movs	r3, #1
 80040a4:	fa03 f000 	lsl.w	r0, r3, r0
 80040a8:	4b01      	ldr	r3, [pc, #4]	; (80040b0 <HAL_NVIC_EnableIRQ+0x18>)
 80040aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80040ae:	4770      	bx	lr
 80040b0:	e000e100 	.word	0xe000e100

080040b4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80040b4:	2800      	cmp	r0, #0
 80040b6:	db0d      	blt.n	80040d4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b8:	0943      	lsrs	r3, r0, #5
 80040ba:	f000 001f 	and.w	r0, r0, #31
 80040be:	2201      	movs	r2, #1
 80040c0:	fa02 f000 	lsl.w	r0, r2, r0
 80040c4:	3320      	adds	r3, #32
 80040c6:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <HAL_NVIC_DisableIRQ+0x24>)
 80040c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80040cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040d0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000e100 	.word	0xe000e100

080040dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040dc:	3801      	subs	r0, #1
 80040de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80040e2:	d20a      	bcs.n	80040fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_SYSTICK_Config+0x24>)
 80040e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e8:	4a06      	ldr	r2, [pc, #24]	; (8004104 <HAL_SYSTICK_Config+0x28>)
 80040ea:	21f0      	movs	r1, #240	; 0xf0
 80040ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f0:	2000      	movs	r0, #0
 80040f2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80040fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	e000e010 	.word	0xe000e010
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004108:	2800      	cmp	r0, #0
 800410a:	d057      	beq.n	80041bc <HAL_DMA_Init+0xb4>
{
 800410c:	b410      	push	{r4}
 800410e:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004110:	6801      	ldr	r1, [r0, #0]
 8004112:	4a2b      	ldr	r2, [pc, #172]	; (80041c0 <HAL_DMA_Init+0xb8>)
 8004114:	4291      	cmp	r1, r2
 8004116:	d846      	bhi.n	80041a6 <HAL_DMA_Init+0x9e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004118:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <HAL_DMA_Init+0xbc>)
 800411a:	440a      	add	r2, r1
 800411c:	492a      	ldr	r1, [pc, #168]	; (80041c8 <HAL_DMA_Init+0xc0>)
 800411e:	fba1 1202 	umull	r1, r2, r1, r2
 8004122:	0912      	lsrs	r2, r2, #4
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004128:	4a28      	ldr	r2, [pc, #160]	; (80041cc <HAL_DMA_Init+0xc4>)
 800412a:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800412c:	2202      	movs	r2, #2
 800412e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004136:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800413a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68dc      	ldr	r4, [r3, #12]
 8004142:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004144:	691c      	ldr	r4, [r3, #16]
 8004146:	4322      	orrs	r2, r4
 8004148:	695c      	ldr	r4, [r3, #20]
 800414a:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414c:	699c      	ldr	r4, [r3, #24]
 800414e:	4322      	orrs	r2, r4
 8004150:	69dc      	ldr	r4, [r3, #28]
 8004152:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8004154:	6a1c      	ldr	r4, [r3, #32]
 8004156:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8004158:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800415a:	6002      	str	r2, [r0, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004162:	d016      	beq.n	8004192 <HAL_DMA_Init+0x8a>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004164:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004166:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_DMA_Init+0xc4>)
 8004168:	4291      	cmp	r1, r2
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800416a:	bf0c      	ite	eq
 800416c:	4918      	ldreq	r1, [pc, #96]	; (80041d0 <HAL_DMA_Init+0xc8>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800416e:	4919      	ldrne	r1, [pc, #100]	; (80041d4 <HAL_DMA_Init+0xcc>)
 8004170:	680a      	ldr	r2, [r1, #0]
 8004172:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004174:	f000 041c 	and.w	r4, r0, #28
 8004178:	200f      	movs	r0, #15
 800417a:	40a0      	lsls	r0, r4
 800417c:	ea22 0200 	bic.w	r2, r2, r0
 8004180:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004182:	680c      	ldr	r4, [r1, #0]
 8004184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004186:	f002 001c 	and.w	r0, r2, #28
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	4082      	lsls	r2, r0
 800418e:	4322      	orrs	r2, r4
 8004190:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004192:	2000      	movs	r0, #0
 8004194:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800419c:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 80041a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041a4:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041a6:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <HAL_DMA_Init+0xd0>)
 80041a8:	440a      	add	r2, r1
 80041aa:	4907      	ldr	r1, [pc, #28]	; (80041c8 <HAL_DMA_Init+0xc0>)
 80041ac:	fba1 1202 	umull	r1, r2, r1, r2
 80041b0:	0912      	lsrs	r2, r2, #4
 80041b2:	0092      	lsls	r2, r2, #2
 80041b4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041b6:	4a09      	ldr	r2, [pc, #36]	; (80041dc <HAL_DMA_Init+0xd4>)
 80041b8:	6402      	str	r2, [r0, #64]	; 0x40
 80041ba:	e7b7      	b.n	800412c <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 80041bc:	2001      	movs	r0, #1
}
 80041be:	4770      	bx	lr
 80041c0:	40020407 	.word	0x40020407
 80041c4:	bffdfff8 	.word	0xbffdfff8
 80041c8:	cccccccd 	.word	0xcccccccd
 80041cc:	40020000 	.word	0x40020000
 80041d0:	400200a8 	.word	0x400200a8
 80041d4:	400204a8 	.word	0x400204a8
 80041d8:	bffdfbf8 	.word	0xbffdfbf8
 80041dc:	40020400 	.word	0x40020400

080041e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e0:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041e2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80041e6:	2c01      	cmp	r4, #1
 80041e8:	d045      	beq.n	8004276 <HAL_DMA_Start_IT+0x96>
 80041ea:	2401      	movs	r4, #1
 80041ec:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80041f0:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80041f4:	b2e4      	uxtb	r4, r4
 80041f6:	2c01      	cmp	r4, #1
 80041f8:	d005      	beq.n	8004206 <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fa:	2300      	movs	r3, #0
 80041fc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004200:	2002      	movs	r0, #2
  }
  return status;
}
 8004202:	bc70      	pop	{r4, r5, r6}
 8004204:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004206:	2402      	movs	r4, #2
 8004208:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800420c:	2400      	movs	r4, #0
 800420e:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004210:	6805      	ldr	r5, [r0, #0]
 8004212:	682c      	ldr	r4, [r5, #0]
 8004214:	f024 0401 	bic.w	r4, r4, #1
 8004218:	602c      	str	r4, [r5, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800421a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800421c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800421e:	f004 061c 	and.w	r6, r4, #28
 8004222:	2401      	movs	r4, #1
 8004224:	40b4      	lsls	r4, r6
 8004226:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004228:	6804      	ldr	r4, [r0, #0]
 800422a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800422c:	6883      	ldr	r3, [r0, #8]
 800422e:	2b10      	cmp	r3, #16
 8004230:	d011      	beq.n	8004256 <HAL_DMA_Start_IT+0x76>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004232:	6803      	ldr	r3, [r0, #0]
 8004234:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004236:	6803      	ldr	r3, [r0, #0]
 8004238:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800423a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800423c:	b183      	cbz	r3, 8004260 <HAL_DMA_Start_IT+0x80>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800423e:	6802      	ldr	r2, [r0, #0]
 8004240:	6813      	ldr	r3, [r2, #0]
 8004242:	f043 030e 	orr.w	r3, r3, #14
 8004246:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004248:	6802      	ldr	r2, [r0, #0]
 800424a:	6813      	ldr	r3, [r2, #0]
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004252:	2000      	movs	r0, #0
 8004254:	e7d5      	b.n	8004202 <HAL_DMA_Start_IT+0x22>
    hdma->Instance->CPAR = DstAddress;
 8004256:	6803      	ldr	r3, [r0, #0]
 8004258:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800425a:	6803      	ldr	r3, [r0, #0]
 800425c:	60d9      	str	r1, [r3, #12]
 800425e:	e7ec      	b.n	800423a <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004260:	6802      	ldr	r2, [r0, #0]
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	f023 0304 	bic.w	r3, r3, #4
 8004268:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800426a:	6802      	ldr	r2, [r0, #0]
 800426c:	6813      	ldr	r3, [r2, #0]
 800426e:	f043 030a 	orr.w	r3, r3, #10
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	e7e8      	b.n	8004248 <HAL_DMA_Start_IT+0x68>
  __HAL_LOCK(hdma);
 8004276:	2002      	movs	r0, #2
 8004278:	e7c3      	b.n	8004202 <HAL_DMA_Start_IT+0x22>

0800427a <HAL_DMA_Abort_IT>:
{
 800427a:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800427c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d003      	beq.n	800428e <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004286:	2304      	movs	r3, #4
 8004288:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800428a:	2001      	movs	r0, #1
}
 800428c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800428e:	6802      	ldr	r2, [r0, #0]
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	f023 030e 	bic.w	r3, r3, #14
 8004296:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004298:	6802      	ldr	r2, [r0, #0]
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80042a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80042a6:	f003 031c 	and.w	r3, r3, #28
 80042aa:	2201      	movs	r2, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80042b2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80042b6:	2300      	movs	r3, #0
 80042b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80042bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042be:	b113      	cbz	r3, 80042c6 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80042c0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2000      	movs	r0, #0
 80042c4:	e7e2      	b.n	800428c <HAL_DMA_Abort_IT+0x12>
 80042c6:	2000      	movs	r0, #0
 80042c8:	e7e0      	b.n	800428c <HAL_DMA_Abort_IT+0x12>

080042ca <HAL_DMA_IRQHandler>:
{
 80042ca:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042ce:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80042d0:	6804      	ldr	r4, [r0, #0]
 80042d2:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80042d6:	f003 031c 	and.w	r3, r3, #28
 80042da:	2204      	movs	r2, #4
 80042dc:	409a      	lsls	r2, r3
 80042de:	420a      	tst	r2, r1
 80042e0:	d015      	beq.n	800430e <HAL_DMA_IRQHandler+0x44>
 80042e2:	f015 0f04 	tst.w	r5, #4
 80042e6:	d012      	beq.n	800430e <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	f013 0f20 	tst.w	r3, #32
 80042ee:	d103      	bne.n	80042f8 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f023 0304 	bic.w	r3, r3, #4
 80042f6:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80042f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80042fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80042fc:	f003 021c 	and.w	r2, r3, #28
 8004300:	2304      	movs	r3, #4
 8004302:	4093      	lsls	r3, r2
 8004304:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8004306:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004308:	b103      	cbz	r3, 800430c <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800430a:	4798      	blx	r3
}
 800430c:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800430e:	2202      	movs	r2, #2
 8004310:	409a      	lsls	r2, r3
 8004312:	420a      	tst	r2, r1
 8004314:	d01c      	beq.n	8004350 <HAL_DMA_IRQHandler+0x86>
 8004316:	f015 0f02 	tst.w	r5, #2
 800431a:	d019      	beq.n	8004350 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	f013 0f20 	tst.w	r3, #32
 8004322:	d106      	bne.n	8004332 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	f023 030a 	bic.w	r3, r3, #10
 800432a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800432c:	2301      	movs	r3, #1
 800432e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004332:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004334:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004336:	f003 021c 	and.w	r2, r3, #28
 800433a:	2302      	movs	r3, #2
 800433c:	4093      	lsls	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004340:	2300      	movs	r3, #0
 8004342:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8004346:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0df      	beq.n	800430c <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800434c:	4798      	blx	r3
 800434e:	e7dd      	b.n	800430c <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004350:	2208      	movs	r2, #8
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	420b      	tst	r3, r1
 8004358:	d0d8      	beq.n	800430c <HAL_DMA_IRQHandler+0x42>
 800435a:	f015 0f08 	tst.w	r5, #8
 800435e:	d0d5      	beq.n	800430c <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	f023 030e 	bic.w	r3, r3, #14
 8004366:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004368:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800436a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800436c:	f003 031c 	and.w	r3, r3, #28
 8004370:	2201      	movs	r2, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004378:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800437a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800437e:	2300      	movs	r3, #0
 8004380:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004384:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0c0      	beq.n	800430c <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800438a:	4798      	blx	r3
  return;
 800438c:	e7be      	b.n	800430c <HAL_DMA_IRQHandler+0x42>

0800438e <HAL_DMA_GetState>:
  return hdma->State;
 800438e:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8004392:	4770      	bx	lr

08004394 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004394:	680a      	ldr	r2, [r1, #0]
 8004396:	2a00      	cmp	r2, #0
 8004398:	f000 80e7 	beq.w	800456a <HAL_GPIO_Init+0x1d6>
{
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80043a2:	2400      	movs	r4, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043a4:	2701      	movs	r7, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a6:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8004574 <HAL_GPIO_Init+0x1e0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043aa:	4e70      	ldr	r6, [pc, #448]	; (800456c <HAL_GPIO_Init+0x1d8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043ac:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8004578 <HAL_GPIO_Init+0x1e4>
 80043b0:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 800457c <HAL_GPIO_Init+0x1e8>
 80043b4:	4686      	mov	lr, r0
 80043b6:	e04e      	b.n	8004456 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->AFR[position >> 3u];
 80043b8:	08e2      	lsrs	r2, r4, #3
 80043ba:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 80043be:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043c0:	f004 0307 	and.w	r3, r4, #7
 80043c4:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80043c8:	230f      	movs	r3, #15
 80043ca:	fa03 f30b 	lsl.w	r3, r3, fp
 80043ce:	ea25 0503 	bic.w	r5, r5, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043d2:	690b      	ldr	r3, [r1, #16]
 80043d4:	fa03 f30b 	lsl.w	r3, r3, fp
 80043d8:	432b      	orrs	r3, r5
        GPIOx->AFR[position >> 3u] = temp;
 80043da:	6213      	str	r3, [r2, #32]
 80043dc:	e045      	b.n	800446a <HAL_GPIO_Init+0xd6>
        temp = GPIOx->ASCR;
 80043de:	f8de b02c 	ldr.w	fp, [lr, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043e2:	ea2b 0b00 	bic.w	fp, fp, r0
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80043e6:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 80043ea:	40a0      	lsls	r0, r4
 80043ec:	ea40 000b 	orr.w	r0, r0, fp
        GPIOx->ASCR = temp;
 80043f0:	f8ce 002c 	str.w	r0, [lr, #44]	; 0x2c
 80043f4:	e06b      	b.n	80044ce <HAL_GPIO_Init+0x13a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043f6:	2200      	movs	r2, #0
 80043f8:	4082      	lsls	r2, r0
 80043fa:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043fc:	609a      	str	r2, [r3, #8]
        temp = EXTI->IMR1;
 80043fe:	6833      	ldr	r3, [r6, #0]
        temp &= ~(iocurrent);
 8004400:	ea6f 0008 	mvn.w	r0, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004404:	684a      	ldr	r2, [r1, #4]
 8004406:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~(iocurrent);
 800440a:	bf0c      	ite	eq
 800440c:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 800440e:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR1 = temp;
 8004412:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR1;
 8004414:	6873      	ldr	r3, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004416:	684a      	ldr	r2, [r1, #4]
 8004418:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~(iocurrent);
 800441c:	bf0c      	ite	eq
 800441e:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 8004420:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->EMR1 = temp;
 8004424:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004426:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004428:	684b      	ldr	r3, [r1, #4]
 800442a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800442e:	bf0c      	ite	eq
 8004430:	4002      	andeq	r2, r0
        {
          temp |= iocurrent;
 8004432:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR1 = temp;
 8004436:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8004438:	68f3      	ldr	r3, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800443a:	684a      	ldr	r2, [r1, #4]
 800443c:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8004440:	bf0c      	ite	eq
 8004442:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 8004444:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR1 = temp;
 8004448:	60f3      	str	r3, [r6, #12]
      }
    }

    position++;
 800444a:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800444c:	680a      	ldr	r2, [r1, #0]
 800444e:	fa32 f304 	lsrs.w	r3, r2, r4
 8004452:	f000 8087 	beq.w	8004564 <HAL_GPIO_Init+0x1d0>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004456:	fa07 f004 	lsl.w	r0, r7, r4
    if (iocurrent != 0x00u)
 800445a:	ea10 0802 	ands.w	r8, r0, r2
 800445e:	d0f4      	beq.n	800444a <HAL_GPIO_Init+0xb6>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004460:	684b      	ldr	r3, [r1, #4]
 8004462:	f023 0310 	bic.w	r3, r3, #16
 8004466:	2b02      	cmp	r3, #2
 8004468:	d0a6      	beq.n	80043b8 <HAL_GPIO_Init+0x24>
      temp = GPIOx->MODER;
 800446a:	f8de 2000 	ldr.w	r2, [lr]
 800446e:	0065      	lsls	r5, r4, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004470:	2303      	movs	r3, #3
 8004472:	40ab      	lsls	r3, r5
 8004474:	43db      	mvns	r3, r3
 8004476:	ea03 0b02 	and.w	fp, r3, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800447a:	684a      	ldr	r2, [r1, #4]
 800447c:	f002 0203 	and.w	r2, r2, #3
 8004480:	40aa      	lsls	r2, r5
 8004482:	ea42 020b 	orr.w	r2, r2, fp
      GPIOx->MODER = temp;
 8004486:	f8ce 2000 	str.w	r2, [lr]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800448a:	684a      	ldr	r2, [r1, #4]
 800448c:	f022 0210 	bic.w	r2, r2, #16
 8004490:	3a01      	subs	r2, #1
 8004492:	2a01      	cmp	r2, #1
 8004494:	d815      	bhi.n	80044c2 <HAL_GPIO_Init+0x12e>
        temp = GPIOx->OSPEEDR;
 8004496:	f8de 2008 	ldr.w	r2, [lr, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800449a:	ea03 0b02 	and.w	fp, r3, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 800449e:	68ca      	ldr	r2, [r1, #12]
 80044a0:	40aa      	lsls	r2, r5
 80044a2:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OSPEEDR = temp;
 80044a6:	f8ce 2008 	str.w	r2, [lr, #8]
        temp = GPIOx->OTYPER;
 80044aa:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ae:	ea22 0b00 	bic.w	fp, r2, r0
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80044b2:	684a      	ldr	r2, [r1, #4]
 80044b4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80044b8:	40a2      	lsls	r2, r4
 80044ba:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OTYPER = temp;
 80044be:	f8ce 2004 	str.w	r2, [lr, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80044c2:	684a      	ldr	r2, [r1, #4]
 80044c4:	f002 0b03 	and.w	fp, r2, #3
 80044c8:	f1bb 0f03 	cmp.w	fp, #3
 80044cc:	d087      	beq.n	80043de <HAL_GPIO_Init+0x4a>
      temp = GPIOx->PUPDR;
 80044ce:	f8de 200c 	ldr.w	r2, [lr, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044d2:	4013      	ands	r3, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044d4:	688a      	ldr	r2, [r1, #8]
 80044d6:	fa02 f505 	lsl.w	r5, r2, r5
 80044da:	431d      	orrs	r5, r3
      GPIOx->PUPDR = temp;
 80044dc:	f8ce 500c 	str.w	r5, [lr, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044e0:	684b      	ldr	r3, [r1, #4]
 80044e2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80044e6:	d0b0      	beq.n	800444a <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e8:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	f8cc 3060 	str.w	r3, [ip, #96]	; 0x60
 80044f4:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	9b01      	ldr	r3, [sp, #4]
 8004500:	f024 0303 	bic.w	r3, r4, #3
 8004504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004508:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2u];
 800450c:	689d      	ldr	r5, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800450e:	f004 0203 	and.w	r2, r4, #3
 8004512:	0090      	lsls	r0, r2, #2
 8004514:	220f      	movs	r2, #15
 8004516:	4082      	lsls	r2, r0
 8004518:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800451c:	f1be 4f90 	cmp.w	lr, #1207959552	; 0x48000000
 8004520:	f43f af69 	beq.w	80043f6 <HAL_GPIO_Init+0x62>
 8004524:	45ce      	cmp	lr, r9
 8004526:	d013      	beq.n	8004550 <HAL_GPIO_Init+0x1bc>
 8004528:	45d6      	cmp	lr, sl
 800452a:	d013      	beq.n	8004554 <HAL_GPIO_Init+0x1c0>
 800452c:	4a10      	ldr	r2, [pc, #64]	; (8004570 <HAL_GPIO_Init+0x1dc>)
 800452e:	4596      	cmp	lr, r2
 8004530:	d012      	beq.n	8004558 <HAL_GPIO_Init+0x1c4>
 8004532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004536:	4596      	cmp	lr, r2
 8004538:	d010      	beq.n	800455c <HAL_GPIO_Init+0x1c8>
 800453a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800453e:	4596      	cmp	lr, r2
 8004540:	d00e      	beq.n	8004560 <HAL_GPIO_Init+0x1cc>
 8004542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004546:	4596      	cmp	lr, r2
 8004548:	bf0c      	ite	eq
 800454a:	2206      	moveq	r2, #6
 800454c:	2207      	movne	r2, #7
 800454e:	e753      	b.n	80043f8 <HAL_GPIO_Init+0x64>
 8004550:	463a      	mov	r2, r7
 8004552:	e751      	b.n	80043f8 <HAL_GPIO_Init+0x64>
 8004554:	2202      	movs	r2, #2
 8004556:	e74f      	b.n	80043f8 <HAL_GPIO_Init+0x64>
 8004558:	2203      	movs	r2, #3
 800455a:	e74d      	b.n	80043f8 <HAL_GPIO_Init+0x64>
 800455c:	2204      	movs	r2, #4
 800455e:	e74b      	b.n	80043f8 <HAL_GPIO_Init+0x64>
 8004560:	2205      	movs	r2, #5
 8004562:	e749      	b.n	80043f8 <HAL_GPIO_Init+0x64>
  }
}
 8004564:	b003      	add	sp, #12
 8004566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456a:	4770      	bx	lr
 800456c:	40010400 	.word	0x40010400
 8004570:	48000c00 	.word	0x48000c00
 8004574:	40021000 	.word	0x40021000
 8004578:	48000400 	.word	0x48000400
 800457c:	48000800 	.word	0x48000800

08004580 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004580:	2900      	cmp	r1, #0
 8004582:	f000 8095 	beq.w	80046b0 <HAL_GPIO_DeInit+0x130>
{
 8004586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458a:	b083      	sub	sp, #12
 800458c:	460e      	mov	r6, r1
  uint32_t position = 0x00u;
 800458e:	2200      	movs	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004590:	f04f 0901 	mov.w	r9, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004594:	f04f 0a0f 	mov.w	sl, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004598:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80046b8 <HAL_GPIO_DeInit+0x138>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800459c:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80046bc <HAL_GPIO_DeInit+0x13c>
 80045a0:	e02a      	b.n	80045f8 <HAL_GPIO_DeInit+0x78>
 80045a2:	f04f 0e00 	mov.w	lr, #0
 80045a6:	fa0e f404 	lsl.w	r4, lr, r4
 80045aa:	9f01      	ldr	r7, [sp, #4]
 80045ac:	42bc      	cmp	r4, r7
 80045ae:	d062      	beq.n	8004676 <HAL_GPIO_DeInit+0xf6>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80045b0:	6805      	ldr	r5, [r0, #0]
 80045b2:	0051      	lsls	r1, r2, #1
 80045b4:	2403      	movs	r4, #3
 80045b6:	408c      	lsls	r4, r1
 80045b8:	4325      	orrs	r5, r4
 80045ba:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80045bc:	08d5      	lsrs	r5, r2, #3
 80045be:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80045c2:	6a2f      	ldr	r7, [r5, #32]
 80045c4:	f002 0107 	and.w	r1, r2, #7
 80045c8:	0089      	lsls	r1, r1, #2
 80045ca:	fa0a f101 	lsl.w	r1, sl, r1
 80045ce:	ea27 0101 	bic.w	r1, r7, r1
 80045d2:	6229      	str	r1, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045d4:	6885      	ldr	r5, [r0, #8]
 80045d6:	43e1      	mvns	r1, r4
 80045d8:	400d      	ands	r5, r1
 80045da:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80045dc:	6844      	ldr	r4, [r0, #4]
 80045de:	43db      	mvns	r3, r3
 80045e0:	401c      	ands	r4, r3
 80045e2:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045e4:	68c4      	ldr	r4, [r0, #12]
 80045e6:	4021      	ands	r1, r4
 80045e8:	60c1      	str	r1, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80045ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80045ec:	400b      	ands	r3, r1
 80045ee:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80045f0:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80045f2:	fa36 f302 	lsrs.w	r3, r6, r2
 80045f6:	d058      	beq.n	80046aa <HAL_GPIO_DeInit+0x12a>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80045f8:	fa09 f302 	lsl.w	r3, r9, r2
    if (iocurrent != 0x00u)
 80045fc:	ea13 0506 	ands.w	r5, r3, r6
 8004600:	d0f6      	beq.n	80045f0 <HAL_GPIO_DeInit+0x70>
 8004602:	f022 0103 	bic.w	r1, r2, #3
 8004606:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800460a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
      tmp = SYSCFG->EXTICR[position >> 2u];
 800460e:	688f      	ldr	r7, [r1, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004610:	f002 0403 	and.w	r4, r2, #3
 8004614:	00a4      	lsls	r4, r4, #2
 8004616:	fa0a fc04 	lsl.w	ip, sl, r4
 800461a:	ea0c 0707 	and.w	r7, ip, r7
 800461e:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004620:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004624:	d0bd      	beq.n	80045a2 <HAL_GPIO_DeInit+0x22>
 8004626:	4558      	cmp	r0, fp
 8004628:	d017      	beq.n	800465a <HAL_GPIO_DeInit+0xda>
 800462a:	4f22      	ldr	r7, [pc, #136]	; (80046b4 <HAL_GPIO_DeInit+0x134>)
 800462c:	42b8      	cmp	r0, r7
 800462e:	d016      	beq.n	800465e <HAL_GPIO_DeInit+0xde>
 8004630:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8004634:	42b8      	cmp	r0, r7
 8004636:	d015      	beq.n	8004664 <HAL_GPIO_DeInit+0xe4>
 8004638:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800463c:	42b8      	cmp	r0, r7
 800463e:	d014      	beq.n	800466a <HAL_GPIO_DeInit+0xea>
 8004640:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8004644:	42b8      	cmp	r0, r7
 8004646:	d013      	beq.n	8004670 <HAL_GPIO_DeInit+0xf0>
 8004648:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800464c:	42b8      	cmp	r0, r7
 800464e:	bf0c      	ite	eq
 8004650:	f04f 0e06 	moveq.w	lr, #6
 8004654:	f04f 0e07 	movne.w	lr, #7
 8004658:	e7a5      	b.n	80045a6 <HAL_GPIO_DeInit+0x26>
 800465a:	46ce      	mov	lr, r9
 800465c:	e7a3      	b.n	80045a6 <HAL_GPIO_DeInit+0x26>
 800465e:	f04f 0e02 	mov.w	lr, #2
 8004662:	e7a0      	b.n	80045a6 <HAL_GPIO_DeInit+0x26>
 8004664:	f04f 0e03 	mov.w	lr, #3
 8004668:	e79d      	b.n	80045a6 <HAL_GPIO_DeInit+0x26>
 800466a:	f04f 0e04 	mov.w	lr, #4
 800466e:	e79a      	b.n	80045a6 <HAL_GPIO_DeInit+0x26>
 8004670:	f04f 0e05 	mov.w	lr, #5
 8004674:	e797      	b.n	80045a6 <HAL_GPIO_DeInit+0x26>
        EXTI->IMR1 &= ~(iocurrent);
 8004676:	f8d8 4000 	ldr.w	r4, [r8]
 800467a:	43ed      	mvns	r5, r5
 800467c:	402c      	ands	r4, r5
 800467e:	f8c8 4000 	str.w	r4, [r8]
        EXTI->EMR1 &= ~(iocurrent);
 8004682:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8004686:	402c      	ands	r4, r5
 8004688:	f8c8 4004 	str.w	r4, [r8, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800468c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004690:	402c      	ands	r4, r5
 8004692:	f8c8 4008 	str.w	r4, [r8, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004696:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800469a:	4025      	ands	r5, r4
 800469c:	f8c8 500c 	str.w	r5, [r8, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80046a0:	688c      	ldr	r4, [r1, #8]
 80046a2:	ea24 040c 	bic.w	r4, r4, ip
 80046a6:	608c      	str	r4, [r1, #8]
 80046a8:	e782      	b.n	80045b0 <HAL_GPIO_DeInit+0x30>
  }
}
 80046aa:	b003      	add	sp, #12
 80046ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	48000800 	.word	0x48000800
 80046b8:	40010400 	.word	0x40010400
 80046bc:	48000400 	.word	0x48000400

080046c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c0:	b90a      	cbnz	r2, 80046c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046c2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80046c4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046c6:	6181      	str	r1, [r0, #24]
 80046c8:	4770      	bx	lr

080046ca <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80046ca:	6943      	ldr	r3, [r0, #20]
 80046cc:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ce:	bf14      	ite	ne
 80046d0:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046d2:	6181      	streq	r1, [r0, #24]
  }
}
 80046d4:	4770      	bx	lr
	...

080046d8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046d8:	4b02      	ldr	r3, [pc, #8]	; (80046e4 <HAL_PWREx_GetVoltageRange+0xc>)
 80046da:	6818      	ldr	r0, [r3, #0]
#endif
}
 80046dc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40007000 	.word	0x40007000

080046e8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80046ec:	d00f      	beq.n	800470e <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ee:	4b21      	ldr	r3, [pc, #132]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	d038      	beq.n	800476e <HAL_PWREx_ControlVoltageScaling+0x86>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046fc:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004708:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800470a:	2000      	movs	r0, #0
 800470c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800470e:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471a:	d026      	beq.n	800476a <HAL_PWREx_ControlVoltageScaling+0x82>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800471c:	4a15      	ldr	r2, [pc, #84]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800471e:	6813      	ldr	r3, [r2, #0]
 8004720:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004728:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0x90>)
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	2332      	movs	r3, #50	; 0x32
 8004730:	fb03 f301 	mul.w	r3, r3, r1
 8004734:	4911      	ldr	r1, [pc, #68]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x94>)
 8004736:	fba1 1303 	umull	r1, r3, r1, r3
 800473a:	0c9b      	lsrs	r3, r3, #18
 800473c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473e:	6952      	ldr	r2, [r2, #20]
 8004740:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004744:	d008      	beq.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x70>
 8004746:	b13b      	cbz	r3, 8004758 <HAL_PWREx_ControlVoltageScaling+0x70>
 8004748:	490a      	ldr	r1, [pc, #40]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x8c>)
        wait_loop_index--;
 800474a:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474c:	694a      	ldr	r2, [r1, #20]
 800474e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004752:	d001      	beq.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x70>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f8      	bne.n	800474a <HAL_PWREx_ControlVoltageScaling+0x62>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf14      	ite	ne
 8004764:	2003      	movne	r0, #3
 8004766:	2000      	moveq	r0, #0
 8004768:	4770      	bx	lr
 800476a:	2000      	movs	r0, #0
 800476c:	4770      	bx	lr
 800476e:	2000      	movs	r0, #0
}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40007000 	.word	0x40007000
 8004778:	20000000 	.word	0x20000000
 800477c:	431bde83 	.word	0x431bde83

08004780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004780:	b530      	push	{r4, r5, lr}
 8004782:	b083      	sub	sp, #12
 8004784:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800478e:	d00c      	beq.n	80047aa <RCC_SetFlashLatencyFromMSIRange+0x2a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004790:	f7ff ffa2 	bl	80046d8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004794:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004798:	d018      	beq.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0x4c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800479a:	2c80      	cmp	r4, #128	; 0x80
 800479c:	d81f      	bhi.n	80047de <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800479e:	d02d      	beq.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047a0:	2c70      	cmp	r4, #112	; 0x70
 80047a2:	bf14      	ite	ne
 80047a4:	2400      	movne	r4, #0
 80047a6:	2401      	moveq	r4, #1
 80047a8:	e01a      	b.n	80047e0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	4d15      	ldr	r5, [pc, #84]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80047ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80047ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b2:	65ab      	str	r3, [r5, #88]	; 0x58
 80047b4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80047be:	f7ff ff8b 	bl	80046d8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80047c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c8:	65ab      	str	r3, [r5, #88]	; 0x58
 80047ca:	e7e3      	b.n	8004794 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80047cc:	2c80      	cmp	r4, #128	; 0x80
 80047ce:	d904      	bls.n	80047da <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80047d0:	2ca0      	cmp	r4, #160	; 0xa0
 80047d2:	bf8c      	ite	hi
 80047d4:	2402      	movhi	r4, #2
 80047d6:	2401      	movls	r4, #1
 80047d8:	e002      	b.n	80047e0 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047da:	2400      	movs	r4, #0
 80047dc:	e000      	b.n	80047e0 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80047de:	2403      	movs	r4, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047e0:	4908      	ldr	r1, [pc, #32]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 80047e2:	680b      	ldr	r3, [r1, #0]
 80047e4:	f023 0307 	bic.w	r3, r3, #7
 80047e8:	4323      	orrs	r3, r4
 80047ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047ec:	6808      	ldr	r0, [r1, #0]
 80047ee:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80047f2:	1b00      	subs	r0, r0, r4
 80047f4:	bf18      	it	ne
 80047f6:	2001      	movne	r0, #1
 80047f8:	b003      	add	sp, #12
 80047fa:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80047fc:	2402      	movs	r4, #2
 80047fe:	e7ef      	b.n	80047e0 <RCC_SetFlashLatencyFromMSIRange+0x60>
 8004800:	40021000 	.word	0x40021000
 8004804:	40022000 	.word	0x40022000

08004808 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004808:	4a25      	ldr	r2, [pc, #148]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800480a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800480c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800480e:	f013 030c 	ands.w	r3, r3, #12
 8004812:	d00e      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x2a>
 8004814:	2b0c      	cmp	r3, #12
 8004816:	d006      	beq.n	8004826 <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004818:	2b04      	cmp	r3, #4
 800481a:	d03f      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0x94>
 800481c:	2b08      	cmp	r3, #8
 800481e:	4821      	ldr	r0, [pc, #132]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004820:	bf18      	it	ne
 8004822:	2000      	movne	r0, #0
 8004824:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004826:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800482a:	2a01      	cmp	r2, #1
 800482c:	d001      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800482e:	2000      	movs	r0, #0
 8004830:	e012      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004832:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800483a:	4a19      	ldr	r2, [pc, #100]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800483c:	bf07      	ittee	eq
 800483e:	f8d2 2094 	ldreq.w	r2, [r2, #148]	; 0x94
 8004842:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004846:	6812      	ldrne	r2, [r2, #0]
 8004848:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800484c:	4916      	ldr	r1, [pc, #88]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800484e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004852:	b323      	cbz	r3, 800489e <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004854:	2b0c      	cmp	r3, #12
 8004856:	d11f      	bne.n	8004898 <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004860:	2b02      	cmp	r3, #2
 8004862:	d017      	beq.n	8004894 <HAL_RCC_GetSysClockFreq+0x8c>
      pllvco = HSE_VALUE;
 8004864:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004866:	2b03      	cmp	r3, #3
 8004868:	bf08      	it	eq
 800486a:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800486e:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004870:	68d9      	ldr	r1, [r3, #12]
 8004872:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8004876:	fb00 f001 	mul.w	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800487a:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800487c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004880:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004882:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004886:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800488a:	3301      	adds	r3, #1
 800488c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 800488e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004892:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8004894:	4805      	ldr	r0, [pc, #20]	; (80048ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8004896:	e7e9      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x64>
 8004898:	2000      	movs	r0, #0
  return sysclockfreq;
 800489a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800489c:	4803      	ldr	r0, [pc, #12]	; (80048ac <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800489e:	4770      	bx	lr
 80048a0:	40021000 	.word	0x40021000
 80048a4:	007a1200 	.word	0x007a1200
 80048a8:	080091fc 	.word	0x080091fc
 80048ac:	00f42400 	.word	0x00f42400

080048b0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80048b0:	2800      	cmp	r0, #0
 80048b2:	f000 82db 	beq.w	8004e6c <HAL_RCC_OscConfig+0x5bc>
{
 80048b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048ba:	b083      	sub	sp, #12
 80048bc:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048be:	4bad      	ldr	r3, [pc, #692]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 80048c0:	689d      	ldr	r5, [r3, #8]
 80048c2:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c6:	68de      	ldr	r6, [r3, #12]
 80048c8:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048cc:	6803      	ldr	r3, [r0, #0]
 80048ce:	f013 0f10 	tst.w	r3, #16
 80048d2:	d062      	beq.n	800499a <HAL_RCC_OscConfig+0xea>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048d4:	b1ed      	cbz	r5, 8004912 <HAL_RCC_OscConfig+0x62>
 80048d6:	2d0c      	cmp	r5, #12
 80048d8:	d019      	beq.n	800490e <HAL_RCC_OscConfig+0x5e>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048da:	69a3      	ldr	r3, [r4, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80b6 	beq.w	8004a4e <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_MSI_ENABLE();
 80048e2:	4aa4      	ldr	r2, [pc, #656]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80048ec:	f7ff fb76 	bl	8003fdc <HAL_GetTick>
 80048f0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f2:	4fa0      	ldr	r7, [pc, #640]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f013 0f02 	tst.w	r3, #2
 80048fa:	f040 8095 	bne.w	8004a28 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048fe:	f7ff fb6d 	bl	8003fdc <HAL_GetTick>
 8004902:	eba0 0008 	sub.w	r0, r0, r8
 8004906:	2802      	cmp	r0, #2
 8004908:	d9f4      	bls.n	80048f4 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e2ba      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800490e:	2e01      	cmp	r6, #1
 8004910:	d1e3      	bne.n	80048da <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004912:	4b98      	ldr	r3, [pc, #608]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f013 0f02 	tst.w	r3, #2
 800491a:	d003      	beq.n	8004924 <HAL_RCC_OscConfig+0x74>
 800491c:	69a3      	ldr	r3, [r4, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 82a7 	beq.w	8004e72 <HAL_RCC_OscConfig+0x5c2>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004924:	6a20      	ldr	r0, [r4, #32]
 8004926:	4b93      	ldr	r3, [pc, #588]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f013 0f08 	tst.w	r3, #8
 800492e:	4b91      	ldr	r3, [pc, #580]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004930:	bf12      	itee	ne
 8004932:	681b      	ldrne	r3, [r3, #0]
 8004934:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8004938:	091b      	lsreq	r3, r3, #4
 800493a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800493e:	4298      	cmp	r0, r3
 8004940:	d959      	bls.n	80049f6 <HAL_RCC_OscConfig+0x146>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004942:	f7ff ff1d 	bl	8004780 <RCC_SetFlashLatencyFromMSIRange>
 8004946:	2800      	cmp	r0, #0
 8004948:	f040 8295 	bne.w	8004e76 <HAL_RCC_OscConfig+0x5c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800494c:	4b89      	ldr	r3, [pc, #548]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	f042 0208 	orr.w	r2, r2, #8
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800495c:	6a21      	ldr	r1, [r4, #32]
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	69e1      	ldr	r1, [r4, #28]
 8004966:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800496a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800496e:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004970:	f7ff ff4a 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 8004974:	4b7f      	ldr	r3, [pc, #508]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800497c:	4a7e      	ldr	r2, [pc, #504]	; (8004b78 <HAL_RCC_OscConfig+0x2c8>)
 800497e:	5cd3      	ldrb	r3, [r2, r3]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	40d8      	lsrs	r0, r3
 8004986:	4b7d      	ldr	r3, [pc, #500]	; (8004b7c <HAL_RCC_OscConfig+0x2cc>)
 8004988:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800498a:	4b7d      	ldr	r3, [pc, #500]	; (8004b80 <HAL_RCC_OscConfig+0x2d0>)
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	f7ff fadb 	bl	8003f48 <HAL_InitTick>
        if(status != HAL_OK)
 8004992:	4603      	mov	r3, r0
 8004994:	2800      	cmp	r0, #0
 8004996:	f040 8275 	bne.w	8004e84 <HAL_RCC_OscConfig+0x5d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	f013 0f01 	tst.w	r3, #1
 80049a0:	d075      	beq.n	8004a8e <HAL_RCC_OscConfig+0x1de>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049a2:	2d08      	cmp	r5, #8
 80049a4:	d06a      	beq.n	8004a7c <HAL_RCC_OscConfig+0x1cc>
 80049a6:	2d0c      	cmp	r5, #12
 80049a8:	d066      	beq.n	8004a78 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049aa:	6863      	ldr	r3, [r4, #4]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	f000 808c 	beq.w	8004acc <HAL_RCC_OscConfig+0x21c>
 80049b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b8:	f000 808e 	beq.w	8004ad8 <HAL_RCC_OscConfig+0x228>
 80049bc:	4b6d      	ldr	r3, [pc, #436]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049cc:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 808e 	beq.w	8004af2 <HAL_RCC_OscConfig+0x242>
        tickstart = HAL_GetTick();
 80049d6:	f7ff fb01 	bl	8003fdc <HAL_GetTick>
 80049da:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049dc:	4f65      	ldr	r7, [pc, #404]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80049e4:	d153      	bne.n	8004a8e <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e6:	f7ff faf9 	bl	8003fdc <HAL_GetTick>
 80049ea:	eba0 0008 	sub.w	r0, r0, r8
 80049ee:	2864      	cmp	r0, #100	; 0x64
 80049f0:	d9f5      	bls.n	80049de <HAL_RCC_OscConfig+0x12e>
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e246      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f6:	4b5f      	ldr	r3, [pc, #380]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	f042 0208 	orr.w	r2, r2, #8
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a06:	6a21      	ldr	r1, [r4, #32]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	69e1      	ldr	r1, [r4, #28]
 8004a10:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004a14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004a18:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a1a:	6a20      	ldr	r0, [r4, #32]
 8004a1c:	f7ff feb0 	bl	8004780 <RCC_SetFlashLatencyFromMSIRange>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d0a5      	beq.n	8004970 <HAL_RCC_OscConfig+0xc0>
            return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e22d      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a28:	4b52      	ldr	r3, [pc, #328]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	f042 0208 	orr.w	r2, r2, #8
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a38:	6a21      	ldr	r1, [r4, #32]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	69e1      	ldr	r1, [r4, #28]
 8004a42:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004a46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004a4a:	605a      	str	r2, [r3, #4]
 8004a4c:	e7a5      	b.n	800499a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8004a4e:	4a49      	ldr	r2, [pc, #292]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004a50:	6813      	ldr	r3, [r2, #0]
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a58:	f7ff fac0 	bl	8003fdc <HAL_GetTick>
 8004a5c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a5e:	4f45      	ldr	r7, [pc, #276]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	f013 0f02 	tst.w	r3, #2
 8004a66:	d098      	beq.n	800499a <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a68:	f7ff fab8 	bl	8003fdc <HAL_GetTick>
 8004a6c:	eba0 0008 	sub.w	r0, r0, r8
 8004a70:	2802      	cmp	r0, #2
 8004a72:	d9f5      	bls.n	8004a60 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e205      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a78:	2e03      	cmp	r6, #3
 8004a7a:	d196      	bne.n	80049aa <HAL_RCC_OscConfig+0xfa>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	4b3d      	ldr	r3, [pc, #244]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a84:	d003      	beq.n	8004a8e <HAL_RCC_OscConfig+0x1de>
 8004a86:	6863      	ldr	r3, [r4, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 81f6 	beq.w	8004e7a <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	f013 0f02 	tst.w	r3, #2
 8004a94:	d050      	beq.n	8004b38 <HAL_RCC_OscConfig+0x288>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a96:	2d04      	cmp	r5, #4
 8004a98:	d03d      	beq.n	8004b16 <HAL_RCC_OscConfig+0x266>
 8004a9a:	2d0c      	cmp	r5, #12
 8004a9c:	d039      	beq.n	8004b12 <HAL_RCC_OscConfig+0x262>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a9e:	68e3      	ldr	r3, [r4, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d078      	beq.n	8004b96 <HAL_RCC_OscConfig+0x2e6>
        __HAL_RCC_HSI_ENABLE();
 8004aa4:	4a33      	ldr	r2, [pc, #204]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004aae:	f7ff fa95 	bl	8003fdc <HAL_GetTick>
 8004ab2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab4:	4e2f      	ldr	r6, [pc, #188]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004ab6:	6833      	ldr	r3, [r6, #0]
 8004ab8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004abc:	d162      	bne.n	8004b84 <HAL_RCC_OscConfig+0x2d4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004abe:	f7ff fa8d 	bl	8003fdc <HAL_GetTick>
 8004ac2:	1bc0      	subs	r0, r0, r7
 8004ac4:	2802      	cmp	r0, #2
 8004ac6:	d9f6      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x206>
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e1db      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004acc:	4a29      	ldr	r2, [pc, #164]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004ace:	6813      	ldr	r3, [r2, #0]
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e77a      	b.n	80049ce <HAL_RCC_OscConfig+0x11e>
 8004ad8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004adc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e76d      	b.n	80049ce <HAL_RCC_OscConfig+0x11e>
        tickstart = HAL_GetTick();
 8004af2:	f7ff fa73 	bl	8003fdc <HAL_GetTick>
 8004af6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004af8:	4f1e      	ldr	r7, [pc, #120]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b00:	d0c5      	beq.n	8004a8e <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b02:	f7ff fa6b 	bl	8003fdc <HAL_GetTick>
 8004b06:	eba0 0008 	sub.w	r0, r0, r8
 8004b0a:	2864      	cmp	r0, #100	; 0x64
 8004b0c:	d9f5      	bls.n	8004afa <HAL_RCC_OscConfig+0x24a>
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e1b8      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b12:	2e02      	cmp	r6, #2
 8004b14:	d1c3      	bne.n	8004a9e <HAL_RCC_OscConfig+0x1ee>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b1e:	d003      	beq.n	8004b28 <HAL_RCC_OscConfig+0x278>
 8004b20:	68e3      	ldr	r3, [r4, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 81ab 	beq.w	8004e7e <HAL_RCC_OscConfig+0x5ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b28:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004b2a:	6853      	ldr	r3, [r2, #4]
 8004b2c:	6921      	ldr	r1, [r4, #16]
 8004b2e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004b32:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004b36:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f013 0f08 	tst.w	r3, #8
 8004b3e:	d055      	beq.n	8004bec <HAL_RCC_OscConfig+0x33c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b40:	6963      	ldr	r3, [r4, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d03b      	beq.n	8004bbe <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 8004b46:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004b48:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004b54:	f7ff fa42 	bl	8003fdc <HAL_GetTick>
 8004b58:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b5a:	4e06      	ldr	r6, [pc, #24]	; (8004b74 <HAL_RCC_OscConfig+0x2c4>)
 8004b5c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004b60:	f013 0f02 	tst.w	r3, #2
 8004b64:	d142      	bne.n	8004bec <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b66:	f7ff fa39 	bl	8003fdc <HAL_GetTick>
 8004b6a:	1bc0      	subs	r0, r0, r7
 8004b6c:	2802      	cmp	r0, #2
 8004b6e:	d9f5      	bls.n	8004b5c <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e187      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
 8004b74:	40021000 	.word	0x40021000
 8004b78:	080091e4 	.word	0x080091e4
 8004b7c:	20000000 	.word	0x20000000
 8004b80:	20000008 	.word	0x20000008
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4ab6      	ldr	r2, [pc, #728]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004b86:	6853      	ldr	r3, [r2, #4]
 8004b88:	6921      	ldr	r1, [r4, #16]
 8004b8a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004b8e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004b92:	6053      	str	r3, [r2, #4]
 8004b94:	e7d0      	b.n	8004b38 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_HSI_DISABLE();
 8004b96:	4ab2      	ldr	r2, [pc, #712]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004b98:	6813      	ldr	r3, [r2, #0]
 8004b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b9e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ba0:	f7ff fa1c 	bl	8003fdc <HAL_GetTick>
 8004ba4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba6:	4eae      	ldr	r6, [pc, #696]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004ba8:	6833      	ldr	r3, [r6, #0]
 8004baa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004bae:	d0c3      	beq.n	8004b38 <HAL_RCC_OscConfig+0x288>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb0:	f7ff fa14 	bl	8003fdc <HAL_GetTick>
 8004bb4:	1bc0      	subs	r0, r0, r7
 8004bb6:	2802      	cmp	r0, #2
 8004bb8:	d9f6      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x2f8>
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e162      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_LSI_DISABLE();
 8004bbe:	4aa8      	ldr	r2, [pc, #672]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004bc0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004bcc:	f7ff fa06 	bl	8003fdc <HAL_GetTick>
 8004bd0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bd2:	4ea3      	ldr	r6, [pc, #652]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004bd4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004bd8:	f013 0f02 	tst.w	r3, #2
 8004bdc:	d006      	beq.n	8004bec <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bde:	f7ff f9fd 	bl	8003fdc <HAL_GetTick>
 8004be2:	1bc0      	subs	r0, r0, r7
 8004be4:	2802      	cmp	r0, #2
 8004be6:	d9f5      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x324>
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e14b      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f013 0f04 	tst.w	r3, #4
 8004bf2:	d07d      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x440>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bf4:	4b9a      	ldr	r3, [pc, #616]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004bfc:	d10b      	bne.n	8004c16 <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	4b98      	ldr	r3, [pc, #608]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004c00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c06:	659a      	str	r2, [r3, #88]	; 0x58
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004c12:	2601      	movs	r6, #1
 8004c14:	e000      	b.n	8004c18 <HAL_RCC_OscConfig+0x368>
    FlagStatus       pwrclkchanged = RESET;
 8004c16:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c18:	4b92      	ldr	r3, [pc, #584]	; (8004e64 <HAL_RCC_OscConfig+0x5b4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c20:	d027      	beq.n	8004c72 <HAL_RCC_OscConfig+0x3c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c22:	68a3      	ldr	r3, [r4, #8]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d039      	beq.n	8004c9c <HAL_RCC_OscConfig+0x3ec>
 8004c28:	2b05      	cmp	r3, #5
 8004c2a:	d03f      	beq.n	8004cac <HAL_RCC_OscConfig+0x3fc>
 8004c2c:	4b8c      	ldr	r3, [pc, #560]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004c2e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004c3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004c3e:	f022 0204 	bic.w	r2, r2, #4
 8004c42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d03d      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8004c4c:	f7ff f9c6 	bl	8003fdc <HAL_GetTick>
 8004c50:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c52:	4f83      	ldr	r7, [pc, #524]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c54:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c5c:	f013 0f02 	tst.w	r3, #2
 8004c60:	d145      	bne.n	8004cee <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7ff f9bb 	bl	8003fdc <HAL_GetTick>
 8004c66:	eba0 0009 	sub.w	r0, r0, r9
 8004c6a:	4540      	cmp	r0, r8
 8004c6c:	d9f4      	bls.n	8004c58 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e108      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c72:	4a7c      	ldr	r2, [pc, #496]	; (8004e64 <HAL_RCC_OscConfig+0x5b4>)
 8004c74:	6813      	ldr	r3, [r2, #0]
 8004c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004c7c:	f7ff f9ae 	bl	8003fdc <HAL_GetTick>
 8004c80:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c82:	4f78      	ldr	r7, [pc, #480]	; (8004e64 <HAL_RCC_OscConfig+0x5b4>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c8a:	d1ca      	bne.n	8004c22 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8c:	f7ff f9a6 	bl	8003fdc <HAL_GetTick>
 8004c90:	eba0 0008 	sub.w	r0, r0, r8
 8004c94:	2802      	cmp	r0, #2
 8004c96:	d9f5      	bls.n	8004c84 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e0f3      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9c:	4a70      	ldr	r2, [pc, #448]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004c9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004caa:	e7cc      	b.n	8004c46 <HAL_RCC_OscConfig+0x396>
 8004cac:	4b6c      	ldr	r3, [pc, #432]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004cae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004cb2:	f042 0204 	orr.w	r2, r2, #4
 8004cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004cba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004cc6:	e7be      	b.n	8004c46 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8004cc8:	f7ff f988 	bl	8003fdc <HAL_GetTick>
 8004ccc:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cce:	4f64      	ldr	r7, [pc, #400]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cd8:	f013 0f02 	tst.w	r3, #2
 8004cdc:	d007      	beq.n	8004cee <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7ff f97d 	bl	8003fdc <HAL_GetTick>
 8004ce2:	eba0 0009 	sub.w	r0, r0, r9
 8004ce6:	4540      	cmp	r0, r8
 8004ce8:	d9f4      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x424>
          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e0ca      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
    if(pwrclkchanged == SET)
 8004cee:	bb5e      	cbnz	r6, 8004d48 <HAL_RCC_OscConfig+0x498>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80c5 	beq.w	8004e82 <HAL_RCC_OscConfig+0x5d2>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cf8:	2d0c      	cmp	r5, #12
 8004cfa:	d076      	beq.n	8004dea <HAL_RCC_OscConfig+0x53a>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d029      	beq.n	8004d54 <HAL_RCC_OscConfig+0x4a4>
        __HAL_RCC_PLL_DISABLE();
 8004d00:	4b57      	ldr	r3, [pc, #348]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004d08:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8004d10:	d104      	bne.n	8004d1c <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d12:	4a53      	ldr	r2, [pc, #332]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004d14:	68d3      	ldr	r3, [r2, #12]
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d1c:	4a50      	ldr	r2, [pc, #320]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004d1e:	68d3      	ldr	r3, [r2, #12]
 8004d20:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d28:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004d2a:	f7ff f957 	bl	8003fdc <HAL_GetTick>
 8004d2e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d30:	4c4b      	ldr	r4, [pc, #300]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004d38:	d055      	beq.n	8004de6 <HAL_RCC_OscConfig+0x536>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7ff f94f 	bl	8003fdc <HAL_GetTick>
 8004d3e:	1b40      	subs	r0, r0, r5
 8004d40:	2802      	cmp	r0, #2
 8004d42:	d9f6      	bls.n	8004d32 <HAL_RCC_OscConfig+0x482>
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e09d      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d48:	4a45      	ldr	r2, [pc, #276]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004d4a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6593      	str	r3, [r2, #88]	; 0x58
 8004d52:	e7cd      	b.n	8004cf0 <HAL_RCC_OscConfig+0x440>
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4a42      	ldr	r2, [pc, #264]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d5e:	f7ff f93d 	bl	8003fdc <HAL_GetTick>
 8004d62:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d64:	4d3e      	ldr	r5, [pc, #248]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004d6c:	d006      	beq.n	8004d7c <HAL_RCC_OscConfig+0x4cc>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7ff f935 	bl	8003fdc <HAL_GetTick>
 8004d72:	1b80      	subs	r0, r0, r6
 8004d74:	2802      	cmp	r0, #2
 8004d76:	d9f6      	bls.n	8004d66 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e083      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d7c:	4a38      	ldr	r2, [pc, #224]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004d7e:	68d1      	ldr	r1, [r2, #12]
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <HAL_RCC_OscConfig+0x5b8>)
 8004d82:	400b      	ands	r3, r1
 8004d84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004d86:	430b      	orrs	r3, r1
 8004d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d90:	3901      	subs	r1, #1
 8004d92:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004d96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d98:	0909      	lsrs	r1, r1, #4
 8004d9a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004d9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004da0:	0849      	lsrs	r1, r1, #1
 8004da2:	3901      	subs	r1, #1
 8004da4:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004da8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004daa:	0849      	lsrs	r1, r1, #1
 8004dac:	3901      	subs	r1, #1
 8004dae:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8004db2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004db4:	6813      	ldr	r3, [r2, #0]
 8004db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dba:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dbc:	68d3      	ldr	r3, [r2, #12]
 8004dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004dc4:	f7ff f90a 	bl	8003fdc <HAL_GetTick>
 8004dc8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dca:	4c25      	ldr	r4, [pc, #148]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x532>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7ff f902 	bl	8003fdc <HAL_GetTick>
 8004dd8:	1b40      	subs	r0, r0, r5
 8004dda:	2802      	cmp	r0, #2
 8004ddc:	d9f6      	bls.n	8004dcc <HAL_RCC_OscConfig+0x51c>
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e050      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e04e      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
 8004de6:	2300      	movs	r3, #0
 8004de8:	e04c      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d04e      	beq.n	8004e8c <HAL_RCC_OscConfig+0x5dc>
        pll_config = RCC->PLLCFGR;
 8004dee:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <HAL_RCC_OscConfig+0x5b0>)
 8004df0:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	f003 0103 	and.w	r1, r3, #3
 8004df6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004df8:	4291      	cmp	r1, r2
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_OscConfig+0x550>
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e041      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e06:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e08:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004e0c:	d001      	beq.n	8004e12 <HAL_RCC_OscConfig+0x562>
          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e038      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e18:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCC_OscConfig+0x572>
          return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e030      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e22:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8004e26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e28:	3a07      	subs	r2, #7
 8004e2a:	bf18      	it	ne
 8004e2c:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e2e:	4291      	cmp	r1, r2
 8004e30:	d001      	beq.n	8004e36 <HAL_RCC_OscConfig+0x586>
          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e026      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e36:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004e3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e3c:	0852      	lsrs	r2, r2, #1
 8004e3e:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e40:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004e44:	d001      	beq.n	8004e4a <HAL_RCC_OscConfig+0x59a>
          return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e01c      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e4c:	0852      	lsrs	r2, r2, #1
 8004e4e:	3a01      	subs	r2, #1
 8004e50:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e54:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8004e58:	bf14      	ite	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	2300      	moveq	r3, #0
 8004e5e:	e011      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40007000 	.word	0x40007000
 8004e68:	f99d808c 	.word	0xf99d808c
 8004e6c:	2301      	movs	r3, #1
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	4770      	bx	lr
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e006      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
            return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e004      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e002      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	b003      	add	sp, #12
 8004e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e7f9      	b.n	8004e84 <HAL_RCC_OscConfig+0x5d4>

08004e90 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004e90:	2800      	cmp	r0, #0
 8004e92:	f000 809e 	beq.w	8004fd2 <HAL_RCC_ClockConfig+0x142>
{
 8004e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b4f      	ldr	r3, [pc, #316]	; (8004fdc <HAL_RCC_ClockConfig+0x14c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	d20d      	bcs.n	8004ec4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea8:	4a4c      	ldr	r2, [pc, #304]	; (8004fdc <HAL_RCC_ClockConfig+0x14c>)
 8004eaa:	6813      	ldr	r3, [r2, #0]
 8004eac:	f023 0307 	bic.w	r3, r3, #7
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	428b      	cmp	r3, r1
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
 8004ebe:	2001      	movs	r0, #1
}
 8004ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec4:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f013 0f01 	tst.w	r3, #1
 8004ecc:	d03a      	beq.n	8004f44 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ece:	6863      	ldr	r3, [r4, #4]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d009      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x58>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d027      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x98>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ed8:	bb6b      	cbnz	r3, 8004f36 <HAL_RCC_ClockConfig+0xa6>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eda:	4a41      	ldr	r2, [pc, #260]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	f012 0f02 	tst.w	r2, #2
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	e7eb      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x30>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee8:	4a3d      	ldr	r2, [pc, #244]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004ef0:	d071      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ef2:	493b      	ldr	r1, [pc, #236]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
 8004ef4:	688a      	ldr	r2, [r1, #8]
 8004ef6:	f022 0203 	bic.w	r2, r2, #3
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004efe:	f7ff f86d 	bl	8003fdc <HAL_GetTick>
 8004f02:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f04:	4e36      	ldr	r6, [pc, #216]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f06:	f241 3788 	movw	r7, #5000	; 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0a:	68b3      	ldr	r3, [r6, #8]
 8004f0c:	f003 030c 	and.w	r3, r3, #12
 8004f10:	6862      	ldr	r2, [r4, #4]
 8004f12:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004f16:	d015      	beq.n	8004f44 <HAL_RCC_ClockConfig+0xb4>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f18:	f7ff f860 	bl	8003fdc <HAL_GetTick>
 8004f1c:	eba0 0008 	sub.w	r0, r0, r8
 8004f20:	42b8      	cmp	r0, r7
 8004f22:	d9f2      	bls.n	8004f0a <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 8004f24:	2003      	movs	r0, #3
 8004f26:	e7cb      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f28:	4a2d      	ldr	r2, [pc, #180]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004f30:	d1df      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 8004f32:	2001      	movs	r0, #1
 8004f34:	e7c4      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f36:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004f3e:	d1d8      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 8004f40:	2001      	movs	r0, #1
 8004f42:	e7bd      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	f013 0f02 	tst.w	r3, #2
 8004f4a:	d006      	beq.n	8004f5a <HAL_RCC_ClockConfig+0xca>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4a24      	ldr	r2, [pc, #144]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
 8004f4e:	6893      	ldr	r3, [r2, #8]
 8004f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f54:	68a1      	ldr	r1, [r4, #8]
 8004f56:	430b      	orrs	r3, r1
 8004f58:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f5a:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <HAL_RCC_ClockConfig+0x14c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	42ab      	cmp	r3, r5
 8004f64:	d90c      	bls.n	8004f80 <HAL_RCC_ClockConfig+0xf0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_RCC_ClockConfig+0x14c>)
 8004f68:	6813      	ldr	r3, [r2, #0]
 8004f6a:	f023 0307 	bic.w	r3, r3, #7
 8004f6e:	432b      	orrs	r3, r5
 8004f70:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	6813      	ldr	r3, [r2, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	42ab      	cmp	r3, r5
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCC_ClockConfig+0xf0>
      return HAL_ERROR;
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	e79f      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f013 0f04 	tst.w	r3, #4
 8004f86:	d006      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f88:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
 8004f8a:	6893      	ldr	r3, [r2, #8]
 8004f8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f90:	68e1      	ldr	r1, [r4, #12]
 8004f92:	430b      	orrs	r3, r1
 8004f94:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f013 0f08 	tst.w	r3, #8
 8004f9c:	d007      	beq.n	8004fae <HAL_RCC_ClockConfig+0x11e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f9e:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
 8004fa0:	6893      	ldr	r3, [r2, #8]
 8004fa2:	6921      	ldr	r1, [r4, #16]
 8004fa4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004fa8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004fac:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fae:	f7ff fc2b 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCC_ClockConfig+0x150>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004fba:	4a0a      	ldr	r2, [pc, #40]	; (8004fe4 <HAL_RCC_ClockConfig+0x154>)
 8004fbc:	5cd3      	ldrb	r3, [r2, r3]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	40d8      	lsrs	r0, r3
 8004fc4:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <HAL_RCC_ClockConfig+0x158>)
 8004fc6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <HAL_RCC_ClockConfig+0x15c>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	f7fe ffbc 	bl	8003f48 <HAL_InitTick>
  return status;
 8004fd0:	e776      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8004fd2:	2001      	movs	r0, #1
}
 8004fd4:	4770      	bx	lr
        return HAL_ERROR;
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	e772      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x30>
 8004fda:	bf00      	nop
 8004fdc:	40022000 	.word	0x40022000
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	080091e4 	.word	0x080091e4
 8004fe8:	20000000 	.word	0x20000000
 8004fec:	20000008 	.word	0x20000008

08004ff0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004ff8:	4a04      	ldr	r2, [pc, #16]	; (800500c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	4a03      	ldr	r2, [pc, #12]	; (8005010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005002:	6810      	ldr	r0, [r2, #0]
}
 8005004:	40d8      	lsrs	r0, r3
 8005006:	4770      	bx	lr
 8005008:	40021000 	.word	0x40021000
 800500c:	080091f4 	.word	0x080091f4
 8005010:	20000000 	.word	0x20000000

08005014 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800501c:	4a04      	ldr	r2, [pc, #16]	; (8005030 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800501e:	5cd3      	ldrb	r3, [r2, r3]
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	4a03      	ldr	r2, [pc, #12]	; (8005034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005026:	6810      	ldr	r0, [r2, #0]
}
 8005028:	40d8      	lsrs	r0, r3
 800502a:	4770      	bx	lr
 800502c:	40021000 	.word	0x40021000
 8005030:	080091f4 	.word	0x080091f4
 8005034:	20000000 	.word	0x20000000

08005038 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800503a:	4b56      	ldr	r3, [pc, #344]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f013 0f03 	tst.w	r3, #3
 8005042:	d014      	beq.n	800506e <RCCEx_PLLSAI1_Config+0x36>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005044:	4b53      	ldr	r3, [pc, #332]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	6802      	ldr	r2, [r0, #0]
 800504e:	4293      	cmp	r3, r2
 8005050:	d001      	beq.n	8005056 <RCCEx_PLLSAI1_Config+0x1e>
 8005052:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8005054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8005056:	2b00      	cmp	r3, #0
 8005058:	d07c      	beq.n	8005154 <RCCEx_PLLSAI1_Config+0x11c>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800505a:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005062:	3301      	adds	r3, #1
       ||
 8005064:	6842      	ldr	r2, [r0, #4]
 8005066:	4293      	cmp	r3, r2
 8005068:	d019      	beq.n	800509e <RCCEx_PLLSAI1_Config+0x66>
 800506a:	2001      	movs	r0, #1
 800506c:	e7f2      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 800506e:	6803      	ldr	r3, [r0, #0]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d02a      	beq.n	80050ca <RCCEx_PLLSAI1_Config+0x92>
 8005074:	2b03      	cmp	r3, #3
 8005076:	d02f      	beq.n	80050d8 <RCCEx_PLLSAI1_Config+0xa0>
 8005078:	2b01      	cmp	r3, #1
 800507a:	d001      	beq.n	8005080 <RCCEx_PLLSAI1_Config+0x48>
 800507c:	2001      	movs	r0, #1
 800507e:	e7e9      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005080:	4a44      	ldr	r2, [pc, #272]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	f012 0f02 	tst.w	r2, #2
 8005088:	d066      	beq.n	8005158 <RCCEx_PLLSAI1_Config+0x120>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800508a:	4d42      	ldr	r5, [pc, #264]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 800508c:	68ea      	ldr	r2, [r5, #12]
 800508e:	6844      	ldr	r4, [r0, #4]
 8005090:	3c01      	subs	r4, #1
 8005092:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005096:	4313      	orrs	r3, r2
 8005098:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800509c:	60eb      	str	r3, [r5, #12]
 800509e:	460f      	mov	r7, r1
 80050a0:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80050a2:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 80050a4:	6813      	ldr	r3, [r2, #0]
 80050a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050aa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80050ac:	f7fe ff96 	bl	8003fdc <HAL_GetTick>
 80050b0:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050b2:	4d38      	ldr	r5, [pc, #224]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80050ba:	d04f      	beq.n	800515c <RCCEx_PLLSAI1_Config+0x124>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050bc:	f7fe ff8e 	bl	8003fdc <HAL_GetTick>
 80050c0:	1b80      	subs	r0, r0, r6
 80050c2:	2802      	cmp	r0, #2
 80050c4:	d9f6      	bls.n	80050b4 <RCCEx_PLLSAI1_Config+0x7c>
        status = HAL_TIMEOUT;
 80050c6:	2003      	movs	r0, #3
 80050c8:	e7c4      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050ca:	4a32      	ldr	r2, [pc, #200]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80050d2:	d1da      	bne.n	800508a <RCCEx_PLLSAI1_Config+0x52>
 80050d4:	2001      	movs	r0, #1
 80050d6:	e7bd      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050d8:	4a2e      	ldr	r2, [pc, #184]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80050e0:	d1d3      	bne.n	800508a <RCCEx_PLLSAI1_Config+0x52>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050e2:	4a2c      	ldr	r2, [pc, #176]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80050ea:	d1ce      	bne.n	800508a <RCCEx_PLLSAI1_Config+0x52>
 80050ec:	2001      	movs	r0, #1
 80050ee:	e7b1      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050f0:	4928      	ldr	r1, [pc, #160]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 80050f2:	690b      	ldr	r3, [r1, #16]
 80050f4:	68a2      	ldr	r2, [r4, #8]
 80050f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005102:	68e2      	ldr	r2, [r4, #12]
 8005104:	0912      	lsrs	r2, r2, #4
 8005106:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800510a:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800510c:	4a21      	ldr	r2, [pc, #132]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 800510e:	6813      	ldr	r3, [r2, #0]
 8005110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005114:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005116:	f7fe ff61 	bl	8003fdc <HAL_GetTick>
 800511a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800511c:	4d1d      	ldr	r5, [pc, #116]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 800511e:	682b      	ldr	r3, [r5, #0]
 8005120:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005124:	d12e      	bne.n	8005184 <RCCEx_PLLSAI1_Config+0x14c>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005126:	f7fe ff59 	bl	8003fdc <HAL_GetTick>
 800512a:	1b80      	subs	r0, r0, r6
 800512c:	2802      	cmp	r0, #2
 800512e:	d9f6      	bls.n	800511e <RCCEx_PLLSAI1_Config+0xe6>
          status = HAL_TIMEOUT;
 8005130:	2003      	movs	r0, #3
 8005132:	e78f      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005134:	4917      	ldr	r1, [pc, #92]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	6922      	ldr	r2, [r4, #16]
 800513a:	0852      	lsrs	r2, r2, #1
 800513c:	3a01      	subs	r2, #1
 800513e:	68a0      	ldr	r0, [r4, #8]
 8005140:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005144:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005148:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800514c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8005150:	610b      	str	r3, [r1, #16]
 8005152:	e7db      	b.n	800510c <RCCEx_PLLSAI1_Config+0xd4>
 8005154:	2001      	movs	r0, #1
 8005156:	e77d      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x1c>
 8005158:	2001      	movs	r0, #1
 800515a:	e77b      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 800515c:	2f00      	cmp	r7, #0
 800515e:	d0c7      	beq.n	80050f0 <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 8005160:	2f01      	cmp	r7, #1
 8005162:	d0e7      	beq.n	8005134 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005164:	490b      	ldr	r1, [pc, #44]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 8005166:	690b      	ldr	r3, [r1, #16]
 8005168:	6962      	ldr	r2, [r4, #20]
 800516a:	0852      	lsrs	r2, r2, #1
 800516c:	3a01      	subs	r2, #1
 800516e:	68a0      	ldr	r0, [r4, #8]
 8005170:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005174:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005178:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800517c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005180:	610b      	str	r3, [r1, #16]
 8005182:	e7c3      	b.n	800510c <RCCEx_PLLSAI1_Config+0xd4>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005184:	4a03      	ldr	r2, [pc, #12]	; (8005194 <RCCEx_PLLSAI1_Config+0x15c>)
 8005186:	6913      	ldr	r3, [r2, #16]
 8005188:	69a1      	ldr	r1, [r4, #24]
 800518a:	430b      	orrs	r3, r1
 800518c:	6113      	str	r3, [r2, #16]
 800518e:	2000      	movs	r0, #0
  return status;
 8005190:	e760      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x1c>
 8005192:	bf00      	nop
 8005194:	40021000 	.word	0x40021000

08005198 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800519a:	4b4d      	ldr	r3, [pc, #308]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f013 0f03 	tst.w	r3, #3
 80051a2:	d014      	beq.n	80051ce <RCCEx_PLLSAI2_Config+0x36>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051a4:	4b4a      	ldr	r3, [pc, #296]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	6802      	ldr	r2, [r0, #0]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d001      	beq.n	80051b6 <RCCEx_PLLSAI2_Config+0x1e>
 80051b2:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80051b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d06c      	beq.n	8005294 <RCCEx_PLLSAI2_Config+0xfc>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051ba:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80051c2:	3301      	adds	r3, #1
       ||
 80051c4:	6842      	ldr	r2, [r0, #4]
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d019      	beq.n	80051fe <RCCEx_PLLSAI2_Config+0x66>
 80051ca:	2001      	movs	r0, #1
 80051cc:	e7f2      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x1c>
    switch(PllSai2->PLLSAI2Source)
 80051ce:	6803      	ldr	r3, [r0, #0]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d02a      	beq.n	800522a <RCCEx_PLLSAI2_Config+0x92>
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d02f      	beq.n	8005238 <RCCEx_PLLSAI2_Config+0xa0>
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d001      	beq.n	80051e0 <RCCEx_PLLSAI2_Config+0x48>
 80051dc:	2001      	movs	r0, #1
 80051de:	e7e9      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051e0:	4a3b      	ldr	r2, [pc, #236]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	f012 0f02 	tst.w	r2, #2
 80051e8:	d056      	beq.n	8005298 <RCCEx_PLLSAI2_Config+0x100>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ea:	4d39      	ldr	r5, [pc, #228]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 80051ec:	68ea      	ldr	r2, [r5, #12]
 80051ee:	6844      	ldr	r4, [r0, #4]
 80051f0:	3c01      	subs	r4, #1
 80051f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80051f6:	4313      	orrs	r3, r2
 80051f8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80051fc:	60eb      	str	r3, [r5, #12]
 80051fe:	460f      	mov	r7, r1
 8005200:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI2_DISABLE();
 8005202:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 8005204:	6813      	ldr	r3, [r2, #0]
 8005206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800520c:	f7fe fee6 	bl	8003fdc <HAL_GetTick>
 8005210:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005212:	4d2f      	ldr	r5, [pc, #188]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800521a:	d03f      	beq.n	800529c <RCCEx_PLLSAI2_Config+0x104>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800521c:	f7fe fede 	bl	8003fdc <HAL_GetTick>
 8005220:	1b80      	subs	r0, r0, r6
 8005222:	2802      	cmp	r0, #2
 8005224:	d9f6      	bls.n	8005214 <RCCEx_PLLSAI2_Config+0x7c>
        status = HAL_TIMEOUT;
 8005226:	2003      	movs	r0, #3
 8005228:	e7c4      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800522a:	4a29      	ldr	r2, [pc, #164]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005232:	d1da      	bne.n	80051ea <RCCEx_PLLSAI2_Config+0x52>
 8005234:	2001      	movs	r0, #1
 8005236:	e7bd      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005238:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005240:	d1d3      	bne.n	80051ea <RCCEx_PLLSAI2_Config+0x52>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005242:	4a23      	ldr	r2, [pc, #140]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800524a:	d1ce      	bne.n	80051ea <RCCEx_PLLSAI2_Config+0x52>
 800524c:	2001      	movs	r0, #1
 800524e:	e7b1      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005250:	491f      	ldr	r1, [pc, #124]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 8005252:	694b      	ldr	r3, [r1, #20]
 8005254:	68a2      	ldr	r2, [r4, #8]
 8005256:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005262:	68e2      	ldr	r2, [r4, #12]
 8005264:	0912      	lsrs	r2, r2, #4
 8005266:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800526a:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800526c:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 800526e:	6813      	ldr	r3, [r2, #0]
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005274:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005276:	f7fe feb1 	bl	8003fdc <HAL_GetTick>
 800527a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800527c:	4d14      	ldr	r5, [pc, #80]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 800527e:	682b      	ldr	r3, [r5, #0]
 8005280:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005284:	d11c      	bne.n	80052c0 <RCCEx_PLLSAI2_Config+0x128>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005286:	f7fe fea9 	bl	8003fdc <HAL_GetTick>
 800528a:	1b80      	subs	r0, r0, r6
 800528c:	2802      	cmp	r0, #2
 800528e:	d9f6      	bls.n	800527e <RCCEx_PLLSAI2_Config+0xe6>
          status = HAL_TIMEOUT;
 8005290:	2003      	movs	r0, #3
 8005292:	e78f      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x1c>
 8005294:	2001      	movs	r0, #1
 8005296:	e78d      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x1c>
 8005298:	2001      	movs	r0, #1
 800529a:	e78b      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 800529c:	2f00      	cmp	r7, #0
 800529e:	d0d7      	beq.n	8005250 <RCCEx_PLLSAI2_Config+0xb8>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052a0:	480b      	ldr	r0, [pc, #44]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 80052a2:	6942      	ldr	r2, [r0, #20]
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	1e59      	subs	r1, r3, #1
 80052aa:	68a5      	ldr	r5, [r4, #8]
 80052ac:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 80052b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052b4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80052b8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80052bc:	6143      	str	r3, [r0, #20]
 80052be:	e7d5      	b.n	800526c <RCCEx_PLLSAI2_Config+0xd4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052c0:	4a03      	ldr	r2, [pc, #12]	; (80052d0 <RCCEx_PLLSAI2_Config+0x138>)
 80052c2:	6953      	ldr	r3, [r2, #20]
 80052c4:	6961      	ldr	r1, [r4, #20]
 80052c6:	430b      	orrs	r3, r1
 80052c8:	6153      	str	r3, [r2, #20]
 80052ca:	2000      	movs	r0, #0
  return status;
 80052cc:	e772      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x1c>
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000

080052d4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80052d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052d8:	b083      	sub	sp, #12
 80052da:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052dc:	6803      	ldr	r3, [r0, #0]
 80052de:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80052e2:	d029      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->Sai1ClockSelection)
 80052e4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80052e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ea:	d01f      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x58>
 80052ec:	d910      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80052ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052f2:	d015      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80052f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052f8:	d131      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052fa:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 80052fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005300:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005304:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005306:	430b      	orrs	r3, r1
 8005308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800530c:	2500      	movs	r5, #0
 800530e:	e014      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005310:	bb2b      	cbnz	r3, 800535e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005312:	2100      	movs	r1, #0
 8005314:	3004      	adds	r0, #4
 8005316:	f7ff fe8f 	bl	8005038 <RCCEx_PLLSAI1_Config>
 800531a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800531c:	b96d      	cbnz	r5, 800533a <HAL_RCCEx_PeriphCLKConfig+0x66>
 800531e:	e7ec      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x26>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005320:	4a22      	ldr	r2, [pc, #136]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8005322:	68d3      	ldr	r3, [r2, #12]
 8005324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005328:	60d3      	str	r3, [r2, #12]
 800532a:	e7e6      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800532c:	2100      	movs	r1, #0
 800532e:	3020      	adds	r0, #32
 8005330:	f7ff ff32 	bl	8005198 <RCCEx_PLLSAI2_Config>
 8005334:	4605      	mov	r5, r0
      break;
 8005336:	e7f1      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x48>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005338:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005340:	d036      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005342:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005348:	d028      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800534a:	d90a      	bls.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800534c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005350:	d010      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005352:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005356:	f040 8160 	bne.w	800561a <HAL_RCCEx_PeriphCLKConfig+0x346>
 800535a:	46a8      	mov	r8, r5
 800535c:	e010      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xac>
      ret = HAL_ERROR;
 800535e:	2501      	movs	r5, #1
 8005360:	e7eb      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 8159 	bne.w	800561a <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005368:	2100      	movs	r1, #0
 800536a:	1d20      	adds	r0, r4, #4
 800536c:	f7ff fe64 	bl	8005038 <RCCEx_PLLSAI1_Config>
 8005370:	4680      	mov	r8, r0
      break;
 8005372:	e005      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005374:	4a0d      	ldr	r2, [pc, #52]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8005376:	68d3      	ldr	r3, [r2, #12]
 8005378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537c:	60d3      	str	r3, [r2, #12]
      break;
 800537e:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 8005380:	f1b8 0f00 	cmp.w	r8, #0
 8005384:	f040 814c 	bne.w	8005620 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005388:	4a08      	ldr	r2, [pc, #32]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800538a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800538e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005392:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005394:	430b      	orrs	r3, r1
 8005396:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800539a:	e00a      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800539c:	2100      	movs	r1, #0
 800539e:	f104 0020 	add.w	r0, r4, #32
 80053a2:	f7ff fef9 	bl	8005198 <RCCEx_PLLSAI2_Config>
 80053a6:	4680      	mov	r8, r0
      break;
 80053a8:	e7ea      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000
 80053b0:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80053b8:	d029      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053ba:	4bc3      	ldr	r3, [pc, #780]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80053c2:	f040 812f 	bne.w	8005624 <HAL_RCCEx_PeriphCLKConfig+0x350>
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c6:	4bc0      	ldr	r3, [pc, #768]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80053c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053ce:	659a      	str	r2, [r3, #88]	; 0x58
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80053da:	f04f 0901 	mov.w	r9, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053de:	4abb      	ldr	r2, [pc, #748]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80053e0:	6813      	ldr	r3, [r2, #0]
 80053e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80053e8:	f7fe fdf8 	bl	8003fdc <HAL_GetTick>
 80053ec:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053ee:	4eb7      	ldr	r6, [pc, #732]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80053f0:	6833      	ldr	r3, [r6, #0]
 80053f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80053f6:	f040 8118 	bne.w	800562a <HAL_RCCEx_PeriphCLKConfig+0x356>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fa:	f7fe fdef 	bl	8003fdc <HAL_GetTick>
 80053fe:	1bc0      	subs	r0, r0, r7
 8005400:	2802      	cmp	r0, #2
 8005402:	d9f5      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        ret = HAL_TIMEOUT;
 8005404:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8005406:	f1b9 0f00 	cmp.w	r9, #0
 800540a:	f040 8151 	bne.w	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f013 0f01 	tst.w	r3, #1
 8005414:	d008      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005416:	4aac      	ldr	r2, [pc, #688]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005418:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800541c:	f023 0303 	bic.w	r3, r3, #3
 8005420:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005422:	430b      	orrs	r3, r1
 8005424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	f013 0f02 	tst.w	r3, #2
 800542e:	d008      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005430:	4aa5      	ldr	r2, [pc, #660]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005432:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005436:	f023 030c 	bic.w	r3, r3, #12
 800543a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800543c:	430b      	orrs	r3, r1
 800543e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f013 0f04 	tst.w	r3, #4
 8005448:	d008      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x188>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800544a:	4a9f      	ldr	r2, [pc, #636]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800544c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005450:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005454:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005456:	430b      	orrs	r3, r1
 8005458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f013 0f08 	tst.w	r3, #8
 8005462:	d008      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005464:	4a98      	ldr	r2, [pc, #608]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005466:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800546a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800546e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005470:	430b      	orrs	r3, r1
 8005472:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f013 0f10 	tst.w	r3, #16
 800547c:	d008      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800547e:	4a92      	ldr	r2, [pc, #584]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005480:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800548a:	430b      	orrs	r3, r1
 800548c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	f013 0f20 	tst.w	r3, #32
 8005496:	d008      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005498:	4a8b      	ldr	r2, [pc, #556]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800549a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800549e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80054a4:	430b      	orrs	r3, r1
 80054a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	f413 7f00 	tst.w	r3, #512	; 0x200
 80054b0:	d008      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054b2:	4a85      	ldr	r2, [pc, #532]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80054b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054b8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80054bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80054be:	430b      	orrs	r3, r1
 80054c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80054ca:	d008      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054cc:	4a7e      	ldr	r2, [pc, #504]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80054ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80054d6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80054d8:	430b      	orrs	r3, r1
 80054da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054e4:	d008      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054e6:	4a78      	ldr	r2, [pc, #480]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80054e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054f0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80054f2:	430b      	orrs	r3, r1
 80054f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054fe:	d008      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005500:	4a71      	ldr	r2, [pc, #452]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005502:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005506:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800550a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800550c:	430b      	orrs	r3, r1
 800550e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005518:	d008      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800551a:	4a6b      	ldr	r2, [pc, #428]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800551c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005520:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005524:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005526:	430b      	orrs	r3, r1
 8005528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005532:	d011      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005534:	4a64      	ldr	r2, [pc, #400]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005536:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800553a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800553e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005540:	430b      	orrs	r3, r1
 8005542:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005546:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800554c:	f000 80b6 	beq.w	80056bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005554:	f000 80bc 	beq.w	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800555e:	d011      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005560:	4a59      	ldr	r2, [pc, #356]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005562:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005566:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800556a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800556c:	430b      	orrs	r3, r1
 800556e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005572:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005578:	f000 80b2 	beq.w	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800557c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005580:	f000 80b3 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800558a:	d011      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800558c:	4a4e      	ldr	r2, [pc, #312]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800558e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005592:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005596:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005598:	430b      	orrs	r3, r1
 800559a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800559e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80055a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a4:	f000 80a9 	beq.w	80056fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ac:	f000 80aa 	beq.w	8005704 <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80055b6:	d011      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055b8:	4a43      	ldr	r2, [pc, #268]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055be:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80055c2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80055c4:	430b      	orrs	r3, r1
 80055c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80055cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d0:	f000 80a0 	beq.w	8005714 <HAL_RCCEx_PeriphCLKConfig+0x440>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d8:	f000 80a4 	beq.w	8005724 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80055e2:	d008      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x322>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055e4:	4a38      	ldr	r2, [pc, #224]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055ee:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80055f0:	430b      	orrs	r3, r1
 80055f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80055fc:	d009      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055fe:	4a32      	ldr	r2, [pc, #200]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005600:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005608:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800560c:	430b      	orrs	r3, r1
 800560e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8005612:	4628      	mov	r0, r5
 8005614:	b003      	add	sp, #12
 8005616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = HAL_ERROR;
 800561a:	2501      	movs	r5, #1
 800561c:	46a8      	mov	r8, r5
 800561e:	e6c8      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005620:	4645      	mov	r5, r8
 8005622:	e6c6      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
    FlagStatus       pwrclkchanged = RESET;
 8005624:	f04f 0900 	mov.w	r9, #0
 8005628:	e6d9      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x10a>
    if(ret == HAL_OK)
 800562a:	f1b8 0f00 	cmp.w	r8, #0
 800562e:	d13d      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005630:	4b25      	ldr	r3, [pc, #148]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005636:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800563a:	d02c      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800563c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005640:	429a      	cmp	r2, r3
 8005642:	d012      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x396>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005644:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005646:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800564a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800564e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005652:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005656:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800565a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800565e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005662:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800566a:	f013 0f01 	tst.w	r3, #1
 800566e:	d012      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        tickstart = HAL_GetTick();
 8005670:	f7fe fcb4 	bl	8003fdc <HAL_GetTick>
 8005674:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005676:	4e14      	ldr	r6, [pc, #80]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005678:	f241 3788 	movw	r7, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800567c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005680:	f013 0f02 	tst.w	r3, #2
 8005684:	d107      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005686:	f7fe fca9 	bl	8003fdc <HAL_GetTick>
 800568a:	eba0 0008 	sub.w	r0, r0, r8
 800568e:	42b8      	cmp	r0, r7
 8005690:	d9f4      	bls.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
            ret = HAL_TIMEOUT;
 8005692:	2503      	movs	r5, #3
 8005694:	e6b7      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x132>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005696:	4a0c      	ldr	r2, [pc, #48]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005698:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800569c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80056a4:	430b      	orrs	r3, r1
 80056a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056aa:	e6ac      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80056ac:	4645      	mov	r5, r8
 80056ae:	e6aa      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b0:	4a05      	ldr	r2, [pc, #20]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80056b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b8:	6593      	str	r3, [r2, #88]	; 0x58
 80056ba:	e6a8      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056bc:	68d3      	ldr	r3, [r2, #12]
 80056be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056c2:	60d3      	str	r3, [r2, #12]
 80056c4:	e748      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40007000 	.word	0x40007000
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056d0:	2101      	movs	r1, #1
 80056d2:	1d20      	adds	r0, r4, #4
 80056d4:	f7ff fcb0 	bl	8005038 <RCCEx_PLLSAI1_Config>
          status = ret;
 80056d8:	2800      	cmp	r0, #0
 80056da:	bf18      	it	ne
 80056dc:	4605      	movne	r5, r0
 80056de:	e73b      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e0:	68d3      	ldr	r3, [r2, #12]
 80056e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056e6:	60d3      	str	r3, [r2, #12]
 80056e8:	e74c      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ea:	2101      	movs	r1, #1
 80056ec:	1d20      	adds	r0, r4, #4
 80056ee:	f7ff fca3 	bl	8005038 <RCCEx_PLLSAI1_Config>
        status = ret;
 80056f2:	2800      	cmp	r0, #0
 80056f4:	bf18      	it	ne
 80056f6:	4605      	movne	r5, r0
 80056f8:	e744      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056fa:	68d3      	ldr	r3, [r2, #12]
 80056fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005700:	60d3      	str	r3, [r2, #12]
 8005702:	e755      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005704:	2101      	movs	r1, #1
 8005706:	1d20      	adds	r0, r4, #4
 8005708:	f7ff fc96 	bl	8005038 <RCCEx_PLLSAI1_Config>
        status = ret;
 800570c:	2800      	cmp	r0, #0
 800570e:	bf18      	it	ne
 8005710:	4605      	movne	r5, r0
 8005712:	e74d      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005714:	2102      	movs	r1, #2
 8005716:	1d20      	adds	r0, r4, #4
 8005718:	f7ff fc8e 	bl	8005038 <RCCEx_PLLSAI1_Config>
        status = ret;
 800571c:	2800      	cmp	r0, #0
 800571e:	bf18      	it	ne
 8005720:	4605      	movne	r5, r0
 8005722:	e75b      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005724:	2102      	movs	r1, #2
 8005726:	f104 0020 	add.w	r0, r4, #32
 800572a:	f7ff fd35 	bl	8005198 <RCCEx_PLLSAI2_Config>
        status = ret;
 800572e:	2800      	cmp	r0, #0
 8005730:	bf18      	it	ne
 8005732:	4605      	movne	r5, r0
 8005734:	e752      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005736:	bf00      	nop

08005738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	4607      	mov	r7, r0
 800573c:	460e      	mov	r6, r1
 800573e:	4615      	mov	r5, r2
 8005740:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	6893      	ldr	r3, [r2, #8]
 8005746:	ea36 0303 	bics.w	r3, r6, r3
 800574a:	bf0c      	ite	eq
 800574c:	2301      	moveq	r3, #1
 800574e:	2300      	movne	r3, #0
 8005750:	42ab      	cmp	r3, r5
 8005752:	d037      	beq.n	80057c4 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005754:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005758:	d0f4      	beq.n	8005744 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800575a:	f7fe fc3f 	bl	8003fdc <HAL_GetTick>
 800575e:	9b06      	ldr	r3, [sp, #24]
 8005760:	1ac0      	subs	r0, r0, r3
 8005762:	42a0      	cmp	r0, r4
 8005764:	d201      	bcs.n	800576a <SPI_WaitFlagStateUntilTimeout+0x32>
 8005766:	2c00      	cmp	r4, #0
 8005768:	d1eb      	bne.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	6853      	ldr	r3, [r2, #4]
 800576e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005772:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577a:	d00b      	beq.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005782:	d014      	beq.n	80057ae <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800578a:	2300      	movs	r3, #0
 800578c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005790:	2003      	movs	r0, #3
 8005792:	e018      	b.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579a:	d002      	beq.n	80057a2 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800579c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a0:	d1ec      	bne.n	800577c <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	6813      	ldr	r3, [r2, #0]
 80057a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e7e6      	b.n	800577c <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	6813      	ldr	r3, [r2, #0]
 80057b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e7df      	b.n	8005784 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80057c4:	2000      	movs	r0, #0
}
 80057c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080057c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	4607      	mov	r7, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	4615      	mov	r5, r2
 80057d0:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	e002      	b.n	80057dc <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80057d6:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80057da:	d10a      	bne.n	80057f2 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 80057dc:	6893      	ldr	r3, [r2, #8]
 80057de:	4023      	ands	r3, r4
 80057e0:	42ab      	cmp	r3, r5
 80057e2:	d03b      	beq.n	800585c <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057e4:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80057e8:	d1f5      	bne.n	80057d6 <SPI_WaitFifoStateUntilTimeout+0xe>
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	d1f3      	bne.n	80057d6 <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80057ee:	7b13      	ldrb	r3, [r2, #12]
 80057f0:	e7f1      	b.n	80057d6 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80057f2:	f7fe fbf3 	bl	8003fdc <HAL_GetTick>
 80057f6:	9b06      	ldr	r3, [sp, #24]
 80057f8:	1ac0      	subs	r0, r0, r3
 80057fa:	42b0      	cmp	r0, r6
 80057fc:	d201      	bcs.n	8005802 <SPI_WaitFifoStateUntilTimeout+0x3a>
 80057fe:	2e00      	cmp	r6, #0
 8005800:	d1e7      	bne.n	80057d2 <SPI_WaitFifoStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	6853      	ldr	r3, [r2, #4]
 8005806:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800580a:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005812:	d00b      	beq.n	800582c <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581a:	d014      	beq.n	8005846 <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005822:	2300      	movs	r3, #0
 8005824:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005828:	2003      	movs	r0, #3
 800582a:	e018      	b.n	800585e <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005832:	d002      	beq.n	800583a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005838:	d1ec      	bne.n	8005814 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	6813      	ldr	r3, [r2, #0]
 800583e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	e7e6      	b.n	8005814 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	6813      	ldr	r3, [r2, #0]
 800584a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e7df      	b.n	800581c <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 800585c:	2000      	movs	r0, #0
}
 800585e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005860 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	4604      	mov	r4, r0
 8005866:	460d      	mov	r5, r1
 8005868:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800586a:	9200      	str	r2, [sp, #0]
 800586c:	460b      	mov	r3, r1
 800586e:	2200      	movs	r2, #0
 8005870:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005874:	f7ff ffa8 	bl	80057c8 <SPI_WaitFifoStateUntilTimeout>
 8005878:	b9b8      	cbnz	r0, 80058aa <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800587a:	9600      	str	r6, [sp, #0]
 800587c:	462b      	mov	r3, r5
 800587e:	2200      	movs	r2, #0
 8005880:	2180      	movs	r1, #128	; 0x80
 8005882:	4620      	mov	r0, r4
 8005884:	f7ff ff58 	bl	8005738 <SPI_WaitFlagStateUntilTimeout>
 8005888:	b9b8      	cbnz	r0, 80058ba <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800588a:	9600      	str	r6, [sp, #0]
 800588c:	462b      	mov	r3, r5
 800588e:	2200      	movs	r2, #0
 8005890:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005894:	4620      	mov	r0, r4
 8005896:	f7ff ff97 	bl	80057c8 <SPI_WaitFifoStateUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	b150      	cbz	r0, 80058b4 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80058a0:	f043 0320 	orr.w	r3, r3, #32
 80058a4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e004      	b.n	80058b4 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80058ac:	f043 0320 	orr.w	r3, r3, #32
 80058b0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	b002      	add	sp, #8
 80058b8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80058bc:	f043 0320 	orr.w	r3, r3, #32
 80058c0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e7f6      	b.n	80058b4 <SPI_EndRxTxTransaction+0x54>

080058c6 <SPI_EndRxTransaction>:
{
 80058c6:	b570      	push	{r4, r5, r6, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	4604      	mov	r4, r0
 80058cc:	460d      	mov	r5, r1
 80058ce:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d0:	6843      	ldr	r3, [r0, #4]
 80058d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d6:	d00f      	beq.n	80058f8 <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058d8:	9600      	str	r6, [sp, #0]
 80058da:	462b      	mov	r3, r5
 80058dc:	2200      	movs	r2, #0
 80058de:	2180      	movs	r1, #128	; 0x80
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff ff29 	bl	8005738 <SPI_WaitFlagStateUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	b998      	cbnz	r0, 8005912 <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ea:	6862      	ldr	r2, [r4, #4]
 80058ec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80058f0:	d015      	beq.n	800591e <SPI_EndRxTransaction+0x58>
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	b002      	add	sp, #8
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f8:	6883      	ldr	r3, [r0, #8]
 80058fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fe:	d002      	beq.n	8005906 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005904:	d1e8      	bne.n	80058d8 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	6813      	ldr	r3, [r2, #0]
 800590a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	e7e2      	b.n	80058d8 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005912:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005914:	f043 0320 	orr.w	r3, r3, #32
 8005918:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e7e9      	b.n	80058f2 <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800591e:	68a2      	ldr	r2, [r4, #8]
 8005920:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005924:	d002      	beq.n	800592c <SPI_EndRxTransaction+0x66>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005926:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800592a:	d1e2      	bne.n	80058f2 <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800592c:	9600      	str	r6, [sp, #0]
 800592e:	462b      	mov	r3, r5
 8005930:	2200      	movs	r2, #0
 8005932:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005936:	4620      	mov	r0, r4
 8005938:	f7ff ff46 	bl	80057c8 <SPI_WaitFifoStateUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2800      	cmp	r0, #0
 8005940:	d0d7      	beq.n	80058f2 <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005942:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005944:	f043 0320 	orr.w	r3, r3, #32
 8005948:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e7d1      	b.n	80058f2 <SPI_EndRxTransaction+0x2c>

0800594e <HAL_SPI_Init>:
  if (hspi == NULL)
 800594e:	2800      	cmp	r0, #0
 8005950:	d052      	beq.n	80059f8 <HAL_SPI_Init+0xaa>
{
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005956:	2300      	movs	r3, #0
 8005958:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800595a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800595e:	b1bb      	cbz	r3, 8005990 <HAL_SPI_Init+0x42>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005960:	2302      	movs	r3, #2
 8005962:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	6813      	ldr	r3, [r2, #0]
 800596a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800596e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005970:	68e3      	ldr	r3, [r4, #12]
 8005972:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005976:	d841      	bhi.n	80059fc <HAL_SPI_Init+0xae>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005978:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800597c:	d04d      	beq.n	8005a1a <HAL_SPI_Init+0xcc>
 800597e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005982:	d10a      	bne.n	800599a <HAL_SPI_Init+0x4c>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005984:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005986:	2b00      	cmp	r3, #0
 8005988:	d033      	beq.n	80059f2 <HAL_SPI_Init+0xa4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800598a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800598e:	e00b      	b.n	80059a8 <HAL_SPI_Init+0x5a>
    hspi->Lock = HAL_UNLOCKED;
 8005990:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005994:	f7fe f94c 	bl	8003c30 <HAL_SPI_MspInit>
 8005998:	e7e2      	b.n	8005960 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800599a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800599e:	e031      	b.n	8005a04 <HAL_SPI_Init+0xb6>
 80059a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80059a4:	2302      	movs	r3, #2
 80059a6:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059a8:	6822      	ldr	r2, [r4, #0]
 80059aa:	6863      	ldr	r3, [r4, #4]
 80059ac:	68a0      	ldr	r0, [r4, #8]
 80059ae:	4303      	orrs	r3, r0
 80059b0:	6920      	ldr	r0, [r4, #16]
 80059b2:	4303      	orrs	r3, r0
 80059b4:	6960      	ldr	r0, [r4, #20]
 80059b6:	4303      	orrs	r3, r0
 80059b8:	69e0      	ldr	r0, [r4, #28]
 80059ba:	4303      	orrs	r3, r0
 80059bc:	6a20      	ldr	r0, [r4, #32]
 80059be:	4303      	orrs	r3, r0
 80059c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80059c2:	4303      	orrs	r3, r0
 80059c4:	69a0      	ldr	r0, [r4, #24]
 80059c6:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80059ca:	4303      	orrs	r3, r0
 80059cc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80059d4:	4303      	orrs	r3, r0
 80059d6:	68e0      	ldr	r0, [r4, #12]
 80059d8:	4303      	orrs	r3, r0
 80059da:	8b60      	ldrh	r0, [r4, #26]
 80059dc:	f000 0004 	and.w	r0, r0, #4
 80059e0:	4303      	orrs	r3, r0
 80059e2:	430b      	orrs	r3, r1
 80059e4:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e6:	2000      	movs	r0, #0
 80059e8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80059f0:	bd10      	pop	{r4, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059f6:	e00d      	b.n	8005a14 <HAL_SPI_Init+0xc6>
    return HAL_ERROR;
 80059f8:	2001      	movs	r0, #1
}
 80059fa:	4770      	bx	lr
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a00:	d011      	beq.n	8005a26 <HAL_SPI_Init+0xd8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a02:	2100      	movs	r1, #0
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a04:	2200      	movs	r2, #0
 8005a06:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d1cc      	bne.n	80059a8 <HAL_SPI_Init+0x5a>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a12:	d8c7      	bhi.n	80059a4 <HAL_SPI_Init+0x56>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a14:	2301      	movs	r3, #1
 8005a16:	6323      	str	r3, [r4, #48]	; 0x30
 8005a18:	e7c6      	b.n	80059a8 <HAL_SPI_Init+0x5a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0bf      	beq.n	80059a0 <HAL_SPI_Init+0x52>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a24:	e7c0      	b.n	80059a8 <HAL_SPI_Init+0x5a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	d0bb      	beq.n	80059a4 <HAL_SPI_Init+0x56>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	e7bb      	b.n	80059a8 <HAL_SPI_Init+0x5a>

08005a30 <HAL_SPI_Transmit>:
{
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8005a36:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8005a3a:	2c01      	cmp	r4, #1
 8005a3c:	f000 80e3 	beq.w	8005c06 <HAL_SPI_Transmit+0x1d6>
 8005a40:	461e      	mov	r6, r3
 8005a42:	4615      	mov	r5, r2
 8005a44:	4688      	mov	r8, r1
 8005a46:	4604      	mov	r4, r0
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005a4e:	f7fe fac5 	bl	8003fdc <HAL_GetTick>
 8005a52:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a54:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	2a01      	cmp	r2, #1
 8005a5c:	d009      	beq.n	8005a72 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8005a5e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a66:	2300      	movs	r3, #0
 8005a68:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005a6c:	b002      	add	sp, #8
 8005a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8005a72:	f1b8 0f00 	cmp.w	r8, #0
 8005a76:	f000 80c0 	beq.w	8005bfa <HAL_SPI_Transmit+0x1ca>
 8005a7a:	2d00      	cmp	r5, #0
 8005a7c:	f000 80bf 	beq.w	8005bfe <HAL_SPI_Transmit+0x1ce>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a80:	2303      	movs	r3, #3
 8005a82:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a8a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a8e:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a90:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a92:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a94:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a98:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a9c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a9e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa0:	68a3      	ldr	r3, [r4, #8]
 8005aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa6:	d01c      	beq.n	8005ae2 <HAL_SPI_Transmit+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ab0:	d103      	bne.n	8005aba <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aba:	68e3      	ldr	r3, [r4, #12]
 8005abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ac0:	d936      	bls.n	8005b30 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	b10b      	cbz	r3, 8005aca <HAL_SPI_Transmit+0x9a>
 8005ac6:	2d01      	cmp	r5, #1
 8005ac8:	d11a      	bne.n	8005b00 <HAL_SPI_Transmit+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ace:	8812      	ldrh	r2, [r2, #0]
 8005ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005ad8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005ae0:	e00e      	b.n	8005b00 <HAL_SPI_Transmit+0xd0>
    SPI_1LINE_TX(hspi);
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	6813      	ldr	r3, [r2, #0]
 8005ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e7dc      	b.n	8005aa8 <HAL_SPI_Transmit+0x78>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aee:	f7fe fa75 	bl	8003fdc <HAL_GetTick>
 8005af2:	1bc0      	subs	r0, r0, r7
 8005af4:	42b0      	cmp	r0, r6
 8005af6:	d317      	bcc.n	8005b28 <HAL_SPI_Transmit+0xf8>
 8005af8:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005afc:	f040 8081 	bne.w	8005c02 <HAL_SPI_Transmit+0x1d2>
    while (hspi->TxXferCount > 0U)
 8005b00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d062      	beq.n	8005bce <HAL_SPI_Transmit+0x19e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	f012 0f02 	tst.w	r2, #2
 8005b10:	d0ed      	beq.n	8005aee <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b14:	8812      	ldrh	r2, [r2, #0]
 8005b16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005b1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005b26:	e7eb      	b.n	8005b00 <HAL_SPI_Transmit+0xd0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b28:	2e00      	cmp	r6, #0
 8005b2a:	d1e9      	bne.n	8005b00 <HAL_SPI_Transmit+0xd0>
          errorcode = HAL_TIMEOUT;
 8005b2c:	2003      	movs	r0, #3
 8005b2e:	e797      	b.n	8005a60 <HAL_SPI_Transmit+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b30:	6863      	ldr	r3, [r4, #4]
 8005b32:	b10b      	cbz	r3, 8005b38 <HAL_SPI_Transmit+0x108>
 8005b34:	2d01      	cmp	r5, #1
 8005b36:	d125      	bne.n	8005b84 <HAL_SPI_Transmit+0x154>
      if (hspi->TxXferCount > 1U)
 8005b38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d90b      	bls.n	8005b58 <HAL_SPI_Transmit+0x128>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b44:	8812      	ldrh	r2, [r2, #0]
 8005b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b4a:	3302      	adds	r3, #2
 8005b4c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b50:	3b02      	subs	r3, #2
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005b56:	e015      	b.n	8005b84 <HAL_SPI_Transmit+0x154>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8005b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b62:	3301      	adds	r3, #1
 8005b64:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005b66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005b6e:	e009      	b.n	8005b84 <HAL_SPI_Transmit+0x154>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b78:	3301      	adds	r3, #1
 8005b7a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005b7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005b84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	b30b      	cbz	r3, 8005bce <HAL_SPI_Transmit+0x19e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	6893      	ldr	r3, [r2, #8]
 8005b8e:	f013 0f02 	tst.w	r3, #2
 8005b92:	d00e      	beq.n	8005bb2 <HAL_SPI_Transmit+0x182>
        if (hspi->TxXferCount > 1U)
 8005b94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d9e9      	bls.n	8005b70 <HAL_SPI_Transmit+0x140>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ba8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005baa:	3b02      	subs	r3, #2
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005bb0:	e7e8      	b.n	8005b84 <HAL_SPI_Transmit+0x154>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb2:	f7fe fa13 	bl	8003fdc <HAL_GetTick>
 8005bb6:	1bc0      	subs	r0, r0, r7
 8005bb8:	42b0      	cmp	r0, r6
 8005bba:	d304      	bcc.n	8005bc6 <HAL_SPI_Transmit+0x196>
 8005bbc:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005bc0:	d0e0      	beq.n	8005b84 <HAL_SPI_Transmit+0x154>
          errorcode = HAL_TIMEOUT;
 8005bc2:	2003      	movs	r0, #3
 8005bc4:	e74c      	b.n	8005a60 <HAL_SPI_Transmit+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc6:	2e00      	cmp	r6, #0
 8005bc8:	d1dc      	bne.n	8005b84 <HAL_SPI_Transmit+0x154>
          errorcode = HAL_TIMEOUT;
 8005bca:	2003      	movs	r0, #3
 8005bcc:	e748      	b.n	8005a60 <HAL_SPI_Transmit+0x30>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bce:	463a      	mov	r2, r7
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff fe44 	bl	8005860 <SPI_EndRxTxTransaction>
 8005bd8:	b108      	cbz	r0, 8005bde <HAL_SPI_Transmit+0x1ae>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bda:	2320      	movs	r3, #32
 8005bdc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bde:	68a3      	ldr	r3, [r4, #8]
 8005be0:	b933      	cbnz	r3, 8005bf0 <HAL_SPI_Transmit+0x1c0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	9201      	str	r2, [sp, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bf0:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8005bf2:	3000      	adds	r0, #0
 8005bf4:	bf18      	it	ne
 8005bf6:	2001      	movne	r0, #1
error:
 8005bf8:	e732      	b.n	8005a60 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	e730      	b.n	8005a60 <HAL_SPI_Transmit+0x30>
 8005bfe:	2001      	movs	r0, #1
 8005c00:	e72e      	b.n	8005a60 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8005c02:	2003      	movs	r0, #3
 8005c04:	e72c      	b.n	8005a60 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8005c06:	2002      	movs	r0, #2
 8005c08:	e730      	b.n	8005a6c <HAL_SPI_Transmit+0x3c>

08005c0a <HAL_SPI_TransmitReceive>:
{
 8005c0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c0e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8005c12:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8005c16:	2c01      	cmp	r4, #1
 8005c18:	f000 8161 	beq.w	8005ede <HAL_SPI_TransmitReceive+0x2d4>
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	4617      	mov	r7, r2
 8005c20:	460e      	mov	r6, r1
 8005c22:	4604      	mov	r4, r0
 8005c24:	2301      	movs	r3, #1
 8005c26:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005c2a:	f7fe f9d7 	bl	8003fdc <HAL_GetTick>
 8005c2e:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8005c30:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005c34:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c36:	2801      	cmp	r0, #1
 8005c38:	d015      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x5c>
 8005c3a:	6863      	ldr	r3, [r4, #4]
 8005c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c40:	d009      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005c44:	2201      	movs	r2, #1
 8005c46:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c56:	68a3      	ldr	r3, [r4, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f040 8134 	bne.w	8005ec6 <HAL_SPI_TransmitReceive+0x2bc>
 8005c5e:	2804      	cmp	r0, #4
 8005c60:	d001      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
 8005c64:	e7ee      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c66:	2e00      	cmp	r6, #0
 8005c68:	f000 812f 	beq.w	8005eca <HAL_SPI_TransmitReceive+0x2c0>
 8005c6c:	2f00      	cmp	r7, #0
 8005c6e:	f000 812e 	beq.w	8005ece <HAL_SPI_TransmitReceive+0x2c4>
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	f000 812d 	beq.w	8005ed2 <HAL_SPI_TransmitReceive+0x2c8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c78:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c80:	bf1c      	itt	ne
 8005c82:	2305      	movne	r3, #5
 8005c84:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c8c:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c8e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005c92:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c96:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005c98:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c9a:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8005c9c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c9e:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ca0:	68e3      	ldr	r3, [r4, #12]
 8005ca2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ca6:	d801      	bhi.n	8005cac <HAL_SPI_TransmitReceive+0xa2>
 8005ca8:	2d01      	cmp	r5, #1
 8005caa:	d924      	bls.n	8005cf6 <HAL_SPI_TransmitReceive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	6853      	ldr	r3, [r2, #4]
 8005cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb4:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005cbe:	d103      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc8:	68e3      	ldr	r3, [r4, #12]
 8005cca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cce:	d958      	bls.n	8005d82 <HAL_SPI_TransmitReceive+0x178>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	b10b      	cbz	r3, 8005cd8 <HAL_SPI_TransmitReceive+0xce>
 8005cd4:	2d01      	cmp	r5, #1
 8005cd6:	d10a      	bne.n	8005cee <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005cdc:	8812      	ldrh	r2, [r2, #0]
 8005cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005ce6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005cee:	2501      	movs	r5, #1
        txallowed = 0U;
 8005cf0:	2700      	movs	r7, #0
        txallowed = 1U;
 8005cf2:	462e      	mov	r6, r5
 8005cf4:	e025      	b.n	8005d42 <HAL_SPI_TransmitReceive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	6853      	ldr	r3, [r2, #4]
 8005cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cfe:	6053      	str	r3, [r2, #4]
 8005d00:	e7d9      	b.n	8005cb6 <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	f012 0f01 	tst.w	r2, #1
 8005d0a:	d010      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x124>
 8005d0c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005d10:	b292      	uxth	r2, r2
 8005d12:	b162      	cbz	r2, 8005d2e <HAL_SPI_TransmitReceive+0x124>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005d20:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005d2c:	4635      	mov	r5, r6
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d2e:	f7fe f955 	bl	8003fdc <HAL_GetTick>
 8005d32:	eba0 0009 	sub.w	r0, r0, r9
 8005d36:	4540      	cmp	r0, r8
 8005d38:	d303      	bcc.n	8005d42 <HAL_SPI_TransmitReceive+0x138>
 8005d3a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005d3e:	f040 80ca 	bne.w	8005ed6 <HAL_SPI_TransmitReceive+0x2cc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	b92b      	cbnz	r3, 8005d54 <HAL_SPI_TransmitReceive+0x14a>
 8005d48:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 80ac 	beq.w	8005eac <HAL_SPI_TransmitReceive+0x2a2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	f012 0f02 	tst.w	r2, #2
 8005d5c:	d0d1      	beq.n	8005d02 <HAL_SPI_TransmitReceive+0xf8>
 8005d5e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005d60:	b292      	uxth	r2, r2
 8005d62:	2a00      	cmp	r2, #0
 8005d64:	d0cd      	beq.n	8005d02 <HAL_SPI_TransmitReceive+0xf8>
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	d0cb      	beq.n	8005d02 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d6c:	8812      	ldrh	r2, [r2, #0]
 8005d6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d72:	3302      	adds	r3, #2
 8005d74:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005d76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005d7e:	463d      	mov	r5, r7
 8005d80:	e7bf      	b.n	8005d02 <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	b10b      	cbz	r3, 8005d8a <HAL_SPI_TransmitReceive+0x180>
 8005d86:	2d01      	cmp	r5, #1
 8005d88:	d10e      	bne.n	8005da8 <HAL_SPI_TransmitReceive+0x19e>
      if (hspi->TxXferCount > 1U)
 8005d8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d90e      	bls.n	8005db0 <HAL_SPI_TransmitReceive+0x1a6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d96:	8812      	ldrh	r2, [r2, #0]
 8005d98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005da0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005da2:	3b02      	subs	r3, #2
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005da8:	2501      	movs	r5, #1
        txallowed = 0U;
 8005daa:	2700      	movs	r7, #0
        txallowed = 1U;
 8005dac:	462e      	mov	r6, r5
 8005dae:	e044      	b.n	8005e3a <HAL_SPI_TransmitReceive+0x230>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005db4:	7812      	ldrb	r2, [r2, #0]
 8005db6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005db8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dba:	3301      	adds	r3, #1
 8005dbc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005dbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005dc6:	e7ef      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x19e>
        if (hspi->TxXferCount > 1U)
 8005dc8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	2a01      	cmp	r2, #1
 8005dce:	d90b      	bls.n	8005de8 <HAL_SPI_TransmitReceive+0x1de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005dd2:	8812      	ldrh	r2, [r2, #0]
 8005dd4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dd8:	3302      	adds	r3, #2
 8005dda:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ddc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005dde:	3b02      	subs	r3, #2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005de4:	463d      	mov	r5, r7
 8005de6:	e03a      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005de8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8005dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005df0:	3301      	adds	r3, #1
 8005df2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005df4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005dfc:	463d      	mov	r5, r7
 8005dfe:	e02e      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	6853      	ldr	r3, [r2, #4]
 8005e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e08:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005e0a:	4635      	mov	r5, r6
 8005e0c:	e00c      	b.n	8005e28 <HAL_SPI_TransmitReceive+0x21e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005e10:	7b1b      	ldrb	r3, [r3, #12]
 8005e12:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8005e14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e16:	3301      	adds	r3, #1
 8005e18:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005e1a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005e26:	4635      	mov	r5, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e28:	f7fe f8d8 	bl	8003fdc <HAL_GetTick>
 8005e2c:	eba0 0009 	sub.w	r0, r0, r9
 8005e30:	4540      	cmp	r0, r8
 8005e32:	d336      	bcc.n	8005ea2 <HAL_SPI_TransmitReceive+0x298>
 8005e34:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005e38:	d14f      	bne.n	8005eda <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	b923      	cbnz	r3, 8005e4a <HAL_SPI_TransmitReceive+0x240>
 8005e40:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d030      	beq.n	8005eac <HAL_SPI_TransmitReceive+0x2a2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	f012 0f02 	tst.w	r2, #2
 8005e52:	d004      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x254>
 8005e54:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005e56:	b292      	uxth	r2, r2
 8005e58:	b10a      	cbz	r2, 8005e5e <HAL_SPI_TransmitReceive+0x254>
 8005e5a:	2d01      	cmp	r5, #1
 8005e5c:	d0b4      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x1be>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	f012 0f01 	tst.w	r2, #1
 8005e66:	d0df      	beq.n	8005e28 <HAL_SPI_TransmitReceive+0x21e>
 8005e68:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005e6c:	b292      	uxth	r2, r2
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	d0da      	beq.n	8005e28 <HAL_SPI_TransmitReceive+0x21e>
        if (hspi->RxXferCount > 1U)
 8005e72:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005e76:	b292      	uxth	r2, r2
 8005e78:	2a01      	cmp	r2, #1
 8005e7a:	d9c8      	bls.n	8005e0e <HAL_SPI_TransmitReceive+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e80:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e84:	3302      	adds	r3, #2
 8005e86:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e88:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005e8c:	3b02      	subs	r3, #2
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e94:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d9b0      	bls.n	8005e00 <HAL_SPI_TransmitReceive+0x1f6>
        txallowed = 1U;
 8005e9e:	4635      	mov	r5, r6
 8005ea0:	e7c2      	b.n	8005e28 <HAL_SPI_TransmitReceive+0x21e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ea2:	f1b8 0f00 	cmp.w	r8, #0
 8005ea6:	d1c8      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x230>
        errorcode = HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e6cb      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x3a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eac:	464a      	mov	r2, r9
 8005eae:	4641      	mov	r1, r8
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f7ff fcd5 	bl	8005860 <SPI_EndRxTxTransaction>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	f43f aec3 	beq.w	8005c44 <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ebe:	2320      	movs	r3, #32
 8005ec0:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e6be      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e6bc      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e6ba      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x3a>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e6b8      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x3a>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e6b6      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e6b4      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e6b2      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e6b6      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x46>

08005ee2 <HAL_SPI_Receive>:
{
 8005ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	4604      	mov	r4, r0
 8005eea:	460f      	mov	r7, r1
 8005eec:	4690      	mov	r8, r2
 8005eee:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ef0:	6843      	ldr	r3, [r0, #4]
 8005ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef6:	d019      	beq.n	8005f2c <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8005ef8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	f000 80b4 	beq.w	800606a <HAL_SPI_Receive+0x188>
 8005f02:	2301      	movs	r3, #1
 8005f04:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005f08:	f7fe f868 	bl	8003fdc <HAL_GetTick>
 8005f0c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005f0e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d015      	beq.n	8005f44 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8005f18:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f20:	2300      	movs	r3, #0
 8005f22:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005f26:	b002      	add	sp, #8
 8005f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f2c:	6883      	ldr	r3, [r0, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e2      	bne.n	8005ef8 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f32:	2304      	movs	r3, #4
 8005f34:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f38:	9500      	str	r5, [sp, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	460a      	mov	r2, r1
 8005f3e:	f7ff fe64 	bl	8005c0a <HAL_SPI_TransmitReceive>
 8005f42:	e7f0      	b.n	8005f26 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8005f44:	2f00      	cmp	r7, #0
 8005f46:	f000 8088 	beq.w	800605a <HAL_SPI_Receive+0x178>
 8005f4a:	f1b8 0f00 	cmp.w	r8, #0
 8005f4e:	f000 8086 	beq.w	800605e <HAL_SPI_Receive+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f52:	2304      	movs	r3, #4
 8005f54:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f5c:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f5e:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f62:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f66:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005f68:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005f6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005f6c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f6e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f70:	68e3      	ldr	r3, [r4, #12]
 8005f72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f76:	6822      	ldr	r2, [r4, #0]
 8005f78:	6853      	ldr	r3, [r2, #4]
 8005f7a:	bf8c      	ite	hi
 8005f7c:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f80:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8005f84:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f86:	68a3      	ldr	r3, [r4, #8]
 8005f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f8c:	d00d      	beq.n	8005faa <HAL_SPI_Receive+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f96:	d103      	bne.n	8005fa0 <HAL_SPI_Receive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f9e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005fa0:	68e3      	ldr	r3, [r4, #12]
 8005fa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fa6:	d90e      	bls.n	8005fc6 <HAL_SPI_Receive+0xe4>
 8005fa8:	e030      	b.n	800600c <HAL_SPI_Receive+0x12a>
    SPI_1LINE_RX(hspi);
 8005faa:	6822      	ldr	r2, [r4, #0]
 8005fac:	6813      	ldr	r3, [r2, #0]
 8005fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	e7eb      	b.n	8005f8e <HAL_SPI_Receive+0xac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb6:	f7fe f811 	bl	8003fdc <HAL_GetTick>
 8005fba:	1b80      	subs	r0, r0, r6
 8005fbc:	42a8      	cmp	r0, r5
 8005fbe:	d319      	bcc.n	8005ff4 <HAL_SPI_Receive+0x112>
 8005fc0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005fc4:	d14d      	bne.n	8006062 <HAL_SPI_Receive+0x180>
    while (hspi->RxXferCount > 0U)
 8005fc6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d037      	beq.n	8006040 <HAL_SPI_Receive+0x15e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	f012 0f01 	tst.w	r2, #1
 8005fd8:	d0ed      	beq.n	8005fb6 <HAL_SPI_Receive+0xd4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005fdc:	7b1b      	ldrb	r3, [r3, #12]
 8005fde:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005fe6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005ff2:	e7e8      	b.n	8005fc6 <HAL_SPI_Receive+0xe4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff4:	2d00      	cmp	r5, #0
 8005ff6:	d1e6      	bne.n	8005fc6 <HAL_SPI_Receive+0xe4>
          errorcode = HAL_TIMEOUT;
 8005ff8:	2003      	movs	r0, #3
 8005ffa:	e78e      	b.n	8005f1a <HAL_SPI_Receive+0x38>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ffc:	f7fd ffee 	bl	8003fdc <HAL_GetTick>
 8006000:	1b80      	subs	r0, r0, r6
 8006002:	42a8      	cmp	r0, r5
 8006004:	d318      	bcc.n	8006038 <HAL_SPI_Receive+0x156>
 8006006:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800600a:	d12c      	bne.n	8006066 <HAL_SPI_Receive+0x184>
    while (hspi->RxXferCount > 0U)
 800600c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006010:	b29b      	uxth	r3, r3
 8006012:	b1ab      	cbz	r3, 8006040 <HAL_SPI_Receive+0x15e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	f012 0f01 	tst.w	r2, #1
 800601c:	d0ee      	beq.n	8005ffc <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006022:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006026:	3302      	adds	r3, #2
 8006028:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800602a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800602e:	3b01      	subs	r3, #1
 8006030:	b29b      	uxth	r3, r3
 8006032:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8006036:	e7e9      	b.n	800600c <HAL_SPI_Receive+0x12a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006038:	2d00      	cmp	r5, #0
 800603a:	d1e7      	bne.n	800600c <HAL_SPI_Receive+0x12a>
          errorcode = HAL_TIMEOUT;
 800603c:	2003      	movs	r0, #3
 800603e:	e76c      	b.n	8005f1a <HAL_SPI_Receive+0x38>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006040:	4632      	mov	r2, r6
 8006042:	4629      	mov	r1, r5
 8006044:	4620      	mov	r0, r4
 8006046:	f7ff fc3e 	bl	80058c6 <SPI_EndRxTransaction>
 800604a:	b108      	cbz	r0, 8006050 <HAL_SPI_Receive+0x16e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800604c:	2320      	movs	r3, #32
 800604e:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006050:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8006052:	3000      	adds	r0, #0
 8006054:	bf18      	it	ne
 8006056:	2001      	movne	r0, #1
error :
 8006058:	e75f      	b.n	8005f1a <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800605a:	2001      	movs	r0, #1
 800605c:	e75d      	b.n	8005f1a <HAL_SPI_Receive+0x38>
 800605e:	2001      	movs	r0, #1
 8006060:	e75b      	b.n	8005f1a <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8006062:	2003      	movs	r0, #3
 8006064:	e759      	b.n	8005f1a <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8006066:	2003      	movs	r0, #3
 8006068:	e757      	b.n	8005f1a <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 800606a:	2002      	movs	r0, #2
 800606c:	e75b      	b.n	8005f26 <HAL_SPI_Receive+0x44>
	...

08006070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006070:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006072:	6a03      	ldr	r3, [r0, #32]
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800607e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006080:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006084:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	680d      	ldr	r5, [r1, #0]
 800608a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800608c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006090:	688d      	ldr	r5, [r1, #8]
 8006092:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006094:	4d20      	ldr	r5, [pc, #128]	; (8006118 <TIM_OC1_SetConfig+0xa8>)
 8006096:	42a8      	cmp	r0, r5
 8006098:	d02a      	beq.n	80060f0 <TIM_OC1_SetConfig+0x80>
 800609a:	4f20      	ldr	r7, [pc, #128]	; (800611c <TIM_OC1_SetConfig+0xac>)
 800609c:	42b8      	cmp	r0, r7
 800609e:	d019      	beq.n	80060d4 <TIM_OC1_SetConfig+0x64>
 80060a0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80060a4:	42a8      	cmp	r0, r5
 80060a6:	d01c      	beq.n	80060e2 <TIM_OC1_SetConfig+0x72>
 80060a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060ac:	42a8      	cmp	r0, r5
 80060ae:	d00a      	beq.n	80060c6 <TIM_OC1_SetConfig+0x56>
 80060b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060b4:	42a8      	cmp	r0, r5
 80060b6:	d127      	bne.n	8006108 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060b8:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060bc:	68cd      	ldr	r5, [r1, #12]
 80060be:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060c0:	f023 0304 	bic.w	r3, r3, #4
 80060c4:	e01a      	b.n	80060fc <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80060c6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80060ca:	68cd      	ldr	r5, [r1, #12]
 80060cc:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ce:	f023 0304 	bic.w	r3, r3, #4
 80060d2:	e013      	b.n	80060fc <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80060d4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80060d8:	68cd      	ldr	r5, [r1, #12]
 80060da:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80060dc:	f023 0304 	bic.w	r3, r3, #4
 80060e0:	e00c      	b.n	80060fc <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80060e2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80060e6:	68cd      	ldr	r5, [r1, #12]
 80060e8:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ea:	f023 0304 	bic.w	r3, r3, #4
 80060ee:	e005      	b.n	80060fc <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80060f0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80060f4:	68cd      	ldr	r5, [r1, #12]
 80060f6:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80060f8:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060fc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006100:	694c      	ldr	r4, [r1, #20]
 8006102:	698f      	ldr	r7, [r1, #24]
 8006104:	433c      	orrs	r4, r7
 8006106:	4326      	orrs	r6, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006108:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800610a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800610c:	684a      	ldr	r2, [r1, #4]
 800610e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006110:	6203      	str	r3, [r0, #32]
}
 8006112:	bcf0      	pop	{r4, r5, r6, r7}
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40013400 	.word	0x40013400

08006120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006120:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006122:	6a03      	ldr	r3, [r0, #32]
 8006124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006128:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800612e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006130:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006134:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006138:	680d      	ldr	r5, [r1, #0]
 800613a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800613c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006140:	688d      	ldr	r5, [r1, #8]
 8006142:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006146:	4d18      	ldr	r5, [pc, #96]	; (80061a8 <TIM_OC3_SetConfig+0x88>)
 8006148:	42a8      	cmp	r0, r5
 800614a:	d017      	beq.n	800617c <TIM_OC3_SetConfig+0x5c>
 800614c:	4f17      	ldr	r7, [pc, #92]	; (80061ac <TIM_OC3_SetConfig+0x8c>)
 800614e:	42b8      	cmp	r0, r7
 8006150:	d00c      	beq.n	800616c <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006152:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006156:	42a8      	cmp	r0, r5
 8006158:	d017      	beq.n	800618a <TIM_OC3_SetConfig+0x6a>
 800615a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800615e:	42a8      	cmp	r0, r5
 8006160:	d013      	beq.n	800618a <TIM_OC3_SetConfig+0x6a>
 8006162:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006166:	42a8      	cmp	r0, r5
 8006168:	d116      	bne.n	8006198 <TIM_OC3_SetConfig+0x78>
 800616a:	e00e      	b.n	800618a <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800616c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006170:	68cd      	ldr	r5, [r1, #12]
 8006172:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800617a:	e006      	b.n	800618a <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800617c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006180:	68cd      	ldr	r5, [r1, #12]
 8006182:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800618a:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800618e:	694c      	ldr	r4, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006190:	698f      	ldr	r7, [r1, #24]
 8006192:	433c      	orrs	r4, r7
 8006194:	ea46 1604 	orr.w	r6, r6, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006198:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800619a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800619c:	684a      	ldr	r2, [r1, #4]
 800619e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a0:	6203      	str	r3, [r0, #32]
}
 80061a2:	bcf0      	pop	{r4, r5, r6, r7}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40013400 	.word	0x40013400

080061b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061b2:	6a03      	ldr	r3, [r0, #32]
 80061b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80061c4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c8:	680d      	ldr	r5, [r1, #0]
 80061ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061d2:	688d      	ldr	r5, [r1, #8]
 80061d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d8:	4d0f      	ldr	r5, [pc, #60]	; (8006218 <TIM_OC4_SetConfig+0x68>)
 80061da:	42a8      	cmp	r0, r5
 80061dc:	d00f      	beq.n	80061fe <TIM_OC4_SetConfig+0x4e>
 80061de:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80061e2:	42a8      	cmp	r0, r5
 80061e4:	d00b      	beq.n	80061fe <TIM_OC4_SetConfig+0x4e>
 80061e6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80061ea:	42a8      	cmp	r0, r5
 80061ec:	d007      	beq.n	80061fe <TIM_OC4_SetConfig+0x4e>
 80061ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80061f2:	42a8      	cmp	r0, r5
 80061f4:	d003      	beq.n	80061fe <TIM_OC4_SetConfig+0x4e>
 80061f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80061fa:	42a8      	cmp	r0, r5
 80061fc:	d104      	bne.n	8006208 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061fe:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006202:	694d      	ldr	r5, [r1, #20]
 8006204:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800620a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800620c:	684a      	ldr	r2, [r1, #4]
 800620e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	6203      	str	r3, [r0, #32]
}
 8006212:	bc30      	pop	{r4, r5}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40012c00 	.word	0x40012c00

0800621c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800621e:	6a03      	ldr	r3, [r0, #32]
 8006220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006224:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800622a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800622c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006230:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006234:	680d      	ldr	r5, [r1, #0]
 8006236:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006238:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800623c:	688d      	ldr	r5, [r1, #8]
 800623e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006242:	4d0f      	ldr	r5, [pc, #60]	; (8006280 <TIM_OC5_SetConfig+0x64>)
 8006244:	42a8      	cmp	r0, r5
 8006246:	d00f      	beq.n	8006268 <TIM_OC5_SetConfig+0x4c>
 8006248:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800624c:	42a8      	cmp	r0, r5
 800624e:	d00b      	beq.n	8006268 <TIM_OC5_SetConfig+0x4c>
 8006250:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006254:	42a8      	cmp	r0, r5
 8006256:	d007      	beq.n	8006268 <TIM_OC5_SetConfig+0x4c>
 8006258:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800625c:	42a8      	cmp	r0, r5
 800625e:	d003      	beq.n	8006268 <TIM_OC5_SetConfig+0x4c>
 8006260:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006264:	42a8      	cmp	r0, r5
 8006266:	d104      	bne.n	8006272 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006268:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800626c:	694d      	ldr	r5, [r1, #20]
 800626e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006272:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006274:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006276:	684a      	ldr	r2, [r1, #4]
 8006278:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627a:	6203      	str	r3, [r0, #32]
}
 800627c:	bc30      	pop	{r4, r5}
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00

08006284 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006286:	6a03      	ldr	r3, [r0, #32]
 8006288:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800628c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006292:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006294:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006298:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800629c:	680d      	ldr	r5, [r1, #0]
 800629e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062a6:	688d      	ldr	r5, [r1, #8]
 80062a8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ac:	4d0f      	ldr	r5, [pc, #60]	; (80062ec <TIM_OC6_SetConfig+0x68>)
 80062ae:	42a8      	cmp	r0, r5
 80062b0:	d00f      	beq.n	80062d2 <TIM_OC6_SetConfig+0x4e>
 80062b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80062b6:	42a8      	cmp	r0, r5
 80062b8:	d00b      	beq.n	80062d2 <TIM_OC6_SetConfig+0x4e>
 80062ba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80062be:	42a8      	cmp	r0, r5
 80062c0:	d007      	beq.n	80062d2 <TIM_OC6_SetConfig+0x4e>
 80062c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80062c6:	42a8      	cmp	r0, r5
 80062c8:	d003      	beq.n	80062d2 <TIM_OC6_SetConfig+0x4e>
 80062ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80062ce:	42a8      	cmp	r0, r5
 80062d0:	d104      	bne.n	80062dc <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062d2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062d6:	694d      	ldr	r5, [r1, #20]
 80062d8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062dc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062de:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062e0:	684a      	ldr	r2, [r1, #4]
 80062e2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e4:	6203      	str	r3, [r0, #32]
}
 80062e6:	bc30      	pop	{r4, r5}
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40012c00 	.word	0x40012c00

080062f0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062f0:	6802      	ldr	r2, [r0, #0]
 80062f2:	68d3      	ldr	r3, [r2, #12]
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fa:	6802      	ldr	r2, [r0, #0]
 80062fc:	6891      	ldr	r1, [r2, #8]
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_TIM_Base_Start_IT+0x28>)
 8006300:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006302:	2b06      	cmp	r3, #6
 8006304:	d006      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x24>
 8006306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630a:	d003      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 800630c:	6813      	ldr	r3, [r2, #0]
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	6013      	str	r3, [r2, #0]
}
 8006314:	2000      	movs	r0, #0
 8006316:	4770      	bx	lr
 8006318:	00010007 	.word	0x00010007

0800631c <HAL_TIM_PWM_MspInit>:
}
 800631c:	4770      	bx	lr

0800631e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800631e:	4770      	bx	lr

08006320 <HAL_TIM_IC_CaptureCallback>:
}
 8006320:	4770      	bx	lr

08006322 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006322:	4770      	bx	lr

08006324 <HAL_TIM_TriggerCallback>:
}
 8006324:	4770      	bx	lr

08006326 <HAL_TIM_IRQHandler>:
{
 8006326:	b510      	push	{r4, lr}
 8006328:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800632a:	6803      	ldr	r3, [r0, #0]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	f012 0f02 	tst.w	r2, #2
 8006332:	d011      	beq.n	8006358 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	f012 0f02 	tst.w	r2, #2
 800633a:	d00d      	beq.n	8006358 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800633c:	f06f 0202 	mvn.w	r2, #2
 8006340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006342:	2301      	movs	r3, #1
 8006344:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006346:	6803      	ldr	r3, [r0, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f013 0f03 	tst.w	r3, #3
 800634e:	d079      	beq.n	8006444 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006350:	f7ff ffe6 	bl	8006320 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006354:	2300      	movs	r3, #0
 8006356:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	f012 0f04 	tst.w	r2, #4
 8006360:	d012      	beq.n	8006388 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	f012 0f04 	tst.w	r2, #4
 8006368:	d00e      	beq.n	8006388 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800636a:	f06f 0204 	mvn.w	r2, #4
 800636e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006370:	2302      	movs	r3, #2
 8006372:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f413 7f40 	tst.w	r3, #768	; 0x300
 800637c:	d068      	beq.n	8006450 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800637e:	4620      	mov	r0, r4
 8006380:	f7ff ffce 	bl	8006320 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006384:	2300      	movs	r3, #0
 8006386:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	f012 0f08 	tst.w	r2, #8
 8006390:	d012      	beq.n	80063b8 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	f012 0f08 	tst.w	r2, #8
 8006398:	d00e      	beq.n	80063b8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800639a:	f06f 0208 	mvn.w	r2, #8
 800639e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063a0:	2304      	movs	r3, #4
 80063a2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	f013 0f03 	tst.w	r3, #3
 80063ac:	d057      	beq.n	800645e <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7ff ffb6 	bl	8006320 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b4:	2300      	movs	r3, #0
 80063b6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	f012 0f10 	tst.w	r2, #16
 80063c0:	d012      	beq.n	80063e8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	f012 0f10 	tst.w	r2, #16
 80063c8:	d00e      	beq.n	80063e8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063ca:	f06f 0210 	mvn.w	r2, #16
 80063ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063d0:	2308      	movs	r3, #8
 80063d2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80063dc:	d046      	beq.n	800646c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80063de:	4620      	mov	r0, r4
 80063e0:	f7ff ff9e 	bl	8006320 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e4:	2300      	movs	r3, #0
 80063e6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	f012 0f01 	tst.w	r2, #1
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	f012 0f01 	tst.w	r2, #1
 80063f8:	d13f      	bne.n	800647a <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006402:	d003      	beq.n	800640c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	f012 0f80 	tst.w	r2, #128	; 0x80
 800640a:	d13d      	bne.n	8006488 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	f012 0f80 	tst.w	r2, #128	; 0x80
 800641c:	d13b      	bne.n	8006496 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006426:	d003      	beq.n	8006430 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800642e:	d139      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	f012 0f20 	tst.w	r2, #32
 8006438:	d003      	beq.n	8006442 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	f012 0f20 	tst.w	r2, #32
 8006440:	d137      	bne.n	80064b2 <HAL_TIM_IRQHandler+0x18c>
}
 8006442:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006444:	f7ff ff6b 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff ff6a 	bl	8006322 <HAL_TIM_PWM_PulseFinishedCallback>
 800644e:	e781      	b.n	8006354 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006450:	4620      	mov	r0, r4
 8006452:	f7ff ff64 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff ff63 	bl	8006322 <HAL_TIM_PWM_PulseFinishedCallback>
 800645c:	e792      	b.n	8006384 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff ff5d 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	4620      	mov	r0, r4
 8006466:	f7ff ff5c 	bl	8006322 <HAL_TIM_PWM_PulseFinishedCallback>
 800646a:	e7a3      	b.n	80063b4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646c:	4620      	mov	r0, r4
 800646e:	f7ff ff56 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006472:	4620      	mov	r0, r4
 8006474:	f7ff ff55 	bl	8006322 <HAL_TIM_PWM_PulseFinishedCallback>
 8006478:	e7b4      	b.n	80063e4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800647a:	f06f 0201 	mvn.w	r2, #1
 800647e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006480:	4620      	mov	r0, r4
 8006482:	f7fd f9b3 	bl	80037ec <HAL_TIM_PeriodElapsedCallback>
 8006486:	e7b8      	b.n	80063fa <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800648c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800648e:	4620      	mov	r0, r4
 8006490:	f000 fb3f 	bl	8006b12 <HAL_TIMEx_BreakCallback>
 8006494:	e7ba      	b.n	800640c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006496:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800649a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800649c:	4620      	mov	r0, r4
 800649e:	f000 fb39 	bl	8006b14 <HAL_TIMEx_Break2Callback>
 80064a2:	e7bc      	b.n	800641e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7ff ff3a 	bl	8006324 <HAL_TIM_TriggerCallback>
 80064b0:	e7be      	b.n	8006430 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064b2:	f06f 0220 	mvn.w	r2, #32
 80064b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 fb29 	bl	8006b10 <HAL_TIMEx_CommutCallback>
}
 80064be:	e7c0      	b.n	8006442 <HAL_TIM_IRQHandler+0x11c>

080064c0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80064c0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c2:	4a4c      	ldr	r2, [pc, #304]	; (80065f4 <TIM_Base_SetConfig+0x134>)
 80064c4:	4290      	cmp	r0, r2
 80064c6:	d032      	beq.n	800652e <TIM_Base_SetConfig+0x6e>
 80064c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80064cc:	d062      	beq.n	8006594 <TIM_Base_SetConfig+0xd4>
 80064ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80064d2:	4290      	cmp	r0, r2
 80064d4:	d026      	beq.n	8006524 <TIM_Base_SetConfig+0x64>
 80064d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064da:	4290      	cmp	r0, r2
 80064dc:	d055      	beq.n	800658a <TIM_Base_SetConfig+0xca>
 80064de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064e2:	4290      	cmp	r0, r2
 80064e4:	d019      	beq.n	800651a <TIM_Base_SetConfig+0x5a>
 80064e6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80064ea:	4290      	cmp	r0, r2
 80064ec:	d048      	beq.n	8006580 <TIM_Base_SetConfig+0xc0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80064f2:	4290      	cmp	r0, r2
 80064f4:	d053      	beq.n	800659e <TIM_Base_SetConfig+0xde>
 80064f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064fa:	4290      	cmp	r0, r2
 80064fc:	d05d      	beq.n	80065ba <TIM_Base_SetConfig+0xfa>
 80064fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006502:	4290      	cmp	r0, r2
 8006504:	d067      	beq.n	80065d6 <TIM_Base_SetConfig+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650a:	694a      	ldr	r2, [r1, #20]
 800650c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800650e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006510:	688b      	ldr	r3, [r1, #8]
 8006512:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006514:	680b      	ldr	r3, [r1, #0]
 8006516:	6283      	str	r3, [r0, #40]	; 0x28
 8006518:	e02f      	b.n	800657a <TIM_Base_SetConfig+0xba>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800651e:	684a      	ldr	r2, [r1, #4]
 8006520:	4313      	orrs	r3, r2
 8006522:	e008      	b.n	8006536 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006528:	684a      	ldr	r2, [r1, #4]
 800652a:	4313      	orrs	r3, r2
 800652c:	e003      	b.n	8006536 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006532:	684a      	ldr	r2, [r1, #4]
 8006534:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653a:	68ca      	ldr	r2, [r1, #12]
 800653c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800653e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006542:	694a      	ldr	r2, [r1, #20]
 8006544:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006546:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006548:	688b      	ldr	r3, [r1, #8]
 800654a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800654c:	680b      	ldr	r3, [r1, #0]
 800654e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006550:	4b28      	ldr	r3, [pc, #160]	; (80065f4 <TIM_Base_SetConfig+0x134>)
 8006552:	4298      	cmp	r0, r3
 8006554:	d00f      	beq.n	8006576 <TIM_Base_SetConfig+0xb6>
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	4298      	cmp	r0, r3
 800655c:	d00b      	beq.n	8006576 <TIM_Base_SetConfig+0xb6>
 800655e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006562:	4298      	cmp	r0, r3
 8006564:	d007      	beq.n	8006576 <TIM_Base_SetConfig+0xb6>
 8006566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800656a:	4298      	cmp	r0, r3
 800656c:	d003      	beq.n	8006576 <TIM_Base_SetConfig+0xb6>
 800656e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006572:	4298      	cmp	r0, r3
 8006574:	d101      	bne.n	800657a <TIM_Base_SetConfig+0xba>
    TIMx->RCR = Structure->RepetitionCounter;
 8006576:	690b      	ldr	r3, [r1, #16]
 8006578:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800657a:	2301      	movs	r3, #1
 800657c:	6143      	str	r3, [r0, #20]
}
 800657e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006584:	684a      	ldr	r2, [r1, #4]
 8006586:	4313      	orrs	r3, r2
 8006588:	e7d5      	b.n	8006536 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800658a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800658e:	684a      	ldr	r2, [r1, #4]
 8006590:	4313      	orrs	r3, r2
 8006592:	e7d0      	b.n	8006536 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006598:	684a      	ldr	r2, [r1, #4]
 800659a:	4313      	orrs	r3, r2
 800659c:	e7cb      	b.n	8006536 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
 800659e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065a2:	68ca      	ldr	r2, [r1, #12]
 80065a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065aa:	694a      	ldr	r2, [r1, #20]
 80065ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80065ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b0:	688b      	ldr	r3, [r1, #8]
 80065b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065b4:	680b      	ldr	r3, [r1, #0]
 80065b6:	6283      	str	r3, [r0, #40]	; 0x28
 80065b8:	e7dd      	b.n	8006576 <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065be:	68ca      	ldr	r2, [r1, #12]
 80065c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c6:	694a      	ldr	r2, [r1, #20]
 80065c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80065ca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065cc:	688b      	ldr	r3, [r1, #8]
 80065ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065d0:	680b      	ldr	r3, [r1, #0]
 80065d2:	6283      	str	r3, [r0, #40]	; 0x28
 80065d4:	e7cf      	b.n	8006576 <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065da:	68ca      	ldr	r2, [r1, #12]
 80065dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e2:	694a      	ldr	r2, [r1, #20]
 80065e4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80065e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e8:	688b      	ldr	r3, [r1, #8]
 80065ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065ec:	680b      	ldr	r3, [r1, #0]
 80065ee:	6283      	str	r3, [r0, #40]	; 0x28
 80065f0:	e7c1      	b.n	8006576 <TIM_Base_SetConfig+0xb6>
 80065f2:	bf00      	nop
 80065f4:	40012c00 	.word	0x40012c00

080065f8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80065f8:	b1a8      	cbz	r0, 8006626 <HAL_TIM_Base_Init+0x2e>
{
 80065fa:	b510      	push	{r4, lr}
 80065fc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80065fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006602:	b15b      	cbz	r3, 800661c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	2302      	movs	r3, #2
 8006606:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800660a:	1d21      	adds	r1, r4, #4
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	f7ff ff57 	bl	80064c0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006612:	2301      	movs	r3, #1
 8006614:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006618:	2000      	movs	r0, #0
}
 800661a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800661c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006620:	f7fd fb52 	bl	8003cc8 <HAL_TIM_Base_MspInit>
 8006624:	e7ee      	b.n	8006604 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006626:	2001      	movs	r0, #1
}
 8006628:	4770      	bx	lr

0800662a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800662a:	b1a8      	cbz	r0, 8006658 <HAL_TIM_PWM_Init+0x2e>
{
 800662c:	b510      	push	{r4, lr}
 800662e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006630:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006634:	b15b      	cbz	r3, 800664e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006636:	2302      	movs	r3, #2
 8006638:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800663c:	1d21      	adds	r1, r4, #4
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	f7ff ff3e 	bl	80064c0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006644:	2301      	movs	r3, #1
 8006646:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800664a:	2000      	movs	r0, #0
}
 800664c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800664e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006652:	f7ff fe63 	bl	800631c <HAL_TIM_PWM_MspInit>
 8006656:	e7ee      	b.n	8006636 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006658:	2001      	movs	r0, #1
}
 800665a:	4770      	bx	lr

0800665c <TIM_OC2_SetConfig>:
{
 800665c:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665e:	6a03      	ldr	r3, [r0, #32]
 8006660:	f023 0310 	bic.w	r3, r3, #16
 8006664:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006666:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006668:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800666a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800666c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006670:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006674:	680d      	ldr	r5, [r1, #0]
 8006676:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800667a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800667e:	688d      	ldr	r5, [r1, #8]
 8006680:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006684:	4d17      	ldr	r5, [pc, #92]	; (80066e4 <TIM_OC2_SetConfig+0x88>)
 8006686:	42a8      	cmp	r0, r5
 8006688:	d017      	beq.n	80066ba <TIM_OC2_SetConfig+0x5e>
 800668a:	4f17      	ldr	r7, [pc, #92]	; (80066e8 <TIM_OC2_SetConfig+0x8c>)
 800668c:	42b8      	cmp	r0, r7
 800668e:	d00c      	beq.n	80066aa <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006690:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8006694:	42a8      	cmp	r0, r5
 8006696:	d017      	beq.n	80066c8 <TIM_OC2_SetConfig+0x6c>
 8006698:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800669c:	42a8      	cmp	r0, r5
 800669e:	d013      	beq.n	80066c8 <TIM_OC2_SetConfig+0x6c>
 80066a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80066a4:	42a8      	cmp	r0, r5
 80066a6:	d116      	bne.n	80066d6 <TIM_OC2_SetConfig+0x7a>
 80066a8:	e00e      	b.n	80066c8 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80066aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066ae:	68cd      	ldr	r5, [r1, #12]
 80066b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80066b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b8:	e006      	b.n	80066c8 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80066ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066be:	68cd      	ldr	r5, [r1, #12]
 80066c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80066c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066c8:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066cc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066ce:	698f      	ldr	r7, [r1, #24]
 80066d0:	433c      	orrs	r4, r7
 80066d2:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80066d6:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80066d8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80066da:	684a      	ldr	r2, [r1, #4]
 80066dc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80066de:	6203      	str	r3, [r0, #32]
}
 80066e0:	bcf0      	pop	{r4, r5, r6, r7}
 80066e2:	4770      	bx	lr
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40013400 	.word	0x40013400

080066ec <HAL_TIM_PWM_ConfigChannel>:
{
 80066ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80066ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	f000 8092 	beq.w	800681c <HAL_TIM_PWM_ConfigChannel+0x130>
 80066f8:	460d      	mov	r5, r1
 80066fa:	4604      	mov	r4, r0
 80066fc:	2301      	movs	r3, #1
 80066fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006702:	2302      	movs	r3, #2
 8006704:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8006708:	2a14      	cmp	r2, #20
 800670a:	d81e      	bhi.n	800674a <HAL_TIM_PWM_ConfigChannel+0x5e>
 800670c:	e8df f002 	tbb	[pc, r2]
 8006710:	1d1d1d0b 	.word	0x1d1d1d0b
 8006714:	1d1d1d24 	.word	0x1d1d1d24
 8006718:	1d1d1d38 	.word	0x1d1d1d38
 800671c:	1d1d1d4b 	.word	0x1d1d1d4b
 8006720:	1d1d1d5f 	.word	0x1d1d1d5f
 8006724:	72          	.byte	0x72
 8006725:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006726:	6800      	ldr	r0, [r0, #0]
 8006728:	f7ff fca2 	bl	8006070 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	6993      	ldr	r3, [r2, #24]
 8006730:	f043 0308 	orr.w	r3, r3, #8
 8006734:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	6993      	ldr	r3, [r2, #24]
 800673a:	f023 0304 	bic.w	r3, r3, #4
 800673e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	6993      	ldr	r3, [r2, #24]
 8006744:	6929      	ldr	r1, [r5, #16]
 8006746:	430b      	orrs	r3, r1
 8006748:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800674a:	2301      	movs	r3, #1
 800674c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006750:	2000      	movs	r0, #0
 8006752:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006756:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006758:	6800      	ldr	r0, [r0, #0]
 800675a:	f7ff ff7f 	bl	800665c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	6993      	ldr	r3, [r2, #24]
 8006762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006766:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	6993      	ldr	r3, [r2, #24]
 800676c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006770:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006772:	6822      	ldr	r2, [r4, #0]
 8006774:	6993      	ldr	r3, [r2, #24]
 8006776:	6929      	ldr	r1, [r5, #16]
 8006778:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800677c:	6193      	str	r3, [r2, #24]
      break;
 800677e:	e7e4      	b.n	800674a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006780:	6800      	ldr	r0, [r0, #0]
 8006782:	f7ff fccd 	bl	8006120 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	69d3      	ldr	r3, [r2, #28]
 800678a:	f043 0308 	orr.w	r3, r3, #8
 800678e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006790:	6822      	ldr	r2, [r4, #0]
 8006792:	69d3      	ldr	r3, [r2, #28]
 8006794:	f023 0304 	bic.w	r3, r3, #4
 8006798:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800679a:	6822      	ldr	r2, [r4, #0]
 800679c:	69d3      	ldr	r3, [r2, #28]
 800679e:	6929      	ldr	r1, [r5, #16]
 80067a0:	430b      	orrs	r3, r1
 80067a2:	61d3      	str	r3, [r2, #28]
      break;
 80067a4:	e7d1      	b.n	800674a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067a6:	6800      	ldr	r0, [r0, #0]
 80067a8:	f7ff fd02 	bl	80061b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	69d3      	ldr	r3, [r2, #28]
 80067b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067b4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	69d3      	ldr	r3, [r2, #28]
 80067ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067be:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	69d3      	ldr	r3, [r2, #28]
 80067c4:	6929      	ldr	r1, [r5, #16]
 80067c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80067ca:	61d3      	str	r3, [r2, #28]
      break;
 80067cc:	e7bd      	b.n	800674a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067ce:	6800      	ldr	r0, [r0, #0]
 80067d0:	f7ff fd24 	bl	800621c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80067d8:	f043 0308 	orr.w	r3, r3, #8
 80067dc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067de:	6822      	ldr	r2, [r4, #0]
 80067e0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80067e2:	f023 0304 	bic.w	r3, r3, #4
 80067e6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067e8:	6822      	ldr	r2, [r4, #0]
 80067ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80067ec:	6929      	ldr	r1, [r5, #16]
 80067ee:	430b      	orrs	r3, r1
 80067f0:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80067f2:	e7aa      	b.n	800674a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067f4:	6800      	ldr	r0, [r0, #0]
 80067f6:	f7ff fd45 	bl	8006284 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067fa:	6822      	ldr	r2, [r4, #0]
 80067fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80067fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006802:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006804:	6822      	ldr	r2, [r4, #0]
 8006806:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800680c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006812:	6929      	ldr	r1, [r5, #16]
 8006814:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006818:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800681a:	e796      	b.n	800674a <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 800681c:	2002      	movs	r0, #2
 800681e:	e79a      	b.n	8006756 <HAL_TIM_PWM_ConfigChannel+0x6a>

08006820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006820:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006822:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006824:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006828:	430a      	orrs	r2, r1
 800682a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800682e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006830:	6083      	str	r3, [r0, #8]
}
 8006832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006838:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	f000 809b 	beq.w	8006978 <HAL_TIM_ConfigClockSource+0x140>
{
 8006842:	b570      	push	{r4, r5, r6, lr}
 8006844:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006846:	2301      	movs	r3, #1
 8006848:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	2302      	movs	r3, #2
 800684e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006852:	6802      	ldr	r2, [r0, #0]
 8006854:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006856:	4b49      	ldr	r3, [pc, #292]	; (800697c <HAL_TIM_ConfigClockSource+0x144>)
 8006858:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800685a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800685c:	680b      	ldr	r3, [r1, #0]
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d070      	beq.n	8006944 <HAL_TIM_ConfigClockSource+0x10c>
 8006862:	d913      	bls.n	800688c <HAL_TIM_ConfigClockSource+0x54>
 8006864:	2b60      	cmp	r3, #96	; 0x60
 8006866:	d052      	beq.n	800690e <HAL_TIM_ConfigClockSource+0xd6>
 8006868:	d923      	bls.n	80068b2 <HAL_TIM_ConfigClockSource+0x7a>
 800686a:	2b70      	cmp	r3, #112	; 0x70
 800686c:	d03d      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0xb2>
 800686e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006872:	d145      	bne.n	8006900 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 8006874:	68cb      	ldr	r3, [r1, #12]
 8006876:	684a      	ldr	r2, [r1, #4]
 8006878:	6889      	ldr	r1, [r1, #8]
 800687a:	6820      	ldr	r0, [r4, #0]
 800687c:	f7ff ffd0 	bl	8006820 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006880:	6822      	ldr	r2, [r4, #0]
 8006882:	6893      	ldr	r3, [r2, #8]
 8006884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006888:	6093      	str	r3, [r2, #8]
      break;
 800688a:	e039      	b.n	8006900 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800688c:	2b10      	cmp	r3, #16
 800688e:	d007      	beq.n	80068a0 <HAL_TIM_ConfigClockSource+0x68>
 8006890:	d904      	bls.n	800689c <HAL_TIM_ConfigClockSource+0x64>
 8006892:	2b20      	cmp	r3, #32
 8006894:	d004      	beq.n	80068a0 <HAL_TIM_ConfigClockSource+0x68>
 8006896:	2b30      	cmp	r3, #48	; 0x30
 8006898:	d002      	beq.n	80068a0 <HAL_TIM_ConfigClockSource+0x68>
 800689a:	e031      	b.n	8006900 <HAL_TIM_ConfigClockSource+0xc8>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d12f      	bne.n	8006900 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068a0:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80068a2:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80068a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068a8:	f043 0307 	orr.w	r3, r3, #7
 80068ac:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80068ae:	608b      	str	r3, [r1, #8]
 80068b0:	e026      	b.n	8006900 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 80068b2:	2b50      	cmp	r3, #80	; 0x50
 80068b4:	d124      	bne.n	8006900 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	6848      	ldr	r0, [r1, #4]
 80068ba:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80068bc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068be:	6a1d      	ldr	r5, [r3, #32]
 80068c0:	f025 0501 	bic.w	r5, r5, #1
 80068c4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068cc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068d0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80068d4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80068d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068da:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80068dc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068e2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80068e6:	6093      	str	r3, [r2, #8]
 80068e8:	e00a      	b.n	8006900 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 80068ea:	68cb      	ldr	r3, [r1, #12]
 80068ec:	684a      	ldr	r2, [r1, #4]
 80068ee:	6889      	ldr	r1, [r1, #8]
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	f7ff ff95 	bl	8006820 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068f6:	6822      	ldr	r2, [r4, #0]
 80068f8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80068fe:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006900:	2301      	movs	r3, #1
 8006902:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006906:	2000      	movs	r0, #0
 8006908:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800690c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	684d      	ldr	r5, [r1, #4]
 8006912:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006914:	6a18      	ldr	r0, [r3, #32]
 8006916:	f020 0010 	bic.w	r0, r0, #16
 800691a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800691e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006920:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006924:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800692c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006930:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8006932:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006934:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8006936:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800693c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006940:	6093      	str	r3, [r2, #8]
 8006942:	e7dd      	b.n	8006900 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	6848      	ldr	r0, [r1, #4]
 8006948:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800694a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694c:	6a1d      	ldr	r5, [r3, #32]
 800694e:	f025 0501 	bic.w	r5, r5, #1
 8006952:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006954:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006956:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800695a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800695e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006962:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8006964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006966:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006968:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800696a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800696c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006970:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006974:	6093      	str	r3, [r2, #8]
 8006976:	e7c3      	b.n	8006900 <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 8006978:	2002      	movs	r0, #2
}
 800697a:	4770      	bx	lr
 800697c:	fffe0088 	.word	0xfffe0088

08006980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006980:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006982:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006986:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006988:	2401      	movs	r4, #1
 800698a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800698c:	ea23 0304 	bic.w	r3, r3, r4
 8006990:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006992:	6a03      	ldr	r3, [r0, #32]
 8006994:	408a      	lsls	r2, r1
 8006996:	431a      	orrs	r2, r3
 8006998:	6202      	str	r2, [r0, #32]
}
 800699a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_TIM_PWM_Stop>:
{
 80069a0:	b510      	push	{r4, lr}
 80069a2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069a4:	2200      	movs	r2, #0
 80069a6:	6800      	ldr	r0, [r0, #0]
 80069a8:	f7ff ffea 	bl	8006980 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	4a1a      	ldr	r2, [pc, #104]	; (8006a18 <HAL_TIM_PWM_Stop+0x78>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00f      	beq.n	80069d4 <HAL_TIM_PWM_Stop+0x34>
 80069b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <HAL_TIM_PWM_Stop+0x34>
 80069bc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <HAL_TIM_PWM_Stop+0x34>
 80069c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <HAL_TIM_PWM_Stop+0x34>
 80069cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d10d      	bne.n	80069f0 <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 80069d4:	6a19      	ldr	r1, [r3, #32]
 80069d6:	f241 1211 	movw	r2, #4369	; 0x1111
 80069da:	4211      	tst	r1, r2
 80069dc:	d108      	bne.n	80069f0 <HAL_TIM_PWM_Stop+0x50>
 80069de:	6a19      	ldr	r1, [r3, #32]
 80069e0:	f240 4244 	movw	r2, #1092	; 0x444
 80069e4:	4211      	tst	r1, r2
 80069e6:	d103      	bne.n	80069f0 <HAL_TIM_PWM_Stop+0x50>
 80069e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069ee:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	6a19      	ldr	r1, [r3, #32]
 80069f4:	f241 1211 	movw	r2, #4369	; 0x1111
 80069f8:	4211      	tst	r1, r2
 80069fa:	d108      	bne.n	8006a0e <HAL_TIM_PWM_Stop+0x6e>
 80069fc:	6a19      	ldr	r1, [r3, #32]
 80069fe:	f240 4244 	movw	r2, #1092	; 0x444
 8006a02:	4211      	tst	r1, r2
 8006a04:	d103      	bne.n	8006a0e <HAL_TIM_PWM_Stop+0x6e>
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	f022 0201 	bic.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006a14:	2000      	movs	r0, #0
 8006a16:	bd10      	pop	{r4, pc}
 8006a18:	40012c00 	.word	0x40012c00

08006a1c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d028      	beq.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 8006a24:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006a26:	2301      	movs	r3, #1
 8006a28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a32:	6804      	ldr	r4, [r0, #0]
 8006a34:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a36:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a38:	4d10      	ldr	r5, [pc, #64]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8006a3a:	42ac      	cmp	r4, r5
 8006a3c:	d003      	beq.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8006a3e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006a42:	42ac      	cmp	r4, r5
 8006a44:	d103      	bne.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a4a:	684d      	ldr	r5, [r1, #4]
 8006a4c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a52:	680d      	ldr	r5, [r1, #0]
 8006a54:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a5a:	6889      	ldr	r1, [r1, #8]
 8006a5c:	430a      	orrs	r2, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a5e:	6063      	str	r3, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a60:	6803      	ldr	r3, [r0, #0]
 8006a62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006a70:	4618      	mov	r0, r3
}
 8006a72:	bc30      	pop	{r4, r5}
 8006a74:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006a76:	2002      	movs	r0, #2
}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40012c00 	.word	0x40012c00

08006a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d03e      	beq.n	8006b06 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8006a88:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a90:	68cb      	ldr	r3, [r1, #12]
 8006a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a96:	688a      	ldr	r2, [r1, #8]
 8006a98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a9e:	684a      	ldr	r2, [r1, #4]
 8006aa0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa6:	680a      	ldr	r2, [r1, #0]
 8006aa8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aae:	690a      	ldr	r2, [r1, #16]
 8006ab0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ab6:	694a      	ldr	r2, [r1, #20]
 8006ab8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006abe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006ac0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ac2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006ac6:	698a      	ldr	r2, [r1, #24]
 8006ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006acc:	6802      	ldr	r2, [r0, #0]
 8006ace:	4c0f      	ldr	r4, [pc, #60]	; (8006b0c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8006ad0:	42a2      	cmp	r2, r4
 8006ad2:	d003      	beq.n	8006adc <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8006ad4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006ad8:	42a2      	cmp	r2, r4
 8006ada:	d10c      	bne.n	8006af6 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006adc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ae0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006ae2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aea:	69cc      	ldr	r4, [r1, #28]
 8006aec:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006aee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006af2:	6a09      	ldr	r1, [r1, #32]
 8006af4:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006af6:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006af8:	2300      	movs	r3, #0
 8006afa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006afe:	4618      	mov	r0, r3
}
 8006b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b04:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006b06:	2002      	movs	r0, #2
}
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00

08006b10 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b10:	4770      	bx	lr

08006b12 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b14:	4770      	bx	lr

08006b16 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b16:	6802      	ldr	r2, [r0, #0]
 8006b18:	6813      	ldr	r3, [r2, #0]
 8006b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b1e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b20:	6802      	ldr	r2, [r0, #0]
 8006b22:	6893      	ldr	r3, [r2, #8]
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b2a:	2320      	movs	r3, #32
 8006b2c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6603      	str	r3, [r0, #96]	; 0x60
}
 8006b32:	4770      	bx	lr

08006b34 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b34:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d15a      	bne.n	8006bf0 <HAL_UART_Receive_IT+0xbc>
    if ((pData == NULL) || (Size == 0U))
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	d05a      	beq.n	8006bf4 <HAL_UART_Receive_IT+0xc0>
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	d05a      	beq.n	8006bf8 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 8006b42:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d058      	beq.n	8006bfc <HAL_UART_Receive_IT+0xc8>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 8006b50:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006b52:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8006b56:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8006b5e:	6883      	ldr	r3, [r0, #8]
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b64:	d006      	beq.n	8006b74 <HAL_UART_Receive_IT+0x40>
 8006b66:	b9a3      	cbnz	r3, 8006b92 <HAL_UART_Receive_IT+0x5e>
 8006b68:	6903      	ldr	r3, [r0, #16]
 8006b6a:	b973      	cbnz	r3, 8006b8a <HAL_UART_Receive_IT+0x56>
 8006b6c:	23ff      	movs	r3, #255	; 0xff
 8006b6e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006b72:	e014      	b.n	8006b9e <HAL_UART_Receive_IT+0x6a>
 8006b74:	6903      	ldr	r3, [r0, #16]
 8006b76:	b923      	cbnz	r3, 8006b82 <HAL_UART_Receive_IT+0x4e>
 8006b78:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006b7c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006b80:	e00d      	b.n	8006b9e <HAL_UART_Receive_IT+0x6a>
 8006b82:	23ff      	movs	r3, #255	; 0xff
 8006b84:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006b88:	e009      	b.n	8006b9e <HAL_UART_Receive_IT+0x6a>
 8006b8a:	237f      	movs	r3, #127	; 0x7f
 8006b8c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006b90:	e005      	b.n	8006b9e <HAL_UART_Receive_IT+0x6a>
 8006b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b96:	d01b      	beq.n	8006bd0 <HAL_UART_Receive_IT+0x9c>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ba2:	2322      	movs	r3, #34	; 0x22
 8006ba4:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba6:	6802      	ldr	r2, [r0, #0]
 8006ba8:	6893      	ldr	r3, [r2, #8]
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bb0:	6883      	ldr	r3, [r0, #8]
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb6:	d015      	beq.n	8006be4 <HAL_UART_Receive_IT+0xb0>
      huart->RxISR = UART_RxISR_8BIT;
 8006bb8:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <HAL_UART_Receive_IT+0xcc>)
 8006bba:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006bc2:	6801      	ldr	r1, [r0, #0]
 8006bc4:	680a      	ldr	r2, [r1, #0]
 8006bc6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006bca:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8006bcc:	4618      	mov	r0, r3
 8006bce:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8006bd0:	6903      	ldr	r3, [r0, #16]
 8006bd2:	b91b      	cbnz	r3, 8006bdc <HAL_UART_Receive_IT+0xa8>
 8006bd4:	237f      	movs	r3, #127	; 0x7f
 8006bd6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006bda:	e7e0      	b.n	8006b9e <HAL_UART_Receive_IT+0x6a>
 8006bdc:	233f      	movs	r3, #63	; 0x3f
 8006bde:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006be2:	e7dc      	b.n	8006b9e <HAL_UART_Receive_IT+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be4:	6903      	ldr	r3, [r0, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e6      	bne.n	8006bb8 <HAL_UART_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <HAL_UART_Receive_IT+0xd0>)
 8006bec:	6603      	str	r3, [r0, #96]	; 0x60
 8006bee:	e7e5      	b.n	8006bbc <HAL_UART_Receive_IT+0x88>
    return HAL_BUSY;
 8006bf0:	2002      	movs	r0, #2
 8006bf2:	4770      	bx	lr
      return HAL_ERROR;
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	4770      	bx	lr
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	4770      	bx	lr
    __HAL_LOCK(huart);
 8006bfc:	2002      	movs	r0, #2
}
 8006bfe:	4770      	bx	lr
 8006c00:	08006ced 	.word	0x08006ced
 8006c04:	08006d4d 	.word	0x08006d4d

08006c08 <HAL_UART_Transmit_DMA>:
{
 8006c08:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8006c0a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8006c0c:	2c20      	cmp	r4, #32
 8006c0e:	d13e      	bne.n	8006c8e <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 8006c10:	2900      	cmp	r1, #0
 8006c12:	d03e      	beq.n	8006c92 <HAL_UART_Transmit_DMA+0x8a>
 8006c14:	2a00      	cmp	r2, #0
 8006c16:	d03e      	beq.n	8006c96 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_LOCK(huart);
 8006c18:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d03c      	beq.n	8006c9a <HAL_UART_Transmit_DMA+0x92>
 8006c20:	4613      	mov	r3, r2
 8006c22:	4604      	mov	r4, r0
 8006c24:	2201      	movs	r2, #1
 8006c26:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8006c2a:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006c2c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c30:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	2200      	movs	r2, #0
 8006c36:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c38:	2221      	movs	r2, #33	; 0x21
 8006c3a:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8006c3c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006c3e:	b18a      	cbz	r2, 8006c64 <HAL_UART_Transmit_DMA+0x5c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c40:	4917      	ldr	r1, [pc, #92]	; (8006ca0 <HAL_UART_Transmit_DMA+0x98>)
 8006c42:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c44:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006c46:	4917      	ldr	r1, [pc, #92]	; (8006ca4 <HAL_UART_Transmit_DMA+0x9c>)
 8006c48:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c4a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006c4c:	4916      	ldr	r1, [pc, #88]	; (8006ca8 <HAL_UART_Transmit_DMA+0xa0>)
 8006c4e:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006c50:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006c52:	2100      	movs	r1, #0
 8006c54:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006c56:	6802      	ldr	r2, [r0, #0]
 8006c58:	3228      	adds	r2, #40	; 0x28
 8006c5a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006c5c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8006c5e:	f7fd fabf 	bl	80041e0 <HAL_DMA_Start_IT>
 8006c62:	b958      	cbnz	r0, 8006c7c <HAL_UART_Transmit_DMA+0x74>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	2240      	movs	r2, #64	; 0x40
 8006c68:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c70:	6822      	ldr	r2, [r4, #0]
 8006c72:	6893      	ldr	r3, [r2, #8]
 8006c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c78:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8006c7a:	e009      	b.n	8006c90 <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8006c80:	2300      	movs	r3, #0
 8006c82:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8006c86:	2320      	movs	r3, #32
 8006c88:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e000      	b.n	8006c90 <HAL_UART_Transmit_DMA+0x88>
    return HAL_BUSY;
 8006c8e:	2002      	movs	r0, #2
}
 8006c90:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8006c92:	2001      	movs	r0, #1
 8006c94:	e7fc      	b.n	8006c90 <HAL_UART_Transmit_DMA+0x88>
 8006c96:	2001      	movs	r0, #1
 8006c98:	e7fa      	b.n	8006c90 <HAL_UART_Transmit_DMA+0x88>
    __HAL_LOCK(huart);
 8006c9a:	2002      	movs	r0, #2
 8006c9c:	e7f8      	b.n	8006c90 <HAL_UART_Transmit_DMA+0x88>
 8006c9e:	bf00      	nop
 8006ca0:	08006caf 	.word	0x08006caf
 8006ca4:	08006ce3 	.word	0x08006ce3
 8006ca8:	08006daf 	.word	0x08006daf

08006cac <HAL_UART_TxCpltCallback>:
}
 8006cac:	4770      	bx	lr

08006cae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cae:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cb0:	6a83      	ldr	r3, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006cb2:	6802      	ldr	r2, [r0, #0]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	f012 0f20 	tst.w	r2, #32
 8006cba:	d10d      	bne.n	8006cd8 <UART_DMATransmitCplt+0x2a>
  {
    huart->TxXferCount = 0U;
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cc2:	6819      	ldr	r1, [r3, #0]
 8006cc4:	688a      	ldr	r2, [r1, #8]
 8006cc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cca:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	6813      	ldr	r3, [r2, #0]
 8006cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cd4:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cd6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff ffe7 	bl	8006cac <HAL_UART_TxCpltCallback>
}
 8006cde:	e7fa      	b.n	8006cd6 <UART_DMATransmitCplt+0x28>

08006ce0 <HAL_UART_TxHalfCpltCallback>:
}
 8006ce0:	4770      	bx	lr

08006ce2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ce2:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ce4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006ce6:	f7ff fffb 	bl	8006ce0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cea:	bd08      	pop	{r3, pc}

08006cec <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cec:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cee:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006cf0:	2b22      	cmp	r3, #34	; 0x22
 8006cf2:	d005      	beq.n	8006d00 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cf4:	6802      	ldr	r2, [r0, #0]
 8006cf6:	8b13      	ldrh	r3, [r2, #24]
 8006cf8:	f043 0308 	orr.w	r3, r3, #8
 8006cfc:	8313      	strh	r3, [r2, #24]
  }
}
 8006cfe:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d00:	6803      	ldr	r3, [r0, #0]
 8006d02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d04:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006d06:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
 8006d0a:	400b      	ands	r3, r1
 8006d0c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8006d0e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006d10:	3301      	adds	r3, #1
 8006d12:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006d14:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8006d20:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1e9      	bne.n	8006cfe <UART_RxISR_8BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d2a:	6802      	ldr	r2, [r0, #0]
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d32:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d34:	6802      	ldr	r2, [r0, #0]
 8006d36:	6893      	ldr	r3, [r2, #8]
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	2320      	movs	r3, #32
 8006d40:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8006d46:	f7fb fe7b 	bl	8002a40 <HAL_UART_RxCpltCallback>
 8006d4a:	e7d8      	b.n	8006cfe <UART_RxISR_8BIT+0x12>

08006d4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d4c:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d4e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006d50:	2b22      	cmp	r3, #34	; 0x22
 8006d52:	d005      	beq.n	8006d60 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d54:	6802      	ldr	r2, [r0, #0]
 8006d56:	8b13      	ldrh	r3, [r2, #24]
 8006d58:	f043 0308 	orr.w	r3, r3, #8
 8006d5c:	8313      	strh	r3, [r2, #24]
  }
}
 8006d5e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d60:	6803      	ldr	r3, [r0, #0]
 8006d62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d64:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d66:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006d6a:	400b      	ands	r3, r1
 8006d6c:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8006d6e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006d70:	3302      	adds	r3, #2
 8006d72:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006d74:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8006d80:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e9      	bne.n	8006d5e <UART_RxISR_16BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8a:	6802      	ldr	r2, [r0, #0]
 8006d8c:	6813      	ldr	r3, [r2, #0]
 8006d8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d92:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d94:	6802      	ldr	r2, [r0, #0]
 8006d96:	6893      	ldr	r3, [r2, #8]
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	2320      	movs	r3, #32
 8006da0:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8006da6:	f7fb fe4b 	bl	8002a40 <HAL_UART_RxCpltCallback>
 8006daa:	e7d8      	b.n	8006d5e <UART_RxISR_16BIT+0x12>

08006dac <HAL_UART_ErrorCallback>:
}
 8006dac:	4770      	bx	lr

08006dae <UART_DMAError>:
{
 8006dae:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006db0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006db2:	6f60      	ldr	r0, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006db4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006dbe:	d001      	beq.n	8006dc4 <UART_DMAError+0x16>
 8006dc0:	2821      	cmp	r0, #33	; 0x21
 8006dc2:	d00e      	beq.n	8006de2 <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dcc:	d001      	beq.n	8006dd2 <UART_DMAError+0x24>
 8006dce:	2922      	cmp	r1, #34	; 0x22
 8006dd0:	d011      	beq.n	8006df6 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dd2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006dd4:	f043 0310 	orr.w	r3, r3, #16
 8006dd8:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7ff ffe6 	bl	8006dac <HAL_UART_ErrorCallback>
}
 8006de0:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006dee:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006df0:	2320      	movs	r3, #32
 8006df2:	6763      	str	r3, [r4, #116]	; 0x74
 8006df4:	e7e6      	b.n	8006dc4 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7ff fe8a 	bl	8006b16 <UART_EndRxTransfer>
 8006e02:	e7e6      	b.n	8006dd2 <UART_DMAError+0x24>

08006e04 <HAL_UART_IRQHandler>:
{
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e08:	6802      	ldr	r2, [r0, #0]
 8006e0a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e0c:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e0e:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8006e10:	f013 0f0f 	tst.w	r3, #15
 8006e14:	d10c      	bne.n	8006e30 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e16:	f013 0f20 	tst.w	r3, #32
 8006e1a:	d07e      	beq.n	8006f1a <HAL_UART_IRQHandler+0x116>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e1c:	f011 0f20 	tst.w	r1, #32
 8006e20:	d07b      	beq.n	8006f1a <HAL_UART_IRQHandler+0x116>
      if (huart->RxISR != NULL)
 8006e22:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 8096 	beq.w	8006f56 <HAL_UART_IRQHandler+0x152>
        huart->RxISR(huart);
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4798      	blx	r3
 8006e2e:	e092      	b.n	8006f56 <HAL_UART_IRQHandler+0x152>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e30:	f010 0501 	ands.w	r5, r0, #1
 8006e34:	d102      	bne.n	8006e3c <HAL_UART_IRQHandler+0x38>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006e36:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006e3a:	d06e      	beq.n	8006f1a <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e3c:	f013 0f01 	tst.w	r3, #1
 8006e40:	d007      	beq.n	8006e52 <HAL_UART_IRQHandler+0x4e>
 8006e42:	f411 7f80 	tst.w	r1, #256	; 0x100
 8006e46:	d004      	beq.n	8006e52 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e48:	2001      	movs	r0, #1
 8006e4a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e4c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006e4e:	4302      	orrs	r2, r0
 8006e50:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e52:	f013 0f02 	tst.w	r3, #2
 8006e56:	d04c      	beq.n	8006ef2 <HAL_UART_IRQHandler+0xee>
 8006e58:	b185      	cbz	r5, 8006e7c <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	2002      	movs	r0, #2
 8006e5e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e60:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006e62:	f042 0204 	orr.w	r2, r2, #4
 8006e66:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e68:	f013 0f04 	tst.w	r3, #4
 8006e6c:	d006      	beq.n	8006e7c <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e6e:	6822      	ldr	r2, [r4, #0]
 8006e70:	2004      	movs	r0, #4
 8006e72:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e74:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006e76:	f042 0202 	orr.w	r2, r2, #2
 8006e7a:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e7c:	f013 0f08 	tst.w	r3, #8
 8006e80:	d009      	beq.n	8006e96 <HAL_UART_IRQHandler+0x92>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e82:	f011 0f20 	tst.w	r1, #32
 8006e86:	d100      	bne.n	8006e8a <HAL_UART_IRQHandler+0x86>
 8006e88:	b12d      	cbz	r5, 8006e96 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	2008      	movs	r0, #8
 8006e8e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e90:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006e92:	4302      	orrs	r2, r0
 8006e94:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e96:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006e98:	2a00      	cmp	r2, #0
 8006e9a:	d05c      	beq.n	8006f56 <HAL_UART_IRQHandler+0x152>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e9c:	f013 0f20 	tst.w	r3, #32
 8006ea0:	d006      	beq.n	8006eb0 <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ea2:	f011 0f20 	tst.w	r1, #32
 8006ea6:	d003      	beq.n	8006eb0 <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 8006ea8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006eaa:	b10b      	cbz	r3, 8006eb0 <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 8006eac:	4620      	mov	r0, r4
 8006eae:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006eb0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006eba:	d102      	bne.n	8006ec2 <HAL_UART_IRQHandler+0xbe>
 8006ebc:	f012 0f08 	tst.w	r2, #8
 8006ec0:	d025      	beq.n	8006f0e <HAL_UART_IRQHandler+0x10a>
        UART_EndRxTransfer(huart);
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7ff fe27 	bl	8006b16 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ed0:	d019      	beq.n	8006f06 <HAL_UART_IRQHandler+0x102>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed8:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006eda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006edc:	b17b      	cbz	r3, 8006efe <HAL_UART_IRQHandler+0xfa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ede:	4a24      	ldr	r2, [pc, #144]	; (8006f70 <HAL_UART_IRQHandler+0x16c>)
 8006ee0:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ee2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006ee4:	f7fd f9c9 	bl	800427a <HAL_DMA_Abort_IT>
 8006ee8:	b3a8      	cbz	r0, 8006f56 <HAL_UART_IRQHandler+0x152>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006eec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006eee:	4798      	blx	r3
 8006ef0:	e031      	b.n	8006f56 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ef2:	f013 0f04 	tst.w	r3, #4
 8006ef6:	d0c1      	beq.n	8006e7c <HAL_UART_IRQHandler+0x78>
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	d1b8      	bne.n	8006e6e <HAL_UART_IRQHandler+0x6a>
 8006efc:	e7be      	b.n	8006e7c <HAL_UART_IRQHandler+0x78>
            HAL_UART_ErrorCallback(huart);
 8006efe:	4620      	mov	r0, r4
 8006f00:	f7ff ff54 	bl	8006dac <HAL_UART_ErrorCallback>
 8006f04:	e027      	b.n	8006f56 <HAL_UART_IRQHandler+0x152>
          HAL_UART_ErrorCallback(huart);
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7ff ff50 	bl	8006dac <HAL_UART_ErrorCallback>
 8006f0c:	e023      	b.n	8006f56 <HAL_UART_IRQHandler+0x152>
        HAL_UART_ErrorCallback(huart);
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7ff ff4c 	bl	8006dac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f14:	2300      	movs	r3, #0
 8006f16:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006f18:	e01d      	b.n	8006f56 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f1a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006f1e:	d002      	beq.n	8006f26 <HAL_UART_IRQHandler+0x122>
 8006f20:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8006f24:	d10a      	bne.n	8006f3c <HAL_UART_IRQHandler+0x138>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f2a:	d00e      	beq.n	8006f4a <HAL_UART_IRQHandler+0x146>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f2c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006f30:	d00b      	beq.n	8006f4a <HAL_UART_IRQHandler+0x146>
    if (huart->TxISR != NULL)
 8006f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f34:	b17b      	cbz	r3, 8006f56 <HAL_UART_IRQHandler+0x152>
      huart->TxISR(huart);
 8006f36:	4620      	mov	r0, r4
 8006f38:	4798      	blx	r3
 8006f3a:	e00c      	b.n	8006f56 <HAL_UART_IRQHandler+0x152>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f40:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 fbb4 	bl	80076b0 <HAL_UARTEx_WakeupCallback>
    return;
 8006f48:	e005      	b.n	8006f56 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f4e:	d002      	beq.n	8006f56 <HAL_UART_IRQHandler+0x152>
 8006f50:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006f54:	d100      	bne.n	8006f58 <HAL_UART_IRQHandler+0x154>
}
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f58:	6813      	ldr	r3, [r2, #0]
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5e:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006f60:	2320      	movs	r3, #32
 8006f62:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7ff fe9f 	bl	8006cac <HAL_UART_TxCpltCallback>
 8006f6e:	e7f2      	b.n	8006f56 <HAL_UART_IRQHandler+0x152>
 8006f70:	08006f75 	.word	0x08006f75

08006f74 <UART_DMAAbortOnError>:
{
 8006f74:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f76:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f7e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8006f82:	f7ff ff13 	bl	8006dac <HAL_UART_ErrorCallback>
}
 8006f86:	bd08      	pop	{r3, pc}

08006f88 <UART_SetConfig>:
{
 8006f88:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006f8c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f8e:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f90:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f92:	68a3      	ldr	r3, [r4, #8]
 8006f94:	6922      	ldr	r2, [r4, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	6962      	ldr	r2, [r4, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	69e2      	ldr	r2, [r4, #28]
 8006f9e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fa0:	4aab      	ldr	r2, [pc, #684]	; (8007250 <UART_SetConfig+0x2c8>)
 8006fa2:	4002      	ands	r2, r0
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa8:	6822      	ldr	r2, [r4, #0]
 8006faa:	6853      	ldr	r3, [r2, #4]
 8006fac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006fb0:	68e1      	ldr	r1, [r4, #12]
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fb6:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fb8:	6822      	ldr	r2, [r4, #0]
 8006fba:	4ba6      	ldr	r3, [pc, #664]	; (8007254 <UART_SetConfig+0x2cc>)
 8006fbc:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8006fbe:	bf1c      	itt	ne
 8006fc0:	6a23      	ldrne	r3, [r4, #32]
 8006fc2:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fc4:	6893      	ldr	r3, [r2, #8]
 8006fc6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	4aa1      	ldr	r2, [pc, #644]	; (8007258 <UART_SetConfig+0x2d0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d023      	beq.n	800701e <UART_SetConfig+0x96>
 8006fd6:	4aa1      	ldr	r2, [pc, #644]	; (800725c <UART_SetConfig+0x2d4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d032      	beq.n	8007042 <UART_SetConfig+0xba>
 8006fdc:	4aa0      	ldr	r2, [pc, #640]	; (8007260 <UART_SetConfig+0x2d8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d04c      	beq.n	800707c <UART_SetConfig+0xf4>
 8006fe2:	4aa0      	ldr	r2, [pc, #640]	; (8007264 <UART_SetConfig+0x2dc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d060      	beq.n	80070aa <UART_SetConfig+0x122>
 8006fe8:	4a9f      	ldr	r2, [pc, #636]	; (8007268 <UART_SetConfig+0x2e0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d074      	beq.n	80070d8 <UART_SetConfig+0x150>
 8006fee:	4a99      	ldr	r2, [pc, #612]	; (8007254 <UART_SetConfig+0x2cc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	f000 808b 	beq.w	800710c <UART_SetConfig+0x184>
 8006ff6:	2510      	movs	r5, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ff8:	69e3      	ldr	r3, [r4, #28]
 8006ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffe:	f000 813b 	beq.w	8007278 <UART_SetConfig+0x2f0>
    switch (clocksource)
 8007002:	2d08      	cmp	r5, #8
 8007004:	f200 81c5 	bhi.w	8007392 <UART_SetConfig+0x40a>
 8007008:	e8df f015 	tbh	[pc, r5, lsl #1]
 800700c:	019b0185 	.word	0x019b0185
 8007010:	01c301a5 	.word	0x01c301a5
 8007014:	01c301b0 	.word	0x01c301b0
 8007018:	01c301c3 	.word	0x01c301c3
 800701c:	01ba      	.short	0x01ba
  UART_GETCLOCKSOURCE(huart, clocksource);
 800701e:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8007022:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007026:	f002 0203 	and.w	r2, r2, #3
 800702a:	2a03      	cmp	r2, #3
 800702c:	d807      	bhi.n	800703e <UART_SetConfig+0xb6>
 800702e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007032:	0087      	.short	0x0087
 8007034:	01c30004 	.word	0x01c30004
 8007038:	01c5      	.short	0x01c5
 800703a:	2504      	movs	r5, #4
 800703c:	e7dc      	b.n	8006ff8 <UART_SetConfig+0x70>
 800703e:	2510      	movs	r5, #16
 8007040:	e7da      	b.n	8006ff8 <UART_SetConfig+0x70>
 8007042:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8007046:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800704a:	f002 020c 	and.w	r2, r2, #12
 800704e:	2a0c      	cmp	r2, #12
 8007050:	d812      	bhi.n	8007078 <UART_SetConfig+0xf0>
 8007052:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007056:	0088      	.short	0x0088
 8007058:	00110011 	.word	0x00110011
 800705c:	000d0011 	.word	0x000d0011
 8007060:	00110011 	.word	0x00110011
 8007064:	01b50011 	.word	0x01b50011
 8007068:	00110011 	.word	0x00110011
 800706c:	000f0011 	.word	0x000f0011
 8007070:	2504      	movs	r5, #4
 8007072:	e7c1      	b.n	8006ff8 <UART_SetConfig+0x70>
 8007074:	2508      	movs	r5, #8
 8007076:	e7bf      	b.n	8006ff8 <UART_SetConfig+0x70>
 8007078:	2510      	movs	r5, #16
 800707a:	e7bd      	b.n	8006ff8 <UART_SetConfig+0x70>
 800707c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8007080:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007084:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007088:	2a10      	cmp	r2, #16
 800708a:	d00a      	beq.n	80070a2 <UART_SetConfig+0x11a>
 800708c:	d906      	bls.n	800709c <UART_SetConfig+0x114>
 800708e:	2a20      	cmp	r2, #32
 8007090:	f000 8198 	beq.w	80073c4 <UART_SetConfig+0x43c>
 8007094:	2a30      	cmp	r2, #48	; 0x30
 8007096:	d106      	bne.n	80070a6 <UART_SetConfig+0x11e>
 8007098:	2508      	movs	r5, #8
 800709a:	e7ad      	b.n	8006ff8 <UART_SetConfig+0x70>
 800709c:	b91a      	cbnz	r2, 80070a6 <UART_SetConfig+0x11e>
 800709e:	2500      	movs	r5, #0
 80070a0:	e04f      	b.n	8007142 <UART_SetConfig+0x1ba>
 80070a2:	2504      	movs	r5, #4
 80070a4:	e7a8      	b.n	8006ff8 <UART_SetConfig+0x70>
 80070a6:	2510      	movs	r5, #16
 80070a8:	e7a6      	b.n	8006ff8 <UART_SetConfig+0x70>
 80070aa:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80070ae:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80070b2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80070b6:	2a40      	cmp	r2, #64	; 0x40
 80070b8:	d00a      	beq.n	80070d0 <UART_SetConfig+0x148>
 80070ba:	d906      	bls.n	80070ca <UART_SetConfig+0x142>
 80070bc:	2a80      	cmp	r2, #128	; 0x80
 80070be:	f000 8183 	beq.w	80073c8 <UART_SetConfig+0x440>
 80070c2:	2ac0      	cmp	r2, #192	; 0xc0
 80070c4:	d106      	bne.n	80070d4 <UART_SetConfig+0x14c>
 80070c6:	2508      	movs	r5, #8
 80070c8:	e796      	b.n	8006ff8 <UART_SetConfig+0x70>
 80070ca:	b91a      	cbnz	r2, 80070d4 <UART_SetConfig+0x14c>
 80070cc:	2500      	movs	r5, #0
 80070ce:	e038      	b.n	8007142 <UART_SetConfig+0x1ba>
 80070d0:	2504      	movs	r5, #4
 80070d2:	e791      	b.n	8006ff8 <UART_SetConfig+0x70>
 80070d4:	2510      	movs	r5, #16
 80070d6:	e78f      	b.n	8006ff8 <UART_SetConfig+0x70>
 80070d8:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80070dc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80070e0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80070e4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80070e8:	d00c      	beq.n	8007104 <UART_SetConfig+0x17c>
 80070ea:	d908      	bls.n	80070fe <UART_SetConfig+0x176>
 80070ec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80070f0:	f000 816c 	beq.w	80073cc <UART_SetConfig+0x444>
 80070f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80070f8:	d106      	bne.n	8007108 <UART_SetConfig+0x180>
 80070fa:	2508      	movs	r5, #8
 80070fc:	e77c      	b.n	8006ff8 <UART_SetConfig+0x70>
 80070fe:	b91a      	cbnz	r2, 8007108 <UART_SetConfig+0x180>
 8007100:	2500      	movs	r5, #0
 8007102:	e01e      	b.n	8007142 <UART_SetConfig+0x1ba>
 8007104:	2504      	movs	r5, #4
 8007106:	e777      	b.n	8006ff8 <UART_SetConfig+0x70>
 8007108:	2510      	movs	r5, #16
 800710a:	e775      	b.n	8006ff8 <UART_SetConfig+0x70>
 800710c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8007110:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007114:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007118:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800711c:	d040      	beq.n	80071a0 <UART_SetConfig+0x218>
 800711e:	d90a      	bls.n	8007136 <UART_SetConfig+0x1ae>
 8007120:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007124:	d040      	beq.n	80071a8 <UART_SetConfig+0x220>
 8007126:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800712a:	f040 8135 	bne.w	8007398 <UART_SetConfig+0x410>
 800712e:	2508      	movs	r5, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007130:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007134:	e021      	b.n	800717a <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007136:	2a00      	cmp	r2, #0
 8007138:	f040 812e 	bne.w	8007398 <UART_SetConfig+0x410>
 800713c:	2500      	movs	r5, #0
 800713e:	e000      	b.n	8007142 <UART_SetConfig+0x1ba>
 8007140:	2501      	movs	r5, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 8007142:	4a44      	ldr	r2, [pc, #272]	; (8007254 <UART_SetConfig+0x2cc>)
 8007144:	4293      	cmp	r3, r2
 8007146:	f47f af57 	bne.w	8006ff8 <UART_SetConfig+0x70>
    switch (clocksource)
 800714a:	2d08      	cmp	r5, #8
 800714c:	f200 8126 	bhi.w	800739c <UART_SetConfig+0x414>
 8007150:	e8df f015 	tbh	[pc, r5, lsl #1]
 8007154:	0124000e 	.word	0x0124000e
 8007158:	0124002d 	.word	0x0124002d
 800715c:	01240026 	.word	0x01240026
 8007160:	01240124 	.word	0x01240124
 8007164:	000b      	.short	0x000b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007166:	2500      	movs	r5, #0
 8007168:	e7eb      	b.n	8007142 <UART_SetConfig+0x1ba>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800716a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800716e:	e004      	b.n	800717a <UART_SetConfig+0x1f2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fd ff3e 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8007174:	2800      	cmp	r0, #0
 8007176:	f000 8113 	beq.w	80073a0 <UART_SetConfig+0x418>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800717a:	6862      	ldr	r2, [r4, #4]
 800717c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8007180:	4283      	cmp	r3, r0
 8007182:	f200 810f 	bhi.w	80073a4 <UART_SetConfig+0x41c>
 8007186:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800718a:	f200 810d 	bhi.w	80073a8 <UART_SetConfig+0x420>
        switch (clocksource)
 800718e:	2d08      	cmp	r5, #8
 8007190:	d85b      	bhi.n	800724a <UART_SetConfig+0x2c2>
 8007192:	e8df f005 	tbb	[pc, r5]
 8007196:	5a0f      	.short	0x5a0f
 8007198:	5a3a5a2a 	.word	0x5a3a5a2a
 800719c:	5a5a      	.short	0x5a5a
 800719e:	4d          	.byte	0x4d
 800719f:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80071a0:	f7fd fb32 	bl	8004808 <HAL_RCC_GetSysClockFreq>
        break;
 80071a4:	2504      	movs	r5, #4
 80071a6:	e7e5      	b.n	8007174 <UART_SetConfig+0x1ec>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071a8:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80071aa:	4830      	ldr	r0, [pc, #192]	; (800726c <UART_SetConfig+0x2e4>)
 80071ac:	e7e5      	b.n	800717a <UART_SetConfig+0x1f2>
    switch (clocksource)
 80071ae:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80071b0:	482e      	ldr	r0, [pc, #184]	; (800726c <UART_SetConfig+0x2e4>)
 80071b2:	e7e2      	b.n	800717a <UART_SetConfig+0x1f2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80071b4:	f7fd ff1c 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 80071b8:	6862      	ldr	r2, [r4, #4]
 80071ba:	2500      	movs	r5, #0
 80071bc:	0e07      	lsrs	r7, r0, #24
 80071be:	0206      	lsls	r6, r0, #8
 80071c0:	0850      	lsrs	r0, r2, #1
 80071c2:	462b      	mov	r3, r5
 80071c4:	eb16 0b00 	adds.w	fp, r6, r0
 80071c8:	f147 0c00 	adc.w	ip, r7, #0
 80071cc:	4658      	mov	r0, fp
 80071ce:	4661      	mov	r1, ip
 80071d0:	f7f9 f84e 	bl	8000270 <__aeabi_uldivmod>
 80071d4:	4603      	mov	r3, r0
            break;
 80071d6:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071d8:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 80071dc:	4a24      	ldr	r2, [pc, #144]	; (8007270 <UART_SetConfig+0x2e8>)
 80071de:	4291      	cmp	r1, r2
 80071e0:	f200 80e4 	bhi.w	80073ac <UART_SetConfig+0x424>
          huart->Instance->BRR = usartdiv;
 80071e4:	6822      	ldr	r2, [r4, #0]
 80071e6:	60d3      	str	r3, [r2, #12]
 80071e8:	e0a6      	b.n	8007338 <UART_SetConfig+0x3b0>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80071ea:	0856      	lsrs	r6, r2, #1
 80071ec:	2500      	movs	r5, #0
 80071ee:	462b      	mov	r3, r5
 80071f0:	f8df b080 	ldr.w	fp, [pc, #128]	; 8007274 <UART_SetConfig+0x2ec>
 80071f4:	f04f 0c00 	mov.w	ip, #0
 80071f8:	eb1b 0006 	adds.w	r0, fp, r6
 80071fc:	f14c 0100 	adc.w	r1, ip, #0
 8007200:	f7f9 f836 	bl	8000270 <__aeabi_uldivmod>
 8007204:	4603      	mov	r3, r0
            break;
 8007206:	4628      	mov	r0, r5
 8007208:	e7e6      	b.n	80071d8 <UART_SetConfig+0x250>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800720a:	f7fd fafd 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 800720e:	6862      	ldr	r2, [r4, #4]
 8007210:	2500      	movs	r5, #0
 8007212:	0e07      	lsrs	r7, r0, #24
 8007214:	0206      	lsls	r6, r0, #8
 8007216:	0850      	lsrs	r0, r2, #1
 8007218:	462b      	mov	r3, r5
 800721a:	eb16 0b00 	adds.w	fp, r6, r0
 800721e:	f147 0c00 	adc.w	ip, r7, #0
 8007222:	4658      	mov	r0, fp
 8007224:	4661      	mov	r1, ip
 8007226:	f7f9 f823 	bl	8000270 <__aeabi_uldivmod>
 800722a:	4603      	mov	r3, r0
            break;
 800722c:	4628      	mov	r0, r5
 800722e:	e7d3      	b.n	80071d8 <UART_SetConfig+0x250>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007230:	0850      	lsrs	r0, r2, #1
 8007232:	2700      	movs	r7, #0
 8007234:	2500      	movs	r5, #0
 8007236:	462b      	mov	r3, r5
 8007238:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800723c:	f147 0100 	adc.w	r1, r7, #0
 8007240:	f7f9 f816 	bl	8000270 <__aeabi_uldivmod>
 8007244:	4603      	mov	r3, r0
            break;
 8007246:	4628      	mov	r0, r5
 8007248:	e7c6      	b.n	80071d8 <UART_SetConfig+0x250>
            ret = HAL_ERROR;
 800724a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800724c:	2300      	movs	r3, #0
 800724e:	e7c3      	b.n	80071d8 <UART_SetConfig+0x250>
 8007250:	efff69f3 	.word	0xefff69f3
 8007254:	40008000 	.word	0x40008000
 8007258:	40013800 	.word	0x40013800
 800725c:	40004400 	.word	0x40004400
 8007260:	40004800 	.word	0x40004800
 8007264:	40004c00 	.word	0x40004c00
 8007268:	40005000 	.word	0x40005000
 800726c:	00f42400 	.word	0x00f42400
 8007270:	000ffcff 	.word	0x000ffcff
 8007274:	f4240000 	.word	0xf4240000
    switch (clocksource)
 8007278:	2d08      	cmp	r5, #8
 800727a:	d849      	bhi.n	8007310 <UART_SetConfig+0x388>
 800727c:	e8df f005 	tbb	[pc, r5]
 8007280:	48291e05 	.word	0x48291e05
 8007284:	48484834 	.word	0x48484834
 8007288:	3f          	.byte	0x3f
 8007289:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800728a:	f7fd feb1 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	0853      	lsrs	r3, r2, #1
 8007292:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007296:	fbb3 f3f2 	udiv	r3, r3, r2
 800729a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800729c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800729e:	f1a3 0110 	sub.w	r1, r3, #16
 80072a2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80072a6:	4291      	cmp	r1, r2
 80072a8:	f200 8082 	bhi.w	80073b0 <UART_SetConfig+0x428>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072ac:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 80072b0:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072b2:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60cb      	str	r3, [r1, #12]
 80072ba:	e03d      	b.n	8007338 <UART_SetConfig+0x3b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80072bc:	f7fd feaa 	bl	8005014 <HAL_RCC_GetPCLK2Freq>
 80072c0:	6862      	ldr	r2, [r4, #4]
 80072c2:	0853      	lsrs	r3, r2, #1
 80072c4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80072c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072cc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80072ce:	2000      	movs	r0, #0
        break;
 80072d0:	e7e5      	b.n	800729e <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80072d2:	6862      	ldr	r2, [r4, #4]
 80072d4:	0853      	lsrs	r3, r2, #1
 80072d6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80072da:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80072de:	fbb3 f3f2 	udiv	r3, r3, r2
 80072e2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80072e4:	2000      	movs	r0, #0
        break;
 80072e6:	e7da      	b.n	800729e <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80072e8:	f7fd fa8e 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 80072ec:	6862      	ldr	r2, [r4, #4]
 80072ee:	0853      	lsrs	r3, r2, #1
 80072f0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80072f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80072fa:	2000      	movs	r0, #0
        break;
 80072fc:	e7cf      	b.n	800729e <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80072fe:	6862      	ldr	r2, [r4, #4]
 8007300:	0853      	lsrs	r3, r2, #1
 8007302:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007306:	fbb3 f3f2 	udiv	r3, r3, r2
 800730a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800730c:	2000      	movs	r0, #0
        break;
 800730e:	e7c6      	b.n	800729e <UART_SetConfig+0x316>
        ret = HAL_ERROR;
 8007310:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007312:	2300      	movs	r3, #0
 8007314:	e7c3      	b.n	800729e <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007316:	f7fd fe6b 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 800731a:	6863      	ldr	r3, [r4, #4]
 800731c:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8007320:	fbb2 f2f3 	udiv	r2, r2, r3
 8007324:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8007326:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007328:	f1a2 0110 	sub.w	r1, r2, #16
 800732c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007330:	4299      	cmp	r1, r3
 8007332:	d83f      	bhi.n	80073b4 <UART_SetConfig+0x42c>
      huart->Instance->BRR = usartdiv;
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 8007338:	2200      	movs	r2, #0
 800733a:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800733c:	6662      	str	r2, [r4, #100]	; 0x64
}
 800733e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007342:	f7fd fe67 	bl	8005014 <HAL_RCC_GetPCLK2Freq>
 8007346:	6863      	ldr	r3, [r4, #4]
 8007348:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800734c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007350:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8007352:	2000      	movs	r0, #0
        break;
 8007354:	e7e8      	b.n	8007328 <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007356:	6863      	ldr	r3, [r4, #4]
 8007358:	085a      	lsrs	r2, r3, #1
 800735a:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 800735e:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
 8007362:	fbb2 f2f3 	udiv	r2, r2, r3
 8007366:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8007368:	2000      	movs	r0, #0
        break;
 800736a:	e7dd      	b.n	8007328 <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800736c:	f7fd fa4c 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8007376:	fbb2 f2f3 	udiv	r2, r2, r3
 800737a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800737c:	2000      	movs	r0, #0
        break;
 800737e:	e7d3      	b.n	8007328 <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007380:	6863      	ldr	r3, [r4, #4]
 8007382:	085a      	lsrs	r2, r3, #1
 8007384:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8007388:	fbb2 f2f3 	udiv	r2, r2, r3
 800738c:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800738e:	2000      	movs	r0, #0
        break;
 8007390:	e7ca      	b.n	8007328 <UART_SetConfig+0x3a0>
        ret = HAL_ERROR;
 8007392:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007394:	2200      	movs	r2, #0
 8007396:	e7c7      	b.n	8007328 <UART_SetConfig+0x3a0>
        ret = HAL_ERROR;
 8007398:	2001      	movs	r0, #1
 800739a:	e7cd      	b.n	8007338 <UART_SetConfig+0x3b0>
 800739c:	2001      	movs	r0, #1
 800739e:	e7cb      	b.n	8007338 <UART_SetConfig+0x3b0>
 80073a0:	2000      	movs	r0, #0
 80073a2:	e7c9      	b.n	8007338 <UART_SetConfig+0x3b0>
        ret = HAL_ERROR;
 80073a4:	2001      	movs	r0, #1
 80073a6:	e7c7      	b.n	8007338 <UART_SetConfig+0x3b0>
 80073a8:	2001      	movs	r0, #1
 80073aa:	e7c5      	b.n	8007338 <UART_SetConfig+0x3b0>
          ret = HAL_ERROR;
 80073ac:	2001      	movs	r0, #1
 80073ae:	e7c3      	b.n	8007338 <UART_SetConfig+0x3b0>
      ret = HAL_ERROR;
 80073b0:	2001      	movs	r0, #1
 80073b2:	e7c1      	b.n	8007338 <UART_SetConfig+0x3b0>
      ret = HAL_ERROR;
 80073b4:	2001      	movs	r0, #1
 80073b6:	e7bf      	b.n	8007338 <UART_SetConfig+0x3b0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073b8:	2502      	movs	r5, #2
 80073ba:	e61d      	b.n	8006ff8 <UART_SetConfig+0x70>
 80073bc:	2508      	movs	r5, #8
 80073be:	e61b      	b.n	8006ff8 <UART_SetConfig+0x70>
 80073c0:	2502      	movs	r5, #2
 80073c2:	e619      	b.n	8006ff8 <UART_SetConfig+0x70>
 80073c4:	2502      	movs	r5, #2
 80073c6:	e617      	b.n	8006ff8 <UART_SetConfig+0x70>
 80073c8:	2502      	movs	r5, #2
 80073ca:	e615      	b.n	8006ff8 <UART_SetConfig+0x70>
 80073cc:	2502      	movs	r5, #2
 80073ce:	e613      	b.n	8006ff8 <UART_SetConfig+0x70>

080073d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073d2:	f013 0f01 	tst.w	r3, #1
 80073d6:	d006      	beq.n	80073e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d8:	6802      	ldr	r2, [r0, #0]
 80073da:	6853      	ldr	r3, [r2, #4]
 80073dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80073e2:	430b      	orrs	r3, r1
 80073e4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073e8:	f013 0f02 	tst.w	r3, #2
 80073ec:	d006      	beq.n	80073fc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073ee:	6802      	ldr	r2, [r0, #0]
 80073f0:	6853      	ldr	r3, [r2, #4]
 80073f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80073f8:	430b      	orrs	r3, r1
 80073fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073fe:	f013 0f04 	tst.w	r3, #4
 8007402:	d006      	beq.n	8007412 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007404:	6802      	ldr	r2, [r0, #0]
 8007406:	6853      	ldr	r3, [r2, #4]
 8007408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800740c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800740e:	430b      	orrs	r3, r1
 8007410:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007412:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007414:	f013 0f08 	tst.w	r3, #8
 8007418:	d006      	beq.n	8007428 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800741a:	6802      	ldr	r2, [r0, #0]
 800741c:	6853      	ldr	r3, [r2, #4]
 800741e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007422:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007424:	430b      	orrs	r3, r1
 8007426:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007428:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800742a:	f013 0f10 	tst.w	r3, #16
 800742e:	d006      	beq.n	800743e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007430:	6802      	ldr	r2, [r0, #0]
 8007432:	6893      	ldr	r3, [r2, #8]
 8007434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007438:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800743a:	430b      	orrs	r3, r1
 800743c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800743e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007440:	f013 0f20 	tst.w	r3, #32
 8007444:	d006      	beq.n	8007454 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007446:	6802      	ldr	r2, [r0, #0]
 8007448:	6893      	ldr	r3, [r2, #8]
 800744a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800744e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007450:	430b      	orrs	r3, r1
 8007452:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007454:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007456:	f013 0f40 	tst.w	r3, #64	; 0x40
 800745a:	d00a      	beq.n	8007472 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800745c:	6802      	ldr	r2, [r0, #0]
 800745e:	6853      	ldr	r3, [r2, #4]
 8007460:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007464:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007466:	430b      	orrs	r3, r1
 8007468:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800746a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800746c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007470:	d00b      	beq.n	800748a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007472:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007474:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007478:	d006      	beq.n	8007488 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800747a:	6802      	ldr	r2, [r0, #0]
 800747c:	6853      	ldr	r3, [r2, #4]
 800747e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007482:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007484:	430b      	orrs	r3, r1
 8007486:	6053      	str	r3, [r2, #4]
}
 8007488:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800748a:	6802      	ldr	r2, [r0, #0]
 800748c:	6853      	ldr	r3, [r2, #4]
 800748e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007492:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007494:	430b      	orrs	r3, r1
 8007496:	6053      	str	r3, [r2, #4]
 8007498:	e7eb      	b.n	8007472 <UART_AdvFeatureConfig+0xa2>

0800749a <UART_WaitOnFlagUntilTimeout>:
{
 800749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	4607      	mov	r7, r0
 80074a0:	460e      	mov	r6, r1
 80074a2:	4615      	mov	r5, r2
 80074a4:	4698      	mov	r8, r3
 80074a6:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	69d3      	ldr	r3, [r2, #28]
 80074ac:	ea36 0303 	bics.w	r3, r6, r3
 80074b0:	bf0c      	ite	eq
 80074b2:	2301      	moveq	r3, #1
 80074b4:	2300      	movne	r3, #0
 80074b6:	42ab      	cmp	r3, r5
 80074b8:	d11c      	bne.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80074ba:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80074be:	d0f4      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c0:	f7fc fd8c 	bl	8003fdc <HAL_GetTick>
 80074c4:	eba0 0008 	sub.w	r0, r0, r8
 80074c8:	42a0      	cmp	r0, r4
 80074ca:	d801      	bhi.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x36>
 80074cc:	2c00      	cmp	r4, #0
 80074ce:	d1eb      	bne.n	80074a8 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	6813      	ldr	r3, [r2, #0]
 80074d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074d8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	6893      	ldr	r3, [r2, #8]
 80074de:	f023 0301 	bic.w	r3, r3, #1
 80074e2:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80074e4:	2320      	movs	r3, #32
 80074e6:	677b      	str	r3, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80074e8:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80074ea:	2300      	movs	r3, #0
 80074ec:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        return HAL_TIMEOUT;
 80074f0:	2003      	movs	r0, #3
 80074f2:	e000      	b.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 80074f4:	2000      	movs	r0, #0
}
 80074f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080074fa <HAL_UART_Transmit>:
{
 80074fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007502:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007504:	2b20      	cmp	r3, #32
 8007506:	d15d      	bne.n	80075c4 <HAL_UART_Transmit+0xca>
 8007508:	4604      	mov	r4, r0
 800750a:	460d      	mov	r5, r1
 800750c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800750e:	2900      	cmp	r1, #0
 8007510:	d05d      	beq.n	80075ce <HAL_UART_Transmit+0xd4>
 8007512:	2a00      	cmp	r2, #0
 8007514:	d05d      	beq.n	80075d2 <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 8007516:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800751a:	2b01      	cmp	r3, #1
 800751c:	d05b      	beq.n	80075d6 <HAL_UART_Transmit+0xdc>
 800751e:	2301      	movs	r3, #1
 8007520:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007524:	2300      	movs	r3, #0
 8007526:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007528:	2321      	movs	r3, #33	; 0x21
 800752a:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800752c:	f7fc fd56 	bl	8003fdc <HAL_GetTick>
 8007530:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8007532:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8007536:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007540:	d00a      	beq.n	8007558 <HAL_UART_Transmit+0x5e>
      pdata16bits = NULL;
 8007542:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8007546:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800754a:	b29b      	uxth	r3, r3
 800754c:	b35b      	cbz	r3, 80075a6 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800754e:	f04f 0900 	mov.w	r9, #0
 8007552:	f04f 0880 	mov.w	r8, #128	; 0x80
 8007556:	e017      	b.n	8007588 <HAL_UART_Transmit+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007558:	6923      	ldr	r3, [r4, #16]
 800755a:	b913      	cbnz	r3, 8007562 <HAL_UART_Transmit+0x68>
      pdata16bits = (uint16_t *) pData;
 800755c:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800755e:	2500      	movs	r5, #0
 8007560:	e7f1      	b.n	8007546 <HAL_UART_Transmit+0x4c>
      pdata16bits = NULL;
 8007562:	f04f 0a00 	mov.w	sl, #0
 8007566:	e7ee      	b.n	8007546 <HAL_UART_Transmit+0x4c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800756e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007572:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8007574:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007578:	3b01      	subs	r3, #1
 800757a:	b29b      	uxth	r3, r3
 800757c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007580:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007584:	b29b      	uxth	r3, r3
 8007586:	b173      	cbz	r3, 80075a6 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007588:	9600      	str	r6, [sp, #0]
 800758a:	463b      	mov	r3, r7
 800758c:	464a      	mov	r2, r9
 800758e:	4641      	mov	r1, r8
 8007590:	4620      	mov	r0, r4
 8007592:	f7ff ff82 	bl	800749a <UART_WaitOnFlagUntilTimeout>
 8007596:	bb00      	cbnz	r0, 80075da <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 8007598:	2d00      	cmp	r5, #0
 800759a:	d0e5      	beq.n	8007568 <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	f815 2b01 	ldrb.w	r2, [r5], #1
 80075a2:	851a      	strh	r2, [r3, #40]	; 0x28
 80075a4:	e7e6      	b.n	8007574 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a6:	9600      	str	r6, [sp, #0]
 80075a8:	463b      	mov	r3, r7
 80075aa:	2200      	movs	r2, #0
 80075ac:	2140      	movs	r1, #64	; 0x40
 80075ae:	4620      	mov	r0, r4
 80075b0:	f7ff ff73 	bl	800749a <UART_WaitOnFlagUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	b990      	cbnz	r0, 80075de <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 80075b8:	2220      	movs	r2, #32
 80075ba:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 80075bc:	2200      	movs	r2, #0
 80075be:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 80075c2:	e000      	b.n	80075c6 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 80075c4:	2302      	movs	r3, #2
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	b002      	add	sp, #8
 80075ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e7f9      	b.n	80075c6 <HAL_UART_Transmit+0xcc>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7f7      	b.n	80075c6 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80075d6:	2302      	movs	r3, #2
 80075d8:	e7f5      	b.n	80075c6 <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e7f3      	b.n	80075c6 <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e7f1      	b.n	80075c6 <HAL_UART_Transmit+0xcc>

080075e2 <UART_CheckIdleState>:
{
 80075e2:	b530      	push	{r4, r5, lr}
 80075e4:	b083      	sub	sp, #12
 80075e6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e8:	2300      	movs	r3, #0
 80075ea:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80075ec:	f7fc fcf6 	bl	8003fdc <HAL_GetTick>
 80075f0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f013 0f08 	tst.w	r3, #8
 80075fa:	d10c      	bne.n	8007616 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f013 0f04 	tst.w	r3, #4
 8007604:	d115      	bne.n	8007632 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8007606:	2320      	movs	r3, #32
 8007608:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800760a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800760c:	2000      	movs	r0, #0
 800760e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8007612:	b003      	add	sp, #12
 8007614:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007616:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	4603      	mov	r3, r0
 800761e:	2200      	movs	r2, #0
 8007620:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007624:	4620      	mov	r0, r4
 8007626:	f7ff ff38 	bl	800749a <UART_WaitOnFlagUntilTimeout>
 800762a:	2800      	cmp	r0, #0
 800762c:	d0e6      	beq.n	80075fc <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800762e:	2003      	movs	r0, #3
 8007630:	e7ef      	b.n	8007612 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007632:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	462b      	mov	r3, r5
 800763a:	2200      	movs	r2, #0
 800763c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007640:	4620      	mov	r0, r4
 8007642:	f7ff ff2a 	bl	800749a <UART_WaitOnFlagUntilTimeout>
 8007646:	2800      	cmp	r0, #0
 8007648:	d0dd      	beq.n	8007606 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800764a:	2003      	movs	r0, #3
 800764c:	e7e1      	b.n	8007612 <UART_CheckIdleState+0x30>

0800764e <HAL_UART_Init>:
  if (huart == NULL)
 800764e:	b368      	cbz	r0, 80076ac <HAL_UART_Init+0x5e>
{
 8007650:	b510      	push	{r4, lr}
 8007652:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007654:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007656:	b303      	cbz	r3, 800769a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007658:	2324      	movs	r3, #36	; 0x24
 800765a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800765c:	6822      	ldr	r2, [r4, #0]
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007666:	4620      	mov	r0, r4
 8007668:	f7ff fc8e 	bl	8006f88 <UART_SetConfig>
 800766c:	2801      	cmp	r0, #1
 800766e:	d013      	beq.n	8007698 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007672:	b9bb      	cbnz	r3, 80076a4 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007674:	6822      	ldr	r2, [r4, #0]
 8007676:	6853      	ldr	r3, [r2, #4]
 8007678:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800767c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800767e:	6822      	ldr	r2, [r4, #0]
 8007680:	6893      	ldr	r3, [r2, #8]
 8007682:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007686:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	6813      	ldr	r3, [r2, #0]
 800768c:	f043 0301 	orr.w	r3, r3, #1
 8007690:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007692:	4620      	mov	r0, r4
 8007694:	f7ff ffa5 	bl	80075e2 <UART_CheckIdleState>
}
 8007698:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800769a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800769e:	f7fc fb6d 	bl	8003d7c <HAL_UART_MspInit>
 80076a2:	e7d9      	b.n	8007658 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80076a4:	4620      	mov	r0, r4
 80076a6:	f7ff fe93 	bl	80073d0 <UART_AdvFeatureConfig>
 80076aa:	e7e3      	b.n	8007674 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80076ac:	2001      	movs	r0, #1
}
 80076ae:	4770      	bx	lr

080076b0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076b0:	4770      	bx	lr
	...

080076b4 <__errno>:
 80076b4:	4b01      	ldr	r3, [pc, #4]	; (80076bc <__errno+0x8>)
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	2000000c 	.word	0x2000000c

080076c0 <__libc_init_array>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	4e0d      	ldr	r6, [pc, #52]	; (80076f8 <__libc_init_array+0x38>)
 80076c4:	4c0d      	ldr	r4, [pc, #52]	; (80076fc <__libc_init_array+0x3c>)
 80076c6:	1ba4      	subs	r4, r4, r6
 80076c8:	10a4      	asrs	r4, r4, #2
 80076ca:	2500      	movs	r5, #0
 80076cc:	42a5      	cmp	r5, r4
 80076ce:	d109      	bne.n	80076e4 <__libc_init_array+0x24>
 80076d0:	4e0b      	ldr	r6, [pc, #44]	; (8007700 <__libc_init_array+0x40>)
 80076d2:	4c0c      	ldr	r4, [pc, #48]	; (8007704 <__libc_init_array+0x44>)
 80076d4:	f000 fc36 	bl	8007f44 <_init>
 80076d8:	1ba4      	subs	r4, r4, r6
 80076da:	10a4      	asrs	r4, r4, #2
 80076dc:	2500      	movs	r5, #0
 80076de:	42a5      	cmp	r5, r4
 80076e0:	d105      	bne.n	80076ee <__libc_init_array+0x2e>
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076e8:	4798      	blx	r3
 80076ea:	3501      	adds	r5, #1
 80076ec:	e7ee      	b.n	80076cc <__libc_init_array+0xc>
 80076ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076f2:	4798      	blx	r3
 80076f4:	3501      	adds	r5, #1
 80076f6:	e7f2      	b.n	80076de <__libc_init_array+0x1e>
 80076f8:	08009268 	.word	0x08009268
 80076fc:	08009268 	.word	0x08009268
 8007700:	08009268 	.word	0x08009268
 8007704:	0800926c 	.word	0x0800926c

08007708 <memcmp>:
 8007708:	b530      	push	{r4, r5, lr}
 800770a:	2400      	movs	r4, #0
 800770c:	42a2      	cmp	r2, r4
 800770e:	d101      	bne.n	8007714 <memcmp+0xc>
 8007710:	2000      	movs	r0, #0
 8007712:	e007      	b.n	8007724 <memcmp+0x1c>
 8007714:	5d03      	ldrb	r3, [r0, r4]
 8007716:	3401      	adds	r4, #1
 8007718:	190d      	adds	r5, r1, r4
 800771a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800771e:	42ab      	cmp	r3, r5
 8007720:	d0f4      	beq.n	800770c <memcmp+0x4>
 8007722:	1b58      	subs	r0, r3, r5
 8007724:	bd30      	pop	{r4, r5, pc}

08007726 <memcpy>:
 8007726:	b510      	push	{r4, lr}
 8007728:	1e43      	subs	r3, r0, #1
 800772a:	440a      	add	r2, r1
 800772c:	4291      	cmp	r1, r2
 800772e:	d100      	bne.n	8007732 <memcpy+0xc>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800773a:	e7f7      	b.n	800772c <memcpy+0x6>

0800773c <memset>:
 800773c:	4402      	add	r2, r0
 800773e:	4603      	mov	r3, r0
 8007740:	4293      	cmp	r3, r2
 8007742:	d100      	bne.n	8007746 <memset+0xa>
 8007744:	4770      	bx	lr
 8007746:	f803 1b01 	strb.w	r1, [r3], #1
 800774a:	e7f9      	b.n	8007740 <memset+0x4>

0800774c <siprintf>:
 800774c:	b40e      	push	{r1, r2, r3}
 800774e:	b500      	push	{lr}
 8007750:	b09c      	sub	sp, #112	; 0x70
 8007752:	ab1d      	add	r3, sp, #116	; 0x74
 8007754:	9002      	str	r0, [sp, #8]
 8007756:	9006      	str	r0, [sp, #24]
 8007758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800775c:	4809      	ldr	r0, [pc, #36]	; (8007784 <siprintf+0x38>)
 800775e:	9107      	str	r1, [sp, #28]
 8007760:	9104      	str	r1, [sp, #16]
 8007762:	4909      	ldr	r1, [pc, #36]	; (8007788 <siprintf+0x3c>)
 8007764:	f853 2b04 	ldr.w	r2, [r3], #4
 8007768:	9105      	str	r1, [sp, #20]
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	a902      	add	r1, sp, #8
 8007770:	f000 f866 	bl	8007840 <_svfiprintf_r>
 8007774:	9b02      	ldr	r3, [sp, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	b01c      	add	sp, #112	; 0x70
 800777c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007780:	b003      	add	sp, #12
 8007782:	4770      	bx	lr
 8007784:	2000000c 	.word	0x2000000c
 8007788:	ffff0208 	.word	0xffff0208

0800778c <__ssputs_r>:
 800778c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007790:	688e      	ldr	r6, [r1, #8]
 8007792:	429e      	cmp	r6, r3
 8007794:	4682      	mov	sl, r0
 8007796:	460c      	mov	r4, r1
 8007798:	4690      	mov	r8, r2
 800779a:	4699      	mov	r9, r3
 800779c:	d837      	bhi.n	800780e <__ssputs_r+0x82>
 800779e:	898a      	ldrh	r2, [r1, #12]
 80077a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077a4:	d031      	beq.n	800780a <__ssputs_r+0x7e>
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	6909      	ldr	r1, [r1, #16]
 80077aa:	1a6f      	subs	r7, r5, r1
 80077ac:	6965      	ldr	r5, [r4, #20]
 80077ae:	2302      	movs	r3, #2
 80077b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80077b8:	f109 0301 	add.w	r3, r9, #1
 80077bc:	443b      	add	r3, r7
 80077be:	429d      	cmp	r5, r3
 80077c0:	bf38      	it	cc
 80077c2:	461d      	movcc	r5, r3
 80077c4:	0553      	lsls	r3, r2, #21
 80077c6:	d530      	bpl.n	800782a <__ssputs_r+0x9e>
 80077c8:	4629      	mov	r1, r5
 80077ca:	f000 fb21 	bl	8007e10 <_malloc_r>
 80077ce:	4606      	mov	r6, r0
 80077d0:	b950      	cbnz	r0, 80077e8 <__ssputs_r+0x5c>
 80077d2:	230c      	movs	r3, #12
 80077d4:	f8ca 3000 	str.w	r3, [sl]
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e8:	463a      	mov	r2, r7
 80077ea:	6921      	ldr	r1, [r4, #16]
 80077ec:	f7ff ff9b 	bl	8007726 <memcpy>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fa:	81a3      	strh	r3, [r4, #12]
 80077fc:	6126      	str	r6, [r4, #16]
 80077fe:	6165      	str	r5, [r4, #20]
 8007800:	443e      	add	r6, r7
 8007802:	1bed      	subs	r5, r5, r7
 8007804:	6026      	str	r6, [r4, #0]
 8007806:	60a5      	str	r5, [r4, #8]
 8007808:	464e      	mov	r6, r9
 800780a:	454e      	cmp	r6, r9
 800780c:	d900      	bls.n	8007810 <__ssputs_r+0x84>
 800780e:	464e      	mov	r6, r9
 8007810:	4632      	mov	r2, r6
 8007812:	4641      	mov	r1, r8
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	f000 fa93 	bl	8007d40 <memmove>
 800781a:	68a3      	ldr	r3, [r4, #8]
 800781c:	1b9b      	subs	r3, r3, r6
 800781e:	60a3      	str	r3, [r4, #8]
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	441e      	add	r6, r3
 8007824:	6026      	str	r6, [r4, #0]
 8007826:	2000      	movs	r0, #0
 8007828:	e7dc      	b.n	80077e4 <__ssputs_r+0x58>
 800782a:	462a      	mov	r2, r5
 800782c:	f000 fb4a 	bl	8007ec4 <_realloc_r>
 8007830:	4606      	mov	r6, r0
 8007832:	2800      	cmp	r0, #0
 8007834:	d1e2      	bne.n	80077fc <__ssputs_r+0x70>
 8007836:	6921      	ldr	r1, [r4, #16]
 8007838:	4650      	mov	r0, sl
 800783a:	f000 fa9b 	bl	8007d74 <_free_r>
 800783e:	e7c8      	b.n	80077d2 <__ssputs_r+0x46>

08007840 <_svfiprintf_r>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	461d      	mov	r5, r3
 8007846:	898b      	ldrh	r3, [r1, #12]
 8007848:	061f      	lsls	r7, r3, #24
 800784a:	b09d      	sub	sp, #116	; 0x74
 800784c:	4680      	mov	r8, r0
 800784e:	460c      	mov	r4, r1
 8007850:	4616      	mov	r6, r2
 8007852:	d50f      	bpl.n	8007874 <_svfiprintf_r+0x34>
 8007854:	690b      	ldr	r3, [r1, #16]
 8007856:	b96b      	cbnz	r3, 8007874 <_svfiprintf_r+0x34>
 8007858:	2140      	movs	r1, #64	; 0x40
 800785a:	f000 fad9 	bl	8007e10 <_malloc_r>
 800785e:	6020      	str	r0, [r4, #0]
 8007860:	6120      	str	r0, [r4, #16]
 8007862:	b928      	cbnz	r0, 8007870 <_svfiprintf_r+0x30>
 8007864:	230c      	movs	r3, #12
 8007866:	f8c8 3000 	str.w	r3, [r8]
 800786a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800786e:	e0c8      	b.n	8007a02 <_svfiprintf_r+0x1c2>
 8007870:	2340      	movs	r3, #64	; 0x40
 8007872:	6163      	str	r3, [r4, #20]
 8007874:	2300      	movs	r3, #0
 8007876:	9309      	str	r3, [sp, #36]	; 0x24
 8007878:	2320      	movs	r3, #32
 800787a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800787e:	2330      	movs	r3, #48	; 0x30
 8007880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007884:	9503      	str	r5, [sp, #12]
 8007886:	f04f 0b01 	mov.w	fp, #1
 800788a:	4637      	mov	r7, r6
 800788c:	463d      	mov	r5, r7
 800788e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007892:	b10b      	cbz	r3, 8007898 <_svfiprintf_r+0x58>
 8007894:	2b25      	cmp	r3, #37	; 0x25
 8007896:	d13e      	bne.n	8007916 <_svfiprintf_r+0xd6>
 8007898:	ebb7 0a06 	subs.w	sl, r7, r6
 800789c:	d00b      	beq.n	80078b6 <_svfiprintf_r+0x76>
 800789e:	4653      	mov	r3, sl
 80078a0:	4632      	mov	r2, r6
 80078a2:	4621      	mov	r1, r4
 80078a4:	4640      	mov	r0, r8
 80078a6:	f7ff ff71 	bl	800778c <__ssputs_r>
 80078aa:	3001      	adds	r0, #1
 80078ac:	f000 80a4 	beq.w	80079f8 <_svfiprintf_r+0x1b8>
 80078b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b2:	4453      	add	r3, sl
 80078b4:	9309      	str	r3, [sp, #36]	; 0x24
 80078b6:	783b      	ldrb	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 809d 	beq.w	80079f8 <_svfiprintf_r+0x1b8>
 80078be:	2300      	movs	r3, #0
 80078c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078c8:	9304      	str	r3, [sp, #16]
 80078ca:	9307      	str	r3, [sp, #28]
 80078cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078d0:	931a      	str	r3, [sp, #104]	; 0x68
 80078d2:	462f      	mov	r7, r5
 80078d4:	2205      	movs	r2, #5
 80078d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80078da:	4850      	ldr	r0, [pc, #320]	; (8007a1c <_svfiprintf_r+0x1dc>)
 80078dc:	f7f8 fc78 	bl	80001d0 <memchr>
 80078e0:	9b04      	ldr	r3, [sp, #16]
 80078e2:	b9d0      	cbnz	r0, 800791a <_svfiprintf_r+0xda>
 80078e4:	06d9      	lsls	r1, r3, #27
 80078e6:	bf44      	itt	mi
 80078e8:	2220      	movmi	r2, #32
 80078ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078ee:	071a      	lsls	r2, r3, #28
 80078f0:	bf44      	itt	mi
 80078f2:	222b      	movmi	r2, #43	; 0x2b
 80078f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078f8:	782a      	ldrb	r2, [r5, #0]
 80078fa:	2a2a      	cmp	r2, #42	; 0x2a
 80078fc:	d015      	beq.n	800792a <_svfiprintf_r+0xea>
 80078fe:	9a07      	ldr	r2, [sp, #28]
 8007900:	462f      	mov	r7, r5
 8007902:	2000      	movs	r0, #0
 8007904:	250a      	movs	r5, #10
 8007906:	4639      	mov	r1, r7
 8007908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800790c:	3b30      	subs	r3, #48	; 0x30
 800790e:	2b09      	cmp	r3, #9
 8007910:	d94d      	bls.n	80079ae <_svfiprintf_r+0x16e>
 8007912:	b1b8      	cbz	r0, 8007944 <_svfiprintf_r+0x104>
 8007914:	e00f      	b.n	8007936 <_svfiprintf_r+0xf6>
 8007916:	462f      	mov	r7, r5
 8007918:	e7b8      	b.n	800788c <_svfiprintf_r+0x4c>
 800791a:	4a40      	ldr	r2, [pc, #256]	; (8007a1c <_svfiprintf_r+0x1dc>)
 800791c:	1a80      	subs	r0, r0, r2
 800791e:	fa0b f000 	lsl.w	r0, fp, r0
 8007922:	4318      	orrs	r0, r3
 8007924:	9004      	str	r0, [sp, #16]
 8007926:	463d      	mov	r5, r7
 8007928:	e7d3      	b.n	80078d2 <_svfiprintf_r+0x92>
 800792a:	9a03      	ldr	r2, [sp, #12]
 800792c:	1d11      	adds	r1, r2, #4
 800792e:	6812      	ldr	r2, [r2, #0]
 8007930:	9103      	str	r1, [sp, #12]
 8007932:	2a00      	cmp	r2, #0
 8007934:	db01      	blt.n	800793a <_svfiprintf_r+0xfa>
 8007936:	9207      	str	r2, [sp, #28]
 8007938:	e004      	b.n	8007944 <_svfiprintf_r+0x104>
 800793a:	4252      	negs	r2, r2
 800793c:	f043 0302 	orr.w	r3, r3, #2
 8007940:	9207      	str	r2, [sp, #28]
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	783b      	ldrb	r3, [r7, #0]
 8007946:	2b2e      	cmp	r3, #46	; 0x2e
 8007948:	d10c      	bne.n	8007964 <_svfiprintf_r+0x124>
 800794a:	787b      	ldrb	r3, [r7, #1]
 800794c:	2b2a      	cmp	r3, #42	; 0x2a
 800794e:	d133      	bne.n	80079b8 <_svfiprintf_r+0x178>
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	1d1a      	adds	r2, r3, #4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	9203      	str	r2, [sp, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	bfb8      	it	lt
 800795c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007960:	3702      	adds	r7, #2
 8007962:	9305      	str	r3, [sp, #20]
 8007964:	4d2e      	ldr	r5, [pc, #184]	; (8007a20 <_svfiprintf_r+0x1e0>)
 8007966:	7839      	ldrb	r1, [r7, #0]
 8007968:	2203      	movs	r2, #3
 800796a:	4628      	mov	r0, r5
 800796c:	f7f8 fc30 	bl	80001d0 <memchr>
 8007970:	b138      	cbz	r0, 8007982 <_svfiprintf_r+0x142>
 8007972:	2340      	movs	r3, #64	; 0x40
 8007974:	1b40      	subs	r0, r0, r5
 8007976:	fa03 f000 	lsl.w	r0, r3, r0
 800797a:	9b04      	ldr	r3, [sp, #16]
 800797c:	4303      	orrs	r3, r0
 800797e:	3701      	adds	r7, #1
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	7839      	ldrb	r1, [r7, #0]
 8007984:	4827      	ldr	r0, [pc, #156]	; (8007a24 <_svfiprintf_r+0x1e4>)
 8007986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800798a:	2206      	movs	r2, #6
 800798c:	1c7e      	adds	r6, r7, #1
 800798e:	f7f8 fc1f 	bl	80001d0 <memchr>
 8007992:	2800      	cmp	r0, #0
 8007994:	d038      	beq.n	8007a08 <_svfiprintf_r+0x1c8>
 8007996:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <_svfiprintf_r+0x1e8>)
 8007998:	bb13      	cbnz	r3, 80079e0 <_svfiprintf_r+0x1a0>
 800799a:	9b03      	ldr	r3, [sp, #12]
 800799c:	3307      	adds	r3, #7
 800799e:	f023 0307 	bic.w	r3, r3, #7
 80079a2:	3308      	adds	r3, #8
 80079a4:	9303      	str	r3, [sp, #12]
 80079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a8:	444b      	add	r3, r9
 80079aa:	9309      	str	r3, [sp, #36]	; 0x24
 80079ac:	e76d      	b.n	800788a <_svfiprintf_r+0x4a>
 80079ae:	fb05 3202 	mla	r2, r5, r2, r3
 80079b2:	2001      	movs	r0, #1
 80079b4:	460f      	mov	r7, r1
 80079b6:	e7a6      	b.n	8007906 <_svfiprintf_r+0xc6>
 80079b8:	2300      	movs	r3, #0
 80079ba:	3701      	adds	r7, #1
 80079bc:	9305      	str	r3, [sp, #20]
 80079be:	4619      	mov	r1, r3
 80079c0:	250a      	movs	r5, #10
 80079c2:	4638      	mov	r0, r7
 80079c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079c8:	3a30      	subs	r2, #48	; 0x30
 80079ca:	2a09      	cmp	r2, #9
 80079cc:	d903      	bls.n	80079d6 <_svfiprintf_r+0x196>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0c8      	beq.n	8007964 <_svfiprintf_r+0x124>
 80079d2:	9105      	str	r1, [sp, #20]
 80079d4:	e7c6      	b.n	8007964 <_svfiprintf_r+0x124>
 80079d6:	fb05 2101 	mla	r1, r5, r1, r2
 80079da:	2301      	movs	r3, #1
 80079dc:	4607      	mov	r7, r0
 80079de:	e7f0      	b.n	80079c2 <_svfiprintf_r+0x182>
 80079e0:	ab03      	add	r3, sp, #12
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	4622      	mov	r2, r4
 80079e6:	4b11      	ldr	r3, [pc, #68]	; (8007a2c <_svfiprintf_r+0x1ec>)
 80079e8:	a904      	add	r1, sp, #16
 80079ea:	4640      	mov	r0, r8
 80079ec:	f3af 8000 	nop.w
 80079f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80079f4:	4681      	mov	r9, r0
 80079f6:	d1d6      	bne.n	80079a6 <_svfiprintf_r+0x166>
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	065b      	lsls	r3, r3, #25
 80079fc:	f53f af35 	bmi.w	800786a <_svfiprintf_r+0x2a>
 8007a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a02:	b01d      	add	sp, #116	; 0x74
 8007a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a08:	ab03      	add	r3, sp, #12
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	4b07      	ldr	r3, [pc, #28]	; (8007a2c <_svfiprintf_r+0x1ec>)
 8007a10:	a904      	add	r1, sp, #16
 8007a12:	4640      	mov	r0, r8
 8007a14:	f000 f882 	bl	8007b1c <_printf_i>
 8007a18:	e7ea      	b.n	80079f0 <_svfiprintf_r+0x1b0>
 8007a1a:	bf00      	nop
 8007a1c:	0800922c 	.word	0x0800922c
 8007a20:	08009232 	.word	0x08009232
 8007a24:	08009236 	.word	0x08009236
 8007a28:	00000000 	.word	0x00000000
 8007a2c:	0800778d 	.word	0x0800778d

08007a30 <_printf_common>:
 8007a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a34:	4691      	mov	r9, r2
 8007a36:	461f      	mov	r7, r3
 8007a38:	688a      	ldr	r2, [r1, #8]
 8007a3a:	690b      	ldr	r3, [r1, #16]
 8007a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a40:	4293      	cmp	r3, r2
 8007a42:	bfb8      	it	lt
 8007a44:	4613      	movlt	r3, r2
 8007a46:	f8c9 3000 	str.w	r3, [r9]
 8007a4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a4e:	4606      	mov	r6, r0
 8007a50:	460c      	mov	r4, r1
 8007a52:	b112      	cbz	r2, 8007a5a <_printf_common+0x2a>
 8007a54:	3301      	adds	r3, #1
 8007a56:	f8c9 3000 	str.w	r3, [r9]
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	0699      	lsls	r1, r3, #26
 8007a5e:	bf42      	ittt	mi
 8007a60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a64:	3302      	addmi	r3, #2
 8007a66:	f8c9 3000 	strmi.w	r3, [r9]
 8007a6a:	6825      	ldr	r5, [r4, #0]
 8007a6c:	f015 0506 	ands.w	r5, r5, #6
 8007a70:	d107      	bne.n	8007a82 <_printf_common+0x52>
 8007a72:	f104 0a19 	add.w	sl, r4, #25
 8007a76:	68e3      	ldr	r3, [r4, #12]
 8007a78:	f8d9 2000 	ldr.w	r2, [r9]
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	42ab      	cmp	r3, r5
 8007a80:	dc28      	bgt.n	8007ad4 <_printf_common+0xa4>
 8007a82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a86:	6822      	ldr	r2, [r4, #0]
 8007a88:	3300      	adds	r3, #0
 8007a8a:	bf18      	it	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	0692      	lsls	r2, r2, #26
 8007a90:	d42d      	bmi.n	8007aee <_printf_common+0xbe>
 8007a92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a96:	4639      	mov	r1, r7
 8007a98:	4630      	mov	r0, r6
 8007a9a:	47c0      	blx	r8
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d020      	beq.n	8007ae2 <_printf_common+0xb2>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	68e5      	ldr	r5, [r4, #12]
 8007aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8007aa8:	f003 0306 	and.w	r3, r3, #6
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	bf08      	it	eq
 8007ab0:	1aad      	subeq	r5, r5, r2
 8007ab2:	68a3      	ldr	r3, [r4, #8]
 8007ab4:	6922      	ldr	r2, [r4, #16]
 8007ab6:	bf0c      	ite	eq
 8007ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007abc:	2500      	movne	r5, #0
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	bfc4      	itt	gt
 8007ac2:	1a9b      	subgt	r3, r3, r2
 8007ac4:	18ed      	addgt	r5, r5, r3
 8007ac6:	f04f 0900 	mov.w	r9, #0
 8007aca:	341a      	adds	r4, #26
 8007acc:	454d      	cmp	r5, r9
 8007ace:	d11a      	bne.n	8007b06 <_printf_common+0xd6>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e008      	b.n	8007ae6 <_printf_common+0xb6>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4630      	mov	r0, r6
 8007adc:	47c0      	blx	r8
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d103      	bne.n	8007aea <_printf_common+0xba>
 8007ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aea:	3501      	adds	r5, #1
 8007aec:	e7c3      	b.n	8007a76 <_printf_common+0x46>
 8007aee:	18e1      	adds	r1, r4, r3
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	2030      	movs	r0, #48	; 0x30
 8007af4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007af8:	4422      	add	r2, r4
 8007afa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007afe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b02:	3302      	adds	r3, #2
 8007b04:	e7c5      	b.n	8007a92 <_printf_common+0x62>
 8007b06:	2301      	movs	r3, #1
 8007b08:	4622      	mov	r2, r4
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	47c0      	blx	r8
 8007b10:	3001      	adds	r0, #1
 8007b12:	d0e6      	beq.n	8007ae2 <_printf_common+0xb2>
 8007b14:	f109 0901 	add.w	r9, r9, #1
 8007b18:	e7d8      	b.n	8007acc <_printf_common+0x9c>
	...

08007b1c <_printf_i>:
 8007b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b24:	460c      	mov	r4, r1
 8007b26:	7e09      	ldrb	r1, [r1, #24]
 8007b28:	b085      	sub	sp, #20
 8007b2a:	296e      	cmp	r1, #110	; 0x6e
 8007b2c:	4617      	mov	r7, r2
 8007b2e:	4606      	mov	r6, r0
 8007b30:	4698      	mov	r8, r3
 8007b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b34:	f000 80b3 	beq.w	8007c9e <_printf_i+0x182>
 8007b38:	d822      	bhi.n	8007b80 <_printf_i+0x64>
 8007b3a:	2963      	cmp	r1, #99	; 0x63
 8007b3c:	d036      	beq.n	8007bac <_printf_i+0x90>
 8007b3e:	d80a      	bhi.n	8007b56 <_printf_i+0x3a>
 8007b40:	2900      	cmp	r1, #0
 8007b42:	f000 80b9 	beq.w	8007cb8 <_printf_i+0x19c>
 8007b46:	2958      	cmp	r1, #88	; 0x58
 8007b48:	f000 8083 	beq.w	8007c52 <_printf_i+0x136>
 8007b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b54:	e032      	b.n	8007bbc <_printf_i+0xa0>
 8007b56:	2964      	cmp	r1, #100	; 0x64
 8007b58:	d001      	beq.n	8007b5e <_printf_i+0x42>
 8007b5a:	2969      	cmp	r1, #105	; 0x69
 8007b5c:	d1f6      	bne.n	8007b4c <_printf_i+0x30>
 8007b5e:	6820      	ldr	r0, [r4, #0]
 8007b60:	6813      	ldr	r3, [r2, #0]
 8007b62:	0605      	lsls	r5, r0, #24
 8007b64:	f103 0104 	add.w	r1, r3, #4
 8007b68:	d52a      	bpl.n	8007bc0 <_printf_i+0xa4>
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6011      	str	r1, [r2, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	da03      	bge.n	8007b7a <_printf_i+0x5e>
 8007b72:	222d      	movs	r2, #45	; 0x2d
 8007b74:	425b      	negs	r3, r3
 8007b76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b7a:	486f      	ldr	r0, [pc, #444]	; (8007d38 <_printf_i+0x21c>)
 8007b7c:	220a      	movs	r2, #10
 8007b7e:	e039      	b.n	8007bf4 <_printf_i+0xd8>
 8007b80:	2973      	cmp	r1, #115	; 0x73
 8007b82:	f000 809d 	beq.w	8007cc0 <_printf_i+0x1a4>
 8007b86:	d808      	bhi.n	8007b9a <_printf_i+0x7e>
 8007b88:	296f      	cmp	r1, #111	; 0x6f
 8007b8a:	d020      	beq.n	8007bce <_printf_i+0xb2>
 8007b8c:	2970      	cmp	r1, #112	; 0x70
 8007b8e:	d1dd      	bne.n	8007b4c <_printf_i+0x30>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	f043 0320 	orr.w	r3, r3, #32
 8007b96:	6023      	str	r3, [r4, #0]
 8007b98:	e003      	b.n	8007ba2 <_printf_i+0x86>
 8007b9a:	2975      	cmp	r1, #117	; 0x75
 8007b9c:	d017      	beq.n	8007bce <_printf_i+0xb2>
 8007b9e:	2978      	cmp	r1, #120	; 0x78
 8007ba0:	d1d4      	bne.n	8007b4c <_printf_i+0x30>
 8007ba2:	2378      	movs	r3, #120	; 0x78
 8007ba4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ba8:	4864      	ldr	r0, [pc, #400]	; (8007d3c <_printf_i+0x220>)
 8007baa:	e055      	b.n	8007c58 <_printf_i+0x13c>
 8007bac:	6813      	ldr	r3, [r2, #0]
 8007bae:	1d19      	adds	r1, r3, #4
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6011      	str	r1, [r2, #0]
 8007bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e08c      	b.n	8007cda <_printf_i+0x1be>
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6011      	str	r1, [r2, #0]
 8007bc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bc8:	bf18      	it	ne
 8007bca:	b21b      	sxthne	r3, r3
 8007bcc:	e7cf      	b.n	8007b6e <_printf_i+0x52>
 8007bce:	6813      	ldr	r3, [r2, #0]
 8007bd0:	6825      	ldr	r5, [r4, #0]
 8007bd2:	1d18      	adds	r0, r3, #4
 8007bd4:	6010      	str	r0, [r2, #0]
 8007bd6:	0628      	lsls	r0, r5, #24
 8007bd8:	d501      	bpl.n	8007bde <_printf_i+0xc2>
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	e002      	b.n	8007be4 <_printf_i+0xc8>
 8007bde:	0668      	lsls	r0, r5, #25
 8007be0:	d5fb      	bpl.n	8007bda <_printf_i+0xbe>
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	4854      	ldr	r0, [pc, #336]	; (8007d38 <_printf_i+0x21c>)
 8007be6:	296f      	cmp	r1, #111	; 0x6f
 8007be8:	bf14      	ite	ne
 8007bea:	220a      	movne	r2, #10
 8007bec:	2208      	moveq	r2, #8
 8007bee:	2100      	movs	r1, #0
 8007bf0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bf4:	6865      	ldr	r5, [r4, #4]
 8007bf6:	60a5      	str	r5, [r4, #8]
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	f2c0 8095 	blt.w	8007d28 <_printf_i+0x20c>
 8007bfe:	6821      	ldr	r1, [r4, #0]
 8007c00:	f021 0104 	bic.w	r1, r1, #4
 8007c04:	6021      	str	r1, [r4, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d13d      	bne.n	8007c86 <_printf_i+0x16a>
 8007c0a:	2d00      	cmp	r5, #0
 8007c0c:	f040 808e 	bne.w	8007d2c <_printf_i+0x210>
 8007c10:	4665      	mov	r5, ip
 8007c12:	2a08      	cmp	r2, #8
 8007c14:	d10b      	bne.n	8007c2e <_printf_i+0x112>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	07db      	lsls	r3, r3, #31
 8007c1a:	d508      	bpl.n	8007c2e <_printf_i+0x112>
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	6862      	ldr	r2, [r4, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	bfde      	ittt	le
 8007c24:	2330      	movle	r3, #48	; 0x30
 8007c26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c2a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007c2e:	ebac 0305 	sub.w	r3, ip, r5
 8007c32:	6123      	str	r3, [r4, #16]
 8007c34:	f8cd 8000 	str.w	r8, [sp]
 8007c38:	463b      	mov	r3, r7
 8007c3a:	aa03      	add	r2, sp, #12
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7ff fef6 	bl	8007a30 <_printf_common>
 8007c44:	3001      	adds	r0, #1
 8007c46:	d14d      	bne.n	8007ce4 <_printf_i+0x1c8>
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c4c:	b005      	add	sp, #20
 8007c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c52:	4839      	ldr	r0, [pc, #228]	; (8007d38 <_printf_i+0x21c>)
 8007c54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c58:	6813      	ldr	r3, [r2, #0]
 8007c5a:	6821      	ldr	r1, [r4, #0]
 8007c5c:	1d1d      	adds	r5, r3, #4
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6015      	str	r5, [r2, #0]
 8007c62:	060a      	lsls	r2, r1, #24
 8007c64:	d50b      	bpl.n	8007c7e <_printf_i+0x162>
 8007c66:	07ca      	lsls	r2, r1, #31
 8007c68:	bf44      	itt	mi
 8007c6a:	f041 0120 	orrmi.w	r1, r1, #32
 8007c6e:	6021      	strmi	r1, [r4, #0]
 8007c70:	b91b      	cbnz	r3, 8007c7a <_printf_i+0x15e>
 8007c72:	6822      	ldr	r2, [r4, #0]
 8007c74:	f022 0220 	bic.w	r2, r2, #32
 8007c78:	6022      	str	r2, [r4, #0]
 8007c7a:	2210      	movs	r2, #16
 8007c7c:	e7b7      	b.n	8007bee <_printf_i+0xd2>
 8007c7e:	064d      	lsls	r5, r1, #25
 8007c80:	bf48      	it	mi
 8007c82:	b29b      	uxthmi	r3, r3
 8007c84:	e7ef      	b.n	8007c66 <_printf_i+0x14a>
 8007c86:	4665      	mov	r5, ip
 8007c88:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c8c:	fb02 3311 	mls	r3, r2, r1, r3
 8007c90:	5cc3      	ldrb	r3, [r0, r3]
 8007c92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c96:	460b      	mov	r3, r1
 8007c98:	2900      	cmp	r1, #0
 8007c9a:	d1f5      	bne.n	8007c88 <_printf_i+0x16c>
 8007c9c:	e7b9      	b.n	8007c12 <_printf_i+0xf6>
 8007c9e:	6813      	ldr	r3, [r2, #0]
 8007ca0:	6825      	ldr	r5, [r4, #0]
 8007ca2:	6961      	ldr	r1, [r4, #20]
 8007ca4:	1d18      	adds	r0, r3, #4
 8007ca6:	6010      	str	r0, [r2, #0]
 8007ca8:	0628      	lsls	r0, r5, #24
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	d501      	bpl.n	8007cb2 <_printf_i+0x196>
 8007cae:	6019      	str	r1, [r3, #0]
 8007cb0:	e002      	b.n	8007cb8 <_printf_i+0x19c>
 8007cb2:	066a      	lsls	r2, r5, #25
 8007cb4:	d5fb      	bpl.n	8007cae <_printf_i+0x192>
 8007cb6:	8019      	strh	r1, [r3, #0]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6123      	str	r3, [r4, #16]
 8007cbc:	4665      	mov	r5, ip
 8007cbe:	e7b9      	b.n	8007c34 <_printf_i+0x118>
 8007cc0:	6813      	ldr	r3, [r2, #0]
 8007cc2:	1d19      	adds	r1, r3, #4
 8007cc4:	6011      	str	r1, [r2, #0]
 8007cc6:	681d      	ldr	r5, [r3, #0]
 8007cc8:	6862      	ldr	r2, [r4, #4]
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f7f8 fa7f 	bl	80001d0 <memchr>
 8007cd2:	b108      	cbz	r0, 8007cd8 <_printf_i+0x1bc>
 8007cd4:	1b40      	subs	r0, r0, r5
 8007cd6:	6060      	str	r0, [r4, #4]
 8007cd8:	6863      	ldr	r3, [r4, #4]
 8007cda:	6123      	str	r3, [r4, #16]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce2:	e7a7      	b.n	8007c34 <_printf_i+0x118>
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	4639      	mov	r1, r7
 8007cea:	4630      	mov	r0, r6
 8007cec:	47c0      	blx	r8
 8007cee:	3001      	adds	r0, #1
 8007cf0:	d0aa      	beq.n	8007c48 <_printf_i+0x12c>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	079b      	lsls	r3, r3, #30
 8007cf6:	d413      	bmi.n	8007d20 <_printf_i+0x204>
 8007cf8:	68e0      	ldr	r0, [r4, #12]
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	4298      	cmp	r0, r3
 8007cfe:	bfb8      	it	lt
 8007d00:	4618      	movlt	r0, r3
 8007d02:	e7a3      	b.n	8007c4c <_printf_i+0x130>
 8007d04:	2301      	movs	r3, #1
 8007d06:	464a      	mov	r2, r9
 8007d08:	4639      	mov	r1, r7
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	47c0      	blx	r8
 8007d0e:	3001      	adds	r0, #1
 8007d10:	d09a      	beq.n	8007c48 <_printf_i+0x12c>
 8007d12:	3501      	adds	r5, #1
 8007d14:	68e3      	ldr	r3, [r4, #12]
 8007d16:	9a03      	ldr	r2, [sp, #12]
 8007d18:	1a9b      	subs	r3, r3, r2
 8007d1a:	42ab      	cmp	r3, r5
 8007d1c:	dcf2      	bgt.n	8007d04 <_printf_i+0x1e8>
 8007d1e:	e7eb      	b.n	8007cf8 <_printf_i+0x1dc>
 8007d20:	2500      	movs	r5, #0
 8007d22:	f104 0919 	add.w	r9, r4, #25
 8007d26:	e7f5      	b.n	8007d14 <_printf_i+0x1f8>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1ac      	bne.n	8007c86 <_printf_i+0x16a>
 8007d2c:	7803      	ldrb	r3, [r0, #0]
 8007d2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d36:	e76c      	b.n	8007c12 <_printf_i+0xf6>
 8007d38:	0800923d 	.word	0x0800923d
 8007d3c:	0800924e 	.word	0x0800924e

08007d40 <memmove>:
 8007d40:	4288      	cmp	r0, r1
 8007d42:	b510      	push	{r4, lr}
 8007d44:	eb01 0302 	add.w	r3, r1, r2
 8007d48:	d807      	bhi.n	8007d5a <memmove+0x1a>
 8007d4a:	1e42      	subs	r2, r0, #1
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	d00a      	beq.n	8007d66 <memmove+0x26>
 8007d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d54:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d58:	e7f8      	b.n	8007d4c <memmove+0xc>
 8007d5a:	4283      	cmp	r3, r0
 8007d5c:	d9f5      	bls.n	8007d4a <memmove+0xa>
 8007d5e:	1881      	adds	r1, r0, r2
 8007d60:	1ad2      	subs	r2, r2, r3
 8007d62:	42d3      	cmn	r3, r2
 8007d64:	d100      	bne.n	8007d68 <memmove+0x28>
 8007d66:	bd10      	pop	{r4, pc}
 8007d68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d70:	e7f7      	b.n	8007d62 <memmove+0x22>
	...

08007d74 <_free_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4605      	mov	r5, r0
 8007d78:	2900      	cmp	r1, #0
 8007d7a:	d045      	beq.n	8007e08 <_free_r+0x94>
 8007d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d80:	1f0c      	subs	r4, r1, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	bfb8      	it	lt
 8007d86:	18e4      	addlt	r4, r4, r3
 8007d88:	f000 f8d2 	bl	8007f30 <__malloc_lock>
 8007d8c:	4a1f      	ldr	r2, [pc, #124]	; (8007e0c <_free_r+0x98>)
 8007d8e:	6813      	ldr	r3, [r2, #0]
 8007d90:	4610      	mov	r0, r2
 8007d92:	b933      	cbnz	r3, 8007da2 <_free_r+0x2e>
 8007d94:	6063      	str	r3, [r4, #4]
 8007d96:	6014      	str	r4, [r2, #0]
 8007d98:	4628      	mov	r0, r5
 8007d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d9e:	f000 b8c8 	b.w	8007f32 <__malloc_unlock>
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	d90c      	bls.n	8007dc0 <_free_r+0x4c>
 8007da6:	6821      	ldr	r1, [r4, #0]
 8007da8:	1862      	adds	r2, r4, r1
 8007daa:	4293      	cmp	r3, r2
 8007dac:	bf04      	itt	eq
 8007dae:	681a      	ldreq	r2, [r3, #0]
 8007db0:	685b      	ldreq	r3, [r3, #4]
 8007db2:	6063      	str	r3, [r4, #4]
 8007db4:	bf04      	itt	eq
 8007db6:	1852      	addeq	r2, r2, r1
 8007db8:	6022      	streq	r2, [r4, #0]
 8007dba:	6004      	str	r4, [r0, #0]
 8007dbc:	e7ec      	b.n	8007d98 <_free_r+0x24>
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	b10a      	cbz	r2, 8007dc8 <_free_r+0x54>
 8007dc4:	42a2      	cmp	r2, r4
 8007dc6:	d9fa      	bls.n	8007dbe <_free_r+0x4a>
 8007dc8:	6819      	ldr	r1, [r3, #0]
 8007dca:	1858      	adds	r0, r3, r1
 8007dcc:	42a0      	cmp	r0, r4
 8007dce:	d10b      	bne.n	8007de8 <_free_r+0x74>
 8007dd0:	6820      	ldr	r0, [r4, #0]
 8007dd2:	4401      	add	r1, r0
 8007dd4:	1858      	adds	r0, r3, r1
 8007dd6:	4282      	cmp	r2, r0
 8007dd8:	6019      	str	r1, [r3, #0]
 8007dda:	d1dd      	bne.n	8007d98 <_free_r+0x24>
 8007ddc:	6810      	ldr	r0, [r2, #0]
 8007dde:	6852      	ldr	r2, [r2, #4]
 8007de0:	605a      	str	r2, [r3, #4]
 8007de2:	4401      	add	r1, r0
 8007de4:	6019      	str	r1, [r3, #0]
 8007de6:	e7d7      	b.n	8007d98 <_free_r+0x24>
 8007de8:	d902      	bls.n	8007df0 <_free_r+0x7c>
 8007dea:	230c      	movs	r3, #12
 8007dec:	602b      	str	r3, [r5, #0]
 8007dee:	e7d3      	b.n	8007d98 <_free_r+0x24>
 8007df0:	6820      	ldr	r0, [r4, #0]
 8007df2:	1821      	adds	r1, r4, r0
 8007df4:	428a      	cmp	r2, r1
 8007df6:	bf04      	itt	eq
 8007df8:	6811      	ldreq	r1, [r2, #0]
 8007dfa:	6852      	ldreq	r2, [r2, #4]
 8007dfc:	6062      	str	r2, [r4, #4]
 8007dfe:	bf04      	itt	eq
 8007e00:	1809      	addeq	r1, r1, r0
 8007e02:	6021      	streq	r1, [r4, #0]
 8007e04:	605c      	str	r4, [r3, #4]
 8007e06:	e7c7      	b.n	8007d98 <_free_r+0x24>
 8007e08:	bd38      	pop	{r3, r4, r5, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20016b7c 	.word	0x20016b7c

08007e10 <_malloc_r>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	1ccd      	adds	r5, r1, #3
 8007e14:	f025 0503 	bic.w	r5, r5, #3
 8007e18:	3508      	adds	r5, #8
 8007e1a:	2d0c      	cmp	r5, #12
 8007e1c:	bf38      	it	cc
 8007e1e:	250c      	movcc	r5, #12
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	4606      	mov	r6, r0
 8007e24:	db01      	blt.n	8007e2a <_malloc_r+0x1a>
 8007e26:	42a9      	cmp	r1, r5
 8007e28:	d903      	bls.n	8007e32 <_malloc_r+0x22>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	6033      	str	r3, [r6, #0]
 8007e2e:	2000      	movs	r0, #0
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	f000 f87d 	bl	8007f30 <__malloc_lock>
 8007e36:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <_malloc_r+0xac>)
 8007e38:	6814      	ldr	r4, [r2, #0]
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	b991      	cbnz	r1, 8007e64 <_malloc_r+0x54>
 8007e3e:	4c20      	ldr	r4, [pc, #128]	; (8007ec0 <_malloc_r+0xb0>)
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	b91b      	cbnz	r3, 8007e4c <_malloc_r+0x3c>
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 f863 	bl	8007f10 <_sbrk_r>
 8007e4a:	6020      	str	r0, [r4, #0]
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f000 f85e 	bl	8007f10 <_sbrk_r>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d124      	bne.n	8007ea2 <_malloc_r+0x92>
 8007e58:	230c      	movs	r3, #12
 8007e5a:	6033      	str	r3, [r6, #0]
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f000 f868 	bl	8007f32 <__malloc_unlock>
 8007e62:	e7e4      	b.n	8007e2e <_malloc_r+0x1e>
 8007e64:	680b      	ldr	r3, [r1, #0]
 8007e66:	1b5b      	subs	r3, r3, r5
 8007e68:	d418      	bmi.n	8007e9c <_malloc_r+0x8c>
 8007e6a:	2b0b      	cmp	r3, #11
 8007e6c:	d90f      	bls.n	8007e8e <_malloc_r+0x7e>
 8007e6e:	600b      	str	r3, [r1, #0]
 8007e70:	50cd      	str	r5, [r1, r3]
 8007e72:	18cc      	adds	r4, r1, r3
 8007e74:	4630      	mov	r0, r6
 8007e76:	f000 f85c 	bl	8007f32 <__malloc_unlock>
 8007e7a:	f104 000b 	add.w	r0, r4, #11
 8007e7e:	1d23      	adds	r3, r4, #4
 8007e80:	f020 0007 	bic.w	r0, r0, #7
 8007e84:	1ac3      	subs	r3, r0, r3
 8007e86:	d0d3      	beq.n	8007e30 <_malloc_r+0x20>
 8007e88:	425a      	negs	r2, r3
 8007e8a:	50e2      	str	r2, [r4, r3]
 8007e8c:	e7d0      	b.n	8007e30 <_malloc_r+0x20>
 8007e8e:	428c      	cmp	r4, r1
 8007e90:	684b      	ldr	r3, [r1, #4]
 8007e92:	bf16      	itet	ne
 8007e94:	6063      	strne	r3, [r4, #4]
 8007e96:	6013      	streq	r3, [r2, #0]
 8007e98:	460c      	movne	r4, r1
 8007e9a:	e7eb      	b.n	8007e74 <_malloc_r+0x64>
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	6849      	ldr	r1, [r1, #4]
 8007ea0:	e7cc      	b.n	8007e3c <_malloc_r+0x2c>
 8007ea2:	1cc4      	adds	r4, r0, #3
 8007ea4:	f024 0403 	bic.w	r4, r4, #3
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d005      	beq.n	8007eb8 <_malloc_r+0xa8>
 8007eac:	1a21      	subs	r1, r4, r0
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f000 f82e 	bl	8007f10 <_sbrk_r>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d0cf      	beq.n	8007e58 <_malloc_r+0x48>
 8007eb8:	6025      	str	r5, [r4, #0]
 8007eba:	e7db      	b.n	8007e74 <_malloc_r+0x64>
 8007ebc:	20016b7c 	.word	0x20016b7c
 8007ec0:	20016b80 	.word	0x20016b80

08007ec4 <_realloc_r>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	4607      	mov	r7, r0
 8007ec8:	4614      	mov	r4, r2
 8007eca:	460e      	mov	r6, r1
 8007ecc:	b921      	cbnz	r1, 8007ed8 <_realloc_r+0x14>
 8007ece:	4611      	mov	r1, r2
 8007ed0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ed4:	f7ff bf9c 	b.w	8007e10 <_malloc_r>
 8007ed8:	b922      	cbnz	r2, 8007ee4 <_realloc_r+0x20>
 8007eda:	f7ff ff4b 	bl	8007d74 <_free_r>
 8007ede:	4625      	mov	r5, r4
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ee4:	f000 f826 	bl	8007f34 <_malloc_usable_size_r>
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d20f      	bcs.n	8007f0c <_realloc_r+0x48>
 8007eec:	4621      	mov	r1, r4
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f7ff ff8e 	bl	8007e10 <_malloc_r>
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d0f2      	beq.n	8007ee0 <_realloc_r+0x1c>
 8007efa:	4631      	mov	r1, r6
 8007efc:	4622      	mov	r2, r4
 8007efe:	f7ff fc12 	bl	8007726 <memcpy>
 8007f02:	4631      	mov	r1, r6
 8007f04:	4638      	mov	r0, r7
 8007f06:	f7ff ff35 	bl	8007d74 <_free_r>
 8007f0a:	e7e9      	b.n	8007ee0 <_realloc_r+0x1c>
 8007f0c:	4635      	mov	r5, r6
 8007f0e:	e7e7      	b.n	8007ee0 <_realloc_r+0x1c>

08007f10 <_sbrk_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4c06      	ldr	r4, [pc, #24]	; (8007f2c <_sbrk_r+0x1c>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	4605      	mov	r5, r0
 8007f18:	4608      	mov	r0, r1
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	f7fb ffa8 	bl	8003e70 <_sbrk>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d102      	bne.n	8007f2a <_sbrk_r+0x1a>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	b103      	cbz	r3, 8007f2a <_sbrk_r+0x1a>
 8007f28:	602b      	str	r3, [r5, #0]
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	20016d34 	.word	0x20016d34

08007f30 <__malloc_lock>:
 8007f30:	4770      	bx	lr

08007f32 <__malloc_unlock>:
 8007f32:	4770      	bx	lr

08007f34 <_malloc_usable_size_r>:
 8007f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f38:	1f18      	subs	r0, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bfbc      	itt	lt
 8007f3e:	580b      	ldrlt	r3, [r1, r0]
 8007f40:	18c0      	addlt	r0, r0, r3
 8007f42:	4770      	bx	lr

08007f44 <_init>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr

08007f50 <_fini>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	bf00      	nop
 8007f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	469e      	mov	lr, r3
 8007f5a:	4770      	bx	lr
