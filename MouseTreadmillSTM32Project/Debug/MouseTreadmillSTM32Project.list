
MouseTreadmillSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .RamFunc      00000048  08013a74  08013a74  00023a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000012b8  08013abc  08013abc  00023abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08014d74  08014d74  00024d74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08014d74  08014d74  00024d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08014d7c  08014d7c  0003048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08014d7c  08014d7c  00024d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08014d84  08014d84  00024d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000048c  20000000  08014d88  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001790  2000048c  08015214  0003048c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001c1c  08015214  00031c1c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003048c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b8b3  00000000  00000000  000304bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000445f  00000000  00000000  0005bd6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c46b  00000000  00000000  000601ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001680  00000000  00000000  0007c640  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ef0  00000000  00000000  0007dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002b188  00000000  00000000  0007fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00016f29  00000000  00000000  000aad38  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000fb16b  00000000  00000000  000c1c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007f  00000000  00000000  001bcdcc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003f18  00000000  00000000  001bce4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000048c 	.word	0x2000048c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08013a58 	.word	0x08013a58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000490 	.word	0x20000490
 80001c4:	08013a58 	.word	0x08013a58

080001c8 <_mainCRTStartup>:
 80001c8:	4b15      	ldr	r3, [pc, #84]	; (8000220 <_mainCRTStartup+0x58>)
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	bf08      	it	eq
 80001ce:	4b13      	ldreq	r3, [pc, #76]	; (800021c <_mainCRTStartup+0x54>)
 80001d0:	469d      	mov	sp, r3
 80001d2:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001d6:	2100      	movs	r1, #0
 80001d8:	468b      	mov	fp, r1
 80001da:	460f      	mov	r7, r1
 80001dc:	4813      	ldr	r0, [pc, #76]	; (800022c <_mainCRTStartup+0x64>)
 80001de:	4a14      	ldr	r2, [pc, #80]	; (8000230 <_mainCRTStartup+0x68>)
 80001e0:	1a12      	subs	r2, r2, r0
 80001e2:	f013 fadd 	bl	80137a0 <memset>
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <_mainCRTStartup+0x5c>)
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d000      	beq.n	80001ee <_mainCRTStartup+0x26>
 80001ec:	4798      	blx	r3
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <_mainCRTStartup+0x60>)
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d000      	beq.n	80001f6 <_mainCRTStartup+0x2e>
 80001f4:	4798      	blx	r3
 80001f6:	2000      	movs	r0, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	0004      	movs	r4, r0
 80001fc:	000d      	movs	r5, r1
 80001fe:	480d      	ldr	r0, [pc, #52]	; (8000234 <_mainCRTStartup+0x6c>)
 8000200:	2800      	cmp	r0, #0
 8000202:	d002      	beq.n	800020a <_mainCRTStartup+0x42>
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <_mainCRTStartup+0x70>)
 8000206:	f013 fb93 	bl	8013930 <atexit>
 800020a:	f013 fa73 	bl	80136f4 <__libc_init_array>
 800020e:	0020      	movs	r0, r4
 8000210:	0029      	movs	r1, r5
 8000212:	f001 fa6b 	bl	80016ec <main>
 8000216:	f013 fa5d 	bl	80136d4 <exit>
 800021a:	bf00      	nop
 800021c:	00080000 	.word	0x00080000
	...
 800022c:	2000048c 	.word	0x2000048c
 8000230:	20001c1c 	.word	0x20001c1c
 8000234:	08013931 	.word	0x08013931
 8000238:	0801393d 	.word	0x0801393d
 800023c:	08014d88 	.word	0x08014d88
 8000240:	20000000 	.word	0x20000000
 8000244:	2000048c 	.word	0x2000048c
 8000248:	2000048c 	.word	0x2000048c
 800024c:	20001c1c 	.word	0x20001c1c

08000250 <memcpy>:
 8000250:	4684      	mov	ip, r0
 8000252:	ea41 0300 	orr.w	r3, r1, r0
 8000256:	f013 0303 	ands.w	r3, r3, #3
 800025a:	d16d      	bne.n	8000338 <memcpy+0xe8>
 800025c:	3a40      	subs	r2, #64	; 0x40
 800025e:	d341      	bcc.n	80002e4 <memcpy+0x94>
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	f851 3b04 	ldr.w	r3, [r1], #4
 8000294:	f840 3b04 	str.w	r3, [r0], #4
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	3a40      	subs	r2, #64	; 0x40
 80002e2:	d2bd      	bcs.n	8000260 <memcpy+0x10>
 80002e4:	3230      	adds	r2, #48	; 0x30
 80002e6:	d311      	bcc.n	800030c <memcpy+0xbc>
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	3a10      	subs	r2, #16
 800030a:	d2ed      	bcs.n	80002e8 <memcpy+0x98>
 800030c:	320c      	adds	r2, #12
 800030e:	d305      	bcc.n	800031c <memcpy+0xcc>
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	3a04      	subs	r2, #4
 800031a:	d2f9      	bcs.n	8000310 <memcpy+0xc0>
 800031c:	3204      	adds	r2, #4
 800031e:	d008      	beq.n	8000332 <memcpy+0xe2>
 8000320:	07d2      	lsls	r2, r2, #31
 8000322:	bf1c      	itt	ne
 8000324:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000328:	f800 3b01 	strbne.w	r3, [r0], #1
 800032c:	d301      	bcc.n	8000332 <memcpy+0xe2>
 800032e:	880b      	ldrh	r3, [r1, #0]
 8000330:	8003      	strh	r3, [r0, #0]
 8000332:	4660      	mov	r0, ip
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	2a08      	cmp	r2, #8
 800033a:	d313      	bcc.n	8000364 <memcpy+0x114>
 800033c:	078b      	lsls	r3, r1, #30
 800033e:	d08d      	beq.n	800025c <memcpy+0xc>
 8000340:	f010 0303 	ands.w	r3, r0, #3
 8000344:	d08a      	beq.n	800025c <memcpy+0xc>
 8000346:	f1c3 0304 	rsb	r3, r3, #4
 800034a:	1ad2      	subs	r2, r2, r3
 800034c:	07db      	lsls	r3, r3, #31
 800034e:	bf1c      	itt	ne
 8000350:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000354:	f800 3b01 	strbne.w	r3, [r0], #1
 8000358:	d380      	bcc.n	800025c <memcpy+0xc>
 800035a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800035e:	f820 3b02 	strh.w	r3, [r0], #2
 8000362:	e77b      	b.n	800025c <memcpy+0xc>
 8000364:	3a04      	subs	r2, #4
 8000366:	d3d9      	bcc.n	800031c <memcpy+0xcc>
 8000368:	3a01      	subs	r2, #1
 800036a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800036e:	f800 3b01 	strb.w	r3, [r0], #1
 8000372:	d2f9      	bcs.n	8000368 <memcpy+0x118>
 8000374:	780b      	ldrb	r3, [r1, #0]
 8000376:	7003      	strb	r3, [r0, #0]
 8000378:	784b      	ldrb	r3, [r1, #1]
 800037a:	7043      	strb	r3, [r0, #1]
 800037c:	788b      	ldrb	r3, [r1, #2]
 800037e:	7083      	strb	r3, [r0, #2]
 8000380:	4660      	mov	r0, ip
 8000382:	4770      	bx	lr

08000384 <__aeabi_uldivmod>:
 8000384:	b953      	cbnz	r3, 800039c <__aeabi_uldivmod+0x18>
 8000386:	b94a      	cbnz	r2, 800039c <__aeabi_uldivmod+0x18>
 8000388:	2900      	cmp	r1, #0
 800038a:	bf08      	it	eq
 800038c:	2800      	cmpeq	r0, #0
 800038e:	bf1c      	itt	ne
 8000390:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000394:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000398:	f000 b972 	b.w	8000680 <__aeabi_idiv0>
 800039c:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a4:	f000 f806 	bl	80003b4 <__udivmoddi4>
 80003a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b0:	b004      	add	sp, #16
 80003b2:	4770      	bx	lr

080003b4 <__udivmoddi4>:
 80003b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b8:	9e08      	ldr	r6, [sp, #32]
 80003ba:	4604      	mov	r4, r0
 80003bc:	4688      	mov	r8, r1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d14b      	bne.n	800045a <__udivmoddi4+0xa6>
 80003c2:	428a      	cmp	r2, r1
 80003c4:	4615      	mov	r5, r2
 80003c6:	d967      	bls.n	8000498 <__udivmoddi4+0xe4>
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	b14a      	cbz	r2, 80003e2 <__udivmoddi4+0x2e>
 80003ce:	f1c2 0720 	rsb	r7, r2, #32
 80003d2:	fa01 f302 	lsl.w	r3, r1, r2
 80003d6:	fa20 f707 	lsr.w	r7, r0, r7
 80003da:	4095      	lsls	r5, r2
 80003dc:	ea47 0803 	orr.w	r8, r7, r3
 80003e0:	4094      	lsls	r4, r2
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	0c23      	lsrs	r3, r4, #16
 80003e8:	fbb8 f7fe 	udiv	r7, r8, lr
 80003ec:	fa1f fc85 	uxth.w	ip, r5
 80003f0:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f8:	fb07 f10c 	mul.w	r1, r7, ip
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x60>
 8000400:	18eb      	adds	r3, r5, r3
 8000402:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000406:	f080 811b 	bcs.w	8000640 <__udivmoddi4+0x28c>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 8118 	bls.w	8000640 <__udivmoddi4+0x28c>
 8000410:	3f02      	subs	r7, #2
 8000412:	442b      	add	r3, r5
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 fc0c 	mul.w	ip, r0, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x8c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x290>
 8000436:	45a4      	cmp	ip, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x290>
 800043c:	3802      	subs	r0, #2
 800043e:	442c      	add	r4, r5
 8000440:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000444:	eba4 040c 	sub.w	r4, r4, ip
 8000448:	2700      	movs	r7, #0
 800044a:	b11e      	cbz	r6, 8000454 <__udivmoddi4+0xa0>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c6 4300 	strd	r4, r3, [r6]
 8000454:	4639      	mov	r1, r7
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xbe>
 800045e:	2e00      	cmp	r6, #0
 8000460:	f000 80eb 	beq.w	800063a <__udivmoddi4+0x286>
 8000464:	2700      	movs	r7, #0
 8000466:	e9c6 0100 	strd	r0, r1, [r6]
 800046a:	4638      	mov	r0, r7
 800046c:	4639      	mov	r1, r7
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f783 	clz	r7, r3
 8000476:	2f00      	cmp	r7, #0
 8000478:	d147      	bne.n	800050a <__udivmoddi4+0x156>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd0>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80fa 	bhi.w	8000678 <__udivmoddi4+0x2c4>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	4698      	mov	r8, r3
 800048e:	2e00      	cmp	r6, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa0>
 8000492:	e9c6 4800 	strd	r4, r8, [r6]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa0>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xe8>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 808f 	bne.w	80005c4 <__udivmoddi4+0x210>
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ac:	fa1f f885 	uxth.w	r8, r5
 80004b0:	2701      	movs	r7, #1
 80004b2:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b6:	0c23      	lsrs	r3, r4, #16
 80004b8:	fb0e 111c 	mls	r1, lr, ip, r1
 80004bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c0:	fb08 f10c 	mul.w	r1, r8, ip
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d907      	bls.n	80004d8 <__udivmoddi4+0x124>
 80004c8:	18eb      	adds	r3, r5, r3
 80004ca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ce:	d202      	bcs.n	80004d6 <__udivmoddi4+0x122>
 80004d0:	4299      	cmp	r1, r3
 80004d2:	f200 80cd 	bhi.w	8000670 <__udivmoddi4+0x2bc>
 80004d6:	4684      	mov	ip, r0
 80004d8:	1a59      	subs	r1, r3, r1
 80004da:	b2a3      	uxth	r3, r4
 80004dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80004e0:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e8:	fb08 f800 	mul.w	r8, r8, r0
 80004ec:	45a0      	cmp	r8, r4
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x14c>
 80004f0:	192c      	adds	r4, r5, r4
 80004f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f6:	d202      	bcs.n	80004fe <__udivmoddi4+0x14a>
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	f200 80b6 	bhi.w	800066a <__udivmoddi4+0x2b6>
 80004fe:	4618      	mov	r0, r3
 8000500:	eba4 0408 	sub.w	r4, r4, r8
 8000504:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000508:	e79f      	b.n	800044a <__udivmoddi4+0x96>
 800050a:	f1c7 0c20 	rsb	ip, r7, #32
 800050e:	40bb      	lsls	r3, r7
 8000510:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000514:	ea4e 0e03 	orr.w	lr, lr, r3
 8000518:	fa01 f407 	lsl.w	r4, r1, r7
 800051c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000520:	fa21 f30c 	lsr.w	r3, r1, ip
 8000524:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000528:	4325      	orrs	r5, r4
 800052a:	fbb3 f9f8 	udiv	r9, r3, r8
 800052e:	0c2c      	lsrs	r4, r5, #16
 8000530:	fb08 3319 	mls	r3, r8, r9, r3
 8000534:	fa1f fa8e 	uxth.w	sl, lr
 8000538:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800053c:	fb09 f40a 	mul.w	r4, r9, sl
 8000540:	429c      	cmp	r4, r3
 8000542:	fa02 f207 	lsl.w	r2, r2, r7
 8000546:	fa00 f107 	lsl.w	r1, r0, r7
 800054a:	d90b      	bls.n	8000564 <__udivmoddi4+0x1b0>
 800054c:	eb1e 0303 	adds.w	r3, lr, r3
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	f080 8087 	bcs.w	8000666 <__udivmoddi4+0x2b2>
 8000558:	429c      	cmp	r4, r3
 800055a:	f240 8084 	bls.w	8000666 <__udivmoddi4+0x2b2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	4473      	add	r3, lr
 8000564:	1b1b      	subs	r3, r3, r4
 8000566:	b2ad      	uxth	r5, r5
 8000568:	fbb3 f0f8 	udiv	r0, r3, r8
 800056c:	fb08 3310 	mls	r3, r8, r0, r3
 8000570:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000574:	fb00 fa0a 	mul.w	sl, r0, sl
 8000578:	45a2      	cmp	sl, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1da>
 800057c:	eb1e 0404 	adds.w	r4, lr, r4
 8000580:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000584:	d26b      	bcs.n	800065e <__udivmoddi4+0x2aa>
 8000586:	45a2      	cmp	sl, r4
 8000588:	d969      	bls.n	800065e <__udivmoddi4+0x2aa>
 800058a:	3802      	subs	r0, #2
 800058c:	4474      	add	r4, lr
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	eba4 040a 	sub.w	r4, r4, sl
 800059a:	454c      	cmp	r4, r9
 800059c:	46c2      	mov	sl, r8
 800059e:	464b      	mov	r3, r9
 80005a0:	d354      	bcc.n	800064c <__udivmoddi4+0x298>
 80005a2:	d051      	beq.n	8000648 <__udivmoddi4+0x294>
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d069      	beq.n	800067c <__udivmoddi4+0x2c8>
 80005a8:	ebb1 050a 	subs.w	r5, r1, sl
 80005ac:	eb64 0403 	sbc.w	r4, r4, r3
 80005b0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b4:	40fd      	lsrs	r5, r7
 80005b6:	40fc      	lsrs	r4, r7
 80005b8:	ea4c 0505 	orr.w	r5, ip, r5
 80005bc:	e9c6 5400 	strd	r5, r4, [r6]
 80005c0:	2700      	movs	r7, #0
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0xa0>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f703 	lsr.w	r7, r0, r3
 80005cc:	4095      	lsls	r5, r2
 80005ce:	fa01 f002 	lsl.w	r0, r1, r2
 80005d2:	fa21 f303 	lsr.w	r3, r1, r3
 80005d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005da:	4338      	orrs	r0, r7
 80005dc:	0c01      	lsrs	r1, r0, #16
 80005de:	fbb3 f7fe 	udiv	r7, r3, lr
 80005e2:	fa1f f885 	uxth.w	r8, r5
 80005e6:	fb0e 3317 	mls	r3, lr, r7, r3
 80005ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ee:	fb07 f308 	mul.w	r3, r7, r8
 80005f2:	428b      	cmp	r3, r1
 80005f4:	fa04 f402 	lsl.w	r4, r4, r2
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x256>
 80005fa:	1869      	adds	r1, r5, r1
 80005fc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000600:	d22f      	bcs.n	8000662 <__udivmoddi4+0x2ae>
 8000602:	428b      	cmp	r3, r1
 8000604:	d92d      	bls.n	8000662 <__udivmoddi4+0x2ae>
 8000606:	3f02      	subs	r7, #2
 8000608:	4429      	add	r1, r5
 800060a:	1acb      	subs	r3, r1, r3
 800060c:	b281      	uxth	r1, r0
 800060e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000612:	fb0e 3310 	mls	r3, lr, r0, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb00 f308 	mul.w	r3, r0, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	d907      	bls.n	8000632 <__udivmoddi4+0x27e>
 8000622:	1869      	adds	r1, r5, r1
 8000624:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000628:	d217      	bcs.n	800065a <__udivmoddi4+0x2a6>
 800062a:	428b      	cmp	r3, r1
 800062c:	d915      	bls.n	800065a <__udivmoddi4+0x2a6>
 800062e:	3802      	subs	r0, #2
 8000630:	4429      	add	r1, r5
 8000632:	1ac9      	subs	r1, r1, r3
 8000634:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000638:	e73b      	b.n	80004b2 <__udivmoddi4+0xfe>
 800063a:	4637      	mov	r7, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e709      	b.n	8000454 <__udivmoddi4+0xa0>
 8000640:	4607      	mov	r7, r0
 8000642:	e6e7      	b.n	8000414 <__udivmoddi4+0x60>
 8000644:	4618      	mov	r0, r3
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x8c>
 8000648:	4541      	cmp	r1, r8
 800064a:	d2ab      	bcs.n	80005a4 <__udivmoddi4+0x1f0>
 800064c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000650:	eb69 020e 	sbc.w	r2, r9, lr
 8000654:	3801      	subs	r0, #1
 8000656:	4613      	mov	r3, r2
 8000658:	e7a4      	b.n	80005a4 <__udivmoddi4+0x1f0>
 800065a:	4660      	mov	r0, ip
 800065c:	e7e9      	b.n	8000632 <__udivmoddi4+0x27e>
 800065e:	4618      	mov	r0, r3
 8000660:	e795      	b.n	800058e <__udivmoddi4+0x1da>
 8000662:	4667      	mov	r7, ip
 8000664:	e7d1      	b.n	800060a <__udivmoddi4+0x256>
 8000666:	4681      	mov	r9, r0
 8000668:	e77c      	b.n	8000564 <__udivmoddi4+0x1b0>
 800066a:	3802      	subs	r0, #2
 800066c:	442c      	add	r4, r5
 800066e:	e747      	b.n	8000500 <__udivmoddi4+0x14c>
 8000670:	f1ac 0c02 	sub.w	ip, ip, #2
 8000674:	442b      	add	r3, r5
 8000676:	e72f      	b.n	80004d8 <__udivmoddi4+0x124>
 8000678:	4638      	mov	r0, r7
 800067a:	e708      	b.n	800048e <__udivmoddi4+0xda>
 800067c:	4637      	mov	r7, r6
 800067e:	e6e9      	b.n	8000454 <__udivmoddi4+0xa0>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main_wait_160us>:
static void MX_TIM7_Init(void);
static void MX_TIM1_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
void main_wait_160us(void){
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	f44f 7461 	mov.w	r4, #900	; 0x384
	int i = 0;
	i = 0;
	while(i<900){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800068a:	2620      	movs	r6, #32
 800068c:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8000690:	4631      	mov	r1, r6
 8000692:	4628      	mov	r0, r5
 8000694:	f003 facb 	bl	8003c2e <HAL_GPIO_TogglePin>
	while(i<900){
 8000698:	3c01      	subs	r4, #1
 800069a:	d1f9      	bne.n	8000690 <main_wait_160us+0xc>
		i++;
	}
}
 800069c:	bd70      	pop	{r4, r5, r6, pc}

0800069e <main_wait_20us>:
void main_wait_20us(void){
 800069e:	b570      	push	{r4, r5, r6, lr}
 80006a0:	24b9      	movs	r4, #185	; 0xb9
	int i = 0;
	i = 0;
	while(i<185){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006a2:	2620      	movs	r6, #32
 80006a4:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 80006a8:	4631      	mov	r1, r6
 80006aa:	4628      	mov	r0, r5
 80006ac:	f003 fabf 	bl	8003c2e <HAL_GPIO_TogglePin>
	while(i<185){
 80006b0:	3c01      	subs	r4, #1
 80006b2:	d1f9      	bne.n	80006a8 <main_wait_20us+0xa>
		i++;
	}
}
 80006b4:	bd70      	pop	{r4, r5, r6, pc}

080006b6 <main_wait_1us>:
/*!
\fn main_wait_1us(void)
\brief Function for waiting approximately one microsecond
*/
void main_wait_1us(void){
 80006b6:	b570      	push	{r4, r5, r6, lr}
 80006b8:	2419      	movs	r4, #25
	int i = 0;
	i = 0;
	while(i<25){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006ba:	2620      	movs	r6, #32
 80006bc:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 80006c0:	4631      	mov	r1, r6
 80006c2:	4628      	mov	r0, r5
 80006c4:	f003 fab3 	bl	8003c2e <HAL_GPIO_TogglePin>
	while(i<25){
 80006c8:	3c01      	subs	r4, #1
 80006ca:	d1f9      	bne.n	80006c0 <main_wait_1us+0xa>
		i++;
	}
}
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080006d0 <main_get_huart_tx_state>:
int main_get_huart_tx_state(void){
 80006d0:	b508      	push	{r3, lr}
	return (HAL_DMA_GetState(&hdma_usart2_tx));
 80006d2:	4802      	ldr	r0, [pc, #8]	; (80006dc <main_get_huart_tx_state+0xc>)
 80006d4:	f002 fa14 	bl	8002b00 <HAL_DMA_GetState>
}
 80006d8:	bd08      	pop	{r3, pc}
 80006da:	bf00      	nop
 80006dc:	20001aac 	.word	0x20001aac

080006e0 <main_transmit_buffer>:
void main_transmit_buffer(uint8_t *outBuffer, uint16_t msg_size){
 80006e0:	b508      	push	{r3, lr}
	HAL_UART_Transmit_DMA(&huart2, outBuffer,msg_size);
 80006e2:	460a      	mov	r2, r1
 80006e4:	4601      	mov	r1, r0
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <main_transmit_buffer+0x10>)
 80006e8:	f00e fcf2 	bl	800f0d0 <HAL_UART_Transmit_DMA>
}
 80006ec:	bd08      	pop	{r3, pc}
 80006ee:	bf00      	nop
 80006f0:	20001b34 	.word	0x20001b34

080006f4 <main_stop_motors>:
void main_stop_motors(void)
{
 80006f4:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80006f6:	4c05      	ldr	r4, [pc, #20]	; (800070c <main_stop_motors+0x18>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4620      	mov	r0, r4
 80006fc:	f00c fe54 	bl	800d3a8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000700:	2104      	movs	r1, #4
 8000702:	4620      	mov	r0, r4
 8000704:	f00c fe50 	bl	800d3a8 <HAL_TIM_PWM_Stop>
}
 8000708:	bd10      	pop	{r4, pc}
 800070a:	bf00      	nop
 800070c:	20001af4 	.word	0x20001af4

08000710 <main_set_motors_speed>:
void main_set_motors_speed(mavlink_motor_setpoint_t motor )
{
 8000710:	b500      	push	{lr}
 8000712:	ed2d 8b02 	vpush	{d8}
 8000716:	b085      	sub	sp, #20
 8000718:	ab04      	add	r3, sp, #16
 800071a:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800071e:	eddd 7a02 	vldr	s15, [sp, #8]
 8000722:	ed9d 8a03 	vldr	s16, [sp, #12]

	htim1.Instance->CCR1 = motor.motor_x;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <main_set_motors_speed+0x6c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800072e:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = motor.motor_y;
 8000732:	eebc 7ac8 	vcvt.u32.f32	s14, s16
 8000736:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38

	if (motor.motor_x == 0)
 800073a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000742:	d111      	bne.n	8000768 <main_set_motors_speed+0x58>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000744:	2100      	movs	r1, #0
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <main_set_motors_speed+0x6c>)
 8000748:	f00c fe2e 	bl	800d3a8 <HAL_TIM_PWM_Stop>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	if (motor.motor_y == 0)
 800074c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8000750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000754:	d00d      	beq.n	8000772 <main_set_motors_speed+0x62>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000756:	2104      	movs	r1, #4
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <main_set_motors_speed+0x6c>)
 800075a:	f00c fdf3 	bl	800d344 <HAL_TIM_PWM_Start>

}
 800075e:	b005      	add	sp, #20
 8000760:	ecbd 8b02 	vpop	{d8}
 8000764:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000768:	2100      	movs	r1, #0
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <main_set_motors_speed+0x6c>)
 800076c:	f00c fdea 	bl	800d344 <HAL_TIM_PWM_Start>
 8000770:	e7ec      	b.n	800074c <main_set_motors_speed+0x3c>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000772:	2104      	movs	r1, #4
 8000774:	4801      	ldr	r0, [pc, #4]	; (800077c <main_set_motors_speed+0x6c>)
 8000776:	f00c fe17 	bl	800d3a8 <HAL_TIM_PWM_Stop>
 800077a:	e7f0      	b.n	800075e <main_set_motors_speed+0x4e>
 800077c:	20001af4 	.word	0x20001af4

08000780 <main_read_sensor>:
uint8_t main_read_sensor (const sensor_t sensor, uint8_t adress ){
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	b087      	sub	sp, #28
 8000784:	466c      	mov	r4, sp
 8000786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800078a:	4606      	mov	r6, r0
 800078c:	f89d 4004 	ldrb.w	r4, [sp, #4]
	uint8_t value = 0;
 8000790:	2200      	movs	r2, #0
 8000792:	f88d 2017 	strb.w	r2, [sp, #23]
	uint8_t adress_read = adress & 0x7F;
 8000796:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800079a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800079e:	ad06      	add	r5, sp, #24
 80007a0:	f805 3d02 	strb.w	r3, [r5, #-2]!

	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 80007a4:	b2a4      	uxth	r4, r4
 80007a6:	4621      	mov	r1, r4
 80007a8:	f003 fa3c 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &adress_read, 1, 100);
 80007ac:	4f0e      	ldr	r7, [pc, #56]	; (80007e8 <main_read_sensor+0x68>)
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4629      	mov	r1, r5
 80007b4:	4638      	mov	r0, r7
 80007b6:	f009 faa4 	bl	8009d02 <HAL_SPI_Transmit>
	main_wait_160us();
 80007ba:	f7ff ff63 	bl	8000684 <main_wait_160us>
	HAL_SPI_Receive(&hspi2, &value, 1, 100);
 80007be:	2364      	movs	r3, #100	; 0x64
 80007c0:	2201      	movs	r2, #1
 80007c2:	f10d 0117 	add.w	r1, sp, #23
 80007c6:	4638      	mov	r0, r7
 80007c8:	f009 fcf4 	bl	800a1b4 <HAL_SPI_Receive>
	main_wait_1us();
 80007cc:	f7ff ff73 	bl	80006b6 <main_wait_1us>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4621      	mov	r1, r4
 80007d4:	4630      	mov	r0, r6
 80007d6:	f003 fa25 	bl	8003c24 <HAL_GPIO_WritePin>
	main_wait_20us();
 80007da:	f7ff ff60 	bl	800069e <main_wait_20us>
	return (value);
}
 80007de:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80007e2:	b007      	add	sp, #28
 80007e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20001a48 	.word	0x20001a48

080007ec <main_write_sensor>:

void main_write_sensor (const sensor_t sensor, uint8_t adress, uint8_t data){
 80007ec:	b530      	push	{r4, r5, lr}
 80007ee:	b087      	sub	sp, #28
 80007f0:	466c      	mov	r4, sp
 80007f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007f6:	4605      	mov	r5, r0
 80007f8:	f89d 4004 	ldrb.w	r4, [sp, #4]
	uint8_t value = data;
	uint8_t adress_write = adress | 0x80;
 80007fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8000800:	f063 037f 	orn	r3, r3, #127	; 0x7f
	uint8_t pack[2];
	pack[0] = adress_write;
 8000804:	f88d 3014 	strb.w	r3, [sp, #20]
	pack[1] = value;
 8000808:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800080c:	f88d 3015 	strb.w	r3, [sp, #21]

	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 8000810:	b2a4      	uxth	r4, r4
 8000812:	2200      	movs	r2, #0
 8000814:	4621      	mov	r1, r4
 8000816:	f003 fa05 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, pack, 2, 10);
 800081a:	230a      	movs	r3, #10
 800081c:	2202      	movs	r2, #2
 800081e:	a905      	add	r1, sp, #20
 8000820:	4807      	ldr	r0, [pc, #28]	; (8000840 <main_write_sensor+0x54>)
 8000822:	f009 fa6e 	bl	8009d02 <HAL_SPI_Transmit>
	main_wait_20us();
 8000826:	f7ff ff3a 	bl	800069e <main_wait_20us>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	4621      	mov	r1, r4
 800082e:	4628      	mov	r0, r5
 8000830:	f003 f9f8 	bl	8003c24 <HAL_GPIO_WritePin>
	main_wait_160us();
 8000834:	f7ff ff26 	bl	8000684 <main_wait_160us>
	main_wait_20us();
 8000838:	f7ff ff31 	bl	800069e <main_wait_20us>
}
 800083c:	b007      	add	sp, #28
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	20001a48 	.word	0x20001a48

08000844 <main_write_sensor_burst>:
void main_write_sensor_burst(uint8_t data){
 8000844:	b500      	push	{lr}
 8000846:	b083      	sub	sp, #12
 8000848:	a902      	add	r1, sp, #8
 800084a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi2, &data, 1, 10);
 800084e:	230a      	movs	r3, #10
 8000850:	2201      	movs	r2, #1
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <main_write_sensor_burst+0x20>)
 8000854:	f009 fa55 	bl	8009d02 <HAL_SPI_Transmit>
	main_wait_20us();
 8000858:	f7ff ff21 	bl	800069e <main_wait_20us>
}
 800085c:	b003      	add	sp, #12
 800085e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000862:	bf00      	nop
 8000864:	20001a48 	.word	0x20001a48

08000868 <main_read_sensor_motion_burst>:
void main_read_sensor_motion_burst(uint8_t *data ){
 8000868:	b508      	push	{r3, lr}
	HAL_SPI_Receive(&hspi2,data,12,100);
 800086a:	2364      	movs	r3, #100	; 0x64
 800086c:	220c      	movs	r2, #12
 800086e:	4601      	mov	r1, r0
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <main_read_sensor_motion_burst+0x14>)
 8000872:	f009 fc9f 	bl	800a1b4 <HAL_SPI_Receive>
	main_wait_1us();
 8000876:	f7ff ff1e 	bl	80006b6 <main_wait_1us>
}
 800087a:	bd08      	pop	{r3, pc}
 800087c:	20001a48 	.word	0x20001a48

08000880 <main_transmit_spi>:
void main_transmit_spi(uint8_t data){
 8000880:	b500      	push	{lr}
 8000882:	b083      	sub	sp, #12
	uint8_t data_out = data;
 8000884:	a902      	add	r1, sp, #8
 8000886:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi2, &data_out, 1, 10);
 800088a:	230a      	movs	r3, #10
 800088c:	2201      	movs	r2, #1
 800088e:	4803      	ldr	r0, [pc, #12]	; (800089c <main_transmit_spi+0x1c>)
 8000890:	f009 fa37 	bl	8009d02 <HAL_SPI_Transmit>
}
 8000894:	b003      	add	sp, #12
 8000896:	f85d fb04 	ldr.w	pc, [sp], #4
 800089a:	bf00      	nop
 800089c:	20001a48 	.word	0x20001a48

080008a0 <TM7_IRQHandler>:
Timer 7 is used to generate a periodic interrupt to send status messages. 
Those messages give information about the status of the system and are sent periodically.
The messages giving more important information such as the speed of the ball are sent
as fast as possible, which means faster than the status messages.
*/
void TM7_IRQHandler(void){
 80008a0:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim7);
 80008a2:	4802      	ldr	r0, [pc, #8]	; (80008ac <TM7_IRQHandler+0xc>)
 80008a4:	f00b fbec 	bl	800c080 <HAL_TIM_IRQHandler>
}
 80008a8:	bd08      	pop	{r3, pc}
 80008aa:	bf00      	nop
 80008ac:	20001bb4 	.word	0x20001bb4

080008b0 <HAL_UART_RxCpltCallback>:
This function is used to receive data from UART communication. Everytime one byte is 
received by the STM32 it is copied in the \ref inByte and then passed to the mavlink_parse_char
function. Once enough byte are taken and one message is received the function
\ref mouseDriver_readMsg is called and a subsiquent action is taken.
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b4:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 80008b8:	4604      	mov	r4, r0
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80008ba:	2026      	movs	r0, #38	; 0x26
 80008bc:	f001 fd48 	bl	8002350 <HAL_NVIC_DisableIRQ>
	mavlink_message_t inmsg;
	mavlink_status_t msgStatus;
	if (huart->Instance == USART2){
 80008c0:	6822      	ldr	r2, [r4, #0]
 80008c2:	4bb1      	ldr	r3, [pc, #708]	; (8000b88 <HAL_UART_RxCpltCallback+0x2d8>)
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d006      	beq.n	80008d6 <HAL_UART_RxCpltCallback+0x26>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){

			mouseDriver_readMsg(inmsg);
		}
	}
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c8:	2026      	movs	r0, #38	; 0x26
 80008ca:	f001 fd33 	bl	8002334 <HAL_NVIC_EnableIRQ>
}
 80008ce:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 80008d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_UART_Receive_IT(&huart2, &inByte, 1);
 80008d6:	4cad      	ldr	r4, [pc, #692]	; (8000b8c <HAL_UART_RxCpltCallback+0x2dc>)
 80008d8:	2201      	movs	r2, #1
 80008da:	4621      	mov	r1, r4
 80008dc:	48ac      	ldr	r0, [pc, #688]	; (8000b90 <HAL_UART_RxCpltCallback+0x2e0>)
 80008de:	f00e fb8d 	bl	800effc <HAL_UART_Receive_IT>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 80008e2:	7823      	ldrb	r3, [r4, #0]
 80008e4:	9346      	str	r3, [sp, #280]	; 0x118
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80008e6:	4bab      	ldr	r3, [pc, #684]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80008ec:	78db      	ldrb	r3, [r3, #3]
 80008ee:	2b0f      	cmp	r3, #15
 80008f0:	f200 8205 	bhi.w	8000cfe <HAL_UART_RxCpltCallback+0x44e>
 80008f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80008f8:	00100010 	.word	0x00100010
 80008fc:	00580036 	.word	0x00580036
 8000900:	00a10075 	.word	0x00a10075
 8000904:	00c900b5 	.word	0x00c900b5
 8000908:	010600dd 	.word	0x010600dd
 800090c:	01520124 	.word	0x01520124
 8000910:	01c40171 	.word	0x01c40171
 8000914:	022601c4 	.word	0x022601c4
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8000918:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800091a:	2bfd      	cmp	r3, #253	; 0xfd
 800091c:	d012      	beq.n	8000944 <HAL_UART_RxCpltCallback+0x94>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		} else if (c == MAVLINK_STX_MAVLINK1)
 800091e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000920:	2bfe      	cmp	r3, #254	; 0xfe
 8000922:	d171      	bne.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8000924:	4a9b      	ldr	r2, [pc, #620]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000926:	2302      	movs	r3, #2
 8000928:	70d3      	strb	r3, [r2, #3]
			rxmsg->len = 0;
 800092a:	4b9b      	ldr	r3, [pc, #620]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 800092c:	2100      	movs	r1, #0
 800092e:	70d9      	strb	r1, [r3, #3]
			rxmsg->magic = c;
 8000930:	21fe      	movs	r1, #254	; 0xfe
 8000932:	7099      	strb	r1, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8000934:	7b11      	ldrb	r1, [r2, #12]
 8000936:	f041 0101 	orr.w	r1, r1, #1
 800093a:	7311      	strb	r1, [r2, #12]
	msg->checksum = crcTmp;
 800093c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000940:	801a      	strh	r2, [r3, #0]
 8000942:	e061      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8000944:	4a93      	ldr	r2, [pc, #588]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000946:	2302      	movs	r3, #2
 8000948:	70d3      	strb	r3, [r2, #3]
			rxmsg->len = 0;
 800094a:	4b93      	ldr	r3, [pc, #588]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 800094c:	2100      	movs	r1, #0
 800094e:	70d9      	strb	r1, [r3, #3]
			rxmsg->magic = c;
 8000950:	21fd      	movs	r1, #253	; 0xfd
 8000952:	7099      	strb	r1, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8000954:	7b11      	ldrb	r1, [r2, #12]
 8000956:	f021 0101 	bic.w	r1, r1, #1
 800095a:	7311      	strb	r1, [r2, #12]
	msg->checksum = crcTmp;
 800095c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000960:	801a      	strh	r2, [r3, #0]
 8000962:	e051      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
 8000964:	498c      	ldr	r1, [pc, #560]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000966:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000968:	70ca      	strb	r2, [r1, #3]
			status->packet_idx = 0;
 800096a:	488a      	ldr	r0, [pc, #552]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 800096c:	2300      	movs	r3, #0
 800096e:	7103      	strb	r3, [r0, #4]
	uint16_t checksum = msg->checksum;
 8000970:	880c      	ldrh	r4, [r1, #0]
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000972:	ea82 0304 	eor.w	r3, r2, r4
        tmp ^= (tmp<<4);
 8000976:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800097a:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800097c:	091a      	lsrs	r2, r3, #4
 800097e:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 8000982:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000986:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 800098a:	800b      	strh	r3, [r1, #0]
			mavlink_update_checksum(rxmsg, c);
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800098c:	7b03      	ldrb	r3, [r0, #12]
 800098e:	f013 0f01 	tst.w	r3, #1
 8000992:	d005      	beq.n	80009a0 <HAL_UART_RxCpltCallback+0xf0>
                            rxmsg->incompat_flags = 0;
 8000994:	2200      	movs	r2, #0
 8000996:	710a      	strb	r2, [r1, #4]
                            rxmsg->compat_flags = 0;
 8000998:	714a      	strb	r2, [r1, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800099a:	2205      	movs	r2, #5
 800099c:	70c2      	strb	r2, [r0, #3]
 800099e:	e033      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80009a0:	4b7c      	ldr	r3, [pc, #496]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 80009a2:	2203      	movs	r2, #3
 80009a4:	70da      	strb	r2, [r3, #3]
 80009a6:	e02f      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
                        }
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 80009a8:	4b7b      	ldr	r3, [pc, #492]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 80009aa:	9a46      	ldr	r2, [sp, #280]	; 0x118
 80009ac:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80009ae:	f032 0301 	bics.w	r3, r2, #1
 80009b2:	d003      	beq.n	80009bc <HAL_UART_RxCpltCallback+0x10c>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
			status->msg_received = 0;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80009b4:	4b77      	ldr	r3, [pc, #476]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	70da      	strb	r2, [r3, #3]
 80009ba:	e025      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
	uint16_t checksum = msg->checksum;
 80009bc:	4976      	ldr	r1, [pc, #472]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 80009be:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80009c0:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80009c2:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 80009c4:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80009c8:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80009ca:	091a      	lsrs	r2, r3, #4
 80009cc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80009d0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80009d4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 80009d8:	800b      	strh	r3, [r1, #0]
			break;
		}
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 80009da:	4b6e      	ldr	r3, [pc, #440]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 80009dc:	2204      	movs	r2, #4
 80009de:	70da      	strb	r2, [r3, #3]
 80009e0:	e012      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		break;

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 80009e2:	496d      	ldr	r1, [pc, #436]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 80009e4:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80009e6:	714b      	strb	r3, [r1, #5]
	uint16_t checksum = msg->checksum;
 80009e8:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80009ea:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 80009ec:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80009f0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80009f2:	091a      	lsrs	r2, r3, #4
 80009f4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80009f8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80009fc:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000a00:	800b      	strh	r3, [r1, #0]
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8000a02:	4b64      	ldr	r3, [pc, #400]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a04:	2205      	movs	r2, #5
 8000a06:	70da      	strb	r2, [r3, #3]
		break;
	}

	bufferIndex++;
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8000a08:	4b62      	ldr	r3, [pc, #392]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
		// Count this packet as received
		status->packet_rx_success_count++;
	}

       if (r_message != NULL) {
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8000a0c:	4a62      	ldr	r2, [pc, #392]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000a0e:	78d2      	ldrb	r2, [r2, #3]
 8000a10:	f88d 234f 	strb.w	r2, [sp, #847]	; 0x34f
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
           r_mavlink_status->flags = status->flags;
       }
       status->parse_error = 0;
 8000a14:	4a5f      	ldr	r2, [pc, #380]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	7091      	strb	r1, [r2, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	f040 85f9 	bne.w	8001612 <HAL_UART_RxCpltCallback+0xd62>
    status->parse_error++;
 8000a20:	4b5c      	ldr	r3, [pc, #368]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	709a      	strb	r2, [r3, #2]
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 8000a2a:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000a2c:	2bfd      	cmp	r3, #253	; 0xfd
 8000a2e:	f000 85fa 	beq.w	8001626 <HAL_UART_RxCpltCallback+0xd76>
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8000a32:	4b58      	ldr	r3, [pc, #352]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	70da      	strb	r2, [r3, #3]
 8000a38:	e746      	b.n	80008c8 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->seq = c;
 8000a3a:	4957      	ldr	r1, [pc, #348]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000a3c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000a3e:	718b      	strb	r3, [r1, #6]
	uint16_t checksum = msg->checksum;
 8000a40:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000a42:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8000a44:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000a48:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000a4a:	091a      	lsrs	r2, r3, #4
 8000a4c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000a50:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000a54:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000a58:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8000a5a:	4b4e      	ldr	r3, [pc, #312]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	70da      	strb	r2, [r3, #3]
 8000a60:	e7d2      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->sysid = c;
 8000a62:	494d      	ldr	r1, [pc, #308]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000a64:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000a66:	71cb      	strb	r3, [r1, #7]
	uint16_t checksum = msg->checksum;
 8000a68:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000a6a:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8000a6c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000a70:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000a72:	091a      	lsrs	r2, r3, #4
 8000a74:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000a78:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000a7c:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000a80:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8000a82:	4b44      	ldr	r3, [pc, #272]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a84:	2207      	movs	r2, #7
 8000a86:	70da      	strb	r2, [r3, #3]
 8000a88:	e7be      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->compid = c;
 8000a8a:	4943      	ldr	r1, [pc, #268]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000a8c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000a8e:	720b      	strb	r3, [r1, #8]
	uint16_t checksum = msg->checksum;
 8000a90:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000a92:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8000a94:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000a98:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000a9a:	091a      	lsrs	r2, r3, #4
 8000a9c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000aa0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000aa4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000aa8:	800b      	strh	r3, [r1, #0]
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	70da      	strb	r2, [r3, #3]
 8000ab0:	e7aa      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid = c;
 8000ab2:	4939      	ldr	r1, [pc, #228]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000ab4:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000ab6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8000aba:	724b      	strb	r3, [r1, #9]
 8000abc:	2300      	movs	r3, #0
 8000abe:	728b      	strb	r3, [r1, #10]
 8000ac0:	72cb      	strb	r3, [r1, #11]
	uint16_t checksum = msg->checksum;
 8000ac2:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000ac4:	ea82 0300 	eor.w	r3, r2, r0
        tmp ^= (tmp<<4);
 8000ac8:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000acc:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000ace:	091a      	lsrs	r2, r3, #4
 8000ad0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000ad4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000ad8:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000adc:	800b      	strh	r3, [r1, #0]
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000ae0:	7b1b      	ldrb	r3, [r3, #12]
 8000ae2:	f013 0f01 	tst.w	r3, #1
 8000ae6:	d009      	beq.n	8000afc <HAL_UART_RxCpltCallback+0x24c>
			if(rxmsg->len > 0) {
 8000ae8:	78cb      	ldrb	r3, [r1, #3]
 8000aea:	b11b      	cbz	r3, 8000af4 <HAL_UART_RxCpltCallback+0x244>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000aee:	220b      	movs	r2, #11
 8000af0:	70da      	strb	r2, [r3, #3]
 8000af2:	e789      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	70da      	strb	r2, [r3, #3]
 8000afa:	e785      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000afe:	2209      	movs	r2, #9
 8000b00:	70da      	strb	r2, [r3, #3]
 8000b02:	e781      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid |= c<<8;
 8000b04:	4924      	ldr	r1, [pc, #144]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b06:	688a      	ldr	r2, [r1, #8]
 8000b08:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8000b0a:	0223      	lsls	r3, r4, #8
 8000b0c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 8000b10:	724b      	strb	r3, [r1, #9]
 8000b12:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000b16:	728a      	strb	r2, [r1, #10]
 8000b18:	0c1b      	lsrs	r3, r3, #16
 8000b1a:	72cb      	strb	r3, [r1, #11]
	uint16_t checksum = msg->checksum;
 8000b1c:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000b1e:	ea84 0300 	eor.w	r3, r4, r0
        tmp ^= (tmp<<4);
 8000b22:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000b26:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000b28:	091a      	lsrs	r2, r3, #4
 8000b2a:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000b2e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000b32:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000b36:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000b3a:	220a      	movs	r2, #10
 8000b3c:	70da      	strb	r2, [r3, #3]
 8000b3e:	e763      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8000b40:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b42:	6891      	ldr	r1, [r2, #8]
 8000b44:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8000b46:	0423      	lsls	r3, r4, #16
 8000b48:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 8000b4c:	7253      	strb	r3, [r2, #9]
 8000b4e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8000b52:	7291      	strb	r1, [r2, #10]
 8000b54:	0c1b      	lsrs	r3, r3, #16
 8000b56:	72d3      	strb	r3, [r2, #11]
	uint16_t checksum = msg->checksum;
 8000b58:	8810      	ldrh	r0, [r2, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000b5a:	ea84 0300 	eor.w	r3, r4, r0
        tmp ^= (tmp<<4);
 8000b5e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000b62:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000b64:	0919      	lsrs	r1, r3, #4
 8000b66:	ea81 2110 	eor.w	r1, r1, r0, lsr #8
 8000b6a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8000b6e:	ea81 03c3 	eor.w	r3, r1, r3, lsl #3
	msg->checksum = checksum;
 8000b72:	8013      	strh	r3, [r2, #0]
		if(rxmsg->len > 0){
 8000b74:	78d3      	ldrb	r3, [r2, #3]
 8000b76:	b11b      	cbz	r3, 8000b80 <HAL_UART_RxCpltCallback+0x2d0>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000b7a:	220b      	movs	r2, #11
 8000b7c:	70da      	strb	r2, [r3, #3]
 8000b7e:	e743      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	70da      	strb	r2, [r3, #3]
 8000b86:	e73f      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	200004a8 	.word	0x200004a8
 8000b90:	20001b34 	.word	0x20001b34
 8000b94:	20000938 	.word	0x20000938
 8000b98:	200004ac 	.word	0x200004ac
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8000b9c:	4a91      	ldr	r2, [pc, #580]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000b9e:	7913      	ldrb	r3, [r2, #4]
 8000ba0:	1c59      	adds	r1, r3, #1
 8000ba2:	b2c9      	uxtb	r1, r1
 8000ba4:	7111      	strb	r1, [r2, #4]
 8000ba6:	4890      	ldr	r0, [pc, #576]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000ba8:	4403      	add	r3, r0
 8000baa:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000bac:	731a      	strb	r2, [r3, #12]
	uint16_t checksum = msg->checksum;
 8000bae:	8804      	ldrh	r4, [r0, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000bb0:	ea82 0304 	eor.w	r3, r2, r4
        tmp ^= (tmp<<4);
 8000bb4:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000bb8:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000bba:	091a      	lsrs	r2, r3, #4
 8000bbc:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 8000bc0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000bc4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000bc8:	8003      	strh	r3, [r0, #0]
		if (status->packet_idx == rxmsg->len)
 8000bca:	78c3      	ldrb	r3, [r0, #3]
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	f47f af1b 	bne.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8000bd2:	4b84      	ldr	r3, [pc, #528]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000bd4:	220c      	movs	r2, #12
 8000bd6:	70da      	strb	r2, [r3, #3]
 8000bd8:	e716      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8000bda:	4b83      	ldr	r3, [pc, #524]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	f3c2 2217 	ubfx	r2, r2, #8, #24
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8000be2:	2008      	movs	r0, #8
 8000be4:	2400      	movs	r4, #0
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8000be6:	4d81      	ldr	r5, [pc, #516]	; (8000dec <HAL_UART_RxCpltCallback+0x53c>)
            uint32_t mid = (low+1+high)/2;
 8000be8:	1823      	adds	r3, r4, r0
 8000bea:	3301      	adds	r3, #1
 8000bec:	085b      	lsrs	r3, r3, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8000bee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000bf2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	d334      	bcc.n	8000c64 <HAL_UART_RxCpltCallback+0x3b4>
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	d837      	bhi.n	8000c6e <HAL_UART_RxCpltCallback+0x3be>
        if (mavlink_message_crcs[low].msgid != msgid) {
 8000bfe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000c02:	487a      	ldr	r0, [pc, #488]	; (8000dec <HAL_UART_RxCpltCallback+0x53c>)
 8000c04:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	d032      	beq.n	8000c72 <HAL_UART_RxCpltCallback+0x3c2>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8000c0c:	2100      	movs	r1, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 8000c0e:	460b      	mov	r3, r1
	uint16_t checksum = msg->checksum;
 8000c10:	4875      	ldr	r0, [pc, #468]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000c12:	8804      	ldrh	r4, [r0, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000c14:	4063      	eors	r3, r4
        tmp ^= (tmp<<4);
 8000c16:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8000c1a:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000c1c:	0913      	lsrs	r3, r2, #4
 8000c1e:	ea83 2314 	eor.w	r3, r3, r4, lsr #8
 8000c22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c26:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
	msg->checksum = checksum;
 8000c2a:	8003      	strh	r3, [r0, #0]
		if (c != (rxmsg->checksum & 0xFF)) {
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000c30:	429a      	cmp	r2, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8000c32:	4b6c      	ldr	r3, [pc, #432]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000c34:	bf14      	ite	ne
 8000c36:	220e      	movne	r2, #14
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8000c38:	220d      	moveq	r2, #13
 8000c3a:	70da      	strb	r2, [r3, #3]
                rxmsg->ck[0] = c;
 8000c3c:	4b6a      	ldr	r3, [pc, #424]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000c3e:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000c40:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                if (e && status->packet_idx < e->max_msg_len) {
 8000c44:	2900      	cmp	r1, #0
 8000c46:	f43f aedf 	beq.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
 8000c4a:	4b66      	ldr	r3, [pc, #408]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	798a      	ldrb	r2, [r1, #6]
 8000c50:	4293      	cmp	r3, r2
 8000c52:	f4bf aed9 	bcs.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8000c56:	1ad2      	subs	r2, r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4865      	ldr	r0, [pc, #404]	; (8000df0 <HAL_UART_RxCpltCallback+0x540>)
 8000c5c:	4418      	add	r0, r3
 8000c5e:	f012 fd9f 	bl	80137a0 <memset>
 8000c62:	e6d1      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
                high = mid-1;
 8000c64:	1e58      	subs	r0, r3, #1
        while (low < high) {
 8000c66:	42a0      	cmp	r0, r4
 8000c68:	d8be      	bhi.n	8000be8 <HAL_UART_RxCpltCallback+0x338>
 8000c6a:	4623      	mov	r3, r4
 8000c6c:	e7c7      	b.n	8000bfe <HAL_UART_RxCpltCallback+0x34e>
                low = mid;
 8000c6e:	461c      	mov	r4, r3
 8000c70:	e7f9      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x3b6>
        return &mavlink_message_crcs[low];
 8000c72:	4602      	mov	r2, r0
 8000c74:	0058      	lsls	r0, r3, #1
 8000c76:	18c1      	adds	r1, r0, r3
 8000c78:	eb02 0181 	add.w	r1, r2, r1, lsl #2
		uint8_t crc_extra = e?e->crc_extra:0;
 8000c7c:	790b      	ldrb	r3, [r1, #4]
 8000c7e:	e7c7      	b.n	8000c10 <HAL_UART_RxCpltCallback+0x360>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8000c80:	2b0e      	cmp	r3, #14
 8000c82:	d005      	beq.n	8000c90 <HAL_UART_RxCpltCallback+0x3e0>
 8000c84:	4b58      	ldr	r3, [pc, #352]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000c8a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 8000c8e:	d017      	beq.n	8000cc0 <HAL_UART_RxCpltCallback+0x410>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8000c90:	4b54      	ldr	r3, [pc, #336]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000c92:	2202      	movs	r2, #2
 8000c94:	701a      	strb	r2, [r3, #0]
		rxmsg->ck[1] = c;
 8000c96:	4b54      	ldr	r3, [pc, #336]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000c98:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000c9a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	f013 0f01 	tst.w	r3, #1
 8000ca4:	d010      	beq.n	8000cc8 <HAL_UART_RxCpltCallback+0x418>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8000ca6:	4b4f      	ldr	r3, [pc, #316]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000ca8:	220f      	movs	r2, #15
 8000caa:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8000cac:	220d      	movs	r2, #13
 8000cae:	735a      	strb	r2, [r3, #13]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	f43f aea8 	beq.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e6a3      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->msg_received = MAVLINK_FRAMING_OK;
 8000cc0:	4b48      	ldr	r3, [pc, #288]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e7e6      	b.n	8000c96 <HAL_UART_RxCpltCallback+0x3e6>
			if (status->signing &&
 8000cc8:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	b173      	cbz	r3, 8000cec <HAL_UART_RxCpltCallback+0x43c>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8000cd0:	b12b      	cbz	r3, 8000cde <HAL_UART_RxCpltCallback+0x42e>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8000cd2:	4a45      	ldr	r2, [pc, #276]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000cd4:	6891      	ldr	r1, [r2, #8]
 8000cd6:	0a09      	lsrs	r1, r1, #8
 8000cd8:	4842      	ldr	r0, [pc, #264]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cda:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8000cdc:	b930      	cbnz	r0, 8000cec <HAL_UART_RxCpltCallback+0x43c>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d002      	beq.n	8000cec <HAL_UART_RxCpltCallback+0x43c>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8000ce6:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000ce8:	2203      	movs	r2, #3
 8000cea:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8000cec:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	70da      	strb	r2, [r3, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8000cf2:	f240 1223 	movw	r2, #291	; 0x123
 8000cf6:	493c      	ldr	r1, [pc, #240]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000cf8:	a8d3      	add	r0, sp, #844	; 0x34c
 8000cfa:	f7ff faa9 	bl	8000250 <memcpy>
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8000cfe:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	f47f ae82 	bne.w	8000a0c <HAL_UART_RxCpltCallback+0x15c>
		status->current_rx_seq = rxmsg->seq;
 8000d08:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d0a:	4a37      	ldr	r2, [pc, #220]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000d0c:	7992      	ldrb	r2, [r2, #6]
 8000d0e:	715a      	strb	r2, [r3, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8000d10:	891b      	ldrh	r3, [r3, #8]
 8000d12:	b913      	cbnz	r3, 8000d1a <HAL_UART_RxCpltCallback+0x46a>
 8000d14:	4a33      	ldr	r2, [pc, #204]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	8151      	strh	r1, [r2, #10]
		status->packet_rx_success_count++;
 8000d1a:	4a32      	ldr	r2, [pc, #200]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	8113      	strh	r3, [r2, #8]
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8000d20:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000d22:	78db      	ldrb	r3, [r3, #3]
 8000d24:	f88d 334f 	strb.w	r3, [sp, #847]	; 0x34f
       status->parse_error = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	7093      	strb	r3, [r2, #2]
			mouseDriver_readMsg(inmsg);
 8000d2c:	acd3      	add	r4, sp, #844	; 0x34c
 8000d2e:	f240 1213 	movw	r2, #275	; 0x113
 8000d32:	a9d7      	add	r1, sp, #860	; 0x35c
 8000d34:	4668      	mov	r0, sp
 8000d36:	f7ff fa8b 	bl	8000250 <memcpy>
 8000d3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d3e:	f012 faaf 	bl	80132a0 <mouseDriver_readMsg>
 8000d42:	e5c1      	b.n	80008c8 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8000d44:	4927      	ldr	r1, [pc, #156]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d46:	7b4b      	ldrb	r3, [r1, #13]
 8000d48:	4a2a      	ldr	r2, [pc, #168]	; (8000df4 <HAL_UART_RxCpltCallback+0x544>)
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	9846      	ldr	r0, [sp, #280]	; 0x118
 8000d4e:	f882 0116 	strb.w	r0, [r2, #278]	; 0x116
		status->signature_wait--;
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	734b      	strb	r3, [r1, #13]
		if (status->signature_wait == 0) {
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f47f ae55 	bne.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8000d5e:	690d      	ldr	r5, [r1, #16]
 8000d60:	954b      	str	r5, [sp, #300]	; 0x12c
	if (signing == NULL) {
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 83c9 	beq.w	80014fa <HAL_UART_RxCpltCallback+0xc4a>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8000d68:	694b      	ldr	r3, [r1, #20]
 8000d6a:	9354      	str	r3, [sp, #336]	; 0x150
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
    m->sz[0] = 0;
    m->sz[1] = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9379      	str	r3, [sp, #484]	; 0x1e4
    A = 0x6a09e667;
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_UART_RxCpltCallback+0x548>)
 8000d72:	937a      	str	r3, [sp, #488]	; 0x1e8
    B = 0xbb67ae85;
 8000d74:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <HAL_UART_RxCpltCallback+0x54c>)
 8000d76:	937b      	str	r3, [sp, #492]	; 0x1ec
    C = 0x3c6ef372;
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_UART_RxCpltCallback+0x550>)
 8000d7a:	937c      	str	r3, [sp, #496]	; 0x1f0
    D = 0xa54ff53a;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_UART_RxCpltCallback+0x554>)
 8000d7e:	937d      	str	r3, [sp, #500]	; 0x1f4
    E = 0x510e527f;
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <HAL_UART_RxCpltCallback+0x558>)
 8000d82:	937e      	str	r3, [sp, #504]	; 0x1f8
    F = 0x9b05688c;
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_UART_RxCpltCallback+0x55c>)
 8000d86:	937f      	str	r3, [sp, #508]	; 0x1fc
    G = 0x1f83d9ab;
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <HAL_UART_RxCpltCallback+0x560>)
 8000d8a:	9380      	str	r3, [sp, #512]	; 0x200
    H = 0x5be0cd19;
 8000d8c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8000d90:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8000d94:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8000d98:	9381      	str	r3, [sp, #516]	; 0x204
    while(len > 0){
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000d9a:	ac82      	add	r4, sp, #520	; 0x208
 8000d9c:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8000da0:	6869      	ldr	r1, [r5, #4]
 8000da2:	68aa      	ldr	r2, [r5, #8]
 8000da4:	68eb      	ldr	r3, [r5, #12]
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	6928      	ldr	r0, [r5, #16]
 8000daa:	6969      	ldr	r1, [r5, #20]
 8000dac:	69aa      	ldr	r2, [r5, #24]
 8000dae:	69eb      	ldr	r3, [r5, #28]
 8000db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000db4:	78db      	ldrb	r3, [r3, #3]
 8000db6:	330a      	adds	r3, #10
 8000db8:	9348      	str	r3, [sp, #288]	; 0x120
    m->sz[0] += len * 8;
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dc0:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8000dc2:	2bff      	cmp	r3, #255	; 0xff
	++m->sz[1];
 8000dc4:	bf9c      	itt	ls
 8000dc6:	2301      	movls	r3, #1
 8000dc8:	9379      	strls	r3, [sp, #484]	; 0x1e4
    while(len > 0){
 8000dca:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 80dd 	beq.w	8000f8c <HAL_UART_RxCpltCallback+0x6dc>
    const unsigned char *p = (const unsigned char *)v;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_UART_RxCpltCallback+0x564>)
 8000dd4:	9349      	str	r3, [sp, #292]	; 0x124
    offset = (old_sz / 8) % 64;
 8000dd6:	2520      	movs	r5, #32
 8000dd8:	ab75      	add	r3, sp, #468	; 0x1d4
 8000dda:	9353      	str	r3, [sp, #332]	; 0x14c
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000ddc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8000e18 <HAL_UART_RxCpltCallback+0x568>
 8000de0:	e06a      	b.n	8000eb8 <HAL_UART_RxCpltCallback+0x608>
 8000de2:	bf00      	nop
 8000de4:	20000938 	.word	0x20000938
 8000de8:	200004ac 	.word	0x200004ac
 8000dec:	08013abc 	.word	0x08013abc
 8000df0:	200004b8 	.word	0x200004b8
 8000df4:	200004b9 	.word	0x200004b9
 8000df8:	6a09e667 	.word	0x6a09e667
 8000dfc:	bb67ae85 	.word	0xbb67ae85
 8000e00:	3c6ef372 	.word	0x3c6ef372
 8000e04:	a54ff53a 	.word	0xa54ff53a
 8000e08:	510e527f 	.word	0x510e527f
 8000e0c:	9b05688c 	.word	0x9b05688c
 8000e10:	1f83d9ab 	.word	0x1f83d9ab
 8000e14:	200004ae 	.word	0x200004ae
 8000e18:	08013b28 	.word	0x08013b28
    for (i = 0; i < 64; i++) {
 8000e1c:	4635      	mov	r5, r6
 8000e1e:	4606      	mov	r6, r0
	AA = T1 + T2;
 8000e20:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 8000e22:	4667      	mov	r7, ip
 8000e24:	468c      	mov	ip, r1
	EE = DD + T1;
 8000e26:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000e28:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8000e2c:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8000e30:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8000e34:	ea27 0a01 	bic.w	sl, r7, r1
 8000e38:	ea01 0b0c 	and.w	fp, r1, ip
 8000e3c:	ea8a 0a0b 	eor.w	sl, sl, fp
 8000e40:	4453      	add	r3, sl
 8000e42:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8000e46:	4413      	add	r3, r2
 8000e48:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8000e50:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000e52:	ea4f 3270 	mov.w	r2, r0, ror #13
 8000e56:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8000e5a:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8000e5e:	ea86 0a05 	eor.w	sl, r6, r5
 8000e62:	ea0a 0a00 	and.w	sl, sl, r0
 8000e66:	ea06 0b05 	and.w	fp, r6, r5
 8000e6a:	ea8a 0a0b 	eor.w	sl, sl, fp
 8000e6e:	4452      	add	r2, sl
	EE = DD + T1;
 8000e70:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 8000e74:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 8000e76:	3401      	adds	r4, #1
 8000e78:	9747      	str	r7, [sp, #284]	; 0x11c
 8000e7a:	46ae      	mov	lr, r5
 8000e7c:	2c40      	cmp	r4, #64	; 0x40
 8000e7e:	d1cd      	bne.n	8000e1c <HAL_UART_RxCpltCallback+0x56c>
    A += AA;
 8000e80:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8000e82:	441a      	add	r2, r3
 8000e84:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 8000e86:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8000e88:	4403      	add	r3, r0
 8000e8a:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 8000e8c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8000e8e:	4433      	add	r3, r6
 8000e90:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 8000e92:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8000e94:	442b      	add	r3, r5
 8000e96:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 8000e98:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8000e9a:	445b      	add	r3, fp
 8000e9c:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 8000e9e:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8000ea0:	440b      	add	r3, r1
 8000ea2:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 8000ea4:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8000ea6:	4463      	add	r3, ip
 8000ea8:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 8000eaa:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8000eac:	443b      	add	r3, r7
 8000eae:	9381      	str	r3, [sp, #516]	; 0x204
                p2[1] = p1[2];
                p2[2] = p1[1];
                p2[3] = p1[0];
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8000eb0:	2500      	movs	r5, #0
    while(len > 0){
 8000eb2:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d069      	beq.n	8000f8c <HAL_UART_RxCpltCallback+0x6dc>
	uint32_t l = 64 - offset;
 8000eb8:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 8000ebc:	9e48      	ldr	r6, [sp, #288]	; 0x120
 8000ebe:	42b4      	cmp	r4, r6
 8000ec0:	bf28      	it	cs
 8000ec2:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	9f49      	ldr	r7, [sp, #292]	; 0x124
 8000ec8:	4639      	mov	r1, r7
 8000eca:	ab82      	add	r3, sp, #520	; 0x208
 8000ecc:	1958      	adds	r0, r3, r5
 8000ece:	f7ff f9bf 	bl	8000250 <memcpy>
	offset += l;
 8000ed2:	4425      	add	r5, r4
	p += l;
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4423      	add	r3, r4
 8000ed8:	9349      	str	r3, [sp, #292]	; 0x124
	len -= l;
 8000eda:	1b33      	subs	r3, r6, r4
 8000edc:	9348      	str	r3, [sp, #288]	; 0x120
	if(offset == 64){
 8000ede:	2d40      	cmp	r5, #64	; 0x40
 8000ee0:	d1e7      	bne.n	8000eb2 <HAL_UART_RxCpltCallback+0x602>
 8000ee2:	ab78      	add	r3, sp, #480	; 0x1e0
 8000ee4:	a888      	add	r0, sp, #544	; 0x220
 8000ee6:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 8000ee8:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8000eec:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8000eee:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8000ef2:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 8000ef4:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8000ef8:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8000efa:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000efe:	70d1      	strb	r1, [r2, #3]
 8000f00:	3304      	adds	r3, #4
 8000f02:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 8000f04:	4298      	cmp	r0, r3
 8000f06:	d1ef      	bne.n	8000ee8 <HAL_UART_RxCpltCallback+0x638>
    AA = A;
 8000f08:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8000f0a:	934a      	str	r3, [sp, #296]	; 0x128
    BB = B;
 8000f0c:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 8000f0e:	934c      	str	r3, [sp, #304]	; 0x130
    CC = C;
 8000f10:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 8000f12:	934d      	str	r3, [sp, #308]	; 0x134
    DD = D;
 8000f14:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 8000f16:	934e      	str	r3, [sp, #312]	; 0x138
    EE = E;
 8000f18:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8000f1a:	934f      	str	r3, [sp, #316]	; 0x13c
    FF = F;
 8000f1c:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 8000f1e:	9350      	str	r3, [sp, #320]	; 0x140
    GG = G;
 8000f20:	9b80      	ldr	r3, [sp, #512]	; 0x200
 8000f22:	9351      	str	r3, [sp, #324]	; 0x144
    HH = H;
 8000f24:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8000f26:	9352      	str	r3, [sp, #328]	; 0x148
 8000f28:	ab65      	add	r3, sp, #404	; 0x194
 8000f2a:	aa91      	add	r2, sp, #580	; 0x244
 8000f2c:	9853      	ldr	r0, [sp, #332]	; 0x14c
	data[i] = in[i];
 8000f2e:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8000f32:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 8000f36:	4298      	cmp	r0, r3
 8000f38:	d1f9      	bne.n	8000f2e <HAL_UART_RxCpltCallback+0x67e>
 8000f3a:	ac92      	add	r4, sp, #584	; 0x248
 8000f3c:	adc2      	add	r5, sp, #776	; 0x308
 8000f3e:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000f40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 8000f42:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000f46:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8000f4a:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 8000f4e:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8000f52:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000f54:	6800      	ldr	r0, [r0, #0]
 8000f56:	4402      	add	r2, r0
 8000f58:	4413      	add	r3, r2
 8000f5a:	ea4f 42b1 	mov.w	r2, r1, ror #18
 8000f5e:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 8000f62:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 8000f66:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000f68:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	d1e7      	bne.n	8000f3e <HAL_UART_RxCpltCallback+0x68e>
    DD = D;
 8000f6e:	f8dd e138 	ldr.w	lr, [sp, #312]	; 0x138
    CC = C;
 8000f72:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    BB = B;
 8000f74:	9e4c      	ldr	r6, [sp, #304]	; 0x130
    AA = A;
 8000f76:	984a      	ldr	r0, [sp, #296]	; 0x128
    GG = G;
 8000f78:	9f51      	ldr	r7, [sp, #324]	; 0x144
    FF = F;
 8000f7a:	f8dd c140 	ldr.w	ip, [sp, #320]	; 0x140
    HH = H;
 8000f7e:	9a52      	ldr	r2, [sp, #328]	; 0x148
    EE = E;
 8000f80:	994f      	ldr	r1, [sp, #316]	; 0x13c
    for (i = 0; i < 64; i++) {
 8000f82:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000f84:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8000f88:	9247      	str	r2, [sp, #284]	; 0x11c
 8000f8a:	e74d      	b.n	8000e28 <HAL_UART_RxCpltCallback+0x578>
    uint32_t old_sz = m->sz[0];
 8000f8c:	9d78      	ldr	r5, [sp, #480]	; 0x1e0
    m->sz[0] += len * 8;
 8000f8e:	f105 0310 	add.w	r3, r5, #16
 8000f92:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8000f94:	429d      	cmp	r5, r3
 8000f96:	d902      	bls.n	8000f9e <HAL_UART_RxCpltCallback+0x6ee>
	++m->sz[1];
 8000f98:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	9379      	str	r3, [sp, #484]	; 0x1e4
    offset = (old_sz / 8) % 64;
 8000f9e:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    const unsigned char *p = (const unsigned char *)v;
 8000fa2:	4b6a      	ldr	r3, [pc, #424]	; (800114c <HAL_UART_RxCpltCallback+0x89c>)
 8000fa4:	9348      	str	r3, [sp, #288]	; 0x120
    offset = (old_sz / 8) % 64;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	9349      	str	r3, [sp, #292]	; 0x124
 8000faa:	ab75      	add	r3, sp, #468	; 0x1d4
 8000fac:	9353      	str	r3, [sp, #332]	; 0x14c
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000fae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001154 <HAL_UART_RxCpltCallback+0x8a4>
 8000fb2:	e04d      	b.n	8001050 <HAL_UART_RxCpltCallback+0x7a0>
    for (i = 0; i < 64; i++) {
 8000fb4:	4635      	mov	r5, r6
 8000fb6:	4606      	mov	r6, r0
	AA = T1 + T2;
 8000fb8:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 8000fba:	4667      	mov	r7, ip
 8000fbc:	468c      	mov	ip, r1
	EE = DD + T1;
 8000fbe:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000fc0:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8000fc4:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8000fc8:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8000fcc:	ea27 0a01 	bic.w	sl, r7, r1
 8000fd0:	ea01 0b0c 	and.w	fp, r1, ip
 8000fd4:	ea8a 0a0b 	eor.w	sl, sl, fp
 8000fd8:	4453      	add	r3, sl
 8000fda:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8000fde:	4413      	add	r3, r2
 8000fe0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8000fe8:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000fea:	ea4f 3270 	mov.w	r2, r0, ror #13
 8000fee:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8000ff2:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8000ff6:	ea86 0a05 	eor.w	sl, r6, r5
 8000ffa:	ea0a 0a00 	and.w	sl, sl, r0
 8000ffe:	ea06 0b05 	and.w	fp, r6, r5
 8001002:	ea8a 0a0b 	eor.w	sl, sl, fp
 8001006:	4452      	add	r2, sl
	EE = DD + T1;
 8001008:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 800100c:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 800100e:	3401      	adds	r4, #1
 8001010:	9747      	str	r7, [sp, #284]	; 0x11c
 8001012:	46ae      	mov	lr, r5
 8001014:	2c40      	cmp	r4, #64	; 0x40
 8001016:	d1cd      	bne.n	8000fb4 <HAL_UART_RxCpltCallback+0x704>
    A += AA;
 8001018:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 800101a:	441a      	add	r2, r3
 800101c:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 800101e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8001020:	4403      	add	r3, r0
 8001022:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 8001024:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8001026:	4433      	add	r3, r6
 8001028:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 800102a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800102c:	442b      	add	r3, r5
 800102e:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 8001030:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8001032:	445b      	add	r3, fp
 8001034:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 8001036:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8001038:	440b      	add	r3, r1
 800103a:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 800103c:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800103e:	4463      	add	r3, ip
 8001040:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 8001042:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8001044:	443b      	add	r3, r7
 8001046:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 8001048:	2500      	movs	r5, #0
    while(len > 0){
 800104a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800104c:	2b00      	cmp	r3, #0
 800104e:	d069      	beq.n	8001124 <HAL_UART_RxCpltCallback+0x874>
	uint32_t l = 64 - offset;
 8001050:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 8001054:	9e49      	ldr	r6, [sp, #292]	; 0x124
 8001056:	42b4      	cmp	r4, r6
 8001058:	bf28      	it	cs
 800105a:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800105c:	4622      	mov	r2, r4
 800105e:	9f48      	ldr	r7, [sp, #288]	; 0x120
 8001060:	4639      	mov	r1, r7
 8001062:	ab82      	add	r3, sp, #520	; 0x208
 8001064:	1958      	adds	r0, r3, r5
 8001066:	f7ff f8f3 	bl	8000250 <memcpy>
	offset += l;
 800106a:	4425      	add	r5, r4
	p += l;
 800106c:	463b      	mov	r3, r7
 800106e:	4423      	add	r3, r4
 8001070:	9348      	str	r3, [sp, #288]	; 0x120
	len -= l;
 8001072:	1b33      	subs	r3, r6, r4
 8001074:	9349      	str	r3, [sp, #292]	; 0x124
	if(offset == 64){
 8001076:	2d40      	cmp	r5, #64	; 0x40
 8001078:	d1e7      	bne.n	800104a <HAL_UART_RxCpltCallback+0x79a>
 800107a:	ab78      	add	r3, sp, #480	; 0x1e0
 800107c:	a888      	add	r0, sp, #544	; 0x220
 800107e:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 8001080:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8001084:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8001086:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 800108a:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 800108c:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8001090:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8001092:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001096:	70d1      	strb	r1, [r2, #3]
 8001098:	3304      	adds	r3, #4
 800109a:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 800109c:	4283      	cmp	r3, r0
 800109e:	d1ef      	bne.n	8001080 <HAL_UART_RxCpltCallback+0x7d0>
    AA = A;
 80010a0:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 80010a2:	934a      	str	r3, [sp, #296]	; 0x128
    BB = B;
 80010a4:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 80010a6:	934c      	str	r3, [sp, #304]	; 0x130
    CC = C;
 80010a8:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 80010aa:	934d      	str	r3, [sp, #308]	; 0x134
    DD = D;
 80010ac:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 80010ae:	934e      	str	r3, [sp, #312]	; 0x138
    EE = E;
 80010b0:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 80010b2:	934f      	str	r3, [sp, #316]	; 0x13c
    FF = F;
 80010b4:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 80010b6:	9350      	str	r3, [sp, #320]	; 0x140
    GG = G;
 80010b8:	9b80      	ldr	r3, [sp, #512]	; 0x200
 80010ba:	9351      	str	r3, [sp, #324]	; 0x144
    HH = H;
 80010bc:	9b81      	ldr	r3, [sp, #516]	; 0x204
 80010be:	9352      	str	r3, [sp, #328]	; 0x148
 80010c0:	ab65      	add	r3, sp, #404	; 0x194
 80010c2:	aa91      	add	r2, sp, #580	; 0x244
 80010c4:	9853      	ldr	r0, [sp, #332]	; 0x14c
	data[i] = in[i];
 80010c6:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80010ca:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 80010ce:	4283      	cmp	r3, r0
 80010d0:	d1f9      	bne.n	80010c6 <HAL_UART_RxCpltCallback+0x816>
 80010d2:	ac92      	add	r4, sp, #584	; 0x248
 80010d4:	adc2      	add	r5, sp, #776	; 0x308
 80010d6:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80010d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 80010da:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80010de:	ea4f 43f2 	mov.w	r3, r2, ror #19
 80010e2:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 80010e6:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80010ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80010ec:	6800      	ldr	r0, [r0, #0]
 80010ee:	4402      	add	r2, r0
 80010f0:	4413      	add	r3, r2
 80010f2:	ea4f 42b1 	mov.w	r2, r1, ror #18
 80010f6:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 80010fa:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80010fe:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001100:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8001102:	42ac      	cmp	r4, r5
 8001104:	d1e7      	bne.n	80010d6 <HAL_UART_RxCpltCallback+0x826>
    DD = D;
 8001106:	f8dd e138 	ldr.w	lr, [sp, #312]	; 0x138
    CC = C;
 800110a:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    BB = B;
 800110c:	9e4c      	ldr	r6, [sp, #304]	; 0x130
    AA = A;
 800110e:	984a      	ldr	r0, [sp, #296]	; 0x128
    GG = G;
 8001110:	9f51      	ldr	r7, [sp, #324]	; 0x144
    FF = F;
 8001112:	f8dd c140 	ldr.w	ip, [sp, #320]	; 0x140
    HH = H;
 8001116:	9a52      	ldr	r2, [sp, #328]	; 0x148
    EE = E;
 8001118:	994f      	ldr	r1, [sp, #316]	; 0x13c
    for (i = 0; i < 64; i++) {
 800111a:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800111c:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8001120:	9247      	str	r2, [sp, #284]	; 0x11c
 8001122:	e74d      	b.n	8000fc0 <HAL_UART_RxCpltCallback+0x710>
    uint32_t old_sz = m->sz[0];
 8001124:	9d78      	ldr	r5, [sp, #480]	; 0x1e0
    m->sz[0] += len * 8;
 8001126:	f105 0338 	add.w	r3, r5, #56	; 0x38
 800112a:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 800112c:	429d      	cmp	r5, r3
 800112e:	d902      	bls.n	8001136 <HAL_UART_RxCpltCallback+0x886>
	++m->sz[1];
 8001130:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 8001132:	3301      	adds	r3, #1
 8001134:	9379      	str	r3, [sp, #484]	; 0x1e4
    offset = (old_sz / 8) % 64;
 8001136:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    const unsigned char *p = (const unsigned char *)v;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_UART_RxCpltCallback+0x8a0>)
 800113c:	934a      	str	r3, [sp, #296]	; 0x128
    offset = (old_sz / 8) % 64;
 800113e:	2307      	movs	r3, #7
 8001140:	9348      	str	r3, [sp, #288]	; 0x120
 8001142:	ab75      	add	r3, sp, #468	; 0x1d4
 8001144:	9355      	str	r3, [sp, #340]	; 0x154
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001146:	f8df 800c 	ldr.w	r8, [pc, #12]	; 8001154 <HAL_UART_RxCpltCallback+0x8a4>
 800114a:	e053      	b.n	80011f4 <HAL_UART_RxCpltCallback+0x944>
 800114c:	200005c0 	.word	0x200005c0
 8001150:	200005c2 	.word	0x200005c2
 8001154:	08013b28 	.word	0x08013b28
    for (i = 0; i < 64; i++) {
 8001158:	4635      	mov	r5, r6
 800115a:	4606      	mov	r6, r0
	AA = T1 + T2;
 800115c:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 800115e:	4667      	mov	r7, ip
 8001160:	468c      	mov	ip, r1
	EE = DD + T1;
 8001162:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001164:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8001168:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 800116c:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8001170:	ea27 0a01 	bic.w	sl, r7, r1
 8001174:	ea01 0b0c 	and.w	fp, r1, ip
 8001178:	ea8a 0a0b 	eor.w	sl, sl, fp
 800117c:	4453      	add	r3, sl
 800117e:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8001182:	4413      	add	r3, r2
 8001184:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8001188:	4413      	add	r3, r2
 800118a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800118c:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800118e:	ea4f 3270 	mov.w	r2, r0, ror #13
 8001192:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8001196:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 800119a:	ea86 0a05 	eor.w	sl, r6, r5
 800119e:	ea0a 0a00 	and.w	sl, sl, r0
 80011a2:	ea06 0b05 	and.w	fp, r6, r5
 80011a6:	ea8a 0a0b 	eor.w	sl, sl, fp
 80011aa:	4452      	add	r2, sl
	EE = DD + T1;
 80011ac:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 80011b0:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 80011b2:	3401      	adds	r4, #1
 80011b4:	9747      	str	r7, [sp, #284]	; 0x11c
 80011b6:	46ae      	mov	lr, r5
 80011b8:	2c40      	cmp	r4, #64	; 0x40
 80011ba:	d1cd      	bne.n	8001158 <HAL_UART_RxCpltCallback+0x8a8>
    A += AA;
 80011bc:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 80011be:	441a      	add	r2, r3
 80011c0:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 80011c2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80011c4:	4403      	add	r3, r0
 80011c6:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 80011c8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80011ca:	4433      	add	r3, r6
 80011cc:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 80011ce:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80011d0:	442b      	add	r3, r5
 80011d2:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 80011d4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80011d6:	445b      	add	r3, fp
 80011d8:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 80011da:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80011dc:	440b      	add	r3, r1
 80011de:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 80011e0:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80011e2:	4463      	add	r3, ip
 80011e4:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 80011e6:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 80011e8:	443b      	add	r3, r7
 80011ea:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 80011ec:	9d49      	ldr	r5, [sp, #292]	; 0x124
    while(len > 0){
 80011ee:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d069      	beq.n	80012c8 <HAL_UART_RxCpltCallback+0xa18>
	uint32_t l = 64 - offset;
 80011f4:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 80011f8:	9e48      	ldr	r6, [sp, #288]	; 0x120
 80011fa:	42b4      	cmp	r4, r6
 80011fc:	bf28      	it	cs
 80011fe:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8001200:	4622      	mov	r2, r4
 8001202:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8001204:	4639      	mov	r1, r7
 8001206:	ab82      	add	r3, sp, #520	; 0x208
 8001208:	1958      	adds	r0, r3, r5
 800120a:	f7ff f821 	bl	8000250 <memcpy>
	offset += l;
 800120e:	4425      	add	r5, r4
	p += l;
 8001210:	463b      	mov	r3, r7
 8001212:	4423      	add	r3, r4
 8001214:	934a      	str	r3, [sp, #296]	; 0x128
	len -= l;
 8001216:	1b33      	subs	r3, r6, r4
 8001218:	9348      	str	r3, [sp, #288]	; 0x120
	if(offset == 64){
 800121a:	2d40      	cmp	r5, #64	; 0x40
 800121c:	d1e7      	bne.n	80011ee <HAL_UART_RxCpltCallback+0x93e>
 800121e:	ab78      	add	r3, sp, #480	; 0x1e0
 8001220:	a888      	add	r0, sp, #544	; 0x220
 8001222:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 8001224:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8001228:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 800122a:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 800122e:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 8001230:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8001234:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8001236:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800123a:	70d1      	strb	r1, [r2, #3]
 800123c:	3304      	adds	r3, #4
 800123e:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 8001240:	4298      	cmp	r0, r3
 8001242:	d1ef      	bne.n	8001224 <HAL_UART_RxCpltCallback+0x974>
    AA = A;
 8001244:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8001246:	934c      	str	r3, [sp, #304]	; 0x130
    BB = B;
 8001248:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 800124a:	934d      	str	r3, [sp, #308]	; 0x134
    CC = C;
 800124c:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 800124e:	934e      	str	r3, [sp, #312]	; 0x138
    DD = D;
 8001250:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 8001252:	934f      	str	r3, [sp, #316]	; 0x13c
    EE = E;
 8001254:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8001256:	9350      	str	r3, [sp, #320]	; 0x140
    FF = F;
 8001258:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 800125a:	9351      	str	r3, [sp, #324]	; 0x144
    GG = G;
 800125c:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800125e:	9352      	str	r3, [sp, #328]	; 0x148
    HH = H;
 8001260:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8001262:	9353      	str	r3, [sp, #332]	; 0x14c
 8001264:	ab65      	add	r3, sp, #404	; 0x194
 8001266:	aa91      	add	r2, sp, #580	; 0x244
 8001268:	9855      	ldr	r0, [sp, #340]	; 0x154
	data[i] = in[i];
 800126a:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800126e:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 8001272:	4283      	cmp	r3, r0
 8001274:	d1f9      	bne.n	800126a <HAL_UART_RxCpltCallback+0x9ba>
 8001276:	ac92      	add	r4, sp, #584	; 0x248
 8001278:	adc2      	add	r5, sp, #776	; 0x308
 800127a:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800127c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 800127e:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001282:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8001286:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 800128a:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800128e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001290:	6800      	ldr	r0, [r0, #0]
 8001292:	4402      	add	r2, r0
 8001294:	4413      	add	r3, r2
 8001296:	ea4f 42b1 	mov.w	r2, r1, ror #18
 800129a:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 800129e:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80012a2:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80012a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 80012a6:	42ac      	cmp	r4, r5
 80012a8:	d1e7      	bne.n	800127a <HAL_UART_RxCpltCallback+0x9ca>
    DD = D;
 80012aa:	f8dd e13c 	ldr.w	lr, [sp, #316]	; 0x13c
    CC = C;
 80012ae:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    BB = B;
 80012b0:	9e4d      	ldr	r6, [sp, #308]	; 0x134
    AA = A;
 80012b2:	984c      	ldr	r0, [sp, #304]	; 0x130
    GG = G;
 80012b4:	9f52      	ldr	r7, [sp, #328]	; 0x148
    FF = F;
 80012b6:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    HH = H;
 80012ba:	9a53      	ldr	r2, [sp, #332]	; 0x14c
    EE = E;
 80012bc:	9950      	ldr	r1, [sp, #320]	; 0x140
    for (i = 0; i < 64; i++) {
 80012be:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80012c0:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 80012c4:	9247      	str	r2, [sp, #284]	; 0x11c
 80012c6:	e74d      	b.n	8001164 <HAL_UART_RxCpltCallback+0x8b4>
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 80012c8:	9c78      	ldr	r4, [sp, #480]	; 0x1e0
 80012ca:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80012ce:	f1c5 0677 	rsb	r6, r5, #119	; 0x77
 80012d2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	f88d 3198 	strb.w	r3, [sp, #408]	; 0x198
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80012dc:	2247      	movs	r2, #71	; 0x47
 80012de:	2100      	movs	r1, #0
 80012e0:	f20d 1099 	addw	r0, sp, #409	; 0x199
 80012e4:	f012 fa5c 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80012e8:	ab66      	add	r3, sp, #408	; 0x198
 80012ea:	4433      	add	r3, r6
 80012ec:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80012ee:	0a22      	lsrs	r2, r4, #8
 80012f0:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80012f2:	0c22      	lsrs	r2, r4, #16
 80012f4:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80012f6:	0e22      	lsrs	r2, r4, #24
 80012f8:	715a      	strb	r2, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80012fa:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 80012fc:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80012fe:	0a11      	lsrs	r1, r2, #8
 8001300:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001302:	0c11      	lsrs	r1, r2, #16
 8001304:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001306:	0e11      	lsrs	r1, r2, #24
 8001308:	7059      	strb	r1, [r3, #1]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800130a:	f106 0309 	add.w	r3, r6, #9
 800130e:	9349      	str	r3, [sp, #292]	; 0x124
    m->sz[0] += len * 8;
 8001310:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001314:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8001316:	429c      	cmp	r4, r3
 8001318:	d901      	bls.n	800131e <HAL_UART_RxCpltCallback+0xa6e>
	++m->sz[1];
 800131a:	3201      	adds	r2, #1
 800131c:	9279      	str	r2, [sp, #484]	; 0x1e4
    while(len > 0){
 800131e:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80bf 	beq.w	80014a4 <HAL_UART_RxCpltCallback+0xbf4>
 8001326:	ab66      	add	r3, sp, #408	; 0x198
 8001328:	934a      	str	r3, [sp, #296]	; 0x128
 800132a:	ab65      	add	r3, sp, #404	; 0x194
 800132c:	9355      	str	r3, [sp, #340]	; 0x154
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800132e:	f8df 8328 	ldr.w	r8, [pc, #808]	; 8001658 <HAL_UART_RxCpltCallback+0xda8>
 8001332:	e04d      	b.n	80013d0 <HAL_UART_RxCpltCallback+0xb20>
    for (i = 0; i < 64; i++) {
 8001334:	4635      	mov	r5, r6
 8001336:	4606      	mov	r6, r0
	AA = T1 + T2;
 8001338:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 800133a:	4667      	mov	r7, ip
 800133c:	468c      	mov	ip, r1
	EE = DD + T1;
 800133e:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001340:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8001344:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8001348:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 800134c:	ea27 0a01 	bic.w	sl, r7, r1
 8001350:	ea01 0b0c 	and.w	fp, r1, ip
 8001354:	ea8a 0a0b 	eor.w	sl, sl, fp
 8001358:	4453      	add	r3, sl
 800135a:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 800135e:	4413      	add	r3, r2
 8001360:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8001364:	4413      	add	r3, r2
 8001366:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8001368:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800136a:	ea4f 3270 	mov.w	r2, r0, ror #13
 800136e:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8001372:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8001376:	ea86 0a05 	eor.w	sl, r6, r5
 800137a:	ea0a 0a00 	and.w	sl, sl, r0
 800137e:	ea06 0b05 	and.w	fp, r6, r5
 8001382:	ea8a 0a0b 	eor.w	sl, sl, fp
 8001386:	4452      	add	r2, sl
	EE = DD + T1;
 8001388:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 800138c:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 800138e:	3401      	adds	r4, #1
 8001390:	9747      	str	r7, [sp, #284]	; 0x11c
 8001392:	46ae      	mov	lr, r5
 8001394:	2c40      	cmp	r4, #64	; 0x40
 8001396:	d1cd      	bne.n	8001334 <HAL_UART_RxCpltCallback+0xa84>
    A += AA;
 8001398:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 800139a:	441a      	add	r2, r3
 800139c:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 800139e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80013a0:	4403      	add	r3, r0
 80013a2:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 80013a4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80013a6:	4433      	add	r3, r6
 80013a8:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 80013aa:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80013ac:	442b      	add	r3, r5
 80013ae:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 80013b0:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80013b2:	445b      	add	r3, fp
 80013b4:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 80013b6:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80013b8:	440b      	add	r3, r1
 80013ba:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 80013bc:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80013be:	4463      	add	r3, ip
 80013c0:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 80013c2:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 80013c4:	443b      	add	r3, r7
 80013c6:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 80013c8:	9d48      	ldr	r5, [sp, #288]	; 0x120
    while(len > 0){
 80013ca:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d069      	beq.n	80014a4 <HAL_UART_RxCpltCallback+0xbf4>
	uint32_t l = 64 - offset;
 80013d0:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 80013d4:	9e49      	ldr	r6, [sp, #292]	; 0x124
 80013d6:	42b4      	cmp	r4, r6
 80013d8:	bf28      	it	cs
 80013da:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 80013dc:	4622      	mov	r2, r4
 80013de:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 80013e0:	4639      	mov	r1, r7
 80013e2:	ab82      	add	r3, sp, #520	; 0x208
 80013e4:	1958      	adds	r0, r3, r5
 80013e6:	f7fe ff33 	bl	8000250 <memcpy>
	offset += l;
 80013ea:	4425      	add	r5, r4
	p += l;
 80013ec:	463b      	mov	r3, r7
 80013ee:	4423      	add	r3, r4
 80013f0:	934a      	str	r3, [sp, #296]	; 0x128
	len -= l;
 80013f2:	1b33      	subs	r3, r6, r4
 80013f4:	9349      	str	r3, [sp, #292]	; 0x124
	if(offset == 64){
 80013f6:	2d40      	cmp	r5, #64	; 0x40
 80013f8:	d1e7      	bne.n	80013ca <HAL_UART_RxCpltCallback+0xb1a>
 80013fa:	ab78      	add	r3, sp, #480	; 0x1e0
 80013fc:	a888      	add	r0, sp, #544	; 0x220
 80013fe:	aa56      	add	r2, sp, #344	; 0x158
                p2[0] = p1[3];
 8001400:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8001404:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8001406:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 800140a:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 800140c:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8001410:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8001412:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001416:	70d1      	strb	r1, [r2, #3]
 8001418:	3304      	adds	r3, #4
 800141a:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 800141c:	4298      	cmp	r0, r3
 800141e:	d1ef      	bne.n	8001400 <HAL_UART_RxCpltCallback+0xb50>
    AA = A;
 8001420:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8001422:	934c      	str	r3, [sp, #304]	; 0x130
    BB = B;
 8001424:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 8001426:	934d      	str	r3, [sp, #308]	; 0x134
    CC = C;
 8001428:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 800142a:	934e      	str	r3, [sp, #312]	; 0x138
    DD = D;
 800142c:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 800142e:	934f      	str	r3, [sp, #316]	; 0x13c
    EE = E;
 8001430:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8001432:	9350      	str	r3, [sp, #320]	; 0x140
    FF = F;
 8001434:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 8001436:	9351      	str	r3, [sp, #324]	; 0x144
    GG = G;
 8001438:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800143a:	9352      	str	r3, [sp, #328]	; 0x148
    HH = H;
 800143c:	9b81      	ldr	r3, [sp, #516]	; 0x204
 800143e:	9353      	str	r3, [sp, #332]	; 0x14c
 8001440:	ab55      	add	r3, sp, #340	; 0x154
 8001442:	aa91      	add	r2, sp, #580	; 0x244
 8001444:	9855      	ldr	r0, [sp, #340]	; 0x154
	data[i] = in[i];
 8001446:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800144a:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 800144e:	4283      	cmp	r3, r0
 8001450:	d1f9      	bne.n	8001446 <HAL_UART_RxCpltCallback+0xb96>
 8001452:	ac92      	add	r4, sp, #584	; 0x248
 8001454:	adc2      	add	r5, sp, #776	; 0x308
 8001456:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001458:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 800145a:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800145e:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8001462:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 8001466:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800146a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800146c:	6800      	ldr	r0, [r0, #0]
 800146e:	4402      	add	r2, r0
 8001470:	4413      	add	r3, r2
 8001472:	ea4f 42b1 	mov.w	r2, r1, ror #18
 8001476:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 800147a:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 800147e:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001480:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8001482:	42ac      	cmp	r4, r5
 8001484:	d1e7      	bne.n	8001456 <HAL_UART_RxCpltCallback+0xba6>
    DD = D;
 8001486:	f8dd e13c 	ldr.w	lr, [sp, #316]	; 0x13c
    CC = C;
 800148a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    BB = B;
 800148c:	9e4d      	ldr	r6, [sp, #308]	; 0x134
    AA = A;
 800148e:	984c      	ldr	r0, [sp, #304]	; 0x130
    GG = G;
 8001490:	9f52      	ldr	r7, [sp, #328]	; 0x148
    FF = F;
 8001492:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    HH = H;
 8001496:	9a53      	ldr	r2, [sp, #332]	; 0x14c
    EE = E;
 8001498:	9950      	ldr	r1, [sp, #320]	; 0x140
    for (i = 0; i < 64; i++) {
 800149a:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800149c:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 80014a0:	9247      	str	r2, [sp, #284]	; 0x11c
 80014a2:	e74d      	b.n	8001340 <HAL_UART_RxCpltCallback+0xa90>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 80014a4:	f89d 31eb 	ldrb.w	r3, [sp, #491]	; 0x1eb
 80014a8:	f88d 3158 	strb.w	r3, [sp, #344]	; 0x158
    result[1] = p[2];
 80014ac:	f89d 31ea 	ldrb.w	r3, [sp, #490]	; 0x1ea
 80014b0:	f88d 3159 	strb.w	r3, [sp, #345]	; 0x159
    result[2] = p[1];
 80014b4:	f89d 31e9 	ldrb.w	r3, [sp, #489]	; 0x1e9
 80014b8:	f88d 315a 	strb.w	r3, [sp, #346]	; 0x15a
    result[3] = p[0];
 80014bc:	f89d 31e8 	ldrb.w	r3, [sp, #488]	; 0x1e8
 80014c0:	f88d 315b 	strb.w	r3, [sp, #347]	; 0x15b
    result[4] = p[7];
 80014c4:	f89d 31ef 	ldrb.w	r3, [sp, #495]	; 0x1ef
 80014c8:	f88d 315c 	strb.w	r3, [sp, #348]	; 0x15c
    result[5] = p[6];
 80014cc:	f89d 31ee 	ldrb.w	r3, [sp, #494]	; 0x1ee
 80014d0:	f88d 315d 	strb.w	r3, [sp, #349]	; 0x15d
	if (memcmp(signature, incoming_signature, 6) != 0) {
 80014d4:	2206      	movs	r2, #6
 80014d6:	495b      	ldr	r1, [pc, #364]	; (8001644 <HAL_UART_RxCpltCallback+0xd94>)
 80014d8:	a856      	add	r0, sp, #344	; 0x158
 80014da:	f012 f92f 	bl	801373c <memcmp>
 80014de:	b1d0      	cbz	r0, 8001516 <HAL_UART_RxCpltCallback+0xc66>
			   	(status->signing->accept_unsigned_callback &&
 80014e0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a9 	beq.w	800163c <HAL_UART_RxCpltCallback+0xd8c>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80014ea:	4a57      	ldr	r2, [pc, #348]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 80014ec:	6891      	ldr	r1, [r2, #8]
 80014ee:	0a09      	lsrs	r1, r1, #8
 80014f0:	4856      	ldr	r0, [pc, #344]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 80014f2:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback &&
 80014f4:	2800      	cmp	r0, #0
 80014f6:	f000 80a1 	beq.w	800163c <HAL_UART_RxCpltCallback+0xd8c>
				status->msg_received = MAVLINK_FRAMING_OK;
 80014fa:	4b54      	ldr	r3, [pc, #336]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001500:	4b52      	ldr	r3, [pc, #328]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 8001502:	2201      	movs	r2, #1
 8001504:	70da      	strb	r2, [r3, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001506:	f240 1223 	movw	r2, #291	; 0x123
 800150a:	494f      	ldr	r1, [pc, #316]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 800150c:	a8d3      	add	r0, sp, #844	; 0x34c
 800150e:	f7fe fe9f 	bl	8000250 <memcpy>
 8001512:	f7ff bbf4 	b.w	8000cfe <HAL_UART_RxCpltCallback+0x44e>
	uint8_t link_id = psig[0];
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 8001518:	f893 6116 	ldrb.w	r6, [r3, #278]	; 0x116
	tstamp.t64 = 0;
 800151c:	aa66      	add	r2, sp, #408	; 0x198
 800151e:	2000      	movs	r0, #0
 8001520:	2100      	movs	r1, #0
 8001522:	e9c2 0100 	strd	r0, r1, [r2]
	memcpy(tstamp.t8, psig+1, 6);
 8001526:	f8d3 0117 	ldr.w	r0, [r3, #279]	; 0x117
 800152a:	f203 1317 	addw	r3, r3, #279	; 0x117
 800152e:	9066      	str	r0, [sp, #408]	; 0x198
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	f8ad 319c 	strh.w	r3, [sp, #412]	; 0x19c
	if (signing_streams == NULL) {
 8001536:	9a54      	ldr	r2, [sp, #336]	; 0x150
 8001538:	2a00      	cmp	r2, #0
 800153a:	d0d1      	beq.n	80014e0 <HAL_UART_RxCpltCallback+0xc30>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800153c:	8810      	ldrh	r0, [r2, #0]
 800153e:	2800      	cmp	r0, #0
 8001540:	d065      	beq.n	800160e <HAL_UART_RxCpltCallback+0xd5e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001542:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 8001544:	79dc      	ldrb	r4, [r3, #7]
		    msg->compid == signing_streams->stream[i].compid &&
 8001546:	7a1f      	ldrb	r7, [r3, #8]
 8001548:	1c93      	adds	r3, r2, #2
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800154a:	2100      	movs	r1, #0
 800154c:	e004      	b.n	8001558 <HAL_UART_RxCpltCallback+0xca8>
 800154e:	3101      	adds	r1, #1
 8001550:	b289      	uxth	r1, r1
 8001552:	3309      	adds	r3, #9
 8001554:	4288      	cmp	r0, r1
 8001556:	d03a      	beq.n	80015ce <HAL_UART_RxCpltCallback+0xd1e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001558:	785a      	ldrb	r2, [r3, #1]
 800155a:	42a2      	cmp	r2, r4
 800155c:	d1f7      	bne.n	800154e <HAL_UART_RxCpltCallback+0xc9e>
 800155e:	789a      	ldrb	r2, [r3, #2]
 8001560:	42ba      	cmp	r2, r7
 8001562:	d1f4      	bne.n	800154e <HAL_UART_RxCpltCallback+0xc9e>
		    msg->compid == signing_streams->stream[i].compid &&
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	42b2      	cmp	r2, r6
 8001568:	d1f1      	bne.n	800154e <HAL_UART_RxCpltCallback+0xc9e>
	if (i == signing_streams->num_signing_streams) {
 800156a:	4288      	cmp	r0, r1
 800156c:	d030      	beq.n	80015d0 <HAL_UART_RxCpltCallback+0xd20>
		last_tstamp.t64 = 0;
 800156e:	aa92      	add	r2, sp, #584	; 0x248
 8001570:	2400      	movs	r4, #0
 8001572:	2500      	movs	r5, #0
 8001574:	e9c2 4500 	strd	r4, r5, [r2]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001578:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800157c:	3305      	adds	r3, #5
 800157e:	9854      	ldr	r0, [sp, #336]	; 0x150
 8001580:	4403      	add	r3, r0
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	9092      	str	r0, [sp, #584]	; 0x248
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	f8ad 324c 	strh.w	r3, [sp, #588]	; 0x24c
		if (tstamp.t64 <= last_tstamp.t64) {
 800158c:	ab66      	add	r3, sp, #408	; 0x198
 800158e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001592:	e9d2 2300 	ldrd	r2, r3, [r2]
 8001596:	42ab      	cmp	r3, r5
 8001598:	bf08      	it	eq
 800159a:	42a2      	cmpeq	r2, r4
 800159c:	d2a0      	bcs.n	80014e0 <HAL_UART_RxCpltCallback+0xc30>
 800159e:	4608      	mov	r0, r1
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 80015a0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80015a4:	1d43      	adds	r3, r0, #5
 80015a6:	9c54      	ldr	r4, [sp, #336]	; 0x150
 80015a8:	18e1      	adds	r1, r4, r3
 80015aa:	4a29      	ldr	r2, [pc, #164]	; (8001650 <HAL_UART_RxCpltCallback+0xda0>)
 80015ac:	6810      	ldr	r0, [r2, #0]
 80015ae:	50e0      	str	r0, [r4, r3]
 80015b0:	8893      	ldrh	r3, [r2, #4]
 80015b2:	808b      	strh	r3, [r1, #4]
	if (tstamp.t64 > signing->timestamp) {
 80015b4:	ab66      	add	r3, sp, #408	; 0x198
 80015b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ba:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 80015bc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80015c0:	428b      	cmp	r3, r1
 80015c2:	bf08      	it	eq
 80015c4:	4282      	cmpeq	r2, r0
 80015c6:	d298      	bcs.n	80014fa <HAL_UART_RxCpltCallback+0xc4a>
		signing->timestamp = tstamp.t64;
 80015c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80015cc:	e795      	b.n	80014fa <HAL_UART_RxCpltCallback+0xc4a>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80015ce:	4601      	mov	r1, r0
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 80015d0:	280f      	cmp	r0, #15
 80015d2:	d885      	bhi.n	80014e0 <HAL_UART_RxCpltCallback+0xc30>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 80015d4:	ab66      	add	r3, sp, #408	; 0x198
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	4c1e      	ldr	r4, [pc, #120]	; (8001654 <HAL_UART_RxCpltCallback+0xda4>)
 80015dc:	2500      	movs	r5, #0
 80015de:	18a7      	adds	r7, r4, r2
 80015e0:	eb45 0803 	adc.w	r8, r5, r3
 80015e4:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80015e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015ea:	4598      	cmp	r8, r3
 80015ec:	bf08      	it	eq
 80015ee:	4297      	cmpeq	r7, r2
 80015f0:	f4ff af76 	bcc.w	80014e0 <HAL_UART_RxCpltCallback+0xc30>
		signing_streams->stream[i].sysid = msg->sysid;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 80015f6:	79d4      	ldrb	r4, [r2, #7]
 80015f8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80015fc:	9d54      	ldr	r5, [sp, #336]	; 0x150
 80015fe:	186b      	adds	r3, r5, r1
 8001600:	70dc      	strb	r4, [r3, #3]
		signing_streams->stream[i].compid = msg->compid;
 8001602:	7a12      	ldrb	r2, [r2, #8]
 8001604:	711a      	strb	r2, [r3, #4]
		signing_streams->stream[i].link_id = link_id;
 8001606:	709e      	strb	r6, [r3, #2]
		signing_streams->num_signing_streams++;
 8001608:	1c43      	adds	r3, r0, #1
 800160a:	802b      	strh	r3, [r5, #0]
 800160c:	e7c8      	b.n	80015a0 <HAL_UART_RxCpltCallback+0xcf0>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800160e:	4601      	mov	r1, r0
 8001610:	e7e0      	b.n	80015d4 <HAL_UART_RxCpltCallback+0xd24>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001612:	1e9a      	subs	r2, r3, #2
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	2a01      	cmp	r2, #1
 8001618:	f67f aa02 	bls.w	8000a20 <HAL_UART_RxCpltCallback+0x170>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 800161c:	2b00      	cmp	r3, #0
 800161e:	f43f a953 	beq.w	80008c8 <HAL_UART_RxCpltCallback+0x18>
 8001622:	f7ff bb83 	b.w	8000d2c <HAL_UART_RxCpltCallback+0x47c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 8001628:	2202      	movs	r2, #2
 800162a:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 800162e:	2200      	movs	r2, #0
 8001630:	70da      	strb	r2, [r3, #3]
	msg->checksum = crcTmp;
 8001632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001636:	801a      	strh	r2, [r3, #0]
 8001638:	f7ff b946 	b.w	80008c8 <HAL_UART_RxCpltCallback+0x18>
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 800163e:	2203      	movs	r2, #3
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e75d      	b.n	8001500 <HAL_UART_RxCpltCallback+0xc50>
 8001644:	200005c9 	.word	0x200005c9
 8001648:	200004ac 	.word	0x200004ac
 800164c:	20000938 	.word	0x20000938
 8001650:	200005c3 	.word	0x200005c3
 8001654:	005b8d80 	.word	0x005b8d80
 8001658:	08013b28 	.word	0x08013b28

0800165c <HAL_TIM_PeriodElapsedCallback>:
\param htim pointer on timer structure (as defined in the HAL library)
\brief Function called everytime a certain time is enlapsed

This function is used to send periodically some status information to the PC.
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800165c:	b508      	push	{r3, lr}
    if (htim->Instance==TIM7){
 800165e:	6802      	ldr	r2, [r0, #0]
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001662:	429a      	cmp	r2, r3
 8001664:	d000      	beq.n	8001668 <HAL_TIM_PeriodElapsedCallback+0xc>
    	mouseDriver_send_status_msg();
    }
}
 8001666:	bd08      	pop	{r3, pc}
    	mouseDriver_send_status_msg();
 8001668:	f00f f988 	bl	801097c <mouseDriver_send_status_msg>
}
 800166c:	e7fb      	b.n	8001666 <HAL_TIM_PeriodElapsedCallback+0xa>
 800166e:	bf00      	nop
 8001670:	40001400 	.word	0x40001400

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b530      	push	{r4, r5, lr}
 8001676:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001678:	2224      	movs	r2, #36	; 0x24
 800167a:	2100      	movs	r1, #0
 800167c:	a828      	add	r0, sp, #160	; 0xa0
 800167e:	f012 f88f 	bl	80137a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001682:	2400      	movs	r4, #0
 8001684:	9422      	str	r4, [sp, #136]	; 0x88
 8001686:	9423      	str	r4, [sp, #140]	; 0x8c
 8001688:	9424      	str	r4, [sp, #144]	; 0x90
 800168a:	9425      	str	r4, [sp, #148]	; 0x94
 800168c:	9426      	str	r4, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168e:	2288      	movs	r2, #136	; 0x88
 8001690:	4621      	mov	r1, r4
 8001692:	4668      	mov	r0, sp
 8001694:	f012 f884 	bl	80137a0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001698:	2502      	movs	r5, #2
 800169a:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a0:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a2:	2310      	movs	r3, #16
 80016a4:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a6:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a8:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016ae:	230a      	movs	r3, #10
 80016b0:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016b2:	2307      	movs	r3, #7
 80016b4:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016b6:	9536      	str	r5, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b8:	9537      	str	r5, [sp, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ba:	a827      	add	r0, sp, #156	; 0x9c
 80016bc:	f006 fa42 	bl	8007b44 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c0:	230f      	movs	r3, #15
 80016c2:	9322      	str	r3, [sp, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c4:	2303      	movs	r3, #3
 80016c6:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c8:	9424      	str	r4, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ca:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016cc:	9426      	str	r4, [sp, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ce:	2104      	movs	r1, #4
 80016d0:	a822      	add	r0, sp, #136	; 0x88
 80016d2:	f006 fd27 	bl	8008124 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d6:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d8:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016da:	4668      	mov	r0, sp
 80016dc:	f007 f886 	bl	80087ec <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016e4:	f005 fcd6 	bl	8007094 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80016e8:	b039      	add	sp, #228	; 0xe4
 80016ea:	bd30      	pop	{r4, r5, pc}

080016ec <main>:
{
 80016ec:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80016f0:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 80016f2:	f000 fcad 	bl	8002050 <HAL_Init>
  SystemClock_Config();
 80016f6:	f7ff ffbd 	bl	8001674 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	2400      	movs	r4, #0
 80016fc:	9413      	str	r4, [sp, #76]	; 0x4c
 80016fe:	9414      	str	r4, [sp, #80]	; 0x50
 8001700:	9415      	str	r4, [sp, #84]	; 0x54
 8001702:	9416      	str	r4, [sp, #88]	; 0x58
 8001704:	9417      	str	r4, [sp, #92]	; 0x5c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	4db0      	ldr	r5, [pc, #704]	; (80019c8 <main+0x2dc>)
 8001708:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001710:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800171c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001720:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001722:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001734:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	9303      	str	r3, [sp, #12]
 800173c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001746:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_0_Pin|CS_1_Pin, GPIO_PIN_RESET);
 8001750:	4622      	mov	r2, r4
 8001752:	2103      	movs	r1, #3
 8001754:	489d      	ldr	r0, [pc, #628]	; (80019cc <main+0x2e0>)
 8001756:	f002 fa65 	bl	8003c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PW_1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800175a:	4622      	mov	r2, r4
 800175c:	2130      	movs	r1, #48	; 0x30
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f002 fa5f 	bl	8003c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PW_0_GPIO_Port, PW_0_Pin, GPIO_PIN_RESET);
 8001766:	4e9a      	ldr	r6, [pc, #616]	; (80019d0 <main+0x2e4>)
 8001768:	4622      	mov	r2, r4
 800176a:	2101      	movs	r1, #1
 800176c:	4630      	mov	r0, r6
 800176e:	f002 fa59 	bl	8003c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001772:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8001776:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177a:	4b96      	ldr	r3, [pc, #600]	; (80019d4 <main+0x2e8>)
 800177c:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001780:	a913      	add	r1, sp, #76	; 0x4c
 8001782:	4892      	ldr	r0, [pc, #584]	; (80019cc <main+0x2e0>)
 8001784:	f002 f8b2 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_0_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_0_Pin|CS_1_Pin;
 8001788:	2303      	movs	r3, #3
 800178a:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	f04f 0801 	mov.w	r8, #1
 8001790:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	a913      	add	r1, sp, #76	; 0x4c
 800179a:	488c      	ldr	r0, [pc, #560]	; (80019cc <main+0x2e0>)
 800179c:	f002 f8a6 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PW_1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = PW_1_Pin|LD2_Pin;
 80017a0:	2330      	movs	r3, #48	; 0x30
 80017a2:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	a913      	add	r1, sp, #76	; 0x4c
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f002 f89b 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_0_Pin */
  GPIO_InitStruct.Pin = PW_0_Pin;
 80017b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(PW_0_GPIO_Port, &GPIO_InitStruct);
 80017c2:	a913      	add	r1, sp, #76	; 0x4c
 80017c4:	4630      	mov	r0, r6
 80017c6:	f002 f891 	bl	80038ec <HAL_GPIO_Init>
  __DMA1_CLK_ENABLE();
 80017ca:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80017cc:	ea43 0308 	orr.w	r3, r3, r8
 80017d0:	64ab      	str	r3, [r5, #72]	; 0x48
 80017d2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80017d4:	ea03 0308 	and.w	r3, r3, r8
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	9b00      	ldr	r3, [sp, #0]
  hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017dc:	4e7e      	ldr	r6, [pc, #504]	; (80019d8 <main+0x2ec>)
 80017de:	2310      	movs	r3, #16
 80017e0:	60b3      	str	r3, [r6, #8]
  hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e2:	60f4      	str	r4, [r6, #12]
  hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	6133      	str	r3, [r6, #16]
  hdma_usart2_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e8:	6174      	str	r4, [r6, #20]
  hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ea:	61b4      	str	r4, [r6, #24]
  hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017ec:	61f4      	str	r4, [r6, #28]
  hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ee:	6234      	str	r4, [r6, #32]
  HAL_DMA_Init(&hdma_usart2_tx);
 80017f0:	4630      	mov	r0, r6
 80017f2:	f000 fec1 	bl	8002578 <HAL_DMA_Init>
  __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 80017f6:	4f79      	ldr	r7, [pc, #484]	; (80019dc <main+0x2f0>)
 80017f8:	66be      	str	r6, [r7, #104]	; 0x68
 80017fa:	62b7      	str	r7, [r6, #40]	; 0x28
  huart2.Instance = USART2;
 80017fc:	4b78      	ldr	r3, [pc, #480]	; (80019e0 <main+0x2f4>)
 80017fe:	603b      	str	r3, [r7, #0]
  huart2.Init.BaudRate = 230400;
 8001800:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8001804:	607b      	str	r3, [r7, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	60bc      	str	r4, [r7, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001808:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	613c      	str	r4, [r7, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800180c:	230c      	movs	r3, #12
 800180e:	617b      	str	r3, [r7, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001810:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001812:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001814:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001816:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001818:	4638      	mov	r0, r7
 800181a:	f00e fd6c 	bl	80102f6 <HAL_UART_Init>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181e:	9413      	str	r4, [sp, #76]	; 0x4c
 8001820:	9414      	str	r4, [sp, #80]	; 0x50
 8001822:	9415      	str	r4, [sp, #84]	; 0x54
  htim7.Instance = TIM7;
 8001824:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80019f8 <main+0x30c>
 8001828:	4b6e      	ldr	r3, [pc, #440]	; (80019e4 <main+0x2f8>)
 800182a:	f8c9 3000 	str.w	r3, [r9]
  htim7.Init.Prescaler = PRESCALER_HEART;
 800182e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
 8001832:	f8c9 b004 	str.w	fp, [r9, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	f8c9 4008 	str.w	r4, [r9, #8]
  htim7.Init.Period = COUNTER_PERIOD_HEART;
 800183a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800183e:	f8c9 300c 	str.w	r3, [r9, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001846:	4648      	mov	r0, r9
 8001848:	f00a fdb0 	bl	800c3ac <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184c:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001850:	a913      	add	r1, sp, #76	; 0x4c
 8001852:	4648      	mov	r0, r9
 8001854:	f00d f9d4 	bl	800ec00 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001858:	9408      	str	r4, [sp, #32]
 800185a:	9409      	str	r4, [sp, #36]	; 0x24
 800185c:	940a      	str	r4, [sp, #40]	; 0x28
 800185e:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	9405      	str	r4, [sp, #20]
 8001862:	9406      	str	r4, [sp, #24]
 8001864:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001866:	940c      	str	r4, [sp, #48]	; 0x30
 8001868:	940d      	str	r4, [sp, #52]	; 0x34
 800186a:	940e      	str	r4, [sp, #56]	; 0x38
 800186c:	940f      	str	r4, [sp, #60]	; 0x3c
 800186e:	9410      	str	r4, [sp, #64]	; 0x40
 8001870:	9411      	str	r4, [sp, #68]	; 0x44
 8001872:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001874:	222c      	movs	r2, #44	; 0x2c
 8001876:	4621      	mov	r1, r4
 8001878:	a813      	add	r0, sp, #76	; 0x4c
 800187a:	f011 ff91 	bl	80137a0 <memset>
  htim1.Instance = TIM1;
 800187e:	4e5a      	ldr	r6, [pc, #360]	; (80019e8 <main+0x2fc>)
 8001880:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <main+0x300>)
 8001882:	6033      	str	r3, [r6, #0]
  htim1.Init.Prescaler = PRESCALER_PWM;
 8001884:	f8c6 b004 	str.w	fp, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	60b4      	str	r4, [r6, #8]
  htim1.Init.Period = COUNTER_PERIOD_PWM;
 800188a:	23ff      	movs	r3, #255	; 0xff
 800188c:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188e:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8001890:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001894:	4630      	mov	r0, r6
 8001896:	f00a fd89 	bl	800c3ac <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018a0:	a908      	add	r1, sp, #32
 80018a2:	4630      	mov	r0, r6
 80018a4:	f00b f992 	bl	800cbcc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018a8:	4630      	mov	r0, r6
 80018aa:	f00a fdb1 	bl	800c410 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018b0:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b4:	a905      	add	r1, sp, #20
 80018b6:	4630      	mov	r0, r6
 80018b8:	f00d f9a2 	bl	800ec00 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018bc:	2360      	movs	r3, #96	; 0x60
 80018be:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = PULSE_PWM;
 80018c0:	230a      	movs	r3, #10
 80018c2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c4:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c6:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c8:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ca:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018cc:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ce:	4622      	mov	r2, r4
 80018d0:	a90c      	add	r1, sp, #48	; 0x30
 80018d2:	4630      	mov	r0, r6
 80018d4:	f00a fec3 	bl	800c65e <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018d8:	2204      	movs	r2, #4
 80018da:	a90c      	add	r1, sp, #48	; 0x30
 80018dc:	4630      	mov	r0, r6
 80018de:	f00a febe 	bl	800c65e <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e2:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e4:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e6:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e8:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ea:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ec:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f0:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018f2:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f8:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018fa:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018fc:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018fe:	a913      	add	r1, sp, #76	; 0x4c
 8001900:	4630      	mov	r0, r6
 8001902:	f00d f9af 	bl	800ec64 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8001906:	4630      	mov	r0, r6
 8001908:	f000 f942 	bl	8001b90 <HAL_TIM_MspPostInit>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800190c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800190e:	ea43 0308 	orr.w	r3, r3, r8
 8001912:	64ab      	str	r3, [r5, #72]	; 0x48
 8001914:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001916:	ea03 0308 	and.w	r3, r3, r8
 800191a:	9313      	str	r3, [sp, #76]	; 0x4c
 800191c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800191e:	4622      	mov	r2, r4
 8001920:	4621      	mov	r1, r4
 8001922:	2011      	movs	r0, #17
 8001924:	f000 fcd4 	bl	80022d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001928:	2011      	movs	r0, #17
 800192a:	f000 fd03 	bl	8002334 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 800192e:	2108      	movs	r1, #8
 8001930:	4826      	ldr	r0, [pc, #152]	; (80019cc <main+0x2e0>)
 8001932:	f002 f8d1 	bl	8003ad8 <HAL_GPIO_DeInit>
  __HAL_RCC_SPI2_CLK_ENABLE();
 8001936:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	65ab      	str	r3, [r5, #88]	; 0x58
 800193e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001944:	9308      	str	r3, [sp, #32]
 8001946:	9b08      	ldr	r3, [sp, #32]
  __SPI2_CLK_ENABLE();
 8001948:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001950:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	930c      	str	r3, [sp, #48]	; 0x30
 8001958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  hspi2.Instance = SPI2;
 800195a:	4825      	ldr	r0, [pc, #148]	; (80019f0 <main+0x304>)
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <main+0x308>)
 800195e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001960:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001964:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001966:	6084      	str	r4, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001968:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800196c:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800196e:	2502      	movs	r5, #2
 8001970:	6105      	str	r5, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001972:	f8c0 8014 	str.w	r8, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800197a:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800197c:	2338      	movs	r3, #56	; 0x38
 800197e:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001980:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001982:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001984:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001986:	2307      	movs	r3, #7
 8001988:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800198a:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800198c:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800198e:	f008 f930 	bl	8009bf2 <HAL_SPI_Init>
  HAL_InitTick(0);
 8001992:	4620      	mov	r0, r4
 8001994:	f000 fb34 	bl	8002000 <HAL_InitTick>
  HAL_NVIC_SetPriority(USART2_IRQn,1,0);
 8001998:	4622      	mov	r2, r4
 800199a:	4641      	mov	r1, r8
 800199c:	2026      	movs	r0, #38	; 0x26
 800199e:	f000 fc97 	bl	80022d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019a2:	2026      	movs	r0, #38	; 0x26
 80019a4:	f000 fcc6 	bl	8002334 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM7_IRQn,2,0);
 80019a8:	4622      	mov	r2, r4
 80019aa:	4629      	mov	r1, r5
 80019ac:	2037      	movs	r0, #55	; 0x37
 80019ae:	f000 fc8f 	bl	80022d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019b2:	2037      	movs	r0, #55	; 0x37
 80019b4:	f000 fcbe 	bl	8002334 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, CS_0_Pin|CS_1_Pin, GPIO_PIN_SET);
 80019b8:	4642      	mov	r2, r8
 80019ba:	2103      	movs	r1, #3
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <main+0x2e0>)
 80019be:	f002 f931 	bl	8003c24 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, &inByte, 1);
 80019c2:	4642      	mov	r2, r8
 80019c4:	e01a      	b.n	80019fc <main+0x310>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000400 	.word	0x48000400
 80019d4:	10210000 	.word	0x10210000
 80019d8:	20001aac 	.word	0x20001aac
 80019dc:	20001b34 	.word	0x20001b34
 80019e0:	40004400 	.word	0x40004400
 80019e4:	40001400 	.word	0x40001400
 80019e8:	20001af4 	.word	0x20001af4
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	20001a48 	.word	0x20001a48
 80019f4:	40003800 	.word	0x40003800
 80019f8:	20001bb4 	.word	0x20001bb4
 80019fc:	4908      	ldr	r1, [pc, #32]	; (8001a20 <main+0x334>)
 80019fe:	4638      	mov	r0, r7
 8001a00:	f00d fafc 	bl	800effc <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001a04:	4648      	mov	r0, r9
 8001a06:	f009 feef 	bl	800b7e8 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001a0a:	4642      	mov	r2, r8
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <main+0x338>)
 8001a10:	f002 f908 	bl	8003c24 <HAL_GPIO_WritePin>
  mouseDriver_init();
 8001a14:	f00e ff9c 	bl	8010950 <mouseDriver_init>
	 mouseDriver_idle();
 8001a18:	f011 fb9e 	bl	8013158 <mouseDriver_idle>
 8001a1c:	e7fc      	b.n	8001a18 <main+0x32c>
 8001a1e:	bf00      	nop
 8001a20:	200004a8 	.word	0x200004a8
 8001a24:	48000800 	.word	0x48000800

08001a28 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_MspInit+0x2c>)
 8001a30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	661a      	str	r2, [r3, #96]	; 0x60
 8001a38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a3a:	f002 0201 	and.w	r2, r2, #1
 8001a3e:	9200      	str	r2, [sp, #0]
 8001a40:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a48:	659a      	str	r2, [r3, #88]	; 0x58
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a54:	b002      	add	sp, #8
 8001a56:	4770      	bx	lr
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	2300      	movs	r3, #0
 8001a62:	9303      	str	r3, [sp, #12]
 8001a64:	9304      	str	r3, [sp, #16]
 8001a66:	9305      	str	r3, [sp, #20]
 8001a68:	9306      	str	r3, [sp, #24]
 8001a6a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8001a6c:	6802      	ldr	r2, [r0, #0]
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_SPI_MspInit+0x8c>)
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a74:	b008      	add	sp, #32
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a78:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8001a7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a82:	659a      	str	r2, [r3, #88]	; 0x58
 8001a84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a86:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a8a:	9200      	str	r2, [sp, #0]
 8001a8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a90:	f042 0204 	orr.w	r2, r2, #4
 8001a94:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a98:	f002 0204 	and.w	r2, r2, #4
 8001a9c:	9201      	str	r2, [sp, #4]
 8001a9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aa2:	f042 0202 	orr.w	r2, r2, #2
 8001aa6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2602      	movs	r6, #2
 8001ab8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2503      	movs	r5, #3
 8001abc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001abe:	2405      	movs	r4, #5
 8001ac0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	eb0d 0103 	add.w	r1, sp, r3
 8001ac6:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_SPI_MspInit+0x90>)
 8001ac8:	f001 ff10 	bl	80038ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ada:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	a903      	add	r1, sp, #12
 8001ade:	4804      	ldr	r0, [pc, #16]	; (8001af0 <HAL_SPI_MspInit+0x94>)
 8001ae0:	f001 ff04 	bl	80038ec <HAL_GPIO_Init>
}
 8001ae4:	e7c6      	b.n	8001a74 <HAL_SPI_MspInit+0x18>
 8001ae6:	bf00      	nop
 8001ae8:	40003800 	.word	0x40003800
 8001aec:	48000800 	.word	0x48000800
 8001af0:	48000400 	.word	0x48000400

08001af4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001af4:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 8001af6:	6802      	ldr	r2, [r0, #0]
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_SPI_MspDeInit+0x2c>)
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d000      	beq.n	8001b00 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001afe:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001b00:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_SPI_MspDeInit+0x30>)
 8001b02:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8001b0a:	210c      	movs	r1, #12
 8001b0c:	4806      	ldr	r0, [pc, #24]	; (8001b28 <HAL_SPI_MspDeInit+0x34>)
 8001b0e:	f001 ffe3 	bl	8003ad8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <HAL_SPI_MspDeInit+0x38>)
 8001b18:	f001 ffde 	bl	8003ad8 <HAL_GPIO_DeInit>
}
 8001b1c:	e7ef      	b.n	8001afe <HAL_SPI_MspDeInit+0xa>
 8001b1e:	bf00      	nop
 8001b20:	40003800 	.word	0x40003800
 8001b24:	40021000 	.word	0x40021000
 8001b28:	48000800 	.word	0x48000800
 8001b2c:	48000400 	.word	0x48000400

08001b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b30:	b500      	push	{lr}
 8001b32:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8001b34:	6803      	ldr	r3, [r0, #0]
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <HAL_TIM_Base_MspInit+0x54>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d005      	beq.n	8001b48 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_TIM_Base_MspInit+0x58>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001b42:	b003      	add	sp, #12
 8001b44:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_TIM_Base_MspInit+0x5c>)
 8001b4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b50:	661a      	str	r2, [r3, #96]	; 0x60
 8001b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	9b00      	ldr	r3, [sp, #0]
 8001b5c:	e7f1      	b.n	8001b42 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_TIM_Base_MspInit+0x5c>)
 8001b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b62:	f042 0220 	orr.w	r2, r2, #32
 8001b66:	659a      	str	r2, [r3, #88]	; 0x58
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	4611      	mov	r1, r2
 8001b76:	2037      	movs	r0, #55	; 0x37
 8001b78:	f000 fbaa 	bl	80022d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b7c:	2037      	movs	r0, #55	; 0x37
 8001b7e:	f000 fbd9 	bl	8002334 <HAL_NVIC_EnableIRQ>
}
 8001b82:	e7de      	b.n	8001b42 <HAL_TIM_Base_MspInit+0x12>
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	40001400 	.word	0x40001400
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b90:	b500      	push	{lr}
 8001b92:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	2300      	movs	r3, #0
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	9302      	str	r3, [sp, #8]
 8001b9a:	9303      	str	r3, [sp, #12]
 8001b9c:	9304      	str	r3, [sp, #16]
 8001b9e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001ba0:	6802      	ldr	r2, [r0, #0]
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_TIM_MspPostInit+0x50>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d002      	beq.n	8001bae <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ba8:	b007      	add	sp, #28
 8001baa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	a901      	add	r1, sp, #4
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f001 fe88 	bl	80038ec <HAL_GPIO_Init>
}
 8001bdc:	e7e4      	b.n	8001ba8 <HAL_TIM_MspPostInit+0x18>
 8001bde:	bf00      	nop
 8001be0:	40012c00 	.word	0x40012c00

08001be4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001be4:	b508      	push	{r3, lr}
  if(htim_base->Instance==TIM1)
 8001be6:	6803      	ldr	r3, [r0, #0]
 8001be8:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_TIM_Base_MspDeInit+0x34>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_Base_MspDeInit+0x12>
    __HAL_RCC_TIM1_CLK_DISABLE();
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_TIM_Base_MspDeInit+0x38>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_TIM_Base_MspDeInit+0x20>
  /* USER CODE BEGIN TIM7_MspDeInit 1 */

  /* USER CODE END TIM7_MspDeInit 1 */
  }

}
 8001bf4:	bd08      	pop	{r3, pc}
    __HAL_RCC_TIM1_CLK_DISABLE();
 8001bf6:	f502 4264 	add.w	r2, r2, #58368	; 0xe400
 8001bfa:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001bfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c00:	6613      	str	r3, [r2, #96]	; 0x60
 8001c02:	e7f7      	b.n	8001bf4 <HAL_TIM_Base_MspDeInit+0x10>
    __HAL_RCC_TIM7_CLK_DISABLE();
 8001c04:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 8001c08:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001c0a:	f023 0320 	bic.w	r3, r3, #32
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8001c10:	2037      	movs	r0, #55	; 0x37
 8001c12:	f000 fb9d 	bl	8002350 <HAL_NVIC_DisableIRQ>
}
 8001c16:	e7ed      	b.n	8001bf4 <HAL_TIM_Base_MspDeInit+0x10>
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40001400 	.word	0x40001400

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b530      	push	{r4, r5, lr}
 8001c22:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	2300      	movs	r3, #0
 8001c26:	9303      	str	r3, [sp, #12]
 8001c28:	9304      	str	r3, [sp, #16]
 8001c2a:	9305      	str	r3, [sp, #20]
 8001c2c:	9306      	str	r3, [sp, #24]
 8001c2e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001c30:	6802      	ldr	r2, [r0, #0]
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_UART_MspInit+0xa0>)
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c38:	b009      	add	sp, #36	; 0x24
 8001c3a:	bd30      	pop	{r4, r5, pc}
 8001c3c:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001c42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c48:	659a      	str	r2, [r3, #88]	; 0x58
 8001c4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c4c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c50:	9201      	str	r2, [sp, #4]
 8001c52:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c66:	230c      	movs	r3, #12
 8001c68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2502      	movs	r5, #2
 8001c6c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c72:	2307      	movs	r3, #7
 8001c74:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	a903      	add	r1, sp, #12
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f001 fe36 	bl	80038ec <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001c80:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <HAL_UART_MspInit+0xa4>)
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_UART_MspInit+0xa8>)
 8001c84:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001c86:	6045      	str	r5, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c88:	2310      	movs	r3, #16
 8001c8a:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c94:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c96:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c98:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c9a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c9c:	f000 fc6c 	bl	8002578 <HAL_DMA_Init>
 8001ca0:	b958      	cbnz	r0, 8001cba <HAL_UART_MspInit+0x9a>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_UART_MspInit+0xa4>)
 8001ca4:	66a3      	str	r3, [r4, #104]	; 0x68
 8001ca6:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4611      	mov	r1, r2
 8001cac:	2026      	movs	r0, #38	; 0x26
 8001cae:	f000 fb0f 	bl	80022d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cb2:	2026      	movs	r0, #38	; 0x26
 8001cb4:	f000 fb3e 	bl	8002334 <HAL_NVIC_EnableIRQ>
}
 8001cb8:	e7be      	b.n	8001c38 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001cba:	f7ff feb5 	bl	8001a28 <Error_Handler>
 8001cbe:	e7f0      	b.n	8001ca2 <HAL_UART_MspInit+0x82>
 8001cc0:	40004400 	.word	0x40004400
 8001cc4:	20001aac 	.word	0x20001aac
 8001cc8:	40020080 	.word	0x40020080

08001ccc <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 8001ccc:	6802      	ldr	r2, [r0, #0]
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_UART_MspDeInit+0x30>)
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d000      	beq.n	8001cd6 <HAL_UART_MspDeInit+0xa>
 8001cd4:	4770      	bx	lr
{
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_UART_MspDeInit+0x34>)
 8001cdc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001cde:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ce2:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001ce4:	210c      	movs	r1, #12
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cea:	f001 fef5 	bl	8003ad8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001cee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001cf0:	f000 fcae 	bl	8002650 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001cf4:	2026      	movs	r0, #38	; 0x26
 8001cf6:	f000 fb2b 	bl	8002350 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	40004400 	.word	0x40004400
 8001d00:	40021000 	.word	0x40021000

08001d04 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d04:	4770      	bx	lr

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	e7fe      	b.n	8001d06 <HardFault_Handler>

08001d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	e7fe      	b.n	8001d0c <UsageFault_Handler>

08001d0e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	4770      	bx	lr

08001d10 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d16:	f000 f9b1 	bl	800207c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1a:	bd08      	pop	{r3, pc}

08001d1c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001d1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d1e:	4802      	ldr	r0, [pc, #8]	; (8001d28 <DMA1_Channel7_IRQHandler+0xc>)
 8001d20:	f000 fe35 	bl	800298e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001d24:	bd08      	pop	{r3, pc}
 8001d26:	bf00      	nop
 8001d28:	20001aac 	.word	0x20001aac

08001d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d2e:	4802      	ldr	r0, [pc, #8]	; (8001d38 <USART2_IRQHandler+0xc>)
 8001d30:	f00d fc9e 	bl	800f670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d34:	bd08      	pop	{r3, pc}
 8001d36:	bf00      	nop
 8001d38:	20001b34 	.word	0x20001b34

08001d3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d3e:	4802      	ldr	r0, [pc, #8]	; (8001d48 <TIM7_IRQHandler+0xc>)
 8001d40:	f00a f99e 	bl	800c080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d44:	bd08      	pop	{r3, pc}
 8001d46:	bf00      	nop
 8001d48:	20001bb4 	.word	0x20001bb4

08001d4c <initialise_monitor_handles>:


/* Functions */
void initialise_monitor_handles()
{
}
 8001d4c:	4770      	bx	lr

08001d4e <_getpid>:

int _getpid(void)
{
	return 1;
}
 8001d4e:	2001      	movs	r0, #1
 8001d50:	4770      	bx	lr

08001d52 <_kill>:

int _kill(int pid, int sig)
{
 8001d52:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d54:	f011 fcb8 	bl	80136c8 <__errno>
 8001d58:	2316      	movs	r3, #22
 8001d5a:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d60:	bd08      	pop	{r3, pc}

08001d62 <_exit>:

void _exit (int status)
{
 8001d62:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d64:	f011 fcb0 	bl	80136c8 <__errno>
 8001d68:	2316      	movs	r3, #22
 8001d6a:	6003      	str	r3, [r0, #0]
 8001d6c:	e7fe      	b.n	8001d6c <_exit+0xa>

08001d6e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6e:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	1e16      	subs	r6, r2, #0
 8001d72:	dd07      	ble.n	8001d84 <_read+0x16>
 8001d74:	460c      	mov	r4, r1
 8001d76:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001d78:	f3af 8000 	nop.w
 8001d7c:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	42a5      	cmp	r5, r4
 8001d82:	d1f9      	bne.n	8001d78 <_read+0xa>
	}

return len;
}
 8001d84:	4630      	mov	r0, r6
 8001d86:	bd70      	pop	{r4, r5, r6, pc}

08001d88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d88:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	1e16      	subs	r6, r2, #0
 8001d8c:	dd07      	ble.n	8001d9e <_write+0x16>
 8001d8e:	460c      	mov	r4, r1
 8001d90:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001d92:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001d96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	42a5      	cmp	r5, r4
 8001d9c:	d1f9      	bne.n	8001d92 <_write+0xa>
	}
	return len;
}
 8001d9e:	4630      	mov	r0, r6
 8001da0:	bd70      	pop	{r4, r5, r6, pc}

08001da2 <_close>:

int _close(int file)
{
	return -1;
}
 8001da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da6:	4770      	bx	lr

08001da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dac:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001dae:	2000      	movs	r0, #0
 8001db0:	4770      	bx	lr

08001db2 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001db2:	2001      	movs	r0, #1
 8001db4:	4770      	bx	lr

08001db6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001db6:	2000      	movs	r0, #0
 8001db8:	4770      	bx	lr

08001dba <_open>:

int _open(char *path, int flags, ...)
{
 8001dba:	b40e      	push	{r1, r2, r3}
	/* Pretend like we always fail */
	return -1;
}
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc0:	b003      	add	sp, #12
 8001dc2:	4770      	bx	lr

08001dc4 <_wait>:

int _wait(int *status)
{
 8001dc4:	b508      	push	{r3, lr}
	errno = ECHILD;
 8001dc6:	f011 fc7f 	bl	80136c8 <__errno>
 8001dca:	230a      	movs	r3, #10
 8001dcc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd2:	bd08      	pop	{r3, pc}

08001dd4 <_unlink>:

int _unlink(char *name)
{
 8001dd4:	b508      	push	{r3, lr}
	errno = ENOENT;
 8001dd6:	f011 fc77 	bl	80136c8 <__errno>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de2:	bd08      	pop	{r3, pc}

08001de4 <_times>:

int _times(struct tms *buf)
{
	return -1;
}
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de8:	4770      	bx	lr

08001dea <_stat>:

int _stat(char *file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dee:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001df0:	2000      	movs	r0, #0
 8001df2:	4770      	bx	lr

08001df4 <_link>:

int _link(char *old, char *new)
{
 8001df4:	b508      	push	{r3, lr}
	errno = EMLINK;
 8001df6:	f011 fc67 	bl	80136c8 <__errno>
 8001dfa:	231f      	movs	r3, #31
 8001dfc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e02:	bd08      	pop	{r3, pc}

08001e04 <_fork>:

int _fork(void)
{
 8001e04:	b508      	push	{r3, lr}
	errno = EAGAIN;
 8001e06:	f011 fc5f 	bl	80136c8 <__errno>
 8001e0a:	230b      	movs	r3, #11
 8001e0c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e12:	bd08      	pop	{r3, pc}

08001e14 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8001e14:	b508      	push	{r3, lr}
	errno = ENOMEM;
 8001e16:	f011 fc57 	bl	80136c8 <__errno>
 8001e1a:	230c      	movs	r3, #12
 8001e1c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e22:	bd08      	pop	{r3, pc}

08001e24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e24:	b508      	push	{r3, lr}
 8001e26:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <_sbrk+0x34>)
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	b142      	cbz	r2, 8001e40 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <_sbrk+0x34>)
 8001e30:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001e32:	4403      	add	r3, r0
 8001e34:	466a      	mov	r2, sp
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d806      	bhi.n	8001e48 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <_sbrk+0x34>)
 8001e3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001e3e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <_sbrk+0x34>)
 8001e42:	4906      	ldr	r1, [pc, #24]	; (8001e5c <_sbrk+0x38>)
 8001e44:	6011      	str	r1, [r2, #0]
 8001e46:	e7f2      	b.n	8001e2e <_sbrk+0xa>
		errno = ENOMEM;
 8001e48:	f011 fc3e 	bl	80136c8 <__errno>
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e54:	e7f3      	b.n	8001e3e <_sbrk+0x1a>
 8001e56:	bf00      	nop
 8001e58:	2000099c 	.word	0x2000099c
 8001e5c:	20001c20 	.word	0x20001c20

08001e60 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e60:	490f      	ldr	r1, [pc, #60]	; (8001ea0 <SystemInit+0x40>)
 8001e62:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <SystemInit+0x44>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e78:	2000      	movs	r0, #0
 8001e7a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001e82:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001e86:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e94:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e96:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e9c:	608b      	str	r3, [r1, #8]
#endif
}
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <SystemCoreClockUpdate+0xbc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f013 0f08 	tst.w	r3, #8
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <SystemCoreClockUpdate+0xbc>)
 8001eb2:	bf07      	ittee	eq
 8001eb4:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8001eb8:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001ebc:	681b      	ldrne	r3, [r3, #0]
 8001ebe:	f3c3 1303 	ubfxne	r3, r3, #4, #4
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001ec2:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <SystemCoreClockUpdate+0xc0>)
 8001ec4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec8:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <SystemCoreClockUpdate+0xbc>)
 8001eca:	6893      	ldr	r3, [r2, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d843      	bhi.n	8001f5c <SystemCoreClockUpdate+0xb4>
 8001ed4:	e8df f003 	tbb	[pc, r3]
 8001ed8:	42424207 	.word	0x42424207
 8001edc:	42424214 	.word	0x42424214
 8001ee0:	42424218 	.word	0x42424218
 8001ee4:	1c          	.byte	0x1c
 8001ee5:	00          	.byte	0x00
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <SystemCoreClockUpdate+0xc4>)
 8001ee8:	6019      	str	r1, [r3, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <SystemCoreClockUpdate+0xbc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001eee:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <SystemCoreClockUpdate+0xc4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001ef0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ef4:	491e      	ldr	r1, [pc, #120]	; (8001f70 <SystemCoreClockUpdate+0xc8>)
 8001ef6:	5cc9      	ldrb	r1, [r1, r3]
  SystemCoreClock >>= tmp;
 8001ef8:	6813      	ldr	r3, [r2, #0]
 8001efa:	40cb      	lsrs	r3, r1
 8001efc:	6013      	str	r3, [r2, #0]
}
 8001efe:	4770      	bx	lr
      SystemCoreClock = HSI_VALUE;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <SystemCoreClockUpdate+0xc4>)
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <SystemCoreClockUpdate+0xcc>)
 8001f04:	601a      	str	r2, [r3, #0]
      break;
 8001f06:	e7f0      	b.n	8001eea <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSE_VALUE;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <SystemCoreClockUpdate+0xc4>)
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <SystemCoreClockUpdate+0xd0>)
 8001f0c:	601a      	str	r2, [r3, #0]
      break;
 8001f0e:	e7ec      	b.n	8001eea <SystemCoreClockUpdate+0x42>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <SystemCoreClockUpdate+0xbc>)
 8001f12:	68da      	ldr	r2, [r3, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f1a:	3301      	adds	r3, #1
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f1c:	f002 0203 	and.w	r2, r2, #3
      switch (pllsource)
 8001f20:	2a02      	cmp	r2, #2
 8001f22:	d004      	beq.n	8001f2e <SystemCoreClockUpdate+0x86>
 8001f24:	2a03      	cmp	r2, #3
 8001f26:	d015      	beq.n	8001f54 <SystemCoreClockUpdate+0xac>
          pllvco = (msirange / pllm);
 8001f28:	fbb1 f3f3 	udiv	r3, r1, r3
          break;
 8001f2c:	e002      	b.n	8001f34 <SystemCoreClockUpdate+0x8c>
          pllvco = (HSI_VALUE / pllm);
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <SystemCoreClockUpdate+0xcc>)
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001f34:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <SystemCoreClockUpdate+0xbc>)
 8001f36:	68d1      	ldr	r1, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001f38:	68d2      	ldr	r2, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001f3a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001f3e:	fb03 f301 	mul.w	r3, r3, r1
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001f42:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8001f46:	3201      	adds	r2, #1
 8001f48:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8001f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f4e:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <SystemCoreClockUpdate+0xc4>)
 8001f50:	6013      	str	r3, [r2, #0]
      break;
 8001f52:	e7ca      	b.n	8001eea <SystemCoreClockUpdate+0x42>
          pllvco = (HSE_VALUE / pllm);
 8001f54:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <SystemCoreClockUpdate+0xd0>)
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
          break;
 8001f5a:	e7eb      	b.n	8001f34 <SystemCoreClockUpdate+0x8c>
      SystemCoreClock = msirange;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <SystemCoreClockUpdate+0xc4>)
 8001f5e:	6019      	str	r1, [r3, #0]
      break;
 8001f60:	e7c3      	b.n	8001eea <SystemCoreClockUpdate+0x42>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08013c40 	.word	0x08013c40
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	08013c28 	.word	0x08013c28
 8001f74:	00f42400 	.word	0x00f42400
 8001f78:	007a1200 	.word	0x007a1200

08001f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f82:	e003      	b.n	8001f8c <LoopCopyDataInit>

08001f84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f8a:	3104      	adds	r1, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f94:	d3f6      	bcc.n	8001f84 <CopyDataInit>
	ldr	r2, =_sbss
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f98:	e002      	b.n	8001fa0 <LoopFillZerobss>

08001f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f9c:	f842 3b04 	str.w	r3, [r2], #4

08001fa0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <LoopForever+0x16>)
	cmp	r2, r3
 8001fa2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fa4:	d3f9      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fa6:	f7ff ff5b 	bl	8001e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f011 fba3 	bl	80136f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fae:	f7ff fb9d 	bl	80016ec <main>

08001fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb2:	e7fe      	b.n	8001fb2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fb4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001fb8:	08014d88 	.word	0x08014d88
	ldr	r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fc0:	2000048c 	.word	0x2000048c
	ldr	r2, =_sbss
 8001fc4:	2000048c 	.word	0x2000048c
	ldr	r3, = _ebss
 8001fc8:	20001c1c 	.word	0x20001c1c

08001fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC1_2_IRQHandler>
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_DeInit>:
{
 8001fd4:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_DeInit+0x28>)
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8001fde:	2400      	movs	r4, #0
 8001fe0:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_RCC_APB2_FORCE_RESET();
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8001fe4:	641c      	str	r4, [r3, #64]	; 0x40
  __HAL_RCC_AHB1_FORCE_RESET();
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001fe8:	629c      	str	r4, [r3, #40]	; 0x28
  __HAL_RCC_AHB2_FORCE_RESET();
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001fec:	62dc      	str	r4, [r3, #44]	; 0x2c
  __HAL_RCC_AHB3_FORCE_RESET();
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001ff0:	631c      	str	r4, [r3, #48]	; 0x30
  HAL_MspDeInit();
 8001ff2:	f7ff ffed 	bl	8001fd0 <HAL_MspDeInit>
}
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	bd10      	pop	{r4, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_InitTick+0x44>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b90b      	cbnz	r3, 800200a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002006:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002008:	4770      	bx	lr
{
 800200a:	b510      	push	{r4, lr}
 800200c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800200e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002012:	fbb0 f3f3 	udiv	r3, r0, r3
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_InitTick+0x48>)
 8002018:	6810      	ldr	r0, [r2, #0]
 800201a:	fbb0 f0f3 	udiv	r0, r0, r3
 800201e:	f000 f9bd 	bl	800239c <HAL_SYSTICK_Config>
 8002022:	b968      	cbnz	r0, 8002040 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002024:	2c0f      	cmp	r4, #15
 8002026:	d901      	bls.n	800202c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002028:	2001      	movs	r0, #1
 800202a:	e00a      	b.n	8002042 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	4621      	mov	r1, r4
 8002030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002034:	f000 f94c 	bl	80022d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_InitTick+0x4c>)
 800203a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800203c:	2000      	movs	r0, #0
 800203e:	e000      	b.n	8002042 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002040:	2001      	movs	r0, #1
}
 8002042:	bd10      	pop	{r4, pc}
 8002044:	2000000c 	.word	0x2000000c
 8002048:	20000008 	.word	0x20000008
 800204c:	20000010 	.word	0x20000010

08002050 <HAL_Init>:
{
 8002050:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_Init+0x28>)
 8002054:	6813      	ldr	r3, [r2, #0]
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205c:	2003      	movs	r0, #3
 800205e:	f000 f925 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002062:	2000      	movs	r0, #0
 8002064:	f7ff ffcc 	bl	8002000 <HAL_InitTick>
 8002068:	b110      	cbz	r0, 8002070 <HAL_Init+0x20>
    status = HAL_ERROR;
 800206a:	2401      	movs	r4, #1
}
 800206c:	4620      	mov	r0, r4
 800206e:	bd10      	pop	{r4, pc}
 8002070:	4604      	mov	r4, r0
    HAL_MspInit();
 8002072:	f7ff fcdb 	bl	8001a2c <HAL_MspInit>
 8002076:	e7f9      	b.n	800206c <HAL_Init+0x1c>
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800207c:	4a03      	ldr	r2, [pc, #12]	; (800208c <HAL_IncTick+0x10>)
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	4903      	ldr	r1, [pc, #12]	; (8002090 <HAL_IncTick+0x14>)
 8002082:	6809      	ldr	r1, [r1, #0]
 8002084:	440b      	add	r3, r1
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20001bf4 	.word	0x20001bf4
 8002090:	2000000c 	.word	0x2000000c

08002094 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002094:	4b01      	ldr	r3, [pc, #4]	; (800209c <HAL_GetTick+0x8>)
 8002096:	6818      	ldr	r0, [r3, #0]
}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20001bf4 	.word	0x20001bf4

080020a0 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80020a0:	4b01      	ldr	r3, [pc, #4]	; (80020a8 <HAL_GetTickPrio+0x8>)
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000010 	.word	0x20000010

080020ac <HAL_SetTickFreq>:
HAL_StatusTypeDef HAL_SetTickFreq(uint32_t Freq)
{
  HAL_StatusTypeDef status  = HAL_OK;
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_SetTickFreq+0x28>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4283      	cmp	r3, r0
 80020b2:	d00b      	beq.n	80020cc <HAL_SetTickFreq+0x20>
{
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4604      	mov	r4, r0
  {
    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_SetTickFreq+0x2c>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	f7ff ffa0 	bl	8002000 <HAL_InitTick>
    if (status == HAL_OK)
 80020c0:	4603      	mov	r3, r0
 80020c2:	b908      	cbnz	r0, 80020c8 <HAL_SetTickFreq+0x1c>
    {
      uwTickFreq = Freq;
 80020c4:	4a03      	ldr	r2, [pc, #12]	; (80020d4 <HAL_SetTickFreq+0x28>)
 80020c6:	6014      	str	r4, [r2, #0]
    }
  }

  return status;
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	2000000c 	.word	0x2000000c
 80020d8:	20000010 	.word	0x20000010

080020dc <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
uint32_t HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 80020dc:	4b01      	ldr	r3, [pc, #4]	; (80020e4 <HAL_GetTickFreq+0x8>)
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2000000c 	.word	0x2000000c

080020e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e8:	b538      	push	{r3, r4, r5, lr}
 80020ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff ffd2 	bl	8002094 <HAL_GetTick>
 80020f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80020f6:	d002      	beq.n	80020fe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <HAL_Delay+0x24>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020fe:	f7ff ffc9 	bl	8002094 <HAL_GetTick>
 8002102:	1b40      	subs	r0, r0, r5
 8002104:	42a0      	cmp	r0, r4
 8002106:	d3fa      	bcc.n	80020fe <HAL_Delay+0x16>
  {
  }
}
 8002108:	bd38      	pop	{r3, r4, r5, pc}
 800210a:	bf00      	nop
 800210c:	2000000c 	.word	0x2000000c

08002110 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002110:	4a02      	ldr	r2, [pc, #8]	; (800211c <HAL_SuspendTick+0xc>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	f023 0302 	bic.w	r3, r3, #2
 8002118:	6013      	str	r3, [r2, #0]
}
 800211a:	4770      	bx	lr
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002120:	4a02      	ldr	r2, [pc, #8]	; (800212c <HAL_ResumeTick+0xc>)
 8002122:	6813      	ldr	r3, [r2, #0]
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	6013      	str	r3, [r2, #0]
}
 800212a:	4770      	bx	lr
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8002130:	f04f 7085 	mov.w	r0, #17432576	; 0x10a0000
 8002134:	4770      	bx	lr
	...

08002138 <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8002138:	4b01      	ldr	r3, [pc, #4]	; (8002140 <HAL_GetREVID+0x8>)
 800213a:	6818      	ldr	r0, [r3, #0]
}
 800213c:	0c00      	lsrs	r0, r0, #16
 800213e:	4770      	bx	lr
 8002140:	e0042000 	.word	0xe0042000

08002144 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8002144:	4b02      	ldr	r3, [pc, #8]	; (8002150 <HAL_GetDEVID+0xc>)
 8002146:	6818      	ldr	r0, [r3, #0]
}
 8002148:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e0042000 	.word	0xe0042000

08002154 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
}
 8002154:	4b01      	ldr	r3, [pc, #4]	; (800215c <HAL_GetUIDw0+0x8>)
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	1fff7590 	.word	0x1fff7590

08002160 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002160:	4b01      	ldr	r3, [pc, #4]	; (8002168 <HAL_GetUIDw1+0x8>)
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	1fff7594 	.word	0x1fff7594

0800216c <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 800216c:	4b01      	ldr	r3, [pc, #4]	; (8002174 <HAL_GetUIDw2+0x8>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	1fff7598 	.word	0x1fff7598

08002178 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002178:	4a02      	ldr	r2, [pc, #8]	; (8002184 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800217a:	6853      	ldr	r3, [r2, #4]
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6053      	str	r3, [r2, #4]
}
 8002182:	4770      	bx	lr
 8002184:	e0042000 	.word	0xe0042000

08002188 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002188:	4a02      	ldr	r2, [pc, #8]	; (8002194 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800218a:	6853      	ldr	r3, [r2, #4]
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6053      	str	r3, [r2, #4]
}
 8002192:	4770      	bx	lr
 8002194:	e0042000 	.word	0xe0042000

08002198 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002198:	4a02      	ldr	r2, [pc, #8]	; (80021a4 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800219a:	6853      	ldr	r3, [r2, #4]
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6053      	str	r3, [r2, #4]
}
 80021a2:	4770      	bx	lr
 80021a4:	e0042000 	.word	0xe0042000

080021a8 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80021a8:	4a02      	ldr	r2, [pc, #8]	; (80021b4 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80021aa:	6853      	ldr	r3, [r2, #4]
 80021ac:	f023 0302 	bic.w	r3, r3, #2
 80021b0:	6053      	str	r3, [r2, #4]
}
 80021b2:	4770      	bx	lr
 80021b4:	e0042000 	.word	0xe0042000

080021b8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80021b8:	4a02      	ldr	r2, [pc, #8]	; (80021c4 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80021ba:	6853      	ldr	r3, [r2, #4]
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6053      	str	r3, [r2, #4]
}
 80021c2:	4770      	bx	lr
 80021c4:	e0042000 	.word	0xe0042000

080021c8 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80021c8:	4a02      	ldr	r2, [pc, #8]	; (80021d4 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80021ca:	6853      	ldr	r3, [r2, #4]
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6053      	str	r3, [r2, #4]
}
 80021d2:	4770      	bx	lr
 80021d4:	e0042000 	.word	0xe0042000

080021d8 <HAL_SYSCFG_SRAM2Erase>:
  * @retval None
  */
void HAL_SYSCFG_SRAM2Erase(void)
{
  /* unlock the write protection of the SRAM2ER bit */
  SYSCFG->SKR = 0xCA;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_SYSCFG_SRAM2Erase+0x18>)
 80021da:	22ca      	movs	r2, #202	; 0xca
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
  SYSCFG->SKR = 0x53;
 80021de:	2253      	movs	r2, #83	; 0x53
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Starts a hardware SRAM2 erase operation*/
  *(__IO uint32_t *) SCSR_SRAM2ER_BB = 0x00000001UL;
 80021e2:	f1a3 23fd 	sub.w	r3, r3, #4244700416	; 0xfd00fd00
 80021e6:	f5a3 0360 	sub.w	r3, r3, #14680064	; 0xe00000
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	4770      	bx	lr
 80021f0:	40010000 	.word	0x40010000

080021f4 <HAL_SYSCFG_EnableMemorySwappingBank>:
  *
  * @retval None
  */
void HAL_SYSCFG_EnableMemorySwappingBank(void)
{
  *(__IO uint32_t *)FB_MODE_BB = 0x00000001UL;
 80021f4:	4b01      	ldr	r3, [pc, #4]	; (80021fc <HAL_SYSCFG_EnableMemorySwappingBank+0x8>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	4770      	bx	lr
 80021fc:	42200020 	.word	0x42200020

08002200 <HAL_SYSCFG_DisableMemorySwappingBank>:
  * @retval None
  */
void HAL_SYSCFG_DisableMemorySwappingBank(void)
{

  *(__IO uint32_t *)FB_MODE_BB = 0x00000000UL;
 8002200:	4b01      	ldr	r3, [pc, #4]	; (8002208 <HAL_SYSCFG_DisableMemorySwappingBank+0x8>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
}
 8002206:	4770      	bx	lr
 8002208:	42200020 	.word	0x42200020

0800220c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800220c:	4a03      	ldr	r2, [pc, #12]	; (800221c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800220e:	6813      	ldr	r3, [r2, #0]
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	4318      	orrs	r0, r3
 8002216:	6010      	str	r0, [r2, #0]
}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40010030 	.word	0x40010030

08002220 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002220:	4a03      	ldr	r2, [pc, #12]	; (8002230 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f023 0302 	bic.w	r3, r3, #2
 8002228:	4318      	orrs	r0, r3
 800222a:	6010      	str	r0, [r2, #0]
}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40010030 	.word	0x40010030

08002234 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8002234:	4a03      	ldr	r2, [pc, #12]	; (8002244 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x10>)
 8002236:	6853      	ldr	r3, [r2, #4]
 8002238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800223c:	4318      	orrs	r0, r3
 800223e:	6050      	str	r0, [r2, #4]
}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40010030 	.word	0x40010030

08002248 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002248:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 800224c:	6813      	ldr	r3, [r2, #0]
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002254:	f7ff ff1e 	bl	8002094 <HAL_GetTick>
 8002258:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 800225a:	4c07      	ldr	r4, [pc, #28]	; (8002278 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	f013 0f08 	tst.w	r3, #8
 8002262:	d106      	bne.n	8002272 <HAL_SYSCFG_EnableVREFBUF+0x2a>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002264:	f7ff ff16 	bl	8002094 <HAL_GetTick>
 8002268:	1b40      	subs	r0, r0, r5
 800226a:	280a      	cmp	r0, #10
 800226c:	d9f6      	bls.n	800225c <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
 800226e:	2003      	movs	r0, #3
 8002270:	e000      	b.n	8002274 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    }
  }

  return HAL_OK;
 8002272:	2000      	movs	r0, #0
}
 8002274:	bd38      	pop	{r3, r4, r5, pc}
 8002276:	bf00      	nop
 8002278:	40010030 	.word	0x40010030

0800227c <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <HAL_SYSCFG_DisableVREFBUF+0xc>)
 800227e:	6813      	ldr	r3, [r2, #0]
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6013      	str	r3, [r2, #0]
}
 8002286:	4770      	bx	lr
 8002288:	40010030 	.word	0x40010030

0800228c <HAL_SYSCFG_EnableIOAnalogSwitchBooster>:
  *
  * @retval None
  */
void HAL_SYSCFG_EnableIOAnalogSwitchBooster(void)
{
  SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0xc>)
 800228e:	6853      	ldr	r3, [r2, #4]
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6053      	str	r3, [r2, #4]
}
 8002296:	4770      	bx	lr
 8002298:	40010000 	.word	0x40010000

0800229c <HAL_SYSCFG_DisableIOAnalogSwitchBooster>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableIOAnalogSwitchBooster(void)
{
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 800229c:	4a02      	ldr	r2, [pc, #8]	; (80022a8 <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0xc>)
 800229e:	6853      	ldr	r3, [r2, #4]
 80022a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a4:	6053      	str	r3, [r2, #4]
}
 80022a6:	4770      	bx	lr
 80022a8:	40010000 	.word	0x40010000

080022ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80022ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c0:	0200      	lsls	r0, r0, #8
 80022c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80022c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80022c8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_NVIC_SetPriority+0x5c>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022da:	f1c3 0407 	rsb	r4, r3, #7
 80022de:	2c04      	cmp	r4, #4
 80022e0:	bf28      	it	cs
 80022e2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e4:	1d1d      	adds	r5, r3, #4
 80022e6:	2d06      	cmp	r5, #6
 80022e8:	bf8c      	ite	hi
 80022ea:	3b03      	subhi	r3, #3
 80022ec:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80022f2:	fa05 f404 	lsl.w	r4, r5, r4
 80022f6:	ea21 0104 	bic.w	r1, r1, r4
 80022fa:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	fa05 f303 	lsl.w	r3, r5, r3
 8002300:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002306:	2800      	cmp	r0, #0
 8002308:	db09      	blt.n	800231e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	0109      	lsls	r1, r1, #4
 800230c:	b2c9      	uxtb	r1, r1
 800230e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002312:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002316:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800231a:	bc30      	pop	{r4, r5}
 800231c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	f000 000f 	and.w	r0, r0, #15
 8002322:	0109      	lsls	r1, r1, #4
 8002324:	b2c9      	uxtb	r1, r1
 8002326:	4b02      	ldr	r3, [pc, #8]	; (8002330 <HAL_NVIC_SetPriority+0x60>)
 8002328:	5419      	strb	r1, [r3, r0]
 800232a:	e7f6      	b.n	800231a <HAL_NVIC_SetPriority+0x4a>
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	e000ed14 	.word	0xe000ed14

08002334 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002334:	2800      	cmp	r0, #0
 8002336:	db08      	blt.n	800234a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002338:	0942      	lsrs	r2, r0, #5
 800233a:	f000 001f 	and.w	r0, r0, #31
 800233e:	2301      	movs	r3, #1
 8002340:	fa03 f000 	lsl.w	r0, r3, r0
 8002344:	4b01      	ldr	r3, [pc, #4]	; (800234c <HAL_NVIC_EnableIRQ+0x18>)
 8002346:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100

08002350 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002350:	2800      	cmp	r0, #0
 8002352:	db0d      	blt.n	8002370 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002354:	0943      	lsrs	r3, r0, #5
 8002356:	f000 001f 	and.w	r0, r0, #31
 800235a:	2201      	movs	r2, #1
 800235c:	fa02 f000 	lsl.w	r0, r2, r0
 8002360:	3320      	adds	r3, #32
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <HAL_NVIC_DisableIRQ+0x24>)
 8002364:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800236c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8002378:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800237c:	4905      	ldr	r1, [pc, #20]	; (8002394 <HAL_NVIC_SystemReset+0x1c>)
 800237e:	68ca      	ldr	r2, [r1, #12]
 8002380:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_NVIC_SystemReset+0x20>)
 8002386:	4313      	orrs	r3, r2
 8002388:	60cb      	str	r3, [r1, #12]
 800238a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <HAL_NVIC_SystemReset+0x16>
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00
 8002398:	05fa0004 	.word	0x05fa0004

0800239c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	3801      	subs	r0, #1
 800239e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80023a2:	d20a      	bcs.n	80023ba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_SYSTICK_Config+0x24>)
 80023a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	4a06      	ldr	r2, [pc, #24]	; (80023c4 <HAL_SYSTICK_Config+0x28>)
 80023aa:	21f0      	movs	r1, #240	; 0xf0
 80023ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	2000      	movs	r0, #0
 80023b2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b4:	2207      	movs	r2, #7
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <HAL_NVIC_GetPriorityGrouping+0xc>)
 80023ca:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 80023cc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80023d8:	b470      	push	{r4, r5, r6}
  if ((int32_t)(IRQn) >= 0)
 80023da:	2800      	cmp	r0, #0
 80023dc:	db22      	blt.n	8002424 <HAL_NVIC_GetPriority+0x4c>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80023de:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80023e2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80023e6:	f890 0300 	ldrb.w	r0, [r0, #768]	; 0x300
 80023ea:	0900      	lsrs	r0, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	f1c1 0407 	rsb	r4, r1, #7
 80023f4:	2c04      	cmp	r4, #4
 80023f6:	bf28      	it	cs
 80023f8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	1d0d      	adds	r5, r1, #4
 80023fc:	2d06      	cmp	r5, #6
 80023fe:	bf8c      	ite	hi
 8002400:	3903      	subhi	r1, #3
 8002402:	2100      	movls	r1, #0
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8002404:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002408:	fa05 f404 	lsl.w	r4, r5, r4
 800240c:	fa20 f601 	lsr.w	r6, r0, r1
 8002410:	ea26 0404 	bic.w	r4, r6, r4
 8002414:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8002416:	fa05 f101 	lsl.w	r1, r5, r1
 800241a:	ea20 0001 	bic.w	r0, r0, r1
 800241e:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 8002420:	bc70      	pop	{r4, r5, r6}
 8002422:	4770      	bx	lr
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8002424:	f000 000f 	and.w	r0, r0, #15
 8002428:	4c01      	ldr	r4, [pc, #4]	; (8002430 <HAL_NVIC_GetPriority+0x58>)
 800242a:	5c20      	ldrb	r0, [r4, r0]
 800242c:	0900      	lsrs	r0, r0, #4
 800242e:	e7dd      	b.n	80023ec <HAL_NVIC_GetPriority+0x14>
 8002430:	e000ed14 	.word	0xe000ed14

08002434 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002434:	2800      	cmp	r0, #0
 8002436:	db09      	blt.n	800244c <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002438:	0943      	lsrs	r3, r0, #5
 800243a:	f000 001f 	and.w	r0, r0, #31
 800243e:	2201      	movs	r2, #1
 8002440:	fa02 f000 	lsl.w	r0, r2, r0
 8002444:	3340      	adds	r3, #64	; 0x40
 8002446:	4a02      	ldr	r2, [pc, #8]	; (8002450 <HAL_NVIC_SetPendingIRQ+0x1c>)
 8002448:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <HAL_NVIC_GetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002454:	2800      	cmp	r0, #0
 8002456:	db0b      	blt.n	8002470 <HAL_NVIC_GetPendingIRQ+0x1c>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8002458:	0943      	lsrs	r3, r0, #5
 800245a:	3340      	adds	r3, #64	; 0x40
 800245c:	4a05      	ldr	r2, [pc, #20]	; (8002474 <HAL_NVIC_GetPendingIRQ+0x20>)
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	f000 001f 	and.w	r0, r0, #31
 8002466:	fa23 f000 	lsr.w	r0, r3, r0
 800246a:	f000 0001 	and.w	r0, r0, #1
 800246e:	4770      	bx	lr
    return(0U);
 8002470:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100

08002478 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002478:	2800      	cmp	r0, #0
 800247a:	db09      	blt.n	8002490 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247c:	0943      	lsrs	r3, r0, #5
 800247e:	f000 001f 	and.w	r0, r0, #31
 8002482:	2201      	movs	r2, #1
 8002484:	fa02 f000 	lsl.w	r0, r2, r0
 8002488:	3360      	adds	r3, #96	; 0x60
 800248a:	4a02      	ldr	r2, [pc, #8]	; (8002494 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 800248c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100

08002498 <HAL_NVIC_GetActive>:
  if ((int32_t)(IRQn) >= 0)
 8002498:	2800      	cmp	r0, #0
 800249a:	db0b      	blt.n	80024b4 <HAL_NVIC_GetActive+0x1c>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800249c:	0943      	lsrs	r3, r0, #5
 800249e:	3380      	adds	r3, #128	; 0x80
 80024a0:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <HAL_NVIC_GetActive+0x20>)
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	f000 001f 	and.w	r0, r0, #31
 80024aa:	fa23 f000 	lsr.w	r0, r3, r0
 80024ae:	f000 0001 	and.w	r0, r0, #1
 80024b2:	4770      	bx	lr
    return(0U);
 80024b4:	2000      	movs	r0, #0
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100

080024bc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80024bc:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	bf0c      	ite	eq
 80024c4:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80024c8:	f023 0304 	bicne.w	r3, r3, #4
 80024cc:	6013      	str	r3, [r2, #0]
  }
}
 80024ce:	4770      	bx	lr
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80024d4:	4770      	bx	lr

080024d6 <HAL_SYSTICK_IRQHandler>:
{
 80024d6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80024d8:	f7ff fffc 	bl	80024d4 <HAL_SYSTICK_Callback>
}
 80024dc:	bd08      	pop	{r3, pc}
	...

080024e0 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024e0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_MPU_Disable+0x18>)
 80024e6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 80024ee:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_MPU_Disable+0x1c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000ed00 	.word	0xe000ed00
 80024fc:	e000ed90 	.word	0xe000ed90

08002500 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002500:	f040 0001 	orr.w	r0, r0, #1
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_MPU_Enable+0x1c>)
 8002506:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_MPU_Enable+0x20>)
 800250a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002516:	f3bf 8f6f 	isb	sy

  /* Ensure MPU settings take effects */
  __DSB();
  __ISB();
}
 800251a:	4770      	bx	lr
 800251c:	e000ed90 	.word	0xe000ed90
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002524:	7842      	ldrb	r2, [r0, #1]
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_MPU_ConfigRegion+0x50>)
 8002528:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800252a:	7803      	ldrb	r3, [r0, #0]
 800252c:	b923      	cbnz	r3, 8002538 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_MPU_ConfigRegion+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002534:	611a      	str	r2, [r3, #16]
  }
}
 8002536:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8002538:	6843      	ldr	r3, [r0, #4]
 800253a:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <HAL_MPU_ConfigRegion+0x50>)
 800253c:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 800253e:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8002540:	7ac3      	ldrb	r3, [r0, #11]
 8002542:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8002544:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
 8002548:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 800254a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 800254c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 800254e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8002552:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8002554:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8002558:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 800255a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 800255e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8002560:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8002564:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8002566:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800256a:	7a01      	ldrb	r1, [r0, #8]
 800256c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8002570:	6113      	str	r3, [r2, #16]
 8002572:	4770      	bx	lr
 8002574:	e000ed90 	.word	0xe000ed90

08002578 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002578:	2800      	cmp	r0, #0
 800257a:	d057      	beq.n	800262c <HAL_DMA_Init+0xb4>
{
 800257c:	b410      	push	{r4}
 800257e:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002580:	6801      	ldr	r1, [r0, #0]
 8002582:	4a2b      	ldr	r2, [pc, #172]	; (8002630 <HAL_DMA_Init+0xb8>)
 8002584:	4291      	cmp	r1, r2
 8002586:	d846      	bhi.n	8002616 <HAL_DMA_Init+0x9e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <HAL_DMA_Init+0xbc>)
 800258a:	440a      	add	r2, r1
 800258c:	492a      	ldr	r1, [pc, #168]	; (8002638 <HAL_DMA_Init+0xc0>)
 800258e:	fba1 1202 	umull	r1, r2, r1, r2
 8002592:	0912      	lsrs	r2, r2, #4
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002598:	4a28      	ldr	r2, [pc, #160]	; (800263c <HAL_DMA_Init+0xc4>)
 800259a:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800259c:	2202      	movs	r2, #2
 800259e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025a6:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80025aa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	68dc      	ldr	r4, [r3, #12]
 80025b2:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b4:	691c      	ldr	r4, [r3, #16]
 80025b6:	4322      	orrs	r2, r4
 80025b8:	695c      	ldr	r4, [r3, #20]
 80025ba:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025bc:	699c      	ldr	r4, [r3, #24]
 80025be:	4322      	orrs	r2, r4
 80025c0:	69dc      	ldr	r4, [r3, #28]
 80025c2:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c4:	6a1c      	ldr	r4, [r3, #32]
 80025c6:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80025c8:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ca:	6002      	str	r2, [r0, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80025d2:	d016      	beq.n	8002602 <HAL_DMA_Init+0x8a>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025d6:	4a19      	ldr	r2, [pc, #100]	; (800263c <HAL_DMA_Init+0xc4>)
 80025d8:	4291      	cmp	r1, r2
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025da:	bf0c      	ite	eq
 80025dc:	4918      	ldreq	r1, [pc, #96]	; (8002640 <HAL_DMA_Init+0xc8>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025de:	4919      	ldrne	r1, [pc, #100]	; (8002644 <HAL_DMA_Init+0xcc>)
 80025e0:	680a      	ldr	r2, [r1, #0]
 80025e2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80025e4:	f000 041c 	and.w	r4, r0, #28
 80025e8:	200f      	movs	r0, #15
 80025ea:	40a0      	lsls	r0, r4
 80025ec:	ea22 0200 	bic.w	r2, r2, r0
 80025f0:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025f2:	680c      	ldr	r4, [r1, #0]
 80025f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f6:	f002 001c 	and.w	r0, r2, #28
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4082      	lsls	r2, r0
 80025fe:	4322      	orrs	r2, r4
 8002600:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002602:	2000      	movs	r0, #0
 8002604:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800260c:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 8002610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002614:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002616:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <HAL_DMA_Init+0xd0>)
 8002618:	440a      	add	r2, r1
 800261a:	4907      	ldr	r1, [pc, #28]	; (8002638 <HAL_DMA_Init+0xc0>)
 800261c:	fba1 1202 	umull	r1, r2, r1, r2
 8002620:	0912      	lsrs	r2, r2, #4
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_DMA_Init+0xd4>)
 8002628:	6402      	str	r2, [r0, #64]	; 0x40
 800262a:	e7b7      	b.n	800259c <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
}
 800262e:	4770      	bx	lr
 8002630:	40020407 	.word	0x40020407
 8002634:	bffdfff8 	.word	0xbffdfff8
 8002638:	cccccccd 	.word	0xcccccccd
 800263c:	40020000 	.word	0x40020000
 8002640:	400200a8 	.word	0x400200a8
 8002644:	400204a8 	.word	0x400204a8
 8002648:	bffdfbf8 	.word	0xbffdfbf8
 800264c:	40020400 	.word	0x40020400

08002650 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002650:	2800      	cmp	r0, #0
 8002652:	d045      	beq.n	80026e0 <HAL_DMA_DeInit+0x90>
{
 8002654:	b410      	push	{r4}
 8002656:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002658:	6801      	ldr	r1, [r0, #0]
 800265a:	680a      	ldr	r2, [r1, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	600a      	str	r2, [r1, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002662:	6801      	ldr	r1, [r0, #0]
 8002664:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <HAL_DMA_DeInit+0x94>)
 8002666:	4291      	cmp	r1, r2
 8002668:	d82f      	bhi.n	80026ca <HAL_DMA_DeInit+0x7a>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800266a:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_DMA_DeInit+0x98>)
 800266c:	440a      	add	r2, r1
 800266e:	491f      	ldr	r1, [pc, #124]	; (80026ec <HAL_DMA_DeInit+0x9c>)
 8002670:	fba1 1202 	umull	r1, r2, r1, r2
 8002674:	0912      	lsrs	r2, r2, #4
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800267a:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <HAL_DMA_DeInit+0xa0>)
 800267c:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2100      	movs	r1, #0
 8002682:	6011      	str	r1, [r2, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002684:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002688:	f002 011c 	and.w	r1, r2, #28
 800268c:	2201      	movs	r2, #1
 800268e:	408a      	lsls	r2, r1
 8002690:	6042      	str	r2, [r0, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002692:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002694:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <HAL_DMA_DeInit+0xa0>)
 8002696:	4291      	cmp	r1, r2
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002698:	bf0c      	ite	eq
 800269a:	4c16      	ldreq	r4, [pc, #88]	; (80026f4 <HAL_DMA_DeInit+0xa4>)
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800269c:	4c16      	ldrne	r4, [pc, #88]	; (80026f8 <HAL_DMA_DeInit+0xa8>)
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026a2:	f001 001c 	and.w	r0, r1, #28
 80026a6:	210f      	movs	r1, #15
 80026a8:	4081      	lsls	r1, r0
 80026aa:	ea22 0201 	bic.w	r2, r2, r1
 80026ae:	6022      	str	r2, [r4, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80026b0:	2000      	movs	r0, #0
 80026b2:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80026b4:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80026b6:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80026b8:	6398      	str	r0, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ba:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80026bc:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026c0:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 80026c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026c8:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_DMA_DeInit+0xac>)
 80026cc:	440a      	add	r2, r1
 80026ce:	4907      	ldr	r1, [pc, #28]	; (80026ec <HAL_DMA_DeInit+0x9c>)
 80026d0:	fba1 1202 	umull	r1, r2, r1, r2
 80026d4:	0912      	lsrs	r2, r2, #4
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_DMA_DeInit+0xb0>)
 80026dc:	6402      	str	r2, [r0, #64]	; 0x40
 80026de:	e7ce      	b.n	800267e <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 80026e0:	2001      	movs	r0, #1
}
 80026e2:	4770      	bx	lr
 80026e4:	40020407 	.word	0x40020407
 80026e8:	bffdfff8 	.word	0xbffdfff8
 80026ec:	cccccccd 	.word	0xcccccccd
 80026f0:	40020000 	.word	0x40020000
 80026f4:	400200a8 	.word	0x400200a8
 80026f8:	400204a8 	.word	0x400204a8
 80026fc:	bffdfbf8 	.word	0xbffdfbf8
 8002700:	40020400 	.word	0x40020400

08002704 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002704:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002706:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800270a:	2c01      	cmp	r4, #1
 800270c:	d033      	beq.n	8002776 <HAL_DMA_Start+0x72>
 800270e:	2401      	movs	r4, #1
 8002710:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002714:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8002718:	b2e4      	uxtb	r4, r4
 800271a:	2c01      	cmp	r4, #1
 800271c:	d005      	beq.n	800272a <HAL_DMA_Start+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271e:	2300      	movs	r3, #0
 8002720:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8002724:	2002      	movs	r0, #2
  }
  return status;
}
 8002726:	bc70      	pop	{r4, r5, r6}
 8002728:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800272a:	2402      	movs	r4, #2
 800272c:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002730:	2400      	movs	r4, #0
 8002732:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002734:	6805      	ldr	r5, [r0, #0]
 8002736:	682c      	ldr	r4, [r5, #0]
 8002738:	f024 0401 	bic.w	r4, r4, #1
 800273c:	602c      	str	r4, [r5, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800273e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002740:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002742:	f004 061c 	and.w	r6, r4, #28
 8002746:	2401      	movs	r4, #1
 8002748:	40b4      	lsls	r4, r6
 800274a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800274c:	6804      	ldr	r4, [r0, #0]
 800274e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002750:	6883      	ldr	r3, [r0, #8]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d00a      	beq.n	800276c <HAL_DMA_Start+0x68>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002756:	6803      	ldr	r3, [r0, #0]
 8002758:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800275a:	6803      	ldr	r3, [r0, #0]
 800275c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE(hdma);
 800275e:	6802      	ldr	r2, [r0, #0]
 8002760:	6813      	ldr	r3, [r2, #0]
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2000      	movs	r0, #0
 800276a:	e7dc      	b.n	8002726 <HAL_DMA_Start+0x22>
    hdma->Instance->CPAR = DstAddress;
 800276c:	6803      	ldr	r3, [r0, #0]
 800276e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002770:	6803      	ldr	r3, [r0, #0]
 8002772:	60d9      	str	r1, [r3, #12]
 8002774:	e7f3      	b.n	800275e <HAL_DMA_Start+0x5a>
  __HAL_LOCK(hdma);
 8002776:	2002      	movs	r0, #2
 8002778:	e7d5      	b.n	8002726 <HAL_DMA_Start+0x22>

0800277a <HAL_DMA_Start_IT>:
{
 800277a:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 800277c:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8002780:	2c01      	cmp	r4, #1
 8002782:	d045      	beq.n	8002810 <HAL_DMA_Start_IT+0x96>
 8002784:	2401      	movs	r4, #1
 8002786:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 800278a:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 800278e:	b2e4      	uxtb	r4, r4
 8002790:	2c01      	cmp	r4, #1
 8002792:	d005      	beq.n	80027a0 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8002794:	2300      	movs	r3, #0
 8002796:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 800279a:	2002      	movs	r0, #2
}
 800279c:	bc70      	pop	{r4, r5, r6}
 800279e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a0:	2402      	movs	r4, #2
 80027a2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a6:	2400      	movs	r4, #0
 80027a8:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80027aa:	6805      	ldr	r5, [r0, #0]
 80027ac:	682c      	ldr	r4, [r5, #0]
 80027ae:	f024 0401 	bic.w	r4, r4, #1
 80027b2:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027b4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80027b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80027b8:	f004 061c 	and.w	r6, r4, #28
 80027bc:	2401      	movs	r4, #1
 80027be:	40b4      	lsls	r4, r6
 80027c0:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 80027c2:	6804      	ldr	r4, [r0, #0]
 80027c4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c6:	6883      	ldr	r3, [r0, #8]
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d011      	beq.n	80027f0 <HAL_DMA_Start_IT+0x76>
    hdma->Instance->CPAR = SrcAddress;
 80027cc:	6803      	ldr	r3, [r0, #0]
 80027ce:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027d0:	6803      	ldr	r3, [r0, #0]
 80027d2:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80027d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80027d6:	b183      	cbz	r3, 80027fa <HAL_DMA_Start_IT+0x80>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d8:	6802      	ldr	r2, [r0, #0]
 80027da:	6813      	ldr	r3, [r2, #0]
 80027dc:	f043 030e 	orr.w	r3, r3, #14
 80027e0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80027e2:	6802      	ldr	r2, [r0, #0]
 80027e4:	6813      	ldr	r3, [r2, #0]
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ec:	2000      	movs	r0, #0
 80027ee:	e7d5      	b.n	800279c <HAL_DMA_Start_IT+0x22>
    hdma->Instance->CPAR = DstAddress;
 80027f0:	6803      	ldr	r3, [r0, #0]
 80027f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80027f4:	6803      	ldr	r3, [r0, #0]
 80027f6:	60d9      	str	r1, [r3, #12]
 80027f8:	e7ec      	b.n	80027d4 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027fa:	6802      	ldr	r2, [r0, #0]
 80027fc:	6813      	ldr	r3, [r2, #0]
 80027fe:	f023 0304 	bic.w	r3, r3, #4
 8002802:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002804:	6802      	ldr	r2, [r0, #0]
 8002806:	6813      	ldr	r3, [r2, #0]
 8002808:	f043 030a 	orr.w	r3, r3, #10
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e7e8      	b.n	80027e2 <HAL_DMA_Start_IT+0x68>
  __HAL_LOCK(hdma);
 8002810:	2002      	movs	r0, #2
 8002812:	e7c3      	b.n	800279c <HAL_DMA_Start_IT+0x22>

08002814 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002814:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d006      	beq.n	800282c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281e:	2304      	movs	r3, #4
 8002820:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002822:	2300      	movs	r3, #0
 8002824:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
 800282a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800282c:	6802      	ldr	r2, [r0, #0]
 800282e:	6813      	ldr	r3, [r2, #0]
 8002830:	f023 030e 	bic.w	r3, r3, #14
 8002834:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002836:	6802      	ldr	r2, [r0, #0]
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002840:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002842:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002844:	f003 031c 	and.w	r3, r3, #28
 8002848:	2201      	movs	r2, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002850:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002854:	2300      	movs	r3, #0
 8002856:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 800285a:	4618      	mov	r0, r3
}
 800285c:	4770      	bx	lr

0800285e <HAL_DMA_Abort_IT>:
{
 800285e:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002860:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d003      	beq.n	8002872 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286a:	2304      	movs	r3, #4
 800286c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800286e:	2001      	movs	r0, #1
}
 8002870:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002872:	6802      	ldr	r2, [r0, #0]
 8002874:	6813      	ldr	r3, [r2, #0]
 8002876:	f023 030e 	bic.w	r3, r3, #14
 800287a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800287c:	6802      	ldr	r2, [r0, #0]
 800287e:	6813      	ldr	r3, [r2, #0]
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002886:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002888:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800288a:	f003 031c 	and.w	r3, r3, #28
 800288e:	2201      	movs	r2, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002896:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800289a:	2300      	movs	r3, #0
 800289c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80028a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028a2:	b113      	cbz	r3, 80028aa <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80028a4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2000      	movs	r0, #0
 80028a8:	e7e2      	b.n	8002870 <HAL_DMA_Abort_IT+0x12>
 80028aa:	2000      	movs	r0, #0
 80028ac:	e7e0      	b.n	8002870 <HAL_DMA_Abort_IT+0x12>

080028ae <HAL_DMA_PollForTransfer>:
{
 80028ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028b2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d007      	beq.n	80028cc <HAL_DMA_PollForTransfer+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028bc:	2304      	movs	r3, #4
 80028be:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80028c0:	2300      	movs	r3, #0
 80028c2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80028c6:	2001      	movs	r0, #1
}
 80028c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 80028cc:	6803      	ldr	r3, [r0, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f013 0f20 	tst.w	r3, #32
 80028d4:	d12d      	bne.n	8002932 <HAL_DMA_PollForTransfer+0x84>
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80028d6:	bb89      	cbnz	r1, 800293c <HAL_DMA_PollForTransfer+0x8e>
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 80028d8:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80028da:	f006 061c 	and.w	r6, r6, #28
 80028de:	2302      	movs	r3, #2
 80028e0:	fa03 f606 	lsl.w	r6, r3, r6
 80028e4:	4615      	mov	r5, r2
 80028e6:	4688      	mov	r8, r1
 80028e8:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80028ea:	f7ff fbd3 	bl	8002094 <HAL_GetTick>
 80028ee:	4681      	mov	r9, r0
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 80028f0:	2708      	movs	r7, #8
  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80028f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028f4:	6813      	ldr	r3, [r2, #0]
 80028f6:	4233      	tst	r3, r6
 80028f8:	d132      	bne.n	8002960 <HAL_DMA_PollForTransfer+0xb2>
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 80028fa:	6811      	ldr	r1, [r2, #0]
 80028fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028fe:	f003 031c 	and.w	r3, r3, #28
 8002902:	fa07 f003 	lsl.w	r0, r7, r3
 8002906:	4208      	tst	r0, r1
 8002908:	d11f      	bne.n	800294a <HAL_DMA_PollForTransfer+0x9c>
    if(Timeout != HAL_MAX_DELAY)
 800290a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800290e:	d0f1      	beq.n	80028f4 <HAL_DMA_PollForTransfer+0x46>
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 8002910:	f7ff fbc0 	bl	8002094 <HAL_GetTick>
 8002914:	eba0 0009 	sub.w	r0, r0, r9
 8002918:	42a8      	cmp	r0, r5
 800291a:	d801      	bhi.n	8002920 <HAL_DMA_PollForTransfer+0x72>
 800291c:	2d00      	cmp	r5, #0
 800291e:	d1e8      	bne.n	80028f2 <HAL_DMA_PollForTransfer+0x44>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002920:	2320      	movs	r3, #32
 8002922:	63e3      	str	r3, [r4, #60]	; 0x3c
        hdma->State = HAL_DMA_STATE_READY;
 8002924:	2001      	movs	r0, #1
 8002926:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
        __HAL_UNLOCK(hdma);
 800292a:	2300      	movs	r3, #0
 800292c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8002930:	e7ca      	b.n	80028c8 <HAL_DMA_PollForTransfer+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002936:	63c3      	str	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8002938:	2001      	movs	r0, #1
 800293a:	e7c5      	b.n	80028c8 <HAL_DMA_PollForTransfer+0x1a>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 800293c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800293e:	f006 061c 	and.w	r6, r6, #28
 8002942:	2304      	movs	r3, #4
 8002944:	fa03 f606 	lsl.w	r6, r3, r6
 8002948:	e7cc      	b.n	80028e4 <HAL_DMA_PollForTransfer+0x36>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800294a:	2001      	movs	r0, #1
 800294c:	fa00 f303 	lsl.w	r3, r0, r3
 8002950:	6053      	str	r3, [r2, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002952:	63e0      	str	r0, [r4, #60]	; 0x3c
      hdma->State= HAL_DMA_STATE_READY;
 8002954:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
      __HAL_UNLOCK(hdma);
 8002958:	2300      	movs	r3, #0
 800295a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 800295e:	e7b3      	b.n	80028c8 <HAL_DMA_PollForTransfer+0x1a>
  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8002960:	f1b8 0f00 	cmp.w	r8, #0
 8002964:	d10c      	bne.n	8002980 <HAL_DMA_PollForTransfer+0xd2>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1CU));
 8002966:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002968:	f003 011c 	and.w	r1, r3, #28
 800296c:	2302      	movs	r3, #2
 800296e:	408b      	lsls	r3, r1
 8002970:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002972:	2301      	movs	r3, #1
 8002974:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002978:	2000      	movs	r0, #0
 800297a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return HAL_OK;
 800297e:	e7a3      	b.n	80028c8 <HAL_DMA_PollForTransfer+0x1a>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 8002980:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002982:	f003 011c 	and.w	r1, r3, #28
 8002986:	2304      	movs	r3, #4
 8002988:	408b      	lsls	r3, r1
 800298a:	6053      	str	r3, [r2, #4]
 800298c:	e7f4      	b.n	8002978 <HAL_DMA_PollForTransfer+0xca>

0800298e <HAL_DMA_IRQHandler>:
{
 800298e:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002990:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002992:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002994:	6804      	ldr	r4, [r0, #0]
 8002996:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002998:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800299a:	f003 031c 	and.w	r3, r3, #28
 800299e:	2204      	movs	r2, #4
 80029a0:	409a      	lsls	r2, r3
 80029a2:	420a      	tst	r2, r1
 80029a4:	d015      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x44>
 80029a6:	f015 0f04 	tst.w	r5, #4
 80029aa:	d012      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	f013 0f20 	tst.w	r3, #32
 80029b2:	d103      	bne.n	80029bc <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	f023 0304 	bic.w	r3, r3, #4
 80029ba:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80029be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80029c0:	f003 021c 	and.w	r2, r3, #28
 80029c4:	2304      	movs	r3, #4
 80029c6:	4093      	lsls	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80029ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80029cc:	b103      	cbz	r3, 80029d0 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80029ce:	4798      	blx	r3
}
 80029d0:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029d2:	2202      	movs	r2, #2
 80029d4:	409a      	lsls	r2, r3
 80029d6:	420a      	tst	r2, r1
 80029d8:	d01c      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x86>
 80029da:	f015 0f02 	tst.w	r5, #2
 80029de:	d019      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	f013 0f20 	tst.w	r3, #32
 80029e6:	d106      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	f023 030a 	bic.w	r3, r3, #10
 80029ee:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80029f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80029fa:	f003 021c 	and.w	r2, r3, #28
 80029fe:	2302      	movs	r3, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002a04:	2300      	movs	r3, #0
 8002a06:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8002a0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0df      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8002a10:	4798      	blx	r3
 8002a12:	e7dd      	b.n	80029d0 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a14:	2208      	movs	r2, #8
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	420b      	tst	r3, r1
 8002a1c:	d0d8      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x42>
 8002a1e:	f015 0f08 	tst.w	r5, #8
 8002a22:	d0d5      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	f023 030e 	bic.w	r3, r3, #14
 8002a2a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a2c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002a2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a30:	f003 031c 	and.w	r3, r3, #28
 8002a34:	2201      	movs	r2, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a3c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002a42:	2300      	movs	r3, #0
 8002a44:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002a48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0c0      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8002a4e:	4798      	blx	r3
  return;
 8002a50:	e7be      	b.n	80029d0 <HAL_DMA_IRQHandler+0x42>

08002a52 <HAL_DMA_RegisterCallback>:
{
 8002a52:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8002a54:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002a58:	2801      	cmp	r0, #1
 8002a5a:	d020      	beq.n	8002a9e <HAL_DMA_RegisterCallback+0x4c>
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a62:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002a66:	b2c0      	uxtb	r0, r0
 8002a68:	2801      	cmp	r0, #1
 8002a6a:	d004      	beq.n	8002a76 <HAL_DMA_RegisterCallback+0x24>
    status = HAL_ERROR;
 8002a6c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return status;
 8002a74:	4770      	bx	lr
    switch (CallbackID)
 8002a76:	2903      	cmp	r1, #3
 8002a78:	d80f      	bhi.n	8002a9a <HAL_DMA_RegisterCallback+0x48>
 8002a7a:	e8df f001 	tbb	[pc, r1]
 8002a7e:	0502      	.short	0x0502
 8002a80:	0b08      	.short	0x0b08
           hdma->XferCpltCallback = pCallback;
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2000      	movs	r0, #0
           break;
 8002a86:	e7f2      	b.n	8002a6e <HAL_DMA_RegisterCallback+0x1c>
           hdma->XferHalfCpltCallback = pCallback;
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2000      	movs	r0, #0
           break;
 8002a8c:	e7ef      	b.n	8002a6e <HAL_DMA_RegisterCallback+0x1c>
           hdma->XferErrorCallback = pCallback;
 8002a8e:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8002a90:	2000      	movs	r0, #0
           break;
 8002a92:	e7ec      	b.n	8002a6e <HAL_DMA_RegisterCallback+0x1c>
           hdma->XferAbortCallback = pCallback;
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2000      	movs	r0, #0
           break;
 8002a98:	e7e9      	b.n	8002a6e <HAL_DMA_RegisterCallback+0x1c>
           status = HAL_ERROR;
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	e7e7      	b.n	8002a6e <HAL_DMA_RegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 8002a9e:	2002      	movs	r0, #2
}
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_DMA_UnRegisterCallback>:
{
 8002aa2:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8002aa4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002aa8:	2a01      	cmp	r2, #1
 8002aaa:	d027      	beq.n	8002afc <HAL_DMA_UnRegisterCallback+0x5a>
 8002aac:	2201      	movs	r2, #1
 8002aae:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	2a01      	cmp	r2, #1
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_UnRegisterCallback+0x24>
    status = HAL_ERROR;
 8002abc:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return status;
 8002ac4:	4770      	bx	lr
    switch (CallbackID)
 8002ac6:	2904      	cmp	r1, #4
 8002ac8:	d816      	bhi.n	8002af8 <HAL_DMA_UnRegisterCallback+0x56>
 8002aca:	e8df f001 	tbb	[pc, r1]
 8002ace:	0603      	.short	0x0603
 8002ad0:	0c09      	.short	0x0c09
 8002ad2:	0f          	.byte	0x0f
 8002ad3:	00          	.byte	0x00
           hdma->XferCpltCallback = NULL;
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	62d8      	str	r0, [r3, #44]	; 0x2c
           break;
 8002ad8:	e7f1      	b.n	8002abe <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferHalfCpltCallback = NULL;
 8002ada:	2000      	movs	r0, #0
 8002adc:	6318      	str	r0, [r3, #48]	; 0x30
           break;
 8002ade:	e7ee      	b.n	8002abe <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferErrorCallback = NULL;
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	6358      	str	r0, [r3, #52]	; 0x34
           break;
 8002ae4:	e7eb      	b.n	8002abe <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferAbortCallback = NULL;
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	6398      	str	r0, [r3, #56]	; 0x38
           break;
 8002aea:	e7e8      	b.n	8002abe <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferCpltCallback = NULL;
 8002aec:	2000      	movs	r0, #0
 8002aee:	62d8      	str	r0, [r3, #44]	; 0x2c
           hdma->XferHalfCpltCallback = NULL;
 8002af0:	6318      	str	r0, [r3, #48]	; 0x30
           hdma->XferErrorCallback = NULL;
 8002af2:	6358      	str	r0, [r3, #52]	; 0x34
           hdma->XferAbortCallback = NULL;
 8002af4:	6398      	str	r0, [r3, #56]	; 0x38
           break;
 8002af6:	e7e2      	b.n	8002abe <HAL_DMA_UnRegisterCallback+0x1c>
           status = HAL_ERROR;
 8002af8:	2001      	movs	r0, #1
 8002afa:	e7e0      	b.n	8002abe <HAL_DMA_UnRegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 8002afc:	2002      	movs	r0, #2
}
 8002afe:	4770      	bx	lr

08002b00 <HAL_DMA_GetState>:
  return hdma->State;
 8002b00:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8002b04:	4770      	bx	lr

08002b06 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002b06:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_EXTI_SetConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d05b      	beq.n	8002bc8 <HAL_EXTI_SetConfigLine+0xbc>
 8002b10:	2900      	cmp	r1, #0
 8002b12:	d05b      	beq.n	8002bcc <HAL_EXTI_SetConfigLine+0xc0>
{
 8002b14:	b4f0      	push	{r4, r5, r6, r7}
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8002b16:	680a      	ldr	r2, [r1, #0]
 8002b18:	6002      	str	r2, [r0, #0]

  /* Compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002b1a:	6808      	ldr	r0, [r1, #0]
 8002b1c:	f3c0 4300 	ubfx	r3, r0, #16, #1
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8002b20:	f000 041f 	and.w	r4, r0, #31
  maskline = (1uL << linepos);
 8002b24:	2201      	movs	r2, #1
 8002b26:	40a2      	lsls	r2, r4

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8002b28:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002b2c:	d01e      	beq.n	8002b6c <HAL_EXTI_SetConfigLine+0x60>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002b2e:	015d      	lsls	r5, r3, #5
 8002b30:	4f27      	ldr	r7, [pc, #156]	; (8002bd0 <HAL_EXTI_SetConfigLine+0xc4>)
    regval = *regaddr;
 8002b32:	f855 c007 	ldr.w	ip, [r5, r7]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8002b36:	688e      	ldr	r6, [r1, #8]
 8002b38:	f016 0f01 	tst.w	r6, #1
    {
      regval |= maskline;
 8002b3c:	bf14      	ite	ne
 8002b3e:	ea4c 0602 	orrne.w	r6, ip, r2
    }
    else
    {
      regval &= ~maskline;
 8002b42:	ea2c 0602 	biceq.w	r6, ip, r2
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 8002b46:	51ee      	str	r6, [r5, r7]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002b48:	4f22      	ldr	r7, [pc, #136]	; (8002bd4 <HAL_EXTI_SetConfigLine+0xc8>)
    regval = *regaddr;
 8002b4a:	f855 c007 	ldr.w	ip, [r5, r7]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8002b4e:	688e      	ldr	r6, [r1, #8]
 8002b50:	f016 0f02 	tst.w	r6, #2
    {
      regval |= maskline;
 8002b54:	bf14      	ite	ne
 8002b56:	ea4c 0602 	orrne.w	r6, ip, r2
    }
    else
    {
      regval &= ~maskline;
 8002b5a:	ea2c 0602 	biceq.w	r6, ip, r2
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 8002b5e:	51ee      	str	r6, [r5, r7]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8002b60:	680d      	ldr	r5, [r1, #0]
 8002b62:	f005 65c0 	and.w	r5, r5, #100663296	; 0x6000000
 8002b66:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8002b6a:	d019      	beq.n	8002ba0 <HAL_EXTI_SetConfigLine+0x94>
      SYSCFG->EXTICR[linepos >> 2u] = regval;
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002b6c:	015b      	lsls	r3, r3, #5
 8002b6e:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8002b72:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
  regval = *regaddr;
 8002b76:	6804      	ldr	r4, [r0, #0]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8002b78:	684d      	ldr	r5, [r1, #4]
 8002b7a:	f015 0f01 	tst.w	r5, #1
  {
    regval |= maskline;
 8002b7e:	bf14      	ite	ne
 8002b80:	4314      	orrne	r4, r2
  }
  else
  {
    regval &= ~maskline;
 8002b82:	4394      	biceq	r4, r2
  }

  /* Store interrupt mode */
  *regaddr = regval;
 8002b84:	6004      	str	r4, [r0, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8002b86:	4c14      	ldr	r4, [pc, #80]	; (8002bd8 <HAL_EXTI_SetConfigLine+0xcc>)
  regval = *regaddr;
 8002b88:	5918      	ldr	r0, [r3, r4]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8002b8a:	6849      	ldr	r1, [r1, #4]
 8002b8c:	f011 0f02 	tst.w	r1, #2
  {
    regval |= maskline;
 8002b90:	bf14      	ite	ne
 8002b92:	4302      	orrne	r2, r0
  }
  else
  {
    regval &= ~maskline;
 8002b94:	ea20 0202 	biceq.w	r2, r0, r2
  }

  /* Store event mode */
  *regaddr = regval;
 8002b98:	511a      	str	r2, [r3, r4]

  return HAL_OK;
 8002b9a:	2000      	movs	r0, #0
}
 8002b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	f004 041c 	and.w	r4, r4, #28
 8002ba4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002ba8:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8002bac:	68a6      	ldr	r6, [r4, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002bae:	f000 0003 	and.w	r0, r0, #3
 8002bb2:	0080      	lsls	r0, r0, #2
 8002bb4:	2507      	movs	r5, #7
 8002bb6:	4085      	lsls	r5, r0
 8002bb8:	ea26 0605 	bic.w	r6, r6, r5
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002bbc:	68cd      	ldr	r5, [r1, #12]
 8002bbe:	fa05 f000 	lsl.w	r0, r5, r0
 8002bc2:	4330      	orrs	r0, r6
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8002bc4:	60a0      	str	r0, [r4, #8]
 8002bc6:	e7d1      	b.n	8002b6c <HAL_EXTI_SetConfigLine+0x60>
    return HAL_ERROR;
 8002bc8:	2001      	movs	r0, #1
 8002bca:	4770      	bx	lr
 8002bcc:	2001      	movs	r0, #1
}
 8002bce:	4770      	bx	lr
 8002bd0:	40010408 	.word	0x40010408
 8002bd4:	4001040c 	.word	0x4001040c
 8002bd8:	40010404 	.word	0x40010404

08002bdc <HAL_EXTI_GetConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d04b      	beq.n	8002c78 <HAL_EXTI_GetConfigLine+0x9c>
 8002be0:	2900      	cmp	r1, #0
 8002be2:	d04b      	beq.n	8002c7c <HAL_EXTI_GetConfigLine+0xa0>
{
 8002be4:	b430      	push	{r4, r5}

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8002be6:	6803      	ldr	r3, [r0, #0]
 8002be8:	600b      	str	r3, [r1, #0]

  /* Compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8002bea:	f003 051f 	and.w	r5, r3, #31
  maskline = (1uL << linepos);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	40aa      	lsls	r2, r5
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002bf2:	f3c3 4000 	ubfx	r0, r3, #16, #1

  /* 1] Get core mode : interrupt */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002bf6:	0140      	lsls	r0, r0, #5
 8002bf8:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
 8002bfc:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
  regval = *regaddr;
 8002c00:	6824      	ldr	r4, [r4, #0]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00u)
 8002c02:	4222      	tst	r2, r4
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8002c04:	bf14      	ite	ne
 8002c06:	2401      	movne	r4, #1
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8002c08:	2400      	moveq	r4, #0
 8002c0a:	604c      	str	r4, [r1, #4]
  }

  /* Get event mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8002c0c:	4c1c      	ldr	r4, [pc, #112]	; (8002c80 <HAL_EXTI_GetConfigLine+0xa4>)
  regval = *regaddr;
 8002c0e:	5904      	ldr	r4, [r0, r4]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00u)
 8002c10:	4222      	tst	r2, r4
 8002c12:	d003      	beq.n	8002c1c <HAL_EXTI_GetConfigLine+0x40>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8002c14:	684c      	ldr	r4, [r1, #4]
 8002c16:	f044 0402 	orr.w	r4, r4, #2
 8002c1a:	604c      	str	r4, [r1, #4]
  }

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8002c1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c20:	d025      	beq.n	8002c6e <HAL_EXTI_GetConfigLine+0x92>
  {
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c22:	4c18      	ldr	r4, [pc, #96]	; (8002c84 <HAL_EXTI_GetConfigLine+0xa8>)
    regval = *regaddr;
 8002c24:	5904      	ldr	r4, [r0, r4]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00u)
 8002c26:	4222      	tst	r2, r4
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8002c28:	bf14      	ite	ne
 8002c2a:	2401      	movne	r4, #1
    }
    else
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8002c2c:	2400      	moveq	r4, #0
 8002c2e:	608c      	str	r4, [r1, #8]
    }

    /* Get falling configuration */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c30:	4c15      	ldr	r4, [pc, #84]	; (8002c88 <HAL_EXTI_GetConfigLine+0xac>)
    regval = *regaddr;
 8002c32:	5900      	ldr	r0, [r0, r4]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00u)
 8002c34:	4202      	tst	r2, r0
 8002c36:	d003      	beq.n	8002c40 <HAL_EXTI_GetConfigLine+0x64>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8002c38:	688a      	ldr	r2, [r1, #8]
 8002c3a:	f042 0202 	orr.w	r2, r2, #2
 8002c3e:	608a      	str	r2, [r1, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8002c40:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002c44:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002c48:	d002      	beq.n	8002c50 <HAL_EXTI_GetConfigLine+0x74>
      regval = SYSCFG->EXTICR[linepos >> 2u];
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
    }
    else
    {
      pExtiConfig->GPIOSel = 0x00u;
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	60c8      	str	r0, [r1, #12]
 8002c4e:	e011      	b.n	8002c74 <HAL_EXTI_GetConfigLine+0x98>
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8002c50:	08ab      	lsrs	r3, r5, #2
 8002c52:	3302      	adds	r3, #2
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_EXTI_GetConfigLine+0xb0>)
 8002c56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8002c5a:	43eb      	mvns	r3, r5
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	0e1b      	lsrs	r3, r3, #24
 8002c68:	60cb      	str	r3, [r1, #12]
  {
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
    pExtiConfig->GPIOSel = 0x00u;
  }

  return HAL_OK;
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	e002      	b.n	8002c74 <HAL_EXTI_GetConfigLine+0x98>
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8002c6e:	2000      	movs	r0, #0
 8002c70:	6088      	str	r0, [r1, #8]
    pExtiConfig->GPIOSel = 0x00u;
 8002c72:	60c8      	str	r0, [r1, #12]
}
 8002c74:	bc30      	pop	{r4, r5}
 8002c76:	4770      	bx	lr
    return HAL_ERROR;
 8002c78:	2001      	movs	r0, #1
 8002c7a:	4770      	bx	lr
 8002c7c:	2001      	movs	r0, #1
}
 8002c7e:	4770      	bx	lr
 8002c80:	40010404 	.word	0x40010404
 8002c84:	40010408 	.word	0x40010408
 8002c88:	4001040c 	.word	0x4001040c
 8002c8c:	40010000 	.word	0x40010000

08002c90 <HAL_EXTI_ClearConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if (hexti == NULL)
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d03b      	beq.n	8002d0c <HAL_EXTI_ClearConfigLine+0x7c>
{
 8002c94:	b470      	push	{r4, r5, r6}
 8002c96:	4605      	mov	r5, r0

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002c98:	6804      	ldr	r4, [r0, #0]
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8002c9a:	f004 061f 	and.w	r6, r4, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002c9e:	f3c4 4000 	ubfx	r0, r4, #16, #1
  maskline = (1uL << linepos);

  /* 1] Clear interrupt mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002ca2:	0140      	lsls	r0, r0, #5
 8002ca4:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002ca8:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
  regval = (*regaddr & ~maskline);
 8002cac:	6811      	ldr	r1, [r2, #0]
  maskline = (1uL << linepos);
 8002cae:	2301      	movs	r3, #1
 8002cb0:	40b3      	lsls	r3, r6
  regval = (*regaddr & ~maskline);
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	4019      	ands	r1, r3
  *regaddr = regval;
 8002cb6:	6011      	str	r1, [r2, #0]

  /* 2] Clear event mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8002cb8:	4917      	ldr	r1, [pc, #92]	; (8002d18 <HAL_EXTI_ClearConfigLine+0x88>)
  regval = (*regaddr & ~maskline);
 8002cba:	5842      	ldr	r2, [r0, r1]
 8002cbc:	401a      	ands	r2, r3
  *regaddr = regval;
 8002cbe:	5042      	str	r2, [r0, r1]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8002cc0:	682a      	ldr	r2, [r5, #0]
 8002cc2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002cc6:	d023      	beq.n	8002d10 <HAL_EXTI_ClearConfigLine+0x80>
  {
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002cc8:	3104      	adds	r1, #4
    regval = (*regaddr & ~maskline);
 8002cca:	5842      	ldr	r2, [r0, r1]
 8002ccc:	401a      	ands	r2, r3
    *regaddr = regval;
 8002cce:	5042      	str	r2, [r0, r1]

    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002cd0:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <HAL_EXTI_ClearConfigLine+0x8c>)
    regval = (*regaddr & ~maskline);
 8002cd2:	5881      	ldr	r1, [r0, r2]
 8002cd4:	400b      	ands	r3, r1
    *regaddr = regval;
 8002cd6:	5083      	str	r3, [r0, r2]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8002cd8:	682b      	ldr	r3, [r5, #0]
 8002cda:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002cde:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ce2:	d001      	beq.n	8002ce8 <HAL_EXTI_ClearConfigLine+0x58>
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
      SYSCFG->EXTICR[linepos >> 2u] = regval;
    }
  }

  return HAL_OK;
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e014      	b.n	8002d12 <HAL_EXTI_ClearConfigLine+0x82>
 8002ce8:	f006 061c 	and.w	r6, r6, #28
 8002cec:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002cf0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8002cf4:	68b2      	ldr	r2, [r6, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002cf6:	f004 0303 	and.w	r3, r4, #3
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	2107      	movs	r1, #7
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	ea22 0303 	bic.w	r3, r2, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8002d06:	60b3      	str	r3, [r6, #8]
  return HAL_OK;
 8002d08:	2000      	movs	r0, #0
 8002d0a:	e002      	b.n	8002d12 <HAL_EXTI_ClearConfigLine+0x82>
    return HAL_ERROR;
 8002d0c:	2001      	movs	r0, #1
}
 8002d0e:	4770      	bx	lr
  return HAL_OK;
 8002d10:	2000      	movs	r0, #0
}
 8002d12:	bc70      	pop	{r4, r5, r6}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40010404 	.word	0x40010404
 8002d1c:	4001040c 	.word	0x4001040c

08002d20 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002d20:	b911      	cbnz	r1, 8002d28 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002d22:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2000      	movs	r0, #0
      break;
 8002d26:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8002d28:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8002d2a:	4770      	bx	lr

08002d2c <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002d2c:	b110      	cbz	r0, 8002d34 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002d2e:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8002d30:	2000      	movs	r0, #0
 8002d32:	4770      	bx	lr
    return HAL_ERROR;
 8002d34:	2001      	movs	r0, #1
  }
}
 8002d36:	4770      	bx	lr

08002d38 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002d38:	b510      	push	{r4, lr}
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d3a:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002d3c:	f003 011f 	and.w	r1, r3, #31
 8002d40:	2201      	movs	r2, #1
 8002d42:	408a      	lsls	r2, r1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d44:	f3c3 4300 	ubfx	r3, r3, #16, #1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002d48:	015b      	lsls	r3, r3, #5
 8002d4a:	4904      	ldr	r1, [pc, #16]	; (8002d5c <HAL_EXTI_IRQHandler+0x24>)
  regval = (*regaddr & maskline);
 8002d4c:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8002d4e:	4214      	tst	r4, r2
 8002d50:	d003      	beq.n	8002d5a <HAL_EXTI_IRQHandler+0x22>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002d52:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002d54:	6843      	ldr	r3, [r0, #4]
 8002d56:	b103      	cbz	r3, 8002d5a <HAL_EXTI_IRQHandler+0x22>
    {
      hexti->PendingCallback();
 8002d58:	4798      	blx	r3
    }
  }
}
 8002d5a:	bd10      	pop	{r4, pc}
 8002d5c:	40010414 	.word	0x40010414

08002d60 <HAL_EXTI_GetPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d60:	6803      	ldr	r3, [r0, #0]
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8002d62:	f003 001f 	and.w	r0, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d66:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << linepos);

  /* Get pending bit */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002d6a:	015b      	lsls	r3, r3, #5
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_EXTI_GetPending+0x1c>)

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
 8002d6e:	589a      	ldr	r2, [r3, r2]
  maskline = (1uL << linepos);
 8002d70:	2301      	movs	r3, #1
 8002d72:	4083      	lsls	r3, r0
  regval = ((*regaddr & maskline) >> linepos);
 8002d74:	4013      	ands	r3, r2
  return regval;
}
 8002d76:	fa23 f000 	lsr.w	r0, r3, r0
 8002d7a:	4770      	bx	lr
 8002d7c:	40010414 	.word	0x40010414

08002d80 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d80:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002d82:	f003 011f 	and.w	r1, r3, #31
 8002d86:	2201      	movs	r2, #1
 8002d88:	408a      	lsls	r2, r1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d8a:	f3c3 4300 	ubfx	r3, r3, #16, #1

  /* Get pending register address */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002d8e:	015b      	lsls	r3, r3, #5
 8002d90:	4901      	ldr	r1, [pc, #4]	; (8002d98 <HAL_EXTI_ClearPending+0x18>)

  /* Clear Pending bit */
  *regaddr =  maskline;
 8002d92:	505a      	str	r2, [r3, r1]
}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40010414 	.word	0x40010414

08002d9c <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d9c:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002d9e:	f003 011f 	and.w	r1, r3, #31
 8002da2:	2201      	movs	r2, #1
 8002da4:	408a      	lsls	r2, r1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002da6:	f3c3 4300 	ubfx	r3, r3, #16, #1

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8002daa:	015b      	lsls	r3, r3, #5
 8002dac:	4901      	ldr	r1, [pc, #4]	; (8002db4 <HAL_EXTI_GenerateSWI+0x18>)
  *regaddr = maskline;
 8002dae:	505a      	str	r2, [r3, r1]
}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40010410 	.word	0x40010410

08002db8 <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002db8:	b430      	push	{r4, r5}
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002dba:	460b      	mov	r3, r1

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002dbc:	4c09      	ldr	r4, [pc, #36]	; (8002de4 <FLASH_Program_Fast+0x2c>)
 8002dbe:	6962      	ldr	r2, [r4, #20]
 8002dc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002dc4:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002dca:	b672      	cpsid	i
 8002dcc:	f501 7480 	add.w	r4, r1, #256	; 0x100
 8002dd0:	1a41      	subs	r1, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 8002dd6:	3304      	adds	r3, #4
    row_index--;
  } while (row_index != 0U);
 8002dd8:	42a3      	cmp	r3, r4
 8002dda:	d1fa      	bne.n	8002dd2 <FLASH_Program_Fast+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ddc:	f385 8810 	msr	PRIMASK, r5

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002de0:	bc30      	pop	{r4, r5}
 8002de2:	4770      	bx	lr
 8002de4:	40022000 	.word	0x40022000

08002de8 <HAL_FLASH_Program_IT>:
{
 8002de8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8002dea:	4c23      	ldr	r4, [pc, #140]	; (8002e78 <HAL_FLASH_Program_IT+0x90>)
 8002dec:	7824      	ldrb	r4, [r4, #0]
 8002dee:	2c01      	cmp	r4, #1
 8002df0:	d040      	beq.n	8002e74 <HAL_FLASH_Program_IT+0x8c>
 8002df2:	4c21      	ldr	r4, [pc, #132]	; (8002e78 <HAL_FLASH_Program_IT+0x90>)
 8002df4:	2501      	movs	r5, #1
 8002df6:	7025      	strb	r5, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002df8:	2500      	movs	r5, #0
 8002dfa:	6065      	str	r5, [r4, #4]
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002dfc:	4c1f      	ldr	r4, [pc, #124]	; (8002e7c <HAL_FLASH_Program_IT+0x94>)
 8002dfe:	6824      	ldr	r4, [r4, #0]
 8002e00:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8002e04:	d019      	beq.n	8002e3a <HAL_FLASH_Program_IT+0x52>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002e06:	4d1d      	ldr	r5, [pc, #116]	; (8002e7c <HAL_FLASH_Program_IT+0x94>)
 8002e08:	682c      	ldr	r4, [r5, #0]
 8002e0a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8002e0e:	602c      	str	r4, [r5, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002e10:	4c19      	ldr	r4, [pc, #100]	; (8002e78 <HAL_FLASH_Program_IT+0x90>)
 8002e12:	2502      	movs	r5, #2
 8002e14:	7725      	strb	r5, [r4, #28]
  if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002e16:	2802      	cmp	r0, #2
 8002e18:	d013      	beq.n	8002e42 <HAL_FLASH_Program_IT+0x5a>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8002e1a:	4c17      	ldr	r4, [pc, #92]	; (8002e78 <HAL_FLASH_Program_IT+0x90>)
 8002e1c:	2503      	movs	r5, #3
 8002e1e:	7225      	strb	r5, [r4, #8]
  pFlash.Address = Address;
 8002e20:	60e1      	str	r1, [r4, #12]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8002e22:	4d16      	ldr	r5, [pc, #88]	; (8002e7c <HAL_FLASH_Program_IT+0x94>)
 8002e24:	696c      	ldr	r4, [r5, #20]
 8002e26:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 8002e2a:	616c      	str	r4, [r5, #20]
  if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002e2c:	b1c0      	cbz	r0, 8002e60 <HAL_FLASH_Program_IT+0x78>
  else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002e2e:	3801      	subs	r0, #1
 8002e30:	2801      	cmp	r0, #1
  return status;
 8002e32:	bf88      	it	hi
 8002e34:	2000      	movhi	r0, #0
  else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002e36:	d90d      	bls.n	8002e54 <HAL_FLASH_Program_IT+0x6c>
}
 8002e38:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002e3a:	4c0f      	ldr	r4, [pc, #60]	; (8002e78 <HAL_FLASH_Program_IT+0x90>)
 8002e3c:	2500      	movs	r5, #0
 8002e3e:	7725      	strb	r5, [r4, #28]
 8002e40:	e7e9      	b.n	8002e16 <HAL_FLASH_Program_IT+0x2e>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_LAST;
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_FLASH_Program_IT+0x90>)
 8002e44:	2004      	movs	r0, #4
 8002e46:	7218      	strb	r0, [r3, #8]
  pFlash.Address = Address;
 8002e48:	60d9      	str	r1, [r3, #12]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8002e4a:	480c      	ldr	r0, [pc, #48]	; (8002e7c <HAL_FLASH_Program_IT+0x94>)
 8002e4c:	6943      	ldr	r3, [r0, #20]
 8002e4e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002e52:	6143      	str	r3, [r0, #20]
 8002e54:	4608      	mov	r0, r1
    FLASH_Program_Fast(Address, (uint32_t)Data);
 8002e56:	4611      	mov	r1, r2
 8002e58:	f7ff ffae 	bl	8002db8 <FLASH_Program_Fast>
  return status;
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	e7eb      	b.n	8002e38 <HAL_FLASH_Program_IT+0x50>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e60:	6968      	ldr	r0, [r5, #20]
 8002e62:	f040 0001 	orr.w	r0, r0, #1
 8002e66:	6168      	str	r0, [r5, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002e68:	600a      	str	r2, [r1, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002e6a:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002e6e:	604b      	str	r3, [r1, #4]
  return status;
 8002e70:	2000      	movs	r0, #0
 8002e72:	e7e1      	b.n	8002e38 <HAL_FLASH_Program_IT+0x50>
  __HAL_LOCK(&pFlash);
 8002e74:	2002      	movs	r0, #2
 8002e76:	e7df      	b.n	8002e38 <HAL_FLASH_Program_IT+0x50>
 8002e78:	20000014 	.word	0x20000014
 8002e7c:	40022000 	.word	0x40022000

08002e80 <HAL_FLASH_EndOfOperationCallback>:
}
 8002e80:	4770      	bx	lr

08002e82 <HAL_FLASH_OperationErrorCallback>:
}
 8002e82:	4770      	bx	lr

08002e84 <HAL_FLASH_IRQHandler>:
{
 8002e84:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8002e86:	4a50      	ldr	r2, [pc, #320]	; (8002fc8 <HAL_FLASH_IRQHandler+0x144>)
 8002e88:	6953      	ldr	r3, [r2, #20]
 8002e8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e8e:	f023 0307 	bic.w	r3, r3, #7
 8002e92:	6153      	str	r3, [r2, #20]
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8002e94:	6953      	ldr	r3, [r2, #20]
 8002e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e9a:	6153      	str	r3, [r2, #20]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8002e9c:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002e9e:	7a1b      	ldrb	r3, [r3, #8]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d050      	beq.n	8002f48 <HAL_FLASH_IRQHandler+0xc4>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002ea6:	4948      	ldr	r1, [pc, #288]	; (8002fc8 <HAL_FLASH_IRQHandler+0x144>)
 8002ea8:	690a      	ldr	r2, [r1, #16]
 8002eaa:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002eae:	f022 0205 	bic.w	r2, r2, #5
 8002eb2:	0412      	lsls	r2, r2, #16
 8002eb4:	0c12      	lsrs	r2, r2, #16
  error |= (FLASH->ECCR & FLASH_FLAG_ECCC);
 8002eb6:	698b      	ldr	r3, [r1, #24]
 8002eb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  if (error !=0U)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	d024      	beq.n	8002f0a <HAL_FLASH_IRQHandler+0x86>
    pFlash.ErrorCode |= error;
 8002ec0:	4942      	ldr	r1, [pc, #264]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002ec2:	684a      	ldr	r2, [r1, #4]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8002ec8:	f013 4240 	ands.w	r2, r3, #3221225472	; 0xc0000000
 8002ecc:	d003      	beq.n	8002ed6 <HAL_FLASH_IRQHandler+0x52>
 8002ece:	493e      	ldr	r1, [pc, #248]	; (8002fc8 <HAL_FLASH_IRQHandler+0x144>)
 8002ed0:	6988      	ldr	r0, [r1, #24]
 8002ed2:	4302      	orrs	r2, r0
 8002ed4:	618a      	str	r2, [r1, #24]
 8002ed6:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 8002eda:	bf1c      	itt	ne
 8002edc:	4a3a      	ldrne	r2, [pc, #232]	; (8002fc8 <HAL_FLASH_IRQHandler+0x144>)
 8002ede:	6113      	strne	r3, [r2, #16]
    FLASH_FlushCaches() ;
 8002ee0:	f000 fc4e 	bl	8003780 <FLASH_FlushCaches>
    procedure = pFlash.ProcedureOnGoing;
 8002ee4:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002ee6:	7a1b      	ldrb	r3, [r3, #8]
 8002ee8:	b2db      	uxtb	r3, r3
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d031      	beq.n	8002f52 <HAL_FLASH_IRQHandler+0xce>
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d034      	beq.n	8002f5c <HAL_FLASH_IRQHandler+0xd8>
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8002ef2:	3b03      	subs	r3, #3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8002ef8:	bf9a      	itte	ls
 8002efa:	4b34      	ldrls	r3, [pc, #208]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002efc:	68d8      	ldrls	r0, [r3, #12]
       HAL_FLASH_OperationErrorCallback(0U);
 8002efe:	2000      	movhi	r0, #0
 8002f00:	f7ff ffbf 	bl	8002e82 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	721a      	strb	r2, [r3, #8]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_FLASH_IRQHandler+0x144>)
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f013 0f01 	tst.w	r3, #1
 8002f12:	d042      	beq.n	8002f9a <HAL_FLASH_IRQHandler+0x116>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <HAL_FLASH_IRQHandler+0x144>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	611a      	str	r2, [r3, #16]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f1c:	7a1b      	ldrb	r3, [r3, #8]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d12c      	bne.n	8002f7e <HAL_FLASH_IRQHandler+0xfa>
      pFlash.NbPagesToErase--;
 8002f24:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	3a01      	subs	r2, #1
 8002f2a:	619a      	str	r2, [r3, #24]
      if(pFlash.NbPagesToErase != 0U)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	b1d3      	cbz	r3, 8002f66 <HAL_FLASH_IRQHandler+0xe2>
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8002f30:	4c26      	ldr	r4, [pc, #152]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f32:	6960      	ldr	r0, [r4, #20]
 8002f34:	f7ff ffa4 	bl	8002e80 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Page++;
 8002f38:	6963      	ldr	r3, [r4, #20]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	6163      	str	r3, [r4, #20]
        tmp_page = pFlash.Page;
 8002f3e:	6960      	ldr	r0, [r4, #20]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8002f40:	6921      	ldr	r1, [r4, #16]
 8002f42:	f000 fba3 	bl	800368c <FLASH_PageErase>
 8002f46:	e028      	b.n	8002f9a <HAL_FLASH_IRQHandler+0x116>
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002f48:	6953      	ldr	r3, [r2, #20]
 8002f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4e:	6153      	str	r3, [r2, #20]
 8002f50:	e7a9      	b.n	8002ea6 <HAL_FLASH_IRQHandler+0x22>
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f54:	6958      	ldr	r0, [r3, #20]
 8002f56:	f7ff ff94 	bl	8002e82 <HAL_FLASH_OperationErrorCallback>
 8002f5a:	e7d3      	b.n	8002f04 <HAL_FLASH_IRQHandler+0x80>
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f5e:	6918      	ldr	r0, [r3, #16]
 8002f60:	f7ff ff8f 	bl	8002e82 <HAL_FLASH_OperationErrorCallback>
 8002f64:	e7ce      	b.n	8002f04 <HAL_FLASH_IRQHandler+0x80>
        pFlash.Page = 0xFFFFFFFFU;
 8002f66:	4c19      	ldr	r4, [pc, #100]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f6c:	6163      	str	r3, [r4, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	7223      	strb	r3, [r4, #8]
        FLASH_FlushCaches() ;
 8002f72:	f000 fc05 	bl	8003780 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8002f76:	6960      	ldr	r0, [r4, #20]
 8002f78:	f7ff ff82 	bl	8002e80 <HAL_FLASH_EndOfOperationCallback>
 8002f7c:	e00d      	b.n	8002f9a <HAL_FLASH_IRQHandler+0x116>
      FLASH_FlushCaches() ;
 8002f7e:	f000 fbff 	bl	8003780 <FLASH_FlushCaches>
      procedure = pFlash.ProcedureOnGoing;
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f84:	7a1b      	ldrb	r3, [r3, #8]
 8002f86:	b2db      	uxtb	r3, r3
      if(procedure == FLASH_PROC_MASS_ERASE)
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d012      	beq.n	8002fb2 <HAL_FLASH_IRQHandler+0x12e>
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d913      	bls.n	8002fbc <HAL_FLASH_IRQHandler+0x138>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f94:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	721a      	strb	r2, [r3, #8]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002f9c:	7a1b      	ldrb	r3, [r3, #8]
 8002f9e:	b93b      	cbnz	r3, 8002fb0 <HAL_FLASH_IRQHandler+0x12c>
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8002fa0:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_FLASH_IRQHandler+0x144>)
 8002fa2:	6953      	ldr	r3, [r2, #20]
 8002fa4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002fa8:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(&pFlash);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
}
 8002fb0:	bd10      	pop	{r4, pc}
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002fb4:	6918      	ldr	r0, [r3, #16]
 8002fb6:	f7ff ff63 	bl	8002e80 <HAL_FLASH_EndOfOperationCallback>
 8002fba:	e7eb      	b.n	8002f94 <HAL_FLASH_IRQHandler+0x110>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_FLASH_IRQHandler+0x148>)
 8002fbe:	68d8      	ldr	r0, [r3, #12]
 8002fc0:	f7ff ff5e 	bl	8002e80 <HAL_FLASH_EndOfOperationCallback>
 8002fc4:	e7e6      	b.n	8002f94 <HAL_FLASH_IRQHandler+0x110>
 8002fc6:	bf00      	nop
 8002fc8:	40022000 	.word	0x40022000
 8002fcc:	20000014 	.word	0x20000014

08002fd0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_FLASH_Unlock+0x20>)
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db01      	blt.n	8002fdc <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8002fd8:	2000      	movs	r0, #0
}
 8002fda:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_FLASH_Unlock+0x20>)
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <HAL_FLASH_Unlock+0x24>)
 8002fe0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002fe2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002fe6:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002fe8:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	0fc0      	lsrs	r0, r0, #31
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	45670123 	.word	0x45670123

08002ff8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ff8:	4a03      	ldr	r2, [pc, #12]	; (8003008 <HAL_FLASH_Lock+0x10>)
 8002ffa:	6953      	ldr	r3, [r2, #20]
 8002ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003000:	6153      	str	r3, [r2, #20]
}
 8003002:	2000      	movs	r0, #0
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40022000 	.word	0x40022000

0800300c <HAL_FLASH_OB_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_FLASH_OB_Unlock+0x20>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003014:	d007      	beq.n	8003026 <HAL_FLASH_OB_Unlock+0x1a>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_FLASH_OB_Unlock+0x20>)
 8003018:	4a05      	ldr	r2, [pc, #20]	; (8003030 <HAL_FLASH_OB_Unlock+0x24>)
 800301a:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800301c:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 8003020:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8003022:	2000      	movs	r0, #0
 8003024:	4770      	bx	lr
    return HAL_ERROR;
 8003026:	2001      	movs	r0, #1
}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40022000 	.word	0x40022000
 8003030:	08192a3b 	.word	0x08192a3b

08003034 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8003034:	4a03      	ldr	r2, [pc, #12]	; (8003044 <HAL_FLASH_OB_Lock+0x10>)
 8003036:	6953      	ldr	r3, [r2, #20]
 8003038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800303c:	6153      	str	r3, [r2, #20]
}
 800303e:	2000      	movs	r0, #0
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40022000 	.word	0x40022000

08003048 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8003048:	4b01      	ldr	r3, [pc, #4]	; (8003050 <HAL_FLASH_GetError+0x8>)
 800304a:	6858      	ldr	r0, [r3, #4]
}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000014 	.word	0x20000014

08003054 <FLASH_WaitForLastOperation>:
{
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff f81c 	bl	8002094 <HAL_GetTick>
 800305c:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800305e:	4c1e      	ldr	r4, [pc, #120]	; (80030d8 <FLASH_WaitForLastOperation+0x84>)
 8003060:	6923      	ldr	r3, [r4, #16]
 8003062:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003066:	d009      	beq.n	800307c <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 8003068:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800306c:	d0f8      	beq.n	8003060 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 800306e:	f7ff f811 	bl	8002094 <HAL_GetTick>
 8003072:	1b80      	subs	r0, r0, r6
 8003074:	42a8      	cmp	r0, r5
 8003076:	d3f3      	bcc.n	8003060 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8003078:	2003      	movs	r0, #3
 800307a:	e027      	b.n	80030cc <FLASH_WaitForLastOperation+0x78>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <FLASH_WaitForLastOperation+0x84>)
 800307e:	690a      	ldr	r2, [r1, #16]
 8003080:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003084:	f022 0205 	bic.w	r2, r2, #5
 8003088:	0412      	lsls	r2, r2, #16
 800308a:	0c12      	lsrs	r2, r2, #16
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 800308c:	698b      	ldr	r3, [r1, #24]
 800308e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  if(error != 0u)
 8003092:	4313      	orrs	r3, r2
 8003094:	d011      	beq.n	80030ba <FLASH_WaitForLastOperation+0x66>
    pFlash.ErrorCode |= error;
 8003096:	4911      	ldr	r1, [pc, #68]	; (80030dc <FLASH_WaitForLastOperation+0x88>)
 8003098:	684a      	ldr	r2, [r1, #4]
 800309a:	431a      	orrs	r2, r3
 800309c:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 800309e:	f013 4240 	ands.w	r2, r3, #3221225472	; 0xc0000000
 80030a2:	d003      	beq.n	80030ac <FLASH_WaitForLastOperation+0x58>
 80030a4:	490c      	ldr	r1, [pc, #48]	; (80030d8 <FLASH_WaitForLastOperation+0x84>)
 80030a6:	6988      	ldr	r0, [r1, #24]
 80030a8:	4302      	orrs	r2, r0
 80030aa:	618a      	str	r2, [r1, #24]
 80030ac:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 80030b0:	d00d      	beq.n	80030ce <FLASH_WaitForLastOperation+0x7a>
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <FLASH_WaitForLastOperation+0x84>)
 80030b4:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 80030b6:	2001      	movs	r0, #1
 80030b8:	e008      	b.n	80030cc <FLASH_WaitForLastOperation+0x78>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80030ba:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <FLASH_WaitForLastOperation+0x84>)
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f013 0f01 	tst.w	r3, #1
 80030c2:	d006      	beq.n	80030d2 <FLASH_WaitForLastOperation+0x7e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <FLASH_WaitForLastOperation+0x84>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80030ca:	2000      	movs	r0, #0
}
 80030cc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80030ce:	2001      	movs	r0, #1
 80030d0:	e7fc      	b.n	80030cc <FLASH_WaitForLastOperation+0x78>
  return HAL_OK;
 80030d2:	2000      	movs	r0, #0
 80030d4:	e7fa      	b.n	80030cc <FLASH_WaitForLastOperation+0x78>
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000
 80030dc:	20000014 	.word	0x20000014

080030e0 <HAL_FLASH_Program>:
{
 80030e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80030e4:	4c2b      	ldr	r4, [pc, #172]	; (8003194 <HAL_FLASH_Program+0xb4>)
 80030e6:	7824      	ldrb	r4, [r4, #0]
 80030e8:	2c01      	cmp	r4, #1
 80030ea:	d050      	beq.n	800318e <HAL_FLASH_Program+0xae>
 80030ec:	4698      	mov	r8, r3
 80030ee:	4617      	mov	r7, r2
 80030f0:	460d      	mov	r5, r1
 80030f2:	4604      	mov	r4, r0
 80030f4:	4b27      	ldr	r3, [pc, #156]	; (8003194 <HAL_FLASH_Program+0xb4>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030fe:	f7ff ffa9 	bl	8003054 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003102:	4606      	mov	r6, r0
 8003104:	b9d0      	cbnz	r0, 800313c <HAL_FLASH_Program+0x5c>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003106:	4b23      	ldr	r3, [pc, #140]	; (8003194 <HAL_FLASH_Program+0xb4>)
 8003108:	2200      	movs	r2, #0
 800310a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_FLASH_Program+0xb8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003114:	d018      	beq.n	8003148 <HAL_FLASH_Program+0x68>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003116:	4a20      	ldr	r2, [pc, #128]	; (8003198 <HAL_FLASH_Program+0xb8>)
 8003118:	6813      	ldr	r3, [r2, #0]
 800311a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800311e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003120:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_FLASH_Program+0xb4>)
 8003122:	2202      	movs	r2, #2
 8003124:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003126:	b19c      	cbz	r4, 8003150 <HAL_FLASH_Program+0x70>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003128:	1e63      	subs	r3, r4, #1
 800312a:	2b01      	cmp	r3, #1
 800312c:	d926      	bls.n	800317c <HAL_FLASH_Program+0x9c>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800312e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003132:	f7ff ff8f 	bl	8003054 <FLASH_WaitForLastOperation>
 8003136:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 8003138:	f000 fb22 	bl	8003780 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800313c:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_FLASH_Program+0xb4>)
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
}
 8003142:	4630      	mov	r0, r6
 8003144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_FLASH_Program+0xb4>)
 800314a:	2200      	movs	r2, #0
 800314c:	771a      	strb	r2, [r3, #28]
 800314e:	e7ea      	b.n	8003126 <HAL_FLASH_Program+0x46>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003150:	4a11      	ldr	r2, [pc, #68]	; (8003198 <HAL_FLASH_Program+0xb8>)
 8003152:	6953      	ldr	r3, [r2, #20]
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6153      	str	r3, [r2, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800315a:	602f      	str	r7, [r5, #0]
 800315c:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003160:	f8c5 8004 	str.w	r8, [r5, #4]
      prog_bit = FLASH_CR_PG;
 8003164:	2401      	movs	r4, #1
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003166:	f24c 3050 	movw	r0, #50000	; 0xc350
 800316a:	f7ff ff73 	bl	8003054 <FLASH_WaitForLastOperation>
 800316e:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003170:	4a09      	ldr	r2, [pc, #36]	; (8003198 <HAL_FLASH_Program+0xb8>)
 8003172:	6953      	ldr	r3, [r2, #20]
 8003174:	ea23 0304 	bic.w	r3, r3, r4
 8003178:	6153      	str	r3, [r2, #20]
 800317a:	e7dd      	b.n	8003138 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800317c:	4639      	mov	r1, r7
 800317e:	4628      	mov	r0, r5
 8003180:	f7ff fe1a 	bl	8002db8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003184:	2c02      	cmp	r4, #2
 8003186:	d1d2      	bne.n	800312e <HAL_FLASH_Program+0x4e>
        prog_bit = FLASH_CR_FSTPG;
 8003188:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800318c:	e7eb      	b.n	8003166 <HAL_FLASH_Program+0x86>
  __HAL_LOCK(&pFlash);
 800318e:	2602      	movs	r6, #2
 8003190:	e7d7      	b.n	8003142 <HAL_FLASH_Program+0x62>
 8003192:	bf00      	nop
 8003194:	20000014 	.word	0x20000014
 8003198:	40022000 	.word	0x40022000

0800319c <HAL_FLASH_OB_Launch>:
{
 800319c:	b508      	push	{r3, lr}
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_FLASH_OB_Launch+0x18>)
 80031a0:	6953      	ldr	r3, [r2, #20]
 80031a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031a6:	6153      	str	r3, [r2, #20]
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80031a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031ac:	f7ff ff52 	bl	8003054 <FLASH_WaitForLastOperation>
}
 80031b0:	bd08      	pop	{r3, pc}
 80031b2:	bf00      	nop
 80031b4:	40022000 	.word	0x40022000

080031b8 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80031b8:	f010 0f01 	tst.w	r0, #1
 80031bc:	d004      	beq.n	80031c8 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <FLASH_MassErase+0x2c>)
 80031c0:	6953      	ldr	r3, [r2, #20]
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	6153      	str	r3, [r2, #20]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80031c8:	f010 0f02 	tst.w	r0, #2
 80031cc:	d004      	beq.n	80031d8 <FLASH_MassErase+0x20>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <FLASH_MassErase+0x2c>)
 80031d0:	6953      	ldr	r3, [r2, #20]
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80031d8:	4a02      	ldr	r2, [pc, #8]	; (80031e4 <FLASH_MassErase+0x2c>)
 80031da:	6953      	ldr	r3, [r2, #20]
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	6153      	str	r3, [r2, #20]
}
 80031e2:	4770      	bx	lr
 80031e4:	40022000 	.word	0x40022000

080031e8 <HAL_FLASHEx_OBProgram>:
{
 80031e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80031ec:	4bb4      	ldr	r3, [pc, #720]	; (80034c0 <HAL_FLASHEx_OBProgram+0x2d8>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f000 8193 	beq.w	800351c <HAL_FLASHEx_OBProgram+0x334>
 80031f6:	4604      	mov	r4, r0
 80031f8:	4bb1      	ldr	r3, [pc, #708]	; (80034c0 <HAL_FLASHEx_OBProgram+0x2d8>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031fe:	2200      	movs	r2, #0
 8003200:	605a      	str	r2, [r3, #4]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8003202:	6803      	ldr	r3, [r0, #0]
 8003204:	f013 0f01 	tst.w	r3, #1
 8003208:	d117      	bne.n	800323a <HAL_FLASHEx_OBProgram+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2600      	movs	r6, #0
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	f013 0f02 	tst.w	r3, #2
 8003212:	d15c      	bne.n	80032ce <HAL_FLASHEx_OBProgram+0xe6>
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	f013 0f04 	tst.w	r3, #4
 800321a:	d176      	bne.n	800330a <HAL_FLASHEx_OBProgram+0x122>
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	f013 0f08 	tst.w	r3, #8
 8003222:	d004      	beq.n	800322e <HAL_FLASHEx_OBProgram+0x46>
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8003224:	6a25      	ldr	r5, [r4, #32]
 8003226:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003228:	42bd      	cmp	r5, r7
 800322a:	f040 80f7 	bne.w	800341c <HAL_FLASHEx_OBProgram+0x234>
  __HAL_UNLOCK(&pFlash);
 800322e:	4ba4      	ldr	r3, [pc, #656]	; (80034c0 <HAL_FLASHEx_OBProgram+0x2d8>)
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
}
 8003234:	4630      	mov	r0, r6
 8003236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800323a:	6845      	ldr	r5, [r0, #4]
 800323c:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8003240:	68c7      	ldr	r7, [r0, #12]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003242:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003246:	f7ff ff05 	bl	8003054 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800324a:	4606      	mov	r6, r0
 800324c:	b9b8      	cbnz	r0, 800327e <HAL_FLASHEx_OBProgram+0x96>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800324e:	b9d5      	cbnz	r5, 8003286 <HAL_FLASHEx_OBProgram+0x9e>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8003250:	4a9c      	ldr	r2, [pc, #624]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2dc>)
 8003252:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003254:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003258:	ea43 0308 	orr.w	r3, r3, r8
 800325c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003260:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003262:	4d98      	ldr	r5, [pc, #608]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2dc>)
 8003264:	696b      	ldr	r3, [r5, #20]
 8003266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326a:	616b      	str	r3, [r5, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800326c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003270:	f7ff fef0 	bl	8003054 <FLASH_WaitForLastOperation>
 8003274:	4606      	mov	r6, r0

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003276:	696b      	ldr	r3, [r5, #20]
 8003278:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800327c:	616b      	str	r3, [r5, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	3600      	adds	r6, #0
 8003280:	bf18      	it	ne
 8003282:	2601      	movne	r6, #1
 8003284:	e7c2      	b.n	800320c <HAL_FLASHEx_OBProgram+0x24>
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8003286:	2d01      	cmp	r5, #1
 8003288:	d00d      	beq.n	80032a6 <HAL_FLASHEx_OBProgram+0xbe>
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800328a:	2d02      	cmp	r5, #2
 800328c:	d015      	beq.n	80032ba <HAL_FLASHEx_OBProgram+0xd2>
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800328e:	2d04      	cmp	r5, #4
 8003290:	d1e7      	bne.n	8003262 <HAL_FLASHEx_OBProgram+0x7a>
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 8003292:	4a8c      	ldr	r2, [pc, #560]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2dc>)
 8003294:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003296:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800329a:	ea43 0308 	orr.w	r3, r3, r8
 800329e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80032a2:	6513      	str	r3, [r2, #80]	; 0x50
 80032a4:	e7dd      	b.n	8003262 <HAL_FLASHEx_OBProgram+0x7a>
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 80032a6:	4a87      	ldr	r2, [pc, #540]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2dc>)
 80032a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032aa:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80032ae:	ea43 0308 	orr.w	r3, r3, r8
 80032b2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80032b6:	6313      	str	r3, [r2, #48]	; 0x30
 80032b8:	e7d3      	b.n	8003262 <HAL_FLASHEx_OBProgram+0x7a>
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 80032ba:	4a82      	ldr	r2, [pc, #520]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2dc>)
 80032bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80032be:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80032c2:	ea43 0308 	orr.w	r3, r3, r8
 80032c6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80032ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032cc:	e7c9      	b.n	8003262 <HAL_FLASHEx_OBProgram+0x7a>
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80032ce:	6927      	ldr	r7, [r4, #16]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032d4:	f7ff febe 	bl	8003054 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 80032d8:	b108      	cbz	r0, 80032de <HAL_FLASHEx_OBProgram+0xf6>
      status = HAL_ERROR;
 80032da:	2601      	movs	r6, #1
 80032dc:	e79a      	b.n	8003214 <HAL_FLASHEx_OBProgram+0x2c>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80032de:	4d79      	ldr	r5, [pc, #484]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2dc>)
 80032e0:	6a2b      	ldr	r3, [r5, #32]
 80032e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032e6:	433b      	orrs	r3, r7
 80032e8:	622b      	str	r3, [r5, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80032ea:	696b      	ldr	r3, [r5, #20]
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f0:	616b      	str	r3, [r5, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032f6:	f7ff fead 	bl	8003054 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80032fa:	696b      	ldr	r3, [r5, #20]
 80032fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003300:	616b      	str	r3, [r5, #20]
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8003302:	2800      	cmp	r0, #0
      status = HAL_ERROR;
 8003304:	bf18      	it	ne
 8003306:	2601      	movne	r6, #1
 8003308:	e784      	b.n	8003214 <HAL_FLASHEx_OBProgram+0x2c>
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800330a:	6965      	ldr	r5, [r4, #20]
 800330c:	69a7      	ldr	r7, [r4, #24]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800330e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003312:	f7ff fe9f 	bl	8003054 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8003316:	2800      	cmp	r0, #0
 8003318:	d17e      	bne.n	8003418 <HAL_FLASHEx_OBProgram+0x230>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800331a:	f015 0f01 	tst.w	r5, #1
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800331e:	bf19      	ittee	ne
 8003320:	f407 62e0 	andne.w	r2, r7, #1792	; 0x700
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8003324:	f44f 63e0 	movne.w	r3, #1792	; 0x700
  uint32_t optr_reg_mask = 0;
 8003328:	2300      	moveq	r3, #0
  uint32_t optr_reg_val = 0;
 800332a:	461a      	moveq	r2, r3
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800332c:	f015 0f02 	tst.w	r5, #2
 8003330:	d004      	beq.n	800333c <HAL_FLASHEx_OBProgram+0x154>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8003332:	f407 5180 	and.w	r1, r7, #4096	; 0x1000
 8003336:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8003338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800333c:	f015 0f04 	tst.w	r5, #4
 8003340:	d004      	beq.n	800334c <HAL_FLASHEx_OBProgram+0x164>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8003342:	f407 5100 	and.w	r1, r7, #8192	; 0x2000
 8003346:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8003348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800334c:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8003350:	d004      	beq.n	800335c <HAL_FLASHEx_OBProgram+0x174>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8003352:	f407 4180 	and.w	r1, r7, #16384	; 0x4000
 8003356:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8003358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800335c:	f015 0f08 	tst.w	r5, #8
 8003360:	d004      	beq.n	800336c <HAL_FLASHEx_OBProgram+0x184>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8003362:	f407 3180 	and.w	r1, r7, #65536	; 0x10000
 8003366:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800336c:	f015 0f10 	tst.w	r5, #16
 8003370:	d004      	beq.n	800337c <HAL_FLASHEx_OBProgram+0x194>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8003372:	f407 3100 	and.w	r1, r7, #131072	; 0x20000
 8003376:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8003378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800337c:	f015 0f20 	tst.w	r5, #32
 8003380:	d004      	beq.n	800338c <HAL_FLASHEx_OBProgram+0x1a4>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8003382:	f407 2180 	and.w	r1, r7, #262144	; 0x40000
 8003386:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8003388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800338c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003390:	d004      	beq.n	800339c <HAL_FLASHEx_OBProgram+0x1b4>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8003392:	f407 2100 	and.w	r1, r7, #524288	; 0x80000
 8003396:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8003398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    }

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800339c:	f015 0f80 	tst.w	r5, #128	; 0x80
 80033a0:	d004      	beq.n	80033ac <HAL_FLASHEx_OBProgram+0x1c4>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 80033a2:	f407 1180 	and.w	r1, r7, #1048576	; 0x100000
 80033a6:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_BFB2;
 80033a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 80033ac:	f415 7f80 	tst.w	r5, #256	; 0x100
 80033b0:	d004      	beq.n	80033bc <HAL_FLASHEx_OBProgram+0x1d4>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 80033b2:	f407 1100 	and.w	r1, r7, #2097152	; 0x200000
 80033b6:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 80033b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 80033bc:	f415 7f00 	tst.w	r5, #512	; 0x200
 80033c0:	d004      	beq.n	80033cc <HAL_FLASHEx_OBProgram+0x1e4>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 80033c2:	f407 0100 	and.w	r1, r7, #8388608	; 0x800000
 80033c6:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 80033c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 80033cc:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80033d0:	d004      	beq.n	80033dc <HAL_FLASHEx_OBProgram+0x1f4>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 80033d2:	f007 7180 	and.w	r1, r7, #16777216	; 0x1000000
 80033d6:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 80033d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 80033dc:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80033e0:	d004      	beq.n	80033ec <HAL_FLASHEx_OBProgram+0x204>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 80033e2:	f007 7700 	and.w	r7, r7, #33554432	; 0x2000000
 80033e6:	433a      	orrs	r2, r7
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 80033e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 80033ec:	4d35      	ldr	r5, [pc, #212]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2dc>)
 80033ee:	6a29      	ldr	r1, [r5, #32]
 80033f0:	ea21 0303 	bic.w	r3, r1, r3
 80033f4:	431a      	orrs	r2, r3
 80033f6:	622a      	str	r2, [r5, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80033f8:	696b      	ldr	r3, [r5, #20]
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	616b      	str	r3, [r5, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003404:	f7ff fe26 	bl	8003054 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003408:	696b      	ldr	r3, [r5, #20]
 800340a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800340e:	616b      	str	r3, [r5, #20]
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8003410:	2800      	cmp	r0, #0
      status = HAL_ERROR;
 8003412:	bf18      	it	ne
 8003414:	2601      	movne	r6, #1
 8003416:	e701      	b.n	800321c <HAL_FLASHEx_OBProgram+0x34>
 8003418:	2601      	movs	r6, #1
 800341a:	e6ff      	b.n	800321c <HAL_FLASHEx_OBProgram+0x34>
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800341c:	f8d4 801c 	ldr.w	r8, [r4, #28]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003420:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003424:	f7ff fe16 	bl	8003054 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8003428:	2800      	cmp	r0, #0
 800342a:	d175      	bne.n	8003518 <HAL_FLASHEx_OBProgram+0x330>
  {
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800342c:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <HAL_FLASHEx_OBProgram+0x2e0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003434:	d12c      	bne.n	8003490 <HAL_FLASHEx_OBProgram+0x2a8>
    {
      bank1_addr = FLASH_BASE;
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003436:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_FLASHEx_OBProgram+0x2e4>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	b291      	uxth	r1, r2
 800343c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003440:	4299      	cmp	r1, r3
 8003442:	d034      	beq.n	80034ae <HAL_FLASHEx_OBProgram+0x2c6>
 8003444:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_FLASHEx_OBProgram+0x2e8>)
 8003446:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 800344a:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
      bank1_addr = FLASH_BASE;
 800344e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8003452:	f008 0103 	and.w	r1, r8, #3
 8003456:	2901      	cmp	r1, #1
 8003458:	d03e      	beq.n	80034d8 <HAL_FLASHEx_OBProgram+0x2f0>
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800345a:	2902      	cmp	r1, #2
 800345c:	d04c      	beq.n	80034f8 <HAL_FLASHEx_OBProgram+0x310>
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800345e:	4c19      	ldr	r4, [pc, #100]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2dc>)
 8003460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003466:	f008 4800 	and.w	r8, r8, #2147483648	; 0x80000000
 800346a:	ea43 0308 	orr.w	r3, r3, r8
 800346e:	62a3      	str	r3, [r4, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003470:	6963      	ldr	r3, [r4, #20]
 8003472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003476:	6163      	str	r3, [r4, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003478:	f24c 3050 	movw	r0, #50000	; 0xc350
 800347c:	f7ff fdea 	bl	8003054 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003480:	6963      	ldr	r3, [r4, #20]
 8003482:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003486:	6163      	str	r3, [r4, #20]
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8003488:	2800      	cmp	r0, #0
        status = HAL_ERROR;
 800348a:	bf18      	it	ne
 800348c:	2601      	movne	r6, #1
 800348e:	e6ce      	b.n	800322e <HAL_FLASHEx_OBProgram+0x46>
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003490:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_FLASHEx_OBProgram+0x2e4>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	b291      	uxth	r1, r2
 8003496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800349a:	4299      	cmp	r1, r3
 800349c:	d00b      	beq.n	80034b6 <HAL_FLASHEx_OBProgram+0x2ce>
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_FLASHEx_OBProgram+0x2e8>)
 80034a0:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 80034a4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
      bank2_addr = FLASH_BASE;
 80034a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034ac:	e7d1      	b.n	8003452 <HAL_FLASHEx_OBProgram+0x26a>
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80034ae:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <HAL_FLASHEx_OBProgram+0x2ec>)
      bank1_addr = FLASH_BASE;
 80034b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b4:	e7cd      	b.n	8003452 <HAL_FLASHEx_OBProgram+0x26a>
      bank2_addr = FLASH_BASE;
 80034b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_FLASHEx_OBProgram+0x2ec>)
 80034bc:	e7c9      	b.n	8003452 <HAL_FLASHEx_OBProgram+0x26a>
 80034be:	bf00      	nop
 80034c0:	20000014 	.word	0x20000014
 80034c4:	40022000 	.word	0x40022000
 80034c8:	40010000 	.word	0x40010000
 80034cc:	1fff75e0 	.word	0x1fff75e0
 80034d0:	01fffe00 	.word	0x01fffe00
 80034d4:	08080000 	.word	0x08080000
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80034d8:	4911      	ldr	r1, [pc, #68]	; (8003520 <HAL_FLASHEx_OBProgram+0x338>)
 80034da:	6a4a      	ldr	r2, [r1, #36]	; 0x24
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 80034dc:	1aed      	subs	r5, r5, r3
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80034de:	0c12      	lsrs	r2, r2, #16
 80034e0:	0412      	lsls	r2, r2, #16
 80034e2:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 80034e6:	624a      	str	r2, [r1, #36]	; 0x24
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80034e8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 80034ea:	1afb      	subs	r3, r7, r3
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80034ec:	0c12      	lsrs	r2, r2, #16
 80034ee:	0412      	lsls	r2, r2, #16
 80034f0:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 80034f4:	628b      	str	r3, [r1, #40]	; 0x28
 80034f6:	e7b2      	b.n	800345e <HAL_FLASHEx_OBProgram+0x276>
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80034f8:	4809      	ldr	r0, [pc, #36]	; (8003520 <HAL_FLASHEx_OBProgram+0x338>)
 80034fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 80034fc:	1aad      	subs	r5, r5, r2
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 8003506:	6445      	str	r5, [r0, #68]	; 0x44
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8003508:	6c81      	ldr	r1, [r0, #72]	; 0x48
        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800350a:	1abb      	subs	r3, r7, r2
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800350c:	0c0a      	lsrs	r2, r1, #16
 800350e:	0412      	lsls	r2, r2, #16
 8003510:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8003514:	6483      	str	r3, [r0, #72]	; 0x48
 8003516:	e7a2      	b.n	800345e <HAL_FLASHEx_OBProgram+0x276>
        status = HAL_ERROR;
 8003518:	2601      	movs	r6, #1
 800351a:	e688      	b.n	800322e <HAL_FLASHEx_OBProgram+0x46>
  __HAL_LOCK(&pFlash);
 800351c:	2602      	movs	r6, #2
 800351e:	e689      	b.n	8003234 <HAL_FLASHEx_OBProgram+0x4c>
 8003520:	40022000 	.word	0x40022000

08003524 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8003524:	2306      	movs	r3, #6
 8003526:	6003      	str	r3, [r0, #0]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8003528:	6843      	ldr	r3, [r0, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d917      	bls.n	800355e <HAL_FLASHEx_OBGetConfig+0x3a>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800352e:	2b04      	cmp	r3, #4
 8003530:	f000 8095 	beq.w	800365e <HAL_FLASHEx_OBGetConfig+0x13a>
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8003534:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	b2db      	uxtb	r3, r3

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800353a:	2baa      	cmp	r3, #170	; 0xaa
 800353c:	d001      	beq.n	8003542 <HAL_FLASHEx_OBGetConfig+0x1e>
 800353e:	2bcc      	cmp	r3, #204	; 0xcc
 8003540:	d132      	bne.n	80035a8 <HAL_FLASHEx_OBGetConfig+0x84>
  {
    return (OB_RDP_LEVEL_1);
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8003542:	4b4c      	ldr	r3, [pc, #304]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	b2db      	uxtb	r3, r3
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8003548:	6103      	str	r3, [r0, #16]
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800354a:	4b4a      	ldr	r3, [pc, #296]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800354e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8003552:	6183      	str	r3, [r0, #24]
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 8003554:	69c3      	ldr	r3, [r0, #28]
 8003556:	1e5a      	subs	r2, r3, #1
 8003558:	2a01      	cmp	r2, #1
 800355a:	d927      	bls.n	80035ac <HAL_FLASHEx_OBGetConfig+0x88>
 800355c:	4770      	bx	lr
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800355e:	2207      	movs	r2, #7
 8003560:	6002      	str	r2, [r0, #0]
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8003562:	b943      	cbnz	r3, 8003576 <HAL_FLASHEx_OBGetConfig+0x52>
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8003564:	4a43      	ldr	r2, [pc, #268]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003566:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003568:	b2db      	uxtb	r3, r3
 800356a:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800356c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800356e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003572:	60c3      	str	r3, [r0, #12]
 8003574:	e7de      	b.n	8003534 <HAL_FLASHEx_OBGetConfig+0x10>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8003576:	2b01      	cmp	r3, #1
 8003578:	d00a      	beq.n	8003590 <HAL_FLASHEx_OBGetConfig+0x6c>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800357a:	2b02      	cmp	r3, #2
 800357c:	d111      	bne.n	80035a2 <HAL_FLASHEx_OBGetConfig+0x7e>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800357e:	4a3d      	ldr	r2, [pc, #244]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003580:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003582:	b2db      	uxtb	r3, r3
 8003584:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 8003586:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003588:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800358c:	60c3      	str	r3, [r0, #12]
 800358e:	e7d1      	b.n	8003534 <HAL_FLASHEx_OBGetConfig+0x10>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8003590:	4a38      	ldr	r2, [pc, #224]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003592:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003594:	b2db      	uxtb	r3, r3
 8003596:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 8003598:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800359a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800359e:	60c3      	str	r3, [r0, #12]
 80035a0:	e7c8      	b.n	8003534 <HAL_FLASHEx_OBGetConfig+0x10>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d1c6      	bne.n	8003534 <HAL_FLASHEx_OBGetConfig+0x10>
 80035a6:	e05c      	b.n	8003662 <HAL_FLASHEx_OBGetConfig+0x13e>
    return (OB_RDP_LEVEL_1);
 80035a8:	23bb      	movs	r3, #187	; 0xbb
 80035aa:	e7cd      	b.n	8003548 <HAL_FLASHEx_OBGetConfig+0x24>
{
 80035ac:	b430      	push	{r4, r5}
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80035ae:	6802      	ldr	r2, [r0, #0]
 80035b0:	f042 0208 	orr.w	r2, r2, #8
 80035b4:	6002      	str	r2, [r0, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80035b6:	4a30      	ldr	r2, [pc, #192]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x154>)
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	f412 7f80 	tst.w	r2, #256	; 0x100
 80035be:	d11b      	bne.n	80035f8 <HAL_FLASHEx_OBGetConfig+0xd4>
  {
    bank1_addr = FLASH_BASE;
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80035c0:	4a2e      	ldr	r2, [pc, #184]	; (800367c <HAL_FLASHEx_OBGetConfig+0x158>)
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	b294      	uxth	r4, r2
 80035c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035ca:	428c      	cmp	r4, r1
 80035cc:	d023      	beq.n	8003616 <HAL_FLASHEx_OBGetConfig+0xf2>
 80035ce:	492c      	ldr	r1, [pc, #176]	; (8003680 <HAL_FLASHEx_OBGetConfig+0x15c>)
 80035d0:	ea01 2142 	and.w	r1, r1, r2, lsl #9
 80035d4:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
    bank1_addr = FLASH_BASE;
 80035d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80035dc:	f003 0403 	and.w	r4, r3, #3
 80035e0:	2c01      	cmp	r4, #1
 80035e2:	d020      	beq.n	8003626 <HAL_FLASHEx_OBGetConfig+0x102>
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80035e4:	2c02      	cmp	r4, #2
 80035e6:	d02c      	beq.n	8003642 <HAL_FLASHEx_OBGetConfig+0x11e>
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 80035e8:	4a22      	ldr	r2, [pc, #136]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 80035ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61c3      	str	r3, [r0, #28]
}
 80035f4:	bc30      	pop	{r4, r5}
 80035f6:	4770      	bx	lr
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80035f8:	4a20      	ldr	r2, [pc, #128]	; (800367c <HAL_FLASHEx_OBGetConfig+0x158>)
 80035fa:	6811      	ldr	r1, [r2, #0]
 80035fc:	b28c      	uxth	r4, r1
 80035fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003602:	4294      	cmp	r4, r2
 8003604:	d00b      	beq.n	800361e <HAL_FLASHEx_OBGetConfig+0xfa>
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <HAL_FLASHEx_OBGetConfig+0x15c>)
 8003608:	ea02 2241 	and.w	r2, r2, r1, lsl #9
 800360c:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
    bank2_addr = FLASH_BASE;
 8003610:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003614:	e7e2      	b.n	80035dc <HAL_FLASHEx_OBGetConfig+0xb8>
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003616:	491b      	ldr	r1, [pc, #108]	; (8003684 <HAL_FLASHEx_OBGetConfig+0x160>)
    bank1_addr = FLASH_BASE;
 8003618:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800361c:	e7de      	b.n	80035dc <HAL_FLASHEx_OBGetConfig+0xb8>
    bank2_addr = FLASH_BASE;
 800361e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003622:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_FLASHEx_OBGetConfig+0x160>)
 8003624:	e7da      	b.n	80035dc <HAL_FLASHEx_OBGetConfig+0xb8>
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8003626:	4d13      	ldr	r5, [pc, #76]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003628:	6a6c      	ldr	r4, [r5, #36]	; 0x24
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800362a:	4917      	ldr	r1, [pc, #92]	; (8003688 <HAL_FLASHEx_OBGetConfig+0x164>)
 800362c:	ea01 04c4 	and.w	r4, r1, r4, lsl #3
 8003630:	4414      	add	r4, r2
 8003632:	6204      	str	r4, [r0, #32]
      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8003634:	6aac      	ldr	r4, [r5, #40]	; 0x28
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 8003636:	ea01 01c4 	and.w	r1, r1, r4, lsl #3
 800363a:	3107      	adds	r1, #7
 800363c:	440a      	add	r2, r1
 800363e:	6242      	str	r2, [r0, #36]	; 0x24
 8003640:	e7d2      	b.n	80035e8 <HAL_FLASHEx_OBGetConfig+0xc4>
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8003642:	4d0c      	ldr	r5, [pc, #48]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003644:	6c6c      	ldr	r4, [r5, #68]	; 0x44
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <HAL_FLASHEx_OBGetConfig+0x164>)
 8003648:	ea02 04c4 	and.w	r4, r2, r4, lsl #3
 800364c:	440c      	add	r4, r1
 800364e:	6204      	str	r4, [r0, #32]
      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8003650:	6cac      	ldr	r4, [r5, #72]	; 0x48
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 8003652:	ea02 02c4 	and.w	r2, r2, r4, lsl #3
 8003656:	3207      	adds	r2, #7
 8003658:	4411      	add	r1, r2
 800365a:	6241      	str	r1, [r0, #36]	; 0x24
 800365c:	e7c4      	b.n	80035e8 <HAL_FLASHEx_OBGetConfig+0xc4>
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800365e:	2307      	movs	r3, #7
 8003660:	6003      	str	r3, [r0, #0]
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8003662:	4a04      	ldr	r2, [pc, #16]	; (8003674 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003664:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003666:	b2db      	uxtb	r3, r3
 8003668:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800366a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800366c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003670:	60c3      	str	r3, [r0, #12]
 8003672:	e75f      	b.n	8003534 <HAL_FLASHEx_OBGetConfig+0x10>
 8003674:	40022000 	.word	0x40022000
 8003678:	40010000 	.word	0x40010000
 800367c:	1fff75e0 	.word	0x1fff75e0
 8003680:	01fffe00 	.word	0x01fffe00
 8003684:	08080000 	.word	0x08080000
 8003688:	0007fff8 	.word	0x0007fff8

0800368c <FLASH_PageErase>:
    if((Banks & FLASH_BANK_1) != 0U)
 800368c:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003690:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <FLASH_PageErase+0x38>)
 8003692:	6953      	ldr	r3, [r2, #20]
 8003694:	bf14      	ite	ne
 8003696:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800369a:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800369e:	6153      	str	r3, [r2, #20]
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <FLASH_PageErase+0x38>)
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	00c0      	lsls	r0, r0, #3
 80036a6:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80036aa:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80036ae:	4310      	orrs	r0, r2
 80036b0:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	f042 0202 	orr.w	r2, r2, #2
 80036b8:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036c0:	615a      	str	r2, [r3, #20]
}
 80036c2:	4770      	bx	lr
 80036c4:	40022000 	.word	0x40022000

080036c8 <HAL_FLASHEx_Erase_IT>:
{
 80036c8:	b508      	push	{r3, lr}
  __HAL_LOCK(&pFlash);
 80036ca:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_FLASHEx_Erase_IT+0xb0>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d050      	beq.n	8003774 <HAL_FLASHEx_Erase_IT+0xac>
 80036d2:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_FLASHEx_Erase_IT+0xb0>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036d8:	2200      	movs	r2, #0
 80036da:	605a      	str	r2, [r3, #4]
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80036dc:	4b27      	ldr	r3, [pc, #156]	; (800377c <HAL_FLASHEx_Erase_IT+0xb4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80036e4:	d02c      	beq.n	8003740 <HAL_FLASHEx_Erase_IT+0x78>
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80036e6:	4b25      	ldr	r3, [pc, #148]	; (800377c <HAL_FLASHEx_Erase_IT+0xb4>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036ee:	601a      	str	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80036f6:	d01f      	beq.n	8003738 <HAL_FLASHEx_Erase_IT+0x70>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80036f8:	4a20      	ldr	r2, [pc, #128]	; (800377c <HAL_FLASHEx_Erase_IT+0xb4>)
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003700:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <HAL_FLASHEx_Erase_IT+0xb0>)
 8003704:	2203      	movs	r2, #3
 8003706:	771a      	strb	r2, [r3, #28]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003708:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_FLASHEx_Erase_IT+0xb4>)
 800370a:	6953      	ldr	r3, [r2, #20]
 800370c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003710:	6153      	str	r3, [r2, #20]
  pFlash.Bank = pEraseInit->Banks;
 8003712:	6842      	ldr	r2, [r0, #4]
 8003714:	4b18      	ldr	r3, [pc, #96]	; (8003778 <HAL_FLASHEx_Erase_IT+0xb0>)
 8003716:	611a      	str	r2, [r3, #16]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003718:	6803      	ldr	r3, [r0, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d022      	beq.n	8003764 <HAL_FLASHEx_Erase_IT+0x9c>
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
 800371e:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_FLASHEx_Erase_IT+0xb0>)
 8003720:	2201      	movs	r2, #1
 8003722:	721a      	strb	r2, [r3, #8]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 8003724:	68c2      	ldr	r2, [r0, #12]
 8003726:	619a      	str	r2, [r3, #24]
    pFlash.Page = pEraseInit->Page;
 8003728:	6882      	ldr	r2, [r0, #8]
 800372a:	615a      	str	r2, [r3, #20]
    FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
 800372c:	6841      	ldr	r1, [r0, #4]
 800372e:	6880      	ldr	r0, [r0, #8]
 8003730:	f7ff ffac 	bl	800368c <FLASH_PageErase>
  return status;
 8003734:	2000      	movs	r0, #0
}
 8003736:	bd08      	pop	{r3, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_FLASHEx_Erase_IT+0xb0>)
 800373a:	2201      	movs	r2, #1
 800373c:	771a      	strb	r2, [r3, #28]
 800373e:	e7e3      	b.n	8003708 <HAL_FLASHEx_Erase_IT+0x40>
  else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_FLASHEx_Erase_IT+0xb4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003748:	d008      	beq.n	800375c <HAL_FLASHEx_Erase_IT+0x94>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800374a:	4a0c      	ldr	r2, [pc, #48]	; (800377c <HAL_FLASHEx_Erase_IT+0xb4>)
 800374c:	6813      	ldr	r3, [r2, #0]
 800374e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003752:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_FLASHEx_Erase_IT+0xb0>)
 8003756:	2202      	movs	r2, #2
 8003758:	771a      	strb	r2, [r3, #28]
 800375a:	e7d5      	b.n	8003708 <HAL_FLASHEx_Erase_IT+0x40>
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_FLASHEx_Erase_IT+0xb0>)
 800375e:	2200      	movs	r2, #0
 8003760:	771a      	strb	r2, [r3, #28]
 8003762:	e7d1      	b.n	8003708 <HAL_FLASHEx_Erase_IT+0x40>
    pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <HAL_FLASHEx_Erase_IT+0xb0>)
 8003766:	2202      	movs	r2, #2
 8003768:	721a      	strb	r2, [r3, #8]
    FLASH_MassErase(pEraseInit->Banks);
 800376a:	6840      	ldr	r0, [r0, #4]
 800376c:	f7ff fd24 	bl	80031b8 <FLASH_MassErase>
  return status;
 8003770:	2000      	movs	r0, #0
 8003772:	e7e0      	b.n	8003736 <HAL_FLASHEx_Erase_IT+0x6e>
  __HAL_LOCK(&pFlash);
 8003774:	2002      	movs	r0, #2
 8003776:	e7de      	b.n	8003736 <HAL_FLASHEx_Erase_IT+0x6e>
 8003778:	20000014 	.word	0x20000014
 800377c:	40022000 	.word	0x40022000

08003780 <FLASH_FlushCaches>:
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <FLASH_FlushCaches+0x58>)
 8003782:	7f1b      	ldrb	r3, [r3, #28]
 8003784:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003786:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800378a:	2a01      	cmp	r2, #1
 800378c:	d007      	beq.n	800379e <FLASH_FlushCaches+0x1e>
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800378e:	3b02      	subs	r3, #2
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d911      	bls.n	80037ba <FLASH_FlushCaches+0x3a>
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <FLASH_FlushCaches+0x58>)
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
}
 800379c:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800379e:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <FLASH_FlushCaches+0x5c>)
 80037a0:	6811      	ldr	r1, [r2, #0]
 80037a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80037a6:	6011      	str	r1, [r2, #0]
 80037a8:	6811      	ldr	r1, [r2, #0]
 80037aa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80037ae:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037b0:	6811      	ldr	r1, [r2, #0]
 80037b2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80037b6:	6011      	str	r1, [r2, #0]
 80037b8:	e7e9      	b.n	800378e <FLASH_FlushCaches+0xe>
    __HAL_FLASH_DATA_CACHE_RESET();
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <FLASH_FlushCaches+0x5c>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ca:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e7df      	b.n	8003796 <FLASH_FlushCaches+0x16>
 80037d6:	bf00      	nop
 80037d8:	20000014 	.word	0x20000014
 80037dc:	40022000 	.word	0x40022000

080037e0 <HAL_FLASHEx_Erase>:
{
 80037e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80037e4:	4b3f      	ldr	r3, [pc, #252]	; (80038e4 <HAL_FLASHEx_Erase+0x104>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d077      	beq.n	80038dc <HAL_FLASHEx_Erase+0xfc>
 80037ec:	460f      	mov	r7, r1
 80037ee:	4604      	mov	r4, r0
 80037f0:	4b3c      	ldr	r3, [pc, #240]	; (80038e4 <HAL_FLASHEx_Erase+0x104>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037fa:	f7ff fc2b 	bl	8003054 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80037fe:	4681      	mov	r9, r0
 8003800:	2800      	cmp	r0, #0
 8003802:	d165      	bne.n	80038d0 <HAL_FLASHEx_Erase+0xf0>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003804:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <HAL_FLASHEx_Erase+0x104>)
 8003806:	2200      	movs	r2, #0
 8003808:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800380a:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <HAL_FLASHEx_Erase+0x108>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003812:	d038      	beq.n	8003886 <HAL_FLASHEx_Erase+0xa6>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003814:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <HAL_FLASHEx_Erase+0x108>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800381c:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003824:	d02b      	beq.n	800387e <HAL_FLASHEx_Erase+0x9e>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003826:	4a30      	ldr	r2, [pc, #192]	; (80038e8 <HAL_FLASHEx_Erase+0x108>)
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003830:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <HAL_FLASHEx_Erase+0x104>)
 8003832:	2203      	movs	r2, #3
 8003834:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d036      	beq.n	80038aa <HAL_FLASHEx_Erase+0xca>
      *PageError = 0xFFFFFFFFU;
 800383c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003840:	603b      	str	r3, [r7, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003842:	68a5      	ldr	r5, [r4, #8]
 8003844:	68e3      	ldr	r3, [r4, #12]
 8003846:	442b      	add	r3, r5
 8003848:	429d      	cmp	r5, r3
 800384a:	d23f      	bcs.n	80038cc <HAL_FLASHEx_Erase+0xec>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800384c:	f24c 3850 	movw	r8, #50000	; 0xc350
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003850:	4e25      	ldr	r6, [pc, #148]	; (80038e8 <HAL_FLASHEx_Erase+0x108>)
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003852:	6861      	ldr	r1, [r4, #4]
 8003854:	4628      	mov	r0, r5
 8003856:	f7ff ff19 	bl	800368c <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800385a:	4640      	mov	r0, r8
 800385c:	f7ff fbfa 	bl	8003054 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003860:	6973      	ldr	r3, [r6, #20]
 8003862:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003866:	f023 0302 	bic.w	r3, r3, #2
 800386a:	6173      	str	r3, [r6, #20]
        if (status != HAL_OK)
 800386c:	4681      	mov	r9, r0
 800386e:	bb60      	cbnz	r0, 80038ca <HAL_FLASHEx_Erase+0xea>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003870:	3501      	adds	r5, #1
 8003872:	68a3      	ldr	r3, [r4, #8]
 8003874:	68e2      	ldr	r2, [r4, #12]
 8003876:	4413      	add	r3, r2
 8003878:	42ab      	cmp	r3, r5
 800387a:	d8ea      	bhi.n	8003852 <HAL_FLASHEx_Erase+0x72>
 800387c:	e026      	b.n	80038cc <HAL_FLASHEx_Erase+0xec>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_FLASHEx_Erase+0x104>)
 8003880:	2201      	movs	r2, #1
 8003882:	771a      	strb	r2, [r3, #28]
 8003884:	e7d7      	b.n	8003836 <HAL_FLASHEx_Erase+0x56>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003886:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <HAL_FLASHEx_Erase+0x108>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800388e:	d008      	beq.n	80038a2 <HAL_FLASHEx_Erase+0xc2>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <HAL_FLASHEx_Erase+0x108>)
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003898:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_FLASHEx_Erase+0x104>)
 800389c:	2202      	movs	r2, #2
 800389e:	771a      	strb	r2, [r3, #28]
 80038a0:	e7c9      	b.n	8003836 <HAL_FLASHEx_Erase+0x56>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_FLASHEx_Erase+0x104>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
 80038a8:	e7c5      	b.n	8003836 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase(pEraseInit->Banks);
 80038aa:	6860      	ldr	r0, [r4, #4]
 80038ac:	f7ff fc84 	bl	80031b8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038b4:	f7ff fbce 	bl	8003054 <FLASH_WaitForLastOperation>
 80038b8:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80038ba:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <HAL_FLASHEx_Erase+0x108>)
 80038bc:	6953      	ldr	r3, [r2, #20]
 80038be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038c2:	f023 0304 	bic.w	r3, r3, #4
 80038c6:	6153      	str	r3, [r2, #20]
 80038c8:	e000      	b.n	80038cc <HAL_FLASHEx_Erase+0xec>
          *PageError = page_index;
 80038ca:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();
 80038cc:	f7ff ff58 	bl	8003780 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <HAL_FLASHEx_Erase+0x104>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
}
 80038d6:	4648      	mov	r0, r9
 80038d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 80038dc:	f04f 0902 	mov.w	r9, #2
 80038e0:	e7f9      	b.n	80038d6 <HAL_FLASHEx_Erase+0xf6>
 80038e2:	bf00      	nop
 80038e4:	20000014 	.word	0x20000014
 80038e8:	40022000 	.word	0x40022000

080038ec <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ec:	680a      	ldr	r2, [r1, #0]
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	f000 80e7 	beq.w	8003ac2 <HAL_GPIO_Init+0x1d6>
{
 80038f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f8:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80038fa:	2400      	movs	r4, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038fc:	2701      	movs	r7, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fe:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8003acc <HAL_GPIO_Init+0x1e0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003902:	4e70      	ldr	r6, [pc, #448]	; (8003ac4 <HAL_GPIO_Init+0x1d8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003904:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8003ad0 <HAL_GPIO_Init+0x1e4>
 8003908:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8003ad4 <HAL_GPIO_Init+0x1e8>
 800390c:	4686      	mov	lr, r0
 800390e:	e04e      	b.n	80039ae <HAL_GPIO_Init+0xc2>
        temp = GPIOx->AFR[position >> 3u];
 8003910:	08e2      	lsrs	r2, r4, #3
 8003912:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8003916:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003918:	f004 0307 	and.w	r3, r4, #7
 800391c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8003920:	230f      	movs	r3, #15
 8003922:	fa03 f30b 	lsl.w	r3, r3, fp
 8003926:	ea25 0503 	bic.w	r5, r5, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800392a:	690b      	ldr	r3, [r1, #16]
 800392c:	fa03 f30b 	lsl.w	r3, r3, fp
 8003930:	432b      	orrs	r3, r5
        GPIOx->AFR[position >> 3u] = temp;
 8003932:	6213      	str	r3, [r2, #32]
 8003934:	e045      	b.n	80039c2 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->ASCR;
 8003936:	f8de b02c 	ldr.w	fp, [lr, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800393a:	ea2b 0b00 	bic.w	fp, fp, r0
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800393e:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8003942:	40a0      	lsls	r0, r4
 8003944:	ea40 000b 	orr.w	r0, r0, fp
        GPIOx->ASCR = temp;
 8003948:	f8ce 002c 	str.w	r0, [lr, #44]	; 0x2c
 800394c:	e06b      	b.n	8003a26 <HAL_GPIO_Init+0x13a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800394e:	2200      	movs	r2, #0
 8003950:	4082      	lsls	r2, r0
 8003952:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003954:	609a      	str	r2, [r3, #8]
        temp = EXTI->IMR1;
 8003956:	6833      	ldr	r3, [r6, #0]
        temp &= ~(iocurrent);
 8003958:	ea6f 0008 	mvn.w	r0, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800395c:	684a      	ldr	r2, [r1, #4]
 800395e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~(iocurrent);
 8003962:	bf0c      	ite	eq
 8003964:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 8003966:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR1 = temp;
 800396a:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR1;
 800396c:	6873      	ldr	r3, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800396e:	684a      	ldr	r2, [r1, #4]
 8003970:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003974:	bf0c      	ite	eq
 8003976:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 8003978:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->EMR1 = temp;
 800397c:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800397e:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003980:	684b      	ldr	r3, [r1, #4]
 8003982:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8003986:	bf0c      	ite	eq
 8003988:	4002      	andeq	r2, r0
        {
          temp |= iocurrent;
 800398a:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR1 = temp;
 800398e:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8003990:	68f3      	ldr	r3, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003992:	684a      	ldr	r2, [r1, #4]
 8003994:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8003998:	bf0c      	ite	eq
 800399a:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 800399c:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR1 = temp;
 80039a0:	60f3      	str	r3, [r6, #12]
      }
    }

    position++;
 80039a2:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a4:	680a      	ldr	r2, [r1, #0]
 80039a6:	fa32 f304 	lsrs.w	r3, r2, r4
 80039aa:	f000 8087 	beq.w	8003abc <HAL_GPIO_Init+0x1d0>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039ae:	fa07 f004 	lsl.w	r0, r7, r4
    if (iocurrent != 0x00u)
 80039b2:	ea10 0802 	ands.w	r8, r0, r2
 80039b6:	d0f4      	beq.n	80039a2 <HAL_GPIO_Init+0xb6>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b8:	684b      	ldr	r3, [r1, #4]
 80039ba:	f023 0310 	bic.w	r3, r3, #16
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d0a6      	beq.n	8003910 <HAL_GPIO_Init+0x24>
      temp = GPIOx->MODER;
 80039c2:	f8de 2000 	ldr.w	r2, [lr]
 80039c6:	0065      	lsls	r5, r4, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039c8:	2303      	movs	r3, #3
 80039ca:	40ab      	lsls	r3, r5
 80039cc:	43db      	mvns	r3, r3
 80039ce:	ea03 0b02 	and.w	fp, r3, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039d2:	684a      	ldr	r2, [r1, #4]
 80039d4:	f002 0203 	and.w	r2, r2, #3
 80039d8:	40aa      	lsls	r2, r5
 80039da:	ea42 020b 	orr.w	r2, r2, fp
      GPIOx->MODER = temp;
 80039de:	f8ce 2000 	str.w	r2, [lr]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039e2:	684a      	ldr	r2, [r1, #4]
 80039e4:	f022 0210 	bic.w	r2, r2, #16
 80039e8:	3a01      	subs	r2, #1
 80039ea:	2a01      	cmp	r2, #1
 80039ec:	d815      	bhi.n	8003a1a <HAL_GPIO_Init+0x12e>
        temp = GPIOx->OSPEEDR;
 80039ee:	f8de 2008 	ldr.w	r2, [lr, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039f2:	ea03 0b02 	and.w	fp, r3, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039f6:	68ca      	ldr	r2, [r1, #12]
 80039f8:	40aa      	lsls	r2, r5
 80039fa:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OSPEEDR = temp;
 80039fe:	f8ce 2008 	str.w	r2, [lr, #8]
        temp = GPIOx->OTYPER;
 8003a02:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a06:	ea22 0b00 	bic.w	fp, r2, r0
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a0a:	684a      	ldr	r2, [r1, #4]
 8003a0c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003a10:	40a2      	lsls	r2, r4
 8003a12:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OTYPER = temp;
 8003a16:	f8ce 2004 	str.w	r2, [lr, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a1a:	684a      	ldr	r2, [r1, #4]
 8003a1c:	f002 0b03 	and.w	fp, r2, #3
 8003a20:	f1bb 0f03 	cmp.w	fp, #3
 8003a24:	d087      	beq.n	8003936 <HAL_GPIO_Init+0x4a>
      temp = GPIOx->PUPDR;
 8003a26:	f8de 200c 	ldr.w	r2, [lr, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a2a:	4013      	ands	r3, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a2c:	688a      	ldr	r2, [r1, #8]
 8003a2e:	fa02 f505 	lsl.w	r5, r2, r5
 8003a32:	431d      	orrs	r5, r3
      GPIOx->PUPDR = temp;
 8003a34:	f8ce 500c 	str.w	r5, [lr, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a38:	684b      	ldr	r3, [r1, #4]
 8003a3a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a3e:	d0b0      	beq.n	80039a2 <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a40:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8cc 3060 	str.w	r3, [ip, #96]	; 0x60
 8003a4c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	9b01      	ldr	r3, [sp, #4]
 8003a58:	f024 0303 	bic.w	r3, r4, #3
 8003a5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a64:	689d      	ldr	r5, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a66:	f004 0203 	and.w	r2, r4, #3
 8003a6a:	0090      	lsls	r0, r2, #2
 8003a6c:	220f      	movs	r2, #15
 8003a6e:	4082      	lsls	r2, r0
 8003a70:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a74:	f1be 4f90 	cmp.w	lr, #1207959552	; 0x48000000
 8003a78:	f43f af69 	beq.w	800394e <HAL_GPIO_Init+0x62>
 8003a7c:	45ce      	cmp	lr, r9
 8003a7e:	d013      	beq.n	8003aa8 <HAL_GPIO_Init+0x1bc>
 8003a80:	45d6      	cmp	lr, sl
 8003a82:	d013      	beq.n	8003aac <HAL_GPIO_Init+0x1c0>
 8003a84:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <HAL_GPIO_Init+0x1dc>)
 8003a86:	4596      	cmp	lr, r2
 8003a88:	d012      	beq.n	8003ab0 <HAL_GPIO_Init+0x1c4>
 8003a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a8e:	4596      	cmp	lr, r2
 8003a90:	d010      	beq.n	8003ab4 <HAL_GPIO_Init+0x1c8>
 8003a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a96:	4596      	cmp	lr, r2
 8003a98:	d00e      	beq.n	8003ab8 <HAL_GPIO_Init+0x1cc>
 8003a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a9e:	4596      	cmp	lr, r2
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2206      	moveq	r2, #6
 8003aa4:	2207      	movne	r2, #7
 8003aa6:	e753      	b.n	8003950 <HAL_GPIO_Init+0x64>
 8003aa8:	463a      	mov	r2, r7
 8003aaa:	e751      	b.n	8003950 <HAL_GPIO_Init+0x64>
 8003aac:	2202      	movs	r2, #2
 8003aae:	e74f      	b.n	8003950 <HAL_GPIO_Init+0x64>
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	e74d      	b.n	8003950 <HAL_GPIO_Init+0x64>
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	e74b      	b.n	8003950 <HAL_GPIO_Init+0x64>
 8003ab8:	2205      	movs	r2, #5
 8003aba:	e749      	b.n	8003950 <HAL_GPIO_Init+0x64>
  }
}
 8003abc:	b003      	add	sp, #12
 8003abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac2:	4770      	bx	lr
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	48000c00 	.word	0x48000c00
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	48000400 	.word	0x48000400
 8003ad4:	48000800 	.word	0x48000800

08003ad8 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	f000 8095 	beq.w	8003c08 <HAL_GPIO_DeInit+0x130>
{
 8003ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	460e      	mov	r6, r1
  uint32_t position = 0x00u;
 8003ae6:	2200      	movs	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ae8:	f04f 0901 	mov.w	r9, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003aec:	f04f 0a0f 	mov.w	sl, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003af0:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8003c10 <HAL_GPIO_DeInit+0x138>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003af4:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8003c14 <HAL_GPIO_DeInit+0x13c>
 8003af8:	e02a      	b.n	8003b50 <HAL_GPIO_DeInit+0x78>
 8003afa:	f04f 0e00 	mov.w	lr, #0
 8003afe:	fa0e f404 	lsl.w	r4, lr, r4
 8003b02:	9f01      	ldr	r7, [sp, #4]
 8003b04:	42bc      	cmp	r4, r7
 8003b06:	d062      	beq.n	8003bce <HAL_GPIO_DeInit+0xf6>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003b08:	6805      	ldr	r5, [r0, #0]
 8003b0a:	0051      	lsls	r1, r2, #1
 8003b0c:	2403      	movs	r4, #3
 8003b0e:	408c      	lsls	r4, r1
 8003b10:	4325      	orrs	r5, r4
 8003b12:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003b14:	08d5      	lsrs	r5, r2, #3
 8003b16:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003b1a:	6a2f      	ldr	r7, [r5, #32]
 8003b1c:	f002 0107 	and.w	r1, r2, #7
 8003b20:	0089      	lsls	r1, r1, #2
 8003b22:	fa0a f101 	lsl.w	r1, sl, r1
 8003b26:	ea27 0101 	bic.w	r1, r7, r1
 8003b2a:	6229      	str	r1, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2c:	6885      	ldr	r5, [r0, #8]
 8003b2e:	43e1      	mvns	r1, r4
 8003b30:	400d      	ands	r5, r1
 8003b32:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b34:	6844      	ldr	r4, [r0, #4]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	401c      	ands	r4, r3
 8003b3a:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b3c:	68c4      	ldr	r4, [r0, #12]
 8003b3e:	4021      	ands	r1, r4
 8003b40:	60c1      	str	r1, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003b42:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003b44:	400b      	ands	r3, r1
 8003b46:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003b48:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003b4a:	fa36 f302 	lsrs.w	r3, r6, r2
 8003b4e:	d058      	beq.n	8003c02 <HAL_GPIO_DeInit+0x12a>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003b50:	fa09 f302 	lsl.w	r3, r9, r2
    if (iocurrent != 0x00u)
 8003b54:	ea13 0506 	ands.w	r5, r3, r6
 8003b58:	d0f6      	beq.n	8003b48 <HAL_GPIO_DeInit+0x70>
 8003b5a:	f022 0103 	bic.w	r1, r2, #3
 8003b5e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003b62:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003b66:	688f      	ldr	r7, [r1, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003b68:	f002 0403 	and.w	r4, r2, #3
 8003b6c:	00a4      	lsls	r4, r4, #2
 8003b6e:	fa0a fc04 	lsl.w	ip, sl, r4
 8003b72:	ea0c 0707 	and.w	r7, ip, r7
 8003b76:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003b78:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003b7c:	d0bd      	beq.n	8003afa <HAL_GPIO_DeInit+0x22>
 8003b7e:	4558      	cmp	r0, fp
 8003b80:	d017      	beq.n	8003bb2 <HAL_GPIO_DeInit+0xda>
 8003b82:	4f22      	ldr	r7, [pc, #136]	; (8003c0c <HAL_GPIO_DeInit+0x134>)
 8003b84:	42b8      	cmp	r0, r7
 8003b86:	d016      	beq.n	8003bb6 <HAL_GPIO_DeInit+0xde>
 8003b88:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003b8c:	42b8      	cmp	r0, r7
 8003b8e:	d015      	beq.n	8003bbc <HAL_GPIO_DeInit+0xe4>
 8003b90:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003b94:	42b8      	cmp	r0, r7
 8003b96:	d014      	beq.n	8003bc2 <HAL_GPIO_DeInit+0xea>
 8003b98:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003b9c:	42b8      	cmp	r0, r7
 8003b9e:	d013      	beq.n	8003bc8 <HAL_GPIO_DeInit+0xf0>
 8003ba0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003ba4:	42b8      	cmp	r0, r7
 8003ba6:	bf0c      	ite	eq
 8003ba8:	f04f 0e06 	moveq.w	lr, #6
 8003bac:	f04f 0e07 	movne.w	lr, #7
 8003bb0:	e7a5      	b.n	8003afe <HAL_GPIO_DeInit+0x26>
 8003bb2:	46ce      	mov	lr, r9
 8003bb4:	e7a3      	b.n	8003afe <HAL_GPIO_DeInit+0x26>
 8003bb6:	f04f 0e02 	mov.w	lr, #2
 8003bba:	e7a0      	b.n	8003afe <HAL_GPIO_DeInit+0x26>
 8003bbc:	f04f 0e03 	mov.w	lr, #3
 8003bc0:	e79d      	b.n	8003afe <HAL_GPIO_DeInit+0x26>
 8003bc2:	f04f 0e04 	mov.w	lr, #4
 8003bc6:	e79a      	b.n	8003afe <HAL_GPIO_DeInit+0x26>
 8003bc8:	f04f 0e05 	mov.w	lr, #5
 8003bcc:	e797      	b.n	8003afe <HAL_GPIO_DeInit+0x26>
        EXTI->IMR1 &= ~(iocurrent);
 8003bce:	f8d8 4000 	ldr.w	r4, [r8]
 8003bd2:	43ed      	mvns	r5, r5
 8003bd4:	402c      	ands	r4, r5
 8003bd6:	f8c8 4000 	str.w	r4, [r8]
        EXTI->EMR1 &= ~(iocurrent);
 8003bda:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8003bde:	402c      	ands	r4, r5
 8003be0:	f8c8 4004 	str.w	r4, [r8, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003be4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003be8:	402c      	ands	r4, r5
 8003bea:	f8c8 4008 	str.w	r4, [r8, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003bee:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8003bf2:	4025      	ands	r5, r4
 8003bf4:	f8c8 500c 	str.w	r5, [r8, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003bf8:	688c      	ldr	r4, [r1, #8]
 8003bfa:	ea24 040c 	bic.w	r4, r4, ip
 8003bfe:	608c      	str	r4, [r1, #8]
 8003c00:	e782      	b.n	8003b08 <HAL_GPIO_DeInit+0x30>
  }
}
 8003c02:	b003      	add	sp, #12
 8003c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	48000800 	.word	0x48000800
 8003c10:	40010400 	.word	0x40010400
 8003c14:	48000400 	.word	0x48000400

08003c18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c18:	6903      	ldr	r3, [r0, #16]
 8003c1a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003c1c:	bf14      	ite	ne
 8003c1e:	2001      	movne	r0, #1
 8003c20:	2000      	moveq	r0, #0
 8003c22:	4770      	bx	lr

08003c24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c24:	b90a      	cbnz	r2, 8003c2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c26:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003c28:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c2a:	6181      	str	r1, [r0, #24]
 8003c2c:	4770      	bx	lr

08003c2e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003c2e:	6943      	ldr	r3, [r0, #20]
 8003c30:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c32:	bf14      	ite	ne
 8003c34:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c36:	6181      	streq	r1, [r0, #24]
  }
}
 8003c38:	4770      	bx	lr

08003c3a <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c3a:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8003c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c40:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8003c42:	9b01      	ldr	r3, [sp, #4]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003c48:	9b01      	ldr	r3, [sp, #4]
 8003c4a:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8003c4c:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003c4e:	9b01      	ldr	r3, [sp, #4]
 8003c50:	61c3      	str	r3, [r0, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8003c52:	69c3      	ldr	r3, [r0, #28]
 8003c54:	9301      	str	r3, [sp, #4]

  /* Read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 8003c56:	69c0      	ldr	r0, [r0, #28]
 8003c58:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 8003c5c:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8003c60:	b002      	add	sp, #8
 8003c62:	4770      	bx	lr

08003c64 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003c68:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4203      	tst	r3, r0
 8003c70:	d100      	bne.n	8003c74 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8003c72:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c74:	4b02      	ldr	r3, [pc, #8]	; (8003c80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c76:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c78:	f7ff fff4 	bl	8003c64 <HAL_GPIO_EXTI_Callback>
}
 8003c7c:	e7f9      	b.n	8003c72 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003c7e:	bf00      	nop
 8003c80:	40010400 	.word	0x40010400

08003c84 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c84:	6803      	ldr	r3, [r0, #0]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	f012 0f02 	tst.w	r2, #2
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c8c:	bf1c      	itt	ne
 8003c8e:	2200      	movne	r2, #0
 8003c90:	629a      	strne	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c92:	6803      	ldr	r3, [r0, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	f012 0f01 	tst.w	r2, #1
 8003c9a:	d103      	bne.n	8003ca4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	619a      	str	r2, [r3, #24]
  }
}
 8003ca4:	4770      	bx	lr

08003ca6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003ca6:	b470      	push	{r4, r5, r6}
 8003ca8:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003caa:	6806      	ldr	r6, [r0, #0]
 8003cac:	6870      	ldr	r0, [r6, #4]
 8003cae:	0d65      	lsrs	r5, r4, #21
 8003cb0:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8003cb4:	f045 757f 	orr.w	r5, r5, #66846720	; 0x3fc0000
 8003cb8:	f445 3558 	orr.w	r5, r5, #221184	; 0x36000
 8003cbc:	f445 757f 	orr.w	r5, r5, #1020	; 0x3fc
 8003cc0:	f045 0503 	orr.w	r5, r5, #3
 8003cc4:	ea20 0005 	bic.w	r0, r0, r5
 8003cc8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	4302      	orrs	r2, r0
 8003cd6:	6072      	str	r2, [r6, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003cd8:	bc70      	pop	{r4, r5, r6}
 8003cda:	4770      	bx	lr

08003cdc <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003cdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003cde:	4a1a      	ldr	r2, [pc, #104]	; (8003d48 <I2C_Enable_IRQ+0x6c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d01d      	beq.n	8003d20 <I2C_Enable_IRQ+0x44>
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <I2C_Enable_IRQ+0x70>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01a      	beq.n	8003d20 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cea:	f001 0304 	and.w	r3, r1, #4
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	23b8      	movne	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003cf6:	f011 0f01 	tst.w	r1, #1
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003cfa:	bf18      	it	ne
 8003cfc:	f043 03f2 	orrne.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d00:	f011 0f02 	tst.w	r1, #2
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003d04:	bf18      	it	ne
 8003d06:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003d0a:	f001 0112 	and.w	r1, r1, #18
 8003d0e:	2912      	cmp	r1, #18
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003d10:	bf08      	it	eq
 8003d12:	f043 0320 	orreq.w	r3, r3, #32
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003d16:	6801      	ldr	r1, [r0, #0]
 8003d18:	680a      	ldr	r2, [r1, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
}
 8003d1e:	4770      	bx	lr
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d20:	f001 0304 	and.w	r3, r1, #4
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	23b8      	movne	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003d2c:	f001 0211 	and.w	r2, r1, #17
 8003d30:	2a11      	cmp	r2, #17
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d32:	bf08      	it	eq
 8003d34:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003d38:	f001 0112 	and.w	r1, r1, #18
 8003d3c:	2912      	cmp	r1, #18
 8003d3e:	d1ea      	bne.n	8003d16 <I2C_Enable_IRQ+0x3a>
      tmpisr |= I2C_IT_TCI;
 8003d40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d44:	e7e7      	b.n	8003d16 <I2C_Enable_IRQ+0x3a>
 8003d46:	bf00      	nop
 8003d48:	08006a3d 	.word	0x08006a3d
 8003d4c:	08006939 	.word	0x08006939

08003d50 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d50:	f011 0f01 	tst.w	r1, #1
 8003d54:	d02b      	beq.n	8003dae <I2C_Disable_IRQ+0x5e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d5e:	2b28      	cmp	r3, #40	; 0x28
 8003d60:	bf0c      	ite	eq
 8003d62:	2342      	moveq	r3, #66	; 0x42
 8003d64:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d66:	f011 0f02 	tst.w	r1, #2
 8003d6a:	d009      	beq.n	8003d80 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d6c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003d70:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003d74:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d76:	bf0c      	ite	eq
 8003d78:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d7c:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d80:	f011 0f04 	tst.w	r1, #4
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d84:	bf18      	it	ne
 8003d86:	f043 03b8 	orrne.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003d8a:	f001 0211 	and.w	r2, r1, #17
 8003d8e:	2a11      	cmp	r2, #17
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d90:	bf08      	it	eq
 8003d92:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003d96:	f001 0112 	and.w	r1, r1, #18
 8003d9a:	2912      	cmp	r1, #18
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d9c:	bf08      	it	eq
 8003d9e:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003da2:	6801      	ldr	r1, [r0, #0]
 8003da4:	680a      	ldr	r2, [r1, #0]
 8003da6:	ea22 0303 	bic.w	r3, r2, r3
 8003daa:	600b      	str	r3, [r1, #0]
}
 8003dac:	4770      	bx	lr
  uint32_t tmpisr = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e7d9      	b.n	8003d66 <I2C_Disable_IRQ+0x16>

08003db2 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003db2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003db4:	2baa      	cmp	r3, #170	; 0xaa
 8003db6:	d007      	beq.n	8003dc8 <I2C_ConvertOtherXferOptions+0x16>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003db8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003dba:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003dbe:	bf04      	itt	eq
 8003dc0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8003dc4:	62c3      	streq	r3, [r0, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003dc6:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003dcc:	4770      	bx	lr

08003dce <I2C_IsAcknowledgeFailed>:
{
 8003dce:	b570      	push	{r4, r5, r6, lr}
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dd6:	6803      	ldr	r3, [r0, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f013 0f10 	tst.w	r3, #16
 8003dde:	d01c      	beq.n	8003e1a <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003de0:	682a      	ldr	r2, [r5, #0]
 8003de2:	6993      	ldr	r3, [r2, #24]
 8003de4:	f013 0f20 	tst.w	r3, #32
 8003de8:	d119      	bne.n	8003e1e <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8003dea:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003dee:	d0f8      	beq.n	8003de2 <I2C_IsAcknowledgeFailed+0x14>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df0:	f7fe f950 	bl	8002094 <HAL_GetTick>
 8003df4:	1b80      	subs	r0, r0, r6
 8003df6:	42a0      	cmp	r0, r4
 8003df8:	d801      	bhi.n	8003dfe <I2C_IsAcknowledgeFailed+0x30>
 8003dfa:	2c00      	cmp	r4, #0
 8003dfc:	d1f0      	bne.n	8003de0 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dfe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003e00:	f043 0320 	orr.w	r3, r3, #32
 8003e04:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	2320      	movs	r3, #32
 8003e08:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003e12:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8003e16:	2001      	movs	r0, #1
 8003e18:	e020      	b.n	8003e5c <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	e01e      	b.n	8003e5c <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1e:	2310      	movs	r3, #16
 8003e20:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e22:	682b      	ldr	r3, [r5, #0]
 8003e24:	2420      	movs	r4, #32
 8003e26:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f7ff ff2b 	bl	8003c84 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003e2e:	682a      	ldr	r2, [r5, #0]
 8003e30:	6853      	ldr	r3, [r2, #4]
 8003e32:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003e36:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003e3a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e44:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003e56:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8003e5a:	2001      	movs	r0, #1
}
 8003e5c:	bd70      	pop	{r4, r5, r6, pc}

08003e5e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003e5e:	b570      	push	{r4, r5, r6, lr}
 8003e60:	4604      	mov	r4, r0
 8003e62:	460d      	mov	r5, r1
 8003e64:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f013 0f02 	tst.w	r3, #2
 8003e6e:	d11d      	bne.n	8003eac <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e70:	4632      	mov	r2, r6
 8003e72:	4629      	mov	r1, r5
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff ffaa 	bl	8003dce <I2C_IsAcknowledgeFailed>
 8003e7a:	b9c8      	cbnz	r0, 8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003e7c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003e80:	d0f1      	beq.n	8003e66 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e82:	f7fe f907 	bl	8002094 <HAL_GetTick>
 8003e86:	1b80      	subs	r0, r0, r6
 8003e88:	42a8      	cmp	r0, r5
 8003e8a:	d801      	bhi.n	8003e90 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003e8c:	2d00      	cmp	r5, #0
 8003e8e:	d1ea      	bne.n	8003e66 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e92:	f043 0320 	orr.w	r3, r3, #32
 8003e96:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	2320      	movs	r3, #32
 8003e9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003ea4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	e000      	b.n	8003eae <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8003eac:	2000      	movs	r0, #0
}
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	e7fc      	b.n	8003eae <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003eb4 <I2C_WaitOnFlagUntilTimeout>:
{
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	4607      	mov	r7, r0
 8003eb8:	460e      	mov	r6, r1
 8003eba:	4615      	mov	r5, r2
 8003ebc:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	6993      	ldr	r3, [r2, #24]
 8003ec2:	ea36 0303 	bics.w	r3, r6, r3
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	d118      	bne.n	8003f02 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003ed0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003ed4:	d0f4      	beq.n	8003ec0 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fe f8dd 	bl	8002094 <HAL_GetTick>
 8003eda:	9b06      	ldr	r3, [sp, #24]
 8003edc:	1ac0      	subs	r0, r0, r3
 8003ede:	42a0      	cmp	r0, r4
 8003ee0:	d801      	bhi.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003ee2:	2c00      	cmp	r4, #0
 8003ee4:	d1eb      	bne.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee8:	f043 0320 	orr.w	r3, r3, #32
 8003eec:	647b      	str	r3, [r7, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	2320      	movs	r3, #32
 8003ef0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003efa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        return HAL_ERROR;
 8003efe:	2001      	movs	r0, #1
 8003f00:	e000      	b.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8003f02:	2000      	movs	r0, #0
}
 8003f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f08 <I2C_RequestMemoryWrite>:
{
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	4616      	mov	r6, r2
 8003f10:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f12:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <I2C_RequestMemoryWrite+0x6c>)
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f1a:	b2ea      	uxtb	r2, r5
 8003f1c:	f7ff fec3 	bl	8003ca6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f20:	9a07      	ldr	r2, [sp, #28]
 8003f22:	9906      	ldr	r1, [sp, #24]
 8003f24:	4620      	mov	r0, r4
 8003f26:	f7ff ff9a 	bl	8003e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003f2a:	b9e8      	cbnz	r0, 8003f68 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2c:	2d01      	cmp	r5, #1
 8003f2e:	d10e      	bne.n	8003f4e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	b2f6      	uxtb	r6, r6
 8003f34:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f36:	9b07      	ldr	r3, [sp, #28]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	9b06      	ldr	r3, [sp, #24]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2180      	movs	r1, #128	; 0x80
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff ffb7 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003f46:	3000      	adds	r0, #0
 8003f48:	bf18      	it	ne
 8003f4a:	2001      	movne	r0, #1
 8003f4c:	e00d      	b.n	8003f6a <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	0a32      	lsrs	r2, r6, #8
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f54:	9a07      	ldr	r2, [sp, #28]
 8003f56:	9906      	ldr	r1, [sp, #24]
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f7ff ff80 	bl	8003e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003f5e:	b930      	cbnz	r0, 8003f6e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	b2f6      	uxtb	r6, r6
 8003f64:	629e      	str	r6, [r3, #40]	; 0x28
 8003f66:	e7e6      	b.n	8003f36 <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8003f68:	2001      	movs	r0, #1
}
 8003f6a:	b002      	add	sp, #8
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003f6e:	2001      	movs	r0, #1
 8003f70:	e7fb      	b.n	8003f6a <I2C_RequestMemoryWrite+0x62>
 8003f72:	bf00      	nop
 8003f74:	80002000 	.word	0x80002000

08003f78 <I2C_RequestMemoryRead>:
{
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	4616      	mov	r6, r2
 8003f80:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f82:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <I2C_RequestMemoryRead+0x68>)
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2300      	movs	r3, #0
 8003f88:	b2ea      	uxtb	r2, r5
 8003f8a:	f7ff fe8c 	bl	8003ca6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	9a07      	ldr	r2, [sp, #28]
 8003f90:	9906      	ldr	r1, [sp, #24]
 8003f92:	4620      	mov	r0, r4
 8003f94:	f7ff ff63 	bl	8003e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003f98:	b9e8      	cbnz	r0, 8003fd6 <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f9a:	2d01      	cmp	r5, #1
 8003f9c:	d10e      	bne.n	8003fbc <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	b2f6      	uxtb	r6, r6
 8003fa2:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa4:	9b07      	ldr	r3, [sp, #28]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	9b06      	ldr	r3, [sp, #24]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2140      	movs	r1, #64	; 0x40
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f7ff ff80 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003fb4:	3000      	adds	r0, #0
 8003fb6:	bf18      	it	ne
 8003fb8:	2001      	movne	r0, #1
 8003fba:	e00d      	b.n	8003fd8 <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	0a32      	lsrs	r2, r6, #8
 8003fc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc2:	9a07      	ldr	r2, [sp, #28]
 8003fc4:	9906      	ldr	r1, [sp, #24]
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7ff ff49 	bl	8003e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8003fcc:	b930      	cbnz	r0, 8003fdc <I2C_RequestMemoryRead+0x64>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	b2f6      	uxtb	r6, r6
 8003fd2:	629e      	str	r6, [r3, #40]	; 0x28
 8003fd4:	e7e6      	b.n	8003fa4 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 8003fd6:	2001      	movs	r0, #1
}
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003fdc:	2001      	movs	r0, #1
 8003fde:	e7fb      	b.n	8003fd8 <I2C_RequestMemoryRead+0x60>
 8003fe0:	80002000 	.word	0x80002000

08003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4605      	mov	r5, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f013 0f20 	tst.w	r3, #32
 8003ff4:	d11a      	bne.n	800402c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff6:	4632      	mov	r2, r6
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f7ff fee7 	bl	8003dce <I2C_IsAcknowledgeFailed>
 8004000:	b9b0      	cbnz	r0, 8004030 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004002:	f7fe f847 	bl	8002094 <HAL_GetTick>
 8004006:	1b80      	subs	r0, r0, r6
 8004008:	42a0      	cmp	r0, r4
 800400a:	d801      	bhi.n	8004010 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800400c:	2c00      	cmp	r4, #0
 800400e:	d1ed      	bne.n	8003fec <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004012:	f043 0320 	orr.w	r3, r3, #32
 8004016:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004018:	2320      	movs	r3, #32
 800401a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	2300      	movs	r3, #0
 8004020:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004024:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004028:	2001      	movs	r0, #1
}
 800402a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800402c:	2000      	movs	r0, #0
 800402e:	e7fc      	b.n	800402a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004030:	2001      	movs	r0, #1
 8004032:	e7fa      	b.n	800402a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08004034 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	4604      	mov	r4, r0
 8004038:	460d      	mov	r5, r1
 800403a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f013 0f04 	tst.w	r3, #4
 8004044:	d13e      	bne.n	80040c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004046:	4632      	mov	r2, r6
 8004048:	4629      	mov	r1, r5
 800404a:	4620      	mov	r0, r4
 800404c:	f7ff febf 	bl	8003dce <I2C_IsAcknowledgeFailed>
 8004050:	4601      	mov	r1, r0
 8004052:	2800      	cmp	r0, #0
 8004054:	d138      	bne.n	80040c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	f012 0f20 	tst.w	r2, #32
 800405e:	d113      	bne.n	8004088 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004060:	f7fe f818 	bl	8002094 <HAL_GetTick>
 8004064:	1b80      	subs	r0, r0, r6
 8004066:	42a8      	cmp	r0, r5
 8004068:	d801      	bhi.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 800406a:	2d00      	cmp	r5, #0
 800406c:	d1e6      	bne.n	800403c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004070:	f043 0320 	orr.w	r3, r3, #32
 8004074:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004076:	2320      	movs	r3, #32
 8004078:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004082:	2101      	movs	r1, #1
}
 8004084:	4608      	mov	r0, r1
 8004086:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	f012 0f04 	tst.w	r2, #4
 800408e:	d002      	beq.n	8004096 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004090:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004092:	2a00      	cmp	r2, #0
 8004094:	d1f6      	bne.n	8004084 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004096:	2220      	movs	r2, #32
 8004098:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800409a:	6821      	ldr	r1, [r4, #0]
 800409c:	684b      	ldr	r3, [r1, #4]
 800409e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80040a2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80040a6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80040bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80040c0:	2101      	movs	r1, #1
 80040c2:	e7df      	b.n	8004084 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 80040c4:	2100      	movs	r1, #0
 80040c6:	e7dd      	b.n	8004084 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 80040c8:	2101      	movs	r1, #1
 80040ca:	e7db      	b.n	8004084 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

080040cc <HAL_I2C_MspInit>:
}
 80040cc:	4770      	bx	lr

080040ce <HAL_I2C_Init>:
  if (hi2c == NULL)
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d055      	beq.n	800417e <HAL_I2C_Init+0xb0>
{
 80040d2:	b510      	push	{r4, lr}
 80040d4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d045      	beq.n	800416a <HAL_I2C_Init+0x9c>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80040de:	2324      	movs	r3, #36	; 0x24
 80040e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	6813      	ldr	r3, [r2, #0]
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040ee:	6822      	ldr	r2, [r4, #0]
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80040f6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040f8:	6822      	ldr	r2, [r4, #0]
 80040fa:	6893      	ldr	r3, [r2, #8]
 80040fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004100:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004102:	68e3      	ldr	r3, [r4, #12]
 8004104:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	68a3      	ldr	r3, [r4, #8]
 800410a:	bf0c      	ite	eq
 800410c:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004110:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8004114:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004116:	68e3      	ldr	r3, [r4, #12]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d02b      	beq.n	8004174 <HAL_I2C_Init+0xa6>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	6853      	ldr	r3, [r2, #4]
 8004120:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004128:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	68d3      	ldr	r3, [r2, #12]
 800412e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004132:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	6923      	ldr	r3, [r4, #16]
 8004138:	6961      	ldr	r1, [r4, #20]
 800413a:	430b      	orrs	r3, r1
 800413c:	69a1      	ldr	r1, [r4, #24]
 800413e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004142:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004144:	6822      	ldr	r2, [r4, #0]
 8004146:	69e3      	ldr	r3, [r4, #28]
 8004148:	6a21      	ldr	r1, [r4, #32]
 800414a:	430b      	orrs	r3, r1
 800414c:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	6813      	ldr	r3, [r2, #0]
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004158:	2000      	movs	r0, #0
 800415a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800415c:	2320      	movs	r3, #32
 800415e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004162:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004168:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800416a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800416e:	f7ff ffad 	bl	80040cc <HAL_I2C_MspInit>
 8004172:	e7b4      	b.n	80040de <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800417a:	605a      	str	r2, [r3, #4]
 800417c:	e7ce      	b.n	800411c <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 800417e:	2001      	movs	r0, #1
}
 8004180:	4770      	bx	lr

08004182 <HAL_I2C_MspDeInit>:
}
 8004182:	4770      	bx	lr

08004184 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8004184:	b1a8      	cbz	r0, 80041b2 <HAL_I2C_DeInit+0x2e>
{
 8004186:	b510      	push	{r4, lr}
 8004188:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800418a:	2324      	movs	r3, #36	; 0x24
 800418c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004190:	6802      	ldr	r2, [r0, #0]
 8004192:	6813      	ldr	r3, [r2, #0]
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800419a:	f7ff fff2 	bl	8004182 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419e:	2000      	movs	r0, #0
 80041a0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80041a2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041a6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80041ac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80041b0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80041b2:	2001      	movs	r0, #1
}
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_I2C_Master_Transmit>:
{
 80041b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041bc:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041be:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80041c2:	b2ed      	uxtb	r5, r5
 80041c4:	2d20      	cmp	r5, #32
 80041c6:	f040 80a6 	bne.w	8004316 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 80041ca:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80041ce:	2c01      	cmp	r4, #1
 80041d0:	f000 80a6 	beq.w	8004320 <HAL_I2C_Master_Transmit+0x168>
 80041d4:	4698      	mov	r8, r3
 80041d6:	4617      	mov	r7, r2
 80041d8:	460e      	mov	r6, r1
 80041da:	4604      	mov	r4, r0
 80041dc:	f04f 0901 	mov.w	r9, #1
 80041e0:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80041e4:	f7fd ff56 	bl	8002094 <HAL_GetTick>
 80041e8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041ea:	9000      	str	r0, [sp, #0]
 80041ec:	2319      	movs	r3, #25
 80041ee:	464a      	mov	r2, r9
 80041f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff fe5d 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	f040 8092 	bne.w	8004324 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004200:	2321      	movs	r3, #33	; 0x21
 8004202:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004206:	2310      	movs	r3, #16
 8004208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420c:	2300      	movs	r3, #0
 800420e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004210:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004212:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004216:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004218:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	2bff      	cmp	r3, #255	; 0xff
 800421e:	d945      	bls.n	80042ac <HAL_I2C_Master_Transmit+0xf4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004220:	22ff      	movs	r2, #255	; 0xff
 8004222:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_I2C_Master_Transmit+0x17c>)
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800422c:	4631      	mov	r1, r6
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff fd39 	bl	8003ca6 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004234:	2700      	movs	r7, #0
 8004236:	f04f 0880 	mov.w	r8, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800423a:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 800423e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04a      	beq.n	80042dc <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004246:	462a      	mov	r2, r5
 8004248:	990a      	ldr	r1, [sp, #40]	; 0x28
 800424a:	4620      	mov	r0, r4
 800424c:	f7ff fe07 	bl	8003e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8004250:	2800      	cmp	r0, #0
 8004252:	d169      	bne.n	8004328 <HAL_I2C_Master_Transmit+0x170>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004258:	7812      	ldrb	r2, [r2, #0]
 800425a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800425c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800425e:	3301      	adds	r3, #1
 8004260:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004262:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004264:	3b01      	subs	r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800426a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004272:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004274:	b292      	uxth	r2, r2
 8004276:	2a00      	cmp	r2, #0
 8004278:	d0e1      	beq.n	800423e <HAL_I2C_Master_Transmit+0x86>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1df      	bne.n	800423e <HAL_I2C_Master_Transmit+0x86>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800427e:	9500      	str	r5, [sp, #0]
 8004280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004282:	463a      	mov	r2, r7
 8004284:	4641      	mov	r1, r8
 8004286:	4620      	mov	r0, r4
 8004288:	f7ff fe14 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 800428c:	2800      	cmp	r0, #0
 800428e:	d14d      	bne.n	800432c <HAL_I2C_Master_Transmit+0x174>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004290:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	2bff      	cmp	r3, #255	; 0xff
 8004296:	d916      	bls.n	80042c6 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004298:	22ff      	movs	r2, #255	; 0xff
 800429a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800429c:	9700      	str	r7, [sp, #0]
 800429e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a2:	4631      	mov	r1, r6
 80042a4:	4620      	mov	r0, r4
 80042a6:	f7ff fcfe 	bl	8003ca6 <I2C_TransferConfig>
 80042aa:	e7c8      	b.n	800423e <HAL_I2C_Master_Transmit+0x86>
      hi2c->XferSize = hi2c->XferCount;
 80042ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042ae:	b292      	uxth	r2, r2
 80042b0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80042b2:	4b20      	ldr	r3, [pc, #128]	; (8004334 <HAL_I2C_Master_Transmit+0x17c>)
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	4631      	mov	r1, r6
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff fcf1 	bl	8003ca6 <I2C_TransferConfig>
 80042c4:	e7b6      	b.n	8004234 <HAL_I2C_Master_Transmit+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 80042c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042c8:	b292      	uxth	r2, r2
 80042ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042cc:	9700      	str	r7, [sp, #0]
 80042ce:	464b      	mov	r3, r9
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	4631      	mov	r1, r6
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7ff fce6 	bl	8003ca6 <I2C_TransferConfig>
 80042da:	e7b0      	b.n	800423e <HAL_I2C_Master_Transmit+0x86>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042dc:	462a      	mov	r2, r5
 80042de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7ff fe7f 	bl	8003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	bb10      	cbnz	r0, 8004330 <HAL_I2C_Master_Transmit+0x178>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	2120      	movs	r1, #32
 80042ee:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80042f0:	6820      	ldr	r0, [r4, #0]
 80042f2:	6842      	ldr	r2, [r0, #4]
 80042f4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80042f8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80042fc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800430a:	2200      	movs	r2, #0
 800430c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004310:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004314:	e000      	b.n	8004318 <HAL_I2C_Master_Transmit+0x160>
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
}
 8004318:	4618      	mov	r0, r3
 800431a:	b003      	add	sp, #12
 800431c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8004320:	2302      	movs	r3, #2
 8004322:	e7f9      	b.n	8004318 <HAL_I2C_Master_Transmit+0x160>
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e7f7      	b.n	8004318 <HAL_I2C_Master_Transmit+0x160>
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e7f5      	b.n	8004318 <HAL_I2C_Master_Transmit+0x160>
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e7f3      	b.n	8004318 <HAL_I2C_Master_Transmit+0x160>
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e7f1      	b.n	8004318 <HAL_I2C_Master_Transmit+0x160>
 8004334:	80002000 	.word	0x80002000

08004338 <HAL_I2C_Master_Receive>:
{
 8004338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800433c:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800433e:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004342:	b2ed      	uxtb	r5, r5
 8004344:	2d20      	cmp	r5, #32
 8004346:	f040 80a6 	bne.w	8004496 <HAL_I2C_Master_Receive+0x15e>
    __HAL_LOCK(hi2c);
 800434a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800434e:	2c01      	cmp	r4, #1
 8004350:	f000 80a6 	beq.w	80044a0 <HAL_I2C_Master_Receive+0x168>
 8004354:	4698      	mov	r8, r3
 8004356:	4617      	mov	r7, r2
 8004358:	460e      	mov	r6, r1
 800435a:	4604      	mov	r4, r0
 800435c:	f04f 0901 	mov.w	r9, #1
 8004360:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004364:	f7fd fe96 	bl	8002094 <HAL_GetTick>
 8004368:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800436a:	9000      	str	r0, [sp, #0]
 800436c:	2319      	movs	r3, #25
 800436e:	464a      	mov	r2, r9
 8004370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004374:	4620      	mov	r0, r4
 8004376:	f7ff fd9d 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 800437a:	2800      	cmp	r0, #0
 800437c:	f040 8092 	bne.w	80044a4 <HAL_I2C_Master_Receive+0x16c>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004380:	2322      	movs	r3, #34	; 0x22
 8004382:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004386:	2310      	movs	r3, #16
 8004388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438c:	2300      	movs	r3, #0
 800438e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004390:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004392:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004396:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004398:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	2bff      	cmp	r3, #255	; 0xff
 800439e:	d945      	bls.n	800442c <HAL_I2C_Master_Receive+0xf4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a0:	22ff      	movs	r2, #255	; 0xff
 80043a2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80043a4:	4b43      	ldr	r3, [pc, #268]	; (80044b4 <HAL_I2C_Master_Receive+0x17c>)
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ac:	4631      	mov	r1, r6
 80043ae:	4620      	mov	r0, r4
 80043b0:	f7ff fc79 	bl	8003ca6 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043b4:	2700      	movs	r7, #0
 80043b6:	f04f 0880 	mov.w	r8, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043ba:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 80043be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d04a      	beq.n	800445c <HAL_I2C_Master_Receive+0x124>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c6:	462a      	mov	r2, r5
 80043c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80043ca:	4620      	mov	r0, r4
 80043cc:	f7ff fe32 	bl	8004034 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d169      	bne.n	80044a8 <HAL_I2C_Master_Receive+0x170>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043da:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80043dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043de:	3301      	adds	r3, #1
 80043e0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80043e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80043ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043ec:	3a01      	subs	r2, #1
 80043ee:	b292      	uxth	r2, r2
 80043f0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043f4:	b292      	uxth	r2, r2
 80043f6:	2a00      	cmp	r2, #0
 80043f8:	d0e1      	beq.n	80043be <HAL_I2C_Master_Receive+0x86>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1df      	bne.n	80043be <HAL_I2C_Master_Receive+0x86>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043fe:	9500      	str	r5, [sp, #0]
 8004400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004402:	463a      	mov	r2, r7
 8004404:	4641      	mov	r1, r8
 8004406:	4620      	mov	r0, r4
 8004408:	f7ff fd54 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 800440c:	2800      	cmp	r0, #0
 800440e:	d14d      	bne.n	80044ac <HAL_I2C_Master_Receive+0x174>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2bff      	cmp	r3, #255	; 0xff
 8004416:	d916      	bls.n	8004446 <HAL_I2C_Master_Receive+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004418:	22ff      	movs	r2, #255	; 0xff
 800441a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800441c:	9700      	str	r7, [sp, #0]
 800441e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004422:	4631      	mov	r1, r6
 8004424:	4620      	mov	r0, r4
 8004426:	f7ff fc3e 	bl	8003ca6 <I2C_TransferConfig>
 800442a:	e7c8      	b.n	80043be <HAL_I2C_Master_Receive+0x86>
      hi2c->XferSize = hi2c->XferCount;
 800442c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800442e:	b292      	uxth	r2, r2
 8004430:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_I2C_Master_Receive+0x17c>)
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	4631      	mov	r1, r6
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff fc31 	bl	8003ca6 <I2C_TransferConfig>
 8004444:	e7b6      	b.n	80043b4 <HAL_I2C_Master_Receive+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 8004446:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004448:	b292      	uxth	r2, r2
 800444a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800444c:	9700      	str	r7, [sp, #0]
 800444e:	464b      	mov	r3, r9
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	4631      	mov	r1, r6
 8004454:	4620      	mov	r0, r4
 8004456:	f7ff fc26 	bl	8003ca6 <I2C_TransferConfig>
 800445a:	e7b0      	b.n	80043be <HAL_I2C_Master_Receive+0x86>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445c:	462a      	mov	r2, r5
 800445e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004460:	4620      	mov	r0, r4
 8004462:	f7ff fdbf 	bl	8003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	bb10      	cbnz	r0, 80044b0 <HAL_I2C_Master_Receive+0x178>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	2120      	movs	r1, #32
 800446e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	6842      	ldr	r2, [r0, #4]
 8004474:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004478:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800447c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004486:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800448a:	2200      	movs	r2, #0
 800448c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004490:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004494:	e000      	b.n	8004498 <HAL_I2C_Master_Receive+0x160>
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
}
 8004498:	4618      	mov	r0, r3
 800449a:	b003      	add	sp, #12
 800449c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 80044a0:	2302      	movs	r3, #2
 80044a2:	e7f9      	b.n	8004498 <HAL_I2C_Master_Receive+0x160>
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e7f7      	b.n	8004498 <HAL_I2C_Master_Receive+0x160>
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e7f5      	b.n	8004498 <HAL_I2C_Master_Receive+0x160>
          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e7f3      	b.n	8004498 <HAL_I2C_Master_Receive+0x160>
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e7f1      	b.n	8004498 <HAL_I2C_Master_Receive+0x160>
 80044b4:	80002400 	.word	0x80002400

080044b8 <HAL_I2C_Slave_Transmit>:
{
 80044b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044bc:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044be:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80044c2:	b2ed      	uxtb	r5, r5
 80044c4:	2d20      	cmp	r5, #32
 80044c6:	f040 80b9 	bne.w	800463c <HAL_I2C_Slave_Transmit+0x184>
    if ((pData == NULL) || (Size == 0U))
 80044ca:	2900      	cmp	r1, #0
 80044cc:	d063      	beq.n	8004596 <HAL_I2C_Slave_Transmit+0xde>
 80044ce:	2a00      	cmp	r2, #0
 80044d0:	d061      	beq.n	8004596 <HAL_I2C_Slave_Transmit+0xde>
    __HAL_LOCK(hi2c);
 80044d2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80044d6:	2c01      	cmp	r4, #1
 80044d8:	f000 80b5 	beq.w	8004646 <HAL_I2C_Slave_Transmit+0x18e>
 80044dc:	461f      	mov	r7, r3
 80044de:	4616      	mov	r6, r2
 80044e0:	460d      	mov	r5, r1
 80044e2:	4604      	mov	r4, r0
 80044e4:	2301      	movs	r3, #1
 80044e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80044ea:	f7fd fdd3 	bl	8002094 <HAL_GetTick>
 80044ee:	4680      	mov	r8, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044f0:	2321      	movs	r3, #33	; 0x21
 80044f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80044f6:	2320      	movs	r3, #32
 80044f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fc:	2200      	movs	r2, #0
 80044fe:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004500:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004502:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004504:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	684b      	ldr	r3, [r1, #4]
 800450a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800450e:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8004510:	9000      	str	r0, [sp, #0]
 8004512:	463b      	mov	r3, r7
 8004514:	2108      	movs	r1, #8
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff fccc 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 800451c:	2800      	cmp	r0, #0
 800451e:	d13f      	bne.n	80045a0 <HAL_I2C_Slave_Transmit+0xe8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	2208      	movs	r2, #8
 8004524:	61da      	str	r2, [r3, #28]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004526:	68e3      	ldr	r3, [r4, #12]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d040      	beq.n	80045ae <HAL_I2C_Slave_Transmit+0xf6>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 800452c:	f8cd 8000 	str.w	r8, [sp]
 8004530:	463b      	mov	r3, r7
 8004532:	2200      	movs	r2, #0
 8004534:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff fcbb 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 800453e:	2800      	cmp	r0, #0
 8004540:	d149      	bne.n	80045d6 <HAL_I2C_Slave_Transmit+0x11e>
    while (hi2c->XferCount > 0U)
 8004542:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	b1ab      	cbz	r3, 8004574 <HAL_I2C_Slave_Transmit+0xbc>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004548:	4642      	mov	r2, r8
 800454a:	4639      	mov	r1, r7
 800454c:	4620      	mov	r0, r4
 800454e:	f7ff fc86 	bl	8003e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8004552:	2800      	cmp	r0, #0
 8004554:	d146      	bne.n	80045e4 <HAL_I2C_Slave_Transmit+0x12c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800455e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004560:	3301      	adds	r3, #1
 8004562:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004564:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004566:	3b01      	subs	r3, #1
 8004568:	b29b      	uxth	r3, r3
 800456a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 800456c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e9      	bne.n	8004548 <HAL_I2C_Slave_Transmit+0x90>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004574:	4642      	mov	r2, r8
 8004576:	4639      	mov	r1, r7
 8004578:	4620      	mov	r0, r4
 800457a:	f7ff fd33 	bl	8003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800457e:	2800      	cmp	r0, #0
 8004580:	d039      	beq.n	80045f6 <HAL_I2C_Slave_Transmit+0x13e>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	6853      	ldr	r3, [r2, #4]
 8004586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458a:	6053      	str	r3, [r2, #4]
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800458e:	2b04      	cmp	r3, #4
 8004590:	d02f      	beq.n	80045f2 <HAL_I2C_Slave_Transmit+0x13a>
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e053      	b.n	800463e <HAL_I2C_Slave_Transmit+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800459a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e04e      	b.n	800463e <HAL_I2C_Slave_Transmit+0x186>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045a0:	6822      	ldr	r2, [r4, #0]
 80045a2:	6853      	ldr	r3, [r2, #4]
 80045a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a8:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e047      	b.n	800463e <HAL_I2C_Slave_Transmit+0x186>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80045ae:	f8cd 8000 	str.w	r8, [sp]
 80045b2:	463b      	mov	r3, r7
 80045b4:	2200      	movs	r2, #0
 80045b6:	2108      	movs	r1, #8
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7ff fc7b 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 80045be:	b918      	cbnz	r0, 80045c8 <HAL_I2C_Slave_Transmit+0x110>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	2208      	movs	r2, #8
 80045c4:	61da      	str	r2, [r3, #28]
 80045c6:	e7b1      	b.n	800452c <HAL_I2C_Slave_Transmit+0x74>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045c8:	6822      	ldr	r2, [r4, #0]
 80045ca:	6853      	ldr	r3, [r2, #4]
 80045cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d0:	6053      	str	r3, [r2, #4]
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e033      	b.n	800463e <HAL_I2C_Slave_Transmit+0x186>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	6853      	ldr	r3, [r2, #4]
 80045da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045de:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e02c      	b.n	800463e <HAL_I2C_Slave_Transmit+0x186>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045e4:	6822      	ldr	r2, [r4, #0]
 80045e6:	6853      	ldr	r3, [r2, #4]
 80045e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ec:	6053      	str	r3, [r2, #4]
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e025      	b.n	800463e <HAL_I2C_Slave_Transmit+0x186>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	2220      	movs	r2, #32
 80045fa:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80045fc:	f8cd 8000 	str.w	r8, [sp]
 8004600:	463b      	mov	r3, r7
 8004602:	2201      	movs	r2, #1
 8004604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004608:	4620      	mov	r0, r4
 800460a:	f7ff fc53 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	b968      	cbnz	r0, 800462e <HAL_I2C_Slave_Transmit+0x176>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004612:	6821      	ldr	r1, [r4, #0]
 8004614:	684a      	ldr	r2, [r1, #4]
 8004616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800461a:	604a      	str	r2, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	2220      	movs	r2, #32
 800461e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004622:	2200      	movs	r2, #0
 8004624:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004628:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800462c:	e007      	b.n	800463e <HAL_I2C_Slave_Transmit+0x186>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	6853      	ldr	r3, [r2, #4]
 8004632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004636:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <HAL_I2C_Slave_Transmit+0x186>
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
}
 800463e:	4618      	mov	r0, r3
 8004640:	b002      	add	sp, #8
 8004642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8004646:	2302      	movs	r3, #2
 8004648:	e7f9      	b.n	800463e <HAL_I2C_Slave_Transmit+0x186>

0800464a <HAL_I2C_Slave_Receive>:
{
 800464a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800464e:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004650:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004654:	b2ed      	uxtb	r5, r5
 8004656:	2d20      	cmp	r5, #32
 8004658:	f040 80a6 	bne.w	80047a8 <HAL_I2C_Slave_Receive+0x15e>
    if ((pData == NULL) || (Size == 0U))
 800465c:	b369      	cbz	r1, 80046ba <HAL_I2C_Slave_Receive+0x70>
 800465e:	b362      	cbz	r2, 80046ba <HAL_I2C_Slave_Receive+0x70>
    __HAL_LOCK(hi2c);
 8004660:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004664:	2c01      	cmp	r4, #1
 8004666:	f000 80a4 	beq.w	80047b2 <HAL_I2C_Slave_Receive+0x168>
 800466a:	461f      	mov	r7, r3
 800466c:	4616      	mov	r6, r2
 800466e:	460d      	mov	r5, r1
 8004670:	4604      	mov	r4, r0
 8004672:	2301      	movs	r3, #1
 8004674:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004678:	f7fd fd0c 	bl	8002094 <HAL_GetTick>
 800467c:	4680      	mov	r8, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800467e:	2322      	movs	r3, #34	; 0x22
 8004680:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004684:	2320      	movs	r3, #32
 8004686:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468a:	2200      	movs	r2, #0
 800468c:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800468e:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004690:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004692:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004694:	6821      	ldr	r1, [r4, #0]
 8004696:	684b      	ldr	r3, [r1, #4]
 8004698:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800469c:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800469e:	9000      	str	r0, [sp, #0]
 80046a0:	463b      	mov	r3, r7
 80046a2:	2108      	movs	r1, #8
 80046a4:	4620      	mov	r0, r4
 80046a6:	f7ff fc05 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 80046aa:	b158      	cbz	r0, 80046c4 <HAL_I2C_Slave_Receive+0x7a>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	6853      	ldr	r3, [r2, #4]
 80046b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b4:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e077      	b.n	80047aa <HAL_I2C_Slave_Receive+0x160>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046be:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e072      	b.n	80047aa <HAL_I2C_Slave_Receive+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	2208      	movs	r2, #8
 80046c8:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 80046ca:	f8cd 8000 	str.w	r8, [sp]
 80046ce:	463b      	mov	r3, r7
 80046d0:	2201      	movs	r2, #1
 80046d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80046d6:	4620      	mov	r0, r4
 80046d8:	f7ff fbec 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 80046dc:	bb20      	cbnz	r0, 8004728 <HAL_I2C_Slave_Receive+0xde>
    while (hi2c->XferCount > 0U)
 80046de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	b1a3      	cbz	r3, 800470e <HAL_I2C_Slave_Receive+0xc4>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e4:	4642      	mov	r2, r8
 80046e6:	4639      	mov	r1, r7
 80046e8:	4620      	mov	r0, r4
 80046ea:	f7ff fca3 	bl	8004034 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ee:	bb10      	cbnz	r0, 8004736 <HAL_I2C_Slave_Receive+0xec>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046f6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80046f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fa:	3301      	adds	r3, #1
 80046fc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80046fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004700:	3b01      	subs	r3, #1
 8004702:	b29b      	uxth	r3, r3
 8004704:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8004706:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1ea      	bne.n	80046e4 <HAL_I2C_Slave_Receive+0x9a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800470e:	4642      	mov	r2, r8
 8004710:	4639      	mov	r1, r7
 8004712:	4620      	mov	r0, r4
 8004714:	f7ff fc66 	bl	8003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004718:	b318      	cbz	r0, 8004762 <HAL_I2C_Slave_Receive+0x118>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	6853      	ldr	r3, [r2, #4]
 800471e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004722:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e040      	b.n	80047aa <HAL_I2C_Slave_Receive+0x160>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	6853      	ldr	r3, [r2, #4]
 800472c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004730:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e039      	b.n	80047aa <HAL_I2C_Slave_Receive+0x160>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	6853      	ldr	r3, [r2, #4]
 800473a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473e:	6053      	str	r3, [r2, #4]
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	699a      	ldr	r2, [r3, #24]
 8004744:	f012 0f04 	tst.w	r2, #4
 8004748:	d035      	beq.n	80047b6 <HAL_I2C_Slave_Receive+0x16c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800474a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800474c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800474e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004752:	3301      	adds	r3, #1
 8004754:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8004756:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004758:	3b01      	subs	r3, #1
 800475a:	b29b      	uxth	r3, r3
 800475c:	8563      	strh	r3, [r4, #42]	; 0x2a
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e023      	b.n	80047aa <HAL_I2C_Slave_Receive+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	2220      	movs	r2, #32
 8004766:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8004768:	f8cd 8000 	str.w	r8, [sp]
 800476c:	463b      	mov	r3, r7
 800476e:	2201      	movs	r2, #1
 8004770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004774:	4620      	mov	r0, r4
 8004776:	f7ff fb9d 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	b968      	cbnz	r0, 800479a <HAL_I2C_Slave_Receive+0x150>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800477e:	6821      	ldr	r1, [r4, #0]
 8004780:	684a      	ldr	r2, [r1, #4]
 8004782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004786:	604a      	str	r2, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004788:	2220      	movs	r2, #32
 800478a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800478e:	2200      	movs	r2, #0
 8004790:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004794:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004798:	e007      	b.n	80047aa <HAL_I2C_Slave_Receive+0x160>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	6853      	ldr	r3, [r2, #4]
 800479e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a2:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_I2C_Slave_Receive+0x160>
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	b002      	add	sp, #8
 80047ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 80047b2:	2302      	movs	r3, #2
 80047b4:	e7f9      	b.n	80047aa <HAL_I2C_Slave_Receive+0x160>
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e7f7      	b.n	80047aa <HAL_I2C_Slave_Receive+0x160>
	...

080047bc <HAL_I2C_Master_Transmit_IT>:
{
 80047bc:	b530      	push	{r4, r5, lr}
 80047be:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80047c4:	b2e4      	uxtb	r4, r4
 80047c6:	2c20      	cmp	r4, #32
 80047c8:	d137      	bne.n	800483a <HAL_I2C_Master_Transmit_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80047ca:	6804      	ldr	r4, [r0, #0]
 80047cc:	69a4      	ldr	r4, [r4, #24]
 80047ce:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80047d2:	d135      	bne.n	8004840 <HAL_I2C_Master_Transmit_IT+0x84>
    __HAL_LOCK(hi2c);
 80047d4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80047d8:	2c01      	cmp	r4, #1
 80047da:	d033      	beq.n	8004844 <HAL_I2C_Master_Transmit_IT+0x88>
 80047dc:	2401      	movs	r4, #1
 80047de:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047e2:	2421      	movs	r4, #33	; 0x21
 80047e4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047e8:	2410      	movs	r4, #16
 80047ea:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047ee:	2400      	movs	r4, #0
 80047f0:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80047f2:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047f4:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <HAL_I2C_Master_Transmit_IT+0x8c>)
 80047f8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <HAL_I2C_Master_Transmit_IT+0x90>)
 80047fc:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	d914      	bls.n	8004830 <HAL_I2C_Master_Transmit_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004806:	23ff      	movs	r3, #255	; 0xff
 8004808:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800480a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800480e:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004810:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8004814:	480e      	ldr	r0, [pc, #56]	; (8004850 <HAL_I2C_Master_Transmit_IT+0x94>)
 8004816:	9000      	str	r0, [sp, #0]
 8004818:	4620      	mov	r0, r4
 800481a:	f7ff fa44 	bl	8003ca6 <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 800481e:	2500      	movs	r5, #0
 8004820:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004824:	2101      	movs	r1, #1
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff fa58 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 800482c:	4628      	mov	r0, r5
 800482e:	e005      	b.n	800483c <HAL_I2C_Master_Transmit_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 8004830:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004832:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004834:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004838:	e7e9      	b.n	800480e <HAL_I2C_Master_Transmit_IT+0x52>
    return HAL_BUSY;
 800483a:	2002      	movs	r0, #2
}
 800483c:	b003      	add	sp, #12
 800483e:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 8004840:	2002      	movs	r0, #2
 8004842:	e7fb      	b.n	800483c <HAL_I2C_Master_Transmit_IT+0x80>
    __HAL_LOCK(hi2c);
 8004844:	2002      	movs	r0, #2
 8004846:	e7f9      	b.n	800483c <HAL_I2C_Master_Transmit_IT+0x80>
 8004848:	ffff0000 	.word	0xffff0000
 800484c:	080067bd 	.word	0x080067bd
 8004850:	80002000 	.word	0x80002000

08004854 <HAL_I2C_Master_Receive_IT>:
{
 8004854:	b530      	push	{r4, r5, lr}
 8004856:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004858:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800485c:	b2e4      	uxtb	r4, r4
 800485e:	2c20      	cmp	r4, #32
 8004860:	d137      	bne.n	80048d2 <HAL_I2C_Master_Receive_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004862:	6804      	ldr	r4, [r0, #0]
 8004864:	69a4      	ldr	r4, [r4, #24]
 8004866:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800486a:	d135      	bne.n	80048d8 <HAL_I2C_Master_Receive_IT+0x84>
    __HAL_LOCK(hi2c);
 800486c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004870:	2c01      	cmp	r4, #1
 8004872:	d033      	beq.n	80048dc <HAL_I2C_Master_Receive_IT+0x88>
 8004874:	2401      	movs	r4, #1
 8004876:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800487a:	2422      	movs	r4, #34	; 0x22
 800487c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004880:	2410      	movs	r4, #16
 8004882:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004886:	2400      	movs	r4, #0
 8004888:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800488a:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800488c:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <HAL_I2C_Master_Receive_IT+0x8c>)
 8004890:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <HAL_I2C_Master_Receive_IT+0x90>)
 8004894:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004896:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2bff      	cmp	r3, #255	; 0xff
 800489c:	d914      	bls.n	80048c8 <HAL_I2C_Master_Receive_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800489e:	23ff      	movs	r3, #255	; 0xff
 80048a0:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80048a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048a6:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80048a8:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80048ac:	480e      	ldr	r0, [pc, #56]	; (80048e8 <HAL_I2C_Master_Receive_IT+0x94>)
 80048ae:	9000      	str	r0, [sp, #0]
 80048b0:	4620      	mov	r0, r4
 80048b2:	f7ff f9f8 	bl	8003ca6 <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 80048b6:	2500      	movs	r5, #0
 80048b8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80048bc:	2102      	movs	r1, #2
 80048be:	4620      	mov	r0, r4
 80048c0:	f7ff fa0c 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 80048c4:	4628      	mov	r0, r5
 80048c6:	e005      	b.n	80048d4 <HAL_I2C_Master_Receive_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 80048c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80048ca:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80048cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d0:	e7e9      	b.n	80048a6 <HAL_I2C_Master_Receive_IT+0x52>
    return HAL_BUSY;
 80048d2:	2002      	movs	r0, #2
}
 80048d4:	b003      	add	sp, #12
 80048d6:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 80048d8:	2002      	movs	r0, #2
 80048da:	e7fb      	b.n	80048d4 <HAL_I2C_Master_Receive_IT+0x80>
    __HAL_LOCK(hi2c);
 80048dc:	2002      	movs	r0, #2
 80048de:	e7f9      	b.n	80048d4 <HAL_I2C_Master_Receive_IT+0x80>
 80048e0:	ffff0000 	.word	0xffff0000
 80048e4:	080067bd 	.word	0x080067bd
 80048e8:	80002400 	.word	0x80002400

080048ec <HAL_I2C_Slave_Transmit_IT>:
{
 80048ec:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d122      	bne.n	800493e <HAL_I2C_Slave_Transmit_IT+0x52>
    __HAL_LOCK(hi2c);
 80048f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d020      	beq.n	8004942 <HAL_I2C_Slave_Transmit_IT+0x56>
 8004900:	2301      	movs	r3, #1
 8004902:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004906:	2321      	movs	r3, #33	; 0x21
 8004908:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800490c:	2320      	movs	r3, #32
 800490e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004912:	2400      	movs	r4, #0
 8004914:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004916:	6805      	ldr	r5, [r0, #0]
 8004918:	686b      	ldr	r3, [r5, #4]
 800491a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800491e:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 8004920:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004922:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004924:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004926:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004928:	4b07      	ldr	r3, [pc, #28]	; (8004948 <HAL_I2C_Slave_Transmit_IT+0x5c>)
 800492a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <HAL_I2C_Slave_Transmit_IT+0x60>)
 800492e:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8004930:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8004934:	2105      	movs	r1, #5
 8004936:	f7ff f9d1 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 800493a:	4620      	mov	r0, r4
 800493c:	e000      	b.n	8004940 <HAL_I2C_Slave_Transmit_IT+0x54>
    return HAL_BUSY;
 800493e:	2002      	movs	r0, #2
}
 8004940:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8004942:	2002      	movs	r0, #2
 8004944:	e7fc      	b.n	8004940 <HAL_I2C_Slave_Transmit_IT+0x54>
 8004946:	bf00      	nop
 8004948:	ffff0000 	.word	0xffff0000
 800494c:	08006595 	.word	0x08006595

08004950 <HAL_I2C_Slave_Receive_IT>:
{
 8004950:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004952:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b20      	cmp	r3, #32
 800495a:	d122      	bne.n	80049a2 <HAL_I2C_Slave_Receive_IT+0x52>
    __HAL_LOCK(hi2c);
 800495c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004960:	2b01      	cmp	r3, #1
 8004962:	d020      	beq.n	80049a6 <HAL_I2C_Slave_Receive_IT+0x56>
 8004964:	2301      	movs	r3, #1
 8004966:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800496a:	2322      	movs	r3, #34	; 0x22
 800496c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004970:	2320      	movs	r3, #32
 8004972:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004976:	2400      	movs	r4, #0
 8004978:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800497a:	6805      	ldr	r5, [r0, #0]
 800497c:	686b      	ldr	r3, [r5, #4]
 800497e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004982:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 8004984:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004986:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004988:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800498a:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <HAL_I2C_Slave_Receive_IT+0x5c>)
 800498e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_I2C_Slave_Receive_IT+0x60>)
 8004992:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8004994:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8004998:	2106      	movs	r1, #6
 800499a:	f7ff f99f 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 800499e:	4620      	mov	r0, r4
 80049a0:	e000      	b.n	80049a4 <HAL_I2C_Slave_Receive_IT+0x54>
    return HAL_BUSY;
 80049a2:	2002      	movs	r0, #2
}
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 80049a6:	2002      	movs	r0, #2
 80049a8:	e7fc      	b.n	80049a4 <HAL_I2C_Slave_Receive_IT+0x54>
 80049aa:	bf00      	nop
 80049ac:	ffff0000 	.word	0xffff0000
 80049b0:	08006595 	.word	0x08006595

080049b4 <HAL_I2C_Master_Transmit_DMA>:
{
 80049b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b6:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b8:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80049bc:	b2ed      	uxtb	r5, r5
 80049be:	2d20      	cmp	r5, #32
 80049c0:	f040 808c 	bne.w	8004adc <HAL_I2C_Master_Transmit_DMA+0x128>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80049c4:	6804      	ldr	r4, [r0, #0]
 80049c6:	69a4      	ldr	r4, [r4, #24]
 80049c8:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80049cc:	f040 808a 	bne.w	8004ae4 <HAL_I2C_Master_Transmit_DMA+0x130>
    __HAL_LOCK(hi2c);
 80049d0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80049d4:	2c01      	cmp	r4, #1
 80049d6:	f000 8087 	beq.w	8004ae8 <HAL_I2C_Master_Transmit_DMA+0x134>
 80049da:	4615      	mov	r5, r2
 80049dc:	460e      	mov	r6, r1
 80049de:	4604      	mov	r4, r0
 80049e0:	2201      	movs	r2, #1
 80049e2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049e6:	2221      	movs	r2, #33	; 0x21
 80049e8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049ec:	2210      	movs	r2, #16
 80049ee:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049f2:	2200      	movs	r2, #0
 80049f4:	6442      	str	r2, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80049f6:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049f8:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049fa:	4b3c      	ldr	r3, [pc, #240]	; (8004aec <HAL_I2C_Master_Transmit_DMA+0x138>)
 80049fc:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80049fe:	4b3c      	ldr	r3, [pc, #240]	; (8004af0 <HAL_I2C_Master_Transmit_DMA+0x13c>)
 8004a00:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a02:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2bff      	cmp	r3, #255	; 0xff
 8004a08:	d927      	bls.n	8004a5a <HAL_I2C_Master_Transmit_DMA+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a0a:	23ff      	movs	r3, #255	; 0xff
 8004a0c:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004a0e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
      if (hi2c->hdmatx != NULL)
 8004a12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d038      	beq.n	8004a8a <HAL_I2C_Master_Transmit_DMA+0xd6>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004a18:	4a36      	ldr	r2, [pc, #216]	; (8004af4 <HAL_I2C_Master_Transmit_DMA+0x140>)
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004a1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a1e:	4a36      	ldr	r2, [pc, #216]	; (8004af8 <HAL_I2C_Master_Transmit_DMA+0x144>)
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004a22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a24:	2300      	movs	r3, #0
 8004a26:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004a28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a2a:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004a2c:	6822      	ldr	r2, [r4, #0]
 8004a2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a30:	3228      	adds	r2, #40	; 0x28
 8004a32:	4629      	mov	r1, r5
 8004a34:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a36:	f7fd fea0 	bl	800277a <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	b398      	cbz	r0, 8004aa6 <HAL_I2C_Master_Transmit_DMA+0xf2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a3e:	2320      	movs	r3, #32
 8004a40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a44:	2200      	movs	r2, #0
 8004a46:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a4c:	f043 0310 	orr.w	r3, r3, #16
 8004a50:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004a52:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004a56:	2501      	movs	r5, #1
 8004a58:	e041      	b.n	8004ade <HAL_I2C_Master_Transmit_DMA+0x12a>
      hi2c->XferSize = hi2c->XferCount;
 8004a5a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	8503      	strh	r3, [r0, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 8004a60:	b983      	cbnz	r3, 8004a84 <HAL_I2C_Master_Transmit_DMA+0xd0>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004a62:	4b26      	ldr	r3, [pc, #152]	; (8004afc <HAL_I2C_Master_Transmit_DMA+0x148>)
 8004a64:	6343      	str	r3, [r0, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004a66:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f7ff f919 	bl	8003ca6 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8004a74:	2500      	movs	r5, #0
 8004a76:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f7ff f92d 	bl	8003cdc <I2C_Enable_IRQ>
 8004a82:	e02c      	b.n	8004ade <HAL_I2C_Master_Transmit_DMA+0x12a>
      xfermode = I2C_AUTOEND_MODE;
 8004a84:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004a88:	e7c3      	b.n	8004a12 <HAL_I2C_Master_Transmit_DMA+0x5e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a8a:	2320      	movs	r3, #32
 8004a8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a90:	2200      	movs	r2, #0
 8004a92:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004a96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004a9e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004aa2:	2501      	movs	r5, #1
 8004aa4:	e01b      	b.n	8004ade <HAL_I2C_Master_Transmit_DMA+0x12a>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004aa6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004aaa:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	463b      	mov	r3, r7
 8004ab0:	4631      	mov	r1, r6
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f7ff f8f7 	bl	8003ca6 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8004ab8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004aba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004ac8:	2111      	movs	r1, #17
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7ff f906 	bl	8003cdc <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e000      	b.n	8004ade <HAL_I2C_Master_Transmit_DMA+0x12a>
    return HAL_BUSY;
 8004adc:	2502      	movs	r5, #2
}
 8004ade:	4628      	mov	r0, r5
 8004ae0:	b003      	add	sp, #12
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8004ae4:	2502      	movs	r5, #2
 8004ae6:	e7fa      	b.n	8004ade <HAL_I2C_Master_Transmit_DMA+0x12a>
    __HAL_LOCK(hi2c);
 8004ae8:	2502      	movs	r5, #2
 8004aea:	e7f8      	b.n	8004ade <HAL_I2C_Master_Transmit_DMA+0x12a>
 8004aec:	ffff0000 	.word	0xffff0000
 8004af0:	08006a3d 	.word	0x08006a3d
 8004af4:	08006b89 	.word	0x08006b89
 8004af8:	08006b73 	.word	0x08006b73
 8004afc:	080067bd 	.word	0x080067bd
 8004b00:	80002000 	.word	0x80002000

08004b04 <HAL_I2C_Master_Receive_DMA>:
{
 8004b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b06:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b08:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004b0c:	b2ed      	uxtb	r5, r5
 8004b0e:	2d20      	cmp	r5, #32
 8004b10:	f040 808b 	bne.w	8004c2a <HAL_I2C_Master_Receive_DMA+0x126>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004b14:	6804      	ldr	r4, [r0, #0]
 8004b16:	69a4      	ldr	r4, [r4, #24]
 8004b18:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8004b1c:	f040 8089 	bne.w	8004c32 <HAL_I2C_Master_Receive_DMA+0x12e>
    __HAL_LOCK(hi2c);
 8004b20:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004b24:	2c01      	cmp	r4, #1
 8004b26:	f000 8086 	beq.w	8004c36 <HAL_I2C_Master_Receive_DMA+0x132>
 8004b2a:	460e      	mov	r6, r1
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	2101      	movs	r1, #1
 8004b30:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b34:	2122      	movs	r1, #34	; 0x22
 8004b36:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b40:	2100      	movs	r1, #0
 8004b42:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8004b44:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b46:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b48:	4b3c      	ldr	r3, [pc, #240]	; (8004c3c <HAL_I2C_Master_Receive_DMA+0x138>)
 8004b4a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004b4c:	4b3c      	ldr	r3, [pc, #240]	; (8004c40 <HAL_I2C_Master_Receive_DMA+0x13c>)
 8004b4e:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b50:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2bff      	cmp	r3, #255	; 0xff
 8004b56:	d926      	bls.n	8004ba6 <HAL_I2C_Master_Receive_DMA+0xa2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b58:	23ff      	movs	r3, #255	; 0xff
 8004b5a:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004b5c:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
      if (hi2c->hdmarx != NULL)
 8004b60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d038      	beq.n	8004bd8 <HAL_I2C_Master_Receive_DMA+0xd4>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004b66:	4937      	ldr	r1, [pc, #220]	; (8004c44 <HAL_I2C_Master_Receive_DMA+0x140>)
 8004b68:	62d9      	str	r1, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004b6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b6c:	4936      	ldr	r1, [pc, #216]	; (8004c48 <HAL_I2C_Master_Receive_DMA+0x144>)
 8004b6e:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004b70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b72:	2300      	movs	r3, #0
 8004b74:	630b      	str	r3, [r1, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004b76:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b78:	638b      	str	r3, [r1, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8004b7a:	6821      	ldr	r1, [r4, #0]
 8004b7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004b7e:	3124      	adds	r1, #36	; 0x24
 8004b80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b82:	f7fd fdfa 	bl	800277a <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8004b86:	4605      	mov	r5, r0
 8004b88:	b3a0      	cbz	r0, 8004bf4 <HAL_I2C_Master_Receive_DMA+0xf0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b8a:	2320      	movs	r3, #32
 8004b8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b90:	2200      	movs	r2, #0
 8004b92:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004b96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b98:	f043 0310 	orr.w	r3, r3, #16
 8004b9c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004b9e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004ba2:	2501      	movs	r5, #1
 8004ba4:	e042      	b.n	8004c2c <HAL_I2C_Master_Receive_DMA+0x128>
      hi2c->XferSize = hi2c->XferCount;
 8004ba6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	8503      	strh	r3, [r0, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 8004bac:	b98b      	cbnz	r3, 8004bd2 <HAL_I2C_Master_Receive_DMA+0xce>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004bae:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <HAL_I2C_Master_Receive_DMA+0x148>)
 8004bb0:	6343      	str	r3, [r0, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004bb2:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <HAL_I2C_Master_Receive_DMA+0x14c>)
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	f7ff f872 	bl	8003ca6 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8004bc2:	2500      	movs	r5, #0
 8004bc4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff f886 	bl	8003cdc <I2C_Enable_IRQ>
 8004bd0:	e02c      	b.n	8004c2c <HAL_I2C_Master_Receive_DMA+0x128>
      xfermode = I2C_AUTOEND_MODE;
 8004bd2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004bd6:	e7c3      	b.n	8004b60 <HAL_I2C_Master_Receive_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004bd8:	2320      	movs	r3, #32
 8004bda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bde:	2200      	movs	r2, #0
 8004be0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004be4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bea:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004bec:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004bf0:	2501      	movs	r5, #1
 8004bf2:	e01b      	b.n	8004c2c <HAL_I2C_Master_Receive_DMA+0x128>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004bf4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004bf8:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <HAL_I2C_Master_Receive_DMA+0x14c>)
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4620      	mov	r0, r4
 8004c02:	f7ff f850 	bl	8003ca6 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8004c06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c08:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8004c10:	2300      	movs	r3, #0
 8004c12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004c16:	2111      	movs	r1, #17
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7ff f85f 	bl	8003cdc <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	6813      	ldr	r3, [r2, #0]
 8004c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e000      	b.n	8004c2c <HAL_I2C_Master_Receive_DMA+0x128>
    return HAL_BUSY;
 8004c2a:	2502      	movs	r5, #2
}
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	b003      	add	sp, #12
 8004c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8004c32:	2502      	movs	r5, #2
 8004c34:	e7fa      	b.n	8004c2c <HAL_I2C_Master_Receive_DMA+0x128>
    __HAL_LOCK(hi2c);
 8004c36:	2502      	movs	r5, #2
 8004c38:	e7f8      	b.n	8004c2c <HAL_I2C_Master_Receive_DMA+0x128>
 8004c3a:	bf00      	nop
 8004c3c:	ffff0000 	.word	0xffff0000
 8004c40:	08006a3d 	.word	0x08006a3d
 8004c44:	08006bdf 	.word	0x08006bdf
 8004c48:	08006b73 	.word	0x08006b73
 8004c4c:	080067bd 	.word	0x080067bd
 8004c50:	80002400 	.word	0x80002400

08004c54 <HAL_I2C_Slave_Transmit_DMA>:
{
 8004c54:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d162      	bne.n	8004d26 <HAL_I2C_Slave_Transmit_DMA+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8004c60:	2900      	cmp	r1, #0
 8004c62:	d03b      	beq.n	8004cdc <HAL_I2C_Slave_Transmit_DMA+0x88>
 8004c64:	2a00      	cmp	r2, #0
 8004c66:	d039      	beq.n	8004cdc <HAL_I2C_Slave_Transmit_DMA+0x88>
    __HAL_LOCK(hi2c);
 8004c68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d05d      	beq.n	8004d2c <HAL_I2C_Slave_Transmit_DMA+0xd8>
 8004c70:	2301      	movs	r3, #1
 8004c72:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c76:	2321      	movs	r3, #33	; 0x21
 8004c78:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8004c86:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c88:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c8a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004c8c:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8e:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <HAL_I2C_Slave_Transmit_DMA+0xdc>)
 8004c90:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004c92:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <HAL_I2C_Slave_Transmit_DMA+0xe0>)
 8004c94:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->hdmatx != NULL)
 8004c96:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c98:	b32b      	cbz	r3, 8004ce6 <HAL_I2C_Slave_Transmit_DMA+0x92>
 8004c9a:	4605      	mov	r5, r0
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8004c9c:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <HAL_I2C_Slave_Transmit_DMA+0xe4>)
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004ca0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ca2:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <HAL_I2C_Slave_Transmit_DMA+0xe8>)
 8004ca4:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004ca6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8004cac:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cae:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004cb0:	6802      	ldr	r2, [r0, #0]
 8004cb2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004cb4:	3228      	adds	r2, #40	; 0x28
 8004cb6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004cb8:	f7fd fd5f 	bl	800277a <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	b300      	cbz	r0, 8004d02 <HAL_I2C_Slave_Transmit_DMA+0xae>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004cc0:	2328      	movs	r3, #40	; 0x28
 8004cc2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004ccc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004cce:	f043 0310 	orr.w	r3, r3, #16
 8004cd2:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004cd4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004cd8:	2401      	movs	r4, #1
 8004cda:	e025      	b.n	8004d28 <HAL_I2C_Slave_Transmit_DMA+0xd4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ce0:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004ce2:	2401      	movs	r4, #1
 8004ce4:	e020      	b.n	8004d28 <HAL_I2C_Slave_Transmit_DMA+0xd4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004ce6:	2328      	movs	r3, #40	; 0x28
 8004ce8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004cec:	2200      	movs	r2, #0
 8004cee:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004cf2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf8:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004cfa:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
      return HAL_ERROR;
 8004cfe:	2401      	movs	r4, #1
 8004d00:	e012      	b.n	8004d28 <HAL_I2C_Slave_Transmit_DMA+0xd4>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004d02:	682a      	ldr	r2, [r5, #0]
 8004d04:	6853      	ldr	r3, [r2, #4]
 8004d06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d0a:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hi2c);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d12:	2104      	movs	r1, #4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f7fe ffe1 	bl	8003cdc <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d1a:	682a      	ldr	r2, [r5, #0]
 8004d1c:	6813      	ldr	r3, [r2, #0]
 8004d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d22:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8004d24:	e000      	b.n	8004d28 <HAL_I2C_Slave_Transmit_DMA+0xd4>
    return HAL_BUSY;
 8004d26:	2402      	movs	r4, #2
}
 8004d28:	4620      	mov	r0, r4
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8004d2c:	2402      	movs	r4, #2
 8004d2e:	e7fb      	b.n	8004d28 <HAL_I2C_Slave_Transmit_DMA+0xd4>
 8004d30:	ffff0000 	.word	0xffff0000
 8004d34:	08006939 	.word	0x08006939
 8004d38:	08006235 	.word	0x08006235
 8004d3c:	08006b73 	.word	0x08006b73

08004d40 <HAL_I2C_Slave_Receive_DMA>:
{
 8004d40:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d163      	bne.n	8004e14 <HAL_I2C_Slave_Receive_DMA+0xd4>
    if ((pData == NULL) || (Size == 0U))
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	d03c      	beq.n	8004dca <HAL_I2C_Slave_Receive_DMA+0x8a>
 8004d50:	2a00      	cmp	r2, #0
 8004d52:	d03a      	beq.n	8004dca <HAL_I2C_Slave_Receive_DMA+0x8a>
    __HAL_LOCK(hi2c);
 8004d54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d05e      	beq.n	8004e1a <HAL_I2C_Slave_Receive_DMA+0xda>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004d62:	2322      	movs	r3, #34	; 0x22
 8004d64:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004d68:	2320      	movs	r3, #32
 8004d6a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8004d72:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d74:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d76:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004d78:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d7a:	4b29      	ldr	r3, [pc, #164]	; (8004e20 <HAL_I2C_Slave_Receive_DMA+0xe0>)
 8004d7c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004d7e:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_I2C_Slave_Receive_DMA+0xe4>)
 8004d80:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->hdmarx != NULL)
 8004d82:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d84:	b333      	cbz	r3, 8004dd4 <HAL_I2C_Slave_Receive_DMA+0x94>
 8004d86:	460a      	mov	r2, r1
 8004d88:	4605      	mov	r5, r0
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004d8a:	4927      	ldr	r1, [pc, #156]	; (8004e28 <HAL_I2C_Slave_Receive_DMA+0xe8>)
 8004d8c:	62d9      	str	r1, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004d8e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d90:	4926      	ldr	r1, [pc, #152]	; (8004e2c <HAL_I2C_Slave_Receive_DMA+0xec>)
 8004d92:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004d94:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004d96:	2300      	movs	r3, #0
 8004d98:	630b      	str	r3, [r1, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004d9a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004d9c:	638b      	str	r3, [r1, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8004d9e:	6801      	ldr	r1, [r0, #0]
 8004da0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004da2:	3124      	adds	r1, #36	; 0x24
 8004da4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8004da6:	f7fd fce8 	bl	800277a <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8004daa:	4604      	mov	r4, r0
 8004dac:	b300      	cbz	r0, 8004df0 <HAL_I2C_Slave_Receive_DMA+0xb0>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004dae:	2328      	movs	r3, #40	; 0x28
 8004db0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004db4:	2200      	movs	r2, #0
 8004db6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004dba:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004dbc:	f043 0310 	orr.w	r3, r3, #16
 8004dc0:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004dc2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004dc6:	2401      	movs	r4, #1
 8004dc8:	e025      	b.n	8004e16 <HAL_I2C_Slave_Receive_DMA+0xd6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dce:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004dd0:	2401      	movs	r4, #1
 8004dd2:	e020      	b.n	8004e16 <HAL_I2C_Slave_Receive_DMA+0xd6>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004dd4:	2328      	movs	r3, #40	; 0x28
 8004dd6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004de0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de6:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004de8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
      return HAL_ERROR;
 8004dec:	2401      	movs	r4, #1
 8004dee:	e012      	b.n	8004e16 <HAL_I2C_Slave_Receive_DMA+0xd6>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004df0:	682a      	ldr	r2, [r5, #0]
 8004df2:	6853      	ldr	r3, [r2, #4]
 8004df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004df8:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hi2c);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e00:	2104      	movs	r1, #4
 8004e02:	4628      	mov	r0, r5
 8004e04:	f7fe ff6a 	bl	8003cdc <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004e08:	682a      	ldr	r2, [r5, #0]
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e10:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8004e12:	e000      	b.n	8004e16 <HAL_I2C_Slave_Receive_DMA+0xd6>
    return HAL_BUSY;
 8004e14:	2402      	movs	r4, #2
}
 8004e16:	4620      	mov	r0, r4
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8004e1a:	2402      	movs	r4, #2
 8004e1c:	e7fb      	b.n	8004e16 <HAL_I2C_Slave_Receive_DMA+0xd6>
 8004e1e:	bf00      	nop
 8004e20:	ffff0000 	.word	0xffff0000
 8004e24:	08006939 	.word	0x08006939
 8004e28:	08006251 	.word	0x08006251
 8004e2c:	08006b73 	.word	0x08006b73

08004e30 <HAL_I2C_Mem_Write>:
{
 8004e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e3a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004e3e:	b2ed      	uxtb	r5, r5
 8004e40:	2d20      	cmp	r5, #32
 8004e42:	f040 80bc 	bne.w	8004fbe <HAL_I2C_Mem_Write+0x18e>
    if ((pData == NULL) || (Size == 0U))
 8004e46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e48:	b1dc      	cbz	r4, 8004e82 <HAL_I2C_Mem_Write+0x52>
 8004e4a:	b1d7      	cbz	r7, 8004e82 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8004e4c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004e50:	2c01      	cmp	r4, #1
 8004e52:	f000 80b9 	beq.w	8004fc8 <HAL_I2C_Mem_Write+0x198>
 8004e56:	4698      	mov	r8, r3
 8004e58:	4691      	mov	r9, r2
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	f04f 0a01 	mov.w	sl, #1
 8004e62:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004e66:	f7fd f915 	bl	8002094 <HAL_GetTick>
 8004e6a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e6c:	9000      	str	r0, [sp, #0]
 8004e6e:	2319      	movs	r3, #25
 8004e70:	4652      	mov	r2, sl
 8004e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e76:	4620      	mov	r0, r4
 8004e78:	f7ff f81c 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8004e7c:	b130      	cbz	r0, 8004e8c <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e09e      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e86:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e099      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e8c:	2321      	movs	r3, #33	; 0x21
 8004e8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e92:	2340      	movs	r3, #64	; 0x40
 8004e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e9e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ea0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ea2:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ea4:	9601      	str	r6, [sp, #4]
 8004ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	4643      	mov	r3, r8
 8004eac:	464a      	mov	r2, r9
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7ff f829 	bl	8003f08 <I2C_RequestMemoryWrite>
 8004eb6:	b998      	cbnz	r0, 8004ee0 <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2bff      	cmp	r3, #255	; 0xff
 8004ebe:	d914      	bls.n	8004eea <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ec0:	22ff      	movs	r2, #255	; 0xff
 8004ec2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7fe fee9 	bl	8003ca6 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ed4:	2700      	movs	r7, #0
 8004ed6:	f04f 0880 	mov.w	r8, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004eda:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 8004ede:	e01f      	b.n	8004f20 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004ee6:	4653      	mov	r3, sl
 8004ee8:	e06a      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x190>
      hi2c->XferSize = hi2c->XferCount;
 8004eea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004eec:	b292      	uxth	r2, r2
 8004eee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	4629      	mov	r1, r5
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7fe fed2 	bl	8003ca6 <I2C_TransferConfig>
 8004f02:	e7e7      	b.n	8004ed4 <HAL_I2C_Mem_Write+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 8004f04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f06:	b292      	uxth	r2, r2
 8004f08:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f0a:	9700      	str	r7, [sp, #0]
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	4629      	mov	r1, r5
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7fe fec7 	bl	8003ca6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8004f18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d031      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x154>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f20:	4632      	mov	r2, r6
 8004f22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7fe ff9a 	bl	8003e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d14e      	bne.n	8004fcc <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f32:	7812      	ldrb	r2, [r2, #0]
 8004f34:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f38:	3301      	adds	r3, #1
 8004f3a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004f3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004f44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f4e:	b292      	uxth	r2, r2
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	d0e1      	beq.n	8004f18 <HAL_I2C_Mem_Write+0xe8>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1df      	bne.n	8004f18 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f58:	9600      	str	r6, [sp, #0]
 8004f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f5c:	463a      	mov	r2, r7
 8004f5e:	4641      	mov	r1, r8
 8004f60:	4620      	mov	r0, r4
 8004f62:	f7fe ffa7 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8004f66:	bb98      	cbnz	r0, 8004fd0 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2bff      	cmp	r3, #255	; 0xff
 8004f6e:	d9c9      	bls.n	8004f04 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f70:	22ff      	movs	r2, #255	; 0xff
 8004f72:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f74:	9700      	str	r7, [sp, #0]
 8004f76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f7fe fe92 	bl	8003ca6 <I2C_TransferConfig>
 8004f82:	e7c9      	b.n	8004f18 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f84:	4632      	mov	r2, r6
 8004f86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f7ff f82b 	bl	8003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	bb00      	cbnz	r0, 8004fd4 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	2120      	movs	r1, #32
 8004f96:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8004f98:	6820      	ldr	r0, [r4, #0]
 8004f9a:	6842      	ldr	r2, [r0, #4]
 8004f9c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004fa0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004fa4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004fb8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004fbc:	e000      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x190>
    return HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	b002      	add	sp, #8
 8004fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e7f9      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x190>
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e7f7      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x190>
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e7f5      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x190>
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e7f3      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x190>

08004fd8 <HAL_I2C_Mem_Read>:
{
 8004fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004fe6:	b2ed      	uxtb	r5, r5
 8004fe8:	2d20      	cmp	r5, #32
 8004fea:	f040 80bf 	bne.w	800516c <HAL_I2C_Mem_Read+0x194>
    if ((pData == NULL) || (Size == 0U))
 8004fee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ff0:	b1dc      	cbz	r4, 800502a <HAL_I2C_Mem_Read+0x52>
 8004ff2:	b1d7      	cbz	r7, 800502a <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8004ff4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004ff8:	2c01      	cmp	r4, #1
 8004ffa:	f000 80bc 	beq.w	8005176 <HAL_I2C_Mem_Read+0x19e>
 8004ffe:	4698      	mov	r8, r3
 8005000:	4691      	mov	r9, r2
 8005002:	460d      	mov	r5, r1
 8005004:	4604      	mov	r4, r0
 8005006:	f04f 0a01 	mov.w	sl, #1
 800500a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800500e:	f7fd f841 	bl	8002094 <HAL_GetTick>
 8005012:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005014:	9000      	str	r0, [sp, #0]
 8005016:	2319      	movs	r3, #25
 8005018:	4652      	mov	r2, sl
 800501a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800501e:	4620      	mov	r0, r4
 8005020:	f7fe ff48 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8005024:	b130      	cbz	r0, 8005034 <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e0a1      	b.n	800516e <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800502a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800502e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e09c      	b.n	800516e <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005034:	2322      	movs	r3, #34	; 0x22
 8005036:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800503a:	2340      	movs	r3, #64	; 0x40
 800503c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005040:	2300      	movs	r3, #0
 8005042:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005046:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005048:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800504a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800504c:	9601      	str	r6, [sp, #4]
 800504e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	4643      	mov	r3, r8
 8005054:	464a      	mov	r2, r9
 8005056:	4629      	mov	r1, r5
 8005058:	4620      	mov	r0, r4
 800505a:	f7fe ff8d 	bl	8003f78 <I2C_RequestMemoryRead>
 800505e:	b998      	cbnz	r0, 8005088 <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005060:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	2bff      	cmp	r3, #255	; 0xff
 8005066:	d914      	bls.n	8005092 <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005068:	22ff      	movs	r2, #255	; 0xff
 800506a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800506c:	4b46      	ldr	r3, [pc, #280]	; (8005188 <HAL_I2C_Mem_Read+0x1b0>)
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005074:	4629      	mov	r1, r5
 8005076:	4620      	mov	r0, r4
 8005078:	f7fe fe15 	bl	8003ca6 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800507c:	2700      	movs	r7, #0
 800507e:	f04f 0804 	mov.w	r8, #4
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005082:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005086:	e020      	b.n	80050ca <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8005088:	2300      	movs	r3, #0
 800508a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800508e:	4653      	mov	r3, sl
 8005090:	e06d      	b.n	800516e <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8005092:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005094:	b292      	uxth	r2, r2
 8005096:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005098:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_I2C_Mem_Read+0x1b0>)
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	4629      	mov	r1, r5
 80050a4:	4620      	mov	r0, r4
 80050a6:	f7fe fdfe 	bl	8003ca6 <I2C_TransferConfig>
 80050aa:	e7e7      	b.n	800507c <HAL_I2C_Mem_Read+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 80050ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80050ae:	b292      	uxth	r2, r2
 80050b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050b2:	9700      	str	r7, [sp, #0]
 80050b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	4629      	mov	r1, r5
 80050bc:	4620      	mov	r0, r4
 80050be:	f7fe fdf2 	bl	8003ca6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80050c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d033      	beq.n	8005132 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80050ca:	9600      	str	r6, [sp, #0]
 80050cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050ce:	463a      	mov	r2, r7
 80050d0:	4641      	mov	r1, r8
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7fe feee 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d14e      	bne.n	800517a <HAL_I2C_Mem_Read+0x1a2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80050e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e6:	3301      	adds	r3, #1
 80050e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80050ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80050f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80050f4:	3a01      	subs	r2, #1
 80050f6:	b292      	uxth	r2, r2
 80050f8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80050fc:	b292      	uxth	r2, r2
 80050fe:	2a00      	cmp	r2, #0
 8005100:	d0df      	beq.n	80050c2 <HAL_I2C_Mem_Read+0xea>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1dd      	bne.n	80050c2 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005106:	9600      	str	r6, [sp, #0]
 8005108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800510a:	463a      	mov	r2, r7
 800510c:	4649      	mov	r1, r9
 800510e:	4620      	mov	r0, r4
 8005110:	f7fe fed0 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8005114:	bb98      	cbnz	r0, 800517e <HAL_I2C_Mem_Read+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005116:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2bff      	cmp	r3, #255	; 0xff
 800511c:	d9c6      	bls.n	80050ac <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800511e:	22ff      	movs	r2, #255	; 0xff
 8005120:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005122:	9700      	str	r7, [sp, #0]
 8005124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005128:	4629      	mov	r1, r5
 800512a:	4620      	mov	r0, r4
 800512c:	f7fe fdbb 	bl	8003ca6 <I2C_TransferConfig>
 8005130:	e7c7      	b.n	80050c2 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005132:	4632      	mov	r2, r6
 8005134:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005136:	4620      	mov	r0, r4
 8005138:	f7fe ff54 	bl	8003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	bb00      	cbnz	r0, 8005182 <HAL_I2C_Mem_Read+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	2120      	movs	r1, #32
 8005144:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8005146:	6820      	ldr	r0, [r4, #0]
 8005148:	6842      	ldr	r2, [r0, #4]
 800514a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800514e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005152:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005156:	f022 0201 	bic.w	r2, r2, #1
 800515a:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800515c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005160:	2200      	movs	r2, #0
 8005162:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005166:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800516a:	e000      	b.n	800516e <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
}
 800516e:	4618      	mov	r0, r3
 8005170:	b002      	add	sp, #8
 8005172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005176:	2302      	movs	r3, #2
 8005178:	e7f9      	b.n	800516e <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e7f7      	b.n	800516e <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e7f5      	b.n	800516e <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e7f3      	b.n	800516e <HAL_I2C_Mem_Read+0x196>
 8005186:	bf00      	nop
 8005188:	80002400 	.word	0x80002400

0800518c <HAL_I2C_Mem_Write_IT>:
{
 800518c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005196:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800519a:	b2e4      	uxtb	r4, r4
 800519c:	2c20      	cmp	r4, #32
 800519e:	d159      	bne.n	8005254 <HAL_I2C_Mem_Write_IT+0xc8>
    if ((pData == NULL) || (Size == 0U))
 80051a0:	9c08      	ldr	r4, [sp, #32]
 80051a2:	2c00      	cmp	r4, #0
 80051a4:	d03a      	beq.n	800521c <HAL_I2C_Mem_Write_IT+0x90>
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	d038      	beq.n	800521c <HAL_I2C_Mem_Write_IT+0x90>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80051aa:	6804      	ldr	r4, [r0, #0]
 80051ac:	69a4      	ldr	r4, [r4, #24]
 80051ae:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80051b2:	d154      	bne.n	800525e <HAL_I2C_Mem_Write_IT+0xd2>
    __HAL_LOCK(hi2c);
 80051b4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80051b8:	2c01      	cmp	r4, #1
 80051ba:	d052      	beq.n	8005262 <HAL_I2C_Mem_Write_IT+0xd6>
 80051bc:	4698      	mov	r8, r3
 80051be:	4614      	mov	r4, r2
 80051c0:	460f      	mov	r7, r1
 80051c2:	4605      	mov	r5, r0
 80051c4:	2301      	movs	r3, #1
 80051c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80051ca:	f7fc ff63 	bl	8002094 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051ce:	2321      	movs	r3, #33	; 0x21
 80051d0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80051d4:	2340      	movs	r3, #64	; 0x40
 80051d6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051da:	2300      	movs	r3, #0
 80051dc:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80051de:	9b08      	ldr	r3, [sp, #32]
 80051e0:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051e2:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e4:	4b20      	ldr	r3, [pc, #128]	; (8005268 <HAL_I2C_Mem_Write_IT+0xdc>)
 80051e6:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80051e8:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_I2C_Mem_Write_IT+0xe0>)
 80051ea:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ec:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2bff      	cmp	r3, #255	; 0xff
 80051f2:	d918      	bls.n	8005226 <HAL_I2C_Mem_Write_IT+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051f4:	23ff      	movs	r3, #255	; 0xff
 80051f6:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80051f8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80051fc:	9001      	str	r0, [sp, #4]
 80051fe:	2319      	movs	r3, #25
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4643      	mov	r3, r8
 8005204:	4622      	mov	r2, r4
 8005206:	4639      	mov	r1, r7
 8005208:	4628      	mov	r0, r5
 800520a:	f7fe fe7d 	bl	8003f08 <I2C_RequestMemoryWrite>
 800520e:	4604      	mov	r4, r0
 8005210:	b170      	cbz	r0, 8005230 <HAL_I2C_Mem_Write_IT+0xa4>
      __HAL_UNLOCK(hi2c);
 8005212:	2300      	movs	r3, #0
 8005214:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005218:	2401      	movs	r4, #1
 800521a:	e01c      	b.n	8005256 <HAL_I2C_Mem_Write_IT+0xca>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800521c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005220:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005222:	2401      	movs	r4, #1
 8005224:	e017      	b.n	8005256 <HAL_I2C_Mem_Write_IT+0xca>
      hi2c->XferSize = hi2c->XferCount;
 8005226:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8005228:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800522a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800522e:	e7e5      	b.n	80051fc <HAL_I2C_Mem_Write_IT+0x70>
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005230:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8005234:	f04f 0800 	mov.w	r8, #0
 8005238:	f8cd 8000 	str.w	r8, [sp]
 800523c:	4633      	mov	r3, r6
 800523e:	4639      	mov	r1, r7
 8005240:	4628      	mov	r0, r5
 8005242:	f7fe fd30 	bl	8003ca6 <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8005246:	f885 8040 	strb.w	r8, [r5, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800524a:	2101      	movs	r1, #1
 800524c:	4628      	mov	r0, r5
 800524e:	f7fe fd45 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 8005252:	e000      	b.n	8005256 <HAL_I2C_Mem_Write_IT+0xca>
    return HAL_BUSY;
 8005254:	2402      	movs	r4, #2
}
 8005256:	4620      	mov	r0, r4
 8005258:	b002      	add	sp, #8
 800525a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 800525e:	2402      	movs	r4, #2
 8005260:	e7f9      	b.n	8005256 <HAL_I2C_Mem_Write_IT+0xca>
    __HAL_LOCK(hi2c);
 8005262:	2402      	movs	r4, #2
 8005264:	e7f7      	b.n	8005256 <HAL_I2C_Mem_Write_IT+0xca>
 8005266:	bf00      	nop
 8005268:	ffff0000 	.word	0xffff0000
 800526c:	080067bd 	.word	0x080067bd

08005270 <HAL_I2C_Mem_Read_IT>:
{
 8005270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800527a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800527e:	b2e4      	uxtb	r4, r4
 8005280:	2c20      	cmp	r4, #32
 8005282:	d158      	bne.n	8005336 <HAL_I2C_Mem_Read_IT+0xc6>
    if ((pData == NULL) || (Size == 0U))
 8005284:	9c08      	ldr	r4, [sp, #32]
 8005286:	2c00      	cmp	r4, #0
 8005288:	d03a      	beq.n	8005300 <HAL_I2C_Mem_Read_IT+0x90>
 800528a:	2e00      	cmp	r6, #0
 800528c:	d038      	beq.n	8005300 <HAL_I2C_Mem_Read_IT+0x90>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800528e:	6804      	ldr	r4, [r0, #0]
 8005290:	69a4      	ldr	r4, [r4, #24]
 8005292:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8005296:	d153      	bne.n	8005340 <HAL_I2C_Mem_Read_IT+0xd0>
    __HAL_LOCK(hi2c);
 8005298:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800529c:	2c01      	cmp	r4, #1
 800529e:	d051      	beq.n	8005344 <HAL_I2C_Mem_Read_IT+0xd4>
 80052a0:	4698      	mov	r8, r3
 80052a2:	4614      	mov	r4, r2
 80052a4:	460f      	mov	r7, r1
 80052a6:	4605      	mov	r5, r0
 80052a8:	2301      	movs	r3, #1
 80052aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80052ae:	f7fc fef1 	bl	8002094 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052b2:	2322      	movs	r3, #34	; 0x22
 80052b4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052be:	2300      	movs	r3, #0
 80052c0:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80052c2:	9b08      	ldr	r3, [sp, #32]
 80052c4:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052c6:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052c8:	4b1f      	ldr	r3, [pc, #124]	; (8005348 <HAL_I2C_Mem_Read_IT+0xd8>)
 80052ca:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80052cc:	4b1f      	ldr	r3, [pc, #124]	; (800534c <HAL_I2C_Mem_Read_IT+0xdc>)
 80052ce:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052d0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2bff      	cmp	r3, #255	; 0xff
 80052d6:	d918      	bls.n	800530a <HAL_I2C_Mem_Read_IT+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052d8:	23ff      	movs	r3, #255	; 0xff
 80052da:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80052dc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80052e0:	9001      	str	r0, [sp, #4]
 80052e2:	2319      	movs	r3, #25
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	4643      	mov	r3, r8
 80052e8:	4622      	mov	r2, r4
 80052ea:	4639      	mov	r1, r7
 80052ec:	4628      	mov	r0, r5
 80052ee:	f7fe fe43 	bl	8003f78 <I2C_RequestMemoryRead>
 80052f2:	4604      	mov	r4, r0
 80052f4:	b170      	cbz	r0, 8005314 <HAL_I2C_Mem_Read_IT+0xa4>
      __HAL_UNLOCK(hi2c);
 80052f6:	2300      	movs	r3, #0
 80052f8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80052fc:	2401      	movs	r4, #1
 80052fe:	e01b      	b.n	8005338 <HAL_I2C_Mem_Read_IT+0xc8>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005304:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005306:	2401      	movs	r4, #1
 8005308:	e016      	b.n	8005338 <HAL_I2C_Mem_Read_IT+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 800530a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800530c:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800530e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8005312:	e7e5      	b.n	80052e0 <HAL_I2C_Mem_Read_IT+0x70>
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005314:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8005318:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <HAL_I2C_Mem_Read_IT+0xe0>)
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4633      	mov	r3, r6
 800531e:	4639      	mov	r1, r7
 8005320:	4628      	mov	r0, r5
 8005322:	f7fe fcc0 	bl	8003ca6 <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8005326:	2300      	movs	r3, #0
 8005328:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800532c:	2102      	movs	r1, #2
 800532e:	4628      	mov	r0, r5
 8005330:	f7fe fcd4 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 8005334:	e000      	b.n	8005338 <HAL_I2C_Mem_Read_IT+0xc8>
    return HAL_BUSY;
 8005336:	2402      	movs	r4, #2
}
 8005338:	4620      	mov	r0, r4
 800533a:	b002      	add	sp, #8
 800533c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 8005340:	2402      	movs	r4, #2
 8005342:	e7f9      	b.n	8005338 <HAL_I2C_Mem_Read_IT+0xc8>
    __HAL_LOCK(hi2c);
 8005344:	2402      	movs	r4, #2
 8005346:	e7f7      	b.n	8005338 <HAL_I2C_Mem_Read_IT+0xc8>
 8005348:	ffff0000 	.word	0xffff0000
 800534c:	080067bd 	.word	0x080067bd
 8005350:	80002400 	.word	0x80002400

08005354 <HAL_I2C_Mem_Write_DMA>:
{
 8005354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800535e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005362:	b2e4      	uxtb	r4, r4
 8005364:	2c20      	cmp	r4, #32
 8005366:	f040 8098 	bne.w	800549a <HAL_I2C_Mem_Write_DMA+0x146>
    if ((pData == NULL) || (Size == 0U))
 800536a:	9c08      	ldr	r4, [sp, #32]
 800536c:	2c00      	cmp	r4, #0
 800536e:	d05b      	beq.n	8005428 <HAL_I2C_Mem_Write_DMA+0xd4>
 8005370:	2e00      	cmp	r6, #0
 8005372:	d059      	beq.n	8005428 <HAL_I2C_Mem_Write_DMA+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005374:	6804      	ldr	r4, [r0, #0]
 8005376:	69a4      	ldr	r4, [r4, #24]
 8005378:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800537c:	f040 8092 	bne.w	80054a4 <HAL_I2C_Mem_Write_DMA+0x150>
    __HAL_LOCK(hi2c);
 8005380:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005384:	2c01      	cmp	r4, #1
 8005386:	f000 808f 	beq.w	80054a8 <HAL_I2C_Mem_Write_DMA+0x154>
 800538a:	4698      	mov	r8, r3
 800538c:	4614      	mov	r4, r2
 800538e:	460f      	mov	r7, r1
 8005390:	4605      	mov	r5, r0
 8005392:	2301      	movs	r3, #1
 8005394:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005398:	f7fc fe7c 	bl	8002094 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800539c:	2321      	movs	r3, #33	; 0x21
 800539e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80053a2:	2340      	movs	r3, #64	; 0x40
 80053a4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80053ac:	9b08      	ldr	r3, [sp, #32]
 80053ae:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053b0:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b2:	4b3e      	ldr	r3, [pc, #248]	; (80054ac <HAL_I2C_Mem_Write_DMA+0x158>)
 80053b4:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80053b6:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <HAL_I2C_Mem_Write_DMA+0x15c>)
 80053b8:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ba:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2bff      	cmp	r3, #255	; 0xff
 80053c0:	d937      	bls.n	8005432 <HAL_I2C_Mem_Write_DMA+0xde>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053c2:	23ff      	movs	r3, #255	; 0xff
 80053c4:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80053c6:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80053ca:	9001      	str	r0, [sp, #4]
 80053cc:	2319      	movs	r3, #25
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	4643      	mov	r3, r8
 80053d2:	4622      	mov	r2, r4
 80053d4:	4639      	mov	r1, r7
 80053d6:	4628      	mov	r0, r5
 80053d8:	f7fe fd96 	bl	8003f08 <I2C_RequestMemoryWrite>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d12d      	bne.n	800543c <HAL_I2C_Mem_Write_DMA+0xe8>
    if (hi2c->hdmatx != NULL)
 80053e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02f      	beq.n	8005446 <HAL_I2C_Mem_Write_DMA+0xf2>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80053e6:	4a33      	ldr	r2, [pc, #204]	; (80054b4 <HAL_I2C_Mem_Write_DMA+0x160>)
 80053e8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80053ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80053ec:	4a32      	ldr	r2, [pc, #200]	; (80054b8 <HAL_I2C_Mem_Write_DMA+0x164>)
 80053ee:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80053f0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80053f2:	2300      	movs	r3, #0
 80053f4:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80053f6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80053f8:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80053fa:	682a      	ldr	r2, [r5, #0]
 80053fc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80053fe:	3228      	adds	r2, #40	; 0x28
 8005400:	9908      	ldr	r1, [sp, #32]
 8005402:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005404:	f7fd f9b9 	bl	800277a <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8005408:	4604      	mov	r4, r0
 800540a:	b350      	cbz	r0, 8005462 <HAL_I2C_Mem_Write_DMA+0x10e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800540c:	2320      	movs	r3, #32
 800540e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005412:	2200      	movs	r2, #0
 8005414:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005418:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800541a:	f043 0310 	orr.w	r3, r3, #16
 800541e:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005420:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005424:	2401      	movs	r4, #1
 8005426:	e039      	b.n	800549c <HAL_I2C_Mem_Write_DMA+0x148>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800542c:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800542e:	2401      	movs	r4, #1
 8005430:	e034      	b.n	800549c <HAL_I2C_Mem_Write_DMA+0x148>
      hi2c->XferSize = hi2c->XferCount;
 8005432:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8005434:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005436:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800543a:	e7c6      	b.n	80053ca <HAL_I2C_Mem_Write_DMA+0x76>
      __HAL_UNLOCK(hi2c);
 800543c:	2300      	movs	r3, #0
 800543e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005442:	2401      	movs	r4, #1
 8005444:	e02a      	b.n	800549c <HAL_I2C_Mem_Write_DMA+0x148>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005446:	2320      	movs	r3, #32
 8005448:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800544c:	2200      	movs	r2, #0
 800544e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005452:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005458:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800545a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 800545e:	2401      	movs	r4, #1
 8005460:	e01c      	b.n	800549c <HAL_I2C_Mem_Write_DMA+0x148>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005462:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8005466:	f04f 0800 	mov.w	r8, #0
 800546a:	f8cd 8000 	str.w	r8, [sp]
 800546e:	4633      	mov	r3, r6
 8005470:	4639      	mov	r1, r7
 8005472:	4628      	mov	r0, r5
 8005474:	f7fe fc17 	bl	8003ca6 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8005478:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800547a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	b29b      	uxth	r3, r3
 8005480:	856b      	strh	r3, [r5, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 8005482:	f885 8040 	strb.w	r8, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005486:	2111      	movs	r1, #17
 8005488:	4628      	mov	r0, r5
 800548a:	f7fe fc27 	bl	8003cdc <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800548e:	682a      	ldr	r2, [r5, #0]
 8005490:	6813      	ldr	r3, [r2, #0]
 8005492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005496:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8005498:	e000      	b.n	800549c <HAL_I2C_Mem_Write_DMA+0x148>
    return HAL_BUSY;
 800549a:	2402      	movs	r4, #2
}
 800549c:	4620      	mov	r0, r4
 800549e:	b002      	add	sp, #8
 80054a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 80054a4:	2402      	movs	r4, #2
 80054a6:	e7f9      	b.n	800549c <HAL_I2C_Mem_Write_DMA+0x148>
    __HAL_LOCK(hi2c);
 80054a8:	2402      	movs	r4, #2
 80054aa:	e7f7      	b.n	800549c <HAL_I2C_Mem_Write_DMA+0x148>
 80054ac:	ffff0000 	.word	0xffff0000
 80054b0:	08006a3d 	.word	0x08006a3d
 80054b4:	08006b89 	.word	0x08006b89
 80054b8:	08006b73 	.word	0x08006b73

080054bc <HAL_I2C_Mem_Read_DMA>:
{
 80054bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80054ca:	b2e4      	uxtb	r4, r4
 80054cc:	2c20      	cmp	r4, #32
 80054ce:	f040 8097 	bne.w	8005600 <HAL_I2C_Mem_Read_DMA+0x144>
    if ((pData == NULL) || (Size == 0U))
 80054d2:	9c08      	ldr	r4, [sp, #32]
 80054d4:	2c00      	cmp	r4, #0
 80054d6:	d05b      	beq.n	8005590 <HAL_I2C_Mem_Read_DMA+0xd4>
 80054d8:	2e00      	cmp	r6, #0
 80054da:	d059      	beq.n	8005590 <HAL_I2C_Mem_Read_DMA+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054dc:	6804      	ldr	r4, [r0, #0]
 80054de:	69a4      	ldr	r4, [r4, #24]
 80054e0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80054e4:	f040 8091 	bne.w	800560a <HAL_I2C_Mem_Read_DMA+0x14e>
    __HAL_LOCK(hi2c);
 80054e8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80054ec:	2c01      	cmp	r4, #1
 80054ee:	f000 808e 	beq.w	800560e <HAL_I2C_Mem_Read_DMA+0x152>
 80054f2:	4698      	mov	r8, r3
 80054f4:	4614      	mov	r4, r2
 80054f6:	460f      	mov	r7, r1
 80054f8:	4605      	mov	r5, r0
 80054fa:	2301      	movs	r3, #1
 80054fc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005500:	f7fc fdc8 	bl	8002094 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005504:	2322      	movs	r3, #34	; 0x22
 8005506:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005510:	2300      	movs	r3, #0
 8005512:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8005514:	9b08      	ldr	r3, [sp, #32]
 8005516:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005518:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800551a:	4b3e      	ldr	r3, [pc, #248]	; (8005614 <HAL_I2C_Mem_Read_DMA+0x158>)
 800551c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800551e:	4b3e      	ldr	r3, [pc, #248]	; (8005618 <HAL_I2C_Mem_Read_DMA+0x15c>)
 8005520:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005522:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	2bff      	cmp	r3, #255	; 0xff
 8005528:	d937      	bls.n	800559a <HAL_I2C_Mem_Read_DMA+0xde>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800552a:	23ff      	movs	r3, #255	; 0xff
 800552c:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800552e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005532:	9001      	str	r0, [sp, #4]
 8005534:	2319      	movs	r3, #25
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	4643      	mov	r3, r8
 800553a:	4622      	mov	r2, r4
 800553c:	4639      	mov	r1, r7
 800553e:	4628      	mov	r0, r5
 8005540:	f7fe fd1a 	bl	8003f78 <I2C_RequestMemoryRead>
 8005544:	2800      	cmp	r0, #0
 8005546:	d12d      	bne.n	80055a4 <HAL_I2C_Mem_Read_DMA+0xe8>
    if (hi2c->hdmarx != NULL)
 8005548:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d02f      	beq.n	80055ae <HAL_I2C_Mem_Read_DMA+0xf2>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800554e:	4a33      	ldr	r2, [pc, #204]	; (800561c <HAL_I2C_Mem_Read_DMA+0x160>)
 8005550:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005552:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005554:	4a32      	ldr	r2, [pc, #200]	; (8005620 <HAL_I2C_Mem_Read_DMA+0x164>)
 8005556:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005558:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800555a:	2300      	movs	r3, #0
 800555c:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800555e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005560:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005562:	6829      	ldr	r1, [r5, #0]
 8005564:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005566:	9a08      	ldr	r2, [sp, #32]
 8005568:	3124      	adds	r1, #36	; 0x24
 800556a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800556c:	f7fd f905 	bl	800277a <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8005570:	4604      	mov	r4, r0
 8005572:	b350      	cbz	r0, 80055ca <HAL_I2C_Mem_Read_DMA+0x10e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005574:	2320      	movs	r3, #32
 8005576:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800557a:	2200      	movs	r2, #0
 800557c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005580:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005582:	f043 0310 	orr.w	r3, r3, #16
 8005586:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005588:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 800558c:	2401      	movs	r4, #1
 800558e:	e038      	b.n	8005602 <HAL_I2C_Mem_Read_DMA+0x146>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005594:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005596:	2401      	movs	r4, #1
 8005598:	e033      	b.n	8005602 <HAL_I2C_Mem_Read_DMA+0x146>
      hi2c->XferSize = hi2c->XferCount;
 800559a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800559c:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800559e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80055a2:	e7c6      	b.n	8005532 <HAL_I2C_Mem_Read_DMA+0x76>
      __HAL_UNLOCK(hi2c);
 80055a4:	2300      	movs	r3, #0
 80055a6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80055aa:	2401      	movs	r4, #1
 80055ac:	e029      	b.n	8005602 <HAL_I2C_Mem_Read_DMA+0x146>
      hi2c->State     = HAL_I2C_STATE_READY;
 80055ae:	2320      	movs	r3, #32
 80055b0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055b4:	2200      	movs	r2, #0
 80055b6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80055ba:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80055bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c0:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80055c2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 80055c6:	2401      	movs	r4, #1
 80055c8:	e01b      	b.n	8005602 <HAL_I2C_Mem_Read_DMA+0x146>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80055ca:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80055ce:	4b15      	ldr	r3, [pc, #84]	; (8005624 <HAL_I2C_Mem_Read_DMA+0x168>)
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4633      	mov	r3, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	4628      	mov	r0, r5
 80055d8:	f7fe fb65 	bl	8003ca6 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80055dc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80055de:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	856b      	strh	r3, [r5, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 80055e6:	2300      	movs	r3, #0
 80055e8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80055ec:	2111      	movs	r1, #17
 80055ee:	4628      	mov	r0, r5
 80055f0:	f7fe fb74 	bl	8003cdc <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80055f4:	682a      	ldr	r2, [r5, #0]
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fc:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80055fe:	e000      	b.n	8005602 <HAL_I2C_Mem_Read_DMA+0x146>
    return HAL_BUSY;
 8005600:	2402      	movs	r4, #2
}
 8005602:	4620      	mov	r0, r4
 8005604:	b002      	add	sp, #8
 8005606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 800560a:	2402      	movs	r4, #2
 800560c:	e7f9      	b.n	8005602 <HAL_I2C_Mem_Read_DMA+0x146>
    __HAL_LOCK(hi2c);
 800560e:	2402      	movs	r4, #2
 8005610:	e7f7      	b.n	8005602 <HAL_I2C_Mem_Read_DMA+0x146>
 8005612:	bf00      	nop
 8005614:	ffff0000 	.word	0xffff0000
 8005618:	08006a3d 	.word	0x08006a3d
 800561c:	08006bdf 	.word	0x08006bdf
 8005620:	08006b73 	.word	0x08006b73
 8005624:	80002400 	.word	0x80002400

08005628 <HAL_I2C_IsDeviceReady>:
{
 8005628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800562c:	b085      	sub	sp, #20
  __IO uint32_t I2C_Trials = 0UL;
 800562e:	2400      	movs	r4, #0
 8005630:	9403      	str	r4, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005632:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 8005636:	b2f6      	uxtb	r6, r6
 8005638:	2e20      	cmp	r6, #32
 800563a:	f040 809e 	bne.w	800577a <HAL_I2C_IsDeviceReady+0x152>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800563e:	6804      	ldr	r4, [r0, #0]
 8005640:	69a4      	ldr	r4, [r4, #24]
 8005642:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8005646:	f040 809d 	bne.w	8005784 <HAL_I2C_IsDeviceReady+0x15c>
    __HAL_LOCK(hi2c);
 800564a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800564e:	2c01      	cmp	r4, #1
 8005650:	f000 809a 	beq.w	8005788 <HAL_I2C_IsDeviceReady+0x160>
 8005654:	461d      	mov	r5, r3
 8005656:	4690      	mov	r8, r2
 8005658:	4604      	mov	r4, r0
 800565a:	2301      	movs	r3, #1
 800565c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005660:	2324      	movs	r3, #36	; 0x24
 8005662:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005666:	2300      	movs	r3, #0
 8005668:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800566a:	f3c1 0709 	ubfx	r7, r1, #0, #10
 800566e:	f447 5920 	orr.w	r9, r7, #10240	; 0x2800
 8005672:	e03b      	b.n	80056ec <HAL_I2C_IsDeviceReady+0xc4>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005678:	6999      	ldr	r1, [r3, #24]
 800567a:	f001 0110 	and.w	r1, r1, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800567e:	f012 0f20 	tst.w	r2, #32
 8005682:	d116      	bne.n	80056b2 <HAL_I2C_IsDeviceReady+0x8a>
 8005684:	b9a9      	cbnz	r1, 80056b2 <HAL_I2C_IsDeviceReady+0x8a>
        if (Timeout != HAL_MAX_DELAY)
 8005686:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800568a:	d0f3      	beq.n	8005674 <HAL_I2C_IsDeviceReady+0x4c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800568c:	f7fc fd02 	bl	8002094 <HAL_GetTick>
 8005690:	1b80      	subs	r0, r0, r6
 8005692:	42a8      	cmp	r0, r5
 8005694:	d801      	bhi.n	800569a <HAL_I2C_IsDeviceReady+0x72>
 8005696:	2d00      	cmp	r5, #0
 8005698:	d1ec      	bne.n	8005674 <HAL_I2C_IsDeviceReady+0x4c>
            hi2c->State = HAL_I2C_STATE_READY;
 800569a:	2320      	movs	r3, #32
 800569c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056a2:	f043 0320 	orr.w	r3, r3, #32
 80056a6:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 80056a8:	2300      	movs	r3, #0
 80056aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e064      	b.n	800577c <HAL_I2C_IsDeviceReady+0x154>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f013 0f10 	tst.w	r3, #16
 80056ba:	d02f      	beq.n	800571c <HAL_I2C_IsDeviceReady+0xf4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056bc:	9600      	str	r6, [sp, #0]
 80056be:	462b      	mov	r3, r5
 80056c0:	2200      	movs	r2, #0
 80056c2:	2120      	movs	r1, #32
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7fe fbf5 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d160      	bne.n	8005790 <HAL_I2C_IsDeviceReady+0x168>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	2210      	movs	r2, #16
 80056d2:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	2220      	movs	r2, #32
 80056d8:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 80056da:	9b03      	ldr	r3, [sp, #12]
 80056dc:	4543      	cmp	r3, r8
 80056de:	d02f      	beq.n	8005740 <HAL_I2C_IsDeviceReady+0x118>
      I2C_Trials++;
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	9303      	str	r3, [sp, #12]
    while (I2C_Trials < Trials);
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	4543      	cmp	r3, r8
 80056ea:	d23a      	bcs.n	8005762 <HAL_I2C_IsDeviceReady+0x13a>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80056ec:	68e3      	ldr	r3, [r4, #12]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	bf06      	itte	eq
 80056f2:	f047 7300 	orreq.w	r3, r7, #33554432	; 0x2000000
 80056f6:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 80056fa:	464b      	movne	r3, r9
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8005700:	f7fc fcc8 	bl	8002094 <HAL_GetTick>
 8005704:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005710:	f012 0f20 	tst.w	r2, #32
 8005714:	d1cd      	bne.n	80056b2 <HAL_I2C_IsDeviceReady+0x8a>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0b5      	beq.n	8005686 <HAL_I2C_IsDeviceReady+0x5e>
 800571a:	e7ca      	b.n	80056b2 <HAL_I2C_IsDeviceReady+0x8a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800571c:	9600      	str	r6, [sp, #0]
 800571e:	462b      	mov	r3, r5
 8005720:	2200      	movs	r2, #0
 8005722:	2120      	movs	r1, #32
 8005724:	4620      	mov	r0, r4
 8005726:	f7fe fbc5 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	bb70      	cbnz	r0, 800578c <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800572e:	6821      	ldr	r1, [r4, #0]
 8005730:	2220      	movs	r2, #32
 8005732:	61ca      	str	r2, [r1, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8005734:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8005738:	2200      	movs	r2, #0
 800573a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_OK;
 800573e:	e01d      	b.n	800577c <HAL_I2C_IsDeviceReady+0x154>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005740:	6822      	ldr	r2, [r4, #0]
 8005742:	6853      	ldr	r3, [r2, #4]
 8005744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005748:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800574a:	9600      	str	r6, [sp, #0]
 800574c:	462b      	mov	r3, r5
 800574e:	2200      	movs	r2, #0
 8005750:	2120      	movs	r1, #32
 8005752:	4620      	mov	r0, r4
 8005754:	f7fe fbae 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8005758:	b9e0      	cbnz	r0, 8005794 <HAL_I2C_IsDeviceReady+0x16c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	2220      	movs	r2, #32
 800575e:	61da      	str	r2, [r3, #28]
 8005760:	e7be      	b.n	80056e0 <HAL_I2C_IsDeviceReady+0xb8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005762:	2320      	movs	r3, #32
 8005764:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005768:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800576a:	f043 0320 	orr.w	r3, r3, #32
 800576e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8005770:	2300      	movs	r3, #0
 8005772:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_I2C_IsDeviceReady+0x154>
    return HAL_BUSY;
 800577a:	2302      	movs	r3, #2
}
 800577c:	4618      	mov	r0, r3
 800577e:	b005      	add	sp, #20
 8005780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
 8005786:	e7f9      	b.n	800577c <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 8005788:	2302      	movs	r3, #2
 800578a:	e7f7      	b.n	800577c <HAL_I2C_IsDeviceReady+0x154>
          return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e7f5      	b.n	800577c <HAL_I2C_IsDeviceReady+0x154>
          return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e7f3      	b.n	800577c <HAL_I2C_IsDeviceReady+0x154>
          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e7f1      	b.n	800577c <HAL_I2C_IsDeviceReady+0x154>

08005798 <HAL_I2C_Master_Seq_Transmit_IT>:
{
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 800579c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80057a0:	b2e4      	uxtb	r4, r4
 80057a2:	2c20      	cmp	r4, #32
 80057a4:	d149      	bne.n	800583a <HAL_I2C_Master_Seq_Transmit_IT+0xa2>
    __HAL_LOCK(hi2c);
 80057a6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80057aa:	2c01      	cmp	r4, #1
 80057ac:	d048      	beq.n	8005840 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
 80057ae:	2401      	movs	r4, #1
 80057b0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057b4:	2421      	movs	r4, #33	; 0x21
 80057b6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057ba:	2410      	movs	r4, #16
 80057bc:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c0:	2400      	movs	r4, #0
 80057c2:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80057c4:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057c6:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80057c8:	9b06      	ldr	r3, [sp, #24]
 80057ca:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80057cc:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <HAL_I2C_Master_Seq_Transmit_IT+0xac>)
 80057ce:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2bff      	cmp	r3, #255	; 0xff
 80057d6:	d910      	bls.n	80057fa <HAL_I2C_Master_Seq_Transmit_IT+0x62>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057d8:	23ff      	movs	r3, #255	; 0xff
 80057da:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80057dc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80057e0:	460d      	mov	r5, r1
 80057e2:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 80057e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80057e6:	2b11      	cmp	r3, #17
 80057e8:	d10b      	bne.n	8005802 <HAL_I2C_Master_Seq_Transmit_IT+0x6a>
 80057ea:	9b06      	ldr	r3, [sp, #24]
 80057ec:	2baa      	cmp	r3, #170	; 0xaa
 80057ee:	d008      	beq.n	8005802 <HAL_I2C_Master_Seq_Transmit_IT+0x6a>
 80057f0:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80057f4:	d005      	beq.n	8005802 <HAL_I2C_Master_Seq_Transmit_IT+0x6a>
      xferrequest = I2C_NO_STARTSTOP;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e00c      	b.n	8005814 <HAL_I2C_Master_Seq_Transmit_IT+0x7c>
      hi2c->XferSize = hi2c->XferCount;
 80057fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80057fc:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 80057fe:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8005800:	e7ee      	b.n	80057e0 <HAL_I2C_Master_Seq_Transmit_IT+0x48>
      I2C_ConvertOtherXferOptions(hi2c);
 8005802:	4620      	mov	r0, r4
 8005804:	f7fe fad5 	bl	8003db2 <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 8005808:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2bfe      	cmp	r3, #254	; 0xfe
 800580e:	d812      	bhi.n	8005836 <HAL_I2C_Master_Seq_Transmit_IT+0x9e>
        xfermode = hi2c->XferOptions;
 8005810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8005812:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <HAL_I2C_Master_Seq_Transmit_IT+0xb0>)
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8005814:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	4633      	mov	r3, r6
 800581c:	4629      	mov	r1, r5
 800581e:	4620      	mov	r0, r4
 8005820:	f7fe fa41 	bl	8003ca6 <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8005824:	2500      	movs	r5, #0
 8005826:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800582a:	2101      	movs	r1, #1
 800582c:	4620      	mov	r0, r4
 800582e:	f7fe fa55 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 8005832:	4628      	mov	r0, r5
 8005834:	e002      	b.n	800583c <HAL_I2C_Master_Seq_Transmit_IT+0xa4>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8005836:	4b04      	ldr	r3, [pc, #16]	; (8005848 <HAL_I2C_Master_Seq_Transmit_IT+0xb0>)
 8005838:	e7ec      	b.n	8005814 <HAL_I2C_Master_Seq_Transmit_IT+0x7c>
    return HAL_BUSY;
 800583a:	2002      	movs	r0, #2
}
 800583c:	b002      	add	sp, #8
 800583e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 8005840:	2002      	movs	r0, #2
 8005842:	e7fb      	b.n	800583c <HAL_I2C_Master_Seq_Transmit_IT+0xa4>
 8005844:	080067bd 	.word	0x080067bd
 8005848:	80002000 	.word	0x80002000

0800584c <HAL_I2C_Master_Seq_Transmit_DMA>:
{
 800584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005852:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005856:	b2e4      	uxtb	r4, r4
 8005858:	2c20      	cmp	r4, #32
 800585a:	f040 809c 	bne.w	8005996 <HAL_I2C_Master_Seq_Transmit_DMA+0x14a>
    __HAL_LOCK(hi2c);
 800585e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005862:	2c01      	cmp	r4, #1
 8005864:	f000 809c 	beq.w	80059a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x154>
 8005868:	2401      	movs	r4, #1
 800586a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800586e:	2421      	movs	r4, #33	; 0x21
 8005870:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005874:	2410      	movs	r4, #16
 8005876:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800587a:	2400      	movs	r4, #0
 800587c:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800587e:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005880:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8005882:	9b08      	ldr	r3, [sp, #32]
 8005884:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005886:	4b47      	ldr	r3, [pc, #284]	; (80059a4 <HAL_I2C_Master_Seq_Transmit_DMA+0x158>)
 8005888:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800588a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	2bff      	cmp	r3, #255	; 0xff
 8005890:	d911      	bls.n	80058b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x6a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005892:	23ff      	movs	r3, #255	; 0xff
 8005894:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005896:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 800589a:	4615      	mov	r5, r2
 800589c:	4688      	mov	r8, r1
 800589e:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 80058a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80058a2:	2b11      	cmp	r3, #17
 80058a4:	d10b      	bne.n	80058be <HAL_I2C_Master_Seq_Transmit_DMA+0x72>
 80058a6:	9b08      	ldr	r3, [sp, #32]
 80058a8:	2baa      	cmp	r3, #170	; 0xaa
 80058aa:	d008      	beq.n	80058be <HAL_I2C_Master_Seq_Transmit_DMA+0x72>
 80058ac:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80058b0:	d005      	beq.n	80058be <HAL_I2C_Master_Seq_Transmit_DMA+0x72>
      xferrequest = I2C_NO_STARTSTOP;
 80058b2:	2600      	movs	r6, #0
 80058b4:	e00c      	b.n	80058d0 <HAL_I2C_Master_Seq_Transmit_DMA+0x84>
      hi2c->XferSize = hi2c->XferCount;
 80058b6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80058b8:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 80058ba:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80058bc:	e7ed      	b.n	800589a <HAL_I2C_Master_Seq_Transmit_DMA+0x4e>
      I2C_ConvertOtherXferOptions(hi2c);
 80058be:	4620      	mov	r0, r4
 80058c0:	f7fe fa77 	bl	8003db2 <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 80058c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2bfe      	cmp	r3, #254	; 0xfe
 80058ca:	d827      	bhi.n	800591c <HAL_I2C_Master_Seq_Transmit_DMA+0xd0>
        xfermode = hi2c->XferOptions;
 80058cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 80058ce:	4e36      	ldr	r6, [pc, #216]	; (80059a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x15c>)
    if (hi2c->XferSize > 0U)
 80058d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d04c      	beq.n	8005970 <HAL_I2C_Master_Seq_Transmit_DMA+0x124>
      if (hi2c->hdmatx != NULL)
 80058d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058d8:	b313      	cbz	r3, 8005920 <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80058da:	4a34      	ldr	r2, [pc, #208]	; (80059ac <HAL_I2C_Master_Seq_Transmit_DMA+0x160>)
 80058dc:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80058de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058e0:	4a33      	ldr	r2, [pc, #204]	; (80059b0 <HAL_I2C_Master_Seq_Transmit_DMA+0x164>)
 80058e2:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80058e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058e6:	2300      	movs	r3, #0
 80058e8:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80058ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058ec:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058f2:	3228      	adds	r2, #40	; 0x28
 80058f4:	4629      	mov	r1, r5
 80058f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80058f8:	f7fc ff3f 	bl	800277a <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80058fc:	4605      	mov	r5, r0
 80058fe:	b1e8      	cbz	r0, 800593c <HAL_I2C_Master_Seq_Transmit_DMA+0xf0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005900:	2320      	movs	r3, #32
 8005902:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005906:	2200      	movs	r2, #0
 8005908:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800590c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800590e:	f043 0310 	orr.w	r3, r3, #16
 8005912:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005914:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005918:	2501      	movs	r5, #1
 800591a:	e03d      	b.n	8005998 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800591c:	4e22      	ldr	r6, [pc, #136]	; (80059a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x15c>)
 800591e:	e7d7      	b.n	80058d0 <HAL_I2C_Master_Seq_Transmit_DMA+0x84>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005920:	2320      	movs	r3, #32
 8005922:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005926:	2200      	movs	r2, #0
 8005928:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800592c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800592e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005932:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005934:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005938:	2501      	movs	r5, #1
 800593a:	e02d      	b.n	8005998 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800593c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005940:	9600      	str	r6, [sp, #0]
 8005942:	463b      	mov	r3, r7
 8005944:	4641      	mov	r1, r8
 8005946:	4620      	mov	r0, r4
 8005948:	f7fe f9ad 	bl	8003ca6 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 800594c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800594e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	b29b      	uxth	r3, r3
 8005954:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8005956:	2300      	movs	r3, #0
 8005958:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800595c:	2111      	movs	r1, #17
 800595e:	4620      	mov	r0, r4
 8005960:	f7fe f9bc 	bl	8003cdc <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	e013      	b.n	8005998 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005970:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x168>)
 8005972:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x15c>)
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800597c:	2200      	movs	r2, #0
 800597e:	4641      	mov	r1, r8
 8005980:	4620      	mov	r0, r4
 8005982:	f7fe f990 	bl	8003ca6 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8005986:	2500      	movs	r5, #0
 8005988:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800598c:	2101      	movs	r1, #1
 800598e:	4620      	mov	r0, r4
 8005990:	f7fe f9a4 	bl	8003cdc <I2C_Enable_IRQ>
 8005994:	e000      	b.n	8005998 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
    return HAL_BUSY;
 8005996:	2502      	movs	r5, #2
}
 8005998:	4628      	mov	r0, r5
 800599a:	b002      	add	sp, #8
 800599c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 80059a0:	2502      	movs	r5, #2
 80059a2:	e7f9      	b.n	8005998 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
 80059a4:	08006a3d 	.word	0x08006a3d
 80059a8:	80002000 	.word	0x80002000
 80059ac:	08006b89 	.word	0x08006b89
 80059b0:	08006b73 	.word	0x08006b73
 80059b4:	080067bd 	.word	0x080067bd

080059b8 <HAL_I2C_Master_Seq_Receive_IT>:
{
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80059bc:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80059c0:	b2e4      	uxtb	r4, r4
 80059c2:	2c20      	cmp	r4, #32
 80059c4:	d149      	bne.n	8005a5a <HAL_I2C_Master_Seq_Receive_IT+0xa2>
    __HAL_LOCK(hi2c);
 80059c6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80059ca:	2c01      	cmp	r4, #1
 80059cc:	d048      	beq.n	8005a60 <HAL_I2C_Master_Seq_Receive_IT+0xa8>
 80059ce:	2401      	movs	r4, #1
 80059d0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d4:	2422      	movs	r4, #34	; 0x22
 80059d6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059da:	2410      	movs	r4, #16
 80059dc:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e0:	2400      	movs	r4, #0
 80059e2:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80059e4:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059e6:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80059e8:	9b06      	ldr	r3, [sp, #24]
 80059ea:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80059ec:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <HAL_I2C_Master_Seq_Receive_IT+0xac>)
 80059ee:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059f0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2bff      	cmp	r3, #255	; 0xff
 80059f6:	d910      	bls.n	8005a1a <HAL_I2C_Master_Seq_Receive_IT+0x62>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059f8:	23ff      	movs	r3, #255	; 0xff
 80059fa:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80059fc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8005a00:	460d      	mov	r5, r1
 8005a02:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8005a04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005a06:	2b12      	cmp	r3, #18
 8005a08:	d10b      	bne.n	8005a22 <HAL_I2C_Master_Seq_Receive_IT+0x6a>
 8005a0a:	9b06      	ldr	r3, [sp, #24]
 8005a0c:	2baa      	cmp	r3, #170	; 0xaa
 8005a0e:	d008      	beq.n	8005a22 <HAL_I2C_Master_Seq_Receive_IT+0x6a>
 8005a10:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8005a14:	d005      	beq.n	8005a22 <HAL_I2C_Master_Seq_Receive_IT+0x6a>
      xferrequest = I2C_NO_STARTSTOP;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e00c      	b.n	8005a34 <HAL_I2C_Master_Seq_Receive_IT+0x7c>
      hi2c->XferSize = hi2c->XferCount;
 8005a1a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005a1c:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8005a1e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8005a20:	e7ee      	b.n	8005a00 <HAL_I2C_Master_Seq_Receive_IT+0x48>
      I2C_ConvertOtherXferOptions(hi2c);
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7fe f9c5 	bl	8003db2 <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 8005a28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2bfe      	cmp	r3, #254	; 0xfe
 8005a2e:	d812      	bhi.n	8005a56 <HAL_I2C_Master_Seq_Receive_IT+0x9e>
        xfermode = hi2c->XferOptions;
 8005a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8005a32:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <HAL_I2C_Master_Seq_Receive_IT+0xb0>)
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8005a34:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	4633      	mov	r3, r6
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f7fe f931 	bl	8003ca6 <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8005a44:	2500      	movs	r5, #0
 8005a46:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f7fe f945 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 8005a52:	4628      	mov	r0, r5
 8005a54:	e002      	b.n	8005a5c <HAL_I2C_Master_Seq_Receive_IT+0xa4>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <HAL_I2C_Master_Seq_Receive_IT+0xb0>)
 8005a58:	e7ec      	b.n	8005a34 <HAL_I2C_Master_Seq_Receive_IT+0x7c>
    return HAL_BUSY;
 8005a5a:	2002      	movs	r0, #2
}
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 8005a60:	2002      	movs	r0, #2
 8005a62:	e7fb      	b.n	8005a5c <HAL_I2C_Master_Seq_Receive_IT+0xa4>
 8005a64:	080067bd 	.word	0x080067bd
 8005a68:	80002400 	.word	0x80002400

08005a6c <HAL_I2C_Master_Seq_Receive_DMA>:
{
 8005a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a70:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a72:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005a76:	b2e4      	uxtb	r4, r4
 8005a78:	2c20      	cmp	r4, #32
 8005a7a:	f040 809c 	bne.w	8005bb6 <HAL_I2C_Master_Seq_Receive_DMA+0x14a>
    __HAL_LOCK(hi2c);
 8005a7e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005a82:	2c01      	cmp	r4, #1
 8005a84:	f000 809c 	beq.w	8005bc0 <HAL_I2C_Master_Seq_Receive_DMA+0x154>
 8005a88:	2401      	movs	r4, #1
 8005a8a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a8e:	2422      	movs	r4, #34	; 0x22
 8005a90:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a94:	2410      	movs	r4, #16
 8005a96:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a9a:	2400      	movs	r4, #0
 8005a9c:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8005a9e:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005aa0:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8005aa2:	9b08      	ldr	r3, [sp, #32]
 8005aa4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_I2C_Master_Seq_Receive_DMA+0x158>)
 8005aa8:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aaa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2bff      	cmp	r3, #255	; 0xff
 8005ab0:	d911      	bls.n	8005ad6 <HAL_I2C_Master_Seq_Receive_DMA+0x6a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ab2:	23ff      	movs	r3, #255	; 0xff
 8005ab4:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005ab6:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8005aba:	4615      	mov	r5, r2
 8005abc:	4688      	mov	r8, r1
 8005abe:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8005ac0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005ac2:	2b12      	cmp	r3, #18
 8005ac4:	d10b      	bne.n	8005ade <HAL_I2C_Master_Seq_Receive_DMA+0x72>
 8005ac6:	9b08      	ldr	r3, [sp, #32]
 8005ac8:	2baa      	cmp	r3, #170	; 0xaa
 8005aca:	d008      	beq.n	8005ade <HAL_I2C_Master_Seq_Receive_DMA+0x72>
 8005acc:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8005ad0:	d005      	beq.n	8005ade <HAL_I2C_Master_Seq_Receive_DMA+0x72>
      xferrequest = I2C_NO_STARTSTOP;
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	e00c      	b.n	8005af0 <HAL_I2C_Master_Seq_Receive_DMA+0x84>
      hi2c->XferSize = hi2c->XferCount;
 8005ad6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005ad8:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8005ada:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8005adc:	e7ed      	b.n	8005aba <HAL_I2C_Master_Seq_Receive_DMA+0x4e>
      I2C_ConvertOtherXferOptions(hi2c);
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f7fe f967 	bl	8003db2 <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 8005ae4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2bfe      	cmp	r3, #254	; 0xfe
 8005aea:	d827      	bhi.n	8005b3c <HAL_I2C_Master_Seq_Receive_DMA+0xd0>
        xfermode = hi2c->XferOptions;
 8005aec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8005aee:	4e36      	ldr	r6, [pc, #216]	; (8005bc8 <HAL_I2C_Master_Seq_Receive_DMA+0x15c>)
    if (hi2c->XferSize > 0U)
 8005af0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d04c      	beq.n	8005b90 <HAL_I2C_Master_Seq_Receive_DMA+0x124>
      if (hi2c->hdmarx != NULL)
 8005af6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005af8:	b313      	cbz	r3, 8005b40 <HAL_I2C_Master_Seq_Receive_DMA+0xd4>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005afa:	4a34      	ldr	r2, [pc, #208]	; (8005bcc <HAL_I2C_Master_Seq_Receive_DMA+0x160>)
 8005afc:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005afe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b00:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <HAL_I2C_Master_Seq_Receive_DMA+0x164>)
 8005b02:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b06:	2300      	movs	r3, #0
 8005b08:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005b0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b0c:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005b0e:	6821      	ldr	r1, [r4, #0]
 8005b10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005b12:	462a      	mov	r2, r5
 8005b14:	3124      	adds	r1, #36	; 0x24
 8005b16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005b18:	f7fc fe2f 	bl	800277a <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	b1e8      	cbz	r0, 8005b5c <HAL_I2C_Master_Seq_Receive_DMA+0xf0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005b20:	2320      	movs	r3, #32
 8005b22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b26:	2200      	movs	r2, #0
 8005b28:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b2e:	f043 0310 	orr.w	r3, r3, #16
 8005b32:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005b34:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005b38:	2501      	movs	r5, #1
 8005b3a:	e03d      	b.n	8005bb8 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8005b3c:	4e22      	ldr	r6, [pc, #136]	; (8005bc8 <HAL_I2C_Master_Seq_Receive_DMA+0x15c>)
 8005b3e:	e7d7      	b.n	8005af0 <HAL_I2C_Master_Seq_Receive_DMA+0x84>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005b40:	2320      	movs	r3, #32
 8005b42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b46:	2200      	movs	r2, #0
 8005b48:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005b4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b52:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005b54:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005b58:	2501      	movs	r5, #1
 8005b5a:	e02d      	b.n	8005bb8 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8005b5c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005b60:	9600      	str	r6, [sp, #0]
 8005b62:	463b      	mov	r3, r7
 8005b64:	4641      	mov	r1, r8
 8005b66:	4620      	mov	r0, r4
 8005b68:	f7fe f89d 	bl	8003ca6 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8005b6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b6e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8005b76:	2300      	movs	r3, #0
 8005b78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005b7c:	2111      	movs	r1, #17
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f7fe f8ac 	bl	8003cdc <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005b84:	6822      	ldr	r2, [r4, #0]
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e013      	b.n	8005bb8 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005b90:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <HAL_I2C_Master_Seq_Receive_DMA+0x168>)
 8005b92:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <HAL_I2C_Master_Seq_Receive_DMA+0x15c>)
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4641      	mov	r1, r8
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f7fe f880 	bl	8003ca6 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005bac:	2101      	movs	r1, #1
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f7fe f894 	bl	8003cdc <I2C_Enable_IRQ>
 8005bb4:	e000      	b.n	8005bb8 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
    return HAL_BUSY;
 8005bb6:	2502      	movs	r5, #2
}
 8005bb8:	4628      	mov	r0, r5
 8005bba:	b002      	add	sp, #8
 8005bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8005bc0:	2502      	movs	r5, #2
 8005bc2:	e7f9      	b.n	8005bb8 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
 8005bc4:	08006a3d 	.word	0x08006a3d
 8005bc8:	80002400 	.word	0x80002400
 8005bcc:	08006bdf 	.word	0x08006bdf
 8005bd0:	08006b73 	.word	0x08006b73
 8005bd4:	080067bd 	.word	0x080067bd

08005bd8 <HAL_I2C_Slave_Seq_Transmit_IT>:
{
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bda:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005bde:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8005be2:	2c28      	cmp	r4, #40	; 0x28
 8005be4:	d001      	beq.n	8005bea <HAL_I2C_Slave_Seq_Transmit_IT+0x12>
    return HAL_ERROR;
 8005be6:	2001      	movs	r0, #1
}
 8005be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8005bea:	b101      	cbz	r1, 8005bee <HAL_I2C_Slave_Seq_Transmit_IT+0x16>
 8005bec:	b922      	cbnz	r2, 8005bf8 <HAL_I2C_Slave_Seq_Transmit_IT+0x20>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf2:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	e7f7      	b.n	8005be8 <HAL_I2C_Slave_Seq_Transmit_IT+0x10>
 8005bf8:	461f      	mov	r7, r3
 8005bfa:	4616      	mov	r6, r2
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	4604      	mov	r4, r0
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c00:	2105      	movs	r1, #5
 8005c02:	f7fe f8a5 	bl	8003d50 <I2C_Disable_IRQ>
    __HAL_LOCK(hi2c);
 8005c06:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d046      	beq.n	8005c9c <HAL_I2C_Slave_Seq_Transmit_IT+0xc4>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c14:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1c:	d023      	beq.n	8005c66 <HAL_I2C_Slave_Seq_Transmit_IT+0x8e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8005c1e:	2329      	movs	r3, #41	; 0x29
 8005c20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005c24:	2320      	movs	r3, #32
 8005c26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	6853      	ldr	r3, [r2, #4]
 8005c32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c36:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8005c38:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c3a:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c3e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005c40:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005c42:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <HAL_I2C_Slave_Seq_Transmit_IT+0xc8>)
 8005c44:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c4e:	bf1c      	itt	ne
 8005c50:	2208      	movne	r2, #8
 8005c52:	61da      	strne	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005c54:	2500      	movs	r5, #0
 8005c56:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8005c5a:	2105      	movs	r1, #5
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f7fe f83d 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 8005c62:	4628      	mov	r0, r5
 8005c64:	e7c0      	b.n	8005be8 <HAL_I2C_Slave_Seq_Transmit_IT+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c66:	2102      	movs	r1, #2
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7fe f871 	bl	8003d50 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005c76:	d0d2      	beq.n	8005c1e <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c7e:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmarx != NULL)
 8005c80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0cb      	beq.n	8005c1e <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c86:	4a07      	ldr	r2, [pc, #28]	; (8005ca4 <HAL_I2C_Slave_Seq_Transmit_IT+0xcc>)
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005c8c:	f7fc fde7 	bl	800285e <HAL_DMA_Abort_IT>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d0c4      	beq.n	8005c1e <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c94:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005c96:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005c98:	4798      	blx	r3
 8005c9a:	e7c0      	b.n	8005c1e <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
    __HAL_LOCK(hi2c);
 8005c9c:	2002      	movs	r0, #2
 8005c9e:	e7a3      	b.n	8005be8 <HAL_I2C_Slave_Seq_Transmit_IT+0x10>
 8005ca0:	08006595 	.word	0x08006595
 8005ca4:	08006cbb 	.word	0x08006cbb

08005ca8 <HAL_I2C_Slave_Seq_Transmit_DMA>:
{
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005caa:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8005cae:	f005 0528 	and.w	r5, r5, #40	; 0x28
 8005cb2:	2d28      	cmp	r5, #40	; 0x28
 8005cb4:	d002      	beq.n	8005cbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x14>
    return HAL_ERROR;
 8005cb6:	2501      	movs	r5, #1
}
 8005cb8:	4628      	mov	r0, r5
 8005cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d05e      	beq.n	8005d7e <HAL_I2C_Slave_Seq_Transmit_DMA+0xd6>
 8005cc0:	2a00      	cmp	r2, #0
 8005cc2:	d05c      	beq.n	8005d7e <HAL_I2C_Slave_Seq_Transmit_DMA+0xd6>
    __HAL_LOCK(hi2c);
 8005cc4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005cc8:	2c01      	cmp	r4, #1
 8005cca:	f000 80af 	beq.w	8005e2c <HAL_I2C_Slave_Seq_Transmit_DMA+0x184>
 8005cce:	461f      	mov	r7, r3
 8005cd0:	4616      	mov	r6, r2
 8005cd2:	460d      	mov	r5, r1
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005cdc:	2105      	movs	r1, #5
 8005cde:	f7fe f837 	bl	8003d50 <I2C_Disable_IRQ>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ce2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cea:	d04d      	beq.n	8005d88 <HAL_I2C_Slave_Seq_Transmit_DMA+0xe0>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005cec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b29      	cmp	r3, #41	; 0x29
 8005cf4:	d064      	beq.n	8005dc0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8005cf6:	2329      	movs	r3, #41	; 0x29
 8005cf8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	6853      	ldr	r3, [r2, #4]
 8005d0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d0e:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8005d10:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d12:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d16:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005d18:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005d1a:	4b45      	ldr	r3, [pc, #276]	; (8005e30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x188>)
 8005d1c:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->hdmatx != NULL)
 8005d1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d064      	beq.n	8005dee <HAL_I2C_Slave_Seq_Transmit_DMA+0x146>
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005d24:	4a43      	ldr	r2, [pc, #268]	; (8005e34 <HAL_I2C_Slave_Seq_Transmit_DMA+0x18c>)
 8005d26:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005d28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d2a:	4a43      	ldr	r2, [pc, #268]	; (8005e38 <HAL_I2C_Slave_Seq_Transmit_DMA+0x190>)
 8005d2c:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005d2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d30:	2300      	movs	r3, #0
 8005d32:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005d34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d36:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005d38:	6822      	ldr	r2, [r4, #0]
 8005d3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d3c:	3228      	adds	r2, #40	; 0x28
 8005d3e:	4629      	mov	r1, r5
 8005d40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005d42:	f7fc fd1a 	bl	800277a <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8005d46:	4605      	mov	r5, r0
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d15e      	bne.n	8005e0a <HAL_I2C_Slave_Seq_Transmit_DMA+0x162>
      hi2c->XferCount -= hi2c->XferSize;
 8005d4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d4e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	8523      	strh	r3, [r4, #40]	; 0x28
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005d62:	d160      	bne.n	8005e26 <HAL_I2C_Slave_Seq_Transmit_DMA+0x17e>
    __HAL_UNLOCK(hi2c);
 8005d64:	2300      	movs	r3, #0
 8005d66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d6a:	2104      	movs	r1, #4
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f7fd ffb5 	bl	8003cdc <I2C_Enable_IRQ>
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	6813      	ldr	r3, [r2, #0]
 8005d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d7a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8005d7c:	e79c      	b.n	8005cb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d82:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005d84:	2501      	movs	r5, #1
 8005d86:	e797      	b.n	8005cb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d88:	2102      	movs	r1, #2
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f7fd ffe0 	bl	8003d50 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005d98:	d0ad      	beq.n	8005cf6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
        if (hi2c->hdmarx != NULL)
 8005d9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	d0aa      	beq.n	8005cf6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005da6:	601a      	str	r2, [r3, #0]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005daa:	4a24      	ldr	r2, [pc, #144]	; (8005e3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x194>)
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005db0:	f7fc fd55 	bl	800285e <HAL_DMA_Abort_IT>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d09e      	beq.n	8005cf6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005db8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005dba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005dbc:	4798      	blx	r3
 8005dbe:	e79a      	b.n	8005cf6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005dc8:	d095      	beq.n	8005cf6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dd0:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 8005dd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d08e      	beq.n	8005cf6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005dd8:	4a18      	ldr	r2, [pc, #96]	; (8005e3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x194>)
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ddc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005dde:	f7fc fd3e 	bl	800285e <HAL_DMA_Abort_IT>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d087      	beq.n	8005cf6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005de6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005de8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005dea:	4798      	blx	r3
 8005dec:	e783      	b.n	8005cf6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005dee:	2328      	movs	r3, #40	; 0x28
 8005df0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005df4:	2200      	movs	r2, #0
 8005df6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005dfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e00:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005e02:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005e06:	2501      	movs	r5, #1
 8005e08:	e756      	b.n	8005cb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005e0a:	2328      	movs	r3, #40	; 0x28
 8005e0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005e10:	2200      	movs	r2, #0
 8005e12:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e18:	f043 0310 	orr.w	r3, r3, #16
 8005e1c:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005e1e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005e22:	2501      	movs	r5, #1
 8005e24:	e748      	b.n	8005cb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e26:	2208      	movs	r2, #8
 8005e28:	61da      	str	r2, [r3, #28]
 8005e2a:	e79b      	b.n	8005d64 <HAL_I2C_Slave_Seq_Transmit_DMA+0xbc>
    __HAL_LOCK(hi2c);
 8005e2c:	2502      	movs	r5, #2
 8005e2e:	e743      	b.n	8005cb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
 8005e30:	08006939 	.word	0x08006939
 8005e34:	08006235 	.word	0x08006235
 8005e38:	08006b73 	.word	0x08006b73
 8005e3c:	08006cbb 	.word	0x08006cbb

08005e40 <HAL_I2C_Slave_Seq_Receive_IT>:
{
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e42:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005e46:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8005e4a:	2c28      	cmp	r4, #40	; 0x28
 8005e4c:	d001      	beq.n	8005e52 <HAL_I2C_Slave_Seq_Receive_IT+0x12>
    return HAL_ERROR;
 8005e4e:	2001      	movs	r0, #1
}
 8005e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8005e52:	b101      	cbz	r1, 8005e56 <HAL_I2C_Slave_Seq_Receive_IT+0x16>
 8005e54:	b922      	cbnz	r2, 8005e60 <HAL_I2C_Slave_Seq_Receive_IT+0x20>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e5a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	e7f7      	b.n	8005e50 <HAL_I2C_Slave_Seq_Receive_IT+0x10>
 8005e60:	461f      	mov	r7, r3
 8005e62:	4616      	mov	r6, r2
 8005e64:	460d      	mov	r5, r1
 8005e66:	4604      	mov	r4, r0
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e68:	2106      	movs	r1, #6
 8005e6a:	f7fd ff71 	bl	8003d50 <I2C_Disable_IRQ>
    __HAL_LOCK(hi2c);
 8005e6e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d046      	beq.n	8005f04 <HAL_I2C_Slave_Seq_Receive_IT+0xc4>
 8005e76:	2301      	movs	r3, #1
 8005e78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005e7c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b29      	cmp	r3, #41	; 0x29
 8005e84:	d023      	beq.n	8005ece <HAL_I2C_Slave_Seq_Receive_IT+0x8e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8005e86:	232a      	movs	r3, #42	; 0x2a
 8005e88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	6853      	ldr	r3, [r2, #4]
 8005e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e9e:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8005ea0:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ea2:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ea4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ea6:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005ea8:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005eaa:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <HAL_I2C_Slave_Seq_Receive_IT+0xc8>)
 8005eac:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005eb6:	bf04      	itt	eq
 8005eb8:	2208      	moveq	r2, #8
 8005eba:	61da      	streq	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ebc:	2500      	movs	r5, #0
 8005ebe:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005ec2:	2106      	movs	r1, #6
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7fd ff09 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 8005eca:	4628      	mov	r0, r5
 8005ecc:	e7c0      	b.n	8005e50 <HAL_I2C_Slave_Seq_Receive_IT+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ece:	2101      	movs	r1, #1
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f7fd ff3d 	bl	8003d50 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005ede:	d0d2      	beq.n	8005e86 <HAL_I2C_Slave_Seq_Receive_IT+0x46>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ee6:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 8005ee8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0cb      	beq.n	8005e86 <HAL_I2C_Slave_Seq_Receive_IT+0x46>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005eee:	4a07      	ldr	r2, [pc, #28]	; (8005f0c <HAL_I2C_Slave_Seq_Receive_IT+0xcc>)
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ef2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ef4:	f7fc fcb3 	bl	800285e <HAL_DMA_Abort_IT>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d0c4      	beq.n	8005e86 <HAL_I2C_Slave_Seq_Receive_IT+0x46>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005efc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005efe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005f00:	4798      	blx	r3
 8005f02:	e7c0      	b.n	8005e86 <HAL_I2C_Slave_Seq_Receive_IT+0x46>
    __HAL_LOCK(hi2c);
 8005f04:	2002      	movs	r0, #2
 8005f06:	e7a3      	b.n	8005e50 <HAL_I2C_Slave_Seq_Receive_IT+0x10>
 8005f08:	08006595 	.word	0x08006595
 8005f0c:	08006cbb 	.word	0x08006cbb

08005f10 <HAL_I2C_Slave_Seq_Receive_DMA>:
{
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f12:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005f16:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8005f1a:	2c28      	cmp	r4, #40	; 0x28
 8005f1c:	d002      	beq.n	8005f24 <HAL_I2C_Slave_Seq_Receive_DMA+0x14>
    return HAL_ERROR;
 8005f1e:	2501      	movs	r5, #1
}
 8005f20:	4628      	mov	r0, r5
 8005f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8005f24:	b101      	cbz	r1, 8005f28 <HAL_I2C_Slave_Seq_Receive_DMA+0x18>
 8005f26:	b922      	cbnz	r2, 8005f32 <HAL_I2C_Slave_Seq_Receive_DMA+0x22>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2c:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005f2e:	2501      	movs	r5, #1
 8005f30:	e7f6      	b.n	8005f20 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
 8005f32:	461f      	mov	r7, r3
 8005f34:	4616      	mov	r6, r2
 8005f36:	460d      	mov	r5, r1
 8005f38:	4604      	mov	r4, r0
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005f3a:	2106      	movs	r1, #6
 8005f3c:	f7fd ff08 	bl	8003d50 <I2C_Disable_IRQ>
    __HAL_LOCK(hi2c);
 8005f40:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	f000 80a3 	beq.w	8006090 <HAL_I2C_Slave_Seq_Receive_DMA+0x180>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005f50:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b29      	cmp	r3, #41	; 0x29
 8005f58:	d048      	beq.n	8005fec <HAL_I2C_Slave_Seq_Receive_DMA+0xdc>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f5a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b2a      	cmp	r3, #42	; 0x2a
 8005f62:	d05f      	beq.n	8006024 <HAL_I2C_Slave_Seq_Receive_DMA+0x114>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8005f64:	232a      	movs	r3, #42	; 0x2a
 8005f66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005f6a:	2320      	movs	r3, #32
 8005f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005f74:	6822      	ldr	r2, [r4, #0]
 8005f76:	6853      	ldr	r3, [r2, #4]
 8005f78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f7c:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8005f7e:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f80:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f84:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005f86:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005f88:	4b42      	ldr	r3, [pc, #264]	; (8006094 <HAL_I2C_Slave_Seq_Receive_DMA+0x184>)
 8005f8a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->hdmarx != NULL)
 8005f8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d05f      	beq.n	8006052 <HAL_I2C_Slave_Seq_Receive_DMA+0x142>
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005f92:	4a41      	ldr	r2, [pc, #260]	; (8006098 <HAL_I2C_Slave_Seq_Receive_DMA+0x188>)
 8005f94:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005f96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f98:	4a40      	ldr	r2, [pc, #256]	; (800609c <HAL_I2C_Slave_Seq_Receive_DMA+0x18c>)
 8005f9a:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005f9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005fa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005fa4:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005fa6:	6821      	ldr	r1, [r4, #0]
 8005fa8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005faa:	462a      	mov	r2, r5
 8005fac:	3124      	adds	r1, #36	; 0x24
 8005fae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005fb0:	f7fc fbe3 	bl	800277a <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d159      	bne.n	800606e <HAL_I2C_Slave_Seq_Receive_DMA+0x15e>
      hi2c->XferCount -= hi2c->XferSize;
 8005fba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fbc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	8523      	strh	r3, [r4, #40]	; 0x28
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005fd0:	d05b      	beq.n	800608a <HAL_I2C_Slave_Seq_Receive_DMA+0x17a>
    __HAL_UNLOCK(hi2c);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005fd8:	2106      	movs	r1, #6
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7fd fe7e 	bl	8003cdc <I2C_Enable_IRQ>
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005fe0:	6822      	ldr	r2, [r4, #0]
 8005fe2:	6813      	ldr	r3, [r2, #0]
 8005fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe8:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8005fea:	e799      	b.n	8005f20 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fec:	2101      	movs	r1, #1
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f7fd feae 	bl	8003d50 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005ffc:	d0b2      	beq.n	8005f64 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
        if (hi2c->hdmatx != NULL)
 8005ffe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006000:	2a00      	cmp	r2, #0
 8006002:	d0af      	beq.n	8005f64 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800600a:	601a      	str	r2, [r3, #0]
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800600c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800600e:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <HAL_I2C_Slave_Seq_Receive_DMA+0x190>)
 8006010:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006012:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006014:	f7fc fc23 	bl	800285e <HAL_DMA_Abort_IT>
 8006018:	2800      	cmp	r0, #0
 800601a:	d0a3      	beq.n	8005f64 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800601c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800601e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006020:	4798      	blx	r3
 8006022:	e79f      	b.n	8005f64 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800602c:	d09a      	beq.n	8005f64 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006034:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmarx != NULL)
 8006036:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d093      	beq.n	8005f64 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800603c:	4a18      	ldr	r2, [pc, #96]	; (80060a0 <HAL_I2C_Slave_Seq_Receive_DMA+0x190>)
 800603e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006040:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006042:	f7fc fc0c 	bl	800285e <HAL_DMA_Abort_IT>
 8006046:	2800      	cmp	r0, #0
 8006048:	d08c      	beq.n	8005f64 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800604a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800604c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800604e:	4798      	blx	r3
 8006050:	e788      	b.n	8005f64 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006052:	2328      	movs	r3, #40	; 0x28
 8006054:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006058:	2200      	movs	r2, #0
 800605a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800605e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006066:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800606a:	2501      	movs	r5, #1
 800606c:	e758      	b.n	8005f20 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800606e:	2328      	movs	r3, #40	; 0x28
 8006070:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006074:	2200      	movs	r2, #0
 8006076:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800607a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800607c:	f043 0310 	orr.w	r3, r3, #16
 8006080:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006082:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006086:	2501      	movs	r5, #1
 8006088:	e74a      	b.n	8005f20 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800608a:	2208      	movs	r2, #8
 800608c:	61da      	str	r2, [r3, #28]
 800608e:	e7a0      	b.n	8005fd2 <HAL_I2C_Slave_Seq_Receive_DMA+0xc2>
    __HAL_LOCK(hi2c);
 8006090:	2502      	movs	r5, #2
 8006092:	e745      	b.n	8005f20 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
 8006094:	08006939 	.word	0x08006939
 8006098:	08006251 	.word	0x08006251
 800609c:	08006b73 	.word	0x08006b73
 80060a0:	08006cbb 	.word	0x08006cbb

080060a4 <HAL_I2C_EnableListen_IT>:
{
 80060a4:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d001      	beq.n	80060b4 <HAL_I2C_EnableListen_IT+0x10>
    return HAL_BUSY;
 80060b0:	2002      	movs	r0, #2
}
 80060b2:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80060b4:	2328      	movs	r3, #40	; 0x28
 80060b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80060ba:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <HAL_I2C_EnableListen_IT+0x24>)
 80060bc:	6343      	str	r3, [r0, #52]	; 0x34
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80060be:	2104      	movs	r1, #4
 80060c0:	f7fd fe0c 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 80060c4:	2000      	movs	r0, #0
 80060c6:	e7f4      	b.n	80060b2 <HAL_I2C_EnableListen_IT+0xe>
 80060c8:	08006595 	.word	0x08006595

080060cc <HAL_I2C_DisableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80060cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b28      	cmp	r3, #40	; 0x28
 80060d4:	d001      	beq.n	80060da <HAL_I2C_DisableListen_IT+0xe>
    return HAL_BUSY;
 80060d6:	2002      	movs	r0, #2
}
 80060d8:	4770      	bx	lr
{
 80060da:	b510      	push	{r4, lr}
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 80060dc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 80060e0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80060e4:	f002 0203 	and.w	r2, r2, #3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80060ec:	2320      	movs	r3, #32
 80060ee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f2:	2400      	movs	r4, #0
 80060f4:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->XferISR = NULL;
 80060f8:	6344      	str	r4, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80060fa:	2104      	movs	r1, #4
 80060fc:	f7fd fe28 	bl	8003d50 <I2C_Disable_IRQ>
    return HAL_OK;
 8006100:	4620      	mov	r0, r4
}
 8006102:	bd10      	pop	{r4, pc}

08006104 <HAL_I2C_Master_Abort_IT>:
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8006104:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b10      	cmp	r3, #16
 800610c:	d001      	beq.n	8006112 <HAL_I2C_Master_Abort_IT+0xe>
    return HAL_ERROR;
 800610e:	2001      	movs	r0, #1
 8006110:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006112:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006116:	2b01      	cmp	r3, #1
 8006118:	d023      	beq.n	8006162 <HAL_I2C_Master_Abort_IT+0x5e>
{
 800611a:	b570      	push	{r4, r5, r6, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	460d      	mov	r5, r1
 8006120:	4604      	mov	r4, r0
    __HAL_LOCK(hi2c);
 8006122:	2601      	movs	r6, #1
 8006124:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006128:	2102      	movs	r1, #2
 800612a:	f7fd fe11 	bl	8003d50 <I2C_Disable_IRQ>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800612e:	4631      	mov	r1, r6
 8006130:	4620      	mov	r0, r4
 8006132:	f7fd fe0d 	bl	8003d50 <I2C_Disable_IRQ>
    hi2c->State = HAL_I2C_STATE_ABORT;
 8006136:	2360      	movs	r3, #96	; 0x60
 8006138:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <HAL_I2C_Master_Abort_IT+0x64>)
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006144:	4632      	mov	r2, r6
 8006146:	4629      	mov	r1, r5
 8006148:	4620      	mov	r0, r4
 800614a:	f7fd fdac 	bl	8003ca6 <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 800614e:	2500      	movs	r5, #0
 8006150:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006154:	2112      	movs	r1, #18
 8006156:	4620      	mov	r0, r4
 8006158:	f7fd fdc0 	bl	8003cdc <I2C_Enable_IRQ>
    return HAL_OK;
 800615c:	4628      	mov	r0, r5
}
 800615e:	b002      	add	sp, #8
 8006160:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 8006162:	2002      	movs	r0, #2
}
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	80004000 	.word	0x80004000

0800616c <HAL_I2C_EV_IRQHandler>:
{
 800616c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800616e:	6803      	ldr	r3, [r0, #0]
 8006170:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006172:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006174:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006176:	b103      	cbz	r3, 800617a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006178:	4798      	blx	r3
}
 800617a:	bd08      	pop	{r3, pc}

0800617c <HAL_I2C_MasterTxCpltCallback>:
}
 800617c:	4770      	bx	lr

0800617e <HAL_I2C_MasterRxCpltCallback>:
}
 800617e:	4770      	bx	lr

08006180 <I2C_ITMasterSeqCplt>:
{
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006184:	2300      	movs	r3, #0
 8006186:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800618a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b21      	cmp	r3, #33	; 0x21
 8006192:	d00f      	beq.n	80061b4 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006194:	2320      	movs	r3, #32
 8006196:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800619a:	2312      	movs	r3, #18
 800619c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800619e:	2500      	movs	r5, #0
 80061a0:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061a2:	2102      	movs	r1, #2
 80061a4:	f7fd fdd4 	bl	8003d50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061a8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7ff ffe6 	bl	800617e <HAL_I2C_MasterRxCpltCallback>
}
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 80061b4:	2320      	movs	r3, #32
 80061b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80061ba:	2311      	movs	r3, #17
 80061bc:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80061be:	2500      	movs	r5, #0
 80061c0:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061c2:	2101      	movs	r1, #1
 80061c4:	f7fd fdc4 	bl	8003d50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061c8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7ff ffd5 	bl	800617c <HAL_I2C_MasterTxCpltCallback>
 80061d2:	e7ee      	b.n	80061b2 <I2C_ITMasterSeqCplt+0x32>

080061d4 <HAL_I2C_SlaveTxCpltCallback>:
}
 80061d4:	4770      	bx	lr

080061d6 <HAL_I2C_SlaveRxCpltCallback>:
}
 80061d6:	4770      	bx	lr

080061d8 <I2C_ITSlaveSeqCplt>:
{
 80061d8:	b510      	push	{r4, lr}
 80061da:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061dc:	2300      	movs	r3, #0
 80061de:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80061e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b29      	cmp	r3, #41	; 0x29
 80061ea:	d005      	beq.n	80061f8 <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b2a      	cmp	r3, #42	; 0x2a
 80061f4:	d00f      	beq.n	8006216 <I2C_ITSlaveSeqCplt+0x3e>
}
 80061f6:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061f8:	2328      	movs	r3, #40	; 0x28
 80061fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061fe:	2321      	movs	r3, #33	; 0x21
 8006200:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006202:	2101      	movs	r1, #1
 8006204:	f7fd fda4 	bl	8003d50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006208:	2300      	movs	r3, #0
 800620a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800620e:	4620      	mov	r0, r4
 8006210:	f7ff ffe0 	bl	80061d4 <HAL_I2C_SlaveTxCpltCallback>
 8006214:	e7ef      	b.n	80061f6 <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006216:	2328      	movs	r3, #40	; 0x28
 8006218:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800621c:	2322      	movs	r3, #34	; 0x22
 800621e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006220:	2102      	movs	r1, #2
 8006222:	f7fd fd95 	bl	8003d50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006226:	2300      	movs	r3, #0
 8006228:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff ffd2 	bl	80061d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006232:	e7e0      	b.n	80061f6 <I2C_ITSlaveSeqCplt+0x1e>

08006234 <I2C_DMASlaveTransmitCplt>:
{
 8006234:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006236:	6a80      	ldr	r0, [r0, #40]	; 0x28
  uint32_t tmpoptions = hi2c->XferOptions;
 8006238:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800623a:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 800623e:	d106      	bne.n	800624e <I2C_DMASlaveTransmitCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006240:	6802      	ldr	r2, [r0, #0]
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006248:	6013      	str	r3, [r2, #0]
    I2C_ITSlaveSeqCplt(hi2c);
 800624a:	f7ff ffc5 	bl	80061d8 <I2C_ITSlaveSeqCplt>
}
 800624e:	bd08      	pop	{r3, pc}

08006250 <I2C_DMASlaveReceiveCplt>:
{
 8006250:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006252:	6a80      	ldr	r0, [r0, #40]	; 0x28
  uint32_t tmpoptions = hi2c->XferOptions;
 8006254:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
 8006256:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	b94b      	cbnz	r3, 8006272 <I2C_DMASlaveReceiveCplt+0x22>
 800625e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006262:	d006      	beq.n	8006272 <I2C_DMASlaveReceiveCplt+0x22>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006264:	6802      	ldr	r2, [r0, #0]
 8006266:	6813      	ldr	r3, [r2, #0]
 8006268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800626c:	6013      	str	r3, [r2, #0]
    I2C_ITSlaveSeqCplt(hi2c);
 800626e:	f7ff ffb3 	bl	80061d8 <I2C_ITSlaveSeqCplt>
}
 8006272:	bd08      	pop	{r3, pc}

08006274 <HAL_I2C_AddrCallback>:
}
 8006274:	4770      	bx	lr

08006276 <I2C_ITAddrCplt>:
{
 8006276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006278:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800627c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006280:	2b28      	cmp	r3, #40	; 0x28
 8006282:	d006      	beq.n	8006292 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006284:	6803      	ldr	r3, [r0, #0]
 8006286:	2208      	movs	r2, #8
 8006288:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800628a:	2300      	movs	r3, #0
 800628c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8006290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006292:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8006294:	6803      	ldr	r3, [r0, #0]
 8006296:	699e      	ldr	r6, [r3, #24]
 8006298:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	0c12      	lsrs	r2, r2, #16
 80062a0:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80062a4:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80062a6:	68df      	ldr	r7, [r3, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062a8:	68c1      	ldr	r1, [r0, #12]
 80062aa:	2902      	cmp	r1, #2
 80062ac:	d124      	bne.n	80062f8 <I2C_ITAddrCplt+0x82>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80062ae:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80062b2:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80062b6:	f015 0f06 	tst.w	r5, #6
 80062ba:	d110      	bne.n	80062de <I2C_ITAddrCplt+0x68>
        hi2c->AddrEventCount++;
 80062bc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80062be:	3101      	adds	r1, #1
 80062c0:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80062c2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80062c4:	2902      	cmp	r1, #2
 80062c6:	d1e3      	bne.n	8006290 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 80062c8:	2100      	movs	r1, #0
 80062ca:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80062cc:	2008      	movs	r0, #8
 80062ce:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80062d0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062d4:	4631      	mov	r1, r6
 80062d6:	4620      	mov	r0, r4
 80062d8:	f7ff ffcc 	bl	8006274 <HAL_I2C_AddrCallback>
 80062dc:	e7d8      	b.n	8006290 <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80062de:	2104      	movs	r1, #4
 80062e0:	f7fd fd36 	bl	8003d50 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80062e4:	2300      	movs	r3, #0
 80062e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062ea:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80062ee:	4631      	mov	r1, r6
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7ff ffbf 	bl	8006274 <HAL_I2C_AddrCallback>
 80062f6:	e7cb      	b.n	8006290 <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80062f8:	2104      	movs	r1, #4
 80062fa:	f7fd fd29 	bl	8003d50 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80062fe:	2300      	movs	r3, #0
 8006300:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006304:	462a      	mov	r2, r5
 8006306:	4631      	mov	r1, r6
 8006308:	4620      	mov	r0, r4
 800630a:	f7ff ffb3 	bl	8006274 <HAL_I2C_AddrCallback>
 800630e:	e7bf      	b.n	8006290 <I2C_ITAddrCplt+0x1a>

08006310 <HAL_I2C_ListenCpltCallback>:
}
 8006310:	4770      	bx	lr
	...

08006314 <I2C_ITListenCplt>:
{
 8006314:	b510      	push	{r4, lr}
 8006316:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006318:	4b16      	ldr	r3, [pc, #88]	; (8006374 <I2C_ITListenCplt+0x60>)
 800631a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800631c:	2300      	movs	r3, #0
 800631e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006320:	2220      	movs	r2, #32
 8006322:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006326:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800632a:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800632c:	f011 0f04 	tst.w	r1, #4
 8006330:	d012      	beq.n	8006358 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006332:	6803      	ldr	r3, [r0, #0]
 8006334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006336:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006338:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800633a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800633c:	3301      	adds	r3, #1
 800633e:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006340:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8006342:	b14b      	cbz	r3, 8006358 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8006344:	3b01      	subs	r3, #1
 8006346:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8006348:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800634a:	3b01      	subs	r3, #1
 800634c:	b29b      	uxth	r3, r3
 800634e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006350:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006352:	f043 0304 	orr.w	r3, r3, #4
 8006356:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006358:	2107      	movs	r1, #7
 800635a:	4620      	mov	r0, r4
 800635c:	f7fd fcf8 	bl	8003d50 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	2210      	movs	r2, #16
 8006364:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006366:	2300      	movs	r3, #0
 8006368:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800636c:	4620      	mov	r0, r4
 800636e:	f7ff ffcf 	bl	8006310 <HAL_I2C_ListenCpltCallback>
}
 8006372:	bd10      	pop	{r4, pc}
 8006374:	ffff0000 	.word	0xffff0000

08006378 <HAL_I2C_MemTxCpltCallback>:
}
 8006378:	4770      	bx	lr

0800637a <HAL_I2C_MemRxCpltCallback>:
}
 800637a:	4770      	bx	lr

0800637c <HAL_I2C_ErrorCallback>:
}
 800637c:	4770      	bx	lr

0800637e <HAL_I2C_AbortCpltCallback>:
}
 800637e:	4770      	bx	lr

08006380 <I2C_ITError>:
{
 8006380:	b510      	push	{r4, lr}
 8006382:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006384:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006388:	2200      	movs	r2, #0
 800638a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800638e:	4836      	ldr	r0, [pc, #216]	; (8006468 <I2C_ITError+0xe8>)
 8006390:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006392:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006394:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006396:	4311      	orrs	r1, r2
 8006398:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800639a:	3b28      	subs	r3, #40	; 0x28
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d822      	bhi.n	80063e8 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063a2:	2103      	movs	r1, #3
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7fd fcd3 	bl	8003d50 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063aa:	2328      	movs	r3, #40	; 0x28
 80063ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80063b4:	4b2d      	ldr	r3, [pc, #180]	; (800646c <I2C_ITError+0xec>)
 80063b6:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80063c0:	d022      	beq.n	8006408 <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063c8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80063ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063cc:	b15b      	cbz	r3, 80063e6 <I2C_ITError+0x66>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063ce:	4a28      	ldr	r2, [pc, #160]	; (8006470 <I2C_ITError+0xf0>)
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80063d2:	2300      	movs	r3, #0
 80063d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063da:	f7fc fa40 	bl	800285e <HAL_DMA_Abort_IT>
 80063de:	b110      	cbz	r0, 80063e6 <I2C_ITError+0x66>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063e4:	4798      	blx	r3
}
 80063e6:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063e8:	2107      	movs	r1, #7
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7fd fcb0 	bl	8003d50 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80063f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 80063f8:	bf1c      	itt	ne
 80063fa:	2320      	movne	r3, #32
 80063fc:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006400:	2300      	movs	r3, #0
 8006402:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006404:	6363      	str	r3, [r4, #52]	; 0x34
 8006406:	e7d7      	b.n	80063b8 <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800640e:	d014      	beq.n	800643a <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006416:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8006418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0e3      	beq.n	80063e6 <I2C_ITError+0x66>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800641e:	4a14      	ldr	r2, [pc, #80]	; (8006470 <I2C_ITError+0xf0>)
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8006422:	2300      	movs	r3, #0
 8006424:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006428:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800642a:	f7fc fa18 	bl	800285e <HAL_DMA_Abort_IT>
 800642e:	2800      	cmp	r0, #0
 8006430:	d0d9      	beq.n	80063e6 <I2C_ITError+0x66>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006432:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006434:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006436:	4798      	blx	r3
 8006438:	e7d5      	b.n	80063e6 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800643a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b60      	cmp	r3, #96	; 0x60
 8006442:	d006      	beq.n	8006452 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8006444:	2300      	movs	r3, #0
 8006446:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff ff96 	bl	800637c <HAL_I2C_ErrorCallback>
}
 8006450:	e7c9      	b.n	80063e6 <I2C_ITError+0x66>
    hi2c->State = HAL_I2C_STATE_READY;
 8006452:	2320      	movs	r3, #32
 8006454:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006458:	2300      	movs	r3, #0
 800645a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff ff8d 	bl	800637e <HAL_I2C_AbortCpltCallback>
 8006464:	e7bf      	b.n	80063e6 <I2C_ITError+0x66>
 8006466:	bf00      	nop
 8006468:	ffff0000 	.word	0xffff0000
 800646c:	08006595 	.word	0x08006595
 8006470:	08006cbb 	.word	0x08006cbb

08006474 <I2C_ITSlaveCplt>:
{
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	4604      	mov	r4, r0
 8006478:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800647a:	6803      	ldr	r3, [r0, #0]
 800647c:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800647e:	2220      	movs	r2, #32
 8006480:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006482:	2107      	movs	r1, #7
 8006484:	f7fd fc64 	bl	8003d50 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	6853      	ldr	r3, [r2, #4]
 800648c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006490:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	6853      	ldr	r3, [r2, #4]
 8006496:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800649a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800649e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7fd fbeb 	bl	8003c84 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064ae:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80064b2:	d03a      	beq.n	800652a <I2C_ITSlaveCplt+0xb6>
    if (hi2c->hdmatx != NULL)
 80064b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064b6:	b11b      	cbz	r3, 80064c0 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80064c0:	f015 0f04 	tst.w	r5, #4
 80064c4:	d010      	beq.n	80064e8 <I2C_ITSlaveCplt+0x74>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80064c6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d4:	3301      	adds	r3, #1
 80064d6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80064d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064da:	b12b      	cbz	r3, 80064e8 <I2C_ITSlaveCplt+0x74>
      hi2c->XferSize--;
 80064dc:	3b01      	subs	r3, #1
 80064de:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80064e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80064e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	b11b      	cbz	r3, 80064f6 <I2C_ITSlaveCplt+0x82>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064f0:	f043 0304 	orr.w	r3, r3, #4
 80064f4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80064fe:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006500:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006502:	b9eb      	cbnz	r3, 8006540 <I2C_ITSlaveCplt+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006506:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800650a:	d127      	bne.n	800655c <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800650c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b22      	cmp	r3, #34	; 0x22
 8006514:	d031      	beq.n	800657a <I2C_ITSlaveCplt+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8006516:	2320      	movs	r3, #32
 8006518:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800651c:	2300      	movs	r3, #0
 800651e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006522:	4620      	mov	r0, r4
 8006524:	f7ff fe56 	bl	80061d4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006528:	e026      	b.n	8006578 <I2C_ITSlaveCplt+0x104>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800652a:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 800652e:	d0c7      	beq.n	80064c0 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8006530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0c4      	beq.n	80064c0 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	b29b      	uxth	r3, r3
 800653c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800653e:	e7bf      	b.n	80064c0 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006540:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff ff1c 	bl	8006380 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006548:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b28      	cmp	r3, #40	; 0x28
 8006550:	d112      	bne.n	8006578 <I2C_ITSlaveCplt+0x104>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006552:	4629      	mov	r1, r5
 8006554:	4620      	mov	r0, r4
 8006556:	f7ff fedd 	bl	8006314 <I2C_ITListenCplt>
 800655a:	e00d      	b.n	8006578 <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 800655c:	4620      	mov	r0, r4
 800655e:	f7ff fe3b 	bl	80061d8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <I2C_ITSlaveCplt+0x11c>)
 8006564:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006566:	2320      	movs	r3, #32
 8006568:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800656c:	2300      	movs	r3, #0
 800656e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006572:	4620      	mov	r0, r4
 8006574:	f7ff fecc 	bl	8006310 <HAL_I2C_ListenCpltCallback>
}
 8006578:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800657a:	2320      	movs	r3, #32
 800657c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006580:	2300      	movs	r3, #0
 8006582:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006586:	4620      	mov	r0, r4
 8006588:	f7ff fe25 	bl	80061d6 <HAL_I2C_SlaveRxCpltCallback>
 800658c:	e7f4      	b.n	8006578 <I2C_ITSlaveCplt+0x104>
 800658e:	bf00      	nop
 8006590:	ffff0000 	.word	0xffff0000

08006594 <I2C_Slave_ISR_IT>:
{
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	4616      	mov	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 8006598:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800659a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800659e:	2b01      	cmp	r3, #1
 80065a0:	f000 8099 	beq.w	80066d6 <I2C_Slave_ISR_IT+0x142>
 80065a4:	4604      	mov	r4, r0
 80065a6:	460d      	mov	r5, r1
 80065a8:	2301      	movs	r3, #1
 80065aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80065ae:	f011 0f10 	tst.w	r1, #16
 80065b2:	d03d      	beq.n	8006630 <I2C_Slave_ISR_IT+0x9c>
 80065b4:	f016 0f10 	tst.w	r6, #16
 80065b8:	d03a      	beq.n	8006630 <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 80065ba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	bb4b      	cbnz	r3, 8006614 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80065c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b28      	cmp	r3, #40	; 0x28
 80065c8:	d011      	beq.n	80065ee <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80065ca:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b29      	cmp	r3, #41	; 0x29
 80065d2:	d012      	beq.n	80065fa <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	2210      	movs	r2, #16
 80065d8:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065da:	f015 0f20 	tst.w	r5, #32
 80065de:	d002      	beq.n	80065e6 <I2C_Slave_ISR_IT+0x52>
 80065e0:	f016 0f20 	tst.w	r6, #32
 80065e4:	d172      	bne.n	80066cc <I2C_Slave_ISR_IT+0x138>
  __HAL_UNLOCK(hi2c);
 80065e6:	2000      	movs	r0, #0
 80065e8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80065ee:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80065f2:	d1ea      	bne.n	80065ca <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80065f4:	f7ff fe8e 	bl	8006314 <I2C_ITListenCplt>
 80065f8:	e7ef      	b.n	80065da <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80065fa:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80065fe:	d0e9      	beq.n	80065d4 <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	2210      	movs	r2, #16
 8006604:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8006606:	4620      	mov	r0, r4
 8006608:	f7fd fb3c 	bl	8003c84 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800660c:	4620      	mov	r0, r4
 800660e:	f7ff fde3 	bl	80061d8 <I2C_ITSlaveSeqCplt>
 8006612:	e7e2      	b.n	80065da <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006614:	6803      	ldr	r3, [r0, #0]
 8006616:	2110      	movs	r1, #16
 8006618:	61d9      	str	r1, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800661a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800661c:	f043 0304 	orr.w	r3, r3, #4
 8006620:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006622:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 8006626:	d1d8      	bne.n	80065da <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006628:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800662a:	f7ff fea9 	bl	8006380 <I2C_ITError>
 800662e:	e7d4      	b.n	80065da <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006630:	f015 0f04 	tst.w	r5, #4
 8006634:	d020      	beq.n	8006678 <I2C_Slave_ISR_IT+0xe4>
 8006636:	f016 0f04 	tst.w	r6, #4
 800663a:	d01d      	beq.n	8006678 <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount > 0U)
 800663c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	b17b      	cbz	r3, 8006662 <I2C_Slave_ISR_IT+0xce>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8006642:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800664a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800664c:	7019      	strb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800664e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006650:	3301      	adds	r3, #1
 8006652:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006654:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006656:	3b01      	subs	r3, #1
 8006658:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800665a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800665c:	3b01      	subs	r3, #1
 800665e:	b29b      	uxth	r3, r3
 8006660:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8006662:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1b7      	bne.n	80065da <I2C_Slave_ISR_IT+0x46>
 800666a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800666e:	d0b4      	beq.n	80065da <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSeqCplt(hi2c);
 8006670:	4620      	mov	r0, r4
 8006672:	f7ff fdb1 	bl	80061d8 <I2C_ITSlaveSeqCplt>
 8006676:	e7b0      	b.n	80065da <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006678:	f015 0f08 	tst.w	r5, #8
 800667c:	d002      	beq.n	8006684 <I2C_Slave_ISR_IT+0xf0>
 800667e:	f016 0f08 	tst.w	r6, #8
 8006682:	d117      	bne.n	80066b4 <I2C_Slave_ISR_IT+0x120>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006684:	f015 0f02 	tst.w	r5, #2
 8006688:	d0a7      	beq.n	80065da <I2C_Slave_ISR_IT+0x46>
 800668a:	f016 0f02 	tst.w	r6, #2
 800668e:	d0a4      	beq.n	80065da <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 8006690:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006692:	b29b      	uxth	r3, r3
 8006694:	b19b      	cbz	r3, 80066be <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800669a:	7812      	ldrb	r2, [r2, #0]
 800669c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800669e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066a0:	3301      	adds	r3, #1
 80066a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80066a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80066ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066ae:	3b01      	subs	r3, #1
 80066b0:	8523      	strh	r3, [r4, #40]	; 0x28
 80066b2:	e792      	b.n	80065da <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80066b4:	4629      	mov	r1, r5
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff fddd 	bl	8006276 <I2C_ITAddrCplt>
 80066bc:	e78d      	b.n	80065da <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80066be:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 80066c2:	d18a      	bne.n	80065da <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSeqCplt(hi2c);
 80066c4:	4620      	mov	r0, r4
 80066c6:	f7ff fd87 	bl	80061d8 <I2C_ITSlaveSeqCplt>
 80066ca:	e786      	b.n	80065da <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80066cc:	4629      	mov	r1, r5
 80066ce:	4620      	mov	r0, r4
 80066d0:	f7ff fed0 	bl	8006474 <I2C_ITSlaveCplt>
 80066d4:	e787      	b.n	80065e6 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80066d6:	2002      	movs	r0, #2
 80066d8:	e788      	b.n	80065ec <I2C_Slave_ISR_IT+0x58>

080066da <I2C_ITMasterCplt>:
{
 80066da:	b510      	push	{r4, lr}
 80066dc:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066de:	6803      	ldr	r3, [r0, #0]
 80066e0:	2220      	movs	r2, #32
 80066e2:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80066e4:	6802      	ldr	r2, [r0, #0]
 80066e6:	6853      	ldr	r3, [r2, #4]
 80066e8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80066ec:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80066f0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 80066fa:	2300      	movs	r3, #0
 80066fc:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80066fe:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006700:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8006704:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8006706:	f011 0f10 	tst.w	r1, #16
 800670a:	d006      	beq.n	800671a <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670c:	6803      	ldr	r3, [r0, #0]
 800670e:	2210      	movs	r2, #16
 8006710:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006712:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006714:	f043 0304 	orr.w	r3, r3, #4
 8006718:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 800671a:	4620      	mov	r0, r4
 800671c:	f7fd fab2 	bl	8003c84 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006720:	2103      	movs	r1, #3
 8006722:	4620      	mov	r0, r4
 8006724:	f7fd fb14 	bl	8003d50 <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 8006728:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800672a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b60      	cmp	r3, #96	; 0x60
 8006732:	d01b      	beq.n	800676c <I2C_ITMasterCplt+0x92>
 8006734:	b9d2      	cbnz	r2, 800676c <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006736:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b21      	cmp	r3, #33	; 0x21
 800673e:	d01a      	beq.n	8006776 <I2C_ITMasterCplt+0x9c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006740:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b22      	cmp	r3, #34	; 0x22
 8006748:	d114      	bne.n	8006774 <I2C_ITMasterCplt+0x9a>
    hi2c->State = HAL_I2C_STATE_READY;
 800674a:	2320      	movs	r3, #32
 800674c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006750:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b40      	cmp	r3, #64	; 0x40
 8006758:	d027      	beq.n	80067aa <I2C_ITMasterCplt+0xd0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800675a:	2300      	movs	r3, #0
 800675c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006760:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006764:	4620      	mov	r0, r4
 8006766:	f7ff fd0a 	bl	800617e <HAL_I2C_MasterRxCpltCallback>
}
 800676a:	e003      	b.n	8006774 <I2C_ITMasterCplt+0x9a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800676c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800676e:	4620      	mov	r0, r4
 8006770:	f7ff fe06 	bl	8006380 <I2C_ITError>
}
 8006774:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006776:	2320      	movs	r3, #32
 8006778:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800677c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d008      	beq.n	8006798 <I2C_ITMasterCplt+0xbe>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006786:	2300      	movs	r3, #0
 8006788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800678c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff fcf3 	bl	800617c <HAL_I2C_MasterTxCpltCallback>
 8006796:	e7ed      	b.n	8006774 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006798:	2300      	movs	r3, #0
 800679a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800679e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7ff fde8 	bl	8006378 <HAL_I2C_MemTxCpltCallback>
 80067a8:	e7e4      	b.n	8006774 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80067b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80067b4:	4620      	mov	r0, r4
 80067b6:	f7ff fde0 	bl	800637a <HAL_I2C_MemRxCpltCallback>
 80067ba:	e7db      	b.n	8006774 <I2C_ITMasterCplt+0x9a>

080067bc <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 80067bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	f000 80b7 	beq.w	8006934 <I2C_Master_ISR_IT+0x178>
{
 80067c6:	b570      	push	{r4, r5, r6, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	4604      	mov	r4, r0
 80067cc:	460d      	mov	r5, r1
 80067ce:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 80067d0:	2301      	movs	r3, #1
 80067d2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067d6:	f011 0f10 	tst.w	r1, #16
 80067da:	d002      	beq.n	80067e2 <I2C_Master_ISR_IT+0x26>
 80067dc:	f012 0f10 	tst.w	r2, #16
 80067e0:	d121      	bne.n	8006826 <I2C_Master_ISR_IT+0x6a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067e2:	f015 0f04 	tst.w	r5, #4
 80067e6:	d028      	beq.n	800683a <I2C_Master_ISR_IT+0x7e>
 80067e8:	f016 0f04 	tst.w	r6, #4
 80067ec:	d025      	beq.n	800683a <I2C_Master_ISR_IT+0x7e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80067ee:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067fc:	3301      	adds	r3, #1
 80067fe:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8006800:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006802:	3b01      	subs	r3, #1
 8006804:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8006806:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006808:	3b01      	subs	r3, #1
 800680a:	b29b      	uxth	r3, r3
 800680c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800680e:	f015 0f20 	tst.w	r5, #32
 8006812:	d003      	beq.n	800681c <I2C_Master_ISR_IT+0x60>
 8006814:	f016 0f20 	tst.w	r6, #32
 8006818:	f040 8087 	bne.w	800692a <I2C_Master_ISR_IT+0x16e>
  __HAL_UNLOCK(hi2c);
 800681c:	2000      	movs	r0, #0
 800681e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006822:	b002      	add	sp, #8
 8006824:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006826:	6803      	ldr	r3, [r0, #0]
 8006828:	2210      	movs	r2, #16
 800682a:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800682c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800682e:	f043 0304 	orr.w	r3, r3, #4
 8006832:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 8006834:	f7fd fa26 	bl	8003c84 <I2C_Flush_TXDR>
 8006838:	e7e9      	b.n	800680e <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800683a:	f015 0f02 	tst.w	r5, #2
 800683e:	d011      	beq.n	8006864 <I2C_Master_ISR_IT+0xa8>
 8006840:	f016 0f02 	tst.w	r6, #2
 8006844:	d00e      	beq.n	8006864 <I2C_Master_ISR_IT+0xa8>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 800684e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006850:	3301      	adds	r3, #1
 8006852:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8006854:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006856:	3b01      	subs	r3, #1
 8006858:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 800685a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800685c:	3b01      	subs	r3, #1
 800685e:	b29b      	uxth	r3, r3
 8006860:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006862:	e7d4      	b.n	800680e <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006864:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006868:	d03f      	beq.n	80068ea <I2C_Master_ISR_IT+0x12e>
 800686a:	f016 0f40 	tst.w	r6, #64	; 0x40
 800686e:	d0ce      	beq.n	800680e <I2C_Master_ISR_IT+0x52>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006870:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	b35b      	cbz	r3, 80068ce <I2C_Master_ISR_IT+0x112>
 8006876:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006878:	bb4b      	cbnz	r3, 80068ce <I2C_Master_ISR_IT+0x112>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	6859      	ldr	r1, [r3, #4]
 800687e:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006882:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	2bff      	cmp	r3, #255	; 0xff
 8006888:	d80e      	bhi.n	80068a8 <I2C_Master_ISR_IT+0xec>
        hi2c->XferSize = hi2c->XferCount;
 800688a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800688c:	b292      	uxth	r2, r2
 800688e:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006892:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006896:	d011      	beq.n	80068bc <I2C_Master_ISR_IT+0x100>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006898:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800689a:	2000      	movs	r0, #0
 800689c:	9000      	str	r0, [sp, #0]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	4620      	mov	r0, r4
 80068a2:	f7fd fa00 	bl	8003ca6 <I2C_TransferConfig>
 80068a6:	e7b2      	b.n	800680e <I2C_Master_ISR_IT+0x52>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80068a8:	22ff      	movs	r2, #255	; 0xff
 80068aa:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068ac:	2300      	movs	r3, #0
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068b4:	4620      	mov	r0, r4
 80068b6:	f7fd f9f6 	bl	8003ca6 <I2C_TransferConfig>
 80068ba:	e7a8      	b.n	800680e <I2C_Master_ISR_IT+0x52>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068bc:	2300      	movs	r3, #0
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	4620      	mov	r0, r4
 80068c8:	f7fd f9ed 	bl	8003ca6 <I2C_TransferConfig>
 80068cc:	e79f      	b.n	800680e <I2C_Master_ISR_IT+0x52>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80068d6:	d103      	bne.n	80068e0 <I2C_Master_ISR_IT+0x124>
        I2C_ITMasterSeqCplt(hi2c);
 80068d8:	4620      	mov	r0, r4
 80068da:	f7ff fc51 	bl	8006180 <I2C_ITMasterSeqCplt>
 80068de:	e796      	b.n	800680e <I2C_Master_ISR_IT+0x52>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80068e0:	2140      	movs	r1, #64	; 0x40
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7ff fd4c 	bl	8006380 <I2C_ITError>
 80068e8:	e791      	b.n	800680e <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80068ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068ee:	d08e      	beq.n	800680e <I2C_Master_ISR_IT+0x52>
 80068f0:	f016 0f40 	tst.w	r6, #64	; 0x40
 80068f4:	d08b      	beq.n	800680e <I2C_Master_ISR_IT+0x52>
    if (hi2c->XferCount == 0U)
 80068f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	b98b      	cbnz	r3, 8006920 <I2C_Master_ISR_IT+0x164>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006904:	d183      	bne.n	800680e <I2C_Master_ISR_IT+0x52>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006906:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006908:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800690c:	d104      	bne.n	8006918 <I2C_Master_ISR_IT+0x15c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006914:	605a      	str	r2, [r3, #4]
 8006916:	e77a      	b.n	800680e <I2C_Master_ISR_IT+0x52>
          I2C_ITMasterSeqCplt(hi2c);
 8006918:	4620      	mov	r0, r4
 800691a:	f7ff fc31 	bl	8006180 <I2C_ITMasterSeqCplt>
 800691e:	e776      	b.n	800680e <I2C_Master_ISR_IT+0x52>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006920:	2140      	movs	r1, #64	; 0x40
 8006922:	4620      	mov	r0, r4
 8006924:	f7ff fd2c 	bl	8006380 <I2C_ITError>
 8006928:	e771      	b.n	800680e <I2C_Master_ISR_IT+0x52>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800692a:	4629      	mov	r1, r5
 800692c:	4620      	mov	r0, r4
 800692e:	f7ff fed4 	bl	80066da <I2C_ITMasterCplt>
 8006932:	e773      	b.n	800681c <I2C_Master_ISR_IT+0x60>
  __HAL_LOCK(hi2c);
 8006934:	2002      	movs	r0, #2
}
 8006936:	4770      	bx	lr

08006938 <I2C_Slave_ISR_DMA>:
{
 8006938:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 800693a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800693c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006940:	2b01      	cmp	r3, #1
 8006942:	d065      	beq.n	8006a10 <I2C_Slave_ISR_DMA+0xd8>
 8006944:	4604      	mov	r4, r0
 8006946:	2301      	movs	r3, #1
 8006948:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800694c:	f011 0f10 	tst.w	r1, #16
 8006950:	d046      	beq.n	80069e0 <I2C_Slave_ISR_DMA+0xa8>
 8006952:	f012 0f10 	tst.w	r2, #16
 8006956:	d043      	beq.n	80069e0 <I2C_Slave_ISR_DMA+0xa8>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006958:	0b93      	lsrs	r3, r2, #14
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800695a:	0bd2      	lsrs	r2, r2, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800695c:	ea43 0002 	orr.w	r0, r3, r2
 8006960:	f010 0f01 	tst.w	r0, #1
 8006964:	d038      	beq.n	80069d8 <I2C_Slave_ISR_DMA+0xa0>
      if (hi2c->hdmarx != NULL)
 8006966:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006968:	2800      	cmp	r0, #0
 800696a:	d053      	beq.n	8006a14 <I2C_Slave_ISR_DMA+0xdc>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800696c:	f012 0f01 	tst.w	r2, #1
 8006970:	d050      	beq.n	8006a14 <I2C_Slave_ISR_DMA+0xdc>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006972:	6802      	ldr	r2, [r0, #0]
 8006974:	6852      	ldr	r2, [r2, #4]
 8006976:	fab2 f282 	clz	r2, r2
 800697a:	0952      	lsrs	r2, r2, #5
      if (hi2c->hdmatx != NULL)
 800697c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800697e:	b138      	cbz	r0, 8006990 <I2C_Slave_ISR_DMA+0x58>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006980:	f013 0f01 	tst.w	r3, #1
 8006984:	d004      	beq.n	8006990 <I2C_Slave_ISR_DMA+0x58>
 8006986:	e000      	b.n	800698a <I2C_Slave_ISR_DMA+0x52>
 8006988:	2200      	movs	r2, #0
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800698a:	6803      	ldr	r3, [r0, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	b10b      	cbz	r3, 8006994 <I2C_Slave_ISR_DMA+0x5c>
      if (treatdmanack == 1U)
 8006990:	2a00      	cmp	r2, #0
 8006992:	d044      	beq.n	8006a1e <I2C_Slave_ISR_DMA+0xe6>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8006994:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b28      	cmp	r3, #40	; 0x28
 800699c:	d008      	beq.n	80069b0 <I2C_Slave_ISR_DMA+0x78>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800699e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b29      	cmp	r3, #41	; 0x29
 80069a6:	d00a      	beq.n	80069be <I2C_Slave_ISR_DMA+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	2210      	movs	r2, #16
 80069ac:	61da      	str	r2, [r3, #28]
 80069ae:	e023      	b.n	80069f8 <I2C_Slave_ISR_DMA+0xc0>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80069b0:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 80069b4:	d1f3      	bne.n	800699e <I2C_Slave_ISR_DMA+0x66>
          I2C_ITListenCplt(hi2c, ITFlags);
 80069b6:	4620      	mov	r0, r4
 80069b8:	f7ff fcac 	bl	8006314 <I2C_ITListenCplt>
 80069bc:	e01c      	b.n	80069f8 <I2C_Slave_ISR_DMA+0xc0>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069be:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80069c2:	d0f1      	beq.n	80069a8 <I2C_Slave_ISR_DMA+0x70>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	2210      	movs	r2, #16
 80069c8:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 80069ca:	4620      	mov	r0, r4
 80069cc:	f7fd f95a 	bl	8003c84 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 80069d0:	4620      	mov	r0, r4
 80069d2:	f7ff fc01 	bl	80061d8 <I2C_ITSlaveSeqCplt>
 80069d6:	e00f      	b.n	80069f8 <I2C_Slave_ISR_DMA+0xc0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	2210      	movs	r2, #16
 80069dc:	61da      	str	r2, [r3, #28]
 80069de:	e00b      	b.n	80069f8 <I2C_Slave_ISR_DMA+0xc0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069e0:	f011 0f08 	tst.w	r1, #8
 80069e4:	d002      	beq.n	80069ec <I2C_Slave_ISR_DMA+0xb4>
 80069e6:	f012 0f08 	tst.w	r2, #8
 80069ea:	d109      	bne.n	8006a00 <I2C_Slave_ISR_DMA+0xc8>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80069ec:	f011 0f20 	tst.w	r1, #32
 80069f0:	d002      	beq.n	80069f8 <I2C_Slave_ISR_DMA+0xc0>
 80069f2:	f012 0f20 	tst.w	r2, #32
 80069f6:	d107      	bne.n	8006a08 <I2C_Slave_ISR_DMA+0xd0>
  __HAL_UNLOCK(hi2c);
 80069f8:	2000      	movs	r0, #0
 80069fa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7ff fc38 	bl	8006276 <I2C_ITAddrCplt>
 8006a06:	e7f7      	b.n	80069f8 <I2C_Slave_ISR_DMA+0xc0>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f7ff fd33 	bl	8006474 <I2C_ITSlaveCplt>
 8006a0e:	e7f3      	b.n	80069f8 <I2C_Slave_ISR_DMA+0xc0>
  __HAL_LOCK(hi2c);
 8006a10:	2002      	movs	r0, #2
 8006a12:	e7f4      	b.n	80069fe <I2C_Slave_ISR_DMA+0xc6>
      if (hi2c->hdmatx != NULL)
 8006a14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006a16:	b110      	cbz	r0, 8006a1e <I2C_Slave_ISR_DMA+0xe6>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006a18:	f013 0f01 	tst.w	r3, #1
 8006a1c:	d1b4      	bne.n	8006988 <I2C_Slave_ISR_DMA+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	2210      	movs	r2, #16
 8006a22:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a26:	f043 0304 	orr.w	r3, r3, #4
 8006a2a:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a2c:	f035 7380 	bics.w	r3, r5, #16777216	; 0x1000000
 8006a30:	d1e2      	bne.n	80069f8 <I2C_Slave_ISR_DMA+0xc0>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a32:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006a34:	4620      	mov	r0, r4
 8006a36:	f7ff fca3 	bl	8006380 <I2C_ITError>
 8006a3a:	e7dd      	b.n	80069f8 <I2C_Slave_ISR_DMA+0xc0>

08006a3c <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8006a3c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f000 8094 	beq.w	8006b6e <I2C_Master_ISR_DMA+0x132>
{
 8006a46:	b510      	push	{r4, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a52:	f011 0f10 	tst.w	r1, #16
 8006a56:	d002      	beq.n	8006a5e <I2C_Master_ISR_DMA+0x22>
 8006a58:	f012 0f10 	tst.w	r2, #16
 8006a5c:	d133      	bne.n	8006ac6 <I2C_Master_ISR_DMA+0x8a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a5e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006a62:	d05a      	beq.n	8006b1a <I2C_Master_ISR_DMA+0xde>
 8006a64:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a68:	d077      	beq.n	8006b5a <I2C_Master_ISR_DMA+0x11e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006a6a:	6822      	ldr	r2, [r4, #0]
 8006a6c:	6813      	ldr	r3, [r2, #0]
 8006a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a72:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8006a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d040      	beq.n	8006afe <I2C_Master_ISR_DMA+0xc2>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	6859      	ldr	r1, [r3, #4]
 8006a80:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2bff      	cmp	r3, #255	; 0xff
 8006a8a:	d92e      	bls.n	8006aea <I2C_Master_ISR_DMA+0xae>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a8c:	23ff      	movs	r3, #255	; 0xff
 8006a8e:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006a94:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006a98:	2000      	movs	r0, #0
 8006a9a:	9000      	str	r0, [sp, #0]
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f7fd f902 	bl	8003ca6 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8006aa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006aa4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006aac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b22      	cmp	r3, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006ab4:	6822      	ldr	r2, [r4, #0]
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	bf0c      	ite	eq
 8006aba:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006abe:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	e00c      	b.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac6:	6803      	ldr	r3, [r0, #0]
 8006ac8:	2210      	movs	r2, #16
 8006aca:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006acc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006ace:	f043 0304 	orr.w	r3, r3, #4
 8006ad2:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ad4:	2112      	movs	r1, #18
 8006ad6:	f7fd f901 	bl	8003cdc <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7fd f8d2 	bl	8003c84 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006ae6:	b002      	add	sp, #8
 8006ae8:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 8006aea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006aec:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006aee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
          xfermode = hi2c->XferOptions;
 8006af4:	bf14      	ite	ne
 8006af6:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
          xfermode = I2C_AUTOEND_MODE;
 8006af8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8006afc:	e7ca      	b.n	8006a94 <I2C_Master_ISR_DMA+0x58>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006b06:	d103      	bne.n	8006b10 <I2C_Master_ISR_DMA+0xd4>
        I2C_ITMasterSeqCplt(hi2c);
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7ff fb39 	bl	8006180 <I2C_ITMasterSeqCplt>
 8006b0e:	e7e7      	b.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b10:	2140      	movs	r1, #64	; 0x40
 8006b12:	4620      	mov	r0, r4
 8006b14:	f7ff fc34 	bl	8006380 <I2C_ITError>
 8006b18:	e7e2      	b.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b1a:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006b1e:	d01c      	beq.n	8006b5a <I2C_Master_ISR_DMA+0x11e>
 8006b20:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006b24:	d019      	beq.n	8006b5a <I2C_Master_ISR_DMA+0x11e>
    if (hi2c->XferCount == 0U)
 8006b26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	b98b      	cbnz	r3, 8006b50 <I2C_Master_ISR_DMA+0x114>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006b34:	d1d4      	bne.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b38:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006b3c:	d104      	bne.n	8006b48 <I2C_Master_ISR_DMA+0x10c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b44:	605a      	str	r2, [r3, #4]
 8006b46:	e7cb      	b.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
          I2C_ITMasterSeqCplt(hi2c);
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f7ff fb19 	bl	8006180 <I2C_ITMasterSeqCplt>
 8006b4e:	e7c7      	b.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b50:	2140      	movs	r1, #64	; 0x40
 8006b52:	4620      	mov	r0, r4
 8006b54:	f7ff fc14 	bl	8006380 <I2C_ITError>
 8006b58:	e7c2      	b.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b5a:	f011 0f20 	tst.w	r1, #32
 8006b5e:	d0bf      	beq.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
 8006b60:	f012 0f20 	tst.w	r2, #32
 8006b64:	d0bc      	beq.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006b66:	4620      	mov	r0, r4
 8006b68:	f7ff fdb7 	bl	80066da <I2C_ITMasterCplt>
 8006b6c:	e7b8      	b.n	8006ae0 <I2C_Master_ISR_DMA+0xa4>
  __HAL_LOCK(hi2c);
 8006b6e:	2002      	movs	r0, #2
}
 8006b70:	4770      	bx	lr

08006b72 <I2C_DMAError>:
{
 8006b72:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b74:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b76:	6802      	ldr	r2, [r0, #0]
 8006b78:	6853      	ldr	r3, [r2, #4]
 8006b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7e:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b80:	2110      	movs	r1, #16
 8006b82:	f7ff fbfd 	bl	8006380 <I2C_ITError>
}
 8006b86:	bd08      	pop	{r3, pc}

08006b88 <I2C_DMAMasterTransmitCplt>:
{
 8006b88:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b8a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b8c:	6822      	ldr	r2, [r4, #0]
 8006b8e:	6813      	ldr	r3, [r2, #0]
 8006b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b94:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8006b96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	b1b3      	cbz	r3, 8006bca <I2C_DMAMasterTransmitCplt+0x42>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006b9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006b9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ba0:	4419      	add	r1, r3
 8006ba2:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ba4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2bff      	cmp	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006baa:	bf8c      	ite	hi
 8006bac:	23ff      	movhi	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8006bae:	8d63      	ldrhls	r3, [r4, #42]	; 0x2a
 8006bb0:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006bb6:	3228      	adds	r2, #40	; 0x28
 8006bb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006bba:	f7fb fdde 	bl	800277a <HAL_DMA_Start_IT>
 8006bbe:	b948      	cbnz	r0, 8006bd4 <I2C_DMAMasterTransmitCplt+0x4c>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006bc0:	2112      	movs	r1, #18
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7fd f88a 	bl	8003cdc <I2C_Enable_IRQ>
}
 8006bc8:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006bca:	2112      	movs	r1, #18
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f7fd f885 	bl	8003cdc <I2C_Enable_IRQ>
 8006bd2:	e7f9      	b.n	8006bc8 <I2C_DMAMasterTransmitCplt+0x40>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006bd4:	2110      	movs	r1, #16
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f7ff fbd2 	bl	8006380 <I2C_ITError>
 8006bdc:	e7f4      	b.n	8006bc8 <I2C_DMAMasterTransmitCplt+0x40>

08006bde <I2C_DMAMasterReceiveCplt>:
{
 8006bde:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006be0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	6813      	ldr	r3, [r2, #0]
 8006be6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bea:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8006bec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	b1b3      	cbz	r3, 8006c20 <I2C_DMAMasterReceiveCplt+0x42>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006bf2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006bf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006bf6:	441a      	add	r2, r3
 8006bf8:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2bff      	cmp	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c00:	bf8c      	ite	hi
 8006c02:	23ff      	movhi	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8006c04:	8d63      	ldrhls	r3, [r4, #42]	; 0x2a
 8006c06:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8006c08:	6821      	ldr	r1, [r4, #0]
 8006c0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c0c:	3124      	adds	r1, #36	; 0x24
 8006c0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c10:	f7fb fdb3 	bl	800277a <HAL_DMA_Start_IT>
 8006c14:	b948      	cbnz	r0, 8006c2a <I2C_DMAMasterReceiveCplt+0x4c>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006c16:	2112      	movs	r1, #18
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f7fd f85f 	bl	8003cdc <I2C_Enable_IRQ>
}
 8006c1e:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006c20:	2112      	movs	r1, #18
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7fd f85a 	bl	8003cdc <I2C_Enable_IRQ>
 8006c28:	e7f9      	b.n	8006c1e <I2C_DMAMasterReceiveCplt+0x40>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006c2a:	2110      	movs	r1, #16
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7ff fba7 	bl	8006380 <I2C_ITError>
 8006c32:	e7f4      	b.n	8006c1e <I2C_DMAMasterReceiveCplt+0x40>

08006c34 <HAL_I2C_ER_IRQHandler>:
{
 8006c34:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c36:	6802      	ldr	r2, [r0, #0]
 8006c38:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c3a:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c40:	d010      	beq.n	8006c64 <HAL_I2C_ER_IRQHandler+0x30>
 8006c42:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006c46:	d02e      	beq.n	8006ca6 <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006c48:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006c4a:	f041 0101 	orr.w	r1, r1, #1
 8006c4e:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c54:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c56:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c5a:	d109      	bne.n	8006c70 <HAL_I2C_ER_IRQHandler+0x3c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c5c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c60:	d111      	bne.n	8006c86 <HAL_I2C_ER_IRQHandler+0x52>
 8006c62:	e018      	b.n	8006c96 <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c68:	d020      	beq.n	8006cac <HAL_I2C_ER_IRQHandler+0x78>
 8006c6a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006c6e:	d012      	beq.n	8006c96 <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006c70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c72:	f042 0208 	orr.w	r2, r2, #8
 8006c76:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c78:	6802      	ldr	r2, [r0, #0]
 8006c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c7e:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c80:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c84:	d007      	beq.n	8006c96 <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006c86:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006c88:	f043 0302 	orr.w	r3, r3, #2
 8006c8c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c8e:	6803      	ldr	r3, [r0, #0]
 8006c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c94:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8006c96:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006c98:	f011 0f0b 	tst.w	r1, #11
 8006c9c:	d100      	bne.n	8006ca0 <HAL_I2C_ER_IRQHandler+0x6c>
}
 8006c9e:	bd08      	pop	{r3, pc}
    I2C_ITError(hi2c, tmperror);
 8006ca0:	f7ff fb6e 	bl	8006380 <I2C_ITError>
}
 8006ca4:	e7fb      	b.n	8006c9e <HAL_I2C_ER_IRQHandler+0x6a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006ca6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006caa:	d1f4      	bne.n	8006c96 <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006cac:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006cb0:	d0f1      	beq.n	8006c96 <HAL_I2C_ER_IRQHandler+0x62>
 8006cb2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006cb6:	d0ee      	beq.n	8006c96 <HAL_I2C_ER_IRQHandler+0x62>
 8006cb8:	e7e5      	b.n	8006c86 <HAL_I2C_ER_IRQHandler+0x52>

08006cba <I2C_DMAAbort>:
{
 8006cba:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006cbc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8006cbe:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8006cc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006cc6:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006cc8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b60      	cmp	r3, #96	; 0x60
 8006cd0:	d002      	beq.n	8006cd8 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 8006cd2:	f7ff fb53 	bl	800637c <HAL_I2C_ErrorCallback>
}
 8006cd6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006cd8:	2320      	movs	r3, #32
 8006cda:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8006cde:	f7ff fb4e 	bl	800637e <HAL_I2C_AbortCpltCallback>
 8006ce2:	e7f8      	b.n	8006cd6 <I2C_DMAAbort+0x1c>

08006ce4 <HAL_I2C_GetState>:
  return hi2c->State;
 8006ce4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8006ce8:	4770      	bx	lr

08006cea <HAL_I2C_GetMode>:
  return hi2c->Mode;
 8006cea:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
}
 8006cee:	4770      	bx	lr

08006cf0 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8006cf0:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d124      	bne.n	8006d48 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cfe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d022      	beq.n	8006d4c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006d06:	2301      	movs	r3, #1
 8006d08:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d0c:	2324      	movs	r3, #36	; 0x24
 8006d0e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d12:	6802      	ldr	r2, [r0, #0]
 8006d14:	6813      	ldr	r3, [r2, #0]
 8006d16:	f023 0301 	bic.w	r3, r3, #1
 8006d1a:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d1c:	6802      	ldr	r2, [r0, #0]
 8006d1e:	6813      	ldr	r3, [r2, #0]
 8006d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d24:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d26:	6802      	ldr	r2, [r0, #0]
 8006d28:	6813      	ldr	r3, [r2, #0]
 8006d2a:	4319      	orrs	r1, r3
 8006d2c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d2e:	6802      	ldr	r2, [r0, #0]
 8006d30:	6813      	ldr	r3, [r2, #0]
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d38:	2320      	movs	r3, #32
 8006d3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006d44:	4618      	mov	r0, r3
 8006d46:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006d48:	2002      	movs	r0, #2
 8006d4a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006d4c:	2002      	movs	r0, #2
  }
}
 8006d4e:	4770      	bx	lr

08006d50 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d50:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d122      	bne.n	8006da0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d5a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d020      	beq.n	8006da4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006d62:	2301      	movs	r3, #1
 8006d64:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d68:	2324      	movs	r3, #36	; 0x24
 8006d6a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d6e:	6802      	ldr	r2, [r0, #0]
 8006d70:	6813      	ldr	r3, [r2, #0]
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d78:	6802      	ldr	r2, [r0, #0]
 8006d7a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d80:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d84:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d86:	6802      	ldr	r2, [r0, #0]
 8006d88:	6813      	ldr	r3, [r2, #0]
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d90:	2320      	movs	r3, #32
 8006d92:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d96:	2300      	movs	r3, #0
 8006d98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006da0:	2002      	movs	r0, #2
 8006da2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006da4:	2002      	movs	r0, #2
  }
}
 8006da6:	4770      	bx	lr

08006da8 <HAL_I2CEx_EnableWakeUp>:
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006da8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d120      	bne.n	8006df4 <HAL_I2CEx_EnableWakeUp+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006db2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d01e      	beq.n	8006df8 <HAL_I2CEx_EnableWakeUp+0x50>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dc0:	2324      	movs	r3, #36	; 0x24
 8006dc2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dc6:	6802      	ldr	r2, [r0, #0]
 8006dc8:	6813      	ldr	r3, [r2, #0]
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	6013      	str	r3, [r2, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
 8006dd0:	6802      	ldr	r2, [r0, #0]
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dd8:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dda:	6802      	ldr	r2, [r0, #0]
 8006ddc:	6813      	ldr	r3, [r2, #0]
 8006dde:	f043 0301 	orr.w	r3, r3, #1
 8006de2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006de4:	2320      	movs	r3, #32
 8006de6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dea:	2300      	movs	r3, #0
 8006dec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006df0:	4618      	mov	r0, r3
 8006df2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006df4:	2002      	movs	r0, #2
 8006df6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006df8:	2002      	movs	r0, #2
  }
}
 8006dfa:	4770      	bx	lr

08006dfc <HAL_I2CEx_DisableWakeUp>:
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dfc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d120      	bne.n	8006e48 <HAL_I2CEx_DisableWakeUp+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e06:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d01e      	beq.n	8006e4c <HAL_I2CEx_DisableWakeUp+0x50>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e14:	2324      	movs	r3, #36	; 0x24
 8006e16:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e1a:	6802      	ldr	r2, [r0, #0]
 8006e1c:	6813      	ldr	r3, [r2, #0]
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	6013      	str	r3, [r2, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
 8006e24:	6802      	ldr	r2, [r0, #0]
 8006e26:	6813      	ldr	r3, [r2, #0]
 8006e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e2c:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e2e:	6802      	ldr	r2, [r0, #0]
 8006e30:	6813      	ldr	r3, [r2, #0]
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e38:	2320      	movs	r3, #32
 8006e3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006e44:	4618      	mov	r0, r3
 8006e46:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006e48:	2002      	movs	r0, #2
 8006e4a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006e4c:	2002      	movs	r0, #2
  }
}
 8006e4e:	4770      	bx	lr

08006e50 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006e50:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e52:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <HAL_I2CEx_EnableFastModePlus+0x24>)
 8006e54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e56:	f042 0201 	orr.w	r2, r2, #1
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60
 8006e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006e66:	4a04      	ldr	r2, [pc, #16]	; (8006e78 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8006e68:	6853      	ldr	r3, [r2, #4]
 8006e6a:	4318      	orrs	r0, r3
 8006e6c:	6050      	str	r0, [r2, #4]
}
 8006e6e:	b002      	add	sp, #8
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40021000 	.word	0x40021000
 8006e78:	40010000 	.word	0x40010000

08006e7c <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006e7c:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e7e:	4b08      	ldr	r3, [pc, #32]	; (8006ea0 <HAL_I2CEx_DisableFastModePlus+0x24>)
 8006e80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	661a      	str	r2, [r3, #96]	; 0x60
 8006e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	9b01      	ldr	r3, [sp, #4]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006e92:	4a04      	ldr	r2, [pc, #16]	; (8006ea4 <HAL_I2CEx_DisableFastModePlus+0x28>)
 8006e94:	6853      	ldr	r3, [r2, #4]
 8006e96:	ea23 0000 	bic.w	r0, r3, r0
 8006e9a:	6050      	str	r0, [r2, #4]
}
 8006e9c:	b002      	add	sp, #8
 8006e9e:	4770      	bx	lr
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	40010000 	.word	0x40010000

08006ea8 <HAL_PWR_DeInit>:
  * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
  __HAL_RCC_PWR_FORCE_RESET();
 8006ea8:	4b04      	ldr	r3, [pc, #16]	; (8006ebc <HAL_PWR_DeInit+0x14>)
 8006eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_PWR_RELEASE_RESET();
 8006eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006eba:	4770      	bx	lr
 8006ebc:	40021000 	.word	0x40021000

08006ec0 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ec0:	4a02      	ldr	r2, [pc, #8]	; (8006ecc <HAL_PWR_EnableBkUpAccess+0xc>)
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec8:	6013      	str	r3, [r2, #0]
}
 8006eca:	4770      	bx	lr
 8006ecc:	40007000 	.word	0x40007000

08006ed0 <HAL_PWR_DisableBkUpAccess>:
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ed0:	4a02      	ldr	r2, [pc, #8]	; (8006edc <HAL_PWR_DisableBkUpAccess+0xc>)
 8006ed2:	6813      	ldr	r3, [r2, #0]
 8006ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed8:	6013      	str	r3, [r2, #0]
}
 8006eda:	4770      	bx	lr
 8006edc:	40007000 	.word	0x40007000

08006ee0 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006ee0:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <HAL_PWR_ConfigPVD+0x7c>)
 8006ee2:	6853      	ldr	r3, [r2, #4]
 8006ee4:	f023 030e 	bic.w	r3, r3, #14
 8006ee8:	6801      	ldr	r1, [r0, #0]
 8006eea:	430b      	orrs	r3, r1
 8006eec:	6053      	str	r3, [r2, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8006eee:	4b1c      	ldr	r3, [pc, #112]	; (8006f60 <HAL_PWR_ConfigPVD+0x80>)
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ef6:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006efe:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f06:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f0e:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8006f10:	6843      	ldr	r3, [r0, #4]
 8006f12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006f16:	d004      	beq.n	8006f22 <HAL_PWR_ConfigPVD+0x42>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8006f18:	4a11      	ldr	r2, [pc, #68]	; (8006f60 <HAL_PWR_ConfigPVD+0x80>)
 8006f1a:	6813      	ldr	r3, [r2, #0]
 8006f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f20:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006f22:	6843      	ldr	r3, [r0, #4]
 8006f24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006f28:	d004      	beq.n	8006f34 <HAL_PWR_ConfigPVD+0x54>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006f2a:	4a0d      	ldr	r2, [pc, #52]	; (8006f60 <HAL_PWR_ConfigPVD+0x80>)
 8006f2c:	6853      	ldr	r3, [r2, #4]
 8006f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f32:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8006f34:	6843      	ldr	r3, [r0, #4]
 8006f36:	f013 0f01 	tst.w	r3, #1
 8006f3a:	d004      	beq.n	8006f46 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8006f3c:	4a08      	ldr	r2, [pc, #32]	; (8006f60 <HAL_PWR_ConfigPVD+0x80>)
 8006f3e:	6893      	ldr	r3, [r2, #8]
 8006f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f44:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8006f46:	6843      	ldr	r3, [r0, #4]
 8006f48:	f013 0f02 	tst.w	r3, #2
 8006f4c:	d004      	beq.n	8006f58 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006f4e:	4a04      	ldr	r2, [pc, #16]	; (8006f60 <HAL_PWR_ConfigPVD+0x80>)
 8006f50:	68d3      	ldr	r3, [r2, #12]
 8006f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f56:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
}
 8006f58:	2000      	movs	r0, #0
 8006f5a:	4770      	bx	lr
 8006f5c:	40007000 	.word	0x40007000
 8006f60:	40010400 	.word	0x40010400

08006f64 <HAL_PWR_EnablePVD>:
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006f64:	4a02      	ldr	r2, [pc, #8]	; (8006f70 <HAL_PWR_EnablePVD+0xc>)
 8006f66:	6853      	ldr	r3, [r2, #4]
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6053      	str	r3, [r2, #4]
}
 8006f6e:	4770      	bx	lr
 8006f70:	40007000 	.word	0x40007000

08006f74 <HAL_PWR_DisablePVD>:
  * @brief Disable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006f74:	4a02      	ldr	r2, [pc, #8]	; (8006f80 <HAL_PWR_DisablePVD+0xc>)
 8006f76:	6853      	ldr	r3, [r2, #4]
 8006f78:	f023 0301 	bic.w	r3, r3, #1
 8006f7c:	6053      	str	r3, [r2, #4]
}
 8006f7e:	4770      	bx	lr
 8006f80:	40007000 	.word	0x40007000

08006f84 <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8006f84:	4a06      	ldr	r2, [pc, #24]	; (8006fa0 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8006f86:	68d3      	ldr	r3, [r2, #12]
 8006f88:	f000 011f 	and.w	r1, r0, #31
 8006f8c:	ea23 0301 	bic.w	r3, r3, r1
 8006f90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006f94:	60d0      	str	r0, [r2, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8006f96:	6893      	ldr	r3, [r2, #8]
 8006f98:	4319      	orrs	r1, r3
 8006f9a:	6091      	str	r1, [r2, #8]


}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40007000 	.word	0x40007000

08006fa4 <HAL_PWR_DisableWakeUpPin>:
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8006fa4:	4a03      	ldr	r2, [pc, #12]	; (8006fb4 <HAL_PWR_DisableWakeUpPin+0x10>)
 8006fa6:	6893      	ldr	r3, [r2, #8]
 8006fa8:	f000 001f 	and.w	r0, r0, #31
 8006fac:	ea23 0300 	bic.w	r3, r3, r0
 8006fb0:	6093      	str	r3, [r2, #8]
}
 8006fb2:	4770      	bx	lr
 8006fb4:	40007000 	.word	0x40007000

08006fb8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006fbc:	b9a0      	cbnz	r0, 8006fe8 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8006fbe:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <HAL_PWR_EnterSLEEPMode+0x44>)
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006fc6:	d10a      	bne.n	8006fde <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006fc8:	4a0d      	ldr	r2, [pc, #52]	; (8007000 <HAL_PWR_EnterSLEEPMode+0x48>)
 8006fca:	6913      	ldr	r3, [r2, #16]
 8006fcc:	f023 0304 	bic.w	r3, r3, #4
 8006fd0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006fd2:	2c01      	cmp	r4, #1
 8006fd4:	d010      	beq.n	8006ff8 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006fd6:	bf40      	sev
    __WFE();
 8006fd8:	bf20      	wfe
    __WFE();
 8006fda:	bf20      	wfe
  }

}
 8006fdc:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006fde:	f000 fba3 	bl	8007728 <HAL_PWREx_DisableLowPowerRunMode>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d0f0      	beq.n	8006fc8 <HAL_PWR_EnterSLEEPMode+0x10>
 8006fe6:	e7f9      	b.n	8006fdc <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <HAL_PWR_EnterSLEEPMode+0x44>)
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006ff0:	d1ea      	bne.n	8006fc8 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8006ff2:	f000 fb91 	bl	8007718 <HAL_PWREx_EnableLowPowerRunMode>
 8006ff6:	e7e7      	b.n	8006fc8 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8006ff8:	bf30      	wfi
 8006ffa:	e7ef      	b.n	8006fdc <HAL_PWR_EnterSLEEPMode+0x24>
 8006ffc:	40007000 	.word	0x40007000
 8007000:	e000ed00 	.word	0xe000ed00

08007004 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007004:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8007006:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800700a:	d003      	beq.n	8007014 <HAL_PWR_EnterSTOPMode+0x10>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 800700c:	4608      	mov	r0, r1
 800700e:	f000 fbb7 	bl	8007780 <HAL_PWREx_EnterSTOP0Mode>
  }
}
 8007012:	bd08      	pop	{r3, pc}
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8007014:	4608      	mov	r0, r1
 8007016:	f000 fbcf 	bl	80077b8 <HAL_PWREx_EnterSTOP1Mode>
 800701a:	e7fa      	b.n	8007012 <HAL_PWR_EnterSTOPMode+0xe>

0800701c <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 800701c:	4a06      	ldr	r2, [pc, #24]	; (8007038 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 800701e:	6813      	ldr	r3, [r2, #0]
 8007020:	f023 0307 	bic.w	r3, r3, #7
 8007024:	f043 0303 	orr.w	r3, r3, #3
 8007028:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800702a:	4a04      	ldr	r2, [pc, #16]	; (800703c <HAL_PWR_EnterSTANDBYMode+0x20>)
 800702c:	6913      	ldr	r3, [r2, #16]
 800702e:	f043 0304 	orr.w	r3, r3, #4
 8007032:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007034:	bf30      	wfi
}
 8007036:	4770      	bx	lr
 8007038:	40007000 	.word	0x40007000
 800703c:	e000ed00 	.word	0xe000ed00

08007040 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007040:	4a02      	ldr	r2, [pc, #8]	; (800704c <HAL_PWR_EnableSleepOnExit+0xc>)
 8007042:	6913      	ldr	r3, [r2, #16]
 8007044:	f043 0302 	orr.w	r3, r3, #2
 8007048:	6113      	str	r3, [r2, #16]
}
 800704a:	4770      	bx	lr
 800704c:	e000ed00 	.word	0xe000ed00

08007050 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007050:	4a02      	ldr	r2, [pc, #8]	; (800705c <HAL_PWR_DisableSleepOnExit+0xc>)
 8007052:	6913      	ldr	r3, [r2, #16]
 8007054:	f023 0302 	bic.w	r3, r3, #2
 8007058:	6113      	str	r3, [r2, #16]
}
 800705a:	4770      	bx	lr
 800705c:	e000ed00 	.word	0xe000ed00

08007060 <HAL_PWR_EnableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8007060:	4a02      	ldr	r2, [pc, #8]	; (800706c <HAL_PWR_EnableSEVOnPend+0xc>)
 8007062:	6913      	ldr	r3, [r2, #16]
 8007064:	f043 0310 	orr.w	r3, r3, #16
 8007068:	6113      	str	r3, [r2, #16]
}
 800706a:	4770      	bx	lr
 800706c:	e000ed00 	.word	0xe000ed00

08007070 <HAL_PWR_DisableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8007070:	4a02      	ldr	r2, [pc, #8]	; (800707c <HAL_PWR_DisableSEVOnPend+0xc>)
 8007072:	6913      	ldr	r3, [r2, #16]
 8007074:	f023 0310 	bic.w	r3, r3, #16
 8007078:	6113      	str	r3, [r2, #16]
}
 800707a:	4770      	bx	lr
 800707c:	e000ed00 	.word	0xe000ed00

08007080 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8007080:	4770      	bx	lr
	...

08007084 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007084:	4b02      	ldr	r3, [pc, #8]	; (8007090 <HAL_PWREx_GetVoltageRange+0xc>)
 8007086:	6818      	ldr	r0, [r3, #0]
#endif
}
 8007088:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40007000 	.word	0x40007000

08007094 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007094:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007098:	d00f      	beq.n	80070ba <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800709a:	4b21      	ldr	r3, [pc, #132]	; (8007120 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a6:	d038      	beq.n	800711a <HAL_PWREx_ControlVoltageScaling+0x86>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80070a8:	4a1d      	ldr	r2, [pc, #116]	; (8007120 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80070aa:	6813      	ldr	r3, [r2, #0]
 80070ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070b4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80070b6:	2000      	movs	r0, #0
 80070b8:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80070ba:	4b19      	ldr	r3, [pc, #100]	; (8007120 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c6:	d026      	beq.n	8007116 <HAL_PWREx_ControlVoltageScaling+0x82>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070c8:	4a15      	ldr	r2, [pc, #84]	; (8007120 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80070ca:	6813      	ldr	r3, [r2, #0]
 80070cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070d4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070d6:	4b13      	ldr	r3, [pc, #76]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x90>)
 80070d8:	6819      	ldr	r1, [r3, #0]
 80070da:	2332      	movs	r3, #50	; 0x32
 80070dc:	fb03 f301 	mul.w	r3, r3, r1
 80070e0:	4911      	ldr	r1, [pc, #68]	; (8007128 <HAL_PWREx_ControlVoltageScaling+0x94>)
 80070e2:	fba1 1303 	umull	r1, r3, r1, r3
 80070e6:	0c9b      	lsrs	r3, r3, #18
 80070e8:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070ea:	6952      	ldr	r2, [r2, #20]
 80070ec:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80070f0:	d008      	beq.n	8007104 <HAL_PWREx_ControlVoltageScaling+0x70>
 80070f2:	b13b      	cbz	r3, 8007104 <HAL_PWREx_ControlVoltageScaling+0x70>
 80070f4:	490a      	ldr	r1, [pc, #40]	; (8007120 <HAL_PWREx_ControlVoltageScaling+0x8c>)
        wait_loop_index--;
 80070f6:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070f8:	694a      	ldr	r2, [r1, #20]
 80070fa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80070fe:	d001      	beq.n	8007104 <HAL_PWREx_ControlVoltageScaling+0x70>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f8      	bne.n	80070f6 <HAL_PWREx_ControlVoltageScaling+0x62>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2003      	movne	r0, #3
 8007112:	2000      	moveq	r0, #0
 8007114:	4770      	bx	lr
 8007116:	2000      	movs	r0, #0
 8007118:	4770      	bx	lr
 800711a:	2000      	movs	r0, #0
}
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40007000 	.word	0x40007000
 8007124:	20000008 	.word	0x20000008
 8007128:	431bde83 	.word	0x431bde83

0800712c <HAL_PWREx_EnableBatteryCharging>:
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));

  /* Specify resistor selection */
  MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 800712c:	4a05      	ldr	r2, [pc, #20]	; (8007144 <HAL_PWREx_EnableBatteryCharging+0x18>)
 800712e:	68d3      	ldr	r3, [r2, #12]
 8007130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007134:	4318      	orrs	r0, r3
 8007136:	60d0      	str	r0, [r2, #12]

  /* Enable battery charging */
  SET_BIT(PWR->CR4, PWR_CR4_VBE);
 8007138:	68d3      	ldr	r3, [r2, #12]
 800713a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800713e:	60d3      	str	r3, [r2, #12]
}
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40007000 	.word	0x40007000

08007148 <HAL_PWREx_DisableBatteryCharging>:
  * @brief Disable battery charging.
  * @retval None
  */
void HAL_PWREx_DisableBatteryCharging(void)
{
  CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 8007148:	4a02      	ldr	r2, [pc, #8]	; (8007154 <HAL_PWREx_DisableBatteryCharging+0xc>)
 800714a:	68d3      	ldr	r3, [r2, #12]
 800714c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007150:	60d3      	str	r3, [r2, #12]
}
 8007152:	4770      	bx	lr
 8007154:	40007000 	.word	0x40007000

08007158 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007158:	4a02      	ldr	r2, [pc, #8]	; (8007164 <HAL_PWREx_EnableVddUSB+0xc>)
 800715a:	6853      	ldr	r3, [r2, #4]
 800715c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007160:	6053      	str	r3, [r2, #4]
}
 8007162:	4770      	bx	lr
 8007164:	40007000 	.word	0x40007000

08007168 <HAL_PWREx_DisableVddUSB>:
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8007168:	4a02      	ldr	r2, [pc, #8]	; (8007174 <HAL_PWREx_DisableVddUSB+0xc>)
 800716a:	6853      	ldr	r3, [r2, #4]
 800716c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007170:	6053      	str	r3, [r2, #4]
}
 8007172:	4770      	bx	lr
 8007174:	40007000 	.word	0x40007000

08007178 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007178:	4a02      	ldr	r2, [pc, #8]	; (8007184 <HAL_PWREx_EnableVddIO2+0xc>)
 800717a:	6853      	ldr	r3, [r2, #4]
 800717c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007180:	6053      	str	r3, [r2, #4]
}
 8007182:	4770      	bx	lr
 8007184:	40007000 	.word	0x40007000

08007188 <HAL_PWREx_DisableVddIO2>:
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007188:	4a02      	ldr	r2, [pc, #8]	; (8007194 <HAL_PWREx_DisableVddIO2+0xc>)
 800718a:	6853      	ldr	r3, [r2, #4]
 800718c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007190:	6053      	str	r3, [r2, #4]
}
 8007192:	4770      	bx	lr
 8007194:	40007000 	.word	0x40007000

08007198 <HAL_PWREx_EnableInternalWakeUpLine>:
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 8007198:	4a02      	ldr	r2, [pc, #8]	; (80071a4 <HAL_PWREx_EnableInternalWakeUpLine+0xc>)
 800719a:	6893      	ldr	r3, [r2, #8]
 800719c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a0:	6093      	str	r3, [r2, #8]
}
 80071a2:	4770      	bx	lr
 80071a4:	40007000 	.word	0x40007000

080071a8 <HAL_PWREx_DisableInternalWakeUpLine>:
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 80071a8:	4a02      	ldr	r2, [pc, #8]	; (80071b4 <HAL_PWREx_DisableInternalWakeUpLine+0xc>)
 80071aa:	6893      	ldr	r3, [r2, #8]
 80071ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071b0:	6093      	str	r3, [r2, #8]
}
 80071b2:	4770      	bx	lr
 80071b4:	40007000 	.word	0x40007000

080071b8 <HAL_PWREx_EnableGPIOPullUp>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80071b8:	2807      	cmp	r0, #7
 80071ba:	d85d      	bhi.n	8007278 <HAL_PWREx_EnableGPIOPullUp+0xc0>
 80071bc:	e8df f000 	tbb	[pc, r0]
 80071c0:	281e1204 	.word	0x281e1204
 80071c4:	50463c32 	.word	0x50463c32
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80071c8:	4b2c      	ldr	r3, [pc, #176]	; (800727c <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 80071ca:	6a18      	ldr	r0, [r3, #32]
 80071cc:	f421 4280 	bic.w	r2, r1, #16384	; 0x4000
 80071d0:	4302      	orrs	r2, r0
 80071d2:	621a      	str	r2, [r3, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80071d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071d6:	f421 4120 	bic.w	r1, r1, #40960	; 0xa000
 80071da:	ea22 0101 	bic.w	r1, r2, r1
 80071de:	6259      	str	r1, [r3, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 80071e0:	2000      	movs	r0, #0
       break;
 80071e2:	4770      	bx	lr
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 80071e4:	4b25      	ldr	r3, [pc, #148]	; (800727c <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 80071e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071e8:	430a      	orrs	r2, r1
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80071ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ee:	f021 0110 	bic.w	r1, r1, #16
 80071f2:	ea22 0101 	bic.w	r1, r2, r1
 80071f6:	62d9      	str	r1, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 80071f8:	2000      	movs	r0, #0
       break;
 80071fa:	4770      	bx	lr
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 80071fc:	4b1f      	ldr	r3, [pc, #124]	; (800727c <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 80071fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007200:	430a      	orrs	r2, r1
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 8007204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007206:	ea22 0101 	bic.w	r1, r2, r1
 800720a:	6359      	str	r1, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 800720c:	2000      	movs	r0, #0
       break;
 800720e:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 8007210:	4b1a      	ldr	r3, [pc, #104]	; (800727c <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8007212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007214:	430a      	orrs	r2, r1
 8007216:	639a      	str	r2, [r3, #56]	; 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 8007218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800721a:	ea22 0101 	bic.w	r1, r2, r1
 800721e:	63d9      	str	r1, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007220:	2000      	movs	r0, #0
       break;
 8007222:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 8007224:	4b15      	ldr	r3, [pc, #84]	; (800727c <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8007226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007228:	430a      	orrs	r2, r1
 800722a:	641a      	str	r2, [r3, #64]	; 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 800722c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800722e:	ea22 0101 	bic.w	r1, r2, r1
 8007232:	6459      	str	r1, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8007234:	2000      	movs	r0, #0
       break;
 8007236:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, GPIONumber);
 8007238:	4b10      	ldr	r3, [pc, #64]	; (800727c <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 800723a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800723c:	430a      	orrs	r2, r1
 800723e:	649a      	str	r2, [r3, #72]	; 0x48
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8007240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007242:	ea22 0101 	bic.w	r1, r2, r1
 8007246:	64d9      	str	r1, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8007248:	2000      	movs	r0, #0
       break;
 800724a:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, GPIONumber);
 800724c:	4b0b      	ldr	r3, [pc, #44]	; (800727c <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 800724e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007250:	430a      	orrs	r2, r1
 8007252:	651a      	str	r2, [r3, #80]	; 0x50
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8007254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007256:	ea22 0101 	bic.w	r1, r2, r1
 800725a:	6559      	str	r1, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800725c:	2000      	movs	r0, #0
       break;
 800725e:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
       SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8007260:	4b06      	ldr	r3, [pc, #24]	; (800727c <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8007262:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007264:	f001 0103 	and.w	r1, r1, #3
 8007268:	430a      	orrs	r2, r1
 800726a:	659a      	str	r2, [r3, #88]	; 0x58
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 800726c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800726e:	ea22 0101 	bic.w	r1, r2, r1
 8007272:	65d9      	str	r1, [r3, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8007274:	2000      	movs	r0, #0
#endif
       break;
 8007276:	4770      	bx	lr
       SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8007278:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800727a:	4770      	bx	lr
 800727c:	40007000 	.word	0x40007000

08007280 <HAL_PWREx_DisableGPIOPullUp>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8007280:	2807      	cmp	r0, #7
 8007282:	d841      	bhi.n	8007308 <HAL_PWREx_DisableGPIOPullUp+0x88>
 8007284:	e8df f000 	tbb	[pc, r0]
 8007288:	1b140d04 	.word	0x1b140d04
 800728c:	37302922 	.word	0x37302922
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8007290:	4a1e      	ldr	r2, [pc, #120]	; (800730c <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8007292:	6a13      	ldr	r3, [r2, #32]
 8007294:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007298:	ea23 0101 	bic.w	r1, r3, r1
 800729c:	6211      	str	r1, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2000      	movs	r0, #0
       break;
 80072a0:	4770      	bx	lr
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 80072a2:	4a1a      	ldr	r2, [pc, #104]	; (800730c <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80072a6:	ea23 0101 	bic.w	r1, r3, r1
 80072aa:	6291      	str	r1, [r2, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 80072ac:	2000      	movs	r0, #0
       break;
 80072ae:	4770      	bx	lr
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 80072b0:	4a16      	ldr	r2, [pc, #88]	; (800730c <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80072b4:	ea23 0101 	bic.w	r1, r3, r1
 80072b8:	6311      	str	r1, [r2, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80072ba:	2000      	movs	r0, #0
       break;
 80072bc:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 80072be:	4a13      	ldr	r2, [pc, #76]	; (800730c <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072c0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80072c2:	ea23 0101 	bic.w	r1, r3, r1
 80072c6:	6391      	str	r1, [r2, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80072c8:	2000      	movs	r0, #0
       break;
 80072ca:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 80072cc:	4a0f      	ldr	r2, [pc, #60]	; (800730c <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80072d0:	ea23 0101 	bic.w	r1, r3, r1
 80072d4:	6411      	str	r1, [r2, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2000      	movs	r0, #0
       break;
 80072d8:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 80072da:	4a0c      	ldr	r2, [pc, #48]	; (800730c <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072dc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80072de:	ea23 0101 	bic.w	r1, r3, r1
 80072e2:	6491      	str	r1, [r2, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80072e4:	2000      	movs	r0, #0
       break;
 80072e6:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 80072e8:	4a08      	ldr	r2, [pc, #32]	; (800730c <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80072ec:	ea23 0101 	bic.w	r1, r3, r1
 80072f0:	6511      	str	r1, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80072f2:	2000      	movs	r0, #0
       break;
 80072f4:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80072f6:	4a05      	ldr	r2, [pc, #20]	; (800730c <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072f8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80072fa:	f001 0103 	and.w	r1, r1, #3
 80072fe:	ea23 0101 	bic.w	r1, r3, r1
 8007302:	6591      	str	r1, [r2, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8007304:	2000      	movs	r0, #0
       break;
 8007306:	4770      	bx	lr
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
       status = HAL_ERROR;
 8007308:	2001      	movs	r0, #1
       break;
  }

  return status;
}
 800730a:	4770      	bx	lr
 800730c:	40007000 	.word	0x40007000

08007310 <HAL_PWREx_EnableGPIOPullDown>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8007310:	2807      	cmp	r0, #7
 8007312:	d85d      	bhi.n	80073d0 <HAL_PWREx_EnableGPIOPullDown+0xc0>
 8007314:	e8df f000 	tbb	[pc, r0]
 8007318:	281e1204 	.word	0x281e1204
 800731c:	50463c32 	.word	0x50463c32
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8007320:	4b2c      	ldr	r3, [pc, #176]	; (80073d4 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8007322:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007324:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
 8007328:	4302      	orrs	r2, r0
 800732a:	625a      	str	r2, [r3, #36]	; 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 800732c:	6a1a      	ldr	r2, [r3, #32]
 800732e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007332:	ea22 0101 	bic.w	r1, r2, r1
 8007336:	6219      	str	r1, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8007338:	2000      	movs	r0, #0
       break;
 800733a:	4770      	bx	lr
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 800733c:	4b25      	ldr	r3, [pc, #148]	; (80073d4 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 800733e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007340:	f021 0210 	bic.w	r2, r1, #16
 8007344:	4302      	orrs	r2, r0
 8007346:	62da      	str	r2, [r3, #44]	; 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8007348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800734a:	ea22 0101 	bic.w	r1, r2, r1
 800734e:	6299      	str	r1, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8007350:	2000      	movs	r0, #0
       break;
 8007352:	4770      	bx	lr
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 8007354:	4b1f      	ldr	r3, [pc, #124]	; (80073d4 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8007356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007358:	430a      	orrs	r2, r1
 800735a:	635a      	str	r2, [r3, #52]	; 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 800735c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800735e:	ea22 0101 	bic.w	r1, r2, r1
 8007362:	6319      	str	r1, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8007364:	2000      	movs	r0, #0
       break;
 8007366:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 8007368:	4b1a      	ldr	r3, [pc, #104]	; (80073d4 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 800736a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800736c:	430a      	orrs	r2, r1
 800736e:	63da      	str	r2, [r3, #60]	; 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8007370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007372:	ea22 0101 	bic.w	r1, r2, r1
 8007376:	6399      	str	r1, [r3, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8007378:	2000      	movs	r0, #0
       break;
 800737a:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 800737c:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 800737e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007380:	430a      	orrs	r2, r1
 8007382:	645a      	str	r2, [r3, #68]	; 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 8007384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007386:	ea22 0101 	bic.w	r1, r2, r1
 800738a:	6419      	str	r1, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 800738c:	2000      	movs	r0, #0
       break;
 800738e:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 8007390:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8007392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007394:	430a      	orrs	r2, r1
 8007396:	64da      	str	r2, [r3, #76]	; 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8007398:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800739a:	ea22 0101 	bic.w	r1, r2, r1
 800739e:	6499      	str	r1, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80073a0:	2000      	movs	r0, #0
       break;
 80073a2:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 80073a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073a8:	430a      	orrs	r2, r1
 80073aa:	655a      	str	r2, [r3, #84]	; 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 80073ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073ae:	ea22 0101 	bic.w	r1, r2, r1
 80073b2:	6519      	str	r1, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80073b4:	2000      	movs	r0, #0
       break;
 80073b6:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 80073ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073bc:	f001 0103 	and.w	r1, r1, #3
 80073c0:	430a      	orrs	r2, r1
 80073c2:	65da      	str	r2, [r3, #92]	; 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80073c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073c6:	ea22 0101 	bic.w	r1, r2, r1
 80073ca:	6599      	str	r1, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 80073cc:	2000      	movs	r0, #0
       break;
 80073ce:	4770      	bx	lr
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 80073d0:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 80073d2:	4770      	bx	lr
 80073d4:	40007000 	.word	0x40007000

080073d8 <HAL_PWREx_DisableGPIOPullDown>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80073d8:	2807      	cmp	r0, #7
 80073da:	d843      	bhi.n	8007464 <HAL_PWREx_DisableGPIOPullDown+0x8c>
 80073dc:	e8df f000 	tbb	[pc, r0]
 80073e0:	1d160d04 	.word	0x1d160d04
 80073e4:	39322b24 	.word	0x39322b24
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80073e8:	4a1f      	ldr	r2, [pc, #124]	; (8007468 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 80073ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80073ec:	f421 4120 	bic.w	r1, r1, #40960	; 0xa000
 80073f0:	ea23 0101 	bic.w	r1, r3, r1
 80073f4:	6251      	str	r1, [r2, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 80073f6:	2000      	movs	r0, #0
       break;
 80073f8:	4770      	bx	lr
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80073fa:	4a1b      	ldr	r2, [pc, #108]	; (8007468 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 80073fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80073fe:	f021 0110 	bic.w	r1, r1, #16
 8007402:	ea23 0101 	bic.w	r1, r3, r1
 8007406:	62d1      	str	r1, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8007408:	2000      	movs	r0, #0
       break;
 800740a:	4770      	bx	lr
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 800740c:	4a16      	ldr	r2, [pc, #88]	; (8007468 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 800740e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007410:	ea23 0101 	bic.w	r1, r3, r1
 8007414:	6351      	str	r1, [r2, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8007416:	2000      	movs	r0, #0
       break;
 8007418:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 800741a:	4a13      	ldr	r2, [pc, #76]	; (8007468 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 800741c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800741e:	ea23 0101 	bic.w	r1, r3, r1
 8007422:	63d1      	str	r1, [r2, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007424:	2000      	movs	r0, #0
       break;
 8007426:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8007428:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 800742a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800742c:	ea23 0101 	bic.w	r1, r3, r1
 8007430:	6451      	str	r1, [r2, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8007432:	2000      	movs	r0, #0
       break;
 8007434:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8007436:	4a0c      	ldr	r2, [pc, #48]	; (8007468 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8007438:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800743a:	ea23 0101 	bic.w	r1, r3, r1
 800743e:	64d1      	str	r1, [r2, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8007440:	2000      	movs	r0, #0
       break;
 8007442:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8007444:	4a08      	ldr	r2, [pc, #32]	; (8007468 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8007446:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007448:	ea23 0101 	bic.w	r1, r3, r1
 800744c:	6551      	str	r1, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800744e:	2000      	movs	r0, #0
       break;
 8007450:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8007452:	4a05      	ldr	r2, [pc, #20]	; (8007468 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8007454:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8007456:	f001 0103 	and.w	r1, r1, #3
 800745a:	ea23 0101 	bic.w	r1, r3, r1
 800745e:	65d1      	str	r1, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8007460:	2000      	movs	r0, #0
#endif
       break;
 8007462:	4770      	bx	lr
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8007464:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8007466:	4770      	bx	lr
 8007468:	40007000 	.word	0x40007000

0800746c <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 800746c:	4a02      	ldr	r2, [pc, #8]	; (8007478 <HAL_PWREx_EnablePullUpPullDownConfig+0xc>)
 800746e:	6893      	ldr	r3, [r2, #8]
 8007470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007474:	6093      	str	r3, [r2, #8]
}
 8007476:	4770      	bx	lr
 8007478:	40007000 	.word	0x40007000

0800747c <HAL_PWREx_DisablePullUpPullDownConfig>:
  *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 800747c:	4a02      	ldr	r2, [pc, #8]	; (8007488 <HAL_PWREx_DisablePullUpPullDownConfig+0xc>)
 800747e:	6893      	ldr	r3, [r2, #8]
 8007480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007484:	6093      	str	r3, [r2, #8]
}
 8007486:	4770      	bx	lr
 8007488:	40007000 	.word	0x40007000

0800748c <HAL_PWREx_EnableSRAM2ContentRetention>:
  *         Standby mode and its content is kept.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 800748c:	4a02      	ldr	r2, [pc, #8]	; (8007498 <HAL_PWREx_EnableSRAM2ContentRetention+0xc>)
 800748e:	6893      	ldr	r3, [r2, #8]
 8007490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007494:	6093      	str	r3, [r2, #8]
}
 8007496:	4770      	bx	lr
 8007498:	40007000 	.word	0x40007000

0800749c <HAL_PWREx_DisableSRAM2ContentRetention>:
  *        and its content is lost.
  * @retval None
  */
void HAL_PWREx_DisableSRAM2ContentRetention(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 800749c:	4a02      	ldr	r2, [pc, #8]	; (80074a8 <HAL_PWREx_DisableSRAM2ContentRetention+0xc>)
 800749e:	6893      	ldr	r3, [r2, #8]
 80074a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a4:	6093      	str	r3, [r2, #8]
}
 80074a6:	4770      	bx	lr
 80074a8:	40007000 	.word	0x40007000

080074ac <HAL_PWREx_EnablePVM1>:
  * @brief Enable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM1(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_1);
 80074ac:	4a02      	ldr	r2, [pc, #8]	; (80074b8 <HAL_PWREx_EnablePVM1+0xc>)
 80074ae:	6853      	ldr	r3, [r2, #4]
 80074b0:	f043 0310 	orr.w	r3, r3, #16
 80074b4:	6053      	str	r3, [r2, #4]
}
 80074b6:	4770      	bx	lr
 80074b8:	40007000 	.word	0x40007000

080074bc <HAL_PWREx_DisablePVM1>:
  * @brief Disable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM1(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 80074bc:	4a02      	ldr	r2, [pc, #8]	; (80074c8 <HAL_PWREx_DisablePVM1+0xc>)
 80074be:	6853      	ldr	r3, [r2, #4]
 80074c0:	f023 0310 	bic.w	r3, r3, #16
 80074c4:	6053      	str	r3, [r2, #4]
}
 80074c6:	4770      	bx	lr
 80074c8:	40007000 	.word	0x40007000

080074cc <HAL_PWREx_EnablePVM2>:
  * @brief Enable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_EnablePVM2(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_2);
 80074cc:	4a02      	ldr	r2, [pc, #8]	; (80074d8 <HAL_PWREx_EnablePVM2+0xc>)
 80074ce:	6853      	ldr	r3, [r2, #4]
 80074d0:	f043 0320 	orr.w	r3, r3, #32
 80074d4:	6053      	str	r3, [r2, #4]
}
 80074d6:	4770      	bx	lr
 80074d8:	40007000 	.word	0x40007000

080074dc <HAL_PWREx_DisablePVM2>:
  * @brief Disable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_DisablePVM2(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_2);
 80074dc:	4a02      	ldr	r2, [pc, #8]	; (80074e8 <HAL_PWREx_DisablePVM2+0xc>)
 80074de:	6853      	ldr	r3, [r2, #4]
 80074e0:	f023 0320 	bic.w	r3, r3, #32
 80074e4:	6053      	str	r3, [r2, #4]
}
 80074e6:	4770      	bx	lr
 80074e8:	40007000 	.word	0x40007000

080074ec <HAL_PWREx_EnablePVM3>:
  * @brief Enable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_EnablePVM3(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_3);
 80074ec:	4a02      	ldr	r2, [pc, #8]	; (80074f8 <HAL_PWREx_EnablePVM3+0xc>)
 80074ee:	6853      	ldr	r3, [r2, #4]
 80074f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f4:	6053      	str	r3, [r2, #4]
}
 80074f6:	4770      	bx	lr
 80074f8:	40007000 	.word	0x40007000

080074fc <HAL_PWREx_DisablePVM3>:
  * @brief Disable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_DisablePVM3(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_3);
 80074fc:	4a02      	ldr	r2, [pc, #8]	; (8007508 <HAL_PWREx_DisablePVM3+0xc>)
 80074fe:	6853      	ldr	r3, [r2, #4]
 8007500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007504:	6053      	str	r3, [r2, #4]
}
 8007506:	4770      	bx	lr
 8007508:	40007000 	.word	0x40007000

0800750c <HAL_PWREx_EnablePVM4>:
  * @brief Enable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM4(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_4);
 800750c:	4a02      	ldr	r2, [pc, #8]	; (8007518 <HAL_PWREx_EnablePVM4+0xc>)
 800750e:	6853      	ldr	r3, [r2, #4]
 8007510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007514:	6053      	str	r3, [r2, #4]
}
 8007516:	4770      	bx	lr
 8007518:	40007000 	.word	0x40007000

0800751c <HAL_PWREx_DisablePVM4>:
  * @brief Disable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM4(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_4);
 800751c:	4a02      	ldr	r2, [pc, #8]	; (8007528 <HAL_PWREx_DisablePVM4+0xc>)
 800751e:	6853      	ldr	r3, [r2, #4]
 8007520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007524:	6053      	str	r3, [r2, #4]
}
 8007526:	4770      	bx	lr
 8007528:	40007000 	.word	0x40007000

0800752c <HAL_PWREx_ConfigPVM>:


  /* Configure EXTI 35 to 38 interrupts if so required:
     scan thru PVMType to detect which PVMx is set and
     configure the corresponding EXTI line accordingly. */
  switch (sConfigPVM->PVMType)
 800752c:	6803      	ldr	r3, [r0, #0]
 800752e:	2b20      	cmp	r3, #32
 8007530:	d078      	beq.n	8007624 <HAL_PWREx_ConfigPVM+0xf8>
 8007532:	d93d      	bls.n	80075b0 <HAL_PWREx_ConfigPVM+0x84>
 8007534:	2b40      	cmp	r3, #64	; 0x40
 8007536:	f000 80ac 	beq.w	8007692 <HAL_PWREx_ConfigPVM+0x166>
 800753a:	2b80      	cmp	r3, #128	; 0x80
 800753c:	f040 80e0 	bne.w	8007700 <HAL_PWREx_ConfigPVM+0x1d4>
      }
      break;

    case PWR_PVM_4:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM4_EXTI_DISABLE_EVENT();
 8007540:	4b74      	ldr	r3, [pc, #464]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007548:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM4_EXTI_DISABLE_IT();
 800754a:	6a1a      	ldr	r2, [r3, #32]
 800754c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007550:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM4_EXTI_DISABLE_FALLING_EDGE();
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007558:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM4_EXTI_DISABLE_RISING_EDGE();
 800755a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800755c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007560:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8007562:	6843      	ldr	r3, [r0, #4]
 8007564:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007568:	d004      	beq.n	8007574 <HAL_PWREx_ConfigPVM+0x48>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_IT();
 800756a:	4a6a      	ldr	r2, [pc, #424]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 800756c:	6a13      	ldr	r3, [r2, #32]
 800756e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007572:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8007574:	6843      	ldr	r3, [r0, #4]
 8007576:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800757a:	d004      	beq.n	8007586 <HAL_PWREx_ConfigPVM+0x5a>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
 800757c:	4a65      	ldr	r2, [pc, #404]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 800757e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007584:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8007586:	6843      	ldr	r3, [r0, #4]
 8007588:	f013 0f01 	tst.w	r3, #1
 800758c:	d004      	beq.n	8007598 <HAL_PWREx_ConfigPVM+0x6c>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
 800758e:	4a61      	ldr	r2, [pc, #388]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007590:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007596:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8007598:	6843      	ldr	r3, [r0, #4]
 800759a:	f013 0f02 	tst.w	r3, #2
 800759e:	f000 80b7 	beq.w	8007710 <HAL_PWREx_ConfigPVM+0x1e4>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
 80075a2:	4a5c      	ldr	r2, [pc, #368]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 80075a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80075a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075aa:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 80075ac:	2000      	movs	r0, #0
 80075ae:	4770      	bx	lr
  switch (sConfigPVM->PVMType)
 80075b0:	2b10      	cmp	r3, #16
 80075b2:	f040 80a5 	bne.w	8007700 <HAL_PWREx_ConfigPVM+0x1d4>
      __HAL_PWR_PVM1_EXTI_DISABLE_EVENT();
 80075b6:	4b57      	ldr	r3, [pc, #348]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 80075b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075ba:	f022 0208 	bic.w	r2, r2, #8
 80075be:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM1_EXTI_DISABLE_IT();
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	f022 0208 	bic.w	r2, r2, #8
 80075c6:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM1_EXTI_DISABLE_FALLING_EDGE();
 80075c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ca:	f022 0208 	bic.w	r2, r2, #8
 80075ce:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM1_EXTI_DISABLE_RISING_EDGE();
 80075d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d2:	f022 0208 	bic.w	r2, r2, #8
 80075d6:	629a      	str	r2, [r3, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 80075d8:	6843      	ldr	r3, [r0, #4]
 80075da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80075de:	d004      	beq.n	80075ea <HAL_PWREx_ConfigPVM+0xbe>
        __HAL_PWR_PVM1_EXTI_ENABLE_IT();
 80075e0:	4a4c      	ldr	r2, [pc, #304]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 80075e2:	6a13      	ldr	r3, [r2, #32]
 80075e4:	f043 0308 	orr.w	r3, r3, #8
 80075e8:	6213      	str	r3, [r2, #32]
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 80075ea:	6843      	ldr	r3, [r0, #4]
 80075ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80075f0:	d004      	beq.n	80075fc <HAL_PWREx_ConfigPVM+0xd0>
        __HAL_PWR_PVM1_EXTI_ENABLE_EVENT();
 80075f2:	4a48      	ldr	r2, [pc, #288]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 80075f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80075f6:	f043 0308 	orr.w	r3, r3, #8
 80075fa:	6253      	str	r3, [r2, #36]	; 0x24
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 80075fc:	6843      	ldr	r3, [r0, #4]
 80075fe:	f013 0f01 	tst.w	r3, #1
 8007602:	d004      	beq.n	800760e <HAL_PWREx_ConfigPVM+0xe2>
        __HAL_PWR_PVM1_EXTI_ENABLE_RISING_EDGE();
 8007604:	4a43      	ldr	r2, [pc, #268]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007606:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007608:	f043 0308 	orr.w	r3, r3, #8
 800760c:	6293      	str	r3, [r2, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 800760e:	6843      	ldr	r3, [r0, #4]
 8007610:	f013 0f02 	tst.w	r3, #2
 8007614:	d076      	beq.n	8007704 <HAL_PWREx_ConfigPVM+0x1d8>
        __HAL_PWR_PVM1_EXTI_ENABLE_FALLING_EDGE();
 8007616:	4a3f      	ldr	r2, [pc, #252]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007618:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800761a:	f043 0308 	orr.w	r3, r3, #8
 800761e:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8007620:	2000      	movs	r0, #0
 8007622:	4770      	bx	lr
      __HAL_PWR_PVM2_EXTI_DISABLE_EVENT();
 8007624:	4b3b      	ldr	r3, [pc, #236]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007628:	f022 0210 	bic.w	r2, r2, #16
 800762c:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM2_EXTI_DISABLE_IT();
 800762e:	6a1a      	ldr	r2, [r3, #32]
 8007630:	f022 0210 	bic.w	r2, r2, #16
 8007634:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM2_EXTI_DISABLE_FALLING_EDGE();
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	f022 0210 	bic.w	r2, r2, #16
 800763c:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM2_EXTI_DISABLE_RISING_EDGE();
 800763e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007640:	f022 0210 	bic.w	r2, r2, #16
 8007644:	629a      	str	r2, [r3, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8007646:	6843      	ldr	r3, [r0, #4]
 8007648:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800764c:	d004      	beq.n	8007658 <HAL_PWREx_ConfigPVM+0x12c>
        __HAL_PWR_PVM2_EXTI_ENABLE_IT();
 800764e:	4a31      	ldr	r2, [pc, #196]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007650:	6a13      	ldr	r3, [r2, #32]
 8007652:	f043 0310 	orr.w	r3, r3, #16
 8007656:	6213      	str	r3, [r2, #32]
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8007658:	6843      	ldr	r3, [r0, #4]
 800765a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800765e:	d004      	beq.n	800766a <HAL_PWREx_ConfigPVM+0x13e>
        __HAL_PWR_PVM2_EXTI_ENABLE_EVENT();
 8007660:	4a2c      	ldr	r2, [pc, #176]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007662:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007664:	f043 0310 	orr.w	r3, r3, #16
 8007668:	6253      	str	r3, [r2, #36]	; 0x24
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 800766a:	6843      	ldr	r3, [r0, #4]
 800766c:	f013 0f01 	tst.w	r3, #1
 8007670:	d004      	beq.n	800767c <HAL_PWREx_ConfigPVM+0x150>
        __HAL_PWR_PVM2_EXTI_ENABLE_RISING_EDGE();
 8007672:	4a28      	ldr	r2, [pc, #160]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007674:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007676:	f043 0310 	orr.w	r3, r3, #16
 800767a:	6293      	str	r3, [r2, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 800767c:	6843      	ldr	r3, [r0, #4]
 800767e:	f013 0f02 	tst.w	r3, #2
 8007682:	d041      	beq.n	8007708 <HAL_PWREx_ConfigPVM+0x1dc>
        __HAL_PWR_PVM2_EXTI_ENABLE_FALLING_EDGE();
 8007684:	4a23      	ldr	r2, [pc, #140]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007686:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007688:	f043 0310 	orr.w	r3, r3, #16
 800768c:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 800768e:	2000      	movs	r0, #0
 8007690:	4770      	bx	lr
      __HAL_PWR_PVM3_EXTI_DISABLE_EVENT();
 8007692:	4b20      	ldr	r3, [pc, #128]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007696:	f022 0220 	bic.w	r2, r2, #32
 800769a:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM3_EXTI_DISABLE_IT();
 800769c:	6a1a      	ldr	r2, [r3, #32]
 800769e:	f022 0220 	bic.w	r2, r2, #32
 80076a2:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM3_EXTI_DISABLE_FALLING_EDGE();
 80076a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a6:	f022 0220 	bic.w	r2, r2, #32
 80076aa:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM3_EXTI_DISABLE_RISING_EDGE();
 80076ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ae:	f022 0220 	bic.w	r2, r2, #32
 80076b2:	629a      	str	r2, [r3, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 80076b4:	6843      	ldr	r3, [r0, #4]
 80076b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80076ba:	d004      	beq.n	80076c6 <HAL_PWREx_ConfigPVM+0x19a>
        __HAL_PWR_PVM3_EXTI_ENABLE_IT();
 80076bc:	4a15      	ldr	r2, [pc, #84]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 80076be:	6a13      	ldr	r3, [r2, #32]
 80076c0:	f043 0320 	orr.w	r3, r3, #32
 80076c4:	6213      	str	r3, [r2, #32]
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 80076c6:	6843      	ldr	r3, [r0, #4]
 80076c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80076cc:	d004      	beq.n	80076d8 <HAL_PWREx_ConfigPVM+0x1ac>
        __HAL_PWR_PVM3_EXTI_ENABLE_EVENT();
 80076ce:	4a11      	ldr	r2, [pc, #68]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 80076d0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80076d2:	f043 0320 	orr.w	r3, r3, #32
 80076d6:	6253      	str	r3, [r2, #36]	; 0x24
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 80076d8:	6843      	ldr	r3, [r0, #4]
 80076da:	f013 0f01 	tst.w	r3, #1
 80076de:	d004      	beq.n	80076ea <HAL_PWREx_ConfigPVM+0x1be>
        __HAL_PWR_PVM3_EXTI_ENABLE_RISING_EDGE();
 80076e0:	4a0c      	ldr	r2, [pc, #48]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 80076e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80076e4:	f043 0320 	orr.w	r3, r3, #32
 80076e8:	6293      	str	r3, [r2, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 80076ea:	6843      	ldr	r3, [r0, #4]
 80076ec:	f013 0f02 	tst.w	r3, #2
 80076f0:	d00c      	beq.n	800770c <HAL_PWREx_ConfigPVM+0x1e0>
        __HAL_PWR_PVM3_EXTI_ENABLE_FALLING_EDGE();
 80076f2:	4a08      	ldr	r2, [pc, #32]	; (8007714 <HAL_PWREx_ConfigPVM+0x1e8>)
 80076f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076f6:	f043 0320 	orr.w	r3, r3, #32
 80076fa:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 80076fc:	2000      	movs	r0, #0
 80076fe:	4770      	bx	lr
      }
      break;

    default:
      status = HAL_ERROR;
 8007700:	2001      	movs	r0, #1
 8007702:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8007704:	2000      	movs	r0, #0
 8007706:	4770      	bx	lr
 8007708:	2000      	movs	r0, #0
 800770a:	4770      	bx	lr
 800770c:	2000      	movs	r0, #0
 800770e:	4770      	bx	lr
 8007710:	2000      	movs	r0, #0
      break;
  }

  return status;
}
 8007712:	4770      	bx	lr
 8007714:	40010400 	.word	0x40010400

08007718 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8007718:	4a02      	ldr	r2, [pc, #8]	; (8007724 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007720:	6013      	str	r3, [r2, #0]
}
 8007722:	4770      	bx	lr
 8007724:	40007000 	.word	0x40007000

08007728 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8007728:	4a12      	ldr	r2, [pc, #72]	; (8007774 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007730:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007732:	4b11      	ldr	r3, [pc, #68]	; (8007778 <HAL_PWREx_DisableLowPowerRunMode+0x50>)
 8007734:	6819      	ldr	r1, [r3, #0]
 8007736:	2332      	movs	r3, #50	; 0x32
 8007738:	fb03 f301 	mul.w	r3, r3, r1
 800773c:	490f      	ldr	r1, [pc, #60]	; (800777c <HAL_PWREx_DisableLowPowerRunMode+0x54>)
 800773e:	fba1 1303 	umull	r1, r3, r1, r3
 8007742:	0c9b      	lsrs	r3, r3, #18
 8007744:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007746:	6952      	ldr	r2, [r2, #20]
 8007748:	f412 7f00 	tst.w	r2, #512	; 0x200
 800774c:	d008      	beq.n	8007760 <HAL_PWREx_DisableLowPowerRunMode+0x38>
 800774e:	b13b      	cbz	r3, 8007760 <HAL_PWREx_DisableLowPowerRunMode+0x38>
 8007750:	4908      	ldr	r1, [pc, #32]	; (8007774 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
  {
    wait_loop_index--;
 8007752:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007754:	694a      	ldr	r2, [r1, #20]
 8007756:	f412 7f00 	tst.w	r2, #512	; 0x200
 800775a:	d001      	beq.n	8007760 <HAL_PWREx_DisableLowPowerRunMode+0x38>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f8      	bne.n	8007752 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8007760:	4b04      	ldr	r3, [pc, #16]	; (8007774 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	f403 7300 	and.w	r3, r3, #512	; 0x200
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8007768:	2b00      	cmp	r3, #0
}
 800776a:	bf14      	ite	ne
 800776c:	2003      	movne	r0, #3
 800776e:	2000      	moveq	r0, #0
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40007000 	.word	0x40007000
 8007778:	20000008 	.word	0x20000008
 800777c:	431bde83 	.word	0x431bde83

08007780 <HAL_PWREx_EnterSTOP0Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8007780:	4a0b      	ldr	r2, [pc, #44]	; (80077b0 <HAL_PWREx_EnterSTOP0Mode+0x30>)
 8007782:	6813      	ldr	r3, [r2, #0]
 8007784:	f023 0307 	bic.w	r3, r3, #7
 8007788:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800778a:	4a0a      	ldr	r2, [pc, #40]	; (80077b4 <HAL_PWREx_EnterSTOP0Mode+0x34>)
 800778c:	6913      	ldr	r3, [r2, #16]
 800778e:	f043 0304 	orr.w	r3, r3, #4
 8007792:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007794:	2801      	cmp	r0, #1
 8007796:	d008      	beq.n	80077aa <HAL_PWREx_EnterSTOP0Mode+0x2a>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007798:	bf40      	sev
    __WFE();
 800779a:	bf20      	wfe
    __WFE();
 800779c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800779e:	4a05      	ldr	r2, [pc, #20]	; (80077b4 <HAL_PWREx_EnterSTOP0Mode+0x34>)
 80077a0:	6913      	ldr	r3, [r2, #16]
 80077a2:	f023 0304 	bic.w	r3, r3, #4
 80077a6:	6113      	str	r3, [r2, #16]
}
 80077a8:	4770      	bx	lr
    __WFI();
 80077aa:	bf30      	wfi
 80077ac:	e7f7      	b.n	800779e <HAL_PWREx_EnterSTOP0Mode+0x1e>
 80077ae:	bf00      	nop
 80077b0:	40007000 	.word	0x40007000
 80077b4:	e000ed00 	.word	0xe000ed00

080077b8 <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80077b8:	4a0c      	ldr	r2, [pc, #48]	; (80077ec <HAL_PWREx_EnterSTOP1Mode+0x34>)
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	f023 0307 	bic.w	r3, r3, #7
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80077c6:	4a0a      	ldr	r2, [pc, #40]	; (80077f0 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 80077c8:	6913      	ldr	r3, [r2, #16]
 80077ca:	f043 0304 	orr.w	r3, r3, #4
 80077ce:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80077d0:	2801      	cmp	r0, #1
 80077d2:	d008      	beq.n	80077e6 <HAL_PWREx_EnterSTOP1Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80077d4:	bf40      	sev
    __WFE();
 80077d6:	bf20      	wfe
    __WFE();
 80077d8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80077da:	4a05      	ldr	r2, [pc, #20]	; (80077f0 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 80077dc:	6913      	ldr	r3, [r2, #16]
 80077de:	f023 0304 	bic.w	r3, r3, #4
 80077e2:	6113      	str	r3, [r2, #16]
}
 80077e4:	4770      	bx	lr
    __WFI();
 80077e6:	bf30      	wfi
 80077e8:	e7f7      	b.n	80077da <HAL_PWREx_EnterSTOP1Mode+0x22>
 80077ea:	bf00      	nop
 80077ec:	40007000 	.word	0x40007000
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <HAL_PWREx_EnterSTOP2Mode>:
{
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80077f4:	4a0c      	ldr	r2, [pc, #48]	; (8007828 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80077f6:	6813      	ldr	r3, [r2, #0]
 80077f8:	f023 0307 	bic.w	r3, r3, #7
 80077fc:	f043 0302 	orr.w	r3, r3, #2
 8007800:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007802:	4a0a      	ldr	r2, [pc, #40]	; (800782c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8007804:	6913      	ldr	r3, [r2, #16]
 8007806:	f043 0304 	orr.w	r3, r3, #4
 800780a:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800780c:	2801      	cmp	r0, #1
 800780e:	d008      	beq.n	8007822 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007810:	bf40      	sev
    __WFE();
 8007812:	bf20      	wfe
    __WFE();
 8007814:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007816:	4a05      	ldr	r2, [pc, #20]	; (800782c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8007818:	6913      	ldr	r3, [r2, #16]
 800781a:	f023 0304 	bic.w	r3, r3, #4
 800781e:	6113      	str	r3, [r2, #16]
}
 8007820:	4770      	bx	lr
    __WFI();
 8007822:	bf30      	wfi
 8007824:	e7f7      	b.n	8007816 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8007826:	bf00      	nop
 8007828:	40007000 	.word	0x40007000
 800782c:	e000ed00 	.word	0xe000ed00

08007830 <HAL_PWREx_EnterSHUTDOWNMode>:
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8007830:	4a06      	ldr	r2, [pc, #24]	; (800784c <HAL_PWREx_EnterSHUTDOWNMode+0x1c>)
 8007832:	6813      	ldr	r3, [r2, #0]
 8007834:	f023 0307 	bic.w	r3, r3, #7
 8007838:	f043 0304 	orr.w	r3, r3, #4
 800783c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800783e:	4a04      	ldr	r2, [pc, #16]	; (8007850 <HAL_PWREx_EnterSHUTDOWNMode+0x20>)
 8007840:	6913      	ldr	r3, [r2, #16]
 8007842:	f043 0304 	orr.w	r3, r3, #4
 8007846:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007848:	bf30      	wfi
}
 800784a:	4770      	bx	lr
 800784c:	40007000 	.word	0x40007000
 8007850:	e000ed00 	.word	0xe000ed00

08007854 <HAL_PWREx_PVM1Callback>:
__weak void HAL_PWREx_PVM1Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8007854:	4770      	bx	lr

08007856 <HAL_PWREx_PVM2Callback>:
__weak void HAL_PWREx_PVM2Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8007856:	4770      	bx	lr

08007858 <HAL_PWREx_PVM3Callback>:
__weak void HAL_PWREx_PVM3Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8007858:	4770      	bx	lr

0800785a <HAL_PWREx_PVM4Callback>:
__weak void HAL_PWREx_PVM4Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800785a:	4770      	bx	lr

0800785c <HAL_PWREx_PVD_PVM_IRQHandler>:
{
 800785c:	b508      	push	{r3, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800785e:	4b1c      	ldr	r3, [pc, #112]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007866:	d114      	bne.n	8007892 <HAL_PWREx_PVD_PVM_IRQHandler+0x36>
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8007868:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800786a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786c:	f013 0f08 	tst.w	r3, #8
 8007870:	d116      	bne.n	80078a0 <HAL_PWREx_PVD_PVM_IRQHandler+0x44>
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8007872:	4b17      	ldr	r3, [pc, #92]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 8007874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007876:	f013 0f10 	tst.w	r3, #16
 800787a:	d117      	bne.n	80078ac <HAL_PWREx_PVD_PVM_IRQHandler+0x50>
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800787c:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800787e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007880:	f013 0f20 	tst.w	r3, #32
 8007884:	d118      	bne.n	80078b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x5c>
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8007886:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800788e:	d119      	bne.n	80078c4 <HAL_PWREx_PVD_PVM_IRQHandler+0x68>
}
 8007890:	bd08      	pop	{r3, pc}
    HAL_PWR_PVDCallback();
 8007892:	f7ff fbf5 	bl	8007080 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007896:	4b0e      	ldr	r3, [pc, #56]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 8007898:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800789c:	615a      	str	r2, [r3, #20]
 800789e:	e7e3      	b.n	8007868 <HAL_PWREx_PVD_PVM_IRQHandler+0xc>
    HAL_PWREx_PVM1Callback();
 80078a0:	f7ff ffd8 	bl	8007854 <HAL_PWREx_PVM1Callback>
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 80078a6:	2208      	movs	r2, #8
 80078a8:	635a      	str	r2, [r3, #52]	; 0x34
 80078aa:	e7e2      	b.n	8007872 <HAL_PWREx_PVD_PVM_IRQHandler+0x16>
    HAL_PWREx_PVM2Callback();
 80078ac:	f7ff ffd3 	bl	8007856 <HAL_PWREx_PVM2Callback>
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 80078b2:	2210      	movs	r2, #16
 80078b4:	635a      	str	r2, [r3, #52]	; 0x34
 80078b6:	e7e1      	b.n	800787c <HAL_PWREx_PVD_PVM_IRQHandler+0x20>
    HAL_PWREx_PVM3Callback();
 80078b8:	f7ff ffce 	bl	8007858 <HAL_PWREx_PVM3Callback>
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80078bc:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 80078be:	2220      	movs	r2, #32
 80078c0:	635a      	str	r2, [r3, #52]	; 0x34
 80078c2:	e7e0      	b.n	8007886 <HAL_PWREx_PVD_PVM_IRQHandler+0x2a>
    HAL_PWREx_PVM4Callback();
 80078c4:	f7ff ffc9 	bl	800785a <HAL_PWREx_PVM4Callback>
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 80078c8:	4b01      	ldr	r3, [pc, #4]	; (80078d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 80078ca:	2240      	movs	r2, #64	; 0x40
 80078cc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80078ce:	e7df      	b.n	8007890 <HAL_PWREx_PVD_PVM_IRQHandler+0x34>
 80078d0:	40010400 	.word	0x40010400

080078d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80078d4:	b530      	push	{r4, r5, lr}
 80078d6:	b083      	sub	sp, #12
 80078d8:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80078da:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80078dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078de:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80078e2:	d00c      	beq.n	80078fe <RCC_SetFlashLatencyFromMSIRange+0x2a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80078e4:	f7ff fbce 	bl	8007084 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80078ec:	d018      	beq.n	8007920 <RCC_SetFlashLatencyFromMSIRange+0x4c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80078ee:	2c80      	cmp	r4, #128	; 0x80
 80078f0:	d81f      	bhi.n	8007932 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80078f2:	d02d      	beq.n	8007950 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80078f4:	2c70      	cmp	r4, #112	; 0x70
 80078f6:	bf14      	ite	ne
 80078f8:	2400      	movne	r4, #0
 80078fa:	2401      	moveq	r4, #1
 80078fc:	e01a      	b.n	8007934 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80078fe:	4d15      	ldr	r5, [pc, #84]	; (8007954 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8007900:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007906:	65ab      	str	r3, [r5, #88]	; 0x58
 8007908:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800790a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8007912:	f7ff fbb7 	bl	8007084 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8007916:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800791c:	65ab      	str	r3, [r5, #88]	; 0x58
 800791e:	e7e3      	b.n	80078e8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8007920:	2c80      	cmp	r4, #128	; 0x80
 8007922:	d904      	bls.n	800792e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8007924:	2ca0      	cmp	r4, #160	; 0xa0
 8007926:	bf8c      	ite	hi
 8007928:	2402      	movhi	r4, #2
 800792a:	2401      	movls	r4, #1
 800792c:	e002      	b.n	8007934 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800792e:	2400      	movs	r4, #0
 8007930:	e000      	b.n	8007934 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8007932:	2403      	movs	r4, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007934:	4908      	ldr	r1, [pc, #32]	; (8007958 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8007936:	680b      	ldr	r3, [r1, #0]
 8007938:	f023 0307 	bic.w	r3, r3, #7
 800793c:	4323      	orrs	r3, r4
 800793e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007940:	6808      	ldr	r0, [r1, #0]
 8007942:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007946:	1b00      	subs	r0, r0, r4
 8007948:	bf18      	it	ne
 800794a:	2001      	movne	r0, #1
 800794c:	b003      	add	sp, #12
 800794e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8007950:	2402      	movs	r4, #2
 8007952:	e7ef      	b.n	8007934 <RCC_SetFlashLatencyFromMSIRange+0x60>
 8007954:	40021000 	.word	0x40021000
 8007958:	40022000 	.word	0x40022000

0800795c <HAL_RCC_DeInit>:
{
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800795e:	4a37      	ldr	r2, [pc, #220]	; (8007a3c <HAL_RCC_DeInit+0xe0>)
 8007960:	6813      	ldr	r3, [r2, #0]
 8007962:	f043 0301 	orr.w	r3, r3, #1
 8007966:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8007968:	f7fa fb94 	bl	8002094 <HAL_GetTick>
 800796c:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800796e:	4c33      	ldr	r4, [pc, #204]	; (8007a3c <HAL_RCC_DeInit+0xe0>)
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	f013 0f02 	tst.w	r3, #2
 8007976:	d107      	bne.n	8007988 <HAL_RCC_DeInit+0x2c>
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007978:	f7fa fb8c 	bl	8002094 <HAL_GetTick>
 800797c:	1b40      	subs	r0, r0, r5
 800797e:	2802      	cmp	r0, #2
 8007980:	d9f6      	bls.n	8007970 <HAL_RCC_DeInit+0x14>
      return HAL_TIMEOUT;
 8007982:	2403      	movs	r4, #3
}
 8007984:	4620      	mov	r0, r4
 8007986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8007988:	4a2c      	ldr	r2, [pc, #176]	; (8007a3c <HAL_RCC_DeInit+0xe0>)
 800798a:	6813      	ldr	r3, [r2, #0]
 800798c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007990:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007994:	6013      	str	r3, [r2, #0]
  CLEAR_REG(RCC->CFGR);
 8007996:	2300      	movs	r3, #0
 8007998:	6093      	str	r3, [r2, #8]
  SystemCoreClock = MSI_VALUE;
 800799a:	4b29      	ldr	r3, [pc, #164]	; (8007a40 <HAL_RCC_DeInit+0xe4>)
 800799c:	4a29      	ldr	r2, [pc, #164]	; (8007a44 <HAL_RCC_DeInit+0xe8>)
 800799e:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80079a0:	4b29      	ldr	r3, [pc, #164]	; (8007a48 <HAL_RCC_DeInit+0xec>)
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	f7fa fb2c 	bl	8002000 <HAL_InitTick>
 80079a8:	4604      	mov	r4, r0
 80079aa:	b108      	cbz	r0, 80079b0 <HAL_RCC_DeInit+0x54>
    return HAL_ERROR;
 80079ac:	2401      	movs	r4, #1
 80079ae:	e7e9      	b.n	8007984 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 80079b0:	f7fa fb70 	bl	8002094 <HAL_GetTick>
 80079b4:	4607      	mov	r7, r0
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80079b6:	4d21      	ldr	r5, [pc, #132]	; (8007a3c <HAL_RCC_DeInit+0xe0>)
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079b8:	f241 3688 	movw	r6, #5000	; 0x1388
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80079bc:	68ab      	ldr	r3, [r5, #8]
 80079be:	f013 0f0c 	tst.w	r3, #12
 80079c2:	d006      	beq.n	80079d2 <HAL_RCC_DeInit+0x76>
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079c4:	f7fa fb66 	bl	8002094 <HAL_GetTick>
 80079c8:	1bc0      	subs	r0, r0, r7
 80079ca:	42b0      	cmp	r0, r6
 80079cc:	d9f6      	bls.n	80079bc <HAL_RCC_DeInit+0x60>
      return HAL_TIMEOUT;
 80079ce:	2403      	movs	r4, #3
 80079d0:	e7d8      	b.n	8007984 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 80079d2:	4a1a      	ldr	r2, [pc, #104]	; (8007a3c <HAL_RCC_DeInit+0xe0>)
 80079d4:	6811      	ldr	r1, [r2, #0]
 80079d6:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <HAL_RCC_DeInit+0xf0>)
 80079d8:	400b      	ands	r3, r1
 80079da:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80079dc:	f7fa fb5a 	bl	8002094 <HAL_GetTick>
 80079e0:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 80079e2:	4d16      	ldr	r5, [pc, #88]	; (8007a3c <HAL_RCC_DeInit+0xe0>)
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	f013 5f28 	tst.w	r3, #704643072	; 0x2a000000
 80079ea:	d006      	beq.n	80079fa <HAL_RCC_DeInit+0x9e>
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ec:	f7fa fb52 	bl	8002094 <HAL_GetTick>
 80079f0:	1b80      	subs	r0, r0, r6
 80079f2:	2802      	cmp	r0, #2
 80079f4:	d9f6      	bls.n	80079e4 <HAL_RCC_DeInit+0x88>
      return HAL_TIMEOUT;
 80079f6:	2403      	movs	r4, #3
 80079f8:	e7c4      	b.n	8007984 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->PLLCFGR);
 80079fa:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <HAL_RCC_DeInit+0xe0>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8007a00:	68d9      	ldr	r1, [r3, #12]
 8007a02:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007a06:	60d9      	str	r1, [r3, #12]
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8007a08:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8007a0a:	6919      	ldr	r1, [r3, #16]
 8007a0c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007a10:	6119      	str	r1, [r3, #16]
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8007a12:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 8007a14:	6959      	ldr	r1, [r3, #20]
 8007a16:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007a1a:	6159      	str	r1, [r3, #20]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8007a1c:	6819      	ldr	r1, [r3, #0]
 8007a1e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007a22:	6019      	str	r1, [r3, #0]
  CLEAR_REG(RCC->CIER);
 8007a24:	619a      	str	r2, [r3, #24]
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8007a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a2a:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8007a2c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007a30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007a34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return HAL_OK;
 8007a38:	e7a4      	b.n	8007984 <HAL_RCC_DeInit+0x28>
 8007a3a:	bf00      	nop
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	20000008 	.word	0x20000008
 8007a44:	003d0900 	.word	0x003d0900
 8007a48:	20000010 	.word	0x20000010
 8007a4c:	eafef4ff 	.word	0xeafef4ff

08007a50 <HAL_RCC_MCOConfig>:
{
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	460d      	mov	r5, r1
 8007a56:	4616      	mov	r6, r2
  __MCO1_CLK_ENABLE();
 8007a58:	4c0f      	ldr	r4, [pc, #60]	; (8007a98 <HAL_RCC_MCOConfig+0x48>)
 8007a5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007a5c:	f043 0301 	orr.w	r3, r3, #1
 8007a60:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007a62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = MCO1_PIN;
 8007a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a70:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a72:	2302      	movs	r3, #2
 8007a74:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a76:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007a7c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007a7e:	a901      	add	r1, sp, #4
 8007a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a84:	f7fb ff32 	bl	80038ec <HAL_GPIO_Init>
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8007a88:	68a1      	ldr	r1, [r4, #8]
 8007a8a:	f021 41ee 	bic.w	r1, r1, #1996488704	; 0x77000000
 8007a8e:	4331      	orrs	r1, r6
 8007a90:	4329      	orrs	r1, r5
 8007a92:	60a1      	str	r1, [r4, #8]
}
 8007a94:	b006      	add	sp, #24
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	40021000 	.word	0x40021000

08007a9c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a9c:	4a25      	ldr	r2, [pc, #148]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a9e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007aa0:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007aa2:	f013 030c 	ands.w	r3, r3, #12
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_RCC_GetSysClockFreq+0x2a>
 8007aa8:	2b0c      	cmp	r3, #12
 8007aaa:	d006      	beq.n	8007aba <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d03f      	beq.n	8007b30 <HAL_RCC_GetSysClockFreq+0x94>
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	4821      	ldr	r0, [pc, #132]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007ab4:	bf18      	it	ne
 8007ab6:	2000      	movne	r0, #0
 8007ab8:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007aba:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007abe:	2a01      	cmp	r2, #1
 8007ac0:	d001      	beq.n	8007ac6 <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	e012      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ac6:	4a1b      	ldr	r2, [pc, #108]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ace:	4a19      	ldr	r2, [pc, #100]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8007ad0:	bf07      	ittee	eq
 8007ad2:	f8d2 2094 	ldreq.w	r2, [r2, #148]	; 0x94
 8007ad6:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ada:	6812      	ldrne	r2, [r2, #0]
 8007adc:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8007ae0:	4916      	ldr	r1, [pc, #88]	; (8007b3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007ae2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ae6:	b323      	cbz	r3, 8007b32 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007ae8:	2b0c      	cmp	r3, #12
 8007aea:	d11f      	bne.n	8007b2c <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aec:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d017      	beq.n	8007b28 <HAL_RCC_GetSysClockFreq+0x8c>
      pllvco = HSE_VALUE;
 8007af8:	4a0f      	ldr	r2, [pc, #60]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	bf08      	it	eq
 8007afe:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b00:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8007b02:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b04:	68d9      	ldr	r1, [r3, #12]
 8007b06:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8007b0a:	fb00 f001 	mul.w	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b0e:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b10:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007b14:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b16:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b1a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007b1e:	3301      	adds	r3, #1
 8007b20:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8007b22:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b26:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8007b28:	4805      	ldr	r0, [pc, #20]	; (8007b40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007b2a:	e7e9      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x64>
 8007b2c:	2000      	movs	r0, #0
  return sysclockfreq;
 8007b2e:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007b30:	4803      	ldr	r0, [pc, #12]	; (8007b40 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8007b32:	4770      	bx	lr
 8007b34:	40021000 	.word	0x40021000
 8007b38:	007a1200 	.word	0x007a1200
 8007b3c:	08013c40 	.word	0x08013c40
 8007b40:	00f42400 	.word	0x00f42400

08007b44 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f000 82db 	beq.w	8008100 <HAL_RCC_OscConfig+0x5bc>
{
 8007b4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b52:	4bad      	ldr	r3, [pc, #692]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007b54:	689d      	ldr	r5, [r3, #8]
 8007b56:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b5a:	68de      	ldr	r6, [r3, #12]
 8007b5c:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b60:	6803      	ldr	r3, [r0, #0]
 8007b62:	f013 0f10 	tst.w	r3, #16
 8007b66:	d062      	beq.n	8007c2e <HAL_RCC_OscConfig+0xea>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007b68:	b1ed      	cbz	r5, 8007ba6 <HAL_RCC_OscConfig+0x62>
 8007b6a:	2d0c      	cmp	r5, #12
 8007b6c:	d019      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x5e>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007b6e:	69a3      	ldr	r3, [r4, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 80b6 	beq.w	8007ce2 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_MSI_ENABLE();
 8007b76:	4aa4      	ldr	r2, [pc, #656]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007b78:	6813      	ldr	r3, [r2, #0]
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007b80:	f7fa fa88 	bl	8002094 <HAL_GetTick>
 8007b84:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b86:	4fa0      	ldr	r7, [pc, #640]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f013 0f02 	tst.w	r3, #2
 8007b8e:	f040 8095 	bne.w	8007cbc <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b92:	f7fa fa7f 	bl	8002094 <HAL_GetTick>
 8007b96:	eba0 0008 	sub.w	r0, r0, r8
 8007b9a:	2802      	cmp	r0, #2
 8007b9c:	d9f4      	bls.n	8007b88 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e2ba      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007ba2:	2e01      	cmp	r6, #1
 8007ba4:	d1e3      	bne.n	8007b6e <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007ba6:	4b98      	ldr	r3, [pc, #608]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f013 0f02 	tst.w	r3, #2
 8007bae:	d003      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x74>
 8007bb0:	69a3      	ldr	r3, [r4, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 82a7 	beq.w	8008106 <HAL_RCC_OscConfig+0x5c2>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007bb8:	6a20      	ldr	r0, [r4, #32]
 8007bba:	4b93      	ldr	r3, [pc, #588]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f013 0f08 	tst.w	r3, #8
 8007bc2:	4b91      	ldr	r3, [pc, #580]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007bc4:	bf12      	itee	ne
 8007bc6:	681b      	ldrne	r3, [r3, #0]
 8007bc8:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8007bcc:	091b      	lsreq	r3, r3, #4
 8007bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bd2:	4298      	cmp	r0, r3
 8007bd4:	d959      	bls.n	8007c8a <HAL_RCC_OscConfig+0x146>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007bd6:	f7ff fe7d 	bl	80078d4 <RCC_SetFlashLatencyFromMSIRange>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f040 8295 	bne.w	800810a <HAL_RCC_OscConfig+0x5c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007be0:	4b89      	ldr	r3, [pc, #548]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	f042 0208 	orr.w	r2, r2, #8
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007bf0:	6a21      	ldr	r1, [r4, #32]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	69e1      	ldr	r1, [r4, #28]
 8007bfa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007bfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007c02:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c04:	f7ff ff4a 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 8007c08:	4b7f      	ldr	r3, [pc, #508]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007c10:	4a7e      	ldr	r2, [pc, #504]	; (8007e0c <HAL_RCC_OscConfig+0x2c8>)
 8007c12:	5cd3      	ldrb	r3, [r2, r3]
 8007c14:	f003 031f 	and.w	r3, r3, #31
 8007c18:	40d8      	lsrs	r0, r3
 8007c1a:	4b7d      	ldr	r3, [pc, #500]	; (8007e10 <HAL_RCC_OscConfig+0x2cc>)
 8007c1c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8007c1e:	4b7d      	ldr	r3, [pc, #500]	; (8007e14 <HAL_RCC_OscConfig+0x2d0>)
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	f7fa f9ed 	bl	8002000 <HAL_InitTick>
        if(status != HAL_OK)
 8007c26:	4603      	mov	r3, r0
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	f040 8275 	bne.w	8008118 <HAL_RCC_OscConfig+0x5d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	f013 0f01 	tst.w	r3, #1
 8007c34:	d075      	beq.n	8007d22 <HAL_RCC_OscConfig+0x1de>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007c36:	2d08      	cmp	r5, #8
 8007c38:	d06a      	beq.n	8007d10 <HAL_RCC_OscConfig+0x1cc>
 8007c3a:	2d0c      	cmp	r5, #12
 8007c3c:	d066      	beq.n	8007d0c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c44:	f000 808c 	beq.w	8007d60 <HAL_RCC_OscConfig+0x21c>
 8007c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c4c:	f000 808e 	beq.w	8007d6c <HAL_RCC_OscConfig+0x228>
 8007c50:	4b6d      	ldr	r3, [pc, #436]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c60:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 808e 	beq.w	8007d86 <HAL_RCC_OscConfig+0x242>
        tickstart = HAL_GetTick();
 8007c6a:	f7fa fa13 	bl	8002094 <HAL_GetTick>
 8007c6e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c70:	4f65      	ldr	r7, [pc, #404]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007c78:	d153      	bne.n	8007d22 <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c7a:	f7fa fa0b 	bl	8002094 <HAL_GetTick>
 8007c7e:	eba0 0008 	sub.w	r0, r0, r8
 8007c82:	2864      	cmp	r0, #100	; 0x64
 8007c84:	d9f5      	bls.n	8007c72 <HAL_RCC_OscConfig+0x12e>
            return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e246      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c8a:	4b5f      	ldr	r3, [pc, #380]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	f042 0208 	orr.w	r2, r2, #8
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007c9a:	6a21      	ldr	r1, [r4, #32]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	69e1      	ldr	r1, [r4, #28]
 8007ca4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007ca8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007cac:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007cae:	6a20      	ldr	r0, [r4, #32]
 8007cb0:	f7ff fe10 	bl	80078d4 <RCC_SetFlashLatencyFromMSIRange>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d0a5      	beq.n	8007c04 <HAL_RCC_OscConfig+0xc0>
            return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e22d      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cbc:	4b52      	ldr	r3, [pc, #328]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	f042 0208 	orr.w	r2, r2, #8
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007ccc:	6a21      	ldr	r1, [r4, #32]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	69e1      	ldr	r1, [r4, #28]
 8007cd6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007cda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007cde:	605a      	str	r2, [r3, #4]
 8007ce0:	e7a5      	b.n	8007c2e <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8007ce2:	4a49      	ldr	r2, [pc, #292]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007ce4:	6813      	ldr	r3, [r2, #0]
 8007ce6:	f023 0301 	bic.w	r3, r3, #1
 8007cea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007cec:	f7fa f9d2 	bl	8002094 <HAL_GetTick>
 8007cf0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007cf2:	4f45      	ldr	r7, [pc, #276]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	f013 0f02 	tst.w	r3, #2
 8007cfa:	d098      	beq.n	8007c2e <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cfc:	f7fa f9ca 	bl	8002094 <HAL_GetTick>
 8007d00:	eba0 0008 	sub.w	r0, r0, r8
 8007d04:	2802      	cmp	r0, #2
 8007d06:	d9f5      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e205      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007d0c:	2e03      	cmp	r6, #3
 8007d0e:	d196      	bne.n	8007c3e <HAL_RCC_OscConfig+0xfa>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d10:	4b3d      	ldr	r3, [pc, #244]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007d18:	d003      	beq.n	8007d22 <HAL_RCC_OscConfig+0x1de>
 8007d1a:	6863      	ldr	r3, [r4, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 81f6 	beq.w	800810e <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	f013 0f02 	tst.w	r3, #2
 8007d28:	d050      	beq.n	8007dcc <HAL_RCC_OscConfig+0x288>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007d2a:	2d04      	cmp	r5, #4
 8007d2c:	d03d      	beq.n	8007daa <HAL_RCC_OscConfig+0x266>
 8007d2e:	2d0c      	cmp	r5, #12
 8007d30:	d039      	beq.n	8007da6 <HAL_RCC_OscConfig+0x262>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d32:	68e3      	ldr	r3, [r4, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d078      	beq.n	8007e2a <HAL_RCC_OscConfig+0x2e6>
        __HAL_RCC_HSI_ENABLE();
 8007d38:	4a33      	ldr	r2, [pc, #204]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007d3a:	6813      	ldr	r3, [r2, #0]
 8007d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007d42:	f7fa f9a7 	bl	8002094 <HAL_GetTick>
 8007d46:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d48:	4e2f      	ldr	r6, [pc, #188]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007d4a:	6833      	ldr	r3, [r6, #0]
 8007d4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007d50:	d162      	bne.n	8007e18 <HAL_RCC_OscConfig+0x2d4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d52:	f7fa f99f 	bl	8002094 <HAL_GetTick>
 8007d56:	1bc0      	subs	r0, r0, r7
 8007d58:	2802      	cmp	r0, #2
 8007d5a:	d9f6      	bls.n	8007d4a <HAL_RCC_OscConfig+0x206>
            return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e1db      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d60:	4a29      	ldr	r2, [pc, #164]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007d62:	6813      	ldr	r3, [r2, #0]
 8007d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	e77a      	b.n	8007c62 <HAL_RCC_OscConfig+0x11e>
 8007d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d70:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e76d      	b.n	8007c62 <HAL_RCC_OscConfig+0x11e>
        tickstart = HAL_GetTick();
 8007d86:	f7fa f985 	bl	8002094 <HAL_GetTick>
 8007d8a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d8c:	4f1e      	ldr	r7, [pc, #120]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007d94:	d0c5      	beq.n	8007d22 <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d96:	f7fa f97d 	bl	8002094 <HAL_GetTick>
 8007d9a:	eba0 0008 	sub.w	r0, r0, r8
 8007d9e:	2864      	cmp	r0, #100	; 0x64
 8007da0:	d9f5      	bls.n	8007d8e <HAL_RCC_OscConfig+0x24a>
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e1b8      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007da6:	2e02      	cmp	r6, #2
 8007da8:	d1c3      	bne.n	8007d32 <HAL_RCC_OscConfig+0x1ee>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007daa:	4b17      	ldr	r3, [pc, #92]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007db2:	d003      	beq.n	8007dbc <HAL_RCC_OscConfig+0x278>
 8007db4:	68e3      	ldr	r3, [r4, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 81ab 	beq.w	8008112 <HAL_RCC_OscConfig+0x5ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dbc:	4a12      	ldr	r2, [pc, #72]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007dbe:	6853      	ldr	r3, [r2, #4]
 8007dc0:	6921      	ldr	r1, [r4, #16]
 8007dc2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8007dc6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007dca:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	f013 0f08 	tst.w	r3, #8
 8007dd2:	d055      	beq.n	8007e80 <HAL_RCC_OscConfig+0x33c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007dd4:	6963      	ldr	r3, [r4, #20]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d03b      	beq.n	8007e52 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 8007dda:	4a0b      	ldr	r2, [pc, #44]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007ddc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007de8:	f7fa f954 	bl	8002094 <HAL_GetTick>
 8007dec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007dee:	4e06      	ldr	r6, [pc, #24]	; (8007e08 <HAL_RCC_OscConfig+0x2c4>)
 8007df0:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8007df4:	f013 0f02 	tst.w	r3, #2
 8007df8:	d142      	bne.n	8007e80 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dfa:	f7fa f94b 	bl	8002094 <HAL_GetTick>
 8007dfe:	1bc0      	subs	r0, r0, r7
 8007e00:	2802      	cmp	r0, #2
 8007e02:	d9f5      	bls.n	8007df0 <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e187      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
 8007e08:	40021000 	.word	0x40021000
 8007e0c:	08013c28 	.word	0x08013c28
 8007e10:	20000008 	.word	0x20000008
 8007e14:	20000010 	.word	0x20000010
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e18:	4ab6      	ldr	r2, [pc, #728]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007e1a:	6853      	ldr	r3, [r2, #4]
 8007e1c:	6921      	ldr	r1, [r4, #16]
 8007e1e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8007e22:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007e26:	6053      	str	r3, [r2, #4]
 8007e28:	e7d0      	b.n	8007dcc <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_HSI_DISABLE();
 8007e2a:	4ab2      	ldr	r2, [pc, #712]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007e2c:	6813      	ldr	r3, [r2, #0]
 8007e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007e34:	f7fa f92e 	bl	8002094 <HAL_GetTick>
 8007e38:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e3a:	4eae      	ldr	r6, [pc, #696]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007e3c:	6833      	ldr	r3, [r6, #0]
 8007e3e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e42:	d0c3      	beq.n	8007dcc <HAL_RCC_OscConfig+0x288>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e44:	f7fa f926 	bl	8002094 <HAL_GetTick>
 8007e48:	1bc0      	subs	r0, r0, r7
 8007e4a:	2802      	cmp	r0, #2
 8007e4c:	d9f6      	bls.n	8007e3c <HAL_RCC_OscConfig+0x2f8>
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e162      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_LSI_DISABLE();
 8007e52:	4aa8      	ldr	r2, [pc, #672]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007e54:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007e58:	f023 0301 	bic.w	r3, r3, #1
 8007e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007e60:	f7fa f918 	bl	8002094 <HAL_GetTick>
 8007e64:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e66:	4ea3      	ldr	r6, [pc, #652]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007e68:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8007e6c:	f013 0f02 	tst.w	r3, #2
 8007e70:	d006      	beq.n	8007e80 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e72:	f7fa f90f 	bl	8002094 <HAL_GetTick>
 8007e76:	1bc0      	subs	r0, r0, r7
 8007e78:	2802      	cmp	r0, #2
 8007e7a:	d9f5      	bls.n	8007e68 <HAL_RCC_OscConfig+0x324>
          return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e14b      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	f013 0f04 	tst.w	r3, #4
 8007e86:	d07d      	beq.n	8007f84 <HAL_RCC_OscConfig+0x440>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007e88:	4b9a      	ldr	r3, [pc, #616]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007e90:	d10b      	bne.n	8007eaa <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e92:	4b98      	ldr	r3, [pc, #608]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007e94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007ea6:	2601      	movs	r6, #1
 8007ea8:	e000      	b.n	8007eac <HAL_RCC_OscConfig+0x368>
    FlagStatus       pwrclkchanged = RESET;
 8007eaa:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eac:	4b92      	ldr	r3, [pc, #584]	; (80080f8 <HAL_RCC_OscConfig+0x5b4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007eb4:	d027      	beq.n	8007f06 <HAL_RCC_OscConfig+0x3c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007eb6:	68a3      	ldr	r3, [r4, #8]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d039      	beq.n	8007f30 <HAL_RCC_OscConfig+0x3ec>
 8007ebc:	2b05      	cmp	r3, #5
 8007ebe:	d03f      	beq.n	8007f40 <HAL_RCC_OscConfig+0x3fc>
 8007ec0:	4b8c      	ldr	r3, [pc, #560]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007ec2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007ec6:	f022 0201 	bic.w	r2, r2, #1
 8007eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007ece:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007ed2:	f022 0204 	bic.w	r2, r2, #4
 8007ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d03d      	beq.n	8007f5c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8007ee0:	f7fa f8d8 	bl	8002094 <HAL_GetTick>
 8007ee4:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ee6:	4f83      	ldr	r7, [pc, #524]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ee8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ef0:	f013 0f02 	tst.w	r3, #2
 8007ef4:	d145      	bne.n	8007f82 <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ef6:	f7fa f8cd 	bl	8002094 <HAL_GetTick>
 8007efa:	eba0 0009 	sub.w	r0, r0, r9
 8007efe:	4540      	cmp	r0, r8
 8007f00:	d9f4      	bls.n	8007eec <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e108      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f06:	4a7c      	ldr	r2, [pc, #496]	; (80080f8 <HAL_RCC_OscConfig+0x5b4>)
 8007f08:	6813      	ldr	r3, [r2, #0]
 8007f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f0e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007f10:	f7fa f8c0 	bl	8002094 <HAL_GetTick>
 8007f14:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f16:	4f78      	ldr	r7, [pc, #480]	; (80080f8 <HAL_RCC_OscConfig+0x5b4>)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007f1e:	d1ca      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f20:	f7fa f8b8 	bl	8002094 <HAL_GetTick>
 8007f24:	eba0 0008 	sub.w	r0, r0, r8
 8007f28:	2802      	cmp	r0, #2
 8007f2a:	d9f5      	bls.n	8007f18 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e0f3      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f30:	4a70      	ldr	r2, [pc, #448]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007f32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f3e:	e7cc      	b.n	8007eda <HAL_RCC_OscConfig+0x396>
 8007f40:	4b6c      	ldr	r3, [pc, #432]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007f42:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007f46:	f042 0204 	orr.w	r2, r2, #4
 8007f4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007f4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007f52:	f042 0201 	orr.w	r2, r2, #1
 8007f56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007f5a:	e7be      	b.n	8007eda <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8007f5c:	f7fa f89a 	bl	8002094 <HAL_GetTick>
 8007f60:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f62:	4f64      	ldr	r7, [pc, #400]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f64:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f6c:	f013 0f02 	tst.w	r3, #2
 8007f70:	d007      	beq.n	8007f82 <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f72:	f7fa f88f 	bl	8002094 <HAL_GetTick>
 8007f76:	eba0 0009 	sub.w	r0, r0, r9
 8007f7a:	4540      	cmp	r0, r8
 8007f7c:	d9f4      	bls.n	8007f68 <HAL_RCC_OscConfig+0x424>
          return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e0ca      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
    if(pwrclkchanged == SET)
 8007f82:	bb5e      	cbnz	r6, 8007fdc <HAL_RCC_OscConfig+0x498>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80c5 	beq.w	8008116 <HAL_RCC_OscConfig+0x5d2>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	d076      	beq.n	800807e <HAL_RCC_OscConfig+0x53a>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d029      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x4a4>
        __HAL_RCC_PLL_DISABLE();
 8007f94:	4b57      	ldr	r3, [pc, #348]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007f9c:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8007fa4:	d104      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007fa6:	4a53      	ldr	r2, [pc, #332]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007fa8:	68d3      	ldr	r3, [r2, #12]
 8007faa:	f023 0303 	bic.w	r3, r3, #3
 8007fae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007fb0:	4a50      	ldr	r2, [pc, #320]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007fb2:	68d3      	ldr	r3, [r2, #12]
 8007fb4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fbc:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8007fbe:	f7fa f869 	bl	8002094 <HAL_GetTick>
 8007fc2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fc4:	4c4b      	ldr	r4, [pc, #300]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007fcc:	d055      	beq.n	800807a <HAL_RCC_OscConfig+0x536>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fce:	f7fa f861 	bl	8002094 <HAL_GetTick>
 8007fd2:	1b40      	subs	r0, r0, r5
 8007fd4:	2802      	cmp	r0, #2
 8007fd6:	d9f6      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x482>
            return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e09d      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fdc:	4a45      	ldr	r2, [pc, #276]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007fde:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8007fe6:	e7cd      	b.n	8007f84 <HAL_RCC_OscConfig+0x440>
        __HAL_RCC_PLL_DISABLE();
 8007fe8:	4a42      	ldr	r2, [pc, #264]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007fea:	6813      	ldr	r3, [r2, #0]
 8007fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ff0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007ff2:	f7fa f84f 	bl	8002094 <HAL_GetTick>
 8007ff6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ff8:	4d3e      	ldr	r5, [pc, #248]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8007ffa:	682b      	ldr	r3, [r5, #0]
 8007ffc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008000:	d006      	beq.n	8008010 <HAL_RCC_OscConfig+0x4cc>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008002:	f7fa f847 	bl	8002094 <HAL_GetTick>
 8008006:	1b80      	subs	r0, r0, r6
 8008008:	2802      	cmp	r0, #2
 800800a:	d9f6      	bls.n	8007ffa <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e083      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008010:	4a38      	ldr	r2, [pc, #224]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8008012:	68d1      	ldr	r1, [r2, #12]
 8008014:	4b39      	ldr	r3, [pc, #228]	; (80080fc <HAL_RCC_OscConfig+0x5b8>)
 8008016:	400b      	ands	r3, r1
 8008018:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800801a:	430b      	orrs	r3, r1
 800801c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800801e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008022:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008024:	3901      	subs	r1, #1
 8008026:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800802a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800802c:	0909      	lsrs	r1, r1, #4
 800802e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8008032:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008034:	0849      	lsrs	r1, r1, #1
 8008036:	3901      	subs	r1, #1
 8008038:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800803c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800803e:	0849      	lsrs	r1, r1, #1
 8008040:	3901      	subs	r1, #1
 8008042:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8008046:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8008048:	6813      	ldr	r3, [r2, #0]
 800804a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800804e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008050:	68d3      	ldr	r3, [r2, #12]
 8008052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008056:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8008058:	f7fa f81c 	bl	8002094 <HAL_GetTick>
 800805c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800805e:	4c25      	ldr	r4, [pc, #148]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008066:	d106      	bne.n	8008076 <HAL_RCC_OscConfig+0x532>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008068:	f7fa f814 	bl	8002094 <HAL_GetTick>
 800806c:	1b40      	subs	r0, r0, r5
 800806e:	2802      	cmp	r0, #2
 8008070:	d9f6      	bls.n	8008060 <HAL_RCC_OscConfig+0x51c>
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e050      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
  return HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	e04e      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
 800807a:	2300      	movs	r3, #0
 800807c:	e04c      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800807e:	2b01      	cmp	r3, #1
 8008080:	d04e      	beq.n	8008120 <HAL_RCC_OscConfig+0x5dc>
        pll_config = RCC->PLLCFGR;
 8008082:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <HAL_RCC_OscConfig+0x5b0>)
 8008084:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008086:	f003 0103 	and.w	r1, r3, #3
 800808a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800808c:	4291      	cmp	r1, r2
 800808e:	d001      	beq.n	8008094 <HAL_RCC_OscConfig+0x550>
          return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e041      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008094:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008098:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800809a:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800809c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80080a0:	d001      	beq.n	80080a6 <HAL_RCC_OscConfig+0x562>
          return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e038      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80080aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080ac:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80080b0:	d001      	beq.n	80080b6 <HAL_RCC_OscConfig+0x572>
          return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e030      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80080b6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80080ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080bc:	3a07      	subs	r2, #7
 80080be:	bf18      	it	ne
 80080c0:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080c2:	4291      	cmp	r1, r2
 80080c4:	d001      	beq.n	80080ca <HAL_RCC_OscConfig+0x586>
          return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e026      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080ca:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80080ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80080d0:	0852      	lsrs	r2, r2, #1
 80080d2:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80080d4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80080d8:	d001      	beq.n	80080de <HAL_RCC_OscConfig+0x59a>
          return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e01c      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80080de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080e0:	0852      	lsrs	r2, r2, #1
 80080e2:	3a01      	subs	r2, #1
 80080e4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080e8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80080ec:	bf14      	ite	ne
 80080ee:	2301      	movne	r3, #1
 80080f0:	2300      	moveq	r3, #0
 80080f2:	e011      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
 80080f4:	40021000 	.word	0x40021000
 80080f8:	40007000 	.word	0x40007000
 80080fc:	f99d808c 	.word	0xf99d808c
 8008100:	2301      	movs	r3, #1
}
 8008102:	4618      	mov	r0, r3
 8008104:	4770      	bx	lr
        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e006      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
            return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e004      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e002      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e000      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>
  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	b003      	add	sp, #12
 800811c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e7f9      	b.n	8008118 <HAL_RCC_OscConfig+0x5d4>

08008124 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008124:	2800      	cmp	r0, #0
 8008126:	f000 809e 	beq.w	8008266 <HAL_RCC_ClockConfig+0x142>
{
 800812a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008130:	4b4f      	ldr	r3, [pc, #316]	; (8008270 <HAL_RCC_ClockConfig+0x14c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	428b      	cmp	r3, r1
 800813a:	d20d      	bcs.n	8008158 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800813c:	4a4c      	ldr	r2, [pc, #304]	; (8008270 <HAL_RCC_ClockConfig+0x14c>)
 800813e:	6813      	ldr	r3, [r2, #0]
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	430b      	orrs	r3, r1
 8008146:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008148:	6813      	ldr	r3, [r2, #0]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	428b      	cmp	r3, r1
 8008150:	d002      	beq.n	8008158 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
 8008152:	2001      	movs	r0, #1
}
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	f013 0f01 	tst.w	r3, #1
 8008160:	d03a      	beq.n	80081d8 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	2b03      	cmp	r3, #3
 8008166:	d009      	beq.n	800817c <HAL_RCC_ClockConfig+0x58>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008168:	2b02      	cmp	r3, #2
 800816a:	d027      	beq.n	80081bc <HAL_RCC_ClockConfig+0x98>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800816c:	bb6b      	cbnz	r3, 80081ca <HAL_RCC_ClockConfig+0xa6>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800816e:	4a41      	ldr	r2, [pc, #260]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	f012 0f02 	tst.w	r2, #2
 8008176:	d106      	bne.n	8008186 <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 8008178:	2001      	movs	r0, #1
 800817a:	e7eb      	b.n	8008154 <HAL_RCC_ClockConfig+0x30>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800817c:	4a3d      	ldr	r2, [pc, #244]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
 800817e:	6812      	ldr	r2, [r2, #0]
 8008180:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008184:	d071      	beq.n	800826a <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008186:	493b      	ldr	r1, [pc, #236]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
 8008188:	688a      	ldr	r2, [r1, #8]
 800818a:	f022 0203 	bic.w	r2, r2, #3
 800818e:	4313      	orrs	r3, r2
 8008190:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008192:	f7f9 ff7f 	bl	8002094 <HAL_GetTick>
 8008196:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008198:	4e36      	ldr	r6, [pc, #216]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800819a:	f241 3788 	movw	r7, #5000	; 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800819e:	68b3      	ldr	r3, [r6, #8]
 80081a0:	f003 030c 	and.w	r3, r3, #12
 80081a4:	6862      	ldr	r2, [r4, #4]
 80081a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80081aa:	d015      	beq.n	80081d8 <HAL_RCC_ClockConfig+0xb4>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081ac:	f7f9 ff72 	bl	8002094 <HAL_GetTick>
 80081b0:	eba0 0008 	sub.w	r0, r0, r8
 80081b4:	42b8      	cmp	r0, r7
 80081b6:	d9f2      	bls.n	800819e <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 80081b8:	2003      	movs	r0, #3
 80081ba:	e7cb      	b.n	8008154 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081bc:	4a2d      	ldr	r2, [pc, #180]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
 80081be:	6812      	ldr	r2, [r2, #0]
 80081c0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80081c4:	d1df      	bne.n	8008186 <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 80081c6:	2001      	movs	r0, #1
 80081c8:	e7c4      	b.n	8008154 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081ca:	4a2a      	ldr	r2, [pc, #168]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80081d2:	d1d8      	bne.n	8008186 <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 80081d4:	2001      	movs	r0, #1
 80081d6:	e7bd      	b.n	8008154 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	f013 0f02 	tst.w	r3, #2
 80081de:	d006      	beq.n	80081ee <HAL_RCC_ClockConfig+0xca>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081e0:	4a24      	ldr	r2, [pc, #144]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
 80081e2:	6893      	ldr	r3, [r2, #8]
 80081e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081e8:	68a1      	ldr	r1, [r4, #8]
 80081ea:	430b      	orrs	r3, r1
 80081ec:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081ee:	4b20      	ldr	r3, [pc, #128]	; (8008270 <HAL_RCC_ClockConfig+0x14c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	42ab      	cmp	r3, r5
 80081f8:	d90c      	bls.n	8008214 <HAL_RCC_ClockConfig+0xf0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081fa:	4a1d      	ldr	r2, [pc, #116]	; (8008270 <HAL_RCC_ClockConfig+0x14c>)
 80081fc:	6813      	ldr	r3, [r2, #0]
 80081fe:	f023 0307 	bic.w	r3, r3, #7
 8008202:	432b      	orrs	r3, r5
 8008204:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	42ab      	cmp	r3, r5
 800820e:	d001      	beq.n	8008214 <HAL_RCC_ClockConfig+0xf0>
      return HAL_ERROR;
 8008210:	2001      	movs	r0, #1
 8008212:	e79f      	b.n	8008154 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	f013 0f04 	tst.w	r3, #4
 800821a:	d006      	beq.n	800822a <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800821c:	4a15      	ldr	r2, [pc, #84]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
 800821e:	6893      	ldr	r3, [r2, #8]
 8008220:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008224:	68e1      	ldr	r1, [r4, #12]
 8008226:	430b      	orrs	r3, r1
 8008228:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	f013 0f08 	tst.w	r3, #8
 8008230:	d007      	beq.n	8008242 <HAL_RCC_ClockConfig+0x11e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008232:	4a10      	ldr	r2, [pc, #64]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
 8008234:	6893      	ldr	r3, [r2, #8]
 8008236:	6921      	ldr	r1, [r4, #16]
 8008238:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800823c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008240:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008242:	f7ff fc2b 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <HAL_RCC_ClockConfig+0x150>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800824e:	4a0a      	ldr	r2, [pc, #40]	; (8008278 <HAL_RCC_ClockConfig+0x154>)
 8008250:	5cd3      	ldrb	r3, [r2, r3]
 8008252:	f003 031f 	and.w	r3, r3, #31
 8008256:	40d8      	lsrs	r0, r3
 8008258:	4b08      	ldr	r3, [pc, #32]	; (800827c <HAL_RCC_ClockConfig+0x158>)
 800825a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800825c:	4b08      	ldr	r3, [pc, #32]	; (8008280 <HAL_RCC_ClockConfig+0x15c>)
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	f7f9 fece 	bl	8002000 <HAL_InitTick>
  return status;
 8008264:	e776      	b.n	8008154 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8008266:	2001      	movs	r0, #1
}
 8008268:	4770      	bx	lr
        return HAL_ERROR;
 800826a:	2001      	movs	r0, #1
 800826c:	e772      	b.n	8008154 <HAL_RCC_ClockConfig+0x30>
 800826e:	bf00      	nop
 8008270:	40022000 	.word	0x40022000
 8008274:	40021000 	.word	0x40021000
 8008278:	08013c28 	.word	0x08013c28
 800827c:	20000008 	.word	0x20000008
 8008280:	20000010 	.word	0x20000010

08008284 <HAL_RCC_GetHCLKFreq>:
}
 8008284:	4b01      	ldr	r3, [pc, #4]	; (800828c <HAL_RCC_GetHCLKFreq+0x8>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000008 	.word	0x20000008

08008290 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008298:	4a04      	ldr	r2, [pc, #16]	; (80082ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800829a:	5cd3      	ldrb	r3, [r2, r3]
 800829c:	f003 031f 	and.w	r3, r3, #31
 80082a0:	4a03      	ldr	r2, [pc, #12]	; (80082b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082a2:	6810      	ldr	r0, [r2, #0]
}
 80082a4:	40d8      	lsrs	r0, r3
 80082a6:	4770      	bx	lr
 80082a8:	40021000 	.word	0x40021000
 80082ac:	08013c38 	.word	0x08013c38
 80082b0:	20000008 	.word	0x20000008

080082b4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80082b4:	4b05      	ldr	r3, [pc, #20]	; (80082cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80082bc:	4a04      	ldr	r2, [pc, #16]	; (80082d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80082be:	5cd3      	ldrb	r3, [r2, r3]
 80082c0:	f003 031f 	and.w	r3, r3, #31
 80082c4:	4a03      	ldr	r2, [pc, #12]	; (80082d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082c6:	6810      	ldr	r0, [r2, #0]
}
 80082c8:	40d8      	lsrs	r0, r3
 80082ca:	4770      	bx	lr
 80082cc:	40021000 	.word	0x40021000
 80082d0:	08013c38 	.word	0x08013c38
 80082d4:	20000008 	.word	0x20000008

080082d8 <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 80082d8:	231f      	movs	r3, #31
 80082da:	6003      	str	r3, [r0, #0]
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 80082dc:	4b3c      	ldr	r3, [pc, #240]	; (80083d0 <HAL_RCC_GetOscConfig+0xf8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80082e4:	d05f      	beq.n	80083a6 <HAL_RCC_GetOscConfig+0xce>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80082e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80082ea:	6043      	str	r3, [r0, #4]
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 80082ec:	4b38      	ldr	r3, [pc, #224]	; (80083d0 <HAL_RCC_GetOscConfig+0xf8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f013 0f01 	tst.w	r3, #1
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 80082f4:	bf14      	ite	ne
 80082f6:	2301      	movne	r3, #1
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 80082f8:	2300      	moveq	r3, #0
 80082fa:	6183      	str	r3, [r0, #24]
  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 80082fc:	4b34      	ldr	r3, [pc, #208]	; (80083d0 <HAL_RCC_GetOscConfig+0xf8>)
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008304:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800830c:	6202      	str	r2, [r0, #32]
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f413 7f80 	tst.w	r3, #256	; 0x100
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8008314:	bf14      	ite	ne
 8008316:	f44f 7380 	movne.w	r3, #256	; 0x100
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800831a:	2300      	moveq	r3, #0
 800831c:	60c3      	str	r3, [r0, #12]
  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 800831e:	4a2c      	ldr	r2, [pc, #176]	; (80083d0 <HAL_RCC_GetOscConfig+0xf8>)
 8008320:	6853      	ldr	r3, [r2, #4]
 8008322:	f3c3 6304 	ubfx	r3, r3, #24, #5
 8008326:	6103      	str	r3, [r0, #16]
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8008328:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800832c:	f013 0f04 	tst.w	r3, #4
 8008330:	d043      	beq.n	80083ba <HAL_RCC_GetOscConfig+0xe2>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8008332:	2305      	movs	r3, #5
 8008334:	6083      	str	r3, [r0, #8]
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 8008336:	4b26      	ldr	r3, [pc, #152]	; (80083d0 <HAL_RCC_GetOscConfig+0xf8>)
 8008338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800833c:	f013 0f01 	tst.w	r3, #1
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8008340:	bf14      	ite	ne
 8008342:	2301      	movne	r3, #1
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8008344:	2300      	moveq	r3, #0
 8008346:	6143      	str	r3, [r0, #20]
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 8008348:	2300      	movs	r3, #0
 800834a:	6243      	str	r3, [r0, #36]	; 0x24
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 800834c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008350:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800835a:	bf14      	ite	ne
 800835c:	2302      	movne	r3, #2
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800835e:	2301      	moveq	r3, #1
 8008360:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008362:	4a1b      	ldr	r2, [pc, #108]	; (80083d0 <HAL_RCC_GetOscConfig+0xf8>)
 8008364:	68d3      	ldr	r3, [r2, #12]
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	62c3      	str	r3, [r0, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800836c:	68d3      	ldr	r3, [r2, #12]
 800836e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008372:	3301      	adds	r3, #1
 8008374:	6303      	str	r3, [r0, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008376:	68d3      	ldr	r3, [r2, #12]
 8008378:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800837c:	6343      	str	r3, [r0, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800837e:	68d3      	ldr	r3, [r2, #12]
 8008380:	f3c3 5341 	ubfx	r3, r3, #21, #2
 8008384:	3301      	adds	r3, #1
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	63c3      	str	r3, [r0, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 800838a:	68d3      	ldr	r3, [r2, #12]
 800838c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008390:	3301      	adds	r3, #1
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	6403      	str	r3, [r0, #64]	; 0x40
  if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008396:	68d3      	ldr	r3, [r2, #12]
 8008398:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 800839c:	bf14      	ite	ne
 800839e:	2311      	movne	r3, #17
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
 80083a0:	2307      	moveq	r3, #7
 80083a2:	6383      	str	r3, [r0, #56]	; 0x38
}
 80083a4:	4770      	bx	lr
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 80083a6:	4b0a      	ldr	r3, [pc, #40]	; (80083d0 <HAL_RCC_GetOscConfig+0xf8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80083ae:	bf14      	ite	ne
 80083b0:	f44f 3380 	movne.w	r3, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80083b4:	2300      	moveq	r3, #0
 80083b6:	6043      	str	r3, [r0, #4]
 80083b8:	e798      	b.n	80082ec <HAL_RCC_GetOscConfig+0x14>
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <HAL_RCC_GetOscConfig+0xf8>)
 80083bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c0:	f013 0f01 	tst.w	r3, #1
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80083c4:	bf14      	ite	ne
 80083c6:	2301      	movne	r3, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80083c8:	2300      	moveq	r3, #0
 80083ca:	6083      	str	r3, [r0, #8]
 80083cc:	e7b3      	b.n	8008336 <HAL_RCC_GetOscConfig+0x5e>
 80083ce:	bf00      	nop
 80083d0:	40021000 	.word	0x40021000

080083d4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80083d4:	230f      	movs	r3, #15
 80083d6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80083d8:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <HAL_RCC_GetClockConfig+0x34>)
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	f002 0203 	and.w	r2, r2, #3
 80083e0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80083e8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80083f0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	08db      	lsrs	r3, r3, #3
 80083f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083fa:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80083fc:	4b03      	ldr	r3, [pc, #12]	; (800840c <HAL_RCC_GetClockConfig+0x38>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0307 	and.w	r3, r3, #7
 8008404:	600b      	str	r3, [r1, #0]
}
 8008406:	4770      	bx	lr
 8008408:	40021000 	.word	0x40021000
 800840c:	40022000 	.word	0x40022000

08008410 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8008410:	4a02      	ldr	r2, [pc, #8]	; (800841c <HAL_RCC_EnableCSS+0xc>)
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008418:	6013      	str	r3, [r2, #0]
}
 800841a:	4770      	bx	lr
 800841c:	40021000 	.word	0x40021000

08008420 <HAL_RCC_CSSCallback>:
}
 8008420:	4770      	bx	lr
	...

08008424 <HAL_RCC_NMI_IRQHandler>:
{
 8008424:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008426:	4b06      	ldr	r3, [pc, #24]	; (8008440 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800842e:	d100      	bne.n	8008432 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8008430:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8008432:	f7ff fff5 	bl	8008420 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008436:	4b02      	ldr	r3, [pc, #8]	; (8008440 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8008438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800843c:	621a      	str	r2, [r3, #32]
}
 800843e:	e7f7      	b.n	8008430 <HAL_RCC_NMI_IRQHandler+0xc>
 8008440:	40021000 	.word	0x40021000

08008444 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008444:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008448:	d01d      	beq.n	8008486 <RCCEx_GetSAIxPeriphCLKFreq+0x42>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800844a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800844e:	d043      	beq.n	80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x94>
        frequency = (pllvco * plln) / pllp;
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8008450:	4b3d      	ldr	r3, [pc, #244]	; (8008548 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008458:	d071      	beq.n	800853e <RCCEx_GetSAIxPeriphCLKFreq+0xfa>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800845a:	4b3b      	ldr	r3, [pc, #236]	; (8008548 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800845c:	68d8      	ldr	r0, [r3, #12]
 800845e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8008462:	3001      	adds	r0, #1
 8008464:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008468:	6918      	ldr	r0, [r3, #16]
 800846a:	f3c0 2006 	ubfx	r0, r0, #8, #7
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 8008474:	2b00      	cmp	r3, #0
 8008476:	bf14      	ite	ne
 8008478:	2311      	movne	r3, #17
 800847a:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 800847c:	fb00 f001 	mul.w	r0, r0, r1
 8008480:	fbb0 f0f3 	udiv	r0, r0, r3
 8008484:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008486:	4b30      	ldr	r3, [pc, #192]	; (8008548 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 8008488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008490:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008494:	d04f      	beq.n	8008536 <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800849a:	d002      	beq.n	80084a2 <RCCEx_GetSAIxPeriphCLKFreq+0x5e>
 800849c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084a0:	d124      	bne.n	80084ec <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80084a2:	4b29      	ldr	r3, [pc, #164]	; (8008548 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80084aa:	d046      	beq.n	800853a <RCCEx_GetSAIxPeriphCLKFreq+0xf6>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80084ac:	4b26      	ldr	r3, [pc, #152]	; (8008548 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 80084ae:	68d8      	ldr	r0, [r3, #12]
 80084b0:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80084b4:	3001      	adds	r0, #1
 80084b6:	fbb1 f1f0 	udiv	r1, r1, r0
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80084ba:	68d8      	ldr	r0, [r3, #12]
 80084bc:	f3c0 2006 	ubfx	r0, r0, #8, #7
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
            pllp = 7U;
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bf14      	ite	ne
 80084ca:	2311      	movne	r3, #17
 80084cc:	2307      	moveq	r3, #7
        frequency = (pllvco * plln) / pllp;
 80084ce:	fb00 f001 	mul.w	r0, r0, r1
 80084d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80084d6:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80084d8:	4b1b      	ldr	r3, [pc, #108]	; (8008548 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 80084da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084de:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80084e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084e6:	d1d6      	bne.n	8008496 <RCCEx_GetSAIxPeriphCLKFreq+0x52>
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80084e8:	4818      	ldr	r0, [pc, #96]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x108>)
 80084ea:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0af      	beq.n	8008450 <RCCEx_GetSAIxPeriphCLKFreq+0xc>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80084f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f4:	d004      	beq.n	8008500 <RCCEx_GetSAIxPeriphCLKFreq+0xbc>
 80084f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084fa:	d001      	beq.n	8008500 <RCCEx_GetSAIxPeriphCLKFreq+0xbc>
 80084fc:	2000      	movs	r0, #0
 80084fe:	4770      	bx	lr
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8008500:	4b11      	ldr	r3, [pc, #68]	; (8008548 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008508:	d01b      	beq.n	8008542 <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800850c:	68d8      	ldr	r0, [r3, #12]
 800850e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8008512:	3001      	adds	r0, #1
 8008514:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008518:	6958      	ldr	r0, [r3, #20]
 800851a:	f3c0 2006 	ubfx	r0, r0, #8, #7
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 8008524:	2b00      	cmp	r3, #0
 8008526:	bf14      	ite	ne
 8008528:	2311      	movne	r3, #17
 800852a:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 800852c:	fb00 f001 	mul.w	r0, r0, r1
 8008530:	fbb0 f0f3 	udiv	r0, r0, r3
 8008534:	4770      	bx	lr
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008536:	4805      	ldr	r0, [pc, #20]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x108>)
 8008538:	4770      	bx	lr
 800853a:	2000      	movs	r0, #0
 800853c:	4770      	bx	lr
 800853e:	2000      	movs	r0, #0
 8008540:	4770      	bx	lr
 8008542:	2000      	movs	r0, #0
    }
  }


  return frequency;
}
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	40021000 	.word	0x40021000
 800854c:	001fff68 	.word	0x001fff68

08008550 <RCCEx_PLLSAI1_Config>:
{
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008552:	4b56      	ldr	r3, [pc, #344]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f013 0f03 	tst.w	r3, #3
 800855a:	d014      	beq.n	8008586 <RCCEx_PLLSAI1_Config+0x36>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800855c:	4b53      	ldr	r3, [pc, #332]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	6802      	ldr	r2, [r0, #0]
 8008566:	4293      	cmp	r3, r2
 8008568:	d001      	beq.n	800856e <RCCEx_PLLSAI1_Config+0x1e>
 800856a:	2001      	movs	r0, #1
}
 800856c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800856e:	2b00      	cmp	r3, #0
 8008570:	d07c      	beq.n	800866c <RCCEx_PLLSAI1_Config+0x11c>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008572:	4b4e      	ldr	r3, [pc, #312]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800857a:	3301      	adds	r3, #1
       ||
 800857c:	6842      	ldr	r2, [r0, #4]
 800857e:	4293      	cmp	r3, r2
 8008580:	d019      	beq.n	80085b6 <RCCEx_PLLSAI1_Config+0x66>
 8008582:	2001      	movs	r0, #1
 8008584:	e7f2      	b.n	800856c <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 8008586:	6803      	ldr	r3, [r0, #0]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d02a      	beq.n	80085e2 <RCCEx_PLLSAI1_Config+0x92>
 800858c:	2b03      	cmp	r3, #3
 800858e:	d02f      	beq.n	80085f0 <RCCEx_PLLSAI1_Config+0xa0>
 8008590:	2b01      	cmp	r3, #1
 8008592:	d001      	beq.n	8008598 <RCCEx_PLLSAI1_Config+0x48>
 8008594:	2001      	movs	r0, #1
 8008596:	e7e9      	b.n	800856c <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008598:	4a44      	ldr	r2, [pc, #272]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	f012 0f02 	tst.w	r2, #2
 80085a0:	d066      	beq.n	8008670 <RCCEx_PLLSAI1_Config+0x120>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80085a2:	4d42      	ldr	r5, [pc, #264]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 80085a4:	68ea      	ldr	r2, [r5, #12]
 80085a6:	6844      	ldr	r4, [r0, #4]
 80085a8:	3c01      	subs	r4, #1
 80085aa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80085ae:	4313      	orrs	r3, r2
 80085b0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80085b4:	60eb      	str	r3, [r5, #12]
 80085b6:	460f      	mov	r7, r1
 80085b8:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80085ba:	4a3c      	ldr	r2, [pc, #240]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 80085bc:	6813      	ldr	r3, [r2, #0]
 80085be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085c2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80085c4:	f7f9 fd66 	bl	8002094 <HAL_GetTick>
 80085c8:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80085ca:	4d38      	ldr	r5, [pc, #224]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80085d2:	d04f      	beq.n	8008674 <RCCEx_PLLSAI1_Config+0x124>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085d4:	f7f9 fd5e 	bl	8002094 <HAL_GetTick>
 80085d8:	1b80      	subs	r0, r0, r6
 80085da:	2802      	cmp	r0, #2
 80085dc:	d9f6      	bls.n	80085cc <RCCEx_PLLSAI1_Config+0x7c>
        status = HAL_TIMEOUT;
 80085de:	2003      	movs	r0, #3
 80085e0:	e7c4      	b.n	800856c <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085e2:	4a32      	ldr	r2, [pc, #200]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 80085e4:	6812      	ldr	r2, [r2, #0]
 80085e6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80085ea:	d1da      	bne.n	80085a2 <RCCEx_PLLSAI1_Config+0x52>
 80085ec:	2001      	movs	r0, #1
 80085ee:	e7bd      	b.n	800856c <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085f0:	4a2e      	ldr	r2, [pc, #184]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80085f8:	d1d3      	bne.n	80085a2 <RCCEx_PLLSAI1_Config+0x52>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80085fa:	4a2c      	ldr	r2, [pc, #176]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 80085fc:	6812      	ldr	r2, [r2, #0]
 80085fe:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8008602:	d1ce      	bne.n	80085a2 <RCCEx_PLLSAI1_Config+0x52>
 8008604:	2001      	movs	r0, #1
 8008606:	e7b1      	b.n	800856c <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008608:	4928      	ldr	r1, [pc, #160]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 800860a:	690b      	ldr	r3, [r1, #16]
 800860c:	68a2      	ldr	r2, [r4, #8]
 800860e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008616:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800861a:	68e2      	ldr	r2, [r4, #12]
 800861c:	0912      	lsrs	r2, r2, #4
 800861e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8008622:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8008624:	4a21      	ldr	r2, [pc, #132]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 8008626:	6813      	ldr	r3, [r2, #0]
 8008628:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800862c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800862e:	f7f9 fd31 	bl	8002094 <HAL_GetTick>
 8008632:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008634:	4d1d      	ldr	r5, [pc, #116]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 8008636:	682b      	ldr	r3, [r5, #0]
 8008638:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800863c:	d12e      	bne.n	800869c <RCCEx_PLLSAI1_Config+0x14c>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800863e:	f7f9 fd29 	bl	8002094 <HAL_GetTick>
 8008642:	1b80      	subs	r0, r0, r6
 8008644:	2802      	cmp	r0, #2
 8008646:	d9f6      	bls.n	8008636 <RCCEx_PLLSAI1_Config+0xe6>
          status = HAL_TIMEOUT;
 8008648:	2003      	movs	r0, #3
 800864a:	e78f      	b.n	800856c <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800864c:	4917      	ldr	r1, [pc, #92]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 800864e:	690b      	ldr	r3, [r1, #16]
 8008650:	6922      	ldr	r2, [r4, #16]
 8008652:	0852      	lsrs	r2, r2, #1
 8008654:	3a01      	subs	r2, #1
 8008656:	68a0      	ldr	r0, [r4, #8]
 8008658:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800865c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008660:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008664:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8008668:	610b      	str	r3, [r1, #16]
 800866a:	e7db      	b.n	8008624 <RCCEx_PLLSAI1_Config+0xd4>
 800866c:	2001      	movs	r0, #1
 800866e:	e77d      	b.n	800856c <RCCEx_PLLSAI1_Config+0x1c>
 8008670:	2001      	movs	r0, #1
 8008672:	e77b      	b.n	800856c <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8008674:	2f00      	cmp	r7, #0
 8008676:	d0c7      	beq.n	8008608 <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 8008678:	2f01      	cmp	r7, #1
 800867a:	d0e7      	beq.n	800864c <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800867c:	490b      	ldr	r1, [pc, #44]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 800867e:	690b      	ldr	r3, [r1, #16]
 8008680:	6962      	ldr	r2, [r4, #20]
 8008682:	0852      	lsrs	r2, r2, #1
 8008684:	3a01      	subs	r2, #1
 8008686:	68a0      	ldr	r0, [r4, #8]
 8008688:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800868c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008690:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008694:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008698:	610b      	str	r3, [r1, #16]
 800869a:	e7c3      	b.n	8008624 <RCCEx_PLLSAI1_Config+0xd4>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800869c:	4a03      	ldr	r2, [pc, #12]	; (80086ac <RCCEx_PLLSAI1_Config+0x15c>)
 800869e:	6913      	ldr	r3, [r2, #16]
 80086a0:	69a1      	ldr	r1, [r4, #24]
 80086a2:	430b      	orrs	r3, r1
 80086a4:	6113      	str	r3, [r2, #16]
 80086a6:	2000      	movs	r0, #0
  return status;
 80086a8:	e760      	b.n	800856c <RCCEx_PLLSAI1_Config+0x1c>
 80086aa:	bf00      	nop
 80086ac:	40021000 	.word	0x40021000

080086b0 <RCCEx_PLLSAI2_Config>:
{
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80086b2:	4b4d      	ldr	r3, [pc, #308]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f013 0f03 	tst.w	r3, #3
 80086ba:	d014      	beq.n	80086e6 <RCCEx_PLLSAI2_Config+0x36>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80086bc:	4b4a      	ldr	r3, [pc, #296]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f003 0303 	and.w	r3, r3, #3
 80086c4:	6802      	ldr	r2, [r0, #0]
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d001      	beq.n	80086ce <RCCEx_PLLSAI2_Config+0x1e>
 80086ca:	2001      	movs	r0, #1
}
 80086cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d06c      	beq.n	80087ac <RCCEx_PLLSAI2_Config+0xfc>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80086d2:	4b45      	ldr	r3, [pc, #276]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80086da:	3301      	adds	r3, #1
       ||
 80086dc:	6842      	ldr	r2, [r0, #4]
 80086de:	4293      	cmp	r3, r2
 80086e0:	d019      	beq.n	8008716 <RCCEx_PLLSAI2_Config+0x66>
 80086e2:	2001      	movs	r0, #1
 80086e4:	e7f2      	b.n	80086cc <RCCEx_PLLSAI2_Config+0x1c>
    switch(PllSai2->PLLSAI2Source)
 80086e6:	6803      	ldr	r3, [r0, #0]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d02a      	beq.n	8008742 <RCCEx_PLLSAI2_Config+0x92>
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d02f      	beq.n	8008750 <RCCEx_PLLSAI2_Config+0xa0>
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d001      	beq.n	80086f8 <RCCEx_PLLSAI2_Config+0x48>
 80086f4:	2001      	movs	r0, #1
 80086f6:	e7e9      	b.n	80086cc <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80086f8:	4a3b      	ldr	r2, [pc, #236]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 80086fa:	6812      	ldr	r2, [r2, #0]
 80086fc:	f012 0f02 	tst.w	r2, #2
 8008700:	d056      	beq.n	80087b0 <RCCEx_PLLSAI2_Config+0x100>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008702:	4d39      	ldr	r5, [pc, #228]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 8008704:	68ea      	ldr	r2, [r5, #12]
 8008706:	6844      	ldr	r4, [r0, #4]
 8008708:	3c01      	subs	r4, #1
 800870a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800870e:	4313      	orrs	r3, r2
 8008710:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008714:	60eb      	str	r3, [r5, #12]
 8008716:	460f      	mov	r7, r1
 8008718:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI2_DISABLE();
 800871a:	4a33      	ldr	r2, [pc, #204]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 800871c:	6813      	ldr	r3, [r2, #0]
 800871e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008722:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008724:	f7f9 fcb6 	bl	8002094 <HAL_GetTick>
 8008728:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800872a:	4d2f      	ldr	r5, [pc, #188]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008732:	d03f      	beq.n	80087b4 <RCCEx_PLLSAI2_Config+0x104>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008734:	f7f9 fcae 	bl	8002094 <HAL_GetTick>
 8008738:	1b80      	subs	r0, r0, r6
 800873a:	2802      	cmp	r0, #2
 800873c:	d9f6      	bls.n	800872c <RCCEx_PLLSAI2_Config+0x7c>
        status = HAL_TIMEOUT;
 800873e:	2003      	movs	r0, #3
 8008740:	e7c4      	b.n	80086cc <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008742:	4a29      	ldr	r2, [pc, #164]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800874a:	d1da      	bne.n	8008702 <RCCEx_PLLSAI2_Config+0x52>
 800874c:	2001      	movs	r0, #1
 800874e:	e7bd      	b.n	80086cc <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008750:	4a25      	ldr	r2, [pc, #148]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 8008752:	6812      	ldr	r2, [r2, #0]
 8008754:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008758:	d1d3      	bne.n	8008702 <RCCEx_PLLSAI2_Config+0x52>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800875a:	4a23      	ldr	r2, [pc, #140]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8008762:	d1ce      	bne.n	8008702 <RCCEx_PLLSAI2_Config+0x52>
 8008764:	2001      	movs	r0, #1
 8008766:	e7b1      	b.n	80086cc <RCCEx_PLLSAI2_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008768:	491f      	ldr	r1, [pc, #124]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 800876a:	694b      	ldr	r3, [r1, #20]
 800876c:	68a2      	ldr	r2, [r4, #8]
 800876e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800877a:	68e2      	ldr	r2, [r4, #12]
 800877c:	0912      	lsrs	r2, r2, #4
 800877e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8008782:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8008784:	4a18      	ldr	r2, [pc, #96]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 8008786:	6813      	ldr	r3, [r2, #0]
 8008788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800878c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800878e:	f7f9 fc81 	bl	8002094 <HAL_GetTick>
 8008792:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008794:	4d14      	ldr	r5, [pc, #80]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 8008796:	682b      	ldr	r3, [r5, #0]
 8008798:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800879c:	d11c      	bne.n	80087d8 <RCCEx_PLLSAI2_Config+0x128>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800879e:	f7f9 fc79 	bl	8002094 <HAL_GetTick>
 80087a2:	1b80      	subs	r0, r0, r6
 80087a4:	2802      	cmp	r0, #2
 80087a6:	d9f6      	bls.n	8008796 <RCCEx_PLLSAI2_Config+0xe6>
          status = HAL_TIMEOUT;
 80087a8:	2003      	movs	r0, #3
 80087aa:	e78f      	b.n	80086cc <RCCEx_PLLSAI2_Config+0x1c>
 80087ac:	2001      	movs	r0, #1
 80087ae:	e78d      	b.n	80086cc <RCCEx_PLLSAI2_Config+0x1c>
 80087b0:	2001      	movs	r0, #1
 80087b2:	e78b      	b.n	80086cc <RCCEx_PLLSAI2_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 80087b4:	2f00      	cmp	r7, #0
 80087b6:	d0d7      	beq.n	8008768 <RCCEx_PLLSAI2_Config+0xb8>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80087b8:	480b      	ldr	r0, [pc, #44]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 80087ba:	6942      	ldr	r2, [r0, #20]
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	085b      	lsrs	r3, r3, #1
 80087c0:	1e59      	subs	r1, r3, #1
 80087c2:	68a5      	ldr	r5, [r4, #8]
 80087c4:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 80087c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087cc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80087d0:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80087d4:	6143      	str	r3, [r0, #20]
 80087d6:	e7d5      	b.n	8008784 <RCCEx_PLLSAI2_Config+0xd4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80087d8:	4a03      	ldr	r2, [pc, #12]	; (80087e8 <RCCEx_PLLSAI2_Config+0x138>)
 80087da:	6953      	ldr	r3, [r2, #20]
 80087dc:	6961      	ldr	r1, [r4, #20]
 80087de:	430b      	orrs	r3, r1
 80087e0:	6153      	str	r3, [r2, #20]
 80087e2:	2000      	movs	r0, #0
  return status;
 80087e4:	e772      	b.n	80086cc <RCCEx_PLLSAI2_Config+0x1c>
 80087e6:	bf00      	nop
 80087e8:	40021000 	.word	0x40021000

080087ec <HAL_RCCEx_PeriphCLKConfig>:
{
 80087ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087f0:	b083      	sub	sp, #12
 80087f2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80087f4:	6803      	ldr	r3, [r0, #0]
 80087f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80087fa:	d029      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->Sai1ClockSelection)
 80087fc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80087fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008802:	d01f      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8008804:	d910      	bls.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8008806:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800880a:	d015      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800880c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008810:	d131      	bne.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008812:	4a2c      	ldr	r2, [pc, #176]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8008814:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008818:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800881c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800881e:	430b      	orrs	r3, r1
 8008820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008824:	2500      	movs	r5, #0
 8008826:	e014      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008828:	bb2b      	cbnz	r3, 8008876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800882a:	2100      	movs	r1, #0
 800882c:	3004      	adds	r0, #4
 800882e:	f7ff fe8f 	bl	8008550 <RCCEx_PLLSAI1_Config>
 8008832:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008834:	b96d      	cbnz	r5, 8008852 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8008836:	e7ec      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x26>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008838:	4a22      	ldr	r2, [pc, #136]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800883a:	68d3      	ldr	r3, [r2, #12]
 800883c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008840:	60d3      	str	r3, [r2, #12]
 8008842:	e7e6      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008844:	2100      	movs	r1, #0
 8008846:	3020      	adds	r0, #32
 8008848:	f7ff ff32 	bl	80086b0 <RCCEx_PLLSAI2_Config>
 800884c:	4605      	mov	r5, r0
      break;
 800884e:	e7f1      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x48>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008850:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008858:	d036      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    switch(PeriphClkInit->Sai2ClockSelection)
 800885a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800885c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008860:	d028      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8008862:	d90a      	bls.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8008864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008868:	d010      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800886a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800886e:	f040 8160 	bne.w	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8008872:	46a8      	mov	r8, r5
 8008874:	e010      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xac>
      ret = HAL_ERROR;
 8008876:	2501      	movs	r5, #1
 8008878:	e7eb      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai2ClockSelection)
 800887a:	2b00      	cmp	r3, #0
 800887c:	f040 8159 	bne.w	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008880:	2100      	movs	r1, #0
 8008882:	1d20      	adds	r0, r4, #4
 8008884:	f7ff fe64 	bl	8008550 <RCCEx_PLLSAI1_Config>
 8008888:	4680      	mov	r8, r0
      break;
 800888a:	e005      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800888c:	4a0d      	ldr	r2, [pc, #52]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800888e:	68d3      	ldr	r3, [r2, #12]
 8008890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008894:	60d3      	str	r3, [r2, #12]
      break;
 8008896:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 8008898:	f1b8 0f00 	cmp.w	r8, #0
 800889c:	f040 814c 	bne.w	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80088a0:	4a08      	ldr	r2, [pc, #32]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 80088a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80088a6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80088aa:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80088ac:	430b      	orrs	r3, r1
 80088ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80088b2:	e00a      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80088b4:	2100      	movs	r1, #0
 80088b6:	f104 0020 	add.w	r0, r4, #32
 80088ba:	f7ff fef9 	bl	80086b0 <RCCEx_PLLSAI2_Config>
 80088be:	4680      	mov	r8, r0
      break;
 80088c0:	e7ea      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80088c2:	bf00      	nop
 80088c4:	40021000 	.word	0x40021000
 80088c8:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80088d0:	d029      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80088d2:	4bc3      	ldr	r3, [pc, #780]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80088d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80088da:	f040 812f 	bne.w	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x350>
      __HAL_RCC_PWR_CLK_ENABLE();
 80088de:	4bc0      	ldr	r3, [pc, #768]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80088e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80088e6:	659a      	str	r2, [r3, #88]	; 0x58
 80088e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ee:	9301      	str	r3, [sp, #4]
 80088f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80088f2:	f04f 0901 	mov.w	r9, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088f6:	4abb      	ldr	r2, [pc, #748]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80088f8:	6813      	ldr	r3, [r2, #0]
 80088fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008900:	f7f9 fbc8 	bl	8002094 <HAL_GetTick>
 8008904:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008906:	4eb7      	ldr	r6, [pc, #732]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8008908:	6833      	ldr	r3, [r6, #0]
 800890a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800890e:	f040 8118 	bne.w	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x356>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008912:	f7f9 fbbf 	bl	8002094 <HAL_GetTick>
 8008916:	1bc0      	subs	r0, r0, r7
 8008918:	2802      	cmp	r0, #2
 800891a:	d9f5      	bls.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        ret = HAL_TIMEOUT;
 800891c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800891e:	f1b9 0f00 	cmp.w	r9, #0
 8008922:	f040 8151 	bne.w	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	f013 0f01 	tst.w	r3, #1
 800892c:	d008      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800892e:	4aac      	ldr	r2, [pc, #688]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008930:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008934:	f023 0303 	bic.w	r3, r3, #3
 8008938:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800893a:	430b      	orrs	r3, r1
 800893c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	f013 0f02 	tst.w	r3, #2
 8008946:	d008      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008948:	4aa5      	ldr	r2, [pc, #660]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800894a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800894e:	f023 030c 	bic.w	r3, r3, #12
 8008952:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008954:	430b      	orrs	r3, r1
 8008956:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	f013 0f04 	tst.w	r3, #4
 8008960:	d008      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x188>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008962:	4a9f      	ldr	r2, [pc, #636]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008964:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008968:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800896c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800896e:	430b      	orrs	r3, r1
 8008970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	f013 0f08 	tst.w	r3, #8
 800897a:	d008      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800897c:	4a98      	ldr	r2, [pc, #608]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800897e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008982:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008986:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008988:	430b      	orrs	r3, r1
 800898a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	f013 0f10 	tst.w	r3, #16
 8008994:	d008      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008996:	4a92      	ldr	r2, [pc, #584]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008998:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800899c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80089a2:	430b      	orrs	r3, r1
 80089a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	f013 0f20 	tst.w	r3, #32
 80089ae:	d008      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089b0:	4a8b      	ldr	r2, [pc, #556]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80089b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80089b6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80089ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80089bc:	430b      	orrs	r3, r1
 80089be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80089c8:	d008      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089ca:	4a85      	ldr	r2, [pc, #532]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80089cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80089d0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80089d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80089d6:	430b      	orrs	r3, r1
 80089d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80089e2:	d008      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089e4:	4a7e      	ldr	r2, [pc, #504]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80089e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80089ea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80089ee:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80089f0:	430b      	orrs	r3, r1
 80089f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80089fc:	d008      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089fe:	4a78      	ldr	r2, [pc, #480]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008a08:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a16:	d008      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x23e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a18:	4a71      	ldr	r2, [pc, #452]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008a22:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008a24:	430b      	orrs	r3, r1
 8008a26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a30:	d008      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a32:	4a6b      	ldr	r2, [pc, #428]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a38:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008a3c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008a3e:	430b      	orrs	r3, r1
 8008a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008a4a:	d011      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a4c:	4a64      	ldr	r2, [pc, #400]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a52:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008a56:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a5e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a64:	f000 80b6 	beq.w	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a6c:	f000 80bc 	beq.w	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008a76:	d011      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008a78:	4a59      	ldr	r2, [pc, #356]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a7e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008a82:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008a84:	430b      	orrs	r3, r1
 8008a86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008a8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a90:	f000 80b2 	beq.w	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a98:	f000 80b3 	beq.w	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x416>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8008aa2:	d011      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008aa4:	4a4e      	ldr	r2, [pc, #312]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008aa6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008aaa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008aae:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008ab0:	430b      	orrs	r3, r1
 8008ab2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ab6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008abc:	f000 80a9 	beq.w	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x426>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ac4:	f000 80aa 	beq.w	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008ace:	d011      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ad0:	4a43      	ldr	r2, [pc, #268]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ad2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ad6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008ada:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008adc:	430b      	orrs	r3, r1
 8008ade:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008ae2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ae8:	f000 80a0 	beq.w	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x440>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af0:	f000 80a4 	beq.w	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x450>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008afa:	d008      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x322>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008afc:	4a38      	ldr	r2, [pc, #224]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008afe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b06:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008b14:	d009      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b16:	4a32      	ldr	r2, [pc, #200]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b20:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008b24:	430b      	orrs	r3, r1
 8008b26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	b003      	add	sp, #12
 8008b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = HAL_ERROR;
 8008b32:	2501      	movs	r5, #1
 8008b34:	46a8      	mov	r8, r5
 8008b36:	e6c8      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008b38:	4645      	mov	r5, r8
 8008b3a:	e6c6      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xde>
    FlagStatus       pwrclkchanged = RESET;
 8008b3c:	f04f 0900 	mov.w	r9, #0
 8008b40:	e6d9      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    if(ret == HAL_OK)
 8008b42:	f1b8 0f00 	cmp.w	r8, #0
 8008b46:	d13d      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b48:	4b25      	ldr	r3, [pc, #148]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008b4e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008b52:	d02c      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8008b54:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d012      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x396>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b5c:	4a20      	ldr	r2, [pc, #128]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b66:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008b6a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008b6e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b72:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008b76:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008b7a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8008b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b82:	f013 0f01 	tst.w	r3, #1
 8008b86:	d012      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        tickstart = HAL_GetTick();
 8008b88:	f7f9 fa84 	bl	8002094 <HAL_GetTick>
 8008b8c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b8e:	4e14      	ldr	r6, [pc, #80]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b90:	f241 3788 	movw	r7, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b94:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8008b98:	f013 0f02 	tst.w	r3, #2
 8008b9c:	d107      	bne.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b9e:	f7f9 fa79 	bl	8002094 <HAL_GetTick>
 8008ba2:	eba0 0008 	sub.w	r0, r0, r8
 8008ba6:	42b8      	cmp	r0, r7
 8008ba8:	d9f4      	bls.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
            ret = HAL_TIMEOUT;
 8008baa:	2503      	movs	r5, #3
 8008bac:	e6b7      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x132>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bae:	4a0c      	ldr	r2, [pc, #48]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bb0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008bbc:	430b      	orrs	r3, r1
 8008bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008bc2:	e6ac      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x132>
 8008bc4:	4645      	mov	r5, r8
 8008bc6:	e6aa      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bc8:	4a05      	ldr	r2, [pc, #20]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8008bd2:	e6a8      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bd4:	68d3      	ldr	r3, [r2, #12]
 8008bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bda:	60d3      	str	r3, [r2, #12]
 8008bdc:	e748      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8008bde:	bf00      	nop
 8008be0:	40021000 	.word	0x40021000
 8008be4:	40007000 	.word	0x40007000
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008be8:	2101      	movs	r1, #1
 8008bea:	1d20      	adds	r0, r4, #4
 8008bec:	f7ff fcb0 	bl	8008550 <RCCEx_PLLSAI1_Config>
          status = ret;
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	bf18      	it	ne
 8008bf4:	4605      	movne	r5, r0
 8008bf6:	e73b      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bf8:	68d3      	ldr	r3, [r2, #12]
 8008bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bfe:	60d3      	str	r3, [r2, #12]
 8008c00:	e74c      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c02:	2101      	movs	r1, #1
 8008c04:	1d20      	adds	r0, r4, #4
 8008c06:	f7ff fca3 	bl	8008550 <RCCEx_PLLSAI1_Config>
        status = ret;
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	bf18      	it	ne
 8008c0e:	4605      	movne	r5, r0
 8008c10:	e744      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c12:	68d3      	ldr	r3, [r2, #12]
 8008c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c18:	60d3      	str	r3, [r2, #12]
 8008c1a:	e755      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	1d20      	adds	r0, r4, #4
 8008c20:	f7ff fc96 	bl	8008550 <RCCEx_PLLSAI1_Config>
        status = ret;
 8008c24:	2800      	cmp	r0, #0
 8008c26:	bf18      	it	ne
 8008c28:	4605      	movne	r5, r0
 8008c2a:	e74d      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c2c:	2102      	movs	r1, #2
 8008c2e:	1d20      	adds	r0, r4, #4
 8008c30:	f7ff fc8e 	bl	8008550 <RCCEx_PLLSAI1_Config>
        status = ret;
 8008c34:	2800      	cmp	r0, #0
 8008c36:	bf18      	it	ne
 8008c38:	4605      	movne	r5, r0
 8008c3a:	e75b      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	f104 0020 	add.w	r0, r4, #32
 8008c42:	f7ff fd35 	bl	80086b0 <RCCEx_PLLSAI2_Config>
        status = ret;
 8008c46:	2800      	cmp	r0, #0
 8008c48:	bf18      	it	ne
 8008c4a:	4605      	movne	r5, r0
 8008c4c:	e752      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008c4e:	bf00      	nop

08008c50 <HAL_RCCEx_GetPeriphCLKConfig>:
{
 8008c50:	b410      	push	{r4}
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8008c52:	4b4e      	ldr	r3, [pc, #312]	; (8008d8c <HAL_RCCEx_GetPeriphCLKConfig+0x13c>)
 8008c54:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 8008c56:	4b4e      	ldr	r3, [pc, #312]	; (8008d90 <HAL_RCCEx_GetPeriphCLKConfig+0x140>)
 8008c58:	68dc      	ldr	r4, [r3, #12]
 8008c5a:	f004 0403 	and.w	r4, r4, #3
 8008c5e:	6044      	str	r4, [r0, #4]
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008c60:	68d9      	ldr	r1, [r3, #12]
 8008c62:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8008c66:	3101      	adds	r1, #1
 8008c68:	6081      	str	r1, [r0, #8]
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008c6a:	691a      	ldr	r2, [r3, #16]
 8008c6c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008c70:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8008c72:	691a      	ldr	r2, [r3, #16]
 8008c74:	0b52      	lsrs	r2, r2, #13
 8008c76:	f002 0210 	and.w	r2, r2, #16
 8008c7a:	3207      	adds	r2, #7
 8008c7c:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8008c7e:	691a      	ldr	r2, [r3, #16]
 8008c80:	f3c2 5241 	ubfx	r2, r2, #21, #2
 8008c84:	3201      	adds	r2, #1
 8008c86:	0052      	lsls	r2, r2, #1
 8008c88:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8008c8a:	691a      	ldr	r2, [r3, #16]
 8008c8c:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8008c90:	3201      	adds	r2, #1
 8008c92:	0052      	lsls	r2, r2, #1
 8008c94:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8008c96:	6204      	str	r4, [r0, #32]
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8008c98:	6241      	str	r1, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008c9a:	695a      	ldr	r2, [r3, #20]
 8008c9c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008ca0:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8008ca2:	695a      	ldr	r2, [r3, #20]
 8008ca4:	0b52      	lsrs	r2, r2, #13
 8008ca6:	f002 0210 	and.w	r2, r2, #16
 8008caa:	3207      	adds	r2, #7
 8008cac:	62c2      	str	r2, [r0, #44]	; 0x2c
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8008cae:	695a      	ldr	r2, [r3, #20]
 8008cb0:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8008cb4:	3201      	adds	r2, #1
 8008cb6:	0052      	lsls	r2, r2, #1
 8008cb8:	6302      	str	r2, [r0, #48]	; 0x30
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8008cba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cbe:	f002 0203 	and.w	r2, r2, #3
 8008cc2:	6382      	str	r2, [r0, #56]	; 0x38
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8008cc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cc8:	f002 020c 	and.w	r2, r2, #12
 8008ccc:	63c2      	str	r2, [r0, #60]	; 0x3c
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8008cce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cd2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8008cd6:	6402      	str	r2, [r0, #64]	; 0x40
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8008cd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cdc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8008ce0:	6442      	str	r2, [r0, #68]	; 0x44
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8008ce2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008ce6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008cea:	6482      	str	r2, [r0, #72]	; 0x48
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8008cec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cf0:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8008cf4:	64c2      	str	r2, [r0, #76]	; 0x4c
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8008cf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cfa:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8008cfe:	6502      	str	r2, [r0, #80]	; 0x50
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8008d00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d04:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8008d08:	6542      	str	r2, [r0, #84]	; 0x54
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8008d0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d0e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8008d12:	6582      	str	r2, [r0, #88]	; 0x58
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008d14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d18:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008d1c:	65c2      	str	r2, [r0, #92]	; 0x5c
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008d1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d22:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8008d26:	6602      	str	r2, [r0, #96]	; 0x60
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8008d28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d2c:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8008d30:	6642      	str	r2, [r0, #100]	; 0x64
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8008d32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d36:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8008d3a:	6682      	str	r2, [r0, #104]	; 0x68
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8008d3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008d40:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008d44:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8008d48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d4c:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8008d50:	66c2      	str	r2, [r0, #108]	; 0x6c
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008d52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d56:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8008d5a:	6702      	str	r2, [r0, #112]	; 0x70
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8008d5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d60:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8008d64:	6742      	str	r2, [r0, #116]	; 0x74
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8008d66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d6a:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 8008d6e:	6782      	str	r2, [r0, #120]	; 0x78
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008d70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008d78:	67c2      	str	r2, [r0, #124]	; 0x7c
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d82:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8008d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	000fffff 	.word	0x000fffff
 8008d90:	40021000 	.word	0x40021000

08008d94 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8008d94:	b508      	push	{r3, lr}
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008d96:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8008d9a:	d00b      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d9c:	4bbe      	ldr	r3, [pc, #760]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d04a      	beq.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d07f      	beq.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d030      	beq.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
      pllvco = 0U;
 8008db0:	2100      	movs	r1, #0
 8008db2:	e04c      	b.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008db4:	4bb8      	ldr	r3, [pc, #736]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
    switch(srcclk)
 8008dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc2:	d012      	beq.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8008dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dc8:	d01a      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8008dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dce:	d001      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
  uint32_t frequency = 0U;
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e009      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008dd4:	4bb0      	ldr	r3, [pc, #704]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dda:	f003 0302 	and.w	r3, r3, #2
        frequency = LSE_VALUE;
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bf0c      	ite	eq
 8008de2:	2000      	moveq	r0, #0
 8008de4:	f44f 4000 	movne.w	r0, #32768	; 0x8000
}
 8008de8:	bd08      	pop	{r3, pc}
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008dea:	4bab      	ldr	r3, [pc, #684]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008df0:	f003 0302 	and.w	r3, r3, #2
          frequency = LSI_VALUE;
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bf0c      	ite	eq
 8008df8:	2000      	moveq	r0, #0
 8008dfa:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8008dfe:	e7f3      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e00:	4ba5      	ldr	r3, [pc, #660]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
        frequency = HSE_VALUE / 32U;
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	48a4      	ldr	r0, [pc, #656]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8008e0c:	bf08      	it	eq
 8008e0e:	2000      	moveq	r0, #0
 8008e10:	e7ea      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008e12:	4ba1      	ldr	r3, [pc, #644]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f013 0f02 	tst.w	r3, #2
 8008e1a:	d050      	beq.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008e1c:	4b9e      	ldr	r3, [pc, #632]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f013 0f08 	tst.w	r3, #8
 8008e24:	4b9c      	ldr	r3, [pc, #624]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e26:	bf19      	ittee	ne
 8008e28:	681b      	ldrne	r3, [r3, #0]
 8008e2a:	f3c3 1303 	ubfxne	r3, r3, #4, #4
 8008e2e:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8008e32:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 8008e36:	4a9a      	ldr	r2, [pc, #616]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8008e38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e3c:	e007      	b.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e3e:	4b96      	ldr	r3, [pc, #600]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        pllvco = 0U;
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	4996      	ldr	r1, [pc, #600]	; (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008e4a:	bf08      	it	eq
 8008e4c:	2100      	moveq	r1, #0
    switch(PeriphClk)
 8008e4e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008e52:	f000 82b1 	beq.w	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8008e56:	f200 8082 	bhi.w	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8008e5a:	2810      	cmp	r0, #16
 8008e5c:	f000 81cd 	beq.w	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008e60:	d840      	bhi.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8008e62:	2802      	cmp	r0, #2
 8008e64:	f000 815c 	beq.w	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8008e68:	d92b      	bls.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8008e6a:	2804      	cmp	r0, #4
 8008e6c:	f000 8189 	beq.w	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8008e70:	2808      	cmp	r0, #8
 8008e72:	f040 80d3 	bne.w	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008e76:	4b88      	ldr	r3, [pc, #544]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        switch(srcclk)
 8008e80:	2b40      	cmp	r3, #64	; 0x40
 8008e82:	f000 81ae 	beq.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008e86:	f240 81a6 	bls.w	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008e8a:	2b80      	cmp	r3, #128	; 0x80
 8008e8c:	f000 81ac 	beq.w	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8008e90:	2bc0      	cmp	r3, #192	; 0xc0
 8008e92:	f040 82f9 	bne.w	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e96:	4b80      	ldr	r3, [pc, #512]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e9c:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bf0c      	ite	eq
 8008ea4:	2000      	moveq	r0, #0
 8008ea6:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008eaa:	e79d      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008eac:	4b7a      	ldr	r3, [pc, #488]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
        pllvco = 0U;
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	497c      	ldr	r1, [pc, #496]	; (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8008eb8:	bf08      	it	eq
 8008eba:	2100      	moveq	r1, #0
 8008ebc:	e7c7      	b.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
        pllvco = 0U;
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	e7c5      	b.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    switch(PeriphClk)
 8008ec2:	2801      	cmp	r0, #1
 8008ec4:	f040 80aa 	bne.w	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008ec8:	4b73      	ldr	r3, [pc, #460]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ece:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	f200 82d2 	bhi.w	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008ed8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008edc:	010b0108 	.word	0x010b0108
 8008ee0:	0117010e 	.word	0x0117010e
    switch(PeriphClk)
 8008ee4:	2840      	cmp	r0, #64	; 0x40
 8008ee6:	f000 8219 	beq.w	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
 8008eea:	d918      	bls.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8008eec:	2880      	cmp	r0, #128	; 0x80
 8008eee:	f000 8232 	beq.w	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8008ef2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008ef6:	f040 8091 	bne.w	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008efa:	4b67      	ldr	r3, [pc, #412]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        switch(srcclk)
 8008f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f08:	f000 824a 	beq.w	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f10:	f000 8249 	beq.w	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8240 	beq.w	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
  uint32_t frequency = 0U;
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e764      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008f1e:	2820      	cmp	r0, #32
 8008f20:	d17c      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008f22:	4b5d      	ldr	r3, [pc, #372]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        switch(srcclk)
 8008f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f30:	f000 8196 	beq.w	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8008f34:	f240 818e 	bls.w	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8008f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f3c:	f000 8193 	beq.w	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8008f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f44:	f040 82a4 	bne.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f48:	4b53      	ldr	r3, [pc, #332]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4e:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bf0c      	ite	eq
 8008f56:	2000      	moveq	r0, #0
 8008f58:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008f5c:	e744      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008f5e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8008f62:	f000 8189 	beq.w	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8008f66:	d83f      	bhi.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008f68:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008f6c:	d058      	beq.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
 8008f6e:	d907      	bls.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8008f70:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8008f74:	d125      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008f76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008f7a:	f7ff fa63 	bl	8008444 <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 8008f7e:	e733      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008f80:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008f84:	d14a      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008f86:	4b44      	ldr	r3, [pc, #272]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 8008f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f94:	f000 8248 	beq.w	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
 8008f98:	f240 8241 	bls.w	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fa0:	f000 824d 	beq.w	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
 8008fa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fa8:	f040 827a 	bne.w	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008fac:	4b3a      	ldr	r3, [pc, #232]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb2:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	bf0c      	ite	eq
 8008fba:	2000      	moveq	r0, #0
 8008fbc:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008fc0:	e712      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008fc2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008fc6:	d129      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008fc8:	4b33      	ldr	r3, [pc, #204]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fce:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
        switch(srcclk)
 8008fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd6:	d03f      	beq.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008fd8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fdc:	d025      	beq.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
 8008fde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fe2:	d063      	beq.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
  uint32_t frequency = 0U;
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e6ff      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008fe8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8008fec:	f000 818b 	beq.w	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8008ff0:	d80e      	bhi.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008ff2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008ff6:	d111      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008ff8:	4b27      	ldr	r3, [pc, #156]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        switch(srcclk)
 8008ffe:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8009002:	f000 8225 	beq.w	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8009006:	2b00      	cmp	r3, #0
 8009008:	f040 8225 	bne.w	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
  uint32_t frequency = 0U;
 800900c:	2000      	movs	r0, #0
 800900e:	e6eb      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8009010:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8009014:	d0d8      	beq.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8009016:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800901a:	d0d5      	beq.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
  uint32_t frequency = 0U;
 800901c:	2000      	movs	r0, #0
 800901e:	e6e3      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009020:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009024:	f7ff fa0e 	bl	8008444 <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 8009028:	e6de      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800902a:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f013 0f02 	tst.w	r3, #2
 8009032:	f000 8219 	beq.w	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009036:	4b18      	ldr	r3, [pc, #96]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f013 0f08 	tst.w	r3, #8
 800903e:	4b16      	ldr	r3, [pc, #88]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8009040:	bf19      	ittee	ne
 8009042:	681b      	ldrne	r3, [r3, #0]
 8009044:	f3c3 1303 	ubfxne	r3, r3, #4, #4
 8009048:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 800904c:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 8009050:	4a13      	ldr	r2, [pc, #76]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8009052:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009056:	e6c7      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009058:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009060:	f000 8204 	beq.w	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009064:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800906c:	f000 8200 	beq.w	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009070:	4809      	ldr	r0, [pc, #36]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8009072:	68c3      	ldr	r3, [r0, #12]
 8009074:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009078:	fb01 f303 	mul.w	r3, r1, r3
 800907c:	68c2      	ldr	r2, [r0, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800907e:	68c0      	ldr	r0, [r0, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009080:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8009084:	3201      	adds	r2, #1
 8009086:	fbb3 f3f2 	udiv	r3, r3, r2
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800908a:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800908e:	3001      	adds	r0, #1
 8009090:	0040      	lsls	r0, r0, #1
 8009092:	fbb3 f0f0 	udiv	r0, r3, r0
 8009096:	e6a7      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009098:	40021000 	.word	0x40021000
 800909c:	0003d090 	.word	0x0003d090
 80090a0:	08013c40 	.word	0x08013c40
 80090a4:	00f42400 	.word	0x00f42400
 80090a8:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80090ac:	4bb4      	ldr	r3, [pc, #720]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80090b4:	f000 81de 	beq.w	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80090b8:	4bb1      	ldr	r3, [pc, #708]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80090c0:	f000 81da 	beq.w	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80090c4:	48ae      	ldr	r0, [pc, #696]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80090c6:	6903      	ldr	r3, [r0, #16]
 80090c8:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	68c2      	ldr	r2, [r0, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80090d2:	6900      	ldr	r0, [r0, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80090d4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80090d8:	3201      	adds	r2, #1
 80090da:	fbb3 f3f2 	udiv	r3, r3, r2
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80090de:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80090e2:	3001      	adds	r0, #1
 80090e4:	0040      	lsls	r0, r0, #1
 80090e6:	fbb3 f0f0 	udiv	r0, r3, r0
 80090ea:	e67d      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK2Freq();
 80090ec:	f7ff f8e2 	bl	80082b4 <HAL_RCC_GetPCLK2Freq>
          break;
 80090f0:	e67a      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 80090f2:	f7fe fcd3 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 80090f6:	e677      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090f8:	4ba1      	ldr	r3, [pc, #644]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009100:	2b00      	cmp	r3, #0
 8009102:	48a0      	ldr	r0, [pc, #640]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8009104:	bf08      	it	eq
 8009106:	2000      	moveq	r0, #0
 8009108:	e66e      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800910a:	4b9d      	ldr	r3, [pc, #628]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800910c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009110:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8009114:	2b00      	cmp	r3, #0
 8009116:	bf0c      	ite	eq
 8009118:	2000      	moveq	r0, #0
 800911a:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800911e:	e663      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009120:	4b97      	ldr	r3, [pc, #604]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009126:	f003 030c 	and.w	r3, r3, #12
        switch(srcclk)
 800912a:	2b0c      	cmp	r3, #12
 800912c:	f200 81a8 	bhi.w	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8009130:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009134:	01a6000d 	.word	0x01a6000d
 8009138:	01a601a6 	.word	0x01a601a6
 800913c:	01a60010 	.word	0x01a60010
 8009140:	01a601a6 	.word	0x01a601a6
 8009144:	01a60013 	.word	0x01a60013
 8009148:	01a601a6 	.word	0x01a601a6
 800914c:	001c      	.short	0x001c
          frequency = HAL_RCC_GetPCLK1Freq();
 800914e:	f7ff f89f 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 8009152:	e649      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 8009154:	f7fe fca2 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 8009158:	e646      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800915a:	4b89      	ldr	r3, [pc, #548]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009162:	2b00      	cmp	r3, #0
 8009164:	4887      	ldr	r0, [pc, #540]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8009166:	bf08      	it	eq
 8009168:	2000      	moveq	r0, #0
 800916a:	e63d      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800916c:	4b84      	ldr	r3, [pc, #528]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800916e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009172:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8009176:	2b00      	cmp	r3, #0
 8009178:	bf0c      	ite	eq
 800917a:	2000      	moveq	r0, #0
 800917c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009180:	e632      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009182:	4b7f      	ldr	r3, [pc, #508]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009188:	f003 0330 	and.w	r3, r3, #48	; 0x30
        switch(srcclk)
 800918c:	2b10      	cmp	r3, #16
 800918e:	d016      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
 8009190:	d90f      	bls.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 8009192:	2b20      	cmp	r3, #32
 8009194:	d016      	beq.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8009196:	2b30      	cmp	r3, #48	; 0x30
 8009198:	f040 8174 	bne.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800919c:	4b78      	ldr	r3, [pc, #480]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800919e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a2:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bf0c      	ite	eq
 80091aa:	2000      	moveq	r0, #0
 80091ac:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80091b0:	e61a      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f040 8166 	bne.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091b8:	f7ff f86a 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 80091bc:	e614      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 80091be:	f7fe fc6d 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 80091c2:	e611      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091c4:	4b6e      	ldr	r3, [pc, #440]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	486d      	ldr	r0, [pc, #436]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80091d0:	bf08      	it	eq
 80091d2:	2000      	moveq	r0, #0
 80091d4:	e608      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f040 8156 	bne.w	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091dc:	f7ff f858 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 80091e0:	e602      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 80091e2:	f7fe fc5b 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 80091e6:	e5ff      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091e8:	4b65      	ldr	r3, [pc, #404]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	4864      	ldr	r0, [pc, #400]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80091f4:	bf08      	it	eq
 80091f6:	2000      	moveq	r0, #0
 80091f8:	e5f6      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80091fa:	4b61      	ldr	r3, [pc, #388]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80091fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009200:	f403 7340 	and.w	r3, r3, #768	; 0x300
        switch(srcclk)
 8009204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009208:	d018      	beq.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800920a:	d911      	bls.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800920c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009210:	d017      	beq.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009216:	f040 8139 	bne.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800921a:	4b59      	ldr	r3, [pc, #356]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800921c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009220:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8009224:	2b00      	cmp	r3, #0
 8009226:	bf0c      	ite	eq
 8009228:	2000      	moveq	r0, #0
 800922a:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800922e:	e5db      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 812b 	bne.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009236:	f7ff f82b 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 800923a:	e5d5      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800923c:	f7fe fc2e 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 8009240:	e5d2      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009242:	4b4f      	ldr	r3, [pc, #316]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800924a:	2b00      	cmp	r3, #0
 800924c:	484d      	ldr	r0, [pc, #308]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800924e:	bf08      	it	eq
 8009250:	2000      	moveq	r0, #0
 8009252:	e5c9      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 8009254:	2b00      	cmp	r3, #0
 8009256:	f040 811b 	bne.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800925a:	f7ff f819 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 800925e:	e5c3      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 8009260:	f7fe fc1c 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 8009264:	e5c0      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009266:	4b46      	ldr	r3, [pc, #280]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800926e:	2b00      	cmp	r3, #0
 8009270:	4844      	ldr	r0, [pc, #272]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8009272:	bf08      	it	eq
 8009274:	2000      	moveq	r0, #0
 8009276:	e5b7      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009278:	4b41      	ldr	r3, [pc, #260]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800927a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800927e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        switch(srcclk)
 8009282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009286:	d024      	beq.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 8009288:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800928c:	d004      	beq.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800928e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009292:	d004      	beq.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
  uint32_t frequency = 0U;
 8009294:	2000      	movs	r0, #0
 8009296:	e5a7      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 8009298:	f7fe fc00 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 800929c:	e5a4      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800929e:	4b38      	ldr	r3, [pc, #224]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80092a6:	f000 80f5 	beq.w	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80092aa:	4835      	ldr	r0, [pc, #212]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80092ac:	6903      	ldr	r3, [r0, #16]
 80092ae:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	68c2      	ldr	r2, [r0, #12]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80092b8:	6900      	ldr	r0, [r0, #16]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80092ba:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80092be:	3201      	adds	r2, #1
 80092c0:	fbb3 f3f2 	udiv	r3, r3, r2
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80092c4:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80092c8:	3001      	adds	r0, #1
 80092ca:	0040      	lsls	r0, r0, #1
 80092cc:	fbb3 f0f0 	udiv	r0, r3, r0
 80092d0:	e58a      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 80092d2:	4b2b      	ldr	r3, [pc, #172]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80092da:	f000 80dd 	beq.w	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80092de:	4b28      	ldr	r3, [pc, #160]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80092e0:	6958      	ldr	r0, [r3, #20]
 80092e2:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80092e6:	fb01 f000 	mul.w	r0, r1, r0
 80092ea:	68da      	ldr	r2, [r3, #12]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80092ec:	695b      	ldr	r3, [r3, #20]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80092ee:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80092f2:	3201      	adds	r2, #1
 80092f4:	fbb0 f0f2 	udiv	r0, r0, r2
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80092f8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80092fc:	3301      	adds	r3, #1
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	fbb0 f0f3 	udiv	r0, r0, r3
 8009304:	e570      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8009306:	4b1e      	ldr	r3, [pc, #120]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800930c:	2b00      	cmp	r3, #0
 800930e:	db02      	blt.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x582>
          frequency = HAL_RCC_GetPCLK2Freq();
 8009310:	f7fe ffd0 	bl	80082b4 <HAL_RCC_GetPCLK2Freq>
 8009314:	e568      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 8009316:	f7fe fbc1 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 800931a:	e565      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800931c:	4b18      	ldr	r3, [pc, #96]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800931e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009322:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
        switch(srcclk)
 8009326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932a:	d008      	beq.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 800932c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009330:	d008      	beq.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8009332:	b10b      	cbz	r3, 8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
  uint32_t frequency = 0U;
 8009334:	2000      	movs	r0, #0
 8009336:	e557      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009338:	f7fe ffaa 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 800933c:	e554      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800933e:	f7fe fbad 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 8009342:	e551      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009344:	4b0e      	ldr	r3, [pc, #56]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800934c:	2b00      	cmp	r3, #0
 800934e:	480d      	ldr	r0, [pc, #52]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8009350:	bf08      	it	eq
 8009352:	2000      	moveq	r0, #0
 8009354:	e548      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009356:	4b0a      	ldr	r3, [pc, #40]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        switch(srcclk)
 8009360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009364:	d008      	beq.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800936a:	d00d      	beq.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 800936c:	b10b      	cbz	r3, 8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
  uint32_t frequency = 0U;
 800936e:	2000      	movs	r0, #0
 8009370:	e53a      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009372:	f7fe ff8d 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 8009376:	e537      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 8009378:	f7fe fb90 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 800937c:	e534      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800937e:	bf00      	nop
 8009380:	40021000 	.word	0x40021000
 8009384:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009388:	4b46      	ldr	r3, [pc, #280]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009390:	2b00      	cmp	r3, #0
 8009392:	4845      	ldr	r0, [pc, #276]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 8009394:	bf08      	it	eq
 8009396:	2000      	moveq	r0, #0
 8009398:	e526      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 800939a:	f7fe ff79 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 800939e:	e523      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 80093a0:	f7fe fb7c 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
          break;
 80093a4:	e520      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093a6:	4b3f      	ldr	r3, [pc, #252]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	483d      	ldr	r0, [pc, #244]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 80093b2:	bf08      	it	eq
 80093b4:	2000      	moveq	r0, #0
 80093b6:	e517      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80093b8:	4b3a      	ldr	r3, [pc, #232]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 80093ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        switch(srcclk)
 80093c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093c6:	d016      	beq.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80093c8:	d910      	bls.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80093ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80093ce:	d01d      	beq.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 80093d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80093d4:	d162      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80093d6:	4b33      	ldr	r3, [pc, #204]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093dc:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bf0c      	ite	eq
 80093e4:	2000      	moveq	r0, #0
 80093e6:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80093ea:	e4fd      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d155      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
          frequency = HAL_RCC_GetPCLK1Freq();
 80093f0:	f7fe ff4e 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 80093f4:	e4f8      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80093f6:	4b2b      	ldr	r3, [pc, #172]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 80093f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093fc:	f003 0302 	and.w	r3, r3, #2
              frequency = LSI_VALUE;
 8009400:	2b00      	cmp	r3, #0
 8009402:	bf0c      	ite	eq
 8009404:	2000      	moveq	r0, #0
 8009406:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800940a:	e4ed      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800940c:	4b25      	ldr	r3, [pc, #148]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009414:	2b00      	cmp	r3, #0
 8009416:	4824      	ldr	r0, [pc, #144]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 8009418:	bf08      	it	eq
 800941a:	2000      	moveq	r0, #0
 800941c:	e4e4      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 800941e:	2b00      	cmp	r3, #0
 8009420:	d13e      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009422:	f7fe ff35 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 8009426:	e4df      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009428:	4b1e      	ldr	r3, [pc, #120]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800942a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800942e:	f003 0302 	and.w	r3, r3, #2
              frequency = LSI_VALUE;
 8009432:	2b00      	cmp	r3, #0
 8009434:	bf0c      	ite	eq
 8009436:	2000      	moveq	r0, #0
 8009438:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800943c:	e4d4      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800943e:	4b19      	ldr	r3, [pc, #100]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009446:	2b00      	cmp	r3, #0
 8009448:	4817      	ldr	r0, [pc, #92]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 800944a:	bf08      	it	eq
 800944c:	2000      	moveq	r0, #0
 800944e:	e4cb      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009450:	f7fe ff1e 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
          break;
 8009454:	e4c8      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009456:	4b13      	ldr	r3, [pc, #76]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800945e:	2b00      	cmp	r3, #0
 8009460:	4811      	ldr	r0, [pc, #68]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 8009462:	bf08      	it	eq
 8009464:	2000      	moveq	r0, #0
 8009466:	e4bf      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0U;
 8009468:	2000      	movs	r0, #0
 800946a:	e4bd      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800946c:	2000      	movs	r0, #0
 800946e:	e4bb      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009470:	2000      	movs	r0, #0
 8009472:	e4b9      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009474:	2000      	movs	r0, #0
 8009476:	e4b7      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009478:	2000      	movs	r0, #0
 800947a:	e4b5      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800947c:	2000      	movs	r0, #0
 800947e:	e4b3      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009480:	2000      	movs	r0, #0
 8009482:	e4b1      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009484:	2000      	movs	r0, #0
 8009486:	e4af      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009488:	2000      	movs	r0, #0
 800948a:	e4ad      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800948c:	2000      	movs	r0, #0
 800948e:	e4ab      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009490:	2000      	movs	r0, #0
 8009492:	e4a9      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009494:	2000      	movs	r0, #0
 8009496:	e4a7      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009498:	2000      	movs	r0, #0
 800949a:	e4a5      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800949c:	2000      	movs	r0, #0
 800949e:	e4a3      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80094a0:	2000      	movs	r0, #0
 80094a2:	e4a1      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80094a4:	40021000 	.word	0x40021000
 80094a8:	00f42400 	.word	0x00f42400

080094ac <HAL_RCCEx_EnablePLLSAI1>:
{
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	4606      	mov	r6, r0
  __HAL_RCC_PLLSAI1_DISABLE();
 80094b0:	4a21      	ldr	r2, [pc, #132]	; (8009538 <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 80094b2:	6813      	ldr	r3, [r2, #0]
 80094b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094b8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80094ba:	f7f8 fdeb 	bl	8002094 <HAL_GetTick>
 80094be:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80094c0:	4c1d      	ldr	r4, [pc, #116]	; (8009538 <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80094c8:	d008      	beq.n	80094dc <HAL_RCCEx_EnablePLLSAI1+0x30>
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094ca:	f7f8 fde3 	bl	8002094 <HAL_GetTick>
 80094ce:	1b40      	subs	r0, r0, r5
 80094d0:	2802      	cmp	r0, #2
 80094d2:	d9f6      	bls.n	80094c2 <HAL_RCCEx_EnablePLLSAI1+0x16>
      status = HAL_TIMEOUT;
 80094d4:	2003      	movs	r0, #3
}
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	2000      	movs	r0, #0
 80094da:	e7fc      	b.n	80094d6 <HAL_RCCEx_EnablePLLSAI1+0x2a>
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
 80094dc:	4a16      	ldr	r2, [pc, #88]	; (8009538 <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 80094de:	6910      	ldr	r0, [r2, #16]
 80094e0:	68b1      	ldr	r1, [r6, #8]
 80094e2:	4b16      	ldr	r3, [pc, #88]	; (800953c <HAL_RCCEx_EnablePLLSAI1+0x90>)
 80094e4:	4003      	ands	r3, r0
 80094e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80094ea:	68f1      	ldr	r1, [r6, #12]
 80094ec:	0909      	lsrs	r1, r1, #4
 80094ee:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80094f2:	6931      	ldr	r1, [r6, #16]
 80094f4:	0849      	lsrs	r1, r1, #1
 80094f6:	3901      	subs	r1, #1
 80094f8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80094fc:	6971      	ldr	r1, [r6, #20]
 80094fe:	0849      	lsrs	r1, r1, #1
 8009500:	3901      	subs	r1, #1
 8009502:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8009506:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1Init->PLLSAI1ClockOut);
 8009508:	6913      	ldr	r3, [r2, #16]
 800950a:	69b1      	ldr	r1, [r6, #24]
 800950c:	430b      	orrs	r3, r1
 800950e:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 8009510:	6813      	ldr	r3, [r2, #0]
 8009512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009516:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009518:	f7f8 fdbc 	bl	8002094 <HAL_GetTick>
 800951c:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800951e:	4c06      	ldr	r4, [pc, #24]	; (8009538 <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8009526:	d1d7      	bne.n	80094d8 <HAL_RCCEx_EnablePLLSAI1+0x2c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009528:	f7f8 fdb4 	bl	8002094 <HAL_GetTick>
 800952c:	1b40      	subs	r0, r0, r5
 800952e:	2802      	cmp	r0, #2
 8009530:	d9f6      	bls.n	8009520 <HAL_RCCEx_EnablePLLSAI1+0x74>
        status = HAL_TIMEOUT;
 8009532:	2003      	movs	r0, #3
  return status;
 8009534:	e7cf      	b.n	80094d6 <HAL_RCCEx_EnablePLLSAI1+0x2a>
 8009536:	bf00      	nop
 8009538:	40021000 	.word	0x40021000
 800953c:	f99d80ff 	.word	0xf99d80ff

08009540 <HAL_RCCEx_DisablePLLSAI1>:
{
 8009540:	b538      	push	{r3, r4, r5, lr}
  __HAL_RCC_PLLSAI1_DISABLE();
 8009542:	4a12      	ldr	r2, [pc, #72]	; (800958c <HAL_RCCEx_DisablePLLSAI1+0x4c>)
 8009544:	6813      	ldr	r3, [r2, #0]
 8009546:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800954a:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800954c:	f7f8 fda2 	bl	8002094 <HAL_GetTick>
 8009550:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009552:	4c0e      	ldr	r4, [pc, #56]	; (800958c <HAL_RCCEx_DisablePLLSAI1+0x4c>)
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800955a:	d006      	beq.n	800956a <HAL_RCCEx_DisablePLLSAI1+0x2a>
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800955c:	f7f8 fd9a 	bl	8002094 <HAL_GetTick>
 8009560:	1b40      	subs	r0, r0, r5
 8009562:	2802      	cmp	r0, #2
 8009564:	d9f6      	bls.n	8009554 <HAL_RCCEx_DisablePLLSAI1+0x14>
      status = HAL_TIMEOUT;
 8009566:	2003      	movs	r0, #3
 8009568:	e000      	b.n	800956c <HAL_RCCEx_DisablePLLSAI1+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 800956a:	2000      	movs	r0, #0
  __HAL_RCC_PLLSAI1CLKOUT_DISABLE(RCC_PLLSAI1CFGR_PLLSAI1PEN|RCC_PLLSAI1CFGR_PLLSAI1QEN|RCC_PLLSAI1CFGR_PLLSAI1REN);
 800956c:	4a07      	ldr	r2, [pc, #28]	; (800958c <HAL_RCCEx_DisablePLLSAI1+0x4c>)
 800956e:	6913      	ldr	r3, [r2, #16]
 8009570:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009578:	6113      	str	r3, [r2, #16]
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800957a:	6813      	ldr	r3, [r2, #0]
 800957c:	f013 5f08 	tst.w	r3, #570425344	; 0x22000000
 8009580:	d103      	bne.n	800958a <HAL_RCCEx_DisablePLLSAI1+0x4a>
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009582:	68d3      	ldr	r3, [r2, #12]
 8009584:	f023 0303 	bic.w	r3, r3, #3
 8009588:	60d3      	str	r3, [r2, #12]
}
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	40021000 	.word	0x40021000

08009590 <HAL_RCCEx_EnablePLLSAI2>:
{
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	4606      	mov	r6, r0
  __HAL_RCC_PLLSAI2_DISABLE();
 8009594:	4a1e      	ldr	r2, [pc, #120]	; (8009610 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 8009596:	6813      	ldr	r3, [r2, #0]
 8009598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800959c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800959e:	f7f8 fd79 	bl	8002094 <HAL_GetTick>
 80095a2:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80095a4:	4c1a      	ldr	r4, [pc, #104]	; (8009610 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80095ac:	d008      	beq.n	80095c0 <HAL_RCCEx_EnablePLLSAI2+0x30>
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80095ae:	f7f8 fd71 	bl	8002094 <HAL_GetTick>
 80095b2:	1b40      	subs	r0, r0, r5
 80095b4:	2802      	cmp	r0, #2
 80095b6:	d9f6      	bls.n	80095a6 <HAL_RCCEx_EnablePLLSAI2+0x16>
      status = HAL_TIMEOUT;
 80095b8:	2003      	movs	r0, #3
}
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	2000      	movs	r0, #0
 80095be:	e7fc      	b.n	80095ba <HAL_RCCEx_EnablePLLSAI2+0x2a>
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2R);
 80095c0:	4a13      	ldr	r2, [pc, #76]	; (8009610 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 80095c2:	6950      	ldr	r0, [r2, #20]
 80095c4:	68b1      	ldr	r1, [r6, #8]
 80095c6:	4b13      	ldr	r3, [pc, #76]	; (8009614 <HAL_RCCEx_EnablePLLSAI2+0x84>)
 80095c8:	4003      	ands	r3, r0
 80095ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80095ce:	68f1      	ldr	r1, [r6, #12]
 80095d0:	0909      	lsrs	r1, r1, #4
 80095d2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80095d6:	6931      	ldr	r1, [r6, #16]
 80095d8:	0849      	lsrs	r1, r1, #1
 80095da:	3901      	subs	r1, #1
 80095dc:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80095e0:	6153      	str	r3, [r2, #20]
    __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PLLSAI2Init->PLLSAI2ClockOut);
 80095e2:	6953      	ldr	r3, [r2, #20]
 80095e4:	6971      	ldr	r1, [r6, #20]
 80095e6:	430b      	orrs	r3, r1
 80095e8:	6153      	str	r3, [r2, #20]
    __HAL_RCC_PLLSAI2_ENABLE();
 80095ea:	6813      	ldr	r3, [r2, #0]
 80095ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095f0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80095f2:	f7f8 fd4f 	bl	8002094 <HAL_GetTick>
 80095f6:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095f8:	4c05      	ldr	r4, [pc, #20]	; (8009610 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8009600:	d1dc      	bne.n	80095bc <HAL_RCCEx_EnablePLLSAI2+0x2c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009602:	f7f8 fd47 	bl	8002094 <HAL_GetTick>
 8009606:	1b40      	subs	r0, r0, r5
 8009608:	2802      	cmp	r0, #2
 800960a:	d9f6      	bls.n	80095fa <HAL_RCCEx_EnablePLLSAI2+0x6a>
        status = HAL_TIMEOUT;
 800960c:	2003      	movs	r0, #3
  return status;
 800960e:	e7d4      	b.n	80095ba <HAL_RCCEx_EnablePLLSAI2+0x2a>
 8009610:	40021000 	.word	0x40021000
 8009614:	f9fd80ff 	.word	0xf9fd80ff

08009618 <HAL_RCCEx_DisablePLLSAI2>:
{
 8009618:	b538      	push	{r3, r4, r5, lr}
  __HAL_RCC_PLLSAI2_DISABLE();
 800961a:	4a12      	ldr	r2, [pc, #72]	; (8009664 <HAL_RCCEx_DisablePLLSAI2+0x4c>)
 800961c:	6813      	ldr	r3, [r2, #0]
 800961e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009622:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8009624:	f7f8 fd36 	bl	8002094 <HAL_GetTick>
 8009628:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800962a:	4c0e      	ldr	r4, [pc, #56]	; (8009664 <HAL_RCCEx_DisablePLLSAI2+0x4c>)
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8009632:	d006      	beq.n	8009642 <HAL_RCCEx_DisablePLLSAI2+0x2a>
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009634:	f7f8 fd2e 	bl	8002094 <HAL_GetTick>
 8009638:	1b40      	subs	r0, r0, r5
 800963a:	2802      	cmp	r0, #2
 800963c:	d9f6      	bls.n	800962c <HAL_RCCEx_DisablePLLSAI2+0x14>
      status = HAL_TIMEOUT;
 800963e:	2003      	movs	r0, #3
 8009640:	e000      	b.n	8009644 <HAL_RCCEx_DisablePLLSAI2+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 8009642:	2000      	movs	r0, #0
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
 8009644:	4a07      	ldr	r2, [pc, #28]	; (8009664 <HAL_RCCEx_DisablePLLSAI2+0x4c>)
 8009646:	6953      	ldr	r3, [r2, #20]
 8009648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800964c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009650:	6153      	str	r3, [r2, #20]
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY)) == 0U)
 8009652:	6813      	ldr	r3, [r2, #0]
 8009654:	f013 6f20 	tst.w	r3, #167772160	; 0xa000000
 8009658:	d103      	bne.n	8009662 <HAL_RCCEx_DisablePLLSAI2+0x4a>
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800965a:	68d3      	ldr	r3, [r2, #12]
 800965c:	f023 0303 	bic.w	r3, r3, #3
 8009660:	60d3      	str	r3, [r2, #12]
}
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	40021000 	.word	0x40021000

08009668 <HAL_RCCEx_WakeUpStopCLKConfig>:
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 8009668:	4a03      	ldr	r2, [pc, #12]	; (8009678 <HAL_RCCEx_WakeUpStopCLKConfig+0x10>)
 800966a:	6893      	ldr	r3, [r2, #8]
 800966c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009670:	4318      	orrs	r0, r3
 8009672:	6090      	str	r0, [r2, #8]
}
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40021000 	.word	0x40021000

0800967c <HAL_RCCEx_StandbyMSIRangeConfig>:
  __HAL_RCC_MSI_STANDBY_RANGE_CONFIG(MSIRange);
 800967c:	4a04      	ldr	r2, [pc, #16]	; (8009690 <HAL_RCCEx_StandbyMSIRangeConfig+0x14>)
 800967e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8009682:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009686:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800968a:	f8c2 0094 	str.w	r0, [r2, #148]	; 0x94
}
 800968e:	4770      	bx	lr
 8009690:	40021000 	.word	0x40021000

08009694 <HAL_RCCEx_EnableLSECSS>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8009694:	4a03      	ldr	r2, [pc, #12]	; (80096a4 <HAL_RCCEx_EnableLSECSS+0x10>)
 8009696:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800969a:	f043 0320 	orr.w	r3, r3, #32
 800969e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80096a2:	4770      	bx	lr
 80096a4:	40021000 	.word	0x40021000

080096a8 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <HAL_RCCEx_DisableLSECSS+0x18>)
 80096aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80096ae:	f022 0220 	bic.w	r2, r2, #32
 80096b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80096bc:	619a      	str	r2, [r3, #24]
}
 80096be:	4770      	bx	lr
 80096c0:	40021000 	.word	0x40021000

080096c4 <HAL_RCCEx_EnableLSECSS_IT>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <HAL_RCCEx_EnableLSECSS_IT+0x2c>)
 80096c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80096ca:	f042 0220 	orr.w	r2, r2, #32
 80096ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 80096d2:	699a      	ldr	r2, [r3, #24]
 80096d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096d8:	619a      	str	r2, [r3, #24]
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 80096da:	f5a3 3386 	sub.w	r3, r3, #68608	; 0x10c00
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80096e4:	601a      	str	r2, [r3, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 80096e6:	689a      	ldr	r2, [r3, #8]
 80096e8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80096ec:	609a      	str	r2, [r3, #8]
}
 80096ee:	4770      	bx	lr
 80096f0:	40021000 	.word	0x40021000

080096f4 <HAL_RCCEx_LSECSS_Callback>:
}
 80096f4:	4770      	bx	lr
	...

080096f8 <HAL_RCCEx_LSECSS_IRQHandler>:
{
 80096f8:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 80096fa:	4b06      	ldr	r3, [pc, #24]	; (8009714 <HAL_RCCEx_LSECSS_IRQHandler+0x1c>)
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009702:	d100      	bne.n	8009706 <HAL_RCCEx_LSECSS_IRQHandler+0xe>
}
 8009704:	bd08      	pop	{r3, pc}
    HAL_RCCEx_LSECSS_Callback();
 8009706:	f7ff fff5 	bl	80096f4 <HAL_RCCEx_LSECSS_Callback>
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800970a:	4b02      	ldr	r3, [pc, #8]	; (8009714 <HAL_RCCEx_LSECSS_IRQHandler+0x1c>)
 800970c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009710:	621a      	str	r2, [r3, #32]
}
 8009712:	e7f7      	b.n	8009704 <HAL_RCCEx_LSECSS_IRQHandler+0xc>
 8009714:	40021000 	.word	0x40021000

08009718 <HAL_RCCEx_EnableLSCO>:
{
 8009718:	b530      	push	{r4, r5, lr}
 800971a:	b089      	sub	sp, #36	; 0x24
 800971c:	4605      	mov	r5, r0
  __LSCO_CLK_ENABLE();
 800971e:	4c27      	ldr	r4, [pc, #156]	; (80097bc <HAL_RCCEx_EnableLSCO+0xa4>)
 8009720:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009728:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LSCO_PIN;
 8009732:	2304      	movs	r3, #4
 8009734:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009736:	2303      	movs	r3, #3
 8009738:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800973a:	2302      	movs	r3, #2
 800973c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800973e:	2300      	movs	r3, #0
 8009740:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8009742:	a903      	add	r1, sp, #12
 8009744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009748:	f7fa f8d0 	bl	80038ec <HAL_GPIO_Init>
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800974c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800974e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8009752:	d11b      	bne.n	800978c <HAL_RCCEx_EnableLSCO+0x74>
    __HAL_RCC_PWR_CLK_ENABLE();
 8009754:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8009756:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800975a:	65a2      	str	r2, [r4, #88]	; 0x58
 800975c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800975e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009762:	9302      	str	r3, [sp, #8]
 8009764:	9b02      	ldr	r3, [sp, #8]
    pwrclkchanged = SET;
 8009766:	2401      	movs	r4, #1
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009768:	4b15      	ldr	r3, [pc, #84]	; (80097c0 <HAL_RCCEx_EnableLSCO+0xa8>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009770:	d00e      	beq.n	8009790 <HAL_RCCEx_EnableLSCO+0x78>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8009772:	4b12      	ldr	r3, [pc, #72]	; (80097bc <HAL_RCCEx_EnableLSCO+0xa4>)
 8009774:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009778:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800977c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8009780:	4328      	orrs	r0, r5
 8009782:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
  if(pwrclkchanged == SET)
 8009786:	b994      	cbnz	r4, 80097ae <HAL_RCCEx_EnableLSCO+0x96>
}
 8009788:	b009      	add	sp, #36	; 0x24
 800978a:	bd30      	pop	{r4, r5, pc}
  FlagStatus       pwrclkchanged = RESET;
 800978c:	2400      	movs	r4, #0
 800978e:	e7eb      	b.n	8009768 <HAL_RCCEx_EnableLSCO+0x50>
    HAL_PWR_EnableBkUpAccess();
 8009790:	f7fd fb96 	bl	8006ec0 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8009794:	4b09      	ldr	r3, [pc, #36]	; (80097bc <HAL_RCCEx_EnableLSCO+0xa4>)
 8009796:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800979a:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800979e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80097a2:	4328      	orrs	r0, r5
 80097a4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
    HAL_PWR_DisableBkUpAccess();
 80097a8:	f7fd fb92 	bl	8006ed0 <HAL_PWR_DisableBkUpAccess>
 80097ac:	e7eb      	b.n	8009786 <HAL_RCCEx_EnableLSCO+0x6e>
    __HAL_RCC_PWR_CLK_DISABLE();
 80097ae:	4a03      	ldr	r2, [pc, #12]	; (80097bc <HAL_RCCEx_EnableLSCO+0xa4>)
 80097b0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80097b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097b6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80097b8:	e7e6      	b.n	8009788 <HAL_RCCEx_EnableLSCO+0x70>
 80097ba:	bf00      	nop
 80097bc:	40021000 	.word	0x40021000
 80097c0:	40007000 	.word	0x40007000

080097c4 <HAL_RCCEx_DisableLSCO>:
{
 80097c4:	b510      	push	{r4, lr}
 80097c6:	b082      	sub	sp, #8
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097c8:	4b19      	ldr	r3, [pc, #100]	; (8009830 <HAL_RCCEx_DisableLSCO+0x6c>)
 80097ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097cc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80097d0:	d119      	bne.n	8009806 <HAL_RCCEx_DisableLSCO+0x42>
    __HAL_RCC_PWR_CLK_ENABLE();
 80097d2:	4b17      	ldr	r3, [pc, #92]	; (8009830 <HAL_RCCEx_DisableLSCO+0x6c>)
 80097d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80097da:	659a      	str	r2, [r3, #88]	; 0x58
 80097dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	9b01      	ldr	r3, [sp, #4]
    pwrclkchanged = SET;
 80097e6:	2401      	movs	r4, #1
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097e8:	4b12      	ldr	r3, [pc, #72]	; (8009834 <HAL_RCCEx_DisableLSCO+0x70>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80097f0:	d00b      	beq.n	800980a <HAL_RCCEx_DisableLSCO+0x46>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 80097f2:	4a0f      	ldr	r2, [pc, #60]	; (8009830 <HAL_RCCEx_DisableLSCO+0x6c>)
 80097f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80097f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if(pwrclkchanged == SET)
 8009800:	b97c      	cbnz	r4, 8009822 <HAL_RCCEx_DisableLSCO+0x5e>
}
 8009802:	b002      	add	sp, #8
 8009804:	bd10      	pop	{r4, pc}
  FlagStatus       pwrclkchanged = RESET;
 8009806:	2400      	movs	r4, #0
 8009808:	e7ee      	b.n	80097e8 <HAL_RCCEx_DisableLSCO+0x24>
    HAL_PWR_EnableBkUpAccess();
 800980a:	f7fd fb59 	bl	8006ec0 <HAL_PWR_EnableBkUpAccess>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 800980e:	4a08      	ldr	r2, [pc, #32]	; (8009830 <HAL_RCCEx_DisableLSCO+0x6c>)
 8009810:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    HAL_PWR_DisableBkUpAccess();
 800981c:	f7fd fb58 	bl	8006ed0 <HAL_PWR_DisableBkUpAccess>
 8009820:	e7ee      	b.n	8009800 <HAL_RCCEx_DisableLSCO+0x3c>
    __HAL_RCC_PWR_CLK_DISABLE();
 8009822:	4a03      	ldr	r2, [pc, #12]	; (8009830 <HAL_RCCEx_DisableLSCO+0x6c>)
 8009824:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800982a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800982c:	e7e9      	b.n	8009802 <HAL_RCCEx_DisableLSCO+0x3e>
 800982e:	bf00      	nop
 8009830:	40021000 	.word	0x40021000
 8009834:	40007000 	.word	0x40007000

08009838 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009838:	4a02      	ldr	r2, [pc, #8]	; (8009844 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800983a:	6813      	ldr	r3, [r2, #0]
 800983c:	f043 0304 	orr.w	r3, r3, #4
 8009840:	6013      	str	r3, [r2, #0]
}
 8009842:	4770      	bx	lr
 8009844:	40021000 	.word	0x40021000

08009848 <HAL_RCCEx_DisableMSIPLLMode>:
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009848:	4a02      	ldr	r2, [pc, #8]	; (8009854 <HAL_RCCEx_DisableMSIPLLMode+0xc>)
 800984a:	6813      	ldr	r3, [r2, #0]
 800984c:	f023 0304 	bic.w	r3, r3, #4
 8009850:	6013      	str	r3, [r2, #0]
}
 8009852:	4770      	bx	lr
 8009854:	40021000 	.word	0x40021000

08009858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	4607      	mov	r7, r0
 800985c:	460e      	mov	r6, r1
 800985e:	4615      	mov	r5, r2
 8009860:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	6893      	ldr	r3, [r2, #8]
 8009866:	ea36 0303 	bics.w	r3, r6, r3
 800986a:	bf0c      	ite	eq
 800986c:	2301      	moveq	r3, #1
 800986e:	2300      	movne	r3, #0
 8009870:	42ab      	cmp	r3, r5
 8009872:	d037      	beq.n	80098e4 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009874:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009878:	d0f4      	beq.n	8009864 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800987a:	f7f8 fc0b 	bl	8002094 <HAL_GetTick>
 800987e:	9b06      	ldr	r3, [sp, #24]
 8009880:	1ac0      	subs	r0, r0, r3
 8009882:	42a0      	cmp	r0, r4
 8009884:	d201      	bcs.n	800988a <SPI_WaitFlagStateUntilTimeout+0x32>
 8009886:	2c00      	cmp	r4, #0
 8009888:	d1eb      	bne.n	8009862 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	6853      	ldr	r3, [r2, #4]
 800988e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009892:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800989a:	d00b      	beq.n	80098b4 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a2:	d014      	beq.n	80098ce <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098aa:	2300      	movs	r3, #0
 80098ac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 80098b0:	2003      	movs	r0, #3
 80098b2:	e018      	b.n	80098e6 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098ba:	d002      	beq.n	80098c2 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098c0:	d1ec      	bne.n	800989c <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	6813      	ldr	r3, [r2, #0]
 80098c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	e7e6      	b.n	800989c <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	6813      	ldr	r3, [r2, #0]
 80098d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	6813      	ldr	r3, [r2, #0]
 80098dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	e7df      	b.n	80098a4 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80098e4:	2000      	movs	r0, #0
}
 80098e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ea:	4607      	mov	r7, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	4615      	mov	r5, r2
 80098f0:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	e002      	b.n	80098fc <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80098f6:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80098fa:	d10a      	bne.n	8009912 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 80098fc:	6893      	ldr	r3, [r2, #8]
 80098fe:	4023      	ands	r3, r4
 8009900:	42ab      	cmp	r3, r5
 8009902:	d03b      	beq.n	800997c <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009904:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8009908:	d1f5      	bne.n	80098f6 <SPI_WaitFifoStateUntilTimeout+0xe>
 800990a:	2d00      	cmp	r5, #0
 800990c:	d1f3      	bne.n	80098f6 <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800990e:	7b13      	ldrb	r3, [r2, #12]
 8009910:	e7f1      	b.n	80098f6 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009912:	f7f8 fbbf 	bl	8002094 <HAL_GetTick>
 8009916:	9b06      	ldr	r3, [sp, #24]
 8009918:	1ac0      	subs	r0, r0, r3
 800991a:	42b0      	cmp	r0, r6
 800991c:	d201      	bcs.n	8009922 <SPI_WaitFifoStateUntilTimeout+0x3a>
 800991e:	2e00      	cmp	r6, #0
 8009920:	d1e7      	bne.n	80098f2 <SPI_WaitFifoStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	6853      	ldr	r3, [r2, #4]
 8009926:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800992a:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009932:	d00b      	beq.n	800994c <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800993a:	d014      	beq.n	8009966 <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800993c:	2301      	movs	r3, #1
 800993e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009942:	2300      	movs	r3, #0
 8009944:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009948:	2003      	movs	r0, #3
 800994a:	e018      	b.n	800997e <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009952:	d002      	beq.n	800995a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009958:	d1ec      	bne.n	8009934 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	6813      	ldr	r3, [r2, #0]
 800995e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	e7e6      	b.n	8009934 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	6813      	ldr	r3, [r2, #0]
 800996a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	6813      	ldr	r3, [r2, #0]
 8009974:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	e7df      	b.n	800993c <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 800997c:	2000      	movs	r0, #0
}
 800997e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	4604      	mov	r4, r0
 8009986:	460d      	mov	r5, r1
 8009988:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800998a:	9200      	str	r2, [sp, #0]
 800998c:	460b      	mov	r3, r1
 800998e:	2200      	movs	r2, #0
 8009990:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009994:	f7ff ffa8 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 8009998:	b9b8      	cbnz	r0, 80099ca <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800999a:	9600      	str	r6, [sp, #0]
 800999c:	462b      	mov	r3, r5
 800999e:	2200      	movs	r2, #0
 80099a0:	2180      	movs	r1, #128	; 0x80
 80099a2:	4620      	mov	r0, r4
 80099a4:	f7ff ff58 	bl	8009858 <SPI_WaitFlagStateUntilTimeout>
 80099a8:	b9b8      	cbnz	r0, 80099da <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099aa:	9600      	str	r6, [sp, #0]
 80099ac:	462b      	mov	r3, r5
 80099ae:	2200      	movs	r2, #0
 80099b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80099b4:	4620      	mov	r0, r4
 80099b6:	f7ff ff97 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 80099ba:	4603      	mov	r3, r0
 80099bc:	b150      	cbz	r0, 80099d4 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80099c0:	f043 0320 	orr.w	r3, r3, #32
 80099c4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80099c6:	2303      	movs	r3, #3
 80099c8:	e004      	b.n	80099d4 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80099cc:	f043 0320 	orr.w	r3, r3, #32
 80099d0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	b002      	add	sp, #8
 80099d8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80099dc:	f043 0320 	orr.w	r3, r3, #32
 80099e0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e7f6      	b.n	80099d4 <SPI_EndRxTxTransaction+0x54>

080099e6 <SPI_EndRxTransaction>:
{
 80099e6:	b570      	push	{r4, r5, r6, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	4604      	mov	r4, r0
 80099ec:	460d      	mov	r5, r1
 80099ee:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099f0:	6843      	ldr	r3, [r0, #4]
 80099f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f6:	d00f      	beq.n	8009a18 <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099f8:	9600      	str	r6, [sp, #0]
 80099fa:	462b      	mov	r3, r5
 80099fc:	2200      	movs	r2, #0
 80099fe:	2180      	movs	r1, #128	; 0x80
 8009a00:	4620      	mov	r0, r4
 8009a02:	f7ff ff29 	bl	8009858 <SPI_WaitFlagStateUntilTimeout>
 8009a06:	4603      	mov	r3, r0
 8009a08:	b998      	cbnz	r0, 8009a32 <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a0a:	6862      	ldr	r2, [r4, #4]
 8009a0c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009a10:	d015      	beq.n	8009a3e <SPI_EndRxTransaction+0x58>
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	b002      	add	sp, #8
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a18:	6883      	ldr	r3, [r0, #8]
 8009a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a1e:	d002      	beq.n	8009a26 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a24:	d1e8      	bne.n	80099f8 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	6813      	ldr	r3, [r2, #0]
 8009a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	e7e2      	b.n	80099f8 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a32:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009a34:	f043 0320 	orr.w	r3, r3, #32
 8009a38:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e7e9      	b.n	8009a12 <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a3e:	68a2      	ldr	r2, [r4, #8]
 8009a40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009a44:	d002      	beq.n	8009a4c <SPI_EndRxTransaction+0x66>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009a4a:	d1e2      	bne.n	8009a12 <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a4c:	9600      	str	r6, [sp, #0]
 8009a4e:	462b      	mov	r3, r5
 8009a50:	2200      	movs	r2, #0
 8009a52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7ff ff46 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d0d7      	beq.n	8009a12 <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a62:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009a64:	f043 0320 	orr.w	r3, r3, #32
 8009a68:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e7d1      	b.n	8009a12 <SPI_EndRxTransaction+0x2c>
	...

08009a70 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009a70:	b510      	push	{r4, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	4604      	mov	r4, r0
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a76:	6802      	ldr	r2, [r0, #0]
 8009a78:	6813      	ldr	r3, [r2, #0]
 8009a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a7e:	6013      	str	r3, [r2, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009a80:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <SPI_AbortRx_ISR+0x88>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a1d      	ldr	r2, [pc, #116]	; (8009afc <SPI_AbortRx_ISR+0x8c>)
 8009a86:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8a:	0a5b      	lsrs	r3, r3, #9
 8009a8c:	2264      	movs	r2, #100	; 0x64
 8009a8e:	fb02 f303 	mul.w	r3, r2, r3
 8009a92:	9303      	str	r3, [sp, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009a94:	6802      	ldr	r2, [r0, #0]
 8009a96:	6853      	ldr	r3, [r2, #4]
 8009a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a9c:	6053      	str	r3, [r2, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	b143      	cbz	r3, 8009ab4 <SPI_AbortRx_ISR+0x44>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
      break;
    }
    count--;
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	9303      	str	r3, [sp, #12]
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ab0:	d1f5      	bne.n	8009a9e <SPI_AbortRx_ISR+0x2e>
 8009ab2:	e003      	b.n	8009abc <SPI_AbortRx_ISR+0x4c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ab4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aba:	6623      	str	r3, [r4, #96]	; 0x60

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009abc:	f7f8 faea 	bl	8002094 <HAL_GetTick>
 8009ac0:	9000      	str	r0, [sp, #0]
 8009ac2:	2364      	movs	r3, #100	; 0x64
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2180      	movs	r1, #128	; 0x80
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f7ff fec5 	bl	8009858 <SPI_WaitFlagStateUntilTimeout>
 8009ace:	b108      	cbz	r0, 8009ad4 <SPI_AbortRx_ISR+0x64>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009ad0:	2340      	movs	r3, #64	; 0x40
 8009ad2:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009ad4:	f7f8 fade 	bl	8002094 <HAL_GetTick>
 8009ad8:	9000      	str	r0, [sp, #0]
 8009ada:	2364      	movs	r3, #100	; 0x64
 8009adc:	2200      	movs	r2, #0
 8009ade:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f7ff ff00 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 8009ae8:	b108      	cbz	r0, 8009aee <SPI_AbortRx_ISR+0x7e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009aea:	2340      	movs	r3, #64	; 0x40
 8009aec:	6623      	str	r3, [r4, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8009aee:	2307      	movs	r3, #7
 8009af0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8009af4:	b004      	add	sp, #16
 8009af6:	bd10      	pop	{r4, pc}
 8009af8:	20000008 	.word	0x20000008
 8009afc:	057619f1 	.word	0x057619f1

08009b00 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009b00:	b510      	push	{r4, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	4604      	mov	r4, r0
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009b06:	4b38      	ldr	r3, [pc, #224]	; (8009be8 <SPI_AbortTx_ISR+0xe8>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a38      	ldr	r2, [pc, #224]	; (8009bec <SPI_AbortTx_ISR+0xec>)
 8009b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b10:	0a5b      	lsrs	r3, r3, #9
 8009b12:	2264      	movs	r2, #100	; 0x64
 8009b14:	fb02 f303 	mul.w	r3, r2, r3
 8009b18:	9303      	str	r3, [sp, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8009b1a:	6802      	ldr	r2, [r0, #0]
 8009b1c:	6853      	ldr	r3, [r2, #4]
 8009b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b22:	6053      	str	r3, [r2, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	b143      	cbz	r3, 8009b3a <SPI_AbortTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
      break;
    }
    count--;
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	9303      	str	r3, [sp, #12]
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b36:	d1f5      	bne.n	8009b24 <SPI_AbortTx_ISR+0x24>
 8009b38:	e003      	b.n	8009b42 <SPI_AbortTx_ISR+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b3a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b40:	6623      	str	r3, [r4, #96]	; 0x60

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009b42:	f7f8 faa7 	bl	8002094 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	2164      	movs	r1, #100	; 0x64
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f7ff ff18 	bl	8009980 <SPI_EndRxTxTransaction>
 8009b50:	b108      	cbz	r0, 8009b56 <SPI_AbortTx_ISR+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009b52:	2340      	movs	r3, #64	; 0x40
 8009b54:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b56:	6822      	ldr	r2, [r4, #0]
 8009b58:	6813      	ldr	r3, [r2, #0]
 8009b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b5e:	6013      	str	r3, [r2, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009b60:	f7f8 fa98 	bl	8002094 <HAL_GetTick>
 8009b64:	9000      	str	r0, [sp, #0]
 8009b66:	2364      	movs	r3, #100	; 0x64
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f7ff feba 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 8009b74:	b108      	cbz	r0, 8009b7a <SPI_AbortTx_ISR+0x7a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009b76:	2340      	movs	r3, #64	; 0x40
 8009b78:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009b82:	d02b      	beq.n	8009bdc <SPI_AbortTx_ISR+0xdc>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b8a:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	b143      	cbz	r3, 8009ba2 <SPI_AbortTx_ISR+0xa2>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
        break;
      }
      count--;
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	9303      	str	r3, [sp, #12]
    }
    while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b9e:	d1f5      	bne.n	8009b8c <SPI_AbortTx_ISR+0x8c>
 8009ba0:	e003      	b.n	8009baa <SPI_AbortTx_ISR+0xaa>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ba2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ba8:	6623      	str	r3, [r4, #96]	; 0x60

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009baa:	f7f8 fa73 	bl	8002094 <HAL_GetTick>
 8009bae:	9000      	str	r0, [sp, #0]
 8009bb0:	2364      	movs	r3, #100	; 0x64
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2180      	movs	r1, #128	; 0x80
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f7ff fe4e 	bl	8009858 <SPI_WaitFlagStateUntilTimeout>
 8009bbc:	b108      	cbz	r0, 8009bc2 <SPI_AbortTx_ISR+0xc2>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009bbe:	2340      	movs	r3, #64	; 0x40
 8009bc0:	6623      	str	r3, [r4, #96]	; 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009bc2:	f7f8 fa67 	bl	8002094 <HAL_GetTick>
 8009bc6:	9000      	str	r0, [sp, #0]
 8009bc8:	2364      	movs	r3, #100	; 0x64
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7ff fe89 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 8009bd6:	b108      	cbz	r0, 8009bdc <SPI_AbortTx_ISR+0xdc>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009bd8:	2340      	movs	r3, #64	; 0x40
 8009bda:	6623      	str	r3, [r4, #96]	; 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 8009bdc:	2307      	movs	r3, #7
 8009bde:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8009be2:	b004      	add	sp, #16
 8009be4:	bd10      	pop	{r4, pc}
 8009be6:	bf00      	nop
 8009be8:	20000008 	.word	0x20000008
 8009bec:	057619f1 	.word	0x057619f1
}
 8009bf0:	4770      	bx	lr

08009bf2 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d052      	beq.n	8009c9c <HAL_SPI_Init+0xaa>
{
 8009bf6:	b510      	push	{r4, lr}
 8009bf8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bfe:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8009c02:	b1bb      	cbz	r3, 8009c34 <HAL_SPI_Init+0x42>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009c04:	2302      	movs	r3, #2
 8009c06:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8009c0a:	6822      	ldr	r2, [r4, #0]
 8009c0c:	6813      	ldr	r3, [r2, #0]
 8009c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c12:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c14:	68e3      	ldr	r3, [r4, #12]
 8009c16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c1a:	d841      	bhi.n	8009ca0 <HAL_SPI_Init+0xae>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c1c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009c20:	d04d      	beq.n	8009cbe <HAL_SPI_Init+0xcc>
 8009c22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c26:	d10a      	bne.n	8009c3e <HAL_SPI_Init+0x4c>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009c28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d033      	beq.n	8009c96 <HAL_SPI_Init+0xa4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c32:	e00b      	b.n	8009c4c <HAL_SPI_Init+0x5a>
    hspi->Lock = HAL_UNLOCKED;
 8009c34:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8009c38:	f7f7 ff10 	bl	8001a5c <HAL_SPI_MspInit>
 8009c3c:	e7e2      	b.n	8009c04 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c42:	e031      	b.n	8009ca8 <HAL_SPI_Init+0xb6>
 8009c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009c4c:	6822      	ldr	r2, [r4, #0]
 8009c4e:	6863      	ldr	r3, [r4, #4]
 8009c50:	68a0      	ldr	r0, [r4, #8]
 8009c52:	4303      	orrs	r3, r0
 8009c54:	6920      	ldr	r0, [r4, #16]
 8009c56:	4303      	orrs	r3, r0
 8009c58:	6960      	ldr	r0, [r4, #20]
 8009c5a:	4303      	orrs	r3, r0
 8009c5c:	69e0      	ldr	r0, [r4, #28]
 8009c5e:	4303      	orrs	r3, r0
 8009c60:	6a20      	ldr	r0, [r4, #32]
 8009c62:	4303      	orrs	r3, r0
 8009c64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009c66:	4303      	orrs	r3, r0
 8009c68:	69a0      	ldr	r0, [r4, #24]
 8009c6a:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8009c6e:	4303      	orrs	r3, r0
 8009c70:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009c72:	6822      	ldr	r2, [r4, #0]
 8009c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c76:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009c78:	4303      	orrs	r3, r0
 8009c7a:	68e0      	ldr	r0, [r4, #12]
 8009c7c:	4303      	orrs	r3, r0
 8009c7e:	8b60      	ldrh	r0, [r4, #26]
 8009c80:	f000 0004 	and.w	r0, r0, #4
 8009c84:	4303      	orrs	r3, r0
 8009c86:	430b      	orrs	r3, r1
 8009c88:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8009c94:	bd10      	pop	{r4, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c9a:	e00d      	b.n	8009cb8 <HAL_SPI_Init+0xc6>
    return HAL_ERROR;
 8009c9c:	2001      	movs	r0, #1
}
 8009c9e:	4770      	bx	lr
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ca0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009ca4:	d011      	beq.n	8009cca <HAL_SPI_Init+0xd8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009ca6:	2100      	movs	r1, #0
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ca8:	2200      	movs	r2, #0
 8009caa:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009cac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009cae:	2a00      	cmp	r2, #0
 8009cb0:	d1cc      	bne.n	8009c4c <HAL_SPI_Init+0x5a>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cb6:	d8c7      	bhi.n	8009c48 <HAL_SPI_Init+0x56>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	6323      	str	r3, [r4, #48]	; 0x30
 8009cbc:	e7c6      	b.n	8009c4c <HAL_SPI_Init+0x5a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009cbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d0bf      	beq.n	8009c44 <HAL_SPI_Init+0x52>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009cc8:	e7c0      	b.n	8009c4c <HAL_SPI_Init+0x5a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009cca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009ccc:	2900      	cmp	r1, #0
 8009cce:	d0bb      	beq.n	8009c48 <HAL_SPI_Init+0x56>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	e7bb      	b.n	8009c4c <HAL_SPI_Init+0x5a>
}
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8009cd6:	b190      	cbz	r0, 8009cfe <HAL_SPI_DeInit+0x28>
{
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 8009cdc:	2302      	movs	r3, #2
 8009cde:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8009ce2:	6802      	ldr	r2, [r0, #0]
 8009ce4:	6813      	ldr	r3, [r2, #0]
 8009ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cea:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8009cec:	f7f7 ff02 	bl	8001af4 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8009cf4:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009cf8:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
}
 8009cfc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009cfe:	2001      	movs	r0, #1
}
 8009d00:	4770      	bx	lr

08009d02 <HAL_SPI_Transmit>:
{
 8009d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d06:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8009d08:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8009d0c:	2c01      	cmp	r4, #1
 8009d0e:	f000 80e3 	beq.w	8009ed8 <HAL_SPI_Transmit+0x1d6>
 8009d12:	461e      	mov	r6, r3
 8009d14:	4615      	mov	r5, r2
 8009d16:	4688      	mov	r8, r1
 8009d18:	4604      	mov	r4, r0
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8009d20:	f7f8 f9b8 	bl	8002094 <HAL_GetTick>
 8009d24:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8009d26:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8009d2a:	b2d2      	uxtb	r2, r2
 8009d2c:	2a01      	cmp	r2, #1
 8009d2e:	d009      	beq.n	8009d44 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8009d30:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009d32:	2301      	movs	r3, #1
 8009d34:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8009d3e:	b002      	add	sp, #8
 8009d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8009d44:	f1b8 0f00 	cmp.w	r8, #0
 8009d48:	f000 80c0 	beq.w	8009ecc <HAL_SPI_Transmit+0x1ca>
 8009d4c:	2d00      	cmp	r5, #0
 8009d4e:	f000 80bf 	beq.w	8009ed0 <HAL_SPI_Transmit+0x1ce>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d52:	2303      	movs	r3, #3
 8009d54:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009d5c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009d60:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009d62:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009d64:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009d66:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009d6a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009d6e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009d70:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d78:	d01c      	beq.n	8009db4 <HAL_SPI_Transmit+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009d82:	d103      	bne.n	8009d8c <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d8a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d8c:	68e3      	ldr	r3, [r4, #12]
 8009d8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d92:	d936      	bls.n	8009e02 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d94:	6863      	ldr	r3, [r4, #4]
 8009d96:	b10b      	cbz	r3, 8009d9c <HAL_SPI_Transmit+0x9a>
 8009d98:	2d01      	cmp	r5, #1
 8009d9a:	d11a      	bne.n	8009dd2 <HAL_SPI_Transmit+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009da0:	8812      	ldrh	r2, [r2, #0]
 8009da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009da4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009da6:	3302      	adds	r3, #2
 8009da8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009daa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009dac:	3b01      	subs	r3, #1
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009db2:	e00e      	b.n	8009dd2 <HAL_SPI_Transmit+0xd0>
    SPI_1LINE_TX(hspi);
 8009db4:	6822      	ldr	r2, [r4, #0]
 8009db6:	6813      	ldr	r3, [r2, #0]
 8009db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	e7dc      	b.n	8009d7a <HAL_SPI_Transmit+0x78>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dc0:	f7f8 f968 	bl	8002094 <HAL_GetTick>
 8009dc4:	1bc0      	subs	r0, r0, r7
 8009dc6:	42b0      	cmp	r0, r6
 8009dc8:	d317      	bcc.n	8009dfa <HAL_SPI_Transmit+0xf8>
 8009dca:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8009dce:	f040 8081 	bne.w	8009ed4 <HAL_SPI_Transmit+0x1d2>
    while (hspi->TxXferCount > 0U)
 8009dd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d062      	beq.n	8009ea0 <HAL_SPI_Transmit+0x19e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	689a      	ldr	r2, [r3, #8]
 8009dde:	f012 0f02 	tst.w	r2, #2
 8009de2:	d0ed      	beq.n	8009dc0 <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009de4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009de6:	8812      	ldrh	r2, [r2, #0]
 8009de8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009dec:	3302      	adds	r3, #2
 8009dee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009df0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009df2:	3b01      	subs	r3, #1
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009df8:	e7eb      	b.n	8009dd2 <HAL_SPI_Transmit+0xd0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dfa:	2e00      	cmp	r6, #0
 8009dfc:	d1e9      	bne.n	8009dd2 <HAL_SPI_Transmit+0xd0>
          errorcode = HAL_TIMEOUT;
 8009dfe:	2003      	movs	r0, #3
 8009e00:	e797      	b.n	8009d32 <HAL_SPI_Transmit+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e02:	6863      	ldr	r3, [r4, #4]
 8009e04:	b10b      	cbz	r3, 8009e0a <HAL_SPI_Transmit+0x108>
 8009e06:	2d01      	cmp	r5, #1
 8009e08:	d125      	bne.n	8009e56 <HAL_SPI_Transmit+0x154>
      if (hspi->TxXferCount > 1U)
 8009e0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d90b      	bls.n	8009e2a <HAL_SPI_Transmit+0x128>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e16:	8812      	ldrh	r2, [r2, #0]
 8009e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e1c:	3302      	adds	r3, #2
 8009e1e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009e20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e22:	3b02      	subs	r3, #2
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009e28:	e015      	b.n	8009e56 <HAL_SPI_Transmit+0x154>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e2e:	7812      	ldrb	r2, [r2, #0]
 8009e30:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8009e32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e34:	3301      	adds	r3, #1
 8009e36:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009e38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009e40:	e009      	b.n	8009e56 <HAL_SPI_Transmit+0x154>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8009e48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8009e4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e50:	3b01      	subs	r3, #1
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8009e56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	b30b      	cbz	r3, 8009ea0 <HAL_SPI_Transmit+0x19e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	6893      	ldr	r3, [r2, #8]
 8009e60:	f013 0f02 	tst.w	r3, #2
 8009e64:	d00e      	beq.n	8009e84 <HAL_SPI_Transmit+0x182>
        if (hspi->TxXferCount > 1U)
 8009e66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d9e9      	bls.n	8009e42 <HAL_SPI_Transmit+0x140>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e76:	3302      	adds	r3, #2
 8009e78:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009e7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e7c:	3b02      	subs	r3, #2
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009e82:	e7e8      	b.n	8009e56 <HAL_SPI_Transmit+0x154>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e84:	f7f8 f906 	bl	8002094 <HAL_GetTick>
 8009e88:	1bc0      	subs	r0, r0, r7
 8009e8a:	42b0      	cmp	r0, r6
 8009e8c:	d304      	bcc.n	8009e98 <HAL_SPI_Transmit+0x196>
 8009e8e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8009e92:	d0e0      	beq.n	8009e56 <HAL_SPI_Transmit+0x154>
          errorcode = HAL_TIMEOUT;
 8009e94:	2003      	movs	r0, #3
 8009e96:	e74c      	b.n	8009d32 <HAL_SPI_Transmit+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e98:	2e00      	cmp	r6, #0
 8009e9a:	d1dc      	bne.n	8009e56 <HAL_SPI_Transmit+0x154>
          errorcode = HAL_TIMEOUT;
 8009e9c:	2003      	movs	r0, #3
 8009e9e:	e748      	b.n	8009d32 <HAL_SPI_Transmit+0x30>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ea0:	463a      	mov	r2, r7
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f7ff fd6b 	bl	8009980 <SPI_EndRxTxTransaction>
 8009eaa:	b108      	cbz	r0, 8009eb0 <HAL_SPI_Transmit+0x1ae>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009eac:	2320      	movs	r3, #32
 8009eae:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009eb0:	68a3      	ldr	r3, [r4, #8]
 8009eb2:	b933      	cbnz	r3, 8009ec2 <HAL_SPI_Transmit+0x1c0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	68da      	ldr	r2, [r3, #12]
 8009eba:	9201      	str	r2, [sp, #4]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ec2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8009ec4:	3000      	adds	r0, #0
 8009ec6:	bf18      	it	ne
 8009ec8:	2001      	movne	r0, #1
error:
 8009eca:	e732      	b.n	8009d32 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8009ecc:	2001      	movs	r0, #1
 8009ece:	e730      	b.n	8009d32 <HAL_SPI_Transmit+0x30>
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	e72e      	b.n	8009d32 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8009ed4:	2003      	movs	r0, #3
 8009ed6:	e72c      	b.n	8009d32 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8009ed8:	2002      	movs	r0, #2
 8009eda:	e730      	b.n	8009d3e <HAL_SPI_Transmit+0x3c>

08009edc <HAL_SPI_TransmitReceive>:
{
 8009edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8009ee4:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8009ee8:	2c01      	cmp	r4, #1
 8009eea:	f000 8161 	beq.w	800a1b0 <HAL_SPI_TransmitReceive+0x2d4>
 8009eee:	461d      	mov	r5, r3
 8009ef0:	4617      	mov	r7, r2
 8009ef2:	460e      	mov	r6, r1
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8009efc:	f7f8 f8ca 	bl	8002094 <HAL_GetTick>
 8009f00:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8009f02:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8009f06:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f08:	2801      	cmp	r0, #1
 8009f0a:	d015      	beq.n	8009f38 <HAL_SPI_TransmitReceive+0x5c>
 8009f0c:	6863      	ldr	r3, [r4, #4]
 8009f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f12:	d009      	beq.n	8009f28 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8009f14:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009f16:	2201      	movs	r2, #1
 8009f18:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f28:	68a3      	ldr	r3, [r4, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f040 8134 	bne.w	800a198 <HAL_SPI_TransmitReceive+0x2bc>
 8009f30:	2804      	cmp	r0, #4
 8009f32:	d001      	beq.n	8009f38 <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 8009f34:	2302      	movs	r3, #2
 8009f36:	e7ee      	b.n	8009f16 <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f38:	2e00      	cmp	r6, #0
 8009f3a:	f000 812f 	beq.w	800a19c <HAL_SPI_TransmitReceive+0x2c0>
 8009f3e:	2f00      	cmp	r7, #0
 8009f40:	f000 812e 	beq.w	800a1a0 <HAL_SPI_TransmitReceive+0x2c4>
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	f000 812d 	beq.w	800a1a4 <HAL_SPI_TransmitReceive+0x2c8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f4a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f52:	bf1c      	itt	ne
 8009f54:	2305      	movne	r3, #5
 8009f56:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f5e:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009f60:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009f64:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f68:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009f6a:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009f6c:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8009f6e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009f70:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009f72:	68e3      	ldr	r3, [r4, #12]
 8009f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f78:	d801      	bhi.n	8009f7e <HAL_SPI_TransmitReceive+0xa2>
 8009f7a:	2d01      	cmp	r5, #1
 8009f7c:	d924      	bls.n	8009fc8 <HAL_SPI_TransmitReceive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f7e:	6822      	ldr	r2, [r4, #0]
 8009f80:	6853      	ldr	r3, [r2, #4]
 8009f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f86:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009f90:	d103      	bne.n	8009f9a <HAL_SPI_TransmitReceive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f98:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f9a:	68e3      	ldr	r3, [r4, #12]
 8009f9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fa0:	d958      	bls.n	800a054 <HAL_SPI_TransmitReceive+0x178>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fa2:	6863      	ldr	r3, [r4, #4]
 8009fa4:	b10b      	cbz	r3, 8009faa <HAL_SPI_TransmitReceive+0xce>
 8009fa6:	2d01      	cmp	r5, #1
 8009fa8:	d10a      	bne.n	8009fc0 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009fae:	8812      	ldrh	r2, [r2, #0]
 8009fb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009fb4:	3302      	adds	r3, #2
 8009fb6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009fb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009fc0:	2501      	movs	r5, #1
        txallowed = 0U;
 8009fc2:	2700      	movs	r7, #0
        txallowed = 1U;
 8009fc4:	462e      	mov	r6, r5
 8009fc6:	e025      	b.n	800a014 <HAL_SPI_TransmitReceive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fc8:	6822      	ldr	r2, [r4, #0]
 8009fca:	6853      	ldr	r3, [r2, #4]
 8009fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fd0:	6053      	str	r3, [r2, #4]
 8009fd2:	e7d9      	b.n	8009f88 <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	689a      	ldr	r2, [r3, #8]
 8009fd8:	f012 0f01 	tst.w	r2, #1
 8009fdc:	d010      	beq.n	800a000 <HAL_SPI_TransmitReceive+0x124>
 8009fde:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8009fe2:	b292      	uxth	r2, r2
 8009fe4:	b162      	cbz	r2, 800a000 <HAL_SPI_TransmitReceive+0x124>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fee:	3302      	adds	r3, #2
 8009ff0:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009ff2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8009ffe:	4635      	mov	r5, r6
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a000:	f7f8 f848 	bl	8002094 <HAL_GetTick>
 800a004:	eba0 0009 	sub.w	r0, r0, r9
 800a008:	4540      	cmp	r0, r8
 800a00a:	d303      	bcc.n	800a014 <HAL_SPI_TransmitReceive+0x138>
 800a00c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a010:	f040 80ca 	bne.w	800a1a8 <HAL_SPI_TransmitReceive+0x2cc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a014:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a016:	b29b      	uxth	r3, r3
 800a018:	b92b      	cbnz	r3, 800a026 <HAL_SPI_TransmitReceive+0x14a>
 800a01a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a01e:	b29b      	uxth	r3, r3
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 80ac 	beq.w	800a17e <HAL_SPI_TransmitReceive+0x2a2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	f012 0f02 	tst.w	r2, #2
 800a02e:	d0d1      	beq.n	8009fd4 <HAL_SPI_TransmitReceive+0xf8>
 800a030:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a032:	b292      	uxth	r2, r2
 800a034:	2a00      	cmp	r2, #0
 800a036:	d0cd      	beq.n	8009fd4 <HAL_SPI_TransmitReceive+0xf8>
 800a038:	2d00      	cmp	r5, #0
 800a03a:	d0cb      	beq.n	8009fd4 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a03c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a03e:	8812      	ldrh	r2, [r2, #0]
 800a040:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a044:	3302      	adds	r3, #2
 800a046:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a048:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a04a:	3b01      	subs	r3, #1
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800a050:	463d      	mov	r5, r7
 800a052:	e7bf      	b.n	8009fd4 <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	b10b      	cbz	r3, 800a05c <HAL_SPI_TransmitReceive+0x180>
 800a058:	2d01      	cmp	r5, #1
 800a05a:	d10e      	bne.n	800a07a <HAL_SPI_TransmitReceive+0x19e>
      if (hspi->TxXferCount > 1U)
 800a05c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a05e:	b29b      	uxth	r3, r3
 800a060:	2b01      	cmp	r3, #1
 800a062:	d90e      	bls.n	800a082 <HAL_SPI_TransmitReceive+0x1a6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a068:	8812      	ldrh	r2, [r2, #0]
 800a06a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a06c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a06e:	3302      	adds	r3, #2
 800a070:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a072:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a074:	3b02      	subs	r3, #2
 800a076:	b29b      	uxth	r3, r3
 800a078:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a07a:	2501      	movs	r5, #1
        txallowed = 0U;
 800a07c:	2700      	movs	r7, #0
        txallowed = 1U;
 800a07e:	462e      	mov	r6, r5
 800a080:	e044      	b.n	800a10c <HAL_SPI_TransmitReceive+0x230>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a086:	7812      	ldrb	r2, [r2, #0]
 800a088:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800a08a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a08c:	3301      	adds	r3, #1
 800a08e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a090:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a092:	3b01      	subs	r3, #1
 800a094:	b29b      	uxth	r3, r3
 800a096:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a098:	e7ef      	b.n	800a07a <HAL_SPI_TransmitReceive+0x19e>
        if (hspi->TxXferCount > 1U)
 800a09a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a09c:	b292      	uxth	r2, r2
 800a09e:	2a01      	cmp	r2, #1
 800a0a0:	d90b      	bls.n	800a0ba <HAL_SPI_TransmitReceive+0x1de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a0a4:	8812      	ldrh	r2, [r2, #0]
 800a0a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0aa:	3302      	adds	r3, #2
 800a0ac:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a0ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a0b0:	3b02      	subs	r3, #2
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800a0b6:	463d      	mov	r5, r7
 800a0b8:	e03a      	b.n	800a130 <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a0bc:	7812      	ldrb	r2, [r2, #0]
 800a0be:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800a0c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800a0c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800a0ce:	463d      	mov	r5, r7
 800a0d0:	e02e      	b.n	800a130 <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0d2:	6822      	ldr	r2, [r4, #0]
 800a0d4:	6853      	ldr	r3, [r2, #4]
 800a0d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0da:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800a0dc:	4635      	mov	r5, r6
 800a0de:	e00c      	b.n	800a0fa <HAL_SPI_TransmitReceive+0x21e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a0e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a0e2:	7b1b      	ldrb	r3, [r3, #12]
 800a0e4:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800a0e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800a0ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800a0f8:	4635      	mov	r5, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a0fa:	f7f7 ffcb 	bl	8002094 <HAL_GetTick>
 800a0fe:	eba0 0009 	sub.w	r0, r0, r9
 800a102:	4540      	cmp	r0, r8
 800a104:	d336      	bcc.n	800a174 <HAL_SPI_TransmitReceive+0x298>
 800a106:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a10a:	d14f      	bne.n	800a1ac <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a10c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a10e:	b29b      	uxth	r3, r3
 800a110:	b923      	cbnz	r3, 800a11c <HAL_SPI_TransmitReceive+0x240>
 800a112:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a116:	b29b      	uxth	r3, r3
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d030      	beq.n	800a17e <HAL_SPI_TransmitReceive+0x2a2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	689a      	ldr	r2, [r3, #8]
 800a120:	f012 0f02 	tst.w	r2, #2
 800a124:	d004      	beq.n	800a130 <HAL_SPI_TransmitReceive+0x254>
 800a126:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a128:	b292      	uxth	r2, r2
 800a12a:	b10a      	cbz	r2, 800a130 <HAL_SPI_TransmitReceive+0x254>
 800a12c:	2d01      	cmp	r5, #1
 800a12e:	d0b4      	beq.n	800a09a <HAL_SPI_TransmitReceive+0x1be>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	f012 0f01 	tst.w	r2, #1
 800a138:	d0df      	beq.n	800a0fa <HAL_SPI_TransmitReceive+0x21e>
 800a13a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800a13e:	b292      	uxth	r2, r2
 800a140:	2a00      	cmp	r2, #0
 800a142:	d0da      	beq.n	800a0fa <HAL_SPI_TransmitReceive+0x21e>
        if (hspi->RxXferCount > 1U)
 800a144:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800a148:	b292      	uxth	r2, r2
 800a14a:	2a01      	cmp	r2, #1
 800a14c:	d9c8      	bls.n	800a0e0 <HAL_SPI_TransmitReceive+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a14e:	68da      	ldr	r2, [r3, #12]
 800a150:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a152:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a156:	3302      	adds	r3, #2
 800a158:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a15a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a15e:	3b02      	subs	r3, #2
 800a160:	b29b      	uxth	r3, r3
 800a162:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a166:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d9b0      	bls.n	800a0d2 <HAL_SPI_TransmitReceive+0x1f6>
        txallowed = 1U;
 800a170:	4635      	mov	r5, r6
 800a172:	e7c2      	b.n	800a0fa <HAL_SPI_TransmitReceive+0x21e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a174:	f1b8 0f00 	cmp.w	r8, #0
 800a178:	d1c8      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x230>
        errorcode = HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e6cb      	b.n	8009f16 <HAL_SPI_TransmitReceive+0x3a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a17e:	464a      	mov	r2, r9
 800a180:	4641      	mov	r1, r8
 800a182:	4620      	mov	r0, r4
 800a184:	f7ff fbfc 	bl	8009980 <SPI_EndRxTxTransaction>
 800a188:	4603      	mov	r3, r0
 800a18a:	2800      	cmp	r0, #0
 800a18c:	f43f aec3 	beq.w	8009f16 <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a190:	2320      	movs	r3, #32
 800a192:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e6be      	b.n	8009f16 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 800a198:	2302      	movs	r3, #2
 800a19a:	e6bc      	b.n	8009f16 <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e6ba      	b.n	8009f16 <HAL_SPI_TransmitReceive+0x3a>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e6b8      	b.n	8009f16 <HAL_SPI_TransmitReceive+0x3a>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e6b6      	b.n	8009f16 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e6b4      	b.n	8009f16 <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e6b2      	b.n	8009f16 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e6b6      	b.n	8009f22 <HAL_SPI_TransmitReceive+0x46>

0800a1b4 <HAL_SPI_Receive>:
{
 800a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	460f      	mov	r7, r1
 800a1be:	4690      	mov	r8, r2
 800a1c0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a1c2:	6843      	ldr	r3, [r0, #4]
 800a1c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1c8:	d019      	beq.n	800a1fe <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800a1ca:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	f000 80b4 	beq.w	800a33c <HAL_SPI_Receive+0x188>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800a1da:	f7f7 ff5b 	bl	8002094 <HAL_GetTick>
 800a1de:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a1e0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d015      	beq.n	800a216 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800a1ea:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800a1f8:	b002      	add	sp, #8
 800a1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a1fe:	6883      	ldr	r3, [r0, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1e2      	bne.n	800a1ca <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a204:	2304      	movs	r3, #4
 800a206:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a20a:	9500      	str	r5, [sp, #0]
 800a20c:	4613      	mov	r3, r2
 800a20e:	460a      	mov	r2, r1
 800a210:	f7ff fe64 	bl	8009edc <HAL_SPI_TransmitReceive>
 800a214:	e7f0      	b.n	800a1f8 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 800a216:	2f00      	cmp	r7, #0
 800a218:	f000 8088 	beq.w	800a32c <HAL_SPI_Receive+0x178>
 800a21c:	f1b8 0f00 	cmp.w	r8, #0
 800a220:	f000 8086 	beq.w	800a330 <HAL_SPI_Receive+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a224:	2304      	movs	r3, #4
 800a226:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a22e:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a230:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a234:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a238:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a23a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a23c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a23e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a240:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a242:	68e3      	ldr	r3, [r4, #12]
 800a244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	6853      	ldr	r3, [r2, #4]
 800a24c:	bf8c      	ite	hi
 800a24e:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a252:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 800a256:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a258:	68a3      	ldr	r3, [r4, #8]
 800a25a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a25e:	d00d      	beq.n	800a27c <HAL_SPI_Receive+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a268:	d103      	bne.n	800a272 <HAL_SPI_Receive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a270:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a272:	68e3      	ldr	r3, [r4, #12]
 800a274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a278:	d90e      	bls.n	800a298 <HAL_SPI_Receive+0xe4>
 800a27a:	e030      	b.n	800a2de <HAL_SPI_Receive+0x12a>
    SPI_1LINE_RX(hspi);
 800a27c:	6822      	ldr	r2, [r4, #0]
 800a27e:	6813      	ldr	r3, [r2, #0]
 800a280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	e7eb      	b.n	800a260 <HAL_SPI_Receive+0xac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a288:	f7f7 ff04 	bl	8002094 <HAL_GetTick>
 800a28c:	1b80      	subs	r0, r0, r6
 800a28e:	42a8      	cmp	r0, r5
 800a290:	d319      	bcc.n	800a2c6 <HAL_SPI_Receive+0x112>
 800a292:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a296:	d14d      	bne.n	800a334 <HAL_SPI_Receive+0x180>
    while (hspi->RxXferCount > 0U)
 800a298:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d037      	beq.n	800a312 <HAL_SPI_Receive+0x15e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	689a      	ldr	r2, [r3, #8]
 800a2a6:	f012 0f01 	tst.w	r2, #1
 800a2aa:	d0ed      	beq.n	800a288 <HAL_SPI_Receive+0xd4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a2ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a2ae:	7b1b      	ldrb	r3, [r3, #12]
 800a2b0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800a2b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a2c4:	e7e8      	b.n	800a298 <HAL_SPI_Receive+0xe4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2c6:	2d00      	cmp	r5, #0
 800a2c8:	d1e6      	bne.n	800a298 <HAL_SPI_Receive+0xe4>
          errorcode = HAL_TIMEOUT;
 800a2ca:	2003      	movs	r0, #3
 800a2cc:	e78e      	b.n	800a1ec <HAL_SPI_Receive+0x38>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2ce:	f7f7 fee1 	bl	8002094 <HAL_GetTick>
 800a2d2:	1b80      	subs	r0, r0, r6
 800a2d4:	42a8      	cmp	r0, r5
 800a2d6:	d318      	bcc.n	800a30a <HAL_SPI_Receive+0x156>
 800a2d8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a2dc:	d12c      	bne.n	800a338 <HAL_SPI_Receive+0x184>
    while (hspi->RxXferCount > 0U)
 800a2de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	b1ab      	cbz	r3, 800a312 <HAL_SPI_Receive+0x15e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	689a      	ldr	r2, [r3, #8]
 800a2ea:	f012 0f01 	tst.w	r2, #1
 800a2ee:	d0ee      	beq.n	800a2ce <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2f0:	68da      	ldr	r2, [r3, #12]
 800a2f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2f8:	3302      	adds	r3, #2
 800a2fa:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800a2fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a300:	3b01      	subs	r3, #1
 800a302:	b29b      	uxth	r3, r3
 800a304:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a308:	e7e9      	b.n	800a2de <HAL_SPI_Receive+0x12a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a30a:	2d00      	cmp	r5, #0
 800a30c:	d1e7      	bne.n	800a2de <HAL_SPI_Receive+0x12a>
          errorcode = HAL_TIMEOUT;
 800a30e:	2003      	movs	r0, #3
 800a310:	e76c      	b.n	800a1ec <HAL_SPI_Receive+0x38>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a312:	4632      	mov	r2, r6
 800a314:	4629      	mov	r1, r5
 800a316:	4620      	mov	r0, r4
 800a318:	f7ff fb65 	bl	80099e6 <SPI_EndRxTransaction>
 800a31c:	b108      	cbz	r0, 800a322 <HAL_SPI_Receive+0x16e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a31e:	2320      	movs	r3, #32
 800a320:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a322:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800a324:	3000      	adds	r0, #0
 800a326:	bf18      	it	ne
 800a328:	2001      	movne	r0, #1
error :
 800a32a:	e75f      	b.n	800a1ec <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800a32c:	2001      	movs	r0, #1
 800a32e:	e75d      	b.n	800a1ec <HAL_SPI_Receive+0x38>
 800a330:	2001      	movs	r0, #1
 800a332:	e75b      	b.n	800a1ec <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800a334:	2003      	movs	r0, #3
 800a336:	e759      	b.n	800a1ec <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800a338:	2003      	movs	r0, #3
 800a33a:	e757      	b.n	800a1ec <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 800a33c:	2002      	movs	r0, #2
 800a33e:	e75b      	b.n	800a1f8 <HAL_SPI_Receive+0x44>

0800a340 <HAL_SPI_Transmit_IT>:
{
 800a340:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800a342:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800a346:	2801      	cmp	r0, #1
 800a348:	d045      	beq.n	800a3d6 <HAL_SPI_Transmit_IT+0x96>
 800a34a:	2001      	movs	r0, #1
 800a34c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800a350:	2900      	cmp	r1, #0
 800a352:	d037      	beq.n	800a3c4 <HAL_SPI_Transmit_IT+0x84>
 800a354:	2a00      	cmp	r2, #0
 800a356:	d037      	beq.n	800a3c8 <HAL_SPI_Transmit_IT+0x88>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a358:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 800a35c:	b2c0      	uxtb	r0, r0
 800a35e:	2801      	cmp	r0, #1
 800a360:	d001      	beq.n	800a366 <HAL_SPI_Transmit_IT+0x26>
    errorcode = HAL_BUSY;
 800a362:	2002      	movs	r0, #2
 800a364:	e031      	b.n	800a3ca <HAL_SPI_Transmit_IT+0x8a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a366:	2003      	movs	r0, #3
 800a368:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a36c:	2000      	movs	r0, #0
 800a36e:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a370:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a372:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a374:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a376:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a378:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a37c:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a380:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    hspi->TxISR = SPI_TxISR_16BIT;
 800a388:	bf8c      	ite	hi
 800a38a:	4a14      	ldrhi	r2, [pc, #80]	; (800a3dc <HAL_SPI_Transmit_IT+0x9c>)
    hspi->TxISR = SPI_TxISR_8BIT;
 800a38c:	4a14      	ldrls	r2, [pc, #80]	; (800a3e0 <HAL_SPI_Transmit_IT+0xa0>)
 800a38e:	651a      	str	r2, [r3, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a396:	d00f      	beq.n	800a3b8 <HAL_SPI_Transmit_IT+0x78>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a398:	6819      	ldr	r1, [r3, #0]
 800a39a:	684a      	ldr	r2, [r1, #4]
 800a39c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800a3a0:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	6811      	ldr	r1, [r2, #0]
 800a3a6:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a3aa:	d112      	bne.n	800a3d2 <HAL_SPI_Transmit_IT+0x92>
    __HAL_SPI_ENABLE(hspi);
 800a3ac:	6811      	ldr	r1, [r2, #0]
 800a3ae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a3b2:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	e008      	b.n	800a3ca <HAL_SPI_Transmit_IT+0x8a>
    SPI_1LINE_TX(hspi);
 800a3b8:	6819      	ldr	r1, [r3, #0]
 800a3ba:	680a      	ldr	r2, [r1, #0]
 800a3bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3c0:	600a      	str	r2, [r1, #0]
 800a3c2:	e7e9      	b.n	800a398 <HAL_SPI_Transmit_IT+0x58>
    errorcode = HAL_ERROR;
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	e000      	b.n	800a3ca <HAL_SPI_Transmit_IT+0x8a>
 800a3c8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a3d0:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	e7f9      	b.n	800a3ca <HAL_SPI_Transmit_IT+0x8a>
  __HAL_LOCK(hspi);
 800a3d6:	2002      	movs	r0, #2
}
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	0800ad1b 	.word	0x0800ad1b
 800a3e0:	0800acf5 	.word	0x0800acf5

0800a3e4 <HAL_SPI_TransmitReceive_IT>:
{
 800a3e4:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 800a3e6:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800a3ea:	2c01      	cmp	r4, #1
 800a3ec:	d064      	beq.n	800a4b8 <HAL_SPI_TransmitReceive_IT+0xd4>
 800a3ee:	2401      	movs	r4, #1
 800a3f0:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 800a3f4:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800a3f8:	b2e4      	uxtb	r4, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a3fa:	2c01      	cmp	r4, #1
 800a3fc:	d011      	beq.n	800a422 <HAL_SPI_TransmitReceive_IT+0x3e>
 800a3fe:	6845      	ldr	r5, [r0, #4]
 800a400:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800a404:	d006      	beq.n	800a414 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 800a406:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800a408:	2200      	movs	r2, #0
 800a40a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 800a40e:	4618      	mov	r0, r3
 800a410:	bc30      	pop	{r4, r5}
 800a412:	4770      	bx	lr
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a414:	6885      	ldr	r5, [r0, #8]
 800a416:	2d00      	cmp	r5, #0
 800a418:	d144      	bne.n	800a4a4 <HAL_SPI_TransmitReceive_IT+0xc0>
 800a41a:	2c04      	cmp	r4, #4
 800a41c:	d001      	beq.n	800a422 <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 800a41e:	2302      	movs	r3, #2
 800a420:	e7f2      	b.n	800a408 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a422:	2900      	cmp	r1, #0
 800a424:	d040      	beq.n	800a4a8 <HAL_SPI_TransmitReceive_IT+0xc4>
 800a426:	2a00      	cmp	r2, #0
 800a428:	d040      	beq.n	800a4ac <HAL_SPI_TransmitReceive_IT+0xc8>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d040      	beq.n	800a4b0 <HAL_SPI_TransmitReceive_IT+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a42e:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800a432:	b2e4      	uxtb	r4, r4
 800a434:	2c04      	cmp	r4, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a436:	bf1c      	itt	ne
 800a438:	2405      	movne	r4, #5
 800a43a:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a43e:	2400      	movs	r4, #0
 800a440:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a442:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a444:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a446:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a448:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a44a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a44e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a452:	68c2      	ldr	r2, [r0, #12]
 800a454:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800a458:	d918      	bls.n	800a48c <HAL_SPI_TransmitReceive_IT+0xa8>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a45a:	4b18      	ldr	r3, [pc, #96]	; (800a4bc <HAL_SPI_TransmitReceive_IT+0xd8>)
 800a45c:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a45e:	4b18      	ldr	r3, [pc, #96]	; (800a4c0 <HAL_SPI_TransmitReceive_IT+0xdc>)
 800a460:	6503      	str	r3, [r0, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a462:	6802      	ldr	r2, [r0, #0]
 800a464:	6853      	ldr	r3, [r2, #4]
 800a466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a46a:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a46c:	6802      	ldr	r2, [r0, #0]
 800a46e:	6853      	ldr	r3, [r2, #4]
 800a470:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800a474:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a476:	6803      	ldr	r3, [r0, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a47e:	d119      	bne.n	800a4b4 <HAL_SPI_TransmitReceive_IT+0xd0>
    __HAL_SPI_ENABLE(hspi);
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a486:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	e7bd      	b.n	800a408 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a48c:	4a0d      	ldr	r2, [pc, #52]	; (800a4c4 <HAL_SPI_TransmitReceive_IT+0xe0>)
 800a48e:	64c2      	str	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a490:	4a0d      	ldr	r2, [pc, #52]	; (800a4c8 <HAL_SPI_TransmitReceive_IT+0xe4>)
 800a492:	6502      	str	r2, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800a494:	2b01      	cmp	r3, #1
 800a496:	d8e4      	bhi.n	800a462 <HAL_SPI_TransmitReceive_IT+0x7e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a498:	6802      	ldr	r2, [r0, #0]
 800a49a:	6853      	ldr	r3, [r2, #4]
 800a49c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4a0:	6053      	str	r3, [r2, #4]
 800a4a2:	e7e3      	b.n	800a46c <HAL_SPI_TransmitReceive_IT+0x88>
    errorcode = HAL_BUSY;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	e7af      	b.n	800a408 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e7ad      	b.n	800a408 <HAL_SPI_TransmitReceive_IT+0x24>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e7ab      	b.n	800a408 <HAL_SPI_TransmitReceive_IT+0x24>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e7a9      	b.n	800a408 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e7a7      	b.n	800a408 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e7a8      	b.n	800a40e <HAL_SPI_TransmitReceive_IT+0x2a>
 800a4bc:	0800af3f 	.word	0x0800af3f
 800a4c0:	0800af07 	.word	0x0800af07
 800a4c4:	0800ae8f 	.word	0x0800ae8f
 800a4c8:	0800ae37 	.word	0x0800ae37

0800a4cc <HAL_SPI_Receive_IT>:
{
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a4d0:	6880      	ldr	r0, [r0, #8]
 800a4d2:	b918      	cbnz	r0, 800a4dc <HAL_SPI_Receive_IT+0x10>
 800a4d4:	6863      	ldr	r3, [r4, #4]
 800a4d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4da:	d010      	beq.n	800a4fe <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 800a4dc:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 800a4e0:	2801      	cmp	r0, #1
 800a4e2:	d05a      	beq.n	800a59a <HAL_SPI_Receive_IT+0xce>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800a4ea:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800a4ee:	b2c0      	uxtb	r0, r0
 800a4f0:	4298      	cmp	r0, r3
 800a4f2:	d00d      	beq.n	800a510 <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 800a4f4:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800a4fc:	bd10      	pop	{r4, pc}
 800a4fe:	4613      	mov	r3, r2
 800a500:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a502:	2204      	movs	r2, #4
 800a504:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a508:	460a      	mov	r2, r1
 800a50a:	f7ff ff6b 	bl	800a3e4 <HAL_SPI_TransmitReceive_IT>
 800a50e:	e7f5      	b.n	800a4fc <HAL_SPI_Receive_IT+0x30>
  if ((pData == NULL) || (Size == 0U))
 800a510:	2900      	cmp	r1, #0
 800a512:	d03c      	beq.n	800a58e <HAL_SPI_Receive_IT+0xc2>
 800a514:	2a00      	cmp	r2, #0
 800a516:	d03c      	beq.n	800a592 <HAL_SPI_Receive_IT+0xc6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a518:	2304      	movs	r3, #4
 800a51a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a51e:	2300      	movs	r3, #0
 800a520:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a522:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a524:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a528:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a52c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a52e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a530:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a532:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a534:	68e3      	ldr	r3, [r4, #12]
 800a536:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a53a:	d91a      	bls.n	800a572 <HAL_SPI_Receive_IT+0xa6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a53c:	6822      	ldr	r2, [r4, #0]
 800a53e:	6853      	ldr	r3, [r2, #4]
 800a540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a544:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800a546:	4b16      	ldr	r3, [pc, #88]	; (800a5a0 <HAL_SPI_Receive_IT+0xd4>)
 800a548:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a550:	d017      	beq.n	800a582 <HAL_SPI_Receive_IT+0xb6>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a552:	6822      	ldr	r2, [r4, #0]
 800a554:	6853      	ldr	r3, [r2, #4]
 800a556:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a55a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a564:	d117      	bne.n	800a596 <HAL_SPI_Receive_IT+0xca>
    __HAL_SPI_ENABLE(hspi);
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a56c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a56e:	2000      	movs	r0, #0
 800a570:	e7c1      	b.n	800a4f6 <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	6853      	ldr	r3, [r2, #4]
 800a576:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a57a:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800a57c:	4b09      	ldr	r3, [pc, #36]	; (800a5a4 <HAL_SPI_Receive_IT+0xd8>)
 800a57e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a580:	e7e3      	b.n	800a54a <HAL_SPI_Receive_IT+0x7e>
    SPI_1LINE_RX(hspi);
 800a582:	6822      	ldr	r2, [r4, #0]
 800a584:	6813      	ldr	r3, [r2, #0]
 800a586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	e7e1      	b.n	800a552 <HAL_SPI_Receive_IT+0x86>
    errorcode = HAL_ERROR;
 800a58e:	2001      	movs	r0, #1
 800a590:	e7b1      	b.n	800a4f6 <HAL_SPI_Receive_IT+0x2a>
 800a592:	2001      	movs	r0, #1
 800a594:	e7af      	b.n	800a4f6 <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a596:	2000      	movs	r0, #0
 800a598:	e7ad      	b.n	800a4f6 <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 800a59a:	2002      	movs	r0, #2
 800a59c:	e7ae      	b.n	800a4fc <HAL_SPI_Receive_IT+0x30>
 800a59e:	bf00      	nop
 800a5a0:	0800adad 	.word	0x0800adad
 800a5a4:	0800ad81 	.word	0x0800ad81

0800a5a8 <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 800a5a8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	f000 8087 	beq.w	800a6c0 <HAL_SPI_Transmit_DMA+0x118>
{
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800a5bc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d005      	beq.n	800a5d2 <HAL_SPI_Transmit_DMA+0x2a>
    errorcode = HAL_BUSY;
 800a5c6:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 800a5d2:	2900      	cmp	r1, #0
 800a5d4:	d070      	beq.n	800a6b8 <HAL_SPI_Transmit_DMA+0x110>
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	d070      	beq.n	800a6bc <HAL_SPI_Transmit_DMA+0x114>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a5e4:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a5e6:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a5e8:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a5ea:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a5ec:	6503      	str	r3, [r0, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a5ee:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800a5f0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a5f4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5f8:	6883      	ldr	r3, [r0, #8]
 800a5fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5fe:	d02a      	beq.n	800a656 <HAL_SPI_Transmit_DMA+0xae>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a600:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a602:	4a31      	ldr	r2, [pc, #196]	; (800a6c8 <HAL_SPI_Transmit_DMA+0x120>)
 800a604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a606:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a608:	4a30      	ldr	r2, [pc, #192]	; (800a6cc <HAL_SPI_Transmit_DMA+0x124>)
 800a60a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a60c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a60e:	4a30      	ldr	r2, [pc, #192]	; (800a6d0 <HAL_SPI_Transmit_DMA+0x128>)
 800a610:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 800a612:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a614:	2200      	movs	r2, #0
 800a616:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a618:	6822      	ldr	r2, [r4, #0]
 800a61a:	6853      	ldr	r3, [r2, #4]
 800a61c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a620:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800a622:	68e3      	ldr	r3, [r4, #12]
 800a624:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a628:	d804      	bhi.n	800a634 <HAL_SPI_Transmit_DMA+0x8c>
 800a62a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a632:	d016      	beq.n	800a662 <HAL_SPI_Transmit_DMA+0xba>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800a634:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a636:	6822      	ldr	r2, [r4, #0]
 800a638:	320c      	adds	r2, #12
 800a63a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a63c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a63e:	f7f8 f89c 	bl	800277a <HAL_DMA_Start_IT>
 800a642:	4603      	mov	r3, r0
 800a644:	b320      	cbz	r0, 800a690 <HAL_SPI_Transmit_DMA+0xe8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a646:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a648:	f043 0310 	orr.w	r3, r3, #16
 800a64c:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800a64e:	2301      	movs	r3, #1
 800a650:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800a654:	e7b8      	b.n	800a5c8 <HAL_SPI_Transmit_DMA+0x20>
    SPI_1LINE_TX(hspi);
 800a656:	6802      	ldr	r2, [r0, #0]
 800a658:	6813      	ldr	r3, [r2, #0]
 800a65a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	e7ce      	b.n	800a600 <HAL_SPI_Transmit_DMA+0x58>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800a662:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a664:	f013 0f01 	tst.w	r3, #1
 800a668:	d108      	bne.n	800a67c <HAL_SPI_Transmit_DMA+0xd4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a66a:	6822      	ldr	r2, [r4, #0]
 800a66c:	6853      	ldr	r3, [r2, #4]
 800a66e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a672:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800a674:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a676:	085b      	lsrs	r3, r3, #1
 800a678:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a67a:	e7db      	b.n	800a634 <HAL_SPI_Transmit_DMA+0x8c>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a67c:	6822      	ldr	r2, [r4, #0]
 800a67e:	6853      	ldr	r3, [r2, #4]
 800a680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a684:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a686:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a688:	085b      	lsrs	r3, r3, #1
 800a68a:	3301      	adds	r3, #1
 800a68c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a68e:	e7d1      	b.n	800a634 <HAL_SPI_Transmit_DMA+0x8c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a690:	6822      	ldr	r2, [r4, #0]
 800a692:	6811      	ldr	r1, [r2, #0]
 800a694:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a698:	d103      	bne.n	800a6a2 <HAL_SPI_Transmit_DMA+0xfa>
    __HAL_SPI_ENABLE(hspi);
 800a69a:	6811      	ldr	r1, [r2, #0]
 800a69c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a6a0:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a6a2:	6821      	ldr	r1, [r4, #0]
 800a6a4:	684a      	ldr	r2, [r1, #4]
 800a6a6:	f042 0220 	orr.w	r2, r2, #32
 800a6aa:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a6ac:	6821      	ldr	r1, [r4, #0]
 800a6ae:	684a      	ldr	r2, [r1, #4]
 800a6b0:	f042 0202 	orr.w	r2, r2, #2
 800a6b4:	604a      	str	r2, [r1, #4]
 800a6b6:	e787      	b.n	800a5c8 <HAL_SPI_Transmit_DMA+0x20>
    errorcode = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e785      	b.n	800a5c8 <HAL_SPI_Transmit_DMA+0x20>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e783      	b.n	800a5c8 <HAL_SPI_Transmit_DMA+0x20>
  __HAL_LOCK(hspi);
 800a6c0:	2302      	movs	r3, #2
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	0800ac7b 	.word	0x0800ac7b
 800a6cc:	0800af9d 	.word	0x0800af9d
 800a6d0:	0800af7b 	.word	0x0800af7b

0800a6d4 <HAL_SPI_TransmitReceive_DMA>:
{
 800a6d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800a6d6:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800a6da:	2c01      	cmp	r4, #1
 800a6dc:	f000 80f2 	beq.w	800a8c4 <HAL_SPI_TransmitReceive_DMA+0x1f0>
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	2001      	movs	r0, #1
 800a6e4:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 800a6e8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800a6ec:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a6ee:	2801      	cmp	r0, #1
 800a6f0:	d011      	beq.n	800a716 <HAL_SPI_TransmitReceive_DMA+0x42>
 800a6f2:	6865      	ldr	r5, [r4, #4]
 800a6f4:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800a6f8:	d005      	beq.n	800a706 <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 800a6fa:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800a702:	4618      	mov	r0, r3
 800a704:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a706:	68a5      	ldr	r5, [r4, #8]
 800a708:	2d00      	cmp	r5, #0
 800a70a:	f040 80d3 	bne.w	800a8b4 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 800a70e:	2804      	cmp	r0, #4
 800a710:	d001      	beq.n	800a716 <HAL_SPI_TransmitReceive_DMA+0x42>
    errorcode = HAL_BUSY;
 800a712:	2302      	movs	r3, #2
 800a714:	e7f2      	b.n	800a6fc <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a716:	2900      	cmp	r1, #0
 800a718:	f000 80ce 	beq.w	800a8b8 <HAL_SPI_TransmitReceive_DMA+0x1e4>
 800a71c:	2a00      	cmp	r2, #0
 800a71e:	f000 80cd 	beq.w	800a8bc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 80cc 	beq.w	800a8c0 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a728:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800a72c:	b2c0      	uxtb	r0, r0
 800a72e:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a730:	bf1c      	itt	ne
 800a732:	2005      	movne	r0, #5
 800a734:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a738:	2000      	movs	r0, #0
 800a73a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a73c:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a73e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a740:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a742:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a744:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a748:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a74c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a74e:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a750:	6822      	ldr	r2, [r4, #0]
 800a752:	6853      	ldr	r3, [r2, #4]
 800a754:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a758:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a75a:	68e3      	ldr	r3, [r4, #12]
 800a75c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a760:	d927      	bls.n	800a7b2 <HAL_SPI_TransmitReceive_DMA+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	6853      	ldr	r3, [r2, #4]
 800a766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a76a:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a76c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b04      	cmp	r3, #4
 800a774:	d064      	beq.n	800a840 <HAL_SPI_TransmitReceive_DMA+0x16c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a778:	4a53      	ldr	r2, [pc, #332]	; (800a8c8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800a77a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a77c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a77e:	4a53      	ldr	r2, [pc, #332]	; (800a8cc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800a780:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a784:	4a52      	ldr	r2, [pc, #328]	; (800a8d0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800a786:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800a788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a78a:	2200      	movs	r2, #0
 800a78c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a78e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a792:	6821      	ldr	r1, [r4, #0]
 800a794:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a796:	310c      	adds	r1, #12
 800a798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a79a:	f7f7 ffee 	bl	800277a <HAL_DMA_Start_IT>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d055      	beq.n	800a84e <HAL_SPI_TransmitReceive_DMA+0x17a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a7a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a7a4:	f043 0310 	orr.w	r3, r3, #16
 800a7a8:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800a7b0:	e7a4      	b.n	800a6fc <HAL_SPI_TransmitReceive_DMA+0x28>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a7b2:	6822      	ldr	r2, [r4, #0]
 800a7b4:	6853      	ldr	r3, [r2, #4]
 800a7b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a7ba:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c4:	d019      	beq.n	800a7fa <HAL_SPI_TransmitReceive_DMA+0x126>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ce:	d1cd      	bne.n	800a76c <HAL_SPI_TransmitReceive_DMA+0x98>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a7d0:	6822      	ldr	r2, [r4, #0]
 800a7d2:	6853      	ldr	r3, [r2, #4]
 800a7d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7d8:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a7da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a7de:	f013 0f01 	tst.w	r3, #1
 800a7e2:	d121      	bne.n	800a828 <HAL_SPI_TransmitReceive_DMA+0x154>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a7e4:	6822      	ldr	r2, [r4, #0]
 800a7e6:	6853      	ldr	r3, [r2, #4]
 800a7e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7ec:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a7ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a7f2:	085b      	lsrs	r3, r3, #1
 800a7f4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a7f8:	e7b8      	b.n	800a76c <HAL_SPI_TransmitReceive_DMA+0x98>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a7fa:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800a7fc:	f013 0f01 	tst.w	r3, #1
 800a800:	d108      	bne.n	800a814 <HAL_SPI_TransmitReceive_DMA+0x140>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a802:	6822      	ldr	r2, [r4, #0]
 800a804:	6853      	ldr	r3, [r2, #4]
 800a806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a80a:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a80c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a812:	e7d8      	b.n	800a7c6 <HAL_SPI_TransmitReceive_DMA+0xf2>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a814:	6822      	ldr	r2, [r4, #0]
 800a816:	6853      	ldr	r3, [r2, #4]
 800a818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a81c:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a81e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a820:	085b      	lsrs	r3, r3, #1
 800a822:	3301      	adds	r3, #1
 800a824:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a826:	e7ce      	b.n	800a7c6 <HAL_SPI_TransmitReceive_DMA+0xf2>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a828:	6822      	ldr	r2, [r4, #0]
 800a82a:	6853      	ldr	r3, [r2, #4]
 800a82c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a830:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a832:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a836:	085b      	lsrs	r3, r3, #1
 800a838:	3301      	adds	r3, #1
 800a83a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a83e:	e795      	b.n	800a76c <HAL_SPI_TransmitReceive_DMA+0x98>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a840:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a842:	4a24      	ldr	r2, [pc, #144]	; (800a8d4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800a844:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a848:	4a23      	ldr	r2, [pc, #140]	; (800a8d8 <HAL_SPI_TransmitReceive_DMA+0x204>)
 800a84a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a84c:	e799      	b.n	800a782 <HAL_SPI_TransmitReceive_DMA+0xae>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a84e:	6822      	ldr	r2, [r4, #0]
 800a850:	6853      	ldr	r3, [r2, #4]
 800a852:	f043 0301 	orr.w	r3, r3, #1
 800a856:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a858:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a85a:	2300      	movs	r3, #0
 800a85c:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a85e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a860:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a862:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a864:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a866:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a868:	6393      	str	r3, [r2, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800a86a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a86c:	6822      	ldr	r2, [r4, #0]
 800a86e:	320c      	adds	r2, #12
 800a870:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a874:	f7f7 ff81 	bl	800277a <HAL_DMA_Start_IT>
 800a878:	4603      	mov	r3, r0
 800a87a:	b138      	cbz	r0, 800a88c <HAL_SPI_TransmitReceive_DMA+0x1b8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a87c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a87e:	f043 0310 	orr.w	r3, r3, #16
 800a882:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800a884:	2301      	movs	r3, #1
 800a886:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800a88a:	e737      	b.n	800a6fc <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a88c:	6822      	ldr	r2, [r4, #0]
 800a88e:	6811      	ldr	r1, [r2, #0]
 800a890:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a894:	d103      	bne.n	800a89e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    __HAL_SPI_ENABLE(hspi);
 800a896:	6811      	ldr	r1, [r2, #0]
 800a898:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a89c:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a89e:	6821      	ldr	r1, [r4, #0]
 800a8a0:	684a      	ldr	r2, [r1, #4]
 800a8a2:	f042 0220 	orr.w	r2, r2, #32
 800a8a6:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a8a8:	6821      	ldr	r1, [r4, #0]
 800a8aa:	684a      	ldr	r2, [r1, #4]
 800a8ac:	f042 0202 	orr.w	r2, r2, #2
 800a8b0:	604a      	str	r2, [r1, #4]
 800a8b2:	e723      	b.n	800a6fc <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_BUSY;
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	e721      	b.n	800a6fc <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e71f      	b.n	800a6fc <HAL_SPI_TransmitReceive_DMA+0x28>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e71d      	b.n	800a6fc <HAL_SPI_TransmitReceive_DMA+0x28>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e71b      	b.n	800a6fc <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 800a8c4:	2302      	movs	r3, #2
 800a8c6:	e71c      	b.n	800a702 <HAL_SPI_TransmitReceive_DMA+0x2e>
 800a8c8:	0800ac93 	.word	0x0800ac93
 800a8cc:	0800b065 	.word	0x0800b065
 800a8d0:	0800af7b 	.word	0x0800af7b
 800a8d4:	0800ac87 	.word	0x0800ac87
 800a8d8:	0800b00d 	.word	0x0800b00d

0800a8dc <HAL_SPI_Receive_DMA>:
{
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a8e0:	6885      	ldr	r5, [r0, #8]
 800a8e2:	b91d      	cbnz	r5, 800a8ec <HAL_SPI_Receive_DMA+0x10>
 800a8e4:	6843      	ldr	r3, [r0, #4]
 800a8e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8ea:	d012      	beq.n	800a912 <HAL_SPI_Receive_DMA+0x36>
  __HAL_LOCK(hspi);
 800a8ec:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 800a8f0:	2801      	cmp	r0, #1
 800a8f2:	f000 80a4 	beq.w	800aa3e <HAL_SPI_Receive_DMA+0x162>
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800a8fc:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800a900:	b2c0      	uxtb	r0, r0
 800a902:	2801      	cmp	r0, #1
 800a904:	d00e      	beq.n	800a924 <HAL_SPI_Receive_DMA+0x48>
    errorcode = HAL_BUSY;
 800a906:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800a908:	2200      	movs	r2, #0
 800a90a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800a90e:	4618      	mov	r0, r3
 800a910:	bd38      	pop	{r3, r4, r5, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a912:	2304      	movs	r3, #4
 800a914:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a918:	4613      	mov	r3, r2
 800a91a:	460a      	mov	r2, r1
 800a91c:	f7ff feda 	bl	800a6d4 <HAL_SPI_TransmitReceive_DMA>
 800a920:	4603      	mov	r3, r0
 800a922:	e7f4      	b.n	800a90e <HAL_SPI_Receive_DMA+0x32>
  if ((pData == NULL) || (Size == 0U))
 800a924:	2900      	cmp	r1, #0
 800a926:	f000 8086 	beq.w	800aa36 <HAL_SPI_Receive_DMA+0x15a>
 800a92a:	2a00      	cmp	r2, #0
 800a92c:	f000 8085 	beq.w	800aa3a <HAL_SPI_Receive_DMA+0x15e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a930:	2304      	movs	r3, #4
 800a932:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a936:	2300      	movs	r3, #0
 800a938:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a93a:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a93c:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a940:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a944:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a946:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800a948:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a94a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a94c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a950:	d02c      	beq.n	800a9ac <HAL_SPI_Receive_DMA+0xd0>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a952:	6822      	ldr	r2, [r4, #0]
 800a954:	6853      	ldr	r3, [r2, #4]
 800a956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a95a:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a95c:	68e3      	ldr	r3, [r4, #12]
 800a95e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a962:	d929      	bls.n	800a9b8 <HAL_SPI_Receive_DMA+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a964:	6822      	ldr	r2, [r4, #0]
 800a966:	6853      	ldr	r3, [r2, #4]
 800a968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a96c:	6053      	str	r3, [r2, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a96e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a970:	4a34      	ldr	r2, [pc, #208]	; (800aa44 <HAL_SPI_Receive_DMA+0x168>)
 800a972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a974:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a976:	4a34      	ldr	r2, [pc, #208]	; (800aa48 <HAL_SPI_Receive_DMA+0x16c>)
 800a978:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a97a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a97c:	4a33      	ldr	r2, [pc, #204]	; (800aa4c <HAL_SPI_Receive_DMA+0x170>)
 800a97e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800a980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a982:	2200      	movs	r2, #0
 800a984:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a986:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a98a:	6821      	ldr	r1, [r4, #0]
 800a98c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a98e:	310c      	adds	r1, #12
 800a990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a992:	f7f7 fef2 	bl	800277a <HAL_DMA_Start_IT>
 800a996:	4603      	mov	r3, r0
 800a998:	2800      	cmp	r0, #0
 800a99a:	d038      	beq.n	800aa0e <HAL_SPI_Receive_DMA+0x132>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a99c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a99e:	f043 0310 	orr.w	r3, r3, #16
 800a9a2:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800a9aa:	e7ad      	b.n	800a908 <HAL_SPI_Receive_DMA+0x2c>
    SPI_1LINE_RX(hspi);
 800a9ac:	6822      	ldr	r2, [r4, #0]
 800a9ae:	6813      	ldr	r3, [r2, #0]
 800a9b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	e7cc      	b.n	800a952 <HAL_SPI_Receive_DMA+0x76>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	6853      	ldr	r3, [r2, #4]
 800a9bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9c0:	6053      	str	r3, [r2, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ca:	d1d0      	bne.n	800a96e <HAL_SPI_Receive_DMA+0x92>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9cc:	6822      	ldr	r2, [r4, #0]
 800a9ce:	6853      	ldr	r3, [r2, #4]
 800a9d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9d4:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a9d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a9da:	f013 0f01 	tst.w	r3, #1
 800a9de:	d10a      	bne.n	800a9f6 <HAL_SPI_Receive_DMA+0x11a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a9e0:	6822      	ldr	r2, [r4, #0]
 800a9e2:	6853      	ldr	r3, [r2, #4]
 800a9e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9e8:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a9ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a9ee:	085b      	lsrs	r3, r3, #1
 800a9f0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a9f4:	e7bb      	b.n	800a96e <HAL_SPI_Receive_DMA+0x92>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a9f6:	6822      	ldr	r2, [r4, #0]
 800a9f8:	6853      	ldr	r3, [r2, #4]
 800a9fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a9fe:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800aa00:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aa04:	085b      	lsrs	r3, r3, #1
 800aa06:	3301      	adds	r3, #1
 800aa08:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800aa0c:	e7af      	b.n	800a96e <HAL_SPI_Receive_DMA+0x92>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	6811      	ldr	r1, [r2, #0]
 800aa12:	f011 0f40 	tst.w	r1, #64	; 0x40
 800aa16:	d103      	bne.n	800aa20 <HAL_SPI_Receive_DMA+0x144>
    __HAL_SPI_ENABLE(hspi);
 800aa18:	6811      	ldr	r1, [r2, #0]
 800aa1a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800aa1e:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800aa20:	6821      	ldr	r1, [r4, #0]
 800aa22:	684a      	ldr	r2, [r1, #4]
 800aa24:	f042 0220 	orr.w	r2, r2, #32
 800aa28:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800aa2a:	6821      	ldr	r1, [r4, #0]
 800aa2c:	684a      	ldr	r2, [r1, #4]
 800aa2e:	f042 0201 	orr.w	r2, r2, #1
 800aa32:	604a      	str	r2, [r1, #4]
 800aa34:	e768      	b.n	800a908 <HAL_SPI_Receive_DMA+0x2c>
    errorcode = HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e766      	b.n	800a908 <HAL_SPI_Receive_DMA+0x2c>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e764      	b.n	800a908 <HAL_SPI_Receive_DMA+0x2c>
  __HAL_LOCK(hspi);
 800aa3e:	2302      	movs	r3, #2
 800aa40:	e765      	b.n	800a90e <HAL_SPI_Receive_DMA+0x32>
 800aa42:	bf00      	nop
 800aa44:	0800ac87 	.word	0x0800ac87
 800aa48:	0800b00d 	.word	0x0800b00d
 800aa4c:	0800af7b 	.word	0x0800af7b

0800aa50 <HAL_SPI_Abort>:
{
 800aa50:	b510      	push	{r4, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	4604      	mov	r4, r0
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800aa56:	4b5e      	ldr	r3, [pc, #376]	; (800abd0 <HAL_SPI_Abort+0x180>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a5e      	ldr	r2, [pc, #376]	; (800abd4 <HAL_SPI_Abort+0x184>)
 800aa5c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa60:	0a5b      	lsrs	r3, r3, #9
 800aa62:	2264      	movs	r2, #100	; 0x64
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
 800aa68:	9304      	str	r3, [sp, #16]
  count = resetcount;
 800aa6a:	9b04      	ldr	r3, [sp, #16]
 800aa6c:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800aa6e:	6802      	ldr	r2, [r0, #0]
 800aa70:	6853      	ldr	r3, [r2, #4]
 800aa72:	f023 0320 	bic.w	r3, r3, #32
 800aa76:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800aa78:	6802      	ldr	r2, [r0, #0]
 800aa7a:	6853      	ldr	r3, [r2, #4]
 800aa7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa80:	d012      	beq.n	800aaa8 <HAL_SPI_Abort+0x58>
    hspi->TxISR = SPI_AbortTx_ISR;
 800aa82:	4b55      	ldr	r3, [pc, #340]	; (800abd8 <HAL_SPI_Abort+0x188>)
 800aa84:	6503      	str	r3, [r0, #80]	; 0x50
      if (count == 0U)
 800aa86:	9b05      	ldr	r3, [sp, #20]
 800aa88:	b143      	cbz	r3, 800aa9c <HAL_SPI_Abort+0x4c>
      count--;
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	9305      	str	r3, [sp, #20]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800aa90:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b07      	cmp	r3, #7
 800aa98:	d1f5      	bne.n	800aa86 <HAL_SPI_Abort+0x36>
 800aa9a:	e003      	b.n	800aaa4 <HAL_SPI_Abort+0x54>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800aa9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa2:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800aaa4:	9b04      	ldr	r3, [sp, #16]
 800aaa6:	9305      	str	r3, [sp, #20]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800aaa8:	6853      	ldr	r3, [r2, #4]
 800aaaa:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aaae:	d012      	beq.n	800aad6 <HAL_SPI_Abort+0x86>
    hspi->RxISR = SPI_AbortRx_ISR;
 800aab0:	4b4a      	ldr	r3, [pc, #296]	; (800abdc <HAL_SPI_Abort+0x18c>)
 800aab2:	64e3      	str	r3, [r4, #76]	; 0x4c
      if (count == 0U)
 800aab4:	9b05      	ldr	r3, [sp, #20]
 800aab6:	b143      	cbz	r3, 800aaca <HAL_SPI_Abort+0x7a>
      count--;
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	9305      	str	r3, [sp, #20]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800aabe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b07      	cmp	r3, #7
 800aac6:	d1f5      	bne.n	800aab4 <HAL_SPI_Abort+0x64>
 800aac8:	e003      	b.n	800aad2 <HAL_SPI_Abort+0x82>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aaca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800aacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad0:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800aad2:	9b04      	ldr	r3, [sp, #16]
 800aad4:	9305      	str	r3, [sp, #20]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800aad6:	6853      	ldr	r3, [r2, #4]
 800aad8:	f013 0f02 	tst.w	r3, #2
 800aadc:	d02a      	beq.n	800ab34 <HAL_SPI_Abort+0xe4>
    if (hspi->hdmatx != NULL)
 800aade:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aae0:	b343      	cbz	r3, 800ab34 <HAL_SPI_Abort+0xe4>
      hspi->hdmatx->XferAbortCallback = NULL;
 800aae2:	2200      	movs	r2, #0
 800aae4:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800aae6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aae8:	f7f7 fe94 	bl	8002814 <HAL_DMA_Abort>
 800aaec:	b108      	cbz	r0, 800aaf2 <HAL_SPI_Abort+0xa2>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800aaee:	2340      	movs	r3, #64	; 0x40
 800aaf0:	6623      	str	r3, [r4, #96]	; 0x60
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	6853      	ldr	r3, [r2, #4]
 800aaf6:	f023 0302 	bic.w	r3, r3, #2
 800aafa:	6053      	str	r3, [r2, #4]
      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800aafc:	f7f7 faca 	bl	8002094 <HAL_GetTick>
 800ab00:	4602      	mov	r2, r0
 800ab02:	2164      	movs	r1, #100	; 0x64
 800ab04:	4620      	mov	r0, r4
 800ab06:	f7fe ff3b 	bl	8009980 <SPI_EndRxTxTransaction>
 800ab0a:	b108      	cbz	r0, 800ab10 <HAL_SPI_Abort+0xc0>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab0c:	2340      	movs	r3, #64	; 0x40
 800ab0e:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_DISABLE(hspi);
 800ab10:	6822      	ldr	r2, [r4, #0]
 800ab12:	6813      	ldr	r3, [r2, #0]
 800ab14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab18:	6013      	str	r3, [r2, #0]
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab1a:	f7f7 fabb 	bl	8002094 <HAL_GetTick>
 800ab1e:	9000      	str	r0, [sp, #0]
 800ab20:	2364      	movs	r3, #100	; 0x64
 800ab22:	2200      	movs	r2, #0
 800ab24:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f7fe fedd 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 800ab2e:	b108      	cbz	r0, 800ab34 <HAL_SPI_Abort+0xe4>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab30:	2340      	movs	r3, #64	; 0x40
 800ab32:	6623      	str	r3, [r4, #96]	; 0x60
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f013 0f01 	tst.w	r3, #1
 800ab3c:	d02c      	beq.n	800ab98 <HAL_SPI_Abort+0x148>
    if (hspi->hdmarx != NULL)
 800ab3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab40:	b353      	cbz	r3, 800ab98 <HAL_SPI_Abort+0x148>
      hspi->hdmarx->XferAbortCallback = NULL;
 800ab42:	2200      	movs	r2, #0
 800ab44:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800ab46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab48:	f7f7 fe64 	bl	8002814 <HAL_DMA_Abort>
 800ab4c:	b108      	cbz	r0, 800ab52 <HAL_SPI_Abort+0x102>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab4e:	2340      	movs	r3, #64	; 0x40
 800ab50:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_DISABLE(hspi);
 800ab52:	6822      	ldr	r2, [r4, #0]
 800ab54:	6813      	ldr	r3, [r2, #0]
 800ab56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab5a:	6013      	str	r3, [r2, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab5c:	f7f7 fa9a 	bl	8002094 <HAL_GetTick>
 800ab60:	9000      	str	r0, [sp, #0]
 800ab62:	2364      	movs	r3, #100	; 0x64
 800ab64:	2200      	movs	r2, #0
 800ab66:	2180      	movs	r1, #128	; 0x80
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f7fe fe75 	bl	8009858 <SPI_WaitFlagStateUntilTimeout>
 800ab6e:	b108      	cbz	r0, 800ab74 <HAL_SPI_Abort+0x124>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab70:	2340      	movs	r3, #64	; 0x40
 800ab72:	6623      	str	r3, [r4, #96]	; 0x60
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab74:	f7f7 fa8e 	bl	8002094 <HAL_GetTick>
 800ab78:	9000      	str	r0, [sp, #0]
 800ab7a:	2364      	movs	r3, #100	; 0x64
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ab82:	4620      	mov	r0, r4
 800ab84:	f7fe feb0 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 800ab88:	b108      	cbz	r0, 800ab8e <HAL_SPI_Abort+0x13e>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab8a:	2340      	movs	r3, #64	; 0x40
 800ab8c:	6623      	str	r3, [r4, #96]	; 0x60
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	6853      	ldr	r3, [r2, #4]
 800ab92:	f023 0301 	bic.w	r3, r3, #1
 800ab96:	6053      	str	r3, [r2, #4]
  hspi->RxXferCount = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800ab9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800aba0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800aba2:	2b40      	cmp	r3, #64	; 0x40
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aba4:	bf1a      	itte	ne
 800aba6:	2000      	movne	r0, #0
 800aba8:	6620      	strne	r0, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800abaa:	2001      	moveq	r0, #1
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abac:	2200      	movs	r2, #0
 800abae:	9202      	str	r2, [sp, #8]
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	68d9      	ldr	r1, [r3, #12]
 800abb4:	9102      	str	r1, [sp, #8]
 800abb6:	6899      	ldr	r1, [r3, #8]
 800abb8:	9102      	str	r1, [sp, #8]
 800abba:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800abbc:	9203      	str	r2, [sp, #12]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	9303      	str	r3, [sp, #12]
 800abc2:	9b03      	ldr	r3, [sp, #12]
  hspi->State = HAL_SPI_STATE_READY;
 800abc4:	2301      	movs	r3, #1
 800abc6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800abca:	b006      	add	sp, #24
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	bf00      	nop
 800abd0:	20000008 	.word	0x20000008
 800abd4:	057619f1 	.word	0x057619f1
 800abd8:	08009b01 	.word	0x08009b01
 800abdc:	08009a71 	.word	0x08009a71

0800abe0 <HAL_SPI_DMAPause>:
  __HAL_LOCK(hspi);
 800abe0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d00c      	beq.n	800ac02 <HAL_SPI_DMAPause+0x22>
 800abe8:	2301      	movs	r3, #1
 800abea:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800abee:	6802      	ldr	r2, [r0, #0]
 800abf0:	6853      	ldr	r3, [r2, #4]
 800abf2:	f023 0303 	bic.w	r3, r3, #3
 800abf6:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hspi);
 800abf8:	2300      	movs	r3, #0
 800abfa:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800abfe:	4618      	mov	r0, r3
 800ac00:	4770      	bx	lr
  __HAL_LOCK(hspi);
 800ac02:	2002      	movs	r0, #2
}
 800ac04:	4770      	bx	lr

0800ac06 <HAL_SPI_DMAResume>:
  __HAL_LOCK(hspi);
 800ac06:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d00c      	beq.n	800ac28 <HAL_SPI_DMAResume+0x22>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac14:	6802      	ldr	r2, [r0, #0]
 800ac16:	6853      	ldr	r3, [r2, #4]
 800ac18:	f043 0303 	orr.w	r3, r3, #3
 800ac1c:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hspi);
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800ac24:	4618      	mov	r0, r3
 800ac26:	4770      	bx	lr
  __HAL_LOCK(hspi);
 800ac28:	2002      	movs	r0, #2
}
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_SPI_DMAStop>:
{
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4604      	mov	r4, r0
  if (hspi->hdmatx != NULL)
 800ac30:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800ac32:	b148      	cbz	r0, 800ac48 <HAL_SPI_DMAStop+0x1c>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800ac34:	f7f7 fdee 	bl	8002814 <HAL_DMA_Abort>
 800ac38:	4605      	mov	r5, r0
 800ac3a:	b130      	cbz	r0, 800ac4a <HAL_SPI_DMAStop+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ac3e:	f043 0310 	orr.w	r3, r3, #16
 800ac42:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800ac44:	2501      	movs	r5, #1
 800ac46:	e000      	b.n	800ac4a <HAL_SPI_DMAStop+0x1e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac48:	2500      	movs	r5, #0
  if (hspi->hdmarx != NULL)
 800ac4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac4c:	b138      	cbz	r0, 800ac5e <HAL_SPI_DMAStop+0x32>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800ac4e:	f7f7 fde1 	bl	8002814 <HAL_DMA_Abort>
 800ac52:	b120      	cbz	r0, 800ac5e <HAL_SPI_DMAStop+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac54:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ac56:	f043 0310 	orr.w	r3, r3, #16
 800ac5a:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800ac5c:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac5e:	6822      	ldr	r2, [r4, #0]
 800ac60:	6853      	ldr	r3, [r2, #4]
 800ac62:	f023 0303 	bic.w	r3, r3, #3
 800ac66:	6053      	str	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800ac6e:	4628      	mov	r0, r5
 800ac70:	bd38      	pop	{r3, r4, r5, pc}

0800ac72 <HAL_SPI_TxCpltCallback>:
}
 800ac72:	4770      	bx	lr

0800ac74 <HAL_SPI_RxCpltCallback>:
}
 800ac74:	4770      	bx	lr

0800ac76 <HAL_SPI_TxRxCpltCallback>:
}
 800ac76:	4770      	bx	lr

0800ac78 <HAL_SPI_TxHalfCpltCallback>:
}
 800ac78:	4770      	bx	lr

0800ac7a <SPI_DMAHalfTransmitCplt>:
{
 800ac7a:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ac7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ac7e:	f7ff fffb 	bl	800ac78 <HAL_SPI_TxHalfCpltCallback>
}
 800ac82:	bd08      	pop	{r3, pc}

0800ac84 <HAL_SPI_RxHalfCpltCallback>:
}
 800ac84:	4770      	bx	lr

0800ac86 <SPI_DMAHalfReceiveCplt>:
{
 800ac86:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ac88:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ac8a:	f7ff fffb 	bl	800ac84 <HAL_SPI_RxHalfCpltCallback>
}
 800ac8e:	bd08      	pop	{r3, pc}

0800ac90 <HAL_SPI_TxRxHalfCpltCallback>:
}
 800ac90:	4770      	bx	lr

0800ac92 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800ac92:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ac94:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ac96:	f7ff fffb 	bl	800ac90 <HAL_SPI_TxRxHalfCpltCallback>
}
 800ac9a:	bd08      	pop	{r3, pc}

0800ac9c <HAL_SPI_ErrorCallback>:
}
 800ac9c:	4770      	bx	lr

0800ac9e <SPI_CloseTx_ISR>:
{
 800ac9e:	b510      	push	{r4, lr}
 800aca0:	b082      	sub	sp, #8
 800aca2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800aca4:	f7f7 f9f6 	bl	8002094 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800aca8:	6822      	ldr	r2, [r4, #0]
 800acaa:	6853      	ldr	r3, [r2, #4]
 800acac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acb0:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800acb2:	4602      	mov	r2, r0
 800acb4:	2164      	movs	r1, #100	; 0x64
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7fe fe62 	bl	8009980 <SPI_EndRxTxTransaction>
 800acbc:	b118      	cbz	r0, 800acc6 <SPI_CloseTx_ISR+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800acc0:	f043 0320 	orr.w	r3, r3, #32
 800acc4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acc6:	68a3      	ldr	r3, [r4, #8]
 800acc8:	b933      	cbnz	r3, 800acd8 <SPI_CloseTx_ISR+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acca:	9301      	str	r3, [sp, #4]
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	68da      	ldr	r2, [r3, #12]
 800acd0:	9201      	str	r2, [sp, #4]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800acd8:	2301      	movs	r3, #1
 800acda:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acde:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ace0:	b923      	cbnz	r3, 800acec <SPI_CloseTx_ISR+0x4e>
    HAL_SPI_TxCpltCallback(hspi);
 800ace2:	4620      	mov	r0, r4
 800ace4:	f7ff ffc5 	bl	800ac72 <HAL_SPI_TxCpltCallback>
}
 800ace8:	b002      	add	sp, #8
 800acea:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 800acec:	4620      	mov	r0, r4
 800acee:	f7ff ffd5 	bl	800ac9c <HAL_SPI_ErrorCallback>
 800acf2:	e7f9      	b.n	800ace8 <SPI_CloseTx_ISR+0x4a>

0800acf4 <SPI_TxISR_8BIT>:
{
 800acf4:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800acf6:	6803      	ldr	r3, [r0, #0]
 800acf8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800acfa:	7812      	ldrb	r2, [r2, #0]
 800acfc:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 800acfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ad00:	3301      	adds	r3, #1
 800ad02:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800ad04:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ad06:	3b01      	subs	r3, #1
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800ad0c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	b103      	cbz	r3, 800ad14 <SPI_TxISR_8BIT+0x20>
}
 800ad12:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800ad14:	f7ff ffc3 	bl	800ac9e <SPI_CloseTx_ISR>
}
 800ad18:	e7fb      	b.n	800ad12 <SPI_TxISR_8BIT+0x1e>

0800ad1a <SPI_TxISR_16BIT>:
{
 800ad1a:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad1c:	6803      	ldr	r3, [r0, #0]
 800ad1e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800ad20:	8812      	ldrh	r2, [r2, #0]
 800ad22:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ad26:	3302      	adds	r3, #2
 800ad28:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800ad2a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800ad32:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	b103      	cbz	r3, 800ad3a <SPI_TxISR_16BIT+0x20>
}
 800ad38:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800ad3a:	f7ff ffb0 	bl	800ac9e <SPI_CloseTx_ISR>
}
 800ad3e:	e7fb      	b.n	800ad38 <SPI_TxISR_16BIT+0x1e>

0800ad40 <SPI_CloseRx_ISR>:
{
 800ad40:	b510      	push	{r4, lr}
 800ad42:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ad44:	6802      	ldr	r2, [r0, #0]
 800ad46:	6853      	ldr	r3, [r2, #4]
 800ad48:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800ad4c:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ad4e:	f7f7 f9a1 	bl	8002094 <HAL_GetTick>
 800ad52:	4602      	mov	r2, r0
 800ad54:	2164      	movs	r1, #100	; 0x64
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7fe fe45 	bl	80099e6 <SPI_EndRxTransaction>
 800ad5c:	b118      	cbz	r0, 800ad66 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ad60:	f043 0320 	orr.w	r3, r3, #32
 800ad64:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ad66:	2301      	movs	r3, #1
 800ad68:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ad6c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ad6e:	b11b      	cbz	r3, 800ad78 <SPI_CloseRx_ISR+0x38>
      HAL_SPI_ErrorCallback(hspi);
 800ad70:	4620      	mov	r0, r4
 800ad72:	f7ff ff93 	bl	800ac9c <HAL_SPI_ErrorCallback>
}
 800ad76:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f7ff ff7b 	bl	800ac74 <HAL_SPI_RxCpltCallback>
 800ad7e:	e7fa      	b.n	800ad76 <SPI_CloseRx_ISR+0x36>

0800ad80 <SPI_RxISR_8BIT>:
{
 800ad80:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800ad82:	6802      	ldr	r2, [r0, #0]
 800ad84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ad86:	7b12      	ldrb	r2, [r2, #12]
 800ad88:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ad8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800ad90:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ad94:	3b01      	subs	r3, #1
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800ad9c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	b103      	cbz	r3, 800ada6 <SPI_RxISR_8BIT+0x26>
}
 800ada4:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 800ada6:	f7ff ffcb 	bl	800ad40 <SPI_CloseRx_ISR>
}
 800adaa:	e7fb      	b.n	800ada4 <SPI_RxISR_8BIT+0x24>

0800adac <SPI_RxISR_16BIT>:
{
 800adac:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800adae:	6803      	ldr	r3, [r0, #0]
 800adb0:	68da      	ldr	r2, [r3, #12]
 800adb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800adb4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800adb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800adb8:	3302      	adds	r3, #2
 800adba:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800adbc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800adc0:	3b01      	subs	r3, #1
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800adc8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800adcc:	b29b      	uxth	r3, r3
 800adce:	b103      	cbz	r3, 800add2 <SPI_RxISR_16BIT+0x26>
}
 800add0:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 800add2:	f7ff ffb5 	bl	800ad40 <SPI_CloseRx_ISR>
}
 800add6:	e7fb      	b.n	800add0 <SPI_RxISR_16BIT+0x24>

0800add8 <SPI_CloseRxTx_ISR>:
{
 800add8:	b510      	push	{r4, lr}
 800adda:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800addc:	f7f7 f95a 	bl	8002094 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ade0:	6822      	ldr	r2, [r4, #0]
 800ade2:	6853      	ldr	r3, [r2, #4]
 800ade4:	f023 0320 	bic.w	r3, r3, #32
 800ade8:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800adea:	4602      	mov	r2, r0
 800adec:	2164      	movs	r1, #100	; 0x64
 800adee:	4620      	mov	r0, r4
 800adf0:	f7fe fdc6 	bl	8009980 <SPI_EndRxTxTransaction>
 800adf4:	b118      	cbz	r0, 800adfe <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adf6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800adf8:	f043 0320 	orr.w	r3, r3, #32
 800adfc:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800adfe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ae00:	b993      	cbnz	r3, 800ae28 <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ae02:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	d006      	beq.n	800ae1a <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800ae12:	4620      	mov	r0, r4
 800ae14:	f7ff ff2f 	bl	800ac76 <HAL_SPI_TxRxCpltCallback>
}
 800ae18:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800ae20:	4620      	mov	r0, r4
 800ae22:	f7ff ff27 	bl	800ac74 <HAL_SPI_RxCpltCallback>
 800ae26:	e7f7      	b.n	800ae18 <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7ff ff34 	bl	800ac9c <HAL_SPI_ErrorCallback>
}
 800ae34:	e7f0      	b.n	800ae18 <SPI_CloseRxTx_ISR+0x40>

0800ae36 <SPI_2linesTxISR_8BIT>:
{
 800ae36:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 800ae38:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d917      	bls.n	800ae70 <SPI_2linesTxISR_8BIT+0x3a>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae40:	6803      	ldr	r3, [r0, #0]
 800ae42:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800ae44:	8812      	ldrh	r2, [r2, #0]
 800ae46:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae48:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ae4a:	3302      	adds	r3, #2
 800ae4c:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800ae4e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ae50:	3b02      	subs	r3, #2
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800ae56:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	b943      	cbnz	r3, 800ae6e <SPI_2linesTxISR_8BIT+0x38>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ae5c:	6802      	ldr	r2, [r0, #0]
 800ae5e:	6853      	ldr	r3, [r2, #4]
 800ae60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae64:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800ae66:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	b163      	cbz	r3, 800ae88 <SPI_2linesTxISR_8BIT+0x52>
}
 800ae6e:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae70:	6803      	ldr	r3, [r0, #0]
 800ae72:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800ae74:	7812      	ldrb	r2, [r2, #0]
 800ae76:	731a      	strb	r2, [r3, #12]
    hspi->pTxBuffPtr++;
 800ae78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 800ae7e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ae80:	3b01      	subs	r3, #1
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	87c3      	strh	r3, [r0, #62]	; 0x3e
 800ae86:	e7e6      	b.n	800ae56 <SPI_2linesTxISR_8BIT+0x20>
      SPI_CloseRxTx_ISR(hspi);
 800ae88:	f7ff ffa6 	bl	800add8 <SPI_CloseRxTx_ISR>
}
 800ae8c:	e7ef      	b.n	800ae6e <SPI_2linesTxISR_8BIT+0x38>

0800ae8e <SPI_2linesRxISR_8BIT>:
{
 800ae8e:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 800ae90:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d924      	bls.n	800aee4 <SPI_2linesRxISR_8BIT+0x56>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ae9a:	6803      	ldr	r3, [r0, #0]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aea0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800aea2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aea4:	3302      	adds	r3, #2
 800aea6:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800aea8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800aeac:	3b02      	subs	r3, #2
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800aeb4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d00c      	beq.n	800aed8 <SPI_2linesRxISR_8BIT+0x4a>
  if (hspi->RxXferCount == 0U)
 800aebe:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	b93b      	cbnz	r3, 800aed6 <SPI_2linesRxISR_8BIT+0x48>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800aec6:	6802      	ldr	r2, [r0, #0]
 800aec8:	6853      	ldr	r3, [r2, #4]
 800aeca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800aece:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800aed0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	b1a3      	cbz	r3, 800af00 <SPI_2linesRxISR_8BIT+0x72>
}
 800aed6:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aed8:	6802      	ldr	r2, [r0, #0]
 800aeda:	6853      	ldr	r3, [r2, #4]
 800aedc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aee0:	6053      	str	r3, [r2, #4]
 800aee2:	e7ec      	b.n	800aebe <SPI_2linesRxISR_8BIT+0x30>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800aee4:	6802      	ldr	r2, [r0, #0]
 800aee6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aee8:	7b12      	ldrb	r2, [r2, #12]
 800aeea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800aeec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aeee:	3301      	adds	r3, #1
 800aef0:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 800aef2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800aef6:	3b01      	subs	r3, #1
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 800aefe:	e7de      	b.n	800aebe <SPI_2linesRxISR_8BIT+0x30>
      SPI_CloseRxTx_ISR(hspi);
 800af00:	f7ff ff6a 	bl	800add8 <SPI_CloseRxTx_ISR>
}
 800af04:	e7e7      	b.n	800aed6 <SPI_2linesRxISR_8BIT+0x48>

0800af06 <SPI_2linesTxISR_16BIT>:
{
 800af06:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af08:	6803      	ldr	r3, [r0, #0]
 800af0a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800af0c:	8812      	ldrh	r2, [r2, #0]
 800af0e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800af10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800af12:	3302      	adds	r3, #2
 800af14:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800af16:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800af18:	3b01      	subs	r3, #1
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800af1e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800af20:	b29b      	uxth	r3, r3
 800af22:	b943      	cbnz	r3, 800af36 <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800af24:	6802      	ldr	r2, [r0, #0]
 800af26:	6853      	ldr	r3, [r2, #4]
 800af28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af2c:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800af2e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800af32:	b29b      	uxth	r3, r3
 800af34:	b103      	cbz	r3, 800af38 <SPI_2linesTxISR_16BIT+0x32>
}
 800af36:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800af38:	f7ff ff4e 	bl	800add8 <SPI_CloseRxTx_ISR>
}
 800af3c:	e7fb      	b.n	800af36 <SPI_2linesTxISR_16BIT+0x30>

0800af3e <SPI_2linesRxISR_16BIT>:
{
 800af3e:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800af40:	6803      	ldr	r3, [r0, #0]
 800af42:	68da      	ldr	r2, [r3, #12]
 800af44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af46:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800af48:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af4a:	3302      	adds	r3, #2
 800af4c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800af4e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800af52:	3b01      	subs	r3, #1
 800af54:	b29b      	uxth	r3, r3
 800af56:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800af5a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800af5e:	b29b      	uxth	r3, r3
 800af60:	b93b      	cbnz	r3, 800af72 <SPI_2linesRxISR_16BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800af62:	6802      	ldr	r2, [r0, #0]
 800af64:	6853      	ldr	r3, [r2, #4]
 800af66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af6a:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800af6c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800af6e:	b29b      	uxth	r3, r3
 800af70:	b103      	cbz	r3, 800af74 <SPI_2linesRxISR_16BIT+0x36>
}
 800af72:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800af74:	f7ff ff30 	bl	800add8 <SPI_CloseRxTx_ISR>
}
 800af78:	e7fb      	b.n	800af72 <SPI_2linesRxISR_16BIT+0x34>

0800af7a <SPI_DMAError>:
{
 800af7a:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800af7e:	6802      	ldr	r2, [r0, #0]
 800af80:	6853      	ldr	r3, [r2, #4]
 800af82:	f023 0303 	bic.w	r3, r3, #3
 800af86:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af88:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800af8a:	f043 0310 	orr.w	r3, r3, #16
 800af8e:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800af90:	2301      	movs	r3, #1
 800af92:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 800af96:	f7ff fe81 	bl	800ac9c <HAL_SPI_ErrorCallback>
}
 800af9a:	bd08      	pop	{r3, pc}

0800af9c <SPI_DMATransmitCplt>:
{
 800af9c:	b530      	push	{r4, r5, lr}
 800af9e:	b083      	sub	sp, #12
 800afa0:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800afa2:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800afa4:	f7f7 f876 	bl	8002094 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f013 0f20 	tst.w	r3, #32
 800afb0:	d123      	bne.n	800affa <SPI_DMATransmitCplt+0x5e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800afb2:	6822      	ldr	r2, [r4, #0]
 800afb4:	6853      	ldr	r3, [r2, #4]
 800afb6:	f023 0320 	bic.w	r3, r3, #32
 800afba:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	6853      	ldr	r3, [r2, #4]
 800afc0:	f023 0302 	bic.w	r3, r3, #2
 800afc4:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800afc6:	4602      	mov	r2, r0
 800afc8:	2164      	movs	r1, #100	; 0x64
 800afca:	4620      	mov	r0, r4
 800afcc:	f7fe fcd8 	bl	8009980 <SPI_EndRxTxTransaction>
 800afd0:	b118      	cbz	r0, 800afda <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afd2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800afd4:	f043 0320 	orr.w	r3, r3, #32
 800afd8:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800afda:	68a3      	ldr	r3, [r4, #8]
 800afdc:	b933      	cbnz	r3, 800afec <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afde:	9301      	str	r3, [sp, #4]
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	9201      	str	r2, [sp, #4]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800afec:	2300      	movs	r3, #0
 800afee:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800aff0:	2301      	movs	r3, #1
 800aff2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aff6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800aff8:	b923      	cbnz	r3, 800b004 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 800affa:	4620      	mov	r0, r4
 800affc:	f7ff fe39 	bl	800ac72 <HAL_SPI_TxCpltCallback>
}
 800b000:	b003      	add	sp, #12
 800b002:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800b004:	4620      	mov	r0, r4
 800b006:	f7ff fe49 	bl	800ac9c <HAL_SPI_ErrorCallback>
      return;
 800b00a:	e7f9      	b.n	800b000 <SPI_DMATransmitCplt+0x64>

0800b00c <SPI_DMAReceiveCplt>:
{
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b010:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800b012:	f7f7 f83f 	bl	8002094 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b016:	682b      	ldr	r3, [r5, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f013 0f20 	tst.w	r3, #32
 800b01e:	d119      	bne.n	800b054 <SPI_DMAReceiveCplt+0x48>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b020:	6822      	ldr	r2, [r4, #0]
 800b022:	6853      	ldr	r3, [r2, #4]
 800b024:	f023 0320 	bic.w	r3, r3, #32
 800b028:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b02a:	6822      	ldr	r2, [r4, #0]
 800b02c:	6853      	ldr	r3, [r2, #4]
 800b02e:	f023 0303 	bic.w	r3, r3, #3
 800b032:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b034:	4602      	mov	r2, r0
 800b036:	2164      	movs	r1, #100	; 0x64
 800b038:	4620      	mov	r0, r4
 800b03a:	f7fe fcd4 	bl	80099e6 <SPI_EndRxTransaction>
 800b03e:	b108      	cbz	r0, 800b044 <SPI_DMAReceiveCplt+0x38>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b040:	2320      	movs	r3, #32
 800b042:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 800b044:	2300      	movs	r3, #0
 800b046:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b04a:	2301      	movs	r3, #1
 800b04c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b050:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b052:	b91b      	cbnz	r3, 800b05c <SPI_DMAReceiveCplt+0x50>
  HAL_SPI_RxCpltCallback(hspi);
 800b054:	4620      	mov	r0, r4
 800b056:	f7ff fe0d 	bl	800ac74 <HAL_SPI_RxCpltCallback>
}
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800b05c:	4620      	mov	r0, r4
 800b05e:	f7ff fe1d 	bl	800ac9c <HAL_SPI_ErrorCallback>
      return;
 800b062:	e7fa      	b.n	800b05a <SPI_DMAReceiveCplt+0x4e>

0800b064 <SPI_DMATransmitReceiveCplt>:
{
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b068:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800b06a:	f7f7 f813 	bl	8002094 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b06e:	682b      	ldr	r3, [r5, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f013 0f20 	tst.w	r3, #32
 800b076:	d11c      	bne.n	800b0b2 <SPI_DMATransmitReceiveCplt+0x4e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b078:	6822      	ldr	r2, [r4, #0]
 800b07a:	6853      	ldr	r3, [r2, #4]
 800b07c:	f023 0320 	bic.w	r3, r3, #32
 800b080:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b082:	4602      	mov	r2, r0
 800b084:	2164      	movs	r1, #100	; 0x64
 800b086:	4620      	mov	r0, r4
 800b088:	f7fe fc7a 	bl	8009980 <SPI_EndRxTxTransaction>
 800b08c:	b118      	cbz	r0, 800b096 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b08e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b090:	f043 0320 	orr.w	r3, r3, #32
 800b094:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b096:	6822      	ldr	r2, [r4, #0]
 800b098:	6853      	ldr	r3, [r2, #4]
 800b09a:	f023 0303 	bic.w	r3, r3, #3
 800b09e:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800b0a4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b0b0:	b91b      	cbnz	r3, 800b0ba <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f7ff fddf 	bl	800ac76 <HAL_SPI_TxRxCpltCallback>
}
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f7ff fdee 	bl	800ac9c <HAL_SPI_ErrorCallback>
      return;
 800b0c0:	e7fa      	b.n	800b0b8 <SPI_DMATransmitReceiveCplt+0x54>
	...

0800b0c4 <HAL_SPI_IRQHandler>:
{
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800b0ca:	6801      	ldr	r1, [r0, #0]
 800b0cc:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800b0ce:	688a      	ldr	r2, [r1, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b0d0:	0993      	lsrs	r3, r2, #6
 800b0d2:	f013 0501 	ands.w	r5, r3, #1
 800b0d6:	d109      	bne.n	800b0ec <HAL_SPI_IRQHandler+0x28>
 800b0d8:	f012 0f01 	tst.w	r2, #1
 800b0dc:	d006      	beq.n	800b0ec <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b0de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0e2:	d003      	beq.n	800b0ec <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800b0e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4798      	blx	r3
    return;
 800b0ea:	e008      	b.n	800b0fe <HAL_SPI_IRQHandler+0x3a>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b0ec:	f012 0f02 	tst.w	r2, #2
 800b0f0:	d007      	beq.n	800b102 <HAL_SPI_IRQHandler+0x3e>
 800b0f2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b0f6:	d004      	beq.n	800b102 <HAL_SPI_IRQHandler+0x3e>
    hspi->TxISR(hspi);
 800b0f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	4798      	blx	r3
}
 800b0fe:	b004      	add	sp, #16
 800b100:	bd70      	pop	{r4, r5, r6, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b102:	0956      	lsrs	r6, r2, #5
 800b104:	4333      	orrs	r3, r6
 800b106:	f013 0f01 	tst.w	r3, #1
 800b10a:	d05e      	beq.n	800b1ca <HAL_SPI_IRQHandler+0x106>
 800b10c:	f010 0f20 	tst.w	r0, #32
 800b110:	d0f5      	beq.n	800b0fe <HAL_SPI_IRQHandler+0x3a>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b112:	b17d      	cbz	r5, 800b134 <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b114:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d059      	beq.n	800b1d2 <HAL_SPI_IRQHandler+0x10e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b11e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b120:	f043 0304 	orr.w	r3, r3, #4
 800b124:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b126:	2300      	movs	r3, #0
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	68cb      	ldr	r3, [r1, #12]
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	688b      	ldr	r3, [r1, #8]
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	9b00      	ldr	r3, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b134:	f016 0f01 	tst.w	r6, #1
 800b138:	d00c      	beq.n	800b154 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b13a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b13c:	f043 0301 	orr.w	r3, r3, #1
 800b140:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b142:	2300      	movs	r3, #0
 800b144:	9302      	str	r3, [sp, #8]
 800b146:	688b      	ldr	r3, [r1, #8]
 800b148:	9302      	str	r3, [sp, #8]
 800b14a:	680b      	ldr	r3, [r1, #0]
 800b14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b150:	600b      	str	r3, [r1, #0]
 800b152:	9b02      	ldr	r3, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b154:	f412 7f80 	tst.w	r2, #256	; 0x100
 800b158:	d009      	beq.n	800b16e <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b15a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b15c:	f043 0308 	orr.w	r3, r3, #8
 800b160:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b162:	2300      	movs	r3, #0
 800b164:	9303      	str	r3, [sp, #12]
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	9303      	str	r3, [sp, #12]
 800b16c:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b16e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0c4      	beq.n	800b0fe <HAL_SPI_IRQHandler+0x3a>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	6853      	ldr	r3, [r2, #4]
 800b178:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b17c:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800b17e:	2301      	movs	r3, #1
 800b180:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b184:	f010 0f03 	tst.w	r0, #3
 800b188:	d02b      	beq.n	800b1e2 <HAL_SPI_IRQHandler+0x11e>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	6853      	ldr	r3, [r2, #4]
 800b18e:	f023 0303 	bic.w	r3, r3, #3
 800b192:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800b194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b196:	b14b      	cbz	r3, 800b1ac <HAL_SPI_IRQHandler+0xe8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b198:	4a14      	ldr	r2, [pc, #80]	; (800b1ec <HAL_SPI_IRQHandler+0x128>)
 800b19a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b19e:	f7f7 fb5e 	bl	800285e <HAL_DMA_Abort_IT>
 800b1a2:	b118      	cbz	r0, 800b1ac <HAL_SPI_IRQHandler+0xe8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b1a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1aa:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b1ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d0a5      	beq.n	800b0fe <HAL_SPI_IRQHandler+0x3a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b1b2:	4a0e      	ldr	r2, [pc, #56]	; (800b1ec <HAL_SPI_IRQHandler+0x128>)
 800b1b4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b1b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1b8:	f7f7 fb51 	bl	800285e <HAL_DMA_Abort_IT>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d09e      	beq.n	800b0fe <HAL_SPI_IRQHandler+0x3a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b1c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c6:	6623      	str	r3, [r4, #96]	; 0x60
 800b1c8:	e799      	b.n	800b0fe <HAL_SPI_IRQHandler+0x3a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b1ca:	f412 7f80 	tst.w	r2, #256	; 0x100
 800b1ce:	d19d      	bne.n	800b10c <HAL_SPI_IRQHandler+0x48>
 800b1d0:	e795      	b.n	800b0fe <HAL_SPI_IRQHandler+0x3a>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	68cb      	ldr	r3, [r1, #12]
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	688b      	ldr	r3, [r1, #8]
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	9b01      	ldr	r3, [sp, #4]
        return;
 800b1e0:	e78d      	b.n	800b0fe <HAL_SPI_IRQHandler+0x3a>
        HAL_SPI_ErrorCallback(hspi);
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f7ff fd5a 	bl	800ac9c <HAL_SPI_ErrorCallback>
 800b1e8:	e789      	b.n	800b0fe <HAL_SPI_IRQHandler+0x3a>
 800b1ea:	bf00      	nop
 800b1ec:	0800b1f1 	.word	0x0800b1f1

0800b1f0 <SPI_DMAAbortOnError>:
{
 800b1f0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b1f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b1fa:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800b1fc:	f7ff fd4e 	bl	800ac9c <HAL_SPI_ErrorCallback>
}
 800b200:	bd08      	pop	{r3, pc}

0800b202 <HAL_SPI_AbortCpltCallback>:
}
 800b202:	4770      	bx	lr

0800b204 <HAL_SPI_Abort_IT>:
{
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	4604      	mov	r4, r0
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800b20a:	4b50      	ldr	r3, [pc, #320]	; (800b34c <HAL_SPI_Abort_IT+0x148>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a50      	ldr	r2, [pc, #320]	; (800b350 <HAL_SPI_Abort_IT+0x14c>)
 800b210:	fba2 2303 	umull	r2, r3, r2, r3
 800b214:	0a5b      	lsrs	r3, r3, #9
 800b216:	2264      	movs	r2, #100	; 0x64
 800b218:	fb02 f303 	mul.w	r3, r2, r3
 800b21c:	9302      	str	r3, [sp, #8]
  count = resetcount;
 800b21e:	9b02      	ldr	r3, [sp, #8]
 800b220:	9303      	str	r3, [sp, #12]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800b222:	6802      	ldr	r2, [r0, #0]
 800b224:	6853      	ldr	r3, [r2, #4]
 800b226:	f023 0320 	bic.w	r3, r3, #32
 800b22a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800b22c:	6802      	ldr	r2, [r0, #0]
 800b22e:	6853      	ldr	r3, [r2, #4]
 800b230:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b234:	d012      	beq.n	800b25c <HAL_SPI_Abort_IT+0x58>
    hspi->TxISR = SPI_AbortTx_ISR;
 800b236:	4b47      	ldr	r3, [pc, #284]	; (800b354 <HAL_SPI_Abort_IT+0x150>)
 800b238:	6503      	str	r3, [r0, #80]	; 0x50
      if (count == 0U)
 800b23a:	9b03      	ldr	r3, [sp, #12]
 800b23c:	b143      	cbz	r3, 800b250 <HAL_SPI_Abort_IT+0x4c>
      count--;
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	3b01      	subs	r3, #1
 800b242:	9303      	str	r3, [sp, #12]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800b244:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b07      	cmp	r3, #7
 800b24c:	d1f5      	bne.n	800b23a <HAL_SPI_Abort_IT+0x36>
 800b24e:	e003      	b.n	800b258 <HAL_SPI_Abort_IT+0x54>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b250:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b256:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800b258:	9b02      	ldr	r3, [sp, #8]
 800b25a:	9303      	str	r3, [sp, #12]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800b25c:	6853      	ldr	r3, [r2, #4]
 800b25e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b262:	d012      	beq.n	800b28a <HAL_SPI_Abort_IT+0x86>
    hspi->RxISR = SPI_AbortRx_ISR;
 800b264:	4b3c      	ldr	r3, [pc, #240]	; (800b358 <HAL_SPI_Abort_IT+0x154>)
 800b266:	64e3      	str	r3, [r4, #76]	; 0x4c
      if (count == 0U)
 800b268:	9b03      	ldr	r3, [sp, #12]
 800b26a:	b143      	cbz	r3, 800b27e <HAL_SPI_Abort_IT+0x7a>
      count--;
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	3b01      	subs	r3, #1
 800b270:	9303      	str	r3, [sp, #12]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800b272:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b07      	cmp	r3, #7
 800b27a:	d1f5      	bne.n	800b268 <HAL_SPI_Abort_IT+0x64>
 800b27c:	e003      	b.n	800b286 <HAL_SPI_Abort_IT+0x82>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b27e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b284:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800b286:	9b02      	ldr	r3, [sp, #8]
 800b288:	9303      	str	r3, [sp, #12]
  if (hspi->hdmatx != NULL)
 800b28a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b28c:	b133      	cbz	r3, 800b29c <HAL_SPI_Abort_IT+0x98>
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800b28e:	6852      	ldr	r2, [r2, #4]
 800b290:	f012 0f02 	tst.w	r2, #2
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800b294:	bf14      	ite	ne
 800b296:	4a31      	ldrne	r2, [pc, #196]	; (800b35c <HAL_SPI_Abort_IT+0x158>)
      hspi->hdmatx->XferAbortCallback = NULL;
 800b298:	2200      	moveq	r2, #0
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
  if (hspi->hdmarx != NULL)
 800b29c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b29e:	b13b      	cbz	r3, 800b2b0 <HAL_SPI_Abort_IT+0xac>
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800b2a0:	6822      	ldr	r2, [r4, #0]
 800b2a2:	6852      	ldr	r2, [r2, #4]
 800b2a4:	f012 0f01 	tst.w	r2, #1
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800b2a8:	bf14      	ite	ne
 800b2aa:	4a2d      	ldrne	r2, [pc, #180]	; (800b360 <HAL_SPI_Abort_IT+0x15c>)
      hspi->hdmarx->XferAbortCallback = NULL;
 800b2ac:	2200      	moveq	r2, #0
 800b2ae:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	f013 0f02 	tst.w	r3, #2
 800b2b8:	d00b      	beq.n	800b2d2 <HAL_SPI_Abort_IT+0xce>
    if (hspi->hdmatx != NULL)
 800b2ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2bc:	b148      	cbz	r0, 800b2d2 <HAL_SPI_Abort_IT+0xce>
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800b2be:	f7f7 face 	bl	800285e <HAL_DMA_Abort_IT>
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d037      	beq.n	800b338 <HAL_SPI_Abort_IT+0x134>
        hspi->hdmatx->XferAbortCallback = NULL;
 800b2c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b2ce:	2340      	movs	r3, #64	; 0x40
 800b2d0:	6623      	str	r3, [r4, #96]	; 0x60
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	f013 0f01 	tst.w	r3, #1
 800b2da:	d010      	beq.n	800b2fe <HAL_SPI_Abort_IT+0xfa>
    if (hspi->hdmarx != NULL)
 800b2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2de:	2601      	movs	r6, #1
 800b2e0:	b168      	cbz	r0, 800b2fe <HAL_SPI_Abort_IT+0xfa>
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800b2e2:	f7f7 fabc 	bl	800285e <HAL_DMA_Abort_IT>
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	b130      	cbz	r0, 800b2f8 <HAL_SPI_Abort_IT+0xf4>
        hspi->hdmarx->XferAbortCallback = NULL;
 800b2ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b2f0:	2340      	movs	r3, #64	; 0x40
 800b2f2:	6623      	str	r3, [r4, #96]	; 0x60
  errorcode = HAL_OK;
 800b2f4:	2500      	movs	r5, #0
  if (abortcplt == 1U)
 800b2f6:	b916      	cbnz	r6, 800b2fe <HAL_SPI_Abort_IT+0xfa>
}
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	b004      	add	sp, #16
 800b2fc:	bd70      	pop	{r4, r5, r6, pc}
    hspi->RxXferCount = 0U;
 800b2fe:	2300      	movs	r3, #0
 800b300:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->TxXferCount = 0U;
 800b304:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800b306:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b308:	2b40      	cmp	r3, #64	; 0x40
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b30a:	bf1a      	itte	ne
 800b30c:	2500      	movne	r5, #0
 800b30e:	6625      	strne	r5, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800b310:	2501      	moveq	r5, #1
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b312:	2200      	movs	r2, #0
 800b314:	9200      	str	r2, [sp, #0]
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	68d9      	ldr	r1, [r3, #12]
 800b31a:	9100      	str	r1, [sp, #0]
 800b31c:	6899      	ldr	r1, [r3, #8]
 800b31e:	9100      	str	r1, [sp, #0]
 800b320:	9900      	ldr	r1, [sp, #0]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b322:	9201      	str	r2, [sp, #4]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY;
 800b32a:	2301      	movs	r3, #1
 800b32c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    HAL_SPI_AbortCpltCallback(hspi);
 800b330:	4620      	mov	r0, r4
 800b332:	f7ff ff66 	bl	800b202 <HAL_SPI_AbortCpltCallback>
 800b336:	e7df      	b.n	800b2f8 <HAL_SPI_Abort_IT+0xf4>
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f013 0f01 	tst.w	r3, #1
 800b340:	d0da      	beq.n	800b2f8 <HAL_SPI_Abort_IT+0xf4>
    if (hspi->hdmarx != NULL)
 800b342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b344:	2800      	cmp	r0, #0
 800b346:	d0d7      	beq.n	800b2f8 <HAL_SPI_Abort_IT+0xf4>
        abortcplt = 0U;
 800b348:	2600      	movs	r6, #0
 800b34a:	e7ca      	b.n	800b2e2 <HAL_SPI_Abort_IT+0xde>
 800b34c:	20000008 	.word	0x20000008
 800b350:	057619f1 	.word	0x057619f1
 800b354:	08009b01 	.word	0x08009b01
 800b358:	08009a71 	.word	0x08009a71
 800b35c:	0800b3f9 	.word	0x0800b3f9
 800b360:	0800b365 	.word	0x0800b365

0800b364 <SPI_DMARxAbortCallback>:
{
 800b364:	b530      	push	{r4, r5, lr}
 800b366:	b085      	sub	sp, #20
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b368:	6a84      	ldr	r4, [r0, #40]	; 0x28
  __HAL_SPI_DISABLE(hspi);
 800b36a:	6822      	ldr	r2, [r4, #0]
 800b36c:	6813      	ldr	r3, [r2, #0]
 800b36e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b372:	6013      	str	r3, [r2, #0]
  hspi->hdmarx->XferAbortCallback = NULL;
 800b374:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b376:	2500      	movs	r5, #0
 800b378:	639d      	str	r5, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b37a:	6822      	ldr	r2, [r4, #0]
 800b37c:	6853      	ldr	r3, [r2, #4]
 800b37e:	f023 0301 	bic.w	r3, r3, #1
 800b382:	6053      	str	r3, [r2, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b384:	f7f6 fe86 	bl	8002094 <HAL_GetTick>
 800b388:	9000      	str	r0, [sp, #0]
 800b38a:	2364      	movs	r3, #100	; 0x64
 800b38c:	462a      	mov	r2, r5
 800b38e:	2180      	movs	r1, #128	; 0x80
 800b390:	4620      	mov	r0, r4
 800b392:	f7fe fa61 	bl	8009858 <SPI_WaitFlagStateUntilTimeout>
 800b396:	b108      	cbz	r0, 800b39c <SPI_DMARxAbortCallback+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b398:	2340      	movs	r3, #64	; 0x40
 800b39a:	6623      	str	r3, [r4, #96]	; 0x60
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b39c:	f7f6 fe7a 	bl	8002094 <HAL_GetTick>
 800b3a0:	9000      	str	r0, [sp, #0]
 800b3a2:	2364      	movs	r3, #100	; 0x64
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f7fe fa9c 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 800b3b0:	b108      	cbz	r0, 800b3b6 <SPI_DMARxAbortCallback+0x52>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b3b2:	2340      	movs	r3, #64	; 0x40
 800b3b4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->hdmatx != NULL)
 800b3b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b3b8:	b10b      	cbz	r3, 800b3be <SPI_DMARxAbortCallback+0x5a>
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800b3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3bc:	b9d3      	cbnz	r3, 800b3f4 <SPI_DMARxAbortCallback+0x90>
  hspi->RxXferCount = 0U;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b3c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800b3c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b3c8:	2b40      	cmp	r3, #64	; 0x40
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3ca:	bf1c      	itt	ne
 800b3cc:	2300      	movne	r3, #0
 800b3ce:	6623      	strne	r3, [r4, #96]	; 0x60
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	9202      	str	r2, [sp, #8]
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	68d9      	ldr	r1, [r3, #12]
 800b3d8:	9102      	str	r1, [sp, #8]
 800b3da:	6899      	ldr	r1, [r3, #8]
 800b3dc:	9102      	str	r1, [sp, #8]
 800b3de:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b3e0:	9203      	str	r2, [sp, #12]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	9303      	str	r3, [sp, #12]
 800b3e6:	9b03      	ldr	r3, [sp, #12]
  hspi->State  = HAL_SPI_STATE_READY;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_SPI_AbortCpltCallback(hspi);
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f7ff ff07 	bl	800b202 <HAL_SPI_AbortCpltCallback>
}
 800b3f4:	b005      	add	sp, #20
 800b3f6:	bd30      	pop	{r4, r5, pc}

0800b3f8 <SPI_DMATxAbortCallback>:
{
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	b084      	sub	sp, #16
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b3fc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hspi->hdmatx->XferAbortCallback = NULL;
 800b3fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b400:	2200      	movs	r2, #0
 800b402:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b404:	6822      	ldr	r2, [r4, #0]
 800b406:	6853      	ldr	r3, [r2, #4]
 800b408:	f023 0302 	bic.w	r3, r3, #2
 800b40c:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b40e:	f7f6 fe41 	bl	8002094 <HAL_GetTick>
 800b412:	4602      	mov	r2, r0
 800b414:	2164      	movs	r1, #100	; 0x64
 800b416:	4620      	mov	r0, r4
 800b418:	f7fe fab2 	bl	8009980 <SPI_EndRxTxTransaction>
 800b41c:	b108      	cbz	r0, 800b422 <SPI_DMATxAbortCallback+0x2a>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b41e:	2340      	movs	r3, #64	; 0x40
 800b420:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_SPI_DISABLE(hspi);
 800b422:	6822      	ldr	r2, [r4, #0]
 800b424:	6813      	ldr	r3, [r2, #0]
 800b426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b42a:	6013      	str	r3, [r2, #0]
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b42c:	f7f6 fe32 	bl	8002094 <HAL_GetTick>
 800b430:	9000      	str	r0, [sp, #0]
 800b432:	2364      	movs	r3, #100	; 0x64
 800b434:	2200      	movs	r2, #0
 800b436:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b43a:	4620      	mov	r0, r4
 800b43c:	f7fe fa54 	bl	80098e8 <SPI_WaitFifoStateUntilTimeout>
 800b440:	b108      	cbz	r0, 800b446 <SPI_DMATxAbortCallback+0x4e>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b442:	2340      	movs	r3, #64	; 0x40
 800b444:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->hdmarx != NULL)
 800b446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b448:	b10b      	cbz	r3, 800b44e <SPI_DMATxAbortCallback+0x56>
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800b44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44c:	b9d3      	cbnz	r3, 800b484 <SPI_DMATxAbortCallback+0x8c>
  hspi->RxXferCount = 0U;
 800b44e:	2300      	movs	r3, #0
 800b450:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b454:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800b456:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b458:	2b40      	cmp	r3, #64	; 0x40
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b45a:	bf1c      	itt	ne
 800b45c:	2300      	movne	r3, #0
 800b45e:	6623      	strne	r3, [r4, #96]	; 0x60
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b460:	2200      	movs	r2, #0
 800b462:	9202      	str	r2, [sp, #8]
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	68d9      	ldr	r1, [r3, #12]
 800b468:	9102      	str	r1, [sp, #8]
 800b46a:	6899      	ldr	r1, [r3, #8]
 800b46c:	9102      	str	r1, [sp, #8]
 800b46e:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b470:	9203      	str	r2, [sp, #12]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	9303      	str	r3, [sp, #12]
 800b476:	9b03      	ldr	r3, [sp, #12]
  hspi->State  = HAL_SPI_STATE_READY;
 800b478:	2301      	movs	r3, #1
 800b47a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_SPI_AbortCpltCallback(hspi);
 800b47e:	4620      	mov	r0, r4
 800b480:	f7ff febf 	bl	800b202 <HAL_SPI_AbortCpltCallback>
}
 800b484:	b004      	add	sp, #16
 800b486:	bd10      	pop	{r4, pc}

0800b488 <HAL_SPI_GetState>:
  return hspi->State;
 800b488:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 800b48c:	4770      	bx	lr

0800b48e <HAL_SPI_GetError>:
  return hspi->ErrorCode;
 800b48e:	6e00      	ldr	r0, [r0, #96]	; 0x60
}
 800b490:	4770      	bx	lr

0800b492 <HAL_SPIEx_FlushRxFifo>:
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800b492:	6802      	ldr	r2, [r0, #0]
 800b494:	2304      	movs	r3, #4
 800b496:	6891      	ldr	r1, [r2, #8]
 800b498:	f411 6fc0 	tst.w	r1, #1536	; 0x600
 800b49c:	d011      	beq.n	800b4c2 <HAL_SPIEx_FlushRxFifo+0x30>
{
 800b49e:	b082      	sub	sp, #8
 800b4a0:	e003      	b.n	800b4aa <HAL_SPIEx_FlushRxFifo+0x18>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800b4a2:	6891      	ldr	r1, [r2, #8]
 800b4a4:	f411 6fc0 	tst.w	r1, #1536	; 0x600
 800b4a8:	d009      	beq.n	800b4be <HAL_SPIEx_FlushRxFifo+0x2c>
  {
    count++;
    tmpreg = hspi->Instance->DR;
 800b4aa:	68d1      	ldr	r1, [r2, #12]
 800b4ac:	9101      	str	r1, [sp, #4]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800b4ae:	9901      	ldr	r1, [sp, #4]
 800b4b0:	3b01      	subs	r3, #1
    if (count == SPI_FIFO_SIZE)
 800b4b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800b4b6:	d1f4      	bne.n	800b4a2 <HAL_SPIEx_FlushRxFifo+0x10>
    {
      return HAL_TIMEOUT;
 800b4b8:	2003      	movs	r0, #3
    }
  }
  return HAL_OK;
}
 800b4ba:	b002      	add	sp, #8
 800b4bc:	4770      	bx	lr
  return HAL_OK;
 800b4be:	2000      	movs	r0, #0
 800b4c0:	e7fb      	b.n	800b4ba <HAL_SPIEx_FlushRxFifo+0x28>
 800b4c2:	2000      	movs	r0, #0
}
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4c8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4ca:	6a03      	ldr	r3, [r0, #32]
 800b4cc:	f023 0301 	bic.w	r3, r3, #1
 800b4d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4d4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4d6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b4dc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4e0:	680d      	ldr	r5, [r1, #0]
 800b4e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4e4:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4e8:	688d      	ldr	r5, [r1, #8]
 800b4ea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4ec:	4d20      	ldr	r5, [pc, #128]	; (800b570 <TIM_OC1_SetConfig+0xa8>)
 800b4ee:	42a8      	cmp	r0, r5
 800b4f0:	d02a      	beq.n	800b548 <TIM_OC1_SetConfig+0x80>
 800b4f2:	4f20      	ldr	r7, [pc, #128]	; (800b574 <TIM_OC1_SetConfig+0xac>)
 800b4f4:	42b8      	cmp	r0, r7
 800b4f6:	d019      	beq.n	800b52c <TIM_OC1_SetConfig+0x64>
 800b4f8:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800b4fc:	42a8      	cmp	r0, r5
 800b4fe:	d01c      	beq.n	800b53a <TIM_OC1_SetConfig+0x72>
 800b500:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b504:	42a8      	cmp	r0, r5
 800b506:	d00a      	beq.n	800b51e <TIM_OC1_SetConfig+0x56>
 800b508:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b50c:	42a8      	cmp	r0, r5
 800b50e:	d127      	bne.n	800b560 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b510:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b514:	68cd      	ldr	r5, [r1, #12]
 800b516:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b518:	f023 0304 	bic.w	r3, r3, #4
 800b51c:	e01a      	b.n	800b554 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b51e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b522:	68cd      	ldr	r5, [r1, #12]
 800b524:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b526:	f023 0304 	bic.w	r3, r3, #4
 800b52a:	e013      	b.n	800b554 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b52c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b530:	68cd      	ldr	r5, [r1, #12]
 800b532:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b534:	f023 0304 	bic.w	r3, r3, #4
 800b538:	e00c      	b.n	800b554 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b53a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b53e:	68cd      	ldr	r5, [r1, #12]
 800b540:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b542:	f023 0304 	bic.w	r3, r3, #4
 800b546:	e005      	b.n	800b554 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b548:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b54c:	68cd      	ldr	r5, [r1, #12]
 800b54e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b550:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b554:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b558:	694c      	ldr	r4, [r1, #20]
 800b55a:	698f      	ldr	r7, [r1, #24]
 800b55c:	433c      	orrs	r4, r7
 800b55e:	4326      	orrs	r6, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b560:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b562:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b564:	684a      	ldr	r2, [r1, #4]
 800b566:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b568:	6203      	str	r3, [r0, #32]
}
 800b56a:	bcf0      	pop	{r4, r5, r6, r7}
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	40012c00 	.word	0x40012c00
 800b574:	40013400 	.word	0x40013400

0800b578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b578:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b57a:	6a03      	ldr	r3, [r0, #32]
 800b57c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b580:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b582:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b584:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b586:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b588:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b58c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b590:	680d      	ldr	r5, [r1, #0]
 800b592:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b598:	688d      	ldr	r5, [r1, #8]
 800b59a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b59e:	4d18      	ldr	r5, [pc, #96]	; (800b600 <TIM_OC3_SetConfig+0x88>)
 800b5a0:	42a8      	cmp	r0, r5
 800b5a2:	d017      	beq.n	800b5d4 <TIM_OC3_SetConfig+0x5c>
 800b5a4:	4f17      	ldr	r7, [pc, #92]	; (800b604 <TIM_OC3_SetConfig+0x8c>)
 800b5a6:	42b8      	cmp	r0, r7
 800b5a8:	d00c      	beq.n	800b5c4 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5aa:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800b5ae:	42a8      	cmp	r0, r5
 800b5b0:	d017      	beq.n	800b5e2 <TIM_OC3_SetConfig+0x6a>
 800b5b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b5b6:	42a8      	cmp	r0, r5
 800b5b8:	d013      	beq.n	800b5e2 <TIM_OC3_SetConfig+0x6a>
 800b5ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b5be:	42a8      	cmp	r0, r5
 800b5c0:	d116      	bne.n	800b5f0 <TIM_OC3_SetConfig+0x78>
 800b5c2:	e00e      	b.n	800b5e2 <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5c8:	68cd      	ldr	r5, [r1, #12]
 800b5ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5d2:	e006      	b.n	800b5e2 <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5d8:	68cd      	ldr	r5, [r1, #12]
 800b5da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5e2:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5e6:	694c      	ldr	r4, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5e8:	698f      	ldr	r7, [r1, #24]
 800b5ea:	433c      	orrs	r4, r7
 800b5ec:	ea46 1604 	orr.w	r6, r6, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5f0:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5f2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5f4:	684a      	ldr	r2, [r1, #4]
 800b5f6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5f8:	6203      	str	r3, [r0, #32]
}
 800b5fa:	bcf0      	pop	{r4, r5, r6, r7}
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	40012c00 	.word	0x40012c00
 800b604:	40013400 	.word	0x40013400

0800b608 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b608:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b60a:	6a03      	ldr	r3, [r0, #32]
 800b60c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b610:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b612:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b614:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b616:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b618:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b61c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b620:	680d      	ldr	r5, [r1, #0]
 800b622:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b62a:	688d      	ldr	r5, [r1, #8]
 800b62c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b630:	4d0f      	ldr	r5, [pc, #60]	; (800b670 <TIM_OC4_SetConfig+0x68>)
 800b632:	42a8      	cmp	r0, r5
 800b634:	d00f      	beq.n	800b656 <TIM_OC4_SetConfig+0x4e>
 800b636:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b63a:	42a8      	cmp	r0, r5
 800b63c:	d00b      	beq.n	800b656 <TIM_OC4_SetConfig+0x4e>
 800b63e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b642:	42a8      	cmp	r0, r5
 800b644:	d007      	beq.n	800b656 <TIM_OC4_SetConfig+0x4e>
 800b646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b64a:	42a8      	cmp	r0, r5
 800b64c:	d003      	beq.n	800b656 <TIM_OC4_SetConfig+0x4e>
 800b64e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b652:	42a8      	cmp	r0, r5
 800b654:	d104      	bne.n	800b660 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b656:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b65a:	694d      	ldr	r5, [r1, #20]
 800b65c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b660:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b662:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b664:	684a      	ldr	r2, [r1, #4]
 800b666:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b668:	6203      	str	r3, [r0, #32]
}
 800b66a:	bc30      	pop	{r4, r5}
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	40012c00 	.word	0x40012c00

0800b674 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b674:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b676:	6a03      	ldr	r3, [r0, #32]
 800b678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b67c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b67e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b680:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b682:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b684:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b688:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b68c:	680d      	ldr	r5, [r1, #0]
 800b68e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b690:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b694:	688d      	ldr	r5, [r1, #8]
 800b696:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b69a:	4d0f      	ldr	r5, [pc, #60]	; (800b6d8 <TIM_OC5_SetConfig+0x64>)
 800b69c:	42a8      	cmp	r0, r5
 800b69e:	d00f      	beq.n	800b6c0 <TIM_OC5_SetConfig+0x4c>
 800b6a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b6a4:	42a8      	cmp	r0, r5
 800b6a6:	d00b      	beq.n	800b6c0 <TIM_OC5_SetConfig+0x4c>
 800b6a8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b6ac:	42a8      	cmp	r0, r5
 800b6ae:	d007      	beq.n	800b6c0 <TIM_OC5_SetConfig+0x4c>
 800b6b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b6b4:	42a8      	cmp	r0, r5
 800b6b6:	d003      	beq.n	800b6c0 <TIM_OC5_SetConfig+0x4c>
 800b6b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b6bc:	42a8      	cmp	r0, r5
 800b6be:	d104      	bne.n	800b6ca <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6c0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6c4:	694d      	ldr	r5, [r1, #20]
 800b6c6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6cc:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b6ce:	684a      	ldr	r2, [r1, #4]
 800b6d0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6d2:	6203      	str	r3, [r0, #32]
}
 800b6d4:	bc30      	pop	{r4, r5}
 800b6d6:	4770      	bx	lr
 800b6d8:	40012c00 	.word	0x40012c00

0800b6dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6de:	6a03      	ldr	r3, [r0, #32]
 800b6e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6e8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ea:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6ec:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b6f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6f4:	680d      	ldr	r5, [r1, #0]
 800b6f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b6fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b6fe:	688d      	ldr	r5, [r1, #8]
 800b700:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b704:	4d0f      	ldr	r5, [pc, #60]	; (800b744 <TIM_OC6_SetConfig+0x68>)
 800b706:	42a8      	cmp	r0, r5
 800b708:	d00f      	beq.n	800b72a <TIM_OC6_SetConfig+0x4e>
 800b70a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b70e:	42a8      	cmp	r0, r5
 800b710:	d00b      	beq.n	800b72a <TIM_OC6_SetConfig+0x4e>
 800b712:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b716:	42a8      	cmp	r0, r5
 800b718:	d007      	beq.n	800b72a <TIM_OC6_SetConfig+0x4e>
 800b71a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b71e:	42a8      	cmp	r0, r5
 800b720:	d003      	beq.n	800b72a <TIM_OC6_SetConfig+0x4e>
 800b722:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b726:	42a8      	cmp	r0, r5
 800b728:	d104      	bne.n	800b734 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b72a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b72e:	694d      	ldr	r5, [r1, #20]
 800b730:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b734:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b736:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b738:	684a      	ldr	r2, [r1, #4]
 800b73a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b73c:	6203      	str	r3, [r0, #32]
}
 800b73e:	bc30      	pop	{r4, r5}
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	40012c00 	.word	0x40012c00
}
 800b748:	4770      	bx	lr
}
 800b74a:	4770      	bx	lr

0800b74c <HAL_TIM_Base_DeInit>:
{
 800b74c:	b510      	push	{r4, lr}
 800b74e:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b750:	2302      	movs	r3, #2
 800b752:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b756:	6803      	ldr	r3, [r0, #0]
 800b758:	6a19      	ldr	r1, [r3, #32]
 800b75a:	f241 1211 	movw	r2, #4369	; 0x1111
 800b75e:	4211      	tst	r1, r2
 800b760:	d108      	bne.n	800b774 <HAL_TIM_Base_DeInit+0x28>
 800b762:	6a19      	ldr	r1, [r3, #32]
 800b764:	f240 4244 	movw	r2, #1092	; 0x444
 800b768:	4211      	tst	r1, r2
 800b76a:	d103      	bne.n	800b774 <HAL_TIM_Base_DeInit+0x28>
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	f022 0201 	bic.w	r2, r2, #1
 800b772:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 800b774:	4620      	mov	r0, r4
 800b776:	f7f6 fa35 	bl	8001be4 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b77a:	2000      	movs	r0, #0
 800b77c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b780:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b784:	bd10      	pop	{r4, pc}
	...

0800b788 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800b788:	2302      	movs	r3, #2
 800b78a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b78e:	6802      	ldr	r2, [r0, #0]
 800b790:	6891      	ldr	r1, [r2, #8]
 800b792:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <HAL_TIM_Base_Start+0x2c>)
 800b794:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b796:	2b06      	cmp	r3, #6
 800b798:	d006      	beq.n	800b7a8 <HAL_TIM_Base_Start+0x20>
 800b79a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b79e:	d003      	beq.n	800b7a8 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 800b7a0:	6813      	ldr	r3, [r2, #0]
 800b7a2:	f043 0301 	orr.w	r3, r3, #1
 800b7a6:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	00010007 	.word	0x00010007

0800b7b8 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b7be:	6803      	ldr	r3, [r0, #0]
 800b7c0:	6a19      	ldr	r1, [r3, #32]
 800b7c2:	f241 1211 	movw	r2, #4369	; 0x1111
 800b7c6:	4211      	tst	r1, r2
 800b7c8:	d108      	bne.n	800b7dc <HAL_TIM_Base_Stop+0x24>
 800b7ca:	6a19      	ldr	r1, [r3, #32]
 800b7cc:	f240 4244 	movw	r2, #1092	; 0x444
 800b7d0:	4211      	tst	r1, r2
 800b7d2:	d103      	bne.n	800b7dc <HAL_TIM_Base_Stop+0x24>
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	f022 0201 	bic.w	r2, r2, #1
 800b7da:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	4770      	bx	lr
	...

0800b7e8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7e8:	6802      	ldr	r2, [r0, #0]
 800b7ea:	68d3      	ldr	r3, [r2, #12]
 800b7ec:	f043 0301 	orr.w	r3, r3, #1
 800b7f0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7f2:	6802      	ldr	r2, [r0, #0]
 800b7f4:	6891      	ldr	r1, [r2, #8]
 800b7f6:	4b06      	ldr	r3, [pc, #24]	; (800b810 <HAL_TIM_Base_Start_IT+0x28>)
 800b7f8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7fa:	2b06      	cmp	r3, #6
 800b7fc:	d006      	beq.n	800b80c <HAL_TIM_Base_Start_IT+0x24>
 800b7fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b802:	d003      	beq.n	800b80c <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 800b804:	6813      	ldr	r3, [r2, #0]
 800b806:	f043 0301 	orr.w	r3, r3, #1
 800b80a:	6013      	str	r3, [r2, #0]
}
 800b80c:	2000      	movs	r0, #0
 800b80e:	4770      	bx	lr
 800b810:	00010007 	.word	0x00010007

0800b814 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b814:	6802      	ldr	r2, [r0, #0]
 800b816:	68d3      	ldr	r3, [r2, #12]
 800b818:	f023 0301 	bic.w	r3, r3, #1
 800b81c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800b81e:	6803      	ldr	r3, [r0, #0]
 800b820:	6a19      	ldr	r1, [r3, #32]
 800b822:	f241 1211 	movw	r2, #4369	; 0x1111
 800b826:	4211      	tst	r1, r2
 800b828:	d108      	bne.n	800b83c <HAL_TIM_Base_Stop_IT+0x28>
 800b82a:	6a19      	ldr	r1, [r3, #32]
 800b82c:	f240 4244 	movw	r2, #1092	; 0x444
 800b830:	4211      	tst	r1, r2
 800b832:	d103      	bne.n	800b83c <HAL_TIM_Base_Stop_IT+0x28>
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	f022 0201 	bic.w	r2, r2, #1
 800b83a:	601a      	str	r2, [r3, #0]
}
 800b83c:	2000      	movs	r0, #0
 800b83e:	4770      	bx	lr

0800b840 <HAL_TIM_Base_Start_DMA>:
{
 800b840:	b538      	push	{r3, r4, r5, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800b842:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800b846:	b2ed      	uxtb	r5, r5
 800b848:	2d02      	cmp	r5, #2
 800b84a:	d031      	beq.n	800b8b0 <HAL_TIM_Base_Start_DMA+0x70>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800b84c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b01      	cmp	r3, #1
 800b854:	d103      	bne.n	800b85e <HAL_TIM_Base_Start_DMA+0x1e>
    if ((pData == NULL) && (Length > 0U))
 800b856:	b339      	cbz	r1, 800b8a8 <HAL_TIM_Base_Start_DMA+0x68>
      htim->State = HAL_TIM_STATE_BUSY;
 800b858:	2302      	movs	r3, #2
 800b85a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800b85e:	4613      	mov	r3, r2
 800b860:	4604      	mov	r4, r0
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800b862:	6a02      	ldr	r2, [r0, #32]
 800b864:	4815      	ldr	r0, [pc, #84]	; (800b8bc <HAL_TIM_Base_Start_DMA+0x7c>)
 800b866:	62d0      	str	r0, [r2, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800b868:	6a22      	ldr	r2, [r4, #32]
 800b86a:	4815      	ldr	r0, [pc, #84]	; (800b8c0 <HAL_TIM_Base_Start_DMA+0x80>)
 800b86c:	6310      	str	r0, [r2, #48]	; 0x30
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800b86e:	6a22      	ldr	r2, [r4, #32]
 800b870:	4814      	ldr	r0, [pc, #80]	; (800b8c4 <HAL_TIM_Base_Start_DMA+0x84>)
 800b872:	6350      	str	r0, [r2, #52]	; 0x34
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length) != HAL_OK)
 800b874:	6822      	ldr	r2, [r4, #0]
 800b876:	322c      	adds	r2, #44	; 0x2c
 800b878:	6a20      	ldr	r0, [r4, #32]
 800b87a:	f7f6 ff7e 	bl	800277a <HAL_DMA_Start_IT>
 800b87e:	4603      	mov	r3, r0
 800b880:	b9c0      	cbnz	r0, 800b8b4 <HAL_TIM_Base_Start_DMA+0x74>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800b882:	6821      	ldr	r1, [r4, #0]
 800b884:	68ca      	ldr	r2, [r1, #12]
 800b886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b88a:	60ca      	str	r2, [r1, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b88c:	6821      	ldr	r1, [r4, #0]
 800b88e:	6888      	ldr	r0, [r1, #8]
 800b890:	4a0d      	ldr	r2, [pc, #52]	; (800b8c8 <HAL_TIM_Base_Start_DMA+0x88>)
 800b892:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b894:	2a06      	cmp	r2, #6
 800b896:	d00e      	beq.n	800b8b6 <HAL_TIM_Base_Start_DMA+0x76>
 800b898:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b89c:	d00b      	beq.n	800b8b6 <HAL_TIM_Base_Start_DMA+0x76>
    __HAL_TIM_ENABLE(htim);
 800b89e:	680a      	ldr	r2, [r1, #0]
 800b8a0:	f042 0201 	orr.w	r2, r2, #1
 800b8a4:	600a      	str	r2, [r1, #0]
 800b8a6:	e006      	b.n	800b8b6 <HAL_TIM_Base_Start_DMA+0x76>
    if ((pData == NULL) && (Length > 0U))
 800b8a8:	2a00      	cmp	r2, #0
 800b8aa:	d0d5      	beq.n	800b858 <HAL_TIM_Base_Start_DMA+0x18>
      return HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e002      	b.n	800b8b6 <HAL_TIM_Base_Start_DMA+0x76>
    return HAL_BUSY;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	e000      	b.n	800b8b6 <HAL_TIM_Base_Start_DMA+0x76>
    return HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ba:	bf00      	nop
 800b8bc:	0800bf43 	.word	0x0800bf43
 800b8c0:	0800bf55 	.word	0x0800bf55
 800b8c4:	0800c23f 	.word	0x0800c23f
 800b8c8:	00010007 	.word	0x00010007

0800b8cc <HAL_TIM_Base_Stop_DMA>:
{
 800b8cc:	b510      	push	{r4, lr}
 800b8ce:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 800b8d0:	6802      	ldr	r2, [r0, #0]
 800b8d2:	68d3      	ldr	r3, [r2, #12]
 800b8d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8d8:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800b8da:	6a00      	ldr	r0, [r0, #32]
 800b8dc:	f7f6 ffbf 	bl	800285e <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	6a19      	ldr	r1, [r3, #32]
 800b8e4:	f241 1211 	movw	r2, #4369	; 0x1111
 800b8e8:	4211      	tst	r1, r2
 800b8ea:	d108      	bne.n	800b8fe <HAL_TIM_Base_Stop_DMA+0x32>
 800b8ec:	6a19      	ldr	r1, [r3, #32]
 800b8ee:	f240 4244 	movw	r2, #1092	; 0x444
 800b8f2:	4211      	tst	r1, r2
 800b8f4:	d103      	bne.n	800b8fe <HAL_TIM_Base_Stop_DMA+0x32>
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	f022 0201 	bic.w	r2, r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b8fe:	2301      	movs	r3, #1
 800b900:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800b904:	2000      	movs	r0, #0
 800b906:	bd10      	pop	{r4, pc}

0800b908 <HAL_TIM_OC_MspInit>:
}
 800b908:	4770      	bx	lr

0800b90a <HAL_TIM_OC_MspDeInit>:
}
 800b90a:	4770      	bx	lr

0800b90c <HAL_TIM_OC_DeInit>:
{
 800b90c:	b510      	push	{r4, lr}
 800b90e:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b910:	2302      	movs	r3, #2
 800b912:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b916:	6803      	ldr	r3, [r0, #0]
 800b918:	6a19      	ldr	r1, [r3, #32]
 800b91a:	f241 1211 	movw	r2, #4369	; 0x1111
 800b91e:	4211      	tst	r1, r2
 800b920:	d108      	bne.n	800b934 <HAL_TIM_OC_DeInit+0x28>
 800b922:	6a19      	ldr	r1, [r3, #32]
 800b924:	f240 4244 	movw	r2, #1092	; 0x444
 800b928:	4211      	tst	r1, r2
 800b92a:	d103      	bne.n	800b934 <HAL_TIM_OC_DeInit+0x28>
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	f022 0201 	bic.w	r2, r2, #1
 800b932:	601a      	str	r2, [r3, #0]
  HAL_TIM_OC_MspDeInit(htim);
 800b934:	4620      	mov	r0, r4
 800b936:	f7ff ffe8 	bl	800b90a <HAL_TIM_OC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b93a:	2000      	movs	r0, #0
 800b93c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b940:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b944:	bd10      	pop	{r4, pc}

0800b946 <HAL_TIM_PWM_MspInit>:
}
 800b946:	4770      	bx	lr

0800b948 <HAL_TIM_PWM_MspDeInit>:
}
 800b948:	4770      	bx	lr

0800b94a <HAL_TIM_PWM_DeInit>:
{
 800b94a:	b510      	push	{r4, lr}
 800b94c:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b94e:	2302      	movs	r3, #2
 800b950:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b954:	6803      	ldr	r3, [r0, #0]
 800b956:	6a19      	ldr	r1, [r3, #32]
 800b958:	f241 1211 	movw	r2, #4369	; 0x1111
 800b95c:	4211      	tst	r1, r2
 800b95e:	d108      	bne.n	800b972 <HAL_TIM_PWM_DeInit+0x28>
 800b960:	6a19      	ldr	r1, [r3, #32]
 800b962:	f240 4244 	movw	r2, #1092	; 0x444
 800b966:	4211      	tst	r1, r2
 800b968:	d103      	bne.n	800b972 <HAL_TIM_PWM_DeInit+0x28>
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	f022 0201 	bic.w	r2, r2, #1
 800b970:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 800b972:	4620      	mov	r0, r4
 800b974:	f7ff ffe8 	bl	800b948 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b978:	2000      	movs	r0, #0
 800b97a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b97e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b982:	bd10      	pop	{r4, pc}

0800b984 <HAL_TIM_IC_MspInit>:
}
 800b984:	4770      	bx	lr

0800b986 <HAL_TIM_IC_MspDeInit>:
}
 800b986:	4770      	bx	lr

0800b988 <HAL_TIM_IC_DeInit>:
{
 800b988:	b510      	push	{r4, lr}
 800b98a:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b98c:	2302      	movs	r3, #2
 800b98e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b992:	6803      	ldr	r3, [r0, #0]
 800b994:	6a19      	ldr	r1, [r3, #32]
 800b996:	f241 1211 	movw	r2, #4369	; 0x1111
 800b99a:	4211      	tst	r1, r2
 800b99c:	d108      	bne.n	800b9b0 <HAL_TIM_IC_DeInit+0x28>
 800b99e:	6a19      	ldr	r1, [r3, #32]
 800b9a0:	f240 4244 	movw	r2, #1092	; 0x444
 800b9a4:	4211      	tst	r1, r2
 800b9a6:	d103      	bne.n	800b9b0 <HAL_TIM_IC_DeInit+0x28>
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	f022 0201 	bic.w	r2, r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_MspDeInit(htim);
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f7ff ffe8 	bl	800b986 <HAL_TIM_IC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b9bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b9c0:	bd10      	pop	{r4, pc}

0800b9c2 <HAL_TIM_OnePulse_MspInit>:
}
 800b9c2:	4770      	bx	lr

0800b9c4 <HAL_TIM_OnePulse_MspDeInit>:
}
 800b9c4:	4770      	bx	lr

0800b9c6 <HAL_TIM_OnePulse_DeInit>:
{
 800b9c6:	b510      	push	{r4, lr}
 800b9c8:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b9d0:	6803      	ldr	r3, [r0, #0]
 800b9d2:	6a19      	ldr	r1, [r3, #32]
 800b9d4:	f241 1211 	movw	r2, #4369	; 0x1111
 800b9d8:	4211      	tst	r1, r2
 800b9da:	d108      	bne.n	800b9ee <HAL_TIM_OnePulse_DeInit+0x28>
 800b9dc:	6a19      	ldr	r1, [r3, #32]
 800b9de:	f240 4244 	movw	r2, #1092	; 0x444
 800b9e2:	4211      	tst	r1, r2
 800b9e4:	d103      	bne.n	800b9ee <HAL_TIM_OnePulse_DeInit+0x28>
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	f022 0201 	bic.w	r2, r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
  HAL_TIM_OnePulse_MspDeInit(htim);
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f7ff ffe8 	bl	800b9c4 <HAL_TIM_OnePulse_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b9fa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b9fe:	bd10      	pop	{r4, pc}

0800ba00 <HAL_TIM_Encoder_MspInit>:
}
 800ba00:	4770      	bx	lr

0800ba02 <HAL_TIM_Encoder_MspDeInit>:
}
 800ba02:	4770      	bx	lr

0800ba04 <HAL_TIM_Encoder_DeInit>:
{
 800ba04:	b510      	push	{r4, lr}
 800ba06:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800ba0e:	6803      	ldr	r3, [r0, #0]
 800ba10:	6a19      	ldr	r1, [r3, #32]
 800ba12:	f241 1211 	movw	r2, #4369	; 0x1111
 800ba16:	4211      	tst	r1, r2
 800ba18:	d108      	bne.n	800ba2c <HAL_TIM_Encoder_DeInit+0x28>
 800ba1a:	6a19      	ldr	r1, [r3, #32]
 800ba1c:	f240 4244 	movw	r2, #1092	; 0x444
 800ba20:	4211      	tst	r1, r2
 800ba22:	d103      	bne.n	800ba2c <HAL_TIM_Encoder_DeInit+0x28>
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	f022 0201 	bic.w	r2, r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_MspDeInit(htim);
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7ff ffe8 	bl	800ba02 <HAL_TIM_Encoder_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800ba32:	2000      	movs	r0, #0
 800ba34:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ba38:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ba3c:	bd10      	pop	{r4, pc}
	...

0800ba40 <HAL_TIM_DMABurst_WriteStart>:
{
 800ba40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba44:	9e06      	ldr	r6, [sp, #24]
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800ba46:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800ba4a:	b2e4      	uxtb	r4, r4
 800ba4c:	2c02      	cmp	r4, #2
 800ba4e:	f000 80cd 	beq.w	800bbec <HAL_TIM_DMABurst_WriteStart+0x1ac>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800ba52:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800ba56:	b2e4      	uxtb	r4, r4
 800ba58:	2c01      	cmp	r4, #1
 800ba5a:	d01e      	beq.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x5a>
 800ba5c:	461f      	mov	r7, r3
 800ba5e:	4615      	mov	r5, r2
 800ba60:	4688      	mov	r8, r1
 800ba62:	4604      	mov	r4, r0
  switch (BurstRequestSrc)
 800ba64:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800ba68:	d07e      	beq.n	800bb68 <HAL_TIM_DMABurst_WriteStart+0x128>
 800ba6a:	d81f      	bhi.n	800baac <HAL_TIM_DMABurst_WriteStart+0x6c>
 800ba6c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800ba70:	d050      	beq.n	800bb14 <HAL_TIM_DMABurst_WriteStart+0xd4>
 800ba72:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ba76:	d062      	beq.n	800bb3e <HAL_TIM_DMABurst_WriteStart+0xfe>
 800ba78:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ba7c:	d035      	beq.n	800baea <HAL_TIM_DMABurst_WriteStart+0xaa>
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	ea46 0608 	orr.w	r6, r6, r8
 800ba84:	649e      	str	r6, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800ba86:	6823      	ldr	r3, [r4, #0]
 800ba88:	68da      	ldr	r2, [r3, #12]
 800ba8a:	4315      	orrs	r5, r2
 800ba8c:	60dd      	str	r5, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800ba94:	2000      	movs	r0, #0
}
 800ba96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800ba9a:	b11b      	cbz	r3, 800baa4 <HAL_TIM_DMABurst_WriteStart+0x64>
      htim->State = HAL_TIM_STATE_BUSY;
 800ba9c:	2402      	movs	r4, #2
 800ba9e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800baa2:	e7db      	b.n	800ba5c <HAL_TIM_DMABurst_WriteStart+0x1c>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800baa4:	2e00      	cmp	r6, #0
 800baa6:	d0f9      	beq.n	800ba9c <HAL_TIM_DMABurst_WriteStart+0x5c>
      return HAL_ERROR;
 800baa8:	2001      	movs	r0, #1
 800baaa:	e7f4      	b.n	800ba96 <HAL_TIM_DMABurst_WriteStart+0x56>
  switch (BurstRequestSrc)
 800baac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bab0:	d070      	beq.n	800bb94 <HAL_TIM_DMABurst_WriteStart+0x154>
 800bab2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800bab6:	f000 8083 	beq.w	800bbc0 <HAL_TIM_DMABurst_WriteStart+0x180>
 800baba:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800babe:	d1de      	bne.n	800ba7e <HAL_TIM_DMABurst_WriteStart+0x3e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bac0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bac2:	4a4b      	ldr	r2, [pc, #300]	; (800bbf0 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800bac4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bac6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bac8:	4a4a      	ldr	r2, [pc, #296]	; (800bbf4 <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800baca:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bacc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bace:	4a4a      	ldr	r2, [pc, #296]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bad0:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bad2:	0a33      	lsrs	r3, r6, #8
 800bad4:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 800bad6:	3301      	adds	r3, #1
 800bad8:	324c      	adds	r2, #76	; 0x4c
 800bada:	4639      	mov	r1, r7
 800badc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bade:	f7f6 fe4c 	bl	800277a <HAL_DMA_Start_IT>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d0cb      	beq.n	800ba7e <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bae6:	2001      	movs	r0, #1
 800bae8:	e7d5      	b.n	800ba96 <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800baea:	6a03      	ldr	r3, [r0, #32]
 800baec:	4a43      	ldr	r2, [pc, #268]	; (800bbfc <HAL_TIM_DMABurst_WriteStart+0x1bc>)
 800baee:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800baf0:	6a03      	ldr	r3, [r0, #32]
 800baf2:	4a43      	ldr	r2, [pc, #268]	; (800bc00 <HAL_TIM_DMABurst_WriteStart+0x1c0>)
 800baf4:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800baf6:	6a03      	ldr	r3, [r0, #32]
 800baf8:	4a3f      	ldr	r2, [pc, #252]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bafa:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bafc:	0a33      	lsrs	r3, r6, #8
 800bafe:	6802      	ldr	r2, [r0, #0]
 800bb00:	3301      	adds	r3, #1
 800bb02:	324c      	adds	r2, #76	; 0x4c
 800bb04:	4639      	mov	r1, r7
 800bb06:	6a00      	ldr	r0, [r0, #32]
 800bb08:	f7f6 fe37 	bl	800277a <HAL_DMA_Start_IT>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d0b6      	beq.n	800ba7e <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bb10:	2001      	movs	r0, #1
 800bb12:	e7c0      	b.n	800ba96 <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bb14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb16:	4a36      	ldr	r2, [pc, #216]	; (800bbf0 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800bb18:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bb1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb1c:	4a35      	ldr	r2, [pc, #212]	; (800bbf4 <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800bb1e:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bb20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb22:	4a35      	ldr	r2, [pc, #212]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bb24:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bb26:	0a33      	lsrs	r3, r6, #8
 800bb28:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	324c      	adds	r2, #76	; 0x4c
 800bb2e:	4639      	mov	r1, r7
 800bb30:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bb32:	f7f6 fe22 	bl	800277a <HAL_DMA_Start_IT>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d0a1      	beq.n	800ba7e <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bb3a:	2001      	movs	r0, #1
 800bb3c:	e7ab      	b.n	800ba96 <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bb3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb40:	4a2b      	ldr	r2, [pc, #172]	; (800bbf0 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800bb42:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bb44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb46:	4a2b      	ldr	r2, [pc, #172]	; (800bbf4 <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800bb48:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bb4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb4c:	4a2a      	ldr	r2, [pc, #168]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bb4e:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bb50:	0a33      	lsrs	r3, r6, #8
 800bb52:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 800bb54:	3301      	adds	r3, #1
 800bb56:	324c      	adds	r2, #76	; 0x4c
 800bb58:	4639      	mov	r1, r7
 800bb5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bb5c:	f7f6 fe0d 	bl	800277a <HAL_DMA_Start_IT>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d08c      	beq.n	800ba7e <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bb64:	2001      	movs	r0, #1
 800bb66:	e796      	b.n	800ba96 <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bb68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bb6a:	4a21      	ldr	r2, [pc, #132]	; (800bbf0 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800bb6c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bb6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bb70:	4a20      	ldr	r2, [pc, #128]	; (800bbf4 <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800bb72:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bb74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bb76:	4a20      	ldr	r2, [pc, #128]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bb78:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bb7a:	0a33      	lsrs	r3, r6, #8
 800bb7c:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 800bb7e:	3301      	adds	r3, #1
 800bb80:	324c      	adds	r2, #76	; 0x4c
 800bb82:	4639      	mov	r1, r7
 800bb84:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bb86:	f7f6 fdf8 	bl	800277a <HAL_DMA_Start_IT>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f43f af77 	beq.w	800ba7e <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bb90:	2001      	movs	r0, #1
 800bb92:	e780      	b.n	800ba96 <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800bb94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bb96:	4a1b      	ldr	r2, [pc, #108]	; (800bc04 <HAL_TIM_DMABurst_WriteStart+0x1c4>)
 800bb98:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800bb9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bb9c:	4a1a      	ldr	r2, [pc, #104]	; (800bc08 <HAL_TIM_DMABurst_WriteStart+0x1c8>)
 800bb9e:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800bba0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bba2:	4a15      	ldr	r2, [pc, #84]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bba4:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bba6:	0a33      	lsrs	r3, r6, #8
 800bba8:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800bbaa:	3301      	adds	r3, #1
 800bbac:	324c      	adds	r2, #76	; 0x4c
 800bbae:	4639      	mov	r1, r7
 800bbb0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bbb2:	f7f6 fde2 	bl	800277a <HAL_DMA_Start_IT>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f43f af61 	beq.w	800ba7e <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	e76a      	b.n	800ba96 <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800bbc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bbc2:	4a12      	ldr	r2, [pc, #72]	; (800bc0c <HAL_TIM_DMABurst_WriteStart+0x1cc>)
 800bbc4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800bbc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bbc8:	4a11      	ldr	r2, [pc, #68]	; (800bc10 <HAL_TIM_DMABurst_WriteStart+0x1d0>)
 800bbca:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800bbcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bbce:	4a0a      	ldr	r2, [pc, #40]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bbd0:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bbd2:	0a33      	lsrs	r3, r6, #8
 800bbd4:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	324c      	adds	r2, #76	; 0x4c
 800bbda:	4639      	mov	r1, r7
 800bbdc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bbde:	f7f6 fdcc 	bl	800277a <HAL_DMA_Start_IT>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	f43f af4b 	beq.w	800ba7e <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bbe8:	2001      	movs	r0, #1
 800bbea:	e754      	b.n	800ba96 <HAL_TIM_DMABurst_WriteStart+0x56>
    return HAL_BUSY;
 800bbec:	2002      	movs	r0, #2
 800bbee:	e752      	b.n	800ba96 <HAL_TIM_DMABurst_WriteStart+0x56>
 800bbf0:	0800bff5 	.word	0x0800bff5
 800bbf4:	0800c03b 	.word	0x0800c03b
 800bbf8:	0800c23f 	.word	0x0800c23f
 800bbfc:	0800bf43 	.word	0x0800bf43
 800bc00:	0800bf55 	.word	0x0800bf55
 800bc04:	0800ee7d 	.word	0x0800ee7d
 800bc08:	0800ee8f 	.word	0x0800ee8f
 800bc0c:	0800c21b 	.word	0x0800c21b
 800bc10:	0800c22d 	.word	0x0800c22d

0800bc14 <HAL_TIM_DMABurst_WriteStop>:
{
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4605      	mov	r5, r0
 800bc18:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800bc1a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800bc1e:	d029      	beq.n	800bc74 <HAL_TIM_DMABurst_WriteStop+0x60>
 800bc20:	d813      	bhi.n	800bc4a <HAL_TIM_DMABurst_WriteStop+0x36>
 800bc22:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bc26:	d01d      	beq.n	800bc64 <HAL_TIM_DMABurst_WriteStop+0x50>
 800bc28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bc2c:	d01e      	beq.n	800bc6c <HAL_TIM_DMABurst_WriteStop+0x58>
 800bc2e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bc32:	d103      	bne.n	800bc3c <HAL_TIM_DMABurst_WriteStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800bc34:	6a00      	ldr	r0, [r0, #32]
 800bc36:	f7f6 fe12 	bl	800285e <HAL_DMA_Abort_IT>
  if (HAL_OK == status)
 800bc3a:	b928      	cbnz	r0, 800bc48 <HAL_TIM_DMABurst_WriteStop+0x34>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800bc3c:	682a      	ldr	r2, [r5, #0]
 800bc3e:	68d3      	ldr	r3, [r2, #12]
 800bc40:	ea23 0404 	bic.w	r4, r3, r4
 800bc44:	60d4      	str	r4, [r2, #12]
 800bc46:	2000      	movs	r0, #0
}
 800bc48:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 800bc4a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bc4e:	d015      	beq.n	800bc7c <HAL_TIM_DMABurst_WriteStop+0x68>
 800bc50:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bc54:	d016      	beq.n	800bc84 <HAL_TIM_DMABurst_WriteStop+0x70>
 800bc56:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bc5a:	d1ef      	bne.n	800bc3c <HAL_TIM_DMABurst_WriteStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800bc5c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bc5e:	f7f6 fdfe 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bc62:	e7ea      	b.n	800bc3a <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800bc64:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bc66:	f7f6 fdfa 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bc6a:	e7e6      	b.n	800bc3a <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800bc6c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bc6e:	f7f6 fdf6 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bc72:	e7e2      	b.n	800bc3a <HAL_TIM_DMABurst_WriteStop+0x26>
      status =  HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800bc74:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bc76:	f7f6 fdf2 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bc7a:	e7de      	b.n	800bc3a <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800bc7c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bc7e:	f7f6 fdee 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bc82:	e7da      	b.n	800bc3a <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800bc84:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bc86:	f7f6 fdea 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bc8a:	e7d6      	b.n	800bc3a <HAL_TIM_DMABurst_WriteStop+0x26>

0800bc8c <HAL_TIM_DMABurst_ReadStart>:
{
 800bc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc90:	9e06      	ldr	r6, [sp, #24]
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800bc92:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800bc96:	b2e4      	uxtb	r4, r4
 800bc98:	2c02      	cmp	r4, #2
 800bc9a:	f000 80cd 	beq.w	800be38 <HAL_TIM_DMABurst_ReadStart+0x1ac>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800bc9e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800bca2:	b2e4      	uxtb	r4, r4
 800bca4:	2c01      	cmp	r4, #1
 800bca6:	d01e      	beq.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x5a>
 800bca8:	461f      	mov	r7, r3
 800bcaa:	4615      	mov	r5, r2
 800bcac:	4688      	mov	r8, r1
 800bcae:	4604      	mov	r4, r0
  switch (BurstRequestSrc)
 800bcb0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800bcb4:	d07e      	beq.n	800bdb4 <HAL_TIM_DMABurst_ReadStart+0x128>
 800bcb6:	d81f      	bhi.n	800bcf8 <HAL_TIM_DMABurst_ReadStart+0x6c>
 800bcb8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bcbc:	d050      	beq.n	800bd60 <HAL_TIM_DMABurst_ReadStart+0xd4>
 800bcbe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800bcc2:	d062      	beq.n	800bd8a <HAL_TIM_DMABurst_ReadStart+0xfe>
 800bcc4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800bcc8:	d035      	beq.n	800bd36 <HAL_TIM_DMABurst_ReadStart+0xaa>
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800bcca:	6823      	ldr	r3, [r4, #0]
 800bccc:	ea46 0608 	orr.w	r6, r6, r8
 800bcd0:	649e      	str	r6, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800bcd2:	6823      	ldr	r3, [r4, #0]
 800bcd4:	68da      	ldr	r2, [r3, #12]
 800bcd6:	4315      	orrs	r5, r2
 800bcd8:	60dd      	str	r5, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800bce0:	2000      	movs	r0, #0
}
 800bce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800bce6:	b11b      	cbz	r3, 800bcf0 <HAL_TIM_DMABurst_ReadStart+0x64>
      htim->State = HAL_TIM_STATE_BUSY;
 800bce8:	2402      	movs	r4, #2
 800bcea:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800bcee:	e7db      	b.n	800bca8 <HAL_TIM_DMABurst_ReadStart+0x1c>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800bcf0:	2e00      	cmp	r6, #0
 800bcf2:	d0f9      	beq.n	800bce8 <HAL_TIM_DMABurst_ReadStart+0x5c>
      return HAL_ERROR;
 800bcf4:	2001      	movs	r0, #1
 800bcf6:	e7f4      	b.n	800bce2 <HAL_TIM_DMABurst_ReadStart+0x56>
  switch (BurstRequestSrc)
 800bcf8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bcfc:	d070      	beq.n	800bde0 <HAL_TIM_DMABurst_ReadStart+0x154>
 800bcfe:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800bd02:	f000 8083 	beq.w	800be0c <HAL_TIM_DMABurst_ReadStart+0x180>
 800bd06:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bd0a:	d1de      	bne.n	800bcca <HAL_TIM_DMABurst_ReadStart+0x3e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800bd0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bd0e:	4a4b      	ldr	r2, [pc, #300]	; (800be3c <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800bd10:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bd12:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bd14:	4a4a      	ldr	r2, [pc, #296]	; (800be40 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800bd16:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bd18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bd1a:	4a4a      	ldr	r2, [pc, #296]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bd1c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bd1e:	0a33      	lsrs	r3, r6, #8
 800bd20:	6801      	ldr	r1, [r0, #0]
 800bd22:	3301      	adds	r3, #1
 800bd24:	463a      	mov	r2, r7
 800bd26:	314c      	adds	r1, #76	; 0x4c
 800bd28:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bd2a:	f7f6 fd26 	bl	800277a <HAL_DMA_Start_IT>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d0cb      	beq.n	800bcca <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bd32:	2001      	movs	r0, #1
 800bd34:	e7d5      	b.n	800bce2 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800bd36:	6a03      	ldr	r3, [r0, #32]
 800bd38:	4a43      	ldr	r2, [pc, #268]	; (800be48 <HAL_TIM_DMABurst_ReadStart+0x1bc>)
 800bd3a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800bd3c:	6a03      	ldr	r3, [r0, #32]
 800bd3e:	4a43      	ldr	r2, [pc, #268]	; (800be4c <HAL_TIM_DMABurst_ReadStart+0x1c0>)
 800bd40:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800bd42:	6a03      	ldr	r3, [r0, #32]
 800bd44:	4a3f      	ldr	r2, [pc, #252]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bd46:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bd48:	0a33      	lsrs	r3, r6, #8
 800bd4a:	6801      	ldr	r1, [r0, #0]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	463a      	mov	r2, r7
 800bd50:	314c      	adds	r1, #76	; 0x4c
 800bd52:	6a00      	ldr	r0, [r0, #32]
 800bd54:	f7f6 fd11 	bl	800277a <HAL_DMA_Start_IT>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d0b6      	beq.n	800bcca <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bd5c:	2001      	movs	r0, #1
 800bd5e:	e7c0      	b.n	800bce2 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800bd60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd62:	4a36      	ldr	r2, [pc, #216]	; (800be3c <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800bd64:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bd66:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd68:	4a35      	ldr	r2, [pc, #212]	; (800be40 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800bd6a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bd6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd6e:	4a35      	ldr	r2, [pc, #212]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bd70:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bd72:	0a33      	lsrs	r3, r6, #8
 800bd74:	6801      	ldr	r1, [r0, #0]
 800bd76:	3301      	adds	r3, #1
 800bd78:	463a      	mov	r2, r7
 800bd7a:	314c      	adds	r1, #76	; 0x4c
 800bd7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bd7e:	f7f6 fcfc 	bl	800277a <HAL_DMA_Start_IT>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d0a1      	beq.n	800bcca <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bd86:	2001      	movs	r0, #1
 800bd88:	e7ab      	b.n	800bce2 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800bd8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd8c:	4a2b      	ldr	r2, [pc, #172]	; (800be3c <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800bd8e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bd90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd92:	4a2b      	ldr	r2, [pc, #172]	; (800be40 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800bd94:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bd96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd98:	4a2a      	ldr	r2, [pc, #168]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bd9a:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bd9c:	0a33      	lsrs	r3, r6, #8
 800bd9e:	6801      	ldr	r1, [r0, #0]
 800bda0:	3301      	adds	r3, #1
 800bda2:	463a      	mov	r2, r7
 800bda4:	314c      	adds	r1, #76	; 0x4c
 800bda6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bda8:	f7f6 fce7 	bl	800277a <HAL_DMA_Start_IT>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d08c      	beq.n	800bcca <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bdb0:	2001      	movs	r0, #1
 800bdb2:	e796      	b.n	800bce2 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800bdb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bdb6:	4a21      	ldr	r2, [pc, #132]	; (800be3c <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800bdb8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bdba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bdbc:	4a20      	ldr	r2, [pc, #128]	; (800be40 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800bdbe:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bdc0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bdc2:	4a20      	ldr	r2, [pc, #128]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bdc4:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bdc6:	0a33      	lsrs	r3, r6, #8
 800bdc8:	6801      	ldr	r1, [r0, #0]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	463a      	mov	r2, r7
 800bdce:	314c      	adds	r1, #76	; 0x4c
 800bdd0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bdd2:	f7f6 fcd2 	bl	800277a <HAL_DMA_Start_IT>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f43f af77 	beq.w	800bcca <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bddc:	2001      	movs	r0, #1
 800bdde:	e780      	b.n	800bce2 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800bde0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bde2:	4a1b      	ldr	r2, [pc, #108]	; (800be50 <HAL_TIM_DMABurst_ReadStart+0x1c4>)
 800bde4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800bde6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bde8:	4a1a      	ldr	r2, [pc, #104]	; (800be54 <HAL_TIM_DMABurst_ReadStart+0x1c8>)
 800bdea:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800bdec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bdee:	4a15      	ldr	r2, [pc, #84]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bdf0:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bdf2:	0a33      	lsrs	r3, r6, #8
 800bdf4:	6801      	ldr	r1, [r0, #0]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	463a      	mov	r2, r7
 800bdfa:	314c      	adds	r1, #76	; 0x4c
 800bdfc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bdfe:	f7f6 fcbc 	bl	800277a <HAL_DMA_Start_IT>
 800be02:	2800      	cmp	r0, #0
 800be04:	f43f af61 	beq.w	800bcca <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800be08:	2001      	movs	r0, #1
 800be0a:	e76a      	b.n	800bce2 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800be0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800be0e:	4a12      	ldr	r2, [pc, #72]	; (800be58 <HAL_TIM_DMABurst_ReadStart+0x1cc>)
 800be10:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800be12:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800be14:	4a11      	ldr	r2, [pc, #68]	; (800be5c <HAL_TIM_DMABurst_ReadStart+0x1d0>)
 800be16:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800be18:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800be1a:	4a0a      	ldr	r2, [pc, #40]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800be1c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800be1e:	0a33      	lsrs	r3, r6, #8
 800be20:	6801      	ldr	r1, [r0, #0]
 800be22:	3301      	adds	r3, #1
 800be24:	463a      	mov	r2, r7
 800be26:	314c      	adds	r1, #76	; 0x4c
 800be28:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800be2a:	f7f6 fca6 	bl	800277a <HAL_DMA_Start_IT>
 800be2e:	2800      	cmp	r0, #0
 800be30:	f43f af4b 	beq.w	800bcca <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800be34:	2001      	movs	r0, #1
 800be36:	e754      	b.n	800bce2 <HAL_TIM_DMABurst_ReadStart+0x56>
    return HAL_BUSY;
 800be38:	2002      	movs	r0, #2
 800be3a:	e752      	b.n	800bce2 <HAL_TIM_DMABurst_ReadStart+0x56>
 800be3c:	0800bf69 	.word	0x0800bf69
 800be40:	0800bfaf 	.word	0x0800bfaf
 800be44:	0800c23f 	.word	0x0800c23f
 800be48:	0800bf43 	.word	0x0800bf43
 800be4c:	0800bf55 	.word	0x0800bf55
 800be50:	0800ee7d 	.word	0x0800ee7d
 800be54:	0800ee8f 	.word	0x0800ee8f
 800be58:	0800c21b 	.word	0x0800c21b
 800be5c:	0800c22d 	.word	0x0800c22d

0800be60 <HAL_TIM_DMABurst_ReadStop>:
{
 800be60:	b538      	push	{r3, r4, r5, lr}
 800be62:	4605      	mov	r5, r0
 800be64:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800be66:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800be6a:	d029      	beq.n	800bec0 <HAL_TIM_DMABurst_ReadStop+0x60>
 800be6c:	d813      	bhi.n	800be96 <HAL_TIM_DMABurst_ReadStop+0x36>
 800be6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800be72:	d01d      	beq.n	800beb0 <HAL_TIM_DMABurst_ReadStop+0x50>
 800be74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800be78:	d01e      	beq.n	800beb8 <HAL_TIM_DMABurst_ReadStop+0x58>
 800be7a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800be7e:	d103      	bne.n	800be88 <HAL_TIM_DMABurst_ReadStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800be80:	6a00      	ldr	r0, [r0, #32]
 800be82:	f7f6 fcec 	bl	800285e <HAL_DMA_Abort_IT>
  if (HAL_OK == status)
 800be86:	b928      	cbnz	r0, 800be94 <HAL_TIM_DMABurst_ReadStop+0x34>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800be88:	682a      	ldr	r2, [r5, #0]
 800be8a:	68d3      	ldr	r3, [r2, #12]
 800be8c:	ea23 0404 	bic.w	r4, r3, r4
 800be90:	60d4      	str	r4, [r2, #12]
 800be92:	2000      	movs	r0, #0
}
 800be94:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 800be96:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800be9a:	d015      	beq.n	800bec8 <HAL_TIM_DMABurst_ReadStop+0x68>
 800be9c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bea0:	d016      	beq.n	800bed0 <HAL_TIM_DMABurst_ReadStop+0x70>
 800bea2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bea6:	d1ef      	bne.n	800be88 <HAL_TIM_DMABurst_ReadStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800bea8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800beaa:	f7f6 fcd8 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800beae:	e7ea      	b.n	800be86 <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800beb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800beb2:	f7f6 fcd4 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800beb6:	e7e6      	b.n	800be86 <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800beb8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800beba:	f7f6 fcd0 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bebe:	e7e2      	b.n	800be86 <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800bec0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bec2:	f7f6 fccc 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bec6:	e7de      	b.n	800be86 <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800bec8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800beca:	f7f6 fcc8 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bece:	e7da      	b.n	800be86 <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800bed0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bed2:	f7f6 fcc4 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800bed6:	e7d6      	b.n	800be86 <HAL_TIM_DMABurst_ReadStop+0x26>

0800bed8 <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 800bed8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d00c      	beq.n	800befa <HAL_TIM_GenerateEvent+0x22>
  htim->State = HAL_TIM_STATE_BUSY;
 800bee0:	2302      	movs	r3, #2
 800bee2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 800bee6:	6803      	ldr	r3, [r0, #0]
 800bee8:	6159      	str	r1, [r3, #20]
  htim->State = HAL_TIM_STATE_READY;
 800beea:	2301      	movs	r3, #1
 800beec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bef0:	2300      	movs	r3, #0
 800bef2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800bef6:	4618      	mov	r0, r3
 800bef8:	4770      	bx	lr
  __HAL_LOCK(htim);
 800befa:	2002      	movs	r0, #2
}
 800befc:	4770      	bx	lr

0800befe <HAL_TIM_ConfigTI1Input>:
  tmpcr2 = htim->Instance->CR2;
 800befe:	6802      	ldr	r2, [r0, #0]
 800bf00:	6853      	ldr	r3, [r2, #4]
  tmpcr2 &= ~TIM_CR2_TI1S;
 800bf02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr2 |= TI1_Selection;
 800bf06:	4319      	orrs	r1, r3
  htim->Instance->CR2 = tmpcr2;
 800bf08:	6051      	str	r1, [r2, #4]
}
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	4770      	bx	lr

0800bf0e <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800bf0e:	290c      	cmp	r1, #12
 800bf10:	d814      	bhi.n	800bf3c <HAL_TIM_ReadCapturedValue+0x2e>
 800bf12:	e8df f001 	tbb	[pc, r1]
 800bf16:	1307      	.short	0x1307
 800bf18:	130a1313 	.word	0x130a1313
 800bf1c:	130d1313 	.word	0x130d1313
 800bf20:	1313      	.short	0x1313
 800bf22:	10          	.byte	0x10
 800bf23:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800bf24:	6803      	ldr	r3, [r0, #0]
 800bf26:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800bf28:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800bf2a:	6803      	ldr	r3, [r0, #0]
 800bf2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800bf2e:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800bf30:	6803      	ldr	r3, [r0, #0]
 800bf32:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800bf34:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800bf36:	6803      	ldr	r3, [r0, #0]
 800bf38:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 800bf3a:	4770      	bx	lr
  uint32_t tmpreg = 0U;
 800bf3c:	2000      	movs	r0, #0
}
 800bf3e:	4770      	bx	lr
}
 800bf40:	4770      	bx	lr

0800bf42 <TIM_DMAPeriodElapsedCplt>:
{
 800bf42:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf44:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bf46:	2301      	movs	r3, #1
 800bf48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedCallback(htim);
 800bf4c:	f7f5 fb86 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
}
 800bf50:	bd08      	pop	{r3, pc}

0800bf52 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
}
 800bf52:	4770      	bx	lr

0800bf54 <TIM_DMAPeriodElapsedHalfCplt>:
{
 800bf54:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf56:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800bf5e:	f7ff fff8 	bl	800bf52 <HAL_TIM_PeriodElapsedHalfCpltCallback>
}
 800bf62:	bd08      	pop	{r3, pc}

0800bf64 <HAL_TIM_OC_DelayElapsedCallback>:
}
 800bf64:	4770      	bx	lr

0800bf66 <HAL_TIM_IC_CaptureCallback>:
}
 800bf66:	4770      	bx	lr

0800bf68 <TIM_DMACaptureCplt>:
{
 800bf68:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf6a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bf72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf74:	4283      	cmp	r3, r0
 800bf76:	d010      	beq.n	800bf9a <TIM_DMACaptureCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bf78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf7a:	4283      	cmp	r3, r0
 800bf7c:	d010      	beq.n	800bfa0 <TIM_DMACaptureCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bf7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bf80:	4283      	cmp	r3, r0
 800bf82:	d010      	beq.n	800bfa6 <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bf84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bf86:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf88:	bf04      	itt	eq
 800bf8a:	2308      	moveq	r3, #8
 800bf8c:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f7ff ffe9 	bl	800bf66 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf94:	2300      	movs	r3, #0
 800bf96:	7723      	strb	r3, [r4, #28]
}
 800bf98:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	7723      	strb	r3, [r4, #28]
 800bf9e:	e7f6      	b.n	800bf8e <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	7723      	strb	r3, [r4, #28]
 800bfa4:	e7f3      	b.n	800bf8e <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bfa6:	2304      	movs	r3, #4
 800bfa8:	7723      	strb	r3, [r4, #28]
 800bfaa:	e7f0      	b.n	800bf8e <TIM_DMACaptureCplt+0x26>

0800bfac <HAL_TIM_IC_CaptureHalfCpltCallback>:
}
 800bfac:	4770      	bx	lr

0800bfae <TIM_DMACaptureHalfCplt>:
{
 800bfae:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfb0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bfb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfba:	4283      	cmp	r3, r0
 800bfbc:	d010      	beq.n	800bfe0 <TIM_DMACaptureHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bfbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bfc0:	4283      	cmp	r3, r0
 800bfc2:	d010      	beq.n	800bfe6 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bfc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bfc6:	4283      	cmp	r3, r0
 800bfc8:	d010      	beq.n	800bfec <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bfca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bfcc:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfce:	bf04      	itt	eq
 800bfd0:	2308      	moveq	r3, #8
 800bfd2:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f7ff ffe9 	bl	800bfac <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	7723      	strb	r3, [r4, #28]
}
 800bfde:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	7723      	strb	r3, [r4, #28]
 800bfe4:	e7f6      	b.n	800bfd4 <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfe6:	2302      	movs	r3, #2
 800bfe8:	7723      	strb	r3, [r4, #28]
 800bfea:	e7f3      	b.n	800bfd4 <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bfec:	2304      	movs	r3, #4
 800bfee:	7723      	strb	r3, [r4, #28]
 800bff0:	e7f0      	b.n	800bfd4 <TIM_DMACaptureHalfCplt+0x26>

0800bff2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800bff2:	4770      	bx	lr

0800bff4 <TIM_DMADelayPulseCplt>:
{
 800bff4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bff6:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bff8:	2301      	movs	r3, #1
 800bffa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c000:	4283      	cmp	r3, r0
 800c002:	d010      	beq.n	800c026 <TIM_DMADelayPulseCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c004:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c006:	4283      	cmp	r3, r0
 800c008:	d010      	beq.n	800c02c <TIM_DMADelayPulseCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c00a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c00c:	4283      	cmp	r3, r0
 800c00e:	d010      	beq.n	800c032 <TIM_DMADelayPulseCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c012:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c014:	bf04      	itt	eq
 800c016:	2308      	moveq	r3, #8
 800c018:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c01a:	4620      	mov	r0, r4
 800c01c:	f7ff ffe9 	bl	800bff2 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c020:	2300      	movs	r3, #0
 800c022:	7723      	strb	r3, [r4, #28]
}
 800c024:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c026:	2301      	movs	r3, #1
 800c028:	7723      	strb	r3, [r4, #28]
 800c02a:	e7f6      	b.n	800c01a <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c02c:	2302      	movs	r3, #2
 800c02e:	7723      	strb	r3, [r4, #28]
 800c030:	e7f3      	b.n	800c01a <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c032:	2304      	movs	r3, #4
 800c034:	7723      	strb	r3, [r4, #28]
 800c036:	e7f0      	b.n	800c01a <TIM_DMADelayPulseCplt+0x26>

0800c038 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 800c038:	4770      	bx	lr

0800c03a <TIM_DMADelayPulseHalfCplt>:
{
 800c03a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c03c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800c03e:	2301      	movs	r3, #1
 800c040:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c046:	4283      	cmp	r3, r0
 800c048:	d010      	beq.n	800c06c <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c04a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c04c:	4283      	cmp	r3, r0
 800c04e:	d010      	beq.n	800c072 <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c052:	4283      	cmp	r3, r0
 800c054:	d010      	beq.n	800c078 <TIM_DMADelayPulseHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c056:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c058:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c05a:	bf04      	itt	eq
 800c05c:	2308      	moveq	r3, #8
 800c05e:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800c060:	4620      	mov	r0, r4
 800c062:	f7ff ffe9 	bl	800c038 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c066:	2300      	movs	r3, #0
 800c068:	7723      	strb	r3, [r4, #28]
}
 800c06a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c06c:	2301      	movs	r3, #1
 800c06e:	7723      	strb	r3, [r4, #28]
 800c070:	e7f6      	b.n	800c060 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c072:	2302      	movs	r3, #2
 800c074:	7723      	strb	r3, [r4, #28]
 800c076:	e7f3      	b.n	800c060 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c078:	2304      	movs	r3, #4
 800c07a:	7723      	strb	r3, [r4, #28]
 800c07c:	e7f0      	b.n	800c060 <TIM_DMADelayPulseHalfCplt+0x26>

0800c07e <HAL_TIM_TriggerCallback>:
}
 800c07e:	4770      	bx	lr

0800c080 <HAL_TIM_IRQHandler>:
{
 800c080:	b510      	push	{r4, lr}
 800c082:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c084:	6803      	ldr	r3, [r0, #0]
 800c086:	691a      	ldr	r2, [r3, #16]
 800c088:	f012 0f02 	tst.w	r2, #2
 800c08c:	d011      	beq.n	800c0b2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c08e:	68da      	ldr	r2, [r3, #12]
 800c090:	f012 0f02 	tst.w	r2, #2
 800c094:	d00d      	beq.n	800c0b2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c096:	f06f 0202 	mvn.w	r2, #2
 800c09a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c09c:	2301      	movs	r3, #1
 800c09e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0a0:	6803      	ldr	r3, [r0, #0]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	f013 0f03 	tst.w	r3, #3
 800c0a8:	d079      	beq.n	800c19e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c0aa:	f7ff ff5c 	bl	800bf66 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	691a      	ldr	r2, [r3, #16]
 800c0b6:	f012 0f04 	tst.w	r2, #4
 800c0ba:	d012      	beq.n	800c0e2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c0bc:	68da      	ldr	r2, [r3, #12]
 800c0be:	f012 0f04 	tst.w	r2, #4
 800c0c2:	d00e      	beq.n	800c0e2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0c4:	f06f 0204 	mvn.w	r2, #4
 800c0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c0d6:	d068      	beq.n	800c1aa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f7ff ff44 	bl	800bf66 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	691a      	ldr	r2, [r3, #16]
 800c0e6:	f012 0f08 	tst.w	r2, #8
 800c0ea:	d012      	beq.n	800c112 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c0ec:	68da      	ldr	r2, [r3, #12]
 800c0ee:	f012 0f08 	tst.w	r2, #8
 800c0f2:	d00e      	beq.n	800c112 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c0f4:	f06f 0208 	mvn.w	r2, #8
 800c0f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0fa:	2304      	movs	r3, #4
 800c0fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	69db      	ldr	r3, [r3, #28]
 800c102:	f013 0f03 	tst.w	r3, #3
 800c106:	d057      	beq.n	800c1b8 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800c108:	4620      	mov	r0, r4
 800c10a:	f7ff ff2c 	bl	800bf66 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c10e:	2300      	movs	r3, #0
 800c110:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	691a      	ldr	r2, [r3, #16]
 800c116:	f012 0f10 	tst.w	r2, #16
 800c11a:	d012      	beq.n	800c142 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	f012 0f10 	tst.w	r2, #16
 800c122:	d00e      	beq.n	800c142 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c124:	f06f 0210 	mvn.w	r2, #16
 800c128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c12a:	2308      	movs	r3, #8
 800c12c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	69db      	ldr	r3, [r3, #28]
 800c132:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c136:	d046      	beq.n	800c1c6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800c138:	4620      	mov	r0, r4
 800c13a:	f7ff ff14 	bl	800bf66 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c13e:	2300      	movs	r3, #0
 800c140:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	691a      	ldr	r2, [r3, #16]
 800c146:	f012 0f01 	tst.w	r2, #1
 800c14a:	d003      	beq.n	800c154 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c14c:	68da      	ldr	r2, [r3, #12]
 800c14e:	f012 0f01 	tst.w	r2, #1
 800c152:	d13f      	bne.n	800c1d4 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	691a      	ldr	r2, [r3, #16]
 800c158:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c15c:	d003      	beq.n	800c166 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c15e:	68da      	ldr	r2, [r3, #12]
 800c160:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c164:	d13d      	bne.n	800c1e2 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c166:	6823      	ldr	r3, [r4, #0]
 800c168:	691a      	ldr	r2, [r3, #16]
 800c16a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800c16e:	d003      	beq.n	800c178 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c176:	d13b      	bne.n	800c1f0 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c178:	6823      	ldr	r3, [r4, #0]
 800c17a:	691a      	ldr	r2, [r3, #16]
 800c17c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c180:	d003      	beq.n	800c18a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c182:	68da      	ldr	r2, [r3, #12]
 800c184:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c188:	d139      	bne.n	800c1fe <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	691a      	ldr	r2, [r3, #16]
 800c18e:	f012 0f20 	tst.w	r2, #32
 800c192:	d003      	beq.n	800c19c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c194:	68da      	ldr	r2, [r3, #12]
 800c196:	f012 0f20 	tst.w	r2, #32
 800c19a:	d137      	bne.n	800c20c <HAL_TIM_IRQHandler+0x18c>
}
 800c19c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c19e:	f7ff fee1 	bl	800bf64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f7ff ff25 	bl	800bff2 <HAL_TIM_PWM_PulseFinishedCallback>
 800c1a8:	e781      	b.n	800c0ae <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f7ff feda 	bl	800bf64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f7ff ff1e 	bl	800bff2 <HAL_TIM_PWM_PulseFinishedCallback>
 800c1b6:	e792      	b.n	800c0de <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f7ff fed3 	bl	800bf64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f7ff ff17 	bl	800bff2 <HAL_TIM_PWM_PulseFinishedCallback>
 800c1c4:	e7a3      	b.n	800c10e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f7ff fecc 	bl	800bf64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f7ff ff10 	bl	800bff2 <HAL_TIM_PWM_PulseFinishedCallback>
 800c1d2:	e7b4      	b.n	800c13e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c1d4:	f06f 0201 	mvn.w	r2, #1
 800c1d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f7f5 fa3e 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
 800c1e0:	e7b8      	b.n	800c154 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c1e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f002 fe58 	bl	800ee9e <HAL_TIMEx_BreakCallback>
 800c1ee:	e7ba      	b.n	800c166 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f002 fe52 	bl	800eea0 <HAL_TIMEx_Break2Callback>
 800c1fc:	e7bc      	b.n	800c178 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c1fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c202:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c204:	4620      	mov	r0, r4
 800c206:	f7ff ff3a 	bl	800c07e <HAL_TIM_TriggerCallback>
 800c20a:	e7be      	b.n	800c18a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c20c:	f06f 0220 	mvn.w	r2, #32
 800c210:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800c212:	4620      	mov	r0, r4
 800c214:	f002 fe31 	bl	800ee7a <HAL_TIMEx_CommutCallback>
}
 800c218:	e7c0      	b.n	800c19c <HAL_TIM_IRQHandler+0x11c>

0800c21a <TIM_DMATriggerCplt>:
{
 800c21a:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c21c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800c21e:	2301      	movs	r3, #1
 800c220:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerCallback(htim);
 800c224:	f7ff ff2b 	bl	800c07e <HAL_TIM_TriggerCallback>
}
 800c228:	bd08      	pop	{r3, pc}

0800c22a <HAL_TIM_TriggerHalfCpltCallback>:
}
 800c22a:	4770      	bx	lr

0800c22c <TIM_DMATriggerHalfCplt>:
{
 800c22c:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c22e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800c230:	2301      	movs	r3, #1
 800c232:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerHalfCpltCallback(htim);
 800c236:	f7ff fff8 	bl	800c22a <HAL_TIM_TriggerHalfCpltCallback>
}
 800c23a:	bd08      	pop	{r3, pc}

0800c23c <HAL_TIM_ErrorCallback>:
}
 800c23c:	4770      	bx	lr

0800c23e <TIM_DMAError>:
{
 800c23e:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c240:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800c242:	2301      	movs	r3, #1
 800c244:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800c248:	f7ff fff8 	bl	800c23c <HAL_TIM_ErrorCallback>
}
 800c24c:	bd08      	pop	{r3, pc}

0800c24e <HAL_TIM_Base_GetState>:
  return htim->State;
 800c24e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c252:	4770      	bx	lr

0800c254 <HAL_TIM_OC_GetState>:
  return htim->State;
 800c254:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c258:	4770      	bx	lr

0800c25a <HAL_TIM_PWM_GetState>:
  return htim->State;
 800c25a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c25e:	4770      	bx	lr

0800c260 <HAL_TIM_IC_GetState>:
  return htim->State;
 800c260:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c264:	4770      	bx	lr

0800c266 <HAL_TIM_OnePulse_GetState>:
  return htim->State;
 800c266:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c26a:	4770      	bx	lr

0800c26c <HAL_TIM_Encoder_GetState>:
  return htim->State;
 800c26c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c270:	4770      	bx	lr
	...

0800c274 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800c274:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c276:	4a4c      	ldr	r2, [pc, #304]	; (800c3a8 <TIM_Base_SetConfig+0x134>)
 800c278:	4290      	cmp	r0, r2
 800c27a:	d032      	beq.n	800c2e2 <TIM_Base_SetConfig+0x6e>
 800c27c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c280:	d062      	beq.n	800c348 <TIM_Base_SetConfig+0xd4>
 800c282:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c286:	4290      	cmp	r0, r2
 800c288:	d026      	beq.n	800c2d8 <TIM_Base_SetConfig+0x64>
 800c28a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c28e:	4290      	cmp	r0, r2
 800c290:	d055      	beq.n	800c33e <TIM_Base_SetConfig+0xca>
 800c292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c296:	4290      	cmp	r0, r2
 800c298:	d019      	beq.n	800c2ce <TIM_Base_SetConfig+0x5a>
 800c29a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c29e:	4290      	cmp	r0, r2
 800c2a0:	d048      	beq.n	800c334 <TIM_Base_SetConfig+0xc0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2a2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800c2a6:	4290      	cmp	r0, r2
 800c2a8:	d053      	beq.n	800c352 <TIM_Base_SetConfig+0xde>
 800c2aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2ae:	4290      	cmp	r0, r2
 800c2b0:	d05d      	beq.n	800c36e <TIM_Base_SetConfig+0xfa>
 800c2b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2b6:	4290      	cmp	r0, r2
 800c2b8:	d067      	beq.n	800c38a <TIM_Base_SetConfig+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2be:	694a      	ldr	r2, [r1, #20]
 800c2c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c2c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2c4:	688b      	ldr	r3, [r1, #8]
 800c2c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c2c8:	680b      	ldr	r3, [r1, #0]
 800c2ca:	6283      	str	r3, [r0, #40]	; 0x28
 800c2cc:	e02f      	b.n	800c32e <TIM_Base_SetConfig+0xba>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c2d2:	684a      	ldr	r2, [r1, #4]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	e008      	b.n	800c2ea <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c2dc:	684a      	ldr	r2, [r1, #4]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	e003      	b.n	800c2ea <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c2e6:	684a      	ldr	r2, [r1, #4]
 800c2e8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2ee:	68ca      	ldr	r2, [r1, #12]
 800c2f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2f6:	694a      	ldr	r2, [r1, #20]
 800c2f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c2fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2fc:	688b      	ldr	r3, [r1, #8]
 800c2fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c300:	680b      	ldr	r3, [r1, #0]
 800c302:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c304:	4b28      	ldr	r3, [pc, #160]	; (800c3a8 <TIM_Base_SetConfig+0x134>)
 800c306:	4298      	cmp	r0, r3
 800c308:	d00f      	beq.n	800c32a <TIM_Base_SetConfig+0xb6>
 800c30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c30e:	4298      	cmp	r0, r3
 800c310:	d00b      	beq.n	800c32a <TIM_Base_SetConfig+0xb6>
 800c312:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800c316:	4298      	cmp	r0, r3
 800c318:	d007      	beq.n	800c32a <TIM_Base_SetConfig+0xb6>
 800c31a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c31e:	4298      	cmp	r0, r3
 800c320:	d003      	beq.n	800c32a <TIM_Base_SetConfig+0xb6>
 800c322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c326:	4298      	cmp	r0, r3
 800c328:	d101      	bne.n	800c32e <TIM_Base_SetConfig+0xba>
    TIMx->RCR = Structure->RepetitionCounter;
 800c32a:	690b      	ldr	r3, [r1, #16]
 800c32c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c32e:	2301      	movs	r3, #1
 800c330:	6143      	str	r3, [r0, #20]
}
 800c332:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c338:	684a      	ldr	r2, [r1, #4]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	e7d5      	b.n	800c2ea <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c342:	684a      	ldr	r2, [r1, #4]
 800c344:	4313      	orrs	r3, r2
 800c346:	e7d0      	b.n	800c2ea <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c34c:	684a      	ldr	r2, [r1, #4]
 800c34e:	4313      	orrs	r3, r2
 800c350:	e7cb      	b.n	800c2ea <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c356:	68ca      	ldr	r2, [r1, #12]
 800c358:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c35a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c35e:	694a      	ldr	r2, [r1, #20]
 800c360:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c362:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c364:	688b      	ldr	r3, [r1, #8]
 800c366:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c368:	680b      	ldr	r3, [r1, #0]
 800c36a:	6283      	str	r3, [r0, #40]	; 0x28
 800c36c:	e7dd      	b.n	800c32a <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c36e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c372:	68ca      	ldr	r2, [r1, #12]
 800c374:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c37a:	694a      	ldr	r2, [r1, #20]
 800c37c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c37e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c380:	688b      	ldr	r3, [r1, #8]
 800c382:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c384:	680b      	ldr	r3, [r1, #0]
 800c386:	6283      	str	r3, [r0, #40]	; 0x28
 800c388:	e7cf      	b.n	800c32a <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c38a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c38e:	68ca      	ldr	r2, [r1, #12]
 800c390:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c396:	694a      	ldr	r2, [r1, #20]
 800c398:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c39a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c39c:	688b      	ldr	r3, [r1, #8]
 800c39e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c3a0:	680b      	ldr	r3, [r1, #0]
 800c3a2:	6283      	str	r3, [r0, #40]	; 0x28
 800c3a4:	e7c1      	b.n	800c32a <TIM_Base_SetConfig+0xb6>
 800c3a6:	bf00      	nop
 800c3a8:	40012c00 	.word	0x40012c00

0800c3ac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c3ac:	b1a8      	cbz	r0, 800c3da <HAL_TIM_Base_Init+0x2e>
{
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c3b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c3b6:	b15b      	cbz	r3, 800c3d0 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3be:	1d21      	adds	r1, r4, #4
 800c3c0:	6820      	ldr	r0, [r4, #0]
 800c3c2:	f7ff ff57 	bl	800c274 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c3cc:	2000      	movs	r0, #0
}
 800c3ce:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c3d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c3d4:	f7f5 fbac 	bl	8001b30 <HAL_TIM_Base_MspInit>
 800c3d8:	e7ee      	b.n	800c3b8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800c3da:	2001      	movs	r0, #1
}
 800c3dc:	4770      	bx	lr

0800c3de <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800c3de:	b1a8      	cbz	r0, 800c40c <HAL_TIM_OC_Init+0x2e>
{
 800c3e0:	b510      	push	{r4, lr}
 800c3e2:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c3e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c3e8:	b15b      	cbz	r3, 800c402 <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c3ea:	2302      	movs	r3, #2
 800c3ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c3f0:	1d21      	adds	r1, r4, #4
 800c3f2:	6820      	ldr	r0, [r4, #0]
 800c3f4:	f7ff ff3e 	bl	800c274 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c3fe:	2000      	movs	r0, #0
}
 800c400:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c402:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800c406:	f7ff fa7f 	bl	800b908 <HAL_TIM_OC_MspInit>
 800c40a:	e7ee      	b.n	800c3ea <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800c40c:	2001      	movs	r0, #1
}
 800c40e:	4770      	bx	lr

0800c410 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800c410:	b1a8      	cbz	r0, 800c43e <HAL_TIM_PWM_Init+0x2e>
{
 800c412:	b510      	push	{r4, lr}
 800c414:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c416:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c41a:	b15b      	cbz	r3, 800c434 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c41c:	2302      	movs	r3, #2
 800c41e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c422:	1d21      	adds	r1, r4, #4
 800c424:	6820      	ldr	r0, [r4, #0]
 800c426:	f7ff ff25 	bl	800c274 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c42a:	2301      	movs	r3, #1
 800c42c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c430:	2000      	movs	r0, #0
}
 800c432:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c434:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c438:	f7ff fa85 	bl	800b946 <HAL_TIM_PWM_MspInit>
 800c43c:	e7ee      	b.n	800c41c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800c43e:	2001      	movs	r0, #1
}
 800c440:	4770      	bx	lr

0800c442 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800c442:	b1a8      	cbz	r0, 800c470 <HAL_TIM_IC_Init+0x2e>
{
 800c444:	b510      	push	{r4, lr}
 800c446:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c448:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c44c:	b15b      	cbz	r3, 800c466 <HAL_TIM_IC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c44e:	2302      	movs	r3, #2
 800c450:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c454:	1d21      	adds	r1, r4, #4
 800c456:	6820      	ldr	r0, [r4, #0]
 800c458:	f7ff ff0c 	bl	800c274 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c45c:	2301      	movs	r3, #1
 800c45e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c462:	2000      	movs	r0, #0
}
 800c464:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c466:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800c46a:	f7ff fa8b 	bl	800b984 <HAL_TIM_IC_MspInit>
 800c46e:	e7ee      	b.n	800c44e <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800c470:	2001      	movs	r0, #1
}
 800c472:	4770      	bx	lr

0800c474 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 800c474:	b1f8      	cbz	r0, 800c4b6 <HAL_TIM_OnePulse_Init+0x42>
{
 800c476:	b538      	push	{r3, r4, r5, lr}
 800c478:	4604      	mov	r4, r0
 800c47a:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800c47c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c480:	b1a3      	cbz	r3, 800c4ac <HAL_TIM_OnePulse_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800c482:	2302      	movs	r3, #2
 800c484:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c488:	1d21      	adds	r1, r4, #4
 800c48a:	6820      	ldr	r0, [r4, #0]
 800c48c:	f7ff fef2 	bl	800c274 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c490:	6822      	ldr	r2, [r4, #0]
 800c492:	6813      	ldr	r3, [r2, #0]
 800c494:	f023 0308 	bic.w	r3, r3, #8
 800c498:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800c49a:	6822      	ldr	r2, [r4, #0]
 800c49c:	6813      	ldr	r3, [r2, #0]
 800c49e:	432b      	orrs	r3, r5
 800c4a0:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c4a8:	2000      	movs	r0, #0
}
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c4ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800c4b0:	f7ff fa87 	bl	800b9c2 <HAL_TIM_OnePulse_MspInit>
 800c4b4:	e7e5      	b.n	800c482 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 800c4b6:	2001      	movs	r0, #1
}
 800c4b8:	4770      	bx	lr

0800c4ba <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d049      	beq.n	800c552 <HAL_TIM_Encoder_Init+0x98>
{
 800c4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800c4c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d03d      	beq.n	800c548 <HAL_TIM_Encoder_Init+0x8e>
  htim->State = HAL_TIM_STATE_BUSY;
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	f851 2b04 	ldr.w	r2, [r1], #4
 800c4d8:	6893      	ldr	r3, [r2, #8]
 800c4da:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c4de:	f023 0307 	bic.w	r3, r3, #7
 800c4e2:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4e4:	6828      	ldr	r0, [r5, #0]
 800c4e6:	f7ff fec5 	bl	800c274 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800c4ea:	6828      	ldr	r0, [r5, #0]
 800c4ec:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800c4ee:	6982      	ldr	r2, [r0, #24]
  tmpccer = htim->Instance->CCER;
 800c4f0:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	431e      	orrs	r6, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c4f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c4fa:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c4fe:	69a3      	ldr	r3, [r4, #24]
 800c500:	68a1      	ldr	r1, [r4, #8]
 800c502:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800c506:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c508:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
 800c50c:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c510:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	011b      	lsls	r3, r3, #4
 800c516:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c51a:	68e1      	ldr	r1, [r4, #12]
 800c51c:	430b      	orrs	r3, r1
 800c51e:	6a21      	ldr	r1, [r4, #32]
 800c520:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800c524:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c526:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c52a:	6961      	ldr	r1, [r4, #20]
 800c52c:	6862      	ldr	r2, [r4, #4]
 800c52e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800c532:	4317      	orrs	r7, r2
  htim->Instance->SMCR = tmpsmcr;
 800c534:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800c536:	682a      	ldr	r2, [r5, #0]
 800c538:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 800c53a:	682b      	ldr	r3, [r5, #0]
 800c53c:	621f      	str	r7, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 800c53e:	2301      	movs	r3, #1
 800c540:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 800c544:	2000      	movs	r0, #0
}
 800c546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800c548:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800c54c:	f7ff fa58 	bl	800ba00 <HAL_TIM_Encoder_MspInit>
 800c550:	e7bc      	b.n	800c4cc <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800c552:	2001      	movs	r0, #1
}
 800c554:	4770      	bx	lr
	...

0800c558 <TIM_OC2_SetConfig>:
{
 800c558:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c55a:	6a03      	ldr	r3, [r0, #32]
 800c55c:	f023 0310 	bic.w	r3, r3, #16
 800c560:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c562:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c564:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c566:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c568:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800c56c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c570:	680d      	ldr	r5, [r1, #0]
 800c572:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800c576:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c57a:	688d      	ldr	r5, [r1, #8]
 800c57c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c580:	4d17      	ldr	r5, [pc, #92]	; (800c5e0 <TIM_OC2_SetConfig+0x88>)
 800c582:	42a8      	cmp	r0, r5
 800c584:	d017      	beq.n	800c5b6 <TIM_OC2_SetConfig+0x5e>
 800c586:	4f17      	ldr	r7, [pc, #92]	; (800c5e4 <TIM_OC2_SetConfig+0x8c>)
 800c588:	42b8      	cmp	r0, r7
 800c58a:	d00c      	beq.n	800c5a6 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c58c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800c590:	42a8      	cmp	r0, r5
 800c592:	d017      	beq.n	800c5c4 <TIM_OC2_SetConfig+0x6c>
 800c594:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c598:	42a8      	cmp	r0, r5
 800c59a:	d013      	beq.n	800c5c4 <TIM_OC2_SetConfig+0x6c>
 800c59c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c5a0:	42a8      	cmp	r0, r5
 800c5a2:	d116      	bne.n	800c5d2 <TIM_OC2_SetConfig+0x7a>
 800c5a4:	e00e      	b.n	800c5c4 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c5aa:	68cd      	ldr	r5, [r1, #12]
 800c5ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5b4:	e006      	b.n	800c5c4 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c5ba:	68cd      	ldr	r5, [r1, #12]
 800c5bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5c4:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5c8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5ca:	698f      	ldr	r7, [r1, #24]
 800c5cc:	433c      	orrs	r4, r7
 800c5ce:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800c5d2:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c5d4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c5d6:	684a      	ldr	r2, [r1, #4]
 800c5d8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800c5da:	6203      	str	r3, [r0, #32]
}
 800c5dc:	bcf0      	pop	{r4, r5, r6, r7}
 800c5de:	4770      	bx	lr
 800c5e0:	40012c00 	.word	0x40012c00
 800c5e4:	40013400 	.word	0x40013400

0800c5e8 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800c5e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d034      	beq.n	800c65a <HAL_TIM_OC_ConfigChannel+0x72>
{
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800c600:	2a14      	cmp	r2, #20
 800c602:	d80f      	bhi.n	800c624 <HAL_TIM_OC_ConfigChannel+0x3c>
 800c604:	e8df f002 	tbb	[pc, r2]
 800c608:	0e0e0e0b 	.word	0x0e0e0e0b
 800c60c:	0e0e0e15 	.word	0x0e0e0e15
 800c610:	0e0e0e19 	.word	0x0e0e0e19
 800c614:	0e0e0e1d 	.word	0x0e0e0e1d
 800c618:	0e0e0e21 	.word	0x0e0e0e21
 800c61c:	25          	.byte	0x25
 800c61d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c61e:	6800      	ldr	r0, [r0, #0]
 800c620:	f7fe ff52 	bl	800b4c8 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c624:	2301      	movs	r3, #1
 800c626:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c62a:	2000      	movs	r0, #0
 800c62c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c630:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c632:	6800      	ldr	r0, [r0, #0]
 800c634:	f7ff ff90 	bl	800c558 <TIM_OC2_SetConfig>
      break;
 800c638:	e7f4      	b.n	800c624 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c63a:	6800      	ldr	r0, [r0, #0]
 800c63c:	f7fe ff9c 	bl	800b578 <TIM_OC3_SetConfig>
      break;
 800c640:	e7f0      	b.n	800c624 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c642:	6800      	ldr	r0, [r0, #0]
 800c644:	f7fe ffe0 	bl	800b608 <TIM_OC4_SetConfig>
      break;
 800c648:	e7ec      	b.n	800c624 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c64a:	6800      	ldr	r0, [r0, #0]
 800c64c:	f7ff f812 	bl	800b674 <TIM_OC5_SetConfig>
      break;
 800c650:	e7e8      	b.n	800c624 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c652:	6800      	ldr	r0, [r0, #0]
 800c654:	f7ff f842 	bl	800b6dc <TIM_OC6_SetConfig>
      break;
 800c658:	e7e4      	b.n	800c624 <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 800c65a:	2002      	movs	r0, #2
}
 800c65c:	4770      	bx	lr

0800c65e <HAL_TIM_PWM_ConfigChannel>:
{
 800c65e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800c660:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c664:	2b01      	cmp	r3, #1
 800c666:	f000 8092 	beq.w	800c78e <HAL_TIM_PWM_ConfigChannel+0x130>
 800c66a:	460d      	mov	r5, r1
 800c66c:	4604      	mov	r4, r0
 800c66e:	2301      	movs	r3, #1
 800c670:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c674:	2302      	movs	r3, #2
 800c676:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800c67a:	2a14      	cmp	r2, #20
 800c67c:	d81e      	bhi.n	800c6bc <HAL_TIM_PWM_ConfigChannel+0x5e>
 800c67e:	e8df f002 	tbb	[pc, r2]
 800c682:	1d0b      	.short	0x1d0b
 800c684:	1d241d1d 	.word	0x1d241d1d
 800c688:	1d381d1d 	.word	0x1d381d1d
 800c68c:	1d4b1d1d 	.word	0x1d4b1d1d
 800c690:	1d5f1d1d 	.word	0x1d5f1d1d
 800c694:	1d1d      	.short	0x1d1d
 800c696:	72          	.byte	0x72
 800c697:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c698:	6800      	ldr	r0, [r0, #0]
 800c69a:	f7fe ff15 	bl	800b4c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c69e:	6822      	ldr	r2, [r4, #0]
 800c6a0:	6993      	ldr	r3, [r2, #24]
 800c6a2:	f043 0308 	orr.w	r3, r3, #8
 800c6a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c6a8:	6822      	ldr	r2, [r4, #0]
 800c6aa:	6993      	ldr	r3, [r2, #24]
 800c6ac:	f023 0304 	bic.w	r3, r3, #4
 800c6b0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c6b2:	6822      	ldr	r2, [r4, #0]
 800c6b4:	6993      	ldr	r3, [r2, #24]
 800c6b6:	6929      	ldr	r1, [r5, #16]
 800c6b8:	430b      	orrs	r3, r1
 800c6ba:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c6c8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c6ca:	6800      	ldr	r0, [r0, #0]
 800c6cc:	f7ff ff44 	bl	800c558 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c6d0:	6822      	ldr	r2, [r4, #0]
 800c6d2:	6993      	ldr	r3, [r2, #24]
 800c6d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c6d8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6da:	6822      	ldr	r2, [r4, #0]
 800c6dc:	6993      	ldr	r3, [r2, #24]
 800c6de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6e2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6e4:	6822      	ldr	r2, [r4, #0]
 800c6e6:	6993      	ldr	r3, [r2, #24]
 800c6e8:	6929      	ldr	r1, [r5, #16]
 800c6ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c6ee:	6193      	str	r3, [r2, #24]
      break;
 800c6f0:	e7e4      	b.n	800c6bc <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6f2:	6800      	ldr	r0, [r0, #0]
 800c6f4:	f7fe ff40 	bl	800b578 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6f8:	6822      	ldr	r2, [r4, #0]
 800c6fa:	69d3      	ldr	r3, [r2, #28]
 800c6fc:	f043 0308 	orr.w	r3, r3, #8
 800c700:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c702:	6822      	ldr	r2, [r4, #0]
 800c704:	69d3      	ldr	r3, [r2, #28]
 800c706:	f023 0304 	bic.w	r3, r3, #4
 800c70a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c70c:	6822      	ldr	r2, [r4, #0]
 800c70e:	69d3      	ldr	r3, [r2, #28]
 800c710:	6929      	ldr	r1, [r5, #16]
 800c712:	430b      	orrs	r3, r1
 800c714:	61d3      	str	r3, [r2, #28]
      break;
 800c716:	e7d1      	b.n	800c6bc <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c718:	6800      	ldr	r0, [r0, #0]
 800c71a:	f7fe ff75 	bl	800b608 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c71e:	6822      	ldr	r2, [r4, #0]
 800c720:	69d3      	ldr	r3, [r2, #28]
 800c722:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c726:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c728:	6822      	ldr	r2, [r4, #0]
 800c72a:	69d3      	ldr	r3, [r2, #28]
 800c72c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c730:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c732:	6822      	ldr	r2, [r4, #0]
 800c734:	69d3      	ldr	r3, [r2, #28]
 800c736:	6929      	ldr	r1, [r5, #16]
 800c738:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c73c:	61d3      	str	r3, [r2, #28]
      break;
 800c73e:	e7bd      	b.n	800c6bc <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c740:	6800      	ldr	r0, [r0, #0]
 800c742:	f7fe ff97 	bl	800b674 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c746:	6822      	ldr	r2, [r4, #0]
 800c748:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c74a:	f043 0308 	orr.w	r3, r3, #8
 800c74e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c750:	6822      	ldr	r2, [r4, #0]
 800c752:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c754:	f023 0304 	bic.w	r3, r3, #4
 800c758:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c75a:	6822      	ldr	r2, [r4, #0]
 800c75c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c75e:	6929      	ldr	r1, [r5, #16]
 800c760:	430b      	orrs	r3, r1
 800c762:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800c764:	e7aa      	b.n	800c6bc <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c766:	6800      	ldr	r0, [r0, #0]
 800c768:	f7fe ffb8 	bl	800b6dc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c76c:	6822      	ldr	r2, [r4, #0]
 800c76e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c774:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c776:	6822      	ldr	r2, [r4, #0]
 800c778:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c77a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c77e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c780:	6822      	ldr	r2, [r4, #0]
 800c782:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c784:	6929      	ldr	r1, [r5, #16]
 800c786:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c78a:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800c78c:	e796      	b.n	800c6bc <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 800c78e:	2002      	movs	r0, #2
 800c790:	e79a      	b.n	800c6c8 <HAL_TIM_PWM_ConfigChannel+0x6a>
	...

0800c794 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c794:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c796:	6a04      	ldr	r4, [r0, #32]
 800c798:	f024 0401 	bic.w	r4, r4, #1
 800c79c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c79e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800c7a0:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c7a2:	4e17      	ldr	r6, [pc, #92]	; (800c800 <TIM_TI1_SetConfig+0x6c>)
 800c7a4:	42b0      	cmp	r0, r6
 800c7a6:	d019      	beq.n	800c7dc <TIM_TI1_SetConfig+0x48>
 800c7a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c7ac:	d016      	beq.n	800c7dc <TIM_TI1_SetConfig+0x48>
 800c7ae:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800c7b2:	42b0      	cmp	r0, r6
 800c7b4:	d012      	beq.n	800c7dc <TIM_TI1_SetConfig+0x48>
 800c7b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c7ba:	42b0      	cmp	r0, r6
 800c7bc:	d00e      	beq.n	800c7dc <TIM_TI1_SetConfig+0x48>
 800c7be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c7c2:	42b0      	cmp	r0, r6
 800c7c4:	d00a      	beq.n	800c7dc <TIM_TI1_SetConfig+0x48>
 800c7c6:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800c7ca:	42b0      	cmp	r0, r6
 800c7cc:	d006      	beq.n	800c7dc <TIM_TI1_SetConfig+0x48>
 800c7ce:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800c7d2:	42b0      	cmp	r0, r6
 800c7d4:	d002      	beq.n	800c7dc <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c7d6:	f044 0201 	orr.w	r2, r4, #1
 800c7da:	e002      	b.n	800c7e2 <TIM_TI1_SetConfig+0x4e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c7dc:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800c7e0:	4322      	orrs	r2, r4
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c7e6:	011b      	lsls	r3, r3, #4
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7ec:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c7f0:	f001 010a 	and.w	r1, r1, #10
 800c7f4:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7f6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800c7f8:	6201      	str	r1, [r0, #32]
}
 800c7fa:	bc70      	pop	{r4, r5, r6}
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	40012c00 	.word	0x40012c00

0800c804 <HAL_TIM_IC_ConfigChannel>:
{
 800c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800c806:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	f000 8098 	beq.w	800c940 <HAL_TIM_IC_ConfigChannel+0x13c>
 800c810:	460d      	mov	r5, r1
 800c812:	4604      	mov	r4, r0
 800c814:	2301      	movs	r3, #1
 800c816:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c81a:	2302      	movs	r3, #2
 800c81c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800c820:	2a00      	cmp	r2, #0
 800c822:	d030      	beq.n	800c886 <HAL_TIM_IC_ConfigChannel+0x82>
  else if (Channel == TIM_CHANNEL_2)
 800c824:	2a04      	cmp	r2, #4
 800c826:	d03f      	beq.n	800c8a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  else if (Channel == TIM_CHANNEL_3)
 800c828:	2a08      	cmp	r2, #8
 800c82a:	d064      	beq.n	800c8f6 <HAL_TIM_IC_ConfigChannel+0xf2>
    TIM_TI4_SetConfig(htim->Instance,
 800c82c:	6800      	ldr	r0, [r0, #0]
 800c82e:	680b      	ldr	r3, [r1, #0]
 800c830:	684f      	ldr	r7, [r1, #4]
 800c832:	68ca      	ldr	r2, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c834:	6a06      	ldr	r6, [r0, #32]
 800c836:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
 800c83a:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c83c:	69c1      	ldr	r1, [r0, #28]
  tmpccer = TIMx->CCER;
 800c83e:	6a06      	ldr	r6, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c840:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c844:	ea41 2107 	orr.w	r1, r1, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c848:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c84c:	0312      	lsls	r2, r2, #12
 800c84e:	b292      	uxth	r2, r2
 800c850:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c852:	f426 4120 	bic.w	r1, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c856:	031b      	lsls	r3, r3, #12
 800c858:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c85c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c85e:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800c860:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c862:	6822      	ldr	r2, [r4, #0]
 800c864:	69d3      	ldr	r3, [r2, #28]
 800c866:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c86a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c86c:	6822      	ldr	r2, [r4, #0]
 800c86e:	69d3      	ldr	r3, [r2, #28]
 800c870:	68a9      	ldr	r1, [r5, #8]
 800c872:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c876:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800c878:	2301      	movs	r3, #1
 800c87a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c87e:	2000      	movs	r0, #0
 800c880:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800c886:	68cb      	ldr	r3, [r1, #12]
 800c888:	684a      	ldr	r2, [r1, #4]
 800c88a:	6809      	ldr	r1, [r1, #0]
 800c88c:	6800      	ldr	r0, [r0, #0]
 800c88e:	f7ff ff81 	bl	800c794 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c892:	6822      	ldr	r2, [r4, #0]
 800c894:	6993      	ldr	r3, [r2, #24]
 800c896:	f023 030c 	bic.w	r3, r3, #12
 800c89a:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c89c:	6822      	ldr	r2, [r4, #0]
 800c89e:	6993      	ldr	r3, [r2, #24]
 800c8a0:	68a9      	ldr	r1, [r5, #8]
 800c8a2:	430b      	orrs	r3, r1
 800c8a4:	6193      	str	r3, [r2, #24]
 800c8a6:	e7e7      	b.n	800c878 <HAL_TIM_IC_ConfigChannel+0x74>
    TIM_TI2_SetConfig(htim->Instance,
 800c8a8:	6800      	ldr	r0, [r0, #0]
 800c8aa:	680b      	ldr	r3, [r1, #0]
 800c8ac:	684f      	ldr	r7, [r1, #4]
 800c8ae:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8b0:	6a06      	ldr	r6, [r0, #32]
 800c8b2:	f026 0610 	bic.w	r6, r6, #16
 800c8b6:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8b8:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800c8ba:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c8bc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c8c0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8c4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c8c8:	0312      	lsls	r2, r2, #12
 800c8ca:	b292      	uxth	r2, r2
 800c8cc:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8ce:	f026 01a0 	bic.w	r1, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c8d2:	011b      	lsls	r3, r3, #4
 800c8d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c8d8:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800c8da:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800c8dc:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c8de:	6822      	ldr	r2, [r4, #0]
 800c8e0:	6993      	ldr	r3, [r2, #24]
 800c8e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c8e6:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c8e8:	6822      	ldr	r2, [r4, #0]
 800c8ea:	6993      	ldr	r3, [r2, #24]
 800c8ec:	68a9      	ldr	r1, [r5, #8]
 800c8ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c8f2:	6193      	str	r3, [r2, #24]
 800c8f4:	e7c0      	b.n	800c878 <HAL_TIM_IC_ConfigChannel+0x74>
    TIM_TI3_SetConfig(htim->Instance,
 800c8f6:	6801      	ldr	r1, [r0, #0]
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	6868      	ldr	r0, [r5, #4]
 800c8fc:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8fe:	6a0e      	ldr	r6, [r1, #32]
 800c900:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 800c904:	620e      	str	r6, [r1, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c906:	69cf      	ldr	r7, [r1, #28]
  tmpccer = TIMx->CCER;
 800c908:	6a0e      	ldr	r6, [r1, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c90a:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800c90e:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c910:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c914:	0112      	lsls	r2, r2, #4
 800c916:	b2d2      	uxtb	r2, r2
 800c918:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c91a:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c91e:	021b      	lsls	r3, r3, #8
 800c920:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c924:	4303      	orrs	r3, r0
  TIMx->CCMR2 = tmpccmr2;
 800c926:	61ca      	str	r2, [r1, #28]
  TIMx->CCER = tmpccer;
 800c928:	620b      	str	r3, [r1, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c92a:	6822      	ldr	r2, [r4, #0]
 800c92c:	69d3      	ldr	r3, [r2, #28]
 800c92e:	f023 030c 	bic.w	r3, r3, #12
 800c932:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c934:	6822      	ldr	r2, [r4, #0]
 800c936:	69d3      	ldr	r3, [r2, #28]
 800c938:	68a9      	ldr	r1, [r5, #8]
 800c93a:	430b      	orrs	r3, r1
 800c93c:	61d3      	str	r3, [r2, #28]
 800c93e:	e79b      	b.n	800c878 <HAL_TIM_IC_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 800c940:	2002      	movs	r0, #2
 800c942:	e79f      	b.n	800c884 <HAL_TIM_IC_ConfigChannel+0x80>

0800c944 <HAL_TIM_OnePulse_ConfigChannel>:
  if (OutputChannel != InputChannel)
 800c944:	429a      	cmp	r2, r3
 800c946:	f000 808d 	beq.w	800ca64 <HAL_TIM_OnePulse_ConfigChannel+0x120>
{
 800c94a:	b570      	push	{r4, r5, r6, lr}
 800c94c:	b088      	sub	sp, #32
    __HAL_LOCK(htim);
 800c94e:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800c952:	2c01      	cmp	r4, #1
 800c954:	f000 8088 	beq.w	800ca68 <HAL_TIM_OnePulse_ConfigChannel+0x124>
 800c958:	461e      	mov	r6, r3
 800c95a:	460d      	mov	r5, r1
 800c95c:	4604      	mov	r4, r0
 800c95e:	2301      	movs	r3, #1
 800c960:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    htim->State = HAL_TIM_STATE_BUSY;
 800c964:	2302      	movs	r3, #2
 800c966:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    temp1.OCMode = sConfig->OCMode;
 800c96a:	680b      	ldr	r3, [r1, #0]
 800c96c:	9301      	str	r3, [sp, #4]
    temp1.Pulse = sConfig->Pulse;
 800c96e:	684b      	ldr	r3, [r1, #4]
 800c970:	9302      	str	r3, [sp, #8]
    temp1.OCPolarity = sConfig->OCPolarity;
 800c972:	688b      	ldr	r3, [r1, #8]
 800c974:	9303      	str	r3, [sp, #12]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 800c976:	68cb      	ldr	r3, [r1, #12]
 800c978:	9304      	str	r3, [sp, #16]
    temp1.OCIdleState = sConfig->OCIdleState;
 800c97a:	690b      	ldr	r3, [r1, #16]
 800c97c:	9306      	str	r3, [sp, #24]
    temp1.OCNIdleState = sConfig->OCNIdleState;
 800c97e:	694b      	ldr	r3, [r1, #20]
 800c980:	9307      	str	r3, [sp, #28]
    switch (OutputChannel)
 800c982:	b162      	cbz	r2, 800c99e <HAL_TIM_OnePulse_ConfigChannel+0x5a>
 800c984:	2a04      	cmp	r2, #4
 800c986:	d00f      	beq.n	800c9a8 <HAL_TIM_OnePulse_ConfigChannel+0x64>
    switch (InputChannel)
 800c988:	b19e      	cbz	r6, 800c9b2 <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 800c98a:	2e04      	cmp	r6, #4
 800c98c:	d033      	beq.n	800c9f6 <HAL_TIM_OnePulse_ConfigChannel+0xb2>
    htim->State = HAL_TIM_STATE_READY;
 800c98e:	2301      	movs	r3, #1
 800c990:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800c994:	2000      	movs	r0, #0
 800c996:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c99a:	b008      	add	sp, #32
 800c99c:	bd70      	pop	{r4, r5, r6, pc}
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 800c99e:	a901      	add	r1, sp, #4
 800c9a0:	6800      	ldr	r0, [r0, #0]
 800c9a2:	f7fe fd91 	bl	800b4c8 <TIM_OC1_SetConfig>
        break;
 800c9a6:	e7ef      	b.n	800c988 <HAL_TIM_OnePulse_ConfigChannel+0x44>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 800c9a8:	a901      	add	r1, sp, #4
 800c9aa:	6800      	ldr	r0, [r0, #0]
 800c9ac:	f7ff fdd4 	bl	800c558 <TIM_OC2_SetConfig>
        break;
 800c9b0:	e7ea      	b.n	800c988 <HAL_TIM_OnePulse_ConfigChannel+0x44>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 800c9b2:	6a2b      	ldr	r3, [r5, #32]
 800c9b4:	69ea      	ldr	r2, [r5, #28]
 800c9b6:	69a9      	ldr	r1, [r5, #24]
 800c9b8:	6820      	ldr	r0, [r4, #0]
 800c9ba:	f7ff feeb 	bl	800c794 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c9be:	6822      	ldr	r2, [r4, #0]
 800c9c0:	6993      	ldr	r3, [r2, #24]
 800c9c2:	f023 030c 	bic.w	r3, r3, #12
 800c9c6:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800c9c8:	6822      	ldr	r2, [r4, #0]
 800c9ca:	6893      	ldr	r3, [r2, #8]
 800c9cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9d0:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800c9d2:	6822      	ldr	r2, [r4, #0]
 800c9d4:	6893      	ldr	r3, [r2, #8]
 800c9d6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800c9da:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800c9dc:	6822      	ldr	r2, [r4, #0]
 800c9de:	6893      	ldr	r3, [r2, #8]
 800c9e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9e4:	f023 0307 	bic.w	r3, r3, #7
 800c9e8:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	6893      	ldr	r3, [r2, #8]
 800c9ee:	f043 0306 	orr.w	r3, r3, #6
 800c9f2:	6093      	str	r3, [r2, #8]
        break;
 800c9f4:	e7cb      	b.n	800c98e <HAL_TIM_OnePulse_ConfigChannel+0x4a>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800c9f6:	6820      	ldr	r0, [r4, #0]
 800c9f8:	69ab      	ldr	r3, [r5, #24]
 800c9fa:	69ee      	ldr	r6, [r5, #28]
 800c9fc:	6a2a      	ldr	r2, [r5, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9fe:	6a05      	ldr	r5, [r0, #32]
 800ca00:	f025 0510 	bic.w	r5, r5, #16
 800ca04:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca06:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800ca08:	6a05      	ldr	r5, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ca0a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ca0e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca12:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ca16:	0312      	lsls	r2, r2, #12
 800ca18:	b292      	uxth	r2, r2
 800ca1a:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca1c:	f025 01a0 	bic.w	r1, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ca20:	011b      	lsls	r3, r3, #4
 800ca22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ca26:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800ca28:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ca2a:	6203      	str	r3, [r0, #32]
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ca2c:	6822      	ldr	r2, [r4, #0]
 800ca2e:	6993      	ldr	r3, [r2, #24]
 800ca30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ca34:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ca36:	6822      	ldr	r2, [r4, #0]
 800ca38:	6893      	ldr	r3, [r2, #8]
 800ca3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca3e:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	6893      	ldr	r3, [r2, #8]
 800ca44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ca48:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800ca4a:	6822      	ldr	r2, [r4, #0]
 800ca4c:	6893      	ldr	r3, [r2, #8]
 800ca4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca52:	f023 0307 	bic.w	r3, r3, #7
 800ca56:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800ca58:	6822      	ldr	r2, [r4, #0]
 800ca5a:	6893      	ldr	r3, [r2, #8]
 800ca5c:	f043 0306 	orr.w	r3, r3, #6
 800ca60:	6093      	str	r3, [r2, #8]
        break;
 800ca62:	e794      	b.n	800c98e <HAL_TIM_OnePulse_ConfigChannel+0x4a>
    return HAL_ERROR;
 800ca64:	2001      	movs	r0, #1
}
 800ca66:	4770      	bx	lr
    __HAL_LOCK(htim);
 800ca68:	2002      	movs	r0, #2
 800ca6a:	e796      	b.n	800c99a <HAL_TIM_OnePulse_ConfigChannel+0x56>

0800ca6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca6c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca6e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca70:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca74:	430a      	orrs	r2, r1
 800ca76:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800ca7a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca7c:	6083      	str	r3, [r0, #8]
}
 800ca7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <HAL_TIM_ConfigOCrefClear>:
  __HAL_LOCK(htim);
 800ca84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	f000 809c 	beq.w	800cbc6 <HAL_TIM_ConfigOCrefClear+0x142>
{
 800ca8e:	b570      	push	{r4, r5, r6, lr}
 800ca90:	4616      	mov	r6, r2
 800ca92:	460d      	mov	r5, r1
 800ca94:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800ca96:	2301      	movs	r3, #1
 800ca98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (sClearInputConfig->ClearInputSource)
 800caa2:	684b      	ldr	r3, [r1, #4]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d01f      	beq.n	800cae8 <HAL_TIM_ConfigOCrefClear+0x64>
 800caa8:	b183      	cbz	r3, 800cacc <HAL_TIM_ConfigOCrefClear+0x48>
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d016      	beq.n	800cadc <HAL_TIM_ConfigOCrefClear+0x58>
  switch (Channel)
 800caae:	2e14      	cmp	r6, #20
 800cab0:	d836      	bhi.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
 800cab2:	e8df f006 	tbb	[pc, r6]
 800cab6:	352e      	.short	0x352e
 800cab8:	35423535 	.word	0x35423535
 800cabc:	35503535 	.word	0x35503535
 800cac0:	355e3535 	.word	0x355e3535
 800cac4:	356c3535 	.word	0x356c3535
 800cac8:	3535      	.short	0x3535
 800caca:	7a          	.byte	0x7a
 800cacb:	00          	.byte	0x00
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800cacc:	6802      	ldr	r2, [r0, #0]
 800cace:	6893      	ldr	r3, [r2, #8]
 800cad0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cad4:	f023 0308 	bic.w	r3, r3, #8
 800cad8:	6093      	str	r3, [r2, #8]
      break;
 800cada:	e7e8      	b.n	800caae <HAL_TIM_ConfigOCrefClear+0x2a>
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 800cadc:	6802      	ldr	r2, [r0, #0]
 800cade:	6893      	ldr	r3, [r2, #8]
 800cae0:	f023 0308 	bic.w	r3, r3, #8
 800cae4:	6093      	str	r3, [r2, #8]
    break;
 800cae6:	e7e2      	b.n	800caae <HAL_TIM_ConfigOCrefClear+0x2a>
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800cae8:	68cb      	ldr	r3, [r1, #12]
 800caea:	b133      	cbz	r3, 800cafa <HAL_TIM_ConfigOCrefClear+0x76>
        htim->State = HAL_TIM_STATE_READY;
 800caec:	2001      	movs	r0, #1
 800caee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 800caf2:	2300      	movs	r3, #0
 800caf4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800caf8:	e018      	b.n	800cb2c <HAL_TIM_ConfigOCrefClear+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 800cafa:	690b      	ldr	r3, [r1, #16]
 800cafc:	688a      	ldr	r2, [r1, #8]
 800cafe:	2100      	movs	r1, #0
 800cb00:	6800      	ldr	r0, [r0, #0]
 800cb02:	f7ff ffb3 	bl	800ca6c <TIM_ETR_SetConfig>
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 800cb06:	6822      	ldr	r2, [r4, #0]
 800cb08:	6893      	ldr	r3, [r2, #8]
 800cb0a:	f043 0308 	orr.w	r3, r3, #8
 800cb0e:	6093      	str	r3, [r2, #8]
      break;
 800cb10:	e7cd      	b.n	800caae <HAL_TIM_ConfigOCrefClear+0x2a>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb12:	682b      	ldr	r3, [r5, #0]
 800cb14:	b15b      	cbz	r3, 800cb2e <HAL_TIM_ConfigOCrefClear+0xaa>
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800cb16:	6822      	ldr	r2, [r4, #0]
 800cb18:	6993      	ldr	r3, [r2, #24]
 800cb1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb1e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800cb20:	2301      	movs	r3, #1
 800cb22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cb26:	2000      	movs	r0, #0
 800cb28:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800cb2c:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800cb2e:	6822      	ldr	r2, [r4, #0]
 800cb30:	6993      	ldr	r3, [r2, #24]
 800cb32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb36:	6193      	str	r3, [r2, #24]
 800cb38:	e7f2      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb3a:	682b      	ldr	r3, [r5, #0]
 800cb3c:	b12b      	cbz	r3, 800cb4a <HAL_TIM_ConfigOCrefClear+0xc6>
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800cb3e:	6822      	ldr	r2, [r4, #0]
 800cb40:	6993      	ldr	r3, [r2, #24]
 800cb42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb46:	6193      	str	r3, [r2, #24]
 800cb48:	e7ea      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800cb4a:	6822      	ldr	r2, [r4, #0]
 800cb4c:	6993      	ldr	r3, [r2, #24]
 800cb4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb52:	6193      	str	r3, [r2, #24]
 800cb54:	e7e4      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb56:	682b      	ldr	r3, [r5, #0]
 800cb58:	b12b      	cbz	r3, 800cb66 <HAL_TIM_ConfigOCrefClear+0xe2>
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800cb5a:	6822      	ldr	r2, [r4, #0]
 800cb5c:	69d3      	ldr	r3, [r2, #28]
 800cb5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb62:	61d3      	str	r3, [r2, #28]
 800cb64:	e7dc      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800cb66:	6822      	ldr	r2, [r4, #0]
 800cb68:	69d3      	ldr	r3, [r2, #28]
 800cb6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb6e:	61d3      	str	r3, [r2, #28]
 800cb70:	e7d6      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb72:	682b      	ldr	r3, [r5, #0]
 800cb74:	b12b      	cbz	r3, 800cb82 <HAL_TIM_ConfigOCrefClear+0xfe>
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800cb76:	6822      	ldr	r2, [r4, #0]
 800cb78:	69d3      	ldr	r3, [r2, #28]
 800cb7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb7e:	61d3      	str	r3, [r2, #28]
 800cb80:	e7ce      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800cb82:	6822      	ldr	r2, [r4, #0]
 800cb84:	69d3      	ldr	r3, [r2, #28]
 800cb86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb8a:	61d3      	str	r3, [r2, #28]
 800cb8c:	e7c8      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb8e:	682b      	ldr	r3, [r5, #0]
 800cb90:	b12b      	cbz	r3, 800cb9e <HAL_TIM_ConfigOCrefClear+0x11a>
        SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cb96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb9a:	6553      	str	r3, [r2, #84]	; 0x54
 800cb9c:	e7c0      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800cb9e:	6822      	ldr	r2, [r4, #0]
 800cba0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cba6:	6553      	str	r3, [r2, #84]	; 0x54
 800cba8:	e7ba      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cbaa:	682b      	ldr	r3, [r5, #0]
 800cbac:	b12b      	cbz	r3, 800cbba <HAL_TIM_ConfigOCrefClear+0x136>
        SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 800cbae:	6822      	ldr	r2, [r4, #0]
 800cbb0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbb6:	6553      	str	r3, [r2, #84]	; 0x54
 800cbb8:	e7b2      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 800cbba:	6822      	ldr	r2, [r4, #0]
 800cbbc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbc2:	6553      	str	r3, [r2, #84]	; 0x54
 800cbc4:	e7ac      	b.n	800cb20 <HAL_TIM_ConfigOCrefClear+0x9c>
  __HAL_LOCK(htim);
 800cbc6:	2002      	movs	r0, #2
}
 800cbc8:	4770      	bx	lr
	...

0800cbcc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800cbcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	f000 809b 	beq.w	800cd0c <HAL_TIM_ConfigClockSource+0x140>
{
 800cbd6:	b570      	push	{r4, r5, r6, lr}
 800cbd8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cbda:	2301      	movs	r3, #1
 800cbdc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800cbe6:	6802      	ldr	r2, [r0, #0]
 800cbe8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbea:	4b49      	ldr	r3, [pc, #292]	; (800cd10 <HAL_TIM_ConfigClockSource+0x144>)
 800cbec:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800cbee:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800cbf0:	680b      	ldr	r3, [r1, #0]
 800cbf2:	2b40      	cmp	r3, #64	; 0x40
 800cbf4:	d070      	beq.n	800ccd8 <HAL_TIM_ConfigClockSource+0x10c>
 800cbf6:	d913      	bls.n	800cc20 <HAL_TIM_ConfigClockSource+0x54>
 800cbf8:	2b60      	cmp	r3, #96	; 0x60
 800cbfa:	d052      	beq.n	800cca2 <HAL_TIM_ConfigClockSource+0xd6>
 800cbfc:	d923      	bls.n	800cc46 <HAL_TIM_ConfigClockSource+0x7a>
 800cbfe:	2b70      	cmp	r3, #112	; 0x70
 800cc00:	d03d      	beq.n	800cc7e <HAL_TIM_ConfigClockSource+0xb2>
 800cc02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc06:	d145      	bne.n	800cc94 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 800cc08:	68cb      	ldr	r3, [r1, #12]
 800cc0a:	684a      	ldr	r2, [r1, #4]
 800cc0c:	6889      	ldr	r1, [r1, #8]
 800cc0e:	6820      	ldr	r0, [r4, #0]
 800cc10:	f7ff ff2c 	bl	800ca6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc14:	6822      	ldr	r2, [r4, #0]
 800cc16:	6893      	ldr	r3, [r2, #8]
 800cc18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cc1c:	6093      	str	r3, [r2, #8]
      break;
 800cc1e:	e039      	b.n	800cc94 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800cc20:	2b10      	cmp	r3, #16
 800cc22:	d007      	beq.n	800cc34 <HAL_TIM_ConfigClockSource+0x68>
 800cc24:	d904      	bls.n	800cc30 <HAL_TIM_ConfigClockSource+0x64>
 800cc26:	2b20      	cmp	r3, #32
 800cc28:	d004      	beq.n	800cc34 <HAL_TIM_ConfigClockSource+0x68>
 800cc2a:	2b30      	cmp	r3, #48	; 0x30
 800cc2c:	d002      	beq.n	800cc34 <HAL_TIM_ConfigClockSource+0x68>
 800cc2e:	e031      	b.n	800cc94 <HAL_TIM_ConfigClockSource+0xc8>
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d12f      	bne.n	800cc94 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc34:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cc36:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc3c:	f043 0307 	orr.w	r3, r3, #7
 800cc40:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800cc42:	608b      	str	r3, [r1, #8]
 800cc44:	e026      	b.n	800cc94 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800cc46:	2b50      	cmp	r3, #80	; 0x50
 800cc48:	d124      	bne.n	800cc94 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	6848      	ldr	r0, [r1, #4]
 800cc4e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800cc50:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc52:	6a1d      	ldr	r5, [r3, #32]
 800cc54:	f025 0501 	bic.w	r5, r5, #1
 800cc58:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc5a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc5c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc60:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc64:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800cc68:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800cc6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc6c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc6e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cc70:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc76:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800cc7a:	6093      	str	r3, [r2, #8]
 800cc7c:	e00a      	b.n	800cc94 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 800cc7e:	68cb      	ldr	r3, [r1, #12]
 800cc80:	684a      	ldr	r2, [r1, #4]
 800cc82:	6889      	ldr	r1, [r1, #8]
 800cc84:	6820      	ldr	r0, [r4, #0]
 800cc86:	f7ff fef1 	bl	800ca6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cc8a:	6822      	ldr	r2, [r4, #0]
 800cc8c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800cc92:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800cc94:	2301      	movs	r3, #1
 800cc96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800cca0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	684d      	ldr	r5, [r1, #4]
 800cca6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cca8:	6a18      	ldr	r0, [r3, #32]
 800ccaa:	f020 0010 	bic.w	r0, r0, #16
 800ccae:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccb0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800ccb2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ccb4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ccb8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ccbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800ccc0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ccc4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccc6:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ccc8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800ccca:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccd0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800ccd4:	6093      	str	r3, [r2, #8]
 800ccd6:	e7dd      	b.n	800cc94 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccd8:	6823      	ldr	r3, [r4, #0]
 800ccda:	6848      	ldr	r0, [r1, #4]
 800ccdc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800ccde:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cce0:	6a1d      	ldr	r5, [r3, #32]
 800cce2:	f025 0501 	bic.w	r5, r5, #1
 800cce6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cce8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ccee:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ccf2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800ccf6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800ccf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccfa:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ccfc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800ccfe:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd04:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800cd08:	6093      	str	r3, [r2, #8]
 800cd0a:	e7c3      	b.n	800cc94 <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 800cd0c:	2002      	movs	r0, #2
}
 800cd0e:	4770      	bx	lr
 800cd10:	fffe0088 	.word	0xfffe0088

0800cd14 <TIM_SlaveTimer_SetConfig>:
{
 800cd14:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800cd16:	6802      	ldr	r2, [r0, #0]
 800cd18:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800cd1e:	684c      	ldr	r4, [r1, #4]
 800cd20:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 800cd22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd26:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800cd2a:	680c      	ldr	r4, [r1, #0]
 800cd2c:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 800cd2e:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 800cd30:	684b      	ldr	r3, [r1, #4]
 800cd32:	2b50      	cmp	r3, #80	; 0x50
 800cd34:	d023      	beq.n	800cd7e <TIM_SlaveTimer_SetConfig+0x6a>
 800cd36:	d90b      	bls.n	800cd50 <TIM_SlaveTimer_SetConfig+0x3c>
 800cd38:	2b60      	cmp	r3, #96	; 0x60
 800cd3a:	d034      	beq.n	800cda6 <TIM_SlaveTimer_SetConfig+0x92>
 800cd3c:	2b70      	cmp	r3, #112	; 0x70
 800cd3e:	d147      	bne.n	800cdd0 <TIM_SlaveTimer_SetConfig+0xbc>
      TIM_ETR_SetConfig(htim->Instance,
 800cd40:	690b      	ldr	r3, [r1, #16]
 800cd42:	688a      	ldr	r2, [r1, #8]
 800cd44:	68c9      	ldr	r1, [r1, #12]
 800cd46:	6800      	ldr	r0, [r0, #0]
 800cd48:	f7ff fe90 	bl	800ca6c <TIM_ETR_SetConfig>
  return HAL_OK;
 800cd4c:	2000      	movs	r0, #0
}
 800cd4e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800cd50:	2b40      	cmp	r3, #64	; 0x40
 800cd52:	d13d      	bne.n	800cdd0 <TIM_SlaveTimer_SetConfig+0xbc>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800cd54:	680b      	ldr	r3, [r1, #0]
 800cd56:	2b05      	cmp	r3, #5
 800cd58:	d03c      	beq.n	800cdd4 <TIM_SlaveTimer_SetConfig+0xc0>
      tmpccer = htim->Instance->CCER;
 800cd5a:	6803      	ldr	r3, [r0, #0]
 800cd5c:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800cd5e:	6a1a      	ldr	r2, [r3, #32]
 800cd60:	f022 0201 	bic.w	r2, r2, #1
 800cd64:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800cd66:	6802      	ldr	r2, [r0, #0]
 800cd68:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cd6e:	6909      	ldr	r1, [r1, #16]
 800cd70:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800cd74:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800cd76:	6803      	ldr	r3, [r0, #0]
 800cd78:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 800cd7a:	2000      	movs	r0, #0
      break;
 800cd7c:	e7e7      	b.n	800cd4e <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd7e:	6803      	ldr	r3, [r0, #0]
 800cd80:	6888      	ldr	r0, [r1, #8]
 800cd82:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800cd84:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd86:	6a1c      	ldr	r4, [r3, #32]
 800cd88:	f024 0401 	bic.w	r4, r4, #1
 800cd8c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd8e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd90:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd94:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd98:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800cd9c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800cd9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cda0:	6219      	str	r1, [r3, #32]
  return HAL_OK;
 800cda2:	2000      	movs	r0, #0
 800cda4:	e7d3      	b.n	800cd4e <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cda6:	6803      	ldr	r3, [r0, #0]
 800cda8:	688c      	ldr	r4, [r1, #8]
 800cdaa:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdac:	6a18      	ldr	r0, [r3, #32]
 800cdae:	f020 0010 	bic.w	r0, r0, #16
 800cdb2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdb4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800cdb6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cdb8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cdbc:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cdc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800cdc4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800cdc8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdca:	621a      	str	r2, [r3, #32]
  return HAL_OK;
 800cdcc:	2000      	movs	r0, #0
 800cdce:	e7be      	b.n	800cd4e <TIM_SlaveTimer_SetConfig+0x3a>
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	e7bc      	b.n	800cd4e <TIM_SlaveTimer_SetConfig+0x3a>
        return HAL_ERROR;
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	e7ba      	b.n	800cd4e <TIM_SlaveTimer_SetConfig+0x3a>

0800cdd8 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800cdd8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d024      	beq.n	800ce2a <HAL_TIM_SlaveConfigSynchro+0x52>
{
 800cde0:	b510      	push	{r4, lr}
 800cde2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cde4:	2301      	movs	r3, #1
 800cde6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cdea:	2302      	movs	r3, #2
 800cdec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800cdf0:	f7ff ff90 	bl	800cd14 <TIM_SlaveTimer_SetConfig>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	b988      	cbnz	r0, 800ce1c <HAL_TIM_SlaveConfigSynchro+0x44>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800cdf8:	6821      	ldr	r1, [r4, #0]
 800cdfa:	68ca      	ldr	r2, [r1, #12]
 800cdfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce00:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ce02:	6821      	ldr	r1, [r4, #0]
 800ce04:	68ca      	ldr	r2, [r1, #12]
 800ce06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce0a:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ce12:	2200      	movs	r2, #0
 800ce14:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ce22:	2200      	movs	r2, #0
 800ce24:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800ce28:	e7f6      	b.n	800ce18 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 800ce2a:	2302      	movs	r3, #2
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	4770      	bx	lr

0800ce30 <HAL_TIM_SlaveConfigSynchro_IT>:
  __HAL_LOCK(htim);
 800ce30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d024      	beq.n	800ce82 <HAL_TIM_SlaveConfigSynchro_IT+0x52>
{
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ce42:	2302      	movs	r3, #2
 800ce44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ce48:	f7ff ff64 	bl	800cd14 <TIM_SlaveTimer_SetConfig>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	b988      	cbnz	r0, 800ce74 <HAL_TIM_SlaveConfigSynchro_IT+0x44>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800ce50:	6821      	ldr	r1, [r4, #0]
 800ce52:	68ca      	ldr	r2, [r1, #12]
 800ce54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce58:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ce5a:	6821      	ldr	r1, [r4, #0]
 800ce5c:	68ca      	ldr	r2, [r1, #12]
 800ce5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce62:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ce64:	2201      	movs	r2, #1
 800ce66:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800ce74:	2301      	movs	r3, #1
 800ce76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800ce80:	e7f6      	b.n	800ce70 <HAL_TIM_SlaveConfigSynchro_IT+0x40>
  __HAL_LOCK(htim);
 800ce82:	2302      	movs	r3, #2
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	4770      	bx	lr

0800ce88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ce88:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce8a:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce8e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce90:	2401      	movs	r4, #1
 800ce92:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800ce94:	ea23 0304 	bic.w	r3, r3, r4
 800ce98:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce9a:	6a03      	ldr	r3, [r0, #32]
 800ce9c:	408a      	lsls	r2, r1
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	6202      	str	r2, [r0, #32]
}
 800cea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <HAL_TIM_OC_Start>:
{
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ceac:	2201      	movs	r2, #1
 800ceae:	6800      	ldr	r0, [r0, #0]
 800ceb0:	f7ff ffea 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	4a13      	ldr	r2, [pc, #76]	; (800cf04 <HAL_TIM_OC_Start+0x5c>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d00f      	beq.n	800cedc <HAL_TIM_OC_Start+0x34>
 800cebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d00b      	beq.n	800cedc <HAL_TIM_OC_Start+0x34>
 800cec4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d007      	beq.n	800cedc <HAL_TIM_OC_Start+0x34>
 800cecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d003      	beq.n	800cedc <HAL_TIM_OC_Start+0x34>
 800ced4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d103      	bne.n	800cee4 <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_MOE_ENABLE(htim);
 800cedc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cee2:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cee4:	6822      	ldr	r2, [r4, #0]
 800cee6:	6891      	ldr	r1, [r2, #8]
 800cee8:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <HAL_TIM_OC_Start+0x60>)
 800ceea:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ceec:	2b06      	cmp	r3, #6
 800ceee:	d006      	beq.n	800cefe <HAL_TIM_OC_Start+0x56>
 800cef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cef4:	d003      	beq.n	800cefe <HAL_TIM_OC_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800cef6:	6813      	ldr	r3, [r2, #0]
 800cef8:	f043 0301 	orr.w	r3, r3, #1
 800cefc:	6013      	str	r3, [r2, #0]
}
 800cefe:	2000      	movs	r0, #0
 800cf00:	bd10      	pop	{r4, pc}
 800cf02:	bf00      	nop
 800cf04:	40012c00 	.word	0x40012c00
 800cf08:	00010007 	.word	0x00010007

0800cf0c <HAL_TIM_OC_Stop>:
{
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cf10:	2200      	movs	r2, #0
 800cf12:	6800      	ldr	r0, [r0, #0]
 800cf14:	f7ff ffb8 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	4a19      	ldr	r2, [pc, #100]	; (800cf80 <HAL_TIM_OC_Stop+0x74>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d00f      	beq.n	800cf40 <HAL_TIM_OC_Stop+0x34>
 800cf20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d00b      	beq.n	800cf40 <HAL_TIM_OC_Stop+0x34>
 800cf28:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d007      	beq.n	800cf40 <HAL_TIM_OC_Stop+0x34>
 800cf30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d003      	beq.n	800cf40 <HAL_TIM_OC_Stop+0x34>
 800cf38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d10d      	bne.n	800cf5c <HAL_TIM_OC_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 800cf40:	6a19      	ldr	r1, [r3, #32]
 800cf42:	f241 1211 	movw	r2, #4369	; 0x1111
 800cf46:	4211      	tst	r1, r2
 800cf48:	d108      	bne.n	800cf5c <HAL_TIM_OC_Stop+0x50>
 800cf4a:	6a19      	ldr	r1, [r3, #32]
 800cf4c:	f240 4244 	movw	r2, #1092	; 0x444
 800cf50:	4211      	tst	r1, r2
 800cf52:	d103      	bne.n	800cf5c <HAL_TIM_OC_Stop+0x50>
 800cf54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf5a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	6a19      	ldr	r1, [r3, #32]
 800cf60:	f241 1211 	movw	r2, #4369	; 0x1111
 800cf64:	4211      	tst	r1, r2
 800cf66:	d108      	bne.n	800cf7a <HAL_TIM_OC_Stop+0x6e>
 800cf68:	6a19      	ldr	r1, [r3, #32]
 800cf6a:	f240 4244 	movw	r2, #1092	; 0x444
 800cf6e:	4211      	tst	r1, r2
 800cf70:	d103      	bne.n	800cf7a <HAL_TIM_OC_Stop+0x6e>
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	f022 0201 	bic.w	r2, r2, #1
 800cf78:	601a      	str	r2, [r3, #0]
}
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	bd10      	pop	{r4, pc}
 800cf7e:	bf00      	nop
 800cf80:	40012c00 	.word	0x40012c00

0800cf84 <HAL_TIM_OC_Start_IT>:
{
 800cf84:	b510      	push	{r4, lr}
 800cf86:	4604      	mov	r4, r0
  switch (Channel)
 800cf88:	290c      	cmp	r1, #12
 800cf8a:	d80d      	bhi.n	800cfa8 <HAL_TIM_OC_Start_IT+0x24>
 800cf8c:	e8df f001 	tbb	[pc, r1]
 800cf90:	0c0c0c07 	.word	0x0c0c0c07
 800cf94:	0c0c0c37 	.word	0x0c0c0c37
 800cf98:	0c0c0c3d 	.word	0x0c0c0c3d
 800cf9c:	43          	.byte	0x43
 800cf9d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cf9e:	6802      	ldr	r2, [r0, #0]
 800cfa0:	68d3      	ldr	r3, [r2, #12]
 800cfa2:	f043 0302 	orr.w	r3, r3, #2
 800cfa6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	6820      	ldr	r0, [r4, #0]
 800cfac:	f7ff ff6c 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cfb0:	6823      	ldr	r3, [r4, #0]
 800cfb2:	4a1c      	ldr	r2, [pc, #112]	; (800d024 <HAL_TIM_OC_Start_IT+0xa0>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d00f      	beq.n	800cfd8 <HAL_TIM_OC_Start_IT+0x54>
 800cfb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d00b      	beq.n	800cfd8 <HAL_TIM_OC_Start_IT+0x54>
 800cfc0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d007      	beq.n	800cfd8 <HAL_TIM_OC_Start_IT+0x54>
 800cfc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d003      	beq.n	800cfd8 <HAL_TIM_OC_Start_IT+0x54>
 800cfd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d103      	bne.n	800cfe0 <HAL_TIM_OC_Start_IT+0x5c>
    __HAL_TIM_MOE_ENABLE(htim);
 800cfd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfde:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfe0:	6822      	ldr	r2, [r4, #0]
 800cfe2:	6891      	ldr	r1, [r2, #8]
 800cfe4:	4b10      	ldr	r3, [pc, #64]	; (800d028 <HAL_TIM_OC_Start_IT+0xa4>)
 800cfe6:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfe8:	2b06      	cmp	r3, #6
 800cfea:	d006      	beq.n	800cffa <HAL_TIM_OC_Start_IT+0x76>
 800cfec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cff0:	d003      	beq.n	800cffa <HAL_TIM_OC_Start_IT+0x76>
    __HAL_TIM_ENABLE(htim);
 800cff2:	6813      	ldr	r3, [r2, #0]
 800cff4:	f043 0301 	orr.w	r3, r3, #1
 800cff8:	6013      	str	r3, [r2, #0]
}
 800cffa:	2000      	movs	r0, #0
 800cffc:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cffe:	6802      	ldr	r2, [r0, #0]
 800d000:	68d3      	ldr	r3, [r2, #12]
 800d002:	f043 0304 	orr.w	r3, r3, #4
 800d006:	60d3      	str	r3, [r2, #12]
      break;
 800d008:	e7ce      	b.n	800cfa8 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d00a:	6802      	ldr	r2, [r0, #0]
 800d00c:	68d3      	ldr	r3, [r2, #12]
 800d00e:	f043 0308 	orr.w	r3, r3, #8
 800d012:	60d3      	str	r3, [r2, #12]
      break;
 800d014:	e7c8      	b.n	800cfa8 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d016:	6802      	ldr	r2, [r0, #0]
 800d018:	68d3      	ldr	r3, [r2, #12]
 800d01a:	f043 0310 	orr.w	r3, r3, #16
 800d01e:	60d3      	str	r3, [r2, #12]
      break;
 800d020:	e7c2      	b.n	800cfa8 <HAL_TIM_OC_Start_IT+0x24>
 800d022:	bf00      	nop
 800d024:	40012c00 	.word	0x40012c00
 800d028:	00010007 	.word	0x00010007

0800d02c <HAL_TIM_OC_Stop_IT>:
{
 800d02c:	b510      	push	{r4, lr}
 800d02e:	4604      	mov	r4, r0
  switch (Channel)
 800d030:	290c      	cmp	r1, #12
 800d032:	d80d      	bhi.n	800d050 <HAL_TIM_OC_Stop_IT+0x24>
 800d034:	e8df f001 	tbb	[pc, r1]
 800d038:	0c0c0c07 	.word	0x0c0c0c07
 800d03c:	0c0c0c43 	.word	0x0c0c0c43
 800d040:	0c0c0c49 	.word	0x0c0c0c49
 800d044:	4f          	.byte	0x4f
 800d045:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d046:	6802      	ldr	r2, [r0, #0]
 800d048:	68d3      	ldr	r3, [r2, #12]
 800d04a:	f023 0302 	bic.w	r3, r3, #2
 800d04e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d050:	2200      	movs	r2, #0
 800d052:	6820      	ldr	r0, [r4, #0]
 800d054:	f7ff ff18 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d058:	6823      	ldr	r3, [r4, #0]
 800d05a:	4a22      	ldr	r2, [pc, #136]	; (800d0e4 <HAL_TIM_OC_Stop_IT+0xb8>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d00f      	beq.n	800d080 <HAL_TIM_OC_Stop_IT+0x54>
 800d060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d064:	4293      	cmp	r3, r2
 800d066:	d00b      	beq.n	800d080 <HAL_TIM_OC_Stop_IT+0x54>
 800d068:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d007      	beq.n	800d080 <HAL_TIM_OC_Stop_IT+0x54>
 800d070:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d074:	4293      	cmp	r3, r2
 800d076:	d003      	beq.n	800d080 <HAL_TIM_OC_Stop_IT+0x54>
 800d078:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d10d      	bne.n	800d09c <HAL_TIM_OC_Stop_IT+0x70>
    __HAL_TIM_MOE_DISABLE(htim);
 800d080:	6a19      	ldr	r1, [r3, #32]
 800d082:	f241 1211 	movw	r2, #4369	; 0x1111
 800d086:	4211      	tst	r1, r2
 800d088:	d108      	bne.n	800d09c <HAL_TIM_OC_Stop_IT+0x70>
 800d08a:	6a19      	ldr	r1, [r3, #32]
 800d08c:	f240 4244 	movw	r2, #1092	; 0x444
 800d090:	4211      	tst	r1, r2
 800d092:	d103      	bne.n	800d09c <HAL_TIM_OC_Stop_IT+0x70>
 800d094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d09a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d09c:	6823      	ldr	r3, [r4, #0]
 800d09e:	6a19      	ldr	r1, [r3, #32]
 800d0a0:	f241 1211 	movw	r2, #4369	; 0x1111
 800d0a4:	4211      	tst	r1, r2
 800d0a6:	d108      	bne.n	800d0ba <HAL_TIM_OC_Stop_IT+0x8e>
 800d0a8:	6a19      	ldr	r1, [r3, #32]
 800d0aa:	f240 4244 	movw	r2, #1092	; 0x444
 800d0ae:	4211      	tst	r1, r2
 800d0b0:	d103      	bne.n	800d0ba <HAL_TIM_OC_Stop_IT+0x8e>
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	f022 0201 	bic.w	r2, r2, #1
 800d0b8:	601a      	str	r2, [r3, #0]
}
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d0be:	6802      	ldr	r2, [r0, #0]
 800d0c0:	68d3      	ldr	r3, [r2, #12]
 800d0c2:	f023 0304 	bic.w	r3, r3, #4
 800d0c6:	60d3      	str	r3, [r2, #12]
      break;
 800d0c8:	e7c2      	b.n	800d050 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d0ca:	6802      	ldr	r2, [r0, #0]
 800d0cc:	68d3      	ldr	r3, [r2, #12]
 800d0ce:	f023 0308 	bic.w	r3, r3, #8
 800d0d2:	60d3      	str	r3, [r2, #12]
      break;
 800d0d4:	e7bc      	b.n	800d050 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d0d6:	6802      	ldr	r2, [r0, #0]
 800d0d8:	68d3      	ldr	r3, [r2, #12]
 800d0da:	f023 0310 	bic.w	r3, r3, #16
 800d0de:	60d3      	str	r3, [r2, #12]
      break;
 800d0e0:	e7b6      	b.n	800d050 <HAL_TIM_OC_Stop_IT+0x24>
 800d0e2:	bf00      	nop
 800d0e4:	40012c00 	.word	0x40012c00

0800d0e8 <HAL_TIM_OC_Start_DMA>:
{
 800d0e8:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800d0ea:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d0ee:	b2f6      	uxtb	r6, r6
 800d0f0:	2e02      	cmp	r6, #2
 800d0f2:	f000 80a1 	beq.w	800d238 <HAL_TIM_OC_Start_DMA+0x150>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800d0f6:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d0fa:	b2f6      	uxtb	r6, r6
 800d0fc:	2e01      	cmp	r6, #1
 800d0fe:	d00d      	beq.n	800d11c <HAL_TIM_OC_Start_DMA+0x34>
 800d100:	4616      	mov	r6, r2
 800d102:	460d      	mov	r5, r1
 800d104:	4604      	mov	r4, r0
  switch (Channel)
 800d106:	290c      	cmp	r1, #12
 800d108:	d827      	bhi.n	800d15a <HAL_TIM_OC_Start_DMA+0x72>
 800d10a:	e8df f001 	tbb	[pc, r1]
 800d10e:	2610      	.short	0x2610
 800d110:	26522626 	.word	0x26522626
 800d114:	26692626 	.word	0x26692626
 800d118:	2626      	.short	0x2626
 800d11a:	7f          	.byte	0x7f
 800d11b:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800d11c:	b11a      	cbz	r2, 800d126 <HAL_TIM_OC_Start_DMA+0x3e>
      htim->State = HAL_TIM_STATE_BUSY;
 800d11e:	2402      	movs	r4, #2
 800d120:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800d124:	e7ec      	b.n	800d100 <HAL_TIM_OC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0f9      	beq.n	800d11e <HAL_TIM_OC_Start_DMA+0x36>
      return HAL_ERROR;
 800d12a:	2001      	movs	r0, #1
 800d12c:	e040      	b.n	800d1b0 <HAL_TIM_OC_Start_DMA+0xc8>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d12e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d130:	4948      	ldr	r1, [pc, #288]	; (800d254 <HAL_TIM_OC_Start_DMA+0x16c>)
 800d132:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d134:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d136:	4948      	ldr	r1, [pc, #288]	; (800d258 <HAL_TIM_OC_Start_DMA+0x170>)
 800d138:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d13a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d13c:	4947      	ldr	r1, [pc, #284]	; (800d25c <HAL_TIM_OC_Start_DMA+0x174>)
 800d13e:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800d140:	6802      	ldr	r2, [r0, #0]
 800d142:	3234      	adds	r2, #52	; 0x34
 800d144:	4631      	mov	r1, r6
 800d146:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d148:	f7f5 fb17 	bl	800277a <HAL_DMA_Start_IT>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d175      	bne.n	800d23c <HAL_TIM_OC_Start_DMA+0x154>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d150:	6822      	ldr	r2, [r4, #0]
 800d152:	68d3      	ldr	r3, [r2, #12]
 800d154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d158:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d15a:	2201      	movs	r2, #1
 800d15c:	4629      	mov	r1, r5
 800d15e:	6820      	ldr	r0, [r4, #0]
 800d160:	f7ff fe92 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d164:	6823      	ldr	r3, [r4, #0]
 800d166:	4a3e      	ldr	r2, [pc, #248]	; (800d260 <HAL_TIM_OC_Start_DMA+0x178>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d00f      	beq.n	800d18c <HAL_TIM_OC_Start_DMA+0xa4>
 800d16c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d170:	4293      	cmp	r3, r2
 800d172:	d00b      	beq.n	800d18c <HAL_TIM_OC_Start_DMA+0xa4>
 800d174:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d178:	4293      	cmp	r3, r2
 800d17a:	d007      	beq.n	800d18c <HAL_TIM_OC_Start_DMA+0xa4>
 800d17c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d180:	4293      	cmp	r3, r2
 800d182:	d003      	beq.n	800d18c <HAL_TIM_OC_Start_DMA+0xa4>
 800d184:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d188:	4293      	cmp	r3, r2
 800d18a:	d103      	bne.n	800d194 <HAL_TIM_OC_Start_DMA+0xac>
    __HAL_TIM_MOE_ENABLE(htim);
 800d18c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d18e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d192:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d194:	6822      	ldr	r2, [r4, #0]
 800d196:	6891      	ldr	r1, [r2, #8]
 800d198:	4b32      	ldr	r3, [pc, #200]	; (800d264 <HAL_TIM_OC_Start_DMA+0x17c>)
 800d19a:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d19c:	2b06      	cmp	r3, #6
 800d19e:	d055      	beq.n	800d24c <HAL_TIM_OC_Start_DMA+0x164>
 800d1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1a4:	d054      	beq.n	800d250 <HAL_TIM_OC_Start_DMA+0x168>
    __HAL_TIM_ENABLE(htim);
 800d1a6:	6813      	ldr	r3, [r2, #0]
 800d1a8:	f043 0301 	orr.w	r3, r3, #1
 800d1ac:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d1ae:	2000      	movs	r0, #0
}
 800d1b0:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d1b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1b4:	4927      	ldr	r1, [pc, #156]	; (800d254 <HAL_TIM_OC_Start_DMA+0x16c>)
 800d1b6:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d1b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1ba:	4927      	ldr	r1, [pc, #156]	; (800d258 <HAL_TIM_OC_Start_DMA+0x170>)
 800d1bc:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d1be:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1c0:	4926      	ldr	r1, [pc, #152]	; (800d25c <HAL_TIM_OC_Start_DMA+0x174>)
 800d1c2:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800d1c4:	6802      	ldr	r2, [r0, #0]
 800d1c6:	3238      	adds	r2, #56	; 0x38
 800d1c8:	4631      	mov	r1, r6
 800d1ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d1cc:	f7f5 fad5 	bl	800277a <HAL_DMA_Start_IT>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d135      	bne.n	800d240 <HAL_TIM_OC_Start_DMA+0x158>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d1d4:	6822      	ldr	r2, [r4, #0]
 800d1d6:	68d3      	ldr	r3, [r2, #12]
 800d1d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d1dc:	60d3      	str	r3, [r2, #12]
      break;
 800d1de:	e7bc      	b.n	800d15a <HAL_TIM_OC_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d1e0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d1e2:	491c      	ldr	r1, [pc, #112]	; (800d254 <HAL_TIM_OC_Start_DMA+0x16c>)
 800d1e4:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d1e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d1e8:	491b      	ldr	r1, [pc, #108]	; (800d258 <HAL_TIM_OC_Start_DMA+0x170>)
 800d1ea:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d1ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d1ee:	491b      	ldr	r1, [pc, #108]	; (800d25c <HAL_TIM_OC_Start_DMA+0x174>)
 800d1f0:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800d1f2:	6802      	ldr	r2, [r0, #0]
 800d1f4:	323c      	adds	r2, #60	; 0x3c
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d1fa:	f7f5 fabe 	bl	800277a <HAL_DMA_Start_IT>
 800d1fe:	bb08      	cbnz	r0, 800d244 <HAL_TIM_OC_Start_DMA+0x15c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d200:	6822      	ldr	r2, [r4, #0]
 800d202:	68d3      	ldr	r3, [r2, #12]
 800d204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d208:	60d3      	str	r3, [r2, #12]
      break;
 800d20a:	e7a6      	b.n	800d15a <HAL_TIM_OC_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d20c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d20e:	4911      	ldr	r1, [pc, #68]	; (800d254 <HAL_TIM_OC_Start_DMA+0x16c>)
 800d210:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d212:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d214:	4910      	ldr	r1, [pc, #64]	; (800d258 <HAL_TIM_OC_Start_DMA+0x170>)
 800d216:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d218:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d21a:	4910      	ldr	r1, [pc, #64]	; (800d25c <HAL_TIM_OC_Start_DMA+0x174>)
 800d21c:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800d21e:	6802      	ldr	r2, [r0, #0]
 800d220:	3240      	adds	r2, #64	; 0x40
 800d222:	4631      	mov	r1, r6
 800d224:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d226:	f7f5 faa8 	bl	800277a <HAL_DMA_Start_IT>
 800d22a:	b968      	cbnz	r0, 800d248 <HAL_TIM_OC_Start_DMA+0x160>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d22c:	6822      	ldr	r2, [r4, #0]
 800d22e:	68d3      	ldr	r3, [r2, #12]
 800d230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d234:	60d3      	str	r3, [r2, #12]
      break;
 800d236:	e790      	b.n	800d15a <HAL_TIM_OC_Start_DMA+0x72>
    return HAL_BUSY;
 800d238:	2002      	movs	r0, #2
 800d23a:	e7b9      	b.n	800d1b0 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800d23c:	2001      	movs	r0, #1
 800d23e:	e7b7      	b.n	800d1b0 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800d240:	2001      	movs	r0, #1
 800d242:	e7b5      	b.n	800d1b0 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800d244:	2001      	movs	r0, #1
 800d246:	e7b3      	b.n	800d1b0 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800d248:	2001      	movs	r0, #1
 800d24a:	e7b1      	b.n	800d1b0 <HAL_TIM_OC_Start_DMA+0xc8>
  return HAL_OK;
 800d24c:	2000      	movs	r0, #0
 800d24e:	e7af      	b.n	800d1b0 <HAL_TIM_OC_Start_DMA+0xc8>
 800d250:	2000      	movs	r0, #0
 800d252:	e7ad      	b.n	800d1b0 <HAL_TIM_OC_Start_DMA+0xc8>
 800d254:	0800bff5 	.word	0x0800bff5
 800d258:	0800c03b 	.word	0x0800c03b
 800d25c:	0800c23f 	.word	0x0800c23f
 800d260:	40012c00 	.word	0x40012c00
 800d264:	00010007 	.word	0x00010007

0800d268 <HAL_TIM_OC_Stop_DMA>:
{
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4604      	mov	r4, r0
 800d26c:	460d      	mov	r5, r1
  switch (Channel)
 800d26e:	290c      	cmp	r1, #12
 800d270:	d810      	bhi.n	800d294 <HAL_TIM_OC_Stop_DMA+0x2c>
 800d272:	e8df f001 	tbb	[pc, r1]
 800d276:	0f07      	.short	0x0f07
 800d278:	0f4a0f0f 	.word	0x0f4a0f0f
 800d27c:	0f530f0f 	.word	0x0f530f0f
 800d280:	0f0f      	.short	0x0f0f
 800d282:	5c          	.byte	0x5c
 800d283:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d284:	6802      	ldr	r2, [r0, #0]
 800d286:	68d3      	ldr	r3, [r2, #12]
 800d288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d28c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d28e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d290:	f7f5 fae5 	bl	800285e <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d294:	2200      	movs	r2, #0
 800d296:	4629      	mov	r1, r5
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	f7ff fdf5 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	4a27      	ldr	r2, [pc, #156]	; (800d340 <HAL_TIM_OC_Stop_DMA+0xd8>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d00f      	beq.n	800d2c6 <HAL_TIM_OC_Stop_DMA+0x5e>
 800d2a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d00b      	beq.n	800d2c6 <HAL_TIM_OC_Stop_DMA+0x5e>
 800d2ae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d007      	beq.n	800d2c6 <HAL_TIM_OC_Stop_DMA+0x5e>
 800d2b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d003      	beq.n	800d2c6 <HAL_TIM_OC_Stop_DMA+0x5e>
 800d2be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d10d      	bne.n	800d2e2 <HAL_TIM_OC_Stop_DMA+0x7a>
    __HAL_TIM_MOE_DISABLE(htim);
 800d2c6:	6a19      	ldr	r1, [r3, #32]
 800d2c8:	f241 1211 	movw	r2, #4369	; 0x1111
 800d2cc:	4211      	tst	r1, r2
 800d2ce:	d108      	bne.n	800d2e2 <HAL_TIM_OC_Stop_DMA+0x7a>
 800d2d0:	6a19      	ldr	r1, [r3, #32]
 800d2d2:	f240 4244 	movw	r2, #1092	; 0x444
 800d2d6:	4211      	tst	r1, r2
 800d2d8:	d103      	bne.n	800d2e2 <HAL_TIM_OC_Stop_DMA+0x7a>
 800d2da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d2e0:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d2e2:	6823      	ldr	r3, [r4, #0]
 800d2e4:	6a19      	ldr	r1, [r3, #32]
 800d2e6:	f241 1211 	movw	r2, #4369	; 0x1111
 800d2ea:	4211      	tst	r1, r2
 800d2ec:	d108      	bne.n	800d300 <HAL_TIM_OC_Stop_DMA+0x98>
 800d2ee:	6a19      	ldr	r1, [r3, #32]
 800d2f0:	f240 4244 	movw	r2, #1092	; 0x444
 800d2f4:	4211      	tst	r1, r2
 800d2f6:	d103      	bne.n	800d300 <HAL_TIM_OC_Stop_DMA+0x98>
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	f022 0201 	bic.w	r2, r2, #1
 800d2fe:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d300:	2301      	movs	r3, #1
 800d302:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d306:	2000      	movs	r0, #0
 800d308:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d30a:	6802      	ldr	r2, [r0, #0]
 800d30c:	68d3      	ldr	r3, [r2, #12]
 800d30e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d312:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d314:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d316:	f7f5 faa2 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800d31a:	e7bb      	b.n	800d294 <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d31c:	6802      	ldr	r2, [r0, #0]
 800d31e:	68d3      	ldr	r3, [r2, #12]
 800d320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d324:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d326:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d328:	f7f5 fa99 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800d32c:	e7b2      	b.n	800d294 <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d32e:	6802      	ldr	r2, [r0, #0]
 800d330:	68d3      	ldr	r3, [r2, #12]
 800d332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d336:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d338:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d33a:	f7f5 fa90 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800d33e:	e7a9      	b.n	800d294 <HAL_TIM_OC_Stop_DMA+0x2c>
 800d340:	40012c00 	.word	0x40012c00

0800d344 <HAL_TIM_PWM_Start>:
{
 800d344:	b510      	push	{r4, lr}
 800d346:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d348:	2201      	movs	r2, #1
 800d34a:	6800      	ldr	r0, [r0, #0]
 800d34c:	f7ff fd9c 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d350:	6823      	ldr	r3, [r4, #0]
 800d352:	4a13      	ldr	r2, [pc, #76]	; (800d3a0 <HAL_TIM_PWM_Start+0x5c>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d00f      	beq.n	800d378 <HAL_TIM_PWM_Start+0x34>
 800d358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d00b      	beq.n	800d378 <HAL_TIM_PWM_Start+0x34>
 800d360:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d364:	4293      	cmp	r3, r2
 800d366:	d007      	beq.n	800d378 <HAL_TIM_PWM_Start+0x34>
 800d368:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d003      	beq.n	800d378 <HAL_TIM_PWM_Start+0x34>
 800d370:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d374:	4293      	cmp	r3, r2
 800d376:	d103      	bne.n	800d380 <HAL_TIM_PWM_Start+0x3c>
    __HAL_TIM_MOE_ENABLE(htim);
 800d378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d37a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d37e:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d380:	6822      	ldr	r2, [r4, #0]
 800d382:	6891      	ldr	r1, [r2, #8]
 800d384:	4b07      	ldr	r3, [pc, #28]	; (800d3a4 <HAL_TIM_PWM_Start+0x60>)
 800d386:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d388:	2b06      	cmp	r3, #6
 800d38a:	d006      	beq.n	800d39a <HAL_TIM_PWM_Start+0x56>
 800d38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d390:	d003      	beq.n	800d39a <HAL_TIM_PWM_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800d392:	6813      	ldr	r3, [r2, #0]
 800d394:	f043 0301 	orr.w	r3, r3, #1
 800d398:	6013      	str	r3, [r2, #0]
}
 800d39a:	2000      	movs	r0, #0
 800d39c:	bd10      	pop	{r4, pc}
 800d39e:	bf00      	nop
 800d3a0:	40012c00 	.word	0x40012c00
 800d3a4:	00010007 	.word	0x00010007

0800d3a8 <HAL_TIM_PWM_Stop>:
{
 800d3a8:	b510      	push	{r4, lr}
 800d3aa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	6800      	ldr	r0, [r0, #0]
 800d3b0:	f7ff fd6a 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	4a1a      	ldr	r2, [pc, #104]	; (800d420 <HAL_TIM_PWM_Stop+0x78>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d00f      	beq.n	800d3dc <HAL_TIM_PWM_Stop+0x34>
 800d3bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d00b      	beq.n	800d3dc <HAL_TIM_PWM_Stop+0x34>
 800d3c4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d007      	beq.n	800d3dc <HAL_TIM_PWM_Stop+0x34>
 800d3cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d003      	beq.n	800d3dc <HAL_TIM_PWM_Stop+0x34>
 800d3d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d10d      	bne.n	800d3f8 <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 800d3dc:	6a19      	ldr	r1, [r3, #32]
 800d3de:	f241 1211 	movw	r2, #4369	; 0x1111
 800d3e2:	4211      	tst	r1, r2
 800d3e4:	d108      	bne.n	800d3f8 <HAL_TIM_PWM_Stop+0x50>
 800d3e6:	6a19      	ldr	r1, [r3, #32]
 800d3e8:	f240 4244 	movw	r2, #1092	; 0x444
 800d3ec:	4211      	tst	r1, r2
 800d3ee:	d103      	bne.n	800d3f8 <HAL_TIM_PWM_Stop+0x50>
 800d3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d3f6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d3f8:	6823      	ldr	r3, [r4, #0]
 800d3fa:	6a19      	ldr	r1, [r3, #32]
 800d3fc:	f241 1211 	movw	r2, #4369	; 0x1111
 800d400:	4211      	tst	r1, r2
 800d402:	d108      	bne.n	800d416 <HAL_TIM_PWM_Stop+0x6e>
 800d404:	6a19      	ldr	r1, [r3, #32]
 800d406:	f240 4244 	movw	r2, #1092	; 0x444
 800d40a:	4211      	tst	r1, r2
 800d40c:	d103      	bne.n	800d416 <HAL_TIM_PWM_Stop+0x6e>
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	f022 0201 	bic.w	r2, r2, #1
 800d414:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d416:	2301      	movs	r3, #1
 800d418:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d41c:	2000      	movs	r0, #0
 800d41e:	bd10      	pop	{r4, pc}
 800d420:	40012c00 	.word	0x40012c00

0800d424 <HAL_TIM_PWM_Start_IT>:
{
 800d424:	b510      	push	{r4, lr}
 800d426:	4604      	mov	r4, r0
  switch (Channel)
 800d428:	290c      	cmp	r1, #12
 800d42a:	d80d      	bhi.n	800d448 <HAL_TIM_PWM_Start_IT+0x24>
 800d42c:	e8df f001 	tbb	[pc, r1]
 800d430:	0c0c0c07 	.word	0x0c0c0c07
 800d434:	0c0c0c37 	.word	0x0c0c0c37
 800d438:	0c0c0c3d 	.word	0x0c0c0c3d
 800d43c:	43          	.byte	0x43
 800d43d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d43e:	6802      	ldr	r2, [r0, #0]
 800d440:	68d3      	ldr	r3, [r2, #12]
 800d442:	f043 0302 	orr.w	r3, r3, #2
 800d446:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d448:	2201      	movs	r2, #1
 800d44a:	6820      	ldr	r0, [r4, #0]
 800d44c:	f7ff fd1c 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	4a1c      	ldr	r2, [pc, #112]	; (800d4c4 <HAL_TIM_PWM_Start_IT+0xa0>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d00f      	beq.n	800d478 <HAL_TIM_PWM_Start_IT+0x54>
 800d458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d00b      	beq.n	800d478 <HAL_TIM_PWM_Start_IT+0x54>
 800d460:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d464:	4293      	cmp	r3, r2
 800d466:	d007      	beq.n	800d478 <HAL_TIM_PWM_Start_IT+0x54>
 800d468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d003      	beq.n	800d478 <HAL_TIM_PWM_Start_IT+0x54>
 800d470:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d474:	4293      	cmp	r3, r2
 800d476:	d103      	bne.n	800d480 <HAL_TIM_PWM_Start_IT+0x5c>
    __HAL_TIM_MOE_ENABLE(htim);
 800d478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d47a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d47e:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d480:	6822      	ldr	r2, [r4, #0]
 800d482:	6891      	ldr	r1, [r2, #8]
 800d484:	4b10      	ldr	r3, [pc, #64]	; (800d4c8 <HAL_TIM_PWM_Start_IT+0xa4>)
 800d486:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d488:	2b06      	cmp	r3, #6
 800d48a:	d006      	beq.n	800d49a <HAL_TIM_PWM_Start_IT+0x76>
 800d48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d490:	d003      	beq.n	800d49a <HAL_TIM_PWM_Start_IT+0x76>
    __HAL_TIM_ENABLE(htim);
 800d492:	6813      	ldr	r3, [r2, #0]
 800d494:	f043 0301 	orr.w	r3, r3, #1
 800d498:	6013      	str	r3, [r2, #0]
}
 800d49a:	2000      	movs	r0, #0
 800d49c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d49e:	6802      	ldr	r2, [r0, #0]
 800d4a0:	68d3      	ldr	r3, [r2, #12]
 800d4a2:	f043 0304 	orr.w	r3, r3, #4
 800d4a6:	60d3      	str	r3, [r2, #12]
      break;
 800d4a8:	e7ce      	b.n	800d448 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d4aa:	6802      	ldr	r2, [r0, #0]
 800d4ac:	68d3      	ldr	r3, [r2, #12]
 800d4ae:	f043 0308 	orr.w	r3, r3, #8
 800d4b2:	60d3      	str	r3, [r2, #12]
      break;
 800d4b4:	e7c8      	b.n	800d448 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d4b6:	6802      	ldr	r2, [r0, #0]
 800d4b8:	68d3      	ldr	r3, [r2, #12]
 800d4ba:	f043 0310 	orr.w	r3, r3, #16
 800d4be:	60d3      	str	r3, [r2, #12]
      break;
 800d4c0:	e7c2      	b.n	800d448 <HAL_TIM_PWM_Start_IT+0x24>
 800d4c2:	bf00      	nop
 800d4c4:	40012c00 	.word	0x40012c00
 800d4c8:	00010007 	.word	0x00010007

0800d4cc <HAL_TIM_PWM_Stop_IT>:
{
 800d4cc:	b510      	push	{r4, lr}
 800d4ce:	4604      	mov	r4, r0
  switch (Channel)
 800d4d0:	290c      	cmp	r1, #12
 800d4d2:	d80d      	bhi.n	800d4f0 <HAL_TIM_PWM_Stop_IT+0x24>
 800d4d4:	e8df f001 	tbb	[pc, r1]
 800d4d8:	0c0c0c07 	.word	0x0c0c0c07
 800d4dc:	0c0c0c43 	.word	0x0c0c0c43
 800d4e0:	0c0c0c49 	.word	0x0c0c0c49
 800d4e4:	4f          	.byte	0x4f
 800d4e5:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d4e6:	6802      	ldr	r2, [r0, #0]
 800d4e8:	68d3      	ldr	r3, [r2, #12]
 800d4ea:	f023 0302 	bic.w	r3, r3, #2
 800d4ee:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	6820      	ldr	r0, [r4, #0]
 800d4f4:	f7ff fcc8 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d4f8:	6823      	ldr	r3, [r4, #0]
 800d4fa:	4a22      	ldr	r2, [pc, #136]	; (800d584 <HAL_TIM_PWM_Stop_IT+0xb8>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d00f      	beq.n	800d520 <HAL_TIM_PWM_Stop_IT+0x54>
 800d500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d504:	4293      	cmp	r3, r2
 800d506:	d00b      	beq.n	800d520 <HAL_TIM_PWM_Stop_IT+0x54>
 800d508:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d007      	beq.n	800d520 <HAL_TIM_PWM_Stop_IT+0x54>
 800d510:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d514:	4293      	cmp	r3, r2
 800d516:	d003      	beq.n	800d520 <HAL_TIM_PWM_Stop_IT+0x54>
 800d518:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d10d      	bne.n	800d53c <HAL_TIM_PWM_Stop_IT+0x70>
    __HAL_TIM_MOE_DISABLE(htim);
 800d520:	6a19      	ldr	r1, [r3, #32]
 800d522:	f241 1211 	movw	r2, #4369	; 0x1111
 800d526:	4211      	tst	r1, r2
 800d528:	d108      	bne.n	800d53c <HAL_TIM_PWM_Stop_IT+0x70>
 800d52a:	6a19      	ldr	r1, [r3, #32]
 800d52c:	f240 4244 	movw	r2, #1092	; 0x444
 800d530:	4211      	tst	r1, r2
 800d532:	d103      	bne.n	800d53c <HAL_TIM_PWM_Stop_IT+0x70>
 800d534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d53a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	6a19      	ldr	r1, [r3, #32]
 800d540:	f241 1211 	movw	r2, #4369	; 0x1111
 800d544:	4211      	tst	r1, r2
 800d546:	d108      	bne.n	800d55a <HAL_TIM_PWM_Stop_IT+0x8e>
 800d548:	6a19      	ldr	r1, [r3, #32]
 800d54a:	f240 4244 	movw	r2, #1092	; 0x444
 800d54e:	4211      	tst	r1, r2
 800d550:	d103      	bne.n	800d55a <HAL_TIM_PWM_Stop_IT+0x8e>
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	f022 0201 	bic.w	r2, r2, #1
 800d558:	601a      	str	r2, [r3, #0]
}
 800d55a:	2000      	movs	r0, #0
 800d55c:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d55e:	6802      	ldr	r2, [r0, #0]
 800d560:	68d3      	ldr	r3, [r2, #12]
 800d562:	f023 0304 	bic.w	r3, r3, #4
 800d566:	60d3      	str	r3, [r2, #12]
      break;
 800d568:	e7c2      	b.n	800d4f0 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d56a:	6802      	ldr	r2, [r0, #0]
 800d56c:	68d3      	ldr	r3, [r2, #12]
 800d56e:	f023 0308 	bic.w	r3, r3, #8
 800d572:	60d3      	str	r3, [r2, #12]
      break;
 800d574:	e7bc      	b.n	800d4f0 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d576:	6802      	ldr	r2, [r0, #0]
 800d578:	68d3      	ldr	r3, [r2, #12]
 800d57a:	f023 0310 	bic.w	r3, r3, #16
 800d57e:	60d3      	str	r3, [r2, #12]
      break;
 800d580:	e7b6      	b.n	800d4f0 <HAL_TIM_PWM_Stop_IT+0x24>
 800d582:	bf00      	nop
 800d584:	40012c00 	.word	0x40012c00

0800d588 <HAL_TIM_PWM_Start_DMA>:
{
 800d588:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800d58a:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d58e:	b2f6      	uxtb	r6, r6
 800d590:	2e02      	cmp	r6, #2
 800d592:	f000 80a1 	beq.w	800d6d8 <HAL_TIM_PWM_Start_DMA+0x150>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800d596:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d59a:	b2f6      	uxtb	r6, r6
 800d59c:	2e01      	cmp	r6, #1
 800d59e:	d00d      	beq.n	800d5bc <HAL_TIM_PWM_Start_DMA+0x34>
 800d5a0:	4616      	mov	r6, r2
 800d5a2:	460d      	mov	r5, r1
 800d5a4:	4604      	mov	r4, r0
  switch (Channel)
 800d5a6:	290c      	cmp	r1, #12
 800d5a8:	d827      	bhi.n	800d5fa <HAL_TIM_PWM_Start_DMA+0x72>
 800d5aa:	e8df f001 	tbb	[pc, r1]
 800d5ae:	2610      	.short	0x2610
 800d5b0:	26522626 	.word	0x26522626
 800d5b4:	26692626 	.word	0x26692626
 800d5b8:	2626      	.short	0x2626
 800d5ba:	7f          	.byte	0x7f
 800d5bb:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800d5bc:	b11a      	cbz	r2, 800d5c6 <HAL_TIM_PWM_Start_DMA+0x3e>
      htim->State = HAL_TIM_STATE_BUSY;
 800d5be:	2402      	movs	r4, #2
 800d5c0:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800d5c4:	e7ec      	b.n	800d5a0 <HAL_TIM_PWM_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d0f9      	beq.n	800d5be <HAL_TIM_PWM_Start_DMA+0x36>
      return HAL_ERROR;
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	e040      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0xc8>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d5ce:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d5d0:	4948      	ldr	r1, [pc, #288]	; (800d6f4 <HAL_TIM_PWM_Start_DMA+0x16c>)
 800d5d2:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d5d4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d5d6:	4948      	ldr	r1, [pc, #288]	; (800d6f8 <HAL_TIM_PWM_Start_DMA+0x170>)
 800d5d8:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d5da:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d5dc:	4947      	ldr	r1, [pc, #284]	; (800d6fc <HAL_TIM_PWM_Start_DMA+0x174>)
 800d5de:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800d5e0:	6802      	ldr	r2, [r0, #0]
 800d5e2:	3234      	adds	r2, #52	; 0x34
 800d5e4:	4631      	mov	r1, r6
 800d5e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d5e8:	f7f5 f8c7 	bl	800277a <HAL_DMA_Start_IT>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d175      	bne.n	800d6dc <HAL_TIM_PWM_Start_DMA+0x154>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d5f0:	6822      	ldr	r2, [r4, #0]
 800d5f2:	68d3      	ldr	r3, [r2, #12]
 800d5f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d5f8:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	6820      	ldr	r0, [r4, #0]
 800d600:	f7ff fc42 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d604:	6823      	ldr	r3, [r4, #0]
 800d606:	4a3e      	ldr	r2, [pc, #248]	; (800d700 <HAL_TIM_PWM_Start_DMA+0x178>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d00f      	beq.n	800d62c <HAL_TIM_PWM_Start_DMA+0xa4>
 800d60c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d610:	4293      	cmp	r3, r2
 800d612:	d00b      	beq.n	800d62c <HAL_TIM_PWM_Start_DMA+0xa4>
 800d614:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d618:	4293      	cmp	r3, r2
 800d61a:	d007      	beq.n	800d62c <HAL_TIM_PWM_Start_DMA+0xa4>
 800d61c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d620:	4293      	cmp	r3, r2
 800d622:	d003      	beq.n	800d62c <HAL_TIM_PWM_Start_DMA+0xa4>
 800d624:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d628:	4293      	cmp	r3, r2
 800d62a:	d103      	bne.n	800d634 <HAL_TIM_PWM_Start_DMA+0xac>
    __HAL_TIM_MOE_ENABLE(htim);
 800d62c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d62e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d632:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d634:	6822      	ldr	r2, [r4, #0]
 800d636:	6891      	ldr	r1, [r2, #8]
 800d638:	4b32      	ldr	r3, [pc, #200]	; (800d704 <HAL_TIM_PWM_Start_DMA+0x17c>)
 800d63a:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d63c:	2b06      	cmp	r3, #6
 800d63e:	d055      	beq.n	800d6ec <HAL_TIM_PWM_Start_DMA+0x164>
 800d640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d644:	d054      	beq.n	800d6f0 <HAL_TIM_PWM_Start_DMA+0x168>
    __HAL_TIM_ENABLE(htim);
 800d646:	6813      	ldr	r3, [r2, #0]
 800d648:	f043 0301 	orr.w	r3, r3, #1
 800d64c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d64e:	2000      	movs	r0, #0
}
 800d650:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d652:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d654:	4927      	ldr	r1, [pc, #156]	; (800d6f4 <HAL_TIM_PWM_Start_DMA+0x16c>)
 800d656:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d658:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d65a:	4927      	ldr	r1, [pc, #156]	; (800d6f8 <HAL_TIM_PWM_Start_DMA+0x170>)
 800d65c:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d65e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d660:	4926      	ldr	r1, [pc, #152]	; (800d6fc <HAL_TIM_PWM_Start_DMA+0x174>)
 800d662:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800d664:	6802      	ldr	r2, [r0, #0]
 800d666:	3238      	adds	r2, #56	; 0x38
 800d668:	4631      	mov	r1, r6
 800d66a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d66c:	f7f5 f885 	bl	800277a <HAL_DMA_Start_IT>
 800d670:	2800      	cmp	r0, #0
 800d672:	d135      	bne.n	800d6e0 <HAL_TIM_PWM_Start_DMA+0x158>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d674:	6822      	ldr	r2, [r4, #0]
 800d676:	68d3      	ldr	r3, [r2, #12]
 800d678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d67c:	60d3      	str	r3, [r2, #12]
      break;
 800d67e:	e7bc      	b.n	800d5fa <HAL_TIM_PWM_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d680:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d682:	491c      	ldr	r1, [pc, #112]	; (800d6f4 <HAL_TIM_PWM_Start_DMA+0x16c>)
 800d684:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d686:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d688:	491b      	ldr	r1, [pc, #108]	; (800d6f8 <HAL_TIM_PWM_Start_DMA+0x170>)
 800d68a:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d68c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d68e:	491b      	ldr	r1, [pc, #108]	; (800d6fc <HAL_TIM_PWM_Start_DMA+0x174>)
 800d690:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800d692:	6802      	ldr	r2, [r0, #0]
 800d694:	323c      	adds	r2, #60	; 0x3c
 800d696:	4631      	mov	r1, r6
 800d698:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d69a:	f7f5 f86e 	bl	800277a <HAL_DMA_Start_IT>
 800d69e:	bb08      	cbnz	r0, 800d6e4 <HAL_TIM_PWM_Start_DMA+0x15c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d6a0:	6822      	ldr	r2, [r4, #0]
 800d6a2:	68d3      	ldr	r3, [r2, #12]
 800d6a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d6a8:	60d3      	str	r3, [r2, #12]
      break;
 800d6aa:	e7a6      	b.n	800d5fa <HAL_TIM_PWM_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d6ac:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d6ae:	4911      	ldr	r1, [pc, #68]	; (800d6f4 <HAL_TIM_PWM_Start_DMA+0x16c>)
 800d6b0:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d6b2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d6b4:	4910      	ldr	r1, [pc, #64]	; (800d6f8 <HAL_TIM_PWM_Start_DMA+0x170>)
 800d6b6:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d6b8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d6ba:	4910      	ldr	r1, [pc, #64]	; (800d6fc <HAL_TIM_PWM_Start_DMA+0x174>)
 800d6bc:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800d6be:	6802      	ldr	r2, [r0, #0]
 800d6c0:	3240      	adds	r2, #64	; 0x40
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d6c6:	f7f5 f858 	bl	800277a <HAL_DMA_Start_IT>
 800d6ca:	b968      	cbnz	r0, 800d6e8 <HAL_TIM_PWM_Start_DMA+0x160>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d6cc:	6822      	ldr	r2, [r4, #0]
 800d6ce:	68d3      	ldr	r3, [r2, #12]
 800d6d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d6d4:	60d3      	str	r3, [r2, #12]
      break;
 800d6d6:	e790      	b.n	800d5fa <HAL_TIM_PWM_Start_DMA+0x72>
    return HAL_BUSY;
 800d6d8:	2002      	movs	r0, #2
 800d6da:	e7b9      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800d6dc:	2001      	movs	r0, #1
 800d6de:	e7b7      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800d6e0:	2001      	movs	r0, #1
 800d6e2:	e7b5      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	e7b3      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	e7b1      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0xc8>
  return HAL_OK;
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	e7af      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0xc8>
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	e7ad      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0xc8>
 800d6f4:	0800bff5 	.word	0x0800bff5
 800d6f8:	0800c03b 	.word	0x0800c03b
 800d6fc:	0800c23f 	.word	0x0800c23f
 800d700:	40012c00 	.word	0x40012c00
 800d704:	00010007 	.word	0x00010007

0800d708 <HAL_TIM_PWM_Stop_DMA>:
{
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	4604      	mov	r4, r0
 800d70c:	460d      	mov	r5, r1
  switch (Channel)
 800d70e:	290c      	cmp	r1, #12
 800d710:	d810      	bhi.n	800d734 <HAL_TIM_PWM_Stop_DMA+0x2c>
 800d712:	e8df f001 	tbb	[pc, r1]
 800d716:	0f07      	.short	0x0f07
 800d718:	0f4a0f0f 	.word	0x0f4a0f0f
 800d71c:	0f530f0f 	.word	0x0f530f0f
 800d720:	0f0f      	.short	0x0f0f
 800d722:	5c          	.byte	0x5c
 800d723:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d724:	6802      	ldr	r2, [r0, #0]
 800d726:	68d3      	ldr	r3, [r2, #12]
 800d728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d72c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d72e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d730:	f7f5 f895 	bl	800285e <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d734:	2200      	movs	r2, #0
 800d736:	4629      	mov	r1, r5
 800d738:	6820      	ldr	r0, [r4, #0]
 800d73a:	f7ff fba5 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d73e:	6823      	ldr	r3, [r4, #0]
 800d740:	4a27      	ldr	r2, [pc, #156]	; (800d7e0 <HAL_TIM_PWM_Stop_DMA+0xd8>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d00f      	beq.n	800d766 <HAL_TIM_PWM_Stop_DMA+0x5e>
 800d746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d00b      	beq.n	800d766 <HAL_TIM_PWM_Stop_DMA+0x5e>
 800d74e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d752:	4293      	cmp	r3, r2
 800d754:	d007      	beq.n	800d766 <HAL_TIM_PWM_Stop_DMA+0x5e>
 800d756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d003      	beq.n	800d766 <HAL_TIM_PWM_Stop_DMA+0x5e>
 800d75e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d762:	4293      	cmp	r3, r2
 800d764:	d10d      	bne.n	800d782 <HAL_TIM_PWM_Stop_DMA+0x7a>
    __HAL_TIM_MOE_DISABLE(htim);
 800d766:	6a19      	ldr	r1, [r3, #32]
 800d768:	f241 1211 	movw	r2, #4369	; 0x1111
 800d76c:	4211      	tst	r1, r2
 800d76e:	d108      	bne.n	800d782 <HAL_TIM_PWM_Stop_DMA+0x7a>
 800d770:	6a19      	ldr	r1, [r3, #32]
 800d772:	f240 4244 	movw	r2, #1092	; 0x444
 800d776:	4211      	tst	r1, r2
 800d778:	d103      	bne.n	800d782 <HAL_TIM_PWM_Stop_DMA+0x7a>
 800d77a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d77c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d780:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	6a19      	ldr	r1, [r3, #32]
 800d786:	f241 1211 	movw	r2, #4369	; 0x1111
 800d78a:	4211      	tst	r1, r2
 800d78c:	d108      	bne.n	800d7a0 <HAL_TIM_PWM_Stop_DMA+0x98>
 800d78e:	6a19      	ldr	r1, [r3, #32]
 800d790:	f240 4244 	movw	r2, #1092	; 0x444
 800d794:	4211      	tst	r1, r2
 800d796:	d103      	bne.n	800d7a0 <HAL_TIM_PWM_Stop_DMA+0x98>
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	f022 0201 	bic.w	r2, r2, #1
 800d79e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d7aa:	6802      	ldr	r2, [r0, #0]
 800d7ac:	68d3      	ldr	r3, [r2, #12]
 800d7ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7b2:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d7b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d7b6:	f7f5 f852 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800d7ba:	e7bb      	b.n	800d734 <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d7bc:	6802      	ldr	r2, [r0, #0]
 800d7be:	68d3      	ldr	r3, [r2, #12]
 800d7c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7c4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d7c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d7c8:	f7f5 f849 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800d7cc:	e7b2      	b.n	800d734 <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d7ce:	6802      	ldr	r2, [r0, #0]
 800d7d0:	68d3      	ldr	r3, [r2, #12]
 800d7d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7d6:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d7d8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d7da:	f7f5 f840 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800d7de:	e7a9      	b.n	800d734 <HAL_TIM_PWM_Stop_DMA+0x2c>
 800d7e0:	40012c00 	.word	0x40012c00

0800d7e4 <HAL_TIM_IC_Start>:
{
 800d7e4:	b510      	push	{r4, lr}
 800d7e6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	6800      	ldr	r0, [r0, #0]
 800d7ec:	f7ff fb4c 	bl	800ce88 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7f0:	6822      	ldr	r2, [r4, #0]
 800d7f2:	6891      	ldr	r1, [r2, #8]
 800d7f4:	4b06      	ldr	r3, [pc, #24]	; (800d810 <HAL_TIM_IC_Start+0x2c>)
 800d7f6:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7f8:	2b06      	cmp	r3, #6
 800d7fa:	d006      	beq.n	800d80a <HAL_TIM_IC_Start+0x26>
 800d7fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d800:	d003      	beq.n	800d80a <HAL_TIM_IC_Start+0x26>
    __HAL_TIM_ENABLE(htim);
 800d802:	6813      	ldr	r3, [r2, #0]
 800d804:	f043 0301 	orr.w	r3, r3, #1
 800d808:	6013      	str	r3, [r2, #0]
}
 800d80a:	2000      	movs	r0, #0
 800d80c:	bd10      	pop	{r4, pc}
 800d80e:	bf00      	nop
 800d810:	00010007 	.word	0x00010007

0800d814 <HAL_TIM_IC_Stop>:
{
 800d814:	b510      	push	{r4, lr}
 800d816:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d818:	2200      	movs	r2, #0
 800d81a:	6800      	ldr	r0, [r0, #0]
 800d81c:	f7ff fb34 	bl	800ce88 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	6a19      	ldr	r1, [r3, #32]
 800d824:	f241 1211 	movw	r2, #4369	; 0x1111
 800d828:	4211      	tst	r1, r2
 800d82a:	d108      	bne.n	800d83e <HAL_TIM_IC_Stop+0x2a>
 800d82c:	6a19      	ldr	r1, [r3, #32]
 800d82e:	f240 4244 	movw	r2, #1092	; 0x444
 800d832:	4211      	tst	r1, r2
 800d834:	d103      	bne.n	800d83e <HAL_TIM_IC_Stop+0x2a>
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	f022 0201 	bic.w	r2, r2, #1
 800d83c:	601a      	str	r2, [r3, #0]
}
 800d83e:	2000      	movs	r0, #0
 800d840:	bd10      	pop	{r4, pc}
	...

0800d844 <HAL_TIM_IC_Start_IT>:
{
 800d844:	b510      	push	{r4, lr}
 800d846:	4604      	mov	r4, r0
  switch (Channel)
 800d848:	290c      	cmp	r1, #12
 800d84a:	d80d      	bhi.n	800d868 <HAL_TIM_IC_Start_IT+0x24>
 800d84c:	e8df f001 	tbb	[pc, r1]
 800d850:	0c0c0c07 	.word	0x0c0c0c07
 800d854:	0c0c0c1f 	.word	0x0c0c0c1f
 800d858:	0c0c0c25 	.word	0x0c0c0c25
 800d85c:	2b          	.byte	0x2b
 800d85d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d85e:	6802      	ldr	r2, [r0, #0]
 800d860:	68d3      	ldr	r3, [r2, #12]
 800d862:	f043 0302 	orr.w	r3, r3, #2
 800d866:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d868:	2201      	movs	r2, #1
 800d86a:	6820      	ldr	r0, [r4, #0]
 800d86c:	f7ff fb0c 	bl	800ce88 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d870:	6822      	ldr	r2, [r4, #0]
 800d872:	6891      	ldr	r1, [r2, #8]
 800d874:	4b0f      	ldr	r3, [pc, #60]	; (800d8b4 <HAL_TIM_IC_Start_IT+0x70>)
 800d876:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d878:	2b06      	cmp	r3, #6
 800d87a:	d006      	beq.n	800d88a <HAL_TIM_IC_Start_IT+0x46>
 800d87c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d880:	d003      	beq.n	800d88a <HAL_TIM_IC_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 800d882:	6813      	ldr	r3, [r2, #0]
 800d884:	f043 0301 	orr.w	r3, r3, #1
 800d888:	6013      	str	r3, [r2, #0]
}
 800d88a:	2000      	movs	r0, #0
 800d88c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d88e:	6802      	ldr	r2, [r0, #0]
 800d890:	68d3      	ldr	r3, [r2, #12]
 800d892:	f043 0304 	orr.w	r3, r3, #4
 800d896:	60d3      	str	r3, [r2, #12]
      break;
 800d898:	e7e6      	b.n	800d868 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d89a:	6802      	ldr	r2, [r0, #0]
 800d89c:	68d3      	ldr	r3, [r2, #12]
 800d89e:	f043 0308 	orr.w	r3, r3, #8
 800d8a2:	60d3      	str	r3, [r2, #12]
      break;
 800d8a4:	e7e0      	b.n	800d868 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d8a6:	6802      	ldr	r2, [r0, #0]
 800d8a8:	68d3      	ldr	r3, [r2, #12]
 800d8aa:	f043 0310 	orr.w	r3, r3, #16
 800d8ae:	60d3      	str	r3, [r2, #12]
      break;
 800d8b0:	e7da      	b.n	800d868 <HAL_TIM_IC_Start_IT+0x24>
 800d8b2:	bf00      	nop
 800d8b4:	00010007 	.word	0x00010007

0800d8b8 <HAL_TIM_IC_Stop_IT>:
{
 800d8b8:	b510      	push	{r4, lr}
 800d8ba:	4604      	mov	r4, r0
  switch (Channel)
 800d8bc:	290c      	cmp	r1, #12
 800d8be:	d80d      	bhi.n	800d8dc <HAL_TIM_IC_Stop_IT+0x24>
 800d8c0:	e8df f001 	tbb	[pc, r1]
 800d8c4:	0c0c0c07 	.word	0x0c0c0c07
 800d8c8:	0c0c0c21 	.word	0x0c0c0c21
 800d8cc:	0c0c0c27 	.word	0x0c0c0c27
 800d8d0:	2d          	.byte	0x2d
 800d8d1:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d8d2:	6802      	ldr	r2, [r0, #0]
 800d8d4:	68d3      	ldr	r3, [r2, #12]
 800d8d6:	f023 0302 	bic.w	r3, r3, #2
 800d8da:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d8dc:	2200      	movs	r2, #0
 800d8de:	6820      	ldr	r0, [r4, #0]
 800d8e0:	f7ff fad2 	bl	800ce88 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	6a19      	ldr	r1, [r3, #32]
 800d8e8:	f241 1211 	movw	r2, #4369	; 0x1111
 800d8ec:	4211      	tst	r1, r2
 800d8ee:	d108      	bne.n	800d902 <HAL_TIM_IC_Stop_IT+0x4a>
 800d8f0:	6a19      	ldr	r1, [r3, #32]
 800d8f2:	f240 4244 	movw	r2, #1092	; 0x444
 800d8f6:	4211      	tst	r1, r2
 800d8f8:	d103      	bne.n	800d902 <HAL_TIM_IC_Stop_IT+0x4a>
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	f022 0201 	bic.w	r2, r2, #1
 800d900:	601a      	str	r2, [r3, #0]
}
 800d902:	2000      	movs	r0, #0
 800d904:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d906:	6802      	ldr	r2, [r0, #0]
 800d908:	68d3      	ldr	r3, [r2, #12]
 800d90a:	f023 0304 	bic.w	r3, r3, #4
 800d90e:	60d3      	str	r3, [r2, #12]
      break;
 800d910:	e7e4      	b.n	800d8dc <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d912:	6802      	ldr	r2, [r0, #0]
 800d914:	68d3      	ldr	r3, [r2, #12]
 800d916:	f023 0308 	bic.w	r3, r3, #8
 800d91a:	60d3      	str	r3, [r2, #12]
      break;
 800d91c:	e7de      	b.n	800d8dc <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d91e:	6802      	ldr	r2, [r0, #0]
 800d920:	68d3      	ldr	r3, [r2, #12]
 800d922:	f023 0310 	bic.w	r3, r3, #16
 800d926:	60d3      	str	r3, [r2, #12]
      break;
 800d928:	e7d8      	b.n	800d8dc <HAL_TIM_IC_Stop_IT+0x24>
	...

0800d92c <HAL_TIM_IC_Start_DMA>:
{
 800d92c:	b538      	push	{r3, r4, r5, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800d92e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800d932:	b2e4      	uxtb	r4, r4
 800d934:	2c02      	cmp	r4, #2
 800d936:	f000 8084 	beq.w	800da42 <HAL_TIM_IC_Start_DMA+0x116>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800d93a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800d93e:	b2e4      	uxtb	r4, r4
 800d940:	2c01      	cmp	r4, #1
 800d942:	d00c      	beq.n	800d95e <HAL_TIM_IC_Start_DMA+0x32>
 800d944:	460d      	mov	r5, r1
 800d946:	4604      	mov	r4, r0
  switch (Channel)
 800d948:	2d0c      	cmp	r5, #12
 800d94a:	d826      	bhi.n	800d99a <HAL_TIM_IC_Start_DMA+0x6e>
 800d94c:	e8df f005 	tbb	[pc, r5]
 800d950:	25252510 	.word	0x25252510
 800d954:	25252539 	.word	0x25252539
 800d958:	2525254f 	.word	0x2525254f
 800d95c:	64          	.byte	0x64
 800d95d:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800d95e:	b11a      	cbz	r2, 800d968 <HAL_TIM_IC_Start_DMA+0x3c>
      htim->State = HAL_TIM_STATE_BUSY;
 800d960:	2402      	movs	r4, #2
 800d962:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800d966:	e7ed      	b.n	800d944 <HAL_TIM_IC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0f9      	beq.n	800d960 <HAL_TIM_IC_Start_DMA+0x34>
      return HAL_ERROR;
 800d96c:	2001      	movs	r0, #1
 800d96e:	e027      	b.n	800d9c0 <HAL_TIM_IC_Start_DMA+0x94>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800d970:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d972:	483b      	ldr	r0, [pc, #236]	; (800da60 <HAL_TIM_IC_Start_DMA+0x134>)
 800d974:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d976:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d978:	483a      	ldr	r0, [pc, #232]	; (800da64 <HAL_TIM_IC_Start_DMA+0x138>)
 800d97a:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d97c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d97e:	483a      	ldr	r0, [pc, #232]	; (800da68 <HAL_TIM_IC_Start_DMA+0x13c>)
 800d980:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800d982:	6821      	ldr	r1, [r4, #0]
 800d984:	3134      	adds	r1, #52	; 0x34
 800d986:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d988:	f7f4 fef7 	bl	800277a <HAL_DMA_Start_IT>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d15a      	bne.n	800da46 <HAL_TIM_IC_Start_DMA+0x11a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d990:	6822      	ldr	r2, [r4, #0]
 800d992:	68d3      	ldr	r3, [r2, #12]
 800d994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d998:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d99a:	2201      	movs	r2, #1
 800d99c:	4629      	mov	r1, r5
 800d99e:	6820      	ldr	r0, [r4, #0]
 800d9a0:	f7ff fa72 	bl	800ce88 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9a4:	6822      	ldr	r2, [r4, #0]
 800d9a6:	6891      	ldr	r1, [r2, #8]
 800d9a8:	4b30      	ldr	r3, [pc, #192]	; (800da6c <HAL_TIM_IC_Start_DMA+0x140>)
 800d9aa:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9ac:	2b06      	cmp	r3, #6
 800d9ae:	d052      	beq.n	800da56 <HAL_TIM_IC_Start_DMA+0x12a>
 800d9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9b4:	d051      	beq.n	800da5a <HAL_TIM_IC_Start_DMA+0x12e>
    __HAL_TIM_ENABLE(htim);
 800d9b6:	6813      	ldr	r3, [r2, #0]
 800d9b8:	f043 0301 	orr.w	r3, r3, #1
 800d9bc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d9be:	2000      	movs	r0, #0
}
 800d9c0:	bd38      	pop	{r3, r4, r5, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800d9c2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d9c4:	4826      	ldr	r0, [pc, #152]	; (800da60 <HAL_TIM_IC_Start_DMA+0x134>)
 800d9c6:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d9c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d9ca:	4826      	ldr	r0, [pc, #152]	; (800da64 <HAL_TIM_IC_Start_DMA+0x138>)
 800d9cc:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d9ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d9d0:	4825      	ldr	r0, [pc, #148]	; (800da68 <HAL_TIM_IC_Start_DMA+0x13c>)
 800d9d2:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800d9d4:	6821      	ldr	r1, [r4, #0]
 800d9d6:	3138      	adds	r1, #56	; 0x38
 800d9d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d9da:	f7f4 fece 	bl	800277a <HAL_DMA_Start_IT>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d133      	bne.n	800da4a <HAL_TIM_IC_Start_DMA+0x11e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d9e2:	6822      	ldr	r2, [r4, #0]
 800d9e4:	68d3      	ldr	r3, [r2, #12]
 800d9e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d9ea:	60d3      	str	r3, [r2, #12]
      break;
 800d9ec:	e7d5      	b.n	800d99a <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800d9ee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d9f0:	481b      	ldr	r0, [pc, #108]	; (800da60 <HAL_TIM_IC_Start_DMA+0x134>)
 800d9f2:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d9f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d9f6:	481b      	ldr	r0, [pc, #108]	; (800da64 <HAL_TIM_IC_Start_DMA+0x138>)
 800d9f8:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d9fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d9fc:	481a      	ldr	r0, [pc, #104]	; (800da68 <HAL_TIM_IC_Start_DMA+0x13c>)
 800d9fe:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800da00:	6821      	ldr	r1, [r4, #0]
 800da02:	313c      	adds	r1, #60	; 0x3c
 800da04:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800da06:	f7f4 feb8 	bl	800277a <HAL_DMA_Start_IT>
 800da0a:	bb00      	cbnz	r0, 800da4e <HAL_TIM_IC_Start_DMA+0x122>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800da0c:	6822      	ldr	r2, [r4, #0]
 800da0e:	68d3      	ldr	r3, [r2, #12]
 800da10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800da14:	60d3      	str	r3, [r2, #12]
      break;
 800da16:	e7c0      	b.n	800d99a <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800da18:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800da1a:	4811      	ldr	r0, [pc, #68]	; (800da60 <HAL_TIM_IC_Start_DMA+0x134>)
 800da1c:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800da1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800da20:	4810      	ldr	r0, [pc, #64]	; (800da64 <HAL_TIM_IC_Start_DMA+0x138>)
 800da22:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800da24:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800da26:	4810      	ldr	r0, [pc, #64]	; (800da68 <HAL_TIM_IC_Start_DMA+0x13c>)
 800da28:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800da2a:	6821      	ldr	r1, [r4, #0]
 800da2c:	3140      	adds	r1, #64	; 0x40
 800da2e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800da30:	f7f4 fea3 	bl	800277a <HAL_DMA_Start_IT>
 800da34:	b968      	cbnz	r0, 800da52 <HAL_TIM_IC_Start_DMA+0x126>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800da36:	6822      	ldr	r2, [r4, #0]
 800da38:	68d3      	ldr	r3, [r2, #12]
 800da3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800da3e:	60d3      	str	r3, [r2, #12]
      break;
 800da40:	e7ab      	b.n	800d99a <HAL_TIM_IC_Start_DMA+0x6e>
    return HAL_BUSY;
 800da42:	2002      	movs	r0, #2
 800da44:	e7bc      	b.n	800d9c0 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 800da46:	2001      	movs	r0, #1
 800da48:	e7ba      	b.n	800d9c0 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 800da4a:	2001      	movs	r0, #1
 800da4c:	e7b8      	b.n	800d9c0 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 800da4e:	2001      	movs	r0, #1
 800da50:	e7b6      	b.n	800d9c0 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 800da52:	2001      	movs	r0, #1
 800da54:	e7b4      	b.n	800d9c0 <HAL_TIM_IC_Start_DMA+0x94>
  return HAL_OK;
 800da56:	2000      	movs	r0, #0
 800da58:	e7b2      	b.n	800d9c0 <HAL_TIM_IC_Start_DMA+0x94>
 800da5a:	2000      	movs	r0, #0
 800da5c:	e7b0      	b.n	800d9c0 <HAL_TIM_IC_Start_DMA+0x94>
 800da5e:	bf00      	nop
 800da60:	0800bf69 	.word	0x0800bf69
 800da64:	0800bfaf 	.word	0x0800bfaf
 800da68:	0800c23f 	.word	0x0800c23f
 800da6c:	00010007 	.word	0x00010007

0800da70 <HAL_TIM_IC_Stop_DMA>:
{
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	4604      	mov	r4, r0
 800da74:	460d      	mov	r5, r1
  switch (Channel)
 800da76:	290c      	cmp	r1, #12
 800da78:	d810      	bhi.n	800da9c <HAL_TIM_IC_Stop_DMA+0x2c>
 800da7a:	e8df f001 	tbb	[pc, r1]
 800da7e:	0f07      	.short	0x0f07
 800da80:	0f280f0f 	.word	0x0f280f0f
 800da84:	0f310f0f 	.word	0x0f310f0f
 800da88:	0f0f      	.short	0x0f0f
 800da8a:	3a          	.byte	0x3a
 800da8b:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800da8c:	6802      	ldr	r2, [r0, #0]
 800da8e:	68d3      	ldr	r3, [r2, #12]
 800da90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da94:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800da96:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800da98:	f7f4 fee1 	bl	800285e <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800da9c:	2200      	movs	r2, #0
 800da9e:	4629      	mov	r1, r5
 800daa0:	6820      	ldr	r0, [r4, #0]
 800daa2:	f7ff f9f1 	bl	800ce88 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	6a19      	ldr	r1, [r3, #32]
 800daaa:	f241 1211 	movw	r2, #4369	; 0x1111
 800daae:	4211      	tst	r1, r2
 800dab0:	d108      	bne.n	800dac4 <HAL_TIM_IC_Stop_DMA+0x54>
 800dab2:	6a19      	ldr	r1, [r3, #32]
 800dab4:	f240 4244 	movw	r2, #1092	; 0x444
 800dab8:	4211      	tst	r1, r2
 800daba:	d103      	bne.n	800dac4 <HAL_TIM_IC_Stop_DMA+0x54>
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	f022 0201 	bic.w	r2, r2, #1
 800dac2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800dac4:	2301      	movs	r3, #1
 800dac6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800daca:	2000      	movs	r0, #0
 800dacc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800dace:	6802      	ldr	r2, [r0, #0]
 800dad0:	68d3      	ldr	r3, [r2, #12]
 800dad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dad6:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800dad8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800dada:	f7f4 fec0 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800dade:	e7dd      	b.n	800da9c <HAL_TIM_IC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800dae0:	6802      	ldr	r2, [r0, #0]
 800dae2:	68d3      	ldr	r3, [r2, #12]
 800dae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dae8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800daea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800daec:	f7f4 feb7 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800daf0:	e7d4      	b.n	800da9c <HAL_TIM_IC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800daf2:	6802      	ldr	r2, [r0, #0]
 800daf4:	68d3      	ldr	r3, [r2, #12]
 800daf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dafa:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800dafc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800dafe:	f7f4 feae 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800db02:	e7cb      	b.n	800da9c <HAL_TIM_IC_Stop_DMA+0x2c>

0800db04 <HAL_TIM_OnePulse_Start>:
{
 800db04:	b510      	push	{r4, lr}
 800db06:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db08:	2201      	movs	r2, #1
 800db0a:	2100      	movs	r1, #0
 800db0c:	6800      	ldr	r0, [r0, #0]
 800db0e:	f7ff f9bb 	bl	800ce88 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db12:	2201      	movs	r2, #1
 800db14:	2104      	movs	r1, #4
 800db16:	6820      	ldr	r0, [r4, #0]
 800db18:	f7ff f9b6 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	4a0c      	ldr	r2, [pc, #48]	; (800db50 <HAL_TIM_OnePulse_Start+0x4c>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d00f      	beq.n	800db44 <HAL_TIM_OnePulse_Start+0x40>
 800db24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db28:	4293      	cmp	r3, r2
 800db2a:	d00b      	beq.n	800db44 <HAL_TIM_OnePulse_Start+0x40>
 800db2c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800db30:	4293      	cmp	r3, r2
 800db32:	d007      	beq.n	800db44 <HAL_TIM_OnePulse_Start+0x40>
 800db34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db38:	4293      	cmp	r3, r2
 800db3a:	d003      	beq.n	800db44 <HAL_TIM_OnePulse_Start+0x40>
 800db3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db40:	4293      	cmp	r3, r2
 800db42:	d103      	bne.n	800db4c <HAL_TIM_OnePulse_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 800db44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db4a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800db4c:	2000      	movs	r0, #0
 800db4e:	bd10      	pop	{r4, pc}
 800db50:	40012c00 	.word	0x40012c00

0800db54 <HAL_TIM_OnePulse_Stop>:
{
 800db54:	b510      	push	{r4, lr}
 800db56:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800db58:	2200      	movs	r2, #0
 800db5a:	4611      	mov	r1, r2
 800db5c:	6800      	ldr	r0, [r0, #0]
 800db5e:	f7ff f993 	bl	800ce88 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800db62:	2200      	movs	r2, #0
 800db64:	2104      	movs	r1, #4
 800db66:	6820      	ldr	r0, [r4, #0]
 800db68:	f7ff f98e 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	4a19      	ldr	r2, [pc, #100]	; (800dbd4 <HAL_TIM_OnePulse_Stop+0x80>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d00f      	beq.n	800db94 <HAL_TIM_OnePulse_Stop+0x40>
 800db74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db78:	4293      	cmp	r3, r2
 800db7a:	d00b      	beq.n	800db94 <HAL_TIM_OnePulse_Stop+0x40>
 800db7c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800db80:	4293      	cmp	r3, r2
 800db82:	d007      	beq.n	800db94 <HAL_TIM_OnePulse_Stop+0x40>
 800db84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db88:	4293      	cmp	r3, r2
 800db8a:	d003      	beq.n	800db94 <HAL_TIM_OnePulse_Stop+0x40>
 800db8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db90:	4293      	cmp	r3, r2
 800db92:	d10d      	bne.n	800dbb0 <HAL_TIM_OnePulse_Stop+0x5c>
    __HAL_TIM_MOE_DISABLE(htim);
 800db94:	6a19      	ldr	r1, [r3, #32]
 800db96:	f241 1211 	movw	r2, #4369	; 0x1111
 800db9a:	4211      	tst	r1, r2
 800db9c:	d108      	bne.n	800dbb0 <HAL_TIM_OnePulse_Stop+0x5c>
 800db9e:	6a19      	ldr	r1, [r3, #32]
 800dba0:	f240 4244 	movw	r2, #1092	; 0x444
 800dba4:	4211      	tst	r1, r2
 800dba6:	d103      	bne.n	800dbb0 <HAL_TIM_OnePulse_Stop+0x5c>
 800dba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dbae:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	6a19      	ldr	r1, [r3, #32]
 800dbb4:	f241 1211 	movw	r2, #4369	; 0x1111
 800dbb8:	4211      	tst	r1, r2
 800dbba:	d108      	bne.n	800dbce <HAL_TIM_OnePulse_Stop+0x7a>
 800dbbc:	6a19      	ldr	r1, [r3, #32]
 800dbbe:	f240 4244 	movw	r2, #1092	; 0x444
 800dbc2:	4211      	tst	r1, r2
 800dbc4:	d103      	bne.n	800dbce <HAL_TIM_OnePulse_Stop+0x7a>
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	f022 0201 	bic.w	r2, r2, #1
 800dbcc:	601a      	str	r2, [r3, #0]
}
 800dbce:	2000      	movs	r0, #0
 800dbd0:	bd10      	pop	{r4, pc}
 800dbd2:	bf00      	nop
 800dbd4:	40012c00 	.word	0x40012c00

0800dbd8 <HAL_TIM_OnePulse_Start_IT>:
{
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dbdc:	6802      	ldr	r2, [r0, #0]
 800dbde:	68d3      	ldr	r3, [r2, #12]
 800dbe0:	f043 0302 	orr.w	r3, r3, #2
 800dbe4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dbe6:	6802      	ldr	r2, [r0, #0]
 800dbe8:	68d3      	ldr	r3, [r2, #12]
 800dbea:	f043 0304 	orr.w	r3, r3, #4
 800dbee:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	6800      	ldr	r0, [r0, #0]
 800dbf6:	f7ff f947 	bl	800ce88 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	2104      	movs	r1, #4
 800dbfe:	6820      	ldr	r0, [r4, #0]
 800dc00:	f7ff f942 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	4a0c      	ldr	r2, [pc, #48]	; (800dc38 <HAL_TIM_OnePulse_Start_IT+0x60>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d00f      	beq.n	800dc2c <HAL_TIM_OnePulse_Start_IT+0x54>
 800dc0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d00b      	beq.n	800dc2c <HAL_TIM_OnePulse_Start_IT+0x54>
 800dc14:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d007      	beq.n	800dc2c <HAL_TIM_OnePulse_Start_IT+0x54>
 800dc1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d003      	beq.n	800dc2c <HAL_TIM_OnePulse_Start_IT+0x54>
 800dc24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d103      	bne.n	800dc34 <HAL_TIM_OnePulse_Start_IT+0x5c>
    __HAL_TIM_MOE_ENABLE(htim);
 800dc2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dc32:	645a      	str	r2, [r3, #68]	; 0x44
}
 800dc34:	2000      	movs	r0, #0
 800dc36:	bd10      	pop	{r4, pc}
 800dc38:	40012c00 	.word	0x40012c00

0800dc3c <HAL_TIM_OnePulse_Stop_IT>:
{
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800dc40:	6802      	ldr	r2, [r0, #0]
 800dc42:	68d3      	ldr	r3, [r2, #12]
 800dc44:	f023 0302 	bic.w	r3, r3, #2
 800dc48:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800dc4a:	6802      	ldr	r2, [r0, #0]
 800dc4c:	68d3      	ldr	r3, [r2, #12]
 800dc4e:	f023 0304 	bic.w	r3, r3, #4
 800dc52:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dc54:	2200      	movs	r2, #0
 800dc56:	4611      	mov	r1, r2
 800dc58:	6800      	ldr	r0, [r0, #0]
 800dc5a:	f7ff f915 	bl	800ce88 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dc5e:	2200      	movs	r2, #0
 800dc60:	2104      	movs	r1, #4
 800dc62:	6820      	ldr	r0, [r4, #0]
 800dc64:	f7ff f910 	bl	800ce88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	4a19      	ldr	r2, [pc, #100]	; (800dcd0 <HAL_TIM_OnePulse_Stop_IT+0x94>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d00f      	beq.n	800dc90 <HAL_TIM_OnePulse_Stop_IT+0x54>
 800dc70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d00b      	beq.n	800dc90 <HAL_TIM_OnePulse_Stop_IT+0x54>
 800dc78:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d007      	beq.n	800dc90 <HAL_TIM_OnePulse_Stop_IT+0x54>
 800dc80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d003      	beq.n	800dc90 <HAL_TIM_OnePulse_Stop_IT+0x54>
 800dc88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d10d      	bne.n	800dcac <HAL_TIM_OnePulse_Stop_IT+0x70>
    __HAL_TIM_MOE_DISABLE(htim);
 800dc90:	6a19      	ldr	r1, [r3, #32]
 800dc92:	f241 1211 	movw	r2, #4369	; 0x1111
 800dc96:	4211      	tst	r1, r2
 800dc98:	d108      	bne.n	800dcac <HAL_TIM_OnePulse_Stop_IT+0x70>
 800dc9a:	6a19      	ldr	r1, [r3, #32]
 800dc9c:	f240 4244 	movw	r2, #1092	; 0x444
 800dca0:	4211      	tst	r1, r2
 800dca2:	d103      	bne.n	800dcac <HAL_TIM_OnePulse_Stop_IT+0x70>
 800dca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dcaa:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	6a19      	ldr	r1, [r3, #32]
 800dcb0:	f241 1211 	movw	r2, #4369	; 0x1111
 800dcb4:	4211      	tst	r1, r2
 800dcb6:	d108      	bne.n	800dcca <HAL_TIM_OnePulse_Stop_IT+0x8e>
 800dcb8:	6a19      	ldr	r1, [r3, #32]
 800dcba:	f240 4244 	movw	r2, #1092	; 0x444
 800dcbe:	4211      	tst	r1, r2
 800dcc0:	d103      	bne.n	800dcca <HAL_TIM_OnePulse_Stop_IT+0x8e>
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	f022 0201 	bic.w	r2, r2, #1
 800dcc8:	601a      	str	r2, [r3, #0]
}
 800dcca:	2000      	movs	r0, #0
 800dccc:	bd10      	pop	{r4, pc}
 800dcce:	bf00      	nop
 800dcd0:	40012c00 	.word	0x40012c00

0800dcd4 <HAL_TIM_Encoder_Start>:
{
 800dcd4:	b510      	push	{r4, lr}
 800dcd6:	4604      	mov	r4, r0
  switch (Channel)
 800dcd8:	b161      	cbz	r1, 800dcf4 <HAL_TIM_Encoder_Start+0x20>
 800dcda:	2904      	cmp	r1, #4
 800dcdc:	d016      	beq.n	800dd0c <HAL_TIM_Encoder_Start+0x38>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dcde:	2201      	movs	r2, #1
 800dce0:	2100      	movs	r1, #0
 800dce2:	6800      	ldr	r0, [r0, #0]
 800dce4:	f7ff f8d0 	bl	800ce88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dce8:	2201      	movs	r2, #1
 800dcea:	2104      	movs	r1, #4
 800dcec:	6820      	ldr	r0, [r4, #0]
 800dcee:	f7ff f8cb 	bl	800ce88 <TIM_CCxChannelCmd>
      break;
 800dcf2:	e004      	b.n	800dcfe <HAL_TIM_Encoder_Start+0x2a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	6800      	ldr	r0, [r0, #0]
 800dcfa:	f7ff f8c5 	bl	800ce88 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800dcfe:	6822      	ldr	r2, [r4, #0]
 800dd00:	6813      	ldr	r3, [r2, #0]
 800dd02:	f043 0301 	orr.w	r3, r3, #1
 800dd06:	6013      	str	r3, [r2, #0]
}
 800dd08:	2000      	movs	r0, #0
 800dd0a:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	2104      	movs	r1, #4
 800dd10:	6800      	ldr	r0, [r0, #0]
 800dd12:	f7ff f8b9 	bl	800ce88 <TIM_CCxChannelCmd>
      break;
 800dd16:	e7f2      	b.n	800dcfe <HAL_TIM_Encoder_Start+0x2a>

0800dd18 <HAL_TIM_Encoder_Stop>:
{
 800dd18:	b510      	push	{r4, lr}
 800dd1a:	4604      	mov	r4, r0
  switch (Channel)
 800dd1c:	b161      	cbz	r1, 800dd38 <HAL_TIM_Encoder_Stop+0x20>
 800dd1e:	2904      	cmp	r1, #4
 800dd20:	d020      	beq.n	800dd64 <HAL_TIM_Encoder_Stop+0x4c>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dd22:	2200      	movs	r2, #0
 800dd24:	4611      	mov	r1, r2
 800dd26:	6800      	ldr	r0, [r0, #0]
 800dd28:	f7ff f8ae 	bl	800ce88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2104      	movs	r1, #4
 800dd30:	6820      	ldr	r0, [r4, #0]
 800dd32:	f7ff f8a9 	bl	800ce88 <TIM_CCxChannelCmd>
      break;
 800dd36:	e004      	b.n	800dd42 <HAL_TIM_Encoder_Stop+0x2a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4611      	mov	r1, r2
 800dd3c:	6800      	ldr	r0, [r0, #0]
 800dd3e:	f7ff f8a3 	bl	800ce88 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	6a19      	ldr	r1, [r3, #32]
 800dd46:	f241 1211 	movw	r2, #4369	; 0x1111
 800dd4a:	4211      	tst	r1, r2
 800dd4c:	d108      	bne.n	800dd60 <HAL_TIM_Encoder_Stop+0x48>
 800dd4e:	6a19      	ldr	r1, [r3, #32]
 800dd50:	f240 4244 	movw	r2, #1092	; 0x444
 800dd54:	4211      	tst	r1, r2
 800dd56:	d103      	bne.n	800dd60 <HAL_TIM_Encoder_Stop+0x48>
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	f022 0201 	bic.w	r2, r2, #1
 800dd5e:	601a      	str	r2, [r3, #0]
}
 800dd60:	2000      	movs	r0, #0
 800dd62:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dd64:	2200      	movs	r2, #0
 800dd66:	2104      	movs	r1, #4
 800dd68:	6800      	ldr	r0, [r0, #0]
 800dd6a:	f7ff f88d 	bl	800ce88 <TIM_CCxChannelCmd>
      break;
 800dd6e:	e7e8      	b.n	800dd42 <HAL_TIM_Encoder_Stop+0x2a>

0800dd70 <HAL_TIM_Encoder_Start_IT>:
{
 800dd70:	b510      	push	{r4, lr}
 800dd72:	4604      	mov	r4, r0
  switch (Channel)
 800dd74:	b1b1      	cbz	r1, 800dda4 <HAL_TIM_Encoder_Start_IT+0x34>
 800dd76:	2904      	cmp	r1, #4
 800dd78:	d025      	beq.n	800ddc6 <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	6800      	ldr	r0, [r0, #0]
 800dd80:	f7ff f882 	bl	800ce88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd84:	2201      	movs	r2, #1
 800dd86:	2104      	movs	r1, #4
 800dd88:	6820      	ldr	r0, [r4, #0]
 800dd8a:	f7ff f87d 	bl	800ce88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dd8e:	6822      	ldr	r2, [r4, #0]
 800dd90:	68d3      	ldr	r3, [r2, #12]
 800dd92:	f043 0302 	orr.w	r3, r3, #2
 800dd96:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dd98:	6822      	ldr	r2, [r4, #0]
 800dd9a:	68d3      	ldr	r3, [r2, #12]
 800dd9c:	f043 0304 	orr.w	r3, r3, #4
 800dda0:	60d3      	str	r3, [r2, #12]
      break;
 800dda2:	e009      	b.n	800ddb8 <HAL_TIM_Encoder_Start_IT+0x48>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dda4:	2201      	movs	r2, #1
 800dda6:	2100      	movs	r1, #0
 800dda8:	6800      	ldr	r0, [r0, #0]
 800ddaa:	f7ff f86d 	bl	800ce88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ddae:	6822      	ldr	r2, [r4, #0]
 800ddb0:	68d3      	ldr	r3, [r2, #12]
 800ddb2:	f043 0302 	orr.w	r3, r3, #2
 800ddb6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 800ddb8:	6822      	ldr	r2, [r4, #0]
 800ddba:	6813      	ldr	r3, [r2, #0]
 800ddbc:	f043 0301 	orr.w	r3, r3, #1
 800ddc0:	6013      	str	r3, [r2, #0]
}
 800ddc2:	2000      	movs	r0, #0
 800ddc4:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	2104      	movs	r1, #4
 800ddca:	6800      	ldr	r0, [r0, #0]
 800ddcc:	f7ff f85c 	bl	800ce88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ddd0:	6822      	ldr	r2, [r4, #0]
 800ddd2:	68d3      	ldr	r3, [r2, #12]
 800ddd4:	f043 0304 	orr.w	r3, r3, #4
 800ddd8:	60d3      	str	r3, [r2, #12]
      break;
 800ddda:	e7ed      	b.n	800ddb8 <HAL_TIM_Encoder_Start_IT+0x48>

0800dddc <HAL_TIM_Encoder_Stop_IT>:
{
 800dddc:	b510      	push	{r4, lr}
 800ddde:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 800dde0:	b349      	cbz	r1, 800de36 <HAL_TIM_Encoder_Stop_IT+0x5a>
  else if (Channel == TIM_CHANNEL_2)
 800dde2:	2904      	cmp	r1, #4
 800dde4:	d032      	beq.n	800de4c <HAL_TIM_Encoder_Stop_IT+0x70>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dde6:	2200      	movs	r2, #0
 800dde8:	4611      	mov	r1, r2
 800ddea:	6800      	ldr	r0, [r0, #0]
 800ddec:	f7ff f84c 	bl	800ce88 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	2104      	movs	r1, #4
 800ddf4:	6820      	ldr	r0, [r4, #0]
 800ddf6:	f7ff f847 	bl	800ce88 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ddfa:	6822      	ldr	r2, [r4, #0]
 800ddfc:	68d3      	ldr	r3, [r2, #12]
 800ddfe:	f023 0302 	bic.w	r3, r3, #2
 800de02:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800de04:	6822      	ldr	r2, [r4, #0]
 800de06:	68d3      	ldr	r3, [r2, #12]
 800de08:	f023 0304 	bic.w	r3, r3, #4
 800de0c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800de0e:	6823      	ldr	r3, [r4, #0]
 800de10:	6a19      	ldr	r1, [r3, #32]
 800de12:	f241 1211 	movw	r2, #4369	; 0x1111
 800de16:	4211      	tst	r1, r2
 800de18:	d108      	bne.n	800de2c <HAL_TIM_Encoder_Stop_IT+0x50>
 800de1a:	6a19      	ldr	r1, [r3, #32]
 800de1c:	f240 4244 	movw	r2, #1092	; 0x444
 800de20:	4211      	tst	r1, r2
 800de22:	d103      	bne.n	800de2c <HAL_TIM_Encoder_Stop_IT+0x50>
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	f022 0201 	bic.w	r2, r2, #1
 800de2a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800de2c:	2301      	movs	r3, #1
 800de2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800de32:	2000      	movs	r0, #0
 800de34:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800de36:	2200      	movs	r2, #0
 800de38:	4611      	mov	r1, r2
 800de3a:	6800      	ldr	r0, [r0, #0]
 800de3c:	f7ff f824 	bl	800ce88 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800de40:	6822      	ldr	r2, [r4, #0]
 800de42:	68d3      	ldr	r3, [r2, #12]
 800de44:	f023 0302 	bic.w	r3, r3, #2
 800de48:	60d3      	str	r3, [r2, #12]
 800de4a:	e7e0      	b.n	800de0e <HAL_TIM_Encoder_Stop_IT+0x32>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800de4c:	2200      	movs	r2, #0
 800de4e:	2104      	movs	r1, #4
 800de50:	6800      	ldr	r0, [r0, #0]
 800de52:	f7ff f819 	bl	800ce88 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800de56:	6822      	ldr	r2, [r4, #0]
 800de58:	68d3      	ldr	r3, [r2, #12]
 800de5a:	f023 0304 	bic.w	r3, r3, #4
 800de5e:	60d3      	str	r3, [r2, #12]
 800de60:	e7d5      	b.n	800de0e <HAL_TIM_Encoder_Stop_IT+0x32>
	...

0800de64 <HAL_TIM_Encoder_Start_DMA>:
{
 800de64:	b570      	push	{r4, r5, r6, lr}
 800de66:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800de6a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800de6e:	b2e4      	uxtb	r4, r4
 800de70:	2c02      	cmp	r4, #2
 800de72:	f000 809f 	beq.w	800dfb4 <HAL_TIM_Encoder_Start_DMA+0x150>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800de76:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800de7a:	b2e4      	uxtb	r4, r4
 800de7c:	2c01      	cmp	r4, #1
 800de7e:	d008      	beq.n	800de92 <HAL_TIM_Encoder_Start_DMA+0x2e>
 800de80:	461e      	mov	r6, r3
 800de82:	4604      	mov	r4, r0
  switch (Channel)
 800de84:	2904      	cmp	r1, #4
 800de86:	d031      	beq.n	800deec <HAL_TIM_Encoder_Start_DMA+0x88>
 800de88:	293c      	cmp	r1, #60	; 0x3c
 800de8a:	d053      	beq.n	800df34 <HAL_TIM_Encoder_Start_DMA+0xd0>
 800de8c:	b159      	cbz	r1, 800dea6 <HAL_TIM_Encoder_Start_DMA+0x42>
  return HAL_OK;
 800de8e:	2500      	movs	r5, #0
 800de90:	e091      	b.n	800dfb6 <HAL_TIM_Encoder_Start_DMA+0x152>
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 800de92:	b122      	cbz	r2, 800de9e <HAL_TIM_Encoder_Start_DMA+0x3a>
 800de94:	b11b      	cbz	r3, 800de9e <HAL_TIM_Encoder_Start_DMA+0x3a>
      htim->State = HAL_TIM_STATE_BUSY;
 800de96:	2402      	movs	r4, #2
 800de98:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800de9c:	e7f0      	b.n	800de80 <HAL_TIM_Encoder_Start_DMA+0x1c>
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 800de9e:	2d00      	cmp	r5, #0
 800dea0:	d0f9      	beq.n	800de96 <HAL_TIM_Encoder_Start_DMA+0x32>
      return HAL_ERROR;
 800dea2:	2501      	movs	r5, #1
 800dea4:	e087      	b.n	800dfb6 <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800dea6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dea8:	4944      	ldr	r1, [pc, #272]	; (800dfbc <HAL_TIM_Encoder_Start_DMA+0x158>)
 800deaa:	62d9      	str	r1, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800deac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800deae:	4944      	ldr	r1, [pc, #272]	; (800dfc0 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 800deb0:	6319      	str	r1, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800deb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800deb4:	4943      	ldr	r1, [pc, #268]	; (800dfc4 <HAL_TIM_Encoder_Start_DMA+0x160>)
 800deb6:	6359      	str	r1, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 800deb8:	6801      	ldr	r1, [r0, #0]
 800deba:	462b      	mov	r3, r5
 800debc:	3134      	adds	r1, #52	; 0x34
 800debe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800dec0:	f7f4 fc5b 	bl	800277a <HAL_DMA_Start_IT>
 800dec4:	4605      	mov	r5, r0
 800dec6:	b108      	cbz	r0, 800decc <HAL_TIM_Encoder_Start_DMA+0x68>
        return HAL_ERROR;
 800dec8:	2501      	movs	r5, #1
 800deca:	e074      	b.n	800dfb6 <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800decc:	6822      	ldr	r2, [r4, #0]
 800dece:	68d3      	ldr	r3, [r2, #12]
 800ded0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ded4:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 800ded6:	6822      	ldr	r2, [r4, #0]
 800ded8:	6813      	ldr	r3, [r2, #0]
 800deda:	f043 0301 	orr.w	r3, r3, #1
 800dede:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dee0:	2201      	movs	r2, #1
 800dee2:	2100      	movs	r1, #0
 800dee4:	6820      	ldr	r0, [r4, #0]
 800dee6:	f7fe ffcf 	bl	800ce88 <TIM_CCxChannelCmd>
      break;
 800deea:	e064      	b.n	800dfb6 <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800deec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800deee:	4a33      	ldr	r2, [pc, #204]	; (800dfbc <HAL_TIM_Encoder_Start_DMA+0x158>)
 800def0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800def2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800def4:	4a32      	ldr	r2, [pc, #200]	; (800dfc0 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 800def6:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800def8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800defa:	4a32      	ldr	r2, [pc, #200]	; (800dfc4 <HAL_TIM_Encoder_Start_DMA+0x160>)
 800defc:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 800defe:	6801      	ldr	r1, [r0, #0]
 800df00:	462b      	mov	r3, r5
 800df02:	4632      	mov	r2, r6
 800df04:	3138      	adds	r1, #56	; 0x38
 800df06:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800df08:	f7f4 fc37 	bl	800277a <HAL_DMA_Start_IT>
 800df0c:	4605      	mov	r5, r0
 800df0e:	b108      	cbz	r0, 800df14 <HAL_TIM_Encoder_Start_DMA+0xb0>
        return HAL_ERROR;
 800df10:	2501      	movs	r5, #1
 800df12:	e050      	b.n	800dfb6 <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800df14:	6822      	ldr	r2, [r4, #0]
 800df16:	68d3      	ldr	r3, [r2, #12]
 800df18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800df1c:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 800df1e:	6822      	ldr	r2, [r4, #0]
 800df20:	6813      	ldr	r3, [r2, #0]
 800df22:	f043 0301 	orr.w	r3, r3, #1
 800df26:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800df28:	2201      	movs	r2, #1
 800df2a:	2104      	movs	r1, #4
 800df2c:	6820      	ldr	r0, [r4, #0]
 800df2e:	f7fe ffab 	bl	800ce88 <TIM_CCxChannelCmd>
      break;
 800df32:	e040      	b.n	800dfb6 <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800df34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df36:	4921      	ldr	r1, [pc, #132]	; (800dfbc <HAL_TIM_Encoder_Start_DMA+0x158>)
 800df38:	62d9      	str	r1, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800df3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df3c:	4920      	ldr	r1, [pc, #128]	; (800dfc0 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 800df3e:	6319      	str	r1, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800df40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df42:	4920      	ldr	r1, [pc, #128]	; (800dfc4 <HAL_TIM_Encoder_Start_DMA+0x160>)
 800df44:	6359      	str	r1, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 800df46:	6801      	ldr	r1, [r0, #0]
 800df48:	462b      	mov	r3, r5
 800df4a:	3134      	adds	r1, #52	; 0x34
 800df4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800df4e:	f7f4 fc14 	bl	800277a <HAL_DMA_Start_IT>
 800df52:	b108      	cbz	r0, 800df58 <HAL_TIM_Encoder_Start_DMA+0xf4>
        return HAL_ERROR;
 800df54:	2501      	movs	r5, #1
 800df56:	e02e      	b.n	800dfb6 <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800df58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df5a:	4a18      	ldr	r2, [pc, #96]	; (800dfbc <HAL_TIM_Encoder_Start_DMA+0x158>)
 800df5c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800df5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df60:	4a17      	ldr	r2, [pc, #92]	; (800dfc0 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 800df62:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800df64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df66:	4a17      	ldr	r2, [pc, #92]	; (800dfc4 <HAL_TIM_Encoder_Start_DMA+0x160>)
 800df68:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 800df6a:	6821      	ldr	r1, [r4, #0]
 800df6c:	462b      	mov	r3, r5
 800df6e:	4632      	mov	r2, r6
 800df70:	3138      	adds	r1, #56	; 0x38
 800df72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800df74:	f7f4 fc01 	bl	800277a <HAL_DMA_Start_IT>
 800df78:	4605      	mov	r5, r0
 800df7a:	b108      	cbz	r0, 800df80 <HAL_TIM_Encoder_Start_DMA+0x11c>
        return HAL_ERROR;
 800df7c:	2501      	movs	r5, #1
 800df7e:	e01a      	b.n	800dfb6 <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE(htim);
 800df80:	6822      	ldr	r2, [r4, #0]
 800df82:	6813      	ldr	r3, [r2, #0]
 800df84:	f043 0301 	orr.w	r3, r3, #1
 800df88:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800df8a:	2201      	movs	r2, #1
 800df8c:	2100      	movs	r1, #0
 800df8e:	6820      	ldr	r0, [r4, #0]
 800df90:	f7fe ff7a 	bl	800ce88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800df94:	2201      	movs	r2, #1
 800df96:	2104      	movs	r1, #4
 800df98:	6820      	ldr	r0, [r4, #0]
 800df9a:	f7fe ff75 	bl	800ce88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800df9e:	6822      	ldr	r2, [r4, #0]
 800dfa0:	68d3      	ldr	r3, [r2, #12]
 800dfa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dfa6:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800dfa8:	6822      	ldr	r2, [r4, #0]
 800dfaa:	68d3      	ldr	r3, [r2, #12]
 800dfac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dfb0:	60d3      	str	r3, [r2, #12]
      break;
 800dfb2:	e000      	b.n	800dfb6 <HAL_TIM_Encoder_Start_DMA+0x152>
    return HAL_BUSY;
 800dfb4:	2502      	movs	r5, #2
}
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	bd70      	pop	{r4, r5, r6, pc}
 800dfba:	bf00      	nop
 800dfbc:	0800bf69 	.word	0x0800bf69
 800dfc0:	0800bfaf 	.word	0x0800bfaf
 800dfc4:	0800c23f 	.word	0x0800c23f

0800dfc8 <HAL_TIM_Encoder_Stop_DMA>:
{
 800dfc8:	b510      	push	{r4, lr}
 800dfca:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 800dfcc:	2900      	cmp	r1, #0
 800dfce:	d02f      	beq.n	800e030 <HAL_TIM_Encoder_Stop_DMA+0x68>
  else if (Channel == TIM_CHANNEL_2)
 800dfd0:	2904      	cmp	r1, #4
 800dfd2:	d03b      	beq.n	800e04c <HAL_TIM_Encoder_Stop_DMA+0x84>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	6800      	ldr	r0, [r0, #0]
 800dfda:	f7fe ff55 	bl	800ce88 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2104      	movs	r1, #4
 800dfe2:	6820      	ldr	r0, [r4, #0]
 800dfe4:	f7fe ff50 	bl	800ce88 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800dfe8:	6822      	ldr	r2, [r4, #0]
 800dfea:	68d3      	ldr	r3, [r2, #12]
 800dfec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dff0:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800dff2:	6822      	ldr	r2, [r4, #0]
 800dff4:	68d3      	ldr	r3, [r2, #12]
 800dff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dffa:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800dffc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dffe:	f7f4 fc2e 	bl	800285e <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e002:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e004:	f7f4 fc2b 	bl	800285e <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800e008:	6823      	ldr	r3, [r4, #0]
 800e00a:	6a19      	ldr	r1, [r3, #32]
 800e00c:	f241 1211 	movw	r2, #4369	; 0x1111
 800e010:	4211      	tst	r1, r2
 800e012:	d108      	bne.n	800e026 <HAL_TIM_Encoder_Stop_DMA+0x5e>
 800e014:	6a19      	ldr	r1, [r3, #32]
 800e016:	f240 4244 	movw	r2, #1092	; 0x444
 800e01a:	4211      	tst	r1, r2
 800e01c:	d103      	bne.n	800e026 <HAL_TIM_Encoder_Stop_DMA+0x5e>
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	f022 0201 	bic.w	r2, r2, #1
 800e024:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e026:	2301      	movs	r3, #1
 800e028:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e02c:	2000      	movs	r0, #0
 800e02e:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e030:	2200      	movs	r2, #0
 800e032:	4611      	mov	r1, r2
 800e034:	6800      	ldr	r0, [r0, #0]
 800e036:	f7fe ff27 	bl	800ce88 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e03a:	6822      	ldr	r2, [r4, #0]
 800e03c:	68d3      	ldr	r3, [r2, #12]
 800e03e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e042:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e044:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e046:	f7f4 fc0a 	bl	800285e <HAL_DMA_Abort_IT>
 800e04a:	e7dd      	b.n	800e008 <HAL_TIM_Encoder_Stop_DMA+0x40>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e04c:	2200      	movs	r2, #0
 800e04e:	2104      	movs	r1, #4
 800e050:	6800      	ldr	r0, [r0, #0]
 800e052:	f7fe ff19 	bl	800ce88 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e056:	6822      	ldr	r2, [r4, #0]
 800e058:	68d3      	ldr	r3, [r2, #12]
 800e05a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e05e:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e060:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e062:	f7f4 fbfc 	bl	800285e <HAL_DMA_Abort_IT>
 800e066:	e7cf      	b.n	800e008 <HAL_TIM_Encoder_Stop_DMA+0x40>

0800e068 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800e068:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e06a:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800e06e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e070:	2404      	movs	r4, #4
 800e072:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 800e074:	ea23 0304 	bic.w	r3, r3, r4
 800e078:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e07a:	6a03      	ldr	r3, [r0, #32]
 800e07c:	408a      	lsls	r2, r1
 800e07e:	431a      	orrs	r2, r3
 800e080:	6202      	str	r2, [r0, #32]
}
 800e082:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <HAL_TIMEx_HallSensor_MspInit>:
}
 800e088:	4770      	bx	lr

0800e08a <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d05c      	beq.n	800e148 <HAL_TIMEx_HallSensor_Init+0xbe>
{
 800e08e:	b570      	push	{r4, r5, r6, lr}
 800e090:	b088      	sub	sp, #32
 800e092:	4604      	mov	r4, r0
 800e094:	460e      	mov	r6, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800e096:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d04f      	beq.n	800e13e <HAL_TIMEx_HallSensor_Init+0xb4>
  htim->State = HAL_TIM_STATE_BUSY;
 800e09e:	2302      	movs	r3, #2
 800e0a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0a4:	1d21      	adds	r1, r4, #4
 800e0a6:	6820      	ldr	r0, [r4, #0]
 800e0a8:	f7fe f8e4 	bl	800c274 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800e0ac:	68b3      	ldr	r3, [r6, #8]
 800e0ae:	2203      	movs	r2, #3
 800e0b0:	6831      	ldr	r1, [r6, #0]
 800e0b2:	6820      	ldr	r0, [r4, #0]
 800e0b4:	f7fe fb6e 	bl	800c794 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e0b8:	6822      	ldr	r2, [r4, #0]
 800e0ba:	6993      	ldr	r3, [r2, #24]
 800e0bc:	f023 030c 	bic.w	r3, r3, #12
 800e0c0:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800e0c2:	6822      	ldr	r2, [r4, #0]
 800e0c4:	6993      	ldr	r3, [r2, #24]
 800e0c6:	6871      	ldr	r1, [r6, #4]
 800e0c8:	430b      	orrs	r3, r1
 800e0ca:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800e0cc:	6822      	ldr	r2, [r4, #0]
 800e0ce:	6853      	ldr	r3, [r2, #4]
 800e0d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0d4:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800e0d6:	6822      	ldr	r2, [r4, #0]
 800e0d8:	6893      	ldr	r3, [r2, #8]
 800e0da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0de:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800e0e0:	6822      	ldr	r2, [r4, #0]
 800e0e2:	6893      	ldr	r3, [r2, #8]
 800e0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0e8:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800e0ea:	6822      	ldr	r2, [r4, #0]
 800e0ec:	6893      	ldr	r3, [r2, #8]
 800e0ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0f2:	f023 0307 	bic.w	r3, r3, #7
 800e0f6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800e0f8:	6822      	ldr	r2, [r4, #0]
 800e0fa:	6893      	ldr	r3, [r2, #8]
 800e0fc:	f043 0304 	orr.w	r3, r3, #4
 800e100:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800e102:	2500      	movs	r5, #0
 800e104:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e106:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800e108:	2370      	movs	r3, #112	; 0x70
 800e10a:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e10c:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e10e:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e110:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800e112:	68f3      	ldr	r3, [r6, #12]
 800e114:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800e116:	a901      	add	r1, sp, #4
 800e118:	6820      	ldr	r0, [r4, #0]
 800e11a:	f7fe fa1d 	bl	800c558 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800e11e:	6822      	ldr	r2, [r4, #0]
 800e120:	6853      	ldr	r3, [r2, #4]
 800e122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e126:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800e128:	6822      	ldr	r2, [r4, #0]
 800e12a:	6853      	ldr	r3, [r2, #4]
 800e12c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800e130:	6053      	str	r3, [r2, #4]
  htim->State = HAL_TIM_STATE_READY;
 800e132:	2301      	movs	r3, #1
 800e134:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800e138:	4628      	mov	r0, r5
}
 800e13a:	b008      	add	sp, #32
 800e13c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800e13e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800e142:	f7ff ffa1 	bl	800e088 <HAL_TIMEx_HallSensor_MspInit>
 800e146:	e7aa      	b.n	800e09e <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 800e148:	2001      	movs	r0, #1
}
 800e14a:	4770      	bx	lr

0800e14c <HAL_TIMEx_HallSensor_MspDeInit>:
}
 800e14c:	4770      	bx	lr

0800e14e <HAL_TIMEx_HallSensor_DeInit>:
{
 800e14e:	b510      	push	{r4, lr}
 800e150:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800e152:	2302      	movs	r3, #2
 800e154:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800e158:	6803      	ldr	r3, [r0, #0]
 800e15a:	6a19      	ldr	r1, [r3, #32]
 800e15c:	f241 1211 	movw	r2, #4369	; 0x1111
 800e160:	4211      	tst	r1, r2
 800e162:	d108      	bne.n	800e176 <HAL_TIMEx_HallSensor_DeInit+0x28>
 800e164:	6a19      	ldr	r1, [r3, #32]
 800e166:	f240 4244 	movw	r2, #1092	; 0x444
 800e16a:	4211      	tst	r1, r2
 800e16c:	d103      	bne.n	800e176 <HAL_TIMEx_HallSensor_DeInit+0x28>
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	f022 0201 	bic.w	r2, r2, #1
 800e174:	601a      	str	r2, [r3, #0]
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800e176:	4620      	mov	r0, r4
 800e178:	f7ff ffe8 	bl	800e14c <HAL_TIMEx_HallSensor_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800e17c:	2000      	movs	r0, #0
 800e17e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e182:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800e186:	bd10      	pop	{r4, pc}

0800e188 <HAL_TIMEx_HallSensor_Start>:
{
 800e188:	b510      	push	{r4, lr}
 800e18a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e18c:	2201      	movs	r2, #1
 800e18e:	2100      	movs	r1, #0
 800e190:	6800      	ldr	r0, [r0, #0]
 800e192:	f7fe fe79 	bl	800ce88 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e196:	6822      	ldr	r2, [r4, #0]
 800e198:	6891      	ldr	r1, [r2, #8]
 800e19a:	4b06      	ldr	r3, [pc, #24]	; (800e1b4 <HAL_TIMEx_HallSensor_Start+0x2c>)
 800e19c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e19e:	2b06      	cmp	r3, #6
 800e1a0:	d006      	beq.n	800e1b0 <HAL_TIMEx_HallSensor_Start+0x28>
 800e1a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1a6:	d003      	beq.n	800e1b0 <HAL_TIMEx_HallSensor_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 800e1a8:	6813      	ldr	r3, [r2, #0]
 800e1aa:	f043 0301 	orr.w	r3, r3, #1
 800e1ae:	6013      	str	r3, [r2, #0]
}
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	bd10      	pop	{r4, pc}
 800e1b4:	00010007 	.word	0x00010007

0800e1b8 <HAL_TIMEx_HallSensor_Stop>:
{
 800e1b8:	b510      	push	{r4, lr}
 800e1ba:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e1bc:	2200      	movs	r2, #0
 800e1be:	4611      	mov	r1, r2
 800e1c0:	6800      	ldr	r0, [r0, #0]
 800e1c2:	f7fe fe61 	bl	800ce88 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800e1c6:	6823      	ldr	r3, [r4, #0]
 800e1c8:	6a19      	ldr	r1, [r3, #32]
 800e1ca:	f241 1211 	movw	r2, #4369	; 0x1111
 800e1ce:	4211      	tst	r1, r2
 800e1d0:	d108      	bne.n	800e1e4 <HAL_TIMEx_HallSensor_Stop+0x2c>
 800e1d2:	6a19      	ldr	r1, [r3, #32]
 800e1d4:	f240 4244 	movw	r2, #1092	; 0x444
 800e1d8:	4211      	tst	r1, r2
 800e1da:	d103      	bne.n	800e1e4 <HAL_TIMEx_HallSensor_Stop+0x2c>
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	f022 0201 	bic.w	r2, r2, #1
 800e1e2:	601a      	str	r2, [r3, #0]
}
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	bd10      	pop	{r4, pc}

0800e1e8 <HAL_TIMEx_HallSensor_Start_IT>:
{
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e1ec:	6802      	ldr	r2, [r0, #0]
 800e1ee:	68d3      	ldr	r3, [r2, #12]
 800e1f0:	f043 0302 	orr.w	r3, r3, #2
 800e1f4:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	6800      	ldr	r0, [r0, #0]
 800e1fc:	f7fe fe44 	bl	800ce88 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e200:	6822      	ldr	r2, [r4, #0]
 800e202:	6891      	ldr	r1, [r2, #8]
 800e204:	4b06      	ldr	r3, [pc, #24]	; (800e220 <HAL_TIMEx_HallSensor_Start_IT+0x38>)
 800e206:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e208:	2b06      	cmp	r3, #6
 800e20a:	d006      	beq.n	800e21a <HAL_TIMEx_HallSensor_Start_IT+0x32>
 800e20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e210:	d003      	beq.n	800e21a <HAL_TIMEx_HallSensor_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 800e212:	6813      	ldr	r3, [r2, #0]
 800e214:	f043 0301 	orr.w	r3, r3, #1
 800e218:	6013      	str	r3, [r2, #0]
}
 800e21a:	2000      	movs	r0, #0
 800e21c:	bd10      	pop	{r4, pc}
 800e21e:	bf00      	nop
 800e220:	00010007 	.word	0x00010007

0800e224 <HAL_TIMEx_HallSensor_Stop_IT>:
{
 800e224:	b510      	push	{r4, lr}
 800e226:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e228:	2200      	movs	r2, #0
 800e22a:	4611      	mov	r1, r2
 800e22c:	6800      	ldr	r0, [r0, #0]
 800e22e:	f7fe fe2b 	bl	800ce88 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e232:	6822      	ldr	r2, [r4, #0]
 800e234:	68d3      	ldr	r3, [r2, #12]
 800e236:	f023 0302 	bic.w	r3, r3, #2
 800e23a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800e23c:	6823      	ldr	r3, [r4, #0]
 800e23e:	6a19      	ldr	r1, [r3, #32]
 800e240:	f241 1211 	movw	r2, #4369	; 0x1111
 800e244:	4211      	tst	r1, r2
 800e246:	d108      	bne.n	800e25a <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 800e248:	6a19      	ldr	r1, [r3, #32]
 800e24a:	f240 4244 	movw	r2, #1092	; 0x444
 800e24e:	4211      	tst	r1, r2
 800e250:	d103      	bne.n	800e25a <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	f022 0201 	bic.w	r2, r2, #1
 800e258:	601a      	str	r2, [r3, #0]
}
 800e25a:	2000      	movs	r0, #0
 800e25c:	bd10      	pop	{r4, pc}
	...

0800e260 <HAL_TIMEx_HallSensor_Start_DMA>:
{
 800e260:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800e262:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800e266:	b2ed      	uxtb	r5, r5
 800e268:	2d02      	cmp	r5, #2
 800e26a:	d03a      	beq.n	800e2e2 <HAL_TIMEx_HallSensor_Start_DMA+0x82>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800e26c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e270:	b2e4      	uxtb	r4, r4
 800e272:	2c01      	cmp	r4, #1
 800e274:	d104      	bne.n	800e280 <HAL_TIMEx_HallSensor_Start_DMA+0x20>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e276:	2900      	cmp	r1, #0
 800e278:	d02f      	beq.n	800e2da <HAL_TIMEx_HallSensor_Start_DMA+0x7a>
      htim->State = HAL_TIM_STATE_BUSY;
 800e27a:	2302      	movs	r3, #2
 800e27c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800e280:	4616      	mov	r6, r2
 800e282:	460d      	mov	r5, r1
 800e284:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e286:	2201      	movs	r2, #1
 800e288:	2100      	movs	r1, #0
 800e28a:	6800      	ldr	r0, [r0, #0]
 800e28c:	f7fe fdfc 	bl	800ce88 <TIM_CCxChannelCmd>
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800e290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e292:	4a16      	ldr	r2, [pc, #88]	; (800e2ec <HAL_TIMEx_HallSensor_Start_DMA+0x8c>)
 800e294:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e298:	4a15      	ldr	r2, [pc, #84]	; (800e2f0 <HAL_TIMEx_HallSensor_Start_DMA+0x90>)
 800e29a:	631a      	str	r2, [r3, #48]	; 0x30
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e29c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e29e:	4a15      	ldr	r2, [pc, #84]	; (800e2f4 <HAL_TIMEx_HallSensor_Start_DMA+0x94>)
 800e2a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800e2a2:	6821      	ldr	r1, [r4, #0]
 800e2a4:	4633      	mov	r3, r6
 800e2a6:	462a      	mov	r2, r5
 800e2a8:	3134      	adds	r1, #52	; 0x34
 800e2aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e2ac:	f7f4 fa65 	bl	800277a <HAL_DMA_Start_IT>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	b9c0      	cbnz	r0, 800e2e6 <HAL_TIMEx_HallSensor_Start_DMA+0x86>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e2b4:	6821      	ldr	r1, [r4, #0]
 800e2b6:	68ca      	ldr	r2, [r1, #12]
 800e2b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2bc:	60ca      	str	r2, [r1, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2be:	6821      	ldr	r1, [r4, #0]
 800e2c0:	6888      	ldr	r0, [r1, #8]
 800e2c2:	4a0d      	ldr	r2, [pc, #52]	; (800e2f8 <HAL_TIMEx_HallSensor_Start_DMA+0x98>)
 800e2c4:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2c6:	2a06      	cmp	r2, #6
 800e2c8:	d00e      	beq.n	800e2e8 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
 800e2ca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e2ce:	d00b      	beq.n	800e2e8 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    __HAL_TIM_ENABLE(htim);
 800e2d0:	680a      	ldr	r2, [r1, #0]
 800e2d2:	f042 0201 	orr.w	r2, r2, #1
 800e2d6:	600a      	str	r2, [r1, #0]
 800e2d8:	e006      	b.n	800e2e8 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e2da:	2a00      	cmp	r2, #0
 800e2dc:	d0cd      	beq.n	800e27a <HAL_TIMEx_HallSensor_Start_DMA+0x1a>
      return HAL_ERROR;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e002      	b.n	800e2e8 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    return HAL_BUSY;
 800e2e2:	2302      	movs	r3, #2
 800e2e4:	e000      	b.n	800e2e8 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	bd70      	pop	{r4, r5, r6, pc}
 800e2ec:	0800bf69 	.word	0x0800bf69
 800e2f0:	0800bfaf 	.word	0x0800bfaf
 800e2f4:	0800c23f 	.word	0x0800c23f
 800e2f8:	00010007 	.word	0x00010007

0800e2fc <HAL_TIMEx_HallSensor_Stop_DMA>:
{
 800e2fc:	b510      	push	{r4, lr}
 800e2fe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e300:	2200      	movs	r2, #0
 800e302:	4611      	mov	r1, r2
 800e304:	6800      	ldr	r0, [r0, #0]
 800e306:	f7fe fdbf 	bl	800ce88 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e30a:	6822      	ldr	r2, [r4, #0]
 800e30c:	68d3      	ldr	r3, [r2, #12]
 800e30e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e312:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e314:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e316:	f7f4 faa2 	bl	800285e <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	6a19      	ldr	r1, [r3, #32]
 800e31e:	f241 1211 	movw	r2, #4369	; 0x1111
 800e322:	4211      	tst	r1, r2
 800e324:	d108      	bne.n	800e338 <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 800e326:	6a19      	ldr	r1, [r3, #32]
 800e328:	f240 4244 	movw	r2, #1092	; 0x444
 800e32c:	4211      	tst	r1, r2
 800e32e:	d103      	bne.n	800e338 <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	f022 0201 	bic.w	r2, r2, #1
 800e336:	601a      	str	r2, [r3, #0]
}
 800e338:	2000      	movs	r0, #0
 800e33a:	bd10      	pop	{r4, pc}

0800e33c <HAL_TIMEx_OCN_Start>:
{
 800e33c:	b510      	push	{r4, lr}
 800e33e:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e340:	2204      	movs	r2, #4
 800e342:	6800      	ldr	r0, [r0, #0]
 800e344:	f7ff fe90 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e348:	6822      	ldr	r2, [r4, #0]
 800e34a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e34c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e350:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e352:	6822      	ldr	r2, [r4, #0]
 800e354:	6891      	ldr	r1, [r2, #8]
 800e356:	4b06      	ldr	r3, [pc, #24]	; (800e370 <HAL_TIMEx_OCN_Start+0x34>)
 800e358:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e35a:	2b06      	cmp	r3, #6
 800e35c:	d006      	beq.n	800e36c <HAL_TIMEx_OCN_Start+0x30>
 800e35e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e362:	d003      	beq.n	800e36c <HAL_TIMEx_OCN_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 800e364:	6813      	ldr	r3, [r2, #0]
 800e366:	f043 0301 	orr.w	r3, r3, #1
 800e36a:	6013      	str	r3, [r2, #0]
}
 800e36c:	2000      	movs	r0, #0
 800e36e:	bd10      	pop	{r4, pc}
 800e370:	00010007 	.word	0x00010007

0800e374 <HAL_TIMEx_OCN_Stop>:
{
 800e374:	b510      	push	{r4, lr}
 800e376:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e378:	2200      	movs	r2, #0
 800e37a:	6800      	ldr	r0, [r0, #0]
 800e37c:	f7ff fe74 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e380:	6823      	ldr	r3, [r4, #0]
 800e382:	6a19      	ldr	r1, [r3, #32]
 800e384:	f241 1211 	movw	r2, #4369	; 0x1111
 800e388:	4211      	tst	r1, r2
 800e38a:	d108      	bne.n	800e39e <HAL_TIMEx_OCN_Stop+0x2a>
 800e38c:	6a19      	ldr	r1, [r3, #32]
 800e38e:	f240 4244 	movw	r2, #1092	; 0x444
 800e392:	4211      	tst	r1, r2
 800e394:	d103      	bne.n	800e39e <HAL_TIMEx_OCN_Stop+0x2a>
 800e396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e39c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	6a19      	ldr	r1, [r3, #32]
 800e3a2:	f241 1211 	movw	r2, #4369	; 0x1111
 800e3a6:	4211      	tst	r1, r2
 800e3a8:	d108      	bne.n	800e3bc <HAL_TIMEx_OCN_Stop+0x48>
 800e3aa:	6a19      	ldr	r1, [r3, #32]
 800e3ac:	f240 4244 	movw	r2, #1092	; 0x444
 800e3b0:	4211      	tst	r1, r2
 800e3b2:	d103      	bne.n	800e3bc <HAL_TIMEx_OCN_Stop+0x48>
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	f022 0201 	bic.w	r2, r2, #1
 800e3ba:	601a      	str	r2, [r3, #0]
}
 800e3bc:	2000      	movs	r0, #0
 800e3be:	bd10      	pop	{r4, pc}

0800e3c0 <HAL_TIMEx_OCN_Start_IT>:
{
 800e3c0:	b510      	push	{r4, lr}
 800e3c2:	4604      	mov	r4, r0
  switch (Channel)
 800e3c4:	2904      	cmp	r1, #4
 800e3c6:	d025      	beq.n	800e414 <HAL_TIMEx_OCN_Start_IT+0x54>
 800e3c8:	2908      	cmp	r1, #8
 800e3ca:	d029      	beq.n	800e420 <HAL_TIMEx_OCN_Start_IT+0x60>
 800e3cc:	b1e1      	cbz	r1, 800e408 <HAL_TIMEx_OCN_Start_IT+0x48>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e3ce:	6822      	ldr	r2, [r4, #0]
 800e3d0:	68d3      	ldr	r3, [r2, #12]
 800e3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3d6:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e3d8:	2204      	movs	r2, #4
 800e3da:	6820      	ldr	r0, [r4, #0]
 800e3dc:	f7ff fe44 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e3e0:	6822      	ldr	r2, [r4, #0]
 800e3e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e3e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3e8:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3ea:	6822      	ldr	r2, [r4, #0]
 800e3ec:	6891      	ldr	r1, [r2, #8]
 800e3ee:	4b0f      	ldr	r3, [pc, #60]	; (800e42c <HAL_TIMEx_OCN_Start_IT+0x6c>)
 800e3f0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3f2:	2b06      	cmp	r3, #6
 800e3f4:	d006      	beq.n	800e404 <HAL_TIMEx_OCN_Start_IT+0x44>
 800e3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3fa:	d003      	beq.n	800e404 <HAL_TIMEx_OCN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 800e3fc:	6813      	ldr	r3, [r2, #0]
 800e3fe:	f043 0301 	orr.w	r3, r3, #1
 800e402:	6013      	str	r3, [r2, #0]
}
 800e404:	2000      	movs	r0, #0
 800e406:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e408:	6802      	ldr	r2, [r0, #0]
 800e40a:	68d3      	ldr	r3, [r2, #12]
 800e40c:	f043 0302 	orr.w	r3, r3, #2
 800e410:	60d3      	str	r3, [r2, #12]
      break;
 800e412:	e7dc      	b.n	800e3ce <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e414:	6802      	ldr	r2, [r0, #0]
 800e416:	68d3      	ldr	r3, [r2, #12]
 800e418:	f043 0304 	orr.w	r3, r3, #4
 800e41c:	60d3      	str	r3, [r2, #12]
      break;
 800e41e:	e7d6      	b.n	800e3ce <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e420:	6802      	ldr	r2, [r0, #0]
 800e422:	68d3      	ldr	r3, [r2, #12]
 800e424:	f043 0308 	orr.w	r3, r3, #8
 800e428:	60d3      	str	r3, [r2, #12]
      break;
 800e42a:	e7d0      	b.n	800e3ce <HAL_TIMEx_OCN_Start_IT+0xe>
 800e42c:	00010007 	.word	0x00010007

0800e430 <HAL_TIMEx_OCN_Stop_IT>:
{
 800e430:	b510      	push	{r4, lr}
 800e432:	4604      	mov	r4, r0
  switch (Channel)
 800e434:	2904      	cmp	r1, #4
 800e436:	d037      	beq.n	800e4a8 <HAL_TIMEx_OCN_Stop_IT+0x78>
 800e438:	2908      	cmp	r1, #8
 800e43a:	d03b      	beq.n	800e4b4 <HAL_TIMEx_OCN_Stop_IT+0x84>
 800e43c:	2900      	cmp	r1, #0
 800e43e:	d02d      	beq.n	800e49c <HAL_TIMEx_OCN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e440:	2200      	movs	r2, #0
 800e442:	6820      	ldr	r0, [r4, #0]
 800e444:	f7ff fe10 	bl	800e068 <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 800e448:	6823      	ldr	r3, [r4, #0]
 800e44a:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800e44c:	f240 4244 	movw	r2, #1092	; 0x444
 800e450:	4211      	tst	r1, r2
 800e452:	d103      	bne.n	800e45c <HAL_TIMEx_OCN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800e454:	68da      	ldr	r2, [r3, #12]
 800e456:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e45a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	6a19      	ldr	r1, [r3, #32]
 800e460:	f241 1211 	movw	r2, #4369	; 0x1111
 800e464:	4211      	tst	r1, r2
 800e466:	d108      	bne.n	800e47a <HAL_TIMEx_OCN_Stop_IT+0x4a>
 800e468:	6a19      	ldr	r1, [r3, #32]
 800e46a:	f240 4244 	movw	r2, #1092	; 0x444
 800e46e:	4211      	tst	r1, r2
 800e470:	d103      	bne.n	800e47a <HAL_TIMEx_OCN_Stop_IT+0x4a>
 800e472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e478:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e47a:	6823      	ldr	r3, [r4, #0]
 800e47c:	6a19      	ldr	r1, [r3, #32]
 800e47e:	f241 1211 	movw	r2, #4369	; 0x1111
 800e482:	4211      	tst	r1, r2
 800e484:	d108      	bne.n	800e498 <HAL_TIMEx_OCN_Stop_IT+0x68>
 800e486:	6a19      	ldr	r1, [r3, #32]
 800e488:	f240 4244 	movw	r2, #1092	; 0x444
 800e48c:	4211      	tst	r1, r2
 800e48e:	d103      	bne.n	800e498 <HAL_TIMEx_OCN_Stop_IT+0x68>
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	f022 0201 	bic.w	r2, r2, #1
 800e496:	601a      	str	r2, [r3, #0]
}
 800e498:	2000      	movs	r0, #0
 800e49a:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e49c:	6802      	ldr	r2, [r0, #0]
 800e49e:	68d3      	ldr	r3, [r2, #12]
 800e4a0:	f023 0302 	bic.w	r3, r3, #2
 800e4a4:	60d3      	str	r3, [r2, #12]
      break;
 800e4a6:	e7cb      	b.n	800e440 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e4a8:	6802      	ldr	r2, [r0, #0]
 800e4aa:	68d3      	ldr	r3, [r2, #12]
 800e4ac:	f023 0304 	bic.w	r3, r3, #4
 800e4b0:	60d3      	str	r3, [r2, #12]
      break;
 800e4b2:	e7c5      	b.n	800e440 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e4b4:	6802      	ldr	r2, [r0, #0]
 800e4b6:	68d3      	ldr	r3, [r2, #12]
 800e4b8:	f023 0308 	bic.w	r3, r3, #8
 800e4bc:	60d3      	str	r3, [r2, #12]
      break;
 800e4be:	e7bf      	b.n	800e440 <HAL_TIMEx_OCN_Stop_IT+0x10>

0800e4c0 <HAL_TIMEx_OCN_Start_DMA>:
{
 800e4c0:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800e4c2:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e4c6:	b2e4      	uxtb	r4, r4
 800e4c8:	2c02      	cmp	r4, #2
 800e4ca:	d071      	beq.n	800e5b0 <HAL_TIMEx_OCN_Start_DMA+0xf0>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800e4cc:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e4d0:	b2e4      	uxtb	r4, r4
 800e4d2:	2c01      	cmp	r4, #1
 800e4d4:	d020      	beq.n	800e518 <HAL_TIMEx_OCN_Start_DMA+0x58>
 800e4d6:	4616      	mov	r6, r2
 800e4d8:	460d      	mov	r5, r1
 800e4da:	4604      	mov	r4, r0
  switch (Channel)
 800e4dc:	2904      	cmp	r1, #4
 800e4de:	d03b      	beq.n	800e558 <HAL_TIMEx_OCN_Start_DMA+0x98>
 800e4e0:	2908      	cmp	r1, #8
 800e4e2:	d04f      	beq.n	800e584 <HAL_TIMEx_OCN_Start_DMA+0xc4>
 800e4e4:	b309      	cbz	r1, 800e52a <HAL_TIMEx_OCN_Start_DMA+0x6a>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e4e6:	2204      	movs	r2, #4
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	6820      	ldr	r0, [r4, #0]
 800e4ec:	f7ff fdbc 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e4f0:	6822      	ldr	r2, [r4, #0]
 800e4f2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e4f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4f8:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4fa:	6822      	ldr	r2, [r4, #0]
 800e4fc:	6891      	ldr	r1, [r2, #8]
 800e4fe:	4b32      	ldr	r3, [pc, #200]	; (800e5c8 <HAL_TIMEx_OCN_Start_DMA+0x108>)
 800e500:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e502:	2b06      	cmp	r3, #6
 800e504:	d05c      	beq.n	800e5c0 <HAL_TIMEx_OCN_Start_DMA+0x100>
 800e506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e50a:	d05b      	beq.n	800e5c4 <HAL_TIMEx_OCN_Start_DMA+0x104>
    __HAL_TIM_ENABLE(htim);
 800e50c:	6813      	ldr	r3, [r2, #0]
 800e50e:	f043 0301 	orr.w	r3, r3, #1
 800e512:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800e514:	2000      	movs	r0, #0
}
 800e516:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e518:	b11a      	cbz	r2, 800e522 <HAL_TIMEx_OCN_Start_DMA+0x62>
      htim->State = HAL_TIM_STATE_BUSY;
 800e51a:	2402      	movs	r4, #2
 800e51c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800e520:	e7d9      	b.n	800e4d6 <HAL_TIMEx_OCN_Start_DMA+0x16>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e522:	2b00      	cmp	r3, #0
 800e524:	d0f9      	beq.n	800e51a <HAL_TIMEx_OCN_Start_DMA+0x5a>
      return HAL_ERROR;
 800e526:	2001      	movs	r0, #1
 800e528:	e7f5      	b.n	800e516 <HAL_TIMEx_OCN_Start_DMA+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e52a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e52c:	4927      	ldr	r1, [pc, #156]	; (800e5cc <HAL_TIMEx_OCN_Start_DMA+0x10c>)
 800e52e:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e530:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e532:	4927      	ldr	r1, [pc, #156]	; (800e5d0 <HAL_TIMEx_OCN_Start_DMA+0x110>)
 800e534:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e536:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e538:	4926      	ldr	r1, [pc, #152]	; (800e5d4 <HAL_TIMEx_OCN_Start_DMA+0x114>)
 800e53a:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800e53c:	6802      	ldr	r2, [r0, #0]
 800e53e:	3234      	adds	r2, #52	; 0x34
 800e540:	4631      	mov	r1, r6
 800e542:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e544:	f7f4 f919 	bl	800277a <HAL_DMA_Start_IT>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d133      	bne.n	800e5b4 <HAL_TIMEx_OCN_Start_DMA+0xf4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e54c:	6822      	ldr	r2, [r4, #0]
 800e54e:	68d3      	ldr	r3, [r2, #12]
 800e550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e554:	60d3      	str	r3, [r2, #12]
      break;
 800e556:	e7c6      	b.n	800e4e6 <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e558:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e55a:	491c      	ldr	r1, [pc, #112]	; (800e5cc <HAL_TIMEx_OCN_Start_DMA+0x10c>)
 800e55c:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e55e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e560:	491b      	ldr	r1, [pc, #108]	; (800e5d0 <HAL_TIMEx_OCN_Start_DMA+0x110>)
 800e562:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e564:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e566:	491b      	ldr	r1, [pc, #108]	; (800e5d4 <HAL_TIMEx_OCN_Start_DMA+0x114>)
 800e568:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800e56a:	6802      	ldr	r2, [r0, #0]
 800e56c:	3238      	adds	r2, #56	; 0x38
 800e56e:	4631      	mov	r1, r6
 800e570:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e572:	f7f4 f902 	bl	800277a <HAL_DMA_Start_IT>
 800e576:	b9f8      	cbnz	r0, 800e5b8 <HAL_TIMEx_OCN_Start_DMA+0xf8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e578:	6822      	ldr	r2, [r4, #0]
 800e57a:	68d3      	ldr	r3, [r2, #12]
 800e57c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e580:	60d3      	str	r3, [r2, #12]
      break;
 800e582:	e7b0      	b.n	800e4e6 <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e584:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e586:	4911      	ldr	r1, [pc, #68]	; (800e5cc <HAL_TIMEx_OCN_Start_DMA+0x10c>)
 800e588:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e58a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e58c:	4910      	ldr	r1, [pc, #64]	; (800e5d0 <HAL_TIMEx_OCN_Start_DMA+0x110>)
 800e58e:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e590:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e592:	4910      	ldr	r1, [pc, #64]	; (800e5d4 <HAL_TIMEx_OCN_Start_DMA+0x114>)
 800e594:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800e596:	6802      	ldr	r2, [r0, #0]
 800e598:	323c      	adds	r2, #60	; 0x3c
 800e59a:	4631      	mov	r1, r6
 800e59c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e59e:	f7f4 f8ec 	bl	800277a <HAL_DMA_Start_IT>
 800e5a2:	b958      	cbnz	r0, 800e5bc <HAL_TIMEx_OCN_Start_DMA+0xfc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e5a4:	6822      	ldr	r2, [r4, #0]
 800e5a6:	68d3      	ldr	r3, [r2, #12]
 800e5a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e5ac:	60d3      	str	r3, [r2, #12]
      break;
 800e5ae:	e79a      	b.n	800e4e6 <HAL_TIMEx_OCN_Start_DMA+0x26>
    return HAL_BUSY;
 800e5b0:	2002      	movs	r0, #2
 800e5b2:	e7b0      	b.n	800e516 <HAL_TIMEx_OCN_Start_DMA+0x56>
        return HAL_ERROR;
 800e5b4:	2001      	movs	r0, #1
 800e5b6:	e7ae      	b.n	800e516 <HAL_TIMEx_OCN_Start_DMA+0x56>
        return HAL_ERROR;
 800e5b8:	2001      	movs	r0, #1
 800e5ba:	e7ac      	b.n	800e516 <HAL_TIMEx_OCN_Start_DMA+0x56>
        return HAL_ERROR;
 800e5bc:	2001      	movs	r0, #1
 800e5be:	e7aa      	b.n	800e516 <HAL_TIMEx_OCN_Start_DMA+0x56>
  return HAL_OK;
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	e7a8      	b.n	800e516 <HAL_TIMEx_OCN_Start_DMA+0x56>
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	e7a6      	b.n	800e516 <HAL_TIMEx_OCN_Start_DMA+0x56>
 800e5c8:	00010007 	.word	0x00010007
 800e5cc:	0800bff5 	.word	0x0800bff5
 800e5d0:	0800c03b 	.word	0x0800c03b
 800e5d4:	0800c23f 	.word	0x0800c23f

0800e5d8 <HAL_TIMEx_OCN_Stop_DMA>:
{
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	4604      	mov	r4, r0
 800e5dc:	460d      	mov	r5, r1
  switch (Channel)
 800e5de:	2904      	cmp	r1, #4
 800e5e0:	d033      	beq.n	800e64a <HAL_TIMEx_OCN_Stop_DMA+0x72>
 800e5e2:	2908      	cmp	r1, #8
 800e5e4:	d03a      	beq.n	800e65c <HAL_TIMEx_OCN_Stop_DMA+0x84>
 800e5e6:	b339      	cbz	r1, 800e638 <HAL_TIMEx_OCN_Stop_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	6820      	ldr	r0, [r4, #0]
 800e5ee:	f7ff fd3b 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	6a19      	ldr	r1, [r3, #32]
 800e5f6:	f241 1211 	movw	r2, #4369	; 0x1111
 800e5fa:	4211      	tst	r1, r2
 800e5fc:	d108      	bne.n	800e610 <HAL_TIMEx_OCN_Stop_DMA+0x38>
 800e5fe:	6a19      	ldr	r1, [r3, #32]
 800e600:	f240 4244 	movw	r2, #1092	; 0x444
 800e604:	4211      	tst	r1, r2
 800e606:	d103      	bne.n	800e610 <HAL_TIMEx_OCN_Stop_DMA+0x38>
 800e608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e60a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e60e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	6a19      	ldr	r1, [r3, #32]
 800e614:	f241 1211 	movw	r2, #4369	; 0x1111
 800e618:	4211      	tst	r1, r2
 800e61a:	d108      	bne.n	800e62e <HAL_TIMEx_OCN_Stop_DMA+0x56>
 800e61c:	6a19      	ldr	r1, [r3, #32]
 800e61e:	f240 4244 	movw	r2, #1092	; 0x444
 800e622:	4211      	tst	r1, r2
 800e624:	d103      	bne.n	800e62e <HAL_TIMEx_OCN_Stop_DMA+0x56>
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	f022 0201 	bic.w	r2, r2, #1
 800e62c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e62e:	2301      	movs	r3, #1
 800e630:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e634:	2000      	movs	r0, #0
 800e636:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e638:	6802      	ldr	r2, [r0, #0]
 800e63a:	68d3      	ldr	r3, [r2, #12]
 800e63c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e640:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e642:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e644:	f7f4 f90b 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800e648:	e7ce      	b.n	800e5e8 <HAL_TIMEx_OCN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e64a:	6802      	ldr	r2, [r0, #0]
 800e64c:	68d3      	ldr	r3, [r2, #12]
 800e64e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e652:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e654:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e656:	f7f4 f902 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800e65a:	e7c5      	b.n	800e5e8 <HAL_TIMEx_OCN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e65c:	6802      	ldr	r2, [r0, #0]
 800e65e:	68d3      	ldr	r3, [r2, #12]
 800e660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e664:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e666:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e668:	f7f4 f8f9 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800e66c:	e7bc      	b.n	800e5e8 <HAL_TIMEx_OCN_Stop_DMA+0x10>
	...

0800e670 <HAL_TIMEx_PWMN_Start>:
{
 800e670:	b510      	push	{r4, lr}
 800e672:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e674:	2204      	movs	r2, #4
 800e676:	6800      	ldr	r0, [r0, #0]
 800e678:	f7ff fcf6 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e67c:	6822      	ldr	r2, [r4, #0]
 800e67e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e684:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e686:	6822      	ldr	r2, [r4, #0]
 800e688:	6891      	ldr	r1, [r2, #8]
 800e68a:	4b06      	ldr	r3, [pc, #24]	; (800e6a4 <HAL_TIMEx_PWMN_Start+0x34>)
 800e68c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e68e:	2b06      	cmp	r3, #6
 800e690:	d006      	beq.n	800e6a0 <HAL_TIMEx_PWMN_Start+0x30>
 800e692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e696:	d003      	beq.n	800e6a0 <HAL_TIMEx_PWMN_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 800e698:	6813      	ldr	r3, [r2, #0]
 800e69a:	f043 0301 	orr.w	r3, r3, #1
 800e69e:	6013      	str	r3, [r2, #0]
}
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	bd10      	pop	{r4, pc}
 800e6a4:	00010007 	.word	0x00010007

0800e6a8 <HAL_TIMEx_PWMN_Stop>:
{
 800e6a8:	b510      	push	{r4, lr}
 800e6aa:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	6800      	ldr	r0, [r0, #0]
 800e6b0:	f7ff fcda 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e6b4:	6823      	ldr	r3, [r4, #0]
 800e6b6:	6a19      	ldr	r1, [r3, #32]
 800e6b8:	f241 1211 	movw	r2, #4369	; 0x1111
 800e6bc:	4211      	tst	r1, r2
 800e6be:	d108      	bne.n	800e6d2 <HAL_TIMEx_PWMN_Stop+0x2a>
 800e6c0:	6a19      	ldr	r1, [r3, #32]
 800e6c2:	f240 4244 	movw	r2, #1092	; 0x444
 800e6c6:	4211      	tst	r1, r2
 800e6c8:	d103      	bne.n	800e6d2 <HAL_TIMEx_PWMN_Stop+0x2a>
 800e6ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e6d0:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e6d2:	6823      	ldr	r3, [r4, #0]
 800e6d4:	6a19      	ldr	r1, [r3, #32]
 800e6d6:	f241 1211 	movw	r2, #4369	; 0x1111
 800e6da:	4211      	tst	r1, r2
 800e6dc:	d108      	bne.n	800e6f0 <HAL_TIMEx_PWMN_Stop+0x48>
 800e6de:	6a19      	ldr	r1, [r3, #32]
 800e6e0:	f240 4244 	movw	r2, #1092	; 0x444
 800e6e4:	4211      	tst	r1, r2
 800e6e6:	d103      	bne.n	800e6f0 <HAL_TIMEx_PWMN_Stop+0x48>
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	f022 0201 	bic.w	r2, r2, #1
 800e6ee:	601a      	str	r2, [r3, #0]
}
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	bd10      	pop	{r4, pc}

0800e6f4 <HAL_TIMEx_PWMN_Start_IT>:
{
 800e6f4:	b510      	push	{r4, lr}
 800e6f6:	4604      	mov	r4, r0
  switch (Channel)
 800e6f8:	2904      	cmp	r1, #4
 800e6fa:	d025      	beq.n	800e748 <HAL_TIMEx_PWMN_Start_IT+0x54>
 800e6fc:	2908      	cmp	r1, #8
 800e6fe:	d029      	beq.n	800e754 <HAL_TIMEx_PWMN_Start_IT+0x60>
 800e700:	b1e1      	cbz	r1, 800e73c <HAL_TIMEx_PWMN_Start_IT+0x48>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e702:	6822      	ldr	r2, [r4, #0]
 800e704:	68d3      	ldr	r3, [r2, #12]
 800e706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e70a:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e70c:	2204      	movs	r2, #4
 800e70e:	6820      	ldr	r0, [r4, #0]
 800e710:	f7ff fcaa 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e714:	6822      	ldr	r2, [r4, #0]
 800e716:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e71c:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e71e:	6822      	ldr	r2, [r4, #0]
 800e720:	6891      	ldr	r1, [r2, #8]
 800e722:	4b0f      	ldr	r3, [pc, #60]	; (800e760 <HAL_TIMEx_PWMN_Start_IT+0x6c>)
 800e724:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e726:	2b06      	cmp	r3, #6
 800e728:	d006      	beq.n	800e738 <HAL_TIMEx_PWMN_Start_IT+0x44>
 800e72a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e72e:	d003      	beq.n	800e738 <HAL_TIMEx_PWMN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 800e730:	6813      	ldr	r3, [r2, #0]
 800e732:	f043 0301 	orr.w	r3, r3, #1
 800e736:	6013      	str	r3, [r2, #0]
}
 800e738:	2000      	movs	r0, #0
 800e73a:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e73c:	6802      	ldr	r2, [r0, #0]
 800e73e:	68d3      	ldr	r3, [r2, #12]
 800e740:	f043 0302 	orr.w	r3, r3, #2
 800e744:	60d3      	str	r3, [r2, #12]
      break;
 800e746:	e7dc      	b.n	800e702 <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e748:	6802      	ldr	r2, [r0, #0]
 800e74a:	68d3      	ldr	r3, [r2, #12]
 800e74c:	f043 0304 	orr.w	r3, r3, #4
 800e750:	60d3      	str	r3, [r2, #12]
      break;
 800e752:	e7d6      	b.n	800e702 <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e754:	6802      	ldr	r2, [r0, #0]
 800e756:	68d3      	ldr	r3, [r2, #12]
 800e758:	f043 0308 	orr.w	r3, r3, #8
 800e75c:	60d3      	str	r3, [r2, #12]
      break;
 800e75e:	e7d0      	b.n	800e702 <HAL_TIMEx_PWMN_Start_IT+0xe>
 800e760:	00010007 	.word	0x00010007

0800e764 <HAL_TIMEx_PWMN_Stop_IT>:
{
 800e764:	b510      	push	{r4, lr}
 800e766:	4604      	mov	r4, r0
  switch (Channel)
 800e768:	2904      	cmp	r1, #4
 800e76a:	d037      	beq.n	800e7dc <HAL_TIMEx_PWMN_Stop_IT+0x78>
 800e76c:	2908      	cmp	r1, #8
 800e76e:	d03b      	beq.n	800e7e8 <HAL_TIMEx_PWMN_Stop_IT+0x84>
 800e770:	2900      	cmp	r1, #0
 800e772:	d02d      	beq.n	800e7d0 <HAL_TIMEx_PWMN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e774:	2200      	movs	r2, #0
 800e776:	6820      	ldr	r0, [r4, #0]
 800e778:	f7ff fc76 	bl	800e068 <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800e780:	f240 4244 	movw	r2, #1092	; 0x444
 800e784:	4211      	tst	r1, r2
 800e786:	d103      	bne.n	800e790 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800e788:	68da      	ldr	r2, [r3, #12]
 800e78a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e78e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	6a19      	ldr	r1, [r3, #32]
 800e794:	f241 1211 	movw	r2, #4369	; 0x1111
 800e798:	4211      	tst	r1, r2
 800e79a:	d108      	bne.n	800e7ae <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 800e79c:	6a19      	ldr	r1, [r3, #32]
 800e79e:	f240 4244 	movw	r2, #1092	; 0x444
 800e7a2:	4211      	tst	r1, r2
 800e7a4:	d103      	bne.n	800e7ae <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 800e7a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e7ac:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	6a19      	ldr	r1, [r3, #32]
 800e7b2:	f241 1211 	movw	r2, #4369	; 0x1111
 800e7b6:	4211      	tst	r1, r2
 800e7b8:	d108      	bne.n	800e7cc <HAL_TIMEx_PWMN_Stop_IT+0x68>
 800e7ba:	6a19      	ldr	r1, [r3, #32]
 800e7bc:	f240 4244 	movw	r2, #1092	; 0x444
 800e7c0:	4211      	tst	r1, r2
 800e7c2:	d103      	bne.n	800e7cc <HAL_TIMEx_PWMN_Stop_IT+0x68>
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	f022 0201 	bic.w	r2, r2, #1
 800e7ca:	601a      	str	r2, [r3, #0]
}
 800e7cc:	2000      	movs	r0, #0
 800e7ce:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e7d0:	6802      	ldr	r2, [r0, #0]
 800e7d2:	68d3      	ldr	r3, [r2, #12]
 800e7d4:	f023 0302 	bic.w	r3, r3, #2
 800e7d8:	60d3      	str	r3, [r2, #12]
      break;
 800e7da:	e7cb      	b.n	800e774 <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e7dc:	6802      	ldr	r2, [r0, #0]
 800e7de:	68d3      	ldr	r3, [r2, #12]
 800e7e0:	f023 0304 	bic.w	r3, r3, #4
 800e7e4:	60d3      	str	r3, [r2, #12]
      break;
 800e7e6:	e7c5      	b.n	800e774 <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e7e8:	6802      	ldr	r2, [r0, #0]
 800e7ea:	68d3      	ldr	r3, [r2, #12]
 800e7ec:	f023 0308 	bic.w	r3, r3, #8
 800e7f0:	60d3      	str	r3, [r2, #12]
      break;
 800e7f2:	e7bf      	b.n	800e774 <HAL_TIMEx_PWMN_Stop_IT+0x10>

0800e7f4 <HAL_TIMEx_PWMN_Start_DMA>:
{
 800e7f4:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800e7f6:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e7fa:	b2e4      	uxtb	r4, r4
 800e7fc:	2c02      	cmp	r4, #2
 800e7fe:	d071      	beq.n	800e8e4 <HAL_TIMEx_PWMN_Start_DMA+0xf0>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800e800:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e804:	b2e4      	uxtb	r4, r4
 800e806:	2c01      	cmp	r4, #1
 800e808:	d020      	beq.n	800e84c <HAL_TIMEx_PWMN_Start_DMA+0x58>
 800e80a:	4616      	mov	r6, r2
 800e80c:	460d      	mov	r5, r1
 800e80e:	4604      	mov	r4, r0
  switch (Channel)
 800e810:	2904      	cmp	r1, #4
 800e812:	d03b      	beq.n	800e88c <HAL_TIMEx_PWMN_Start_DMA+0x98>
 800e814:	2908      	cmp	r1, #8
 800e816:	d04f      	beq.n	800e8b8 <HAL_TIMEx_PWMN_Start_DMA+0xc4>
 800e818:	b309      	cbz	r1, 800e85e <HAL_TIMEx_PWMN_Start_DMA+0x6a>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e81a:	2204      	movs	r2, #4
 800e81c:	4629      	mov	r1, r5
 800e81e:	6820      	ldr	r0, [r4, #0]
 800e820:	f7ff fc22 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e824:	6822      	ldr	r2, [r4, #0]
 800e826:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e82c:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e82e:	6822      	ldr	r2, [r4, #0]
 800e830:	6891      	ldr	r1, [r2, #8]
 800e832:	4b32      	ldr	r3, [pc, #200]	; (800e8fc <HAL_TIMEx_PWMN_Start_DMA+0x108>)
 800e834:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e836:	2b06      	cmp	r3, #6
 800e838:	d05c      	beq.n	800e8f4 <HAL_TIMEx_PWMN_Start_DMA+0x100>
 800e83a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e83e:	d05b      	beq.n	800e8f8 <HAL_TIMEx_PWMN_Start_DMA+0x104>
    __HAL_TIM_ENABLE(htim);
 800e840:	6813      	ldr	r3, [r2, #0]
 800e842:	f043 0301 	orr.w	r3, r3, #1
 800e846:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800e848:	2000      	movs	r0, #0
}
 800e84a:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e84c:	b11a      	cbz	r2, 800e856 <HAL_TIMEx_PWMN_Start_DMA+0x62>
      htim->State = HAL_TIM_STATE_BUSY;
 800e84e:	2402      	movs	r4, #2
 800e850:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800e854:	e7d9      	b.n	800e80a <HAL_TIMEx_PWMN_Start_DMA+0x16>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e856:	2b00      	cmp	r3, #0
 800e858:	d0f9      	beq.n	800e84e <HAL_TIMEx_PWMN_Start_DMA+0x5a>
      return HAL_ERROR;
 800e85a:	2001      	movs	r0, #1
 800e85c:	e7f5      	b.n	800e84a <HAL_TIMEx_PWMN_Start_DMA+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e85e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e860:	4927      	ldr	r1, [pc, #156]	; (800e900 <HAL_TIMEx_PWMN_Start_DMA+0x10c>)
 800e862:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e864:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e866:	4927      	ldr	r1, [pc, #156]	; (800e904 <HAL_TIMEx_PWMN_Start_DMA+0x110>)
 800e868:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e86a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e86c:	4926      	ldr	r1, [pc, #152]	; (800e908 <HAL_TIMEx_PWMN_Start_DMA+0x114>)
 800e86e:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800e870:	6802      	ldr	r2, [r0, #0]
 800e872:	3234      	adds	r2, #52	; 0x34
 800e874:	4631      	mov	r1, r6
 800e876:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e878:	f7f3 ff7f 	bl	800277a <HAL_DMA_Start_IT>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d133      	bne.n	800e8e8 <HAL_TIMEx_PWMN_Start_DMA+0xf4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e880:	6822      	ldr	r2, [r4, #0]
 800e882:	68d3      	ldr	r3, [r2, #12]
 800e884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e888:	60d3      	str	r3, [r2, #12]
      break;
 800e88a:	e7c6      	b.n	800e81a <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e88c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e88e:	491c      	ldr	r1, [pc, #112]	; (800e900 <HAL_TIMEx_PWMN_Start_DMA+0x10c>)
 800e890:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e892:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e894:	491b      	ldr	r1, [pc, #108]	; (800e904 <HAL_TIMEx_PWMN_Start_DMA+0x110>)
 800e896:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e898:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e89a:	491b      	ldr	r1, [pc, #108]	; (800e908 <HAL_TIMEx_PWMN_Start_DMA+0x114>)
 800e89c:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800e89e:	6802      	ldr	r2, [r0, #0]
 800e8a0:	3238      	adds	r2, #56	; 0x38
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e8a6:	f7f3 ff68 	bl	800277a <HAL_DMA_Start_IT>
 800e8aa:	b9f8      	cbnz	r0, 800e8ec <HAL_TIMEx_PWMN_Start_DMA+0xf8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e8ac:	6822      	ldr	r2, [r4, #0]
 800e8ae:	68d3      	ldr	r3, [r2, #12]
 800e8b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e8b4:	60d3      	str	r3, [r2, #12]
      break;
 800e8b6:	e7b0      	b.n	800e81a <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e8b8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e8ba:	4911      	ldr	r1, [pc, #68]	; (800e900 <HAL_TIMEx_PWMN_Start_DMA+0x10c>)
 800e8bc:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e8be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e8c0:	4910      	ldr	r1, [pc, #64]	; (800e904 <HAL_TIMEx_PWMN_Start_DMA+0x110>)
 800e8c2:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e8c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e8c6:	4910      	ldr	r1, [pc, #64]	; (800e908 <HAL_TIMEx_PWMN_Start_DMA+0x114>)
 800e8c8:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800e8ca:	6802      	ldr	r2, [r0, #0]
 800e8cc:	323c      	adds	r2, #60	; 0x3c
 800e8ce:	4631      	mov	r1, r6
 800e8d0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e8d2:	f7f3 ff52 	bl	800277a <HAL_DMA_Start_IT>
 800e8d6:	b958      	cbnz	r0, 800e8f0 <HAL_TIMEx_PWMN_Start_DMA+0xfc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e8d8:	6822      	ldr	r2, [r4, #0]
 800e8da:	68d3      	ldr	r3, [r2, #12]
 800e8dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e8e0:	60d3      	str	r3, [r2, #12]
      break;
 800e8e2:	e79a      	b.n	800e81a <HAL_TIMEx_PWMN_Start_DMA+0x26>
    return HAL_BUSY;
 800e8e4:	2002      	movs	r0, #2
 800e8e6:	e7b0      	b.n	800e84a <HAL_TIMEx_PWMN_Start_DMA+0x56>
        return HAL_ERROR;
 800e8e8:	2001      	movs	r0, #1
 800e8ea:	e7ae      	b.n	800e84a <HAL_TIMEx_PWMN_Start_DMA+0x56>
        return HAL_ERROR;
 800e8ec:	2001      	movs	r0, #1
 800e8ee:	e7ac      	b.n	800e84a <HAL_TIMEx_PWMN_Start_DMA+0x56>
        return HAL_ERROR;
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	e7aa      	b.n	800e84a <HAL_TIMEx_PWMN_Start_DMA+0x56>
  return HAL_OK;
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	e7a8      	b.n	800e84a <HAL_TIMEx_PWMN_Start_DMA+0x56>
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e7a6      	b.n	800e84a <HAL_TIMEx_PWMN_Start_DMA+0x56>
 800e8fc:	00010007 	.word	0x00010007
 800e900:	0800bff5 	.word	0x0800bff5
 800e904:	0800c03b 	.word	0x0800c03b
 800e908:	0800c23f 	.word	0x0800c23f

0800e90c <HAL_TIMEx_PWMN_Stop_DMA>:
{
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	4604      	mov	r4, r0
 800e910:	460d      	mov	r5, r1
  switch (Channel)
 800e912:	2904      	cmp	r1, #4
 800e914:	d033      	beq.n	800e97e <HAL_TIMEx_PWMN_Stop_DMA+0x72>
 800e916:	2908      	cmp	r1, #8
 800e918:	d03a      	beq.n	800e990 <HAL_TIMEx_PWMN_Stop_DMA+0x84>
 800e91a:	b339      	cbz	r1, 800e96c <HAL_TIMEx_PWMN_Stop_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e91c:	2200      	movs	r2, #0
 800e91e:	4629      	mov	r1, r5
 800e920:	6820      	ldr	r0, [r4, #0]
 800e922:	f7ff fba1 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	6a19      	ldr	r1, [r3, #32]
 800e92a:	f241 1211 	movw	r2, #4369	; 0x1111
 800e92e:	4211      	tst	r1, r2
 800e930:	d108      	bne.n	800e944 <HAL_TIMEx_PWMN_Stop_DMA+0x38>
 800e932:	6a19      	ldr	r1, [r3, #32]
 800e934:	f240 4244 	movw	r2, #1092	; 0x444
 800e938:	4211      	tst	r1, r2
 800e93a:	d103      	bne.n	800e944 <HAL_TIMEx_PWMN_Stop_DMA+0x38>
 800e93c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e93e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e942:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e944:	6823      	ldr	r3, [r4, #0]
 800e946:	6a19      	ldr	r1, [r3, #32]
 800e948:	f241 1211 	movw	r2, #4369	; 0x1111
 800e94c:	4211      	tst	r1, r2
 800e94e:	d108      	bne.n	800e962 <HAL_TIMEx_PWMN_Stop_DMA+0x56>
 800e950:	6a19      	ldr	r1, [r3, #32]
 800e952:	f240 4244 	movw	r2, #1092	; 0x444
 800e956:	4211      	tst	r1, r2
 800e958:	d103      	bne.n	800e962 <HAL_TIMEx_PWMN_Stop_DMA+0x56>
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	f022 0201 	bic.w	r2, r2, #1
 800e960:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e962:	2301      	movs	r3, #1
 800e964:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e968:	2000      	movs	r0, #0
 800e96a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e96c:	6802      	ldr	r2, [r0, #0]
 800e96e:	68d3      	ldr	r3, [r2, #12]
 800e970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e974:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e976:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e978:	f7f3 ff71 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800e97c:	e7ce      	b.n	800e91c <HAL_TIMEx_PWMN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e97e:	6802      	ldr	r2, [r0, #0]
 800e980:	68d3      	ldr	r3, [r2, #12]
 800e982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e986:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e988:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e98a:	f7f3 ff68 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800e98e:	e7c5      	b.n	800e91c <HAL_TIMEx_PWMN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e990:	6802      	ldr	r2, [r0, #0]
 800e992:	68d3      	ldr	r3, [r2, #12]
 800e994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e998:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e99a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e99c:	f7f3 ff5f 	bl	800285e <HAL_DMA_Abort_IT>
      break;
 800e9a0:	e7bc      	b.n	800e91c <HAL_TIMEx_PWMN_Stop_DMA+0x10>

0800e9a2 <HAL_TIMEx_OnePulseN_Start>:
{
 800e9a2:	b510      	push	{r4, lr}
 800e9a4:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800e9a6:	2204      	movs	r2, #4
 800e9a8:	6800      	ldr	r0, [r0, #0]
 800e9aa:	f7ff fb5d 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e9ae:	6822      	ldr	r2, [r4, #0]
 800e9b0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e9b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9b6:	6453      	str	r3, [r2, #68]	; 0x44
}
 800e9b8:	2000      	movs	r0, #0
 800e9ba:	bd10      	pop	{r4, pc}

0800e9bc <HAL_TIMEx_OnePulseN_Stop>:
{
 800e9bc:	b510      	push	{r4, lr}
 800e9be:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	6800      	ldr	r0, [r0, #0]
 800e9c4:	f7ff fb50 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	6a19      	ldr	r1, [r3, #32]
 800e9cc:	f241 1211 	movw	r2, #4369	; 0x1111
 800e9d0:	4211      	tst	r1, r2
 800e9d2:	d108      	bne.n	800e9e6 <HAL_TIMEx_OnePulseN_Stop+0x2a>
 800e9d4:	6a19      	ldr	r1, [r3, #32]
 800e9d6:	f240 4244 	movw	r2, #1092	; 0x444
 800e9da:	4211      	tst	r1, r2
 800e9dc:	d103      	bne.n	800e9e6 <HAL_TIMEx_OnePulseN_Stop+0x2a>
 800e9de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e9e4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e9e6:	6823      	ldr	r3, [r4, #0]
 800e9e8:	6a19      	ldr	r1, [r3, #32]
 800e9ea:	f241 1211 	movw	r2, #4369	; 0x1111
 800e9ee:	4211      	tst	r1, r2
 800e9f0:	d108      	bne.n	800ea04 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800e9f2:	6a19      	ldr	r1, [r3, #32]
 800e9f4:	f240 4244 	movw	r2, #1092	; 0x444
 800e9f8:	4211      	tst	r1, r2
 800e9fa:	d103      	bne.n	800ea04 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	f022 0201 	bic.w	r2, r2, #1
 800ea02:	601a      	str	r2, [r3, #0]
}
 800ea04:	2000      	movs	r0, #0
 800ea06:	bd10      	pop	{r4, pc}

0800ea08 <HAL_TIMEx_OnePulseN_Start_IT>:
{
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ea0c:	6802      	ldr	r2, [r0, #0]
 800ea0e:	68d3      	ldr	r3, [r2, #12]
 800ea10:	f043 0302 	orr.w	r3, r3, #2
 800ea14:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ea16:	6802      	ldr	r2, [r0, #0]
 800ea18:	68d3      	ldr	r3, [r2, #12]
 800ea1a:	f043 0304 	orr.w	r3, r3, #4
 800ea1e:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800ea20:	2204      	movs	r2, #4
 800ea22:	6800      	ldr	r0, [r0, #0]
 800ea24:	f7ff fb20 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800ea28:	6822      	ldr	r2, [r4, #0]
 800ea2a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800ea2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea30:	6453      	str	r3, [r2, #68]	; 0x44
}
 800ea32:	2000      	movs	r0, #0
 800ea34:	bd10      	pop	{r4, pc}

0800ea36 <HAL_TIMEx_OnePulseN_Stop_IT>:
{
 800ea36:	b510      	push	{r4, lr}
 800ea38:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ea3a:	6802      	ldr	r2, [r0, #0]
 800ea3c:	68d3      	ldr	r3, [r2, #12]
 800ea3e:	f023 0302 	bic.w	r3, r3, #2
 800ea42:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ea44:	6802      	ldr	r2, [r0, #0]
 800ea46:	68d3      	ldr	r3, [r2, #12]
 800ea48:	f023 0304 	bic.w	r3, r3, #4
 800ea4c:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800ea4e:	2200      	movs	r2, #0
 800ea50:	6800      	ldr	r0, [r0, #0]
 800ea52:	f7ff fb09 	bl	800e068 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	6a19      	ldr	r1, [r3, #32]
 800ea5a:	f241 1211 	movw	r2, #4369	; 0x1111
 800ea5e:	4211      	tst	r1, r2
 800ea60:	d108      	bne.n	800ea74 <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 800ea62:	6a19      	ldr	r1, [r3, #32]
 800ea64:	f240 4244 	movw	r2, #1092	; 0x444
 800ea68:	4211      	tst	r1, r2
 800ea6a:	d103      	bne.n	800ea74 <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 800ea6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ea72:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800ea74:	6823      	ldr	r3, [r4, #0]
 800ea76:	6a19      	ldr	r1, [r3, #32]
 800ea78:	f241 1211 	movw	r2, #4369	; 0x1111
 800ea7c:	4211      	tst	r1, r2
 800ea7e:	d108      	bne.n	800ea92 <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 800ea80:	6a19      	ldr	r1, [r3, #32]
 800ea82:	f240 4244 	movw	r2, #1092	; 0x444
 800ea86:	4211      	tst	r1, r2
 800ea88:	d103      	bne.n	800ea92 <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	f022 0201 	bic.w	r2, r2, #1
 800ea90:	601a      	str	r2, [r3, #0]
}
 800ea92:	2000      	movs	r0, #0
 800ea94:	bd10      	pop	{r4, pc}

0800ea96 <HAL_TIMEx_ConfigCommutEvent>:
  __HAL_LOCK(htim);
 800ea96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d030      	beq.n	800eb00 <HAL_TIMEx_ConfigCommutEvent+0x6a>
{
 800ea9e:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800eaa6:	f031 0310 	bics.w	r3, r1, #16
 800eaaa:	d001      	beq.n	800eab0 <HAL_TIMEx_ConfigCommutEvent+0x1a>
 800eaac:	2b20      	cmp	r3, #32
 800eaae:	d108      	bne.n	800eac2 <HAL_TIMEx_ConfigCommutEvent+0x2c>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800eab0:	6804      	ldr	r4, [r0, #0]
 800eab2:	68a3      	ldr	r3, [r4, #8]
 800eab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eab8:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800eaba:	6804      	ldr	r4, [r0, #0]
 800eabc:	68a3      	ldr	r3, [r4, #8]
 800eabe:	4319      	orrs	r1, r3
 800eac0:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800eac2:	6801      	ldr	r1, [r0, #0]
 800eac4:	684b      	ldr	r3, [r1, #4]
 800eac6:	f043 0301 	orr.w	r3, r3, #1
 800eaca:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800eacc:	6801      	ldr	r1, [r0, #0]
 800eace:	684b      	ldr	r3, [r1, #4]
 800ead0:	f023 0304 	bic.w	r3, r3, #4
 800ead4:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 800ead6:	6801      	ldr	r1, [r0, #0]
 800ead8:	684b      	ldr	r3, [r1, #4]
 800eada:	431a      	orrs	r2, r3
 800eadc:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800eade:	6802      	ldr	r2, [r0, #0]
 800eae0:	68d3      	ldr	r3, [r2, #12]
 800eae2:	f023 0320 	bic.w	r3, r3, #32
 800eae6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800eae8:	6802      	ldr	r2, [r0, #0]
 800eaea:	68d3      	ldr	r3, [r2, #12]
 800eaec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eaf0:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800eaf8:	4618      	mov	r0, r3
}
 800eafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eafe:	4770      	bx	lr
  __HAL_LOCK(htim);
 800eb00:	2002      	movs	r0, #2
}
 800eb02:	4770      	bx	lr

0800eb04 <HAL_TIMEx_ConfigCommutEvent_IT>:
  __HAL_LOCK(htim);
 800eb04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d030      	beq.n	800eb6e <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
{
 800eb0c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800eb0e:	2301      	movs	r3, #1
 800eb10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800eb14:	f031 0310 	bics.w	r3, r1, #16
 800eb18:	d001      	beq.n	800eb1e <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 800eb1a:	2b20      	cmp	r3, #32
 800eb1c:	d108      	bne.n	800eb30 <HAL_TIMEx_ConfigCommutEvent_IT+0x2c>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800eb1e:	6804      	ldr	r4, [r0, #0]
 800eb20:	68a3      	ldr	r3, [r4, #8]
 800eb22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb26:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800eb28:	6804      	ldr	r4, [r0, #0]
 800eb2a:	68a3      	ldr	r3, [r4, #8]
 800eb2c:	4319      	orrs	r1, r3
 800eb2e:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800eb30:	6801      	ldr	r1, [r0, #0]
 800eb32:	684b      	ldr	r3, [r1, #4]
 800eb34:	f043 0301 	orr.w	r3, r3, #1
 800eb38:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800eb3a:	6801      	ldr	r1, [r0, #0]
 800eb3c:	684b      	ldr	r3, [r1, #4]
 800eb3e:	f023 0304 	bic.w	r3, r3, #4
 800eb42:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 800eb44:	6801      	ldr	r1, [r0, #0]
 800eb46:	684b      	ldr	r3, [r1, #4]
 800eb48:	431a      	orrs	r2, r3
 800eb4a:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800eb4c:	6802      	ldr	r2, [r0, #0]
 800eb4e:	68d3      	ldr	r3, [r2, #12]
 800eb50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb54:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800eb56:	6802      	ldr	r2, [r0, #0]
 800eb58:	68d3      	ldr	r3, [r2, #12]
 800eb5a:	f043 0320 	orr.w	r3, r3, #32
 800eb5e:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 800eb60:	2300      	movs	r3, #0
 800eb62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800eb66:	4618      	mov	r0, r3
}
 800eb68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb6c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800eb6e:	2002      	movs	r0, #2
}
 800eb70:	4770      	bx	lr
	...

0800eb74 <HAL_TIMEx_ConfigCommutEvent_DMA>:
  __HAL_LOCK(htim);
 800eb74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d039      	beq.n	800ebf0 <HAL_TIMEx_ConfigCommutEvent_DMA+0x7c>
{
 800eb7c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800eb7e:	2301      	movs	r3, #1
 800eb80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800eb84:	f031 0310 	bics.w	r3, r1, #16
 800eb88:	d001      	beq.n	800eb8e <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 800eb8a:	2b20      	cmp	r3, #32
 800eb8c:	d108      	bne.n	800eba0 <HAL_TIMEx_ConfigCommutEvent_DMA+0x2c>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800eb8e:	6804      	ldr	r4, [r0, #0]
 800eb90:	68a3      	ldr	r3, [r4, #8]
 800eb92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb96:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800eb98:	6804      	ldr	r4, [r0, #0]
 800eb9a:	68a3      	ldr	r3, [r4, #8]
 800eb9c:	4319      	orrs	r1, r3
 800eb9e:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800eba0:	6801      	ldr	r1, [r0, #0]
 800eba2:	684b      	ldr	r3, [r1, #4]
 800eba4:	f043 0301 	orr.w	r3, r3, #1
 800eba8:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800ebaa:	6801      	ldr	r1, [r0, #0]
 800ebac:	684b      	ldr	r3, [r1, #4]
 800ebae:	f023 0304 	bic.w	r3, r3, #4
 800ebb2:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 800ebb4:	6801      	ldr	r1, [r0, #0]
 800ebb6:	684b      	ldr	r3, [r1, #4]
 800ebb8:	431a      	orrs	r2, r3
 800ebba:	604a      	str	r2, [r1, #4]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800ebbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebbe:	4a0d      	ldr	r2, [pc, #52]	; (800ebf4 <HAL_TIMEx_ConfigCommutEvent_DMA+0x80>)
 800ebc0:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 800ebc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebc4:	4a0c      	ldr	r2, [pc, #48]	; (800ebf8 <HAL_TIMEx_ConfigCommutEvent_DMA+0x84>)
 800ebc6:	631a      	str	r2, [r3, #48]	; 0x30
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800ebc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebca:	4a0c      	ldr	r2, [pc, #48]	; (800ebfc <HAL_TIMEx_ConfigCommutEvent_DMA+0x88>)
 800ebcc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800ebce:	6802      	ldr	r2, [r0, #0]
 800ebd0:	68d3      	ldr	r3, [r2, #12]
 800ebd2:	f023 0320 	bic.w	r3, r3, #32
 800ebd6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800ebd8:	6802      	ldr	r2, [r0, #0]
 800ebda:	68d3      	ldr	r3, [r2, #12]
 800ebdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ebe0:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ebe8:	4618      	mov	r0, r3
}
 800ebea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebee:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ebf0:	2002      	movs	r0, #2
}
 800ebf2:	4770      	bx	lr
 800ebf4:	0800ee7d 	.word	0x0800ee7d
 800ebf8:	0800ee8f 	.word	0x0800ee8f
 800ebfc:	0800c23f 	.word	0x0800c23f

0800ec00 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800ec00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d028      	beq.n	800ec5a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 800ec08:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ec10:	2302      	movs	r3, #2
 800ec12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800ec16:	6804      	ldr	r4, [r0, #0]
 800ec18:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 800ec1a:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec1c:	4d10      	ldr	r5, [pc, #64]	; (800ec60 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800ec1e:	42ac      	cmp	r4, r5
 800ec20:	d003      	beq.n	800ec2a <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 800ec22:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800ec26:	42ac      	cmp	r4, r5
 800ec28:	d103      	bne.n	800ec32 <HAL_TIMEx_MasterConfigSynchronization+0x32>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec2e:	684d      	ldr	r5, [r1, #4]
 800ec30:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec36:	680d      	ldr	r5, [r1, #0]
 800ec38:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800ec3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ec3e:	6889      	ldr	r1, [r1, #8]
 800ec40:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 800ec42:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800ec44:	6803      	ldr	r3, [r0, #0]
 800ec46:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ec4e:	2300      	movs	r3, #0
 800ec50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ec54:	4618      	mov	r0, r3
}
 800ec56:	bc30      	pop	{r4, r5}
 800ec58:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ec5a:	2002      	movs	r0, #2
}
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	40012c00 	.word	0x40012c00

0800ec64 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800ec64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d03e      	beq.n	800ecea <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 800ec6c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800ec6e:	2301      	movs	r3, #1
 800ec70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ec74:	68cb      	ldr	r3, [r1, #12]
 800ec76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec7a:	688a      	ldr	r2, [r1, #8]
 800ec7c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ec7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec82:	684a      	ldr	r2, [r1, #4]
 800ec84:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ec86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec8a:	680a      	ldr	r2, [r1, #0]
 800ec8c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ec8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec92:	690a      	ldr	r2, [r1, #16]
 800ec94:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec9a:	694a      	ldr	r2, [r1, #20]
 800ec9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eca2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800eca4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eca6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800ecaa:	698a      	ldr	r2, [r1, #24]
 800ecac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ecb0:	6802      	ldr	r2, [r0, #0]
 800ecb2:	4c0f      	ldr	r4, [pc, #60]	; (800ecf0 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800ecb4:	42a2      	cmp	r2, r4
 800ecb6:	d003      	beq.n	800ecc0 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 800ecb8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800ecbc:	42a2      	cmp	r2, r4
 800ecbe:	d10c      	bne.n	800ecda <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ecc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ecc4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800ecc6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ecca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ecce:	69cc      	ldr	r4, [r1, #28]
 800ecd0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ecd2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ecd6:	6a09      	ldr	r1, [r1, #32]
 800ecd8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800ecda:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800ecdc:	2300      	movs	r3, #0
 800ecde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ece2:	4618      	mov	r0, r3
}
 800ece4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ece8:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ecea:	2002      	movs	r0, #2
}
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	40012c00 	.word	0x40012c00

0800ecf4 <HAL_TIMEx_ConfigBreakInput>:
  __HAL_LOCK(htim);
 800ecf4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d023      	beq.n	800ed44 <HAL_TIMEx_ConfigBreakInput+0x50>
{
 800ecfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800ecfe:	2301      	movs	r3, #1
 800ed00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (sBreakInputConfig->Source)
 800ed04:	6814      	ldr	r4, [r2, #0]
 800ed06:	1e63      	subs	r3, r4, #1
 800ed08:	2b07      	cmp	r3, #7
 800ed0a:	d80b      	bhi.n	800ed24 <HAL_TIMEx_ConfigBreakInput+0x30>
 800ed0c:	e8df f003 	tbb	[pc, r3]
 800ed10:	360a0430 	.word	0x360a0430
 800ed14:	5d0a0a0a 	.word	0x5d0a0a0a
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800ed18:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800ed1a:	260a      	movs	r6, #10
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800ed1c:	2301      	movs	r3, #1
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800ed1e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800ed22:	e030      	b.n	800ed86 <HAL_TIMEx_ConfigBreakInput+0x92>
  switch (BreakInput)
 800ed24:	2901      	cmp	r1, #1
 800ed26:	d006      	beq.n	800ed36 <HAL_TIMEx_ConfigBreakInput+0x42>
 800ed28:	2902      	cmp	r1, #2
 800ed2a:	d11c      	bne.n	800ed66 <HAL_TIMEx_ConfigBreakInput+0x72>
  uint32_t bkin_polarity_bitpos = 0U;
 800ed2c:	2600      	movs	r6, #0
  uint32_t bkin_enable_bitpos = 0U;
 800ed2e:	4633      	mov	r3, r6
  uint32_t bkin_polarity_mask = 0U;
 800ed30:	4635      	mov	r5, r6
  uint32_t bkin_enable_mask = 0U;
 800ed32:	46b4      	mov	ip, r6
 800ed34:	e02b      	b.n	800ed8e <HAL_TIMEx_ConfigBreakInput+0x9a>
      tmporx = htim->Instance->OR2;
 800ed36:	6801      	ldr	r1, [r0, #0]
 800ed38:	6e0b      	ldr	r3, [r1, #96]	; 0x60
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800ed3a:	2c08      	cmp	r4, #8
 800ed3c:	d012      	beq.n	800ed64 <HAL_TIMEx_ConfigBreakInput+0x70>
  uint32_t bkin_polarity_bitpos = 0U;
 800ed3e:	2600      	movs	r6, #0
  uint32_t bkin_polarity_mask = 0U;
 800ed40:	4635      	mov	r5, r6
 800ed42:	e00a      	b.n	800ed5a <HAL_TIMEx_ConfigBreakInput+0x66>
  __HAL_LOCK(htim);
 800ed44:	2002      	movs	r0, #2
}
 800ed46:	4770      	bx	lr
      tmporx = htim->Instance->OR2;
 800ed48:	6801      	ldr	r1, [r0, #0]
 800ed4a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800ed4c:	6857      	ldr	r7, [r2, #4]
 800ed4e:	fa07 f303 	lsl.w	r3, r7, r3
 800ed52:	4063      	eors	r3, r4
 800ed54:	ea03 030c 	and.w	r3, r3, ip
 800ed58:	4063      	eors	r3, r4
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800ed5a:	6892      	ldr	r2, [r2, #8]
 800ed5c:	40b2      	lsls	r2, r6
 800ed5e:	405a      	eors	r2, r3
 800ed60:	402a      	ands	r2, r5
 800ed62:	4053      	eors	r3, r2
      htim->Instance->OR2 = tmporx;
 800ed64:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 800ed66:	2300      	movs	r3, #0
 800ed68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ed6c:	4618      	mov	r0, r3
}
 800ed6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_enable_mask = TIM1_OR2_BKINE;
 800ed70:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800ed72:	2609      	movs	r6, #9
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800ed74:	2300      	movs	r3, #0
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800ed76:	f44f 7500 	mov.w	r5, #512	; 0x200
 800ed7a:	e004      	b.n	800ed86 <HAL_TIMEx_ConfigBreakInput+0x92>
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800ed7c:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800ed7e:	260b      	movs	r6, #11
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800ed80:	2302      	movs	r3, #2
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800ed82:	f44f 6500 	mov.w	r5, #2048	; 0x800
  switch (BreakInput)
 800ed86:	2901      	cmp	r1, #1
 800ed88:	d0de      	beq.n	800ed48 <HAL_TIMEx_ConfigBreakInput+0x54>
 800ed8a:	2902      	cmp	r1, #2
 800ed8c:	d1eb      	bne.n	800ed66 <HAL_TIMEx_ConfigBreakInput+0x72>
      tmporx = htim->Instance->OR3;
 800ed8e:	6807      	ldr	r7, [r0, #0]
 800ed90:	f8d7 e064 	ldr.w	lr, [r7, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800ed94:	6851      	ldr	r1, [r2, #4]
 800ed96:	fa01 f303 	lsl.w	r3, r1, r3
 800ed9a:	ea83 030e 	eor.w	r3, r3, lr
 800ed9e:	ea03 030c 	and.w	r3, r3, ip
 800eda2:	ea83 030e 	eor.w	r3, r3, lr
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800eda6:	2c08      	cmp	r4, #8
 800eda8:	d004      	beq.n	800edb4 <HAL_TIMEx_ConfigBreakInput+0xc0>
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800edaa:	6892      	ldr	r2, [r2, #8]
 800edac:	40b2      	lsls	r2, r6
 800edae:	405a      	eors	r2, r3
 800edb0:	402a      	ands	r2, r5
 800edb2:	4053      	eors	r3, r2
      htim->Instance->OR3 = tmporx;
 800edb4:	667b      	str	r3, [r7, #100]	; 0x64
      break;
 800edb6:	e7d6      	b.n	800ed66 <HAL_TIMEx_ConfigBreakInput+0x72>
      tmporx = htim->Instance->OR2;
 800edb8:	6801      	ldr	r1, [r0, #0]
 800edba:	6e0b      	ldr	r3, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800edbc:	6852      	ldr	r2, [r2, #4]
 800edbe:	ea83 2202 	eor.w	r2, r3, r2, lsl #8
 800edc2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800edc6:	4053      	eors	r3, r2
 800edc8:	e7cc      	b.n	800ed64 <HAL_TIMEx_ConfigBreakInput+0x70>
  switch (BreakInput)
 800edca:	2901      	cmp	r1, #1
 800edcc:	d0f4      	beq.n	800edb8 <HAL_TIMEx_ConfigBreakInput+0xc4>
 800edce:	2902      	cmp	r1, #2
 800edd0:	d1c9      	bne.n	800ed66 <HAL_TIMEx_ConfigBreakInput+0x72>
  uint32_t bkin_polarity_bitpos = 0U;
 800edd2:	2600      	movs	r6, #0
      bkin_enable_bitpos = 8U;
 800edd4:	2308      	movs	r3, #8
  uint32_t bkin_polarity_mask = 0U;
 800edd6:	4635      	mov	r5, r6
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800edd8:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800eddc:	e7d7      	b.n	800ed8e <HAL_TIMEx_ConfigBreakInput+0x9a>
	...

0800ede0 <HAL_TIMEx_RemapConfig>:
  __HAL_LOCK(htim);
 800ede0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d024      	beq.n	800ee32 <HAL_TIMEx_RemapConfig+0x52>
{
 800ede8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800edea:	2301      	movs	r3, #1
 800edec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 800edf0:	6803      	ldr	r3, [r0, #0]
 800edf2:	4a11      	ldr	r2, [pc, #68]	; (800ee38 <HAL_TIMEx_RemapConfig+0x58>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d00a      	beq.n	800ee0e <HAL_TIMEx_RemapConfig+0x2e>
 800edf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edfc:	d007      	beq.n	800ee0e <HAL_TIMEx_RemapConfig+0x2e>
 800edfe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d003      	beq.n	800ee0e <HAL_TIMEx_RemapConfig+0x2e>
 800ee06:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d106      	bne.n	800ee1c <HAL_TIMEx_RemapConfig+0x3c>
    tmpor2 = htim->Instance->OR2;
 800ee0e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
    tmpor2 &= ~TIM1_OR2_ETRSEL_Msk;
 800ee10:	f424 34e0 	bic.w	r4, r4, #114688	; 0x1c000
    tmpor2 |= (Remap & TIM1_OR2_ETRSEL_Msk);
 800ee14:	f401 32e0 	and.w	r2, r1, #114688	; 0x1c000
 800ee18:	4322      	orrs	r2, r4
    htim->Instance->OR2 = tmpor2;
 800ee1a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpor1 &= ~TIM1_OR2_ETRSEL_Msk;
 800ee1c:	f421 31e0 	bic.w	r1, r1, #114688	; 0x1c000
  htim->Instance->OR1 = tmpor1;
 800ee20:	6803      	ldr	r3, [r0, #0]
 800ee22:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800ee24:	2300      	movs	r3, #0
 800ee26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ee2a:	4618      	mov	r0, r3
}
 800ee2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee30:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ee32:	2002      	movs	r0, #2
}
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop
 800ee38:	40012c00 	.word	0x40012c00

0800ee3c <HAL_TIMEx_GroupChannel5>:
  __HAL_LOCK(htim);
 800ee3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d018      	beq.n	800ee76 <HAL_TIMEx_GroupChannel5+0x3a>
{
 800ee44:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800ee46:	2201      	movs	r2, #1
 800ee48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->CCR5 &= ~(TIM_CCR5_GC5C3 | TIM_CCR5_GC5C2 | TIM_CCR5_GC5C1);
 800ee52:	6804      	ldr	r4, [r0, #0]
 800ee54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee56:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800ee5a:	65a3      	str	r3, [r4, #88]	; 0x58
  htim->Instance->CCR5 |= Channels;
 800ee5c:	6804      	ldr	r4, [r0, #0]
 800ee5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee60:	4319      	orrs	r1, r3
 800ee62:	65a1      	str	r1, [r4, #88]	; 0x58
  htim->State = HAL_TIM_STATE_READY;
 800ee64:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ee68:	2300      	movs	r3, #0
 800ee6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ee6e:	4618      	mov	r0, r3
}
 800ee70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee74:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ee76:	2002      	movs	r0, #2
}
 800ee78:	4770      	bx	lr

0800ee7a <HAL_TIMEx_CommutCallback>:
}
 800ee7a:	4770      	bx	lr

0800ee7c <TIMEx_DMACommutationCplt>:
{
 800ee7c:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800ee80:	2301      	movs	r3, #1
 800ee82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutCallback(htim);
 800ee86:	f7ff fff8 	bl	800ee7a <HAL_TIMEx_CommutCallback>
}
 800ee8a:	bd08      	pop	{r3, pc}

0800ee8c <HAL_TIMEx_CommutHalfCpltCallback>:
}
 800ee8c:	4770      	bx	lr

0800ee8e <TIMEx_DMACommutationHalfCplt>:
{
 800ee8e:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee90:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800ee92:	2301      	movs	r3, #1
 800ee94:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 800ee98:	f7ff fff8 	bl	800ee8c <HAL_TIMEx_CommutHalfCpltCallback>
}
 800ee9c:	bd08      	pop	{r3, pc}

0800ee9e <HAL_TIMEx_BreakCallback>:
}
 800ee9e:	4770      	bx	lr

0800eea0 <HAL_TIMEx_Break2Callback>:
}
 800eea0:	4770      	bx	lr

0800eea2 <HAL_TIMEx_HallSensor_GetState>:
  return htim->State;
 800eea2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800eea6:	4770      	bx	lr

0800eea8 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eea8:	6802      	ldr	r2, [r0, #0]
 800eeaa:	6813      	ldr	r3, [r2, #0]
 800eeac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eeb0:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeb2:	6802      	ldr	r2, [r0, #0]
 800eeb4:	6893      	ldr	r3, [r2, #8]
 800eeb6:	f023 0301 	bic.w	r3, r3, #1
 800eeba:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eebc:	2320      	movs	r3, #32
 800eebe:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eec0:	2300      	movs	r3, #0
 800eec2:	6603      	str	r3, [r0, #96]	; 0x60
}
 800eec4:	4770      	bx	lr

0800eec6 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eec6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800eec8:	2b21      	cmp	r3, #33	; 0x21
 800eeca:	d000      	beq.n	800eece <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800eecc:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800eece:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	b16b      	cbz	r3, 800eef2 <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800eed6:	6803      	ldr	r3, [r0, #0]
 800eed8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800eeda:	7812      	ldrb	r2, [r2, #0]
 800eedc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800eede:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800eee0:	3301      	adds	r3, #1
 800eee2:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800eee4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800eee8:	3b01      	subs	r3, #1
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 800eef0:	e7ec      	b.n	800eecc <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800eef2:	6802      	ldr	r2, [r0, #0]
 800eef4:	6813      	ldr	r3, [r2, #0]
 800eef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eefa:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eefc:	6802      	ldr	r2, [r0, #0]
 800eefe:	6813      	ldr	r3, [r2, #0]
 800ef00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef04:	6013      	str	r3, [r2, #0]
 800ef06:	4770      	bx	lr

0800ef08 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ef08:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ef0a:	2b21      	cmp	r3, #33	; 0x21
 800ef0c:	d000      	beq.n	800ef10 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ef0e:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800ef10:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	b17b      	cbz	r3, 800ef38 <UART_TxISR_16BIT+0x30>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ef18:	6802      	ldr	r2, [r0, #0]
 800ef1a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ef1c:	881b      	ldrh	r3, [r3, #0]
 800ef1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef22:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ef24:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ef26:	3302      	adds	r3, #2
 800ef28:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800ef2a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800ef2e:	3b01      	subs	r3, #1
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 800ef36:	e7ea      	b.n	800ef0e <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ef38:	6802      	ldr	r2, [r0, #0]
 800ef3a:	6813      	ldr	r3, [r2, #0]
 800ef3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef40:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef42:	6802      	ldr	r2, [r0, #0]
 800ef44:	6813      	ldr	r3, [r2, #0]
 800ef46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef4a:	6013      	str	r3, [r2, #0]
 800ef4c:	4770      	bx	lr
}
 800ef4e:	4770      	bx	lr
}
 800ef50:	4770      	bx	lr

0800ef52 <HAL_UART_DeInit>:
  if (huart == NULL)
 800ef52:	b1c0      	cbz	r0, 800ef86 <HAL_UART_DeInit+0x34>
{
 800ef54:	b538      	push	{r3, r4, r5, lr}
 800ef56:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800ef58:	2324      	movs	r3, #36	; 0x24
 800ef5a:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800ef5c:	6802      	ldr	r2, [r0, #0]
 800ef5e:	6813      	ldr	r3, [r2, #0]
 800ef60:	f023 0301 	bic.w	r3, r3, #1
 800ef64:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800ef66:	6803      	ldr	r3, [r0, #0]
 800ef68:	2500      	movs	r5, #0
 800ef6a:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800ef6c:	6803      	ldr	r3, [r0, #0]
 800ef6e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800ef70:	6803      	ldr	r3, [r0, #0]
 800ef72:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800ef74:	f7f2 feaa 	bl	8001ccc <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef78:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800ef7a:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800ef7c:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800ef7e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 800ef82:	4628      	mov	r0, r5
}
 800ef84:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ef86:	2001      	movs	r0, #1
}
 800ef88:	4770      	bx	lr
	...

0800ef8c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800ef8c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ef8e:	2b20      	cmp	r3, #32
 800ef90:	d128      	bne.n	800efe4 <HAL_UART_Transmit_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 800ef92:	b349      	cbz	r1, 800efe8 <HAL_UART_Transmit_IT+0x5c>
 800ef94:	b352      	cbz	r2, 800efec <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 800ef96:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d028      	beq.n	800eff0 <HAL_UART_Transmit_IT+0x64>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 800efa4:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800efa6:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800efaa:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 800efae:	2300      	movs	r3, #0
 800efb0:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efb2:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800efb4:	2321      	movs	r3, #33	; 0x21
 800efb6:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efb8:	6883      	ldr	r3, [r0, #8]
 800efba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efbe:	d00b      	beq.n	800efd8 <HAL_UART_Transmit_IT+0x4c>
      huart->TxISR = UART_TxISR_8BIT;
 800efc0:	4b0c      	ldr	r3, [pc, #48]	; (800eff4 <HAL_UART_Transmit_IT+0x68>)
 800efc2:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 800efc4:	2300      	movs	r3, #0
 800efc6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800efca:	6801      	ldr	r1, [r0, #0]
 800efcc:	680a      	ldr	r2, [r1, #0]
 800efce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800efd2:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800efd4:	4618      	mov	r0, r3
 800efd6:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efd8:	6903      	ldr	r3, [r0, #16]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1f0      	bne.n	800efc0 <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 800efde:	4b06      	ldr	r3, [pc, #24]	; (800eff8 <HAL_UART_Transmit_IT+0x6c>)
 800efe0:	6643      	str	r3, [r0, #100]	; 0x64
 800efe2:	e7ef      	b.n	800efc4 <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 800efe4:	2002      	movs	r0, #2
 800efe6:	4770      	bx	lr
      return HAL_ERROR;
 800efe8:	2001      	movs	r0, #1
 800efea:	4770      	bx	lr
 800efec:	2001      	movs	r0, #1
 800efee:	4770      	bx	lr
    __HAL_LOCK(huart);
 800eff0:	2002      	movs	r0, #2
}
 800eff2:	4770      	bx	lr
 800eff4:	0800eec7 	.word	0x0800eec7
 800eff8:	0800ef09 	.word	0x0800ef09

0800effc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800effc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800effe:	2b20      	cmp	r3, #32
 800f000:	d15a      	bne.n	800f0b8 <HAL_UART_Receive_IT+0xbc>
    if ((pData == NULL) || (Size == 0U))
 800f002:	2900      	cmp	r1, #0
 800f004:	d05a      	beq.n	800f0bc <HAL_UART_Receive_IT+0xc0>
 800f006:	2a00      	cmp	r2, #0
 800f008:	d05a      	beq.n	800f0c0 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 800f00a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d058      	beq.n	800f0c4 <HAL_UART_Receive_IT+0xc8>
 800f012:	2301      	movs	r3, #1
 800f014:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 800f018:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 800f01a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800f01e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 800f022:	2300      	movs	r3, #0
 800f024:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800f026:	6883      	ldr	r3, [r0, #8]
 800f028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f02c:	d006      	beq.n	800f03c <HAL_UART_Receive_IT+0x40>
 800f02e:	b9a3      	cbnz	r3, 800f05a <HAL_UART_Receive_IT+0x5e>
 800f030:	6903      	ldr	r3, [r0, #16]
 800f032:	b973      	cbnz	r3, 800f052 <HAL_UART_Receive_IT+0x56>
 800f034:	23ff      	movs	r3, #255	; 0xff
 800f036:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f03a:	e014      	b.n	800f066 <HAL_UART_Receive_IT+0x6a>
 800f03c:	6903      	ldr	r3, [r0, #16]
 800f03e:	b923      	cbnz	r3, 800f04a <HAL_UART_Receive_IT+0x4e>
 800f040:	f240 13ff 	movw	r3, #511	; 0x1ff
 800f044:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f048:	e00d      	b.n	800f066 <HAL_UART_Receive_IT+0x6a>
 800f04a:	23ff      	movs	r3, #255	; 0xff
 800f04c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f050:	e009      	b.n	800f066 <HAL_UART_Receive_IT+0x6a>
 800f052:	237f      	movs	r3, #127	; 0x7f
 800f054:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f058:	e005      	b.n	800f066 <HAL_UART_Receive_IT+0x6a>
 800f05a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f05e:	d01b      	beq.n	800f098 <HAL_UART_Receive_IT+0x9c>
 800f060:	2300      	movs	r3, #0
 800f062:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f066:	2300      	movs	r3, #0
 800f068:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f06a:	2322      	movs	r3, #34	; 0x22
 800f06c:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f06e:	6802      	ldr	r2, [r0, #0]
 800f070:	6893      	ldr	r3, [r2, #8]
 800f072:	f043 0301 	orr.w	r3, r3, #1
 800f076:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f078:	6883      	ldr	r3, [r0, #8]
 800f07a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f07e:	d015      	beq.n	800f0ac <HAL_UART_Receive_IT+0xb0>
      huart->RxISR = UART_RxISR_8BIT;
 800f080:	4b11      	ldr	r3, [pc, #68]	; (800f0c8 <HAL_UART_Receive_IT+0xcc>)
 800f082:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 800f084:	2300      	movs	r3, #0
 800f086:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f08a:	6801      	ldr	r1, [r0, #0]
 800f08c:	680a      	ldr	r2, [r1, #0]
 800f08e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f092:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800f094:	4618      	mov	r0, r3
 800f096:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800f098:	6903      	ldr	r3, [r0, #16]
 800f09a:	b91b      	cbnz	r3, 800f0a4 <HAL_UART_Receive_IT+0xa8>
 800f09c:	237f      	movs	r3, #127	; 0x7f
 800f09e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f0a2:	e7e0      	b.n	800f066 <HAL_UART_Receive_IT+0x6a>
 800f0a4:	233f      	movs	r3, #63	; 0x3f
 800f0a6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f0aa:	e7dc      	b.n	800f066 <HAL_UART_Receive_IT+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0ac:	6903      	ldr	r3, [r0, #16]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1e6      	bne.n	800f080 <HAL_UART_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 800f0b2:	4b06      	ldr	r3, [pc, #24]	; (800f0cc <HAL_UART_Receive_IT+0xd0>)
 800f0b4:	6603      	str	r3, [r0, #96]	; 0x60
 800f0b6:	e7e5      	b.n	800f084 <HAL_UART_Receive_IT+0x88>
    return HAL_BUSY;
 800f0b8:	2002      	movs	r0, #2
 800f0ba:	4770      	bx	lr
      return HAL_ERROR;
 800f0bc:	2001      	movs	r0, #1
 800f0be:	4770      	bx	lr
 800f0c0:	2001      	movs	r0, #1
 800f0c2:	4770      	bx	lr
    __HAL_LOCK(huart);
 800f0c4:	2002      	movs	r0, #2
}
 800f0c6:	4770      	bx	lr
 800f0c8:	0800f50f 	.word	0x0800f50f
 800f0cc:	0800f56f 	.word	0x0800f56f

0800f0d0 <HAL_UART_Transmit_DMA>:
{
 800f0d0:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800f0d2:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800f0d4:	2c20      	cmp	r4, #32
 800f0d6:	d13e      	bne.n	800f156 <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 800f0d8:	2900      	cmp	r1, #0
 800f0da:	d03e      	beq.n	800f15a <HAL_UART_Transmit_DMA+0x8a>
 800f0dc:	2a00      	cmp	r2, #0
 800f0de:	d03e      	beq.n	800f15e <HAL_UART_Transmit_DMA+0x8e>
    __HAL_LOCK(huart);
 800f0e0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d03c      	beq.n	800f162 <HAL_UART_Transmit_DMA+0x92>
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 800f0f2:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f0f4:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800f0f8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f100:	2221      	movs	r2, #33	; 0x21
 800f102:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 800f104:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f106:	b18a      	cbz	r2, 800f12c <HAL_UART_Transmit_DMA+0x5c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f108:	4917      	ldr	r1, [pc, #92]	; (800f168 <HAL_UART_Transmit_DMA+0x98>)
 800f10a:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f10c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f10e:	4917      	ldr	r1, [pc, #92]	; (800f16c <HAL_UART_Transmit_DMA+0x9c>)
 800f110:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f112:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f114:	4916      	ldr	r1, [pc, #88]	; (800f170 <HAL_UART_Transmit_DMA+0xa0>)
 800f116:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800f118:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f11a:	2100      	movs	r1, #0
 800f11c:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f11e:	6802      	ldr	r2, [r0, #0]
 800f120:	3228      	adds	r2, #40	; 0x28
 800f122:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f124:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f126:	f7f3 fb28 	bl	800277a <HAL_DMA_Start_IT>
 800f12a:	b958      	cbnz	r0, 800f144 <HAL_UART_Transmit_DMA+0x74>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	2240      	movs	r2, #64	; 0x40
 800f130:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800f132:	2000      	movs	r0, #0
 800f134:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f138:	6822      	ldr	r2, [r4, #0]
 800f13a:	6893      	ldr	r3, [r2, #8]
 800f13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f140:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800f142:	e009      	b.n	800f158 <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f144:	2310      	movs	r3, #16
 800f146:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800f148:	2300      	movs	r3, #0
 800f14a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 800f14e:	2320      	movs	r3, #32
 800f150:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 800f152:	2001      	movs	r0, #1
 800f154:	e000      	b.n	800f158 <HAL_UART_Transmit_DMA+0x88>
    return HAL_BUSY;
 800f156:	2002      	movs	r0, #2
}
 800f158:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800f15a:	2001      	movs	r0, #1
 800f15c:	e7fc      	b.n	800f158 <HAL_UART_Transmit_DMA+0x88>
 800f15e:	2001      	movs	r0, #1
 800f160:	e7fa      	b.n	800f158 <HAL_UART_Transmit_DMA+0x88>
    __HAL_LOCK(huart);
 800f162:	2002      	movs	r0, #2
 800f164:	e7f8      	b.n	800f158 <HAL_UART_Transmit_DMA+0x88>
 800f166:	bf00      	nop
 800f168:	0800f4cf 	.word	0x0800f4cf
 800f16c:	0800f503 	.word	0x0800f503
 800f170:	0800f61b 	.word	0x0800f61b

0800f174 <HAL_UART_Receive_DMA>:
{
 800f174:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800f176:	6f84      	ldr	r4, [r0, #120]	; 0x78
 800f178:	2c20      	cmp	r4, #32
 800f17a:	d143      	bne.n	800f204 <HAL_UART_Receive_DMA+0x90>
    if ((pData == NULL) || (Size == 0U))
 800f17c:	2900      	cmp	r1, #0
 800f17e:	d043      	beq.n	800f208 <HAL_UART_Receive_DMA+0x94>
 800f180:	2a00      	cmp	r2, #0
 800f182:	d043      	beq.n	800f20c <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 800f184:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d041      	beq.n	800f210 <HAL_UART_Receive_DMA+0x9c>
 800f18c:	4613      	mov	r3, r2
 800f18e:	4604      	mov	r4, r0
 800f190:	2201      	movs	r2, #1
 800f192:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pRxBuffPtr = pData;
 800f196:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800f198:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f19c:	2200      	movs	r2, #0
 800f19e:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f1a0:	2222      	movs	r2, #34	; 0x22
 800f1a2:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800f1a4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f1a6:	b18a      	cbz	r2, 800f1cc <HAL_UART_Receive_DMA+0x58>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f1a8:	491a      	ldr	r1, [pc, #104]	; (800f214 <HAL_UART_Receive_DMA+0xa0>)
 800f1aa:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f1ac:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f1ae:	491a      	ldr	r1, [pc, #104]	; (800f218 <HAL_UART_Receive_DMA+0xa4>)
 800f1b0:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f1b2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f1b4:	4919      	ldr	r1, [pc, #100]	; (800f21c <HAL_UART_Receive_DMA+0xa8>)
 800f1b6:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmarx->XferAbortCallback = NULL;
 800f1b8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f1be:	6801      	ldr	r1, [r0, #0]
 800f1c0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f1c2:	3124      	adds	r1, #36	; 0x24
 800f1c4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f1c6:	f7f3 fad8 	bl	800277a <HAL_DMA_Start_IT>
 800f1ca:	b990      	cbnz	r0, 800f1f2 <HAL_UART_Receive_DMA+0x7e>
    __HAL_UNLOCK(huart);
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1d2:	6822      	ldr	r2, [r4, #0]
 800f1d4:	6813      	ldr	r3, [r2, #0]
 800f1d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f1da:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1dc:	6822      	ldr	r2, [r4, #0]
 800f1de:	6893      	ldr	r3, [r2, #8]
 800f1e0:	f043 0301 	orr.w	r3, r3, #1
 800f1e4:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1e6:	6822      	ldr	r2, [r4, #0]
 800f1e8:	6893      	ldr	r3, [r2, #8]
 800f1ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1ee:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800f1f0:	e009      	b.n	800f206 <HAL_UART_Receive_DMA+0x92>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f1f2:	2310      	movs	r3, #16
 800f1f4:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 800f1fc:	2320      	movs	r3, #32
 800f1fe:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 800f200:	2001      	movs	r0, #1
 800f202:	e000      	b.n	800f206 <HAL_UART_Receive_DMA+0x92>
    return HAL_BUSY;
 800f204:	2002      	movs	r0, #2
}
 800f206:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800f208:	2001      	movs	r0, #1
 800f20a:	e7fc      	b.n	800f206 <HAL_UART_Receive_DMA+0x92>
 800f20c:	2001      	movs	r0, #1
 800f20e:	e7fa      	b.n	800f206 <HAL_UART_Receive_DMA+0x92>
    __HAL_LOCK(huart);
 800f210:	2002      	movs	r0, #2
 800f212:	e7f8      	b.n	800f206 <HAL_UART_Receive_DMA+0x92>
 800f214:	0800f5cf 	.word	0x0800f5cf
 800f218:	0800f60f 	.word	0x0800f60f
 800f21c:	0800f61b 	.word	0x0800f61b

0800f220 <HAL_UART_DMAPause>:
{
 800f220:	b410      	push	{r4}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f222:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f224:	6f81      	ldr	r1, [r0, #120]	; 0x78
  __HAL_LOCK(huart);
 800f226:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d02b      	beq.n	800f286 <HAL_UART_DMAPause+0x66>
 800f22e:	2301      	movs	r3, #1
 800f230:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f234:	6803      	ldr	r3, [r0, #0]
 800f236:	689a      	ldr	r2, [r3, #8]
 800f238:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f23c:	d001      	beq.n	800f242 <HAL_UART_DMAPause+0x22>
 800f23e:	2c21      	cmp	r4, #33	; 0x21
 800f240:	d00d      	beq.n	800f25e <HAL_UART_DMAPause+0x3e>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f242:	6803      	ldr	r3, [r0, #0]
 800f244:	689a      	ldr	r2, [r3, #8]
 800f246:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f24a:	d001      	beq.n	800f250 <HAL_UART_DMAPause+0x30>
 800f24c:	2922      	cmp	r1, #34	; 0x22
 800f24e:	d00b      	beq.n	800f268 <HAL_UART_DMAPause+0x48>
  __HAL_UNLOCK(huart);
 800f250:	2300      	movs	r3, #0
 800f252:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800f256:	4618      	mov	r0, r3
}
 800f258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f25c:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f25e:	689a      	ldr	r2, [r3, #8]
 800f260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f264:	609a      	str	r2, [r3, #8]
 800f266:	e7ec      	b.n	800f242 <HAL_UART_DMAPause+0x22>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f26e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f270:	6802      	ldr	r2, [r0, #0]
 800f272:	6893      	ldr	r3, [r2, #8]
 800f274:	f023 0301 	bic.w	r3, r3, #1
 800f278:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f27a:	6802      	ldr	r2, [r0, #0]
 800f27c:	6893      	ldr	r3, [r2, #8]
 800f27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f282:	6093      	str	r3, [r2, #8]
 800f284:	e7e4      	b.n	800f250 <HAL_UART_DMAPause+0x30>
  __HAL_LOCK(huart);
 800f286:	2002      	movs	r0, #2
 800f288:	e7e6      	b.n	800f258 <HAL_UART_DMAPause+0x38>

0800f28a <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 800f28a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d026      	beq.n	800f2e0 <HAL_UART_DMAResume+0x56>
 800f292:	2301      	movs	r3, #1
 800f294:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f298:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800f29a:	2b21      	cmp	r3, #33	; 0x21
 800f29c:	d007      	beq.n	800f2ae <HAL_UART_DMAResume+0x24>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f29e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800f2a0:	2b22      	cmp	r3, #34	; 0x22
 800f2a2:	d00a      	beq.n	800f2ba <HAL_UART_DMAResume+0x30>
  __HAL_UNLOCK(huart);
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	4770      	bx	lr
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2ae:	6802      	ldr	r2, [r0, #0]
 800f2b0:	6893      	ldr	r3, [r2, #8]
 800f2b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2b6:	6093      	str	r3, [r2, #8]
 800f2b8:	e7f1      	b.n	800f29e <HAL_UART_DMAResume+0x14>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2ba:	6803      	ldr	r3, [r0, #0]
 800f2bc:	2208      	movs	r2, #8
 800f2be:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2c0:	6802      	ldr	r2, [r0, #0]
 800f2c2:	6813      	ldr	r3, [r2, #0]
 800f2c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2c8:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ca:	6802      	ldr	r2, [r0, #0]
 800f2cc:	6893      	ldr	r3, [r2, #8]
 800f2ce:	f043 0301 	orr.w	r3, r3, #1
 800f2d2:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2d4:	6802      	ldr	r2, [r0, #0]
 800f2d6:	6893      	ldr	r3, [r2, #8]
 800f2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2dc:	6093      	str	r3, [r2, #8]
 800f2de:	e7e1      	b.n	800f2a4 <HAL_UART_DMAResume+0x1a>
  __HAL_LOCK(huart);
 800f2e0:	2002      	movs	r0, #2
}
 800f2e2:	4770      	bx	lr

0800f2e4 <HAL_UART_DMAStop>:
{
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f2e8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f2ea:	6f85      	ldr	r5, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f2ec:	6803      	ldr	r3, [r0, #0]
 800f2ee:	689a      	ldr	r2, [r3, #8]
 800f2f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f2f4:	d001      	beq.n	800f2fa <HAL_UART_DMAStop+0x16>
 800f2f6:	2921      	cmp	r1, #33	; 0x21
 800f2f8:	d008      	beq.n	800f30c <HAL_UART_DMAStop+0x28>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f2fa:	6823      	ldr	r3, [r4, #0]
 800f2fc:	689a      	ldr	r2, [r3, #8]
 800f2fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f302:	d034      	beq.n	800f36e <HAL_UART_DMAStop+0x8a>
 800f304:	2d22      	cmp	r5, #34	; 0x22
 800f306:	d01b      	beq.n	800f340 <HAL_UART_DMAStop+0x5c>
  return HAL_OK;
 800f308:	2000      	movs	r0, #0
 800f30a:	e031      	b.n	800f370 <HAL_UART_DMAStop+0x8c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f30c:	689a      	ldr	r2, [r3, #8]
 800f30e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f312:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f314:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f316:	b110      	cbz	r0, 800f31e <HAL_UART_DMAStop+0x3a>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f318:	f7f3 fa7c 	bl	8002814 <HAL_DMA_Abort>
 800f31c:	b938      	cbnz	r0, 800f32e <HAL_UART_DMAStop+0x4a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f31e:	6822      	ldr	r2, [r4, #0]
 800f320:	6813      	ldr	r3, [r2, #0]
 800f322:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f326:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f328:	2320      	movs	r3, #32
 800f32a:	6763      	str	r3, [r4, #116]	; 0x74
 800f32c:	e7e5      	b.n	800f2fa <HAL_UART_DMAStop+0x16>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f32e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f330:	f7f3 fbe9 	bl	8002b06 <HAL_DMA_GetError>
 800f334:	2820      	cmp	r0, #32
 800f336:	d1f2      	bne.n	800f31e <HAL_UART_DMAStop+0x3a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f338:	2310      	movs	r3, #16
 800f33a:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f33c:	2003      	movs	r0, #3
 800f33e:	e017      	b.n	800f370 <HAL_UART_DMAStop+0x8c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f340:	689a      	ldr	r2, [r3, #8]
 800f342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f346:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f348:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f34a:	b110      	cbz	r0, 800f352 <HAL_UART_DMAStop+0x6e>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f34c:	f7f3 fa62 	bl	8002814 <HAL_DMA_Abort>
 800f350:	b920      	cbnz	r0, 800f35c <HAL_UART_DMAStop+0x78>
    UART_EndRxTransfer(huart);
 800f352:	4620      	mov	r0, r4
 800f354:	f7ff fda8 	bl	800eea8 <UART_EndRxTransfer>
  return HAL_OK;
 800f358:	2000      	movs	r0, #0
 800f35a:	e009      	b.n	800f370 <HAL_UART_DMAStop+0x8c>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f35c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f35e:	f7f3 fbd2 	bl	8002b06 <HAL_DMA_GetError>
 800f362:	2820      	cmp	r0, #32
 800f364:	d1f5      	bne.n	800f352 <HAL_UART_DMAStop+0x6e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f366:	2310      	movs	r3, #16
 800f368:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f36a:	2003      	movs	r0, #3
 800f36c:	e000      	b.n	800f370 <HAL_UART_DMAStop+0x8c>
  return HAL_OK;
 800f36e:	2000      	movs	r0, #0
}
 800f370:	bd38      	pop	{r3, r4, r5, pc}

0800f372 <HAL_UART_Abort>:
{
 800f372:	b510      	push	{r4, lr}
 800f374:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f376:	6802      	ldr	r2, [r0, #0]
 800f378:	6813      	ldr	r3, [r2, #0]
 800f37a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800f37e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f380:	6802      	ldr	r2, [r0, #0]
 800f382:	6893      	ldr	r3, [r2, #8]
 800f384:	f023 0301 	bic.w	r3, r3, #1
 800f388:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f38a:	6803      	ldr	r3, [r0, #0]
 800f38c:	689a      	ldr	r2, [r3, #8]
 800f38e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f392:	d00b      	beq.n	800f3ac <HAL_UART_Abort+0x3a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f394:	689a      	ldr	r2, [r3, #8]
 800f396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f39a:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f39c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f39e:	b12b      	cbz	r3, 800f3ac <HAL_UART_Abort+0x3a>
      huart->hdmatx->XferAbortCallback = NULL;
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f3a4:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f3a6:	f7f3 fa35 	bl	8002814 <HAL_DMA_Abort>
 800f3aa:	bb10      	cbnz	r0, 800f3f2 <HAL_UART_Abort+0x80>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	689a      	ldr	r2, [r3, #8]
 800f3b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f3b4:	d00b      	beq.n	800f3ce <HAL_UART_Abort+0x5c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f3b6:	689a      	ldr	r2, [r3, #8]
 800f3b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f3bc:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f3be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f3c0:	b12b      	cbz	r3, 800f3ce <HAL_UART_Abort+0x5c>
      huart->hdmarx->XferAbortCallback = NULL;
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f3c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f3c8:	f7f3 fa24 	bl	8002814 <HAL_DMA_Abort>
 800f3cc:	b9d0      	cbnz	r0, 800f404 <HAL_UART_Abort+0x92>
  huart->TxXferCount = 0U;
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
  huart->RxXferCount = 0U;
 800f3d4:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f3d8:	6823      	ldr	r3, [r4, #0]
 800f3da:	220f      	movs	r2, #15
 800f3dc:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3de:	6822      	ldr	r2, [r4, #0]
 800f3e0:	8b13      	ldrh	r3, [r2, #24]
 800f3e2:	f043 0308 	orr.w	r3, r3, #8
 800f3e6:	8313      	strh	r3, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800f3e8:	2320      	movs	r3, #32
 800f3ea:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f3ec:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3ee:	67e0      	str	r0, [r4, #124]	; 0x7c
}
 800f3f0:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f3f2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f3f4:	f7f3 fb87 	bl	8002b06 <HAL_DMA_GetError>
 800f3f8:	2820      	cmp	r0, #32
 800f3fa:	d1d7      	bne.n	800f3ac <HAL_UART_Abort+0x3a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f3fc:	2310      	movs	r3, #16
 800f3fe:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f400:	2003      	movs	r0, #3
 800f402:	e7f5      	b.n	800f3f0 <HAL_UART_Abort+0x7e>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f404:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f406:	f7f3 fb7e 	bl	8002b06 <HAL_DMA_GetError>
 800f40a:	2820      	cmp	r0, #32
 800f40c:	d1df      	bne.n	800f3ce <HAL_UART_Abort+0x5c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f40e:	2310      	movs	r3, #16
 800f410:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f412:	2003      	movs	r0, #3
 800f414:	e7ec      	b.n	800f3f0 <HAL_UART_Abort+0x7e>

0800f416 <HAL_UART_AbortTransmit>:
{
 800f416:	b510      	push	{r4, lr}
 800f418:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f41a:	6802      	ldr	r2, [r0, #0]
 800f41c:	6813      	ldr	r3, [r2, #0]
 800f41e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f422:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f424:	6803      	ldr	r3, [r0, #0]
 800f426:	689a      	ldr	r2, [r3, #8]
 800f428:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f42c:	d00b      	beq.n	800f446 <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f42e:	689a      	ldr	r2, [r3, #8]
 800f430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f434:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f436:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f438:	b12b      	cbz	r3, 800f446 <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 800f43a:	2200      	movs	r2, #0
 800f43c:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f43e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f440:	f7f3 f9e8 	bl	8002814 <HAL_DMA_Abort>
 800f444:	b928      	cbnz	r0, 800f452 <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0U;
 800f446:	2000      	movs	r0, #0
 800f448:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
  huart->gState = HAL_UART_STATE_READY;
 800f44c:	2320      	movs	r3, #32
 800f44e:	6763      	str	r3, [r4, #116]	; 0x74
}
 800f450:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f452:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f454:	f7f3 fb57 	bl	8002b06 <HAL_DMA_GetError>
 800f458:	2820      	cmp	r0, #32
 800f45a:	d1f4      	bne.n	800f446 <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f45c:	2310      	movs	r3, #16
 800f45e:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f460:	2003      	movs	r0, #3
 800f462:	e7f5      	b.n	800f450 <HAL_UART_AbortTransmit+0x3a>

0800f464 <HAL_UART_AbortReceive>:
{
 800f464:	b510      	push	{r4, lr}
 800f466:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f468:	6802      	ldr	r2, [r0, #0]
 800f46a:	6813      	ldr	r3, [r2, #0]
 800f46c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f470:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f472:	6802      	ldr	r2, [r0, #0]
 800f474:	6893      	ldr	r3, [r2, #8]
 800f476:	f023 0301 	bic.w	r3, r3, #1
 800f47a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f47c:	6803      	ldr	r3, [r0, #0]
 800f47e:	689a      	ldr	r2, [r3, #8]
 800f480:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f484:	d00b      	beq.n	800f49e <HAL_UART_AbortReceive+0x3a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f486:	689a      	ldr	r2, [r3, #8]
 800f488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f48c:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f48e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f490:	b12b      	cbz	r3, 800f49e <HAL_UART_AbortReceive+0x3a>
      huart->hdmarx->XferAbortCallback = NULL;
 800f492:	2200      	movs	r2, #0
 800f494:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f496:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f498:	f7f3 f9bc 	bl	8002814 <HAL_DMA_Abort>
 800f49c:	b968      	cbnz	r0, 800f4ba <HAL_UART_AbortReceive+0x56>
  huart->RxXferCount = 0U;
 800f49e:	2000      	movs	r0, #0
 800f4a0:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	220f      	movs	r2, #15
 800f4a8:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f4aa:	6822      	ldr	r2, [r4, #0]
 800f4ac:	8b13      	ldrh	r3, [r2, #24]
 800f4ae:	f043 0308 	orr.w	r3, r3, #8
 800f4b2:	8313      	strh	r3, [r2, #24]
  huart->RxState = HAL_UART_STATE_READY;
 800f4b4:	2320      	movs	r3, #32
 800f4b6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800f4b8:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f4ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f4bc:	f7f3 fb23 	bl	8002b06 <HAL_DMA_GetError>
 800f4c0:	2820      	cmp	r0, #32
 800f4c2:	d1ec      	bne.n	800f49e <HAL_UART_AbortReceive+0x3a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f4c4:	2310      	movs	r3, #16
 800f4c6:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f4c8:	2003      	movs	r0, #3
 800f4ca:	e7f5      	b.n	800f4b8 <HAL_UART_AbortReceive+0x54>

0800f4cc <HAL_UART_TxCpltCallback>:
}
 800f4cc:	4770      	bx	lr

0800f4ce <UART_DMATransmitCplt>:
{
 800f4ce:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f4d2:	6802      	ldr	r2, [r0, #0]
 800f4d4:	6812      	ldr	r2, [r2, #0]
 800f4d6:	f012 0f20 	tst.w	r2, #32
 800f4da:	d10d      	bne.n	800f4f8 <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0U;
 800f4dc:	2200      	movs	r2, #0
 800f4de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f4e2:	6819      	ldr	r1, [r3, #0]
 800f4e4:	688a      	ldr	r2, [r1, #8]
 800f4e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f4ea:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	6813      	ldr	r3, [r2, #0]
 800f4f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4f4:	6013      	str	r3, [r2, #0]
}
 800f4f6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7ff ffe7 	bl	800f4cc <HAL_UART_TxCpltCallback>
}
 800f4fe:	e7fa      	b.n	800f4f6 <UART_DMATransmitCplt+0x28>

0800f500 <HAL_UART_TxHalfCpltCallback>:
}
 800f500:	4770      	bx	lr

0800f502 <UART_DMATxHalfCplt>:
{
 800f502:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800f504:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f506:	f7ff fffb 	bl	800f500 <HAL_UART_TxHalfCpltCallback>
}
 800f50a:	bd08      	pop	{r3, pc}
}
 800f50c:	4770      	bx	lr

0800f50e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f50e:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f510:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800f512:	2b22      	cmp	r3, #34	; 0x22
 800f514:	d005      	beq.n	800f522 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f516:	6802      	ldr	r2, [r0, #0]
 800f518:	8b13      	ldrh	r3, [r2, #24]
 800f51a:	f043 0308 	orr.w	r3, r3, #8
 800f51e:	8313      	strh	r3, [r2, #24]
  }
}
 800f520:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f522:	6803      	ldr	r3, [r0, #0]
 800f524:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f526:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f528:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
 800f52c:	400b      	ands	r3, r1
 800f52e:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800f530:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800f532:	3301      	adds	r3, #1
 800f534:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800f536:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800f53a:	3b01      	subs	r3, #1
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800f542:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800f546:	b29b      	uxth	r3, r3
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1e9      	bne.n	800f520 <UART_RxISR_8BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f54c:	6802      	ldr	r2, [r0, #0]
 800f54e:	6813      	ldr	r3, [r2, #0]
 800f550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f554:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f556:	6802      	ldr	r2, [r0, #0]
 800f558:	6893      	ldr	r3, [r2, #8]
 800f55a:	f023 0301 	bic.w	r3, r3, #1
 800f55e:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800f560:	2320      	movs	r3, #32
 800f562:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 800f564:	2300      	movs	r3, #0
 800f566:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800f568:	f7f1 f9a2 	bl	80008b0 <HAL_UART_RxCpltCallback>
 800f56c:	e7d8      	b.n	800f520 <UART_RxISR_8BIT+0x12>

0800f56e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f56e:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f570:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800f572:	2b22      	cmp	r3, #34	; 0x22
 800f574:	d005      	beq.n	800f582 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f576:	6802      	ldr	r2, [r0, #0]
 800f578:	8b13      	ldrh	r3, [r2, #24]
 800f57a:	f043 0308 	orr.w	r3, r3, #8
 800f57e:	8313      	strh	r3, [r2, #24]
  }
}
 800f580:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f582:	6803      	ldr	r3, [r0, #0]
 800f584:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f586:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 800f588:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800f58c:	400b      	ands	r3, r1
 800f58e:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 800f590:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800f592:	3302      	adds	r3, #2
 800f594:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800f596:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800f59a:	3b01      	subs	r3, #1
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800f5a2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d1e9      	bne.n	800f580 <UART_RxISR_16BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f5ac:	6802      	ldr	r2, [r0, #0]
 800f5ae:	6813      	ldr	r3, [r2, #0]
 800f5b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5b4:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5b6:	6802      	ldr	r2, [r0, #0]
 800f5b8:	6893      	ldr	r3, [r2, #8]
 800f5ba:	f023 0301 	bic.w	r3, r3, #1
 800f5be:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800f5c0:	2320      	movs	r3, #32
 800f5c2:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800f5c8:	f7f1 f972 	bl	80008b0 <HAL_UART_RxCpltCallback>
 800f5cc:	e7d8      	b.n	800f580 <UART_RxISR_16BIT+0x12>

0800f5ce <UART_DMAReceiveCplt>:
{
 800f5ce:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f5d2:	6802      	ldr	r2, [r0, #0]
 800f5d4:	6812      	ldr	r2, [r2, #0]
 800f5d6:	f012 0f20 	tst.w	r2, #32
 800f5da:	d113      	bne.n	800f604 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 800f5dc:	2200      	movs	r2, #0
 800f5de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5e2:	6819      	ldr	r1, [r3, #0]
 800f5e4:	680a      	ldr	r2, [r1, #0]
 800f5e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f5ea:	600a      	str	r2, [r1, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5ec:	6819      	ldr	r1, [r3, #0]
 800f5ee:	688a      	ldr	r2, [r1, #8]
 800f5f0:	f022 0201 	bic.w	r2, r2, #1
 800f5f4:	608a      	str	r2, [r1, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5f6:	6819      	ldr	r1, [r3, #0]
 800f5f8:	688a      	ldr	r2, [r1, #8]
 800f5fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f5fe:	608a      	str	r2, [r1, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800f600:	2220      	movs	r2, #32
 800f602:	679a      	str	r2, [r3, #120]	; 0x78
  HAL_UART_RxCpltCallback(huart);
 800f604:	4618      	mov	r0, r3
 800f606:	f7f1 f953 	bl	80008b0 <HAL_UART_RxCpltCallback>
}
 800f60a:	bd08      	pop	{r3, pc}

0800f60c <HAL_UART_RxHalfCpltCallback>:
}
 800f60c:	4770      	bx	lr

0800f60e <UART_DMARxHalfCplt>:
{
 800f60e:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800f610:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f612:	f7ff fffb 	bl	800f60c <HAL_UART_RxHalfCpltCallback>
}
 800f616:	bd08      	pop	{r3, pc}

0800f618 <HAL_UART_ErrorCallback>:
}
 800f618:	4770      	bx	lr

0800f61a <UART_DMAError>:
{
 800f61a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f61c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f61e:	6f60      	ldr	r0, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f620:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f622:	6823      	ldr	r3, [r4, #0]
 800f624:	689a      	ldr	r2, [r3, #8]
 800f626:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f62a:	d001      	beq.n	800f630 <UART_DMAError+0x16>
 800f62c:	2821      	cmp	r0, #33	; 0x21
 800f62e:	d00e      	beq.n	800f64e <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f630:	6823      	ldr	r3, [r4, #0]
 800f632:	689b      	ldr	r3, [r3, #8]
 800f634:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f638:	d001      	beq.n	800f63e <UART_DMAError+0x24>
 800f63a:	2922      	cmp	r1, #34	; 0x22
 800f63c:	d011      	beq.n	800f662 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f63e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f640:	f043 0310 	orr.w	r3, r3, #16
 800f644:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800f646:	4620      	mov	r0, r4
 800f648:	f7ff ffe6 	bl	800f618 <HAL_UART_ErrorCallback>
}
 800f64c:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800f64e:	2200      	movs	r2, #0
 800f650:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f65a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f65c:	2320      	movs	r3, #32
 800f65e:	6763      	str	r3, [r4, #116]	; 0x74
 800f660:	e7e6      	b.n	800f630 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 800f662:	2300      	movs	r3, #0
 800f664:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f668:	4620      	mov	r0, r4
 800f66a:	f7ff fc1d 	bl	800eea8 <UART_EndRxTransfer>
 800f66e:	e7e6      	b.n	800f63e <UART_DMAError+0x24>

0800f670 <HAL_UART_IRQHandler>:
{
 800f670:	b538      	push	{r3, r4, r5, lr}
 800f672:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f674:	6802      	ldr	r2, [r0, #0]
 800f676:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f678:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f67a:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800f67c:	f013 0f0f 	tst.w	r3, #15
 800f680:	d10c      	bne.n	800f69c <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f682:	f013 0f20 	tst.w	r3, #32
 800f686:	d07e      	beq.n	800f786 <HAL_UART_IRQHandler+0x116>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f688:	f011 0f20 	tst.w	r1, #32
 800f68c:	d07b      	beq.n	800f786 <HAL_UART_IRQHandler+0x116>
      if (huart->RxISR != NULL)
 800f68e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f690:	2b00      	cmp	r3, #0
 800f692:	f000 8096 	beq.w	800f7c2 <HAL_UART_IRQHandler+0x152>
        huart->RxISR(huart);
 800f696:	4620      	mov	r0, r4
 800f698:	4798      	blx	r3
 800f69a:	e092      	b.n	800f7c2 <HAL_UART_IRQHandler+0x152>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f69c:	f010 0501 	ands.w	r5, r0, #1
 800f6a0:	d102      	bne.n	800f6a8 <HAL_UART_IRQHandler+0x38>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800f6a2:	f411 7f90 	tst.w	r1, #288	; 0x120
 800f6a6:	d06e      	beq.n	800f786 <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6a8:	f013 0f01 	tst.w	r3, #1
 800f6ac:	d007      	beq.n	800f6be <HAL_UART_IRQHandler+0x4e>
 800f6ae:	f411 7f80 	tst.w	r1, #256	; 0x100
 800f6b2:	d004      	beq.n	800f6be <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6b4:	2001      	movs	r0, #1
 800f6b6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6b8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f6ba:	4302      	orrs	r2, r0
 800f6bc:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6be:	f013 0f02 	tst.w	r3, #2
 800f6c2:	d04c      	beq.n	800f75e <HAL_UART_IRQHandler+0xee>
 800f6c4:	b185      	cbz	r5, 800f6e8 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f6c6:	6822      	ldr	r2, [r4, #0]
 800f6c8:	2002      	movs	r0, #2
 800f6ca:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f6cc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f6ce:	f042 0204 	orr.w	r2, r2, #4
 800f6d2:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6d4:	f013 0f04 	tst.w	r3, #4
 800f6d8:	d006      	beq.n	800f6e8 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f6da:	6822      	ldr	r2, [r4, #0]
 800f6dc:	2004      	movs	r0, #4
 800f6de:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f6e0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f6e2:	f042 0202 	orr.w	r2, r2, #2
 800f6e6:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f6e8:	f013 0f08 	tst.w	r3, #8
 800f6ec:	d009      	beq.n	800f702 <HAL_UART_IRQHandler+0x92>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f6ee:	f011 0f20 	tst.w	r1, #32
 800f6f2:	d100      	bne.n	800f6f6 <HAL_UART_IRQHandler+0x86>
 800f6f4:	b12d      	cbz	r5, 800f702 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f6f6:	6822      	ldr	r2, [r4, #0]
 800f6f8:	2008      	movs	r0, #8
 800f6fa:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f6fc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f6fe:	4302      	orrs	r2, r0
 800f700:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f702:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f704:	2a00      	cmp	r2, #0
 800f706:	d05c      	beq.n	800f7c2 <HAL_UART_IRQHandler+0x152>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f708:	f013 0f20 	tst.w	r3, #32
 800f70c:	d006      	beq.n	800f71c <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f70e:	f011 0f20 	tst.w	r1, #32
 800f712:	d003      	beq.n	800f71c <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 800f714:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f716:	b10b      	cbz	r3, 800f71c <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 800f718:	4620      	mov	r0, r4
 800f71a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800f71c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f726:	d102      	bne.n	800f72e <HAL_UART_IRQHandler+0xbe>
 800f728:	f012 0f08 	tst.w	r2, #8
 800f72c:	d025      	beq.n	800f77a <HAL_UART_IRQHandler+0x10a>
        UART_EndRxTransfer(huart);
 800f72e:	4620      	mov	r0, r4
 800f730:	f7ff fbba 	bl	800eea8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f734:	6823      	ldr	r3, [r4, #0]
 800f736:	689a      	ldr	r2, [r3, #8]
 800f738:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f73c:	d019      	beq.n	800f772 <HAL_UART_IRQHandler+0x102>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f73e:	689a      	ldr	r2, [r3, #8]
 800f740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f744:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800f746:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f748:	b17b      	cbz	r3, 800f76a <HAL_UART_IRQHandler+0xfa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f74a:	4a24      	ldr	r2, [pc, #144]	; (800f7dc <HAL_UART_IRQHandler+0x16c>)
 800f74c:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f74e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f750:	f7f3 f885 	bl	800285e <HAL_DMA_Abort_IT>
 800f754:	b3a8      	cbz	r0, 800f7c2 <HAL_UART_IRQHandler+0x152>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f756:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f758:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f75a:	4798      	blx	r3
 800f75c:	e031      	b.n	800f7c2 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f75e:	f013 0f04 	tst.w	r3, #4
 800f762:	d0c1      	beq.n	800f6e8 <HAL_UART_IRQHandler+0x78>
 800f764:	2d00      	cmp	r5, #0
 800f766:	d1b8      	bne.n	800f6da <HAL_UART_IRQHandler+0x6a>
 800f768:	e7be      	b.n	800f6e8 <HAL_UART_IRQHandler+0x78>
            HAL_UART_ErrorCallback(huart);
 800f76a:	4620      	mov	r0, r4
 800f76c:	f7ff ff54 	bl	800f618 <HAL_UART_ErrorCallback>
 800f770:	e027      	b.n	800f7c2 <HAL_UART_IRQHandler+0x152>
          HAL_UART_ErrorCallback(huart);
 800f772:	4620      	mov	r0, r4
 800f774:	f7ff ff50 	bl	800f618 <HAL_UART_ErrorCallback>
 800f778:	e023      	b.n	800f7c2 <HAL_UART_IRQHandler+0x152>
        HAL_UART_ErrorCallback(huart);
 800f77a:	4620      	mov	r0, r4
 800f77c:	f7ff ff4c 	bl	800f618 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f780:	2300      	movs	r3, #0
 800f782:	67e3      	str	r3, [r4, #124]	; 0x7c
 800f784:	e01d      	b.n	800f7c2 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f786:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800f78a:	d002      	beq.n	800f792 <HAL_UART_IRQHandler+0x122>
 800f78c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800f790:	d10a      	bne.n	800f7a8 <HAL_UART_IRQHandler+0x138>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f792:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f796:	d00e      	beq.n	800f7b6 <HAL_UART_IRQHandler+0x146>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f798:	f011 0f80 	tst.w	r1, #128	; 0x80
 800f79c:	d00b      	beq.n	800f7b6 <HAL_UART_IRQHandler+0x146>
    if (huart->TxISR != NULL)
 800f79e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7a0:	b17b      	cbz	r3, 800f7c2 <HAL_UART_IRQHandler+0x152>
      huart->TxISR(huart);
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	4798      	blx	r3
 800f7a6:	e00c      	b.n	800f7c2 <HAL_UART_IRQHandler+0x152>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f7a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f7ac:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	f000 ff04 	bl	80105bc <HAL_UARTEx_WakeupCallback>
    return;
 800f7b4:	e005      	b.n	800f7c2 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f7b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f7ba:	d002      	beq.n	800f7c2 <HAL_UART_IRQHandler+0x152>
 800f7bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 800f7c0:	d100      	bne.n	800f7c4 <HAL_UART_IRQHandler+0x154>
}
 800f7c2:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f7c4:	6813      	ldr	r3, [r2, #0]
 800f7c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7ca:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f7cc:	2320      	movs	r3, #32
 800f7ce:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	f7ff fe79 	bl	800f4cc <HAL_UART_TxCpltCallback>
 800f7da:	e7f2      	b.n	800f7c2 <HAL_UART_IRQHandler+0x152>
 800f7dc:	0800f7e1 	.word	0x0800f7e1

0800f7e0 <UART_DMAAbortOnError>:
{
 800f7e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f7ea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800f7ee:	f7ff ff13 	bl	800f618 <HAL_UART_ErrorCallback>
}
 800f7f2:	bd08      	pop	{r3, pc}

0800f7f4 <HAL_UART_AbortCpltCallback>:
}
 800f7f4:	4770      	bx	lr
	...

0800f7f8 <HAL_UART_Abort_IT>:
{
 800f7f8:	b510      	push	{r4, lr}
 800f7fa:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f7fc:	6802      	ldr	r2, [r0, #0]
 800f7fe:	6813      	ldr	r3, [r2, #0]
 800f800:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800f804:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f806:	6802      	ldr	r2, [r0, #0]
 800f808:	6893      	ldr	r3, [r2, #8]
 800f80a:	f023 0301 	bic.w	r3, r3, #1
 800f80e:	6093      	str	r3, [r2, #8]
  if (huart->hdmatx != NULL)
 800f810:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f812:	b13b      	cbz	r3, 800f824 <HAL_UART_Abort_IT+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f814:	6802      	ldr	r2, [r0, #0]
 800f816:	6892      	ldr	r2, [r2, #8]
 800f818:	f012 0f80 	tst.w	r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800f81c:	bf14      	ite	ne
 800f81e:	4a2a      	ldrne	r2, [pc, #168]	; (800f8c8 <HAL_UART_Abort_IT+0xd0>)
      huart->hdmatx->XferAbortCallback = NULL;
 800f820:	2200      	moveq	r2, #0
 800f822:	639a      	str	r2, [r3, #56]	; 0x38
  if (huart->hdmarx != NULL)
 800f824:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f826:	b13b      	cbz	r3, 800f838 <HAL_UART_Abort_IT+0x40>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f828:	6822      	ldr	r2, [r4, #0]
 800f82a:	6892      	ldr	r2, [r2, #8]
 800f82c:	f012 0f40 	tst.w	r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800f830:	bf14      	ite	ne
 800f832:	4a26      	ldrne	r2, [pc, #152]	; (800f8cc <HAL_UART_Abort_IT+0xd4>)
      huart->hdmarx->XferAbortCallback = NULL;
 800f834:	2200      	moveq	r2, #0
 800f836:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f838:	6823      	ldr	r3, [r4, #0]
 800f83a:	689a      	ldr	r2, [r3, #8]
 800f83c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f840:	d00b      	beq.n	800f85a <HAL_UART_Abort_IT+0x62>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f842:	689a      	ldr	r2, [r3, #8]
 800f844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f848:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f84a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f84c:	b128      	cbz	r0, 800f85a <HAL_UART_Abort_IT+0x62>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f84e:	f7f3 f806 	bl	800285e <HAL_DMA_Abort_IT>
 800f852:	b358      	cbz	r0, 800f8ac <HAL_UART_Abort_IT+0xb4>
        huart->hdmatx->XferAbortCallback = NULL;
 800f854:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f856:	2200      	movs	r2, #0
 800f858:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f85a:	6823      	ldr	r3, [r4, #0]
 800f85c:	689a      	ldr	r2, [r3, #8]
 800f85e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f862:	d00b      	beq.n	800f87c <HAL_UART_Abort_IT+0x84>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f864:	689a      	ldr	r2, [r3, #8]
 800f866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f86a:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f86c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f86e:	b128      	cbz	r0, 800f87c <HAL_UART_Abort_IT+0x84>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f870:	f7f2 fff5 	bl	800285e <HAL_DMA_Abort_IT>
 800f874:	b1c0      	cbz	r0, 800f8a8 <HAL_UART_Abort_IT+0xb0>
        huart->hdmarx->XferAbortCallback = NULL;
 800f876:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f878:	2200      	movs	r2, #0
 800f87a:	639a      	str	r2, [r3, #56]	; 0x38
    huart->TxXferCount = 0U;
 800f87c:	2300      	movs	r3, #0
 800f87e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->RxXferCount = 0U;
 800f882:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    huart->RxISR = NULL;
 800f886:	6623      	str	r3, [r4, #96]	; 0x60
    huart->TxISR = NULL;
 800f888:	6663      	str	r3, [r4, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f88a:	67e3      	str	r3, [r4, #124]	; 0x7c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f88c:	6823      	ldr	r3, [r4, #0]
 800f88e:	220f      	movs	r2, #15
 800f890:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f892:	6822      	ldr	r2, [r4, #0]
 800f894:	8b13      	ldrh	r3, [r2, #24]
 800f896:	f043 0308 	orr.w	r3, r3, #8
 800f89a:	8313      	strh	r3, [r2, #24]
    huart->gState  = HAL_UART_STATE_READY;
 800f89c:	2320      	movs	r3, #32
 800f89e:	6763      	str	r3, [r4, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_READY;
 800f8a0:	67a3      	str	r3, [r4, #120]	; 0x78
    HAL_UART_AbortCpltCallback(huart);
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f7ff ffa6 	bl	800f7f4 <HAL_UART_AbortCpltCallback>
}
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8ac:	6823      	ldr	r3, [r4, #0]
 800f8ae:	689a      	ldr	r2, [r3, #8]
 800f8b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f8b4:	d0f8      	beq.n	800f8a8 <HAL_UART_Abort_IT+0xb0>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8b6:	689a      	ldr	r2, [r3, #8]
 800f8b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f8bc:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f8be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d1d5      	bne.n	800f870 <HAL_UART_Abort_IT+0x78>
 800f8c4:	e7f0      	b.n	800f8a8 <HAL_UART_Abort_IT+0xb0>
 800f8c6:	bf00      	nop
 800f8c8:	0800f90d 	.word	0x0800f90d
 800f8cc:	0800f8d1 	.word	0x0800f8d1

0800f8d0 <UART_DMARxAbortCallback>:
{
 800f8d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->hdmarx->XferAbortCallback = NULL;
 800f8d4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	639a      	str	r2, [r3, #56]	; 0x38
  if (huart->hdmatx != NULL)
 800f8da:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f8dc:	b113      	cbz	r3, 800f8e4 <UART_DMARxAbortCallback+0x14>
    if (huart->hdmatx->XferAbortCallback != NULL)
 800f8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8e0:	b103      	cbz	r3, 800f8e4 <UART_DMARxAbortCallback+0x14>
}
 800f8e2:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0U;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 800f8ea:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8ee:	67c3      	str	r3, [r0, #124]	; 0x7c
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f8f0:	6803      	ldr	r3, [r0, #0]
 800f8f2:	220f      	movs	r2, #15
 800f8f4:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f8f6:	6802      	ldr	r2, [r0, #0]
 800f8f8:	8b13      	ldrh	r3, [r2, #24]
 800f8fa:	f043 0308 	orr.w	r3, r3, #8
 800f8fe:	8313      	strh	r3, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800f900:	2320      	movs	r3, #32
 800f902:	6743      	str	r3, [r0, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f904:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_AbortCpltCallback(huart);
 800f906:	f7ff ff75 	bl	800f7f4 <HAL_UART_AbortCpltCallback>
 800f90a:	e7ea      	b.n	800f8e2 <UART_DMARxAbortCallback+0x12>

0800f90c <UART_DMATxAbortCallback>:
{
 800f90c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f90e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->hdmatx->XferAbortCallback = NULL;
 800f910:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f912:	2200      	movs	r2, #0
 800f914:	639a      	str	r2, [r3, #56]	; 0x38
  if (huart->hdmarx != NULL)
 800f916:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f918:	b113      	cbz	r3, 800f920 <UART_DMATxAbortCallback+0x14>
    if (huart->hdmarx->XferAbortCallback != NULL)
 800f91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f91c:	b103      	cbz	r3, 800f920 <UART_DMATxAbortCallback+0x14>
}
 800f91e:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0U;
 800f920:	2300      	movs	r3, #0
 800f922:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 800f926:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f92a:	67c3      	str	r3, [r0, #124]	; 0x7c
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f92c:	6803      	ldr	r3, [r0, #0]
 800f92e:	220f      	movs	r2, #15
 800f930:	621a      	str	r2, [r3, #32]
  huart->gState  = HAL_UART_STATE_READY;
 800f932:	2320      	movs	r3, #32
 800f934:	6743      	str	r3, [r0, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f936:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_AbortCpltCallback(huart);
 800f938:	f7ff ff5c 	bl	800f7f4 <HAL_UART_AbortCpltCallback>
 800f93c:	e7ef      	b.n	800f91e <UART_DMATxAbortCallback+0x12>

0800f93e <HAL_UART_AbortTransmitCpltCallback>:
}
 800f93e:	4770      	bx	lr

0800f940 <HAL_UART_AbortTransmit_IT>:
{
 800f940:	b510      	push	{r4, lr}
 800f942:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f944:	6802      	ldr	r2, [r0, #0]
 800f946:	6813      	ldr	r3, [r2, #0]
 800f948:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f94c:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f94e:	6803      	ldr	r3, [r0, #0]
 800f950:	689a      	ldr	r2, [r3, #8]
 800f952:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f956:	d019      	beq.n	800f98c <HAL_UART_AbortTransmit_IT+0x4c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f958:	689a      	ldr	r2, [r3, #8]
 800f95a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f95e:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f960:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f962:	b153      	cbz	r3, 800f97a <HAL_UART_AbortTransmit_IT+0x3a>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800f964:	4a0e      	ldr	r2, [pc, #56]	; (800f9a0 <HAL_UART_AbortTransmit_IT+0x60>)
 800f966:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f968:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f96a:	f7f2 ff78 	bl	800285e <HAL_DMA_Abort_IT>
 800f96e:	b110      	cbz	r0, 800f976 <HAL_UART_AbortTransmit_IT+0x36>
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800f970:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f972:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f974:	4798      	blx	r3
}
 800f976:	2000      	movs	r0, #0
 800f978:	bd10      	pop	{r4, pc}
      huart->TxXferCount = 0U;
 800f97a:	2300      	movs	r3, #0
 800f97c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      huart->TxISR = NULL;
 800f980:	6643      	str	r3, [r0, #100]	; 0x64
      huart->gState = HAL_UART_STATE_READY;
 800f982:	2320      	movs	r3, #32
 800f984:	6743      	str	r3, [r0, #116]	; 0x74
      HAL_UART_AbortTransmitCpltCallback(huart);
 800f986:	f7ff ffda 	bl	800f93e <HAL_UART_AbortTransmitCpltCallback>
 800f98a:	e7f4      	b.n	800f976 <HAL_UART_AbortTransmit_IT+0x36>
    huart->TxXferCount = 0U;
 800f98c:	2300      	movs	r3, #0
 800f98e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->TxISR = NULL;
 800f992:	6643      	str	r3, [r0, #100]	; 0x64
    huart->gState = HAL_UART_STATE_READY;
 800f994:	2320      	movs	r3, #32
 800f996:	6743      	str	r3, [r0, #116]	; 0x74
    HAL_UART_AbortTransmitCpltCallback(huart);
 800f998:	f7ff ffd1 	bl	800f93e <HAL_UART_AbortTransmitCpltCallback>
 800f99c:	e7eb      	b.n	800f976 <HAL_UART_AbortTransmit_IT+0x36>
 800f99e:	bf00      	nop
 800f9a0:	0800f9a5 	.word	0x0800f9a5

0800f9a4 <UART_DMATxOnlyAbortCallback>:
{
 800f9a4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->TxXferCount = 0U;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->gState = HAL_UART_STATE_READY;
 800f9ae:	2320      	movs	r3, #32
 800f9b0:	6743      	str	r3, [r0, #116]	; 0x74
  HAL_UART_AbortTransmitCpltCallback(huart);
 800f9b2:	f7ff ffc4 	bl	800f93e <HAL_UART_AbortTransmitCpltCallback>
}
 800f9b6:	bd08      	pop	{r3, pc}

0800f9b8 <HAL_UART_AbortReceiveCpltCallback>:
}
 800f9b8:	4770      	bx	lr
	...

0800f9bc <HAL_UART_AbortReceive_IT>:
{
 800f9bc:	b510      	push	{r4, lr}
 800f9be:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f9c0:	6802      	ldr	r2, [r0, #0]
 800f9c2:	6813      	ldr	r3, [r2, #0]
 800f9c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9c8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9ca:	6802      	ldr	r2, [r0, #0]
 800f9cc:	6893      	ldr	r3, [r2, #8]
 800f9ce:	f023 0301 	bic.w	r3, r3, #1
 800f9d2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9d4:	6803      	ldr	r3, [r0, #0]
 800f9d6:	689a      	ldr	r2, [r3, #8]
 800f9d8:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f9dc:	d021      	beq.n	800fa22 <HAL_UART_AbortReceive_IT+0x66>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9de:	689a      	ldr	r2, [r3, #8]
 800f9e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f9e4:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f9e6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f9e8:	b153      	cbz	r3, 800fa00 <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800f9ea:	4a13      	ldr	r2, [pc, #76]	; (800fa38 <HAL_UART_AbortReceive_IT+0x7c>)
 800f9ec:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9ee:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f9f0:	f7f2 ff35 	bl	800285e <HAL_DMA_Abort_IT>
 800f9f4:	b110      	cbz	r0, 800f9fc <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f9f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f9fa:	4798      	blx	r3
}
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0U;
 800fa00:	2300      	movs	r3, #0
 800fa02:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 800fa06:	6543      	str	r3, [r0, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fa08:	6803      	ldr	r3, [r0, #0]
 800fa0a:	220f      	movs	r2, #15
 800fa0c:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa0e:	6802      	ldr	r2, [r0, #0]
 800fa10:	8b13      	ldrh	r3, [r2, #24]
 800fa12:	f043 0308 	orr.w	r3, r3, #8
 800fa16:	8313      	strh	r3, [r2, #24]
      huart->RxState = HAL_UART_STATE_READY;
 800fa18:	2320      	movs	r3, #32
 800fa1a:	6783      	str	r3, [r0, #120]	; 0x78
      HAL_UART_AbortReceiveCpltCallback(huart);
 800fa1c:	f7ff ffcc 	bl	800f9b8 <HAL_UART_AbortReceiveCpltCallback>
 800fa20:	e7ec      	b.n	800f9fc <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0U;
 800fa22:	2200      	movs	r2, #0
 800fa24:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 800fa28:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fa2a:	220f      	movs	r2, #15
 800fa2c:	621a      	str	r2, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 800fa2e:	2320      	movs	r3, #32
 800fa30:	6783      	str	r3, [r0, #120]	; 0x78
    HAL_UART_AbortReceiveCpltCallback(huart);
 800fa32:	f7ff ffc1 	bl	800f9b8 <HAL_UART_AbortReceiveCpltCallback>
 800fa36:	e7e1      	b.n	800f9fc <HAL_UART_AbortReceive_IT+0x40>
 800fa38:	0800fa3d 	.word	0x0800fa3d

0800fa3c <UART_DMARxOnlyAbortCallback>:
{
 800fa3c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa3e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800fa40:	2300      	movs	r3, #0
 800fa42:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fa46:	6803      	ldr	r3, [r0, #0]
 800fa48:	220f      	movs	r2, #15
 800fa4a:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa4c:	6802      	ldr	r2, [r0, #0]
 800fa4e:	8b13      	ldrh	r3, [r2, #24]
 800fa50:	f043 0308 	orr.w	r3, r3, #8
 800fa54:	8313      	strh	r3, [r2, #24]
  huart->RxState = HAL_UART_STATE_READY;
 800fa56:	2320      	movs	r3, #32
 800fa58:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_AbortReceiveCpltCallback(huart);
 800fa5a:	f7ff ffad 	bl	800f9b8 <HAL_UART_AbortReceiveCpltCallback>
}
 800fa5e:	bd08      	pop	{r3, pc}

0800fa60 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 800fa60:	6802      	ldr	r2, [r0, #0]
 800fa62:	8b13      	ldrh	r3, [r2, #24]
 800fa64:	f043 0304 	orr.w	r3, r3, #4
 800fa68:	8313      	strh	r3, [r2, #24]
}
 800fa6a:	4770      	bx	lr

0800fa6c <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 800fa6c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d015      	beq.n	800faa0 <HAL_HalfDuplex_EnableTransmitter+0x34>
 800fa74:	2301      	movs	r3, #1
 800fa76:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 800fa7a:	2324      	movs	r3, #36	; 0x24
 800fa7c:	6743      	str	r3, [r0, #116]	; 0x74
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800fa7e:	6802      	ldr	r2, [r0, #0]
 800fa80:	6813      	ldr	r3, [r2, #0]
 800fa82:	f023 030c 	bic.w	r3, r3, #12
 800fa86:	6013      	str	r3, [r2, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800fa88:	6802      	ldr	r2, [r0, #0]
 800fa8a:	6813      	ldr	r3, [r2, #0]
 800fa8c:	f043 0308 	orr.w	r3, r3, #8
 800fa90:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800fa92:	2320      	movs	r3, #32
 800fa94:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800fa96:	2300      	movs	r3, #0
 800fa98:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800faa0:	2002      	movs	r0, #2
}
 800faa2:	4770      	bx	lr

0800faa4 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 800faa4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d015      	beq.n	800fad8 <HAL_HalfDuplex_EnableReceiver+0x34>
 800faac:	2301      	movs	r3, #1
 800faae:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 800fab2:	2324      	movs	r3, #36	; 0x24
 800fab4:	6743      	str	r3, [r0, #116]	; 0x74
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800fab6:	6802      	ldr	r2, [r0, #0]
 800fab8:	6813      	ldr	r3, [r2, #0]
 800faba:	f023 030c 	bic.w	r3, r3, #12
 800fabe:	6013      	str	r3, [r2, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800fac0:	6802      	ldr	r2, [r0, #0]
 800fac2:	6813      	ldr	r3, [r2, #0]
 800fac4:	f043 0304 	orr.w	r3, r3, #4
 800fac8:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800faca:	2320      	movs	r3, #32
 800facc:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800face:	2300      	movs	r3, #0
 800fad0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800fad4:	4618      	mov	r0, r3
 800fad6:	4770      	bx	lr
  __HAL_LOCK(huart);
 800fad8:	2002      	movs	r0, #2
}
 800fada:	4770      	bx	lr

0800fadc <HAL_LIN_SendBreak>:
  __HAL_LOCK(huart);
 800fadc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d010      	beq.n	800fb06 <HAL_LIN_SendBreak+0x2a>
 800fae4:	2301      	movs	r3, #1
 800fae6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 800faea:	2324      	movs	r3, #36	; 0x24
 800faec:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 800faee:	6802      	ldr	r2, [r0, #0]
 800faf0:	8b13      	ldrh	r3, [r2, #24]
 800faf2:	f043 0302 	orr.w	r3, r3, #2
 800faf6:	8313      	strh	r3, [r2, #24]
  huart->gState = HAL_UART_STATE_READY;
 800faf8:	2320      	movs	r3, #32
 800fafa:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800fafc:	2300      	movs	r3, #0
 800fafe:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800fb02:	4618      	mov	r0, r3
 800fb04:	4770      	bx	lr
  __HAL_LOCK(huart);
 800fb06:	2002      	movs	r0, #2
}
 800fb08:	4770      	bx	lr

0800fb0a <HAL_UART_GetState>:
  temp1 = huart->gState;
 800fb0a:	6f42      	ldr	r2, [r0, #116]	; 0x74
  temp2 = huart->RxState;
 800fb0c:	6f80      	ldr	r0, [r0, #120]	; 0x78
}
 800fb0e:	4310      	orrs	r0, r2
 800fb10:	4770      	bx	lr

0800fb12 <HAL_UART_GetError>:
  return huart->ErrorCode;
 800fb12:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
 800fb14:	4770      	bx	lr
	...

0800fb18 <UART_SetConfig>:
{
 800fb18:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800fb1c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb1e:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb20:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fb22:	68a3      	ldr	r3, [r4, #8]
 800fb24:	6922      	ldr	r2, [r4, #16]
 800fb26:	4313      	orrs	r3, r2
 800fb28:	6962      	ldr	r2, [r4, #20]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	69e2      	ldr	r2, [r4, #28]
 800fb2e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb30:	4aab      	ldr	r2, [pc, #684]	; (800fde0 <UART_SetConfig+0x2c8>)
 800fb32:	4002      	ands	r2, r0
 800fb34:	4313      	orrs	r3, r2
 800fb36:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fb38:	6822      	ldr	r2, [r4, #0]
 800fb3a:	6853      	ldr	r3, [r2, #4]
 800fb3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800fb40:	68e1      	ldr	r1, [r4, #12]
 800fb42:	430b      	orrs	r3, r1
 800fb44:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb46:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fb48:	6822      	ldr	r2, [r4, #0]
 800fb4a:	4ba6      	ldr	r3, [pc, #664]	; (800fde4 <UART_SetConfig+0x2cc>)
 800fb4c:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800fb4e:	bf1c      	itt	ne
 800fb50:	6a23      	ldrne	r3, [r4, #32]
 800fb52:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb54:	6893      	ldr	r3, [r2, #8]
 800fb56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800fb5a:	430b      	orrs	r3, r1
 800fb5c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fb5e:	6823      	ldr	r3, [r4, #0]
 800fb60:	4aa1      	ldr	r2, [pc, #644]	; (800fde8 <UART_SetConfig+0x2d0>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d023      	beq.n	800fbae <UART_SetConfig+0x96>
 800fb66:	4aa1      	ldr	r2, [pc, #644]	; (800fdec <UART_SetConfig+0x2d4>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d032      	beq.n	800fbd2 <UART_SetConfig+0xba>
 800fb6c:	4aa0      	ldr	r2, [pc, #640]	; (800fdf0 <UART_SetConfig+0x2d8>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d04c      	beq.n	800fc0c <UART_SetConfig+0xf4>
 800fb72:	4aa0      	ldr	r2, [pc, #640]	; (800fdf4 <UART_SetConfig+0x2dc>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d060      	beq.n	800fc3a <UART_SetConfig+0x122>
 800fb78:	4a9f      	ldr	r2, [pc, #636]	; (800fdf8 <UART_SetConfig+0x2e0>)
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d074      	beq.n	800fc68 <UART_SetConfig+0x150>
 800fb7e:	4a99      	ldr	r2, [pc, #612]	; (800fde4 <UART_SetConfig+0x2cc>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	f000 808b 	beq.w	800fc9c <UART_SetConfig+0x184>
 800fb86:	2510      	movs	r5, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb88:	69e3      	ldr	r3, [r4, #28]
 800fb8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb8e:	f000 813b 	beq.w	800fe08 <UART_SetConfig+0x2f0>
    switch (clocksource)
 800fb92:	2d08      	cmp	r5, #8
 800fb94:	f200 81c5 	bhi.w	800ff22 <UART_SetConfig+0x40a>
 800fb98:	e8df f015 	tbh	[pc, r5, lsl #1]
 800fb9c:	019b0185 	.word	0x019b0185
 800fba0:	01c301a5 	.word	0x01c301a5
 800fba4:	01c301b0 	.word	0x01c301b0
 800fba8:	01c301c3 	.word	0x01c301c3
 800fbac:	01ba      	.short	0x01ba
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fbae:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800fbb2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fbb6:	f002 0203 	and.w	r2, r2, #3
 800fbba:	2a03      	cmp	r2, #3
 800fbbc:	d807      	bhi.n	800fbce <UART_SetConfig+0xb6>
 800fbbe:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fbc2:	0087      	.short	0x0087
 800fbc4:	01c30004 	.word	0x01c30004
 800fbc8:	01c5      	.short	0x01c5
 800fbca:	2504      	movs	r5, #4
 800fbcc:	e7dc      	b.n	800fb88 <UART_SetConfig+0x70>
 800fbce:	2510      	movs	r5, #16
 800fbd0:	e7da      	b.n	800fb88 <UART_SetConfig+0x70>
 800fbd2:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800fbd6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fbda:	f002 020c 	and.w	r2, r2, #12
 800fbde:	2a0c      	cmp	r2, #12
 800fbe0:	d812      	bhi.n	800fc08 <UART_SetConfig+0xf0>
 800fbe2:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fbe6:	0088      	.short	0x0088
 800fbe8:	00110011 	.word	0x00110011
 800fbec:	000d0011 	.word	0x000d0011
 800fbf0:	00110011 	.word	0x00110011
 800fbf4:	01b50011 	.word	0x01b50011
 800fbf8:	00110011 	.word	0x00110011
 800fbfc:	000f0011 	.word	0x000f0011
 800fc00:	2504      	movs	r5, #4
 800fc02:	e7c1      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc04:	2508      	movs	r5, #8
 800fc06:	e7bf      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc08:	2510      	movs	r5, #16
 800fc0a:	e7bd      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc0c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800fc10:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fc14:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800fc18:	2a10      	cmp	r2, #16
 800fc1a:	d00a      	beq.n	800fc32 <UART_SetConfig+0x11a>
 800fc1c:	d906      	bls.n	800fc2c <UART_SetConfig+0x114>
 800fc1e:	2a20      	cmp	r2, #32
 800fc20:	f000 8198 	beq.w	800ff54 <UART_SetConfig+0x43c>
 800fc24:	2a30      	cmp	r2, #48	; 0x30
 800fc26:	d106      	bne.n	800fc36 <UART_SetConfig+0x11e>
 800fc28:	2508      	movs	r5, #8
 800fc2a:	e7ad      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc2c:	b91a      	cbnz	r2, 800fc36 <UART_SetConfig+0x11e>
 800fc2e:	2500      	movs	r5, #0
 800fc30:	e04f      	b.n	800fcd2 <UART_SetConfig+0x1ba>
 800fc32:	2504      	movs	r5, #4
 800fc34:	e7a8      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc36:	2510      	movs	r5, #16
 800fc38:	e7a6      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc3a:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800fc3e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fc42:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800fc46:	2a40      	cmp	r2, #64	; 0x40
 800fc48:	d00a      	beq.n	800fc60 <UART_SetConfig+0x148>
 800fc4a:	d906      	bls.n	800fc5a <UART_SetConfig+0x142>
 800fc4c:	2a80      	cmp	r2, #128	; 0x80
 800fc4e:	f000 8183 	beq.w	800ff58 <UART_SetConfig+0x440>
 800fc52:	2ac0      	cmp	r2, #192	; 0xc0
 800fc54:	d106      	bne.n	800fc64 <UART_SetConfig+0x14c>
 800fc56:	2508      	movs	r5, #8
 800fc58:	e796      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc5a:	b91a      	cbnz	r2, 800fc64 <UART_SetConfig+0x14c>
 800fc5c:	2500      	movs	r5, #0
 800fc5e:	e038      	b.n	800fcd2 <UART_SetConfig+0x1ba>
 800fc60:	2504      	movs	r5, #4
 800fc62:	e791      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc64:	2510      	movs	r5, #16
 800fc66:	e78f      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc68:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800fc6c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fc70:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800fc74:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800fc78:	d00c      	beq.n	800fc94 <UART_SetConfig+0x17c>
 800fc7a:	d908      	bls.n	800fc8e <UART_SetConfig+0x176>
 800fc7c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800fc80:	f000 816c 	beq.w	800ff5c <UART_SetConfig+0x444>
 800fc84:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800fc88:	d106      	bne.n	800fc98 <UART_SetConfig+0x180>
 800fc8a:	2508      	movs	r5, #8
 800fc8c:	e77c      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc8e:	b91a      	cbnz	r2, 800fc98 <UART_SetConfig+0x180>
 800fc90:	2500      	movs	r5, #0
 800fc92:	e01e      	b.n	800fcd2 <UART_SetConfig+0x1ba>
 800fc94:	2504      	movs	r5, #4
 800fc96:	e777      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc98:	2510      	movs	r5, #16
 800fc9a:	e775      	b.n	800fb88 <UART_SetConfig+0x70>
 800fc9c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800fca0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fca4:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800fca8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fcac:	d040      	beq.n	800fd30 <UART_SetConfig+0x218>
 800fcae:	d90a      	bls.n	800fcc6 <UART_SetConfig+0x1ae>
 800fcb0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800fcb4:	d040      	beq.n	800fd38 <UART_SetConfig+0x220>
 800fcb6:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800fcba:	f040 8135 	bne.w	800ff28 <UART_SetConfig+0x410>
 800fcbe:	2508      	movs	r5, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800fcc0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fcc4:	e021      	b.n	800fd0a <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fcc6:	2a00      	cmp	r2, #0
 800fcc8:	f040 812e 	bne.w	800ff28 <UART_SetConfig+0x410>
 800fccc:	2500      	movs	r5, #0
 800fcce:	e000      	b.n	800fcd2 <UART_SetConfig+0x1ba>
 800fcd0:	2501      	movs	r5, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 800fcd2:	4a44      	ldr	r2, [pc, #272]	; (800fde4 <UART_SetConfig+0x2cc>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	f47f af57 	bne.w	800fb88 <UART_SetConfig+0x70>
    switch (clocksource)
 800fcda:	2d08      	cmp	r5, #8
 800fcdc:	f200 8126 	bhi.w	800ff2c <UART_SetConfig+0x414>
 800fce0:	e8df f015 	tbh	[pc, r5, lsl #1]
 800fce4:	0124000e 	.word	0x0124000e
 800fce8:	0124002d 	.word	0x0124002d
 800fcec:	01240026 	.word	0x01240026
 800fcf0:	01240124 	.word	0x01240124
 800fcf4:	000b      	.short	0x000b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fcf6:	2500      	movs	r5, #0
 800fcf8:	e7eb      	b.n	800fcd2 <UART_SetConfig+0x1ba>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800fcfa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fcfe:	e004      	b.n	800fd0a <UART_SetConfig+0x1f2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800fd00:	f7f8 fac6 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800fd04:	2800      	cmp	r0, #0
 800fd06:	f000 8113 	beq.w	800ff30 <UART_SetConfig+0x418>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd0a:	6862      	ldr	r2, [r4, #4]
 800fd0c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800fd10:	4283      	cmp	r3, r0
 800fd12:	f200 810f 	bhi.w	800ff34 <UART_SetConfig+0x41c>
 800fd16:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800fd1a:	f200 810d 	bhi.w	800ff38 <UART_SetConfig+0x420>
        switch (clocksource)
 800fd1e:	2d08      	cmp	r5, #8
 800fd20:	d85b      	bhi.n	800fdda <UART_SetConfig+0x2c2>
 800fd22:	e8df f005 	tbb	[pc, r5]
 800fd26:	5a0f      	.short	0x5a0f
 800fd28:	5a3a5a2a 	.word	0x5a3a5a2a
 800fd2c:	5a5a      	.short	0x5a5a
 800fd2e:	4d          	.byte	0x4d
 800fd2f:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800fd30:	f7f7 feb4 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
        break;
 800fd34:	2504      	movs	r5, #4
 800fd36:	e7e5      	b.n	800fd04 <UART_SetConfig+0x1ec>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fd38:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800fd3a:	4830      	ldr	r0, [pc, #192]	; (800fdfc <UART_SetConfig+0x2e4>)
 800fd3c:	e7e5      	b.n	800fd0a <UART_SetConfig+0x1f2>
    switch (clocksource)
 800fd3e:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800fd40:	482e      	ldr	r0, [pc, #184]	; (800fdfc <UART_SetConfig+0x2e4>)
 800fd42:	e7e2      	b.n	800fd0a <UART_SetConfig+0x1f2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800fd44:	f7f8 faa4 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 800fd48:	6862      	ldr	r2, [r4, #4]
 800fd4a:	2500      	movs	r5, #0
 800fd4c:	0e07      	lsrs	r7, r0, #24
 800fd4e:	0206      	lsls	r6, r0, #8
 800fd50:	0850      	lsrs	r0, r2, #1
 800fd52:	462b      	mov	r3, r5
 800fd54:	eb16 0b00 	adds.w	fp, r6, r0
 800fd58:	f147 0c00 	adc.w	ip, r7, #0
 800fd5c:	4658      	mov	r0, fp
 800fd5e:	4661      	mov	r1, ip
 800fd60:	f7f0 fb10 	bl	8000384 <__aeabi_uldivmod>
 800fd64:	4603      	mov	r3, r0
            break;
 800fd66:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd68:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 800fd6c:	4a24      	ldr	r2, [pc, #144]	; (800fe00 <UART_SetConfig+0x2e8>)
 800fd6e:	4291      	cmp	r1, r2
 800fd70:	f200 80e4 	bhi.w	800ff3c <UART_SetConfig+0x424>
          huart->Instance->BRR = usartdiv;
 800fd74:	6822      	ldr	r2, [r4, #0]
 800fd76:	60d3      	str	r3, [r2, #12]
 800fd78:	e0a6      	b.n	800fec8 <UART_SetConfig+0x3b0>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800fd7a:	0856      	lsrs	r6, r2, #1
 800fd7c:	2500      	movs	r5, #0
 800fd7e:	462b      	mov	r3, r5
 800fd80:	f8df b080 	ldr.w	fp, [pc, #128]	; 800fe04 <UART_SetConfig+0x2ec>
 800fd84:	f04f 0c00 	mov.w	ip, #0
 800fd88:	eb1b 0006 	adds.w	r0, fp, r6
 800fd8c:	f14c 0100 	adc.w	r1, ip, #0
 800fd90:	f7f0 faf8 	bl	8000384 <__aeabi_uldivmod>
 800fd94:	4603      	mov	r3, r0
            break;
 800fd96:	4628      	mov	r0, r5
 800fd98:	e7e6      	b.n	800fd68 <UART_SetConfig+0x250>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800fd9a:	f7f7 fe7f 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 800fd9e:	6862      	ldr	r2, [r4, #4]
 800fda0:	2500      	movs	r5, #0
 800fda2:	0e07      	lsrs	r7, r0, #24
 800fda4:	0206      	lsls	r6, r0, #8
 800fda6:	0850      	lsrs	r0, r2, #1
 800fda8:	462b      	mov	r3, r5
 800fdaa:	eb16 0b00 	adds.w	fp, r6, r0
 800fdae:	f147 0c00 	adc.w	ip, r7, #0
 800fdb2:	4658      	mov	r0, fp
 800fdb4:	4661      	mov	r1, ip
 800fdb6:	f7f0 fae5 	bl	8000384 <__aeabi_uldivmod>
 800fdba:	4603      	mov	r3, r0
            break;
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	e7d3      	b.n	800fd68 <UART_SetConfig+0x250>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800fdc0:	0850      	lsrs	r0, r2, #1
 800fdc2:	2700      	movs	r7, #0
 800fdc4:	2500      	movs	r5, #0
 800fdc6:	462b      	mov	r3, r5
 800fdc8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800fdcc:	f147 0100 	adc.w	r1, r7, #0
 800fdd0:	f7f0 fad8 	bl	8000384 <__aeabi_uldivmod>
 800fdd4:	4603      	mov	r3, r0
            break;
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	e7c6      	b.n	800fd68 <UART_SetConfig+0x250>
            ret = HAL_ERROR;
 800fdda:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800fddc:	2300      	movs	r3, #0
 800fdde:	e7c3      	b.n	800fd68 <UART_SetConfig+0x250>
 800fde0:	efff69f3 	.word	0xefff69f3
 800fde4:	40008000 	.word	0x40008000
 800fde8:	40013800 	.word	0x40013800
 800fdec:	40004400 	.word	0x40004400
 800fdf0:	40004800 	.word	0x40004800
 800fdf4:	40004c00 	.word	0x40004c00
 800fdf8:	40005000 	.word	0x40005000
 800fdfc:	00f42400 	.word	0x00f42400
 800fe00:	000ffcff 	.word	0x000ffcff
 800fe04:	f4240000 	.word	0xf4240000
    switch (clocksource)
 800fe08:	2d08      	cmp	r5, #8
 800fe0a:	d849      	bhi.n	800fea0 <UART_SetConfig+0x388>
 800fe0c:	e8df f005 	tbb	[pc, r5]
 800fe10:	48291e05 	.word	0x48291e05
 800fe14:	48484834 	.word	0x48484834
 800fe18:	3f          	.byte	0x3f
 800fe19:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800fe1a:	f7f8 fa39 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 800fe1e:	6862      	ldr	r2, [r4, #4]
 800fe20:	0853      	lsrs	r3, r2, #1
 800fe22:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800fe26:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe2a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe2c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe2e:	f1a3 0110 	sub.w	r1, r3, #16
 800fe32:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800fe36:	4291      	cmp	r1, r2
 800fe38:	f200 8082 	bhi.w	800ff40 <UART_SetConfig+0x428>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fe3c:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 800fe40:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fe42:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800fe46:	4313      	orrs	r3, r2
 800fe48:	60cb      	str	r3, [r1, #12]
 800fe4a:	e03d      	b.n	800fec8 <UART_SetConfig+0x3b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800fe4c:	f7f8 fa32 	bl	80082b4 <HAL_RCC_GetPCLK2Freq>
 800fe50:	6862      	ldr	r2, [r4, #4]
 800fe52:	0853      	lsrs	r3, r2, #1
 800fe54:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800fe58:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe5c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe5e:	2000      	movs	r0, #0
        break;
 800fe60:	e7e5      	b.n	800fe2e <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800fe62:	6862      	ldr	r2, [r4, #4]
 800fe64:	0853      	lsrs	r3, r2, #1
 800fe66:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800fe6a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fe6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe72:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe74:	2000      	movs	r0, #0
        break;
 800fe76:	e7da      	b.n	800fe2e <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800fe78:	f7f7 fe10 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 800fe7c:	6862      	ldr	r2, [r4, #4]
 800fe7e:	0853      	lsrs	r3, r2, #1
 800fe80:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800fe84:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe88:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe8a:	2000      	movs	r0, #0
        break;
 800fe8c:	e7cf      	b.n	800fe2e <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800fe8e:	6862      	ldr	r2, [r4, #4]
 800fe90:	0853      	lsrs	r3, r2, #1
 800fe92:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800fe96:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe9a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe9c:	2000      	movs	r0, #0
        break;
 800fe9e:	e7c6      	b.n	800fe2e <UART_SetConfig+0x316>
        ret = HAL_ERROR;
 800fea0:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800fea2:	2300      	movs	r3, #0
 800fea4:	e7c3      	b.n	800fe2e <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800fea6:	f7f8 f9f3 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 800feaa:	6863      	ldr	r3, [r4, #4]
 800feac:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800feb0:	fbb2 f2f3 	udiv	r2, r2, r3
 800feb4:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800feb6:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800feb8:	f1a2 0110 	sub.w	r1, r2, #16
 800febc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800fec0:	4299      	cmp	r1, r3
 800fec2:	d83f      	bhi.n	800ff44 <UART_SetConfig+0x42c>
      huart->Instance->BRR = usartdiv;
 800fec4:	6823      	ldr	r3, [r4, #0]
 800fec6:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 800fec8:	2200      	movs	r2, #0
 800feca:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800fecc:	6662      	str	r2, [r4, #100]	; 0x64
}
 800fece:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800fed2:	f7f8 f9ef 	bl	80082b4 <HAL_RCC_GetPCLK2Freq>
 800fed6:	6863      	ldr	r3, [r4, #4]
 800fed8:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800fedc:	fbb2 f2f3 	udiv	r2, r2, r3
 800fee0:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800fee2:	2000      	movs	r0, #0
        break;
 800fee4:	e7e8      	b.n	800feb8 <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800fee6:	6863      	ldr	r3, [r4, #4]
 800fee8:	085a      	lsrs	r2, r3, #1
 800feea:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 800feee:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
 800fef2:	fbb2 f2f3 	udiv	r2, r2, r3
 800fef6:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800fef8:	2000      	movs	r0, #0
        break;
 800fefa:	e7dd      	b.n	800feb8 <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800fefc:	f7f7 fdce 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 800ff00:	6863      	ldr	r3, [r4, #4]
 800ff02:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800ff06:	fbb2 f2f3 	udiv	r2, r2, r3
 800ff0a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800ff0c:	2000      	movs	r0, #0
        break;
 800ff0e:	e7d3      	b.n	800feb8 <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ff10:	6863      	ldr	r3, [r4, #4]
 800ff12:	085a      	lsrs	r2, r3, #1
 800ff14:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800ff18:	fbb2 f2f3 	udiv	r2, r2, r3
 800ff1c:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800ff1e:	2000      	movs	r0, #0
        break;
 800ff20:	e7ca      	b.n	800feb8 <UART_SetConfig+0x3a0>
        ret = HAL_ERROR;
 800ff22:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800ff24:	2200      	movs	r2, #0
 800ff26:	e7c7      	b.n	800feb8 <UART_SetConfig+0x3a0>
        ret = HAL_ERROR;
 800ff28:	2001      	movs	r0, #1
 800ff2a:	e7cd      	b.n	800fec8 <UART_SetConfig+0x3b0>
 800ff2c:	2001      	movs	r0, #1
 800ff2e:	e7cb      	b.n	800fec8 <UART_SetConfig+0x3b0>
 800ff30:	2000      	movs	r0, #0
 800ff32:	e7c9      	b.n	800fec8 <UART_SetConfig+0x3b0>
        ret = HAL_ERROR;
 800ff34:	2001      	movs	r0, #1
 800ff36:	e7c7      	b.n	800fec8 <UART_SetConfig+0x3b0>
 800ff38:	2001      	movs	r0, #1
 800ff3a:	e7c5      	b.n	800fec8 <UART_SetConfig+0x3b0>
          ret = HAL_ERROR;
 800ff3c:	2001      	movs	r0, #1
 800ff3e:	e7c3      	b.n	800fec8 <UART_SetConfig+0x3b0>
      ret = HAL_ERROR;
 800ff40:	2001      	movs	r0, #1
 800ff42:	e7c1      	b.n	800fec8 <UART_SetConfig+0x3b0>
      ret = HAL_ERROR;
 800ff44:	2001      	movs	r0, #1
 800ff46:	e7bf      	b.n	800fec8 <UART_SetConfig+0x3b0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff48:	2502      	movs	r5, #2
 800ff4a:	e61d      	b.n	800fb88 <UART_SetConfig+0x70>
 800ff4c:	2508      	movs	r5, #8
 800ff4e:	e61b      	b.n	800fb88 <UART_SetConfig+0x70>
 800ff50:	2502      	movs	r5, #2
 800ff52:	e619      	b.n	800fb88 <UART_SetConfig+0x70>
 800ff54:	2502      	movs	r5, #2
 800ff56:	e617      	b.n	800fb88 <UART_SetConfig+0x70>
 800ff58:	2502      	movs	r5, #2
 800ff5a:	e615      	b.n	800fb88 <UART_SetConfig+0x70>
 800ff5c:	2502      	movs	r5, #2
 800ff5e:	e613      	b.n	800fb88 <UART_SetConfig+0x70>

0800ff60 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff62:	f013 0f01 	tst.w	r3, #1
 800ff66:	d006      	beq.n	800ff76 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ff68:	6802      	ldr	r2, [r0, #0]
 800ff6a:	6853      	ldr	r3, [r2, #4]
 800ff6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ff70:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ff72:	430b      	orrs	r3, r1
 800ff74:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff78:	f013 0f02 	tst.w	r3, #2
 800ff7c:	d006      	beq.n	800ff8c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff7e:	6802      	ldr	r2, [r0, #0]
 800ff80:	6853      	ldr	r3, [r2, #4]
 800ff82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff86:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ff88:	430b      	orrs	r3, r1
 800ff8a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff8e:	f013 0f04 	tst.w	r3, #4
 800ff92:	d006      	beq.n	800ffa2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff94:	6802      	ldr	r2, [r0, #0]
 800ff96:	6853      	ldr	r3, [r2, #4]
 800ff98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ff9c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800ff9e:	430b      	orrs	r3, r1
 800ffa0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ffa2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ffa4:	f013 0f08 	tst.w	r3, #8
 800ffa8:	d006      	beq.n	800ffb8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ffaa:	6802      	ldr	r2, [r0, #0]
 800ffac:	6853      	ldr	r3, [r2, #4]
 800ffae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ffb2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800ffb4:	430b      	orrs	r3, r1
 800ffb6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ffb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ffba:	f013 0f10 	tst.w	r3, #16
 800ffbe:	d006      	beq.n	800ffce <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ffc0:	6802      	ldr	r2, [r0, #0]
 800ffc2:	6893      	ldr	r3, [r2, #8]
 800ffc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffc8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ffca:	430b      	orrs	r3, r1
 800ffcc:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ffce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ffd0:	f013 0f20 	tst.w	r3, #32
 800ffd4:	d006      	beq.n	800ffe4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ffd6:	6802      	ldr	r2, [r0, #0]
 800ffd8:	6893      	ldr	r3, [r2, #8]
 800ffda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ffde:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800ffe0:	430b      	orrs	r3, r1
 800ffe2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ffe4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ffe6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ffea:	d00a      	beq.n	8010002 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ffec:	6802      	ldr	r2, [r0, #0]
 800ffee:	6853      	ldr	r3, [r2, #4]
 800fff0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fff4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800fff6:	430b      	orrs	r3, r1
 800fff8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fffa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010000:	d00b      	beq.n	801001a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010002:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010004:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010008:	d006      	beq.n	8010018 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801000a:	6802      	ldr	r2, [r0, #0]
 801000c:	6853      	ldr	r3, [r2, #4]
 801000e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8010012:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8010014:	430b      	orrs	r3, r1
 8010016:	6053      	str	r3, [r2, #4]
}
 8010018:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801001a:	6802      	ldr	r2, [r0, #0]
 801001c:	6853      	ldr	r3, [r2, #4]
 801001e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8010022:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8010024:	430b      	orrs	r3, r1
 8010026:	6053      	str	r3, [r2, #4]
 8010028:	e7eb      	b.n	8010002 <UART_AdvFeatureConfig+0xa2>

0801002a <UART_WaitOnFlagUntilTimeout>:
{
 801002a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002e:	4607      	mov	r7, r0
 8010030:	460e      	mov	r6, r1
 8010032:	4615      	mov	r5, r2
 8010034:	4698      	mov	r8, r3
 8010036:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010038:	683a      	ldr	r2, [r7, #0]
 801003a:	69d3      	ldr	r3, [r2, #28]
 801003c:	ea36 0303 	bics.w	r3, r6, r3
 8010040:	bf0c      	ite	eq
 8010042:	2301      	moveq	r3, #1
 8010044:	2300      	movne	r3, #0
 8010046:	42ab      	cmp	r3, r5
 8010048:	d11c      	bne.n	8010084 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 801004a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801004e:	d0f4      	beq.n	801003a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010050:	f7f2 f820 	bl	8002094 <HAL_GetTick>
 8010054:	eba0 0008 	sub.w	r0, r0, r8
 8010058:	42a0      	cmp	r0, r4
 801005a:	d801      	bhi.n	8010060 <UART_WaitOnFlagUntilTimeout+0x36>
 801005c:	2c00      	cmp	r4, #0
 801005e:	d1eb      	bne.n	8010038 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010060:	683a      	ldr	r2, [r7, #0]
 8010062:	6813      	ldr	r3, [r2, #0]
 8010064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010068:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801006a:	683a      	ldr	r2, [r7, #0]
 801006c:	6893      	ldr	r3, [r2, #8]
 801006e:	f023 0301 	bic.w	r3, r3, #1
 8010072:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8010074:	2320      	movs	r3, #32
 8010076:	677b      	str	r3, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8010078:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 801007a:	2300      	movs	r3, #0
 801007c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        return HAL_TIMEOUT;
 8010080:	2003      	movs	r0, #3
 8010082:	e000      	b.n	8010086 <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 8010084:	2000      	movs	r0, #0
}
 8010086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801008a <HAL_UART_Transmit>:
{
 801008a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8010092:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8010094:	2b20      	cmp	r3, #32
 8010096:	d15d      	bne.n	8010154 <HAL_UART_Transmit+0xca>
 8010098:	4604      	mov	r4, r0
 801009a:	460d      	mov	r5, r1
 801009c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 801009e:	2900      	cmp	r1, #0
 80100a0:	d05d      	beq.n	801015e <HAL_UART_Transmit+0xd4>
 80100a2:	2a00      	cmp	r2, #0
 80100a4:	d05d      	beq.n	8010162 <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 80100a6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d05b      	beq.n	8010166 <HAL_UART_Transmit+0xdc>
 80100ae:	2301      	movs	r3, #1
 80100b0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100b4:	2300      	movs	r3, #0
 80100b6:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80100b8:	2321      	movs	r3, #33	; 0x21
 80100ba:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80100bc:	f7f1 ffea 	bl	8002094 <HAL_GetTick>
 80100c0:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80100c2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80100c6:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100ca:	68a3      	ldr	r3, [r4, #8]
 80100cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100d0:	d00a      	beq.n	80100e8 <HAL_UART_Transmit+0x5e>
      pdata16bits = NULL;
 80100d2:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 80100d6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80100da:	b29b      	uxth	r3, r3
 80100dc:	b35b      	cbz	r3, 8010136 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80100de:	f04f 0900 	mov.w	r9, #0
 80100e2:	f04f 0880 	mov.w	r8, #128	; 0x80
 80100e6:	e017      	b.n	8010118 <HAL_UART_Transmit+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100e8:	6923      	ldr	r3, [r4, #16]
 80100ea:	b913      	cbnz	r3, 80100f2 <HAL_UART_Transmit+0x68>
      pdata16bits = (uint16_t *) pData;
 80100ec:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80100ee:	2500      	movs	r5, #0
 80100f0:	e7f1      	b.n	80100d6 <HAL_UART_Transmit+0x4c>
      pdata16bits = NULL;
 80100f2:	f04f 0a00 	mov.w	sl, #0
 80100f6:	e7ee      	b.n	80100d6 <HAL_UART_Transmit+0x4c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80100f8:	6822      	ldr	r2, [r4, #0]
 80100fa:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80100fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010102:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8010104:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8010108:	3b01      	subs	r3, #1
 801010a:	b29b      	uxth	r3, r3
 801010c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8010110:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8010114:	b29b      	uxth	r3, r3
 8010116:	b173      	cbz	r3, 8010136 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010118:	9600      	str	r6, [sp, #0]
 801011a:	463b      	mov	r3, r7
 801011c:	464a      	mov	r2, r9
 801011e:	4641      	mov	r1, r8
 8010120:	4620      	mov	r0, r4
 8010122:	f7ff ff82 	bl	801002a <UART_WaitOnFlagUntilTimeout>
 8010126:	bb00      	cbnz	r0, 801016a <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 8010128:	2d00      	cmp	r5, #0
 801012a:	d0e5      	beq.n	80100f8 <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801012c:	6823      	ldr	r3, [r4, #0]
 801012e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8010132:	851a      	strh	r2, [r3, #40]	; 0x28
 8010134:	e7e6      	b.n	8010104 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010136:	9600      	str	r6, [sp, #0]
 8010138:	463b      	mov	r3, r7
 801013a:	2200      	movs	r2, #0
 801013c:	2140      	movs	r1, #64	; 0x40
 801013e:	4620      	mov	r0, r4
 8010140:	f7ff ff73 	bl	801002a <UART_WaitOnFlagUntilTimeout>
 8010144:	4603      	mov	r3, r0
 8010146:	b990      	cbnz	r0, 801016e <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 8010148:	2220      	movs	r2, #32
 801014a:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 801014c:	2200      	movs	r2, #0
 801014e:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 8010152:	e000      	b.n	8010156 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 8010154:	2302      	movs	r3, #2
}
 8010156:	4618      	mov	r0, r3
 8010158:	b002      	add	sp, #8
 801015a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 801015e:	2301      	movs	r3, #1
 8010160:	e7f9      	b.n	8010156 <HAL_UART_Transmit+0xcc>
 8010162:	2301      	movs	r3, #1
 8010164:	e7f7      	b.n	8010156 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8010166:	2302      	movs	r3, #2
 8010168:	e7f5      	b.n	8010156 <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 801016a:	2303      	movs	r3, #3
 801016c:	e7f3      	b.n	8010156 <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 801016e:	2303      	movs	r3, #3
 8010170:	e7f1      	b.n	8010156 <HAL_UART_Transmit+0xcc>

08010172 <HAL_UART_Receive>:
{
 8010172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010176:	b083      	sub	sp, #12
 8010178:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 801017a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 801017c:	2b20      	cmp	r3, #32
 801017e:	d178      	bne.n	8010272 <HAL_UART_Receive+0x100>
 8010180:	4604      	mov	r4, r0
 8010182:	460d      	mov	r5, r1
 8010184:	4617      	mov	r7, r2
    if ((pData == NULL) || (Size == 0U))
 8010186:	2900      	cmp	r1, #0
 8010188:	d077      	beq.n	801027a <HAL_UART_Receive+0x108>
 801018a:	2a00      	cmp	r2, #0
 801018c:	d077      	beq.n	801027e <HAL_UART_Receive+0x10c>
    __HAL_LOCK(huart);
 801018e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8010192:	2b01      	cmp	r3, #1
 8010194:	d075      	beq.n	8010282 <HAL_UART_Receive+0x110>
 8010196:	2301      	movs	r3, #1
 8010198:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801019c:	2300      	movs	r3, #0
 801019e:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80101a0:	2322      	movs	r3, #34	; 0x22
 80101a2:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80101a4:	f7f1 ff76 	bl	8002094 <HAL_GetTick>
 80101a8:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 80101aa:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 80101ae:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101b8:	d006      	beq.n	80101c8 <HAL_UART_Receive+0x56>
 80101ba:	b9c3      	cbnz	r3, 80101ee <HAL_UART_Receive+0x7c>
 80101bc:	6923      	ldr	r3, [r4, #16]
 80101be:	b993      	cbnz	r3, 80101e6 <HAL_UART_Receive+0x74>
 80101c0:	23ff      	movs	r3, #255	; 0xff
 80101c2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80101c6:	e018      	b.n	80101fa <HAL_UART_Receive+0x88>
 80101c8:	6923      	ldr	r3, [r4, #16]
 80101ca:	b933      	cbnz	r3, 80101da <HAL_UART_Receive+0x68>
 80101cc:	f240 17ff 	movw	r7, #511	; 0x1ff
 80101d0:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = (uint16_t *) pData;
 80101d4:	46ab      	mov	fp, r5
      pdata8bits  = NULL;
 80101d6:	2500      	movs	r5, #0
 80101d8:	e013      	b.n	8010202 <HAL_UART_Receive+0x90>
    UART_MASK_COMPUTATION(huart);
 80101da:	27ff      	movs	r7, #255	; 0xff
 80101dc:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = NULL;
 80101e0:	f04f 0b00 	mov.w	fp, #0
 80101e4:	e00d      	b.n	8010202 <HAL_UART_Receive+0x90>
    UART_MASK_COMPUTATION(huart);
 80101e6:	237f      	movs	r3, #127	; 0x7f
 80101e8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80101ec:	e005      	b.n	80101fa <HAL_UART_Receive+0x88>
 80101ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101f2:	d00f      	beq.n	8010214 <HAL_UART_Receive+0xa2>
 80101f4:	2300      	movs	r3, #0
 80101f6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80101fa:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = NULL;
 80101fe:	f04f 0b00 	mov.w	fp, #0
    while (huart->RxXferCount > 0U)
 8010202:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8010206:	b29b      	uxth	r3, r3
 8010208:	b36b      	cbz	r3, 8010266 <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801020a:	f04f 0a00 	mov.w	sl, #0
 801020e:	f04f 0920 	mov.w	r9, #32
 8010212:	e018      	b.n	8010246 <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 8010214:	6923      	ldr	r3, [r4, #16]
 8010216:	b91b      	cbnz	r3, 8010220 <HAL_UART_Receive+0xae>
 8010218:	237f      	movs	r3, #127	; 0x7f
 801021a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801021e:	e7ec      	b.n	80101fa <HAL_UART_Receive+0x88>
 8010220:	233f      	movs	r3, #63	; 0x3f
 8010222:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8010226:	e7e8      	b.n	80101fa <HAL_UART_Receive+0x88>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010228:	6823      	ldr	r3, [r4, #0]
 801022a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801022c:	403b      	ands	r3, r7
 801022e:	f82b 3b02 	strh.w	r3, [fp], #2
      huart->RxXferCount--;
 8010232:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8010236:	3b01      	subs	r3, #1
 8010238:	b29b      	uxth	r3, r3
 801023a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 801023e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8010242:	b29b      	uxth	r3, r3
 8010244:	b17b      	cbz	r3, 8010266 <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010246:	9600      	str	r6, [sp, #0]
 8010248:	4643      	mov	r3, r8
 801024a:	4652      	mov	r2, sl
 801024c:	4649      	mov	r1, r9
 801024e:	4620      	mov	r0, r4
 8010250:	f7ff feeb 	bl	801002a <UART_WaitOnFlagUntilTimeout>
 8010254:	b9b8      	cbnz	r0, 8010286 <HAL_UART_Receive+0x114>
      if (pdata8bits == NULL)
 8010256:	2d00      	cmp	r5, #0
 8010258:	d0e6      	beq.n	8010228 <HAL_UART_Receive+0xb6>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801025a:	6823      	ldr	r3, [r4, #0]
 801025c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801025e:	403b      	ands	r3, r7
 8010260:	f805 3b01 	strb.w	r3, [r5], #1
 8010264:	e7e5      	b.n	8010232 <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 8010266:	2320      	movs	r3, #32
 8010268:	67a3      	str	r3, [r4, #120]	; 0x78
    __HAL_UNLOCK(huart);
 801026a:	2000      	movs	r0, #0
 801026c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8010270:	e000      	b.n	8010274 <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8010272:	2002      	movs	r0, #2
}
 8010274:	b003      	add	sp, #12
 8010276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 801027a:	2001      	movs	r0, #1
 801027c:	e7fa      	b.n	8010274 <HAL_UART_Receive+0x102>
 801027e:	2001      	movs	r0, #1
 8010280:	e7f8      	b.n	8010274 <HAL_UART_Receive+0x102>
    __HAL_LOCK(huart);
 8010282:	2002      	movs	r0, #2
 8010284:	e7f6      	b.n	8010274 <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 8010286:	2003      	movs	r0, #3
 8010288:	e7f4      	b.n	8010274 <HAL_UART_Receive+0x102>

0801028a <UART_CheckIdleState>:
{
 801028a:	b530      	push	{r4, r5, lr}
 801028c:	b083      	sub	sp, #12
 801028e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010290:	2300      	movs	r3, #0
 8010292:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8010294:	f7f1 fefe 	bl	8002094 <HAL_GetTick>
 8010298:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801029a:	6823      	ldr	r3, [r4, #0]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f013 0f08 	tst.w	r3, #8
 80102a2:	d10c      	bne.n	80102be <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80102a4:	6823      	ldr	r3, [r4, #0]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f013 0f04 	tst.w	r3, #4
 80102ac:	d115      	bne.n	80102da <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80102ae:	2320      	movs	r3, #32
 80102b0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80102b2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80102b4:	2000      	movs	r0, #0
 80102b6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80102ba:	b003      	add	sp, #12
 80102bc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	4603      	mov	r3, r0
 80102c6:	2200      	movs	r2, #0
 80102c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80102cc:	4620      	mov	r0, r4
 80102ce:	f7ff feac 	bl	801002a <UART_WaitOnFlagUntilTimeout>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d0e6      	beq.n	80102a4 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80102d6:	2003      	movs	r0, #3
 80102d8:	e7ef      	b.n	80102ba <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	462b      	mov	r3, r5
 80102e2:	2200      	movs	r2, #0
 80102e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80102e8:	4620      	mov	r0, r4
 80102ea:	f7ff fe9e 	bl	801002a <UART_WaitOnFlagUntilTimeout>
 80102ee:	2800      	cmp	r0, #0
 80102f0:	d0dd      	beq.n	80102ae <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80102f2:	2003      	movs	r0, #3
 80102f4:	e7e1      	b.n	80102ba <UART_CheckIdleState+0x30>

080102f6 <HAL_UART_Init>:
  if (huart == NULL)
 80102f6:	b368      	cbz	r0, 8010354 <HAL_UART_Init+0x5e>
{
 80102f8:	b510      	push	{r4, lr}
 80102fa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80102fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80102fe:	b303      	cbz	r3, 8010342 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8010300:	2324      	movs	r3, #36	; 0x24
 8010302:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8010304:	6822      	ldr	r2, [r4, #0]
 8010306:	6813      	ldr	r3, [r2, #0]
 8010308:	f023 0301 	bic.w	r3, r3, #1
 801030c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801030e:	4620      	mov	r0, r4
 8010310:	f7ff fc02 	bl	800fb18 <UART_SetConfig>
 8010314:	2801      	cmp	r0, #1
 8010316:	d013      	beq.n	8010340 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801031a:	b9bb      	cbnz	r3, 801034c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801031c:	6822      	ldr	r2, [r4, #0]
 801031e:	6853      	ldr	r3, [r2, #4]
 8010320:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8010324:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010326:	6822      	ldr	r2, [r4, #0]
 8010328:	6893      	ldr	r3, [r2, #8]
 801032a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 801032e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8010330:	6822      	ldr	r2, [r4, #0]
 8010332:	6813      	ldr	r3, [r2, #0]
 8010334:	f043 0301 	orr.w	r3, r3, #1
 8010338:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801033a:	4620      	mov	r0, r4
 801033c:	f7ff ffa5 	bl	801028a <UART_CheckIdleState>
}
 8010340:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8010342:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8010346:	f7f1 fc6b 	bl	8001c20 <HAL_UART_MspInit>
 801034a:	e7d9      	b.n	8010300 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 801034c:	4620      	mov	r0, r4
 801034e:	f7ff fe07 	bl	800ff60 <UART_AdvFeatureConfig>
 8010352:	e7e3      	b.n	801031c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8010354:	2001      	movs	r0, #1
}
 8010356:	4770      	bx	lr

08010358 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8010358:	2800      	cmp	r0, #0
 801035a:	d032      	beq.n	80103c2 <HAL_HalfDuplex_Init+0x6a>
{
 801035c:	b510      	push	{r4, lr}
 801035e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8010360:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8010362:	b32b      	cbz	r3, 80103b0 <HAL_HalfDuplex_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 8010364:	2324      	movs	r3, #36	; 0x24
 8010366:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8010368:	6822      	ldr	r2, [r4, #0]
 801036a:	6813      	ldr	r3, [r2, #0]
 801036c:	f023 0301 	bic.w	r3, r3, #1
 8010370:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010372:	4620      	mov	r0, r4
 8010374:	f7ff fbd0 	bl	800fb18 <UART_SetConfig>
 8010378:	2801      	cmp	r0, #1
 801037a:	d018      	beq.n	80103ae <HAL_HalfDuplex_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801037c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801037e:	b9e3      	cbnz	r3, 80103ba <HAL_HalfDuplex_Init+0x62>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010380:	6822      	ldr	r2, [r4, #0]
 8010382:	6853      	ldr	r3, [r2, #4]
 8010384:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8010388:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 801038a:	6822      	ldr	r2, [r4, #0]
 801038c:	6893      	ldr	r3, [r2, #8]
 801038e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010392:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8010394:	6822      	ldr	r2, [r4, #0]
 8010396:	6893      	ldr	r3, [r2, #8]
 8010398:	f043 0308 	orr.w	r3, r3, #8
 801039c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 801039e:	6822      	ldr	r2, [r4, #0]
 80103a0:	6813      	ldr	r3, [r2, #0]
 80103a2:	f043 0301 	orr.w	r3, r3, #1
 80103a6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80103a8:	4620      	mov	r0, r4
 80103aa:	f7ff ff6e 	bl	801028a <UART_CheckIdleState>
}
 80103ae:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80103b0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80103b4:	f7f1 fc34 	bl	8001c20 <HAL_UART_MspInit>
 80103b8:	e7d4      	b.n	8010364 <HAL_HalfDuplex_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80103ba:	4620      	mov	r0, r4
 80103bc:	f7ff fdd0 	bl	800ff60 <UART_AdvFeatureConfig>
 80103c0:	e7de      	b.n	8010380 <HAL_HalfDuplex_Init+0x28>
    return HAL_ERROR;
 80103c2:	2001      	movs	r0, #1
}
 80103c4:	4770      	bx	lr

080103c6 <HAL_LIN_Init>:
  if (huart == NULL)
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d040      	beq.n	801044c <HAL_LIN_Init+0x86>
{
 80103ca:	b538      	push	{r3, r4, r5, lr}
 80103cc:	4604      	mov	r4, r0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80103ce:	69c3      	ldr	r3, [r0, #28]
 80103d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103d4:	d03c      	beq.n	8010450 <HAL_LIN_Init+0x8a>
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80103d6:	6883      	ldr	r3, [r0, #8]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d13b      	bne.n	8010454 <HAL_LIN_Init+0x8e>
 80103dc:	460d      	mov	r5, r1
  if (huart->gState == HAL_UART_STATE_RESET)
 80103de:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80103e0:	b35b      	cbz	r3, 801043a <HAL_LIN_Init+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 80103e2:	2324      	movs	r3, #36	; 0x24
 80103e4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80103e6:	6822      	ldr	r2, [r4, #0]
 80103e8:	6813      	ldr	r3, [r2, #0]
 80103ea:	f023 0301 	bic.w	r3, r3, #1
 80103ee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80103f0:	4620      	mov	r0, r4
 80103f2:	f7ff fb91 	bl	800fb18 <UART_SetConfig>
 80103f6:	2801      	cmp	r0, #1
 80103f8:	d02d      	beq.n	8010456 <HAL_LIN_Init+0x90>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80103fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103fc:	bb13      	cbnz	r3, 8010444 <HAL_LIN_Init+0x7e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80103fe:	6822      	ldr	r2, [r4, #0]
 8010400:	6853      	ldr	r3, [r2, #4]
 8010402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010406:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8010408:	6822      	ldr	r2, [r4, #0]
 801040a:	6893      	ldr	r3, [r2, #8]
 801040c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8010410:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8010412:	6822      	ldr	r2, [r4, #0]
 8010414:	6853      	ldr	r3, [r2, #4]
 8010416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801041a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 801041c:	6823      	ldr	r3, [r4, #0]
 801041e:	6859      	ldr	r1, [r3, #4]
 8010420:	f021 0120 	bic.w	r1, r1, #32
 8010424:	4329      	orrs	r1, r5
 8010426:	6059      	str	r1, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8010428:	6822      	ldr	r2, [r4, #0]
 801042a:	6813      	ldr	r3, [r2, #0]
 801042c:	f043 0301 	orr.w	r3, r3, #1
 8010430:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8010432:	4620      	mov	r0, r4
 8010434:	f7ff ff29 	bl	801028a <UART_CheckIdleState>
 8010438:	e00d      	b.n	8010456 <HAL_LIN_Init+0x90>
    huart->Lock = HAL_UNLOCKED;
 801043a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 801043e:	f7f1 fbef 	bl	8001c20 <HAL_UART_MspInit>
 8010442:	e7ce      	b.n	80103e2 <HAL_LIN_Init+0x1c>
    UART_AdvFeatureConfig(huart);
 8010444:	4620      	mov	r0, r4
 8010446:	f7ff fd8b 	bl	800ff60 <UART_AdvFeatureConfig>
 801044a:	e7d8      	b.n	80103fe <HAL_LIN_Init+0x38>
    return HAL_ERROR;
 801044c:	2001      	movs	r0, #1
}
 801044e:	4770      	bx	lr
    return HAL_ERROR;
 8010450:	2001      	movs	r0, #1
 8010452:	e000      	b.n	8010456 <HAL_LIN_Init+0x90>
    return HAL_ERROR;
 8010454:	2001      	movs	r0, #1
}
 8010456:	bd38      	pop	{r3, r4, r5, pc}

08010458 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8010458:	2800      	cmp	r0, #0
 801045a:	d040      	beq.n	80104de <HAL_MultiProcessor_Init+0x86>
{
 801045c:	b570      	push	{r4, r5, r6, lr}
 801045e:	4604      	mov	r4, r0
 8010460:	4615      	mov	r5, r2
 8010462:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_RESET)
 8010464:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8010466:	b34b      	cbz	r3, 80104bc <HAL_MultiProcessor_Init+0x64>
  huart->gState = HAL_UART_STATE_BUSY;
 8010468:	2324      	movs	r3, #36	; 0x24
 801046a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 801046c:	6822      	ldr	r2, [r4, #0]
 801046e:	6813      	ldr	r3, [r2, #0]
 8010470:	f023 0301 	bic.w	r3, r3, #1
 8010474:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010476:	4620      	mov	r0, r4
 8010478:	f7ff fb4e 	bl	800fb18 <UART_SetConfig>
 801047c:	2801      	cmp	r0, #1
 801047e:	d01c      	beq.n	80104ba <HAL_MultiProcessor_Init+0x62>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010482:	bb03      	cbnz	r3, 80104c6 <HAL_MultiProcessor_Init+0x6e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010484:	6822      	ldr	r2, [r4, #0]
 8010486:	6853      	ldr	r3, [r2, #4]
 8010488:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 801048c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801048e:	6822      	ldr	r2, [r4, #0]
 8010490:	6893      	ldr	r3, [r2, #8]
 8010492:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8010496:	6093      	str	r3, [r2, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8010498:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801049c:	d017      	beq.n	80104ce <HAL_MultiProcessor_Init+0x76>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 801049e:	6823      	ldr	r3, [r4, #0]
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80104a6:	4315      	orrs	r5, r2
 80104a8:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80104aa:	6822      	ldr	r2, [r4, #0]
 80104ac:	6813      	ldr	r3, [r2, #0]
 80104ae:	f043 0301 	orr.w	r3, r3, #1
 80104b2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80104b4:	4620      	mov	r0, r4
 80104b6:	f7ff fee8 	bl	801028a <UART_CheckIdleState>
}
 80104ba:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80104bc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80104c0:	f7f1 fbae 	bl	8001c20 <HAL_UART_MspInit>
 80104c4:	e7d0      	b.n	8010468 <HAL_MultiProcessor_Init+0x10>
    UART_AdvFeatureConfig(huart);
 80104c6:	4620      	mov	r0, r4
 80104c8:	f7ff fd4a 	bl	800ff60 <UART_AdvFeatureConfig>
 80104cc:	e7da      	b.n	8010484 <HAL_MultiProcessor_Init+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80104ce:	6823      	ldr	r3, [r4, #0]
 80104d0:	6859      	ldr	r1, [r3, #4]
 80104d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80104d6:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 80104da:	605e      	str	r6, [r3, #4]
 80104dc:	e7df      	b.n	801049e <HAL_MultiProcessor_Init+0x46>
    return HAL_ERROR;
 80104de:	2001      	movs	r0, #1
}
 80104e0:	4770      	bx	lr

080104e2 <HAL_MultiProcessor_EnableMuteMode>:
{
 80104e2:	b508      	push	{r3, lr}
  __HAL_LOCK(huart);
 80104e4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d00e      	beq.n	801050a <HAL_MultiProcessor_EnableMuteMode+0x28>
 80104ec:	2301      	movs	r3, #1
 80104ee:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 80104f2:	2324      	movs	r3, #36	; 0x24
 80104f4:	6743      	str	r3, [r0, #116]	; 0x74
  SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 80104f6:	6802      	ldr	r2, [r0, #0]
 80104f8:	6813      	ldr	r3, [r2, #0]
 80104fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80104fe:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8010500:	2320      	movs	r3, #32
 8010502:	6743      	str	r3, [r0, #116]	; 0x74
  return (UART_CheckIdleState(huart));
 8010504:	f7ff fec1 	bl	801028a <UART_CheckIdleState>
}
 8010508:	bd08      	pop	{r3, pc}
  __HAL_LOCK(huart);
 801050a:	2002      	movs	r0, #2
 801050c:	e7fc      	b.n	8010508 <HAL_MultiProcessor_EnableMuteMode+0x26>

0801050e <HAL_MultiProcessor_DisableMuteMode>:
{
 801050e:	b508      	push	{r3, lr}
  __HAL_LOCK(huart);
 8010510:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8010514:	2b01      	cmp	r3, #1
 8010516:	d00e      	beq.n	8010536 <HAL_MultiProcessor_DisableMuteMode+0x28>
 8010518:	2301      	movs	r3, #1
 801051a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 801051e:	2324      	movs	r3, #36	; 0x24
 8010520:	6743      	str	r3, [r0, #116]	; 0x74
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 8010522:	6802      	ldr	r2, [r0, #0]
 8010524:	6813      	ldr	r3, [r2, #0]
 8010526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801052a:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 801052c:	2320      	movs	r3, #32
 801052e:	6743      	str	r3, [r0, #116]	; 0x74
  return (UART_CheckIdleState(huart));
 8010530:	f7ff feab 	bl	801028a <UART_CheckIdleState>
}
 8010534:	bd08      	pop	{r3, pc}
  __HAL_LOCK(huart);
 8010536:	2002      	movs	r0, #2
 8010538:	e7fc      	b.n	8010534 <HAL_MultiProcessor_DisableMuteMode+0x26>

0801053a <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 801053a:	2800      	cmp	r0, #0
 801053c:	d03c      	beq.n	80105b8 <HAL_RS485Ex_Init+0x7e>
{
 801053e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010540:	4604      	mov	r4, r0
 8010542:	461d      	mov	r5, r3
 8010544:	4616      	mov	r6, r2
 8010546:	460f      	mov	r7, r1
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010548:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801054a:	b363      	cbz	r3, 80105a6 <HAL_RS485Ex_Init+0x6c>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801054c:	2324      	movs	r3, #36	; 0x24
 801054e:	6763      	str	r3, [r4, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010550:	6822      	ldr	r2, [r4, #0]
 8010552:	6813      	ldr	r3, [r2, #0]
 8010554:	f023 0301 	bic.w	r3, r3, #1
 8010558:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801055a:	4620      	mov	r0, r4
 801055c:	f7ff fadc 	bl	800fb18 <UART_SetConfig>
 8010560:	2801      	cmp	r0, #1
 8010562:	d01f      	beq.n	80105a4 <HAL_RS485Ex_Init+0x6a>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010566:	bb1b      	cbnz	r3, 80105b0 <HAL_RS485Ex_Init+0x76>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8010568:	6822      	ldr	r2, [r4, #0]
 801056a:	6893      	ldr	r3, [r2, #8]
 801056c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010570:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8010572:	6822      	ldr	r2, [r4, #0]
 8010574:	6893      	ldr	r3, [r2, #8]
 8010576:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801057a:	433b      	orrs	r3, r7
 801057c:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801057e:	6821      	ldr	r1, [r4, #0]
 8010580:	680b      	ldr	r3, [r1, #0]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8010582:	042d      	lsls	r5, r5, #16
 8010584:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8010588:	f023 757f 	bic.w	r5, r3, #66846720	; 0x3fc0000
 801058c:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
 8010590:	4315      	orrs	r5, r2
 8010592:	600d      	str	r5, [r1, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8010594:	6822      	ldr	r2, [r4, #0]
 8010596:	6813      	ldr	r3, [r2, #0]
 8010598:	f043 0301 	orr.w	r3, r3, #1
 801059c:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801059e:	4620      	mov	r0, r4
 80105a0:	f7ff fe73 	bl	801028a <UART_CheckIdleState>
}
 80105a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80105a6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80105aa:	f7f1 fb39 	bl	8001c20 <HAL_UART_MspInit>
 80105ae:	e7cd      	b.n	801054c <HAL_RS485Ex_Init+0x12>
    UART_AdvFeatureConfig(huart);
 80105b0:	4620      	mov	r0, r4
 80105b2:	f7ff fcd5 	bl	800ff60 <UART_AdvFeatureConfig>
 80105b6:	e7d7      	b.n	8010568 <HAL_RS485Ex_Init+0x2e>
    return HAL_ERROR;
 80105b8:	2001      	movs	r0, #1
}
 80105ba:	4770      	bx	lr

080105bc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80105bc:	4770      	bx	lr

080105be <HAL_UARTEx_EnableClockStopMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)
{
  /* Process Locked */
  __HAL_LOCK(huart);
 80105be:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d00c      	beq.n	80105e0 <HAL_UARTEx_EnableClockStopMode+0x22>
 80105c6:	2301      	movs	r3, #1
 80105c8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  /* Set UCESM bit */
  SET_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 80105cc:	6802      	ldr	r2, [r0, #0]
 80105ce:	6893      	ldr	r3, [r2, #8]
 80105d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80105d4:	6093      	str	r3, [r2, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105d6:	2300      	movs	r3, #0
 80105d8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  return HAL_OK;
 80105dc:	4618      	mov	r0, r3
 80105de:	4770      	bx	lr
  __HAL_LOCK(huart);
 80105e0:	2002      	movs	r0, #2
}
 80105e2:	4770      	bx	lr

080105e4 <HAL_UARTEx_DisableClockStopMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)
{
  /* Process Locked */
  __HAL_LOCK(huart);
 80105e4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d00c      	beq.n	8010606 <HAL_UARTEx_DisableClockStopMode+0x22>
 80105ec:	2301      	movs	r3, #1
 80105ee:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  /* Clear UCESM bit */
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 80105f2:	6802      	ldr	r2, [r0, #0]
 80105f4:	6893      	ldr	r3, [r2, #8]
 80105f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80105fa:	6093      	str	r3, [r2, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105fc:	2300      	movs	r3, #0
 80105fe:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  return HAL_OK;
 8010602:	4618      	mov	r0, r3
 8010604:	4770      	bx	lr
  __HAL_LOCK(huart);
 8010606:	2002      	movs	r0, #2
}
 8010608:	4770      	bx	lr

0801060a <HAL_MultiProcessorEx_AddressLength_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 801060a:	b1a8      	cbz	r0, 8010638 <HAL_MultiProcessorEx_AddressLength_Set+0x2e>
{
 801060c:	b508      	push	{r3, lr}
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 801060e:	2324      	movs	r3, #36	; 0x24
 8010610:	6743      	str	r3, [r0, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010612:	6802      	ldr	r2, [r0, #0]
 8010614:	6813      	ldr	r3, [r2, #0]
 8010616:	f023 0301 	bic.w	r3, r3, #1
 801061a:	6013      	str	r3, [r2, #0]

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 801061c:	6802      	ldr	r2, [r0, #0]
 801061e:	6853      	ldr	r3, [r2, #4]
 8010620:	f023 0310 	bic.w	r3, r3, #16
 8010624:	4319      	orrs	r1, r3
 8010626:	6051      	str	r1, [r2, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8010628:	6802      	ldr	r2, [r0, #0]
 801062a:	6813      	ldr	r3, [r2, #0]
 801062c:	f043 0301 	orr.w	r3, r3, #1
 8010630:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 8010632:	f7ff fe2a 	bl	801028a <UART_CheckIdleState>
}
 8010636:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8010638:	2001      	movs	r0, #1
}
 801063a:	4770      	bx	lr

0801063c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 801063c:	b510      	push	{r4, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	ab04      	add	r3, sp, #16
 8010642:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010646:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 801064a:	2b01      	cmp	r3, #1
 801064c:	d041      	beq.n	80106d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x96>
 801064e:	9a02      	ldr	r2, [sp, #8]
 8010650:	2301      	movs	r3, #1
 8010652:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 8010656:	2324      	movs	r3, #36	; 0x24
 8010658:	6743      	str	r3, [r0, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801065a:	6801      	ldr	r1, [r0, #0]
 801065c:	680b      	ldr	r3, [r1, #0]
 801065e:	f023 0301 	bic.w	r3, r3, #1
 8010662:	600b      	str	r3, [r1, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8010664:	6801      	ldr	r1, [r0, #0]
 8010666:	688b      	ldr	r3, [r1, #8]
 8010668:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801066c:	4313      	orrs	r3, r2
 801066e:	608b      	str	r3, [r1, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8010670:	b1b2      	cbz	r2, 80106a0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x64>
 8010672:	4604      	mov	r4, r0
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8010674:	6802      	ldr	r2, [r0, #0]
 8010676:	6813      	ldr	r3, [r2, #0]
 8010678:	f043 0301 	orr.w	r3, r3, #1
 801067c:	6013      	str	r3, [r2, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801067e:	f7f1 fd09 	bl	8002094 <HAL_GetTick>

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010682:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010686:	9300      	str	r3, [sp, #0]
 8010688:	4603      	mov	r3, r0
 801068a:	2200      	movs	r2, #0
 801068c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010690:	4620      	mov	r0, r4
 8010692:	f7ff fcca 	bl	801002a <UART_WaitOnFlagUntilTimeout>
 8010696:	4603      	mov	r3, r0
 8010698:	b9a0      	cbnz	r0, 80106c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>
    status = HAL_TIMEOUT;
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 801069a:	2220      	movs	r2, #32
 801069c:	6762      	str	r2, [r4, #116]	; 0x74
 801069e:	e012      	b.n	80106c6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8a>
 80106a0:	f89d 400e 	ldrb.w	r4, [sp, #14]
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80106a4:	6801      	ldr	r1, [r0, #0]
 80106a6:	684a      	ldr	r2, [r1, #4]
 80106a8:	f022 0210 	bic.w	r2, r2, #16
 80106ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80106b0:	431a      	orrs	r2, r3
 80106b2:	604a      	str	r2, [r1, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80106b4:	6802      	ldr	r2, [r0, #0]
 80106b6:	6853      	ldr	r3, [r2, #4]
 80106b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80106bc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80106c0:	6053      	str	r3, [r2, #4]
 80106c2:	e7d6      	b.n	8010672 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x36>
    status = HAL_TIMEOUT;
 80106c4:	2303      	movs	r3, #3
  __HAL_UNLOCK(huart);
 80106c6:	2200      	movs	r2, #0
 80106c8:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	b004      	add	sp, #16
 80106d0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80106d2:	2302      	movs	r3, #2
 80106d4:	e7fa      	b.n	80106cc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x90>

080106d6 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80106d6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d00c      	beq.n	80106f8 <HAL_UARTEx_EnableStopMode+0x22>
 80106de:	2301      	movs	r3, #1
 80106e0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80106e4:	6802      	ldr	r2, [r0, #0]
 80106e6:	6813      	ldr	r3, [r2, #0]
 80106e8:	f043 0302 	orr.w	r3, r3, #2
 80106ec:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80106ee:	2300      	movs	r3, #0
 80106f0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 80106f4:	4618      	mov	r0, r3
 80106f6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80106f8:	2002      	movs	r0, #2
}
 80106fa:	4770      	bx	lr

080106fc <HAL_UARTEx_DisableStopMode>:
  __HAL_LOCK(huart);
 80106fc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8010700:	2b01      	cmp	r3, #1
 8010702:	d00c      	beq.n	801071e <HAL_UARTEx_DisableStopMode+0x22>
 8010704:	2301      	movs	r3, #1
 8010706:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801070a:	6802      	ldr	r2, [r0, #0]
 801070c:	6813      	ldr	r3, [r2, #0]
 801070e:	f023 0302 	bic.w	r3, r3, #2
 8010712:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8010714:	2300      	movs	r3, #0
 8010716:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 801071a:	4618      	mov	r0, r3
 801071c:	4770      	bx	lr
  __HAL_LOCK(huart);
 801071e:	2002      	movs	r0, #2
}
 8010720:	4770      	bx	lr
	...

08010724 <mavlink_sha256_update>:
{
 8010724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010728:	b0df      	sub	sp, #380	; 0x17c
 801072a:	9004      	str	r0, [sp, #16]
 801072c:	9103      	str	r1, [sp, #12]
 801072e:	9202      	str	r2, [sp, #8]
    uint32_t old_sz = m->sz[0];
 8010730:	6806      	ldr	r6, [r0, #0]
    m->sz[0] += len * 8;
 8010732:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 8010736:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
 8010738:	42b3      	cmp	r3, r6
 801073a:	d202      	bcs.n	8010742 <mavlink_sha256_update+0x1e>
	++m->sz[1];
 801073c:	6843      	ldr	r3, [r0, #4]
 801073e:	3301      	adds	r3, #1
 8010740:	6043      	str	r3, [r0, #4]
    offset = (old_sz / 8) % 64;
 8010742:	f3c6 06c5 	ubfx	r6, r6, #3, #6
    while(len > 0){
 8010746:	9b02      	ldr	r3, [sp, #8]
 8010748:	2b00      	cmp	r3, #0
 801074a:	f000 80c3 	beq.w	80108d4 <mavlink_sha256_update+0x1b0>
 801074e:	ab1d      	add	r3, sp, #116	; 0x74
 8010750:	930d      	str	r3, [sp, #52]	; 0x34
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8010752:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80108dc <mavlink_sha256_update+0x1b8>
 8010756:	e053      	b.n	8010800 <mavlink_sha256_update+0xdc>
    for (i = 0; i < 64; i++) {
 8010758:	4635      	mov	r5, r6
 801075a:	4606      	mov	r6, r0
	AA = T1 + T2;
 801075c:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 801075e:	4667      	mov	r7, ip
 8010760:	468c      	mov	ip, r1
	EE = DD + T1;
 8010762:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8010764:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8010768:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 801076c:	ea83 6a71 	eor.w	sl, r3, r1, ror #25
 8010770:	ea27 0301 	bic.w	r3, r7, r1
 8010774:	ea01 0b0c 	and.w	fp, r1, ip
 8010778:	ea83 030b 	eor.w	r3, r3, fp
 801077c:	4453      	add	r3, sl
 801077e:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8010782:	4413      	add	r3, r2
 8010784:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8010788:	4413      	add	r3, r2
 801078a:	9a01      	ldr	r2, [sp, #4]
 801078c:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 801078e:	ea4f 3270 	mov.w	r2, r0, ror #13
 8010792:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8010796:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 801079a:	ea86 0a05 	eor.w	sl, r6, r5
 801079e:	ea0a 0a00 	and.w	sl, sl, r0
 80107a2:	ea06 0b05 	and.w	fp, r6, r5
 80107a6:	ea8a 0a0b 	eor.w	sl, sl, fp
 80107aa:	4452      	add	r2, sl
	EE = DD + T1;
 80107ac:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 80107b0:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 80107b2:	3401      	adds	r4, #1
 80107b4:	9701      	str	r7, [sp, #4]
 80107b6:	46ae      	mov	lr, r5
 80107b8:	2c40      	cmp	r4, #64	; 0x40
 80107ba:	d1cd      	bne.n	8010758 <mavlink_sha256_update+0x34>
    A += AA;
 80107bc:	9a05      	ldr	r2, [sp, #20]
 80107be:	441a      	add	r2, r3
 80107c0:	4613      	mov	r3, r2
 80107c2:	9a04      	ldr	r2, [sp, #16]
 80107c4:	6093      	str	r3, [r2, #8]
    B += BB;
 80107c6:	9b06      	ldr	r3, [sp, #24]
 80107c8:	4403      	add	r3, r0
 80107ca:	4618      	mov	r0, r3
 80107cc:	60d0      	str	r0, [r2, #12]
    C += CC;
 80107ce:	9b07      	ldr	r3, [sp, #28]
 80107d0:	4433      	add	r3, r6
 80107d2:	461e      	mov	r6, r3
 80107d4:	6116      	str	r6, [r2, #16]
    D += DD;
 80107d6:	9b08      	ldr	r3, [sp, #32]
 80107d8:	442b      	add	r3, r5
 80107da:	461d      	mov	r5, r3
 80107dc:	6155      	str	r5, [r2, #20]
    E += EE;
 80107de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107e0:	445b      	add	r3, fp
 80107e2:	6193      	str	r3, [r2, #24]
    F += FF;
 80107e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107e6:	440b      	add	r3, r1
 80107e8:	4619      	mov	r1, r3
 80107ea:	61d1      	str	r1, [r2, #28]
    G += GG;
 80107ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ee:	4463      	add	r3, ip
 80107f0:	6213      	str	r3, [r2, #32]
    H += HH;
 80107f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80107f4:	443b      	add	r3, r7
 80107f6:	6253      	str	r3, [r2, #36]	; 0x24
	    offset = 0;
 80107f8:	2600      	movs	r6, #0
    while(len > 0){
 80107fa:	9b02      	ldr	r3, [sp, #8]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d069      	beq.n	80108d4 <mavlink_sha256_update+0x1b0>
	uint32_t l = 64 - offset;
 8010800:	f1c6 0540 	rsb	r5, r6, #64	; 0x40
 8010804:	9f02      	ldr	r7, [sp, #8]
 8010806:	42bd      	cmp	r5, r7
 8010808:	bf28      	it	cs
 801080a:	463d      	movcs	r5, r7
	memcpy(m->u.save_bytes + offset, p, l);
 801080c:	9b04      	ldr	r3, [sp, #16]
 801080e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8010812:	462a      	mov	r2, r5
 8010814:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010818:	4649      	mov	r1, r9
 801081a:	19a0      	adds	r0, r4, r6
 801081c:	f7ef fd18 	bl	8000250 <memcpy>
	offset += l;
 8010820:	442e      	add	r6, r5
	p += l;
 8010822:	464b      	mov	r3, r9
 8010824:	442b      	add	r3, r5
 8010826:	9303      	str	r3, [sp, #12]
	len -= l;
 8010828:	1b7b      	subs	r3, r7, r5
 801082a:	9302      	str	r3, [sp, #8]
	if(offset == 64){
 801082c:	2e40      	cmp	r6, #64	; 0x40
 801082e:	d1e4      	bne.n	80107fa <mavlink_sha256_update+0xd6>
 8010830:	4622      	mov	r2, r4
 8010832:	a81e      	add	r0, sp, #120	; 0x78
 8010834:	ab0e      	add	r3, sp, #56	; 0x38
                p2[0] = p1[3];
 8010836:	78d1      	ldrb	r1, [r2, #3]
 8010838:	7019      	strb	r1, [r3, #0]
                p2[1] = p1[2];
 801083a:	7891      	ldrb	r1, [r2, #2]
 801083c:	7059      	strb	r1, [r3, #1]
                p2[2] = p1[1];
 801083e:	7851      	ldrb	r1, [r2, #1]
 8010840:	7099      	strb	r1, [r3, #2]
                p2[3] = p1[0];
 8010842:	f812 1b04 	ldrb.w	r1, [r2], #4
 8010846:	70d9      	strb	r1, [r3, #3]
 8010848:	3304      	adds	r3, #4
	    for (i = 0; i < 16; i++){
 801084a:	4283      	cmp	r3, r0
 801084c:	d1f3      	bne.n	8010836 <mavlink_sha256_update+0x112>
    AA = A;
 801084e:	9b04      	ldr	r3, [sp, #16]
 8010850:	689a      	ldr	r2, [r3, #8]
 8010852:	9205      	str	r2, [sp, #20]
    BB = B;
 8010854:	68da      	ldr	r2, [r3, #12]
 8010856:	9206      	str	r2, [sp, #24]
    CC = C;
 8010858:	691a      	ldr	r2, [r3, #16]
 801085a:	9207      	str	r2, [sp, #28]
    DD = D;
 801085c:	695a      	ldr	r2, [r3, #20]
 801085e:	9208      	str	r2, [sp, #32]
    EE = E;
 8010860:	699a      	ldr	r2, [r3, #24]
 8010862:	9209      	str	r2, [sp, #36]	; 0x24
    FF = F;
 8010864:	69da      	ldr	r2, [r3, #28]
 8010866:	920a      	str	r2, [sp, #40]	; 0x28
    GG = G;
 8010868:	6a1a      	ldr	r2, [r3, #32]
 801086a:	920b      	str	r2, [sp, #44]	; 0x2c
    HH = H;
 801086c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801086e:	930c      	str	r3, [sp, #48]	; 0x30
 8010870:	ab0d      	add	r3, sp, #52	; 0x34
 8010872:	aa1d      	add	r2, sp, #116	; 0x74
 8010874:	980d      	ldr	r0, [sp, #52]	; 0x34
	data[i] = in[i];
 8010876:	f853 1f04 	ldr.w	r1, [r3, #4]!
 801087a:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 801087e:	4298      	cmp	r0, r3
 8010880:	d1f9      	bne.n	8010876 <mavlink_sha256_update+0x152>
 8010882:	ac1e      	add	r4, sp, #120	; 0x78
 8010884:	ad4e      	add	r5, sp, #312	; 0x138
 8010886:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8010888:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 801088a:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 801088e:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8010892:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 8010896:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 801089a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801089c:	6800      	ldr	r0, [r0, #0]
 801089e:	4402      	add	r2, r0
 80108a0:	4413      	add	r3, r2
 80108a2:	ea4f 42b1 	mov.w	r2, r1, ror #18
 80108a6:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 80108aa:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80108ae:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80108b0:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 80108b2:	42a5      	cmp	r5, r4
 80108b4:	d1e7      	bne.n	8010886 <mavlink_sha256_update+0x162>
    DD = D;
 80108b6:	f8dd e020 	ldr.w	lr, [sp, #32]
    CC = C;
 80108ba:	9d07      	ldr	r5, [sp, #28]
    BB = B;
 80108bc:	9e06      	ldr	r6, [sp, #24]
    AA = A;
 80108be:	9805      	ldr	r0, [sp, #20]
    GG = G;
 80108c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    FF = F;
 80108c2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    HH = H;
 80108c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    EE = E;
 80108c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (i = 0; i < 64; i++) {
 80108ca:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80108cc:	f10d 0978 	add.w	r9, sp, #120	; 0x78
 80108d0:	9201      	str	r2, [sp, #4]
 80108d2:	e747      	b.n	8010764 <mavlink_sha256_update+0x40>
}
 80108d4:	b05f      	add	sp, #380	; 0x17c
 80108d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108da:	bf00      	nop
 80108dc:	08013c70 	.word	0x08013c70

080108e0 <mouseDriver_initSetpoint>:
This function modifies \ref actual_motor_signal by setting all their fields to 0.
*/
void mouseDriver_initMotorSignal(void);

void mouseDriver_initSetpoint(void){
	actual_speed_setpoint.setpoint_x = 0;
 80108e0:	4b02      	ldr	r3, [pc, #8]	; (80108ec <mouseDriver_initSetpoint+0xc>)
 80108e2:	2200      	movs	r2, #0
 80108e4:	601a      	str	r2, [r3, #0]
	actual_speed_setpoint.setpoint_y = 0;
 80108e6:	605a      	str	r2, [r3, #4]
}
 80108e8:	4770      	bx	lr
 80108ea:	bf00      	nop
 80108ec:	200009ec 	.word	0x200009ec

080108f0 <mouseDriver_initMode>:
void mouseDriver_initMode(void){
	actual_mode = MOUSE_MODE_STOP;
 80108f0:	4b01      	ldr	r3, [pc, #4]	; (80108f8 <mouseDriver_initMode+0x8>)
 80108f2:	2200      	movs	r2, #0
 80108f4:	701a      	strb	r2, [r3, #0]
}
 80108f6:	4770      	bx	lr
 80108f8:	200009a5 	.word	0x200009a5

080108fc <mouseDriver_initPoints>:
void mouseDriver_initPoints(void){
 80108fc:	b470      	push	{r4, r5, r6}
 80108fe:	480d      	ldr	r0, [pc, #52]	; (8010934 <mouseDriver_initPoints+0x38>)
	for(int i=0; i<MAX_POINTS; i++){
 8010900:	2300      	movs	r3, #0
		points[i].duration = 0;
 8010902:	4606      	mov	r6, r0
 8010904:	4619      	mov	r1, r3
		points[i].setpoint_x = 0;
 8010906:	2500      	movs	r5, #0
		points[i].duration = 0;
 8010908:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 801090c:	eb06 0244 	add.w	r2, r6, r4, lsl #1
 8010910:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
 8010914:	8051      	strh	r1, [r2, #2]
		points[i].setpoint_x = 0;
 8010916:	6055      	str	r5, [r2, #4]
		points[i].setpoint_y = 0;
 8010918:	6095      	str	r5, [r2, #8]
		points[i].point_id = 0;
 801091a:	8181      	strh	r1, [r0, #12]
	for(int i=0; i<MAX_POINTS; i++){
 801091c:	3301      	adds	r3, #1
 801091e:	300e      	adds	r0, #14
 8010920:	2bff      	cmp	r3, #255	; 0xff
 8010922:	d1f1      	bne.n	8010908 <mouseDriver_initPoints+0xc>
	}
	actual_point = 0;
 8010924:	2300      	movs	r3, #0
 8010926:	4a04      	ldr	r2, [pc, #16]	; (8010938 <mouseDriver_initPoints+0x3c>)
 8010928:	7013      	strb	r3, [r2, #0]
	actual_point_start_time = 0;
 801092a:	4a04      	ldr	r2, [pc, #16]	; (801093c <mouseDriver_initPoints+0x40>)
 801092c:	6013      	str	r3, [r2, #0]
}
 801092e:	bc70      	pop	{r4, r5, r6}
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop
 8010934:	20000c54 	.word	0x20000c54
 8010938:	200009b4 	.word	0x200009b4
 801093c:	200009b8 	.word	0x200009b8

08010940 <mouseDriver_initMotorSignal>:
void mouseDriver_initMotorSignal(void){
    actual_motor_signal.motor_x = 0;
 8010940:	4b02      	ldr	r3, [pc, #8]	; (801094c <mouseDriver_initMotorSignal+0xc>)
 8010942:	2200      	movs	r2, #0
 8010944:	605a      	str	r2, [r3, #4]
    actual_motor_signal.motor_y = 0;
 8010946:	609a      	str	r2, [r3, #8]
}
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop
 801094c:	200009a8 	.word	0x200009a8

08010950 <mouseDriver_init>:
void mouseDriver_init(void){
 8010950:	b508      	push	{r3, lr}
	actual_mode = MOUSE_MODE_STOP;
 8010952:	4b07      	ldr	r3, [pc, #28]	; (8010970 <mouseDriver_init+0x20>)
 8010954:	2200      	movs	r2, #0
 8010956:	701a      	strb	r2, [r3, #0]
	mouseDriver_initMode();
	mouseDriver_initSetpoint();
 8010958:	f7ff ffc2 	bl	80108e0 <mouseDriver_initSetpoint>
	mouseDriver_initPoints();
 801095c:	f7ff ffce 	bl	80108fc <mouseDriver_initPoints>
	mouseDriver_initMotorSignal();
 8010960:	f7ff ffee 	bl	8010940 <mouseDriver_initMotorSignal>

	/* Init sensor as well */
	sensorDriver_init();
 8010964:	f002 fdbc 	bl	80134e0 <sensorDriver_init>
	main_stop_motors();
 8010968:	f7ef fec4 	bl	80006f4 <main_stop_motors>
}
 801096c:	bd08      	pop	{r3, pc}
 801096e:	bf00      	nop
 8010970:	200009a5 	.word	0x200009a5

08010974 <mouseDriver_getTime>:
uint32_t mouseDriver_getTime (void){
 8010974:	b508      	push	{r3, lr}
	return (HAL_GetTick());
 8010976:	f7f1 fb8d 	bl	8002094 <HAL_GetTick>
}
 801097a:	bd08      	pop	{r3, pc}

0801097c <mouseDriver_send_status_msg>:
void mouseDriver_send_status_msg(void){
	send_msg = 1;
 801097c:	4b01      	ldr	r3, [pc, #4]	; (8010984 <mouseDriver_send_status_msg+0x8>)
 801097e:	2201      	movs	r2, #1
 8010980:	601a      	str	r2, [r3, #0]
}
 8010982:	4770      	bx	lr
 8010984:	20000034 	.word	0x20000034

08010988 <mouseDriver_sendMsg>:
    }

    if (actual_mode != MOUSE_MODE_AUTO_RUN)
        actual_mode = mode;
}
void mouseDriver_sendMsg(uint32_t msgid){
 8010988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801098c:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8010990:	4605      	mov	r5, r0
    static uint8_t outBuffer[MAX_BYTE_BUFFER_SIZE];
    static uint16_t msg_size = 0;

    while (main_get_huart_tx_state() == HAL_BUSY){
        /*Wait for other messages to be sent*/
        HAL_Delay(1);
 8010992:	2401      	movs	r4, #1
    while (main_get_huart_tx_state() == HAL_BUSY){
 8010994:	e002      	b.n	801099c <mouseDriver_sendMsg+0x14>
        HAL_Delay(1);
 8010996:	4620      	mov	r0, r4
 8010998:	f7f1 fba6 	bl	80020e8 <HAL_Delay>
    while (main_get_huart_tx_state() == HAL_BUSY){
 801099c:	f7ef fe98 	bl	80006d0 <main_get_huart_tx_state>
 80109a0:	2802      	cmp	r0, #2
 80109a2:	d0f8      	beq.n	8010996 <mouseDriver_sendMsg+0xe>
    }

    switch(msgid){
 80109a4:	2d08      	cmp	r5, #8
 80109a6:	f200 811b 	bhi.w	8010be0 <mouseDriver_sendMsg+0x258>
 80109aa:	e8df f015 	tbh	[pc, r5, lsl #1]
 80109ae:	0009      	.short	0x0009
 80109b0:	01ed05c8 	.word	0x01ed05c8
 80109b4:	03e50119 	.word	0x03e50119
 80109b8:	0b9309ab 	.word	0x0b9309ab
 80109bc:	0d7a07c7 	.word	0x0d7a07c7
        case MAVLINK_MSG_ID_HEARTBEAT:
            mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &msg, actual_mode, mouseDriver_getTime());
 80109c0:	4b98      	ldr	r3, [pc, #608]	; (8010c24 <mouseDriver_sendMsg+0x29c>)
 80109c2:	781c      	ldrb	r4, [r3, #0]
	return (HAL_GetTick());
 80109c4:	f7f1 fb66 	bl	8002094 <HAL_GetTick>
 80109c8:	4602      	mov	r2, r0
    _mav_put_uint8_t(buf, 4, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.time = time;
 80109ca:	466b      	mov	r3, sp
 80109cc:	6018      	str	r0, [r3, #0]
    packet.mode = mode;
 80109ce:	711c      	strb	r4, [r3, #4]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80109d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109d4:	923a      	str	r2, [sp, #232]	; 0xe8
 80109d6:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80109da:	2300      	movs	r3, #0
 80109dc:	f88d 30e5 	strb.w	r3, [sp, #229]	; 0xe5
 80109e0:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 80109e4:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80109e8:	4b8f      	ldr	r3, [pc, #572]	; (8010c28 <mouseDriver_sendMsg+0x2a0>)
 80109ea:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80109ec:	f013 0602 	ands.w	r6, r3, #2
 80109f0:	d12e      	bne.n	8010a50 <mouseDriver_sendMsg+0xc8>
 80109f2:	4b8d      	ldr	r3, [pc, #564]	; (8010c28 <mouseDriver_sendMsg+0x2a0>)
 80109f4:	691b      	ldr	r3, [r3, #16]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	f000 80f6 	beq.w	8010be8 <mouseDriver_sendMsg+0x260>
 80109fc:	7818      	ldrb	r0, [r3, #0]
 80109fe:	f000 0001 	and.w	r0, r0, #1
		msg->magic = MAVLINK_STX;
 8010a02:	23fd      	movs	r3, #253	; 0xfd
 8010a04:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8010a08:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f040 80ed 	bne.w	8010bec <mouseDriver_sendMsg+0x264>
 8010a12:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	f040 80ea 	bne.w	8010bf0 <mouseDriver_sendMsg+0x268>
 8010a1c:	f89d 30ea 	ldrb.w	r3, [sp, #234]	; 0xea
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f040 80e7 	bne.w	8010bf4 <mouseDriver_sendMsg+0x26c>
 8010a26:	f89d 30e9 	ldrb.w	r3, [sp, #233]	; 0xe9
		length--;
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	bf0c      	ite	eq
 8010a2e:	2301      	moveq	r3, #1
 8010a30:	2302      	movne	r3, #2
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8010a32:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8010a36:	2200      	movs	r2, #0
 8010a38:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8010a3c:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 8010a40:	2800      	cmp	r0, #0
 8010a42:	f000 80d9 	beq.w	8010bf8 <mouseDriver_sendMsg+0x270>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8010a46:	2201      	movs	r2, #1
 8010a48:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 8010a4c:	240a      	movs	r4, #10
 8010a4e:	e00e      	b.n	8010a6e <mouseDriver_sendMsg+0xe6>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8010a50:	23fe      	movs	r3, #254	; 0xfe
 8010a52:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8010a56:	2305      	movs	r3, #5
 8010a58:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8010a62:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8010a66:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8010a74:	496c      	ldr	r1, [pc, #432]	; (8010c28 <mouseDriver_sendMsg+0x2a0>)
 8010a76:	798a      	ldrb	r2, [r1, #6]
 8010a78:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 8010a7c:	1c55      	adds	r5, r2, #1
 8010a7e:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8010a80:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8010a84:	f88d 1018 	strb.w	r1, [sp, #24]
	buf[1] = msg->len;
 8010a88:	f88d 3019 	strb.w	r3, [sp, #25]
	if (mavlink1) {
 8010a8c:	2e00      	cmp	r6, #0
 8010a8e:	f000 80b5 	beq.w	8010bfc <mouseDriver_sendMsg+0x274>
		buf[2] = msg->seq;
 8010a92:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[3] = msg->sysid;
 8010a96:	2300      	movs	r3, #0
 8010a98:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->compid;
 8010a9c:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->msgid & 0xFF;
 8010aa0:	f88d 301d 	strb.w	r3, [sp, #29]
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
 8010aa4:	1ea6      	subs	r6, r4, #2
 8010aa6:	b2b6      	uxth	r6, r6
 8010aa8:	ab80      	add	r3, sp, #512	; 0x200
 8010aaa:	441e      	add	r6, r3
 8010aac:	f5a6 76f3 	sub.w	r6, r6, #486	; 0x1e6
        *crcAccum = X25_INIT_CRC;
 8010ab0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8010ab4:	f10d 0519 	add.w	r5, sp, #25
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010ab8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8010abc:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8010abe:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8010ac2:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010ac4:	0913      	lsrs	r3, r2, #4
 8010ac6:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010aca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ace:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8010ad2:	42b5      	cmp	r5, r6
 8010ad4:	d1f0      	bne.n	8010ab8 <mouseDriver_sendMsg+0x130>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8010ad6:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8010ada:	b2ba      	uxth	r2, r7
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
 8010adc:	1e53      	subs	r3, r2, #1
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	b1a2      	cbz	r2, 8010b0c <mouseDriver_sendMsg+0x184>
 8010ae2:	aa80      	add	r2, sp, #512	; 0x200
 8010ae4:	4413      	add	r3, r2
 8010ae6:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8010aea:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010aec:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010af0:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8010af2:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8010af6:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010af8:	091a      	lsrs	r2, r3, #4
 8010afa:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8010afe:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8010b02:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8010b06:	b299      	uxth	r1, r3
	while (length--) {
 8010b08:	42b5      	cmp	r5, r6
 8010b0a:	d1ef      	bne.n	8010aec <mouseDriver_sendMsg+0x164>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010b0c:	f081 0389 	eor.w	r3, r1, #137	; 0x89
        tmp ^= (tmp<<4);
 8010b10:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8010b14:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010b16:	0913      	lsrs	r3, r2, #4
 8010b18:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010b1c:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8010b20:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8010b24:	b21b      	sxth	r3, r3
 8010b26:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8010b28:	a93a      	add	r1, sp, #232	; 0xe8
 8010b2a:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8010b2c:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8010b30:	0a15      	lsrs	r5, r2, #8
 8010b32:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8010b36:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8010b38:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d177      	bne.n	8010c30 <mouseDriver_sendMsg+0x2a8>
	return msg->len + header_len + 2 + signature_len;
 8010b40:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8010b44:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8010b48:	29fe      	cmp	r1, #254	; 0xfe
 8010b4a:	f000 8103 	beq.w	8010d54 <mouseDriver_sendMsg+0x3cc>
	while (length > 1 && payload[length-1] == 0) {
 8010b4e:	2c01      	cmp	r4, #1
 8010b50:	d911      	bls.n	8010b76 <mouseDriver_sendMsg+0x1ee>
 8010b52:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8010b56:	5d1b      	ldrb	r3, [r3, r4]
 8010b58:	b96b      	cbnz	r3, 8010b76 <mouseDriver_sendMsg+0x1ee>
 8010b5a:	1e63      	subs	r3, r4, #1
 8010b5c:	aa80      	add	r2, sp, #512	; 0x200
 8010b5e:	fa52 f383 	uxtab	r3, r2, r3
 8010b62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8010b66:	3c01      	subs	r4, #1
 8010b68:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8010b6a:	2c01      	cmp	r4, #1
 8010b6c:	d003      	beq.n	8010b76 <mouseDriver_sendMsg+0x1ee>
 8010b6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b72:	2a00      	cmp	r2, #0
 8010b74:	d0f7      	beq.n	8010b66 <mouseDriver_sendMsg+0x1de>
		buf[0] = msg->magic;
 8010b76:	4d2d      	ldr	r5, [pc, #180]	; (8010c2c <mouseDriver_sendMsg+0x2a4>)
 8010b78:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8010b7a:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8010b7c:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8010b80:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8010b82:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8010b86:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8010b88:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8010b8c:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8010b8e:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8010b92:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8010b94:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8010b98:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8010b9a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8010b9c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8010ba0:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8010ba2:	121a      	asrs	r2, r3, #8
 8010ba4:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8010ba6:	141b      	asrs	r3, r3, #16
 8010ba8:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8010baa:	4622      	mov	r2, r4
 8010bac:	a93a      	add	r1, sp, #232	; 0xe8
 8010bae:	f105 000a 	add.w	r0, r5, #10
 8010bb2:	f7ef fb4d 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8010bb6:	f104 020a 	add.w	r2, r4, #10
 8010bba:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8010bbc:	f016 0f01 	tst.w	r6, #1
 8010bc0:	f042 806d 	bne.w	8012c9e <mouseDriver_sendMsg+0x2316>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8010bc4:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8010bc6:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8010bca:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8010bcc:	0a12      	lsrs	r2, r2, #8
 8010bce:	705a      	strb	r2, [r3, #1]
 8010bd0:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8010bd2:	4421      	add	r1, r4
 8010bd4:	3103      	adds	r1, #3
 8010bd6:	4419      	add	r1, r3
            msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
            main_transmit_buffer(outBuffer, msg_size);
 8010bd8:	b289      	uxth	r1, r1
 8010bda:	4814      	ldr	r0, [pc, #80]	; (8010c2c <mouseDriver_sendMsg+0x2a4>)
 8010bdc:	f7ef fd80 	bl	80006e0 <main_transmit_buffer>
            main_transmit_buffer(outBuffer, msg_size);
            break;
        default:
            break;
    }
}
 8010be0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8010be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8010be8:	2000      	movs	r0, #0
 8010bea:	e70a      	b.n	8010a02 <mouseDriver_sendMsg+0x7a>
	while (length > 1 && payload[length-1] == 0) {
 8010bec:	2305      	movs	r3, #5
 8010bee:	e720      	b.n	8010a32 <mouseDriver_sendMsg+0xaa>
		length--;
 8010bf0:	2304      	movs	r3, #4
 8010bf2:	e71e      	b.n	8010a32 <mouseDriver_sendMsg+0xaa>
 8010bf4:	2303      	movs	r3, #3
 8010bf6:	e71c      	b.n	8010a32 <mouseDriver_sendMsg+0xaa>
	if (signing) {
 8010bf8:	240a      	movs	r4, #10
 8010bfa:	e735      	b.n	8010a68 <mouseDriver_sendMsg+0xe0>
		buf[2] = msg->incompat_flags;
 8010bfc:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8010c00:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[3] = msg->compat_flags;
 8010c04:	2300      	movs	r3, #0
 8010c06:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->seq;
 8010c0a:	f88d 201c 	strb.w	r2, [sp, #28]
		buf[5] = msg->sysid;
 8010c0e:	f88d 301d 	strb.w	r3, [sp, #29]
		buf[6] = msg->compid;
 8010c12:	f88d 301e 	strb.w	r3, [sp, #30]
		buf[7] = msg->msgid & 0xFF;
 8010c16:	f88d 301f 	strb.w	r3, [sp, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8010c1a:	f88d 3020 	strb.w	r3, [sp, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8010c1e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8010c22:	e73f      	b.n	8010aa4 <mouseDriver_sendMsg+0x11c>
 8010c24:	200009a5 	.word	0x200009a5
 8010c28:	20000a00 	.word	0x20000a00
 8010c2c:	20000a60 	.word	0x20000a60
		mavlink_sign_packet(status->signing,
 8010c30:	4b76      	ldr	r3, [pc, #472]	; (8010e0c <mouseDriver_sendMsg+0x484>)
 8010c32:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8010c34:	2900      	cmp	r1, #0
 8010c36:	d083      	beq.n	8010b40 <mouseDriver_sendMsg+0x1b8>
 8010c38:	780b      	ldrb	r3, [r1, #0]
 8010c3a:	f013 0f01 	tst.w	r3, #1
 8010c3e:	f43f af7f 	beq.w	8010b40 <mouseDriver_sendMsg+0x1b8>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8010c42:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8010c46:	784b      	ldrb	r3, [r1, #1]
 8010c48:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8010c4c:	688b      	ldr	r3, [r1, #8]
 8010c4e:	68ca      	ldr	r2, [r1, #12]
 8010c50:	9302      	str	r3, [sp, #8]
 8010c52:	9203      	str	r2, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8010c54:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8010c58:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010c5c:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8010c60:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8010c64:	1c56      	adds	r6, r2, #1
 8010c66:	f143 0700 	adc.w	r7, r3, #0
 8010c6a:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8010c6e:	2600      	movs	r6, #0
 8010c70:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8010c72:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8010c74:	4b66      	ldr	r3, [pc, #408]	; (8010e10 <mouseDriver_sendMsg+0x488>)
 8010c76:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8010c78:	4b66      	ldr	r3, [pc, #408]	; (8010e14 <mouseDriver_sendMsg+0x48c>)
 8010c7a:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8010c7c:	4b66      	ldr	r3, [pc, #408]	; (8010e18 <mouseDriver_sendMsg+0x490>)
 8010c7e:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8010c80:	4b66      	ldr	r3, [pc, #408]	; (8010e1c <mouseDriver_sendMsg+0x494>)
 8010c82:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8010c84:	4b66      	ldr	r3, [pc, #408]	; (8010e20 <mouseDriver_sendMsg+0x498>)
 8010c86:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8010c88:	4b66      	ldr	r3, [pc, #408]	; (8010e24 <mouseDriver_sendMsg+0x49c>)
 8010c8a:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8010c8c:	4b66      	ldr	r3, [pc, #408]	; (8010e28 <mouseDriver_sendMsg+0x4a0>)
 8010c8e:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8010c90:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8010c94:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8010c98:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8010c9c:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8010c9e:	2220      	movs	r2, #32
 8010ca0:	3110      	adds	r1, #16
 8010ca2:	a81d      	add	r0, sp, #116	; 0x74
 8010ca4:	f7ff fd3e 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8010ca8:	4622      	mov	r2, r4
 8010caa:	a906      	add	r1, sp, #24
 8010cac:	a81d      	add	r0, sp, #116	; 0x74
 8010cae:	f7ff fd39 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8010cb2:	462a      	mov	r2, r5
 8010cb4:	a93a      	add	r1, sp, #232	; 0xe8
 8010cb6:	a81d      	add	r0, sp, #116	; 0x74
 8010cb8:	f7ff fd34 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8010cbc:	2202      	movs	r2, #2
 8010cbe:	ab3a      	add	r3, sp, #232	; 0xe8
 8010cc0:	1959      	adds	r1, r3, r5
 8010cc2:	a81d      	add	r0, sp, #116	; 0x74
 8010cc4:	f7ff fd2e 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8010cc8:	2207      	movs	r2, #7
 8010cca:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8010cce:	a81d      	add	r0, sp, #116	; 0x74
 8010cd0:	f7ff fd28 	bl	8010724 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8010cd4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8010cd6:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8010cda:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8010cde:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8010ce2:	2380      	movs	r3, #128	; 0x80
 8010ce4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8010ce8:	2247      	movs	r2, #71	; 0x47
 8010cea:	4631      	mov	r1, r6
 8010cec:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8010cf0:	f002 fd56 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8010cf4:	ab0b      	add	r3, sp, #44	; 0x2c
 8010cf6:	442b      	add	r3, r5
 8010cf8:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8010cfa:	0a22      	lsrs	r2, r4, #8
 8010cfc:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8010cfe:	0c22      	lsrs	r2, r4, #16
 8010d00:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8010d02:	0e24      	lsrs	r4, r4, #24
 8010d04:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8010d06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010d08:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8010d0a:	0a11      	lsrs	r1, r2, #8
 8010d0c:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8010d0e:	0c11      	lsrs	r1, r2, #16
 8010d10:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8010d12:	0e12      	lsrs	r2, r2, #24
 8010d14:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8010d16:	f105 0209 	add.w	r2, r5, #9
 8010d1a:	a90b      	add	r1, sp, #44	; 0x2c
 8010d1c:	a81d      	add	r0, sp, #116	; 0x74
 8010d1e:	f7ff fd01 	bl	8010724 <mavlink_sha256_update>
    result[0] = p[3];
 8010d22:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8010d26:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 8010d2a:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8010d2e:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8010d32:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8010d36:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8010d3a:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8010d3e:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8010d42:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8010d46:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8010d4a:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8010d4e:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8010d52:	e6f5      	b.n	8010b40 <mouseDriver_sendMsg+0x1b8>
		buf[0] = msg->magic;
 8010d54:	4d35      	ldr	r5, [pc, #212]	; (8010e2c <mouseDriver_sendMsg+0x4a4>)
 8010d56:	23fe      	movs	r3, #254	; 0xfe
 8010d58:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8010d5a:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8010d5c:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8010d60:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8010d62:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8010d66:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8010d68:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8010d6c:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8010d6e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8010d70:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8010d74:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8010d76:	4622      	mov	r2, r4
 8010d78:	a93a      	add	r1, sp, #232	; 0xe8
 8010d7a:	1da8      	adds	r0, r5, #6
 8010d7c:	f7ef fa68 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8010d80:	1da3      	adds	r3, r4, #6
 8010d82:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8010d84:	2105      	movs	r1, #5
 8010d86:	e71e      	b.n	8010bc6 <mouseDriver_sendMsg+0x23e>
 * @param msg The MAVLink message to compress the data into
 * @param speed_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_setpoint_t* speed_setpoint)
{
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y);
 8010d88:	4a29      	ldr	r2, [pc, #164]	; (8010e30 <mouseDriver_sendMsg+0x4a8>)
 8010d8a:	6851      	ldr	r1, [r2, #4]
    packet.setpoint_x = setpoint_x;
 8010d8c:	ab02      	add	r3, sp, #8
 8010d8e:	6812      	ldr	r2, [r2, #0]
 8010d90:	9202      	str	r2, [sp, #8]
    packet.setpoint_y = setpoint_y;
 8010d92:	9103      	str	r1, [sp, #12]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8010d94:	aa3a      	add	r2, sp, #232	; 0xe8
 8010d96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010d9a:	e882 0003 	stmia.w	r2, {r0, r1}
    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	2202      	movs	r2, #2
 8010da2:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 8010da6:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 8010daa:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8010dae:	4b17      	ldr	r3, [pc, #92]	; (8010e0c <mouseDriver_sendMsg+0x484>)
 8010db0:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8010db2:	ea13 0502 	ands.w	r5, r3, r2
 8010db6:	d13d      	bne.n	8010e34 <mouseDriver_sendMsg+0x4ac>
 8010db8:	4b14      	ldr	r3, [pc, #80]	; (8010e0c <mouseDriver_sendMsg+0x484>)
 8010dba:	691b      	ldr	r3, [r3, #16]
 8010dbc:	b123      	cbz	r3, 8010dc8 <mouseDriver_sendMsg+0x440>
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	f013 0f01 	tst.w	r3, #1
 8010dc4:	f042 8043 	bne.w	8012e4e <mouseDriver_sendMsg+0x24c6>
		msg->magic = MAVLINK_STX;
 8010dc8:	23fd      	movs	r3, #253	; 0xfd
 8010dca:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8010dce:	f89d 30ef 	ldrb.w	r3, [sp, #239]	; 0xef
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	f040 80f8 	bne.w	8010fc8 <mouseDriver_sendMsg+0x640>
 8010dd8:	2000      	movs	r0, #0
 8010dda:	f10d 02ef 	add.w	r2, sp, #239	; 0xef
		length--;
 8010dde:	2307      	movs	r3, #7
	while (length > 1 && payload[length-1] == 0) {
 8010de0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8010de4:	b919      	cbnz	r1, 8010dee <mouseDriver_sendMsg+0x466>
		length--;
 8010de6:	3b01      	subs	r3, #1
 8010de8:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d1f8      	bne.n	8010de0 <mouseDriver_sendMsg+0x458>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8010dee:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8010df2:	2200      	movs	r2, #0
 8010df4:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8010df8:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	f000 80e6 	beq.w	8010fce <mouseDriver_sendMsg+0x646>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8010e02:	2201      	movs	r2, #1
 8010e04:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 8010e08:	240a      	movs	r4, #10
 8010e0a:	e022      	b.n	8010e52 <mouseDriver_sendMsg+0x4ca>
 8010e0c:	20000a00 	.word	0x20000a00
 8010e10:	6a09e667 	.word	0x6a09e667
 8010e14:	bb67ae85 	.word	0xbb67ae85
 8010e18:	3c6ef372 	.word	0x3c6ef372
 8010e1c:	a54ff53a 	.word	0xa54ff53a
 8010e20:	510e527f 	.word	0x510e527f
 8010e24:	9b05688c 	.word	0x9b05688c
 8010e28:	1f83d9ab 	.word	0x1f83d9ab
 8010e2c:	20000a60 	.word	0x20000a60
 8010e30:	200009ec 	.word	0x200009ec
		msg->magic = MAVLINK_STX_MAVLINK1;
 8010e34:	23fe      	movs	r3, #254	; 0xfe
 8010e36:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8010e3a:	2308      	movs	r3, #8
 8010e3c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8010e40:	2000      	movs	r0, #0
 8010e42:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8010e46:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8010e4a:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8010e52:	2200      	movs	r2, #0
 8010e54:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8010e58:	49be      	ldr	r1, [pc, #760]	; (8011154 <mouseDriver_sendMsg+0x7cc>)
 8010e5a:	798a      	ldrb	r2, [r1, #6]
 8010e5c:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 8010e60:	1c56      	adds	r6, r2, #1
 8010e62:	718e      	strb	r6, [r1, #6]
	buf[0] = msg->magic;
 8010e64:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8010e68:	f88d 1018 	strb.w	r1, [sp, #24]
	buf[1] = msg->len;
 8010e6c:	f88d 3019 	strb.w	r3, [sp, #25]
	if (mavlink1) {
 8010e70:	2d00      	cmp	r5, #0
 8010e72:	f000 80ae 	beq.w	8010fd2 <mouseDriver_sendMsg+0x64a>
		buf[2] = msg->seq;
 8010e76:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[3] = msg->sysid;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->compid;
 8010e80:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->msgid & 0xFF;
 8010e84:	2302      	movs	r3, #2
 8010e86:	f88d 301d 	strb.w	r3, [sp, #29]
	while (length--) {
 8010e8a:	1ea6      	subs	r6, r4, #2
 8010e8c:	b2b6      	uxth	r6, r6
 8010e8e:	ab80      	add	r3, sp, #512	; 0x200
 8010e90:	441e      	add	r6, r3
 8010e92:	f5a6 76f3 	sub.w	r6, r6, #486	; 0x1e6
        *crcAccum = X25_INIT_CRC;
 8010e96:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8010e9a:	f10d 0519 	add.w	r5, sp, #25
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010e9e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8010ea2:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8010ea4:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8010ea8:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010eaa:	0913      	lsrs	r3, r2, #4
 8010eac:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010eb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010eb4:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8010eb8:	42b5      	cmp	r5, r6
 8010eba:	d1f0      	bne.n	8010e9e <mouseDriver_sendMsg+0x516>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8010ebc:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8010ec0:	b2ba      	uxth	r2, r7
	while (length--) {
 8010ec2:	1e53      	subs	r3, r2, #1
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	b1a2      	cbz	r2, 8010ef2 <mouseDriver_sendMsg+0x56a>
 8010ec8:	aa80      	add	r2, sp, #512	; 0x200
 8010eca:	4413      	add	r3, r2
 8010ecc:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8010ed0:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010ed2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010ed6:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8010ed8:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8010edc:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010ede:	091a      	lsrs	r2, r3, #4
 8010ee0:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8010ee4:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8010ee8:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8010eec:	b299      	uxth	r1, r3
	while (length--) {
 8010eee:	42b5      	cmp	r5, r6
 8010ef0:	d1ef      	bne.n	8010ed2 <mouseDriver_sendMsg+0x54a>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010ef2:	f081 0326 	eor.w	r3, r1, #38	; 0x26
        tmp ^= (tmp<<4);
 8010ef6:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8010efa:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010efc:	0913      	lsrs	r3, r2, #4
 8010efe:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010f02:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8010f06:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8010f0a:	b21b      	sxth	r3, r3
 8010f0c:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8010f0e:	a93a      	add	r1, sp, #232	; 0xe8
 8010f10:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8010f12:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8010f16:	0a15      	lsrs	r5, r2, #8
 8010f18:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8010f1c:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8010f1e:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8010f22:	2800      	cmp	r0, #0
 8010f24:	d16a      	bne.n	8010ffc <mouseDriver_sendMsg+0x674>
	return msg->len + header_len + 2 + signature_len;
 8010f26:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8010f2a:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8010f2e:	29fe      	cmp	r1, #254	; 0xfe
 8010f30:	f000 80f5 	beq.w	801111e <mouseDriver_sendMsg+0x796>
	while (length > 1 && payload[length-1] == 0) {
 8010f34:	2c01      	cmp	r4, #1
 8010f36:	d911      	bls.n	8010f5c <mouseDriver_sendMsg+0x5d4>
 8010f38:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8010f3c:	5d1b      	ldrb	r3, [r3, r4]
 8010f3e:	b96b      	cbnz	r3, 8010f5c <mouseDriver_sendMsg+0x5d4>
 8010f40:	1e63      	subs	r3, r4, #1
 8010f42:	aa80      	add	r2, sp, #512	; 0x200
 8010f44:	fa52 f383 	uxtab	r3, r2, r3
 8010f48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8010f4c:	3c01      	subs	r4, #1
 8010f4e:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8010f50:	2c01      	cmp	r4, #1
 8010f52:	d003      	beq.n	8010f5c <mouseDriver_sendMsg+0x5d4>
 8010f54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f58:	2a00      	cmp	r2, #0
 8010f5a:	d0f7      	beq.n	8010f4c <mouseDriver_sendMsg+0x5c4>
		buf[0] = msg->magic;
 8010f5c:	4d7e      	ldr	r5, [pc, #504]	; (8011158 <mouseDriver_sendMsg+0x7d0>)
 8010f5e:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8010f60:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8010f62:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8010f66:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8010f68:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8010f6c:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8010f6e:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8010f72:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8010f74:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8010f78:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8010f7a:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8010f7e:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8010f80:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8010f82:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8010f86:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8010f88:	121a      	asrs	r2, r3, #8
 8010f8a:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8010f8c:	141b      	asrs	r3, r3, #16
 8010f8e:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8010f90:	4622      	mov	r2, r4
 8010f92:	a93a      	add	r1, sp, #232	; 0xe8
 8010f94:	f105 000a 	add.w	r0, r5, #10
 8010f98:	f7ef f95a 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8010f9c:	f104 020a 	add.w	r2, r4, #10
 8010fa0:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8010fa2:	f016 0f01 	tst.w	r6, #1
 8010fa6:	f041 8691 	bne.w	8012ccc <mouseDriver_sendMsg+0x2344>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8010faa:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8010fac:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8010fb0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8010fb2:	0a12      	lsrs	r2, r2, #8
 8010fb4:	705a      	strb	r2, [r3, #1]
 8010fb6:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8010fb8:	4421      	add	r1, r4
 8010fba:	3103      	adds	r1, #3
 8010fbc:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8010fbe:	b289      	uxth	r1, r1
 8010fc0:	4865      	ldr	r0, [pc, #404]	; (8011158 <mouseDriver_sendMsg+0x7d0>)
 8010fc2:	f7ef fb8d 	bl	80006e0 <main_transmit_buffer>
            break;
 8010fc6:	e60b      	b.n	8010be0 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 8010fc8:	2000      	movs	r0, #0
 8010fca:	2308      	movs	r3, #8
 8010fcc:	e70f      	b.n	8010dee <mouseDriver_sendMsg+0x466>
	if (signing) {
 8010fce:	240a      	movs	r4, #10
 8010fd0:	e73c      	b.n	8010e4c <mouseDriver_sendMsg+0x4c4>
		buf[2] = msg->incompat_flags;
 8010fd2:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8010fd6:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[3] = msg->compat_flags;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->seq;
 8010fe0:	f88d 201c 	strb.w	r2, [sp, #28]
		buf[5] = msg->sysid;
 8010fe4:	f88d 301d 	strb.w	r3, [sp, #29]
		buf[6] = msg->compid;
 8010fe8:	f88d 301e 	strb.w	r3, [sp, #30]
		buf[7] = msg->msgid & 0xFF;
 8010fec:	2202      	movs	r2, #2
 8010fee:	f88d 201f 	strb.w	r2, [sp, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8010ff2:	f88d 3020 	strb.w	r3, [sp, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8010ff6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8010ffa:	e746      	b.n	8010e8a <mouseDriver_sendMsg+0x502>
		mavlink_sign_packet(status->signing,
 8010ffc:	4b55      	ldr	r3, [pc, #340]	; (8011154 <mouseDriver_sendMsg+0x7cc>)
 8010ffe:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8011000:	2900      	cmp	r1, #0
 8011002:	d090      	beq.n	8010f26 <mouseDriver_sendMsg+0x59e>
 8011004:	780b      	ldrb	r3, [r1, #0]
 8011006:	f013 0f01 	tst.w	r3, #1
 801100a:	d08c      	beq.n	8010f26 <mouseDriver_sendMsg+0x59e>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 801100c:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8011010:	784b      	ldrb	r3, [r1, #1]
 8011012:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8011016:	688b      	ldr	r3, [r1, #8]
 8011018:	68ca      	ldr	r2, [r1, #12]
 801101a:	9300      	str	r3, [sp, #0]
 801101c:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 801101e:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8011022:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011026:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 801102a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801102e:	1c56      	adds	r6, r2, #1
 8011030:	f143 0700 	adc.w	r7, r3, #0
 8011034:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8011038:	2600      	movs	r6, #0
 801103a:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 801103c:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 801103e:	4b47      	ldr	r3, [pc, #284]	; (801115c <mouseDriver_sendMsg+0x7d4>)
 8011040:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8011042:	4b47      	ldr	r3, [pc, #284]	; (8011160 <mouseDriver_sendMsg+0x7d8>)
 8011044:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8011046:	4b47      	ldr	r3, [pc, #284]	; (8011164 <mouseDriver_sendMsg+0x7dc>)
 8011048:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 801104a:	4b47      	ldr	r3, [pc, #284]	; (8011168 <mouseDriver_sendMsg+0x7e0>)
 801104c:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 801104e:	4b47      	ldr	r3, [pc, #284]	; (801116c <mouseDriver_sendMsg+0x7e4>)
 8011050:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8011052:	4b47      	ldr	r3, [pc, #284]	; (8011170 <mouseDriver_sendMsg+0x7e8>)
 8011054:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8011056:	4b47      	ldr	r3, [pc, #284]	; (8011174 <mouseDriver_sendMsg+0x7ec>)
 8011058:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 801105a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 801105e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8011062:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8011066:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8011068:	2220      	movs	r2, #32
 801106a:	3110      	adds	r1, #16
 801106c:	a81d      	add	r0, sp, #116	; 0x74
 801106e:	f7ff fb59 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8011072:	4622      	mov	r2, r4
 8011074:	a906      	add	r1, sp, #24
 8011076:	a81d      	add	r0, sp, #116	; 0x74
 8011078:	f7ff fb54 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 801107c:	462a      	mov	r2, r5
 801107e:	a93a      	add	r1, sp, #232	; 0xe8
 8011080:	a81d      	add	r0, sp, #116	; 0x74
 8011082:	f7ff fb4f 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8011086:	2202      	movs	r2, #2
 8011088:	ab3a      	add	r3, sp, #232	; 0xe8
 801108a:	1959      	adds	r1, r3, r5
 801108c:	a81d      	add	r0, sp, #116	; 0x74
 801108e:	f7ff fb49 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8011092:	2207      	movs	r2, #7
 8011094:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8011098:	a81d      	add	r0, sp, #116	; 0x74
 801109a:	f7ff fb43 	bl	8010724 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 801109e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80110a0:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80110a4:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 80110a8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 80110ac:	2380      	movs	r3, #128	; 0x80
 80110ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80110b2:	2247      	movs	r2, #71	; 0x47
 80110b4:	4631      	mov	r1, r6
 80110b6:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 80110ba:	f002 fb71 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80110be:	ab0b      	add	r3, sp, #44	; 0x2c
 80110c0:	442b      	add	r3, r5
 80110c2:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80110c4:	0a22      	lsrs	r2, r4, #8
 80110c6:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80110c8:	0c22      	lsrs	r2, r4, #16
 80110ca:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80110cc:	0e24      	lsrs	r4, r4, #24
 80110ce:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80110d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80110d2:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80110d4:	0a11      	lsrs	r1, r2, #8
 80110d6:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80110d8:	0c11      	lsrs	r1, r2, #16
 80110da:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80110dc:	0e12      	lsrs	r2, r2, #24
 80110de:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80110e0:	f105 0209 	add.w	r2, r5, #9
 80110e4:	a90b      	add	r1, sp, #44	; 0x2c
 80110e6:	a81d      	add	r0, sp, #116	; 0x74
 80110e8:	f7ff fb1c 	bl	8010724 <mavlink_sha256_update>
    result[0] = p[3];
 80110ec:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80110f0:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 80110f4:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 80110f8:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 80110fc:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8011100:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8011104:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8011108:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 801110c:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8011110:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8011114:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8011118:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 801111c:	e703      	b.n	8010f26 <mouseDriver_sendMsg+0x59e>
		buf[0] = msg->magic;
 801111e:	4d0e      	ldr	r5, [pc, #56]	; (8011158 <mouseDriver_sendMsg+0x7d0>)
 8011120:	23fe      	movs	r3, #254	; 0xfe
 8011122:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8011124:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8011126:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 801112a:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 801112c:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011130:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8011132:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011136:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8011138:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801113a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801113e:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8011140:	4622      	mov	r2, r4
 8011142:	a93a      	add	r1, sp, #232	; 0xe8
 8011144:	1da8      	adds	r0, r5, #6
 8011146:	f7ef f883 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 801114a:	1da3      	adds	r3, r4, #6
 801114c:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 801114e:	2105      	movs	r1, #5
 8011150:	e72c      	b.n	8010fac <mouseDriver_sendMsg+0x624>
 8011152:	bf00      	nop
 8011154:	20000a00 	.word	0x20000a00
 8011158:	20000a60 	.word	0x20000a60
 801115c:	6a09e667 	.word	0x6a09e667
 8011160:	bb67ae85 	.word	0xbb67ae85
 8011164:	3c6ef372 	.word	0x3c6ef372
 8011168:	a54ff53a 	.word	0xa54ff53a
 801116c:	510e527f 	.word	0x510e527f
 8011170:	9b05688c 	.word	0x9b05688c
 8011174:	1f83d9ab 	.word	0x1f83d9ab
 * @param msg The MAVLink message to compress the data into
 * @param motor_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_motor_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_motor_setpoint_t* motor_setpoint)
{
    return mavlink_msg_motor_setpoint_pack(system_id, component_id, msg, motor_setpoint->time, motor_setpoint->motor_x, motor_setpoint->motor_y);
 8011178:	4a93      	ldr	r2, [pc, #588]	; (80113c8 <mouseDriver_sendMsg+0xa40>)
 801117a:	6850      	ldr	r0, [r2, #4]
 801117c:	6891      	ldr	r1, [r2, #8]
    packet.time = time;
 801117e:	ab06      	add	r3, sp, #24
 8011180:	6812      	ldr	r2, [r2, #0]
 8011182:	9206      	str	r2, [sp, #24]
    packet.motor_x = motor_x;
 8011184:	9007      	str	r0, [sp, #28]
    packet.motor_y = motor_y;
 8011186:	9108      	str	r1, [sp, #32]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
 8011188:	ac3a      	add	r4, sp, #232	; 0xe8
 801118a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801118e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_MOTOR_SETPOINT;
 8011192:	2300      	movs	r3, #0
 8011194:	2204      	movs	r2, #4
 8011196:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 801119a:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 801119e:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80111a2:	4b8a      	ldr	r3, [pc, #552]	; (80113cc <mouseDriver_sendMsg+0xa44>)
 80111a4:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80111a6:	f013 0602 	ands.w	r6, r3, #2
 80111aa:	d129      	bne.n	8011200 <mouseDriver_sendMsg+0x878>
 80111ac:	4b87      	ldr	r3, [pc, #540]	; (80113cc <mouseDriver_sendMsg+0xa44>)
 80111ae:	691b      	ldr	r3, [r3, #16]
 80111b0:	b123      	cbz	r3, 80111bc <mouseDriver_sendMsg+0x834>
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	f013 0f01 	tst.w	r3, #1
 80111b8:	f041 865e 	bne.w	8012e78 <mouseDriver_sendMsg+0x24f0>
		msg->magic = MAVLINK_STX;
 80111bc:	23fd      	movs	r3, #253	; 0xfd
 80111be:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 80111c2:	f89d 30f3 	ldrb.w	r3, [sp, #243]	; 0xf3
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f040 80e4 	bne.w	8011394 <mouseDriver_sendMsg+0xa0c>
 80111cc:	2000      	movs	r0, #0
 80111ce:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
		length--;
 80111d2:	230b      	movs	r3, #11
	while (length > 1 && payload[length-1] == 0) {
 80111d4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80111d8:	b919      	cbnz	r1, 80111e2 <mouseDriver_sendMsg+0x85a>
		length--;
 80111da:	3b01      	subs	r3, #1
 80111dc:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d1f8      	bne.n	80111d4 <mouseDriver_sendMsg+0x84c>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80111e2:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 80111e6:	2200      	movs	r2, #0
 80111e8:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 80111ec:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 80111f0:	2800      	cmp	r0, #0
 80111f2:	f000 80d2 	beq.w	801139a <mouseDriver_sendMsg+0xa12>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80111f6:	2201      	movs	r2, #1
 80111f8:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 80111fc:	240a      	movs	r4, #10
 80111fe:	e00e      	b.n	801121e <mouseDriver_sendMsg+0x896>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8011200:	23fe      	movs	r3, #254	; 0xfe
 8011202:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8011206:	230c      	movs	r3, #12
 8011208:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 801120c:	2000      	movs	r0, #0
 801120e:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8011212:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8011216:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8011218:	2200      	movs	r2, #0
 801121a:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 801121e:	2200      	movs	r2, #0
 8011220:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8011224:	4969      	ldr	r1, [pc, #420]	; (80113cc <mouseDriver_sendMsg+0xa44>)
 8011226:	798a      	ldrb	r2, [r1, #6]
 8011228:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 801122c:	1c55      	adds	r5, r2, #1
 801122e:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8011230:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011234:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 8011238:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 801123c:	2e00      	cmp	r6, #0
 801123e:	f000 80ae 	beq.w	801139e <mouseDriver_sendMsg+0xa16>
		buf[2] = msg->seq;
 8011242:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 8011246:	2300      	movs	r3, #0
 8011248:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 801124c:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 8011250:	2304      	movs	r3, #4
 8011252:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 8011256:	1ea6      	subs	r6, r4, #2
 8011258:	b2b6      	uxth	r6, r6
 801125a:	ab80      	add	r3, sp, #512	; 0x200
 801125c:	441e      	add	r6, r3
 801125e:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 8011262:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8011266:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801126a:	f815 2b01 	ldrb.w	r2, [r5], #1
 801126e:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8011270:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8011274:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011276:	0913      	lsrs	r3, r2, #4
 8011278:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 801127c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011280:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8011284:	42b5      	cmp	r5, r6
 8011286:	d1f0      	bne.n	801126a <mouseDriver_sendMsg+0x8e2>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8011288:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 801128c:	b2ba      	uxth	r2, r7
	while (length--) {
 801128e:	1e53      	subs	r3, r2, #1
 8011290:	b29b      	uxth	r3, r3
 8011292:	b1a2      	cbz	r2, 80112be <mouseDriver_sendMsg+0x936>
 8011294:	aa80      	add	r2, sp, #512	; 0x200
 8011296:	4413      	add	r3, r2
 8011298:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 801129c:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801129e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80112a2:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80112a4:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80112a8:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80112aa:	091a      	lsrs	r2, r3, #4
 80112ac:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80112b0:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 80112b4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 80112b8:	b299      	uxth	r1, r3
	while (length--) {
 80112ba:	42b5      	cmp	r5, r6
 80112bc:	d1ef      	bne.n	801129e <mouseDriver_sendMsg+0x916>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80112be:	f081 0370 	eor.w	r3, r1, #112	; 0x70
        tmp ^= (tmp<<4);
 80112c2:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80112c6:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80112c8:	0913      	lsrs	r3, r2, #4
 80112ca:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80112ce:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80112d2:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80112d6:	b21b      	sxth	r3, r3
 80112d8:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80112da:	a93a      	add	r1, sp, #232	; 0xe8
 80112dc:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80112de:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 80112e2:	0a15      	lsrs	r5, r2, #8
 80112e4:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 80112e8:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 80112ea:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d170      	bne.n	80113d4 <mouseDriver_sendMsg+0xa4c>
	return msg->len + header_len + 2 + signature_len;
 80112f2:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80112f6:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80112fa:	29fe      	cmp	r1, #254	; 0xfe
 80112fc:	f000 8105 	beq.w	801150a <mouseDriver_sendMsg+0xb82>
	while (length > 1 && payload[length-1] == 0) {
 8011300:	2c01      	cmp	r4, #1
 8011302:	d911      	bls.n	8011328 <mouseDriver_sendMsg+0x9a0>
 8011304:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8011308:	5d1b      	ldrb	r3, [r3, r4]
 801130a:	b96b      	cbnz	r3, 8011328 <mouseDriver_sendMsg+0x9a0>
 801130c:	1e63      	subs	r3, r4, #1
 801130e:	aa80      	add	r2, sp, #512	; 0x200
 8011310:	fa52 f383 	uxtab	r3, r2, r3
 8011314:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8011318:	3c01      	subs	r4, #1
 801131a:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 801131c:	2c01      	cmp	r4, #1
 801131e:	d003      	beq.n	8011328 <mouseDriver_sendMsg+0x9a0>
 8011320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011324:	2a00      	cmp	r2, #0
 8011326:	d0f7      	beq.n	8011318 <mouseDriver_sendMsg+0x990>
		buf[0] = msg->magic;
 8011328:	4d29      	ldr	r5, [pc, #164]	; (80113d0 <mouseDriver_sendMsg+0xa48>)
 801132a:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 801132c:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 801132e:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8011332:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8011334:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8011338:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 801133a:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 801133e:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8011340:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011344:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8011346:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801134a:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 801134c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801134e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011352:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011354:	121a      	asrs	r2, r3, #8
 8011356:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011358:	141b      	asrs	r3, r3, #16
 801135a:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 801135c:	4622      	mov	r2, r4
 801135e:	a93a      	add	r1, sp, #232	; 0xe8
 8011360:	f105 000a 	add.w	r0, r5, #10
 8011364:	f7ee ff74 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8011368:	f104 020a 	add.w	r2, r4, #10
 801136c:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 801136e:	f016 0f01 	tst.w	r6, #1
 8011372:	f041 84c2 	bne.w	8012cfa <mouseDriver_sendMsg+0x2372>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8011376:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8011378:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 801137c:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 801137e:	0a12      	lsrs	r2, r2, #8
 8011380:	705a      	strb	r2, [r3, #1]
 8011382:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8011384:	4421      	add	r1, r4
 8011386:	3103      	adds	r1, #3
 8011388:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 801138a:	b289      	uxth	r1, r1
 801138c:	4810      	ldr	r0, [pc, #64]	; (80113d0 <mouseDriver_sendMsg+0xa48>)
 801138e:	f7ef f9a7 	bl	80006e0 <main_transmit_buffer>
            break;
 8011392:	e425      	b.n	8010be0 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 8011394:	2000      	movs	r0, #0
 8011396:	230c      	movs	r3, #12
 8011398:	e723      	b.n	80111e2 <mouseDriver_sendMsg+0x85a>
	if (signing) {
 801139a:	240a      	movs	r4, #10
 801139c:	e73c      	b.n	8011218 <mouseDriver_sendMsg+0x890>
		buf[2] = msg->incompat_flags;
 801139e:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 80113a2:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 80113a6:	2300      	movs	r3, #0
 80113a8:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 80113ac:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 80113b0:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 80113b4:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 80113b8:	2204      	movs	r2, #4
 80113ba:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80113be:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80113c2:	f88d 3011 	strb.w	r3, [sp, #17]
 80113c6:	e746      	b.n	8011256 <mouseDriver_sendMsg+0x8ce>
 80113c8:	200009a8 	.word	0x200009a8
 80113cc:	20000a00 	.word	0x20000a00
 80113d0:	20000a60 	.word	0x20000a60
		mavlink_sign_packet(status->signing,
 80113d4:	4b7e      	ldr	r3, [pc, #504]	; (80115d0 <mouseDriver_sendMsg+0xc48>)
 80113d6:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80113d8:	2d00      	cmp	r5, #0
 80113da:	d08a      	beq.n	80112f2 <mouseDriver_sendMsg+0x96a>
 80113dc:	782a      	ldrb	r2, [r5, #0]
 80113de:	f012 0f01 	tst.w	r2, #1
 80113e2:	d086      	beq.n	80112f2 <mouseDriver_sendMsg+0x96a>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80113e4:	f89d 80df 	ldrb.w	r8, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 80113e8:	786a      	ldrb	r2, [r5, #1]
 80113ea:	f88d 21f2 	strb.w	r2, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 80113ee:	68aa      	ldr	r2, [r5, #8]
 80113f0:	68e9      	ldr	r1, [r5, #12]
 80113f2:	9200      	str	r2, [sp, #0]
 80113f4:	9101      	str	r1, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 80113f6:	f8cd 21f3 	str.w	r2, [sp, #499]	; 0x1f3
 80113fa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80113fe:	f8ad 21f7 	strh.w	r2, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8011402:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8011406:	1c42      	adds	r2, r0, #1
 8011408:	f141 0300 	adc.w	r3, r1, #0
 801140c:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 8011410:	2700      	movs	r7, #0
 8011412:	971e      	str	r7, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8011414:	4a6f      	ldr	r2, [pc, #444]	; (80115d4 <mouseDriver_sendMsg+0xc4c>)
 8011416:	921f      	str	r2, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8011418:	4a6f      	ldr	r2, [pc, #444]	; (80115d8 <mouseDriver_sendMsg+0xc50>)
 801141a:	9220      	str	r2, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 801141c:	4a6f      	ldr	r2, [pc, #444]	; (80115dc <mouseDriver_sendMsg+0xc54>)
 801141e:	9221      	str	r2, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8011420:	4a6f      	ldr	r2, [pc, #444]	; (80115e0 <mouseDriver_sendMsg+0xc58>)
 8011422:	9222      	str	r2, [sp, #136]	; 0x88
    E = 0x510e527f;
 8011424:	4a6f      	ldr	r2, [pc, #444]	; (80115e4 <mouseDriver_sendMsg+0xc5c>)
 8011426:	9223      	str	r2, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8011428:	4a6f      	ldr	r2, [pc, #444]	; (80115e8 <mouseDriver_sendMsg+0xc60>)
 801142a:	9224      	str	r2, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 801142c:	4a6f      	ldr	r2, [pc, #444]	; (80115ec <mouseDriver_sendMsg+0xc64>)
 801142e:	9225      	str	r2, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8011430:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8011434:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 8011438:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 801143c:	9226      	str	r2, [sp, #152]	; 0x98
    m->sz[0] += len * 8;
 801143e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011442:	921d      	str	r2, [sp, #116]	; 0x74
	memcpy(m->u.save_bytes + offset, p, l);
 8011444:	ae27      	add	r6, sp, #156	; 0x9c
 8011446:	f855 0f10 	ldr.w	r0, [r5, #16]!
 801144a:	6869      	ldr	r1, [r5, #4]
 801144c:	68aa      	ldr	r2, [r5, #8]
 801144e:	68eb      	ldr	r3, [r5, #12]
 8011450:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011452:	6928      	ldr	r0, [r5, #16]
 8011454:	6969      	ldr	r1, [r5, #20]
 8011456:	69aa      	ldr	r2, [r5, #24]
 8011458:	69eb      	ldr	r3, [r5, #28]
 801145a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 801145c:	4622      	mov	r2, r4
 801145e:	a902      	add	r1, sp, #8
 8011460:	a81d      	add	r0, sp, #116	; 0x74
 8011462:	f7ff f95f 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8011466:	4642      	mov	r2, r8
 8011468:	a93a      	add	r1, sp, #232	; 0xe8
 801146a:	a81d      	add	r0, sp, #116	; 0x74
 801146c:	f7ff f95a 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8011470:	2202      	movs	r2, #2
 8011472:	ab3a      	add	r3, sp, #232	; 0xe8
 8011474:	eb03 0108 	add.w	r1, r3, r8
 8011478:	a81d      	add	r0, sp, #116	; 0x74
 801147a:	f7ff f953 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 801147e:	2207      	movs	r2, #7
 8011480:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8011484:	a81d      	add	r0, sp, #116	; 0x74
 8011486:	f7ff f94d 	bl	8010724 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 801148a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801148c:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8011490:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8011494:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8011498:	2380      	movs	r3, #128	; 0x80
 801149a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 801149e:	2247      	movs	r2, #71	; 0x47
 80114a0:	4639      	mov	r1, r7
 80114a2:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 80114a6:	f002 f97b 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80114aa:	ab0b      	add	r3, sp, #44	; 0x2c
 80114ac:	442b      	add	r3, r5
 80114ae:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80114b0:	0a22      	lsrs	r2, r4, #8
 80114b2:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80114b4:	0c22      	lsrs	r2, r4, #16
 80114b6:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80114b8:	0e24      	lsrs	r4, r4, #24
 80114ba:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80114bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80114be:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80114c0:	0a11      	lsrs	r1, r2, #8
 80114c2:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80114c4:	0c11      	lsrs	r1, r2, #16
 80114c6:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80114c8:	0e12      	lsrs	r2, r2, #24
 80114ca:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80114cc:	f105 0209 	add.w	r2, r5, #9
 80114d0:	a90b      	add	r1, sp, #44	; 0x2c
 80114d2:	a81d      	add	r0, sp, #116	; 0x74
 80114d4:	f7ff f926 	bl	8010724 <mavlink_sha256_update>
    result[0] = p[3];
 80114d8:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80114dc:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 80114e0:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 80114e4:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 80114e8:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 80114ec:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 80114f0:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 80114f4:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 80114f8:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80114fc:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8011500:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8011504:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8011508:	e6f3      	b.n	80112f2 <mouseDriver_sendMsg+0x96a>
		buf[0] = msg->magic;
 801150a:	4d39      	ldr	r5, [pc, #228]	; (80115f0 <mouseDriver_sendMsg+0xc68>)
 801150c:	23fe      	movs	r3, #254	; 0xfe
 801150e:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8011510:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8011512:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011516:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8011518:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 801151c:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 801151e:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011522:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8011524:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011526:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801152a:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 801152c:	4622      	mov	r2, r4
 801152e:	a93a      	add	r1, sp, #232	; 0xe8
 8011530:	1da8      	adds	r0, r5, #6
 8011532:	f7ee fe8d 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8011536:	1da3      	adds	r3, r4, #6
 8011538:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 801153a:	2105      	movs	r1, #5
 801153c:	e71c      	b.n	8011378 <mouseDriver_sendMsg+0x9f0>
 * @param msg The MAVLink message to compress the data into
 * @param speed_info C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_info_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_info_t* speed_info)
{
    return mavlink_msg_speed_info_pack(system_id, component_id, msg, speed_info->time_x, speed_info->time_y, speed_info->speed_x, speed_info->speed_y, speed_info->valid);
 801153e:	4b2d      	ldr	r3, [pc, #180]	; (80115f4 <mouseDriver_sendMsg+0xc6c>)
 8011540:	685c      	ldr	r4, [r3, #4]
 8011542:	6898      	ldr	r0, [r3, #8]
 8011544:	68d9      	ldr	r1, [r3, #12]
 8011546:	7c1a      	ldrb	r2, [r3, #16]
    packet.time_x = time_x;
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	9306      	str	r3, [sp, #24]
    packet.time_y = time_y;
 801154c:	9407      	str	r4, [sp, #28]
    packet.speed_x = speed_x;
 801154e:	9008      	str	r0, [sp, #32]
    packet.speed_y = speed_y;
 8011550:	9109      	str	r1, [sp, #36]	; 0x24
    packet.valid = valid;
 8011552:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_INFO_LEN);
 8011556:	ad3a      	add	r5, sp, #232	; 0xe8
 8011558:	ac06      	add	r4, sp, #24
 801155a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801155c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801155e:	6823      	ldr	r3, [r4, #0]
 8011560:	702b      	strb	r3, [r5, #0]
    msg->msgid = MAVLINK_MSG_ID_SPEED_INFO;
 8011562:	2300      	movs	r3, #0
 8011564:	2201      	movs	r2, #1
 8011566:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 801156a:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 801156e:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8011572:	4b17      	ldr	r3, [pc, #92]	; (80115d0 <mouseDriver_sendMsg+0xc48>)
 8011574:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8011576:	f013 0602 	ands.w	r6, r3, #2
 801157a:	d13d      	bne.n	80115f8 <mouseDriver_sendMsg+0xc70>
 801157c:	4b14      	ldr	r3, [pc, #80]	; (80115d0 <mouseDriver_sendMsg+0xc48>)
 801157e:	691b      	ldr	r3, [r3, #16]
 8011580:	b123      	cbz	r3, 801158c <mouseDriver_sendMsg+0xc04>
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	f013 0f01 	tst.w	r3, #1
 8011588:	f041 849e 	bne.w	8012ec8 <mouseDriver_sendMsg+0x2540>
		msg->magic = MAVLINK_STX;
 801158c:	23fd      	movs	r3, #253	; 0xfd
 801158e:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8011592:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 8011596:	2b00      	cmp	r3, #0
 8011598:	f040 80f9 	bne.w	801178e <mouseDriver_sendMsg+0xe06>
 801159c:	2000      	movs	r0, #0
 801159e:	aa3e      	add	r2, sp, #248	; 0xf8
		length--;
 80115a0:	2310      	movs	r3, #16
	while (length > 1 && payload[length-1] == 0) {
 80115a2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80115a6:	b919      	cbnz	r1, 80115b0 <mouseDriver_sendMsg+0xc28>
		length--;
 80115a8:	3b01      	subs	r3, #1
 80115aa:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d1f8      	bne.n	80115a2 <mouseDriver_sendMsg+0xc1a>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80115b0:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 80115b4:	2200      	movs	r2, #0
 80115b6:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 80115ba:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 80115be:	2800      	cmp	r0, #0
 80115c0:	f000 80e8 	beq.w	8011794 <mouseDriver_sendMsg+0xe0c>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80115c4:	2201      	movs	r2, #1
 80115c6:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 80115ca:	240a      	movs	r4, #10
 80115cc:	e023      	b.n	8011616 <mouseDriver_sendMsg+0xc8e>
 80115ce:	bf00      	nop
 80115d0:	20000a00 	.word	0x20000a00
 80115d4:	6a09e667 	.word	0x6a09e667
 80115d8:	bb67ae85 	.word	0xbb67ae85
 80115dc:	3c6ef372 	.word	0x3c6ef372
 80115e0:	a54ff53a 	.word	0xa54ff53a
 80115e4:	510e527f 	.word	0x510e527f
 80115e8:	9b05688c 	.word	0x9b05688c
 80115ec:	1f83d9ab 	.word	0x1f83d9ab
 80115f0:	20000a60 	.word	0x20000a60
 80115f4:	200009d8 	.word	0x200009d8
		msg->magic = MAVLINK_STX_MAVLINK1;
 80115f8:	23fe      	movs	r3, #254	; 0xfe
 80115fa:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80115fe:	2311      	movs	r3, #17
 8011600:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8011604:	2000      	movs	r0, #0
 8011606:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 801160a:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 801160e:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8011610:	2200      	movs	r2, #0
 8011612:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8011616:	2200      	movs	r2, #0
 8011618:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 801161c:	49be      	ldr	r1, [pc, #760]	; (8011918 <mouseDriver_sendMsg+0xf90>)
 801161e:	798a      	ldrb	r2, [r1, #6]
 8011620:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 8011624:	1c55      	adds	r5, r2, #1
 8011626:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8011628:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 801162c:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 8011630:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 8011634:	2e00      	cmp	r6, #0
 8011636:	f000 80af 	beq.w	8011798 <mouseDriver_sendMsg+0xe10>
		buf[2] = msg->seq;
 801163a:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 801163e:	2300      	movs	r3, #0
 8011640:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 8011644:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 8011648:	2301      	movs	r3, #1
 801164a:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 801164e:	1ea6      	subs	r6, r4, #2
 8011650:	b2b6      	uxth	r6, r6
 8011652:	ab80      	add	r3, sp, #512	; 0x200
 8011654:	441e      	add	r6, r3
 8011656:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 801165a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 801165e:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011662:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011666:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8011668:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 801166c:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801166e:	0913      	lsrs	r3, r2, #4
 8011670:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011674:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011678:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 801167c:	42ae      	cmp	r6, r5
 801167e:	d1f0      	bne.n	8011662 <mouseDriver_sendMsg+0xcda>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8011680:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8011684:	b2ba      	uxth	r2, r7
	while (length--) {
 8011686:	1e53      	subs	r3, r2, #1
 8011688:	b29b      	uxth	r3, r3
 801168a:	b1a2      	cbz	r2, 80116b6 <mouseDriver_sendMsg+0xd2e>
 801168c:	aa80      	add	r2, sp, #512	; 0x200
 801168e:	4413      	add	r3, r2
 8011690:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8011694:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011696:	f815 3b01 	ldrb.w	r3, [r5], #1
 801169a:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 801169c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80116a0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80116a2:	091a      	lsrs	r2, r3, #4
 80116a4:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80116a8:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 80116ac:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 80116b0:	b299      	uxth	r1, r3
	while (length--) {
 80116b2:	42b5      	cmp	r5, r6
 80116b4:	d1ef      	bne.n	8011696 <mouseDriver_sendMsg+0xd0e>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80116b6:	f081 03f3 	eor.w	r3, r1, #243	; 0xf3
        tmp ^= (tmp<<4);
 80116ba:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80116be:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80116c0:	0913      	lsrs	r3, r2, #4
 80116c2:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80116c6:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80116ca:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80116ce:	b21b      	sxth	r3, r3
 80116d0:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80116d2:	a93a      	add	r1, sp, #232	; 0xe8
 80116d4:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80116d6:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 80116da:	0a15      	lsrs	r5, r2, #8
 80116dc:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 80116e0:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 80116e2:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 80116e6:	2800      	cmp	r0, #0
 80116e8:	d16b      	bne.n	80117c2 <mouseDriver_sendMsg+0xe3a>
	return msg->len + header_len + 2 + signature_len;
 80116ea:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80116ee:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80116f2:	29fe      	cmp	r1, #254	; 0xfe
 80116f4:	f000 80f6 	beq.w	80118e4 <mouseDriver_sendMsg+0xf5c>
	while (length > 1 && payload[length-1] == 0) {
 80116f8:	2c01      	cmp	r4, #1
 80116fa:	d911      	bls.n	8011720 <mouseDriver_sendMsg+0xd98>
 80116fc:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8011700:	5d1b      	ldrb	r3, [r3, r4]
 8011702:	b96b      	cbnz	r3, 8011720 <mouseDriver_sendMsg+0xd98>
 8011704:	1e63      	subs	r3, r4, #1
 8011706:	aa80      	add	r2, sp, #512	; 0x200
 8011708:	fa52 f383 	uxtab	r3, r2, r3
 801170c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8011710:	3c01      	subs	r4, #1
 8011712:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8011714:	2c01      	cmp	r4, #1
 8011716:	d003      	beq.n	8011720 <mouseDriver_sendMsg+0xd98>
 8011718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801171c:	2a00      	cmp	r2, #0
 801171e:	d0f7      	beq.n	8011710 <mouseDriver_sendMsg+0xd88>
		buf[0] = msg->magic;
 8011720:	4d7e      	ldr	r5, [pc, #504]	; (801191c <mouseDriver_sendMsg+0xf94>)
 8011722:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8011724:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8011726:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 801172a:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 801172c:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8011730:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8011732:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011736:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8011738:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 801173c:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 801173e:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011742:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8011744:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011746:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801174a:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 801174c:	121a      	asrs	r2, r3, #8
 801174e:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011750:	141b      	asrs	r3, r3, #16
 8011752:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8011754:	4622      	mov	r2, r4
 8011756:	a93a      	add	r1, sp, #232	; 0xe8
 8011758:	f105 000a 	add.w	r0, r5, #10
 801175c:	f7ee fd78 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8011760:	f104 020a 	add.w	r2, r4, #10
 8011764:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8011766:	f016 0f01 	tst.w	r6, #1
 801176a:	f041 82dd 	bne.w	8012d28 <mouseDriver_sendMsg+0x23a0>
		header_len = MAVLINK_CORE_HEADER_LEN;
 801176e:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8011770:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8011774:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8011776:	0a12      	lsrs	r2, r2, #8
 8011778:	705a      	strb	r2, [r3, #1]
 801177a:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 801177c:	4421      	add	r1, r4
 801177e:	3103      	adds	r1, #3
 8011780:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8011782:	b289      	uxth	r1, r1
 8011784:	4865      	ldr	r0, [pc, #404]	; (801191c <mouseDriver_sendMsg+0xf94>)
 8011786:	f7ee ffab 	bl	80006e0 <main_transmit_buffer>
            break;
 801178a:	f7ff ba29 	b.w	8010be0 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 801178e:	2000      	movs	r0, #0
 8011790:	2311      	movs	r3, #17
 8011792:	e70d      	b.n	80115b0 <mouseDriver_sendMsg+0xc28>
	if (signing) {
 8011794:	240a      	movs	r4, #10
 8011796:	e73b      	b.n	8011610 <mouseDriver_sendMsg+0xc88>
		buf[2] = msg->incompat_flags;
 8011798:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 801179c:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 80117a0:	2300      	movs	r3, #0
 80117a2:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 80117a6:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 80117aa:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 80117ae:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 80117b2:	2201      	movs	r2, #1
 80117b4:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80117b8:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80117bc:	f88d 3011 	strb.w	r3, [sp, #17]
 80117c0:	e745      	b.n	801164e <mouseDriver_sendMsg+0xcc6>
		mavlink_sign_packet(status->signing,
 80117c2:	4b55      	ldr	r3, [pc, #340]	; (8011918 <mouseDriver_sendMsg+0xf90>)
 80117c4:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80117c6:	2900      	cmp	r1, #0
 80117c8:	d08f      	beq.n	80116ea <mouseDriver_sendMsg+0xd62>
 80117ca:	780b      	ldrb	r3, [r1, #0]
 80117cc:	f013 0f01 	tst.w	r3, #1
 80117d0:	d08b      	beq.n	80116ea <mouseDriver_sendMsg+0xd62>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80117d2:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 80117d6:	784b      	ldrb	r3, [r1, #1]
 80117d8:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 80117dc:	688b      	ldr	r3, [r1, #8]
 80117de:	68ca      	ldr	r2, [r1, #12]
 80117e0:	9300      	str	r3, [sp, #0]
 80117e2:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 80117e4:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 80117e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80117ec:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 80117f0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80117f4:	1c56      	adds	r6, r2, #1
 80117f6:	f143 0700 	adc.w	r7, r3, #0
 80117fa:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 80117fe:	2600      	movs	r6, #0
 8011800:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8011802:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8011804:	4b46      	ldr	r3, [pc, #280]	; (8011920 <mouseDriver_sendMsg+0xf98>)
 8011806:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8011808:	4b46      	ldr	r3, [pc, #280]	; (8011924 <mouseDriver_sendMsg+0xf9c>)
 801180a:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 801180c:	4b46      	ldr	r3, [pc, #280]	; (8011928 <mouseDriver_sendMsg+0xfa0>)
 801180e:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8011810:	4b46      	ldr	r3, [pc, #280]	; (801192c <mouseDriver_sendMsg+0xfa4>)
 8011812:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8011814:	4b46      	ldr	r3, [pc, #280]	; (8011930 <mouseDriver_sendMsg+0xfa8>)
 8011816:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8011818:	4b46      	ldr	r3, [pc, #280]	; (8011934 <mouseDriver_sendMsg+0xfac>)
 801181a:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 801181c:	4b46      	ldr	r3, [pc, #280]	; (8011938 <mouseDriver_sendMsg+0xfb0>)
 801181e:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8011820:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8011824:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8011828:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 801182c:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 801182e:	2220      	movs	r2, #32
 8011830:	3110      	adds	r1, #16
 8011832:	a81d      	add	r0, sp, #116	; 0x74
 8011834:	f7fe ff76 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8011838:	4622      	mov	r2, r4
 801183a:	a902      	add	r1, sp, #8
 801183c:	a81d      	add	r0, sp, #116	; 0x74
 801183e:	f7fe ff71 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8011842:	462a      	mov	r2, r5
 8011844:	a93a      	add	r1, sp, #232	; 0xe8
 8011846:	a81d      	add	r0, sp, #116	; 0x74
 8011848:	f7fe ff6c 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 801184c:	2202      	movs	r2, #2
 801184e:	ab3a      	add	r3, sp, #232	; 0xe8
 8011850:	1959      	adds	r1, r3, r5
 8011852:	a81d      	add	r0, sp, #116	; 0x74
 8011854:	f7fe ff66 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8011858:	2207      	movs	r2, #7
 801185a:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 801185e:	a81d      	add	r0, sp, #116	; 0x74
 8011860:	f7fe ff60 	bl	8010724 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8011864:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8011866:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 801186a:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 801186e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8011872:	2380      	movs	r3, #128	; 0x80
 8011874:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8011878:	2247      	movs	r2, #71	; 0x47
 801187a:	4631      	mov	r1, r6
 801187c:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8011880:	f001 ff8e 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8011884:	ab0b      	add	r3, sp, #44	; 0x2c
 8011886:	442b      	add	r3, r5
 8011888:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 801188a:	0a22      	lsrs	r2, r4, #8
 801188c:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 801188e:	0c22      	lsrs	r2, r4, #16
 8011890:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8011892:	0e24      	lsrs	r4, r4, #24
 8011894:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8011896:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011898:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 801189a:	0a11      	lsrs	r1, r2, #8
 801189c:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 801189e:	0c11      	lsrs	r1, r2, #16
 80118a0:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80118a2:	0e12      	lsrs	r2, r2, #24
 80118a4:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80118a6:	f105 0209 	add.w	r2, r5, #9
 80118aa:	a90b      	add	r1, sp, #44	; 0x2c
 80118ac:	a81d      	add	r0, sp, #116	; 0x74
 80118ae:	f7fe ff39 	bl	8010724 <mavlink_sha256_update>
    result[0] = p[3];
 80118b2:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80118b6:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 80118ba:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 80118be:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 80118c2:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 80118c6:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 80118ca:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 80118ce:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 80118d2:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80118d6:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 80118da:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 80118de:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 80118e2:	e702      	b.n	80116ea <mouseDriver_sendMsg+0xd62>
		buf[0] = msg->magic;
 80118e4:	4d0d      	ldr	r5, [pc, #52]	; (801191c <mouseDriver_sendMsg+0xf94>)
 80118e6:	23fe      	movs	r3, #254	; 0xfe
 80118e8:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 80118ea:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 80118ec:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 80118f0:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 80118f2:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 80118f6:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 80118f8:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80118fc:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 80118fe:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011900:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011904:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8011906:	4622      	mov	r2, r4
 8011908:	a93a      	add	r1, sp, #232	; 0xe8
 801190a:	1da8      	adds	r0, r5, #6
 801190c:	f7ee fca0 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8011910:	1da3      	adds	r3, r4, #6
 8011912:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8011914:	2105      	movs	r1, #5
 8011916:	e72b      	b.n	8011770 <mouseDriver_sendMsg+0xde8>
 8011918:	20000a00 	.word	0x20000a00
 801191c:	20000a60 	.word	0x20000a60
 8011920:	6a09e667 	.word	0x6a09e667
 8011924:	bb67ae85 	.word	0xbb67ae85
 8011928:	3c6ef372 	.word	0x3c6ef372
 801192c:	a54ff53a 	.word	0xa54ff53a
 8011930:	510e527f 	.word	0x510e527f
 8011934:	9b05688c 	.word	0x9b05688c
 8011938:	1f83d9ab 	.word	0x1f83d9ab
 * @param msg The MAVLink message to compress the data into
 * @param error C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_error_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_error_t* error)
{
    return mavlink_msg_error_pack(system_id, component_id, msg, error->time, error->error);
 801193c:	4a98      	ldr	r2, [pc, #608]	; (8011ba0 <mouseDriver_sendMsg+0x1218>)
 801193e:	7911      	ldrb	r1, [r2, #4]
    packet.time = time;
 8011940:	466b      	mov	r3, sp
 8011942:	6812      	ldr	r2, [r2, #0]
 8011944:	601a      	str	r2, [r3, #0]
    packet.error = error;
 8011946:	7119      	strb	r1, [r3, #4]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ERROR_LEN);
 8011948:	e893 0003 	ldmia.w	r3, {r0, r1}
 801194c:	923a      	str	r2, [sp, #232]	; 0xe8
 801194e:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
    msg->msgid = MAVLINK_MSG_ID_ERROR;
 8011952:	2300      	movs	r3, #0
 8011954:	2207      	movs	r2, #7
 8011956:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 801195a:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 801195e:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8011962:	4b90      	ldr	r3, [pc, #576]	; (8011ba4 <mouseDriver_sendMsg+0x121c>)
 8011964:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8011966:	f013 0602 	ands.w	r6, r3, #2
 801196a:	d12e      	bne.n	80119ca <mouseDriver_sendMsg+0x1042>
 801196c:	4b8d      	ldr	r3, [pc, #564]	; (8011ba4 <mouseDriver_sendMsg+0x121c>)
 801196e:	691b      	ldr	r3, [r3, #16]
 8011970:	2b00      	cmp	r3, #0
 8011972:	f000 80f5 	beq.w	8011b60 <mouseDriver_sendMsg+0x11d8>
 8011976:	7818      	ldrb	r0, [r3, #0]
 8011978:	f000 0001 	and.w	r0, r0, #1
		msg->magic = MAVLINK_STX;
 801197c:	23fd      	movs	r3, #253	; 0xfd
 801197e:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8011982:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8011986:	2b00      	cmp	r3, #0
 8011988:	f040 80ec 	bne.w	8011b64 <mouseDriver_sendMsg+0x11dc>
 801198c:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 8011990:	2b00      	cmp	r3, #0
 8011992:	f040 80e9 	bne.w	8011b68 <mouseDriver_sendMsg+0x11e0>
 8011996:	f89d 30ea 	ldrb.w	r3, [sp, #234]	; 0xea
 801199a:	2b00      	cmp	r3, #0
 801199c:	f040 80e6 	bne.w	8011b6c <mouseDriver_sendMsg+0x11e4>
 80119a0:	f89d 30e9 	ldrb.w	r3, [sp, #233]	; 0xe9
		length--;
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	bf0c      	ite	eq
 80119a8:	2301      	moveq	r3, #1
 80119aa:	2302      	movne	r3, #2
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80119ac:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 80119b0:	2200      	movs	r2, #0
 80119b2:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 80119b6:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 80119ba:	2800      	cmp	r0, #0
 80119bc:	f000 80d8 	beq.w	8011b70 <mouseDriver_sendMsg+0x11e8>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80119c0:	2201      	movs	r2, #1
 80119c2:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 80119c6:	240a      	movs	r4, #10
 80119c8:	e00e      	b.n	80119e8 <mouseDriver_sendMsg+0x1060>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80119ca:	23fe      	movs	r3, #254	; 0xfe
 80119cc:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80119d0:	2305      	movs	r3, #5
 80119d2:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 80119d6:	2000      	movs	r0, #0
 80119d8:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 80119dc:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80119e0:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 80119e2:	2200      	movs	r2, #0
 80119e4:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 80119e8:	2200      	movs	r2, #0
 80119ea:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 80119ee:	496d      	ldr	r1, [pc, #436]	; (8011ba4 <mouseDriver_sendMsg+0x121c>)
 80119f0:	798a      	ldrb	r2, [r1, #6]
 80119f2:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 80119f6:	1c55      	adds	r5, r2, #1
 80119f8:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 80119fa:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80119fe:	f88d 1018 	strb.w	r1, [sp, #24]
	buf[1] = msg->len;
 8011a02:	f88d 3019 	strb.w	r3, [sp, #25]
	if (mavlink1) {
 8011a06:	2e00      	cmp	r6, #0
 8011a08:	f000 80b4 	beq.w	8011b74 <mouseDriver_sendMsg+0x11ec>
		buf[2] = msg->seq;
 8011a0c:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[3] = msg->sysid;
 8011a10:	2300      	movs	r3, #0
 8011a12:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->compid;
 8011a16:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->msgid & 0xFF;
 8011a1a:	2307      	movs	r3, #7
 8011a1c:	f88d 301d 	strb.w	r3, [sp, #29]
	while (length--) {
 8011a20:	1ea6      	subs	r6, r4, #2
 8011a22:	b2b6      	uxth	r6, r6
 8011a24:	ab80      	add	r3, sp, #512	; 0x200
 8011a26:	441e      	add	r6, r3
 8011a28:	f5a6 76f3 	sub.w	r6, r6, #486	; 0x1e6
        *crcAccum = X25_INIT_CRC;
 8011a2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8011a30:	f10d 0519 	add.w	r5, sp, #25
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011a34:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011a38:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8011a3a:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8011a3e:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011a40:	0913      	lsrs	r3, r2, #4
 8011a42:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011a46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011a4a:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8011a4e:	42b5      	cmp	r5, r6
 8011a50:	d1f0      	bne.n	8011a34 <mouseDriver_sendMsg+0x10ac>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8011a52:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8011a56:	b2ba      	uxth	r2, r7
	while (length--) {
 8011a58:	1e53      	subs	r3, r2, #1
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	b1a2      	cbz	r2, 8011a88 <mouseDriver_sendMsg+0x1100>
 8011a5e:	aa80      	add	r2, sp, #512	; 0x200
 8011a60:	4413      	add	r3, r2
 8011a62:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8011a66:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011a68:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011a6c:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8011a6e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8011a72:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011a74:	091a      	lsrs	r2, r3, #4
 8011a76:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8011a7a:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8011a7e:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8011a82:	b299      	uxth	r1, r3
	while (length--) {
 8011a84:	42ae      	cmp	r6, r5
 8011a86:	d1ef      	bne.n	8011a68 <mouseDriver_sendMsg+0x10e0>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011a88:	f081 0316 	eor.w	r3, r1, #22
        tmp ^= (tmp<<4);
 8011a8c:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8011a90:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011a92:	0913      	lsrs	r3, r2, #4
 8011a94:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011a98:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8011a9c:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8011aa0:	b21b      	sxth	r3, r3
 8011aa2:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8011aa4:	a93a      	add	r1, sp, #232	; 0xe8
 8011aa6:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8011aa8:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8011aac:	0a15      	lsrs	r5, r2, #8
 8011aae:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8011ab2:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8011ab4:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	d177      	bne.n	8011bac <mouseDriver_sendMsg+0x1224>
	return msg->len + header_len + 2 + signature_len;
 8011abc:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8011ac0:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011ac4:	29fe      	cmp	r1, #254	; 0xfe
 8011ac6:	f000 8103 	beq.w	8011cd0 <mouseDriver_sendMsg+0x1348>
	while (length > 1 && payload[length-1] == 0) {
 8011aca:	2c01      	cmp	r4, #1
 8011acc:	d911      	bls.n	8011af2 <mouseDriver_sendMsg+0x116a>
 8011ace:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8011ad2:	5d1b      	ldrb	r3, [r3, r4]
 8011ad4:	b96b      	cbnz	r3, 8011af2 <mouseDriver_sendMsg+0x116a>
 8011ad6:	1e63      	subs	r3, r4, #1
 8011ad8:	aa80      	add	r2, sp, #512	; 0x200
 8011ada:	fa52 f383 	uxtab	r3, r2, r3
 8011ade:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8011ae2:	3c01      	subs	r4, #1
 8011ae4:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8011ae6:	2c01      	cmp	r4, #1
 8011ae8:	d003      	beq.n	8011af2 <mouseDriver_sendMsg+0x116a>
 8011aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011aee:	2a00      	cmp	r2, #0
 8011af0:	d0f7      	beq.n	8011ae2 <mouseDriver_sendMsg+0x115a>
		buf[0] = msg->magic;
 8011af2:	4d2d      	ldr	r5, [pc, #180]	; (8011ba8 <mouseDriver_sendMsg+0x1220>)
 8011af4:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8011af6:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8011af8:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8011afc:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8011afe:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8011b02:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8011b04:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011b08:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8011b0a:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011b0e:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8011b10:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011b14:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8011b16:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011b18:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011b1c:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011b1e:	121a      	asrs	r2, r3, #8
 8011b20:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011b22:	141b      	asrs	r3, r3, #16
 8011b24:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8011b26:	4622      	mov	r2, r4
 8011b28:	a93a      	add	r1, sp, #232	; 0xe8
 8011b2a:	f105 000a 	add.w	r0, r5, #10
 8011b2e:	f7ee fb8f 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8011b32:	f104 020a 	add.w	r2, r4, #10
 8011b36:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8011b38:	f016 0f01 	tst.w	r6, #1
 8011b3c:	f041 810b 	bne.w	8012d56 <mouseDriver_sendMsg+0x23ce>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8011b40:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8011b42:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8011b46:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8011b48:	0a12      	lsrs	r2, r2, #8
 8011b4a:	705a      	strb	r2, [r3, #1]
 8011b4c:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8011b4e:	4421      	add	r1, r4
 8011b50:	3103      	adds	r1, #3
 8011b52:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8011b54:	b289      	uxth	r1, r1
 8011b56:	4814      	ldr	r0, [pc, #80]	; (8011ba8 <mouseDriver_sendMsg+0x1220>)
 8011b58:	f7ee fdc2 	bl	80006e0 <main_transmit_buffer>
            break;
 8011b5c:	f7ff b840 	b.w	8010be0 <mouseDriver_sendMsg+0x258>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8011b60:	2000      	movs	r0, #0
 8011b62:	e70b      	b.n	801197c <mouseDriver_sendMsg+0xff4>
	while (length > 1 && payload[length-1] == 0) {
 8011b64:	2305      	movs	r3, #5
 8011b66:	e721      	b.n	80119ac <mouseDriver_sendMsg+0x1024>
		length--;
 8011b68:	2304      	movs	r3, #4
 8011b6a:	e71f      	b.n	80119ac <mouseDriver_sendMsg+0x1024>
 8011b6c:	2303      	movs	r3, #3
 8011b6e:	e71d      	b.n	80119ac <mouseDriver_sendMsg+0x1024>
	if (signing) {
 8011b70:	240a      	movs	r4, #10
 8011b72:	e736      	b.n	80119e2 <mouseDriver_sendMsg+0x105a>
		buf[2] = msg->incompat_flags;
 8011b74:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8011b78:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[3] = msg->compat_flags;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->seq;
 8011b82:	f88d 201c 	strb.w	r2, [sp, #28]
		buf[5] = msg->sysid;
 8011b86:	f88d 301d 	strb.w	r3, [sp, #29]
		buf[6] = msg->compid;
 8011b8a:	f88d 301e 	strb.w	r3, [sp, #30]
		buf[7] = msg->msgid & 0xFF;
 8011b8e:	2207      	movs	r2, #7
 8011b90:	f88d 201f 	strb.w	r2, [sp, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011b94:	f88d 3020 	strb.w	r3, [sp, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011b98:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8011b9c:	e740      	b.n	8011a20 <mouseDriver_sendMsg+0x1098>
 8011b9e:	bf00      	nop
 8011ba0:	200009a0 	.word	0x200009a0
 8011ba4:	20000a00 	.word	0x20000a00
 8011ba8:	20000a60 	.word	0x20000a60
		mavlink_sign_packet(status->signing,
 8011bac:	4b6e      	ldr	r3, [pc, #440]	; (8011d68 <mouseDriver_sendMsg+0x13e0>)
 8011bae:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8011bb0:	2900      	cmp	r1, #0
 8011bb2:	d083      	beq.n	8011abc <mouseDriver_sendMsg+0x1134>
 8011bb4:	780b      	ldrb	r3, [r1, #0]
 8011bb6:	f013 0f01 	tst.w	r3, #1
 8011bba:	f43f af7f 	beq.w	8011abc <mouseDriver_sendMsg+0x1134>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8011bbe:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8011bc2:	784b      	ldrb	r3, [r1, #1]
 8011bc4:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8011bc8:	688b      	ldr	r3, [r1, #8]
 8011bca:	68ca      	ldr	r2, [r1, #12]
 8011bcc:	9302      	str	r3, [sp, #8]
 8011bce:	9203      	str	r2, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8011bd0:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8011bd4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011bd8:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8011bdc:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8011be0:	1c56      	adds	r6, r2, #1
 8011be2:	f143 0700 	adc.w	r7, r3, #0
 8011be6:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8011bea:	2600      	movs	r6, #0
 8011bec:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8011bee:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8011bf0:	4b5e      	ldr	r3, [pc, #376]	; (8011d6c <mouseDriver_sendMsg+0x13e4>)
 8011bf2:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8011bf4:	4b5e      	ldr	r3, [pc, #376]	; (8011d70 <mouseDriver_sendMsg+0x13e8>)
 8011bf6:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8011bf8:	4b5e      	ldr	r3, [pc, #376]	; (8011d74 <mouseDriver_sendMsg+0x13ec>)
 8011bfa:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8011bfc:	4b5e      	ldr	r3, [pc, #376]	; (8011d78 <mouseDriver_sendMsg+0x13f0>)
 8011bfe:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8011c00:	4b5e      	ldr	r3, [pc, #376]	; (8011d7c <mouseDriver_sendMsg+0x13f4>)
 8011c02:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8011c04:	4b5e      	ldr	r3, [pc, #376]	; (8011d80 <mouseDriver_sendMsg+0x13f8>)
 8011c06:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8011c08:	4b5e      	ldr	r3, [pc, #376]	; (8011d84 <mouseDriver_sendMsg+0x13fc>)
 8011c0a:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8011c0c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8011c10:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8011c14:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8011c18:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8011c1a:	2220      	movs	r2, #32
 8011c1c:	3110      	adds	r1, #16
 8011c1e:	a81d      	add	r0, sp, #116	; 0x74
 8011c20:	f7fe fd80 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8011c24:	4622      	mov	r2, r4
 8011c26:	a906      	add	r1, sp, #24
 8011c28:	a81d      	add	r0, sp, #116	; 0x74
 8011c2a:	f7fe fd7b 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8011c2e:	462a      	mov	r2, r5
 8011c30:	a93a      	add	r1, sp, #232	; 0xe8
 8011c32:	a81d      	add	r0, sp, #116	; 0x74
 8011c34:	f7fe fd76 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8011c38:	2202      	movs	r2, #2
 8011c3a:	ab3a      	add	r3, sp, #232	; 0xe8
 8011c3c:	1959      	adds	r1, r3, r5
 8011c3e:	a81d      	add	r0, sp, #116	; 0x74
 8011c40:	f7fe fd70 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8011c44:	2207      	movs	r2, #7
 8011c46:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8011c4a:	a81d      	add	r0, sp, #116	; 0x74
 8011c4c:	f7fe fd6a 	bl	8010724 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8011c50:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8011c52:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8011c56:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8011c5a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8011c5e:	2380      	movs	r3, #128	; 0x80
 8011c60:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8011c64:	2247      	movs	r2, #71	; 0x47
 8011c66:	4631      	mov	r1, r6
 8011c68:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8011c6c:	f001 fd98 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8011c70:	ab0b      	add	r3, sp, #44	; 0x2c
 8011c72:	442b      	add	r3, r5
 8011c74:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8011c76:	0a22      	lsrs	r2, r4, #8
 8011c78:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8011c7a:	0c22      	lsrs	r2, r4, #16
 8011c7c:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8011c7e:	0e24      	lsrs	r4, r4, #24
 8011c80:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8011c82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011c84:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8011c86:	0a11      	lsrs	r1, r2, #8
 8011c88:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8011c8a:	0c11      	lsrs	r1, r2, #16
 8011c8c:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8011c8e:	0e12      	lsrs	r2, r2, #24
 8011c90:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8011c92:	f105 0209 	add.w	r2, r5, #9
 8011c96:	a90b      	add	r1, sp, #44	; 0x2c
 8011c98:	a81d      	add	r0, sp, #116	; 0x74
 8011c9a:	f7fe fd43 	bl	8010724 <mavlink_sha256_update>
    result[0] = p[3];
 8011c9e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8011ca2:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 8011ca6:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8011caa:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8011cae:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8011cb2:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8011cb6:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8011cba:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8011cbe:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8011cc2:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8011cc6:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8011cca:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8011cce:	e6f5      	b.n	8011abc <mouseDriver_sendMsg+0x1134>
		buf[0] = msg->magic;
 8011cd0:	4d2d      	ldr	r5, [pc, #180]	; (8011d88 <mouseDriver_sendMsg+0x1400>)
 8011cd2:	23fe      	movs	r3, #254	; 0xfe
 8011cd4:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8011cd6:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8011cd8:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011cdc:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8011cde:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011ce2:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8011ce4:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011ce8:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8011cea:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011cec:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011cf0:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8011cf2:	4622      	mov	r2, r4
 8011cf4:	a93a      	add	r1, sp, #232	; 0xe8
 8011cf6:	1da8      	adds	r0, r5, #6
 8011cf8:	f7ee faaa 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8011cfc:	1da3      	adds	r3, r4, #6
 8011cfe:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8011d00:	2105      	movs	r1, #5
 8011d02:	e71e      	b.n	8011b42 <mouseDriver_sendMsg+0x11ba>
            mavlink_msg_point_loaded_pack(SYS_ID,COMP_ID,&msg,actual_point);
 8011d04:	4b21      	ldr	r3, [pc, #132]	; (8011d8c <mouseDriver_sendMsg+0x1404>)
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    packet.point_id = point_id;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LOADED_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_POINT_LOADED;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	2205      	movs	r2, #5
 8011d10:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 8011d14:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 8011d18:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8011d1c:	4b12      	ldr	r3, [pc, #72]	; (8011d68 <mouseDriver_sendMsg+0x13e0>)
 8011d1e:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8011d20:	f013 0602 	ands.w	r6, r3, #2
 8011d24:	d134      	bne.n	8011d90 <mouseDriver_sendMsg+0x1408>
 8011d26:	4b10      	ldr	r3, [pc, #64]	; (8011d68 <mouseDriver_sendMsg+0x13e0>)
 8011d28:	691b      	ldr	r3, [r3, #16]
 8011d2a:	b123      	cbz	r3, 8011d36 <mouseDriver_sendMsg+0x13ae>
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	f013 0f01 	tst.w	r3, #1
 8011d32:	f041 80d3 	bne.w	8012edc <mouseDriver_sendMsg+0x2554>
		msg->magic = MAVLINK_STX;
 8011d36:	23fd      	movs	r3, #253	; 0xfd
 8011d38:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8011d3c:	f89d 30e9 	ldrb.w	r3, [sp, #233]	; 0xe9
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f040 80f0 	bne.w	8011f26 <mouseDriver_sendMsg+0x159e>
 8011d46:	2000      	movs	r0, #0
		length--;
 8011d48:	2201      	movs	r2, #1
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8011d4a:	f88d 20df 	strb.w	r2, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8011d54:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
	if (signing) {
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	f000 80e7 	beq.w	8011f2c <mouseDriver_sendMsg+0x15a4>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8011d5e:	2301      	movs	r3, #1
 8011d60:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
 8011d64:	240a      	movs	r4, #10
 8011d66:	e022      	b.n	8011dae <mouseDriver_sendMsg+0x1426>
 8011d68:	20000a00 	.word	0x20000a00
 8011d6c:	6a09e667 	.word	0x6a09e667
 8011d70:	bb67ae85 	.word	0xbb67ae85
 8011d74:	3c6ef372 	.word	0x3c6ef372
 8011d78:	a54ff53a 	.word	0xa54ff53a
 8011d7c:	510e527f 	.word	0x510e527f
 8011d80:	9b05688c 	.word	0x9b05688c
 8011d84:	1f83d9ab 	.word	0x1f83d9ab
 8011d88:	20000a60 	.word	0x20000a60
 8011d8c:	200009b4 	.word	0x200009b4
		msg->magic = MAVLINK_STX_MAVLINK1;
 8011d90:	23fe      	movs	r3, #254	; 0xfe
 8011d92:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8011d96:	2202      	movs	r2, #2
 8011d98:	f88d 20df 	strb.w	r2, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8011d9c:	2000      	movs	r0, #0
 8011d9e:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8011da2:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8011da6:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8011da8:	2300      	movs	r3, #0
 8011daa:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8011dae:	2100      	movs	r1, #0
 8011db0:	f88d 10e1 	strb.w	r1, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8011db4:	49be      	ldr	r1, [pc, #760]	; (80120b0 <mouseDriver_sendMsg+0x1728>)
 8011db6:	798b      	ldrb	r3, [r1, #6]
 8011db8:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 8011dbc:	1c5d      	adds	r5, r3, #1
 8011dbe:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8011dc0:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011dc4:	f88d 1018 	strb.w	r1, [sp, #24]
	buf[1] = msg->len;
 8011dc8:	f88d 2019 	strb.w	r2, [sp, #25]
	if (mavlink1) {
 8011dcc:	2e00      	cmp	r6, #0
 8011dce:	f000 80af 	beq.w	8011f30 <mouseDriver_sendMsg+0x15a8>
		buf[2] = msg->seq;
 8011dd2:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[3] = msg->sysid;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->compid;
 8011ddc:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->msgid & 0xFF;
 8011de0:	2305      	movs	r3, #5
 8011de2:	f88d 301d 	strb.w	r3, [sp, #29]
	while (length--) {
 8011de6:	1ea6      	subs	r6, r4, #2
 8011de8:	b2b6      	uxth	r6, r6
 8011dea:	ab80      	add	r3, sp, #512	; 0x200
 8011dec:	441e      	add	r6, r3
 8011dee:	f5a6 76f3 	sub.w	r6, r6, #486	; 0x1e6
        *crcAccum = X25_INIT_CRC;
 8011df2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8011df6:	f10d 0519 	add.w	r5, sp, #25
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011dfa:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011dfe:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8011e00:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8011e04:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011e06:	0913      	lsrs	r3, r2, #4
 8011e08:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011e0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011e10:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8011e14:	42ae      	cmp	r6, r5
 8011e16:	d1f0      	bne.n	8011dfa <mouseDriver_sendMsg+0x1472>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8011e18:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8011e1c:	b2ba      	uxth	r2, r7
	while (length--) {
 8011e1e:	1e53      	subs	r3, r2, #1
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	b1a2      	cbz	r2, 8011e4e <mouseDriver_sendMsg+0x14c6>
 8011e24:	aa80      	add	r2, sp, #512	; 0x200
 8011e26:	4413      	add	r3, r2
 8011e28:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8011e2c:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011e2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011e32:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8011e34:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8011e38:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011e3a:	091a      	lsrs	r2, r3, #4
 8011e3c:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8011e40:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8011e44:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8011e48:	b299      	uxth	r1, r3
	while (length--) {
 8011e4a:	42b5      	cmp	r5, r6
 8011e4c:	d1ef      	bne.n	8011e2e <mouseDriver_sendMsg+0x14a6>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011e4e:	f081 03a7 	eor.w	r3, r1, #167	; 0xa7
        tmp ^= (tmp<<4);
 8011e52:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8011e56:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011e58:	0913      	lsrs	r3, r2, #4
 8011e5a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011e5e:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8011e62:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8011e66:	b21b      	sxth	r3, r3
 8011e68:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8011e6a:	a93a      	add	r1, sp, #232	; 0xe8
 8011e6c:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8011e6e:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8011e72:	0a15      	lsrs	r5, r2, #8
 8011e74:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8011e78:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8011e7a:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	d16b      	bne.n	8011f5a <mouseDriver_sendMsg+0x15d2>
	return msg->len + header_len + 2 + signature_len;
 8011e82:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8011e86:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011e8a:	29fe      	cmp	r1, #254	; 0xfe
 8011e8c:	f000 80f6 	beq.w	801207c <mouseDriver_sendMsg+0x16f4>
	while (length > 1 && payload[length-1] == 0) {
 8011e90:	2c01      	cmp	r4, #1
 8011e92:	d911      	bls.n	8011eb8 <mouseDriver_sendMsg+0x1530>
 8011e94:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8011e98:	5d1b      	ldrb	r3, [r3, r4]
 8011e9a:	b96b      	cbnz	r3, 8011eb8 <mouseDriver_sendMsg+0x1530>
 8011e9c:	1e63      	subs	r3, r4, #1
 8011e9e:	aa80      	add	r2, sp, #512	; 0x200
 8011ea0:	fa52 f383 	uxtab	r3, r2, r3
 8011ea4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8011ea8:	3c01      	subs	r4, #1
 8011eaa:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8011eac:	2c01      	cmp	r4, #1
 8011eae:	d003      	beq.n	8011eb8 <mouseDriver_sendMsg+0x1530>
 8011eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011eb4:	2a00      	cmp	r2, #0
 8011eb6:	d0f7      	beq.n	8011ea8 <mouseDriver_sendMsg+0x1520>
		buf[0] = msg->magic;
 8011eb8:	4d7e      	ldr	r5, [pc, #504]	; (80120b4 <mouseDriver_sendMsg+0x172c>)
 8011eba:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8011ebc:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8011ebe:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8011ec2:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8011ec4:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8011ec8:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8011eca:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011ece:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8011ed0:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011ed4:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8011ed6:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011eda:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8011edc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011ede:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011ee2:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011ee4:	121a      	asrs	r2, r3, #8
 8011ee6:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011ee8:	141b      	asrs	r3, r3, #16
 8011eea:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8011eec:	4622      	mov	r2, r4
 8011eee:	a93a      	add	r1, sp, #232	; 0xe8
 8011ef0:	f105 000a 	add.w	r0, r5, #10
 8011ef4:	f7ee f9ac 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8011ef8:	f104 020a 	add.w	r2, r4, #10
 8011efc:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8011efe:	f016 0f01 	tst.w	r6, #1
 8011f02:	f040 873f 	bne.w	8012d84 <mouseDriver_sendMsg+0x23fc>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8011f06:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8011f08:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8011f0c:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8011f0e:	0a12      	lsrs	r2, r2, #8
 8011f10:	705a      	strb	r2, [r3, #1]
 8011f12:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8011f14:	4421      	add	r1, r4
 8011f16:	3103      	adds	r1, #3
 8011f18:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8011f1a:	b289      	uxth	r1, r1
 8011f1c:	4865      	ldr	r0, [pc, #404]	; (80120b4 <mouseDriver_sendMsg+0x172c>)
 8011f1e:	f7ee fbdf 	bl	80006e0 <main_transmit_buffer>
            break;
 8011f22:	f7fe be5d 	b.w	8010be0 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 8011f26:	2000      	movs	r0, #0
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8011f28:	2202      	movs	r2, #2
 8011f2a:	e70e      	b.n	8011d4a <mouseDriver_sendMsg+0x13c2>
	if (signing) {
 8011f2c:	240a      	movs	r4, #10
 8011f2e:	e73b      	b.n	8011da8 <mouseDriver_sendMsg+0x1420>
		buf[2] = msg->incompat_flags;
 8011f30:	f89d 20e0 	ldrb.w	r2, [sp, #224]	; 0xe0
 8011f34:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[3] = msg->compat_flags;
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f88d 201b 	strb.w	r2, [sp, #27]
		buf[4] = msg->seq;
 8011f3e:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->sysid;
 8011f42:	f88d 201d 	strb.w	r2, [sp, #29]
		buf[6] = msg->compid;
 8011f46:	f88d 201e 	strb.w	r2, [sp, #30]
		buf[7] = msg->msgid & 0xFF;
 8011f4a:	2305      	movs	r3, #5
 8011f4c:	f88d 301f 	strb.w	r3, [sp, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011f50:	f88d 2020 	strb.w	r2, [sp, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011f54:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8011f58:	e745      	b.n	8011de6 <mouseDriver_sendMsg+0x145e>
		mavlink_sign_packet(status->signing,
 8011f5a:	4b55      	ldr	r3, [pc, #340]	; (80120b0 <mouseDriver_sendMsg+0x1728>)
 8011f5c:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8011f5e:	2900      	cmp	r1, #0
 8011f60:	d08f      	beq.n	8011e82 <mouseDriver_sendMsg+0x14fa>
 8011f62:	780b      	ldrb	r3, [r1, #0]
 8011f64:	f013 0f01 	tst.w	r3, #1
 8011f68:	d08b      	beq.n	8011e82 <mouseDriver_sendMsg+0x14fa>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8011f6a:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8011f6e:	784b      	ldrb	r3, [r1, #1]
 8011f70:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8011f74:	688b      	ldr	r3, [r1, #8]
 8011f76:	68ca      	ldr	r2, [r1, #12]
 8011f78:	9302      	str	r3, [sp, #8]
 8011f7a:	9203      	str	r2, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8011f7c:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8011f80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011f84:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8011f88:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8011f8c:	1c56      	adds	r6, r2, #1
 8011f8e:	f143 0700 	adc.w	r7, r3, #0
 8011f92:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8011f96:	2600      	movs	r6, #0
 8011f98:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8011f9a:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8011f9c:	4b46      	ldr	r3, [pc, #280]	; (80120b8 <mouseDriver_sendMsg+0x1730>)
 8011f9e:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8011fa0:	4b46      	ldr	r3, [pc, #280]	; (80120bc <mouseDriver_sendMsg+0x1734>)
 8011fa2:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8011fa4:	4b46      	ldr	r3, [pc, #280]	; (80120c0 <mouseDriver_sendMsg+0x1738>)
 8011fa6:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8011fa8:	4b46      	ldr	r3, [pc, #280]	; (80120c4 <mouseDriver_sendMsg+0x173c>)
 8011faa:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8011fac:	4b46      	ldr	r3, [pc, #280]	; (80120c8 <mouseDriver_sendMsg+0x1740>)
 8011fae:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8011fb0:	4b46      	ldr	r3, [pc, #280]	; (80120cc <mouseDriver_sendMsg+0x1744>)
 8011fb2:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8011fb4:	4b46      	ldr	r3, [pc, #280]	; (80120d0 <mouseDriver_sendMsg+0x1748>)
 8011fb6:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8011fb8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8011fbc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8011fc0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8011fc4:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8011fc6:	2220      	movs	r2, #32
 8011fc8:	3110      	adds	r1, #16
 8011fca:	a81d      	add	r0, sp, #116	; 0x74
 8011fcc:	f7fe fbaa 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8011fd0:	4622      	mov	r2, r4
 8011fd2:	a906      	add	r1, sp, #24
 8011fd4:	a81d      	add	r0, sp, #116	; 0x74
 8011fd6:	f7fe fba5 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8011fda:	462a      	mov	r2, r5
 8011fdc:	a93a      	add	r1, sp, #232	; 0xe8
 8011fde:	a81d      	add	r0, sp, #116	; 0x74
 8011fe0:	f7fe fba0 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8011fe4:	2202      	movs	r2, #2
 8011fe6:	ab3a      	add	r3, sp, #232	; 0xe8
 8011fe8:	1959      	adds	r1, r3, r5
 8011fea:	a81d      	add	r0, sp, #116	; 0x74
 8011fec:	f7fe fb9a 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8011ff0:	2207      	movs	r2, #7
 8011ff2:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8011ff6:	a81d      	add	r0, sp, #116	; 0x74
 8011ff8:	f7fe fb94 	bl	8010724 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8011ffc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8011ffe:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8012002:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8012006:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 801200a:	2380      	movs	r3, #128	; 0x80
 801200c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8012010:	2247      	movs	r2, #71	; 0x47
 8012012:	4631      	mov	r1, r6
 8012014:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8012018:	f001 fbc2 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 801201c:	ab0b      	add	r3, sp, #44	; 0x2c
 801201e:	442b      	add	r3, r5
 8012020:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8012022:	0a22      	lsrs	r2, r4, #8
 8012024:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8012026:	0c22      	lsrs	r2, r4, #16
 8012028:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 801202a:	0e24      	lsrs	r4, r4, #24
 801202c:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 801202e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012030:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8012032:	0a11      	lsrs	r1, r2, #8
 8012034:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8012036:	0c11      	lsrs	r1, r2, #16
 8012038:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 801203a:	0e12      	lsrs	r2, r2, #24
 801203c:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 801203e:	f105 0209 	add.w	r2, r5, #9
 8012042:	a90b      	add	r1, sp, #44	; 0x2c
 8012044:	a81d      	add	r0, sp, #116	; 0x74
 8012046:	f7fe fb6d 	bl	8010724 <mavlink_sha256_update>
    result[0] = p[3];
 801204a:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 801204e:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 8012052:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8012056:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 801205a:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 801205e:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8012062:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8012066:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 801206a:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 801206e:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8012072:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8012076:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 801207a:	e702      	b.n	8011e82 <mouseDriver_sendMsg+0x14fa>
		buf[0] = msg->magic;
 801207c:	4d0d      	ldr	r5, [pc, #52]	; (80120b4 <mouseDriver_sendMsg+0x172c>)
 801207e:	23fe      	movs	r3, #254	; 0xfe
 8012080:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8012082:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8012084:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8012088:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 801208a:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 801208e:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8012090:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8012094:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8012096:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8012098:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801209c:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 801209e:	4622      	mov	r2, r4
 80120a0:	a93a      	add	r1, sp, #232	; 0xe8
 80120a2:	1da8      	adds	r0, r5, #6
 80120a4:	f7ee f8d4 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80120a8:	1da3      	adds	r3, r4, #6
 80120aa:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80120ac:	2105      	movs	r1, #5
 80120ae:	e72b      	b.n	8011f08 <mouseDriver_sendMsg+0x1580>
 80120b0:	20000a00 	.word	0x20000a00
 80120b4:	20000a60 	.word	0x20000a60
 80120b8:	6a09e667 	.word	0x6a09e667
 80120bc:	bb67ae85 	.word	0xbb67ae85
 80120c0:	3c6ef372 	.word	0x3c6ef372
 80120c4:	a54ff53a 	.word	0xa54ff53a
 80120c8:	510e527f 	.word	0x510e527f
 80120cc:	9b05688c 	.word	0x9b05688c
 80120d0:	1f83d9ab 	.word	0x1f83d9ab
            mavlink_msg_point_encode(SYS_ID,COMP_ID,&msg,&points[actual_point]);
 80120d4:	4b99      	ldr	r3, [pc, #612]	; (801233c <mouseDriver_sendMsg+0x19b4>)
 80120d6:	7819      	ldrb	r1, [r3, #0]
 * @param msg The MAVLink message to compress the data into
 * @param point C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_point_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_point_t* point)
{
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 80120d8:	4899      	ldr	r0, [pc, #612]	; (8012340 <mouseDriver_sendMsg+0x19b8>)
 80120da:	00ca      	lsls	r2, r1, #3
 80120dc:	1a53      	subs	r3, r2, r1
 80120de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80120e2:	899c      	ldrh	r4, [r3, #12]
 80120e4:	685e      	ldr	r6, [r3, #4]
 80120e6:	689d      	ldr	r5, [r3, #8]
    packet.duration = duration;
 80120e8:	ab06      	add	r3, sp, #24
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 80120ea:	1a52      	subs	r2, r2, r1
 80120ec:	f850 2012 	ldr.w	r2, [r0, r2, lsl #1]
    packet.duration = duration;
 80120f0:	9206      	str	r2, [sp, #24]
    packet.setpoint_x = setpoint_x;
 80120f2:	9607      	str	r6, [sp, #28]
    packet.setpoint_y = setpoint_y;
 80120f4:	9508      	str	r5, [sp, #32]
    packet.point_id = point_id;
 80120f6:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LEN);
 80120fa:	ac3a      	add	r4, sp, #232	; 0xe8
 80120fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80120fe:	c407      	stmia	r4!, {r0, r1, r2}
 8012100:	8023      	strh	r3, [r4, #0]
    msg->msgid = MAVLINK_MSG_ID_POINT;
 8012102:	2300      	movs	r3, #0
 8012104:	2206      	movs	r2, #6
 8012106:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 801210a:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 801210e:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8012112:	4b8c      	ldr	r3, [pc, #560]	; (8012344 <mouseDriver_sendMsg+0x19bc>)
 8012114:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012116:	f013 0602 	ands.w	r6, r3, #2
 801211a:	d129      	bne.n	8012170 <mouseDriver_sendMsg+0x17e8>
 801211c:	4b89      	ldr	r3, [pc, #548]	; (8012344 <mouseDriver_sendMsg+0x19bc>)
 801211e:	691b      	ldr	r3, [r3, #16]
 8012120:	b123      	cbz	r3, 801212c <mouseDriver_sendMsg+0x17a4>
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	f013 0f01 	tst.w	r3, #1
 8012128:	f040 86f7 	bne.w	8012f1a <mouseDriver_sendMsg+0x2592>
		msg->magic = MAVLINK_STX;
 801212c:	23fd      	movs	r3, #253	; 0xfd
 801212e:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012132:	f89d 30f5 	ldrb.w	r3, [sp, #245]	; 0xf5
 8012136:	2b00      	cmp	r3, #0
 8012138:	f040 80e5 	bne.w	8012306 <mouseDriver_sendMsg+0x197e>
 801213c:	2000      	movs	r0, #0
 801213e:	f10d 02f5 	add.w	r2, sp, #245	; 0xf5
		length--;
 8012142:	230d      	movs	r3, #13
	while (length > 1 && payload[length-1] == 0) {
 8012144:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8012148:	b919      	cbnz	r1, 8012152 <mouseDriver_sendMsg+0x17ca>
		length--;
 801214a:	3b01      	subs	r3, #1
 801214c:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 801214e:	2b01      	cmp	r3, #1
 8012150:	d1f8      	bne.n	8012144 <mouseDriver_sendMsg+0x17bc>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012152:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012156:	2200      	movs	r2, #0
 8012158:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 801215c:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 8012160:	2800      	cmp	r0, #0
 8012162:	f000 80d3 	beq.w	801230c <mouseDriver_sendMsg+0x1984>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8012166:	2201      	movs	r2, #1
 8012168:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 801216c:	240a      	movs	r4, #10
 801216e:	e00e      	b.n	801218e <mouseDriver_sendMsg+0x1806>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8012170:	23fe      	movs	r3, #254	; 0xfe
 8012172:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012176:	230e      	movs	r3, #14
 8012178:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 801217c:	2000      	movs	r0, #0
 801217e:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012182:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8012186:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8012188:	2200      	movs	r2, #0
 801218a:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 801218e:	2200      	movs	r2, #0
 8012190:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8012194:	496b      	ldr	r1, [pc, #428]	; (8012344 <mouseDriver_sendMsg+0x19bc>)
 8012196:	798a      	ldrb	r2, [r1, #6]
 8012198:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 801219c:	1c55      	adds	r5, r2, #1
 801219e:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 80121a0:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80121a4:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 80121a8:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 80121ac:	2e00      	cmp	r6, #0
 80121ae:	f000 80af 	beq.w	8012310 <mouseDriver_sendMsg+0x1988>
		buf[2] = msg->seq;
 80121b2:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 80121b6:	2300      	movs	r3, #0
 80121b8:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 80121bc:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 80121c0:	2306      	movs	r3, #6
 80121c2:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 80121c6:	1ea6      	subs	r6, r4, #2
 80121c8:	b2b6      	uxth	r6, r6
 80121ca:	ab80      	add	r3, sp, #512	; 0x200
 80121cc:	441e      	add	r6, r3
 80121ce:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 80121d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 80121d6:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80121da:	f815 2b01 	ldrb.w	r2, [r5], #1
 80121de:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 80121e0:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80121e4:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80121e6:	0913      	lsrs	r3, r2, #4
 80121e8:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80121ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80121f0:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80121f4:	42ae      	cmp	r6, r5
 80121f6:	d1f0      	bne.n	80121da <mouseDriver_sendMsg+0x1852>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80121f8:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 80121fc:	b2ba      	uxth	r2, r7
	while (length--) {
 80121fe:	1e53      	subs	r3, r2, #1
 8012200:	b29b      	uxth	r3, r3
 8012202:	b1a2      	cbz	r2, 801222e <mouseDriver_sendMsg+0x18a6>
 8012204:	aa80      	add	r2, sp, #512	; 0x200
 8012206:	4413      	add	r3, r2
 8012208:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 801220c:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801220e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012212:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8012214:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8012218:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801221a:	091a      	lsrs	r2, r3, #4
 801221c:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8012220:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8012224:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8012228:	b299      	uxth	r1, r3
	while (length--) {
 801222a:	42ae      	cmp	r6, r5
 801222c:	d1ef      	bne.n	801220e <mouseDriver_sendMsg+0x1886>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801222e:	f081 0390 	eor.w	r3, r1, #144	; 0x90
        tmp ^= (tmp<<4);
 8012232:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8012236:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012238:	0913      	lsrs	r3, r2, #4
 801223a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 801223e:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8012242:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8012246:	b21b      	sxth	r3, r3
 8012248:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 801224a:	a93a      	add	r1, sp, #232	; 0xe8
 801224c:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 801224e:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8012252:	0a15      	lsrs	r5, r2, #8
 8012254:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8012258:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 801225a:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 801225e:	2800      	cmp	r0, #0
 8012260:	d174      	bne.n	801234c <mouseDriver_sendMsg+0x19c4>
	return msg->len + header_len + 2 + signature_len;
 8012262:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8012266:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 801226a:	29fe      	cmp	r1, #254	; 0xfe
 801226c:	f000 80ff 	beq.w	801246e <mouseDriver_sendMsg+0x1ae6>
	while (length > 1 && payload[length-1] == 0) {
 8012270:	2c01      	cmp	r4, #1
 8012272:	d911      	bls.n	8012298 <mouseDriver_sendMsg+0x1910>
 8012274:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8012278:	5d1b      	ldrb	r3, [r3, r4]
 801227a:	b96b      	cbnz	r3, 8012298 <mouseDriver_sendMsg+0x1910>
 801227c:	1e63      	subs	r3, r4, #1
 801227e:	aa80      	add	r2, sp, #512	; 0x200
 8012280:	fa52 f383 	uxtab	r3, r2, r3
 8012284:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8012288:	3c01      	subs	r4, #1
 801228a:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 801228c:	2c01      	cmp	r4, #1
 801228e:	d003      	beq.n	8012298 <mouseDriver_sendMsg+0x1910>
 8012290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012294:	2a00      	cmp	r2, #0
 8012296:	d0f7      	beq.n	8012288 <mouseDriver_sendMsg+0x1900>
		buf[0] = msg->magic;
 8012298:	4d2b      	ldr	r5, [pc, #172]	; (8012348 <mouseDriver_sendMsg+0x19c0>)
 801229a:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 801229c:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 801229e:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 80122a2:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 80122a4:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 80122a8:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 80122aa:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 80122ae:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 80122b0:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 80122b4:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 80122b6:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80122ba:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 80122bc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80122be:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80122c2:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80122c4:	121a      	asrs	r2, r3, #8
 80122c6:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80122c8:	141b      	asrs	r3, r3, #16
 80122ca:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80122cc:	4622      	mov	r2, r4
 80122ce:	a93a      	add	r1, sp, #232	; 0xe8
 80122d0:	f105 000a 	add.w	r0, r5, #10
 80122d4:	f7ed ffbc 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80122d8:	f104 020a 	add.w	r2, r4, #10
 80122dc:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80122de:	f016 0f01 	tst.w	r6, #1
 80122e2:	f040 8566 	bne.w	8012db2 <mouseDriver_sendMsg+0x242a>
		header_len = MAVLINK_CORE_HEADER_LEN;
 80122e6:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80122e8:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 80122ec:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80122ee:	0a12      	lsrs	r2, r2, #8
 80122f0:	705a      	strb	r2, [r3, #1]
 80122f2:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80122f4:	4421      	add	r1, r4
 80122f6:	3103      	adds	r1, #3
 80122f8:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 80122fa:	b289      	uxth	r1, r1
 80122fc:	4812      	ldr	r0, [pc, #72]	; (8012348 <mouseDriver_sendMsg+0x19c0>)
 80122fe:	f7ee f9ef 	bl	80006e0 <main_transmit_buffer>
            break;
 8012302:	f7fe bc6d 	b.w	8010be0 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 8012306:	2000      	movs	r0, #0
 8012308:	230e      	movs	r3, #14
 801230a:	e722      	b.n	8012152 <mouseDriver_sendMsg+0x17ca>
	if (signing) {
 801230c:	240a      	movs	r4, #10
 801230e:	e73b      	b.n	8012188 <mouseDriver_sendMsg+0x1800>
		buf[2] = msg->incompat_flags;
 8012310:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8012314:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 8012318:	2300      	movs	r3, #0
 801231a:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 801231e:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 8012322:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 8012326:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 801232a:	2206      	movs	r2, #6
 801232c:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8012330:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8012334:	f88d 3011 	strb.w	r3, [sp, #17]
 8012338:	e745      	b.n	80121c6 <mouseDriver_sendMsg+0x183e>
 801233a:	bf00      	nop
 801233c:	200009b4 	.word	0x200009b4
 8012340:	20000c54 	.word	0x20000c54
 8012344:	20000a00 	.word	0x20000a00
 8012348:	20000a60 	.word	0x20000a60
		mavlink_sign_packet(status->signing,
 801234c:	4b7f      	ldr	r3, [pc, #508]	; (801254c <mouseDriver_sendMsg+0x1bc4>)
 801234e:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8012350:	2900      	cmp	r1, #0
 8012352:	d086      	beq.n	8012262 <mouseDriver_sendMsg+0x18da>
 8012354:	780b      	ldrb	r3, [r1, #0]
 8012356:	f013 0f01 	tst.w	r3, #1
 801235a:	d082      	beq.n	8012262 <mouseDriver_sendMsg+0x18da>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 801235c:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8012360:	784b      	ldrb	r3, [r1, #1]
 8012362:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8012366:	688b      	ldr	r3, [r1, #8]
 8012368:	68ca      	ldr	r2, [r1, #12]
 801236a:	9300      	str	r3, [sp, #0]
 801236c:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 801236e:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8012372:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012376:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 801237a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801237e:	1c56      	adds	r6, r2, #1
 8012380:	f143 0700 	adc.w	r7, r3, #0
 8012384:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8012388:	2600      	movs	r6, #0
 801238a:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 801238c:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 801238e:	4b70      	ldr	r3, [pc, #448]	; (8012550 <mouseDriver_sendMsg+0x1bc8>)
 8012390:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8012392:	4b70      	ldr	r3, [pc, #448]	; (8012554 <mouseDriver_sendMsg+0x1bcc>)
 8012394:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8012396:	4b70      	ldr	r3, [pc, #448]	; (8012558 <mouseDriver_sendMsg+0x1bd0>)
 8012398:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 801239a:	4b70      	ldr	r3, [pc, #448]	; (801255c <mouseDriver_sendMsg+0x1bd4>)
 801239c:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 801239e:	4b70      	ldr	r3, [pc, #448]	; (8012560 <mouseDriver_sendMsg+0x1bd8>)
 80123a0:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 80123a2:	4b70      	ldr	r3, [pc, #448]	; (8012564 <mouseDriver_sendMsg+0x1bdc>)
 80123a4:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 80123a6:	4b70      	ldr	r3, [pc, #448]	; (8012568 <mouseDriver_sendMsg+0x1be0>)
 80123a8:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 80123aa:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80123ae:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80123b2:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80123b6:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80123b8:	2220      	movs	r2, #32
 80123ba:	3110      	adds	r1, #16
 80123bc:	a81d      	add	r0, sp, #116	; 0x74
 80123be:	f7fe f9b1 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 80123c2:	4622      	mov	r2, r4
 80123c4:	a902      	add	r1, sp, #8
 80123c6:	a81d      	add	r0, sp, #116	; 0x74
 80123c8:	f7fe f9ac 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80123cc:	462a      	mov	r2, r5
 80123ce:	a93a      	add	r1, sp, #232	; 0xe8
 80123d0:	a81d      	add	r0, sp, #116	; 0x74
 80123d2:	f7fe f9a7 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80123d6:	2202      	movs	r2, #2
 80123d8:	ab3a      	add	r3, sp, #232	; 0xe8
 80123da:	1959      	adds	r1, r3, r5
 80123dc:	a81d      	add	r0, sp, #116	; 0x74
 80123de:	f7fe f9a1 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80123e2:	2207      	movs	r2, #7
 80123e4:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 80123e8:	a81d      	add	r0, sp, #116	; 0x74
 80123ea:	f7fe f99b 	bl	8010724 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 80123ee:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80123f0:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80123f4:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 80123f8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 80123fc:	2380      	movs	r3, #128	; 0x80
 80123fe:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8012402:	2247      	movs	r2, #71	; 0x47
 8012404:	4631      	mov	r1, r6
 8012406:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 801240a:	f001 f9c9 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 801240e:	ab0b      	add	r3, sp, #44	; 0x2c
 8012410:	442b      	add	r3, r5
 8012412:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8012414:	0a22      	lsrs	r2, r4, #8
 8012416:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8012418:	0c22      	lsrs	r2, r4, #16
 801241a:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 801241c:	0e24      	lsrs	r4, r4, #24
 801241e:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8012420:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012422:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8012424:	0a11      	lsrs	r1, r2, #8
 8012426:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8012428:	0c11      	lsrs	r1, r2, #16
 801242a:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 801242c:	0e12      	lsrs	r2, r2, #24
 801242e:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8012430:	f105 0209 	add.w	r2, r5, #9
 8012434:	a90b      	add	r1, sp, #44	; 0x2c
 8012436:	a81d      	add	r0, sp, #116	; 0x74
 8012438:	f7fe f974 	bl	8010724 <mavlink_sha256_update>
    result[0] = p[3];
 801243c:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8012440:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 8012444:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8012448:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 801244c:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8012450:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8012454:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8012458:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 801245c:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8012460:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8012464:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8012468:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 801246c:	e6f9      	b.n	8012262 <mouseDriver_sendMsg+0x18da>
		buf[0] = msg->magic;
 801246e:	4d3f      	ldr	r5, [pc, #252]	; (801256c <mouseDriver_sendMsg+0x1be4>)
 8012470:	23fe      	movs	r3, #254	; 0xfe
 8012472:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8012474:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8012476:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 801247a:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 801247c:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8012480:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8012482:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8012486:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8012488:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801248a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801248e:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8012490:	4622      	mov	r2, r4
 8012492:	a93a      	add	r1, sp, #232	; 0xe8
 8012494:	1da8      	adds	r0, r5, #6
 8012496:	f7ed fedb 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 801249a:	1da3      	adds	r3, r4, #6
 801249c:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 801249e:	2105      	movs	r1, #5
 80124a0:	e722      	b.n	80122e8 <mouseDriver_sendMsg+0x1960>
 * @param msg The MAVLink message to compress the data into
 * @param raw_sensor C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_raw_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_sensor_t* raw_sensor)
{
    return mavlink_msg_raw_sensor_pack(system_id, component_id, msg, raw_sensor->time, raw_sensor->sensor_id, raw_sensor->delta_x, raw_sensor->delta_y, raw_sensor->squal, raw_sensor->lift, raw_sensor->product_id, raw_sensor->srom_id);
 80124a2:	4a33      	ldr	r2, [pc, #204]	; (8012570 <mouseDriver_sendMsg+0x1be8>)
 80124a4:	7a16      	ldrb	r6, [r2, #8]
 80124a6:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80124aa:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80124ae:	7a55      	ldrb	r5, [r2, #9]
 80124b0:	7a94      	ldrb	r4, [r2, #10]
 80124b2:	7ad0      	ldrb	r0, [r2, #11]
 80124b4:	7b11      	ldrb	r1, [r2, #12]
    packet.time = time;
 80124b6:	ab06      	add	r3, sp, #24
 80124b8:	6812      	ldr	r2, [r2, #0]
 80124ba:	9206      	str	r2, [sp, #24]
    packet.delta_x = delta_x;
 80124bc:	f8ad c01c 	strh.w	ip, [sp, #28]
    packet.delta_y = delta_y;
 80124c0:	f8ad 701e 	strh.w	r7, [sp, #30]
    packet.sensor_id = sensor_id;
 80124c4:	f88d 6020 	strb.w	r6, [sp, #32]
    packet.squal = squal;
 80124c8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
    packet.lift = lift;
 80124cc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    packet.product_id = product_id;
 80124d0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    packet.srom_id = srom_id;
 80124d4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RAW_SENSOR_LEN);
 80124d8:	ac3a      	add	r4, sp, #232	; 0xe8
 80124da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80124dc:	c407      	stmia	r4!, {r0, r1, r2}
 80124de:	7023      	strb	r3, [r4, #0]
    msg->msgid = MAVLINK_MSG_ID_RAW_SENSOR;
 80124e0:	2300      	movs	r3, #0
 80124e2:	2208      	movs	r2, #8
 80124e4:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 80124e8:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 80124ec:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80124f0:	4b16      	ldr	r3, [pc, #88]	; (801254c <mouseDriver_sendMsg+0x1bc4>)
 80124f2:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80124f4:	f013 0602 	ands.w	r6, r3, #2
 80124f8:	d13c      	bne.n	8012574 <mouseDriver_sendMsg+0x1bec>
 80124fa:	4b14      	ldr	r3, [pc, #80]	; (801254c <mouseDriver_sendMsg+0x1bc4>)
 80124fc:	691b      	ldr	r3, [r3, #16]
 80124fe:	b123      	cbz	r3, 801250a <mouseDriver_sendMsg+0x1b82>
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	f013 0f01 	tst.w	r3, #1
 8012506:	f040 851d 	bne.w	8012f44 <mouseDriver_sendMsg+0x25bc>
		msg->magic = MAVLINK_STX;
 801250a:	23fd      	movs	r3, #253	; 0xfd
 801250c:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012510:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8012514:	2b00      	cmp	r3, #0
 8012516:	f040 80f8 	bne.w	801270a <mouseDriver_sendMsg+0x1d82>
 801251a:	2000      	movs	r0, #0
 801251c:	aa3d      	add	r2, sp, #244	; 0xf4
		length--;
 801251e:	230c      	movs	r3, #12
	while (length > 1 && payload[length-1] == 0) {
 8012520:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8012524:	b919      	cbnz	r1, 801252e <mouseDriver_sendMsg+0x1ba6>
		length--;
 8012526:	3b01      	subs	r3, #1
 8012528:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 801252a:	2b01      	cmp	r3, #1
 801252c:	d1f8      	bne.n	8012520 <mouseDriver_sendMsg+0x1b98>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 801252e:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012532:	2200      	movs	r2, #0
 8012534:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012538:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 801253c:	2800      	cmp	r0, #0
 801253e:	f000 80e7 	beq.w	8012710 <mouseDriver_sendMsg+0x1d88>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8012542:	2201      	movs	r2, #1
 8012544:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 8012548:	240a      	movs	r4, #10
 801254a:	e022      	b.n	8012592 <mouseDriver_sendMsg+0x1c0a>
 801254c:	20000a00 	.word	0x20000a00
 8012550:	6a09e667 	.word	0x6a09e667
 8012554:	bb67ae85 	.word	0xbb67ae85
 8012558:	3c6ef372 	.word	0x3c6ef372
 801255c:	a54ff53a 	.word	0xa54ff53a
 8012560:	510e527f 	.word	0x510e527f
 8012564:	9b05688c 	.word	0x9b05688c
 8012568:	1f83d9ab 	.word	0x1f83d9ab
 801256c:	20000a60 	.word	0x20000a60
 8012570:	200009bc 	.word	0x200009bc
		msg->magic = MAVLINK_STX_MAVLINK1;
 8012574:	23fe      	movs	r3, #254	; 0xfe
 8012576:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 801257a:	230d      	movs	r3, #13
 801257c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012580:	2000      	movs	r0, #0
 8012582:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012586:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 801258a:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 801258c:	2200      	movs	r2, #0
 801258e:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8012592:	2200      	movs	r2, #0
 8012594:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8012598:	49be      	ldr	r1, [pc, #760]	; (8012894 <mouseDriver_sendMsg+0x1f0c>)
 801259a:	798a      	ldrb	r2, [r1, #6]
 801259c:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 80125a0:	1c55      	adds	r5, r2, #1
 80125a2:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 80125a4:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80125a8:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 80125ac:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 80125b0:	2e00      	cmp	r6, #0
 80125b2:	f000 80af 	beq.w	8012714 <mouseDriver_sendMsg+0x1d8c>
		buf[2] = msg->seq;
 80125b6:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 80125ba:	2300      	movs	r3, #0
 80125bc:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 80125c0:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 80125c4:	2308      	movs	r3, #8
 80125c6:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 80125ca:	1ea6      	subs	r6, r4, #2
 80125cc:	b2b6      	uxth	r6, r6
 80125ce:	ab80      	add	r3, sp, #512	; 0x200
 80125d0:	441e      	add	r6, r3
 80125d2:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 80125d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 80125da:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80125de:	f815 2b01 	ldrb.w	r2, [r5], #1
 80125e2:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 80125e4:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80125e8:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80125ea:	0913      	lsrs	r3, r2, #4
 80125ec:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80125f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80125f4:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80125f8:	42ae      	cmp	r6, r5
 80125fa:	d1f0      	bne.n	80125de <mouseDriver_sendMsg+0x1c56>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80125fc:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8012600:	b2ba      	uxth	r2, r7
	while (length--) {
 8012602:	1e53      	subs	r3, r2, #1
 8012604:	b29b      	uxth	r3, r3
 8012606:	b1a2      	cbz	r2, 8012632 <mouseDriver_sendMsg+0x1caa>
 8012608:	aa80      	add	r2, sp, #512	; 0x200
 801260a:	4413      	add	r3, r2
 801260c:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8012610:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012612:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012616:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8012618:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 801261c:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801261e:	091a      	lsrs	r2, r3, #4
 8012620:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8012624:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8012628:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 801262c:	b299      	uxth	r1, r3
	while (length--) {
 801262e:	42ae      	cmp	r6, r5
 8012630:	d1ef      	bne.n	8012612 <mouseDriver_sendMsg+0x1c8a>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012632:	f081 034b 	eor.w	r3, r1, #75	; 0x4b
        tmp ^= (tmp<<4);
 8012636:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 801263a:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801263c:	0913      	lsrs	r3, r2, #4
 801263e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8012642:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8012646:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 801264a:	b21b      	sxth	r3, r3
 801264c:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 801264e:	a93a      	add	r1, sp, #232	; 0xe8
 8012650:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8012652:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8012656:	0a15      	lsrs	r5, r2, #8
 8012658:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 801265c:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 801265e:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8012662:	2800      	cmp	r0, #0
 8012664:	d16b      	bne.n	801273e <mouseDriver_sendMsg+0x1db6>
	return msg->len + header_len + 2 + signature_len;
 8012666:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 801266a:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 801266e:	29fe      	cmp	r1, #254	; 0xfe
 8012670:	f000 80f6 	beq.w	8012860 <mouseDriver_sendMsg+0x1ed8>
	while (length > 1 && payload[length-1] == 0) {
 8012674:	2c01      	cmp	r4, #1
 8012676:	d911      	bls.n	801269c <mouseDriver_sendMsg+0x1d14>
 8012678:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 801267c:	5d1b      	ldrb	r3, [r3, r4]
 801267e:	b96b      	cbnz	r3, 801269c <mouseDriver_sendMsg+0x1d14>
 8012680:	1e63      	subs	r3, r4, #1
 8012682:	aa80      	add	r2, sp, #512	; 0x200
 8012684:	fa52 f383 	uxtab	r3, r2, r3
 8012688:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 801268c:	3c01      	subs	r4, #1
 801268e:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8012690:	2c01      	cmp	r4, #1
 8012692:	d003      	beq.n	801269c <mouseDriver_sendMsg+0x1d14>
 8012694:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012698:	2a00      	cmp	r2, #0
 801269a:	d0f7      	beq.n	801268c <mouseDriver_sendMsg+0x1d04>
		buf[0] = msg->magic;
 801269c:	4d7e      	ldr	r5, [pc, #504]	; (8012898 <mouseDriver_sendMsg+0x1f10>)
 801269e:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 80126a0:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 80126a2:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 80126a6:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 80126a8:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 80126ac:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 80126ae:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 80126b2:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 80126b4:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 80126b8:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 80126ba:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80126be:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 80126c0:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80126c2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80126c6:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80126c8:	121a      	asrs	r2, r3, #8
 80126ca:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80126cc:	141b      	asrs	r3, r3, #16
 80126ce:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80126d0:	4622      	mov	r2, r4
 80126d2:	a93a      	add	r1, sp, #232	; 0xe8
 80126d4:	f105 000a 	add.w	r0, r5, #10
 80126d8:	f7ed fdba 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80126dc:	f104 020a 	add.w	r2, r4, #10
 80126e0:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80126e2:	f016 0f01 	tst.w	r6, #1
 80126e6:	f040 837b 	bne.w	8012de0 <mouseDriver_sendMsg+0x2458>
		header_len = MAVLINK_CORE_HEADER_LEN;
 80126ea:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80126ec:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 80126f0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80126f2:	0a12      	lsrs	r2, r2, #8
 80126f4:	705a      	strb	r2, [r3, #1]
 80126f6:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80126f8:	4421      	add	r1, r4
 80126fa:	3103      	adds	r1, #3
 80126fc:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 80126fe:	b289      	uxth	r1, r1
 8012700:	4865      	ldr	r0, [pc, #404]	; (8012898 <mouseDriver_sendMsg+0x1f10>)
 8012702:	f7ed ffed 	bl	80006e0 <main_transmit_buffer>
                   HAL_Delay(1);
 8012706:	2401      	movs	r4, #1
            while (main_get_huart_tx_state() == HAL_BUSY){
 8012708:	e0d9      	b.n	80128be <mouseDriver_sendMsg+0x1f36>
	while (length > 1 && payload[length-1] == 0) {
 801270a:	2000      	movs	r0, #0
 801270c:	230d      	movs	r3, #13
 801270e:	e70e      	b.n	801252e <mouseDriver_sendMsg+0x1ba6>
	if (signing) {
 8012710:	240a      	movs	r4, #10
 8012712:	e73b      	b.n	801258c <mouseDriver_sendMsg+0x1c04>
		buf[2] = msg->incompat_flags;
 8012714:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8012718:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 801271c:	2300      	movs	r3, #0
 801271e:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 8012722:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 8012726:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 801272a:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 801272e:	2208      	movs	r2, #8
 8012730:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8012734:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8012738:	f88d 3011 	strb.w	r3, [sp, #17]
 801273c:	e745      	b.n	80125ca <mouseDriver_sendMsg+0x1c42>
		mavlink_sign_packet(status->signing,
 801273e:	4b55      	ldr	r3, [pc, #340]	; (8012894 <mouseDriver_sendMsg+0x1f0c>)
 8012740:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8012742:	2900      	cmp	r1, #0
 8012744:	d08f      	beq.n	8012666 <mouseDriver_sendMsg+0x1cde>
 8012746:	780b      	ldrb	r3, [r1, #0]
 8012748:	f013 0f01 	tst.w	r3, #1
 801274c:	d08b      	beq.n	8012666 <mouseDriver_sendMsg+0x1cde>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 801274e:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8012752:	784b      	ldrb	r3, [r1, #1]
 8012754:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8012758:	688b      	ldr	r3, [r1, #8]
 801275a:	68ca      	ldr	r2, [r1, #12]
 801275c:	9300      	str	r3, [sp, #0]
 801275e:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8012760:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8012764:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012768:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 801276c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012770:	1c56      	adds	r6, r2, #1
 8012772:	f143 0700 	adc.w	r7, r3, #0
 8012776:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 801277a:	2600      	movs	r6, #0
 801277c:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 801277e:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8012780:	4b46      	ldr	r3, [pc, #280]	; (801289c <mouseDriver_sendMsg+0x1f14>)
 8012782:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8012784:	4b46      	ldr	r3, [pc, #280]	; (80128a0 <mouseDriver_sendMsg+0x1f18>)
 8012786:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8012788:	4b46      	ldr	r3, [pc, #280]	; (80128a4 <mouseDriver_sendMsg+0x1f1c>)
 801278a:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 801278c:	4b46      	ldr	r3, [pc, #280]	; (80128a8 <mouseDriver_sendMsg+0x1f20>)
 801278e:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8012790:	4b46      	ldr	r3, [pc, #280]	; (80128ac <mouseDriver_sendMsg+0x1f24>)
 8012792:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8012794:	4b46      	ldr	r3, [pc, #280]	; (80128b0 <mouseDriver_sendMsg+0x1f28>)
 8012796:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8012798:	4b46      	ldr	r3, [pc, #280]	; (80128b4 <mouseDriver_sendMsg+0x1f2c>)
 801279a:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 801279c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80127a0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80127a4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80127a8:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80127aa:	2220      	movs	r2, #32
 80127ac:	3110      	adds	r1, #16
 80127ae:	a81d      	add	r0, sp, #116	; 0x74
 80127b0:	f7fd ffb8 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 80127b4:	4622      	mov	r2, r4
 80127b6:	a902      	add	r1, sp, #8
 80127b8:	a81d      	add	r0, sp, #116	; 0x74
 80127ba:	f7fd ffb3 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80127be:	462a      	mov	r2, r5
 80127c0:	a93a      	add	r1, sp, #232	; 0xe8
 80127c2:	a81d      	add	r0, sp, #116	; 0x74
 80127c4:	f7fd ffae 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80127c8:	2202      	movs	r2, #2
 80127ca:	ab3a      	add	r3, sp, #232	; 0xe8
 80127cc:	1959      	adds	r1, r3, r5
 80127ce:	a81d      	add	r0, sp, #116	; 0x74
 80127d0:	f7fd ffa8 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80127d4:	2207      	movs	r2, #7
 80127d6:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 80127da:	a81d      	add	r0, sp, #116	; 0x74
 80127dc:	f7fd ffa2 	bl	8010724 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 80127e0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80127e2:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80127e6:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 80127ea:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 80127ee:	2380      	movs	r3, #128	; 0x80
 80127f0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80127f4:	2247      	movs	r2, #71	; 0x47
 80127f6:	4631      	mov	r1, r6
 80127f8:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 80127fc:	f000 ffd0 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8012800:	ab0b      	add	r3, sp, #44	; 0x2c
 8012802:	442b      	add	r3, r5
 8012804:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8012806:	0a22      	lsrs	r2, r4, #8
 8012808:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 801280a:	0c22      	lsrs	r2, r4, #16
 801280c:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 801280e:	0e24      	lsrs	r4, r4, #24
 8012810:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8012812:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012814:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8012816:	0a11      	lsrs	r1, r2, #8
 8012818:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 801281a:	0c11      	lsrs	r1, r2, #16
 801281c:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 801281e:	0e12      	lsrs	r2, r2, #24
 8012820:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8012822:	f105 0209 	add.w	r2, r5, #9
 8012826:	a90b      	add	r1, sp, #44	; 0x2c
 8012828:	a81d      	add	r0, sp, #116	; 0x74
 801282a:	f7fd ff7b 	bl	8010724 <mavlink_sha256_update>
    result[0] = p[3];
 801282e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8012832:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 8012836:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 801283a:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 801283e:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8012842:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8012846:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 801284a:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 801284e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8012852:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8012856:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 801285a:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 801285e:	e702      	b.n	8012666 <mouseDriver_sendMsg+0x1cde>
		buf[0] = msg->magic;
 8012860:	4d0d      	ldr	r5, [pc, #52]	; (8012898 <mouseDriver_sendMsg+0x1f10>)
 8012862:	23fe      	movs	r3, #254	; 0xfe
 8012864:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8012866:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8012868:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 801286c:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 801286e:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8012872:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8012874:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8012878:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 801287a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801287c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8012880:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8012882:	4622      	mov	r2, r4
 8012884:	a93a      	add	r1, sp, #232	; 0xe8
 8012886:	1da8      	adds	r0, r5, #6
 8012888:	f7ed fce2 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 801288c:	1da3      	adds	r3, r4, #6
 801288e:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8012890:	2105      	movs	r1, #5
 8012892:	e72b      	b.n	80126ec <mouseDriver_sendMsg+0x1d64>
 8012894:	20000a00 	.word	0x20000a00
 8012898:	20000a60 	.word	0x20000a60
 801289c:	6a09e667 	.word	0x6a09e667
 80128a0:	bb67ae85 	.word	0xbb67ae85
 80128a4:	3c6ef372 	.word	0x3c6ef372
 80128a8:	a54ff53a 	.word	0xa54ff53a
 80128ac:	510e527f 	.word	0x510e527f
 80128b0:	9b05688c 	.word	0x9b05688c
 80128b4:	1f83d9ab 	.word	0x1f83d9ab
                   HAL_Delay(1);
 80128b8:	4620      	mov	r0, r4
 80128ba:	f7ef fc15 	bl	80020e8 <HAL_Delay>
            while (main_get_huart_tx_state() == HAL_BUSY){
 80128be:	f7ed ff07 	bl	80006d0 <main_get_huart_tx_state>
 80128c2:	2802      	cmp	r0, #2
 80128c4:	d0f8      	beq.n	80128b8 <mouseDriver_sendMsg+0x1f30>
    return mavlink_msg_raw_sensor_pack(system_id, component_id, msg, raw_sensor->time, raw_sensor->sensor_id, raw_sensor->delta_x, raw_sensor->delta_y, raw_sensor->squal, raw_sensor->lift, raw_sensor->product_id, raw_sensor->srom_id);
 80128c6:	4a9d      	ldr	r2, [pc, #628]	; (8012b3c <mouseDriver_sendMsg+0x21b4>)
 80128c8:	7d56      	ldrb	r6, [r2, #21]
 80128ca:	f9b2 c011 	ldrsh.w	ip, [r2, #17]
 80128ce:	f9b2 7013 	ldrsh.w	r7, [r2, #19]
 80128d2:	7d95      	ldrb	r5, [r2, #22]
 80128d4:	7dd4      	ldrb	r4, [r2, #23]
 80128d6:	7e10      	ldrb	r0, [r2, #24]
 80128d8:	7e51      	ldrb	r1, [r2, #25]
    packet.time = time;
 80128da:	ab06      	add	r3, sp, #24
    return mavlink_msg_raw_sensor_pack(system_id, component_id, msg, raw_sensor->time, raw_sensor->sensor_id, raw_sensor->delta_x, raw_sensor->delta_y, raw_sensor->squal, raw_sensor->lift, raw_sensor->product_id, raw_sensor->srom_id);
 80128dc:	f8d2 200d 	ldr.w	r2, [r2, #13]
    packet.time = time;
 80128e0:	9206      	str	r2, [sp, #24]
    packet.delta_x = delta_x;
 80128e2:	f8ad c01c 	strh.w	ip, [sp, #28]
    packet.delta_y = delta_y;
 80128e6:	f8ad 701e 	strh.w	r7, [sp, #30]
    packet.sensor_id = sensor_id;
 80128ea:	f88d 6020 	strb.w	r6, [sp, #32]
    packet.squal = squal;
 80128ee:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
    packet.lift = lift;
 80128f2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    packet.product_id = product_id;
 80128f6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    packet.srom_id = srom_id;
 80128fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RAW_SENSOR_LEN);
 80128fe:	ac3a      	add	r4, sp, #232	; 0xe8
 8012900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012902:	c407      	stmia	r4!, {r0, r1, r2}
 8012904:	7023      	strb	r3, [r4, #0]
    msg->msgid = MAVLINK_MSG_ID_RAW_SENSOR;
 8012906:	2300      	movs	r3, #0
 8012908:	2208      	movs	r2, #8
 801290a:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 801290e:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 8012912:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8012916:	4b8a      	ldr	r3, [pc, #552]	; (8012b40 <mouseDriver_sendMsg+0x21b8>)
 8012918:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 801291a:	f013 0602 	ands.w	r6, r3, #2
 801291e:	d128      	bne.n	8012972 <mouseDriver_sendMsg+0x1fea>
 8012920:	4b87      	ldr	r3, [pc, #540]	; (8012b40 <mouseDriver_sendMsg+0x21b8>)
 8012922:	691b      	ldr	r3, [r3, #16]
 8012924:	b123      	cbz	r3, 8012930 <mouseDriver_sendMsg+0x1fa8>
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	f013 0f01 	tst.w	r3, #1
 801292c:	f040 831e 	bne.w	8012f6c <mouseDriver_sendMsg+0x25e4>
		msg->magic = MAVLINK_STX;
 8012930:	23fd      	movs	r3, #253	; 0xfd
 8012932:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012936:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801293a:	2b00      	cmp	r3, #0
 801293c:	f040 80e4 	bne.w	8012b08 <mouseDriver_sendMsg+0x2180>
 8012940:	2000      	movs	r0, #0
 8012942:	aa3d      	add	r2, sp, #244	; 0xf4
		length--;
 8012944:	230c      	movs	r3, #12
	while (length > 1 && payload[length-1] == 0) {
 8012946:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801294a:	b919      	cbnz	r1, 8012954 <mouseDriver_sendMsg+0x1fcc>
		length--;
 801294c:	3b01      	subs	r3, #1
 801294e:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8012950:	2b01      	cmp	r3, #1
 8012952:	d1f8      	bne.n	8012946 <mouseDriver_sendMsg+0x1fbe>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012954:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012958:	2200      	movs	r2, #0
 801295a:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 801295e:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 8012962:	2800      	cmp	r0, #0
 8012964:	f000 80d3 	beq.w	8012b0e <mouseDriver_sendMsg+0x2186>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8012968:	2201      	movs	r2, #1
 801296a:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 801296e:	240a      	movs	r4, #10
 8012970:	e00e      	b.n	8012990 <mouseDriver_sendMsg+0x2008>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8012972:	23fe      	movs	r3, #254	; 0xfe
 8012974:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012978:	230d      	movs	r3, #13
 801297a:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 801297e:	2000      	movs	r0, #0
 8012980:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012984:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8012988:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 801298a:	2200      	movs	r2, #0
 801298c:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8012990:	2200      	movs	r2, #0
 8012992:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8012996:	496a      	ldr	r1, [pc, #424]	; (8012b40 <mouseDriver_sendMsg+0x21b8>)
 8012998:	798a      	ldrb	r2, [r1, #6]
 801299a:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 801299e:	1c55      	adds	r5, r2, #1
 80129a0:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 80129a2:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80129a6:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 80129aa:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 80129ae:	2e00      	cmp	r6, #0
 80129b0:	f000 80af 	beq.w	8012b12 <mouseDriver_sendMsg+0x218a>
		buf[2] = msg->seq;
 80129b4:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 80129b8:	2300      	movs	r3, #0
 80129ba:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 80129be:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 80129c2:	2308      	movs	r3, #8
 80129c4:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 80129c8:	1ea6      	subs	r6, r4, #2
 80129ca:	b2b6      	uxth	r6, r6
 80129cc:	ab80      	add	r3, sp, #512	; 0x200
 80129ce:	441e      	add	r6, r3
 80129d0:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 80129d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 80129d8:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80129dc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80129e0:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 80129e2:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80129e6:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80129e8:	0913      	lsrs	r3, r2, #4
 80129ea:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80129ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80129f2:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80129f6:	42b5      	cmp	r5, r6
 80129f8:	d1f0      	bne.n	80129dc <mouseDriver_sendMsg+0x2054>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80129fa:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 80129fe:	b2ba      	uxth	r2, r7
	while (length--) {
 8012a00:	1e53      	subs	r3, r2, #1
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	b1a2      	cbz	r2, 8012a30 <mouseDriver_sendMsg+0x20a8>
 8012a06:	aa80      	add	r2, sp, #512	; 0x200
 8012a08:	4413      	add	r3, r2
 8012a0a:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8012a0e:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012a10:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012a14:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8012a16:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8012a1a:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012a1c:	091a      	lsrs	r2, r3, #4
 8012a1e:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8012a22:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8012a26:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8012a2a:	b299      	uxth	r1, r3
	while (length--) {
 8012a2c:	42ae      	cmp	r6, r5
 8012a2e:	d1ef      	bne.n	8012a10 <mouseDriver_sendMsg+0x2088>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012a30:	f081 034b 	eor.w	r3, r1, #75	; 0x4b
        tmp ^= (tmp<<4);
 8012a34:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8012a38:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012a3a:	0913      	lsrs	r3, r2, #4
 8012a3c:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8012a40:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8012a44:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8012a48:	b21b      	sxth	r3, r3
 8012a4a:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8012a4c:	a93a      	add	r1, sp, #232	; 0xe8
 8012a4e:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8012a50:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8012a54:	0a15      	lsrs	r5, r2, #8
 8012a56:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8012a5a:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8012a5c:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8012a60:	2800      	cmp	r0, #0
 8012a62:	d171      	bne.n	8012b48 <mouseDriver_sendMsg+0x21c0>
	return msg->len + header_len + 2 + signature_len;
 8012a64:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8012a68:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8012a6c:	29fe      	cmp	r1, #254	; 0xfe
 8012a6e:	f000 80fc 	beq.w	8012c6a <mouseDriver_sendMsg+0x22e2>
	while (length > 1 && payload[length-1] == 0) {
 8012a72:	2c01      	cmp	r4, #1
 8012a74:	d911      	bls.n	8012a9a <mouseDriver_sendMsg+0x2112>
 8012a76:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8012a7a:	5d1b      	ldrb	r3, [r3, r4]
 8012a7c:	b96b      	cbnz	r3, 8012a9a <mouseDriver_sendMsg+0x2112>
 8012a7e:	1e63      	subs	r3, r4, #1
 8012a80:	aa80      	add	r2, sp, #512	; 0x200
 8012a82:	fa52 f383 	uxtab	r3, r2, r3
 8012a86:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8012a8a:	3c01      	subs	r4, #1
 8012a8c:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8012a8e:	2c01      	cmp	r4, #1
 8012a90:	d003      	beq.n	8012a9a <mouseDriver_sendMsg+0x2112>
 8012a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a96:	2a00      	cmp	r2, #0
 8012a98:	d0f7      	beq.n	8012a8a <mouseDriver_sendMsg+0x2102>
		buf[0] = msg->magic;
 8012a9a:	4d2a      	ldr	r5, [pc, #168]	; (8012b44 <mouseDriver_sendMsg+0x21bc>)
 8012a9c:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8012a9e:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8012aa0:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8012aa4:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8012aa6:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8012aaa:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8012aac:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8012ab0:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8012ab2:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8012ab6:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8012ab8:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8012abc:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8012abe:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8012ac0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8012ac4:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8012ac6:	121a      	asrs	r2, r3, #8
 8012ac8:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8012aca:	141b      	asrs	r3, r3, #16
 8012acc:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8012ace:	4622      	mov	r2, r4
 8012ad0:	a93a      	add	r1, sp, #232	; 0xe8
 8012ad2:	f105 000a 	add.w	r0, r5, #10
 8012ad6:	f7ed fbbb 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8012ada:	f104 020a 	add.w	r2, r4, #10
 8012ade:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012ae0:	f016 0f01 	tst.w	r6, #1
 8012ae4:	f040 8192 	bne.w	8012e0c <mouseDriver_sendMsg+0x2484>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012ae8:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012aea:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8012aee:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012af0:	0a12      	lsrs	r2, r2, #8
 8012af2:	705a      	strb	r2, [r3, #1]
 8012af4:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8012af6:	4421      	add	r1, r4
 8012af8:	3103      	adds	r1, #3
 8012afa:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8012afc:	b289      	uxth	r1, r1
 8012afe:	4811      	ldr	r0, [pc, #68]	; (8012b44 <mouseDriver_sendMsg+0x21bc>)
 8012b00:	f7ed fdee 	bl	80006e0 <main_transmit_buffer>
}
 8012b04:	f7fe b86c 	b.w	8010be0 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 8012b08:	2000      	movs	r0, #0
 8012b0a:	230d      	movs	r3, #13
 8012b0c:	e722      	b.n	8012954 <mouseDriver_sendMsg+0x1fcc>
	if (signing) {
 8012b0e:	240a      	movs	r4, #10
 8012b10:	e73b      	b.n	801298a <mouseDriver_sendMsg+0x2002>
		buf[2] = msg->incompat_flags;
 8012b12:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8012b16:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 8012b20:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 8012b24:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 8012b28:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 8012b2c:	2208      	movs	r2, #8
 8012b2e:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8012b32:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8012b36:	f88d 3011 	strb.w	r3, [sp, #17]
 8012b3a:	e745      	b.n	80129c8 <mouseDriver_sendMsg+0x2040>
 8012b3c:	200009bc 	.word	0x200009bc
 8012b40:	20000a00 	.word	0x20000a00
 8012b44:	20000a60 	.word	0x20000a60
		mavlink_sign_packet(status->signing,
 8012b48:	4bd6      	ldr	r3, [pc, #856]	; (8012ea4 <mouseDriver_sendMsg+0x251c>)
 8012b4a:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8012b4c:	2900      	cmp	r1, #0
 8012b4e:	d089      	beq.n	8012a64 <mouseDriver_sendMsg+0x20dc>
 8012b50:	780b      	ldrb	r3, [r1, #0]
 8012b52:	f013 0f01 	tst.w	r3, #1
 8012b56:	d085      	beq.n	8012a64 <mouseDriver_sendMsg+0x20dc>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8012b58:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8012b5c:	784b      	ldrb	r3, [r1, #1]
 8012b5e:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8012b62:	688b      	ldr	r3, [r1, #8]
 8012b64:	68ca      	ldr	r2, [r1, #12]
 8012b66:	9300      	str	r3, [sp, #0]
 8012b68:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8012b6a:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8012b6e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012b72:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8012b76:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012b7a:	1c56      	adds	r6, r2, #1
 8012b7c:	f143 0700 	adc.w	r7, r3, #0
 8012b80:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8012b84:	2600      	movs	r6, #0
 8012b86:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8012b88:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8012b8a:	4bc7      	ldr	r3, [pc, #796]	; (8012ea8 <mouseDriver_sendMsg+0x2520>)
 8012b8c:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8012b8e:	4bc7      	ldr	r3, [pc, #796]	; (8012eac <mouseDriver_sendMsg+0x2524>)
 8012b90:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8012b92:	4bc7      	ldr	r3, [pc, #796]	; (8012eb0 <mouseDriver_sendMsg+0x2528>)
 8012b94:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8012b96:	4bc7      	ldr	r3, [pc, #796]	; (8012eb4 <mouseDriver_sendMsg+0x252c>)
 8012b98:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8012b9a:	4bc7      	ldr	r3, [pc, #796]	; (8012eb8 <mouseDriver_sendMsg+0x2530>)
 8012b9c:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8012b9e:	4bc7      	ldr	r3, [pc, #796]	; (8012ebc <mouseDriver_sendMsg+0x2534>)
 8012ba0:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8012ba2:	4bc7      	ldr	r3, [pc, #796]	; (8012ec0 <mouseDriver_sendMsg+0x2538>)
 8012ba4:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8012ba6:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8012baa:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8012bae:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8012bb2:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8012bb4:	2220      	movs	r2, #32
 8012bb6:	3110      	adds	r1, #16
 8012bb8:	a81d      	add	r0, sp, #116	; 0x74
 8012bba:	f7fd fdb3 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8012bbe:	4622      	mov	r2, r4
 8012bc0:	a902      	add	r1, sp, #8
 8012bc2:	a81d      	add	r0, sp, #116	; 0x74
 8012bc4:	f7fd fdae 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8012bc8:	462a      	mov	r2, r5
 8012bca:	a93a      	add	r1, sp, #232	; 0xe8
 8012bcc:	a81d      	add	r0, sp, #116	; 0x74
 8012bce:	f7fd fda9 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8012bd2:	2202      	movs	r2, #2
 8012bd4:	ab3a      	add	r3, sp, #232	; 0xe8
 8012bd6:	1959      	adds	r1, r3, r5
 8012bd8:	a81d      	add	r0, sp, #116	; 0x74
 8012bda:	f7fd fda3 	bl	8010724 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8012bde:	2207      	movs	r2, #7
 8012be0:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8012be4:	a81d      	add	r0, sp, #116	; 0x74
 8012be6:	f7fd fd9d 	bl	8010724 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8012bea:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8012bec:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8012bf0:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8012bf4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8012bf8:	2380      	movs	r3, #128	; 0x80
 8012bfa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8012bfe:	2247      	movs	r2, #71	; 0x47
 8012c00:	4631      	mov	r1, r6
 8012c02:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8012c06:	f000 fdcb 	bl	80137a0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8012c0a:	ab0b      	add	r3, sp, #44	; 0x2c
 8012c0c:	442b      	add	r3, r5
 8012c0e:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8012c10:	0a22      	lsrs	r2, r4, #8
 8012c12:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8012c14:	0c22      	lsrs	r2, r4, #16
 8012c16:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8012c18:	0e24      	lsrs	r4, r4, #24
 8012c1a:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8012c1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012c1e:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8012c20:	0a11      	lsrs	r1, r2, #8
 8012c22:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8012c24:	0c11      	lsrs	r1, r2, #16
 8012c26:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8012c28:	0e12      	lsrs	r2, r2, #24
 8012c2a:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8012c2c:	f105 0209 	add.w	r2, r5, #9
 8012c30:	a90b      	add	r1, sp, #44	; 0x2c
 8012c32:	a81d      	add	r0, sp, #116	; 0x74
 8012c34:	f7fd fd76 	bl	8010724 <mavlink_sha256_update>
    result[0] = p[3];
 8012c38:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8012c3c:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 8012c40:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8012c44:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8012c48:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8012c4c:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8012c50:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8012c54:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8012c58:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8012c5c:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8012c60:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8012c64:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8012c68:	e6fc      	b.n	8012a64 <mouseDriver_sendMsg+0x20dc>
		buf[0] = msg->magic;
 8012c6a:	4d96      	ldr	r5, [pc, #600]	; (8012ec4 <mouseDriver_sendMsg+0x253c>)
 8012c6c:	23fe      	movs	r3, #254	; 0xfe
 8012c6e:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8012c70:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8012c72:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8012c76:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8012c78:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8012c7c:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8012c7e:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8012c82:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8012c84:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8012c86:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8012c8a:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8012c8c:	4622      	mov	r2, r4
 8012c8e:	a93a      	add	r1, sp, #232	; 0xe8
 8012c90:	1da8      	adds	r0, r5, #6
 8012c92:	f7ed fadd 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8012c96:	1da3      	adds	r3, r4, #6
 8012c98:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8012c9a:	2105      	movs	r1, #5
 8012c9c:	e725      	b.n	8012aea <mouseDriver_sendMsg+0x2162>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012c9e:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012ca2:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012ca4:	0a09      	lsrs	r1, r1, #8
 8012ca6:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012ca8:	1c99      	adds	r1, r3, #2
 8012caa:	aa80      	add	r2, sp, #512	; 0x200
 8012cac:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012cb0:	6855      	ldr	r5, [r2, #4]
 8012cb2:	6890      	ldr	r0, [r2, #8]
 8012cb4:	f8c3 6002 	str.w	r6, [r3, #2]
 8012cb8:	f8c3 5006 	str.w	r5, [r3, #6]
 8012cbc:	f8c3 000a 	str.w	r0, [r3, #10]
 8012cc0:	7b13      	ldrb	r3, [r2, #12]
 8012cc2:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012cc4:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012cc6:	230d      	movs	r3, #13
 8012cc8:	f7fd bf83 	b.w	8010bd2 <mouseDriver_sendMsg+0x24a>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012ccc:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012cd0:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012cd2:	0a09      	lsrs	r1, r1, #8
 8012cd4:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012cd6:	1c99      	adds	r1, r3, #2
 8012cd8:	aa80      	add	r2, sp, #512	; 0x200
 8012cda:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012cde:	6855      	ldr	r5, [r2, #4]
 8012ce0:	6890      	ldr	r0, [r2, #8]
 8012ce2:	f8c3 6002 	str.w	r6, [r3, #2]
 8012ce6:	f8c3 5006 	str.w	r5, [r3, #6]
 8012cea:	f8c3 000a 	str.w	r0, [r3, #10]
 8012cee:	7b13      	ldrb	r3, [r2, #12]
 8012cf0:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012cf2:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012cf4:	230d      	movs	r3, #13
 8012cf6:	f7fe b95f 	b.w	8010fb8 <mouseDriver_sendMsg+0x630>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012cfa:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012cfe:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012d00:	0a09      	lsrs	r1, r1, #8
 8012d02:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012d04:	1c99      	adds	r1, r3, #2
 8012d06:	aa80      	add	r2, sp, #512	; 0x200
 8012d08:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012d0c:	6855      	ldr	r5, [r2, #4]
 8012d0e:	6890      	ldr	r0, [r2, #8]
 8012d10:	f8c3 6002 	str.w	r6, [r3, #2]
 8012d14:	f8c3 5006 	str.w	r5, [r3, #6]
 8012d18:	f8c3 000a 	str.w	r0, [r3, #10]
 8012d1c:	7b13      	ldrb	r3, [r2, #12]
 8012d1e:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012d20:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012d22:	230d      	movs	r3, #13
 8012d24:	f7fe bb2e 	b.w	8011384 <mouseDriver_sendMsg+0x9fc>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012d28:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012d2c:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012d2e:	0a09      	lsrs	r1, r1, #8
 8012d30:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012d32:	1c99      	adds	r1, r3, #2
 8012d34:	aa80      	add	r2, sp, #512	; 0x200
 8012d36:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012d3a:	6855      	ldr	r5, [r2, #4]
 8012d3c:	6890      	ldr	r0, [r2, #8]
 8012d3e:	f8c3 6002 	str.w	r6, [r3, #2]
 8012d42:	f8c3 5006 	str.w	r5, [r3, #6]
 8012d46:	f8c3 000a 	str.w	r0, [r3, #10]
 8012d4a:	7b13      	ldrb	r3, [r2, #12]
 8012d4c:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012d4e:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012d50:	230d      	movs	r3, #13
 8012d52:	f7fe bd13 	b.w	801177c <mouseDriver_sendMsg+0xdf4>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012d56:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012d5a:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012d5c:	0a09      	lsrs	r1, r1, #8
 8012d5e:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012d60:	1c99      	adds	r1, r3, #2
 8012d62:	aa80      	add	r2, sp, #512	; 0x200
 8012d64:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012d68:	6855      	ldr	r5, [r2, #4]
 8012d6a:	6890      	ldr	r0, [r2, #8]
 8012d6c:	f8c3 6002 	str.w	r6, [r3, #2]
 8012d70:	f8c3 5006 	str.w	r5, [r3, #6]
 8012d74:	f8c3 000a 	str.w	r0, [r3, #10]
 8012d78:	7b13      	ldrb	r3, [r2, #12]
 8012d7a:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012d7c:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012d7e:	230d      	movs	r3, #13
 8012d80:	f7fe bee5 	b.w	8011b4e <mouseDriver_sendMsg+0x11c6>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012d84:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012d88:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012d8a:	0a09      	lsrs	r1, r1, #8
 8012d8c:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012d8e:	1c99      	adds	r1, r3, #2
 8012d90:	aa80      	add	r2, sp, #512	; 0x200
 8012d92:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012d96:	6855      	ldr	r5, [r2, #4]
 8012d98:	6890      	ldr	r0, [r2, #8]
 8012d9a:	f8c3 6002 	str.w	r6, [r3, #2]
 8012d9e:	f8c3 5006 	str.w	r5, [r3, #6]
 8012da2:	f8c3 000a 	str.w	r0, [r3, #10]
 8012da6:	7b13      	ldrb	r3, [r2, #12]
 8012da8:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012daa:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012dac:	230d      	movs	r3, #13
 8012dae:	f7ff b8b1 	b.w	8011f14 <mouseDriver_sendMsg+0x158c>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012db2:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012db6:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012db8:	0a09      	lsrs	r1, r1, #8
 8012dba:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012dbc:	1c99      	adds	r1, r3, #2
 8012dbe:	aa80      	add	r2, sp, #512	; 0x200
 8012dc0:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012dc4:	6855      	ldr	r5, [r2, #4]
 8012dc6:	6890      	ldr	r0, [r2, #8]
 8012dc8:	f8c3 6002 	str.w	r6, [r3, #2]
 8012dcc:	f8c3 5006 	str.w	r5, [r3, #6]
 8012dd0:	f8c3 000a 	str.w	r0, [r3, #10]
 8012dd4:	7b13      	ldrb	r3, [r2, #12]
 8012dd6:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012dd8:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012dda:	230d      	movs	r3, #13
 8012ddc:	f7ff ba8a 	b.w	80122f4 <mouseDriver_sendMsg+0x196c>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012de0:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012de4:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012de6:	0a09      	lsrs	r1, r1, #8
 8012de8:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012dea:	1c99      	adds	r1, r3, #2
 8012dec:	aa80      	add	r2, sp, #512	; 0x200
 8012dee:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012df2:	6855      	ldr	r5, [r2, #4]
 8012df4:	6890      	ldr	r0, [r2, #8]
 8012df6:	f8c3 6002 	str.w	r6, [r3, #2]
 8012dfa:	f8c3 5006 	str.w	r5, [r3, #6]
 8012dfe:	f8c3 000a 	str.w	r0, [r3, #10]
 8012e02:	7b13      	ldrb	r3, [r2, #12]
 8012e04:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012e06:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012e08:	230d      	movs	r3, #13
 8012e0a:	e475      	b.n	80126f8 <mouseDriver_sendMsg+0x1d70>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012e0c:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012e10:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012e12:	0a09      	lsrs	r1, r1, #8
 8012e14:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012e16:	1c99      	adds	r1, r3, #2
 8012e18:	aa80      	add	r2, sp, #512	; 0x200
 8012e1a:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012e1e:	6855      	ldr	r5, [r2, #4]
 8012e20:	6890      	ldr	r0, [r2, #8]
 8012e22:	f8c3 6002 	str.w	r6, [r3, #2]
 8012e26:	f8c3 5006 	str.w	r5, [r3, #6]
 8012e2a:	f8c3 000a 	str.w	r0, [r3, #10]
 8012e2e:	7b13      	ldrb	r3, [r2, #12]
 8012e30:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012e32:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012e34:	230d      	movs	r3, #13
 8012e36:	e65e      	b.n	8012af6 <mouseDriver_sendMsg+0x216e>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012e38:	2308      	movs	r3, #8
 8012e3a:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012e3e:	2200      	movs	r2, #0
 8012e40:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012e44:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012e48:	2001      	movs	r0, #1
 8012e4a:	f7fd bfda 	b.w	8010e02 <mouseDriver_sendMsg+0x47a>
		msg->magic = MAVLINK_STX;
 8012e4e:	23fd      	movs	r3, #253	; 0xfd
 8012e50:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012e54:	f89d 30ef 	ldrb.w	r3, [sp, #239]	; 0xef
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d1ed      	bne.n	8012e38 <mouseDriver_sendMsg+0x24b0>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012e5c:	2001      	movs	r0, #1
 8012e5e:	f7fd bfbc 	b.w	8010dda <mouseDriver_sendMsg+0x452>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012e62:	230c      	movs	r3, #12
 8012e64:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012e68:	2200      	movs	r2, #0
 8012e6a:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012e6e:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012e72:	2001      	movs	r0, #1
 8012e74:	f7fe b9bf 	b.w	80111f6 <mouseDriver_sendMsg+0x86e>
		msg->magic = MAVLINK_STX;
 8012e78:	23fd      	movs	r3, #253	; 0xfd
 8012e7a:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012e7e:	f89d 30f3 	ldrb.w	r3, [sp, #243]	; 0xf3
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d1ed      	bne.n	8012e62 <mouseDriver_sendMsg+0x24da>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012e86:	2001      	movs	r0, #1
 8012e88:	f7fe b9a1 	b.w	80111ce <mouseDriver_sendMsg+0x846>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012e8c:	2311      	movs	r3, #17
 8012e8e:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012e92:	2200      	movs	r2, #0
 8012e94:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012e98:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012e9c:	2001      	movs	r0, #1
 8012e9e:	f7fe bb91 	b.w	80115c4 <mouseDriver_sendMsg+0xc3c>
 8012ea2:	bf00      	nop
 8012ea4:	20000a00 	.word	0x20000a00
 8012ea8:	6a09e667 	.word	0x6a09e667
 8012eac:	bb67ae85 	.word	0xbb67ae85
 8012eb0:	3c6ef372 	.word	0x3c6ef372
 8012eb4:	a54ff53a 	.word	0xa54ff53a
 8012eb8:	510e527f 	.word	0x510e527f
 8012ebc:	9b05688c 	.word	0x9b05688c
 8012ec0:	1f83d9ab 	.word	0x1f83d9ab
 8012ec4:	20000a60 	.word	0x20000a60
		msg->magic = MAVLINK_STX;
 8012ec8:	23fd      	movs	r3, #253	; 0xfd
 8012eca:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012ece:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d1da      	bne.n	8012e8c <mouseDriver_sendMsg+0x2504>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012ed6:	2001      	movs	r0, #1
 8012ed8:	f7fe bb61 	b.w	801159e <mouseDriver_sendMsg+0xc16>
		msg->magic = MAVLINK_STX;
 8012edc:	23fd      	movs	r3, #253	; 0xfd
 8012ede:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012ee2:	f89d 30e9 	ldrb.w	r3, [sp, #233]	; 0xe9
 8012ee6:	b953      	cbnz	r3, 8012efe <mouseDriver_sendMsg+0x2576>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012ee8:	2001      	movs	r0, #1
 8012eea:	f88d 00df 	strb.w	r0, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012ef4:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
		length--;
 8012ef8:	4602      	mov	r2, r0
 8012efa:	f7fe bf30 	b.w	8011d5e <mouseDriver_sendMsg+0x13d6>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012efe:	2001      	movs	r0, #1
 8012f00:	f7ff b812 	b.w	8011f28 <mouseDriver_sendMsg+0x15a0>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012f04:	230e      	movs	r3, #14
 8012f06:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012f10:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f14:	2001      	movs	r0, #1
 8012f16:	f7ff b926 	b.w	8012166 <mouseDriver_sendMsg+0x17de>
		msg->magic = MAVLINK_STX;
 8012f1a:	23fd      	movs	r3, #253	; 0xfd
 8012f1c:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012f20:	f89d 30f5 	ldrb.w	r3, [sp, #245]	; 0xf5
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d1ed      	bne.n	8012f04 <mouseDriver_sendMsg+0x257c>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f28:	2001      	movs	r0, #1
 8012f2a:	f7ff b908 	b.w	801213e <mouseDriver_sendMsg+0x17b6>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012f2e:	230d      	movs	r3, #13
 8012f30:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012f34:	2200      	movs	r2, #0
 8012f36:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012f3a:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f3e:	2001      	movs	r0, #1
 8012f40:	f7ff baff 	b.w	8012542 <mouseDriver_sendMsg+0x1bba>
		msg->magic = MAVLINK_STX;
 8012f44:	23fd      	movs	r3, #253	; 0xfd
 8012f46:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012f4a:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d1ed      	bne.n	8012f2e <mouseDriver_sendMsg+0x25a6>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f52:	2001      	movs	r0, #1
 8012f54:	f7ff bae2 	b.w	801251c <mouseDriver_sendMsg+0x1b94>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012f58:	230d      	movs	r3, #13
 8012f5a:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012f5e:	2200      	movs	r2, #0
 8012f60:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012f64:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f68:	2001      	movs	r0, #1
 8012f6a:	e4fd      	b.n	8012968 <mouseDriver_sendMsg+0x1fe0>
		msg->magic = MAVLINK_STX;
 8012f6c:	23fd      	movs	r3, #253	; 0xfd
 8012f6e:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012f72:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d1ee      	bne.n	8012f58 <mouseDriver_sendMsg+0x25d0>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f7a:	2001      	movs	r0, #1
 8012f7c:	e4e1      	b.n	8012942 <mouseDriver_sendMsg+0x1fba>
 8012f7e:	bf00      	nop

08012f80 <mouseDriver_setMode>:
void mouseDriver_setMode(uint8_t mode){
 8012f80:	b538      	push	{r3, r4, r5, lr}
    if (mode == MOUSE_MODE_STOP){
 8012f82:	4604      	mov	r4, r0
 8012f84:	b1c0      	cbz	r0, 8012fb8 <mouseDriver_setMode+0x38>
    if (mode == MOUSE_MODE_AUTO_LOAD){
 8012f86:	2802      	cmp	r0, #2
 8012f88:	d025      	beq.n	8012fd6 <mouseDriver_setMode+0x56>
    if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 8012f8a:	4b18      	ldr	r3, [pc, #96]	; (8012fec <mouseDriver_setMode+0x6c>)
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	2b02      	cmp	r3, #2
 8012f90:	d11c      	bne.n	8012fcc <mouseDriver_setMode+0x4c>
 8012f92:	2803      	cmp	r0, #3
 8012f94:	d11c      	bne.n	8012fd0 <mouseDriver_setMode+0x50>
        actual_point = 0;
 8012f96:	4b16      	ldr	r3, [pc, #88]	; (8012ff0 <mouseDriver_setMode+0x70>)
 8012f98:	2200      	movs	r2, #0
 8012f9a:	701a      	strb	r2, [r3, #0]
	return (HAL_GetTick());
 8012f9c:	f7ef f87a 	bl	8002094 <HAL_GetTick>
        actual_point_start_time = mouseDriver_getTime();
 8012fa0:	4b14      	ldr	r3, [pc, #80]	; (8012ff4 <mouseDriver_setMode+0x74>)
 8012fa2:	6018      	str	r0, [r3, #0]
        actual_speed_setpoint.setpoint_x = points[0].setpoint_x;
 8012fa4:	4b14      	ldr	r3, [pc, #80]	; (8012ff8 <mouseDriver_setMode+0x78>)
 8012fa6:	4a15      	ldr	r2, [pc, #84]	; (8012ffc <mouseDriver_setMode+0x7c>)
 8012fa8:	6851      	ldr	r1, [r2, #4]
 8012faa:	6019      	str	r1, [r3, #0]
        actual_speed_setpoint.setpoint_y = points[0].setpoint_y;
 8012fac:	6892      	ldr	r2, [r2, #8]
 8012fae:	605a      	str	r2, [r3, #4]
        actual_mode = mode;
 8012fb0:	4b0e      	ldr	r3, [pc, #56]	; (8012fec <mouseDriver_setMode+0x6c>)
 8012fb2:	2203      	movs	r2, #3
 8012fb4:	701a      	strb	r2, [r3, #0]
 8012fb6:	e00d      	b.n	8012fd4 <mouseDriver_setMode+0x54>
        main_stop_motors();
 8012fb8:	f7ed fb9c 	bl	80006f4 <main_stop_motors>
        actual_point = 0;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	4a0c      	ldr	r2, [pc, #48]	; (8012ff0 <mouseDriver_setMode+0x70>)
 8012fc0:	7013      	strb	r3, [r2, #0]
        actual_mode = MOUSE_MODE_STOP;
 8012fc2:	4d0a      	ldr	r5, [pc, #40]	; (8012fec <mouseDriver_setMode+0x6c>)
 8012fc4:	702b      	strb	r3, [r5, #0]
        mouseDriver_initMotorSignal();
 8012fc6:	f7fd fcbb 	bl	8010940 <mouseDriver_initMotorSignal>
    if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 8012fca:	782b      	ldrb	r3, [r5, #0]
    if (actual_mode != MOUSE_MODE_AUTO_RUN)
 8012fcc:	2b03      	cmp	r3, #3
 8012fce:	d001      	beq.n	8012fd4 <mouseDriver_setMode+0x54>
        actual_mode = mode;
 8012fd0:	4b06      	ldr	r3, [pc, #24]	; (8012fec <mouseDriver_setMode+0x6c>)
 8012fd2:	701c      	strb	r4, [r3, #0]
}
 8012fd4:	bd38      	pop	{r3, r4, r5, pc}
        actual_mode = mode;
 8012fd6:	4d05      	ldr	r5, [pc, #20]	; (8012fec <mouseDriver_setMode+0x6c>)
 8012fd8:	2302      	movs	r3, #2
 8012fda:	702b      	strb	r3, [r5, #0]
        mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 8012fdc:	2000      	movs	r0, #0
 8012fde:	f7fd fcd3 	bl	8010988 <mouseDriver_sendMsg>
    if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 8012fe2:	782b      	ldrb	r3, [r5, #0]
 8012fe4:	2b02      	cmp	r3, #2
 8012fe6:	d0f3      	beq.n	8012fd0 <mouseDriver_setMode+0x50>
 8012fe8:	e7f0      	b.n	8012fcc <mouseDriver_setMode+0x4c>
 8012fea:	bf00      	nop
 8012fec:	200009a5 	.word	0x200009a5
 8012ff0:	200009b4 	.word	0x200009b4
 8012ff4:	200009b8 	.word	0x200009b8
 8012ff8:	200009ec 	.word	0x200009ec
 8012ffc:	20000c54 	.word	0x20000c54

08013000 <mouseDriver_control_idle>:
void mouseDriver_control_idle(void){
 8013000:	b510      	push	{r4, lr}
 8013002:	ed2d 8b02 	vpush	{d8}
	if (actual_speed_measure.valid == 0){
 8013006:	4b4b      	ldr	r3, [pc, #300]	; (8013134 <mouseDriver_control_idle+0x134>)
 8013008:	7c1b      	ldrb	r3, [r3, #16]
 801300a:	b99b      	cbnz	r3, 8013034 <mouseDriver_control_idle+0x34>
		count ++;
 801300c:	4a4a      	ldr	r2, [pc, #296]	; (8013138 <mouseDriver_control_idle+0x138>)
 801300e:	6813      	ldr	r3, [r2, #0]
 8013010:	3301      	adds	r3, #1
 8013012:	6013      	str	r3, [r2, #0]
		if(count >= MAX_MISSING_MEASURES){
 8013014:	2b0e      	cmp	r3, #14
 8013016:	dc02      	bgt.n	801301e <mouseDriver_control_idle+0x1e>
}
 8013018:	ecbd 8b02 	vpop	{d8}
 801301c:	bd10      	pop	{r4, pc}
			main_stop_motors();
 801301e:	f7ed fb69 	bl	80006f4 <main_stop_motors>
			mouseDriver_setMode(MOUSE_MODE_STOP);
 8013022:	2000      	movs	r0, #0
 8013024:	f7ff ffac 	bl	8012f80 <mouseDriver_setMode>
            integral_x = 0;
 8013028:	2300      	movs	r3, #0
 801302a:	4a44      	ldr	r2, [pc, #272]	; (801313c <mouseDriver_control_idle+0x13c>)
 801302c:	6013      	str	r3, [r2, #0]
            integral_y = 0;
 801302e:	4a44      	ldr	r2, [pc, #272]	; (8013140 <mouseDriver_control_idle+0x140>)
 8013030:	6013      	str	r3, [r2, #0]
 8013032:	e7f1      	b.n	8013018 <mouseDriver_control_idle+0x18>
	if (actual_mode == MOUSE_MODE_SPEED || actual_mode == MOUSE_MODE_AUTO_RUN){
 8013034:	4b43      	ldr	r3, [pc, #268]	; (8013144 <mouseDriver_control_idle+0x144>)
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801303c:	2b01      	cmp	r3, #1
 801303e:	d00a      	beq.n	8013056 <mouseDriver_control_idle+0x56>
		actual_motor_signal.motor_x = 0;
 8013040:	4b41      	ldr	r3, [pc, #260]	; (8013148 <mouseDriver_control_idle+0x148>)
 8013042:	2400      	movs	r4, #0
 8013044:	605c      	str	r4, [r3, #4]
		actual_motor_signal.motor_y = 0;
 8013046:	609c      	str	r4, [r3, #8]
		main_stop_motors();
 8013048:	f7ed fb54 	bl	80006f4 <main_stop_motors>
        integral_x = 0;
 801304c:	4b3b      	ldr	r3, [pc, #236]	; (801313c <mouseDriver_control_idle+0x13c>)
 801304e:	601c      	str	r4, [r3, #0]
        integral_y = 0;
 8013050:	4b3b      	ldr	r3, [pc, #236]	; (8013140 <mouseDriver_control_idle+0x140>)
 8013052:	601c      	str	r4, [r3, #0]
 8013054:	e7e0      	b.n	8013018 <mouseDriver_control_idle+0x18>
	return (HAL_GetTick());
 8013056:	f7ef f81d 	bl	8002094 <HAL_GetTick>
		actual_motor_signal.time = mouseDriver_getTime();
 801305a:	4b3b      	ldr	r3, [pc, #236]	; (8013148 <mouseDriver_control_idle+0x148>)
 801305c:	6018      	str	r0, [r3, #0]
        error_x = actual_speed_setpoint.setpoint_x-actual_speed_measure.speed_x;
 801305e:	493b      	ldr	r1, [pc, #236]	; (801314c <mouseDriver_control_idle+0x14c>)
 8013060:	4a34      	ldr	r2, [pc, #208]	; (8013134 <mouseDriver_control_idle+0x134>)
 8013062:	edd1 8a00 	vldr	s17, [r1]
 8013066:	edd2 7a02 	vldr	s15, [r2, #8]
 801306a:	ee78 8ae7 	vsub.f32	s17, s17, s15
        error_y = actual_speed_setpoint.setpoint_y-actual_speed_measure.speed_y;
 801306e:	ed91 8a01 	vldr	s16, [r1, #4]
 8013072:	edd2 7a03 	vldr	s15, [r2, #12]
 8013076:	ee38 8a67 	vsub.f32	s16, s16, s15
		actual_motor_signal.motor_x = (float)K*(error_x)+(float)I*integral_x;
 801307a:	4a30      	ldr	r2, [pc, #192]	; (801313c <mouseDriver_control_idle+0x13c>)
 801307c:	ed92 7a00 	vldr	s14, [r2]
 8013080:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8013084:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013088:	ee68 7aa6 	vmul.f32	s15, s17, s13
 801308c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013090:	ed83 7a01 	vstr	s14, [r3, #4]
		actual_motor_signal.motor_y = (float)K*(error_y)+(float)I*integral_y;
 8013094:	4a2a      	ldr	r2, [pc, #168]	; (8013140 <mouseDriver_control_idle+0x140>)
 8013096:	edd2 7a00 	vldr	s15, [r2]
 801309a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801309e:	ee68 6a26 	vmul.f32	s13, s16, s13
 80130a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130a6:	edc3 7a02 	vstr	s15, [r3, #8]
		if (actual_motor_signal.motor_x > MAX_MOTOR_SIGNAL){
 80130aa:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013150 <mouseDriver_control_idle+0x150>
 80130ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80130b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		    actual_motor_signal.motor_x = MAX_MOTOR_SIGNAL;
 80130b6:	bfc4      	itt	gt
 80130b8:	ee16 2a90 	vmovgt	r2, s13
 80130bc:	605a      	strgt	r2, [r3, #4]
		if(actual_motor_signal.motor_y  > MAX_MOTOR_SIGNAL){
 80130be:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8013150 <mouseDriver_control_idle+0x150>
 80130c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80130c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ca:	dd02      	ble.n	80130d2 <mouseDriver_control_idle+0xd2>
            actual_motor_signal.motor_y = MAX_MOTOR_SIGNAL;
 80130cc:	4b1e      	ldr	r3, [pc, #120]	; (8013148 <mouseDriver_control_idle+0x148>)
 80130ce:	ed83 7a02 	vstr	s14, [r3, #8]
		main_set_motors_speed(actual_motor_signal);
 80130d2:	4c1d      	ldr	r4, [pc, #116]	; (8013148 <mouseDriver_control_idle+0x148>)
 80130d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80130d8:	f7ed fb1a 	bl	8000710 <main_set_motors_speed>
        integral_x += (actual_motor_signal.motor_x < MAX_MOTOR_SIGNAL)? error_x : 0;
 80130dc:	ed94 7a01 	vldr	s14, [r4, #4]
 80130e0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8013150 <mouseDriver_control_idle+0x150>
 80130e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80130e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ec:	eddf 7a19 	vldr	s15, [pc, #100]	; 8013154 <mouseDriver_control_idle+0x154>
 80130f0:	bf58      	it	pl
 80130f2:	eef0 8a67 	vmovpl.f32	s17, s15
 80130f6:	4b11      	ldr	r3, [pc, #68]	; (801313c <mouseDriver_control_idle+0x13c>)
 80130f8:	edd3 7a00 	vldr	s15, [r3]
 80130fc:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8013100:	edc3 8a00 	vstr	s17, [r3]
        integral_y += (actual_motor_signal.motor_y < MAX_MOTOR_SIGNAL)? error_y : 0;
 8013104:	ed94 7a02 	vldr	s14, [r4, #8]
 8013108:	eddf 7a11 	vldr	s15, [pc, #68]	; 8013150 <mouseDriver_control_idle+0x150>
 801310c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013114:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013154 <mouseDriver_control_idle+0x154>
 8013118:	bf58      	it	pl
 801311a:	eeb0 8a67 	vmovpl.f32	s16, s15
 801311e:	4b08      	ldr	r3, [pc, #32]	; (8013140 <mouseDriver_control_idle+0x140>)
 8013120:	edd3 7a00 	vldr	s15, [r3]
 8013124:	ee37 8a88 	vadd.f32	s16, s15, s16
 8013128:	ed83 8a00 	vstr	s16, [r3]
		count = 0;
 801312c:	4b02      	ldr	r3, [pc, #8]	; (8013138 <mouseDriver_control_idle+0x138>)
 801312e:	2200      	movs	r2, #0
 8013130:	601a      	str	r2, [r3, #0]
 8013132:	e771      	b.n	8013018 <mouseDriver_control_idle+0x18>
 8013134:	200009d8 	.word	0x200009d8
 8013138:	200009f4 	.word	0x200009f4
 801313c:	200009f8 	.word	0x200009f8
 8013140:	200009fc 	.word	0x200009fc
 8013144:	200009a5 	.word	0x200009a5
 8013148:	200009a8 	.word	0x200009a8
 801314c:	200009ec 	.word	0x200009ec
 8013150:	437f0000 	.word	0x437f0000
 8013154:	00000000 	.word	0x00000000

08013158 <mouseDriver_idle>:
void mouseDriver_idle (void){
 8013158:	b510      	push	{r4, lr}
    uint64_t difference = 0;
    sensorDriver_motion_read_speed(actual_raw_sensor, &actual_speed_measure);
 801315a:	4947      	ldr	r1, [pc, #284]	; (8013278 <mouseDriver_idle+0x120>)
 801315c:	4847      	ldr	r0, [pc, #284]	; (801327c <mouseDriver_idle+0x124>)
 801315e:	f000 fa37 	bl	80135d0 <sensorDriver_motion_read_speed>
    switch(actual_mode){
 8013162:	4b47      	ldr	r3, [pc, #284]	; (8013280 <mouseDriver_idle+0x128>)
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	2b03      	cmp	r3, #3
 8013168:	d812      	bhi.n	8013190 <mouseDriver_idle+0x38>
 801316a:	e8df f003 	tbb	[pc, r3]
 801316e:	1602      	.short	0x1602
 8013170:	2f1f      	.short	0x2f1f
    case MOUSE_MODE_STOP:
        mouseDriver_initSetpoint();
 8013172:	f7fd fbb5 	bl	80108e0 <mouseDriver_initSetpoint>
        mouseDriver_initMotorSignal();
 8013176:	f7fd fbe3 	bl	8010940 <mouseDriver_initMotorSignal>
	return (HAL_GetTick());
 801317a:	f7ee ff8b 	bl	8002094 <HAL_GetTick>
        actual_motor_signal.time = mouseDriver_getTime();
 801317e:	4b41      	ldr	r3, [pc, #260]	; (8013284 <mouseDriver_idle+0x12c>)
 8013180:	6018      	str	r0, [r3, #0]
        main_stop_motors();
 8013182:	f7ed fab7 	bl	80006f4 <main_stop_motors>
        mouseDriver_control_idle();
 8013186:	f7ff ff3b 	bl	8013000 <mouseDriver_control_idle>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 801318a:	2001      	movs	r0, #1
 801318c:	f7fd fbfc 	bl	8010988 <mouseDriver_sendMsg>
        mouseDriver_control_idle();
        break;
    default:
        break;
    }
    if (send_msg == 1){
 8013190:	4b3d      	ldr	r3, [pc, #244]	; (8013288 <mouseDriver_idle+0x130>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	2b01      	cmp	r3, #1
 8013196:	d05a      	beq.n	801324e <mouseDriver_idle+0xf6>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_RAW_SENSOR);
            mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
        }
    }

}
 8013198:	bd10      	pop	{r4, pc}
        mouseDriver_control_idle();
 801319a:	f7ff ff31 	bl	8013000 <mouseDriver_control_idle>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 801319e:	2001      	movs	r0, #1
 80131a0:	f7fd fbf2 	bl	8010988 <mouseDriver_sendMsg>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 80131a4:	2004      	movs	r0, #4
 80131a6:	f7fd fbef 	bl	8010988 <mouseDriver_sendMsg>
        break;
 80131aa:	e7f1      	b.n	8013190 <mouseDriver_idle+0x38>
        if (actual_point == 255){
 80131ac:	4b37      	ldr	r3, [pc, #220]	; (801328c <mouseDriver_idle+0x134>)
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	2bff      	cmp	r3, #255	; 0xff
 80131b2:	d1ed      	bne.n	8013190 <mouseDriver_idle+0x38>
            actual_error.error = MOUSE_ROUTINE_TOO_LONG;
 80131b4:	4c36      	ldr	r4, [pc, #216]	; (8013290 <mouseDriver_idle+0x138>)
 80131b6:	2303      	movs	r3, #3
 80131b8:	7123      	strb	r3, [r4, #4]
	return (HAL_GetTick());
 80131ba:	f7ee ff6b 	bl	8002094 <HAL_GetTick>
            actual_error.time = mouseDriver_getTime();
 80131be:	6020      	str	r0, [r4, #0]
            mouseDriver_control_idle();
 80131c0:	f7ff ff1e 	bl	8013000 <mouseDriver_control_idle>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 80131c4:	2007      	movs	r0, #7
 80131c6:	f7fd fbdf 	bl	8010988 <mouseDriver_sendMsg>
 80131ca:	e7e1      	b.n	8013190 <mouseDriver_idle+0x38>
	return (HAL_GetTick());
 80131cc:	f7ee ff62 	bl	8002094 <HAL_GetTick>
        if (difference >= points[actual_point].duration){
 80131d0:	4b2e      	ldr	r3, [pc, #184]	; (801328c <mouseDriver_idle+0x134>)
 80131d2:	781b      	ldrb	r3, [r3, #0]
        difference = mouseDriver_getTime()-actual_point_start_time;
 80131d4:	4a2f      	ldr	r2, [pc, #188]	; (8013294 <mouseDriver_idle+0x13c>)
 80131d6:	6812      	ldr	r2, [r2, #0]
 80131d8:	1a80      	subs	r0, r0, r2
        if (difference >= points[actual_point].duration){
 80131da:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80131de:	4a2e      	ldr	r2, [pc, #184]	; (8013298 <mouseDriver_idle+0x140>)
 80131e0:	f852 2011 	ldr.w	r2, [r2, r1, lsl #1]
 80131e4:	4290      	cmp	r0, r2
 80131e6:	d321      	bcc.n	801322c <mouseDriver_idle+0xd4>
            if (actual_point < MAX_POINTS-1){
 80131e8:	2bfd      	cmp	r3, #253	; 0xfd
 80131ea:	d81f      	bhi.n	801322c <mouseDriver_idle+0xd4>
                actual_point++;
 80131ec:	3301      	adds	r3, #1
 80131ee:	b2db      	uxtb	r3, r3
 80131f0:	4a26      	ldr	r2, [pc, #152]	; (801328c <mouseDriver_idle+0x134>)
 80131f2:	7013      	strb	r3, [r2, #0]
                if(points[actual_point].duration == 0){
 80131f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80131f8:	4a27      	ldr	r2, [pc, #156]	; (8013298 <mouseDriver_idle+0x140>)
 80131fa:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 80131fe:	b913      	cbnz	r3, 8013206 <mouseDriver_idle+0xae>
                    actual_point = 0;
 8013200:	4b22      	ldr	r3, [pc, #136]	; (801328c <mouseDriver_idle+0x134>)
 8013202:	2200      	movs	r2, #0
 8013204:	701a      	strb	r2, [r3, #0]
                actual_speed_setpoint.setpoint_x = points[actual_point].setpoint_x;
 8013206:	4b21      	ldr	r3, [pc, #132]	; (801328c <mouseDriver_idle+0x134>)
 8013208:	7819      	ldrb	r1, [r3, #0]
 801320a:	4c24      	ldr	r4, [pc, #144]	; (801329c <mouseDriver_idle+0x144>)
 801320c:	4b22      	ldr	r3, [pc, #136]	; (8013298 <mouseDriver_idle+0x140>)
 801320e:	00ca      	lsls	r2, r1, #3
 8013210:	1a50      	subs	r0, r2, r1
 8013212:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013216:	6840      	ldr	r0, [r0, #4]
 8013218:	6020      	str	r0, [r4, #0]
                actual_speed_setpoint.setpoint_y = points[actual_point].setpoint_y;
 801321a:	1a52      	subs	r2, r2, r1
 801321c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	6063      	str	r3, [r4, #4]
	return (HAL_GetTick());
 8013224:	f7ee ff36 	bl	8002094 <HAL_GetTick>
                actual_point_start_time = mouseDriver_getTime();
 8013228:	4b1a      	ldr	r3, [pc, #104]	; (8013294 <mouseDriver_idle+0x13c>)
 801322a:	6018      	str	r0, [r3, #0]
        if (actual_point == MAX_POINTS){
 801322c:	4b17      	ldr	r3, [pc, #92]	; (801328c <mouseDriver_idle+0x134>)
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	2bff      	cmp	r3, #255	; 0xff
 8013232:	d008      	beq.n	8013246 <mouseDriver_idle+0xee>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 8013234:	2001      	movs	r0, #1
 8013236:	f7fd fba7 	bl	8010988 <mouseDriver_sendMsg>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 801323a:	2004      	movs	r0, #4
 801323c:	f7fd fba4 	bl	8010988 <mouseDriver_sendMsg>
        mouseDriver_control_idle();
 8013240:	f7ff fede 	bl	8013000 <mouseDriver_control_idle>
        break;
 8013244:	e7a4      	b.n	8013190 <mouseDriver_idle+0x38>
            mouseDriver_setMode(MOUSE_MODE_AUTO_LOAD);
 8013246:	2002      	movs	r0, #2
 8013248:	f7ff fe9a 	bl	8012f80 <mouseDriver_setMode>
 801324c:	e7f2      	b.n	8013234 <mouseDriver_idle+0xdc>
        send_msg = 0;
 801324e:	4b0e      	ldr	r3, [pc, #56]	; (8013288 <mouseDriver_idle+0x130>)
 8013250:	2200      	movs	r2, #0
 8013252:	601a      	str	r2, [r3, #0]
        if(actual_mode != MOUSE_MODE_AUTO_LOAD){
 8013254:	4b0a      	ldr	r3, [pc, #40]	; (8013280 <mouseDriver_idle+0x128>)
 8013256:	781b      	ldrb	r3, [r3, #0]
 8013258:	2b02      	cmp	r3, #2
 801325a:	d09d      	beq.n	8013198 <mouseDriver_idle+0x40>
        	mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 801325c:	4610      	mov	r0, r2
 801325e:	f7fd fb93 	bl	8010988 <mouseDriver_sendMsg>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 8013262:	2002      	movs	r0, #2
 8013264:	f7fd fb90 	bl	8010988 <mouseDriver_sendMsg>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_RAW_SENSOR);
 8013268:	2008      	movs	r0, #8
 801326a:	f7fd fb8d 	bl	8010988 <mouseDriver_sendMsg>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 801326e:	2004      	movs	r0, #4
 8013270:	f7fd fb8a 	bl	8010988 <mouseDriver_sendMsg>
}
 8013274:	e790      	b.n	8013198 <mouseDriver_idle+0x40>
 8013276:	bf00      	nop
 8013278:	200009d8 	.word	0x200009d8
 801327c:	200009bc 	.word	0x200009bc
 8013280:	200009a5 	.word	0x200009a5
 8013284:	200009a8 	.word	0x200009a8
 8013288:	20000034 	.word	0x20000034
 801328c:	200009b4 	.word	0x200009b4
 8013290:	200009a0 	.word	0x200009a0
 8013294:	200009b8 	.word	0x200009b8
 8013298:	20000c54 	.word	0x20000c54
 801329c:	200009ec 	.word	0x200009ec

080132a0 <mouseDriver_readMsg>:
void mouseDriver_readMsg(const mavlink_message_t msg){
 80132a0:	b084      	sub	sp, #16
 80132a2:	b538      	push	{r3, r4, r5, lr}
 80132a4:	ac04      	add	r4, sp, #16
 80132a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    switch(msg.msgid){
 80132aa:	9b06      	ldr	r3, [sp, #24]
 80132ac:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80132b0:	3b02      	subs	r3, #2
 80132b2:	2b04      	cmp	r3, #4
 80132b4:	d808      	bhi.n	80132c8 <mouseDriver_readMsg+0x28>
 80132b6:	e8df f003 	tbb	[pc, r3]
 80132ba:	030b      	.short	0x030b
 80132bc:	071c      	.short	0x071c
 80132be:	2d          	.byte	0x2d
 80132bf:	00          	.byte	0x00

    case MAVLINK_MSG_ID_MODE_SELECTION:
        mouseDriver_setMode( mavlink_msg_mode_selection_get_mode(&msg));
 80132c0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80132c4:	f7ff fe5c 	bl	8012f80 <mouseDriver_setMode>
        }
        break;
    default:
        break;
    };
}
 80132c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132cc:	b004      	add	sp, #16
 80132ce:	4770      	bx	lr
        if (actual_mode == MOUSE_MODE_SPEED)
 80132d0:	4b26      	ldr	r3, [pc, #152]	; (801336c <mouseDriver_readMsg+0xcc>)
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	2b01      	cmp	r3, #1
 80132d6:	d1f7      	bne.n	80132c8 <mouseDriver_readMsg+0x28>
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    speed_setpoint->setpoint_x = mavlink_msg_speed_setpoint_get_setpoint_x(msg);
    speed_setpoint->setpoint_y = mavlink_msg_speed_setpoint_get_setpoint_y(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 80132d8:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 80132dc:	4824      	ldr	r0, [pc, #144]	; (8013370 <mouseDriver_readMsg+0xd0>)
 80132de:	2300      	movs	r3, #0
 80132e0:	6003      	str	r3, [r0, #0]
 80132e2:	6043      	str	r3, [r0, #4]
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 80132e4:	2a08      	cmp	r2, #8
 80132e6:	bf28      	it	cs
 80132e8:	2208      	movcs	r2, #8
 80132ea:	a907      	add	r1, sp, #28
 80132ec:	f7ec ffb0 	bl	8000250 <memcpy>
 80132f0:	e7ea      	b.n	80132c8 <mouseDriver_readMsg+0x28>
        if (actual_mode == MOUSE_MODE_SPEED)
 80132f2:	4b1e      	ldr	r3, [pc, #120]	; (801336c <mouseDriver_readMsg+0xcc>)
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d1e6      	bne.n	80132c8 <mouseDriver_readMsg+0x28>
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 80132fa:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 80132fe:	481c      	ldr	r0, [pc, #112]	; (8013370 <mouseDriver_readMsg+0xd0>)
 8013300:	2300      	movs	r3, #0
 8013302:	6003      	str	r3, [r0, #0]
 8013304:	6043      	str	r3, [r0, #4]
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 8013306:	2a08      	cmp	r2, #8
 8013308:	bf28      	it	cs
 801330a:	2208      	movcs	r2, #8
 801330c:	a907      	add	r1, sp, #28
 801330e:	f7ec ff9f 	bl	8000250 <memcpy>
 8013312:	e7d9      	b.n	80132c8 <mouseDriver_readMsg+0x28>
        if(actual_mode == MOUSE_MODE_AUTO_LOAD){
 8013314:	4b15      	ldr	r3, [pc, #84]	; (801336c <mouseDriver_readMsg+0xcc>)
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	2b02      	cmp	r3, #2
 801331a:	d1d5      	bne.n	80132c8 <mouseDriver_readMsg+0x28>
            mavlink_msg_point_decode(&msg, &points[actual_point]);
 801331c:	4b15      	ldr	r3, [pc, #84]	; (8013374 <mouseDriver_readMsg+0xd4>)
 801331e:	781c      	ldrb	r4, [r3, #0]
 8013320:	4d15      	ldr	r5, [pc, #84]	; (8013378 <mouseDriver_readMsg+0xd8>)
 8013322:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8013326:	0049      	lsls	r1, r1, #1
 8013328:	1868      	adds	r0, r5, r1
    point->duration = mavlink_msg_point_get_duration(msg);
    point->setpoint_x = mavlink_msg_point_get_setpoint_x(msg);
    point->setpoint_y = mavlink_msg_point_get_setpoint_y(msg);
    point->point_id = mavlink_msg_point_get_point_id(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POINT_LEN? msg->len : MAVLINK_MSG_ID_POINT_LEN;
 801332a:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(point, 0, MAVLINK_MSG_ID_POINT_LEN);
 801332e:	2300      	movs	r3, #0
 8013330:	506b      	str	r3, [r5, r1]
 8013332:	6043      	str	r3, [r0, #4]
 8013334:	6083      	str	r3, [r0, #8]
 8013336:	8183      	strh	r3, [r0, #12]
    memcpy(point, _MAV_PAYLOAD(msg), len);
 8013338:	2a0e      	cmp	r2, #14
 801333a:	bf28      	it	cs
 801333c:	220e      	movcs	r2, #14
 801333e:	a907      	add	r1, sp, #28
 8013340:	f7ec ff86 	bl	8000250 <memcpy>
            if (actual_point == 255){
 8013344:	2cff      	cmp	r4, #255	; 0xff
 8013346:	d007      	beq.n	8013358 <mouseDriver_readMsg+0xb8>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_POINT_LOADED);
 8013348:	2005      	movs	r0, #5
 801334a:	f7fd fb1d 	bl	8010988 <mouseDriver_sendMsg>
            actual_point ++;
 801334e:	4a09      	ldr	r2, [pc, #36]	; (8013374 <mouseDriver_readMsg+0xd4>)
 8013350:	7813      	ldrb	r3, [r2, #0]
 8013352:	3301      	adds	r3, #1
 8013354:	7013      	strb	r3, [r2, #0]
}
 8013356:	e7b7      	b.n	80132c8 <mouseDriver_readMsg+0x28>
                actual_error.error = MOUSE_ROUTINE_TOO_LONG;
 8013358:	4c08      	ldr	r4, [pc, #32]	; (801337c <mouseDriver_readMsg+0xdc>)
 801335a:	2303      	movs	r3, #3
 801335c:	7123      	strb	r3, [r4, #4]
	return (HAL_GetTick());
 801335e:	f7ee fe99 	bl	8002094 <HAL_GetTick>
                actual_error.time = mouseDriver_getTime();
 8013362:	6020      	str	r0, [r4, #0]
                mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 8013364:	2007      	movs	r0, #7
 8013366:	f7fd fb0f 	bl	8010988 <mouseDriver_sendMsg>
 801336a:	e7ed      	b.n	8013348 <mouseDriver_readMsg+0xa8>
 801336c:	200009a5 	.word	0x200009a5
 8013370:	200009ec 	.word	0x200009ec
 8013374:	200009b4 	.word	0x200009b4
 8013378:	20000c54 	.word	0x20000c54
 801337c:	200009a0 	.word	0x200009a0

08013380 <sensorDriver_powerup>:
 \param sensor_data pointer to a structure for storing the raw sensor value
 \brief This function reads raw data from the sensor given its ID and puts the result in the pointer.
 */
void sensorDriver_motion_read_raw(uint8_t sensor_id, mavlink_raw_sensor_t * sensor_data);

void sensorDriver_powerup(sensor_t * sensor){
 8013380:	b570      	push	{r4, r5, r6, lr}
 8013382:	b082      	sub	sp, #8
 8013384:	4606      	mov	r6, r0
	/* Disable the sensor */
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8013386:	2201      	movs	r2, #1
 8013388:	7901      	ldrb	r1, [r0, #4]
 801338a:	6800      	ldr	r0, [r0, #0]
 801338c:	f7f0 fc4a 	bl	8003c24 <HAL_GPIO_WritePin>

	/* Make sure all sensor is switched off */
	HAL_GPIO_WritePin(sensor->pw_port, sensor->pw_pin, GPIO_PIN_RESET);
 8013390:	2200      	movs	r2, #0
 8013392:	7b31      	ldrb	r1, [r6, #12]
 8013394:	68b0      	ldr	r0, [r6, #8]
 8013396:	f7f0 fc45 	bl	8003c24 <HAL_GPIO_WritePin>
	main_write_sensor(*sensor, 0x00, 0x00);
 801339a:	2400      	movs	r4, #0
 801339c:	9401      	str	r4, [sp, #4]
 801339e:	9400      	str	r4, [sp, #0]
 80133a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80133a4:	f7ed fa22 	bl	80007ec <main_write_sensor>
	HAL_Delay(100);
 80133a8:	2064      	movs	r0, #100	; 0x64
 80133aa:	f7ee fe9d 	bl	80020e8 <HAL_Delay>

	/* Gives voltage to sensors */
	HAL_GPIO_WritePin(sensor->pw_port, sensor->pw_pin , GPIO_PIN_SET);
 80133ae:	2201      	movs	r2, #1
 80133b0:	7b31      	ldrb	r1, [r6, #12]
 80133b2:	68b0      	ldr	r0, [r6, #8]
 80133b4:	f7f0 fc36 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80133b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80133bc:	f7ee fe94 	bl	80020e8 <HAL_Delay>

	/* Reset SPI port */
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin,  GPIO_PIN_SET);
 80133c0:	2201      	movs	r2, #1
 80133c2:	7931      	ldrb	r1, [r6, #4]
 80133c4:	6830      	ldr	r0, [r6, #0]
 80133c6:	f7f0 fc2d 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80133ca:	2005      	movs	r0, #5
 80133cc:	f7ee fe8c 	bl	80020e8 <HAL_Delay>
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin,  GPIO_PIN_RESET);
 80133d0:	4622      	mov	r2, r4
 80133d2:	7931      	ldrb	r1, [r6, #4]
 80133d4:	6830      	ldr	r0, [r6, #0]
 80133d6:	f7f0 fc25 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80133da:	2005      	movs	r0, #5
 80133dc:	f7ee fe84 	bl	80020e8 <HAL_Delay>
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin,  GPIO_PIN_SET);
 80133e0:	2201      	movs	r2, #1
 80133e2:	7931      	ldrb	r1, [r6, #4]
 80133e4:	6830      	ldr	r0, [r6, #0]
 80133e6:	f7f0 fc1d 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80133ea:	2005      	movs	r0, #5
 80133ec:	f7ee fe7c 	bl	80020e8 <HAL_Delay>

	/* Write to Power_up_Reset register */
	main_write_sensor(*sensor, Power_Up_Reset, 0x5A);
 80133f0:	235a      	movs	r3, #90	; 0x5a
 80133f2:	9301      	str	r3, [sp, #4]
 80133f4:	233a      	movs	r3, #58	; 0x3a
 80133f6:	9300      	str	r3, [sp, #0]
 80133f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80133fc:	f7ed f9f6 	bl	80007ec <main_write_sensor>

	/* Wait at least 50 ms */
	HAL_Delay(50);
 8013400:	2032      	movs	r0, #50	; 0x32
 8013402:	f7ee fe71 	bl	80020e8 <HAL_Delay>

	/* Read from data registers */
	main_read_sensor(*sensor, 0x02);
 8013406:	2302      	movs	r3, #2
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801340e:	f7ed f9b7 	bl	8000780 <main_read_sensor>
	main_read_sensor(*sensor, 0x03);
 8013412:	2303      	movs	r3, #3
 8013414:	9300      	str	r3, [sp, #0]
 8013416:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801341a:	f7ed f9b1 	bl	8000780 <main_read_sensor>
	main_read_sensor(*sensor, 0x04);
 801341e:	2304      	movs	r3, #4
 8013420:	9300      	str	r3, [sp, #0]
 8013422:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8013426:	f7ed f9ab 	bl	8000780 <main_read_sensor>
	main_read_sensor(*sensor, 0x05);
 801342a:	2305      	movs	r3, #5
 801342c:	9300      	str	r3, [sp, #0]
 801342e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8013432:	f7ed f9a5 	bl	8000780 <main_read_sensor>
	main_read_sensor(*sensor, 0x06);
 8013436:	2306      	movs	r3, #6
 8013438:	9300      	str	r3, [sp, #0]
 801343a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801343e:	f7ed f99f 	bl	8000780 <main_read_sensor>

	/* Start ROM Download */
	main_write_sensor(*sensor, Config2, 0x20);
 8013442:	2320      	movs	r3, #32
 8013444:	9301      	str	r3, [sp, #4]
 8013446:	2310      	movs	r3, #16
 8013448:	9300      	str	r3, [sp, #0]
 801344a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801344e:	f7ed f9cd 	bl	80007ec <main_write_sensor>
	main_write_sensor(*sensor, SROM_Enable, 0x1d);
 8013452:	231d      	movs	r3, #29
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	2513      	movs	r5, #19
 8013458:	9500      	str	r5, [sp, #0]
 801345a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801345e:	f7ed f9c5 	bl	80007ec <main_write_sensor>
	HAL_Delay(10);
 8013462:	200a      	movs	r0, #10
 8013464:	f7ee fe40 	bl	80020e8 <HAL_Delay>
	main_write_sensor(*sensor,SROM_Enable, 0x18);
 8013468:	2318      	movs	r3, #24
 801346a:	9301      	str	r3, [sp, #4]
 801346c:	9500      	str	r5, [sp, #0]
 801346e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8013472:	f7ed f9bb 	bl	80007ec <main_write_sensor>
	main_wait_160us();
 8013476:	f7ed f905 	bl	8000684 <main_wait_160us>
	main_wait_20us();
 801347a:	f7ed f910 	bl	800069e <main_wait_20us>

	/* Burst start with adress */
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 801347e:	4622      	mov	r2, r4
 8013480:	7931      	ldrb	r1, [r6, #4]
 8013482:	6830      	ldr	r0, [r6, #0]
 8013484:	f7f0 fbce 	bl	8003c24 <HAL_GPIO_WritePin>
	main_write_sensor_burst(SROM_Load_Burst|0x80);
 8013488:	20e2      	movs	r0, #226	; 0xe2
 801348a:	f7ed f9db 	bl	8000844 <main_write_sensor_burst>
 801348e:	4d13      	ldr	r5, [pc, #76]	; (80134dc <sensorDriver_powerup+0x15c>)
 8013490:	1e6c      	subs	r4, r5, #1
 8013492:	f605 75fd 	addw	r5, r5, #4093	; 0xffd
	for (int i = 0; i < firmware_length; i++ ){
		main_write_sensor_burst(firmware_data[i]);
 8013496:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801349a:	f7ed f9d3 	bl	8000844 <main_write_sensor_burst>
	for (int i = 0; i < firmware_length; i++ ){
 801349e:	42ac      	cmp	r4, r5
 80134a0:	d1f9      	bne.n	8013496 <sensorDriver_powerup+0x116>
	}
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 80134a2:	2201      	movs	r2, #1
 80134a4:	7931      	ldrb	r1, [r6, #4]
 80134a6:	6830      	ldr	r0, [r6, #0]
 80134a8:	f7f0 fbbc 	bl	8003c24 <HAL_GPIO_WritePin>
	main_wait_160us();
 80134ac:	f7ed f8ea 	bl	8000684 <main_wait_160us>
	main_wait_20us();
 80134b0:	f7ed f8f5 	bl	800069e <main_wait_20us>
	main_wait_20us();
 80134b4:	f7ed f8f3 	bl	800069e <main_wait_20us>

	/* Read SROM_ID for verification */
	sensor->status = main_read_sensor(*sensor, SROM_ID);
 80134b8:	232a      	movs	r3, #42	; 0x2a
 80134ba:	9300      	str	r3, [sp, #0]
 80134bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80134c0:	f7ed f95e 	bl	8000780 <main_read_sensor>
 80134c4:	7370      	strb	r0, [r6, #13]

	/* Write to Config2 for wired mouse */
	main_write_sensor(*sensor, Config2, 0x00);
 80134c6:	2300      	movs	r3, #0
 80134c8:	9301      	str	r3, [sp, #4]
 80134ca:	2310      	movs	r3, #16
 80134cc:	9300      	str	r3, [sp, #0]
 80134ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80134d2:	f7ed f98b 	bl	80007ec <main_write_sensor>
}
 80134d6:	b002      	add	sp, #8
 80134d8:	bd70      	pop	{r4, r5, r6, pc}
 80134da:	bf00      	nop
 80134dc:	08013d70 	.word	0x08013d70

080134e0 <sensorDriver_init>:
void sensorDriver_init(void){
 80134e0:	b508      	push	{r3, lr}
	sensorDriver_powerup(&sensor_x);
 80134e2:	4803      	ldr	r0, [pc, #12]	; (80134f0 <sensorDriver_init+0x10>)
 80134e4:	f7ff ff4c 	bl	8013380 <sensorDriver_powerup>
	sensorDriver_powerup(&sensor_y);
 80134e8:	4802      	ldr	r0, [pc, #8]	; (80134f4 <sensorDriver_init+0x14>)
 80134ea:	f7ff ff49 	bl	8013380 <sensorDriver_powerup>
}
 80134ee:	bd08      	pop	{r3, pc}
 80134f0:	20000038 	.word	0x20000038
 80134f4:	20000048 	.word	0x20000048

080134f8 <sensorDriver_motion_read_raw>:
void sensorDriver_motion_read_raw(uint8_t sensor_id, mavlink_raw_sensor_t * sensor_data){
 80134f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134fc:	b08b      	sub	sp, #44	; 0x2c
 80134fe:	460c      	mov	r4, r1
	uint8_t data[12];
	int16_t temp = 0;
	sensor_t sensor;

	if (sensor_id == SENSOR_X) sensor = sensor_x;
 8013500:	4605      	mov	r5, r0
 8013502:	2800      	cmp	r0, #0
 8013504:	d153      	bne.n	80135ae <sensorDriver_motion_read_raw+0xb6>
 8013506:	4e30      	ldr	r6, [pc, #192]	; (80135c8 <sensorDriver_motion_read_raw+0xd0>)
 8013508:	af03      	add	r7, sp, #12
 801350a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801350e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013512:	4680      	mov	r8, r0
 8013514:	7937      	ldrb	r7, [r6, #4]
 8013516:	7b76      	ldrb	r6, [r6, #13]
	else if (sensor_id == SENSOR_Y) sensor = sensor_y;
	else return;
	sensor_data->sensor_id = sensor_id;
 8013518:	7225      	strb	r5, [r4, #8]

	/* write to motion burst adress */
	main_write_sensor(sensor, Motion_Burst, 0xbb);
 801351a:	f8cd 800c 	str.w	r8, [sp, #12]
 801351e:	f88d 7010 	strb.w	r7, [sp, #16]
 8013522:	f88d 6019 	strb.w	r6, [sp, #25]
 8013526:	23bb      	movs	r3, #187	; 0xbb
 8013528:	9301      	str	r3, [sp, #4]
 801352a:	f04f 0950 	mov.w	r9, #80	; 0x50
 801352e:	f8cd 9000 	str.w	r9, [sp]
 8013532:	ad03      	add	r5, sp, #12
 8013534:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013538:	f7ed f958 	bl	80007ec <main_write_sensor>

	/* Prepare for burst */
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 801353c:	b2bf      	uxth	r7, r7
 801353e:	2200      	movs	r2, #0
 8013540:	4639      	mov	r1, r7
 8013542:	4640      	mov	r0, r8
 8013544:	f7f0 fb6e 	bl	8003c24 <HAL_GPIO_WritePin>
	sensor_data->time = mouseDriver_getTime();
 8013548:	f7fd fa14 	bl	8010974 <mouseDriver_getTime>
 801354c:	6020      	str	r0, [r4, #0]
	main_write_sensor_burst(Motion_Burst);
 801354e:	4648      	mov	r0, r9
 8013550:	f7ed f978 	bl	8000844 <main_write_sensor_burst>
	/* Start burst */
	main_read_sensor_motion_burst(data);
 8013554:	a807      	add	r0, sp, #28
 8013556:	f7ed f987 	bl	8000868 <main_read_sensor_motion_burst>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 801355a:	2201      	movs	r2, #1
 801355c:	4639      	mov	r1, r7
 801355e:	4640      	mov	r0, r8
 8013560:	f7f0 fb60 	bl	8003c24 <HAL_GPIO_WritePin>
	/* END of burst */
	main_wait_20us();
 8013564:	f7ed f89b 	bl	800069e <main_wait_20us>

	/* Read other register for stopping burst mode */
	sensor_data->product_id = main_read_sensor(sensor,  Product_ID);
 8013568:	2300      	movs	r3, #0
 801356a:	9300      	str	r3, [sp, #0]
 801356c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013570:	f7ed f906 	bl	8000780 <main_read_sensor>
 8013574:	72e0      	strb	r0, [r4, #11]

	/* TWO's Complement */
	temp = (data[DELTA_X_H]<<8) | (data[DELTA_X_L]);
 8013576:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801357a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801357e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	temp = ~temp + 1;
	sensor_data->delta_x = temp;
 8013582:	425b      	negs	r3, r3
 8013584:	80a3      	strh	r3, [r4, #4]
	temp = (data[DELTA_Y_H]<<8) | (data[DELTA_Y_L]);
 8013586:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 801358a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801358e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	temp = ~temp +1;
	sensor_data->delta_y = temp;
 8013592:	425b      	negs	r3, r3
 8013594:	80e3      	strh	r3, [r4, #6]

	sensor_data->squal = data[SQUAL_READ];
 8013596:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 801359a:	7263      	strb	r3, [r4, #9]
	sensor_data->lift = (data[MOTION] & 0x08) >> 3;
 801359c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80135a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80135a4:	72a3      	strb	r3, [r4, #10]
	sensor_data->srom_id = sensor.status;
 80135a6:	7326      	strb	r6, [r4, #12]
}
 80135a8:	b00b      	add	sp, #44	; 0x2c
 80135aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (sensor_id == SENSOR_Y) sensor = sensor_y;
 80135ae:	2801      	cmp	r0, #1
 80135b0:	d1fa      	bne.n	80135a8 <sensorDriver_motion_read_raw+0xb0>
 80135b2:	4e06      	ldr	r6, [pc, #24]	; (80135cc <sensorDriver_motion_read_raw+0xd4>)
 80135b4:	af03      	add	r7, sp, #12
 80135b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80135ba:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80135be:	4680      	mov	r8, r0
 80135c0:	7937      	ldrb	r7, [r6, #4]
 80135c2:	7b76      	ldrb	r6, [r6, #13]
 80135c4:	e7a8      	b.n	8013518 <sensorDriver_motion_read_raw+0x20>
 80135c6:	bf00      	nop
 80135c8:	20000038 	.word	0x20000038
 80135cc:	20000048 	.word	0x20000048

080135d0 <sensorDriver_motion_read_speed>:
void sensorDriver_motion_read_speed(mavlink_raw_sensor_t sensor_data[2], mavlink_speed_info_t * speed_info){
 80135d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135d2:	b089      	sub	sp, #36	; 0x24
 80135d4:	4605      	mov	r5, r0
 80135d6:	460c      	mov	r4, r1
	mavlink_raw_sensor_t raw_values[2];
    uint32_t old_time[2];

    speed_info->valid = 0;
 80135d8:	2000      	movs	r0, #0
 80135da:	7408      	strb	r0, [r1, #16]
    old_time[0] = speed_info->time_x;
 80135dc:	680f      	ldr	r7, [r1, #0]
    old_time[1] = speed_info->time_y;
 80135de:	684e      	ldr	r6, [r1, #4]

	sensorDriver_motion_read_raw(SENSOR_X, &raw_values[0]);
 80135e0:	a901      	add	r1, sp, #4
 80135e2:	f7ff ff89 	bl	80134f8 <sensorDriver_motion_read_raw>
	sensorDriver_motion_read_raw(SENSOR_Y, &raw_values[1]);
 80135e6:	f10d 0111 	add.w	r1, sp, #17
 80135ea:	2001      	movs	r0, #1
 80135ec:	f7ff ff84 	bl	80134f8 <sensorDriver_motion_read_raw>

	speed_info->speed_x =  -(float)raw_values[0].delta_y*(float)INCH2METER/(float)RESOLUTION;
	speed_info->speed_x /= (float)(raw_values[0].time-old_time[0])/(float)1000;
 80135f0:	9b01      	ldr	r3, [sp, #4]
	speed_info->speed_x =  -(float)raw_values[0].delta_y*(float)INCH2METER/(float)RESOLUTION;
 80135f2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80135f6:	ee07 2a10 	vmov	s14, r2
 80135fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135fe:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80136bc <sensorDriver_motion_read_speed+0xec>
 8013602:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8013606:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80136c0 <sensorDriver_motion_read_speed+0xf0>
 801360a:	ee87 5a06 	vdiv.f32	s10, s14, s12
	speed_info->speed_x /= (float)(raw_values[0].time-old_time[0])/(float)1000;
 801360e:	1bdf      	subs	r7, r3, r7
 8013610:	ee07 7a90 	vmov	s15, r7
 8013614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013618:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80136c4 <sensorDriver_motion_read_speed+0xf4>
 801361c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013620:	eec5 7a27 	vdiv.f32	s15, s10, s15
 8013624:	ee17 2a90 	vmov	r2, s15
 8013628:	60a2      	str	r2, [r4, #8]
	speed_info->time_x = raw_values[0].time;
 801362a:	6023      	str	r3, [r4, #0]
	speed_info->speed_y =  -(float)raw_values[1].delta_y*(float)INCH2METER/(float)RESOLUTION;
	speed_info->speed_y /= (float)(raw_values[1].time-old_time[1])/(float)1000;
 801362c:	f8dd 3011 	ldr.w	r3, [sp, #17]
	speed_info->speed_y =  -(float)raw_values[1].delta_y*(float)INCH2METER/(float)RESOLUTION;
 8013630:	f9bd 2017 	ldrsh.w	r2, [sp, #23]
 8013634:	ee07 2a90 	vmov	s15, r2
 8013638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801363c:	ee67 7ae5 	vnmul.f32	s15, s15, s11
 8013640:	eec7 5a86 	vdiv.f32	s11, s15, s12
	speed_info->speed_y /= (float)(raw_values[1].time-old_time[1])/(float)1000;
 8013644:	1b9e      	subs	r6, r3, r6
 8013646:	ee07 6a90 	vmov	s15, r6
 801364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801364e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013652:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8013656:	ee17 2a90 	vmov	r2, s15
 801365a:	60e2      	str	r2, [r4, #12]
	speed_info->time_y = raw_values[1].time;
 801365c:	6063      	str	r3, [r4, #4]
	sensor_data[0] = raw_values[0];
 801365e:	ab01      	add	r3, sp, #4
 8013660:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013662:	6028      	str	r0, [r5, #0]
 8013664:	6069      	str	r1, [r5, #4]
 8013666:	60aa      	str	r2, [r5, #8]
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	732b      	strb	r3, [r5, #12]
	sensor_data[1] = raw_values[1];
 801366c:	f8dd 0011 	ldr.w	r0, [sp, #17]
 8013670:	f8dd 1015 	ldr.w	r1, [sp, #21]
 8013674:	f8dd 2019 	ldr.w	r2, [sp, #25]
 8013678:	f8c5 000d 	str.w	r0, [r5, #13]
 801367c:	f8c5 1011 	str.w	r1, [r5, #17]
 8013680:	f8c5 2015 	str.w	r2, [r5, #21]
 8013684:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8013688:	766a      	strb	r2, [r5, #25]

	if((raw_values[0].lift == 0) && (raw_values[1].lift == 0) &&
 801368a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 801368e:	b953      	cbnz	r3, 80136a6 <sensorDriver_motion_read_speed+0xd6>
 8013690:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8013694:	b93b      	cbnz	r3, 80136a6 <sensorDriver_motion_read_speed+0xd6>
 8013696:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801369a:	2b0f      	cmp	r3, #15
 801369c:	d903      	bls.n	80136a6 <sensorDriver_motion_read_speed+0xd6>
		(raw_values[0].squal >= SQUAL_THRESH) && (raw_values[0].squal >= SQUAL_THRESH) &&
 801369e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80136a2:	2b42      	cmp	r3, #66	; 0x42
 80136a4:	d003      	beq.n	80136ae <sensorDriver_motion_read_speed+0xde>
		(raw_values[0].product_id == 66) && (raw_values[1].product_id == 66)){
		speed_info->valid = 1;
	}
	else{
		speed_info->valid = 0;
 80136a6:	2300      	movs	r3, #0
 80136a8:	7423      	strb	r3, [r4, #16]
	}
}
 80136aa:	b009      	add	sp, #36	; 0x24
 80136ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(raw_values[0].product_id == 66) && (raw_values[1].product_id == 66)){
 80136ae:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80136b2:	2b42      	cmp	r3, #66	; 0x42
 80136b4:	d1f7      	bne.n	80136a6 <sensorDriver_motion_read_speed+0xd6>
		speed_info->valid = 1;
 80136b6:	2301      	movs	r3, #1
 80136b8:	7423      	strb	r3, [r4, #16]
 80136ba:	e7f6      	b.n	80136aa <sensorDriver_motion_read_speed+0xda>
 80136bc:	3cd013a9 	.word	0x3cd013a9
 80136c0:	459c4000 	.word	0x459c4000
 80136c4:	447a0000 	.word	0x447a0000

080136c8 <__errno>:
 80136c8:	4b01      	ldr	r3, [pc, #4]	; (80136d0 <__errno+0x8>)
 80136ca:	6818      	ldr	r0, [r3, #0]
 80136cc:	4770      	bx	lr
 80136ce:	bf00      	nop
 80136d0:	20000058 	.word	0x20000058

080136d4 <exit>:
 80136d4:	b508      	push	{r3, lr}
 80136d6:	2100      	movs	r1, #0
 80136d8:	4604      	mov	r4, r0
 80136da:	f000 f8b5 	bl	8013848 <__call_exitprocs>
 80136de:	4b04      	ldr	r3, [pc, #16]	; (80136f0 <exit+0x1c>)
 80136e0:	6818      	ldr	r0, [r3, #0]
 80136e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80136e4:	b103      	cbz	r3, 80136e8 <exit+0x14>
 80136e6:	4798      	blx	r3
 80136e8:	4620      	mov	r0, r4
 80136ea:	f7ee fb3a 	bl	8001d62 <_exit>
 80136ee:	bf00      	nop
 80136f0:	08014d70 	.word	0x08014d70

080136f4 <__libc_init_array>:
 80136f4:	b570      	push	{r4, r5, r6, lr}
 80136f6:	4e0d      	ldr	r6, [pc, #52]	; (801372c <__libc_init_array+0x38>)
 80136f8:	4d0d      	ldr	r5, [pc, #52]	; (8013730 <__libc_init_array+0x3c>)
 80136fa:	1b76      	subs	r6, r6, r5
 80136fc:	10b6      	asrs	r6, r6, #2
 80136fe:	d006      	beq.n	801370e <__libc_init_array+0x1a>
 8013700:	2400      	movs	r4, #0
 8013702:	3401      	adds	r4, #1
 8013704:	f855 3b04 	ldr.w	r3, [r5], #4
 8013708:	4798      	blx	r3
 801370a:	42a6      	cmp	r6, r4
 801370c:	d1f9      	bne.n	8013702 <__libc_init_array+0xe>
 801370e:	4e09      	ldr	r6, [pc, #36]	; (8013734 <__libc_init_array+0x40>)
 8013710:	4d09      	ldr	r5, [pc, #36]	; (8013738 <__libc_init_array+0x44>)
 8013712:	1b76      	subs	r6, r6, r5
 8013714:	f000 f9a2 	bl	8013a5c <_init>
 8013718:	10b6      	asrs	r6, r6, #2
 801371a:	d006      	beq.n	801372a <__libc_init_array+0x36>
 801371c:	2400      	movs	r4, #0
 801371e:	3401      	adds	r4, #1
 8013720:	f855 3b04 	ldr.w	r3, [r5], #4
 8013724:	4798      	blx	r3
 8013726:	42a6      	cmp	r6, r4
 8013728:	d1f9      	bne.n	801371e <__libc_init_array+0x2a>
 801372a:	bd70      	pop	{r4, r5, r6, pc}
 801372c:	08014d7c 	.word	0x08014d7c
 8013730:	08014d7c 	.word	0x08014d7c
 8013734:	08014d84 	.word	0x08014d84
 8013738:	08014d7c 	.word	0x08014d7c

0801373c <memcmp>:
 801373c:	2a03      	cmp	r2, #3
 801373e:	b470      	push	{r4, r5, r6}
 8013740:	d914      	bls.n	801376c <memcmp+0x30>
 8013742:	ea40 0501 	orr.w	r5, r0, r1
 8013746:	07ad      	lsls	r5, r5, #30
 8013748:	4604      	mov	r4, r0
 801374a:	460b      	mov	r3, r1
 801374c:	d122      	bne.n	8013794 <memcmp+0x58>
 801374e:	681d      	ldr	r5, [r3, #0]
 8013750:	6826      	ldr	r6, [r4, #0]
 8013752:	42ae      	cmp	r6, r5
 8013754:	4619      	mov	r1, r3
 8013756:	4620      	mov	r0, r4
 8013758:	f103 0304 	add.w	r3, r3, #4
 801375c:	f104 0404 	add.w	r4, r4, #4
 8013760:	d118      	bne.n	8013794 <memcmp+0x58>
 8013762:	3a04      	subs	r2, #4
 8013764:	2a03      	cmp	r2, #3
 8013766:	4620      	mov	r0, r4
 8013768:	4619      	mov	r1, r3
 801376a:	d8f0      	bhi.n	801374e <memcmp+0x12>
 801376c:	1e54      	subs	r4, r2, #1
 801376e:	b172      	cbz	r2, 801378e <memcmp+0x52>
 8013770:	7802      	ldrb	r2, [r0, #0]
 8013772:	780b      	ldrb	r3, [r1, #0]
 8013774:	429a      	cmp	r2, r3
 8013776:	bf08      	it	eq
 8013778:	1864      	addeq	r4, r4, r1
 801377a:	d006      	beq.n	801378a <memcmp+0x4e>
 801377c:	e00c      	b.n	8013798 <memcmp+0x5c>
 801377e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8013782:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013786:	429a      	cmp	r2, r3
 8013788:	d106      	bne.n	8013798 <memcmp+0x5c>
 801378a:	42a1      	cmp	r1, r4
 801378c:	d1f7      	bne.n	801377e <memcmp+0x42>
 801378e:	2000      	movs	r0, #0
 8013790:	bc70      	pop	{r4, r5, r6}
 8013792:	4770      	bx	lr
 8013794:	1e54      	subs	r4, r2, #1
 8013796:	e7eb      	b.n	8013770 <memcmp+0x34>
 8013798:	1ad0      	subs	r0, r2, r3
 801379a:	bc70      	pop	{r4, r5, r6}
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop

080137a0 <memset>:
 80137a0:	b4f0      	push	{r4, r5, r6, r7}
 80137a2:	0786      	lsls	r6, r0, #30
 80137a4:	d043      	beq.n	801382e <memset+0x8e>
 80137a6:	1e54      	subs	r4, r2, #1
 80137a8:	2a00      	cmp	r2, #0
 80137aa:	d03e      	beq.n	801382a <memset+0x8a>
 80137ac:	b2ca      	uxtb	r2, r1
 80137ae:	4603      	mov	r3, r0
 80137b0:	e002      	b.n	80137b8 <memset+0x18>
 80137b2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80137b6:	d338      	bcc.n	801382a <memset+0x8a>
 80137b8:	f803 2b01 	strb.w	r2, [r3], #1
 80137bc:	079d      	lsls	r5, r3, #30
 80137be:	d1f8      	bne.n	80137b2 <memset+0x12>
 80137c0:	2c03      	cmp	r4, #3
 80137c2:	d92b      	bls.n	801381c <memset+0x7c>
 80137c4:	b2cd      	uxtb	r5, r1
 80137c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80137ca:	2c0f      	cmp	r4, #15
 80137cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80137d0:	d916      	bls.n	8013800 <memset+0x60>
 80137d2:	f1a4 0710 	sub.w	r7, r4, #16
 80137d6:	093f      	lsrs	r7, r7, #4
 80137d8:	f103 0620 	add.w	r6, r3, #32
 80137dc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80137e0:	f103 0210 	add.w	r2, r3, #16
 80137e4:	e942 5504 	strd	r5, r5, [r2, #-16]
 80137e8:	e942 5502 	strd	r5, r5, [r2, #-8]
 80137ec:	3210      	adds	r2, #16
 80137ee:	42b2      	cmp	r2, r6
 80137f0:	d1f8      	bne.n	80137e4 <memset+0x44>
 80137f2:	f004 040f 	and.w	r4, r4, #15
 80137f6:	3701      	adds	r7, #1
 80137f8:	2c03      	cmp	r4, #3
 80137fa:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80137fe:	d90d      	bls.n	801381c <memset+0x7c>
 8013800:	461e      	mov	r6, r3
 8013802:	4622      	mov	r2, r4
 8013804:	3a04      	subs	r2, #4
 8013806:	2a03      	cmp	r2, #3
 8013808:	f846 5b04 	str.w	r5, [r6], #4
 801380c:	d8fa      	bhi.n	8013804 <memset+0x64>
 801380e:	1f22      	subs	r2, r4, #4
 8013810:	f022 0203 	bic.w	r2, r2, #3
 8013814:	3204      	adds	r2, #4
 8013816:	4413      	add	r3, r2
 8013818:	f004 0403 	and.w	r4, r4, #3
 801381c:	b12c      	cbz	r4, 801382a <memset+0x8a>
 801381e:	b2c9      	uxtb	r1, r1
 8013820:	441c      	add	r4, r3
 8013822:	f803 1b01 	strb.w	r1, [r3], #1
 8013826:	429c      	cmp	r4, r3
 8013828:	d1fb      	bne.n	8013822 <memset+0x82>
 801382a:	bcf0      	pop	{r4, r5, r6, r7}
 801382c:	4770      	bx	lr
 801382e:	4614      	mov	r4, r2
 8013830:	4603      	mov	r3, r0
 8013832:	e7c5      	b.n	80137c0 <memset+0x20>

08013834 <register_fini>:
 8013834:	4b02      	ldr	r3, [pc, #8]	; (8013840 <register_fini+0xc>)
 8013836:	b113      	cbz	r3, 801383e <register_fini+0xa>
 8013838:	4802      	ldr	r0, [pc, #8]	; (8013844 <register_fini+0x10>)
 801383a:	f000 b879 	b.w	8013930 <atexit>
 801383e:	4770      	bx	lr
 8013840:	00000000 	.word	0x00000000
 8013844:	0801393d 	.word	0x0801393d

08013848 <__call_exitprocs>:
 8013848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801384c:	4b35      	ldr	r3, [pc, #212]	; (8013924 <__call_exitprocs+0xdc>)
 801384e:	b085      	sub	sp, #20
 8013850:	460f      	mov	r7, r1
 8013852:	9003      	str	r0, [sp, #12]
 8013854:	6818      	ldr	r0, [r3, #0]
 8013856:	f000 f895 	bl	8013984 <__retarget_lock_acquire_recursive>
 801385a:	4b33      	ldr	r3, [pc, #204]	; (8013928 <__call_exitprocs+0xe0>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	9301      	str	r3, [sp, #4]
 8013860:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013864:	9302      	str	r3, [sp, #8]
 8013866:	46b9      	mov	r9, r7
 8013868:	9b01      	ldr	r3, [sp, #4]
 801386a:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 801386e:	b33e      	cbz	r6, 80138c0 <__call_exitprocs+0x78>
 8013870:	f8dd a008 	ldr.w	sl, [sp, #8]
 8013874:	f04f 0801 	mov.w	r8, #1
 8013878:	6874      	ldr	r4, [r6, #4]
 801387a:	1e65      	subs	r5, r4, #1
 801387c:	d40f      	bmi.n	801389e <__call_exitprocs+0x56>
 801387e:	3401      	adds	r4, #1
 8013880:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8013884:	2700      	movs	r7, #0
 8013886:	f1b9 0f00 	cmp.w	r9, #0
 801388a:	d020      	beq.n	80138ce <__call_exitprocs+0x86>
 801388c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8013890:	454b      	cmp	r3, r9
 8013892:	d01c      	beq.n	80138ce <__call_exitprocs+0x86>
 8013894:	3d01      	subs	r5, #1
 8013896:	1c6b      	adds	r3, r5, #1
 8013898:	f1a4 0404 	sub.w	r4, r4, #4
 801389c:	d1f3      	bne.n	8013886 <__call_exitprocs+0x3e>
 801389e:	4b23      	ldr	r3, [pc, #140]	; (801392c <__call_exitprocs+0xe4>)
 80138a0:	b173      	cbz	r3, 80138c0 <__call_exitprocs+0x78>
 80138a2:	e9d6 3200 	ldrd	r3, r2, [r6]
 80138a6:	2a00      	cmp	r2, #0
 80138a8:	d134      	bne.n	8013914 <__call_exitprocs+0xcc>
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d032      	beq.n	8013914 <__call_exitprocs+0xcc>
 80138ae:	4630      	mov	r0, r6
 80138b0:	f8ca 3000 	str.w	r3, [sl]
 80138b4:	f3af 8000 	nop.w
 80138b8:	f8da 6000 	ldr.w	r6, [sl]
 80138bc:	2e00      	cmp	r6, #0
 80138be:	d1db      	bne.n	8013878 <__call_exitprocs+0x30>
 80138c0:	4b18      	ldr	r3, [pc, #96]	; (8013924 <__call_exitprocs+0xdc>)
 80138c2:	6818      	ldr	r0, [r3, #0]
 80138c4:	b005      	add	sp, #20
 80138c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ca:	f000 b863 	b.w	8013994 <__retarget_lock_release_recursive>
 80138ce:	6873      	ldr	r3, [r6, #4]
 80138d0:	6822      	ldr	r2, [r4, #0]
 80138d2:	3b01      	subs	r3, #1
 80138d4:	42ab      	cmp	r3, r5
 80138d6:	bf0c      	ite	eq
 80138d8:	6075      	streq	r5, [r6, #4]
 80138da:	6027      	strne	r7, [r4, #0]
 80138dc:	2a00      	cmp	r2, #0
 80138de:	d0d9      	beq.n	8013894 <__call_exitprocs+0x4c>
 80138e0:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 80138e4:	f8d6 b004 	ldr.w	fp, [r6, #4]
 80138e8:	fa08 f305 	lsl.w	r3, r8, r5
 80138ec:	420b      	tst	r3, r1
 80138ee:	d108      	bne.n	8013902 <__call_exitprocs+0xba>
 80138f0:	4790      	blx	r2
 80138f2:	6873      	ldr	r3, [r6, #4]
 80138f4:	455b      	cmp	r3, fp
 80138f6:	d1b7      	bne.n	8013868 <__call_exitprocs+0x20>
 80138f8:	f8da 3000 	ldr.w	r3, [sl]
 80138fc:	42b3      	cmp	r3, r6
 80138fe:	d0c9      	beq.n	8013894 <__call_exitprocs+0x4c>
 8013900:	e7b2      	b.n	8013868 <__call_exitprocs+0x20>
 8013902:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 8013906:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 801390a:	4203      	tst	r3, r0
 801390c:	d107      	bne.n	801391e <__call_exitprocs+0xd6>
 801390e:	9803      	ldr	r0, [sp, #12]
 8013910:	4790      	blx	r2
 8013912:	e7ee      	b.n	80138f2 <__call_exitprocs+0xaa>
 8013914:	46b2      	mov	sl, r6
 8013916:	461e      	mov	r6, r3
 8013918:	2e00      	cmp	r6, #0
 801391a:	d1ad      	bne.n	8013878 <__call_exitprocs+0x30>
 801391c:	e7d0      	b.n	80138c0 <__call_exitprocs+0x78>
 801391e:	4608      	mov	r0, r1
 8013920:	4790      	blx	r2
 8013922:	e7e6      	b.n	80138f2 <__call_exitprocs+0xaa>
 8013924:	20000488 	.word	0x20000488
 8013928:	08014d70 	.word	0x08014d70
 801392c:	00000000 	.word	0x00000000

08013930 <atexit>:
 8013930:	2300      	movs	r3, #0
 8013932:	4601      	mov	r1, r0
 8013934:	461a      	mov	r2, r3
 8013936:	4618      	mov	r0, r3
 8013938:	f000 b82e 	b.w	8013998 <__register_exitproc>

0801393c <__libc_fini_array>:
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	4c0a      	ldr	r4, [pc, #40]	; (8013968 <__libc_fini_array+0x2c>)
 8013940:	4d0a      	ldr	r5, [pc, #40]	; (801396c <__libc_fini_array+0x30>)
 8013942:	1b64      	subs	r4, r4, r5
 8013944:	10a4      	asrs	r4, r4, #2
 8013946:	d00a      	beq.n	801395e <__libc_fini_array+0x22>
 8013948:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 801394c:	3b01      	subs	r3, #1
 801394e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8013952:	3c01      	subs	r4, #1
 8013954:	f855 3904 	ldr.w	r3, [r5], #-4
 8013958:	4798      	blx	r3
 801395a:	2c00      	cmp	r4, #0
 801395c:	d1f9      	bne.n	8013952 <__libc_fini_array+0x16>
 801395e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013962:	f000 b881 	b.w	8013a68 <_fini>
 8013966:	bf00      	nop
 8013968:	08014d88 	.word	0x08014d88
 801396c:	08014d84 	.word	0x08014d84

08013970 <__retarget_lock_init>:
 8013970:	4770      	bx	lr
 8013972:	bf00      	nop

08013974 <__retarget_lock_init_recursive>:
 8013974:	4770      	bx	lr
 8013976:	bf00      	nop

08013978 <__retarget_lock_close>:
 8013978:	4770      	bx	lr
 801397a:	bf00      	nop

0801397c <__retarget_lock_close_recursive>:
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop

08013980 <__retarget_lock_acquire>:
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop

08013984 <__retarget_lock_acquire_recursive>:
 8013984:	4770      	bx	lr
 8013986:	bf00      	nop

08013988 <__retarget_lock_try_acquire>:
 8013988:	2001      	movs	r0, #1
 801398a:	4770      	bx	lr

0801398c <__retarget_lock_try_acquire_recursive>:
 801398c:	2001      	movs	r0, #1
 801398e:	4770      	bx	lr

08013990 <__retarget_lock_release>:
 8013990:	4770      	bx	lr
 8013992:	bf00      	nop

08013994 <__retarget_lock_release_recursive>:
 8013994:	4770      	bx	lr
 8013996:	bf00      	nop

08013998 <__register_exitproc>:
 8013998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801399c:	4d2b      	ldr	r5, [pc, #172]	; (8013a4c <__register_exitproc+0xb4>)
 801399e:	4606      	mov	r6, r0
 80139a0:	6828      	ldr	r0, [r5, #0]
 80139a2:	4698      	mov	r8, r3
 80139a4:	460f      	mov	r7, r1
 80139a6:	4691      	mov	r9, r2
 80139a8:	f7ff ffec 	bl	8013984 <__retarget_lock_acquire_recursive>
 80139ac:	4b28      	ldr	r3, [pc, #160]	; (8013a50 <__register_exitproc+0xb8>)
 80139ae:	681c      	ldr	r4, [r3, #0]
 80139b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d03d      	beq.n	8013a34 <__register_exitproc+0x9c>
 80139b8:	685a      	ldr	r2, [r3, #4]
 80139ba:	2a1f      	cmp	r2, #31
 80139bc:	dc0d      	bgt.n	80139da <__register_exitproc+0x42>
 80139be:	f102 0c01 	add.w	ip, r2, #1
 80139c2:	bb16      	cbnz	r6, 8013a0a <__register_exitproc+0x72>
 80139c4:	3202      	adds	r2, #2
 80139c6:	f8c3 c004 	str.w	ip, [r3, #4]
 80139ca:	6828      	ldr	r0, [r5, #0]
 80139cc:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 80139d0:	f7ff ffe0 	bl	8013994 <__retarget_lock_release_recursive>
 80139d4:	2000      	movs	r0, #0
 80139d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139da:	4b1e      	ldr	r3, [pc, #120]	; (8013a54 <__register_exitproc+0xbc>)
 80139dc:	b37b      	cbz	r3, 8013a3e <__register_exitproc+0xa6>
 80139de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80139e2:	f3af 8000 	nop.w
 80139e6:	4603      	mov	r3, r0
 80139e8:	b348      	cbz	r0, 8013a3e <__register_exitproc+0xa6>
 80139ea:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 80139ee:	2100      	movs	r1, #0
 80139f0:	e9c0 2100 	strd	r2, r1, [r0]
 80139f4:	f04f 0c01 	mov.w	ip, #1
 80139f8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 80139fc:	460a      	mov	r2, r1
 80139fe:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8013a02:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 8013a06:	2e00      	cmp	r6, #0
 8013a08:	d0dc      	beq.n	80139c4 <__register_exitproc+0x2c>
 8013a0a:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8013a0e:	2401      	movs	r4, #1
 8013a10:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8013a14:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 8013a18:	4094      	lsls	r4, r2
 8013a1a:	4320      	orrs	r0, r4
 8013a1c:	2e02      	cmp	r6, #2
 8013a1e:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8013a22:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8013a26:	d1cd      	bne.n	80139c4 <__register_exitproc+0x2c>
 8013a28:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 8013a2c:	430c      	orrs	r4, r1
 8013a2e:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 8013a32:	e7c7      	b.n	80139c4 <__register_exitproc+0x2c>
 8013a34:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 8013a38:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8013a3c:	e7bc      	b.n	80139b8 <__register_exitproc+0x20>
 8013a3e:	6828      	ldr	r0, [r5, #0]
 8013a40:	f7ff ffa8 	bl	8013994 <__retarget_lock_release_recursive>
 8013a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a48:	e7c5      	b.n	80139d6 <__register_exitproc+0x3e>
 8013a4a:	bf00      	nop
 8013a4c:	20000488 	.word	0x20000488
 8013a50:	08014d70 	.word	0x08014d70
 8013a54:	00000000 	.word	0x00000000

08013a58 <__EH_FRAME_BEGIN__>:
 8013a58:	00000000                                ....

08013a5c <_init>:
 8013a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a5e:	bf00      	nop
 8013a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a62:	bc08      	pop	{r3}
 8013a64:	469e      	mov	lr, r3
 8013a66:	4770      	bx	lr

08013a68 <_fini>:
 8013a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a6a:	bf00      	nop
 8013a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a6e:	bc08      	pop	{r3}
 8013a70:	469e      	mov	lr, r3
 8013a72:	4770      	bx	lr

Disassembly of section .RamFunc:

08013a74 <HAL_FLASHEx_EnableRunPowerDown>:
  * @retval None
  */
__RAM_FUNC HAL_FLASHEx_EnableRunPowerDown(void)
{
  /* Enable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_ENABLE();
 8013a74:	4b05      	ldr	r3, [pc, #20]	; (8013a8c <_etext+0x18>)
 8013a76:	4a06      	ldr	r2, [pc, #24]	; (8013a90 <_etext+0x1c>)
 8013a78:	605a      	str	r2, [r3, #4]
 8013a7a:	4a06      	ldr	r2, [pc, #24]	; (8013a94 <_etext+0x20>)
 8013a7c:	605a      	str	r2, [r3, #4]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013a84:	601a      	str	r2, [r3, #0]

  return HAL_OK;

}
 8013a86:	2000      	movs	r0, #0
 8013a88:	4770      	bx	lr
 8013a8a:	bf00      	nop
 8013a8c:	40022000 	.word	0x40022000
 8013a90:	04152637 	.word	0x04152637
 8013a94:	fafbfcfd 	.word	0xfafbfcfd

08013a98 <HAL_FLASHEx_DisableRunPowerDown>:
  * @retval None
  */
__RAM_FUNC HAL_FLASHEx_DisableRunPowerDown(void)
{
  /* Disable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_DISABLE();
 8013a98:	4b05      	ldr	r3, [pc, #20]	; (8013ab0 <HAL_FLASHEx_DisableRunPowerDown+0x18>)
 8013a9a:	4a06      	ldr	r2, [pc, #24]	; (8013ab4 <HAL_FLASHEx_DisableRunPowerDown+0x1c>)
 8013a9c:	605a      	str	r2, [r3, #4]
 8013a9e:	4a06      	ldr	r2, [pc, #24]	; (8013ab8 <HAL_FLASHEx_DisableRunPowerDown+0x20>)
 8013aa0:	605a      	str	r2, [r3, #4]
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013aa8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
}
 8013aaa:	2000      	movs	r0, #0
 8013aac:	4770      	bx	lr
 8013aae:	bf00      	nop
 8013ab0:	40022000 	.word	0x40022000
 8013ab4:	04152637 	.word	0x04152637
 8013ab8:	fafbfcfd 	.word	0xfafbfcfd
