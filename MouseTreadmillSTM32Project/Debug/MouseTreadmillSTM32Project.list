
MouseTreadmillSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013878  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .RamFunc      00000048  08013a00  08013a00  00023a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000012d8  08013a48  08013a48  00023a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08014d20  08014d20  00024d20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08014d20  08014d20  00024d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08014d28  08014d28  0003046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08014d28  08014d28  00024d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08014d30  08014d30  00024d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000046c  20000000  08014d34  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001788  2000046c  080151a0  0003046c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001bf4  080151a0  00031bf4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003046c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b8bb  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004450  00000000  00000000  0005bd57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c451  00000000  00000000  000601a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001680  00000000  00000000  0007c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ef0  00000000  00000000  0007dc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002b16b  00000000  00000000  0007fb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00016f26  00000000  00000000  000aacd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000fb142  00000000  00000000  000c1bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007f  00000000  00000000  001bcd3b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003f08  00000000  00000000  001bcdbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000046c 	.word	0x2000046c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080139e4 	.word	0x080139e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000470 	.word	0x20000470
 80001c4:	080139e4 	.word	0x080139e4

080001c8 <_mainCRTStartup>:
 80001c8:	4b15      	ldr	r3, [pc, #84]	; (8000220 <_mainCRTStartup+0x58>)
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	bf08      	it	eq
 80001ce:	4b13      	ldreq	r3, [pc, #76]	; (800021c <_mainCRTStartup+0x54>)
 80001d0:	469d      	mov	sp, r3
 80001d2:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001d6:	2100      	movs	r1, #0
 80001d8:	468b      	mov	fp, r1
 80001da:	460f      	mov	r7, r1
 80001dc:	4813      	ldr	r0, [pc, #76]	; (800022c <_mainCRTStartup+0x64>)
 80001de:	4a14      	ldr	r2, [pc, #80]	; (8000230 <_mainCRTStartup+0x68>)
 80001e0:	1a12      	subs	r2, r2, r0
 80001e2:	f013 faa3 	bl	801372c <memset>
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <_mainCRTStartup+0x5c>)
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d000      	beq.n	80001ee <_mainCRTStartup+0x26>
 80001ec:	4798      	blx	r3
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <_mainCRTStartup+0x60>)
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d000      	beq.n	80001f6 <_mainCRTStartup+0x2e>
 80001f4:	4798      	blx	r3
 80001f6:	2000      	movs	r0, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	0004      	movs	r4, r0
 80001fc:	000d      	movs	r5, r1
 80001fe:	480d      	ldr	r0, [pc, #52]	; (8000234 <_mainCRTStartup+0x6c>)
 8000200:	2800      	cmp	r0, #0
 8000202:	d002      	beq.n	800020a <_mainCRTStartup+0x42>
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <_mainCRTStartup+0x70>)
 8000206:	f013 fb59 	bl	80138bc <atexit>
 800020a:	f013 fa39 	bl	8013680 <__libc_init_array>
 800020e:	0020      	movs	r0, r4
 8000210:	0029      	movs	r1, r5
 8000212:	f001 fa6b 	bl	80016ec <main>
 8000216:	f013 fa23 	bl	8013660 <exit>
 800021a:	bf00      	nop
 800021c:	00080000 	.word	0x00080000
	...
 800022c:	2000046c 	.word	0x2000046c
 8000230:	20001bf4 	.word	0x20001bf4
 8000234:	080138bd 	.word	0x080138bd
 8000238:	080138c9 	.word	0x080138c9
 800023c:	08014d34 	.word	0x08014d34
 8000240:	20000000 	.word	0x20000000
 8000244:	2000046c 	.word	0x2000046c
 8000248:	2000046c 	.word	0x2000046c
 800024c:	20001bf4 	.word	0x20001bf4

08000250 <memcpy>:
 8000250:	4684      	mov	ip, r0
 8000252:	ea41 0300 	orr.w	r3, r1, r0
 8000256:	f013 0303 	ands.w	r3, r3, #3
 800025a:	d16d      	bne.n	8000338 <memcpy+0xe8>
 800025c:	3a40      	subs	r2, #64	; 0x40
 800025e:	d341      	bcc.n	80002e4 <memcpy+0x94>
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	f851 3b04 	ldr.w	r3, [r1], #4
 8000294:	f840 3b04 	str.w	r3, [r0], #4
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	3a40      	subs	r2, #64	; 0x40
 80002e2:	d2bd      	bcs.n	8000260 <memcpy+0x10>
 80002e4:	3230      	adds	r2, #48	; 0x30
 80002e6:	d311      	bcc.n	800030c <memcpy+0xbc>
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	3a10      	subs	r2, #16
 800030a:	d2ed      	bcs.n	80002e8 <memcpy+0x98>
 800030c:	320c      	adds	r2, #12
 800030e:	d305      	bcc.n	800031c <memcpy+0xcc>
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	3a04      	subs	r2, #4
 800031a:	d2f9      	bcs.n	8000310 <memcpy+0xc0>
 800031c:	3204      	adds	r2, #4
 800031e:	d008      	beq.n	8000332 <memcpy+0xe2>
 8000320:	07d2      	lsls	r2, r2, #31
 8000322:	bf1c      	itt	ne
 8000324:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000328:	f800 3b01 	strbne.w	r3, [r0], #1
 800032c:	d301      	bcc.n	8000332 <memcpy+0xe2>
 800032e:	880b      	ldrh	r3, [r1, #0]
 8000330:	8003      	strh	r3, [r0, #0]
 8000332:	4660      	mov	r0, ip
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	2a08      	cmp	r2, #8
 800033a:	d313      	bcc.n	8000364 <memcpy+0x114>
 800033c:	078b      	lsls	r3, r1, #30
 800033e:	d08d      	beq.n	800025c <memcpy+0xc>
 8000340:	f010 0303 	ands.w	r3, r0, #3
 8000344:	d08a      	beq.n	800025c <memcpy+0xc>
 8000346:	f1c3 0304 	rsb	r3, r3, #4
 800034a:	1ad2      	subs	r2, r2, r3
 800034c:	07db      	lsls	r3, r3, #31
 800034e:	bf1c      	itt	ne
 8000350:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000354:	f800 3b01 	strbne.w	r3, [r0], #1
 8000358:	d380      	bcc.n	800025c <memcpy+0xc>
 800035a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800035e:	f820 3b02 	strh.w	r3, [r0], #2
 8000362:	e77b      	b.n	800025c <memcpy+0xc>
 8000364:	3a04      	subs	r2, #4
 8000366:	d3d9      	bcc.n	800031c <memcpy+0xcc>
 8000368:	3a01      	subs	r2, #1
 800036a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800036e:	f800 3b01 	strb.w	r3, [r0], #1
 8000372:	d2f9      	bcs.n	8000368 <memcpy+0x118>
 8000374:	780b      	ldrb	r3, [r1, #0]
 8000376:	7003      	strb	r3, [r0, #0]
 8000378:	784b      	ldrb	r3, [r1, #1]
 800037a:	7043      	strb	r3, [r0, #1]
 800037c:	788b      	ldrb	r3, [r1, #2]
 800037e:	7083      	strb	r3, [r0, #2]
 8000380:	4660      	mov	r0, ip
 8000382:	4770      	bx	lr

08000384 <__aeabi_uldivmod>:
 8000384:	b953      	cbnz	r3, 800039c <__aeabi_uldivmod+0x18>
 8000386:	b94a      	cbnz	r2, 800039c <__aeabi_uldivmod+0x18>
 8000388:	2900      	cmp	r1, #0
 800038a:	bf08      	it	eq
 800038c:	2800      	cmpeq	r0, #0
 800038e:	bf1c      	itt	ne
 8000390:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000394:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000398:	f000 b972 	b.w	8000680 <__aeabi_idiv0>
 800039c:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a4:	f000 f806 	bl	80003b4 <__udivmoddi4>
 80003a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b0:	b004      	add	sp, #16
 80003b2:	4770      	bx	lr

080003b4 <__udivmoddi4>:
 80003b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b8:	9e08      	ldr	r6, [sp, #32]
 80003ba:	4604      	mov	r4, r0
 80003bc:	4688      	mov	r8, r1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d14b      	bne.n	800045a <__udivmoddi4+0xa6>
 80003c2:	428a      	cmp	r2, r1
 80003c4:	4615      	mov	r5, r2
 80003c6:	d967      	bls.n	8000498 <__udivmoddi4+0xe4>
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	b14a      	cbz	r2, 80003e2 <__udivmoddi4+0x2e>
 80003ce:	f1c2 0720 	rsb	r7, r2, #32
 80003d2:	fa01 f302 	lsl.w	r3, r1, r2
 80003d6:	fa20 f707 	lsr.w	r7, r0, r7
 80003da:	4095      	lsls	r5, r2
 80003dc:	ea47 0803 	orr.w	r8, r7, r3
 80003e0:	4094      	lsls	r4, r2
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	0c23      	lsrs	r3, r4, #16
 80003e8:	fbb8 f7fe 	udiv	r7, r8, lr
 80003ec:	fa1f fc85 	uxth.w	ip, r5
 80003f0:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f8:	fb07 f10c 	mul.w	r1, r7, ip
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x60>
 8000400:	18eb      	adds	r3, r5, r3
 8000402:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000406:	f080 811b 	bcs.w	8000640 <__udivmoddi4+0x28c>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 8118 	bls.w	8000640 <__udivmoddi4+0x28c>
 8000410:	3f02      	subs	r7, #2
 8000412:	442b      	add	r3, r5
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 fc0c 	mul.w	ip, r0, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x8c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x290>
 8000436:	45a4      	cmp	ip, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x290>
 800043c:	3802      	subs	r0, #2
 800043e:	442c      	add	r4, r5
 8000440:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000444:	eba4 040c 	sub.w	r4, r4, ip
 8000448:	2700      	movs	r7, #0
 800044a:	b11e      	cbz	r6, 8000454 <__udivmoddi4+0xa0>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c6 4300 	strd	r4, r3, [r6]
 8000454:	4639      	mov	r1, r7
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xbe>
 800045e:	2e00      	cmp	r6, #0
 8000460:	f000 80eb 	beq.w	800063a <__udivmoddi4+0x286>
 8000464:	2700      	movs	r7, #0
 8000466:	e9c6 0100 	strd	r0, r1, [r6]
 800046a:	4638      	mov	r0, r7
 800046c:	4639      	mov	r1, r7
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f783 	clz	r7, r3
 8000476:	2f00      	cmp	r7, #0
 8000478:	d147      	bne.n	800050a <__udivmoddi4+0x156>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd0>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80fa 	bhi.w	8000678 <__udivmoddi4+0x2c4>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	4698      	mov	r8, r3
 800048e:	2e00      	cmp	r6, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa0>
 8000492:	e9c6 4800 	strd	r4, r8, [r6]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa0>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xe8>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 808f 	bne.w	80005c4 <__udivmoddi4+0x210>
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ac:	fa1f f885 	uxth.w	r8, r5
 80004b0:	2701      	movs	r7, #1
 80004b2:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b6:	0c23      	lsrs	r3, r4, #16
 80004b8:	fb0e 111c 	mls	r1, lr, ip, r1
 80004bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c0:	fb08 f10c 	mul.w	r1, r8, ip
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d907      	bls.n	80004d8 <__udivmoddi4+0x124>
 80004c8:	18eb      	adds	r3, r5, r3
 80004ca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ce:	d202      	bcs.n	80004d6 <__udivmoddi4+0x122>
 80004d0:	4299      	cmp	r1, r3
 80004d2:	f200 80cd 	bhi.w	8000670 <__udivmoddi4+0x2bc>
 80004d6:	4684      	mov	ip, r0
 80004d8:	1a59      	subs	r1, r3, r1
 80004da:	b2a3      	uxth	r3, r4
 80004dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80004e0:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e8:	fb08 f800 	mul.w	r8, r8, r0
 80004ec:	45a0      	cmp	r8, r4
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x14c>
 80004f0:	192c      	adds	r4, r5, r4
 80004f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f6:	d202      	bcs.n	80004fe <__udivmoddi4+0x14a>
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	f200 80b6 	bhi.w	800066a <__udivmoddi4+0x2b6>
 80004fe:	4618      	mov	r0, r3
 8000500:	eba4 0408 	sub.w	r4, r4, r8
 8000504:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000508:	e79f      	b.n	800044a <__udivmoddi4+0x96>
 800050a:	f1c7 0c20 	rsb	ip, r7, #32
 800050e:	40bb      	lsls	r3, r7
 8000510:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000514:	ea4e 0e03 	orr.w	lr, lr, r3
 8000518:	fa01 f407 	lsl.w	r4, r1, r7
 800051c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000520:	fa21 f30c 	lsr.w	r3, r1, ip
 8000524:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000528:	4325      	orrs	r5, r4
 800052a:	fbb3 f9f8 	udiv	r9, r3, r8
 800052e:	0c2c      	lsrs	r4, r5, #16
 8000530:	fb08 3319 	mls	r3, r8, r9, r3
 8000534:	fa1f fa8e 	uxth.w	sl, lr
 8000538:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800053c:	fb09 f40a 	mul.w	r4, r9, sl
 8000540:	429c      	cmp	r4, r3
 8000542:	fa02 f207 	lsl.w	r2, r2, r7
 8000546:	fa00 f107 	lsl.w	r1, r0, r7
 800054a:	d90b      	bls.n	8000564 <__udivmoddi4+0x1b0>
 800054c:	eb1e 0303 	adds.w	r3, lr, r3
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	f080 8087 	bcs.w	8000666 <__udivmoddi4+0x2b2>
 8000558:	429c      	cmp	r4, r3
 800055a:	f240 8084 	bls.w	8000666 <__udivmoddi4+0x2b2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	4473      	add	r3, lr
 8000564:	1b1b      	subs	r3, r3, r4
 8000566:	b2ad      	uxth	r5, r5
 8000568:	fbb3 f0f8 	udiv	r0, r3, r8
 800056c:	fb08 3310 	mls	r3, r8, r0, r3
 8000570:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000574:	fb00 fa0a 	mul.w	sl, r0, sl
 8000578:	45a2      	cmp	sl, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1da>
 800057c:	eb1e 0404 	adds.w	r4, lr, r4
 8000580:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000584:	d26b      	bcs.n	800065e <__udivmoddi4+0x2aa>
 8000586:	45a2      	cmp	sl, r4
 8000588:	d969      	bls.n	800065e <__udivmoddi4+0x2aa>
 800058a:	3802      	subs	r0, #2
 800058c:	4474      	add	r4, lr
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	eba4 040a 	sub.w	r4, r4, sl
 800059a:	454c      	cmp	r4, r9
 800059c:	46c2      	mov	sl, r8
 800059e:	464b      	mov	r3, r9
 80005a0:	d354      	bcc.n	800064c <__udivmoddi4+0x298>
 80005a2:	d051      	beq.n	8000648 <__udivmoddi4+0x294>
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d069      	beq.n	800067c <__udivmoddi4+0x2c8>
 80005a8:	ebb1 050a 	subs.w	r5, r1, sl
 80005ac:	eb64 0403 	sbc.w	r4, r4, r3
 80005b0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b4:	40fd      	lsrs	r5, r7
 80005b6:	40fc      	lsrs	r4, r7
 80005b8:	ea4c 0505 	orr.w	r5, ip, r5
 80005bc:	e9c6 5400 	strd	r5, r4, [r6]
 80005c0:	2700      	movs	r7, #0
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0xa0>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f703 	lsr.w	r7, r0, r3
 80005cc:	4095      	lsls	r5, r2
 80005ce:	fa01 f002 	lsl.w	r0, r1, r2
 80005d2:	fa21 f303 	lsr.w	r3, r1, r3
 80005d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005da:	4338      	orrs	r0, r7
 80005dc:	0c01      	lsrs	r1, r0, #16
 80005de:	fbb3 f7fe 	udiv	r7, r3, lr
 80005e2:	fa1f f885 	uxth.w	r8, r5
 80005e6:	fb0e 3317 	mls	r3, lr, r7, r3
 80005ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ee:	fb07 f308 	mul.w	r3, r7, r8
 80005f2:	428b      	cmp	r3, r1
 80005f4:	fa04 f402 	lsl.w	r4, r4, r2
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x256>
 80005fa:	1869      	adds	r1, r5, r1
 80005fc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000600:	d22f      	bcs.n	8000662 <__udivmoddi4+0x2ae>
 8000602:	428b      	cmp	r3, r1
 8000604:	d92d      	bls.n	8000662 <__udivmoddi4+0x2ae>
 8000606:	3f02      	subs	r7, #2
 8000608:	4429      	add	r1, r5
 800060a:	1acb      	subs	r3, r1, r3
 800060c:	b281      	uxth	r1, r0
 800060e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000612:	fb0e 3310 	mls	r3, lr, r0, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb00 f308 	mul.w	r3, r0, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	d907      	bls.n	8000632 <__udivmoddi4+0x27e>
 8000622:	1869      	adds	r1, r5, r1
 8000624:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000628:	d217      	bcs.n	800065a <__udivmoddi4+0x2a6>
 800062a:	428b      	cmp	r3, r1
 800062c:	d915      	bls.n	800065a <__udivmoddi4+0x2a6>
 800062e:	3802      	subs	r0, #2
 8000630:	4429      	add	r1, r5
 8000632:	1ac9      	subs	r1, r1, r3
 8000634:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000638:	e73b      	b.n	80004b2 <__udivmoddi4+0xfe>
 800063a:	4637      	mov	r7, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e709      	b.n	8000454 <__udivmoddi4+0xa0>
 8000640:	4607      	mov	r7, r0
 8000642:	e6e7      	b.n	8000414 <__udivmoddi4+0x60>
 8000644:	4618      	mov	r0, r3
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x8c>
 8000648:	4541      	cmp	r1, r8
 800064a:	d2ab      	bcs.n	80005a4 <__udivmoddi4+0x1f0>
 800064c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000650:	eb69 020e 	sbc.w	r2, r9, lr
 8000654:	3801      	subs	r0, #1
 8000656:	4613      	mov	r3, r2
 8000658:	e7a4      	b.n	80005a4 <__udivmoddi4+0x1f0>
 800065a:	4660      	mov	r0, ip
 800065c:	e7e9      	b.n	8000632 <__udivmoddi4+0x27e>
 800065e:	4618      	mov	r0, r3
 8000660:	e795      	b.n	800058e <__udivmoddi4+0x1da>
 8000662:	4667      	mov	r7, ip
 8000664:	e7d1      	b.n	800060a <__udivmoddi4+0x256>
 8000666:	4681      	mov	r9, r0
 8000668:	e77c      	b.n	8000564 <__udivmoddi4+0x1b0>
 800066a:	3802      	subs	r0, #2
 800066c:	442c      	add	r4, r5
 800066e:	e747      	b.n	8000500 <__udivmoddi4+0x14c>
 8000670:	f1ac 0c02 	sub.w	ip, ip, #2
 8000674:	442b      	add	r3, r5
 8000676:	e72f      	b.n	80004d8 <__udivmoddi4+0x124>
 8000678:	4638      	mov	r0, r7
 800067a:	e708      	b.n	800048e <__udivmoddi4+0xda>
 800067c:	4637      	mov	r7, r6
 800067e:	e6e9      	b.n	8000454 <__udivmoddi4+0xa0>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main_wait_160us>:
static void MX_TIM7_Init(void);
static void MX_TIM1_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
void main_wait_160us(void){
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	f44f 7461 	mov.w	r4, #900	; 0x384
	int i = 0;
	i = 0;
	while(i<900){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800068a:	2620      	movs	r6, #32
 800068c:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8000690:	4631      	mov	r1, r6
 8000692:	4628      	mov	r0, r5
 8000694:	f003 facd 	bl	8003c32 <HAL_GPIO_TogglePin>
	while(i<900){
 8000698:	3c01      	subs	r4, #1
 800069a:	d1f9      	bne.n	8000690 <main_wait_160us+0xc>
		i++;
	}
}
 800069c:	bd70      	pop	{r4, r5, r6, pc}

0800069e <main_wait_20us>:
void main_wait_20us(void){
 800069e:	b570      	push	{r4, r5, r6, lr}
 80006a0:	24b9      	movs	r4, #185	; 0xb9
	int i = 0;
	i = 0;
	while(i<185){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006a2:	2620      	movs	r6, #32
 80006a4:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 80006a8:	4631      	mov	r1, r6
 80006aa:	4628      	mov	r0, r5
 80006ac:	f003 fac1 	bl	8003c32 <HAL_GPIO_TogglePin>
	while(i<185){
 80006b0:	3c01      	subs	r4, #1
 80006b2:	d1f9      	bne.n	80006a8 <main_wait_20us+0xa>
		i++;
	}
}
 80006b4:	bd70      	pop	{r4, r5, r6, pc}

080006b6 <main_wait_1us>:
void main_wait_1us(void){
 80006b6:	b570      	push	{r4, r5, r6, lr}
 80006b8:	2419      	movs	r4, #25
	int i = 0;
	i = 0;
	while(i<25){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006ba:	2620      	movs	r6, #32
 80006bc:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 80006c0:	4631      	mov	r1, r6
 80006c2:	4628      	mov	r0, r5
 80006c4:	f003 fab5 	bl	8003c32 <HAL_GPIO_TogglePin>
	while(i<25){
 80006c8:	3c01      	subs	r4, #1
 80006ca:	d1f9      	bne.n	80006c0 <main_wait_1us+0xa>
		i++;
	}
}
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080006d0 <main_get_huart_tx_state>:
int main_get_huart_tx_state(void){
 80006d0:	b508      	push	{r3, lr}
	return (HAL_DMA_GetState(&hdma_usart2_tx));
 80006d2:	4802      	ldr	r0, [pc, #8]	; (80006dc <main_get_huart_tx_state+0xc>)
 80006d4:	f002 fa16 	bl	8002b04 <HAL_DMA_GetState>
}
 80006d8:	bd08      	pop	{r3, pc}
 80006da:	bf00      	nop
 80006dc:	20001a84 	.word	0x20001a84

080006e0 <main_transmit_buffer>:
void main_transmit_buffer(uint8_t *outBuffer, uint16_t msg_size){
 80006e0:	b508      	push	{r3, lr}
	HAL_UART_Transmit_DMA(&huart2, outBuffer,msg_size);
 80006e2:	460a      	mov	r2, r1
 80006e4:	4601      	mov	r1, r0
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <main_transmit_buffer+0x10>)
 80006e8:	f00e fcf4 	bl	800f0d4 <HAL_UART_Transmit_DMA>
}
 80006ec:	bd08      	pop	{r3, pc}
 80006ee:	bf00      	nop
 80006f0:	20001b0c 	.word	0x20001b0c

080006f4 <main_stop_motors>:
void main_stop_motors(void)
{
 80006f4:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80006f6:	4c05      	ldr	r4, [pc, #20]	; (800070c <main_stop_motors+0x18>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4620      	mov	r0, r4
 80006fc:	f00c fe56 	bl	800d3ac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000700:	2104      	movs	r1, #4
 8000702:	4620      	mov	r0, r4
 8000704:	f00c fe52 	bl	800d3ac <HAL_TIM_PWM_Stop>
}
 8000708:	bd10      	pop	{r4, pc}
 800070a:	bf00      	nop
 800070c:	20001acc 	.word	0x20001acc

08000710 <main_set_motors_speed>:
void main_set_motors_speed(mavlink_motor_setpoint_t motor )
{
 8000710:	b500      	push	{lr}
 8000712:	ed2d 8b02 	vpush	{d8}
 8000716:	b085      	sub	sp, #20
 8000718:	ab04      	add	r3, sp, #16
 800071a:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800071e:	eddd 7a02 	vldr	s15, [sp, #8]
 8000722:	ed9d 8a03 	vldr	s16, [sp, #12]

	htim1.Instance->CCR1 = motor.motor_x;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <main_set_motors_speed+0x6c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800072e:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = motor.motor_y;
 8000732:	eebc 7ac8 	vcvt.u32.f32	s14, s16
 8000736:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38

	if (motor.motor_x == 0)
 800073a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000742:	d111      	bne.n	8000768 <main_set_motors_speed+0x58>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000744:	2100      	movs	r1, #0
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <main_set_motors_speed+0x6c>)
 8000748:	f00c fe30 	bl	800d3ac <HAL_TIM_PWM_Stop>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	if (motor.motor_y == 0)
 800074c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8000750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000754:	d00d      	beq.n	8000772 <main_set_motors_speed+0x62>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000756:	2104      	movs	r1, #4
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <main_set_motors_speed+0x6c>)
 800075a:	f00c fdf5 	bl	800d348 <HAL_TIM_PWM_Start>

}
 800075e:	b005      	add	sp, #20
 8000760:	ecbd 8b02 	vpop	{d8}
 8000764:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000768:	2100      	movs	r1, #0
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <main_set_motors_speed+0x6c>)
 800076c:	f00c fdec 	bl	800d348 <HAL_TIM_PWM_Start>
 8000770:	e7ec      	b.n	800074c <main_set_motors_speed+0x3c>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000772:	2104      	movs	r1, #4
 8000774:	4801      	ldr	r0, [pc, #4]	; (800077c <main_set_motors_speed+0x6c>)
 8000776:	f00c fe19 	bl	800d3ac <HAL_TIM_PWM_Stop>
 800077a:	e7f0      	b.n	800075e <main_set_motors_speed+0x4e>
 800077c:	20001acc 	.word	0x20001acc

08000780 <main_read_sensor>:
uint8_t main_read_sensor (const sensor_t sensor, uint8_t adress ){
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	b087      	sub	sp, #28
 8000784:	466c      	mov	r4, sp
 8000786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800078a:	4606      	mov	r6, r0
 800078c:	f89d 4004 	ldrb.w	r4, [sp, #4]
	uint8_t value = 0;
 8000790:	2200      	movs	r2, #0
 8000792:	f88d 2017 	strb.w	r2, [sp, #23]
	uint8_t adress_read = adress & 0x7F;
 8000796:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800079a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800079e:	ad06      	add	r5, sp, #24
 80007a0:	f805 3d02 	strb.w	r3, [r5, #-2]!

	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 80007a4:	b2a4      	uxth	r4, r4
 80007a6:	4621      	mov	r1, r4
 80007a8:	f003 fa3e 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &adress_read, 1, 100);
 80007ac:	4f0e      	ldr	r7, [pc, #56]	; (80007e8 <main_read_sensor+0x68>)
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4629      	mov	r1, r5
 80007b4:	4638      	mov	r0, r7
 80007b6:	f009 faa6 	bl	8009d06 <HAL_SPI_Transmit>
	main_wait_160us();
 80007ba:	f7ff ff63 	bl	8000684 <main_wait_160us>
	HAL_SPI_Receive(&hspi2, &value, 1, 100);
 80007be:	2364      	movs	r3, #100	; 0x64
 80007c0:	2201      	movs	r2, #1
 80007c2:	f10d 0117 	add.w	r1, sp, #23
 80007c6:	4638      	mov	r0, r7
 80007c8:	f009 fcf6 	bl	800a1b8 <HAL_SPI_Receive>
	main_wait_1us();
 80007cc:	f7ff ff73 	bl	80006b6 <main_wait_1us>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4621      	mov	r1, r4
 80007d4:	4630      	mov	r0, r6
 80007d6:	f003 fa27 	bl	8003c28 <HAL_GPIO_WritePin>
	main_wait_20us();
 80007da:	f7ff ff60 	bl	800069e <main_wait_20us>
	return (value);
}
 80007de:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80007e2:	b007      	add	sp, #28
 80007e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20001a20 	.word	0x20001a20

080007ec <main_write_sensor>:

void main_write_sensor (const sensor_t sensor, uint8_t adress, uint8_t data){
 80007ec:	b530      	push	{r4, r5, lr}
 80007ee:	b087      	sub	sp, #28
 80007f0:	466c      	mov	r4, sp
 80007f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007f6:	4605      	mov	r5, r0
 80007f8:	f89d 4004 	ldrb.w	r4, [sp, #4]
	uint8_t value = data;
	uint8_t adress_write = adress | 0x80;
 80007fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8000800:	f063 037f 	orn	r3, r3, #127	; 0x7f
	uint8_t pack[2];
	pack[0] = adress_write;
 8000804:	f88d 3014 	strb.w	r3, [sp, #20]
	pack[1] = value;
 8000808:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800080c:	f88d 3015 	strb.w	r3, [sp, #21]

	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 8000810:	b2a4      	uxth	r4, r4
 8000812:	2200      	movs	r2, #0
 8000814:	4621      	mov	r1, r4
 8000816:	f003 fa07 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, pack, 2, 10);
 800081a:	230a      	movs	r3, #10
 800081c:	2202      	movs	r2, #2
 800081e:	a905      	add	r1, sp, #20
 8000820:	4807      	ldr	r0, [pc, #28]	; (8000840 <main_write_sensor+0x54>)
 8000822:	f009 fa70 	bl	8009d06 <HAL_SPI_Transmit>
	main_wait_20us();
 8000826:	f7ff ff3a 	bl	800069e <main_wait_20us>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	4621      	mov	r1, r4
 800082e:	4628      	mov	r0, r5
 8000830:	f003 f9fa 	bl	8003c28 <HAL_GPIO_WritePin>
	main_wait_160us();
 8000834:	f7ff ff26 	bl	8000684 <main_wait_160us>
	main_wait_20us();
 8000838:	f7ff ff31 	bl	800069e <main_wait_20us>
}
 800083c:	b007      	add	sp, #28
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	20001a20 	.word	0x20001a20

08000844 <main_write_sensor_burst>:
void main_write_sensor_burst(uint8_t data){
 8000844:	b500      	push	{lr}
 8000846:	b083      	sub	sp, #12
 8000848:	a902      	add	r1, sp, #8
 800084a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi2, &data, 1, 10);
 800084e:	230a      	movs	r3, #10
 8000850:	2201      	movs	r2, #1
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <main_write_sensor_burst+0x20>)
 8000854:	f009 fa57 	bl	8009d06 <HAL_SPI_Transmit>
	main_wait_20us();
 8000858:	f7ff ff21 	bl	800069e <main_wait_20us>
}
 800085c:	b003      	add	sp, #12
 800085e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000862:	bf00      	nop
 8000864:	20001a20 	.word	0x20001a20

08000868 <main_read_sensor_motion_burst>:
void main_read_sensor_motion_burst(uint8_t *data ){
 8000868:	b508      	push	{r3, lr}
	HAL_SPI_Receive(&hspi2,data,12,100);
 800086a:	2364      	movs	r3, #100	; 0x64
 800086c:	220c      	movs	r2, #12
 800086e:	4601      	mov	r1, r0
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <main_read_sensor_motion_burst+0x14>)
 8000872:	f009 fca1 	bl	800a1b8 <HAL_SPI_Receive>
	main_wait_1us();
 8000876:	f7ff ff1e 	bl	80006b6 <main_wait_1us>
}
 800087a:	bd08      	pop	{r3, pc}
 800087c:	20001a20 	.word	0x20001a20

08000880 <main_transmit_spi>:
void main_transmit_spi(uint8_t data){
 8000880:	b500      	push	{lr}
 8000882:	b083      	sub	sp, #12
	uint8_t data_out = data;
 8000884:	a902      	add	r1, sp, #8
 8000886:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi2, &data_out, 1, 10);
 800088a:	230a      	movs	r3, #10
 800088c:	2201      	movs	r2, #1
 800088e:	4803      	ldr	r0, [pc, #12]	; (800089c <main_transmit_spi+0x1c>)
 8000890:	f009 fa39 	bl	8009d06 <HAL_SPI_Transmit>
}
 8000894:	b003      	add	sp, #12
 8000896:	f85d fb04 	ldr.w	pc, [sp], #4
 800089a:	bf00      	nop
 800089c:	20001a20 	.word	0x20001a20

080008a0 <TM7_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TM7_IRQHandler(void){
 80008a0:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim7);
 80008a2:	4802      	ldr	r0, [pc, #8]	; (80008ac <TM7_IRQHandler+0xc>)
 80008a4:	f00b fbee 	bl	800c084 <HAL_TIM_IRQHandler>

}
 80008a8:	bd08      	pop	{r3, pc}
 80008aa:	bf00      	nop
 80008ac:	20001b8c 	.word	0x20001b8c

080008b0 <HAL_UART_RxCpltCallback>:

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b4:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 80008b8:	4604      	mov	r4, r0
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80008ba:	2026      	movs	r0, #38	; 0x26
 80008bc:	f001 fd4a 	bl	8002354 <HAL_NVIC_DisableIRQ>
	mavlink_message_t inmsg;
	mavlink_status_t msgStatus;
	if (huart->Instance == USART2){
 80008c0:	6822      	ldr	r2, [r4, #0]
 80008c2:	4bb1      	ldr	r3, [pc, #708]	; (8000b88 <HAL_UART_RxCpltCallback+0x2d8>)
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d006      	beq.n	80008d6 <HAL_UART_RxCpltCallback+0x26>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){

			mouseDriver_readMsg(inmsg);
		}
	}
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c8:	2026      	movs	r0, #38	; 0x26
 80008ca:	f001 fd35 	bl	8002338 <HAL_NVIC_EnableIRQ>
}
 80008ce:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 80008d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_UART_Receive_IT(&huart2, &inByte, 1);
 80008d6:	4cad      	ldr	r4, [pc, #692]	; (8000b8c <HAL_UART_RxCpltCallback+0x2dc>)
 80008d8:	2201      	movs	r2, #1
 80008da:	4621      	mov	r1, r4
 80008dc:	48ac      	ldr	r0, [pc, #688]	; (8000b90 <HAL_UART_RxCpltCallback+0x2e0>)
 80008de:	f00e fb8f 	bl	800f000 <HAL_UART_Receive_IT>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 80008e2:	7823      	ldrb	r3, [r4, #0]
 80008e4:	9346      	str	r3, [sp, #280]	; 0x118
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80008e6:	4bab      	ldr	r3, [pc, #684]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80008ec:	78db      	ldrb	r3, [r3, #3]
 80008ee:	2b0f      	cmp	r3, #15
 80008f0:	f200 8205 	bhi.w	8000cfe <HAL_UART_RxCpltCallback+0x44e>
 80008f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80008f8:	00100010 	.word	0x00100010
 80008fc:	00580036 	.word	0x00580036
 8000900:	00a10075 	.word	0x00a10075
 8000904:	00c900b5 	.word	0x00c900b5
 8000908:	010600dd 	.word	0x010600dd
 800090c:	01520124 	.word	0x01520124
 8000910:	01c40171 	.word	0x01c40171
 8000914:	022601c4 	.word	0x022601c4
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8000918:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800091a:	2bfd      	cmp	r3, #253	; 0xfd
 800091c:	d012      	beq.n	8000944 <HAL_UART_RxCpltCallback+0x94>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		} else if (c == MAVLINK_STX_MAVLINK1)
 800091e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000920:	2bfe      	cmp	r3, #254	; 0xfe
 8000922:	d171      	bne.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8000924:	4a9b      	ldr	r2, [pc, #620]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000926:	2302      	movs	r3, #2
 8000928:	70d3      	strb	r3, [r2, #3]
			rxmsg->len = 0;
 800092a:	4b9b      	ldr	r3, [pc, #620]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 800092c:	2100      	movs	r1, #0
 800092e:	70d9      	strb	r1, [r3, #3]
			rxmsg->magic = c;
 8000930:	21fe      	movs	r1, #254	; 0xfe
 8000932:	7099      	strb	r1, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8000934:	7b11      	ldrb	r1, [r2, #12]
 8000936:	f041 0101 	orr.w	r1, r1, #1
 800093a:	7311      	strb	r1, [r2, #12]
	msg->checksum = crcTmp;
 800093c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000940:	801a      	strh	r2, [r3, #0]
 8000942:	e061      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8000944:	4a93      	ldr	r2, [pc, #588]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000946:	2302      	movs	r3, #2
 8000948:	70d3      	strb	r3, [r2, #3]
			rxmsg->len = 0;
 800094a:	4b93      	ldr	r3, [pc, #588]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 800094c:	2100      	movs	r1, #0
 800094e:	70d9      	strb	r1, [r3, #3]
			rxmsg->magic = c;
 8000950:	21fd      	movs	r1, #253	; 0xfd
 8000952:	7099      	strb	r1, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8000954:	7b11      	ldrb	r1, [r2, #12]
 8000956:	f021 0101 	bic.w	r1, r1, #1
 800095a:	7311      	strb	r1, [r2, #12]
	msg->checksum = crcTmp;
 800095c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000960:	801a      	strh	r2, [r3, #0]
 8000962:	e051      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
 8000964:	498c      	ldr	r1, [pc, #560]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000966:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000968:	70ca      	strb	r2, [r1, #3]
			status->packet_idx = 0;
 800096a:	488a      	ldr	r0, [pc, #552]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 800096c:	2300      	movs	r3, #0
 800096e:	7103      	strb	r3, [r0, #4]
	uint16_t checksum = msg->checksum;
 8000970:	880c      	ldrh	r4, [r1, #0]
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000972:	ea82 0304 	eor.w	r3, r2, r4
        tmp ^= (tmp<<4);
 8000976:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800097a:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800097c:	091a      	lsrs	r2, r3, #4
 800097e:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 8000982:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000986:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 800098a:	800b      	strh	r3, [r1, #0]
			mavlink_update_checksum(rxmsg, c);
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800098c:	7b03      	ldrb	r3, [r0, #12]
 800098e:	f013 0f01 	tst.w	r3, #1
 8000992:	d005      	beq.n	80009a0 <HAL_UART_RxCpltCallback+0xf0>
                            rxmsg->incompat_flags = 0;
 8000994:	2200      	movs	r2, #0
 8000996:	710a      	strb	r2, [r1, #4]
                            rxmsg->compat_flags = 0;
 8000998:	714a      	strb	r2, [r1, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800099a:	2205      	movs	r2, #5
 800099c:	70c2      	strb	r2, [r0, #3]
 800099e:	e033      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80009a0:	4b7c      	ldr	r3, [pc, #496]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 80009a2:	2203      	movs	r2, #3
 80009a4:	70da      	strb	r2, [r3, #3]
 80009a6:	e02f      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
                        }
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 80009a8:	4b7b      	ldr	r3, [pc, #492]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 80009aa:	9a46      	ldr	r2, [sp, #280]	; 0x118
 80009ac:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80009ae:	f032 0301 	bics.w	r3, r2, #1
 80009b2:	d003      	beq.n	80009bc <HAL_UART_RxCpltCallback+0x10c>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
			status->msg_received = 0;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80009b4:	4b77      	ldr	r3, [pc, #476]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	70da      	strb	r2, [r3, #3]
 80009ba:	e025      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
	uint16_t checksum = msg->checksum;
 80009bc:	4976      	ldr	r1, [pc, #472]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 80009be:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80009c0:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80009c2:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 80009c4:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80009c8:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80009ca:	091a      	lsrs	r2, r3, #4
 80009cc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80009d0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80009d4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 80009d8:	800b      	strh	r3, [r1, #0]
			break;
		}
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 80009da:	4b6e      	ldr	r3, [pc, #440]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 80009dc:	2204      	movs	r2, #4
 80009de:	70da      	strb	r2, [r3, #3]
 80009e0:	e012      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		break;

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 80009e2:	496d      	ldr	r1, [pc, #436]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 80009e4:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80009e6:	714b      	strb	r3, [r1, #5]
	uint16_t checksum = msg->checksum;
 80009e8:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80009ea:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 80009ec:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80009f0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80009f2:	091a      	lsrs	r2, r3, #4
 80009f4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80009f8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80009fc:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000a00:	800b      	strh	r3, [r1, #0]
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8000a02:	4b64      	ldr	r3, [pc, #400]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a04:	2205      	movs	r2, #5
 8000a06:	70da      	strb	r2, [r3, #3]
		break;
	}

	bufferIndex++;
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8000a08:	4b62      	ldr	r3, [pc, #392]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
		// Count this packet as received
		status->packet_rx_success_count++;
	}

       if (r_message != NULL) {
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8000a0c:	4a62      	ldr	r2, [pc, #392]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000a0e:	78d2      	ldrb	r2, [r2, #3]
 8000a10:	f88d 234f 	strb.w	r2, [sp, #847]	; 0x34f
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
           r_mavlink_status->flags = status->flags;
       }
       status->parse_error = 0;
 8000a14:	4a5f      	ldr	r2, [pc, #380]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	7091      	strb	r1, [r2, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	f040 85f9 	bne.w	8001612 <HAL_UART_RxCpltCallback+0xd62>
    status->parse_error++;
 8000a20:	4b5c      	ldr	r3, [pc, #368]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	709a      	strb	r2, [r3, #2]
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 8000a2a:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000a2c:	2bfd      	cmp	r3, #253	; 0xfd
 8000a2e:	f000 85fa 	beq.w	8001626 <HAL_UART_RxCpltCallback+0xd76>
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8000a32:	4b58      	ldr	r3, [pc, #352]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	70da      	strb	r2, [r3, #3]
 8000a38:	e746      	b.n	80008c8 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->seq = c;
 8000a3a:	4957      	ldr	r1, [pc, #348]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000a3c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000a3e:	718b      	strb	r3, [r1, #6]
	uint16_t checksum = msg->checksum;
 8000a40:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000a42:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8000a44:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000a48:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000a4a:	091a      	lsrs	r2, r3, #4
 8000a4c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000a50:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000a54:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000a58:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8000a5a:	4b4e      	ldr	r3, [pc, #312]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	70da      	strb	r2, [r3, #3]
 8000a60:	e7d2      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->sysid = c;
 8000a62:	494d      	ldr	r1, [pc, #308]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000a64:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000a66:	71cb      	strb	r3, [r1, #7]
	uint16_t checksum = msg->checksum;
 8000a68:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000a6a:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8000a6c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000a70:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000a72:	091a      	lsrs	r2, r3, #4
 8000a74:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000a78:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000a7c:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000a80:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8000a82:	4b44      	ldr	r3, [pc, #272]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a84:	2207      	movs	r2, #7
 8000a86:	70da      	strb	r2, [r3, #3]
 8000a88:	e7be      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->compid = c;
 8000a8a:	4943      	ldr	r1, [pc, #268]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000a8c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8000a8e:	720b      	strb	r3, [r1, #8]
	uint16_t checksum = msg->checksum;
 8000a90:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000a92:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8000a94:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000a98:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000a9a:	091a      	lsrs	r2, r3, #4
 8000a9c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000aa0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000aa4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000aa8:	800b      	strh	r3, [r1, #0]
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	70da      	strb	r2, [r3, #3]
 8000ab0:	e7aa      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid = c;
 8000ab2:	4939      	ldr	r1, [pc, #228]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000ab4:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000ab6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8000aba:	724b      	strb	r3, [r1, #9]
 8000abc:	2300      	movs	r3, #0
 8000abe:	728b      	strb	r3, [r1, #10]
 8000ac0:	72cb      	strb	r3, [r1, #11]
	uint16_t checksum = msg->checksum;
 8000ac2:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000ac4:	ea82 0300 	eor.w	r3, r2, r0
        tmp ^= (tmp<<4);
 8000ac8:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000acc:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000ace:	091a      	lsrs	r2, r3, #4
 8000ad0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000ad4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000ad8:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000adc:	800b      	strh	r3, [r1, #0]
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000ae0:	7b1b      	ldrb	r3, [r3, #12]
 8000ae2:	f013 0f01 	tst.w	r3, #1
 8000ae6:	d009      	beq.n	8000afc <HAL_UART_RxCpltCallback+0x24c>
			if(rxmsg->len > 0) {
 8000ae8:	78cb      	ldrb	r3, [r1, #3]
 8000aea:	b11b      	cbz	r3, 8000af4 <HAL_UART_RxCpltCallback+0x244>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000aee:	220b      	movs	r2, #11
 8000af0:	70da      	strb	r2, [r3, #3]
 8000af2:	e789      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	70da      	strb	r2, [r3, #3]
 8000afa:	e785      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000afe:	2209      	movs	r2, #9
 8000b00:	70da      	strb	r2, [r3, #3]
 8000b02:	e781      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid |= c<<8;
 8000b04:	4924      	ldr	r1, [pc, #144]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b06:	688a      	ldr	r2, [r1, #8]
 8000b08:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8000b0a:	0223      	lsls	r3, r4, #8
 8000b0c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 8000b10:	724b      	strb	r3, [r1, #9]
 8000b12:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000b16:	728a      	strb	r2, [r1, #10]
 8000b18:	0c1b      	lsrs	r3, r3, #16
 8000b1a:	72cb      	strb	r3, [r1, #11]
	uint16_t checksum = msg->checksum;
 8000b1c:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000b1e:	ea84 0300 	eor.w	r3, r4, r0
        tmp ^= (tmp<<4);
 8000b22:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000b26:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000b28:	091a      	lsrs	r2, r3, #4
 8000b2a:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8000b2e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000b32:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000b36:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000b3a:	220a      	movs	r2, #10
 8000b3c:	70da      	strb	r2, [r3, #3]
 8000b3e:	e763      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8000b40:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b42:	6891      	ldr	r1, [r2, #8]
 8000b44:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8000b46:	0423      	lsls	r3, r4, #16
 8000b48:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 8000b4c:	7253      	strb	r3, [r2, #9]
 8000b4e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8000b52:	7291      	strb	r1, [r2, #10]
 8000b54:	0c1b      	lsrs	r3, r3, #16
 8000b56:	72d3      	strb	r3, [r2, #11]
	uint16_t checksum = msg->checksum;
 8000b58:	8810      	ldrh	r0, [r2, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000b5a:	ea84 0300 	eor.w	r3, r4, r0
        tmp ^= (tmp<<4);
 8000b5e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000b62:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000b64:	0919      	lsrs	r1, r3, #4
 8000b66:	ea81 2110 	eor.w	r1, r1, r0, lsr #8
 8000b6a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8000b6e:	ea81 03c3 	eor.w	r3, r1, r3, lsl #3
	msg->checksum = checksum;
 8000b72:	8013      	strh	r3, [r2, #0]
		if(rxmsg->len > 0){
 8000b74:	78d3      	ldrb	r3, [r2, #3]
 8000b76:	b11b      	cbz	r3, 8000b80 <HAL_UART_RxCpltCallback+0x2d0>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000b7a:	220b      	movs	r2, #11
 8000b7c:	70da      	strb	r2, [r3, #3]
 8000b7e:	e743      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <HAL_UART_RxCpltCallback+0x2e4>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	70da      	strb	r2, [r3, #3]
 8000b86:	e73f      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	20000488 	.word	0x20000488
 8000b90:	20001b0c 	.word	0x20001b0c
 8000b94:	20000918 	.word	0x20000918
 8000b98:	2000048c 	.word	0x2000048c
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8000b9c:	4a91      	ldr	r2, [pc, #580]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000b9e:	7913      	ldrb	r3, [r2, #4]
 8000ba0:	1c59      	adds	r1, r3, #1
 8000ba2:	b2c9      	uxtb	r1, r1
 8000ba4:	7111      	strb	r1, [r2, #4]
 8000ba6:	4890      	ldr	r0, [pc, #576]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000ba8:	4403      	add	r3, r0
 8000baa:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000bac:	731a      	strb	r2, [r3, #12]
	uint16_t checksum = msg->checksum;
 8000bae:	8804      	ldrh	r4, [r0, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000bb0:	ea82 0304 	eor.w	r3, r2, r4
        tmp ^= (tmp<<4);
 8000bb4:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000bb8:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000bba:	091a      	lsrs	r2, r3, #4
 8000bbc:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 8000bc0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000bc4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8000bc8:	8003      	strh	r3, [r0, #0]
		if (status->packet_idx == rxmsg->len)
 8000bca:	78c3      	ldrb	r3, [r0, #3]
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	f47f af1b 	bne.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8000bd2:	4b84      	ldr	r3, [pc, #528]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000bd4:	220c      	movs	r2, #12
 8000bd6:	70da      	strb	r2, [r3, #3]
 8000bd8:	e716      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8000bda:	4b83      	ldr	r3, [pc, #524]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	f3c2 2217 	ubfx	r2, r2, #8, #24
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8000be2:	2008      	movs	r0, #8
 8000be4:	2400      	movs	r4, #0
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8000be6:	4d81      	ldr	r5, [pc, #516]	; (8000dec <HAL_UART_RxCpltCallback+0x53c>)
            uint32_t mid = (low+1+high)/2;
 8000be8:	1823      	adds	r3, r4, r0
 8000bea:	3301      	adds	r3, #1
 8000bec:	085b      	lsrs	r3, r3, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8000bee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000bf2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	d334      	bcc.n	8000c64 <HAL_UART_RxCpltCallback+0x3b4>
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	d837      	bhi.n	8000c6e <HAL_UART_RxCpltCallback+0x3be>
        if (mavlink_message_crcs[low].msgid != msgid) {
 8000bfe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000c02:	487a      	ldr	r0, [pc, #488]	; (8000dec <HAL_UART_RxCpltCallback+0x53c>)
 8000c04:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	d032      	beq.n	8000c72 <HAL_UART_RxCpltCallback+0x3c2>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8000c0c:	2100      	movs	r1, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 8000c0e:	460b      	mov	r3, r1
	uint16_t checksum = msg->checksum;
 8000c10:	4875      	ldr	r0, [pc, #468]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000c12:	8804      	ldrh	r4, [r0, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000c14:	4063      	eors	r3, r4
        tmp ^= (tmp<<4);
 8000c16:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8000c1a:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000c1c:	0913      	lsrs	r3, r2, #4
 8000c1e:	ea83 2314 	eor.w	r3, r3, r4, lsr #8
 8000c22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c26:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
	msg->checksum = checksum;
 8000c2a:	8003      	strh	r3, [r0, #0]
		if (c != (rxmsg->checksum & 0xFF)) {
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000c30:	429a      	cmp	r2, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8000c32:	4b6c      	ldr	r3, [pc, #432]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000c34:	bf14      	ite	ne
 8000c36:	220e      	movne	r2, #14
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8000c38:	220d      	moveq	r2, #13
 8000c3a:	70da      	strb	r2, [r3, #3]
                rxmsg->ck[0] = c;
 8000c3c:	4b6a      	ldr	r3, [pc, #424]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000c3e:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000c40:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                if (e && status->packet_idx < e->max_msg_len) {
 8000c44:	2900      	cmp	r1, #0
 8000c46:	f43f aedf 	beq.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
 8000c4a:	4b66      	ldr	r3, [pc, #408]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	798a      	ldrb	r2, [r1, #6]
 8000c50:	4293      	cmp	r3, r2
 8000c52:	f4bf aed9 	bcs.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8000c56:	1ad2      	subs	r2, r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4865      	ldr	r0, [pc, #404]	; (8000df0 <HAL_UART_RxCpltCallback+0x540>)
 8000c5c:	4418      	add	r0, r3
 8000c5e:	f012 fd65 	bl	801372c <memset>
 8000c62:	e6d1      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
                high = mid-1;
 8000c64:	1e58      	subs	r0, r3, #1
        while (low < high) {
 8000c66:	42a0      	cmp	r0, r4
 8000c68:	d8be      	bhi.n	8000be8 <HAL_UART_RxCpltCallback+0x338>
 8000c6a:	4623      	mov	r3, r4
 8000c6c:	e7c7      	b.n	8000bfe <HAL_UART_RxCpltCallback+0x34e>
                low = mid;
 8000c6e:	461c      	mov	r4, r3
 8000c70:	e7f9      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x3b6>
        return &mavlink_message_crcs[low];
 8000c72:	4602      	mov	r2, r0
 8000c74:	0058      	lsls	r0, r3, #1
 8000c76:	18c1      	adds	r1, r0, r3
 8000c78:	eb02 0181 	add.w	r1, r2, r1, lsl #2
		uint8_t crc_extra = e?e->crc_extra:0;
 8000c7c:	790b      	ldrb	r3, [r1, #4]
 8000c7e:	e7c7      	b.n	8000c10 <HAL_UART_RxCpltCallback+0x360>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8000c80:	2b0e      	cmp	r3, #14
 8000c82:	d005      	beq.n	8000c90 <HAL_UART_RxCpltCallback+0x3e0>
 8000c84:	4b58      	ldr	r3, [pc, #352]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000c8a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 8000c8e:	d017      	beq.n	8000cc0 <HAL_UART_RxCpltCallback+0x410>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8000c90:	4b54      	ldr	r3, [pc, #336]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000c92:	2202      	movs	r2, #2
 8000c94:	701a      	strb	r2, [r3, #0]
		rxmsg->ck[1] = c;
 8000c96:	4b54      	ldr	r3, [pc, #336]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000c98:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8000c9a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	f013 0f01 	tst.w	r3, #1
 8000ca4:	d010      	beq.n	8000cc8 <HAL_UART_RxCpltCallback+0x418>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8000ca6:	4b4f      	ldr	r3, [pc, #316]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000ca8:	220f      	movs	r2, #15
 8000caa:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8000cac:	220d      	movs	r2, #13
 8000cae:	735a      	strb	r2, [r3, #13]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	f43f aea8 	beq.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e6a3      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x158>
			status->msg_received = MAVLINK_FRAMING_OK;
 8000cc0:	4b48      	ldr	r3, [pc, #288]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e7e6      	b.n	8000c96 <HAL_UART_RxCpltCallback+0x3e6>
			if (status->signing &&
 8000cc8:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	b173      	cbz	r3, 8000cec <HAL_UART_RxCpltCallback+0x43c>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8000cd0:	b12b      	cbz	r3, 8000cde <HAL_UART_RxCpltCallback+0x42e>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8000cd2:	4a45      	ldr	r2, [pc, #276]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000cd4:	6891      	ldr	r1, [r2, #8]
 8000cd6:	0a09      	lsrs	r1, r1, #8
 8000cd8:	4842      	ldr	r0, [pc, #264]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cda:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8000cdc:	b930      	cbnz	r0, 8000cec <HAL_UART_RxCpltCallback+0x43c>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d002      	beq.n	8000cec <HAL_UART_RxCpltCallback+0x43c>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8000ce6:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000ce8:	2203      	movs	r2, #3
 8000cea:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8000cec:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	70da      	strb	r2, [r3, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8000cf2:	f240 1223 	movw	r2, #291	; 0x123
 8000cf6:	493c      	ldr	r1, [pc, #240]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000cf8:	a8d3      	add	r0, sp, #844	; 0x34c
 8000cfa:	f7ff faa9 	bl	8000250 <memcpy>
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8000cfe:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	f47f ae82 	bne.w	8000a0c <HAL_UART_RxCpltCallback+0x15c>
		status->current_rx_seq = rxmsg->seq;
 8000d08:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d0a:	4a37      	ldr	r2, [pc, #220]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000d0c:	7992      	ldrb	r2, [r2, #6]
 8000d0e:	715a      	strb	r2, [r3, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8000d10:	891b      	ldrh	r3, [r3, #8]
 8000d12:	b913      	cbnz	r3, 8000d1a <HAL_UART_RxCpltCallback+0x46a>
 8000d14:	4a33      	ldr	r2, [pc, #204]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	8151      	strh	r1, [r2, #10]
		status->packet_rx_success_count++;
 8000d1a:	4a32      	ldr	r2, [pc, #200]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	8113      	strh	r3, [r2, #8]
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8000d20:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000d22:	78db      	ldrb	r3, [r3, #3]
 8000d24:	f88d 334f 	strb.w	r3, [sp, #847]	; 0x34f
       status->parse_error = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	7093      	strb	r3, [r2, #2]
			mouseDriver_readMsg(inmsg);
 8000d2c:	acd3      	add	r4, sp, #844	; 0x34c
 8000d2e:	f240 1213 	movw	r2, #275	; 0x113
 8000d32:	a9d7      	add	r1, sp, #860	; 0x35c
 8000d34:	4668      	mov	r0, sp
 8000d36:	f7ff fa8b 	bl	8000250 <memcpy>
 8000d3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d3e:	f012 fa65 	bl	801320c <mouseDriver_readMsg>
 8000d42:	e5c1      	b.n	80008c8 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8000d44:	4927      	ldr	r1, [pc, #156]	; (8000de4 <HAL_UART_RxCpltCallback+0x534>)
 8000d46:	7b4b      	ldrb	r3, [r1, #13]
 8000d48:	4a2a      	ldr	r2, [pc, #168]	; (8000df4 <HAL_UART_RxCpltCallback+0x544>)
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	9846      	ldr	r0, [sp, #280]	; 0x118
 8000d4e:	f882 0116 	strb.w	r0, [r2, #278]	; 0x116
		status->signature_wait--;
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	734b      	strb	r3, [r1, #13]
		if (status->signature_wait == 0) {
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f47f ae55 	bne.w	8000a08 <HAL_UART_RxCpltCallback+0x158>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8000d5e:	690d      	ldr	r5, [r1, #16]
 8000d60:	954b      	str	r5, [sp, #300]	; 0x12c
	if (signing == NULL) {
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 83c9 	beq.w	80014fa <HAL_UART_RxCpltCallback+0xc4a>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8000d68:	694b      	ldr	r3, [r1, #20]
 8000d6a:	9354      	str	r3, [sp, #336]	; 0x150
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
    m->sz[0] = 0;
    m->sz[1] = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9379      	str	r3, [sp, #484]	; 0x1e4
    A = 0x6a09e667;
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_UART_RxCpltCallback+0x548>)
 8000d72:	937a      	str	r3, [sp, #488]	; 0x1e8
    B = 0xbb67ae85;
 8000d74:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <HAL_UART_RxCpltCallback+0x54c>)
 8000d76:	937b      	str	r3, [sp, #492]	; 0x1ec
    C = 0x3c6ef372;
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_UART_RxCpltCallback+0x550>)
 8000d7a:	937c      	str	r3, [sp, #496]	; 0x1f0
    D = 0xa54ff53a;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_UART_RxCpltCallback+0x554>)
 8000d7e:	937d      	str	r3, [sp, #500]	; 0x1f4
    E = 0x510e527f;
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <HAL_UART_RxCpltCallback+0x558>)
 8000d82:	937e      	str	r3, [sp, #504]	; 0x1f8
    F = 0x9b05688c;
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_UART_RxCpltCallback+0x55c>)
 8000d86:	937f      	str	r3, [sp, #508]	; 0x1fc
    G = 0x1f83d9ab;
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <HAL_UART_RxCpltCallback+0x560>)
 8000d8a:	9380      	str	r3, [sp, #512]	; 0x200
    H = 0x5be0cd19;
 8000d8c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8000d90:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8000d94:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8000d98:	9381      	str	r3, [sp, #516]	; 0x204
    while(len > 0){
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000d9a:	ac82      	add	r4, sp, #520	; 0x208
 8000d9c:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8000da0:	6869      	ldr	r1, [r5, #4]
 8000da2:	68aa      	ldr	r2, [r5, #8]
 8000da4:	68eb      	ldr	r3, [r5, #12]
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	6928      	ldr	r0, [r5, #16]
 8000daa:	6969      	ldr	r1, [r5, #20]
 8000dac:	69aa      	ldr	r2, [r5, #24]
 8000dae:	69eb      	ldr	r3, [r5, #28]
 8000db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_UART_RxCpltCallback+0x538>)
 8000db4:	78db      	ldrb	r3, [r3, #3]
 8000db6:	330a      	adds	r3, #10
 8000db8:	9348      	str	r3, [sp, #288]	; 0x120
    m->sz[0] += len * 8;
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dc0:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8000dc2:	2bff      	cmp	r3, #255	; 0xff
	++m->sz[1];
 8000dc4:	bf9c      	itt	ls
 8000dc6:	2301      	movls	r3, #1
 8000dc8:	9379      	strls	r3, [sp, #484]	; 0x1e4
    while(len > 0){
 8000dca:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 80dd 	beq.w	8000f8c <HAL_UART_RxCpltCallback+0x6dc>
    const unsigned char *p = (const unsigned char *)v;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_UART_RxCpltCallback+0x564>)
 8000dd4:	9349      	str	r3, [sp, #292]	; 0x124
    offset = (old_sz / 8) % 64;
 8000dd6:	2520      	movs	r5, #32
 8000dd8:	ab75      	add	r3, sp, #468	; 0x1d4
 8000dda:	9353      	str	r3, [sp, #332]	; 0x14c
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000ddc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8000e18 <HAL_UART_RxCpltCallback+0x568>
 8000de0:	e06a      	b.n	8000eb8 <HAL_UART_RxCpltCallback+0x608>
 8000de2:	bf00      	nop
 8000de4:	20000918 	.word	0x20000918
 8000de8:	2000048c 	.word	0x2000048c
 8000dec:	08013a48 	.word	0x08013a48
 8000df0:	20000498 	.word	0x20000498
 8000df4:	20000499 	.word	0x20000499
 8000df8:	6a09e667 	.word	0x6a09e667
 8000dfc:	bb67ae85 	.word	0xbb67ae85
 8000e00:	3c6ef372 	.word	0x3c6ef372
 8000e04:	a54ff53a 	.word	0xa54ff53a
 8000e08:	510e527f 	.word	0x510e527f
 8000e0c:	9b05688c 	.word	0x9b05688c
 8000e10:	1f83d9ab 	.word	0x1f83d9ab
 8000e14:	2000048e 	.word	0x2000048e
 8000e18:	08013ab4 	.word	0x08013ab4
    for (i = 0; i < 64; i++) {
 8000e1c:	4635      	mov	r5, r6
 8000e1e:	4606      	mov	r6, r0
	AA = T1 + T2;
 8000e20:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 8000e22:	4667      	mov	r7, ip
 8000e24:	468c      	mov	ip, r1
	EE = DD + T1;
 8000e26:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000e28:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8000e2c:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8000e30:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8000e34:	ea27 0a01 	bic.w	sl, r7, r1
 8000e38:	ea01 0b0c 	and.w	fp, r1, ip
 8000e3c:	ea8a 0a0b 	eor.w	sl, sl, fp
 8000e40:	4453      	add	r3, sl
 8000e42:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8000e46:	4413      	add	r3, r2
 8000e48:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8000e50:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000e52:	ea4f 3270 	mov.w	r2, r0, ror #13
 8000e56:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8000e5a:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8000e5e:	ea86 0a05 	eor.w	sl, r6, r5
 8000e62:	ea0a 0a00 	and.w	sl, sl, r0
 8000e66:	ea06 0b05 	and.w	fp, r6, r5
 8000e6a:	ea8a 0a0b 	eor.w	sl, sl, fp
 8000e6e:	4452      	add	r2, sl
	EE = DD + T1;
 8000e70:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 8000e74:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 8000e76:	3401      	adds	r4, #1
 8000e78:	9747      	str	r7, [sp, #284]	; 0x11c
 8000e7a:	46ae      	mov	lr, r5
 8000e7c:	2c40      	cmp	r4, #64	; 0x40
 8000e7e:	d1cd      	bne.n	8000e1c <HAL_UART_RxCpltCallback+0x56c>
    A += AA;
 8000e80:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8000e82:	441a      	add	r2, r3
 8000e84:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 8000e86:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8000e88:	4403      	add	r3, r0
 8000e8a:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 8000e8c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8000e8e:	4433      	add	r3, r6
 8000e90:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 8000e92:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8000e94:	442b      	add	r3, r5
 8000e96:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 8000e98:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8000e9a:	445b      	add	r3, fp
 8000e9c:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 8000e9e:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8000ea0:	440b      	add	r3, r1
 8000ea2:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 8000ea4:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8000ea6:	4463      	add	r3, ip
 8000ea8:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 8000eaa:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8000eac:	443b      	add	r3, r7
 8000eae:	9381      	str	r3, [sp, #516]	; 0x204
                p2[1] = p1[2];
                p2[2] = p1[1];
                p2[3] = p1[0];
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8000eb0:	2500      	movs	r5, #0
    while(len > 0){
 8000eb2:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d069      	beq.n	8000f8c <HAL_UART_RxCpltCallback+0x6dc>
	uint32_t l = 64 - offset;
 8000eb8:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 8000ebc:	9e48      	ldr	r6, [sp, #288]	; 0x120
 8000ebe:	42b4      	cmp	r4, r6
 8000ec0:	bf28      	it	cs
 8000ec2:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	9f49      	ldr	r7, [sp, #292]	; 0x124
 8000ec8:	4639      	mov	r1, r7
 8000eca:	ab82      	add	r3, sp, #520	; 0x208
 8000ecc:	1958      	adds	r0, r3, r5
 8000ece:	f7ff f9bf 	bl	8000250 <memcpy>
	offset += l;
 8000ed2:	4425      	add	r5, r4
	p += l;
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4423      	add	r3, r4
 8000ed8:	9349      	str	r3, [sp, #292]	; 0x124
	len -= l;
 8000eda:	1b33      	subs	r3, r6, r4
 8000edc:	9348      	str	r3, [sp, #288]	; 0x120
	if(offset == 64){
 8000ede:	2d40      	cmp	r5, #64	; 0x40
 8000ee0:	d1e7      	bne.n	8000eb2 <HAL_UART_RxCpltCallback+0x602>
 8000ee2:	ab78      	add	r3, sp, #480	; 0x1e0
 8000ee4:	a888      	add	r0, sp, #544	; 0x220
 8000ee6:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 8000ee8:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8000eec:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8000eee:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8000ef2:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 8000ef4:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8000ef8:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8000efa:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000efe:	70d1      	strb	r1, [r2, #3]
 8000f00:	3304      	adds	r3, #4
 8000f02:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 8000f04:	4298      	cmp	r0, r3
 8000f06:	d1ef      	bne.n	8000ee8 <HAL_UART_RxCpltCallback+0x638>
    AA = A;
 8000f08:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8000f0a:	934a      	str	r3, [sp, #296]	; 0x128
    BB = B;
 8000f0c:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 8000f0e:	934c      	str	r3, [sp, #304]	; 0x130
    CC = C;
 8000f10:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 8000f12:	934d      	str	r3, [sp, #308]	; 0x134
    DD = D;
 8000f14:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 8000f16:	934e      	str	r3, [sp, #312]	; 0x138
    EE = E;
 8000f18:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8000f1a:	934f      	str	r3, [sp, #316]	; 0x13c
    FF = F;
 8000f1c:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 8000f1e:	9350      	str	r3, [sp, #320]	; 0x140
    GG = G;
 8000f20:	9b80      	ldr	r3, [sp, #512]	; 0x200
 8000f22:	9351      	str	r3, [sp, #324]	; 0x144
    HH = H;
 8000f24:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8000f26:	9352      	str	r3, [sp, #328]	; 0x148
 8000f28:	ab65      	add	r3, sp, #404	; 0x194
 8000f2a:	aa91      	add	r2, sp, #580	; 0x244
 8000f2c:	9853      	ldr	r0, [sp, #332]	; 0x14c
	data[i] = in[i];
 8000f2e:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8000f32:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 8000f36:	4298      	cmp	r0, r3
 8000f38:	d1f9      	bne.n	8000f2e <HAL_UART_RxCpltCallback+0x67e>
 8000f3a:	ac92      	add	r4, sp, #584	; 0x248
 8000f3c:	adc2      	add	r5, sp, #776	; 0x308
 8000f3e:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000f40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 8000f42:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000f46:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8000f4a:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 8000f4e:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8000f52:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000f54:	6800      	ldr	r0, [r0, #0]
 8000f56:	4402      	add	r2, r0
 8000f58:	4413      	add	r3, r2
 8000f5a:	ea4f 42b1 	mov.w	r2, r1, ror #18
 8000f5e:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 8000f62:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 8000f66:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000f68:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	d1e7      	bne.n	8000f3e <HAL_UART_RxCpltCallback+0x68e>
    DD = D;
 8000f6e:	f8dd e138 	ldr.w	lr, [sp, #312]	; 0x138
    CC = C;
 8000f72:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    BB = B;
 8000f74:	9e4c      	ldr	r6, [sp, #304]	; 0x130
    AA = A;
 8000f76:	984a      	ldr	r0, [sp, #296]	; 0x128
    GG = G;
 8000f78:	9f51      	ldr	r7, [sp, #324]	; 0x144
    FF = F;
 8000f7a:	f8dd c140 	ldr.w	ip, [sp, #320]	; 0x140
    HH = H;
 8000f7e:	9a52      	ldr	r2, [sp, #328]	; 0x148
    EE = E;
 8000f80:	994f      	ldr	r1, [sp, #316]	; 0x13c
    for (i = 0; i < 64; i++) {
 8000f82:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000f84:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8000f88:	9247      	str	r2, [sp, #284]	; 0x11c
 8000f8a:	e74d      	b.n	8000e28 <HAL_UART_RxCpltCallback+0x578>
    uint32_t old_sz = m->sz[0];
 8000f8c:	9d78      	ldr	r5, [sp, #480]	; 0x1e0
    m->sz[0] += len * 8;
 8000f8e:	f105 0310 	add.w	r3, r5, #16
 8000f92:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8000f94:	429d      	cmp	r5, r3
 8000f96:	d902      	bls.n	8000f9e <HAL_UART_RxCpltCallback+0x6ee>
	++m->sz[1];
 8000f98:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	9379      	str	r3, [sp, #484]	; 0x1e4
    offset = (old_sz / 8) % 64;
 8000f9e:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    const unsigned char *p = (const unsigned char *)v;
 8000fa2:	4b6a      	ldr	r3, [pc, #424]	; (800114c <HAL_UART_RxCpltCallback+0x89c>)
 8000fa4:	9348      	str	r3, [sp, #288]	; 0x120
    offset = (old_sz / 8) % 64;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	9349      	str	r3, [sp, #292]	; 0x124
 8000faa:	ab75      	add	r3, sp, #468	; 0x1d4
 8000fac:	9353      	str	r3, [sp, #332]	; 0x14c
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000fae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001154 <HAL_UART_RxCpltCallback+0x8a4>
 8000fb2:	e04d      	b.n	8001050 <HAL_UART_RxCpltCallback+0x7a0>
    for (i = 0; i < 64; i++) {
 8000fb4:	4635      	mov	r5, r6
 8000fb6:	4606      	mov	r6, r0
	AA = T1 + T2;
 8000fb8:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 8000fba:	4667      	mov	r7, ip
 8000fbc:	468c      	mov	ip, r1
	EE = DD + T1;
 8000fbe:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000fc0:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8000fc4:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8000fc8:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8000fcc:	ea27 0a01 	bic.w	sl, r7, r1
 8000fd0:	ea01 0b0c 	and.w	fp, r1, ip
 8000fd4:	ea8a 0a0b 	eor.w	sl, sl, fp
 8000fd8:	4453      	add	r3, sl
 8000fda:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8000fde:	4413      	add	r3, r2
 8000fe0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8000fe8:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000fea:	ea4f 3270 	mov.w	r2, r0, ror #13
 8000fee:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8000ff2:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8000ff6:	ea86 0a05 	eor.w	sl, r6, r5
 8000ffa:	ea0a 0a00 	and.w	sl, sl, r0
 8000ffe:	ea06 0b05 	and.w	fp, r6, r5
 8001002:	ea8a 0a0b 	eor.w	sl, sl, fp
 8001006:	4452      	add	r2, sl
	EE = DD + T1;
 8001008:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 800100c:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 800100e:	3401      	adds	r4, #1
 8001010:	9747      	str	r7, [sp, #284]	; 0x11c
 8001012:	46ae      	mov	lr, r5
 8001014:	2c40      	cmp	r4, #64	; 0x40
 8001016:	d1cd      	bne.n	8000fb4 <HAL_UART_RxCpltCallback+0x704>
    A += AA;
 8001018:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 800101a:	441a      	add	r2, r3
 800101c:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 800101e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8001020:	4403      	add	r3, r0
 8001022:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 8001024:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8001026:	4433      	add	r3, r6
 8001028:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 800102a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800102c:	442b      	add	r3, r5
 800102e:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 8001030:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8001032:	445b      	add	r3, fp
 8001034:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 8001036:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8001038:	440b      	add	r3, r1
 800103a:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 800103c:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800103e:	4463      	add	r3, ip
 8001040:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 8001042:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8001044:	443b      	add	r3, r7
 8001046:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 8001048:	2500      	movs	r5, #0
    while(len > 0){
 800104a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800104c:	2b00      	cmp	r3, #0
 800104e:	d069      	beq.n	8001124 <HAL_UART_RxCpltCallback+0x874>
	uint32_t l = 64 - offset;
 8001050:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 8001054:	9e49      	ldr	r6, [sp, #292]	; 0x124
 8001056:	42b4      	cmp	r4, r6
 8001058:	bf28      	it	cs
 800105a:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 800105c:	4622      	mov	r2, r4
 800105e:	9f48      	ldr	r7, [sp, #288]	; 0x120
 8001060:	4639      	mov	r1, r7
 8001062:	ab82      	add	r3, sp, #520	; 0x208
 8001064:	1958      	adds	r0, r3, r5
 8001066:	f7ff f8f3 	bl	8000250 <memcpy>
	offset += l;
 800106a:	4425      	add	r5, r4
	p += l;
 800106c:	463b      	mov	r3, r7
 800106e:	4423      	add	r3, r4
 8001070:	9348      	str	r3, [sp, #288]	; 0x120
	len -= l;
 8001072:	1b33      	subs	r3, r6, r4
 8001074:	9349      	str	r3, [sp, #292]	; 0x124
	if(offset == 64){
 8001076:	2d40      	cmp	r5, #64	; 0x40
 8001078:	d1e7      	bne.n	800104a <HAL_UART_RxCpltCallback+0x79a>
 800107a:	ab78      	add	r3, sp, #480	; 0x1e0
 800107c:	a888      	add	r0, sp, #544	; 0x220
 800107e:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 8001080:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8001084:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8001086:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 800108a:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 800108c:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8001090:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8001092:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001096:	70d1      	strb	r1, [r2, #3]
 8001098:	3304      	adds	r3, #4
 800109a:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 800109c:	4283      	cmp	r3, r0
 800109e:	d1ef      	bne.n	8001080 <HAL_UART_RxCpltCallback+0x7d0>
    AA = A;
 80010a0:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 80010a2:	934a      	str	r3, [sp, #296]	; 0x128
    BB = B;
 80010a4:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 80010a6:	934c      	str	r3, [sp, #304]	; 0x130
    CC = C;
 80010a8:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 80010aa:	934d      	str	r3, [sp, #308]	; 0x134
    DD = D;
 80010ac:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 80010ae:	934e      	str	r3, [sp, #312]	; 0x138
    EE = E;
 80010b0:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 80010b2:	934f      	str	r3, [sp, #316]	; 0x13c
    FF = F;
 80010b4:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 80010b6:	9350      	str	r3, [sp, #320]	; 0x140
    GG = G;
 80010b8:	9b80      	ldr	r3, [sp, #512]	; 0x200
 80010ba:	9351      	str	r3, [sp, #324]	; 0x144
    HH = H;
 80010bc:	9b81      	ldr	r3, [sp, #516]	; 0x204
 80010be:	9352      	str	r3, [sp, #328]	; 0x148
 80010c0:	ab65      	add	r3, sp, #404	; 0x194
 80010c2:	aa91      	add	r2, sp, #580	; 0x244
 80010c4:	9853      	ldr	r0, [sp, #332]	; 0x14c
	data[i] = in[i];
 80010c6:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80010ca:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 80010ce:	4283      	cmp	r3, r0
 80010d0:	d1f9      	bne.n	80010c6 <HAL_UART_RxCpltCallback+0x816>
 80010d2:	ac92      	add	r4, sp, #584	; 0x248
 80010d4:	adc2      	add	r5, sp, #776	; 0x308
 80010d6:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80010d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 80010da:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80010de:	ea4f 43f2 	mov.w	r3, r2, ror #19
 80010e2:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 80010e6:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80010ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80010ec:	6800      	ldr	r0, [r0, #0]
 80010ee:	4402      	add	r2, r0
 80010f0:	4413      	add	r3, r2
 80010f2:	ea4f 42b1 	mov.w	r2, r1, ror #18
 80010f6:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 80010fa:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80010fe:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001100:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8001102:	42ac      	cmp	r4, r5
 8001104:	d1e7      	bne.n	80010d6 <HAL_UART_RxCpltCallback+0x826>
    DD = D;
 8001106:	f8dd e138 	ldr.w	lr, [sp, #312]	; 0x138
    CC = C;
 800110a:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    BB = B;
 800110c:	9e4c      	ldr	r6, [sp, #304]	; 0x130
    AA = A;
 800110e:	984a      	ldr	r0, [sp, #296]	; 0x128
    GG = G;
 8001110:	9f51      	ldr	r7, [sp, #324]	; 0x144
    FF = F;
 8001112:	f8dd c140 	ldr.w	ip, [sp, #320]	; 0x140
    HH = H;
 8001116:	9a52      	ldr	r2, [sp, #328]	; 0x148
    EE = E;
 8001118:	994f      	ldr	r1, [sp, #316]	; 0x13c
    for (i = 0; i < 64; i++) {
 800111a:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800111c:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8001120:	9247      	str	r2, [sp, #284]	; 0x11c
 8001122:	e74d      	b.n	8000fc0 <HAL_UART_RxCpltCallback+0x710>
    uint32_t old_sz = m->sz[0];
 8001124:	9d78      	ldr	r5, [sp, #480]	; 0x1e0
    m->sz[0] += len * 8;
 8001126:	f105 0338 	add.w	r3, r5, #56	; 0x38
 800112a:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 800112c:	429d      	cmp	r5, r3
 800112e:	d902      	bls.n	8001136 <HAL_UART_RxCpltCallback+0x886>
	++m->sz[1];
 8001130:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 8001132:	3301      	adds	r3, #1
 8001134:	9379      	str	r3, [sp, #484]	; 0x1e4
    offset = (old_sz / 8) % 64;
 8001136:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    const unsigned char *p = (const unsigned char *)v;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_UART_RxCpltCallback+0x8a0>)
 800113c:	934a      	str	r3, [sp, #296]	; 0x128
    offset = (old_sz / 8) % 64;
 800113e:	2307      	movs	r3, #7
 8001140:	9348      	str	r3, [sp, #288]	; 0x120
 8001142:	ab75      	add	r3, sp, #468	; 0x1d4
 8001144:	9355      	str	r3, [sp, #340]	; 0x154
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001146:	f8df 800c 	ldr.w	r8, [pc, #12]	; 8001154 <HAL_UART_RxCpltCallback+0x8a4>
 800114a:	e053      	b.n	80011f4 <HAL_UART_RxCpltCallback+0x944>
 800114c:	200005a0 	.word	0x200005a0
 8001150:	200005a2 	.word	0x200005a2
 8001154:	08013ab4 	.word	0x08013ab4
    for (i = 0; i < 64; i++) {
 8001158:	4635      	mov	r5, r6
 800115a:	4606      	mov	r6, r0
	AA = T1 + T2;
 800115c:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 800115e:	4667      	mov	r7, ip
 8001160:	468c      	mov	ip, r1
	EE = DD + T1;
 8001162:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001164:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8001168:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 800116c:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8001170:	ea27 0a01 	bic.w	sl, r7, r1
 8001174:	ea01 0b0c 	and.w	fp, r1, ip
 8001178:	ea8a 0a0b 	eor.w	sl, sl, fp
 800117c:	4453      	add	r3, sl
 800117e:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8001182:	4413      	add	r3, r2
 8001184:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8001188:	4413      	add	r3, r2
 800118a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800118c:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800118e:	ea4f 3270 	mov.w	r2, r0, ror #13
 8001192:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8001196:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 800119a:	ea86 0a05 	eor.w	sl, r6, r5
 800119e:	ea0a 0a00 	and.w	sl, sl, r0
 80011a2:	ea06 0b05 	and.w	fp, r6, r5
 80011a6:	ea8a 0a0b 	eor.w	sl, sl, fp
 80011aa:	4452      	add	r2, sl
	EE = DD + T1;
 80011ac:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 80011b0:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 80011b2:	3401      	adds	r4, #1
 80011b4:	9747      	str	r7, [sp, #284]	; 0x11c
 80011b6:	46ae      	mov	lr, r5
 80011b8:	2c40      	cmp	r4, #64	; 0x40
 80011ba:	d1cd      	bne.n	8001158 <HAL_UART_RxCpltCallback+0x8a8>
    A += AA;
 80011bc:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 80011be:	441a      	add	r2, r3
 80011c0:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 80011c2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80011c4:	4403      	add	r3, r0
 80011c6:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 80011c8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80011ca:	4433      	add	r3, r6
 80011cc:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 80011ce:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80011d0:	442b      	add	r3, r5
 80011d2:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 80011d4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80011d6:	445b      	add	r3, fp
 80011d8:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 80011da:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80011dc:	440b      	add	r3, r1
 80011de:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 80011e0:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80011e2:	4463      	add	r3, ip
 80011e4:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 80011e6:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 80011e8:	443b      	add	r3, r7
 80011ea:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 80011ec:	9d49      	ldr	r5, [sp, #292]	; 0x124
    while(len > 0){
 80011ee:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d069      	beq.n	80012c8 <HAL_UART_RxCpltCallback+0xa18>
	uint32_t l = 64 - offset;
 80011f4:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 80011f8:	9e48      	ldr	r6, [sp, #288]	; 0x120
 80011fa:	42b4      	cmp	r4, r6
 80011fc:	bf28      	it	cs
 80011fe:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8001200:	4622      	mov	r2, r4
 8001202:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8001204:	4639      	mov	r1, r7
 8001206:	ab82      	add	r3, sp, #520	; 0x208
 8001208:	1958      	adds	r0, r3, r5
 800120a:	f7ff f821 	bl	8000250 <memcpy>
	offset += l;
 800120e:	4425      	add	r5, r4
	p += l;
 8001210:	463b      	mov	r3, r7
 8001212:	4423      	add	r3, r4
 8001214:	934a      	str	r3, [sp, #296]	; 0x128
	len -= l;
 8001216:	1b33      	subs	r3, r6, r4
 8001218:	9348      	str	r3, [sp, #288]	; 0x120
	if(offset == 64){
 800121a:	2d40      	cmp	r5, #64	; 0x40
 800121c:	d1e7      	bne.n	80011ee <HAL_UART_RxCpltCallback+0x93e>
 800121e:	ab78      	add	r3, sp, #480	; 0x1e0
 8001220:	a888      	add	r0, sp, #544	; 0x220
 8001222:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 8001224:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8001228:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 800122a:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 800122e:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 8001230:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8001234:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8001236:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800123a:	70d1      	strb	r1, [r2, #3]
 800123c:	3304      	adds	r3, #4
 800123e:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 8001240:	4298      	cmp	r0, r3
 8001242:	d1ef      	bne.n	8001224 <HAL_UART_RxCpltCallback+0x974>
    AA = A;
 8001244:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8001246:	934c      	str	r3, [sp, #304]	; 0x130
    BB = B;
 8001248:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 800124a:	934d      	str	r3, [sp, #308]	; 0x134
    CC = C;
 800124c:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 800124e:	934e      	str	r3, [sp, #312]	; 0x138
    DD = D;
 8001250:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 8001252:	934f      	str	r3, [sp, #316]	; 0x13c
    EE = E;
 8001254:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8001256:	9350      	str	r3, [sp, #320]	; 0x140
    FF = F;
 8001258:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 800125a:	9351      	str	r3, [sp, #324]	; 0x144
    GG = G;
 800125c:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800125e:	9352      	str	r3, [sp, #328]	; 0x148
    HH = H;
 8001260:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8001262:	9353      	str	r3, [sp, #332]	; 0x14c
 8001264:	ab65      	add	r3, sp, #404	; 0x194
 8001266:	aa91      	add	r2, sp, #580	; 0x244
 8001268:	9855      	ldr	r0, [sp, #340]	; 0x154
	data[i] = in[i];
 800126a:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800126e:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 8001272:	4283      	cmp	r3, r0
 8001274:	d1f9      	bne.n	800126a <HAL_UART_RxCpltCallback+0x9ba>
 8001276:	ac92      	add	r4, sp, #584	; 0x248
 8001278:	adc2      	add	r5, sp, #776	; 0x308
 800127a:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800127c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 800127e:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001282:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8001286:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 800128a:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800128e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001290:	6800      	ldr	r0, [r0, #0]
 8001292:	4402      	add	r2, r0
 8001294:	4413      	add	r3, r2
 8001296:	ea4f 42b1 	mov.w	r2, r1, ror #18
 800129a:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 800129e:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80012a2:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80012a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 80012a6:	42ac      	cmp	r4, r5
 80012a8:	d1e7      	bne.n	800127a <HAL_UART_RxCpltCallback+0x9ca>
    DD = D;
 80012aa:	f8dd e13c 	ldr.w	lr, [sp, #316]	; 0x13c
    CC = C;
 80012ae:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    BB = B;
 80012b0:	9e4d      	ldr	r6, [sp, #308]	; 0x134
    AA = A;
 80012b2:	984c      	ldr	r0, [sp, #304]	; 0x130
    GG = G;
 80012b4:	9f52      	ldr	r7, [sp, #328]	; 0x148
    FF = F;
 80012b6:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    HH = H;
 80012ba:	9a53      	ldr	r2, [sp, #332]	; 0x14c
    EE = E;
 80012bc:	9950      	ldr	r1, [sp, #320]	; 0x140
    for (i = 0; i < 64; i++) {
 80012be:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80012c0:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 80012c4:	9247      	str	r2, [sp, #284]	; 0x11c
 80012c6:	e74d      	b.n	8001164 <HAL_UART_RxCpltCallback+0x8b4>
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 80012c8:	9c78      	ldr	r4, [sp, #480]	; 0x1e0
 80012ca:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80012ce:	f1c5 0677 	rsb	r6, r5, #119	; 0x77
 80012d2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	f88d 3198 	strb.w	r3, [sp, #408]	; 0x198
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80012dc:	2247      	movs	r2, #71	; 0x47
 80012de:	2100      	movs	r1, #0
 80012e0:	f20d 1099 	addw	r0, sp, #409	; 0x199
 80012e4:	f012 fa22 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80012e8:	ab66      	add	r3, sp, #408	; 0x198
 80012ea:	4433      	add	r3, r6
 80012ec:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80012ee:	0a22      	lsrs	r2, r4, #8
 80012f0:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80012f2:	0c22      	lsrs	r2, r4, #16
 80012f4:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80012f6:	0e22      	lsrs	r2, r4, #24
 80012f8:	715a      	strb	r2, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80012fa:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 80012fc:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80012fe:	0a11      	lsrs	r1, r2, #8
 8001300:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001302:	0c11      	lsrs	r1, r2, #16
 8001304:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001306:	0e11      	lsrs	r1, r2, #24
 8001308:	7059      	strb	r1, [r3, #1]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800130a:	f106 0309 	add.w	r3, r6, #9
 800130e:	9349      	str	r3, [sp, #292]	; 0x124
    m->sz[0] += len * 8;
 8001310:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001314:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8001316:	429c      	cmp	r4, r3
 8001318:	d901      	bls.n	800131e <HAL_UART_RxCpltCallback+0xa6e>
	++m->sz[1];
 800131a:	3201      	adds	r2, #1
 800131c:	9279      	str	r2, [sp, #484]	; 0x1e4
    while(len > 0){
 800131e:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80bf 	beq.w	80014a4 <HAL_UART_RxCpltCallback+0xbf4>
 8001326:	ab66      	add	r3, sp, #408	; 0x198
 8001328:	934a      	str	r3, [sp, #296]	; 0x128
 800132a:	ab65      	add	r3, sp, #404	; 0x194
 800132c:	9355      	str	r3, [sp, #340]	; 0x154
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800132e:	f8df 8328 	ldr.w	r8, [pc, #808]	; 8001658 <HAL_UART_RxCpltCallback+0xda8>
 8001332:	e04d      	b.n	80013d0 <HAL_UART_RxCpltCallback+0xb20>
    for (i = 0; i < 64; i++) {
 8001334:	4635      	mov	r5, r6
 8001336:	4606      	mov	r6, r0
	AA = T1 + T2;
 8001338:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 800133a:	4667      	mov	r7, ip
 800133c:	468c      	mov	ip, r1
	EE = DD + T1;
 800133e:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001340:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8001344:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8001348:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 800134c:	ea27 0a01 	bic.w	sl, r7, r1
 8001350:	ea01 0b0c 	and.w	fp, r1, ip
 8001354:	ea8a 0a0b 	eor.w	sl, sl, fp
 8001358:	4453      	add	r3, sl
 800135a:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 800135e:	4413      	add	r3, r2
 8001360:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8001364:	4413      	add	r3, r2
 8001366:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8001368:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800136a:	ea4f 3270 	mov.w	r2, r0, ror #13
 800136e:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8001372:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8001376:	ea86 0a05 	eor.w	sl, r6, r5
 800137a:	ea0a 0a00 	and.w	sl, sl, r0
 800137e:	ea06 0b05 	and.w	fp, r6, r5
 8001382:	ea8a 0a0b 	eor.w	sl, sl, fp
 8001386:	4452      	add	r2, sl
	EE = DD + T1;
 8001388:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 800138c:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 800138e:	3401      	adds	r4, #1
 8001390:	9747      	str	r7, [sp, #284]	; 0x11c
 8001392:	46ae      	mov	lr, r5
 8001394:	2c40      	cmp	r4, #64	; 0x40
 8001396:	d1cd      	bne.n	8001334 <HAL_UART_RxCpltCallback+0xa84>
    A += AA;
 8001398:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 800139a:	441a      	add	r2, r3
 800139c:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 800139e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80013a0:	4403      	add	r3, r0
 80013a2:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 80013a4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80013a6:	4433      	add	r3, r6
 80013a8:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 80013aa:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80013ac:	442b      	add	r3, r5
 80013ae:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 80013b0:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80013b2:	445b      	add	r3, fp
 80013b4:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 80013b6:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80013b8:	440b      	add	r3, r1
 80013ba:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 80013bc:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80013be:	4463      	add	r3, ip
 80013c0:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 80013c2:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 80013c4:	443b      	add	r3, r7
 80013c6:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 80013c8:	9d48      	ldr	r5, [sp, #288]	; 0x120
    while(len > 0){
 80013ca:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d069      	beq.n	80014a4 <HAL_UART_RxCpltCallback+0xbf4>
	uint32_t l = 64 - offset;
 80013d0:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 80013d4:	9e49      	ldr	r6, [sp, #292]	; 0x124
 80013d6:	42b4      	cmp	r4, r6
 80013d8:	bf28      	it	cs
 80013da:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 80013dc:	4622      	mov	r2, r4
 80013de:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 80013e0:	4639      	mov	r1, r7
 80013e2:	ab82      	add	r3, sp, #520	; 0x208
 80013e4:	1958      	adds	r0, r3, r5
 80013e6:	f7fe ff33 	bl	8000250 <memcpy>
	offset += l;
 80013ea:	4425      	add	r5, r4
	p += l;
 80013ec:	463b      	mov	r3, r7
 80013ee:	4423      	add	r3, r4
 80013f0:	934a      	str	r3, [sp, #296]	; 0x128
	len -= l;
 80013f2:	1b33      	subs	r3, r6, r4
 80013f4:	9349      	str	r3, [sp, #292]	; 0x124
	if(offset == 64){
 80013f6:	2d40      	cmp	r5, #64	; 0x40
 80013f8:	d1e7      	bne.n	80013ca <HAL_UART_RxCpltCallback+0xb1a>
 80013fa:	ab78      	add	r3, sp, #480	; 0x1e0
 80013fc:	a888      	add	r0, sp, #544	; 0x220
 80013fe:	aa56      	add	r2, sp, #344	; 0x158
                p2[0] = p1[3];
 8001400:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8001404:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8001406:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 800140a:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 800140c:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8001410:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8001412:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001416:	70d1      	strb	r1, [r2, #3]
 8001418:	3304      	adds	r3, #4
 800141a:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 800141c:	4298      	cmp	r0, r3
 800141e:	d1ef      	bne.n	8001400 <HAL_UART_RxCpltCallback+0xb50>
    AA = A;
 8001420:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8001422:	934c      	str	r3, [sp, #304]	; 0x130
    BB = B;
 8001424:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 8001426:	934d      	str	r3, [sp, #308]	; 0x134
    CC = C;
 8001428:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 800142a:	934e      	str	r3, [sp, #312]	; 0x138
    DD = D;
 800142c:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 800142e:	934f      	str	r3, [sp, #316]	; 0x13c
    EE = E;
 8001430:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8001432:	9350      	str	r3, [sp, #320]	; 0x140
    FF = F;
 8001434:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 8001436:	9351      	str	r3, [sp, #324]	; 0x144
    GG = G;
 8001438:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800143a:	9352      	str	r3, [sp, #328]	; 0x148
    HH = H;
 800143c:	9b81      	ldr	r3, [sp, #516]	; 0x204
 800143e:	9353      	str	r3, [sp, #332]	; 0x14c
 8001440:	ab55      	add	r3, sp, #340	; 0x154
 8001442:	aa91      	add	r2, sp, #580	; 0x244
 8001444:	9855      	ldr	r0, [sp, #340]	; 0x154
	data[i] = in[i];
 8001446:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800144a:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 800144e:	4283      	cmp	r3, r0
 8001450:	d1f9      	bne.n	8001446 <HAL_UART_RxCpltCallback+0xb96>
 8001452:	ac92      	add	r4, sp, #584	; 0x248
 8001454:	adc2      	add	r5, sp, #776	; 0x308
 8001456:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001458:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 800145a:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800145e:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8001462:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 8001466:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800146a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800146c:	6800      	ldr	r0, [r0, #0]
 800146e:	4402      	add	r2, r0
 8001470:	4413      	add	r3, r2
 8001472:	ea4f 42b1 	mov.w	r2, r1, ror #18
 8001476:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 800147a:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 800147e:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001480:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8001482:	42ac      	cmp	r4, r5
 8001484:	d1e7      	bne.n	8001456 <HAL_UART_RxCpltCallback+0xba6>
    DD = D;
 8001486:	f8dd e13c 	ldr.w	lr, [sp, #316]	; 0x13c
    CC = C;
 800148a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    BB = B;
 800148c:	9e4d      	ldr	r6, [sp, #308]	; 0x134
    AA = A;
 800148e:	984c      	ldr	r0, [sp, #304]	; 0x130
    GG = G;
 8001490:	9f52      	ldr	r7, [sp, #328]	; 0x148
    FF = F;
 8001492:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    HH = H;
 8001496:	9a53      	ldr	r2, [sp, #332]	; 0x14c
    EE = E;
 8001498:	9950      	ldr	r1, [sp, #320]	; 0x140
    for (i = 0; i < 64; i++) {
 800149a:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800149c:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 80014a0:	9247      	str	r2, [sp, #284]	; 0x11c
 80014a2:	e74d      	b.n	8001340 <HAL_UART_RxCpltCallback+0xa90>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 80014a4:	f89d 31eb 	ldrb.w	r3, [sp, #491]	; 0x1eb
 80014a8:	f88d 3158 	strb.w	r3, [sp, #344]	; 0x158
    result[1] = p[2];
 80014ac:	f89d 31ea 	ldrb.w	r3, [sp, #490]	; 0x1ea
 80014b0:	f88d 3159 	strb.w	r3, [sp, #345]	; 0x159
    result[2] = p[1];
 80014b4:	f89d 31e9 	ldrb.w	r3, [sp, #489]	; 0x1e9
 80014b8:	f88d 315a 	strb.w	r3, [sp, #346]	; 0x15a
    result[3] = p[0];
 80014bc:	f89d 31e8 	ldrb.w	r3, [sp, #488]	; 0x1e8
 80014c0:	f88d 315b 	strb.w	r3, [sp, #347]	; 0x15b
    result[4] = p[7];
 80014c4:	f89d 31ef 	ldrb.w	r3, [sp, #495]	; 0x1ef
 80014c8:	f88d 315c 	strb.w	r3, [sp, #348]	; 0x15c
    result[5] = p[6];
 80014cc:	f89d 31ee 	ldrb.w	r3, [sp, #494]	; 0x1ee
 80014d0:	f88d 315d 	strb.w	r3, [sp, #349]	; 0x15d
	if (memcmp(signature, incoming_signature, 6) != 0) {
 80014d4:	2206      	movs	r2, #6
 80014d6:	495b      	ldr	r1, [pc, #364]	; (8001644 <HAL_UART_RxCpltCallback+0xd94>)
 80014d8:	a856      	add	r0, sp, #344	; 0x158
 80014da:	f012 f8f5 	bl	80136c8 <memcmp>
 80014de:	b1d0      	cbz	r0, 8001516 <HAL_UART_RxCpltCallback+0xc66>
			   	(status->signing->accept_unsigned_callback &&
 80014e0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a9 	beq.w	800163c <HAL_UART_RxCpltCallback+0xd8c>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80014ea:	4a57      	ldr	r2, [pc, #348]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 80014ec:	6891      	ldr	r1, [r2, #8]
 80014ee:	0a09      	lsrs	r1, r1, #8
 80014f0:	4856      	ldr	r0, [pc, #344]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 80014f2:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback &&
 80014f4:	2800      	cmp	r0, #0
 80014f6:	f000 80a1 	beq.w	800163c <HAL_UART_RxCpltCallback+0xd8c>
				status->msg_received = MAVLINK_FRAMING_OK;
 80014fa:	4b54      	ldr	r3, [pc, #336]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001500:	4b52      	ldr	r3, [pc, #328]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 8001502:	2201      	movs	r2, #1
 8001504:	70da      	strb	r2, [r3, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001506:	f240 1223 	movw	r2, #291	; 0x123
 800150a:	494f      	ldr	r1, [pc, #316]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 800150c:	a8d3      	add	r0, sp, #844	; 0x34c
 800150e:	f7fe fe9f 	bl	8000250 <memcpy>
 8001512:	f7ff bbf4 	b.w	8000cfe <HAL_UART_RxCpltCallback+0x44e>
	uint8_t link_id = psig[0];
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 8001518:	f893 6116 	ldrb.w	r6, [r3, #278]	; 0x116
	tstamp.t64 = 0;
 800151c:	aa66      	add	r2, sp, #408	; 0x198
 800151e:	2000      	movs	r0, #0
 8001520:	2100      	movs	r1, #0
 8001522:	e9c2 0100 	strd	r0, r1, [r2]
	memcpy(tstamp.t8, psig+1, 6);
 8001526:	f8d3 0117 	ldr.w	r0, [r3, #279]	; 0x117
 800152a:	f203 1317 	addw	r3, r3, #279	; 0x117
 800152e:	9066      	str	r0, [sp, #408]	; 0x198
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	f8ad 319c 	strh.w	r3, [sp, #412]	; 0x19c
	if (signing_streams == NULL) {
 8001536:	9a54      	ldr	r2, [sp, #336]	; 0x150
 8001538:	2a00      	cmp	r2, #0
 800153a:	d0d1      	beq.n	80014e0 <HAL_UART_RxCpltCallback+0xc30>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800153c:	8810      	ldrh	r0, [r2, #0]
 800153e:	2800      	cmp	r0, #0
 8001540:	d065      	beq.n	800160e <HAL_UART_RxCpltCallback+0xd5e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001542:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 8001544:	79dc      	ldrb	r4, [r3, #7]
		    msg->compid == signing_streams->stream[i].compid &&
 8001546:	7a1f      	ldrb	r7, [r3, #8]
 8001548:	1c93      	adds	r3, r2, #2
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800154a:	2100      	movs	r1, #0
 800154c:	e004      	b.n	8001558 <HAL_UART_RxCpltCallback+0xca8>
 800154e:	3101      	adds	r1, #1
 8001550:	b289      	uxth	r1, r1
 8001552:	3309      	adds	r3, #9
 8001554:	4288      	cmp	r0, r1
 8001556:	d03a      	beq.n	80015ce <HAL_UART_RxCpltCallback+0xd1e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001558:	785a      	ldrb	r2, [r3, #1]
 800155a:	42a2      	cmp	r2, r4
 800155c:	d1f7      	bne.n	800154e <HAL_UART_RxCpltCallback+0xc9e>
 800155e:	789a      	ldrb	r2, [r3, #2]
 8001560:	42ba      	cmp	r2, r7
 8001562:	d1f4      	bne.n	800154e <HAL_UART_RxCpltCallback+0xc9e>
		    msg->compid == signing_streams->stream[i].compid &&
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	42b2      	cmp	r2, r6
 8001568:	d1f1      	bne.n	800154e <HAL_UART_RxCpltCallback+0xc9e>
	if (i == signing_streams->num_signing_streams) {
 800156a:	4288      	cmp	r0, r1
 800156c:	d030      	beq.n	80015d0 <HAL_UART_RxCpltCallback+0xd20>
		last_tstamp.t64 = 0;
 800156e:	aa92      	add	r2, sp, #584	; 0x248
 8001570:	2400      	movs	r4, #0
 8001572:	2500      	movs	r5, #0
 8001574:	e9c2 4500 	strd	r4, r5, [r2]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001578:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800157c:	3305      	adds	r3, #5
 800157e:	9854      	ldr	r0, [sp, #336]	; 0x150
 8001580:	4403      	add	r3, r0
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	9092      	str	r0, [sp, #584]	; 0x248
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	f8ad 324c 	strh.w	r3, [sp, #588]	; 0x24c
		if (tstamp.t64 <= last_tstamp.t64) {
 800158c:	ab66      	add	r3, sp, #408	; 0x198
 800158e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001592:	e9d2 2300 	ldrd	r2, r3, [r2]
 8001596:	42ab      	cmp	r3, r5
 8001598:	bf08      	it	eq
 800159a:	42a2      	cmpeq	r2, r4
 800159c:	d2a0      	bcs.n	80014e0 <HAL_UART_RxCpltCallback+0xc30>
 800159e:	4608      	mov	r0, r1
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 80015a0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80015a4:	1d43      	adds	r3, r0, #5
 80015a6:	9c54      	ldr	r4, [sp, #336]	; 0x150
 80015a8:	18e1      	adds	r1, r4, r3
 80015aa:	4a29      	ldr	r2, [pc, #164]	; (8001650 <HAL_UART_RxCpltCallback+0xda0>)
 80015ac:	6810      	ldr	r0, [r2, #0]
 80015ae:	50e0      	str	r0, [r4, r3]
 80015b0:	8893      	ldrh	r3, [r2, #4]
 80015b2:	808b      	strh	r3, [r1, #4]
	if (tstamp.t64 > signing->timestamp) {
 80015b4:	ab66      	add	r3, sp, #408	; 0x198
 80015b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ba:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 80015bc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80015c0:	428b      	cmp	r3, r1
 80015c2:	bf08      	it	eq
 80015c4:	4282      	cmpeq	r2, r0
 80015c6:	d298      	bcs.n	80014fa <HAL_UART_RxCpltCallback+0xc4a>
		signing->timestamp = tstamp.t64;
 80015c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80015cc:	e795      	b.n	80014fa <HAL_UART_RxCpltCallback+0xc4a>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80015ce:	4601      	mov	r1, r0
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 80015d0:	280f      	cmp	r0, #15
 80015d2:	d885      	bhi.n	80014e0 <HAL_UART_RxCpltCallback+0xc30>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 80015d4:	ab66      	add	r3, sp, #408	; 0x198
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	4c1e      	ldr	r4, [pc, #120]	; (8001654 <HAL_UART_RxCpltCallback+0xda4>)
 80015dc:	2500      	movs	r5, #0
 80015de:	18a7      	adds	r7, r4, r2
 80015e0:	eb45 0803 	adc.w	r8, r5, r3
 80015e4:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80015e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015ea:	4598      	cmp	r8, r3
 80015ec:	bf08      	it	eq
 80015ee:	4297      	cmpeq	r7, r2
 80015f0:	f4ff af76 	bcc.w	80014e0 <HAL_UART_RxCpltCallback+0xc30>
		signing_streams->stream[i].sysid = msg->sysid;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 80015f6:	79d4      	ldrb	r4, [r2, #7]
 80015f8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80015fc:	9d54      	ldr	r5, [sp, #336]	; 0x150
 80015fe:	186b      	adds	r3, r5, r1
 8001600:	70dc      	strb	r4, [r3, #3]
		signing_streams->stream[i].compid = msg->compid;
 8001602:	7a12      	ldrb	r2, [r2, #8]
 8001604:	711a      	strb	r2, [r3, #4]
		signing_streams->stream[i].link_id = link_id;
 8001606:	709e      	strb	r6, [r3, #2]
		signing_streams->num_signing_streams++;
 8001608:	1c43      	adds	r3, r0, #1
 800160a:	802b      	strh	r3, [r5, #0]
 800160c:	e7c8      	b.n	80015a0 <HAL_UART_RxCpltCallback+0xcf0>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800160e:	4601      	mov	r1, r0
 8001610:	e7e0      	b.n	80015d4 <HAL_UART_RxCpltCallback+0xd24>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001612:	1e9a      	subs	r2, r3, #2
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	2a01      	cmp	r2, #1
 8001618:	f67f aa02 	bls.w	8000a20 <HAL_UART_RxCpltCallback+0x170>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 800161c:	2b00      	cmp	r3, #0
 800161e:	f43f a953 	beq.w	80008c8 <HAL_UART_RxCpltCallback+0x18>
 8001622:	f7ff bb83 	b.w	8000d2c <HAL_UART_RxCpltCallback+0x47c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 8001628:	2202      	movs	r2, #2
 800162a:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_UART_RxCpltCallback+0xd98>)
 800162e:	2200      	movs	r2, #0
 8001630:	70da      	strb	r2, [r3, #3]
	msg->checksum = crcTmp;
 8001632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001636:	801a      	strh	r2, [r3, #0]
 8001638:	f7ff b946 	b.w	80008c8 <HAL_UART_RxCpltCallback+0x18>
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_UART_RxCpltCallback+0xd9c>)
 800163e:	2203      	movs	r2, #3
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e75d      	b.n	8001500 <HAL_UART_RxCpltCallback+0xc50>
 8001644:	200005a9 	.word	0x200005a9
 8001648:	2000048c 	.word	0x2000048c
 800164c:	20000918 	.word	0x20000918
 8001650:	200005a3 	.word	0x200005a3
 8001654:	005b8d80 	.word	0x005b8d80
 8001658:	08013ab4 	.word	0x08013ab4

0800165c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800165c:	b508      	push	{r3, lr}
    if (htim->Instance==TIM7){
 800165e:	6802      	ldr	r2, [r0, #0]
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001662:	429a      	cmp	r2, r3
 8001664:	d000      	beq.n	8001668 <HAL_TIM_PeriodElapsedCallback+0xc>
    	mouseDriver_send_status_msg();
    }
}
 8001666:	bd08      	pop	{r3, pc}
    	mouseDriver_send_status_msg();
 8001668:	f00f f98a 	bl	8010980 <mouseDriver_send_status_msg>
}
 800166c:	e7fb      	b.n	8001666 <HAL_TIM_PeriodElapsedCallback+0xa>
 800166e:	bf00      	nop
 8001670:	40001400 	.word	0x40001400

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b530      	push	{r4, r5, lr}
 8001676:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001678:	2224      	movs	r2, #36	; 0x24
 800167a:	2100      	movs	r1, #0
 800167c:	a828      	add	r0, sp, #160	; 0xa0
 800167e:	f012 f855 	bl	801372c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001682:	2400      	movs	r4, #0
 8001684:	9422      	str	r4, [sp, #136]	; 0x88
 8001686:	9423      	str	r4, [sp, #140]	; 0x8c
 8001688:	9424      	str	r4, [sp, #144]	; 0x90
 800168a:	9425      	str	r4, [sp, #148]	; 0x94
 800168c:	9426      	str	r4, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168e:	2288      	movs	r2, #136	; 0x88
 8001690:	4621      	mov	r1, r4
 8001692:	4668      	mov	r0, sp
 8001694:	f012 f84a 	bl	801372c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001698:	2502      	movs	r5, #2
 800169a:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a0:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a2:	2310      	movs	r3, #16
 80016a4:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a6:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a8:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016ae:	230a      	movs	r3, #10
 80016b0:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016b2:	2307      	movs	r3, #7
 80016b4:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016b6:	9536      	str	r5, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b8:	9537      	str	r5, [sp, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ba:	a827      	add	r0, sp, #156	; 0x9c
 80016bc:	f006 fa44 	bl	8007b48 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c0:	230f      	movs	r3, #15
 80016c2:	9322      	str	r3, [sp, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c4:	2303      	movs	r3, #3
 80016c6:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c8:	9424      	str	r4, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ca:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016cc:	9426      	str	r4, [sp, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ce:	2104      	movs	r1, #4
 80016d0:	a822      	add	r0, sp, #136	; 0x88
 80016d2:	f006 fd29 	bl	8008128 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d6:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d8:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016da:	4668      	mov	r0, sp
 80016dc:	f007 f888 	bl	80087f0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016e4:	f005 fcd8 	bl	8007098 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80016e8:	b039      	add	sp, #228	; 0xe4
 80016ea:	bd30      	pop	{r4, r5, pc}

080016ec <main>:
{
 80016ec:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80016f0:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 80016f2:	f000 fcaf 	bl	8002054 <HAL_Init>
  SystemClock_Config();
 80016f6:	f7ff ffbd 	bl	8001674 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	2400      	movs	r4, #0
 80016fc:	9413      	str	r4, [sp, #76]	; 0x4c
 80016fe:	9414      	str	r4, [sp, #80]	; 0x50
 8001700:	9415      	str	r4, [sp, #84]	; 0x54
 8001702:	9416      	str	r4, [sp, #88]	; 0x58
 8001704:	9417      	str	r4, [sp, #92]	; 0x5c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	4db1      	ldr	r5, [pc, #708]	; (80019cc <main+0x2e0>)
 8001708:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001710:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800171c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001720:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001722:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001734:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	9303      	str	r3, [sp, #12]
 800173c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001746:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_0_Pin|CS_1_Pin, GPIO_PIN_RESET);
 8001750:	4622      	mov	r2, r4
 8001752:	2103      	movs	r1, #3
 8001754:	489e      	ldr	r0, [pc, #632]	; (80019d0 <main+0x2e4>)
 8001756:	f002 fa67 	bl	8003c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PW_1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800175a:	4622      	mov	r2, r4
 800175c:	2130      	movs	r1, #48	; 0x30
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f002 fa61 	bl	8003c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PW_0_GPIO_Port, PW_0_Pin, GPIO_PIN_RESET);
 8001766:	4e9b      	ldr	r6, [pc, #620]	; (80019d4 <main+0x2e8>)
 8001768:	4622      	mov	r2, r4
 800176a:	2101      	movs	r1, #1
 800176c:	4630      	mov	r0, r6
 800176e:	f002 fa5b 	bl	8003c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001772:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8001776:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177a:	4b97      	ldr	r3, [pc, #604]	; (80019d8 <main+0x2ec>)
 800177c:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001780:	a913      	add	r1, sp, #76	; 0x4c
 8001782:	4893      	ldr	r0, [pc, #588]	; (80019d0 <main+0x2e4>)
 8001784:	f002 f8b4 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_0_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_0_Pin|CS_1_Pin;
 8001788:	f04f 0a03 	mov.w	sl, #3
 800178c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	f04f 0801 	mov.w	r8, #1
 8001794:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179c:	a913      	add	r1, sp, #76	; 0x4c
 800179e:	488c      	ldr	r0, [pc, #560]	; (80019d0 <main+0x2e4>)
 80017a0:	f002 f8a6 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PW_1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = PW_1_Pin|LD2_Pin;
 80017a4:	2330      	movs	r3, #48	; 0x30
 80017a6:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	a913      	add	r1, sp, #76	; 0x4c
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b6:	f002 f89b 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_0_Pin */
  GPIO_InitStruct.Pin = PW_0_Pin;
 80017ba:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(PW_0_GPIO_Port, &GPIO_InitStruct);
 80017c6:	a913      	add	r1, sp, #76	; 0x4c
 80017c8:	4630      	mov	r0, r6
 80017ca:	f002 f891 	bl	80038f0 <HAL_GPIO_Init>
  __DMA1_CLK_ENABLE();
 80017ce:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80017d0:	ea43 0308 	orr.w	r3, r3, r8
 80017d4:	64ab      	str	r3, [r5, #72]	; 0x48
 80017d6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80017d8:	ea03 0308 	and.w	r3, r3, r8
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	9b00      	ldr	r3, [sp, #0]
  hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e0:	4e7e      	ldr	r6, [pc, #504]	; (80019dc <main+0x2f0>)
 80017e2:	2310      	movs	r3, #16
 80017e4:	60b3      	str	r3, [r6, #8]
  hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e6:	60f4      	str	r4, [r6, #12]
  hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	6133      	str	r3, [r6, #16]
  hdma_usart2_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ec:	6174      	str	r4, [r6, #20]
  hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ee:	61b4      	str	r4, [r6, #24]
  hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017f0:	61f4      	str	r4, [r6, #28]
  hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	6234      	str	r4, [r6, #32]
  HAL_DMA_Init(&hdma_usart2_tx);
 80017f4:	4630      	mov	r0, r6
 80017f6:	f000 fec1 	bl	800257c <HAL_DMA_Init>
  __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 80017fa:	4f79      	ldr	r7, [pc, #484]	; (80019e0 <main+0x2f4>)
 80017fc:	66be      	str	r6, [r7, #104]	; 0x68
 80017fe:	62b7      	str	r7, [r6, #40]	; 0x28
  huart2.Instance = USART2;
 8001800:	4b78      	ldr	r3, [pc, #480]	; (80019e4 <main+0x2f8>)
 8001802:	603b      	str	r3, [r7, #0]
  huart2.Init.BaudRate = 230400;
 8001804:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8001808:	607b      	str	r3, [r7, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	60bc      	str	r4, [r7, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800180c:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180e:	613c      	str	r4, [r7, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001810:	230c      	movs	r3, #12
 8001812:	617b      	str	r3, [r7, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001814:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001816:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001818:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800181a:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181c:	4638      	mov	r0, r7
 800181e:	f00e fd6c 	bl	80102fa <HAL_UART_Init>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001822:	9413      	str	r4, [sp, #76]	; 0x4c
 8001824:	9414      	str	r4, [sp, #80]	; 0x50
 8001826:	9415      	str	r4, [sp, #84]	; 0x54
  htim7.Instance = TIM7;
 8001828:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80019fc <main+0x310>
 800182c:	4b6e      	ldr	r3, [pc, #440]	; (80019e8 <main+0x2fc>)
 800182e:	f8c9 3000 	str.w	r3, [r9]
  htim7.Init.Prescaler = PRESCALER_HEART;
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	f8c9 3004 	str.w	r3, [r9, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	f8c9 4008 	str.w	r4, [r9, #8]
  htim7.Init.Period = COUNTER_PERIOD_HEART;
 800183e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001842:	f8c9 300c 	str.w	r3, [r9, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001846:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800184a:	4648      	mov	r0, r9
 800184c:	f00a fdb0 	bl	800c3b0 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001850:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001852:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001854:	a913      	add	r1, sp, #76	; 0x4c
 8001856:	4648      	mov	r0, r9
 8001858:	f00d f9d4 	bl	800ec04 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185c:	9408      	str	r4, [sp, #32]
 800185e:	9409      	str	r4, [sp, #36]	; 0x24
 8001860:	940a      	str	r4, [sp, #40]	; 0x28
 8001862:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	9405      	str	r4, [sp, #20]
 8001866:	9406      	str	r4, [sp, #24]
 8001868:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186a:	940c      	str	r4, [sp, #48]	; 0x30
 800186c:	940d      	str	r4, [sp, #52]	; 0x34
 800186e:	940e      	str	r4, [sp, #56]	; 0x38
 8001870:	940f      	str	r4, [sp, #60]	; 0x3c
 8001872:	9410      	str	r4, [sp, #64]	; 0x40
 8001874:	9411      	str	r4, [sp, #68]	; 0x44
 8001876:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001878:	222c      	movs	r2, #44	; 0x2c
 800187a:	4621      	mov	r1, r4
 800187c:	a813      	add	r0, sp, #76	; 0x4c
 800187e:	f011 ff55 	bl	801372c <memset>
  htim1.Instance = TIM1;
 8001882:	4e5a      	ldr	r6, [pc, #360]	; (80019ec <main+0x300>)
 8001884:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <main+0x304>)
 8001886:	6033      	str	r3, [r6, #0]
  htim1.Init.Prescaler = PRESCALER_PWM;
 8001888:	2309      	movs	r3, #9
 800188a:	6073      	str	r3, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188c:	60b4      	str	r4, [r6, #8]
  htim1.Init.Period = COUNTER_PERIOD_PWM;
 800188e:	23ff      	movs	r3, #255	; 0xff
 8001890:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001892:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8001894:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001896:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001898:	4630      	mov	r0, r6
 800189a:	f00a fd89 	bl	800c3b0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a2:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018a4:	a908      	add	r1, sp, #32
 80018a6:	4630      	mov	r0, r6
 80018a8:	f00b f992 	bl	800cbd0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018ac:	4630      	mov	r0, r6
 80018ae:	f00a fdb1 	bl	800c414 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018b4:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b8:	a905      	add	r1, sp, #20
 80018ba:	4630      	mov	r0, r6
 80018bc:	f00d f9a2 	bl	800ec04 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c0:	2360      	movs	r3, #96	; 0x60
 80018c2:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = PULSE_PWM;
 80018c4:	230a      	movs	r3, #10
 80018c6:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c8:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ca:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018cc:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ce:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d0:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d2:	4622      	mov	r2, r4
 80018d4:	a90c      	add	r1, sp, #48	; 0x30
 80018d6:	4630      	mov	r0, r6
 80018d8:	f00a fec3 	bl	800c662 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018dc:	2204      	movs	r2, #4
 80018de:	a90c      	add	r1, sp, #48	; 0x30
 80018e0:	4630      	mov	r0, r6
 80018e2:	f00a febe 	bl	800c662 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e6:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e8:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ea:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ec:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ee:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f0:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f4:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018f6:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fc:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018fe:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001900:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001902:	a913      	add	r1, sp, #76	; 0x4c
 8001904:	4630      	mov	r0, r6
 8001906:	f00d f9af 	bl	800ec68 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 800190a:	4630      	mov	r0, r6
 800190c:	f000 f942 	bl	8001b94 <HAL_TIM_MspPostInit>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001910:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001912:	ea43 0308 	orr.w	r3, r3, r8
 8001916:	64ab      	str	r3, [r5, #72]	; 0x48
 8001918:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800191a:	ea03 0308 	and.w	r3, r3, r8
 800191e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001920:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001922:	4622      	mov	r2, r4
 8001924:	4621      	mov	r1, r4
 8001926:	2011      	movs	r0, #17
 8001928:	f000 fcd4 	bl	80022d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800192c:	2011      	movs	r0, #17
 800192e:	f000 fd03 	bl	8002338 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 8001932:	2108      	movs	r1, #8
 8001934:	4826      	ldr	r0, [pc, #152]	; (80019d0 <main+0x2e4>)
 8001936:	f002 f8d1 	bl	8003adc <HAL_GPIO_DeInit>
  __HAL_RCC_SPI2_CLK_ENABLE();
 800193a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800193c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001940:	65ab      	str	r3, [r5, #88]	; 0x58
 8001942:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001948:	9308      	str	r3, [sp, #32]
 800194a:	9b08      	ldr	r3, [sp, #32]
  __SPI2_CLK_ENABLE();
 800194c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800194e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001952:	65ab      	str	r3, [r5, #88]	; 0x58
 8001954:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195a:	930c      	str	r3, [sp, #48]	; 0x30
 800195c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  hspi2.Instance = SPI2;
 800195e:	4825      	ldr	r0, [pc, #148]	; (80019f4 <main+0x308>)
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <main+0x30c>)
 8001962:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001964:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001968:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800196a:	6084      	str	r4, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800196c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001970:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001972:	2502      	movs	r5, #2
 8001974:	6105      	str	r5, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001976:	f8c0 8014 	str.w	r8, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800197a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800197e:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001980:	2338      	movs	r3, #56	; 0x38
 8001982:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001984:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001986:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001988:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800198a:	2307      	movs	r3, #7
 800198c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800198e:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001990:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001992:	f008 f930 	bl	8009bf6 <HAL_SPI_Init>
  HAL_InitTick(0);
 8001996:	4620      	mov	r0, r4
 8001998:	f000 fb34 	bl	8002004 <HAL_InitTick>
  HAL_NVIC_SetPriority(USART2_IRQn,1,0);
 800199c:	4622      	mov	r2, r4
 800199e:	4641      	mov	r1, r8
 80019a0:	2026      	movs	r0, #38	; 0x26
 80019a2:	f000 fc97 	bl	80022d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019a6:	2026      	movs	r0, #38	; 0x26
 80019a8:	f000 fcc6 	bl	8002338 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM7_IRQn,2,0);
 80019ac:	4622      	mov	r2, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	2037      	movs	r0, #55	; 0x37
 80019b2:	f000 fc8f 	bl	80022d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019b6:	2037      	movs	r0, #55	; 0x37
 80019b8:	f000 fcbe 	bl	8002338 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, CS_0_Pin|CS_1_Pin, GPIO_PIN_SET);
 80019bc:	4642      	mov	r2, r8
 80019be:	4651      	mov	r1, sl
 80019c0:	4803      	ldr	r0, [pc, #12]	; (80019d0 <main+0x2e4>)
 80019c2:	f002 f931 	bl	8003c28 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, &inByte, 1);
 80019c6:	4642      	mov	r2, r8
 80019c8:	e01a      	b.n	8001a00 <main+0x314>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	48000800 	.word	0x48000800
 80019d4:	48000400 	.word	0x48000400
 80019d8:	10210000 	.word	0x10210000
 80019dc:	20001a84 	.word	0x20001a84
 80019e0:	20001b0c 	.word	0x20001b0c
 80019e4:	40004400 	.word	0x40004400
 80019e8:	40001400 	.word	0x40001400
 80019ec:	20001acc 	.word	0x20001acc
 80019f0:	40012c00 	.word	0x40012c00
 80019f4:	20001a20 	.word	0x20001a20
 80019f8:	40003800 	.word	0x40003800
 80019fc:	20001b8c 	.word	0x20001b8c
 8001a00:	4908      	ldr	r1, [pc, #32]	; (8001a24 <main+0x338>)
 8001a02:	4638      	mov	r0, r7
 8001a04:	f00d fafc 	bl	800f000 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001a08:	4648      	mov	r0, r9
 8001a0a:	f009 feef 	bl	800b7ec <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001a0e:	4642      	mov	r2, r8
 8001a10:	4641      	mov	r1, r8
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <main+0x33c>)
 8001a14:	f002 f908 	bl	8003c28 <HAL_GPIO_WritePin>
  mouseDriver_init();
 8001a18:	f00e ff9c 	bl	8010954 <mouseDriver_init>
	 mouseDriver_idle();
 8001a1c:	f011 fb58 	bl	80130d0 <mouseDriver_idle>
 8001a20:	e7fc      	b.n	8001a1c <main+0x330>
 8001a22:	bf00      	nop
 8001a24:	20000488 	.word	0x20000488
 8001a28:	48000800 	.word	0x48000800

08001a2c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_MspInit+0x2c>)
 8001a34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	661a      	str	r2, [r3, #96]	; 0x60
 8001a3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a3e:	f002 0201 	and.w	r2, r2, #1
 8001a42:	9200      	str	r2, [sp, #0]
 8001a44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a58:	b002      	add	sp, #8
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a60:	b570      	push	{r4, r5, r6, lr}
 8001a62:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	2300      	movs	r3, #0
 8001a66:	9303      	str	r3, [sp, #12]
 8001a68:	9304      	str	r3, [sp, #16]
 8001a6a:	9305      	str	r3, [sp, #20]
 8001a6c:	9306      	str	r3, [sp, #24]
 8001a6e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8001a70:	6802      	ldr	r2, [r0, #0]
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_SPI_MspInit+0x8c>)
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a78:	b008      	add	sp, #32
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a7c:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8001a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a86:	659a      	str	r2, [r3, #88]	; 0x58
 8001a88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a8a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a8e:	9200      	str	r2, [sp, #0]
 8001a90:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a94:	f042 0204 	orr.w	r2, r2, #4
 8001a98:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a9c:	f002 0204 	and.w	r2, r2, #4
 8001aa0:	9201      	str	r2, [sp, #4]
 8001aa2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aa6:	f042 0202 	orr.w	r2, r2, #2
 8001aaa:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2602      	movs	r6, #2
 8001abc:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2503      	movs	r5, #3
 8001ac0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac2:	2405      	movs	r4, #5
 8001ac4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	eb0d 0103 	add.w	r1, sp, r3
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <HAL_SPI_MspInit+0x90>)
 8001acc:	f001 ff10 	bl	80038f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ade:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	a903      	add	r1, sp, #12
 8001ae2:	4804      	ldr	r0, [pc, #16]	; (8001af4 <HAL_SPI_MspInit+0x94>)
 8001ae4:	f001 ff04 	bl	80038f0 <HAL_GPIO_Init>
}
 8001ae8:	e7c6      	b.n	8001a78 <HAL_SPI_MspInit+0x18>
 8001aea:	bf00      	nop
 8001aec:	40003800 	.word	0x40003800
 8001af0:	48000800 	.word	0x48000800
 8001af4:	48000400 	.word	0x48000400

08001af8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001af8:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 8001afa:	6802      	ldr	r2, [r0, #0]
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_SPI_MspDeInit+0x2c>)
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d000      	beq.n	8001b04 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001b02:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_SPI_MspDeInit+0x30>)
 8001b06:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8001b0e:	210c      	movs	r1, #12
 8001b10:	4806      	ldr	r0, [pc, #24]	; (8001b2c <HAL_SPI_MspDeInit+0x34>)
 8001b12:	f001 ffe3 	bl	8003adc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_SPI_MspDeInit+0x38>)
 8001b1c:	f001 ffde 	bl	8003adc <HAL_GPIO_DeInit>
}
 8001b20:	e7ef      	b.n	8001b02 <HAL_SPI_MspDeInit+0xa>
 8001b22:	bf00      	nop
 8001b24:	40003800 	.word	0x40003800
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	48000800 	.word	0x48000800
 8001b30:	48000400 	.word	0x48000400

08001b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b34:	b500      	push	{lr}
 8001b36:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8001b38:	6803      	ldr	r3, [r0, #0]
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <HAL_TIM_Base_MspInit+0x54>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d005      	beq.n	8001b4c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_TIM_Base_MspInit+0x58>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001b46:	b003      	add	sp, #12
 8001b48:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_TIM_Base_MspInit+0x5c>)
 8001b4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b54:	661a      	str	r2, [r3, #96]	; 0x60
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	9b00      	ldr	r3, [sp, #0]
 8001b60:	e7f1      	b.n	8001b46 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_TIM_Base_MspInit+0x5c>)
 8001b64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b66:	f042 0220 	orr.w	r2, r2, #32
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	4611      	mov	r1, r2
 8001b7a:	2037      	movs	r0, #55	; 0x37
 8001b7c:	f000 fbaa 	bl	80022d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b80:	2037      	movs	r0, #55	; 0x37
 8001b82:	f000 fbd9 	bl	8002338 <HAL_NVIC_EnableIRQ>
}
 8001b86:	e7de      	b.n	8001b46 <HAL_TIM_Base_MspInit+0x12>
 8001b88:	40012c00 	.word	0x40012c00
 8001b8c:	40001400 	.word	0x40001400
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b94:	b500      	push	{lr}
 8001b96:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	9302      	str	r3, [sp, #8]
 8001b9e:	9303      	str	r3, [sp, #12]
 8001ba0:	9304      	str	r3, [sp, #16]
 8001ba2:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001ba4:	6802      	ldr	r2, [r0, #0]
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_TIM_MspPostInit+0x50>)
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d002      	beq.n	8001bb2 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bac:	b007      	add	sp, #28
 8001bae:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bcc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	a901      	add	r1, sp, #4
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f001 fe88 	bl	80038f0 <HAL_GPIO_Init>
}
 8001be0:	e7e4      	b.n	8001bac <HAL_TIM_MspPostInit+0x18>
 8001be2:	bf00      	nop
 8001be4:	40012c00 	.word	0x40012c00

08001be8 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001be8:	b508      	push	{r3, lr}
  if(htim_base->Instance==TIM1)
 8001bea:	6803      	ldr	r3, [r0, #0]
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_TIM_Base_MspDeInit+0x34>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <HAL_TIM_Base_MspDeInit+0x12>
    __HAL_RCC_TIM1_CLK_DISABLE();
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_TIM_Base_MspDeInit+0x38>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <HAL_TIM_Base_MspDeInit+0x20>
  /* USER CODE BEGIN TIM7_MspDeInit 1 */

  /* USER CODE END TIM7_MspDeInit 1 */
  }

}
 8001bf8:	bd08      	pop	{r3, pc}
    __HAL_RCC_TIM1_CLK_DISABLE();
 8001bfa:	f502 4264 	add.w	r2, r2, #58368	; 0xe400
 8001bfe:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c04:	6613      	str	r3, [r2, #96]	; 0x60
 8001c06:	e7f7      	b.n	8001bf8 <HAL_TIM_Base_MspDeInit+0x10>
    __HAL_RCC_TIM7_CLK_DISABLE();
 8001c08:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 8001c0c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001c0e:	f023 0320 	bic.w	r3, r3, #32
 8001c12:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8001c14:	2037      	movs	r0, #55	; 0x37
 8001c16:	f000 fb9d 	bl	8002354 <HAL_NVIC_DisableIRQ>
}
 8001c1a:	e7ed      	b.n	8001bf8 <HAL_TIM_Base_MspDeInit+0x10>
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40001400 	.word	0x40001400

08001c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c24:	b530      	push	{r4, r5, lr}
 8001c26:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	9304      	str	r3, [sp, #16]
 8001c2e:	9305      	str	r3, [sp, #20]
 8001c30:	9306      	str	r3, [sp, #24]
 8001c32:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001c34:	6802      	ldr	r2, [r0, #0]
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_UART_MspInit+0xa0>)
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c3c:	b009      	add	sp, #36	; 0x24
 8001c3e:	bd30      	pop	{r4, r5, pc}
 8001c40:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c42:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001c46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c50:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c54:	9201      	str	r2, [sp, #4]
 8001c56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2502      	movs	r5, #2
 8001c70:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c76:	2307      	movs	r3, #7
 8001c78:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	a903      	add	r1, sp, #12
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c80:	f001 fe36 	bl	80038f0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001c84:	4810      	ldr	r0, [pc, #64]	; (8001cc8 <HAL_UART_MspInit+0xa4>)
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_UART_MspInit+0xa8>)
 8001c88:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001c8a:	6045      	str	r5, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c94:	2280      	movs	r2, #128	; 0x80
 8001c96:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c98:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c9a:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c9c:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c9e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ca0:	f000 fc6c 	bl	800257c <HAL_DMA_Init>
 8001ca4:	b958      	cbnz	r0, 8001cbe <HAL_UART_MspInit+0x9a>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_UART_MspInit+0xa4>)
 8001ca8:	66a3      	str	r3, [r4, #104]	; 0x68
 8001caa:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	4611      	mov	r1, r2
 8001cb0:	2026      	movs	r0, #38	; 0x26
 8001cb2:	f000 fb0f 	bl	80022d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cb6:	2026      	movs	r0, #38	; 0x26
 8001cb8:	f000 fb3e 	bl	8002338 <HAL_NVIC_EnableIRQ>
}
 8001cbc:	e7be      	b.n	8001c3c <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001cbe:	f7ff feb5 	bl	8001a2c <Error_Handler>
 8001cc2:	e7f0      	b.n	8001ca6 <HAL_UART_MspInit+0x82>
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	20001a84 	.word	0x20001a84
 8001ccc:	40020080 	.word	0x40020080

08001cd0 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 8001cd0:	6802      	ldr	r2, [r0, #0]
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_UART_MspDeInit+0x30>)
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d000      	beq.n	8001cda <HAL_UART_MspDeInit+0xa>
 8001cd8:	4770      	bx	lr
{
 8001cda:	b510      	push	{r4, lr}
 8001cdc:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_UART_MspDeInit+0x34>)
 8001ce0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ce2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ce6:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001ce8:	210c      	movs	r1, #12
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f001 fef5 	bl	8003adc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001cf2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001cf4:	f000 fcae 	bl	8002654 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001cf8:	2026      	movs	r0, #38	; 0x26
 8001cfa:	f000 fb2b 	bl	8002354 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001cfe:	bd10      	pop	{r4, pc}
 8001d00:	40004400 	.word	0x40004400
 8001d04:	40021000 	.word	0x40021000

08001d08 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d08:	4770      	bx	lr

08001d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	e7fe      	b.n	8001d0c <MemManage_Handler>

08001d0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler>

08001d12 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1a:	f000 f9b1 	bl	8002080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bd08      	pop	{r3, pc}

08001d20 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001d20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d22:	4802      	ldr	r0, [pc, #8]	; (8001d2c <DMA1_Channel7_IRQHandler+0xc>)
 8001d24:	f000 fe35 	bl	8002992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001d28:	bd08      	pop	{r3, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20001a84 	.word	0x20001a84

08001d30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d32:	4802      	ldr	r0, [pc, #8]	; (8001d3c <USART2_IRQHandler+0xc>)
 8001d34:	f00d fc9e 	bl	800f674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d38:	bd08      	pop	{r3, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20001b0c 	.word	0x20001b0c

08001d40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d42:	4802      	ldr	r0, [pc, #8]	; (8001d4c <TIM7_IRQHandler+0xc>)
 8001d44:	f00a f99e 	bl	800c084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d48:	bd08      	pop	{r3, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20001b8c 	.word	0x20001b8c

08001d50 <initialise_monitor_handles>:


/* Functions */
void initialise_monitor_handles()
{
}
 8001d50:	4770      	bx	lr

08001d52 <_getpid>:

int _getpid(void)
{
	return 1;
}
 8001d52:	2001      	movs	r0, #1
 8001d54:	4770      	bx	lr

08001d56 <_kill>:

int _kill(int pid, int sig)
{
 8001d56:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d58:	f011 fc7c 	bl	8013654 <__errno>
 8001d5c:	2316      	movs	r3, #22
 8001d5e:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d64:	bd08      	pop	{r3, pc}

08001d66 <_exit>:

void _exit (int status)
{
 8001d66:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d68:	f011 fc74 	bl	8013654 <__errno>
 8001d6c:	2316      	movs	r3, #22
 8001d6e:	6003      	str	r3, [r0, #0]
 8001d70:	e7fe      	b.n	8001d70 <_exit+0xa>

08001d72 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d72:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	1e16      	subs	r6, r2, #0
 8001d76:	dd07      	ble.n	8001d88 <_read+0x16>
 8001d78:	460c      	mov	r4, r1
 8001d7a:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001d7c:	f3af 8000 	nop.w
 8001d80:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	42a5      	cmp	r5, r4
 8001d86:	d1f9      	bne.n	8001d7c <_read+0xa>
	}

return len;
}
 8001d88:	4630      	mov	r0, r6
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}

08001d8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	1e16      	subs	r6, r2, #0
 8001d90:	dd07      	ble.n	8001da2 <_write+0x16>
 8001d92:	460c      	mov	r4, r1
 8001d94:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001d96:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001d9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	42a5      	cmp	r5, r4
 8001da0:	d1f9      	bne.n	8001d96 <_write+0xa>
	}
	return len;
}
 8001da2:	4630      	mov	r0, r6
 8001da4:	bd70      	pop	{r4, r5, r6, pc}

08001da6 <_close>:

int _close(int file)
{
	return -1;
}
 8001da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001daa:	4770      	bx	lr

08001dac <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db0:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001db2:	2000      	movs	r0, #0
 8001db4:	4770      	bx	lr

08001db6 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001db6:	2001      	movs	r0, #1
 8001db8:	4770      	bx	lr

08001dba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001dba:	2000      	movs	r0, #0
 8001dbc:	4770      	bx	lr

08001dbe <_open>:

int _open(char *path, int flags, ...)
{
 8001dbe:	b40e      	push	{r1, r2, r3}
	/* Pretend like we always fail */
	return -1;
}
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc4:	b003      	add	sp, #12
 8001dc6:	4770      	bx	lr

08001dc8 <_wait>:

int _wait(int *status)
{
 8001dc8:	b508      	push	{r3, lr}
	errno = ECHILD;
 8001dca:	f011 fc43 	bl	8013654 <__errno>
 8001dce:	230a      	movs	r3, #10
 8001dd0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd6:	bd08      	pop	{r3, pc}

08001dd8 <_unlink>:

int _unlink(char *name)
{
 8001dd8:	b508      	push	{r3, lr}
	errno = ENOENT;
 8001dda:	f011 fc3b 	bl	8013654 <__errno>
 8001dde:	2302      	movs	r3, #2
 8001de0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de6:	bd08      	pop	{r3, pc}

08001de8 <_times>:

int _times(struct tms *buf)
{
	return -1;
}
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dec:	4770      	bx	lr

08001dee <_stat>:

int _stat(char *file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df2:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001df4:	2000      	movs	r0, #0
 8001df6:	4770      	bx	lr

08001df8 <_link>:

int _link(char *old, char *new)
{
 8001df8:	b508      	push	{r3, lr}
	errno = EMLINK;
 8001dfa:	f011 fc2b 	bl	8013654 <__errno>
 8001dfe:	231f      	movs	r3, #31
 8001e00:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e06:	bd08      	pop	{r3, pc}

08001e08 <_fork>:

int _fork(void)
{
 8001e08:	b508      	push	{r3, lr}
	errno = EAGAIN;
 8001e0a:	f011 fc23 	bl	8013654 <__errno>
 8001e0e:	230b      	movs	r3, #11
 8001e10:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e16:	bd08      	pop	{r3, pc}

08001e18 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8001e18:	b508      	push	{r3, lr}
	errno = ENOMEM;
 8001e1a:	f011 fc1b 	bl	8013654 <__errno>
 8001e1e:	230c      	movs	r3, #12
 8001e20:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e26:	bd08      	pop	{r3, pc}

08001e28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e28:	b508      	push	{r3, lr}
 8001e2a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <_sbrk+0x34>)
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	b142      	cbz	r2, 8001e44 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <_sbrk+0x34>)
 8001e34:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001e36:	4403      	add	r3, r0
 8001e38:	466a      	mov	r2, sp
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d806      	bhi.n	8001e4c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <_sbrk+0x34>)
 8001e40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001e42:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001e44:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <_sbrk+0x34>)
 8001e46:	4906      	ldr	r1, [pc, #24]	; (8001e60 <_sbrk+0x38>)
 8001e48:	6011      	str	r1, [r2, #0]
 8001e4a:	e7f2      	b.n	8001e32 <_sbrk+0xa>
		errno = ENOMEM;
 8001e4c:	f011 fc02 	bl	8013654 <__errno>
 8001e50:	230c      	movs	r3, #12
 8001e52:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e58:	e7f3      	b.n	8001e42 <_sbrk+0x1a>
 8001e5a:	bf00      	nop
 8001e5c:	2000097c 	.word	0x2000097c
 8001e60:	20001bf8 	.word	0x20001bf8

08001e64 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e64:	490f      	ldr	r1, [pc, #60]	; (8001ea4 <SystemInit+0x40>)
 8001e66:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <SystemInit+0x44>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001e86:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e98:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e9a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ea0:	608b      	str	r3, [r1, #8]
#endif
}
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00
 8001ea8:	40021000 	.word	0x40021000

08001eac <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8001eac:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <SystemCoreClockUpdate+0xbc>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f013 0f08 	tst.w	r3, #8
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <SystemCoreClockUpdate+0xbc>)
 8001eb6:	bf07      	ittee	eq
 8001eb8:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8001ebc:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001ec0:	681b      	ldrne	r3, [r3, #0]
 8001ec2:	f3c3 1303 	ubfxne	r3, r3, #4, #4
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001ec6:	4a29      	ldr	r2, [pc, #164]	; (8001f6c <SystemCoreClockUpdate+0xc0>)
 8001ec8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <SystemCoreClockUpdate+0xbc>)
 8001ece:	6893      	ldr	r3, [r2, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d843      	bhi.n	8001f60 <SystemCoreClockUpdate+0xb4>
 8001ed8:	e8df f003 	tbb	[pc, r3]
 8001edc:	42424207 	.word	0x42424207
 8001ee0:	42424214 	.word	0x42424214
 8001ee4:	42424218 	.word	0x42424218
 8001ee8:	1c          	.byte	0x1c
 8001ee9:	00          	.byte	0x00
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <SystemCoreClockUpdate+0xc4>)
 8001eec:	6019      	str	r1, [r3, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <SystemCoreClockUpdate+0xbc>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <SystemCoreClockUpdate+0xc4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001ef4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ef8:	491e      	ldr	r1, [pc, #120]	; (8001f74 <SystemCoreClockUpdate+0xc8>)
 8001efa:	5cc9      	ldrb	r1, [r1, r3]
  SystemCoreClock >>= tmp;
 8001efc:	6813      	ldr	r3, [r2, #0]
 8001efe:	40cb      	lsrs	r3, r1
 8001f00:	6013      	str	r3, [r2, #0]
}
 8001f02:	4770      	bx	lr
      SystemCoreClock = HSI_VALUE;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <SystemCoreClockUpdate+0xc4>)
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <SystemCoreClockUpdate+0xcc>)
 8001f08:	601a      	str	r2, [r3, #0]
      break;
 8001f0a:	e7f0      	b.n	8001eee <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSE_VALUE;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <SystemCoreClockUpdate+0xc4>)
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <SystemCoreClockUpdate+0xd0>)
 8001f10:	601a      	str	r2, [r3, #0]
      break;
 8001f12:	e7ec      	b.n	8001eee <SystemCoreClockUpdate+0x42>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <SystemCoreClockUpdate+0xbc>)
 8001f16:	68da      	ldr	r2, [r3, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f1e:	3301      	adds	r3, #1
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f20:	f002 0203 	and.w	r2, r2, #3
      switch (pllsource)
 8001f24:	2a02      	cmp	r2, #2
 8001f26:	d004      	beq.n	8001f32 <SystemCoreClockUpdate+0x86>
 8001f28:	2a03      	cmp	r2, #3
 8001f2a:	d015      	beq.n	8001f58 <SystemCoreClockUpdate+0xac>
          pllvco = (msirange / pllm);
 8001f2c:	fbb1 f3f3 	udiv	r3, r1, r3
          break;
 8001f30:	e002      	b.n	8001f38 <SystemCoreClockUpdate+0x8c>
          pllvco = (HSI_VALUE / pllm);
 8001f32:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <SystemCoreClockUpdate+0xcc>)
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <SystemCoreClockUpdate+0xbc>)
 8001f3a:	68d1      	ldr	r1, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001f3c:	68d2      	ldr	r2, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001f3e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001f42:	fb03 f301 	mul.w	r3, r3, r1
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001f46:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8001f4a:	3201      	adds	r2, #1
 8001f4c:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8001f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <SystemCoreClockUpdate+0xc4>)
 8001f54:	6013      	str	r3, [r2, #0]
      break;
 8001f56:	e7ca      	b.n	8001eee <SystemCoreClockUpdate+0x42>
          pllvco = (HSE_VALUE / pllm);
 8001f58:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <SystemCoreClockUpdate+0xd0>)
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
          break;
 8001f5e:	e7eb      	b.n	8001f38 <SystemCoreClockUpdate+0x8c>
      SystemCoreClock = msirange;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <SystemCoreClockUpdate+0xc4>)
 8001f62:	6019      	str	r1, [r3, #0]
      break;
 8001f64:	e7c3      	b.n	8001eee <SystemCoreClockUpdate+0x42>
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08013bcc 	.word	0x08013bcc
 8001f70:	20000008 	.word	0x20000008
 8001f74:	08013bb4 	.word	0x08013bb4
 8001f78:	00f42400 	.word	0x00f42400
 8001f7c:	007a1200 	.word	0x007a1200

08001f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f86:	e003      	b.n	8001f90 <LoopCopyDataInit>

08001f88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f8e:	3104      	adds	r1, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f98:	d3f6      	bcc.n	8001f88 <CopyDataInit>
	ldr	r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f9c:	e002      	b.n	8001fa4 <LoopFillZerobss>

08001f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fa0:	f842 3b04 	str.w	r3, [r2], #4

08001fa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <LoopForever+0x16>)
	cmp	r2, r3
 8001fa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fa8:	d3f9      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff ff5b 	bl	8001e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f011 fb67 	bl	8013680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb2:	f7ff fb9b 	bl	80016ec <main>

08001fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fb8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001fbc:	08014d34 	.word	0x08014d34
	ldr	r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fc4:	2000046c 	.word	0x2000046c
	ldr	r2, =_sbss
 8001fc8:	2000046c 	.word	0x2000046c
	ldr	r3, = _ebss
 8001fcc:	20001bf4 	.word	0x20001bf4

08001fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC1_2_IRQHandler>
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_DeInit>:
{
 8001fd8:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_DeInit+0x28>)
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8001fe2:	2400      	movs	r4, #0
 8001fe4:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_RCC_APB2_FORCE_RESET();
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8001fe8:	641c      	str	r4, [r3, #64]	; 0x40
  __HAL_RCC_AHB1_FORCE_RESET();
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001fec:	629c      	str	r4, [r3, #40]	; 0x28
  __HAL_RCC_AHB2_FORCE_RESET();
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001ff0:	62dc      	str	r4, [r3, #44]	; 0x2c
  __HAL_RCC_AHB3_FORCE_RESET();
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001ff4:	631c      	str	r4, [r3, #48]	; 0x30
  HAL_MspDeInit();
 8001ff6:	f7ff ffed 	bl	8001fd4 <HAL_MspDeInit>
}
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_InitTick+0x44>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b90b      	cbnz	r3, 800200e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800200a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800200c:	4770      	bx	lr
{
 800200e:	b510      	push	{r4, lr}
 8002010:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_InitTick+0x48>)
 800201c:	6810      	ldr	r0, [r2, #0]
 800201e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002022:	f000 f9bd 	bl	80023a0 <HAL_SYSTICK_Config>
 8002026:	b968      	cbnz	r0, 8002044 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002028:	2c0f      	cmp	r4, #15
 800202a:	d901      	bls.n	8002030 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800202c:	2001      	movs	r0, #1
 800202e:	e00a      	b.n	8002046 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	4621      	mov	r1, r4
 8002034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002038:	f000 f94c 	bl	80022d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_InitTick+0x4c>)
 800203e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002040:	2000      	movs	r0, #0
 8002042:	e000      	b.n	8002046 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002044:	2001      	movs	r0, #1
}
 8002046:	bd10      	pop	{r4, pc}
 8002048:	2000000c 	.word	0x2000000c
 800204c:	20000008 	.word	0x20000008
 8002050:	20000010 	.word	0x20000010

08002054 <HAL_Init>:
{
 8002054:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_Init+0x28>)
 8002058:	6813      	ldr	r3, [r2, #0]
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 f925 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff ffcc 	bl	8002004 <HAL_InitTick>
 800206c:	b110      	cbz	r0, 8002074 <HAL_Init+0x20>
    status = HAL_ERROR;
 800206e:	2401      	movs	r4, #1
}
 8002070:	4620      	mov	r0, r4
 8002072:	bd10      	pop	{r4, pc}
 8002074:	4604      	mov	r4, r0
    HAL_MspInit();
 8002076:	f7ff fcdb 	bl	8001a30 <HAL_MspInit>
 800207a:	e7f9      	b.n	8002070 <HAL_Init+0x1c>
 800207c:	40022000 	.word	0x40022000

08002080 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002080:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_IncTick+0x10>)
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	4903      	ldr	r1, [pc, #12]	; (8002094 <HAL_IncTick+0x14>)
 8002086:	6809      	ldr	r1, [r1, #0]
 8002088:	440b      	add	r3, r1
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20001bcc 	.word	0x20001bcc
 8002094:	2000000c 	.word	0x2000000c

08002098 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002098:	4b01      	ldr	r3, [pc, #4]	; (80020a0 <HAL_GetTick+0x8>)
 800209a:	6818      	ldr	r0, [r3, #0]
}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20001bcc 	.word	0x20001bcc

080020a4 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80020a4:	4b01      	ldr	r3, [pc, #4]	; (80020ac <HAL_GetTickPrio+0x8>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000010 	.word	0x20000010

080020b0 <HAL_SetTickFreq>:
HAL_StatusTypeDef HAL_SetTickFreq(uint32_t Freq)
{
  HAL_StatusTypeDef status  = HAL_OK;
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_SetTickFreq+0x28>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4283      	cmp	r3, r0
 80020b6:	d00b      	beq.n	80020d0 <HAL_SetTickFreq+0x20>
{
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4604      	mov	r4, r0
  {
    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_SetTickFreq+0x2c>)
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	f7ff ffa0 	bl	8002004 <HAL_InitTick>
    if (status == HAL_OK)
 80020c4:	4603      	mov	r3, r0
 80020c6:	b908      	cbnz	r0, 80020cc <HAL_SetTickFreq+0x1c>
    {
      uwTickFreq = Freq;
 80020c8:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <HAL_SetTickFreq+0x28>)
 80020ca:	6014      	str	r4, [r2, #0]
    }
  }

  return status;
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	2000000c 	.word	0x2000000c
 80020dc:	20000010 	.word	0x20000010

080020e0 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
uint32_t HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 80020e0:	4b01      	ldr	r3, [pc, #4]	; (80020e8 <HAL_GetTickFreq+0x8>)
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000000c 	.word	0x2000000c

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff ffd2 	bl	8002098 <HAL_GetTick>
 80020f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80020fa:	d002      	beq.n	8002102 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_Delay+0x24>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002102:	f7ff ffc9 	bl	8002098 <HAL_GetTick>
 8002106:	1b40      	subs	r0, r0, r5
 8002108:	42a0      	cmp	r0, r4
 800210a:	d3fa      	bcc.n	8002102 <HAL_Delay+0x16>
  {
  }
}
 800210c:	bd38      	pop	{r3, r4, r5, pc}
 800210e:	bf00      	nop
 8002110:	2000000c 	.word	0x2000000c

08002114 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002114:	4a02      	ldr	r2, [pc, #8]	; (8002120 <HAL_SuspendTick+0xc>)
 8002116:	6813      	ldr	r3, [r2, #0]
 8002118:	f023 0302 	bic.w	r3, r3, #2
 800211c:	6013      	str	r3, [r2, #0]
}
 800211e:	4770      	bx	lr
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002124:	4a02      	ldr	r2, [pc, #8]	; (8002130 <HAL_ResumeTick+0xc>)
 8002126:	6813      	ldr	r3, [r2, #0]
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	6013      	str	r3, [r2, #0]
}
 800212e:	4770      	bx	lr
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8002134:	f04f 7085 	mov.w	r0, #17432576	; 0x10a0000
 8002138:	4770      	bx	lr
	...

0800213c <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800213c:	4b01      	ldr	r3, [pc, #4]	; (8002144 <HAL_GetREVID+0x8>)
 800213e:	6818      	ldr	r0, [r3, #0]
}
 8002140:	0c00      	lsrs	r0, r0, #16
 8002142:	4770      	bx	lr
 8002144:	e0042000 	.word	0xe0042000

08002148 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8002148:	4b02      	ldr	r3, [pc, #8]	; (8002154 <HAL_GetDEVID+0xc>)
 800214a:	6818      	ldr	r0, [r3, #0]
}
 800214c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e0042000 	.word	0xe0042000

08002158 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
}
 8002158:	4b01      	ldr	r3, [pc, #4]	; (8002160 <HAL_GetUIDw0+0x8>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	1fff7590 	.word	0x1fff7590

08002164 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002164:	4b01      	ldr	r3, [pc, #4]	; (800216c <HAL_GetUIDw1+0x8>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	1fff7594 	.word	0x1fff7594

08002170 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002170:	4b01      	ldr	r3, [pc, #4]	; (8002178 <HAL_GetUIDw2+0x8>)
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	1fff7598 	.word	0x1fff7598

0800217c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800217c:	4a02      	ldr	r2, [pc, #8]	; (8002188 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800217e:	6853      	ldr	r3, [r2, #4]
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6053      	str	r3, [r2, #4]
}
 8002186:	4770      	bx	lr
 8002188:	e0042000 	.word	0xe0042000

0800218c <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800218c:	4a02      	ldr	r2, [pc, #8]	; (8002198 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800218e:	6853      	ldr	r3, [r2, #4]
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6053      	str	r3, [r2, #4]
}
 8002196:	4770      	bx	lr
 8002198:	e0042000 	.word	0xe0042000

0800219c <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800219c:	4a02      	ldr	r2, [pc, #8]	; (80021a8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800219e:	6853      	ldr	r3, [r2, #4]
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6053      	str	r3, [r2, #4]
}
 80021a6:	4770      	bx	lr
 80021a8:	e0042000 	.word	0xe0042000

080021ac <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80021ac:	4a02      	ldr	r2, [pc, #8]	; (80021b8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80021ae:	6853      	ldr	r3, [r2, #4]
 80021b0:	f023 0302 	bic.w	r3, r3, #2
 80021b4:	6053      	str	r3, [r2, #4]
}
 80021b6:	4770      	bx	lr
 80021b8:	e0042000 	.word	0xe0042000

080021bc <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80021bc:	4a02      	ldr	r2, [pc, #8]	; (80021c8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80021be:	6853      	ldr	r3, [r2, #4]
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6053      	str	r3, [r2, #4]
}
 80021c6:	4770      	bx	lr
 80021c8:	e0042000 	.word	0xe0042000

080021cc <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80021cc:	4a02      	ldr	r2, [pc, #8]	; (80021d8 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80021ce:	6853      	ldr	r3, [r2, #4]
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6053      	str	r3, [r2, #4]
}
 80021d6:	4770      	bx	lr
 80021d8:	e0042000 	.word	0xe0042000

080021dc <HAL_SYSCFG_SRAM2Erase>:
  * @retval None
  */
void HAL_SYSCFG_SRAM2Erase(void)
{
  /* unlock the write protection of the SRAM2ER bit */
  SYSCFG->SKR = 0xCA;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_SYSCFG_SRAM2Erase+0x18>)
 80021de:	22ca      	movs	r2, #202	; 0xca
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
  SYSCFG->SKR = 0x53;
 80021e2:	2253      	movs	r2, #83	; 0x53
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Starts a hardware SRAM2 erase operation*/
  *(__IO uint32_t *) SCSR_SRAM2ER_BB = 0x00000001UL;
 80021e6:	f1a3 23fd 	sub.w	r3, r3, #4244700416	; 0xfd00fd00
 80021ea:	f5a3 0360 	sub.w	r3, r3, #14680064	; 0xe00000
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	4770      	bx	lr
 80021f4:	40010000 	.word	0x40010000

080021f8 <HAL_SYSCFG_EnableMemorySwappingBank>:
  *
  * @retval None
  */
void HAL_SYSCFG_EnableMemorySwappingBank(void)
{
  *(__IO uint32_t *)FB_MODE_BB = 0x00000001UL;
 80021f8:	4b01      	ldr	r3, [pc, #4]	; (8002200 <HAL_SYSCFG_EnableMemorySwappingBank+0x8>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
}
 80021fe:	4770      	bx	lr
 8002200:	42200020 	.word	0x42200020

08002204 <HAL_SYSCFG_DisableMemorySwappingBank>:
  * @retval None
  */
void HAL_SYSCFG_DisableMemorySwappingBank(void)
{

  *(__IO uint32_t *)FB_MODE_BB = 0x00000000UL;
 8002204:	4b01      	ldr	r3, [pc, #4]	; (800220c <HAL_SYSCFG_DisableMemorySwappingBank+0x8>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
}
 800220a:	4770      	bx	lr
 800220c:	42200020 	.word	0x42200020

08002210 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	4318      	orrs	r0, r3
 800221a:	6010      	str	r0, [r2, #0]
}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010030 	.word	0x40010030

08002224 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002224:	4a03      	ldr	r2, [pc, #12]	; (8002234 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	f023 0302 	bic.w	r3, r3, #2
 800222c:	4318      	orrs	r0, r3
 800222e:	6010      	str	r0, [r2, #0]
}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40010030 	.word	0x40010030

08002238 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8002238:	4a03      	ldr	r2, [pc, #12]	; (8002248 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x10>)
 800223a:	6853      	ldr	r3, [r2, #4]
 800223c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002240:	4318      	orrs	r0, r3
 8002242:	6050      	str	r0, [r2, #4]
}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40010030 	.word	0x40010030

0800224c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 800224c:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <HAL_SYSCFG_EnableVREFBUF+0x30>)
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002258:	f7ff ff1e 	bl	8002098 <HAL_GetTick>
 800225c:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 800225e:	4c07      	ldr	r4, [pc, #28]	; (800227c <HAL_SYSCFG_EnableVREFBUF+0x30>)
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	f013 0f08 	tst.w	r3, #8
 8002266:	d106      	bne.n	8002276 <HAL_SYSCFG_EnableVREFBUF+0x2a>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002268:	f7ff ff16 	bl	8002098 <HAL_GetTick>
 800226c:	1b40      	subs	r0, r0, r5
 800226e:	280a      	cmp	r0, #10
 8002270:	d9f6      	bls.n	8002260 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
 8002272:	2003      	movs	r0, #3
 8002274:	e000      	b.n	8002278 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    }
  }

  return HAL_OK;
 8002276:	2000      	movs	r0, #0
}
 8002278:	bd38      	pop	{r3, r4, r5, pc}
 800227a:	bf00      	nop
 800227c:	40010030 	.word	0x40010030

08002280 <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002280:	4a02      	ldr	r2, [pc, #8]	; (800228c <HAL_SYSCFG_DisableVREFBUF+0xc>)
 8002282:	6813      	ldr	r3, [r2, #0]
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6013      	str	r3, [r2, #0]
}
 800228a:	4770      	bx	lr
 800228c:	40010030 	.word	0x40010030

08002290 <HAL_SYSCFG_EnableIOAnalogSwitchBooster>:
  *
  * @retval None
  */
void HAL_SYSCFG_EnableIOAnalogSwitchBooster(void)
{
  SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 8002290:	4a02      	ldr	r2, [pc, #8]	; (800229c <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0xc>)
 8002292:	6853      	ldr	r3, [r2, #4]
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6053      	str	r3, [r2, #4]
}
 800229a:	4770      	bx	lr
 800229c:	40010000 	.word	0x40010000

080022a0 <HAL_SYSCFG_DisableIOAnalogSwitchBooster>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableIOAnalogSwitchBooster(void)
{
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 80022a0:	4a02      	ldr	r2, [pc, #8]	; (80022ac <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0xc>)
 80022a2:	6853      	ldr	r3, [r2, #4]
 80022a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a8:	6053      	str	r3, [r2, #4]
}
 80022aa:	4770      	bx	lr
 80022ac:	40010000 	.word	0x40010000

080022b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80022b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	0c1b      	lsrs	r3, r3, #16
 80022bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c4:	0200      	lsls	r0, r0, #8
 80022c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80022ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80022cc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_NVIC_SetPriority+0x5c>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022de:	f1c3 0407 	rsb	r4, r3, #7
 80022e2:	2c04      	cmp	r4, #4
 80022e4:	bf28      	it	cs
 80022e6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e8:	1d1d      	adds	r5, r3, #4
 80022ea:	2d06      	cmp	r5, #6
 80022ec:	bf8c      	ite	hi
 80022ee:	3b03      	subhi	r3, #3
 80022f0:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80022f6:	fa05 f404 	lsl.w	r4, r5, r4
 80022fa:	ea21 0104 	bic.w	r1, r1, r4
 80022fe:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	fa05 f303 	lsl.w	r3, r5, r3
 8002304:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800230a:	2800      	cmp	r0, #0
 800230c:	db09      	blt.n	8002322 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	0109      	lsls	r1, r1, #4
 8002310:	b2c9      	uxtb	r1, r1
 8002312:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002316:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800231a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800231e:	bc30      	pop	{r4, r5}
 8002320:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002322:	f000 000f 	and.w	r0, r0, #15
 8002326:	0109      	lsls	r1, r1, #4
 8002328:	b2c9      	uxtb	r1, r1
 800232a:	4b02      	ldr	r3, [pc, #8]	; (8002334 <HAL_NVIC_SetPriority+0x60>)
 800232c:	5419      	strb	r1, [r3, r0]
 800232e:	e7f6      	b.n	800231e <HAL_NVIC_SetPriority+0x4a>
 8002330:	e000ed00 	.word	0xe000ed00
 8002334:	e000ed14 	.word	0xe000ed14

08002338 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002338:	2800      	cmp	r0, #0
 800233a:	db08      	blt.n	800234e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233c:	0942      	lsrs	r2, r0, #5
 800233e:	f000 001f 	and.w	r0, r0, #31
 8002342:	2301      	movs	r3, #1
 8002344:	fa03 f000 	lsl.w	r0, r3, r0
 8002348:	4b01      	ldr	r3, [pc, #4]	; (8002350 <HAL_NVIC_EnableIRQ+0x18>)
 800234a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100

08002354 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002354:	2800      	cmp	r0, #0
 8002356:	db0d      	blt.n	8002374 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002358:	0943      	lsrs	r3, r0, #5
 800235a:	f000 001f 	and.w	r0, r0, #31
 800235e:	2201      	movs	r2, #1
 8002360:	fa02 f000 	lsl.w	r0, r2, r0
 8002364:	3320      	adds	r3, #32
 8002366:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_NVIC_DisableIRQ+0x24>)
 8002368:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800236c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002370:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000e100 	.word	0xe000e100

0800237c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800237c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002380:	4905      	ldr	r1, [pc, #20]	; (8002398 <HAL_NVIC_SystemReset+0x1c>)
 8002382:	68ca      	ldr	r2, [r1, #12]
 8002384:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_NVIC_SystemReset+0x20>)
 800238a:	4313      	orrs	r3, r2
 800238c:	60cb      	str	r3, [r1, #12]
 800238e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002392:	bf00      	nop
 8002394:	e7fd      	b.n	8002392 <HAL_NVIC_SystemReset+0x16>
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00
 800239c:	05fa0004 	.word	0x05fa0004

080023a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	3801      	subs	r0, #1
 80023a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80023a6:	d20a      	bcs.n	80023be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_SYSTICK_Config+0x24>)
 80023aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <HAL_SYSTICK_Config+0x28>)
 80023ae:	21f0      	movs	r1, #240	; 0xf0
 80023b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	2000      	movs	r0, #0
 80023b6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80023be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e010 	.word	0xe000e010
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <HAL_NVIC_GetPriorityGrouping+0xc>)
 80023ce:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 80023d0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80023dc:	b470      	push	{r4, r5, r6}
  if ((int32_t)(IRQn) >= 0)
 80023de:	2800      	cmp	r0, #0
 80023e0:	db22      	blt.n	8002428 <HAL_NVIC_GetPriority+0x4c>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80023e2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80023e6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80023ea:	f890 0300 	ldrb.w	r0, [r0, #768]	; 0x300
 80023ee:	0900      	lsrs	r0, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f0:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	f1c1 0407 	rsb	r4, r1, #7
 80023f8:	2c04      	cmp	r4, #4
 80023fa:	bf28      	it	cs
 80023fc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	1d0d      	adds	r5, r1, #4
 8002400:	2d06      	cmp	r5, #6
 8002402:	bf8c      	ite	hi
 8002404:	3903      	subhi	r1, #3
 8002406:	2100      	movls	r1, #0
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8002408:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800240c:	fa05 f404 	lsl.w	r4, r5, r4
 8002410:	fa20 f601 	lsr.w	r6, r0, r1
 8002414:	ea26 0404 	bic.w	r4, r6, r4
 8002418:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 800241a:	fa05 f101 	lsl.w	r1, r5, r1
 800241e:	ea20 0001 	bic.w	r0, r0, r1
 8002422:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 8002424:	bc70      	pop	{r4, r5, r6}
 8002426:	4770      	bx	lr
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8002428:	f000 000f 	and.w	r0, r0, #15
 800242c:	4c01      	ldr	r4, [pc, #4]	; (8002434 <HAL_NVIC_GetPriority+0x58>)
 800242e:	5c20      	ldrb	r0, [r4, r0]
 8002430:	0900      	lsrs	r0, r0, #4
 8002432:	e7dd      	b.n	80023f0 <HAL_NVIC_GetPriority+0x14>
 8002434:	e000ed14 	.word	0xe000ed14

08002438 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002438:	2800      	cmp	r0, #0
 800243a:	db09      	blt.n	8002450 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243c:	0943      	lsrs	r3, r0, #5
 800243e:	f000 001f 	and.w	r0, r0, #31
 8002442:	2201      	movs	r2, #1
 8002444:	fa02 f000 	lsl.w	r0, r2, r0
 8002448:	3340      	adds	r3, #64	; 0x40
 800244a:	4a02      	ldr	r2, [pc, #8]	; (8002454 <HAL_NVIC_SetPendingIRQ+0x1c>)
 800244c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <HAL_NVIC_GetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002458:	2800      	cmp	r0, #0
 800245a:	db0b      	blt.n	8002474 <HAL_NVIC_GetPendingIRQ+0x1c>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800245c:	0943      	lsrs	r3, r0, #5
 800245e:	3340      	adds	r3, #64	; 0x40
 8002460:	4a05      	ldr	r2, [pc, #20]	; (8002478 <HAL_NVIC_GetPendingIRQ+0x20>)
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	f000 001f 	and.w	r0, r0, #31
 800246a:	fa23 f000 	lsr.w	r0, r3, r0
 800246e:	f000 0001 	and.w	r0, r0, #1
 8002472:	4770      	bx	lr
    return(0U);
 8002474:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100

0800247c <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800247c:	2800      	cmp	r0, #0
 800247e:	db09      	blt.n	8002494 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002480:	0943      	lsrs	r3, r0, #5
 8002482:	f000 001f 	and.w	r0, r0, #31
 8002486:	2201      	movs	r2, #1
 8002488:	fa02 f000 	lsl.w	r0, r2, r0
 800248c:	3360      	adds	r3, #96	; 0x60
 800248e:	4a02      	ldr	r2, [pc, #8]	; (8002498 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8002490:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <HAL_NVIC_GetActive>:
  if ((int32_t)(IRQn) >= 0)
 800249c:	2800      	cmp	r0, #0
 800249e:	db0b      	blt.n	80024b8 <HAL_NVIC_GetActive+0x1c>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80024a0:	0943      	lsrs	r3, r0, #5
 80024a2:	3380      	adds	r3, #128	; 0x80
 80024a4:	4a05      	ldr	r2, [pc, #20]	; (80024bc <HAL_NVIC_GetActive+0x20>)
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	f000 001f 	and.w	r0, r0, #31
 80024ae:	fa23 f000 	lsr.w	r0, r3, r0
 80024b2:	f000 0001 	and.w	r0, r0, #1
 80024b6:	4770      	bx	lr
    return(0U);
 80024b8:	2000      	movs	r0, #0
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80024c0:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80024c4:	6813      	ldr	r3, [r2, #0]
 80024c6:	bf0c      	ite	eq
 80024c8:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80024cc:	f023 0304 	bicne.w	r3, r3, #4
 80024d0:	6013      	str	r3, [r2, #0]
  }
}
 80024d2:	4770      	bx	lr
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80024d8:	4770      	bx	lr

080024da <HAL_SYSTICK_IRQHandler>:
{
 80024da:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80024dc:	f7ff fffc 	bl	80024d8 <HAL_SYSTICK_Callback>
}
 80024e0:	bd08      	pop	{r3, pc}
	...

080024e4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_MPU_Disable+0x18>)
 80024ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 80024f2:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_MPU_Disable+0x1c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00
 8002500:	e000ed90 	.word	0xe000ed90

08002504 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002504:	f040 0001 	orr.w	r0, r0, #1
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_MPU_Enable+0x1c>)
 800250a:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800250c:	4a05      	ldr	r2, [pc, #20]	; (8002524 <HAL_MPU_Enable+0x20>)
 800250e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002516:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800251a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU settings take effects */
  __DSB();
  __ISB();
}
 800251e:	4770      	bx	lr
 8002520:	e000ed90 	.word	0xe000ed90
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002528:	7842      	ldrb	r2, [r0, #1]
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_MPU_ConfigRegion+0x50>)
 800252c:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800252e:	7803      	ldrb	r3, [r0, #0]
 8002530:	b923      	cbnz	r3, 800253c <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_MPU_ConfigRegion+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002538:	611a      	str	r2, [r3, #16]
  }
}
 800253a:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 800253c:	6843      	ldr	r3, [r0, #4]
 800253e:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <HAL_MPU_ConfigRegion+0x50>)
 8002540:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8002542:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8002544:	7ac3      	ldrb	r3, [r0, #11]
 8002546:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8002548:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
 800254c:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 800254e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8002550:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8002552:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8002556:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8002558:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 800255c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 800255e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 8002562:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8002564:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8002568:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 800256a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800256e:	7a01      	ldrb	r1, [r0, #8]
 8002570:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8002574:	6113      	str	r3, [r2, #16]
 8002576:	4770      	bx	lr
 8002578:	e000ed90 	.word	0xe000ed90

0800257c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800257c:	2800      	cmp	r0, #0
 800257e:	d057      	beq.n	8002630 <HAL_DMA_Init+0xb4>
{
 8002580:	b410      	push	{r4}
 8002582:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002584:	6801      	ldr	r1, [r0, #0]
 8002586:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_DMA_Init+0xb8>)
 8002588:	4291      	cmp	r1, r2
 800258a:	d846      	bhi.n	800261a <HAL_DMA_Init+0x9e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800258c:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <HAL_DMA_Init+0xbc>)
 800258e:	440a      	add	r2, r1
 8002590:	492a      	ldr	r1, [pc, #168]	; (800263c <HAL_DMA_Init+0xc0>)
 8002592:	fba1 1202 	umull	r1, r2, r1, r2
 8002596:	0912      	lsrs	r2, r2, #4
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800259c:	4a28      	ldr	r2, [pc, #160]	; (8002640 <HAL_DMA_Init+0xc4>)
 800259e:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025aa:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80025ae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	68dc      	ldr	r4, [r3, #12]
 80025b6:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b8:	691c      	ldr	r4, [r3, #16]
 80025ba:	4322      	orrs	r2, r4
 80025bc:	695c      	ldr	r4, [r3, #20]
 80025be:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c0:	699c      	ldr	r4, [r3, #24]
 80025c2:	4322      	orrs	r2, r4
 80025c4:	69dc      	ldr	r4, [r3, #28]
 80025c6:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c8:	6a1c      	ldr	r4, [r3, #32]
 80025ca:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80025cc:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ce:	6002      	str	r2, [r0, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80025d6:	d016      	beq.n	8002606 <HAL_DMA_Init+0x8a>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025da:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_DMA_Init+0xc4>)
 80025dc:	4291      	cmp	r1, r2
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025de:	bf0c      	ite	eq
 80025e0:	4918      	ldreq	r1, [pc, #96]	; (8002644 <HAL_DMA_Init+0xc8>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025e2:	4919      	ldrne	r1, [pc, #100]	; (8002648 <HAL_DMA_Init+0xcc>)
 80025e4:	680a      	ldr	r2, [r1, #0]
 80025e6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80025e8:	f000 041c 	and.w	r4, r0, #28
 80025ec:	200f      	movs	r0, #15
 80025ee:	40a0      	lsls	r0, r4
 80025f0:	ea22 0200 	bic.w	r2, r2, r0
 80025f4:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025f6:	680c      	ldr	r4, [r1, #0]
 80025f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025fa:	f002 001c 	and.w	r0, r2, #28
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	4082      	lsls	r2, r0
 8002602:	4322      	orrs	r2, r4
 8002604:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002606:	2000      	movs	r0, #0
 8002608:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002610:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 8002614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002618:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <HAL_DMA_Init+0xd0>)
 800261c:	440a      	add	r2, r1
 800261e:	4907      	ldr	r1, [pc, #28]	; (800263c <HAL_DMA_Init+0xc0>)
 8002620:	fba1 1202 	umull	r1, r2, r1, r2
 8002624:	0912      	lsrs	r2, r2, #4
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_DMA_Init+0xd4>)
 800262c:	6402      	str	r2, [r0, #64]	; 0x40
 800262e:	e7b7      	b.n	80025a0 <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 8002630:	2001      	movs	r0, #1
}
 8002632:	4770      	bx	lr
 8002634:	40020407 	.word	0x40020407
 8002638:	bffdfff8 	.word	0xbffdfff8
 800263c:	cccccccd 	.word	0xcccccccd
 8002640:	40020000 	.word	0x40020000
 8002644:	400200a8 	.word	0x400200a8
 8002648:	400204a8 	.word	0x400204a8
 800264c:	bffdfbf8 	.word	0xbffdfbf8
 8002650:	40020400 	.word	0x40020400

08002654 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002654:	2800      	cmp	r0, #0
 8002656:	d045      	beq.n	80026e4 <HAL_DMA_DeInit+0x90>
{
 8002658:	b410      	push	{r4}
 800265a:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800265c:	6801      	ldr	r1, [r0, #0]
 800265e:	680a      	ldr	r2, [r1, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	600a      	str	r2, [r1, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002666:	6801      	ldr	r1, [r0, #0]
 8002668:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_DMA_DeInit+0x94>)
 800266a:	4291      	cmp	r1, r2
 800266c:	d82f      	bhi.n	80026ce <HAL_DMA_DeInit+0x7a>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800266e:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <HAL_DMA_DeInit+0x98>)
 8002670:	440a      	add	r2, r1
 8002672:	491f      	ldr	r1, [pc, #124]	; (80026f0 <HAL_DMA_DeInit+0x9c>)
 8002674:	fba1 1202 	umull	r1, r2, r1, r2
 8002678:	0912      	lsrs	r2, r2, #4
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800267e:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <HAL_DMA_DeInit+0xa0>)
 8002680:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2100      	movs	r1, #0
 8002686:	6011      	str	r1, [r2, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002688:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800268a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800268c:	f002 011c 	and.w	r1, r2, #28
 8002690:	2201      	movs	r2, #1
 8002692:	408a      	lsls	r2, r1
 8002694:	6042      	str	r2, [r0, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002696:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002698:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_DMA_DeInit+0xa0>)
 800269a:	4291      	cmp	r1, r2
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800269c:	bf0c      	ite	eq
 800269e:	4c16      	ldreq	r4, [pc, #88]	; (80026f8 <HAL_DMA_DeInit+0xa4>)
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026a0:	4c16      	ldrne	r4, [pc, #88]	; (80026fc <HAL_DMA_DeInit+0xa8>)
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026a6:	f001 001c 	and.w	r0, r1, #28
 80026aa:	210f      	movs	r1, #15
 80026ac:	4081      	lsls	r1, r0
 80026ae:	ea22 0201 	bic.w	r2, r2, r1
 80026b2:	6022      	str	r2, [r4, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80026b4:	2000      	movs	r0, #0
 80026b6:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80026b8:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80026ba:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80026bc:	6398      	str	r0, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026be:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80026c0:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026c4:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 80026c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026cc:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_DMA_DeInit+0xac>)
 80026d0:	440a      	add	r2, r1
 80026d2:	4907      	ldr	r1, [pc, #28]	; (80026f0 <HAL_DMA_DeInit+0x9c>)
 80026d4:	fba1 1202 	umull	r1, r2, r1, r2
 80026d8:	0912      	lsrs	r2, r2, #4
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80026de:	4a09      	ldr	r2, [pc, #36]	; (8002704 <HAL_DMA_DeInit+0xb0>)
 80026e0:	6402      	str	r2, [r0, #64]	; 0x40
 80026e2:	e7ce      	b.n	8002682 <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 80026e4:	2001      	movs	r0, #1
}
 80026e6:	4770      	bx	lr
 80026e8:	40020407 	.word	0x40020407
 80026ec:	bffdfff8 	.word	0xbffdfff8
 80026f0:	cccccccd 	.word	0xcccccccd
 80026f4:	40020000 	.word	0x40020000
 80026f8:	400200a8 	.word	0x400200a8
 80026fc:	400204a8 	.word	0x400204a8
 8002700:	bffdfbf8 	.word	0xbffdfbf8
 8002704:	40020400 	.word	0x40020400

08002708 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002708:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800270a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800270e:	2c01      	cmp	r4, #1
 8002710:	d033      	beq.n	800277a <HAL_DMA_Start+0x72>
 8002712:	2401      	movs	r4, #1
 8002714:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002718:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 800271c:	b2e4      	uxtb	r4, r4
 800271e:	2c01      	cmp	r4, #1
 8002720:	d005      	beq.n	800272e <HAL_DMA_Start+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	2300      	movs	r3, #0
 8002724:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8002728:	2002      	movs	r0, #2
  }
  return status;
}
 800272a:	bc70      	pop	{r4, r5, r6}
 800272c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800272e:	2402      	movs	r4, #2
 8002730:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002734:	2400      	movs	r4, #0
 8002736:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002738:	6805      	ldr	r5, [r0, #0]
 800273a:	682c      	ldr	r4, [r5, #0]
 800273c:	f024 0401 	bic.w	r4, r4, #1
 8002740:	602c      	str	r4, [r5, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002742:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002744:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002746:	f004 061c 	and.w	r6, r4, #28
 800274a:	2401      	movs	r4, #1
 800274c:	40b4      	lsls	r4, r6
 800274e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002750:	6804      	ldr	r4, [r0, #0]
 8002752:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002754:	6883      	ldr	r3, [r0, #8]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d00a      	beq.n	8002770 <HAL_DMA_Start+0x68>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800275a:	6803      	ldr	r3, [r0, #0]
 800275c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800275e:	6803      	ldr	r3, [r0, #0]
 8002760:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE(hdma);
 8002762:	6802      	ldr	r2, [r0, #0]
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276c:	2000      	movs	r0, #0
 800276e:	e7dc      	b.n	800272a <HAL_DMA_Start+0x22>
    hdma->Instance->CPAR = DstAddress;
 8002770:	6803      	ldr	r3, [r0, #0]
 8002772:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002774:	6803      	ldr	r3, [r0, #0]
 8002776:	60d9      	str	r1, [r3, #12]
 8002778:	e7f3      	b.n	8002762 <HAL_DMA_Start+0x5a>
  __HAL_LOCK(hdma);
 800277a:	2002      	movs	r0, #2
 800277c:	e7d5      	b.n	800272a <HAL_DMA_Start+0x22>

0800277e <HAL_DMA_Start_IT>:
{
 800277e:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8002780:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8002784:	2c01      	cmp	r4, #1
 8002786:	d045      	beq.n	8002814 <HAL_DMA_Start_IT+0x96>
 8002788:	2401      	movs	r4, #1
 800278a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 800278e:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8002792:	b2e4      	uxtb	r4, r4
 8002794:	2c01      	cmp	r4, #1
 8002796:	d005      	beq.n	80027a4 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8002798:	2300      	movs	r3, #0
 800279a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 800279e:	2002      	movs	r0, #2
}
 80027a0:	bc70      	pop	{r4, r5, r6}
 80027a2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a4:	2402      	movs	r4, #2
 80027a6:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027aa:	2400      	movs	r4, #0
 80027ac:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80027ae:	6805      	ldr	r5, [r0, #0]
 80027b0:	682c      	ldr	r4, [r5, #0]
 80027b2:	f024 0401 	bic.w	r4, r4, #1
 80027b6:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027b8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80027ba:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80027bc:	f004 061c 	and.w	r6, r4, #28
 80027c0:	2401      	movs	r4, #1
 80027c2:	40b4      	lsls	r4, r6
 80027c4:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 80027c6:	6804      	ldr	r4, [r0, #0]
 80027c8:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ca:	6883      	ldr	r3, [r0, #8]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d011      	beq.n	80027f4 <HAL_DMA_Start_IT+0x76>
    hdma->Instance->CPAR = SrcAddress;
 80027d0:	6803      	ldr	r3, [r0, #0]
 80027d2:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027d4:	6803      	ldr	r3, [r0, #0]
 80027d6:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80027d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80027da:	b183      	cbz	r3, 80027fe <HAL_DMA_Start_IT+0x80>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027dc:	6802      	ldr	r2, [r0, #0]
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	f043 030e 	orr.w	r3, r3, #14
 80027e4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80027e6:	6802      	ldr	r2, [r0, #0]
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f0:	2000      	movs	r0, #0
 80027f2:	e7d5      	b.n	80027a0 <HAL_DMA_Start_IT+0x22>
    hdma->Instance->CPAR = DstAddress;
 80027f4:	6803      	ldr	r3, [r0, #0]
 80027f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80027f8:	6803      	ldr	r3, [r0, #0]
 80027fa:	60d9      	str	r1, [r3, #12]
 80027fc:	e7ec      	b.n	80027d8 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027fe:	6802      	ldr	r2, [r0, #0]
 8002800:	6813      	ldr	r3, [r2, #0]
 8002802:	f023 0304 	bic.w	r3, r3, #4
 8002806:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002808:	6802      	ldr	r2, [r0, #0]
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	f043 030a 	orr.w	r3, r3, #10
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e7e8      	b.n	80027e6 <HAL_DMA_Start_IT+0x68>
  __HAL_LOCK(hdma);
 8002814:	2002      	movs	r0, #2
 8002816:	e7c3      	b.n	80027a0 <HAL_DMA_Start_IT+0x22>

08002818 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002818:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d006      	beq.n	8002830 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002822:	2304      	movs	r3, #4
 8002824:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002826:	2300      	movs	r3, #0
 8002828:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800282c:	2001      	movs	r0, #1
 800282e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002830:	6802      	ldr	r2, [r0, #0]
 8002832:	6813      	ldr	r3, [r2, #0]
 8002834:	f023 030e 	bic.w	r3, r3, #14
 8002838:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800283a:	6802      	ldr	r2, [r0, #0]
 800283c:	6813      	ldr	r3, [r2, #0]
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002844:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002846:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002848:	f003 031c 	and.w	r3, r3, #28
 800284c:	2201      	movs	r2, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002854:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002858:	2300      	movs	r3, #0
 800285a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 800285e:	4618      	mov	r0, r3
}
 8002860:	4770      	bx	lr

08002862 <HAL_DMA_Abort_IT>:
{
 8002862:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002864:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286e:	2304      	movs	r3, #4
 8002870:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002872:	2001      	movs	r0, #1
}
 8002874:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002876:	6802      	ldr	r2, [r0, #0]
 8002878:	6813      	ldr	r3, [r2, #0]
 800287a:	f023 030e 	bic.w	r3, r3, #14
 800287e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002880:	6802      	ldr	r2, [r0, #0]
 8002882:	6813      	ldr	r3, [r2, #0]
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800288a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800288c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800288e:	f003 031c 	and.w	r3, r3, #28
 8002892:	2201      	movs	r2, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800289a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800289e:	2300      	movs	r3, #0
 80028a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80028a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028a6:	b113      	cbz	r3, 80028ae <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80028a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2000      	movs	r0, #0
 80028ac:	e7e2      	b.n	8002874 <HAL_DMA_Abort_IT+0x12>
 80028ae:	2000      	movs	r0, #0
 80028b0:	e7e0      	b.n	8002874 <HAL_DMA_Abort_IT+0x12>

080028b2 <HAL_DMA_PollForTransfer>:
{
 80028b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028b6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_PollForTransfer+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c0:	2304      	movs	r3, #4
 80028c2:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80028c4:	2300      	movs	r3, #0
 80028c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
}
 80028cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 80028d0:	6803      	ldr	r3, [r0, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f013 0f20 	tst.w	r3, #32
 80028d8:	d12d      	bne.n	8002936 <HAL_DMA_PollForTransfer+0x84>
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80028da:	bb89      	cbnz	r1, 8002940 <HAL_DMA_PollForTransfer+0x8e>
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 80028dc:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80028de:	f006 061c 	and.w	r6, r6, #28
 80028e2:	2302      	movs	r3, #2
 80028e4:	fa03 f606 	lsl.w	r6, r3, r6
 80028e8:	4615      	mov	r5, r2
 80028ea:	4688      	mov	r8, r1
 80028ec:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80028ee:	f7ff fbd3 	bl	8002098 <HAL_GetTick>
 80028f2:	4681      	mov	r9, r0
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 80028f4:	2708      	movs	r7, #8
  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80028f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	4233      	tst	r3, r6
 80028fc:	d132      	bne.n	8002964 <HAL_DMA_PollForTransfer+0xb2>
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 80028fe:	6811      	ldr	r1, [r2, #0]
 8002900:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002902:	f003 031c 	and.w	r3, r3, #28
 8002906:	fa07 f003 	lsl.w	r0, r7, r3
 800290a:	4208      	tst	r0, r1
 800290c:	d11f      	bne.n	800294e <HAL_DMA_PollForTransfer+0x9c>
    if(Timeout != HAL_MAX_DELAY)
 800290e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002912:	d0f1      	beq.n	80028f8 <HAL_DMA_PollForTransfer+0x46>
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 8002914:	f7ff fbc0 	bl	8002098 <HAL_GetTick>
 8002918:	eba0 0009 	sub.w	r0, r0, r9
 800291c:	42a8      	cmp	r0, r5
 800291e:	d801      	bhi.n	8002924 <HAL_DMA_PollForTransfer+0x72>
 8002920:	2d00      	cmp	r5, #0
 8002922:	d1e8      	bne.n	80028f6 <HAL_DMA_PollForTransfer+0x44>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002924:	2320      	movs	r3, #32
 8002926:	63e3      	str	r3, [r4, #60]	; 0x3c
        hdma->State = HAL_DMA_STATE_READY;
 8002928:	2001      	movs	r0, #1
 800292a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
        __HAL_UNLOCK(hdma);
 800292e:	2300      	movs	r3, #0
 8002930:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8002934:	e7ca      	b.n	80028cc <HAL_DMA_PollForTransfer+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800293a:	63c3      	str	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800293c:	2001      	movs	r0, #1
 800293e:	e7c5      	b.n	80028cc <HAL_DMA_PollForTransfer+0x1a>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 8002940:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8002942:	f006 061c 	and.w	r6, r6, #28
 8002946:	2304      	movs	r3, #4
 8002948:	fa03 f606 	lsl.w	r6, r3, r6
 800294c:	e7cc      	b.n	80028e8 <HAL_DMA_PollForTransfer+0x36>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800294e:	2001      	movs	r0, #1
 8002950:	fa00 f303 	lsl.w	r3, r0, r3
 8002954:	6053      	str	r3, [r2, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002956:	63e0      	str	r0, [r4, #60]	; 0x3c
      hdma->State= HAL_DMA_STATE_READY;
 8002958:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
      __HAL_UNLOCK(hdma);
 800295c:	2300      	movs	r3, #0
 800295e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8002962:	e7b3      	b.n	80028cc <HAL_DMA_PollForTransfer+0x1a>
  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8002964:	f1b8 0f00 	cmp.w	r8, #0
 8002968:	d10c      	bne.n	8002984 <HAL_DMA_PollForTransfer+0xd2>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1CU));
 800296a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800296c:	f003 011c 	and.w	r1, r3, #28
 8002970:	2302      	movs	r3, #2
 8002972:	408b      	lsls	r3, r1
 8002974:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002976:	2301      	movs	r3, #1
 8002978:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800297c:	2000      	movs	r0, #0
 800297e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return HAL_OK;
 8002982:	e7a3      	b.n	80028cc <HAL_DMA_PollForTransfer+0x1a>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 8002984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002986:	f003 011c 	and.w	r1, r3, #28
 800298a:	2304      	movs	r3, #4
 800298c:	408b      	lsls	r3, r1
 800298e:	6053      	str	r3, [r2, #4]
 8002990:	e7f4      	b.n	800297c <HAL_DMA_PollForTransfer+0xca>

08002992 <HAL_DMA_IRQHandler>:
{
 8002992:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002994:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002996:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002998:	6804      	ldr	r4, [r0, #0]
 800299a:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800299c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800299e:	f003 031c 	and.w	r3, r3, #28
 80029a2:	2204      	movs	r2, #4
 80029a4:	409a      	lsls	r2, r3
 80029a6:	420a      	tst	r2, r1
 80029a8:	d015      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x44>
 80029aa:	f015 0f04 	tst.w	r5, #4
 80029ae:	d012      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	f013 0f20 	tst.w	r3, #32
 80029b6:	d103      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	f023 0304 	bic.w	r3, r3, #4
 80029be:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80029c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80029c4:	f003 021c 	and.w	r2, r3, #28
 80029c8:	2304      	movs	r3, #4
 80029ca:	4093      	lsls	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80029ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80029d0:	b103      	cbz	r3, 80029d4 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80029d2:	4798      	blx	r3
}
 80029d4:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029d6:	2202      	movs	r2, #2
 80029d8:	409a      	lsls	r2, r3
 80029da:	420a      	tst	r2, r1
 80029dc:	d01c      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x86>
 80029de:	f015 0f02 	tst.w	r5, #2
 80029e2:	d019      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	f013 0f20 	tst.w	r3, #32
 80029ea:	d106      	bne.n	80029fa <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	f023 030a 	bic.w	r3, r3, #10
 80029f2:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80029fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80029fe:	f003 021c 	and.w	r2, r3, #28
 8002a02:	2302      	movs	r3, #2
 8002a04:	4093      	lsls	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8002a0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0df      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8002a14:	4798      	blx	r3
 8002a16:	e7dd      	b.n	80029d4 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a18:	2208      	movs	r2, #8
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	420b      	tst	r3, r1
 8002a20:	d0d8      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x42>
 8002a22:	f015 0f08 	tst.w	r5, #8
 8002a26:	d0d5      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	f023 030e 	bic.w	r3, r3, #14
 8002a2e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a30:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002a32:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a34:	f003 031c 	and.w	r3, r3, #28
 8002a38:	2201      	movs	r2, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a40:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002a42:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002a46:	2300      	movs	r3, #0
 8002a48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002a4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0c0      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8002a52:	4798      	blx	r3
  return;
 8002a54:	e7be      	b.n	80029d4 <HAL_DMA_IRQHandler+0x42>

08002a56 <HAL_DMA_RegisterCallback>:
{
 8002a56:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8002a58:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002a5c:	2801      	cmp	r0, #1
 8002a5e:	d020      	beq.n	8002aa2 <HAL_DMA_RegisterCallback+0x4c>
 8002a60:	2001      	movs	r0, #1
 8002a62:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a66:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8002a6a:	b2c0      	uxtb	r0, r0
 8002a6c:	2801      	cmp	r0, #1
 8002a6e:	d004      	beq.n	8002a7a <HAL_DMA_RegisterCallback+0x24>
    status = HAL_ERROR;
 8002a70:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return status;
 8002a78:	4770      	bx	lr
    switch (CallbackID)
 8002a7a:	2903      	cmp	r1, #3
 8002a7c:	d80f      	bhi.n	8002a9e <HAL_DMA_RegisterCallback+0x48>
 8002a7e:	e8df f001 	tbb	[pc, r1]
 8002a82:	0502      	.short	0x0502
 8002a84:	0b08      	.short	0x0b08
           hdma->XferCpltCallback = pCallback;
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2000      	movs	r0, #0
           break;
 8002a8a:	e7f2      	b.n	8002a72 <HAL_DMA_RegisterCallback+0x1c>
           hdma->XferHalfCpltCallback = pCallback;
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2000      	movs	r0, #0
           break;
 8002a90:	e7ef      	b.n	8002a72 <HAL_DMA_RegisterCallback+0x1c>
           hdma->XferErrorCallback = pCallback;
 8002a92:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2000      	movs	r0, #0
           break;
 8002a96:	e7ec      	b.n	8002a72 <HAL_DMA_RegisterCallback+0x1c>
           hdma->XferAbortCallback = pCallback;
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2000      	movs	r0, #0
           break;
 8002a9c:	e7e9      	b.n	8002a72 <HAL_DMA_RegisterCallback+0x1c>
           status = HAL_ERROR;
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	e7e7      	b.n	8002a72 <HAL_DMA_RegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 8002aa2:	2002      	movs	r0, #2
}
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_DMA_UnRegisterCallback>:
{
 8002aa6:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8002aa8:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002aac:	2a01      	cmp	r2, #1
 8002aae:	d027      	beq.n	8002b00 <HAL_DMA_UnRegisterCallback+0x5a>
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	2a01      	cmp	r2, #1
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_UnRegisterCallback+0x24>
    status = HAL_ERROR;
 8002ac0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return status;
 8002ac8:	4770      	bx	lr
    switch (CallbackID)
 8002aca:	2904      	cmp	r1, #4
 8002acc:	d816      	bhi.n	8002afc <HAL_DMA_UnRegisterCallback+0x56>
 8002ace:	e8df f001 	tbb	[pc, r1]
 8002ad2:	0603      	.short	0x0603
 8002ad4:	0c09      	.short	0x0c09
 8002ad6:	0f          	.byte	0x0f
 8002ad7:	00          	.byte	0x00
           hdma->XferCpltCallback = NULL;
 8002ad8:	2000      	movs	r0, #0
 8002ada:	62d8      	str	r0, [r3, #44]	; 0x2c
           break;
 8002adc:	e7f1      	b.n	8002ac2 <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferHalfCpltCallback = NULL;
 8002ade:	2000      	movs	r0, #0
 8002ae0:	6318      	str	r0, [r3, #48]	; 0x30
           break;
 8002ae2:	e7ee      	b.n	8002ac2 <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferErrorCallback = NULL;
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	6358      	str	r0, [r3, #52]	; 0x34
           break;
 8002ae8:	e7eb      	b.n	8002ac2 <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferAbortCallback = NULL;
 8002aea:	2000      	movs	r0, #0
 8002aec:	6398      	str	r0, [r3, #56]	; 0x38
           break;
 8002aee:	e7e8      	b.n	8002ac2 <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferCpltCallback = NULL;
 8002af0:	2000      	movs	r0, #0
 8002af2:	62d8      	str	r0, [r3, #44]	; 0x2c
           hdma->XferHalfCpltCallback = NULL;
 8002af4:	6318      	str	r0, [r3, #48]	; 0x30
           hdma->XferErrorCallback = NULL;
 8002af6:	6358      	str	r0, [r3, #52]	; 0x34
           hdma->XferAbortCallback = NULL;
 8002af8:	6398      	str	r0, [r3, #56]	; 0x38
           break;
 8002afa:	e7e2      	b.n	8002ac2 <HAL_DMA_UnRegisterCallback+0x1c>
           status = HAL_ERROR;
 8002afc:	2001      	movs	r0, #1
 8002afe:	e7e0      	b.n	8002ac2 <HAL_DMA_UnRegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 8002b00:	2002      	movs	r0, #2
}
 8002b02:	4770      	bx	lr

08002b04 <HAL_DMA_GetState>:
  return hdma->State;
 8002b04:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8002b08:	4770      	bx	lr

08002b0a <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002b0a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_EXTI_SetConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d05b      	beq.n	8002bcc <HAL_EXTI_SetConfigLine+0xbc>
 8002b14:	2900      	cmp	r1, #0
 8002b16:	d05b      	beq.n	8002bd0 <HAL_EXTI_SetConfigLine+0xc0>
{
 8002b18:	b4f0      	push	{r4, r5, r6, r7}
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8002b1a:	680a      	ldr	r2, [r1, #0]
 8002b1c:	6002      	str	r2, [r0, #0]

  /* Compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002b1e:	6808      	ldr	r0, [r1, #0]
 8002b20:	f3c0 4300 	ubfx	r3, r0, #16, #1
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8002b24:	f000 041f 	and.w	r4, r0, #31
  maskline = (1uL << linepos);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	40a2      	lsls	r2, r4

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8002b2c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002b30:	d01e      	beq.n	8002b70 <HAL_EXTI_SetConfigLine+0x60>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002b32:	015d      	lsls	r5, r3, #5
 8002b34:	4f27      	ldr	r7, [pc, #156]	; (8002bd4 <HAL_EXTI_SetConfigLine+0xc4>)
    regval = *regaddr;
 8002b36:	f855 c007 	ldr.w	ip, [r5, r7]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8002b3a:	688e      	ldr	r6, [r1, #8]
 8002b3c:	f016 0f01 	tst.w	r6, #1
    {
      regval |= maskline;
 8002b40:	bf14      	ite	ne
 8002b42:	ea4c 0602 	orrne.w	r6, ip, r2
    }
    else
    {
      regval &= ~maskline;
 8002b46:	ea2c 0602 	biceq.w	r6, ip, r2
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 8002b4a:	51ee      	str	r6, [r5, r7]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002b4c:	4f22      	ldr	r7, [pc, #136]	; (8002bd8 <HAL_EXTI_SetConfigLine+0xc8>)
    regval = *regaddr;
 8002b4e:	f855 c007 	ldr.w	ip, [r5, r7]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8002b52:	688e      	ldr	r6, [r1, #8]
 8002b54:	f016 0f02 	tst.w	r6, #2
    {
      regval |= maskline;
 8002b58:	bf14      	ite	ne
 8002b5a:	ea4c 0602 	orrne.w	r6, ip, r2
    }
    else
    {
      regval &= ~maskline;
 8002b5e:	ea2c 0602 	biceq.w	r6, ip, r2
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 8002b62:	51ee      	str	r6, [r5, r7]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8002b64:	680d      	ldr	r5, [r1, #0]
 8002b66:	f005 65c0 	and.w	r5, r5, #100663296	; 0x6000000
 8002b6a:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8002b6e:	d019      	beq.n	8002ba4 <HAL_EXTI_SetConfigLine+0x94>
      SYSCFG->EXTICR[linepos >> 2u] = regval;
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002b70:	015b      	lsls	r3, r3, #5
 8002b72:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8002b76:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
  regval = *regaddr;
 8002b7a:	6804      	ldr	r4, [r0, #0]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8002b7c:	684d      	ldr	r5, [r1, #4]
 8002b7e:	f015 0f01 	tst.w	r5, #1
  {
    regval |= maskline;
 8002b82:	bf14      	ite	ne
 8002b84:	4314      	orrne	r4, r2
  }
  else
  {
    regval &= ~maskline;
 8002b86:	4394      	biceq	r4, r2
  }

  /* Store interrupt mode */
  *regaddr = regval;
 8002b88:	6004      	str	r4, [r0, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8002b8a:	4c14      	ldr	r4, [pc, #80]	; (8002bdc <HAL_EXTI_SetConfigLine+0xcc>)
  regval = *regaddr;
 8002b8c:	5918      	ldr	r0, [r3, r4]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8002b8e:	6849      	ldr	r1, [r1, #4]
 8002b90:	f011 0f02 	tst.w	r1, #2
  {
    regval |= maskline;
 8002b94:	bf14      	ite	ne
 8002b96:	4302      	orrne	r2, r0
  }
  else
  {
    regval &= ~maskline;
 8002b98:	ea20 0202 	biceq.w	r2, r0, r2
  }

  /* Store event mode */
  *regaddr = regval;
 8002b9c:	511a      	str	r2, [r3, r4]

  return HAL_OK;
 8002b9e:	2000      	movs	r0, #0
}
 8002ba0:	bcf0      	pop	{r4, r5, r6, r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	f004 041c 	and.w	r4, r4, #28
 8002ba8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002bac:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8002bb0:	68a6      	ldr	r6, [r4, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002bb2:	f000 0003 	and.w	r0, r0, #3
 8002bb6:	0080      	lsls	r0, r0, #2
 8002bb8:	2507      	movs	r5, #7
 8002bba:	4085      	lsls	r5, r0
 8002bbc:	ea26 0605 	bic.w	r6, r6, r5
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002bc0:	68cd      	ldr	r5, [r1, #12]
 8002bc2:	fa05 f000 	lsl.w	r0, r5, r0
 8002bc6:	4330      	orrs	r0, r6
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8002bc8:	60a0      	str	r0, [r4, #8]
 8002bca:	e7d1      	b.n	8002b70 <HAL_EXTI_SetConfigLine+0x60>
    return HAL_ERROR;
 8002bcc:	2001      	movs	r0, #1
 8002bce:	4770      	bx	lr
 8002bd0:	2001      	movs	r0, #1
}
 8002bd2:	4770      	bx	lr
 8002bd4:	40010408 	.word	0x40010408
 8002bd8:	4001040c 	.word	0x4001040c
 8002bdc:	40010404 	.word	0x40010404

08002be0 <HAL_EXTI_GetConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d04b      	beq.n	8002c7c <HAL_EXTI_GetConfigLine+0x9c>
 8002be4:	2900      	cmp	r1, #0
 8002be6:	d04b      	beq.n	8002c80 <HAL_EXTI_GetConfigLine+0xa0>
{
 8002be8:	b430      	push	{r4, r5}

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8002bea:	6803      	ldr	r3, [r0, #0]
 8002bec:	600b      	str	r3, [r1, #0]

  /* Compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8002bee:	f003 051f 	and.w	r5, r3, #31
  maskline = (1uL << linepos);
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	40aa      	lsls	r2, r5
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002bf6:	f3c3 4000 	ubfx	r0, r3, #16, #1

  /* 1] Get core mode : interrupt */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002bfa:	0140      	lsls	r0, r0, #5
 8002bfc:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
 8002c00:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
  regval = *regaddr;
 8002c04:	6824      	ldr	r4, [r4, #0]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00u)
 8002c06:	4222      	tst	r2, r4
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8002c08:	bf14      	ite	ne
 8002c0a:	2401      	movne	r4, #1
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8002c0c:	2400      	moveq	r4, #0
 8002c0e:	604c      	str	r4, [r1, #4]
  }

  /* Get event mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8002c10:	4c1c      	ldr	r4, [pc, #112]	; (8002c84 <HAL_EXTI_GetConfigLine+0xa4>)
  regval = *regaddr;
 8002c12:	5904      	ldr	r4, [r0, r4]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00u)
 8002c14:	4222      	tst	r2, r4
 8002c16:	d003      	beq.n	8002c20 <HAL_EXTI_GetConfigLine+0x40>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8002c18:	684c      	ldr	r4, [r1, #4]
 8002c1a:	f044 0402 	orr.w	r4, r4, #2
 8002c1e:	604c      	str	r4, [r1, #4]
  }

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8002c20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c24:	d025      	beq.n	8002c72 <HAL_EXTI_GetConfigLine+0x92>
  {
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c26:	4c18      	ldr	r4, [pc, #96]	; (8002c88 <HAL_EXTI_GetConfigLine+0xa8>)
    regval = *regaddr;
 8002c28:	5904      	ldr	r4, [r0, r4]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00u)
 8002c2a:	4222      	tst	r2, r4
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8002c2c:	bf14      	ite	ne
 8002c2e:	2401      	movne	r4, #1
    }
    else
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8002c30:	2400      	moveq	r4, #0
 8002c32:	608c      	str	r4, [r1, #8]
    }

    /* Get falling configuration */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c34:	4c15      	ldr	r4, [pc, #84]	; (8002c8c <HAL_EXTI_GetConfigLine+0xac>)
    regval = *regaddr;
 8002c36:	5900      	ldr	r0, [r0, r4]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00u)
 8002c38:	4202      	tst	r2, r0
 8002c3a:	d003      	beq.n	8002c44 <HAL_EXTI_GetConfigLine+0x64>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8002c3c:	688a      	ldr	r2, [r1, #8]
 8002c3e:	f042 0202 	orr.w	r2, r2, #2
 8002c42:	608a      	str	r2, [r1, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8002c44:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002c48:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002c4c:	d002      	beq.n	8002c54 <HAL_EXTI_GetConfigLine+0x74>
      regval = SYSCFG->EXTICR[linepos >> 2u];
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
    }
    else
    {
      pExtiConfig->GPIOSel = 0x00u;
 8002c4e:	2000      	movs	r0, #0
 8002c50:	60c8      	str	r0, [r1, #12]
 8002c52:	e011      	b.n	8002c78 <HAL_EXTI_GetConfigLine+0x98>
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8002c54:	08ab      	lsrs	r3, r5, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <HAL_EXTI_GetConfigLine+0xb0>)
 8002c5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8002c5e:	43eb      	mvns	r3, r5
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	0e1b      	lsrs	r3, r3, #24
 8002c6c:	60cb      	str	r3, [r1, #12]
  {
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
    pExtiConfig->GPIOSel = 0x00u;
  }

  return HAL_OK;
 8002c6e:	2000      	movs	r0, #0
 8002c70:	e002      	b.n	8002c78 <HAL_EXTI_GetConfigLine+0x98>
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8002c72:	2000      	movs	r0, #0
 8002c74:	6088      	str	r0, [r1, #8]
    pExtiConfig->GPIOSel = 0x00u;
 8002c76:	60c8      	str	r0, [r1, #12]
}
 8002c78:	bc30      	pop	{r4, r5}
 8002c7a:	4770      	bx	lr
    return HAL_ERROR;
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	4770      	bx	lr
 8002c80:	2001      	movs	r0, #1
}
 8002c82:	4770      	bx	lr
 8002c84:	40010404 	.word	0x40010404
 8002c88:	40010408 	.word	0x40010408
 8002c8c:	4001040c 	.word	0x4001040c
 8002c90:	40010000 	.word	0x40010000

08002c94 <HAL_EXTI_ClearConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if (hexti == NULL)
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d03b      	beq.n	8002d10 <HAL_EXTI_ClearConfigLine+0x7c>
{
 8002c98:	b470      	push	{r4, r5, r6}
 8002c9a:	4605      	mov	r5, r0

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002c9c:	6804      	ldr	r4, [r0, #0]
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8002c9e:	f004 061f 	and.w	r6, r4, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002ca2:	f3c4 4000 	ubfx	r0, r4, #16, #1
  maskline = (1uL << linepos);

  /* 1] Clear interrupt mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002ca6:	0140      	lsls	r0, r0, #5
 8002ca8:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002cac:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
  regval = (*regaddr & ~maskline);
 8002cb0:	6811      	ldr	r1, [r2, #0]
  maskline = (1uL << linepos);
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	40b3      	lsls	r3, r6
  regval = (*regaddr & ~maskline);
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	4019      	ands	r1, r3
  *regaddr = regval;
 8002cba:	6011      	str	r1, [r2, #0]

  /* 2] Clear event mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8002cbc:	4917      	ldr	r1, [pc, #92]	; (8002d1c <HAL_EXTI_ClearConfigLine+0x88>)
  regval = (*regaddr & ~maskline);
 8002cbe:	5842      	ldr	r2, [r0, r1]
 8002cc0:	401a      	ands	r2, r3
  *regaddr = regval;
 8002cc2:	5042      	str	r2, [r0, r1]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8002cc4:	682a      	ldr	r2, [r5, #0]
 8002cc6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002cca:	d023      	beq.n	8002d14 <HAL_EXTI_ClearConfigLine+0x80>
  {
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002ccc:	3104      	adds	r1, #4
    regval = (*regaddr & ~maskline);
 8002cce:	5842      	ldr	r2, [r0, r1]
 8002cd0:	401a      	ands	r2, r3
    *regaddr = regval;
 8002cd2:	5042      	str	r2, [r0, r1]

    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_EXTI_ClearConfigLine+0x8c>)
    regval = (*regaddr & ~maskline);
 8002cd6:	5881      	ldr	r1, [r0, r2]
 8002cd8:	400b      	ands	r3, r1
    *regaddr = regval;
 8002cda:	5083      	str	r3, [r0, r2]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002ce2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ce6:	d001      	beq.n	8002cec <HAL_EXTI_ClearConfigLine+0x58>
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
      SYSCFG->EXTICR[linepos >> 2u] = regval;
    }
  }

  return HAL_OK;
 8002ce8:	2000      	movs	r0, #0
 8002cea:	e014      	b.n	8002d16 <HAL_EXTI_ClearConfigLine+0x82>
 8002cec:	f006 061c 	and.w	r6, r6, #28
 8002cf0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002cf4:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8002cf8:	68b2      	ldr	r2, [r6, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002cfa:	f004 0303 	and.w	r3, r4, #3
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	2107      	movs	r1, #7
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	ea22 0303 	bic.w	r3, r2, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8002d0a:	60b3      	str	r3, [r6, #8]
  return HAL_OK;
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	e002      	b.n	8002d16 <HAL_EXTI_ClearConfigLine+0x82>
    return HAL_ERROR;
 8002d10:	2001      	movs	r0, #1
}
 8002d12:	4770      	bx	lr
  return HAL_OK;
 8002d14:	2000      	movs	r0, #0
}
 8002d16:	bc70      	pop	{r4, r5, r6}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010404 	.word	0x40010404
 8002d20:	4001040c 	.word	0x4001040c

08002d24 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002d24:	b911      	cbnz	r1, 8002d2c <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002d26:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2000      	movs	r0, #0
      break;
 8002d2a:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8002d2c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002d30:	b110      	cbz	r0, 8002d38 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002d32:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8002d34:	2000      	movs	r0, #0
 8002d36:	4770      	bx	lr
    return HAL_ERROR;
 8002d38:	2001      	movs	r0, #1
  }
}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002d3c:	b510      	push	{r4, lr}
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d3e:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002d40:	f003 011f 	and.w	r1, r3, #31
 8002d44:	2201      	movs	r2, #1
 8002d46:	408a      	lsls	r2, r1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d48:	f3c3 4300 	ubfx	r3, r3, #16, #1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002d4c:	015b      	lsls	r3, r3, #5
 8002d4e:	4904      	ldr	r1, [pc, #16]	; (8002d60 <HAL_EXTI_IRQHandler+0x24>)
  regval = (*regaddr & maskline);
 8002d50:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8002d52:	4214      	tst	r4, r2
 8002d54:	d003      	beq.n	8002d5e <HAL_EXTI_IRQHandler+0x22>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002d56:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002d58:	6843      	ldr	r3, [r0, #4]
 8002d5a:	b103      	cbz	r3, 8002d5e <HAL_EXTI_IRQHandler+0x22>
    {
      hexti->PendingCallback();
 8002d5c:	4798      	blx	r3
    }
  }
}
 8002d5e:	bd10      	pop	{r4, pc}
 8002d60:	40010414 	.word	0x40010414

08002d64 <HAL_EXTI_GetPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d64:	6803      	ldr	r3, [r0, #0]
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8002d66:	f003 001f 	and.w	r0, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d6a:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << linepos);

  /* Get pending bit */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002d6e:	015b      	lsls	r3, r3, #5
 8002d70:	4a03      	ldr	r2, [pc, #12]	; (8002d80 <HAL_EXTI_GetPending+0x1c>)

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
 8002d72:	589a      	ldr	r2, [r3, r2]
  maskline = (1uL << linepos);
 8002d74:	2301      	movs	r3, #1
 8002d76:	4083      	lsls	r3, r0
  regval = ((*regaddr & maskline) >> linepos);
 8002d78:	4013      	ands	r3, r2
  return regval;
}
 8002d7a:	fa23 f000 	lsr.w	r0, r3, r0
 8002d7e:	4770      	bx	lr
 8002d80:	40010414 	.word	0x40010414

08002d84 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d84:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002d86:	f003 011f 	and.w	r1, r3, #31
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	408a      	lsls	r2, r1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d8e:	f3c3 4300 	ubfx	r3, r3, #16, #1

  /* Get pending register address */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002d92:	015b      	lsls	r3, r3, #5
 8002d94:	4901      	ldr	r1, [pc, #4]	; (8002d9c <HAL_EXTI_ClearPending+0x18>)

  /* Clear Pending bit */
  *regaddr =  maskline;
 8002d96:	505a      	str	r2, [r3, r1]
}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010414 	.word	0x40010414

08002da0 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002da0:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002da2:	f003 011f 	and.w	r1, r3, #31
 8002da6:	2201      	movs	r2, #1
 8002da8:	408a      	lsls	r2, r1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002daa:	f3c3 4300 	ubfx	r3, r3, #16, #1

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8002dae:	015b      	lsls	r3, r3, #5
 8002db0:	4901      	ldr	r1, [pc, #4]	; (8002db8 <HAL_EXTI_GenerateSWI+0x18>)
  *regaddr = maskline;
 8002db2:	505a      	str	r2, [r3, r1]
}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40010410 	.word	0x40010410

08002dbc <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002dbc:	b430      	push	{r4, r5}
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002dbe:	460b      	mov	r3, r1

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002dc0:	4c09      	ldr	r4, [pc, #36]	; (8002de8 <FLASH_Program_Fast+0x2c>)
 8002dc2:	6962      	ldr	r2, [r4, #20]
 8002dc4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002dc8:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dca:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002dce:	b672      	cpsid	i
 8002dd0:	f501 7480 	add.w	r4, r1, #256	; 0x100
 8002dd4:	1a41      	subs	r1, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 8002dda:	3304      	adds	r3, #4
    row_index--;
  } while (row_index != 0U);
 8002ddc:	42a3      	cmp	r3, r4
 8002dde:	d1fa      	bne.n	8002dd6 <FLASH_Program_Fast+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	f385 8810 	msr	PRIMASK, r5

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002de4:	bc30      	pop	{r4, r5}
 8002de6:	4770      	bx	lr
 8002de8:	40022000 	.word	0x40022000

08002dec <HAL_FLASH_Program_IT>:
{
 8002dec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8002dee:	4c23      	ldr	r4, [pc, #140]	; (8002e7c <HAL_FLASH_Program_IT+0x90>)
 8002df0:	7824      	ldrb	r4, [r4, #0]
 8002df2:	2c01      	cmp	r4, #1
 8002df4:	d040      	beq.n	8002e78 <HAL_FLASH_Program_IT+0x8c>
 8002df6:	4c21      	ldr	r4, [pc, #132]	; (8002e7c <HAL_FLASH_Program_IT+0x90>)
 8002df8:	2501      	movs	r5, #1
 8002dfa:	7025      	strb	r5, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002dfc:	2500      	movs	r5, #0
 8002dfe:	6065      	str	r5, [r4, #4]
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002e00:	4c1f      	ldr	r4, [pc, #124]	; (8002e80 <HAL_FLASH_Program_IT+0x94>)
 8002e02:	6824      	ldr	r4, [r4, #0]
 8002e04:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8002e08:	d019      	beq.n	8002e3e <HAL_FLASH_Program_IT+0x52>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002e0a:	4d1d      	ldr	r5, [pc, #116]	; (8002e80 <HAL_FLASH_Program_IT+0x94>)
 8002e0c:	682c      	ldr	r4, [r5, #0]
 8002e0e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8002e12:	602c      	str	r4, [r5, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002e14:	4c19      	ldr	r4, [pc, #100]	; (8002e7c <HAL_FLASH_Program_IT+0x90>)
 8002e16:	2502      	movs	r5, #2
 8002e18:	7725      	strb	r5, [r4, #28]
  if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002e1a:	2802      	cmp	r0, #2
 8002e1c:	d013      	beq.n	8002e46 <HAL_FLASH_Program_IT+0x5a>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8002e1e:	4c17      	ldr	r4, [pc, #92]	; (8002e7c <HAL_FLASH_Program_IT+0x90>)
 8002e20:	2503      	movs	r5, #3
 8002e22:	7225      	strb	r5, [r4, #8]
  pFlash.Address = Address;
 8002e24:	60e1      	str	r1, [r4, #12]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8002e26:	4d16      	ldr	r5, [pc, #88]	; (8002e80 <HAL_FLASH_Program_IT+0x94>)
 8002e28:	696c      	ldr	r4, [r5, #20]
 8002e2a:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 8002e2e:	616c      	str	r4, [r5, #20]
  if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002e30:	b1c0      	cbz	r0, 8002e64 <HAL_FLASH_Program_IT+0x78>
  else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002e32:	3801      	subs	r0, #1
 8002e34:	2801      	cmp	r0, #1
  return status;
 8002e36:	bf88      	it	hi
 8002e38:	2000      	movhi	r0, #0
  else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002e3a:	d90d      	bls.n	8002e58 <HAL_FLASH_Program_IT+0x6c>
}
 8002e3c:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002e3e:	4c0f      	ldr	r4, [pc, #60]	; (8002e7c <HAL_FLASH_Program_IT+0x90>)
 8002e40:	2500      	movs	r5, #0
 8002e42:	7725      	strb	r5, [r4, #28]
 8002e44:	e7e9      	b.n	8002e1a <HAL_FLASH_Program_IT+0x2e>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_LAST;
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_FLASH_Program_IT+0x90>)
 8002e48:	2004      	movs	r0, #4
 8002e4a:	7218      	strb	r0, [r3, #8]
  pFlash.Address = Address;
 8002e4c:	60d9      	str	r1, [r3, #12]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8002e4e:	480c      	ldr	r0, [pc, #48]	; (8002e80 <HAL_FLASH_Program_IT+0x94>)
 8002e50:	6943      	ldr	r3, [r0, #20]
 8002e52:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002e56:	6143      	str	r3, [r0, #20]
 8002e58:	4608      	mov	r0, r1
    FLASH_Program_Fast(Address, (uint32_t)Data);
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	f7ff ffae 	bl	8002dbc <FLASH_Program_Fast>
  return status;
 8002e60:	2000      	movs	r0, #0
 8002e62:	e7eb      	b.n	8002e3c <HAL_FLASH_Program_IT+0x50>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e64:	6968      	ldr	r0, [r5, #20]
 8002e66:	f040 0001 	orr.w	r0, r0, #1
 8002e6a:	6168      	str	r0, [r5, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002e6c:	600a      	str	r2, [r1, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002e6e:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002e72:	604b      	str	r3, [r1, #4]
  return status;
 8002e74:	2000      	movs	r0, #0
 8002e76:	e7e1      	b.n	8002e3c <HAL_FLASH_Program_IT+0x50>
  __HAL_LOCK(&pFlash);
 8002e78:	2002      	movs	r0, #2
 8002e7a:	e7df      	b.n	8002e3c <HAL_FLASH_Program_IT+0x50>
 8002e7c:	20000014 	.word	0x20000014
 8002e80:	40022000 	.word	0x40022000

08002e84 <HAL_FLASH_EndOfOperationCallback>:
}
 8002e84:	4770      	bx	lr

08002e86 <HAL_FLASH_OperationErrorCallback>:
}
 8002e86:	4770      	bx	lr

08002e88 <HAL_FLASH_IRQHandler>:
{
 8002e88:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8002e8a:	4a50      	ldr	r2, [pc, #320]	; (8002fcc <HAL_FLASH_IRQHandler+0x144>)
 8002e8c:	6953      	ldr	r3, [r2, #20]
 8002e8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e92:	f023 0307 	bic.w	r3, r3, #7
 8002e96:	6153      	str	r3, [r2, #20]
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8002e98:	6953      	ldr	r3, [r2, #20]
 8002e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e9e:	6153      	str	r3, [r2, #20]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002ea2:	7a1b      	ldrb	r3, [r3, #8]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d050      	beq.n	8002f4c <HAL_FLASH_IRQHandler+0xc4>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002eaa:	4948      	ldr	r1, [pc, #288]	; (8002fcc <HAL_FLASH_IRQHandler+0x144>)
 8002eac:	690a      	ldr	r2, [r1, #16]
 8002eae:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002eb2:	f022 0205 	bic.w	r2, r2, #5
 8002eb6:	0412      	lsls	r2, r2, #16
 8002eb8:	0c12      	lsrs	r2, r2, #16
  error |= (FLASH->ECCR & FLASH_FLAG_ECCC);
 8002eba:	698b      	ldr	r3, [r1, #24]
 8002ebc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  if (error !=0U)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	d024      	beq.n	8002f0e <HAL_FLASH_IRQHandler+0x86>
    pFlash.ErrorCode |= error;
 8002ec4:	4942      	ldr	r1, [pc, #264]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002ec6:	684a      	ldr	r2, [r1, #4]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8002ecc:	f013 4240 	ands.w	r2, r3, #3221225472	; 0xc0000000
 8002ed0:	d003      	beq.n	8002eda <HAL_FLASH_IRQHandler+0x52>
 8002ed2:	493e      	ldr	r1, [pc, #248]	; (8002fcc <HAL_FLASH_IRQHandler+0x144>)
 8002ed4:	6988      	ldr	r0, [r1, #24]
 8002ed6:	4302      	orrs	r2, r0
 8002ed8:	618a      	str	r2, [r1, #24]
 8002eda:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 8002ede:	bf1c      	itt	ne
 8002ee0:	4a3a      	ldrne	r2, [pc, #232]	; (8002fcc <HAL_FLASH_IRQHandler+0x144>)
 8002ee2:	6113      	strne	r3, [r2, #16]
    FLASH_FlushCaches() ;
 8002ee4:	f000 fc4e 	bl	8003784 <FLASH_FlushCaches>
    procedure = pFlash.ProcedureOnGoing;
 8002ee8:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002eea:	7a1b      	ldrb	r3, [r3, #8]
 8002eec:	b2db      	uxtb	r3, r3
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d031      	beq.n	8002f56 <HAL_FLASH_IRQHandler+0xce>
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d034      	beq.n	8002f60 <HAL_FLASH_IRQHandler+0xd8>
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8002ef6:	3b03      	subs	r3, #3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8002efc:	bf9a      	itte	ls
 8002efe:	4b34      	ldrls	r3, [pc, #208]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f00:	68d8      	ldrls	r0, [r3, #12]
       HAL_FLASH_OperationErrorCallback(0U);
 8002f02:	2000      	movhi	r0, #0
 8002f04:	f7ff ffbf 	bl	8002e86 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f08:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	721a      	strb	r2, [r3, #8]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8002f0e:	4b2f      	ldr	r3, [pc, #188]	; (8002fcc <HAL_FLASH_IRQHandler+0x144>)
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f013 0f01 	tst.w	r3, #1
 8002f16:	d042      	beq.n	8002f9e <HAL_FLASH_IRQHandler+0x116>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f18:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <HAL_FLASH_IRQHandler+0x144>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	611a      	str	r2, [r3, #16]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f20:	7a1b      	ldrb	r3, [r3, #8]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d12c      	bne.n	8002f82 <HAL_FLASH_IRQHandler+0xfa>
      pFlash.NbPagesToErase--;
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	3a01      	subs	r2, #1
 8002f2e:	619a      	str	r2, [r3, #24]
      if(pFlash.NbPagesToErase != 0U)
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	b1d3      	cbz	r3, 8002f6a <HAL_FLASH_IRQHandler+0xe2>
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8002f34:	4c26      	ldr	r4, [pc, #152]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f36:	6960      	ldr	r0, [r4, #20]
 8002f38:	f7ff ffa4 	bl	8002e84 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Page++;
 8002f3c:	6963      	ldr	r3, [r4, #20]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	6163      	str	r3, [r4, #20]
        tmp_page = pFlash.Page;
 8002f42:	6960      	ldr	r0, [r4, #20]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8002f44:	6921      	ldr	r1, [r4, #16]
 8002f46:	f000 fba3 	bl	8003690 <FLASH_PageErase>
 8002f4a:	e028      	b.n	8002f9e <HAL_FLASH_IRQHandler+0x116>
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002f4c:	6953      	ldr	r3, [r2, #20]
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f52:	6153      	str	r3, [r2, #20]
 8002f54:	e7a9      	b.n	8002eaa <HAL_FLASH_IRQHandler+0x22>
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f58:	6958      	ldr	r0, [r3, #20]
 8002f5a:	f7ff ff94 	bl	8002e86 <HAL_FLASH_OperationErrorCallback>
 8002f5e:	e7d3      	b.n	8002f08 <HAL_FLASH_IRQHandler+0x80>
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f62:	6918      	ldr	r0, [r3, #16]
 8002f64:	f7ff ff8f 	bl	8002e86 <HAL_FLASH_OperationErrorCallback>
 8002f68:	e7ce      	b.n	8002f08 <HAL_FLASH_IRQHandler+0x80>
        pFlash.Page = 0xFFFFFFFFU;
 8002f6a:	4c19      	ldr	r4, [pc, #100]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f70:	6163      	str	r3, [r4, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	7223      	strb	r3, [r4, #8]
        FLASH_FlushCaches() ;
 8002f76:	f000 fc05 	bl	8003784 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8002f7a:	6960      	ldr	r0, [r4, #20]
 8002f7c:	f7ff ff82 	bl	8002e84 <HAL_FLASH_EndOfOperationCallback>
 8002f80:	e00d      	b.n	8002f9e <HAL_FLASH_IRQHandler+0x116>
      FLASH_FlushCaches() ;
 8002f82:	f000 fbff 	bl	8003784 <FLASH_FlushCaches>
      procedure = pFlash.ProcedureOnGoing;
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f88:	7a1b      	ldrb	r3, [r3, #8]
 8002f8a:	b2db      	uxtb	r3, r3
      if(procedure == FLASH_PROC_MASS_ERASE)
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d012      	beq.n	8002fb6 <HAL_FLASH_IRQHandler+0x12e>
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8002f90:	3b03      	subs	r3, #3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d913      	bls.n	8002fc0 <HAL_FLASH_IRQHandler+0x138>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	721a      	strb	r2, [r3, #8]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002fa0:	7a1b      	ldrb	r3, [r3, #8]
 8002fa2:	b93b      	cbnz	r3, 8002fb4 <HAL_FLASH_IRQHandler+0x12c>
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8002fa4:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <HAL_FLASH_IRQHandler+0x144>)
 8002fa6:	6953      	ldr	r3, [r2, #20]
 8002fa8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002fac:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(&pFlash);
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
}
 8002fb4:	bd10      	pop	{r4, pc}
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002fb8:	6918      	ldr	r0, [r3, #16]
 8002fba:	f7ff ff63 	bl	8002e84 <HAL_FLASH_EndOfOperationCallback>
 8002fbe:	e7eb      	b.n	8002f98 <HAL_FLASH_IRQHandler+0x110>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_FLASH_IRQHandler+0x148>)
 8002fc2:	68d8      	ldr	r0, [r3, #12]
 8002fc4:	f7ff ff5e 	bl	8002e84 <HAL_FLASH_EndOfOperationCallback>
 8002fc8:	e7e6      	b.n	8002f98 <HAL_FLASH_IRQHandler+0x110>
 8002fca:	bf00      	nop
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	20000014 	.word	0x20000014

08002fd4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002fd4:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <HAL_FLASH_Unlock+0x20>)
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db01      	blt.n	8002fe0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2000      	movs	r0, #0
}
 8002fde:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <HAL_FLASH_Unlock+0x20>)
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <HAL_FLASH_Unlock+0x24>)
 8002fe4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002fe6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002fea:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002fec:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	0fc0      	lsrs	r0, r0, #31
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	45670123 	.word	0x45670123

08002ffc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ffc:	4a03      	ldr	r2, [pc, #12]	; (800300c <HAL_FLASH_Lock+0x10>)
 8002ffe:	6953      	ldr	r3, [r2, #20]
 8003000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003004:	6153      	str	r3, [r2, #20]
}
 8003006:	2000      	movs	r0, #0
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40022000 	.word	0x40022000

08003010 <HAL_FLASH_OB_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <HAL_FLASH_OB_Unlock+0x20>)
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003018:	d007      	beq.n	800302a <HAL_FLASH_OB_Unlock+0x1a>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_FLASH_OB_Unlock+0x20>)
 800301c:	4a05      	ldr	r2, [pc, #20]	; (8003034 <HAL_FLASH_OB_Unlock+0x24>)
 800301e:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8003020:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 8003024:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8003026:	2000      	movs	r0, #0
 8003028:	4770      	bx	lr
    return HAL_ERROR;
 800302a:	2001      	movs	r0, #1
}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40022000 	.word	0x40022000
 8003034:	08192a3b 	.word	0x08192a3b

08003038 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8003038:	4a03      	ldr	r2, [pc, #12]	; (8003048 <HAL_FLASH_OB_Lock+0x10>)
 800303a:	6953      	ldr	r3, [r2, #20]
 800303c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003040:	6153      	str	r3, [r2, #20]
}
 8003042:	2000      	movs	r0, #0
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40022000 	.word	0x40022000

0800304c <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800304c:	4b01      	ldr	r3, [pc, #4]	; (8003054 <HAL_FLASH_GetError+0x8>)
 800304e:	6858      	ldr	r0, [r3, #4]
}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000014 	.word	0x20000014

08003058 <FLASH_WaitForLastOperation>:
{
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff f81c 	bl	8002098 <HAL_GetTick>
 8003060:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003062:	4c1e      	ldr	r4, [pc, #120]	; (80030dc <FLASH_WaitForLastOperation+0x84>)
 8003064:	6923      	ldr	r3, [r4, #16]
 8003066:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800306a:	d009      	beq.n	8003080 <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 800306c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003070:	d0f8      	beq.n	8003064 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003072:	f7ff f811 	bl	8002098 <HAL_GetTick>
 8003076:	1b80      	subs	r0, r0, r6
 8003078:	42a8      	cmp	r0, r5
 800307a:	d3f3      	bcc.n	8003064 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 800307c:	2003      	movs	r0, #3
 800307e:	e027      	b.n	80030d0 <FLASH_WaitForLastOperation+0x78>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003080:	4916      	ldr	r1, [pc, #88]	; (80030dc <FLASH_WaitForLastOperation+0x84>)
 8003082:	690a      	ldr	r2, [r1, #16]
 8003084:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003088:	f022 0205 	bic.w	r2, r2, #5
 800308c:	0412      	lsls	r2, r2, #16
 800308e:	0c12      	lsrs	r2, r2, #16
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8003090:	698b      	ldr	r3, [r1, #24]
 8003092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  if(error != 0u)
 8003096:	4313      	orrs	r3, r2
 8003098:	d011      	beq.n	80030be <FLASH_WaitForLastOperation+0x66>
    pFlash.ErrorCode |= error;
 800309a:	4911      	ldr	r1, [pc, #68]	; (80030e0 <FLASH_WaitForLastOperation+0x88>)
 800309c:	684a      	ldr	r2, [r1, #4]
 800309e:	431a      	orrs	r2, r3
 80030a0:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 80030a2:	f013 4240 	ands.w	r2, r3, #3221225472	; 0xc0000000
 80030a6:	d003      	beq.n	80030b0 <FLASH_WaitForLastOperation+0x58>
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <FLASH_WaitForLastOperation+0x84>)
 80030aa:	6988      	ldr	r0, [r1, #24]
 80030ac:	4302      	orrs	r2, r0
 80030ae:	618a      	str	r2, [r1, #24]
 80030b0:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 80030b4:	d00d      	beq.n	80030d2 <FLASH_WaitForLastOperation+0x7a>
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <FLASH_WaitForLastOperation+0x84>)
 80030b8:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 80030ba:	2001      	movs	r0, #1
 80030bc:	e008      	b.n	80030d0 <FLASH_WaitForLastOperation+0x78>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <FLASH_WaitForLastOperation+0x84>)
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f013 0f01 	tst.w	r3, #1
 80030c6:	d006      	beq.n	80030d6 <FLASH_WaitForLastOperation+0x7e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <FLASH_WaitForLastOperation+0x84>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80030ce:	2000      	movs	r0, #0
}
 80030d0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80030d2:	2001      	movs	r0, #1
 80030d4:	e7fc      	b.n	80030d0 <FLASH_WaitForLastOperation+0x78>
  return HAL_OK;
 80030d6:	2000      	movs	r0, #0
 80030d8:	e7fa      	b.n	80030d0 <FLASH_WaitForLastOperation+0x78>
 80030da:	bf00      	nop
 80030dc:	40022000 	.word	0x40022000
 80030e0:	20000014 	.word	0x20000014

080030e4 <HAL_FLASH_Program>:
{
 80030e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80030e8:	4c2b      	ldr	r4, [pc, #172]	; (8003198 <HAL_FLASH_Program+0xb4>)
 80030ea:	7824      	ldrb	r4, [r4, #0]
 80030ec:	2c01      	cmp	r4, #1
 80030ee:	d050      	beq.n	8003192 <HAL_FLASH_Program+0xae>
 80030f0:	4698      	mov	r8, r3
 80030f2:	4617      	mov	r7, r2
 80030f4:	460d      	mov	r5, r1
 80030f6:	4604      	mov	r4, r0
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_FLASH_Program+0xb4>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003102:	f7ff ffa9 	bl	8003058 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003106:	4606      	mov	r6, r0
 8003108:	b9d0      	cbnz	r0, 8003140 <HAL_FLASH_Program+0x5c>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800310a:	4b23      	ldr	r3, [pc, #140]	; (8003198 <HAL_FLASH_Program+0xb4>)
 800310c:	2200      	movs	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003110:	4b22      	ldr	r3, [pc, #136]	; (800319c <HAL_FLASH_Program+0xb8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003118:	d018      	beq.n	800314c <HAL_FLASH_Program+0x68>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800311a:	4a20      	ldr	r2, [pc, #128]	; (800319c <HAL_FLASH_Program+0xb8>)
 800311c:	6813      	ldr	r3, [r2, #0]
 800311e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003122:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_FLASH_Program+0xb4>)
 8003126:	2202      	movs	r2, #2
 8003128:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800312a:	b19c      	cbz	r4, 8003154 <HAL_FLASH_Program+0x70>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800312c:	1e63      	subs	r3, r4, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d926      	bls.n	8003180 <HAL_FLASH_Program+0x9c>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003132:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003136:	f7ff ff8f 	bl	8003058 <FLASH_WaitForLastOperation>
 800313a:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 800313c:	f000 fb22 	bl	8003784 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003140:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_FLASH_Program+0xb4>)
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
}
 8003146:	4630      	mov	r0, r6
 8003148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_FLASH_Program+0xb4>)
 800314e:	2200      	movs	r2, #0
 8003150:	771a      	strb	r2, [r3, #28]
 8003152:	e7ea      	b.n	800312a <HAL_FLASH_Program+0x46>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003154:	4a11      	ldr	r2, [pc, #68]	; (800319c <HAL_FLASH_Program+0xb8>)
 8003156:	6953      	ldr	r3, [r2, #20]
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6153      	str	r3, [r2, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800315e:	602f      	str	r7, [r5, #0]
 8003160:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003164:	f8c5 8004 	str.w	r8, [r5, #4]
      prog_bit = FLASH_CR_PG;
 8003168:	2401      	movs	r4, #1
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800316a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800316e:	f7ff ff73 	bl	8003058 <FLASH_WaitForLastOperation>
 8003172:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003174:	4a09      	ldr	r2, [pc, #36]	; (800319c <HAL_FLASH_Program+0xb8>)
 8003176:	6953      	ldr	r3, [r2, #20]
 8003178:	ea23 0304 	bic.w	r3, r3, r4
 800317c:	6153      	str	r3, [r2, #20]
 800317e:	e7dd      	b.n	800313c <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003180:	4639      	mov	r1, r7
 8003182:	4628      	mov	r0, r5
 8003184:	f7ff fe1a 	bl	8002dbc <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003188:	2c02      	cmp	r4, #2
 800318a:	d1d2      	bne.n	8003132 <HAL_FLASH_Program+0x4e>
        prog_bit = FLASH_CR_FSTPG;
 800318c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003190:	e7eb      	b.n	800316a <HAL_FLASH_Program+0x86>
  __HAL_LOCK(&pFlash);
 8003192:	2602      	movs	r6, #2
 8003194:	e7d7      	b.n	8003146 <HAL_FLASH_Program+0x62>
 8003196:	bf00      	nop
 8003198:	20000014 	.word	0x20000014
 800319c:	40022000 	.word	0x40022000

080031a0 <HAL_FLASH_OB_Launch>:
{
 80031a0:	b508      	push	{r3, lr}
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80031a2:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <HAL_FLASH_OB_Launch+0x18>)
 80031a4:	6953      	ldr	r3, [r2, #20]
 80031a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031aa:	6153      	str	r3, [r2, #20]
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80031ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031b0:	f7ff ff52 	bl	8003058 <FLASH_WaitForLastOperation>
}
 80031b4:	bd08      	pop	{r3, pc}
 80031b6:	bf00      	nop
 80031b8:	40022000 	.word	0x40022000

080031bc <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80031bc:	f010 0f01 	tst.w	r0, #1
 80031c0:	d004      	beq.n	80031cc <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80031c2:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <FLASH_MassErase+0x2c>)
 80031c4:	6953      	ldr	r3, [r2, #20]
 80031c6:	f043 0304 	orr.w	r3, r3, #4
 80031ca:	6153      	str	r3, [r2, #20]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80031cc:	f010 0f02 	tst.w	r0, #2
 80031d0:	d004      	beq.n	80031dc <FLASH_MassErase+0x20>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80031d2:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <FLASH_MassErase+0x2c>)
 80031d4:	6953      	ldr	r3, [r2, #20]
 80031d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031da:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80031dc:	4a02      	ldr	r2, [pc, #8]	; (80031e8 <FLASH_MassErase+0x2c>)
 80031de:	6953      	ldr	r3, [r2, #20]
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6153      	str	r3, [r2, #20]
}
 80031e6:	4770      	bx	lr
 80031e8:	40022000 	.word	0x40022000

080031ec <HAL_FLASHEx_OBProgram>:
{
 80031ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80031f0:	4bb4      	ldr	r3, [pc, #720]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2d8>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	f000 8193 	beq.w	8003520 <HAL_FLASHEx_OBProgram+0x334>
 80031fa:	4604      	mov	r4, r0
 80031fc:	4bb1      	ldr	r3, [pc, #708]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2d8>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8003206:	6803      	ldr	r3, [r0, #0]
 8003208:	f013 0f01 	tst.w	r3, #1
 800320c:	d117      	bne.n	800323e <HAL_FLASHEx_OBProgram+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 800320e:	2600      	movs	r6, #0
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	f013 0f02 	tst.w	r3, #2
 8003216:	d15c      	bne.n	80032d2 <HAL_FLASHEx_OBProgram+0xe6>
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	f013 0f04 	tst.w	r3, #4
 800321e:	d176      	bne.n	800330e <HAL_FLASHEx_OBProgram+0x122>
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	f013 0f08 	tst.w	r3, #8
 8003226:	d004      	beq.n	8003232 <HAL_FLASHEx_OBProgram+0x46>
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8003228:	6a25      	ldr	r5, [r4, #32]
 800322a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800322c:	42bd      	cmp	r5, r7
 800322e:	f040 80f7 	bne.w	8003420 <HAL_FLASHEx_OBProgram+0x234>
  __HAL_UNLOCK(&pFlash);
 8003232:	4ba4      	ldr	r3, [pc, #656]	; (80034c4 <HAL_FLASHEx_OBProgram+0x2d8>)
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
}
 8003238:	4630      	mov	r0, r6
 800323a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800323e:	6845      	ldr	r5, [r0, #4]
 8003240:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8003244:	68c7      	ldr	r7, [r0, #12]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003246:	f24c 3050 	movw	r0, #50000	; 0xc350
 800324a:	f7ff ff05 	bl	8003058 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800324e:	4606      	mov	r6, r0
 8003250:	b9b8      	cbnz	r0, 8003282 <HAL_FLASHEx_OBProgram+0x96>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8003252:	b9d5      	cbnz	r5, 800328a <HAL_FLASHEx_OBProgram+0x9e>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8003254:	4a9c      	ldr	r2, [pc, #624]	; (80034c8 <HAL_FLASHEx_OBProgram+0x2dc>)
 8003256:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003258:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800325c:	ea43 0308 	orr.w	r3, r3, r8
 8003260:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003264:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003266:	4d98      	ldr	r5, [pc, #608]	; (80034c8 <HAL_FLASHEx_OBProgram+0x2dc>)
 8003268:	696b      	ldr	r3, [r5, #20]
 800326a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326e:	616b      	str	r3, [r5, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003270:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003274:	f7ff fef0 	bl	8003058 <FLASH_WaitForLastOperation>
 8003278:	4606      	mov	r6, r0

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800327a:	696b      	ldr	r3, [r5, #20]
 800327c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003280:	616b      	str	r3, [r5, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	3600      	adds	r6, #0
 8003284:	bf18      	it	ne
 8003286:	2601      	movne	r6, #1
 8003288:	e7c2      	b.n	8003210 <HAL_FLASHEx_OBProgram+0x24>
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800328a:	2d01      	cmp	r5, #1
 800328c:	d00d      	beq.n	80032aa <HAL_FLASHEx_OBProgram+0xbe>
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800328e:	2d02      	cmp	r5, #2
 8003290:	d015      	beq.n	80032be <HAL_FLASHEx_OBProgram+0xd2>
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8003292:	2d04      	cmp	r5, #4
 8003294:	d1e7      	bne.n	8003266 <HAL_FLASHEx_OBProgram+0x7a>
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 8003296:	4a8c      	ldr	r2, [pc, #560]	; (80034c8 <HAL_FLASHEx_OBProgram+0x2dc>)
 8003298:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800329a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800329e:	ea43 0308 	orr.w	r3, r3, r8
 80032a2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80032a6:	6513      	str	r3, [r2, #80]	; 0x50
 80032a8:	e7dd      	b.n	8003266 <HAL_FLASHEx_OBProgram+0x7a>
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 80032aa:	4a87      	ldr	r2, [pc, #540]	; (80034c8 <HAL_FLASHEx_OBProgram+0x2dc>)
 80032ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032ae:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80032b2:	ea43 0308 	orr.w	r3, r3, r8
 80032b6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80032ba:	6313      	str	r3, [r2, #48]	; 0x30
 80032bc:	e7d3      	b.n	8003266 <HAL_FLASHEx_OBProgram+0x7a>
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 80032be:	4a82      	ldr	r2, [pc, #520]	; (80034c8 <HAL_FLASHEx_OBProgram+0x2dc>)
 80032c0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80032c2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80032c6:	ea43 0308 	orr.w	r3, r3, r8
 80032ca:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80032ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032d0:	e7c9      	b.n	8003266 <HAL_FLASHEx_OBProgram+0x7a>
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80032d2:	6927      	ldr	r7, [r4, #16]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032d8:	f7ff febe 	bl	8003058 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 80032dc:	b108      	cbz	r0, 80032e2 <HAL_FLASHEx_OBProgram+0xf6>
      status = HAL_ERROR;
 80032de:	2601      	movs	r6, #1
 80032e0:	e79a      	b.n	8003218 <HAL_FLASHEx_OBProgram+0x2c>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80032e2:	4d79      	ldr	r5, [pc, #484]	; (80034c8 <HAL_FLASHEx_OBProgram+0x2dc>)
 80032e4:	6a2b      	ldr	r3, [r5, #32]
 80032e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ea:	433b      	orrs	r3, r7
 80032ec:	622b      	str	r3, [r5, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80032ee:	696b      	ldr	r3, [r5, #20]
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	616b      	str	r3, [r5, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032fa:	f7ff fead 	bl	8003058 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80032fe:	696b      	ldr	r3, [r5, #20]
 8003300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003304:	616b      	str	r3, [r5, #20]
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8003306:	2800      	cmp	r0, #0
      status = HAL_ERROR;
 8003308:	bf18      	it	ne
 800330a:	2601      	movne	r6, #1
 800330c:	e784      	b.n	8003218 <HAL_FLASHEx_OBProgram+0x2c>
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800330e:	6965      	ldr	r5, [r4, #20]
 8003310:	69a7      	ldr	r7, [r4, #24]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003312:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003316:	f7ff fe9f 	bl	8003058 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800331a:	2800      	cmp	r0, #0
 800331c:	d17e      	bne.n	800341c <HAL_FLASHEx_OBProgram+0x230>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800331e:	f015 0f01 	tst.w	r5, #1
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8003322:	bf19      	ittee	ne
 8003324:	f407 62e0 	andne.w	r2, r7, #1792	; 0x700
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8003328:	f44f 63e0 	movne.w	r3, #1792	; 0x700
  uint32_t optr_reg_mask = 0;
 800332c:	2300      	moveq	r3, #0
  uint32_t optr_reg_val = 0;
 800332e:	461a      	moveq	r2, r3
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8003330:	f015 0f02 	tst.w	r5, #2
 8003334:	d004      	beq.n	8003340 <HAL_FLASHEx_OBProgram+0x154>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8003336:	f407 5180 	and.w	r1, r7, #4096	; 0x1000
 800333a:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800333c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8003340:	f015 0f04 	tst.w	r5, #4
 8003344:	d004      	beq.n	8003350 <HAL_FLASHEx_OBProgram+0x164>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8003346:	f407 5100 	and.w	r1, r7, #8192	; 0x2000
 800334a:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800334c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 8003350:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8003354:	d004      	beq.n	8003360 <HAL_FLASHEx_OBProgram+0x174>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8003356:	f407 4180 	and.w	r1, r7, #16384	; 0x4000
 800335a:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800335c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 8003360:	f015 0f08 	tst.w	r5, #8
 8003364:	d004      	beq.n	8003370 <HAL_FLASHEx_OBProgram+0x184>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8003366:	f407 3180 	and.w	r1, r7, #65536	; 0x10000
 800336a:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800336c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 8003370:	f015 0f10 	tst.w	r5, #16
 8003374:	d004      	beq.n	8003380 <HAL_FLASHEx_OBProgram+0x194>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8003376:	f407 3100 	and.w	r1, r7, #131072	; 0x20000
 800337a:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800337c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8003380:	f015 0f20 	tst.w	r5, #32
 8003384:	d004      	beq.n	8003390 <HAL_FLASHEx_OBProgram+0x1a4>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8003386:	f407 2180 	and.w	r1, r7, #262144	; 0x40000
 800338a:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8003390:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003394:	d004      	beq.n	80033a0 <HAL_FLASHEx_OBProgram+0x1b4>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8003396:	f407 2100 	and.w	r1, r7, #524288	; 0x80000
 800339a:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800339c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    }

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 80033a0:	f015 0f80 	tst.w	r5, #128	; 0x80
 80033a4:	d004      	beq.n	80033b0 <HAL_FLASHEx_OBProgram+0x1c4>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 80033a6:	f407 1180 	and.w	r1, r7, #1048576	; 0x100000
 80033aa:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_BFB2;
 80033ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 80033b0:	f415 7f80 	tst.w	r5, #256	; 0x100
 80033b4:	d004      	beq.n	80033c0 <HAL_FLASHEx_OBProgram+0x1d4>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 80033b6:	f407 1100 	and.w	r1, r7, #2097152	; 0x200000
 80033ba:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 80033bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 80033c0:	f415 7f00 	tst.w	r5, #512	; 0x200
 80033c4:	d004      	beq.n	80033d0 <HAL_FLASHEx_OBProgram+0x1e4>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 80033c6:	f407 0100 	and.w	r1, r7, #8388608	; 0x800000
 80033ca:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 80033cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 80033d0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80033d4:	d004      	beq.n	80033e0 <HAL_FLASHEx_OBProgram+0x1f4>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 80033d6:	f007 7180 	and.w	r1, r7, #16777216	; 0x1000000
 80033da:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 80033dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 80033e0:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80033e4:	d004      	beq.n	80033f0 <HAL_FLASHEx_OBProgram+0x204>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 80033e6:	f007 7700 	and.w	r7, r7, #33554432	; 0x2000000
 80033ea:	433a      	orrs	r2, r7
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 80033ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 80033f0:	4d35      	ldr	r5, [pc, #212]	; (80034c8 <HAL_FLASHEx_OBProgram+0x2dc>)
 80033f2:	6a29      	ldr	r1, [r5, #32]
 80033f4:	ea21 0303 	bic.w	r3, r1, r3
 80033f8:	431a      	orrs	r2, r3
 80033fa:	622a      	str	r2, [r5, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80033fc:	696b      	ldr	r3, [r5, #20]
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003402:	616b      	str	r3, [r5, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003404:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003408:	f7ff fe26 	bl	8003058 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800340c:	696b      	ldr	r3, [r5, #20]
 800340e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003412:	616b      	str	r3, [r5, #20]
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8003414:	2800      	cmp	r0, #0
      status = HAL_ERROR;
 8003416:	bf18      	it	ne
 8003418:	2601      	movne	r6, #1
 800341a:	e701      	b.n	8003220 <HAL_FLASHEx_OBProgram+0x34>
 800341c:	2601      	movs	r6, #1
 800341e:	e6ff      	b.n	8003220 <HAL_FLASHEx_OBProgram+0x34>
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8003420:	f8d4 801c 	ldr.w	r8, [r4, #28]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003428:	f7ff fe16 	bl	8003058 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800342c:	2800      	cmp	r0, #0
 800342e:	d175      	bne.n	800351c <HAL_FLASHEx_OBProgram+0x330>
  {
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8003430:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_FLASHEx_OBProgram+0x2e0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003438:	d12c      	bne.n	8003494 <HAL_FLASHEx_OBProgram+0x2a8>
    {
      bank1_addr = FLASH_BASE;
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_FLASHEx_OBProgram+0x2e4>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	b291      	uxth	r1, r2
 8003440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003444:	4299      	cmp	r1, r3
 8003446:	d034      	beq.n	80034b2 <HAL_FLASHEx_OBProgram+0x2c6>
 8003448:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <HAL_FLASHEx_OBProgram+0x2e8>)
 800344a:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 800344e:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
      bank1_addr = FLASH_BASE;
 8003452:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8003456:	f008 0103 	and.w	r1, r8, #3
 800345a:	2901      	cmp	r1, #1
 800345c:	d03e      	beq.n	80034dc <HAL_FLASHEx_OBProgram+0x2f0>
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800345e:	2902      	cmp	r1, #2
 8003460:	d04c      	beq.n	80034fc <HAL_FLASHEx_OBProgram+0x310>
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8003462:	4c19      	ldr	r4, [pc, #100]	; (80034c8 <HAL_FLASHEx_OBProgram+0x2dc>)
 8003464:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800346a:	f008 4800 	and.w	r8, r8, #2147483648	; 0x80000000
 800346e:	ea43 0308 	orr.w	r3, r3, r8
 8003472:	62a3      	str	r3, [r4, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003474:	6963      	ldr	r3, [r4, #20]
 8003476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347a:	6163      	str	r3, [r4, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800347c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003480:	f7ff fdea 	bl	8003058 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003484:	6963      	ldr	r3, [r4, #20]
 8003486:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800348a:	6163      	str	r3, [r4, #20]
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800348c:	2800      	cmp	r0, #0
        status = HAL_ERROR;
 800348e:	bf18      	it	ne
 8003490:	2601      	movne	r6, #1
 8003492:	e6ce      	b.n	8003232 <HAL_FLASHEx_OBProgram+0x46>
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_FLASHEx_OBProgram+0x2e4>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	b291      	uxth	r1, r2
 800349a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800349e:	4299      	cmp	r1, r3
 80034a0:	d00b      	beq.n	80034ba <HAL_FLASHEx_OBProgram+0x2ce>
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_FLASHEx_OBProgram+0x2e8>)
 80034a4:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 80034a8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
      bank2_addr = FLASH_BASE;
 80034ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034b0:	e7d1      	b.n	8003456 <HAL_FLASHEx_OBProgram+0x26a>
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_FLASHEx_OBProgram+0x2ec>)
      bank1_addr = FLASH_BASE;
 80034b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b8:	e7cd      	b.n	8003456 <HAL_FLASHEx_OBProgram+0x26a>
      bank2_addr = FLASH_BASE;
 80034ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_FLASHEx_OBProgram+0x2ec>)
 80034c0:	e7c9      	b.n	8003456 <HAL_FLASHEx_OBProgram+0x26a>
 80034c2:	bf00      	nop
 80034c4:	20000014 	.word	0x20000014
 80034c8:	40022000 	.word	0x40022000
 80034cc:	40010000 	.word	0x40010000
 80034d0:	1fff75e0 	.word	0x1fff75e0
 80034d4:	01fffe00 	.word	0x01fffe00
 80034d8:	08080000 	.word	0x08080000
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80034dc:	4911      	ldr	r1, [pc, #68]	; (8003524 <HAL_FLASHEx_OBProgram+0x338>)
 80034de:	6a4a      	ldr	r2, [r1, #36]	; 0x24
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 80034e0:	1aed      	subs	r5, r5, r3
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80034e2:	0c12      	lsrs	r2, r2, #16
 80034e4:	0412      	lsls	r2, r2, #16
 80034e6:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 80034ea:	624a      	str	r2, [r1, #36]	; 0x24
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80034ec:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 80034ee:	1afb      	subs	r3, r7, r3
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80034f0:	0c12      	lsrs	r2, r2, #16
 80034f2:	0412      	lsls	r2, r2, #16
 80034f4:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 80034f8:	628b      	str	r3, [r1, #40]	; 0x28
 80034fa:	e7b2      	b.n	8003462 <HAL_FLASHEx_OBProgram+0x276>
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80034fc:	4809      	ldr	r0, [pc, #36]	; (8003524 <HAL_FLASHEx_OBProgram+0x338>)
 80034fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8003500:	1aad      	subs	r5, r5, r2
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 800350a:	6445      	str	r5, [r0, #68]	; 0x44
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800350c:	6c81      	ldr	r1, [r0, #72]	; 0x48
        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800350e:	1abb      	subs	r3, r7, r2
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8003510:	0c0a      	lsrs	r2, r1, #16
 8003512:	0412      	lsls	r2, r2, #16
 8003514:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8003518:	6483      	str	r3, [r0, #72]	; 0x48
 800351a:	e7a2      	b.n	8003462 <HAL_FLASHEx_OBProgram+0x276>
        status = HAL_ERROR;
 800351c:	2601      	movs	r6, #1
 800351e:	e688      	b.n	8003232 <HAL_FLASHEx_OBProgram+0x46>
  __HAL_LOCK(&pFlash);
 8003520:	2602      	movs	r6, #2
 8003522:	e689      	b.n	8003238 <HAL_FLASHEx_OBProgram+0x4c>
 8003524:	40022000 	.word	0x40022000

08003528 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8003528:	2306      	movs	r3, #6
 800352a:	6003      	str	r3, [r0, #0]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800352c:	6843      	ldr	r3, [r0, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d917      	bls.n	8003562 <HAL_FLASHEx_OBGetConfig+0x3a>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8003532:	2b04      	cmp	r3, #4
 8003534:	f000 8095 	beq.w	8003662 <HAL_FLASHEx_OBGetConfig+0x13a>
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8003538:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	b2db      	uxtb	r3, r3

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800353e:	2baa      	cmp	r3, #170	; 0xaa
 8003540:	d001      	beq.n	8003546 <HAL_FLASHEx_OBGetConfig+0x1e>
 8003542:	2bcc      	cmp	r3, #204	; 0xcc
 8003544:	d132      	bne.n	80035ac <HAL_FLASHEx_OBGetConfig+0x84>
  {
    return (OB_RDP_LEVEL_1);
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8003546:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	b2db      	uxtb	r3, r3
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800354c:	6103      	str	r3, [r0, #16]
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8003552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8003556:	6183      	str	r3, [r0, #24]
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 8003558:	69c3      	ldr	r3, [r0, #28]
 800355a:	1e5a      	subs	r2, r3, #1
 800355c:	2a01      	cmp	r2, #1
 800355e:	d927      	bls.n	80035b0 <HAL_FLASHEx_OBGetConfig+0x88>
 8003560:	4770      	bx	lr
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8003562:	2207      	movs	r2, #7
 8003564:	6002      	str	r2, [r0, #0]
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8003566:	b943      	cbnz	r3, 800357a <HAL_FLASHEx_OBGetConfig+0x52>
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8003568:	4a43      	ldr	r2, [pc, #268]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 800356a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800356c:	b2db      	uxtb	r3, r3
 800356e:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8003570:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003572:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003576:	60c3      	str	r3, [r0, #12]
 8003578:	e7de      	b.n	8003538 <HAL_FLASHEx_OBGetConfig+0x10>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800357a:	2b01      	cmp	r3, #1
 800357c:	d00a      	beq.n	8003594 <HAL_FLASHEx_OBGetConfig+0x6c>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800357e:	2b02      	cmp	r3, #2
 8003580:	d111      	bne.n	80035a6 <HAL_FLASHEx_OBGetConfig+0x7e>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8003582:	4a3d      	ldr	r2, [pc, #244]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003584:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003586:	b2db      	uxtb	r3, r3
 8003588:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800358a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800358c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003590:	60c3      	str	r3, [r0, #12]
 8003592:	e7d1      	b.n	8003538 <HAL_FLASHEx_OBGetConfig+0x10>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8003594:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003596:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003598:	b2db      	uxtb	r3, r3
 800359a:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800359c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800359e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80035a2:	60c3      	str	r3, [r0, #12]
 80035a4:	e7c8      	b.n	8003538 <HAL_FLASHEx_OBGetConfig+0x10>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d1c6      	bne.n	8003538 <HAL_FLASHEx_OBGetConfig+0x10>
 80035aa:	e05c      	b.n	8003666 <HAL_FLASHEx_OBGetConfig+0x13e>
    return (OB_RDP_LEVEL_1);
 80035ac:	23bb      	movs	r3, #187	; 0xbb
 80035ae:	e7cd      	b.n	800354c <HAL_FLASHEx_OBGetConfig+0x24>
{
 80035b0:	b430      	push	{r4, r5}
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80035b2:	6802      	ldr	r2, [r0, #0]
 80035b4:	f042 0208 	orr.w	r2, r2, #8
 80035b8:	6002      	str	r2, [r0, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80035ba:	4a30      	ldr	r2, [pc, #192]	; (800367c <HAL_FLASHEx_OBGetConfig+0x154>)
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	f412 7f80 	tst.w	r2, #256	; 0x100
 80035c2:	d11b      	bne.n	80035fc <HAL_FLASHEx_OBGetConfig+0xd4>
  {
    bank1_addr = FLASH_BASE;
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80035c4:	4a2e      	ldr	r2, [pc, #184]	; (8003680 <HAL_FLASHEx_OBGetConfig+0x158>)
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	b294      	uxth	r4, r2
 80035ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035ce:	428c      	cmp	r4, r1
 80035d0:	d023      	beq.n	800361a <HAL_FLASHEx_OBGetConfig+0xf2>
 80035d2:	492c      	ldr	r1, [pc, #176]	; (8003684 <HAL_FLASHEx_OBGetConfig+0x15c>)
 80035d4:	ea01 2142 	and.w	r1, r1, r2, lsl #9
 80035d8:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
    bank1_addr = FLASH_BASE;
 80035dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80035e0:	f003 0403 	and.w	r4, r3, #3
 80035e4:	2c01      	cmp	r4, #1
 80035e6:	d020      	beq.n	800362a <HAL_FLASHEx_OBGetConfig+0x102>
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80035e8:	2c02      	cmp	r4, #2
 80035ea:	d02c      	beq.n	8003646 <HAL_FLASHEx_OBGetConfig+0x11e>
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 80035ec:	4a22      	ldr	r2, [pc, #136]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 80035ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61c3      	str	r3, [r0, #28]
}
 80035f8:	bc30      	pop	{r4, r5}
 80035fa:	4770      	bx	lr
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80035fc:	4a20      	ldr	r2, [pc, #128]	; (8003680 <HAL_FLASHEx_OBGetConfig+0x158>)
 80035fe:	6811      	ldr	r1, [r2, #0]
 8003600:	b28c      	uxth	r4, r1
 8003602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003606:	4294      	cmp	r4, r2
 8003608:	d00b      	beq.n	8003622 <HAL_FLASHEx_OBGetConfig+0xfa>
 800360a:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <HAL_FLASHEx_OBGetConfig+0x15c>)
 800360c:	ea02 2241 	and.w	r2, r2, r1, lsl #9
 8003610:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
    bank2_addr = FLASH_BASE;
 8003614:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003618:	e7e2      	b.n	80035e0 <HAL_FLASHEx_OBGetConfig+0xb8>
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800361a:	491b      	ldr	r1, [pc, #108]	; (8003688 <HAL_FLASHEx_OBGetConfig+0x160>)
    bank1_addr = FLASH_BASE;
 800361c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003620:	e7de      	b.n	80035e0 <HAL_FLASHEx_OBGetConfig+0xb8>
    bank2_addr = FLASH_BASE;
 8003622:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003626:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_FLASHEx_OBGetConfig+0x160>)
 8003628:	e7da      	b.n	80035e0 <HAL_FLASHEx_OBGetConfig+0xb8>
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800362a:	4d13      	ldr	r5, [pc, #76]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 800362c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800362e:	4917      	ldr	r1, [pc, #92]	; (800368c <HAL_FLASHEx_OBGetConfig+0x164>)
 8003630:	ea01 04c4 	and.w	r4, r1, r4, lsl #3
 8003634:	4414      	add	r4, r2
 8003636:	6204      	str	r4, [r0, #32]
      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8003638:	6aac      	ldr	r4, [r5, #40]	; 0x28
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800363a:	ea01 01c4 	and.w	r1, r1, r4, lsl #3
 800363e:	3107      	adds	r1, #7
 8003640:	440a      	add	r2, r1
 8003642:	6242      	str	r2, [r0, #36]	; 0x24
 8003644:	e7d2      	b.n	80035ec <HAL_FLASHEx_OBGetConfig+0xc4>
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8003646:	4d0c      	ldr	r5, [pc, #48]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003648:	6c6c      	ldr	r4, [r5, #68]	; 0x44
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <HAL_FLASHEx_OBGetConfig+0x164>)
 800364c:	ea02 04c4 	and.w	r4, r2, r4, lsl #3
 8003650:	440c      	add	r4, r1
 8003652:	6204      	str	r4, [r0, #32]
      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8003654:	6cac      	ldr	r4, [r5, #72]	; 0x48
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 8003656:	ea02 02c4 	and.w	r2, r2, r4, lsl #3
 800365a:	3207      	adds	r2, #7
 800365c:	4411      	add	r1, r2
 800365e:	6241      	str	r1, [r0, #36]	; 0x24
 8003660:	e7c4      	b.n	80035ec <HAL_FLASHEx_OBGetConfig+0xc4>
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8003662:	2307      	movs	r3, #7
 8003664:	6003      	str	r3, [r0, #0]
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8003666:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_FLASHEx_OBGetConfig+0x150>)
 8003668:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800366a:	b2db      	uxtb	r3, r3
 800366c:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800366e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003670:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003674:	60c3      	str	r3, [r0, #12]
 8003676:	e75f      	b.n	8003538 <HAL_FLASHEx_OBGetConfig+0x10>
 8003678:	40022000 	.word	0x40022000
 800367c:	40010000 	.word	0x40010000
 8003680:	1fff75e0 	.word	0x1fff75e0
 8003684:	01fffe00 	.word	0x01fffe00
 8003688:	08080000 	.word	0x08080000
 800368c:	0007fff8 	.word	0x0007fff8

08003690 <FLASH_PageErase>:
    if((Banks & FLASH_BANK_1) != 0U)
 8003690:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003694:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <FLASH_PageErase+0x38>)
 8003696:	6953      	ldr	r3, [r2, #20]
 8003698:	bf14      	ite	ne
 800369a:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800369e:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 80036a2:	6153      	str	r3, [r2, #20]
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <FLASH_PageErase+0x38>)
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	00c0      	lsls	r0, r0, #3
 80036aa:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80036ae:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80036b2:	4310      	orrs	r0, r2
 80036b4:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	f042 0202 	orr.w	r2, r2, #2
 80036bc:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036c4:	615a      	str	r2, [r3, #20]
}
 80036c6:	4770      	bx	lr
 80036c8:	40022000 	.word	0x40022000

080036cc <HAL_FLASHEx_Erase_IT>:
{
 80036cc:	b508      	push	{r3, lr}
  __HAL_LOCK(&pFlash);
 80036ce:	4b2b      	ldr	r3, [pc, #172]	; (800377c <HAL_FLASHEx_Erase_IT+0xb0>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d050      	beq.n	8003778 <HAL_FLASHEx_Erase_IT+0xac>
 80036d6:	4b29      	ldr	r3, [pc, #164]	; (800377c <HAL_FLASHEx_Erase_IT+0xb0>)
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036dc:	2200      	movs	r2, #0
 80036de:	605a      	str	r2, [r3, #4]
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80036e0:	4b27      	ldr	r3, [pc, #156]	; (8003780 <HAL_FLASHEx_Erase_IT+0xb4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80036e8:	d02c      	beq.n	8003744 <HAL_FLASHEx_Erase_IT+0x78>
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80036ea:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_FLASHEx_Erase_IT+0xb4>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036f2:	601a      	str	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80036fa:	d01f      	beq.n	800373c <HAL_FLASHEx_Erase_IT+0x70>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80036fc:	4a20      	ldr	r2, [pc, #128]	; (8003780 <HAL_FLASHEx_Erase_IT+0xb4>)
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003704:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_FLASHEx_Erase_IT+0xb0>)
 8003708:	2203      	movs	r2, #3
 800370a:	771a      	strb	r2, [r3, #28]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800370c:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_FLASHEx_Erase_IT+0xb4>)
 800370e:	6953      	ldr	r3, [r2, #20]
 8003710:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003714:	6153      	str	r3, [r2, #20]
  pFlash.Bank = pEraseInit->Banks;
 8003716:	6842      	ldr	r2, [r0, #4]
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_FLASHEx_Erase_IT+0xb0>)
 800371a:	611a      	str	r2, [r3, #16]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800371c:	6803      	ldr	r3, [r0, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d022      	beq.n	8003768 <HAL_FLASHEx_Erase_IT+0x9c>
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
 8003722:	4b16      	ldr	r3, [pc, #88]	; (800377c <HAL_FLASHEx_Erase_IT+0xb0>)
 8003724:	2201      	movs	r2, #1
 8003726:	721a      	strb	r2, [r3, #8]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 8003728:	68c2      	ldr	r2, [r0, #12]
 800372a:	619a      	str	r2, [r3, #24]
    pFlash.Page = pEraseInit->Page;
 800372c:	6882      	ldr	r2, [r0, #8]
 800372e:	615a      	str	r2, [r3, #20]
    FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
 8003730:	6841      	ldr	r1, [r0, #4]
 8003732:	6880      	ldr	r0, [r0, #8]
 8003734:	f7ff ffac 	bl	8003690 <FLASH_PageErase>
  return status;
 8003738:	2000      	movs	r0, #0
}
 800373a:	bd08      	pop	{r3, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <HAL_FLASHEx_Erase_IT+0xb0>)
 800373e:	2201      	movs	r2, #1
 8003740:	771a      	strb	r2, [r3, #28]
 8003742:	e7e3      	b.n	800370c <HAL_FLASHEx_Erase_IT+0x40>
  else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_FLASHEx_Erase_IT+0xb4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800374c:	d008      	beq.n	8003760 <HAL_FLASHEx_Erase_IT+0x94>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_FLASHEx_Erase_IT+0xb4>)
 8003750:	6813      	ldr	r3, [r2, #0]
 8003752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003756:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_FLASHEx_Erase_IT+0xb0>)
 800375a:	2202      	movs	r2, #2
 800375c:	771a      	strb	r2, [r3, #28]
 800375e:	e7d5      	b.n	800370c <HAL_FLASHEx_Erase_IT+0x40>
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_FLASHEx_Erase_IT+0xb0>)
 8003762:	2200      	movs	r2, #0
 8003764:	771a      	strb	r2, [r3, #28]
 8003766:	e7d1      	b.n	800370c <HAL_FLASHEx_Erase_IT+0x40>
    pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <HAL_FLASHEx_Erase_IT+0xb0>)
 800376a:	2202      	movs	r2, #2
 800376c:	721a      	strb	r2, [r3, #8]
    FLASH_MassErase(pEraseInit->Banks);
 800376e:	6840      	ldr	r0, [r0, #4]
 8003770:	f7ff fd24 	bl	80031bc <FLASH_MassErase>
  return status;
 8003774:	2000      	movs	r0, #0
 8003776:	e7e0      	b.n	800373a <HAL_FLASHEx_Erase_IT+0x6e>
  __HAL_LOCK(&pFlash);
 8003778:	2002      	movs	r0, #2
 800377a:	e7de      	b.n	800373a <HAL_FLASHEx_Erase_IT+0x6e>
 800377c:	20000014 	.word	0x20000014
 8003780:	40022000 	.word	0x40022000

08003784 <FLASH_FlushCaches>:
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <FLASH_FlushCaches+0x58>)
 8003786:	7f1b      	ldrb	r3, [r3, #28]
 8003788:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800378a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800378e:	2a01      	cmp	r2, #1
 8003790:	d007      	beq.n	80037a2 <FLASH_FlushCaches+0x1e>
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003792:	3b02      	subs	r3, #2
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d911      	bls.n	80037be <FLASH_FlushCaches+0x3a>
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <FLASH_FlushCaches+0x58>)
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
}
 80037a0:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80037a2:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <FLASH_FlushCaches+0x5c>)
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80037aa:	6011      	str	r1, [r2, #0]
 80037ac:	6811      	ldr	r1, [r2, #0]
 80037ae:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80037b2:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037b4:	6811      	ldr	r1, [r2, #0]
 80037b6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80037ba:	6011      	str	r1, [r2, #0]
 80037bc:	e7e9      	b.n	8003792 <FLASH_FlushCaches+0xe>
    __HAL_FLASH_DATA_CACHE_RESET();
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <FLASH_FlushCaches+0x5c>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ce:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e7df      	b.n	800379a <FLASH_FlushCaches+0x16>
 80037da:	bf00      	nop
 80037dc:	20000014 	.word	0x20000014
 80037e0:	40022000 	.word	0x40022000

080037e4 <HAL_FLASHEx_Erase>:
{
 80037e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <HAL_FLASHEx_Erase+0x104>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d077      	beq.n	80038e0 <HAL_FLASHEx_Erase+0xfc>
 80037f0:	460f      	mov	r7, r1
 80037f2:	4604      	mov	r4, r0
 80037f4:	4b3c      	ldr	r3, [pc, #240]	; (80038e8 <HAL_FLASHEx_Erase+0x104>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037fe:	f7ff fc2b 	bl	8003058 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003802:	4681      	mov	r9, r0
 8003804:	2800      	cmp	r0, #0
 8003806:	d165      	bne.n	80038d4 <HAL_FLASHEx_Erase+0xf0>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003808:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <HAL_FLASHEx_Erase+0x104>)
 800380a:	2200      	movs	r2, #0
 800380c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800380e:	4b37      	ldr	r3, [pc, #220]	; (80038ec <HAL_FLASHEx_Erase+0x108>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003816:	d038      	beq.n	800388a <HAL_FLASHEx_Erase+0xa6>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003818:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_FLASHEx_Erase+0x108>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003828:	d02b      	beq.n	8003882 <HAL_FLASHEx_Erase+0x9e>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800382a:	4a30      	ldr	r2, [pc, #192]	; (80038ec <HAL_FLASHEx_Erase+0x108>)
 800382c:	6813      	ldr	r3, [r2, #0]
 800382e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003832:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003834:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <HAL_FLASHEx_Erase+0x104>)
 8003836:	2203      	movs	r2, #3
 8003838:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d036      	beq.n	80038ae <HAL_FLASHEx_Erase+0xca>
      *PageError = 0xFFFFFFFFU;
 8003840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003844:	603b      	str	r3, [r7, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003846:	68a5      	ldr	r5, [r4, #8]
 8003848:	68e3      	ldr	r3, [r4, #12]
 800384a:	442b      	add	r3, r5
 800384c:	429d      	cmp	r5, r3
 800384e:	d23f      	bcs.n	80038d0 <HAL_FLASHEx_Erase+0xec>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003850:	f24c 3850 	movw	r8, #50000	; 0xc350
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003854:	4e25      	ldr	r6, [pc, #148]	; (80038ec <HAL_FLASHEx_Erase+0x108>)
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003856:	6861      	ldr	r1, [r4, #4]
 8003858:	4628      	mov	r0, r5
 800385a:	f7ff ff19 	bl	8003690 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800385e:	4640      	mov	r0, r8
 8003860:	f7ff fbfa 	bl	8003058 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003864:	6973      	ldr	r3, [r6, #20]
 8003866:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800386a:	f023 0302 	bic.w	r3, r3, #2
 800386e:	6173      	str	r3, [r6, #20]
        if (status != HAL_OK)
 8003870:	4681      	mov	r9, r0
 8003872:	bb60      	cbnz	r0, 80038ce <HAL_FLASHEx_Erase+0xea>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003874:	3501      	adds	r5, #1
 8003876:	68a3      	ldr	r3, [r4, #8]
 8003878:	68e2      	ldr	r2, [r4, #12]
 800387a:	4413      	add	r3, r2
 800387c:	42ab      	cmp	r3, r5
 800387e:	d8ea      	bhi.n	8003856 <HAL_FLASHEx_Erase+0x72>
 8003880:	e026      	b.n	80038d0 <HAL_FLASHEx_Erase+0xec>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003882:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_FLASHEx_Erase+0x104>)
 8003884:	2201      	movs	r2, #1
 8003886:	771a      	strb	r2, [r3, #28]
 8003888:	e7d7      	b.n	800383a <HAL_FLASHEx_Erase+0x56>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_FLASHEx_Erase+0x108>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003892:	d008      	beq.n	80038a6 <HAL_FLASHEx_Erase+0xc2>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003894:	4a15      	ldr	r2, [pc, #84]	; (80038ec <HAL_FLASHEx_Erase+0x108>)
 8003896:	6813      	ldr	r3, [r2, #0]
 8003898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800389c:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_FLASHEx_Erase+0x104>)
 80038a0:	2202      	movs	r2, #2
 80038a2:	771a      	strb	r2, [r3, #28]
 80038a4:	e7c9      	b.n	800383a <HAL_FLASHEx_Erase+0x56>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_FLASHEx_Erase+0x104>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
 80038ac:	e7c5      	b.n	800383a <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase(pEraseInit->Banks);
 80038ae:	6860      	ldr	r0, [r4, #4]
 80038b0:	f7ff fc84 	bl	80031bc <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038b8:	f7ff fbce 	bl	8003058 <FLASH_WaitForLastOperation>
 80038bc:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80038be:	4a0b      	ldr	r2, [pc, #44]	; (80038ec <HAL_FLASHEx_Erase+0x108>)
 80038c0:	6953      	ldr	r3, [r2, #20]
 80038c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038c6:	f023 0304 	bic.w	r3, r3, #4
 80038ca:	6153      	str	r3, [r2, #20]
 80038cc:	e000      	b.n	80038d0 <HAL_FLASHEx_Erase+0xec>
          *PageError = page_index;
 80038ce:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();
 80038d0:	f7ff ff58 	bl	8003784 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_FLASHEx_Erase+0x104>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
}
 80038da:	4648      	mov	r0, r9
 80038dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 80038e0:	f04f 0902 	mov.w	r9, #2
 80038e4:	e7f9      	b.n	80038da <HAL_FLASHEx_Erase+0xf6>
 80038e6:	bf00      	nop
 80038e8:	20000014 	.word	0x20000014
 80038ec:	40022000 	.word	0x40022000

080038f0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f0:	680a      	ldr	r2, [r1, #0]
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	f000 80e7 	beq.w	8003ac6 <HAL_GPIO_Init+0x1d6>
{
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fc:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80038fe:	2400      	movs	r4, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003900:	2701      	movs	r7, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003902:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8003ad0 <HAL_GPIO_Init+0x1e0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003906:	4e70      	ldr	r6, [pc, #448]	; (8003ac8 <HAL_GPIO_Init+0x1d8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003908:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8003ad4 <HAL_GPIO_Init+0x1e4>
 800390c:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8003ad8 <HAL_GPIO_Init+0x1e8>
 8003910:	4686      	mov	lr, r0
 8003912:	e04e      	b.n	80039b2 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->AFR[position >> 3u];
 8003914:	08e2      	lsrs	r2, r4, #3
 8003916:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 800391a:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800391c:	f004 0307 	and.w	r3, r4, #7
 8003920:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8003924:	230f      	movs	r3, #15
 8003926:	fa03 f30b 	lsl.w	r3, r3, fp
 800392a:	ea25 0503 	bic.w	r5, r5, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800392e:	690b      	ldr	r3, [r1, #16]
 8003930:	fa03 f30b 	lsl.w	r3, r3, fp
 8003934:	432b      	orrs	r3, r5
        GPIOx->AFR[position >> 3u] = temp;
 8003936:	6213      	str	r3, [r2, #32]
 8003938:	e045      	b.n	80039c6 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->ASCR;
 800393a:	f8de b02c 	ldr.w	fp, [lr, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800393e:	ea2b 0b00 	bic.w	fp, fp, r0
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003942:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8003946:	40a0      	lsls	r0, r4
 8003948:	ea40 000b 	orr.w	r0, r0, fp
        GPIOx->ASCR = temp;
 800394c:	f8ce 002c 	str.w	r0, [lr, #44]	; 0x2c
 8003950:	e06b      	b.n	8003a2a <HAL_GPIO_Init+0x13a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003952:	2200      	movs	r2, #0
 8003954:	4082      	lsls	r2, r0
 8003956:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003958:	609a      	str	r2, [r3, #8]
        temp = EXTI->IMR1;
 800395a:	6833      	ldr	r3, [r6, #0]
        temp &= ~(iocurrent);
 800395c:	ea6f 0008 	mvn.w	r0, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003960:	684a      	ldr	r2, [r1, #4]
 8003962:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~(iocurrent);
 8003966:	bf0c      	ite	eq
 8003968:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 800396a:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR1 = temp;
 800396e:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR1;
 8003970:	6873      	ldr	r3, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003972:	684a      	ldr	r2, [r1, #4]
 8003974:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003978:	bf0c      	ite	eq
 800397a:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 800397c:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->EMR1 = temp;
 8003980:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003982:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003984:	684b      	ldr	r3, [r1, #4]
 8003986:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800398a:	bf0c      	ite	eq
 800398c:	4002      	andeq	r2, r0
        {
          temp |= iocurrent;
 800398e:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR1 = temp;
 8003992:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8003994:	68f3      	ldr	r3, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003996:	684a      	ldr	r2, [r1, #4]
 8003998:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800399c:	bf0c      	ite	eq
 800399e:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 80039a0:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR1 = temp;
 80039a4:	60f3      	str	r3, [r6, #12]
      }
    }

    position++;
 80039a6:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a8:	680a      	ldr	r2, [r1, #0]
 80039aa:	fa32 f304 	lsrs.w	r3, r2, r4
 80039ae:	f000 8087 	beq.w	8003ac0 <HAL_GPIO_Init+0x1d0>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039b2:	fa07 f004 	lsl.w	r0, r7, r4
    if (iocurrent != 0x00u)
 80039b6:	ea10 0802 	ands.w	r8, r0, r2
 80039ba:	d0f4      	beq.n	80039a6 <HAL_GPIO_Init+0xb6>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039bc:	684b      	ldr	r3, [r1, #4]
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d0a6      	beq.n	8003914 <HAL_GPIO_Init+0x24>
      temp = GPIOx->MODER;
 80039c6:	f8de 2000 	ldr.w	r2, [lr]
 80039ca:	0065      	lsls	r5, r4, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039cc:	2303      	movs	r3, #3
 80039ce:	40ab      	lsls	r3, r5
 80039d0:	43db      	mvns	r3, r3
 80039d2:	ea03 0b02 	and.w	fp, r3, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039d6:	684a      	ldr	r2, [r1, #4]
 80039d8:	f002 0203 	and.w	r2, r2, #3
 80039dc:	40aa      	lsls	r2, r5
 80039de:	ea42 020b 	orr.w	r2, r2, fp
      GPIOx->MODER = temp;
 80039e2:	f8ce 2000 	str.w	r2, [lr]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039e6:	684a      	ldr	r2, [r1, #4]
 80039e8:	f022 0210 	bic.w	r2, r2, #16
 80039ec:	3a01      	subs	r2, #1
 80039ee:	2a01      	cmp	r2, #1
 80039f0:	d815      	bhi.n	8003a1e <HAL_GPIO_Init+0x12e>
        temp = GPIOx->OSPEEDR;
 80039f2:	f8de 2008 	ldr.w	r2, [lr, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039f6:	ea03 0b02 	and.w	fp, r3, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039fa:	68ca      	ldr	r2, [r1, #12]
 80039fc:	40aa      	lsls	r2, r5
 80039fe:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OSPEEDR = temp;
 8003a02:	f8ce 2008 	str.w	r2, [lr, #8]
        temp = GPIOx->OTYPER;
 8003a06:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a0a:	ea22 0b00 	bic.w	fp, r2, r0
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a0e:	684a      	ldr	r2, [r1, #4]
 8003a10:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003a14:	40a2      	lsls	r2, r4
 8003a16:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OTYPER = temp;
 8003a1a:	f8ce 2004 	str.w	r2, [lr, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a1e:	684a      	ldr	r2, [r1, #4]
 8003a20:	f002 0b03 	and.w	fp, r2, #3
 8003a24:	f1bb 0f03 	cmp.w	fp, #3
 8003a28:	d087      	beq.n	800393a <HAL_GPIO_Init+0x4a>
      temp = GPIOx->PUPDR;
 8003a2a:	f8de 200c 	ldr.w	r2, [lr, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a2e:	4013      	ands	r3, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a30:	688a      	ldr	r2, [r1, #8]
 8003a32:	fa02 f505 	lsl.w	r5, r2, r5
 8003a36:	431d      	orrs	r5, r3
      GPIOx->PUPDR = temp;
 8003a38:	f8ce 500c 	str.w	r5, [lr, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a3c:	684b      	ldr	r3, [r1, #4]
 8003a3e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a42:	d0b0      	beq.n	80039a6 <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a44:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	f8cc 3060 	str.w	r3, [ip, #96]	; 0x60
 8003a50:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	9b01      	ldr	r3, [sp, #4]
 8003a5c:	f024 0303 	bic.w	r3, r4, #3
 8003a60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a64:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a68:	689d      	ldr	r5, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a6a:	f004 0203 	and.w	r2, r4, #3
 8003a6e:	0090      	lsls	r0, r2, #2
 8003a70:	220f      	movs	r2, #15
 8003a72:	4082      	lsls	r2, r0
 8003a74:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a78:	f1be 4f90 	cmp.w	lr, #1207959552	; 0x48000000
 8003a7c:	f43f af69 	beq.w	8003952 <HAL_GPIO_Init+0x62>
 8003a80:	45ce      	cmp	lr, r9
 8003a82:	d013      	beq.n	8003aac <HAL_GPIO_Init+0x1bc>
 8003a84:	45d6      	cmp	lr, sl
 8003a86:	d013      	beq.n	8003ab0 <HAL_GPIO_Init+0x1c0>
 8003a88:	4a10      	ldr	r2, [pc, #64]	; (8003acc <HAL_GPIO_Init+0x1dc>)
 8003a8a:	4596      	cmp	lr, r2
 8003a8c:	d012      	beq.n	8003ab4 <HAL_GPIO_Init+0x1c4>
 8003a8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a92:	4596      	cmp	lr, r2
 8003a94:	d010      	beq.n	8003ab8 <HAL_GPIO_Init+0x1c8>
 8003a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a9a:	4596      	cmp	lr, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_GPIO_Init+0x1cc>
 8003a9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003aa2:	4596      	cmp	lr, r2
 8003aa4:	bf0c      	ite	eq
 8003aa6:	2206      	moveq	r2, #6
 8003aa8:	2207      	movne	r2, #7
 8003aaa:	e753      	b.n	8003954 <HAL_GPIO_Init+0x64>
 8003aac:	463a      	mov	r2, r7
 8003aae:	e751      	b.n	8003954 <HAL_GPIO_Init+0x64>
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	e74f      	b.n	8003954 <HAL_GPIO_Init+0x64>
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	e74d      	b.n	8003954 <HAL_GPIO_Init+0x64>
 8003ab8:	2204      	movs	r2, #4
 8003aba:	e74b      	b.n	8003954 <HAL_GPIO_Init+0x64>
 8003abc:	2205      	movs	r2, #5
 8003abe:	e749      	b.n	8003954 <HAL_GPIO_Init+0x64>
  }
}
 8003ac0:	b003      	add	sp, #12
 8003ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac6:	4770      	bx	lr
 8003ac8:	40010400 	.word	0x40010400
 8003acc:	48000c00 	.word	0x48000c00
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	48000400 	.word	0x48000400
 8003ad8:	48000800 	.word	0x48000800

08003adc <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003adc:	2900      	cmp	r1, #0
 8003ade:	f000 8095 	beq.w	8003c0c <HAL_GPIO_DeInit+0x130>
{
 8003ae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	460e      	mov	r6, r1
  uint32_t position = 0x00u;
 8003aea:	2200      	movs	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003aec:	f04f 0901 	mov.w	r9, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003af0:	f04f 0a0f 	mov.w	sl, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003af4:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8003c14 <HAL_GPIO_DeInit+0x138>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003af8:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8003c18 <HAL_GPIO_DeInit+0x13c>
 8003afc:	e02a      	b.n	8003b54 <HAL_GPIO_DeInit+0x78>
 8003afe:	f04f 0e00 	mov.w	lr, #0
 8003b02:	fa0e f404 	lsl.w	r4, lr, r4
 8003b06:	9f01      	ldr	r7, [sp, #4]
 8003b08:	42bc      	cmp	r4, r7
 8003b0a:	d062      	beq.n	8003bd2 <HAL_GPIO_DeInit+0xf6>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003b0c:	6805      	ldr	r5, [r0, #0]
 8003b0e:	0051      	lsls	r1, r2, #1
 8003b10:	2403      	movs	r4, #3
 8003b12:	408c      	lsls	r4, r1
 8003b14:	4325      	orrs	r5, r4
 8003b16:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003b18:	08d5      	lsrs	r5, r2, #3
 8003b1a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003b1e:	6a2f      	ldr	r7, [r5, #32]
 8003b20:	f002 0107 	and.w	r1, r2, #7
 8003b24:	0089      	lsls	r1, r1, #2
 8003b26:	fa0a f101 	lsl.w	r1, sl, r1
 8003b2a:	ea27 0101 	bic.w	r1, r7, r1
 8003b2e:	6229      	str	r1, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b30:	6885      	ldr	r5, [r0, #8]
 8003b32:	43e1      	mvns	r1, r4
 8003b34:	400d      	ands	r5, r1
 8003b36:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b38:	6844      	ldr	r4, [r0, #4]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	401c      	ands	r4, r3
 8003b3e:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b40:	68c4      	ldr	r4, [r0, #12]
 8003b42:	4021      	ands	r1, r4
 8003b44:	60c1      	str	r1, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003b46:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003b48:	400b      	ands	r3, r1
 8003b4a:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003b4c:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003b4e:	fa36 f302 	lsrs.w	r3, r6, r2
 8003b52:	d058      	beq.n	8003c06 <HAL_GPIO_DeInit+0x12a>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003b54:	fa09 f302 	lsl.w	r3, r9, r2
    if (iocurrent != 0x00u)
 8003b58:	ea13 0506 	ands.w	r5, r3, r6
 8003b5c:	d0f6      	beq.n	8003b4c <HAL_GPIO_DeInit+0x70>
 8003b5e:	f022 0103 	bic.w	r1, r2, #3
 8003b62:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003b66:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003b6a:	688f      	ldr	r7, [r1, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003b6c:	f002 0403 	and.w	r4, r2, #3
 8003b70:	00a4      	lsls	r4, r4, #2
 8003b72:	fa0a fc04 	lsl.w	ip, sl, r4
 8003b76:	ea0c 0707 	and.w	r7, ip, r7
 8003b7a:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003b7c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003b80:	d0bd      	beq.n	8003afe <HAL_GPIO_DeInit+0x22>
 8003b82:	4558      	cmp	r0, fp
 8003b84:	d017      	beq.n	8003bb6 <HAL_GPIO_DeInit+0xda>
 8003b86:	4f22      	ldr	r7, [pc, #136]	; (8003c10 <HAL_GPIO_DeInit+0x134>)
 8003b88:	42b8      	cmp	r0, r7
 8003b8a:	d016      	beq.n	8003bba <HAL_GPIO_DeInit+0xde>
 8003b8c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003b90:	42b8      	cmp	r0, r7
 8003b92:	d015      	beq.n	8003bc0 <HAL_GPIO_DeInit+0xe4>
 8003b94:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003b98:	42b8      	cmp	r0, r7
 8003b9a:	d014      	beq.n	8003bc6 <HAL_GPIO_DeInit+0xea>
 8003b9c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003ba0:	42b8      	cmp	r0, r7
 8003ba2:	d013      	beq.n	8003bcc <HAL_GPIO_DeInit+0xf0>
 8003ba4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003ba8:	42b8      	cmp	r0, r7
 8003baa:	bf0c      	ite	eq
 8003bac:	f04f 0e06 	moveq.w	lr, #6
 8003bb0:	f04f 0e07 	movne.w	lr, #7
 8003bb4:	e7a5      	b.n	8003b02 <HAL_GPIO_DeInit+0x26>
 8003bb6:	46ce      	mov	lr, r9
 8003bb8:	e7a3      	b.n	8003b02 <HAL_GPIO_DeInit+0x26>
 8003bba:	f04f 0e02 	mov.w	lr, #2
 8003bbe:	e7a0      	b.n	8003b02 <HAL_GPIO_DeInit+0x26>
 8003bc0:	f04f 0e03 	mov.w	lr, #3
 8003bc4:	e79d      	b.n	8003b02 <HAL_GPIO_DeInit+0x26>
 8003bc6:	f04f 0e04 	mov.w	lr, #4
 8003bca:	e79a      	b.n	8003b02 <HAL_GPIO_DeInit+0x26>
 8003bcc:	f04f 0e05 	mov.w	lr, #5
 8003bd0:	e797      	b.n	8003b02 <HAL_GPIO_DeInit+0x26>
        EXTI->IMR1 &= ~(iocurrent);
 8003bd2:	f8d8 4000 	ldr.w	r4, [r8]
 8003bd6:	43ed      	mvns	r5, r5
 8003bd8:	402c      	ands	r4, r5
 8003bda:	f8c8 4000 	str.w	r4, [r8]
        EXTI->EMR1 &= ~(iocurrent);
 8003bde:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8003be2:	402c      	ands	r4, r5
 8003be4:	f8c8 4004 	str.w	r4, [r8, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003be8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003bec:	402c      	ands	r4, r5
 8003bee:	f8c8 4008 	str.w	r4, [r8, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003bf2:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8003bf6:	4025      	ands	r5, r4
 8003bf8:	f8c8 500c 	str.w	r5, [r8, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003bfc:	688c      	ldr	r4, [r1, #8]
 8003bfe:	ea24 040c 	bic.w	r4, r4, ip
 8003c02:	608c      	str	r4, [r1, #8]
 8003c04:	e782      	b.n	8003b0c <HAL_GPIO_DeInit+0x30>
  }
}
 8003c06:	b003      	add	sp, #12
 8003c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	48000800 	.word	0x48000800
 8003c14:	40010400 	.word	0x40010400
 8003c18:	48000400 	.word	0x48000400

08003c1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c1c:	6903      	ldr	r3, [r0, #16]
 8003c1e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003c20:	bf14      	ite	ne
 8003c22:	2001      	movne	r0, #1
 8003c24:	2000      	moveq	r0, #0
 8003c26:	4770      	bx	lr

08003c28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c28:	b90a      	cbnz	r2, 8003c2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c2a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003c2c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c2e:	6181      	str	r1, [r0, #24]
 8003c30:	4770      	bx	lr

08003c32 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003c32:	6943      	ldr	r3, [r0, #20]
 8003c34:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c36:	bf14      	ite	ne
 8003c38:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c3a:	6181      	streq	r1, [r0, #24]
  }
}
 8003c3c:	4770      	bx	lr

08003c3e <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c3e:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8003c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c44:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8003c46:	9b01      	ldr	r3, [sp, #4]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003c4c:	9b01      	ldr	r3, [sp, #4]
 8003c4e:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8003c50:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003c52:	9b01      	ldr	r3, [sp, #4]
 8003c54:	61c3      	str	r3, [r0, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8003c56:	69c3      	ldr	r3, [r0, #28]
 8003c58:	9301      	str	r3, [sp, #4]

  /* Read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 8003c5a:	69c0      	ldr	r0, [r0, #28]
 8003c5c:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 8003c60:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8003c64:	b002      	add	sp, #8
 8003c66:	4770      	bx	lr

08003c68 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_GPIO_EXTI_IRQHandler>:
{
 8003c6c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4203      	tst	r3, r0
 8003c74:	d100      	bne.n	8003c78 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8003c76:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c7a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c7c:	f7ff fff4 	bl	8003c68 <HAL_GPIO_EXTI_Callback>
}
 8003c80:	e7f9      	b.n	8003c76 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003c82:	bf00      	nop
 8003c84:	40010400 	.word	0x40010400

08003c88 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c88:	6803      	ldr	r3, [r0, #0]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	f012 0f02 	tst.w	r2, #2
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c90:	bf1c      	itt	ne
 8003c92:	2200      	movne	r2, #0
 8003c94:	629a      	strne	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c96:	6803      	ldr	r3, [r0, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	f012 0f01 	tst.w	r2, #1
 8003c9e:	d103      	bne.n	8003ca8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	619a      	str	r2, [r3, #24]
  }
}
 8003ca8:	4770      	bx	lr

08003caa <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003caa:	b470      	push	{r4, r5, r6}
 8003cac:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003cae:	6806      	ldr	r6, [r0, #0]
 8003cb0:	6870      	ldr	r0, [r6, #4]
 8003cb2:	0d65      	lsrs	r5, r4, #21
 8003cb4:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8003cb8:	f045 757f 	orr.w	r5, r5, #66846720	; 0x3fc0000
 8003cbc:	f445 3558 	orr.w	r5, r5, #221184	; 0x36000
 8003cc0:	f445 757f 	orr.w	r5, r5, #1020	; 0x3fc
 8003cc4:	f045 0503 	orr.w	r5, r5, #3
 8003cc8:	ea20 0005 	bic.w	r0, r0, r5
 8003ccc:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	4302      	orrs	r2, r0
 8003cda:	6072      	str	r2, [r6, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003cdc:	bc70      	pop	{r4, r5, r6}
 8003cde:	4770      	bx	lr

08003ce0 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003ce0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ce2:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <I2C_Enable_IRQ+0x6c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01d      	beq.n	8003d24 <I2C_Enable_IRQ+0x44>
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <I2C_Enable_IRQ+0x70>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01a      	beq.n	8003d24 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cee:	f001 0304 	and.w	r3, r1, #4
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	23b8      	movne	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003cfa:	f011 0f01 	tst.w	r1, #1
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003cfe:	bf18      	it	ne
 8003d00:	f043 03f2 	orrne.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d04:	f011 0f02 	tst.w	r1, #2
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003d08:	bf18      	it	ne
 8003d0a:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003d0e:	f001 0112 	and.w	r1, r1, #18
 8003d12:	2912      	cmp	r1, #18
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003d14:	bf08      	it	eq
 8003d16:	f043 0320 	orreq.w	r3, r3, #32
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003d1a:	6801      	ldr	r1, [r0, #0]
 8003d1c:	680a      	ldr	r2, [r1, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
}
 8003d22:	4770      	bx	lr
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d24:	f001 0304 	and.w	r3, r1, #4
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2300      	moveq	r3, #0
 8003d2e:	23b8      	movne	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003d30:	f001 0211 	and.w	r2, r1, #17
 8003d34:	2a11      	cmp	r2, #17
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d36:	bf08      	it	eq
 8003d38:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003d3c:	f001 0112 	and.w	r1, r1, #18
 8003d40:	2912      	cmp	r1, #18
 8003d42:	d1ea      	bne.n	8003d1a <I2C_Enable_IRQ+0x3a>
      tmpisr |= I2C_IT_TCI;
 8003d44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d48:	e7e7      	b.n	8003d1a <I2C_Enable_IRQ+0x3a>
 8003d4a:	bf00      	nop
 8003d4c:	08006a41 	.word	0x08006a41
 8003d50:	0800693d 	.word	0x0800693d

08003d54 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d54:	f011 0f01 	tst.w	r1, #1
 8003d58:	d02b      	beq.n	8003db2 <I2C_Disable_IRQ+0x5e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d5a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d62:	2b28      	cmp	r3, #40	; 0x28
 8003d64:	bf0c      	ite	eq
 8003d66:	2342      	moveq	r3, #66	; 0x42
 8003d68:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d6a:	f011 0f02 	tst.w	r1, #2
 8003d6e:	d009      	beq.n	8003d84 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d70:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003d74:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003d78:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d7a:	bf0c      	ite	eq
 8003d7c:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d80:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d84:	f011 0f04 	tst.w	r1, #4
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d88:	bf18      	it	ne
 8003d8a:	f043 03b8 	orrne.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003d8e:	f001 0211 	and.w	r2, r1, #17
 8003d92:	2a11      	cmp	r2, #17
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d94:	bf08      	it	eq
 8003d96:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003d9a:	f001 0112 	and.w	r1, r1, #18
 8003d9e:	2912      	cmp	r1, #18
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003da0:	bf08      	it	eq
 8003da2:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003da6:	6801      	ldr	r1, [r0, #0]
 8003da8:	680a      	ldr	r2, [r1, #0]
 8003daa:	ea22 0303 	bic.w	r3, r2, r3
 8003dae:	600b      	str	r3, [r1, #0]
}
 8003db0:	4770      	bx	lr
  uint32_t tmpisr = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e7d9      	b.n	8003d6a <I2C_Disable_IRQ+0x16>

08003db6 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003db6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003db8:	2baa      	cmp	r3, #170	; 0xaa
 8003dba:	d007      	beq.n	8003dcc <I2C_ConvertOtherXferOptions+0x16>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003dbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003dbe:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003dc2:	bf04      	itt	eq
 8003dc4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8003dc8:	62c3      	streq	r3, [r0, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003dca:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003dd0:	4770      	bx	lr

08003dd2 <I2C_IsAcknowledgeFailed>:
{
 8003dd2:	b570      	push	{r4, r5, r6, lr}
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dda:	6803      	ldr	r3, [r0, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f013 0f10 	tst.w	r3, #16
 8003de2:	d01c      	beq.n	8003e1e <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003de4:	682a      	ldr	r2, [r5, #0]
 8003de6:	6993      	ldr	r3, [r2, #24]
 8003de8:	f013 0f20 	tst.w	r3, #32
 8003dec:	d119      	bne.n	8003e22 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8003dee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003df2:	d0f8      	beq.n	8003de6 <I2C_IsAcknowledgeFailed+0x14>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df4:	f7fe f950 	bl	8002098 <HAL_GetTick>
 8003df8:	1b80      	subs	r0, r0, r6
 8003dfa:	42a0      	cmp	r0, r4
 8003dfc:	d801      	bhi.n	8003e02 <I2C_IsAcknowledgeFailed+0x30>
 8003dfe:	2c00      	cmp	r4, #0
 8003e00:	d1f0      	bne.n	8003de4 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e02:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003e04:	f043 0320 	orr.w	r3, r3, #32
 8003e08:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003e16:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	e020      	b.n	8003e60 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8003e1e:	2000      	movs	r0, #0
 8003e20:	e01e      	b.n	8003e60 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e22:	2310      	movs	r3, #16
 8003e24:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	2420      	movs	r4, #32
 8003e2a:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f7ff ff2b 	bl	8003c88 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003e32:	682a      	ldr	r2, [r5, #0]
 8003e34:	6853      	ldr	r3, [r2, #4]
 8003e36:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003e3a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003e3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e48:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003e5a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8003e5e:	2001      	movs	r0, #1
}
 8003e60:	bd70      	pop	{r4, r5, r6, pc}

08003e62 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003e62:	b570      	push	{r4, r5, r6, lr}
 8003e64:	4604      	mov	r4, r0
 8003e66:	460d      	mov	r5, r1
 8003e68:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f013 0f02 	tst.w	r3, #2
 8003e72:	d11d      	bne.n	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e74:	4632      	mov	r2, r6
 8003e76:	4629      	mov	r1, r5
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f7ff ffaa 	bl	8003dd2 <I2C_IsAcknowledgeFailed>
 8003e7e:	b9c8      	cbnz	r0, 8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003e84:	d0f1      	beq.n	8003e6a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fe f907 	bl	8002098 <HAL_GetTick>
 8003e8a:	1b80      	subs	r0, r0, r6
 8003e8c:	42a8      	cmp	r0, r5
 8003e8e:	d801      	bhi.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003e90:	2d00      	cmp	r5, #0
 8003e92:	d1ea      	bne.n	8003e6a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e96:	f043 0320 	orr.w	r3, r3, #32
 8003e9a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e9c:	2320      	movs	r3, #32
 8003e9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003ea8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003eac:	2001      	movs	r0, #1
 8003eae:	e000      	b.n	8003eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8003eb0:	2000      	movs	r0, #0
}
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	e7fc      	b.n	8003eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003eb8 <I2C_WaitOnFlagUntilTimeout>:
{
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	4607      	mov	r7, r0
 8003ebc:	460e      	mov	r6, r1
 8003ebe:	4615      	mov	r5, r2
 8003ec0:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	6993      	ldr	r3, [r2, #24]
 8003ec6:	ea36 0303 	bics.w	r3, r6, r3
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	42ab      	cmp	r3, r5
 8003ed2:	d118      	bne.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003ed4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003ed8:	d0f4      	beq.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fe f8dd 	bl	8002098 <HAL_GetTick>
 8003ede:	9b06      	ldr	r3, [sp, #24]
 8003ee0:	1ac0      	subs	r0, r0, r3
 8003ee2:	42a0      	cmp	r0, r4
 8003ee4:	d801      	bhi.n	8003eea <I2C_WaitOnFlagUntilTimeout+0x32>
 8003ee6:	2c00      	cmp	r4, #0
 8003ee8:	d1eb      	bne.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eec:	f043 0320 	orr.w	r3, r3, #32
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003efe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        return HAL_ERROR;
 8003f02:	2001      	movs	r0, #1
 8003f04:	e000      	b.n	8003f08 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8003f06:	2000      	movs	r0, #0
}
 8003f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f0c <I2C_RequestMemoryWrite>:
{
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	4604      	mov	r4, r0
 8003f12:	4616      	mov	r6, r2
 8003f14:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <I2C_RequestMemoryWrite+0x6c>)
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f1e:	b2ea      	uxtb	r2, r5
 8003f20:	f7ff fec3 	bl	8003caa <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f24:	9a07      	ldr	r2, [sp, #28]
 8003f26:	9906      	ldr	r1, [sp, #24]
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff ff9a 	bl	8003e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f2e:	b9e8      	cbnz	r0, 8003f6c <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f30:	2d01      	cmp	r5, #1
 8003f32:	d10e      	bne.n	8003f52 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	b2f6      	uxtb	r6, r6
 8003f38:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3a:	9b07      	ldr	r3, [sp, #28]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	9b06      	ldr	r3, [sp, #24]
 8003f40:	2200      	movs	r2, #0
 8003f42:	2180      	movs	r1, #128	; 0x80
 8003f44:	4620      	mov	r0, r4
 8003f46:	f7ff ffb7 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003f4a:	3000      	adds	r0, #0
 8003f4c:	bf18      	it	ne
 8003f4e:	2001      	movne	r0, #1
 8003f50:	e00d      	b.n	8003f6e <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	0a32      	lsrs	r2, r6, #8
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f58:	9a07      	ldr	r2, [sp, #28]
 8003f5a:	9906      	ldr	r1, [sp, #24]
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7ff ff80 	bl	8003e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f62:	b930      	cbnz	r0, 8003f72 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	b2f6      	uxtb	r6, r6
 8003f68:	629e      	str	r6, [r3, #40]	; 0x28
 8003f6a:	e7e6      	b.n	8003f3a <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8003f6c:	2001      	movs	r0, #1
}
 8003f6e:	b002      	add	sp, #8
 8003f70:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003f72:	2001      	movs	r0, #1
 8003f74:	e7fb      	b.n	8003f6e <I2C_RequestMemoryWrite+0x62>
 8003f76:	bf00      	nop
 8003f78:	80002000 	.word	0x80002000

08003f7c <I2C_RequestMemoryRead>:
{
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	4604      	mov	r4, r0
 8003f82:	4616      	mov	r6, r2
 8003f84:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f86:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <I2C_RequestMemoryRead+0x68>)
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	b2ea      	uxtb	r2, r5
 8003f8e:	f7ff fe8c 	bl	8003caa <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	9a07      	ldr	r2, [sp, #28]
 8003f94:	9906      	ldr	r1, [sp, #24]
 8003f96:	4620      	mov	r0, r4
 8003f98:	f7ff ff63 	bl	8003e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f9c:	b9e8      	cbnz	r0, 8003fda <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f9e:	2d01      	cmp	r5, #1
 8003fa0:	d10e      	bne.n	8003fc0 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	b2f6      	uxtb	r6, r6
 8003fa6:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	9b07      	ldr	r3, [sp, #28]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	9b06      	ldr	r3, [sp, #24]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2140      	movs	r1, #64	; 0x40
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7ff ff80 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003fb8:	3000      	adds	r0, #0
 8003fba:	bf18      	it	ne
 8003fbc:	2001      	movne	r0, #1
 8003fbe:	e00d      	b.n	8003fdc <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	0a32      	lsrs	r2, r6, #8
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	9a07      	ldr	r2, [sp, #28]
 8003fc8:	9906      	ldr	r1, [sp, #24]
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7ff ff49 	bl	8003e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fd0:	b930      	cbnz	r0, 8003fe0 <I2C_RequestMemoryRead+0x64>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	b2f6      	uxtb	r6, r6
 8003fd6:	629e      	str	r6, [r3, #40]	; 0x28
 8003fd8:	e7e6      	b.n	8003fa8 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
}
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	e7fb      	b.n	8003fdc <I2C_RequestMemoryRead+0x60>
 8003fe4:	80002000 	.word	0x80002000

08003fe8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	4605      	mov	r5, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f013 0f20 	tst.w	r3, #32
 8003ff8:	d11a      	bne.n	8004030 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffa:	4632      	mov	r2, r6
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f7ff fee7 	bl	8003dd2 <I2C_IsAcknowledgeFailed>
 8004004:	b9b0      	cbnz	r0, 8004034 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7fe f847 	bl	8002098 <HAL_GetTick>
 800400a:	1b80      	subs	r0, r0, r6
 800400c:	42a0      	cmp	r0, r4
 800400e:	d801      	bhi.n	8004014 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8004010:	2c00      	cmp	r4, #0
 8004012:	d1ed      	bne.n	8003ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004014:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004016:	f043 0320 	orr.w	r3, r3, #32
 800401a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800401c:	2320      	movs	r3, #32
 800401e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004022:	2300      	movs	r3, #0
 8004024:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004028:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800402c:	2001      	movs	r0, #1
}
 800402e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004030:	2000      	movs	r0, #0
 8004032:	e7fc      	b.n	800402e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004034:	2001      	movs	r0, #1
 8004036:	e7fa      	b.n	800402e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08004038 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4604      	mov	r4, r0
 800403c:	460d      	mov	r5, r1
 800403e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f013 0f04 	tst.w	r3, #4
 8004048:	d13e      	bne.n	80040c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	4632      	mov	r2, r6
 800404c:	4629      	mov	r1, r5
 800404e:	4620      	mov	r0, r4
 8004050:	f7ff febf 	bl	8003dd2 <I2C_IsAcknowledgeFailed>
 8004054:	4601      	mov	r1, r0
 8004056:	2800      	cmp	r0, #0
 8004058:	d138      	bne.n	80040cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	f012 0f20 	tst.w	r2, #32
 8004062:	d113      	bne.n	800408c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fe f818 	bl	8002098 <HAL_GetTick>
 8004068:	1b80      	subs	r0, r0, r6
 800406a:	42a8      	cmp	r0, r5
 800406c:	d801      	bhi.n	8004072 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 800406e:	2d00      	cmp	r5, #0
 8004070:	d1e6      	bne.n	8004040 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004072:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004074:	f043 0320 	orr.w	r3, r3, #32
 8004078:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800407a:	2320      	movs	r3, #32
 800407c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8004080:	2300      	movs	r3, #0
 8004082:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004086:	2101      	movs	r1, #1
}
 8004088:	4608      	mov	r0, r1
 800408a:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	f012 0f04 	tst.w	r2, #4
 8004092:	d002      	beq.n	800409a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004094:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004096:	2a00      	cmp	r2, #0
 8004098:	d1f6      	bne.n	8004088 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800409a:	2220      	movs	r2, #32
 800409c:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800409e:	6821      	ldr	r1, [r4, #0]
 80040a0:	684b      	ldr	r3, [r1, #4]
 80040a2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80040a6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80040aa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80040c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80040c4:	2101      	movs	r1, #1
 80040c6:	e7df      	b.n	8004088 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 80040c8:	2100      	movs	r1, #0
 80040ca:	e7dd      	b.n	8004088 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 80040cc:	2101      	movs	r1, #1
 80040ce:	e7db      	b.n	8004088 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

080040d0 <HAL_I2C_MspInit>:
}
 80040d0:	4770      	bx	lr

080040d2 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d055      	beq.n	8004182 <HAL_I2C_Init+0xb0>
{
 80040d6:	b510      	push	{r4, lr}
 80040d8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d045      	beq.n	800416e <HAL_I2C_Init+0x9c>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80040e2:	2324      	movs	r3, #36	; 0x24
 80040e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80040fa:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040fc:	6822      	ldr	r2, [r4, #0]
 80040fe:	6893      	ldr	r3, [r2, #8]
 8004100:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004104:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004106:	68e3      	ldr	r3, [r4, #12]
 8004108:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	68a3      	ldr	r3, [r4, #8]
 800410e:	bf0c      	ite	eq
 8004110:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004114:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8004118:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d02b      	beq.n	8004178 <HAL_I2C_Init+0xa6>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004120:	6822      	ldr	r2, [r4, #0]
 8004122:	6853      	ldr	r3, [r2, #4]
 8004124:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	68d3      	ldr	r3, [r2, #12]
 8004132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004136:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	6923      	ldr	r3, [r4, #16]
 800413c:	6961      	ldr	r1, [r4, #20]
 800413e:	430b      	orrs	r3, r1
 8004140:	69a1      	ldr	r1, [r4, #24]
 8004142:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004146:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004148:	6822      	ldr	r2, [r4, #0]
 800414a:	69e3      	ldr	r3, [r4, #28]
 800414c:	6a21      	ldr	r1, [r4, #32]
 800414e:	430b      	orrs	r3, r1
 8004150:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800415c:	2000      	movs	r0, #0
 800415e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004160:	2320      	movs	r3, #32
 8004162:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004166:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800416c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800416e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004172:	f7ff ffad 	bl	80040d0 <HAL_I2C_MspInit>
 8004176:	e7b4      	b.n	80040e2 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	e7ce      	b.n	8004120 <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8004182:	2001      	movs	r0, #1
}
 8004184:	4770      	bx	lr

08004186 <HAL_I2C_MspDeInit>:
}
 8004186:	4770      	bx	lr

08004188 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8004188:	b1a8      	cbz	r0, 80041b6 <HAL_I2C_DeInit+0x2e>
{
 800418a:	b510      	push	{r4, lr}
 800418c:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800418e:	2324      	movs	r3, #36	; 0x24
 8004190:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004194:	6802      	ldr	r2, [r0, #0]
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800419e:	f7ff fff2 	bl	8004186 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a2:	2000      	movs	r0, #0
 80041a4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80041a6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041aa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80041b0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80041b4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80041b6:	2001      	movs	r0, #1
}
 80041b8:	4770      	bx	lr
	...

080041bc <HAL_I2C_Master_Transmit>:
{
 80041bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041c0:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80041c6:	b2ed      	uxtb	r5, r5
 80041c8:	2d20      	cmp	r5, #32
 80041ca:	f040 80a6 	bne.w	800431a <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 80041ce:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80041d2:	2c01      	cmp	r4, #1
 80041d4:	f000 80a6 	beq.w	8004324 <HAL_I2C_Master_Transmit+0x168>
 80041d8:	4698      	mov	r8, r3
 80041da:	4617      	mov	r7, r2
 80041dc:	460e      	mov	r6, r1
 80041de:	4604      	mov	r4, r0
 80041e0:	f04f 0901 	mov.w	r9, #1
 80041e4:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80041e8:	f7fd ff56 	bl	8002098 <HAL_GetTick>
 80041ec:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041ee:	9000      	str	r0, [sp, #0]
 80041f0:	2319      	movs	r3, #25
 80041f2:	464a      	mov	r2, r9
 80041f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041f8:	4620      	mov	r0, r4
 80041fa:	f7ff fe5d 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 80041fe:	2800      	cmp	r0, #0
 8004200:	f040 8092 	bne.w	8004328 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004204:	2321      	movs	r3, #33	; 0x21
 8004206:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800420a:	2310      	movs	r3, #16
 800420c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004210:	2300      	movs	r3, #0
 8004212:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004214:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004216:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800421a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800421c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	2bff      	cmp	r3, #255	; 0xff
 8004222:	d945      	bls.n	80042b0 <HAL_I2C_Master_Transmit+0xf4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004224:	22ff      	movs	r2, #255	; 0xff
 8004226:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004228:	4b43      	ldr	r3, [pc, #268]	; (8004338 <HAL_I2C_Master_Transmit+0x17c>)
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004230:	4631      	mov	r1, r6
 8004232:	4620      	mov	r0, r4
 8004234:	f7ff fd39 	bl	8003caa <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004238:	2700      	movs	r7, #0
 800423a:	f04f 0880 	mov.w	r8, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800423e:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 8004242:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04a      	beq.n	80042e0 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424a:	462a      	mov	r2, r5
 800424c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800424e:	4620      	mov	r0, r4
 8004250:	f7ff fe07 	bl	8003e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8004254:	2800      	cmp	r0, #0
 8004256:	d169      	bne.n	800432c <HAL_I2C_Master_Transmit+0x170>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800425c:	7812      	ldrb	r2, [r2, #0]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004262:	3301      	adds	r3, #1
 8004264:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004266:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004268:	3b01      	subs	r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800426e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004270:	3b01      	subs	r3, #1
 8004272:	b29b      	uxth	r3, r3
 8004274:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004276:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004278:	b292      	uxth	r2, r2
 800427a:	2a00      	cmp	r2, #0
 800427c:	d0e1      	beq.n	8004242 <HAL_I2C_Master_Transmit+0x86>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1df      	bne.n	8004242 <HAL_I2C_Master_Transmit+0x86>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004282:	9500      	str	r5, [sp, #0]
 8004284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004286:	463a      	mov	r2, r7
 8004288:	4641      	mov	r1, r8
 800428a:	4620      	mov	r0, r4
 800428c:	f7ff fe14 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8004290:	2800      	cmp	r0, #0
 8004292:	d14d      	bne.n	8004330 <HAL_I2C_Master_Transmit+0x174>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004294:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	2bff      	cmp	r3, #255	; 0xff
 800429a:	d916      	bls.n	80042ca <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800429c:	22ff      	movs	r2, #255	; 0xff
 800429e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042a0:	9700      	str	r7, [sp, #0]
 80042a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a6:	4631      	mov	r1, r6
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff fcfe 	bl	8003caa <I2C_TransferConfig>
 80042ae:	e7c8      	b.n	8004242 <HAL_I2C_Master_Transmit+0x86>
      hi2c->XferSize = hi2c->XferCount;
 80042b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042b2:	b292      	uxth	r2, r2
 80042b4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_I2C_Master_Transmit+0x17c>)
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	4631      	mov	r1, r6
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7ff fcf1 	bl	8003caa <I2C_TransferConfig>
 80042c8:	e7b6      	b.n	8004238 <HAL_I2C_Master_Transmit+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 80042ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042cc:	b292      	uxth	r2, r2
 80042ce:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042d0:	9700      	str	r7, [sp, #0]
 80042d2:	464b      	mov	r3, r9
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	4631      	mov	r1, r6
 80042d8:	4620      	mov	r0, r4
 80042da:	f7ff fce6 	bl	8003caa <I2C_TransferConfig>
 80042de:	e7b0      	b.n	8004242 <HAL_I2C_Master_Transmit+0x86>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e0:	462a      	mov	r2, r5
 80042e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff fe7f 	bl	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	bb10      	cbnz	r0, 8004334 <HAL_I2C_Master_Transmit+0x178>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	2120      	movs	r1, #32
 80042f2:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	6842      	ldr	r2, [r0, #4]
 80042f8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80042fc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004300:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004304:	f022 0201 	bic.w	r2, r2, #1
 8004308:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800430e:	2200      	movs	r2, #0
 8004310:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004314:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004318:	e000      	b.n	800431c <HAL_I2C_Master_Transmit+0x160>
    return HAL_BUSY;
 800431a:	2302      	movs	r3, #2
}
 800431c:	4618      	mov	r0, r3
 800431e:	b003      	add	sp, #12
 8004320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8004324:	2302      	movs	r3, #2
 8004326:	e7f9      	b.n	800431c <HAL_I2C_Master_Transmit+0x160>
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e7f7      	b.n	800431c <HAL_I2C_Master_Transmit+0x160>
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e7f5      	b.n	800431c <HAL_I2C_Master_Transmit+0x160>
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e7f3      	b.n	800431c <HAL_I2C_Master_Transmit+0x160>
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e7f1      	b.n	800431c <HAL_I2C_Master_Transmit+0x160>
 8004338:	80002000 	.word	0x80002000

0800433c <HAL_I2C_Master_Receive>:
{
 800433c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004340:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004342:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004346:	b2ed      	uxtb	r5, r5
 8004348:	2d20      	cmp	r5, #32
 800434a:	f040 80a6 	bne.w	800449a <HAL_I2C_Master_Receive+0x15e>
    __HAL_LOCK(hi2c);
 800434e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004352:	2c01      	cmp	r4, #1
 8004354:	f000 80a6 	beq.w	80044a4 <HAL_I2C_Master_Receive+0x168>
 8004358:	4698      	mov	r8, r3
 800435a:	4617      	mov	r7, r2
 800435c:	460e      	mov	r6, r1
 800435e:	4604      	mov	r4, r0
 8004360:	f04f 0901 	mov.w	r9, #1
 8004364:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004368:	f7fd fe96 	bl	8002098 <HAL_GetTick>
 800436c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800436e:	9000      	str	r0, [sp, #0]
 8004370:	2319      	movs	r3, #25
 8004372:	464a      	mov	r2, r9
 8004374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004378:	4620      	mov	r0, r4
 800437a:	f7ff fd9d 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 800437e:	2800      	cmp	r0, #0
 8004380:	f040 8092 	bne.w	80044a8 <HAL_I2C_Master_Receive+0x16c>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004384:	2322      	movs	r3, #34	; 0x22
 8004386:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800438a:	2310      	movs	r3, #16
 800438c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	2300      	movs	r3, #0
 8004392:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004394:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004396:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800439a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800439c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2bff      	cmp	r3, #255	; 0xff
 80043a2:	d945      	bls.n	8004430 <HAL_I2C_Master_Receive+0xf4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a4:	22ff      	movs	r2, #255	; 0xff
 80043a6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_I2C_Master_Receive+0x17c>)
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043b0:	4631      	mov	r1, r6
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff fc79 	bl	8003caa <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043b8:	2700      	movs	r7, #0
 80043ba:	f04f 0880 	mov.w	r8, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043be:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 80043c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d04a      	beq.n	8004460 <HAL_I2C_Master_Receive+0x124>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ca:	462a      	mov	r2, r5
 80043cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff fe32 	bl	8004038 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d169      	bne.n	80044ac <HAL_I2C_Master_Receive+0x170>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043de:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80043e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043e2:	3301      	adds	r3, #1
 80043e4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80043e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80043ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043f0:	3a01      	subs	r2, #1
 80043f2:	b292      	uxth	r2, r2
 80043f4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043f8:	b292      	uxth	r2, r2
 80043fa:	2a00      	cmp	r2, #0
 80043fc:	d0e1      	beq.n	80043c2 <HAL_I2C_Master_Receive+0x86>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1df      	bne.n	80043c2 <HAL_I2C_Master_Receive+0x86>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004402:	9500      	str	r5, [sp, #0]
 8004404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004406:	463a      	mov	r2, r7
 8004408:	4641      	mov	r1, r8
 800440a:	4620      	mov	r0, r4
 800440c:	f7ff fd54 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8004410:	2800      	cmp	r0, #0
 8004412:	d14d      	bne.n	80044b0 <HAL_I2C_Master_Receive+0x174>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004414:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	2bff      	cmp	r3, #255	; 0xff
 800441a:	d916      	bls.n	800444a <HAL_I2C_Master_Receive+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800441c:	22ff      	movs	r2, #255	; 0xff
 800441e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004420:	9700      	str	r7, [sp, #0]
 8004422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004426:	4631      	mov	r1, r6
 8004428:	4620      	mov	r0, r4
 800442a:	f7ff fc3e 	bl	8003caa <I2C_TransferConfig>
 800442e:	e7c8      	b.n	80043c2 <HAL_I2C_Master_Receive+0x86>
      hi2c->XferSize = hi2c->XferCount;
 8004430:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004432:	b292      	uxth	r2, r2
 8004434:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004436:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_I2C_Master_Receive+0x17c>)
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	4631      	mov	r1, r6
 8004442:	4620      	mov	r0, r4
 8004444:	f7ff fc31 	bl	8003caa <I2C_TransferConfig>
 8004448:	e7b6      	b.n	80043b8 <HAL_I2C_Master_Receive+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 800444a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800444c:	b292      	uxth	r2, r2
 800444e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004450:	9700      	str	r7, [sp, #0]
 8004452:	464b      	mov	r3, r9
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	4631      	mov	r1, r6
 8004458:	4620      	mov	r0, r4
 800445a:	f7ff fc26 	bl	8003caa <I2C_TransferConfig>
 800445e:	e7b0      	b.n	80043c2 <HAL_I2C_Master_Receive+0x86>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004460:	462a      	mov	r2, r5
 8004462:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff fdbf 	bl	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	bb10      	cbnz	r0, 80044b4 <HAL_I2C_Master_Receive+0x178>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446e:	6822      	ldr	r2, [r4, #0]
 8004470:	2120      	movs	r1, #32
 8004472:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	6842      	ldr	r2, [r0, #4]
 8004478:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800447c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004480:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800448a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800448e:	2200      	movs	r2, #0
 8004490:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004494:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004498:	e000      	b.n	800449c <HAL_I2C_Master_Receive+0x160>
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
}
 800449c:	4618      	mov	r0, r3
 800449e:	b003      	add	sp, #12
 80044a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 80044a4:	2302      	movs	r3, #2
 80044a6:	e7f9      	b.n	800449c <HAL_I2C_Master_Receive+0x160>
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e7f7      	b.n	800449c <HAL_I2C_Master_Receive+0x160>
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e7f5      	b.n	800449c <HAL_I2C_Master_Receive+0x160>
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e7f3      	b.n	800449c <HAL_I2C_Master_Receive+0x160>
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e7f1      	b.n	800449c <HAL_I2C_Master_Receive+0x160>
 80044b8:	80002400 	.word	0x80002400

080044bc <HAL_I2C_Slave_Transmit>:
{
 80044bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c0:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80044c6:	b2ed      	uxtb	r5, r5
 80044c8:	2d20      	cmp	r5, #32
 80044ca:	f040 80b9 	bne.w	8004640 <HAL_I2C_Slave_Transmit+0x184>
    if ((pData == NULL) || (Size == 0U))
 80044ce:	2900      	cmp	r1, #0
 80044d0:	d063      	beq.n	800459a <HAL_I2C_Slave_Transmit+0xde>
 80044d2:	2a00      	cmp	r2, #0
 80044d4:	d061      	beq.n	800459a <HAL_I2C_Slave_Transmit+0xde>
    __HAL_LOCK(hi2c);
 80044d6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80044da:	2c01      	cmp	r4, #1
 80044dc:	f000 80b5 	beq.w	800464a <HAL_I2C_Slave_Transmit+0x18e>
 80044e0:	461f      	mov	r7, r3
 80044e2:	4616      	mov	r6, r2
 80044e4:	460d      	mov	r5, r1
 80044e6:	4604      	mov	r4, r0
 80044e8:	2301      	movs	r3, #1
 80044ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80044ee:	f7fd fdd3 	bl	8002098 <HAL_GetTick>
 80044f2:	4680      	mov	r8, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044f4:	2321      	movs	r3, #33	; 0x21
 80044f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80044fa:	2320      	movs	r3, #32
 80044fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	2200      	movs	r2, #0
 8004502:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004504:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004506:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004508:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800450a:	6821      	ldr	r1, [r4, #0]
 800450c:	684b      	ldr	r3, [r1, #4]
 800450e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004512:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8004514:	9000      	str	r0, [sp, #0]
 8004516:	463b      	mov	r3, r7
 8004518:	2108      	movs	r1, #8
 800451a:	4620      	mov	r0, r4
 800451c:	f7ff fccc 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8004520:	2800      	cmp	r0, #0
 8004522:	d13f      	bne.n	80045a4 <HAL_I2C_Slave_Transmit+0xe8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	2208      	movs	r2, #8
 8004528:	61da      	str	r2, [r3, #28]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800452a:	68e3      	ldr	r3, [r4, #12]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d040      	beq.n	80045b2 <HAL_I2C_Slave_Transmit+0xf6>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8004530:	f8cd 8000 	str.w	r8, [sp]
 8004534:	463b      	mov	r3, r7
 8004536:	2200      	movs	r2, #0
 8004538:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800453c:	4620      	mov	r0, r4
 800453e:	f7ff fcbb 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8004542:	2800      	cmp	r0, #0
 8004544:	d149      	bne.n	80045da <HAL_I2C_Slave_Transmit+0x11e>
    while (hi2c->XferCount > 0U)
 8004546:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	b1ab      	cbz	r3, 8004578 <HAL_I2C_Slave_Transmit+0xbc>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454c:	4642      	mov	r2, r8
 800454e:	4639      	mov	r1, r7
 8004550:	4620      	mov	r0, r4
 8004552:	f7ff fc86 	bl	8003e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8004556:	2800      	cmp	r0, #0
 8004558:	d146      	bne.n	80045e8 <HAL_I2C_Slave_Transmit+0x12c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800455e:	7812      	ldrb	r2, [r2, #0]
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004564:	3301      	adds	r3, #1
 8004566:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004568:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800456a:	3b01      	subs	r3, #1
 800456c:	b29b      	uxth	r3, r3
 800456e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8004570:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e9      	bne.n	800454c <HAL_I2C_Slave_Transmit+0x90>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004578:	4642      	mov	r2, r8
 800457a:	4639      	mov	r1, r7
 800457c:	4620      	mov	r0, r4
 800457e:	f7ff fd33 	bl	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004582:	2800      	cmp	r0, #0
 8004584:	d039      	beq.n	80045fa <HAL_I2C_Slave_Transmit+0x13e>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	6853      	ldr	r3, [r2, #4]
 800458a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458e:	6053      	str	r3, [r2, #4]
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004590:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004592:	2b04      	cmp	r3, #4
 8004594:	d02f      	beq.n	80045f6 <HAL_I2C_Slave_Transmit+0x13a>
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e053      	b.n	8004642 <HAL_I2C_Slave_Transmit+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800459a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800459e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e04e      	b.n	8004642 <HAL_I2C_Slave_Transmit+0x186>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	6853      	ldr	r3, [r2, #4]
 80045a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ac:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e047      	b.n	8004642 <HAL_I2C_Slave_Transmit+0x186>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80045b2:	f8cd 8000 	str.w	r8, [sp]
 80045b6:	463b      	mov	r3, r7
 80045b8:	2200      	movs	r2, #0
 80045ba:	2108      	movs	r1, #8
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff fc7b 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 80045c2:	b918      	cbnz	r0, 80045cc <HAL_I2C_Slave_Transmit+0x110>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	2208      	movs	r2, #8
 80045c8:	61da      	str	r2, [r3, #28]
 80045ca:	e7b1      	b.n	8004530 <HAL_I2C_Slave_Transmit+0x74>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	6853      	ldr	r3, [r2, #4]
 80045d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d4:	6053      	str	r3, [r2, #4]
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e033      	b.n	8004642 <HAL_I2C_Slave_Transmit+0x186>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	6853      	ldr	r3, [r2, #4]
 80045de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e2:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e02c      	b.n	8004642 <HAL_I2C_Slave_Transmit+0x186>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045e8:	6822      	ldr	r2, [r4, #0]
 80045ea:	6853      	ldr	r3, [r2, #4]
 80045ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f0:	6053      	str	r3, [r2, #4]
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e025      	b.n	8004642 <HAL_I2C_Slave_Transmit+0x186>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	2220      	movs	r2, #32
 80045fe:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8004600:	f8cd 8000 	str.w	r8, [sp]
 8004604:	463b      	mov	r3, r7
 8004606:	2201      	movs	r2, #1
 8004608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800460c:	4620      	mov	r0, r4
 800460e:	f7ff fc53 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	b968      	cbnz	r0, 8004632 <HAL_I2C_Slave_Transmit+0x176>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004616:	6821      	ldr	r1, [r4, #0]
 8004618:	684a      	ldr	r2, [r1, #4]
 800461a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800461e:	604a      	str	r2, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004620:	2220      	movs	r2, #32
 8004622:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004626:	2200      	movs	r2, #0
 8004628:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800462c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004630:	e007      	b.n	8004642 <HAL_I2C_Slave_Transmit+0x186>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	6853      	ldr	r3, [r2, #4]
 8004636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463a:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <HAL_I2C_Slave_Transmit+0x186>
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
}
 8004642:	4618      	mov	r0, r3
 8004644:	b002      	add	sp, #8
 8004646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 800464a:	2302      	movs	r3, #2
 800464c:	e7f9      	b.n	8004642 <HAL_I2C_Slave_Transmit+0x186>

0800464e <HAL_I2C_Slave_Receive>:
{
 800464e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004652:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004654:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004658:	b2ed      	uxtb	r5, r5
 800465a:	2d20      	cmp	r5, #32
 800465c:	f040 80a6 	bne.w	80047ac <HAL_I2C_Slave_Receive+0x15e>
    if ((pData == NULL) || (Size == 0U))
 8004660:	b369      	cbz	r1, 80046be <HAL_I2C_Slave_Receive+0x70>
 8004662:	b362      	cbz	r2, 80046be <HAL_I2C_Slave_Receive+0x70>
    __HAL_LOCK(hi2c);
 8004664:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004668:	2c01      	cmp	r4, #1
 800466a:	f000 80a4 	beq.w	80047b6 <HAL_I2C_Slave_Receive+0x168>
 800466e:	461f      	mov	r7, r3
 8004670:	4616      	mov	r6, r2
 8004672:	460d      	mov	r5, r1
 8004674:	4604      	mov	r4, r0
 8004676:	2301      	movs	r3, #1
 8004678:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800467c:	f7fd fd0c 	bl	8002098 <HAL_GetTick>
 8004680:	4680      	mov	r8, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004682:	2322      	movs	r3, #34	; 0x22
 8004684:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004688:	2320      	movs	r3, #32
 800468a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468e:	2200      	movs	r2, #0
 8004690:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004692:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004694:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004696:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004698:	6821      	ldr	r1, [r4, #0]
 800469a:	684b      	ldr	r3, [r1, #4]
 800469c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046a0:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80046a2:	9000      	str	r0, [sp, #0]
 80046a4:	463b      	mov	r3, r7
 80046a6:	2108      	movs	r1, #8
 80046a8:	4620      	mov	r0, r4
 80046aa:	f7ff fc05 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 80046ae:	b158      	cbz	r0, 80046c8 <HAL_I2C_Slave_Receive+0x7a>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	6853      	ldr	r3, [r2, #4]
 80046b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b8:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e077      	b.n	80047ae <HAL_I2C_Slave_Receive+0x160>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046c2:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e072      	b.n	80047ae <HAL_I2C_Slave_Receive+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	2208      	movs	r2, #8
 80046cc:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 80046ce:	f8cd 8000 	str.w	r8, [sp]
 80046d2:	463b      	mov	r3, r7
 80046d4:	2201      	movs	r2, #1
 80046d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80046da:	4620      	mov	r0, r4
 80046dc:	f7ff fbec 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 80046e0:	bb20      	cbnz	r0, 800472c <HAL_I2C_Slave_Receive+0xde>
    while (hi2c->XferCount > 0U)
 80046e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	b1a3      	cbz	r3, 8004712 <HAL_I2C_Slave_Receive+0xc4>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e8:	4642      	mov	r2, r8
 80046ea:	4639      	mov	r1, r7
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7ff fca3 	bl	8004038 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046f2:	bb10      	cbnz	r0, 800473a <HAL_I2C_Slave_Receive+0xec>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fa:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80046fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fe:	3301      	adds	r3, #1
 8004700:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004702:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004704:	3b01      	subs	r3, #1
 8004706:	b29b      	uxth	r3, r3
 8004708:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 800470a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ea      	bne.n	80046e8 <HAL_I2C_Slave_Receive+0x9a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004712:	4642      	mov	r2, r8
 8004714:	4639      	mov	r1, r7
 8004716:	4620      	mov	r0, r4
 8004718:	f7ff fc66 	bl	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800471c:	b318      	cbz	r0, 8004766 <HAL_I2C_Slave_Receive+0x118>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	6853      	ldr	r3, [r2, #4]
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e040      	b.n	80047ae <HAL_I2C_Slave_Receive+0x160>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	6853      	ldr	r3, [r2, #4]
 8004730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004734:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e039      	b.n	80047ae <HAL_I2C_Slave_Receive+0x160>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	6853      	ldr	r3, [r2, #4]
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	6053      	str	r3, [r2, #4]
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	f012 0f04 	tst.w	r2, #4
 800474c:	d035      	beq.n	80047ba <HAL_I2C_Slave_Receive+0x16c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800474e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004752:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004756:	3301      	adds	r3, #1
 8004758:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 800475a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800475c:	3b01      	subs	r3, #1
 800475e:	b29b      	uxth	r3, r3
 8004760:	8563      	strh	r3, [r4, #42]	; 0x2a
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e023      	b.n	80047ae <HAL_I2C_Slave_Receive+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	2220      	movs	r2, #32
 800476a:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800476c:	f8cd 8000 	str.w	r8, [sp]
 8004770:	463b      	mov	r3, r7
 8004772:	2201      	movs	r2, #1
 8004774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004778:	4620      	mov	r0, r4
 800477a:	f7ff fb9d 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	b968      	cbnz	r0, 800479e <HAL_I2C_Slave_Receive+0x150>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004782:	6821      	ldr	r1, [r4, #0]
 8004784:	684a      	ldr	r2, [r1, #4]
 8004786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800478a:	604a      	str	r2, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800478c:	2220      	movs	r2, #32
 800478e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004792:	2200      	movs	r2, #0
 8004794:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004798:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800479c:	e007      	b.n	80047ae <HAL_I2C_Slave_Receive+0x160>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	6853      	ldr	r3, [r2, #4]
 80047a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a6:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_I2C_Slave_Receive+0x160>
    return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	b002      	add	sp, #8
 80047b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 80047b6:	2302      	movs	r3, #2
 80047b8:	e7f9      	b.n	80047ae <HAL_I2C_Slave_Receive+0x160>
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e7f7      	b.n	80047ae <HAL_I2C_Slave_Receive+0x160>
	...

080047c0 <HAL_I2C_Master_Transmit_IT>:
{
 80047c0:	b530      	push	{r4, r5, lr}
 80047c2:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c4:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80047c8:	b2e4      	uxtb	r4, r4
 80047ca:	2c20      	cmp	r4, #32
 80047cc:	d137      	bne.n	800483e <HAL_I2C_Master_Transmit_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80047ce:	6804      	ldr	r4, [r0, #0]
 80047d0:	69a4      	ldr	r4, [r4, #24]
 80047d2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80047d6:	d135      	bne.n	8004844 <HAL_I2C_Master_Transmit_IT+0x84>
    __HAL_LOCK(hi2c);
 80047d8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80047dc:	2c01      	cmp	r4, #1
 80047de:	d033      	beq.n	8004848 <HAL_I2C_Master_Transmit_IT+0x88>
 80047e0:	2401      	movs	r4, #1
 80047e2:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047e6:	2421      	movs	r4, #33	; 0x21
 80047e8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047ec:	2410      	movs	r4, #16
 80047ee:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047f2:	2400      	movs	r4, #0
 80047f4:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80047f6:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047f8:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <HAL_I2C_Master_Transmit_IT+0x8c>)
 80047fc:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_I2C_Master_Transmit_IT+0x90>)
 8004800:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004802:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	2bff      	cmp	r3, #255	; 0xff
 8004808:	d914      	bls.n	8004834 <HAL_I2C_Master_Transmit_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800480a:	23ff      	movs	r3, #255	; 0xff
 800480c:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800480e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004812:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004814:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8004818:	480e      	ldr	r0, [pc, #56]	; (8004854 <HAL_I2C_Master_Transmit_IT+0x94>)
 800481a:	9000      	str	r0, [sp, #0]
 800481c:	4620      	mov	r0, r4
 800481e:	f7ff fa44 	bl	8003caa <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8004822:	2500      	movs	r5, #0
 8004824:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004828:	2101      	movs	r1, #1
 800482a:	4620      	mov	r0, r4
 800482c:	f7ff fa58 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 8004830:	4628      	mov	r0, r5
 8004832:	e005      	b.n	8004840 <HAL_I2C_Master_Transmit_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 8004834:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004836:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800483c:	e7e9      	b.n	8004812 <HAL_I2C_Master_Transmit_IT+0x52>
    return HAL_BUSY;
 800483e:	2002      	movs	r0, #2
}
 8004840:	b003      	add	sp, #12
 8004842:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 8004844:	2002      	movs	r0, #2
 8004846:	e7fb      	b.n	8004840 <HAL_I2C_Master_Transmit_IT+0x80>
    __HAL_LOCK(hi2c);
 8004848:	2002      	movs	r0, #2
 800484a:	e7f9      	b.n	8004840 <HAL_I2C_Master_Transmit_IT+0x80>
 800484c:	ffff0000 	.word	0xffff0000
 8004850:	080067c1 	.word	0x080067c1
 8004854:	80002000 	.word	0x80002000

08004858 <HAL_I2C_Master_Receive_IT>:
{
 8004858:	b530      	push	{r4, r5, lr}
 800485a:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800485c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8004860:	b2e4      	uxtb	r4, r4
 8004862:	2c20      	cmp	r4, #32
 8004864:	d137      	bne.n	80048d6 <HAL_I2C_Master_Receive_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004866:	6804      	ldr	r4, [r0, #0]
 8004868:	69a4      	ldr	r4, [r4, #24]
 800486a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800486e:	d135      	bne.n	80048dc <HAL_I2C_Master_Receive_IT+0x84>
    __HAL_LOCK(hi2c);
 8004870:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004874:	2c01      	cmp	r4, #1
 8004876:	d033      	beq.n	80048e0 <HAL_I2C_Master_Receive_IT+0x88>
 8004878:	2401      	movs	r4, #1
 800487a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800487e:	2422      	movs	r4, #34	; 0x22
 8004880:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004884:	2410      	movs	r4, #16
 8004886:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800488a:	2400      	movs	r4, #0
 800488c:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800488e:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004890:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <HAL_I2C_Master_Receive_IT+0x8c>)
 8004894:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004896:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <HAL_I2C_Master_Receive_IT+0x90>)
 8004898:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800489a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2bff      	cmp	r3, #255	; 0xff
 80048a0:	d914      	bls.n	80048cc <HAL_I2C_Master_Receive_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048a2:	23ff      	movs	r3, #255	; 0xff
 80048a4:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80048a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048aa:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80048ac:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80048b0:	480e      	ldr	r0, [pc, #56]	; (80048ec <HAL_I2C_Master_Receive_IT+0x94>)
 80048b2:	9000      	str	r0, [sp, #0]
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7ff f9f8 	bl	8003caa <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 80048ba:	2500      	movs	r5, #0
 80048bc:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80048c0:	2102      	movs	r1, #2
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7ff fa0c 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 80048c8:	4628      	mov	r0, r5
 80048ca:	e005      	b.n	80048d8 <HAL_I2C_Master_Receive_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 80048cc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80048ce:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80048d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d4:	e7e9      	b.n	80048aa <HAL_I2C_Master_Receive_IT+0x52>
    return HAL_BUSY;
 80048d6:	2002      	movs	r0, #2
}
 80048d8:	b003      	add	sp, #12
 80048da:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 80048dc:	2002      	movs	r0, #2
 80048de:	e7fb      	b.n	80048d8 <HAL_I2C_Master_Receive_IT+0x80>
    __HAL_LOCK(hi2c);
 80048e0:	2002      	movs	r0, #2
 80048e2:	e7f9      	b.n	80048d8 <HAL_I2C_Master_Receive_IT+0x80>
 80048e4:	ffff0000 	.word	0xffff0000
 80048e8:	080067c1 	.word	0x080067c1
 80048ec:	80002400 	.word	0x80002400

080048f0 <HAL_I2C_Slave_Transmit_IT>:
{
 80048f0:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d122      	bne.n	8004942 <HAL_I2C_Slave_Transmit_IT+0x52>
    __HAL_LOCK(hi2c);
 80048fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004900:	2b01      	cmp	r3, #1
 8004902:	d020      	beq.n	8004946 <HAL_I2C_Slave_Transmit_IT+0x56>
 8004904:	2301      	movs	r3, #1
 8004906:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800490a:	2321      	movs	r3, #33	; 0x21
 800490c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004910:	2320      	movs	r3, #32
 8004912:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004916:	2400      	movs	r4, #0
 8004918:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800491a:	6805      	ldr	r5, [r0, #0]
 800491c:	686b      	ldr	r3, [r5, #4]
 800491e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004922:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 8004924:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004926:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004928:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800492a:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <HAL_I2C_Slave_Transmit_IT+0x5c>)
 800492e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <HAL_I2C_Slave_Transmit_IT+0x60>)
 8004932:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8004934:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8004938:	2105      	movs	r1, #5
 800493a:	f7ff f9d1 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 800493e:	4620      	mov	r0, r4
 8004940:	e000      	b.n	8004944 <HAL_I2C_Slave_Transmit_IT+0x54>
    return HAL_BUSY;
 8004942:	2002      	movs	r0, #2
}
 8004944:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8004946:	2002      	movs	r0, #2
 8004948:	e7fc      	b.n	8004944 <HAL_I2C_Slave_Transmit_IT+0x54>
 800494a:	bf00      	nop
 800494c:	ffff0000 	.word	0xffff0000
 8004950:	08006599 	.word	0x08006599

08004954 <HAL_I2C_Slave_Receive_IT>:
{
 8004954:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004956:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b20      	cmp	r3, #32
 800495e:	d122      	bne.n	80049a6 <HAL_I2C_Slave_Receive_IT+0x52>
    __HAL_LOCK(hi2c);
 8004960:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004964:	2b01      	cmp	r3, #1
 8004966:	d020      	beq.n	80049aa <HAL_I2C_Slave_Receive_IT+0x56>
 8004968:	2301      	movs	r3, #1
 800496a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800496e:	2322      	movs	r3, #34	; 0x22
 8004970:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004974:	2320      	movs	r3, #32
 8004976:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800497a:	2400      	movs	r4, #0
 800497c:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800497e:	6805      	ldr	r5, [r0, #0]
 8004980:	686b      	ldr	r3, [r5, #4]
 8004982:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004986:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 8004988:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800498a:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800498c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800498e:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_I2C_Slave_Receive_IT+0x5c>)
 8004992:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <HAL_I2C_Slave_Receive_IT+0x60>)
 8004996:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8004998:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800499c:	2106      	movs	r1, #6
 800499e:	f7ff f99f 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 80049a2:	4620      	mov	r0, r4
 80049a4:	e000      	b.n	80049a8 <HAL_I2C_Slave_Receive_IT+0x54>
    return HAL_BUSY;
 80049a6:	2002      	movs	r0, #2
}
 80049a8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 80049aa:	2002      	movs	r0, #2
 80049ac:	e7fc      	b.n	80049a8 <HAL_I2C_Slave_Receive_IT+0x54>
 80049ae:	bf00      	nop
 80049b0:	ffff0000 	.word	0xffff0000
 80049b4:	08006599 	.word	0x08006599

080049b8 <HAL_I2C_Master_Transmit_DMA>:
{
 80049b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ba:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049bc:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80049c0:	b2ed      	uxtb	r5, r5
 80049c2:	2d20      	cmp	r5, #32
 80049c4:	f040 808c 	bne.w	8004ae0 <HAL_I2C_Master_Transmit_DMA+0x128>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80049c8:	6804      	ldr	r4, [r0, #0]
 80049ca:	69a4      	ldr	r4, [r4, #24]
 80049cc:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80049d0:	f040 808a 	bne.w	8004ae8 <HAL_I2C_Master_Transmit_DMA+0x130>
    __HAL_LOCK(hi2c);
 80049d4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80049d8:	2c01      	cmp	r4, #1
 80049da:	f000 8087 	beq.w	8004aec <HAL_I2C_Master_Transmit_DMA+0x134>
 80049de:	4615      	mov	r5, r2
 80049e0:	460e      	mov	r6, r1
 80049e2:	4604      	mov	r4, r0
 80049e4:	2201      	movs	r2, #1
 80049e6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049ea:	2221      	movs	r2, #33	; 0x21
 80049ec:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049f0:	2210      	movs	r2, #16
 80049f2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049f6:	2200      	movs	r2, #0
 80049f8:	6442      	str	r2, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80049fa:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049fc:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049fe:	4b3c      	ldr	r3, [pc, #240]	; (8004af0 <HAL_I2C_Master_Transmit_DMA+0x138>)
 8004a00:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004a02:	4b3c      	ldr	r3, [pc, #240]	; (8004af4 <HAL_I2C_Master_Transmit_DMA+0x13c>)
 8004a04:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a06:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2bff      	cmp	r3, #255	; 0xff
 8004a0c:	d927      	bls.n	8004a5e <HAL_I2C_Master_Transmit_DMA+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a0e:	23ff      	movs	r3, #255	; 0xff
 8004a10:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004a12:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
      if (hi2c->hdmatx != NULL)
 8004a16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d038      	beq.n	8004a8e <HAL_I2C_Master_Transmit_DMA+0xd6>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004a1c:	4a36      	ldr	r2, [pc, #216]	; (8004af8 <HAL_I2C_Master_Transmit_DMA+0x140>)
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004a20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a22:	4a36      	ldr	r2, [pc, #216]	; (8004afc <HAL_I2C_Master_Transmit_DMA+0x144>)
 8004a24:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004a26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a28:	2300      	movs	r3, #0
 8004a2a:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004a2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a2e:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a34:	3228      	adds	r2, #40	; 0x28
 8004a36:	4629      	mov	r1, r5
 8004a38:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a3a:	f7fd fea0 	bl	800277e <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8004a3e:	4605      	mov	r5, r0
 8004a40:	b398      	cbz	r0, 8004aaa <HAL_I2C_Master_Transmit_DMA+0xf2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a42:	2320      	movs	r3, #32
 8004a44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a50:	f043 0310 	orr.w	r3, r3, #16
 8004a54:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004a56:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004a5a:	2501      	movs	r5, #1
 8004a5c:	e041      	b.n	8004ae2 <HAL_I2C_Master_Transmit_DMA+0x12a>
      hi2c->XferSize = hi2c->XferCount;
 8004a5e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	8503      	strh	r3, [r0, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 8004a64:	b983      	cbnz	r3, 8004a88 <HAL_I2C_Master_Transmit_DMA+0xd0>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004a66:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <HAL_I2C_Master_Transmit_DMA+0x148>)
 8004a68:	6343      	str	r3, [r0, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004a6a:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a72:	2200      	movs	r2, #0
 8004a74:	f7ff f919 	bl	8003caa <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8004a78:	2500      	movs	r5, #0
 8004a7a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a7e:	2101      	movs	r1, #1
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7ff f92d 	bl	8003ce0 <I2C_Enable_IRQ>
 8004a86:	e02c      	b.n	8004ae2 <HAL_I2C_Master_Transmit_DMA+0x12a>
      xfermode = I2C_AUTOEND_MODE;
 8004a88:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004a8c:	e7c3      	b.n	8004a16 <HAL_I2C_Master_Transmit_DMA+0x5e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a94:	2200      	movs	r2, #0
 8004a96:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004a9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa0:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004aa2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004aa6:	2501      	movs	r5, #1
 8004aa8:	e01b      	b.n	8004ae2 <HAL_I2C_Master_Transmit_DMA+0x12a>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004aaa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff f8f7 	bl	8003caa <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8004abc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004abe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004acc:	2111      	movs	r1, #17
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f7ff f906 	bl	8003ce0 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	6813      	ldr	r3, [r2, #0]
 8004ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e000      	b.n	8004ae2 <HAL_I2C_Master_Transmit_DMA+0x12a>
    return HAL_BUSY;
 8004ae0:	2502      	movs	r5, #2
}
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	b003      	add	sp, #12
 8004ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8004ae8:	2502      	movs	r5, #2
 8004aea:	e7fa      	b.n	8004ae2 <HAL_I2C_Master_Transmit_DMA+0x12a>
    __HAL_LOCK(hi2c);
 8004aec:	2502      	movs	r5, #2
 8004aee:	e7f8      	b.n	8004ae2 <HAL_I2C_Master_Transmit_DMA+0x12a>
 8004af0:	ffff0000 	.word	0xffff0000
 8004af4:	08006a41 	.word	0x08006a41
 8004af8:	08006b8d 	.word	0x08006b8d
 8004afc:	08006b77 	.word	0x08006b77
 8004b00:	080067c1 	.word	0x080067c1
 8004b04:	80002000 	.word	0x80002000

08004b08 <HAL_I2C_Master_Receive_DMA>:
{
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0a:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b0c:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004b10:	b2ed      	uxtb	r5, r5
 8004b12:	2d20      	cmp	r5, #32
 8004b14:	f040 808b 	bne.w	8004c2e <HAL_I2C_Master_Receive_DMA+0x126>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004b18:	6804      	ldr	r4, [r0, #0]
 8004b1a:	69a4      	ldr	r4, [r4, #24]
 8004b1c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8004b20:	f040 8089 	bne.w	8004c36 <HAL_I2C_Master_Receive_DMA+0x12e>
    __HAL_LOCK(hi2c);
 8004b24:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004b28:	2c01      	cmp	r4, #1
 8004b2a:	f000 8086 	beq.w	8004c3a <HAL_I2C_Master_Receive_DMA+0x132>
 8004b2e:	460e      	mov	r6, r1
 8004b30:	4604      	mov	r4, r0
 8004b32:	2101      	movs	r1, #1
 8004b34:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b38:	2122      	movs	r1, #34	; 0x22
 8004b3a:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b3e:	2110      	movs	r1, #16
 8004b40:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b44:	2100      	movs	r1, #0
 8004b46:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8004b48:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b4a:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b4c:	4b3c      	ldr	r3, [pc, #240]	; (8004c40 <HAL_I2C_Master_Receive_DMA+0x138>)
 8004b4e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004b50:	4b3c      	ldr	r3, [pc, #240]	; (8004c44 <HAL_I2C_Master_Receive_DMA+0x13c>)
 8004b52:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b54:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2bff      	cmp	r3, #255	; 0xff
 8004b5a:	d926      	bls.n	8004baa <HAL_I2C_Master_Receive_DMA+0xa2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b5c:	23ff      	movs	r3, #255	; 0xff
 8004b5e:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004b60:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
      if (hi2c->hdmarx != NULL)
 8004b64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d038      	beq.n	8004bdc <HAL_I2C_Master_Receive_DMA+0xd4>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004b6a:	4937      	ldr	r1, [pc, #220]	; (8004c48 <HAL_I2C_Master_Receive_DMA+0x140>)
 8004b6c:	62d9      	str	r1, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004b6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b70:	4936      	ldr	r1, [pc, #216]	; (8004c4c <HAL_I2C_Master_Receive_DMA+0x144>)
 8004b72:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004b74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b76:	2300      	movs	r3, #0
 8004b78:	630b      	str	r3, [r1, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004b7a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b7c:	638b      	str	r3, [r1, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8004b7e:	6821      	ldr	r1, [r4, #0]
 8004b80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004b82:	3124      	adds	r1, #36	; 0x24
 8004b84:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b86:	f7fd fdfa 	bl	800277e <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	b3a0      	cbz	r0, 8004bf8 <HAL_I2C_Master_Receive_DMA+0xf0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b8e:	2320      	movs	r3, #32
 8004b90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b94:	2200      	movs	r2, #0
 8004b96:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004b9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b9c:	f043 0310 	orr.w	r3, r3, #16
 8004ba0:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004ba2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004ba6:	2501      	movs	r5, #1
 8004ba8:	e042      	b.n	8004c30 <HAL_I2C_Master_Receive_DMA+0x128>
      hi2c->XferSize = hi2c->XferCount;
 8004baa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8503      	strh	r3, [r0, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 8004bb0:	b98b      	cbnz	r3, 8004bd6 <HAL_I2C_Master_Receive_DMA+0xce>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004bb2:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <HAL_I2C_Master_Receive_DMA+0x148>)
 8004bb4:	6343      	str	r3, [r0, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004bb6:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_I2C_Master_Receive_DMA+0x14c>)
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	f7ff f872 	bl	8003caa <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8004bc6:	2500      	movs	r5, #0
 8004bc8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bcc:	2101      	movs	r1, #1
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7ff f886 	bl	8003ce0 <I2C_Enable_IRQ>
 8004bd4:	e02c      	b.n	8004c30 <HAL_I2C_Master_Receive_DMA+0x128>
      xfermode = I2C_AUTOEND_MODE;
 8004bd6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004bda:	e7c3      	b.n	8004b64 <HAL_I2C_Master_Receive_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004bdc:	2320      	movs	r3, #32
 8004bde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004be2:	2200      	movs	r2, #0
 8004be4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004be8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bee:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004bf0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004bf4:	2501      	movs	r5, #1
 8004bf6:	e01b      	b.n	8004c30 <HAL_I2C_Master_Receive_DMA+0x128>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004bf8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004bfc:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <HAL_I2C_Master_Receive_DMA+0x14c>)
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	463b      	mov	r3, r7
 8004c02:	4631      	mov	r1, r6
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff f850 	bl	8003caa <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8004c0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8004c14:	2300      	movs	r3, #0
 8004c16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004c1a:	2111      	movs	r1, #17
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f7ff f85f 	bl	8003ce0 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	6813      	ldr	r3, [r2, #0]
 8004c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e000      	b.n	8004c30 <HAL_I2C_Master_Receive_DMA+0x128>
    return HAL_BUSY;
 8004c2e:	2502      	movs	r5, #2
}
 8004c30:	4628      	mov	r0, r5
 8004c32:	b003      	add	sp, #12
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8004c36:	2502      	movs	r5, #2
 8004c38:	e7fa      	b.n	8004c30 <HAL_I2C_Master_Receive_DMA+0x128>
    __HAL_LOCK(hi2c);
 8004c3a:	2502      	movs	r5, #2
 8004c3c:	e7f8      	b.n	8004c30 <HAL_I2C_Master_Receive_DMA+0x128>
 8004c3e:	bf00      	nop
 8004c40:	ffff0000 	.word	0xffff0000
 8004c44:	08006a41 	.word	0x08006a41
 8004c48:	08006be3 	.word	0x08006be3
 8004c4c:	08006b77 	.word	0x08006b77
 8004c50:	080067c1 	.word	0x080067c1
 8004c54:	80002400 	.word	0x80002400

08004c58 <HAL_I2C_Slave_Transmit_DMA>:
{
 8004c58:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c5a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d162      	bne.n	8004d2a <HAL_I2C_Slave_Transmit_DMA+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8004c64:	2900      	cmp	r1, #0
 8004c66:	d03b      	beq.n	8004ce0 <HAL_I2C_Slave_Transmit_DMA+0x88>
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	d039      	beq.n	8004ce0 <HAL_I2C_Slave_Transmit_DMA+0x88>
    __HAL_LOCK(hi2c);
 8004c6c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d05d      	beq.n	8004d30 <HAL_I2C_Slave_Transmit_DMA+0xd8>
 8004c74:	2301      	movs	r3, #1
 8004c76:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c7a:	2321      	movs	r3, #33	; 0x21
 8004c7c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004c80:	2320      	movs	r3, #32
 8004c82:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8004c8a:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c8c:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c8e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004c90:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c92:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <HAL_I2C_Slave_Transmit_DMA+0xdc>)
 8004c94:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004c96:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <HAL_I2C_Slave_Transmit_DMA+0xe0>)
 8004c98:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->hdmatx != NULL)
 8004c9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c9c:	b32b      	cbz	r3, 8004cea <HAL_I2C_Slave_Transmit_DMA+0x92>
 8004c9e:	4605      	mov	r5, r0
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8004ca0:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <HAL_I2C_Slave_Transmit_DMA+0xe4>)
 8004ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004ca4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ca6:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <HAL_I2C_Slave_Transmit_DMA+0xe8>)
 8004ca8:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004caa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cac:	2300      	movs	r3, #0
 8004cae:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8004cb0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cb2:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004cb4:	6802      	ldr	r2, [r0, #0]
 8004cb6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004cb8:	3228      	adds	r2, #40	; 0x28
 8004cba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004cbc:	f7fd fd5f 	bl	800277e <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	b300      	cbz	r0, 8004d06 <HAL_I2C_Slave_Transmit_DMA+0xae>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004cc4:	2328      	movs	r3, #40	; 0x28
 8004cc6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004cd0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004cd2:	f043 0310 	orr.w	r3, r3, #16
 8004cd6:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004cd8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004cdc:	2401      	movs	r4, #1
 8004cde:	e025      	b.n	8004d2c <HAL_I2C_Slave_Transmit_DMA+0xd4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ce4:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004ce6:	2401      	movs	r4, #1
 8004ce8:	e020      	b.n	8004d2c <HAL_I2C_Slave_Transmit_DMA+0xd4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004cea:	2328      	movs	r3, #40	; 0x28
 8004cec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004cf6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfc:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004cfe:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
      return HAL_ERROR;
 8004d02:	2401      	movs	r4, #1
 8004d04:	e012      	b.n	8004d2c <HAL_I2C_Slave_Transmit_DMA+0xd4>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004d06:	682a      	ldr	r2, [r5, #0]
 8004d08:	6853      	ldr	r3, [r2, #4]
 8004d0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d0e:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hi2c);
 8004d10:	2300      	movs	r3, #0
 8004d12:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d16:	2104      	movs	r1, #4
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f7fe ffe1 	bl	8003ce0 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d1e:	682a      	ldr	r2, [r5, #0]
 8004d20:	6813      	ldr	r3, [r2, #0]
 8004d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d26:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8004d28:	e000      	b.n	8004d2c <HAL_I2C_Slave_Transmit_DMA+0xd4>
    return HAL_BUSY;
 8004d2a:	2402      	movs	r4, #2
}
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8004d30:	2402      	movs	r4, #2
 8004d32:	e7fb      	b.n	8004d2c <HAL_I2C_Slave_Transmit_DMA+0xd4>
 8004d34:	ffff0000 	.word	0xffff0000
 8004d38:	0800693d 	.word	0x0800693d
 8004d3c:	08006239 	.word	0x08006239
 8004d40:	08006b77 	.word	0x08006b77

08004d44 <HAL_I2C_Slave_Receive_DMA>:
{
 8004d44:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d163      	bne.n	8004e18 <HAL_I2C_Slave_Receive_DMA+0xd4>
    if ((pData == NULL) || (Size == 0U))
 8004d50:	2900      	cmp	r1, #0
 8004d52:	d03c      	beq.n	8004dce <HAL_I2C_Slave_Receive_DMA+0x8a>
 8004d54:	2a00      	cmp	r2, #0
 8004d56:	d03a      	beq.n	8004dce <HAL_I2C_Slave_Receive_DMA+0x8a>
    __HAL_LOCK(hi2c);
 8004d58:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d05e      	beq.n	8004e1e <HAL_I2C_Slave_Receive_DMA+0xda>
 8004d60:	2301      	movs	r3, #1
 8004d62:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004d66:	2322      	movs	r3, #34	; 0x22
 8004d68:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004d6c:	2320      	movs	r3, #32
 8004d6e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8004d76:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d78:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d7a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004d7c:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d7e:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_I2C_Slave_Receive_DMA+0xe0>)
 8004d80:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004d82:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <HAL_I2C_Slave_Receive_DMA+0xe4>)
 8004d84:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->hdmarx != NULL)
 8004d86:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d88:	b333      	cbz	r3, 8004dd8 <HAL_I2C_Slave_Receive_DMA+0x94>
 8004d8a:	460a      	mov	r2, r1
 8004d8c:	4605      	mov	r5, r0
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004d8e:	4927      	ldr	r1, [pc, #156]	; (8004e2c <HAL_I2C_Slave_Receive_DMA+0xe8>)
 8004d90:	62d9      	str	r1, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004d92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d94:	4926      	ldr	r1, [pc, #152]	; (8004e30 <HAL_I2C_Slave_Receive_DMA+0xec>)
 8004d96:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004d98:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	630b      	str	r3, [r1, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004d9e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004da0:	638b      	str	r3, [r1, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8004da2:	6801      	ldr	r1, [r0, #0]
 8004da4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004da6:	3124      	adds	r1, #36	; 0x24
 8004da8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8004daa:	f7fd fce8 	bl	800277e <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8004dae:	4604      	mov	r4, r0
 8004db0:	b300      	cbz	r0, 8004df4 <HAL_I2C_Slave_Receive_DMA+0xb0>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004db2:	2328      	movs	r3, #40	; 0x28
 8004db4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004db8:	2200      	movs	r2, #0
 8004dba:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004dbe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004dc0:	f043 0310 	orr.w	r3, r3, #16
 8004dc4:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004dc6:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004dca:	2401      	movs	r4, #1
 8004dcc:	e025      	b.n	8004e1a <HAL_I2C_Slave_Receive_DMA+0xd6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd2:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004dd4:	2401      	movs	r4, #1
 8004dd6:	e020      	b.n	8004e1a <HAL_I2C_Slave_Receive_DMA+0xd6>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004dd8:	2328      	movs	r3, #40	; 0x28
 8004dda:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004dde:	2200      	movs	r2, #0
 8004de0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004de4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dea:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004dec:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
      return HAL_ERROR;
 8004df0:	2401      	movs	r4, #1
 8004df2:	e012      	b.n	8004e1a <HAL_I2C_Slave_Receive_DMA+0xd6>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004df4:	682a      	ldr	r2, [r5, #0]
 8004df6:	6853      	ldr	r3, [r2, #4]
 8004df8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dfc:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hi2c);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e04:	2104      	movs	r1, #4
 8004e06:	4628      	mov	r0, r5
 8004e08:	f7fe ff6a 	bl	8003ce0 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004e0c:	682a      	ldr	r2, [r5, #0]
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e14:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8004e16:	e000      	b.n	8004e1a <HAL_I2C_Slave_Receive_DMA+0xd6>
    return HAL_BUSY;
 8004e18:	2402      	movs	r4, #2
}
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8004e1e:	2402      	movs	r4, #2
 8004e20:	e7fb      	b.n	8004e1a <HAL_I2C_Slave_Receive_DMA+0xd6>
 8004e22:	bf00      	nop
 8004e24:	ffff0000 	.word	0xffff0000
 8004e28:	0800693d 	.word	0x0800693d
 8004e2c:	08006255 	.word	0x08006255
 8004e30:	08006b77 	.word	0x08006b77

08004e34 <HAL_I2C_Mem_Write>:
{
 8004e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e3e:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004e42:	b2ed      	uxtb	r5, r5
 8004e44:	2d20      	cmp	r5, #32
 8004e46:	f040 80bc 	bne.w	8004fc2 <HAL_I2C_Mem_Write+0x18e>
    if ((pData == NULL) || (Size == 0U))
 8004e4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e4c:	b1dc      	cbz	r4, 8004e86 <HAL_I2C_Mem_Write+0x52>
 8004e4e:	b1d7      	cbz	r7, 8004e86 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8004e50:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004e54:	2c01      	cmp	r4, #1
 8004e56:	f000 80b9 	beq.w	8004fcc <HAL_I2C_Mem_Write+0x198>
 8004e5a:	4698      	mov	r8, r3
 8004e5c:	4691      	mov	r9, r2
 8004e5e:	460d      	mov	r5, r1
 8004e60:	4604      	mov	r4, r0
 8004e62:	f04f 0a01 	mov.w	sl, #1
 8004e66:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004e6a:	f7fd f915 	bl	8002098 <HAL_GetTick>
 8004e6e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e70:	9000      	str	r0, [sp, #0]
 8004e72:	2319      	movs	r3, #25
 8004e74:	4652      	mov	r2, sl
 8004e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f7ff f81c 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8004e80:	b130      	cbz	r0, 8004e90 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e09e      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e8a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e099      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e90:	2321      	movs	r3, #33	; 0x21
 8004e92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e96:	2340      	movs	r3, #64	; 0x40
 8004e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ea2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ea4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ea6:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ea8:	9601      	str	r6, [sp, #4]
 8004eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4643      	mov	r3, r8
 8004eb0:	464a      	mov	r2, r9
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff f829 	bl	8003f0c <I2C_RequestMemoryWrite>
 8004eba:	b998      	cbnz	r0, 8004ee4 <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ebc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2bff      	cmp	r3, #255	; 0xff
 8004ec2:	d914      	bls.n	8004eee <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ec4:	22ff      	movs	r2, #255	; 0xff
 8004ec6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f7fe fee9 	bl	8003caa <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ed8:	2700      	movs	r7, #0
 8004eda:	f04f 0880 	mov.w	r8, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ede:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 8004ee2:	e01f      	b.n	8004f24 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004eea:	4653      	mov	r3, sl
 8004eec:	e06a      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x190>
      hi2c->XferSize = hi2c->XferCount;
 8004eee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	4629      	mov	r1, r5
 8004f00:	4620      	mov	r0, r4
 8004f02:	f7fe fed2 	bl	8003caa <I2C_TransferConfig>
 8004f06:	e7e7      	b.n	8004ed8 <HAL_I2C_Mem_Write+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 8004f08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f0e:	9700      	str	r7, [sp, #0]
 8004f10:	464b      	mov	r3, r9
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	4629      	mov	r1, r5
 8004f16:	4620      	mov	r0, r4
 8004f18:	f7fe fec7 	bl	8003caa <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8004f1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d031      	beq.n	8004f88 <HAL_I2C_Mem_Write+0x154>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f24:	4632      	mov	r2, r6
 8004f26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f7fe ff9a 	bl	8003e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d14e      	bne.n	8004fd0 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f36:	7812      	ldrb	r2, [r2, #0]
 8004f38:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004f40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004f48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f52:	b292      	uxth	r2, r2
 8004f54:	2a00      	cmp	r2, #0
 8004f56:	d0e1      	beq.n	8004f1c <HAL_I2C_Mem_Write+0xe8>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1df      	bne.n	8004f1c <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f5c:	9600      	str	r6, [sp, #0]
 8004f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f60:	463a      	mov	r2, r7
 8004f62:	4641      	mov	r1, r8
 8004f64:	4620      	mov	r0, r4
 8004f66:	f7fe ffa7 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8004f6a:	bb98      	cbnz	r0, 8004fd4 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2bff      	cmp	r3, #255	; 0xff
 8004f72:	d9c9      	bls.n	8004f08 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f74:	22ff      	movs	r2, #255	; 0xff
 8004f76:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f78:	9700      	str	r7, [sp, #0]
 8004f7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7fe fe92 	bl	8003caa <I2C_TransferConfig>
 8004f86:	e7c9      	b.n	8004f1c <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f88:	4632      	mov	r2, r6
 8004f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f7ff f82b 	bl	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	bb00      	cbnz	r0, 8004fd8 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f96:	6822      	ldr	r2, [r4, #0]
 8004f98:	2120      	movs	r1, #32
 8004f9a:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8004f9c:	6820      	ldr	r0, [r4, #0]
 8004f9e:	6842      	ldr	r2, [r0, #4]
 8004fa0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004fa4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004fa8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fb2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004fbc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004fc0:	e000      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x190>
    return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	b002      	add	sp, #8
 8004fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e7f9      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x190>
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e7f7      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x190>
          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e7f5      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x190>
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e7f3      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x190>

08004fdc <HAL_I2C_Mem_Read>:
{
 8004fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe6:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004fea:	b2ed      	uxtb	r5, r5
 8004fec:	2d20      	cmp	r5, #32
 8004fee:	f040 80bf 	bne.w	8005170 <HAL_I2C_Mem_Read+0x194>
    if ((pData == NULL) || (Size == 0U))
 8004ff2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ff4:	b1dc      	cbz	r4, 800502e <HAL_I2C_Mem_Read+0x52>
 8004ff6:	b1d7      	cbz	r7, 800502e <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8004ff8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004ffc:	2c01      	cmp	r4, #1
 8004ffe:	f000 80bc 	beq.w	800517a <HAL_I2C_Mem_Read+0x19e>
 8005002:	4698      	mov	r8, r3
 8005004:	4691      	mov	r9, r2
 8005006:	460d      	mov	r5, r1
 8005008:	4604      	mov	r4, r0
 800500a:	f04f 0a01 	mov.w	sl, #1
 800500e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005012:	f7fd f841 	bl	8002098 <HAL_GetTick>
 8005016:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005018:	9000      	str	r0, [sp, #0]
 800501a:	2319      	movs	r3, #25
 800501c:	4652      	mov	r2, sl
 800501e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005022:	4620      	mov	r0, r4
 8005024:	f7fe ff48 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8005028:	b130      	cbz	r0, 8005038 <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0a1      	b.n	8005172 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800502e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005032:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e09c      	b.n	8005172 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005038:	2322      	movs	r3, #34	; 0x22
 800503a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800503e:	2340      	movs	r3, #64	; 0x40
 8005040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005044:	2300      	movs	r3, #0
 8005046:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800504a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800504c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800504e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005050:	9601      	str	r6, [sp, #4]
 8005052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	4643      	mov	r3, r8
 8005058:	464a      	mov	r2, r9
 800505a:	4629      	mov	r1, r5
 800505c:	4620      	mov	r0, r4
 800505e:	f7fe ff8d 	bl	8003f7c <I2C_RequestMemoryRead>
 8005062:	b998      	cbnz	r0, 800508c <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005064:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	2bff      	cmp	r3, #255	; 0xff
 800506a:	d914      	bls.n	8005096 <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800506c:	22ff      	movs	r2, #255	; 0xff
 800506e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005070:	4b46      	ldr	r3, [pc, #280]	; (800518c <HAL_I2C_Mem_Read+0x1b0>)
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005078:	4629      	mov	r1, r5
 800507a:	4620      	mov	r0, r4
 800507c:	f7fe fe15 	bl	8003caa <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005080:	2700      	movs	r7, #0
 8005082:	f04f 0804 	mov.w	r8, #4
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005086:	f04f 0980 	mov.w	r9, #128	; 0x80
 800508a:	e020      	b.n	80050ce <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800508c:	2300      	movs	r3, #0
 800508e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005092:	4653      	mov	r3, sl
 8005094:	e06d      	b.n	8005172 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8005096:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005098:	b292      	uxth	r2, r2
 800509a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800509c:	4b3b      	ldr	r3, [pc, #236]	; (800518c <HAL_I2C_Mem_Read+0x1b0>)
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	4629      	mov	r1, r5
 80050a8:	4620      	mov	r0, r4
 80050aa:	f7fe fdfe 	bl	8003caa <I2C_TransferConfig>
 80050ae:	e7e7      	b.n	8005080 <HAL_I2C_Mem_Read+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 80050b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80050b2:	b292      	uxth	r2, r2
 80050b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050b6:	9700      	str	r7, [sp, #0]
 80050b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	4629      	mov	r1, r5
 80050c0:	4620      	mov	r0, r4
 80050c2:	f7fe fdf2 	bl	8003caa <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80050c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d033      	beq.n	8005136 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80050ce:	9600      	str	r6, [sp, #0]
 80050d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050d2:	463a      	mov	r2, r7
 80050d4:	4641      	mov	r1, r8
 80050d6:	4620      	mov	r0, r4
 80050d8:	f7fe feee 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d14e      	bne.n	800517e <HAL_I2C_Mem_Read+0x1a2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80050e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050ea:	3301      	adds	r3, #1
 80050ec:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80050ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80050f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80050f8:	3a01      	subs	r2, #1
 80050fa:	b292      	uxth	r2, r2
 80050fc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005100:	b292      	uxth	r2, r2
 8005102:	2a00      	cmp	r2, #0
 8005104:	d0df      	beq.n	80050c6 <HAL_I2C_Mem_Read+0xea>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1dd      	bne.n	80050c6 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800510a:	9600      	str	r6, [sp, #0]
 800510c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800510e:	463a      	mov	r2, r7
 8005110:	4649      	mov	r1, r9
 8005112:	4620      	mov	r0, r4
 8005114:	f7fe fed0 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8005118:	bb98      	cbnz	r0, 8005182 <HAL_I2C_Mem_Read+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800511a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	2bff      	cmp	r3, #255	; 0xff
 8005120:	d9c6      	bls.n	80050b0 <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005122:	22ff      	movs	r2, #255	; 0xff
 8005124:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005126:	9700      	str	r7, [sp, #0]
 8005128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800512c:	4629      	mov	r1, r5
 800512e:	4620      	mov	r0, r4
 8005130:	f7fe fdbb 	bl	8003caa <I2C_TransferConfig>
 8005134:	e7c7      	b.n	80050c6 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005136:	4632      	mov	r2, r6
 8005138:	990c      	ldr	r1, [sp, #48]	; 0x30
 800513a:	4620      	mov	r0, r4
 800513c:	f7fe ff54 	bl	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	bb00      	cbnz	r0, 8005186 <HAL_I2C_Mem_Read+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	2120      	movs	r1, #32
 8005148:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	6842      	ldr	r2, [r0, #4]
 800514e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005152:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005156:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005164:	2200      	movs	r2, #0
 8005166:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800516a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800516e:	e000      	b.n	8005172 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
}
 8005172:	4618      	mov	r0, r3
 8005174:	b002      	add	sp, #8
 8005176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800517a:	2302      	movs	r3, #2
 800517c:	e7f9      	b.n	8005172 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e7f7      	b.n	8005172 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e7f5      	b.n	8005172 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e7f3      	b.n	8005172 <HAL_I2C_Mem_Read+0x196>
 800518a:	bf00      	nop
 800518c:	80002400 	.word	0x80002400

08005190 <HAL_I2C_Mem_Write_IT>:
{
 8005190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800519a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800519e:	b2e4      	uxtb	r4, r4
 80051a0:	2c20      	cmp	r4, #32
 80051a2:	d159      	bne.n	8005258 <HAL_I2C_Mem_Write_IT+0xc8>
    if ((pData == NULL) || (Size == 0U))
 80051a4:	9c08      	ldr	r4, [sp, #32]
 80051a6:	2c00      	cmp	r4, #0
 80051a8:	d03a      	beq.n	8005220 <HAL_I2C_Mem_Write_IT+0x90>
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d038      	beq.n	8005220 <HAL_I2C_Mem_Write_IT+0x90>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80051ae:	6804      	ldr	r4, [r0, #0]
 80051b0:	69a4      	ldr	r4, [r4, #24]
 80051b2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80051b6:	d154      	bne.n	8005262 <HAL_I2C_Mem_Write_IT+0xd2>
    __HAL_LOCK(hi2c);
 80051b8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80051bc:	2c01      	cmp	r4, #1
 80051be:	d052      	beq.n	8005266 <HAL_I2C_Mem_Write_IT+0xd6>
 80051c0:	4698      	mov	r8, r3
 80051c2:	4614      	mov	r4, r2
 80051c4:	460f      	mov	r7, r1
 80051c6:	4605      	mov	r5, r0
 80051c8:	2301      	movs	r3, #1
 80051ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80051ce:	f7fc ff63 	bl	8002098 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051d2:	2321      	movs	r3, #33	; 0x21
 80051d4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80051d8:	2340      	movs	r3, #64	; 0x40
 80051da:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051de:	2300      	movs	r3, #0
 80051e0:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80051e2:	9b08      	ldr	r3, [sp, #32]
 80051e4:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051e6:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e8:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_I2C_Mem_Write_IT+0xdc>)
 80051ea:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80051ec:	4b20      	ldr	r3, [pc, #128]	; (8005270 <HAL_I2C_Mem_Write_IT+0xe0>)
 80051ee:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051f0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2bff      	cmp	r3, #255	; 0xff
 80051f6:	d918      	bls.n	800522a <HAL_I2C_Mem_Write_IT+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051f8:	23ff      	movs	r3, #255	; 0xff
 80051fa:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80051fc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005200:	9001      	str	r0, [sp, #4]
 8005202:	2319      	movs	r3, #25
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	4643      	mov	r3, r8
 8005208:	4622      	mov	r2, r4
 800520a:	4639      	mov	r1, r7
 800520c:	4628      	mov	r0, r5
 800520e:	f7fe fe7d 	bl	8003f0c <I2C_RequestMemoryWrite>
 8005212:	4604      	mov	r4, r0
 8005214:	b170      	cbz	r0, 8005234 <HAL_I2C_Mem_Write_IT+0xa4>
      __HAL_UNLOCK(hi2c);
 8005216:	2300      	movs	r3, #0
 8005218:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800521c:	2401      	movs	r4, #1
 800521e:	e01c      	b.n	800525a <HAL_I2C_Mem_Write_IT+0xca>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005224:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005226:	2401      	movs	r4, #1
 8005228:	e017      	b.n	800525a <HAL_I2C_Mem_Write_IT+0xca>
      hi2c->XferSize = hi2c->XferCount;
 800522a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800522c:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800522e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8005232:	e7e5      	b.n	8005200 <HAL_I2C_Mem_Write_IT+0x70>
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005234:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8005238:	f04f 0800 	mov.w	r8, #0
 800523c:	f8cd 8000 	str.w	r8, [sp]
 8005240:	4633      	mov	r3, r6
 8005242:	4639      	mov	r1, r7
 8005244:	4628      	mov	r0, r5
 8005246:	f7fe fd30 	bl	8003caa <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 800524a:	f885 8040 	strb.w	r8, [r5, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800524e:	2101      	movs	r1, #1
 8005250:	4628      	mov	r0, r5
 8005252:	f7fe fd45 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 8005256:	e000      	b.n	800525a <HAL_I2C_Mem_Write_IT+0xca>
    return HAL_BUSY;
 8005258:	2402      	movs	r4, #2
}
 800525a:	4620      	mov	r0, r4
 800525c:	b002      	add	sp, #8
 800525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 8005262:	2402      	movs	r4, #2
 8005264:	e7f9      	b.n	800525a <HAL_I2C_Mem_Write_IT+0xca>
    __HAL_LOCK(hi2c);
 8005266:	2402      	movs	r4, #2
 8005268:	e7f7      	b.n	800525a <HAL_I2C_Mem_Write_IT+0xca>
 800526a:	bf00      	nop
 800526c:	ffff0000 	.word	0xffff0000
 8005270:	080067c1 	.word	0x080067c1

08005274 <HAL_I2C_Mem_Read_IT>:
{
 8005274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800527e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005282:	b2e4      	uxtb	r4, r4
 8005284:	2c20      	cmp	r4, #32
 8005286:	d158      	bne.n	800533a <HAL_I2C_Mem_Read_IT+0xc6>
    if ((pData == NULL) || (Size == 0U))
 8005288:	9c08      	ldr	r4, [sp, #32]
 800528a:	2c00      	cmp	r4, #0
 800528c:	d03a      	beq.n	8005304 <HAL_I2C_Mem_Read_IT+0x90>
 800528e:	2e00      	cmp	r6, #0
 8005290:	d038      	beq.n	8005304 <HAL_I2C_Mem_Read_IT+0x90>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005292:	6804      	ldr	r4, [r0, #0]
 8005294:	69a4      	ldr	r4, [r4, #24]
 8005296:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800529a:	d153      	bne.n	8005344 <HAL_I2C_Mem_Read_IT+0xd0>
    __HAL_LOCK(hi2c);
 800529c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80052a0:	2c01      	cmp	r4, #1
 80052a2:	d051      	beq.n	8005348 <HAL_I2C_Mem_Read_IT+0xd4>
 80052a4:	4698      	mov	r8, r3
 80052a6:	4614      	mov	r4, r2
 80052a8:	460f      	mov	r7, r1
 80052aa:	4605      	mov	r5, r0
 80052ac:	2301      	movs	r3, #1
 80052ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80052b2:	f7fc fef1 	bl	8002098 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052b6:	2322      	movs	r3, #34	; 0x22
 80052b8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80052c6:	9b08      	ldr	r3, [sp, #32]
 80052c8:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052ca:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052cc:	4b1f      	ldr	r3, [pc, #124]	; (800534c <HAL_I2C_Mem_Read_IT+0xd8>)
 80052ce:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80052d0:	4b1f      	ldr	r3, [pc, #124]	; (8005350 <HAL_I2C_Mem_Read_IT+0xdc>)
 80052d2:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052d4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2bff      	cmp	r3, #255	; 0xff
 80052da:	d918      	bls.n	800530e <HAL_I2C_Mem_Read_IT+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052dc:	23ff      	movs	r3, #255	; 0xff
 80052de:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80052e0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80052e4:	9001      	str	r0, [sp, #4]
 80052e6:	2319      	movs	r3, #25
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	4643      	mov	r3, r8
 80052ec:	4622      	mov	r2, r4
 80052ee:	4639      	mov	r1, r7
 80052f0:	4628      	mov	r0, r5
 80052f2:	f7fe fe43 	bl	8003f7c <I2C_RequestMemoryRead>
 80052f6:	4604      	mov	r4, r0
 80052f8:	b170      	cbz	r0, 8005318 <HAL_I2C_Mem_Read_IT+0xa4>
      __HAL_UNLOCK(hi2c);
 80052fa:	2300      	movs	r3, #0
 80052fc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005300:	2401      	movs	r4, #1
 8005302:	e01b      	b.n	800533c <HAL_I2C_Mem_Read_IT+0xc8>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005308:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800530a:	2401      	movs	r4, #1
 800530c:	e016      	b.n	800533c <HAL_I2C_Mem_Read_IT+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 800530e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8005310:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005312:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8005316:	e7e5      	b.n	80052e4 <HAL_I2C_Mem_Read_IT+0x70>
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005318:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800531c:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <HAL_I2C_Mem_Read_IT+0xe0>)
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	4633      	mov	r3, r6
 8005322:	4639      	mov	r1, r7
 8005324:	4628      	mov	r0, r5
 8005326:	f7fe fcc0 	bl	8003caa <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 800532a:	2300      	movs	r3, #0
 800532c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005330:	2102      	movs	r1, #2
 8005332:	4628      	mov	r0, r5
 8005334:	f7fe fcd4 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 8005338:	e000      	b.n	800533c <HAL_I2C_Mem_Read_IT+0xc8>
    return HAL_BUSY;
 800533a:	2402      	movs	r4, #2
}
 800533c:	4620      	mov	r0, r4
 800533e:	b002      	add	sp, #8
 8005340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 8005344:	2402      	movs	r4, #2
 8005346:	e7f9      	b.n	800533c <HAL_I2C_Mem_Read_IT+0xc8>
    __HAL_LOCK(hi2c);
 8005348:	2402      	movs	r4, #2
 800534a:	e7f7      	b.n	800533c <HAL_I2C_Mem_Read_IT+0xc8>
 800534c:	ffff0000 	.word	0xffff0000
 8005350:	080067c1 	.word	0x080067c1
 8005354:	80002400 	.word	0x80002400

08005358 <HAL_I2C_Mem_Write_DMA>:
{
 8005358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005362:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005366:	b2e4      	uxtb	r4, r4
 8005368:	2c20      	cmp	r4, #32
 800536a:	f040 8098 	bne.w	800549e <HAL_I2C_Mem_Write_DMA+0x146>
    if ((pData == NULL) || (Size == 0U))
 800536e:	9c08      	ldr	r4, [sp, #32]
 8005370:	2c00      	cmp	r4, #0
 8005372:	d05b      	beq.n	800542c <HAL_I2C_Mem_Write_DMA+0xd4>
 8005374:	2e00      	cmp	r6, #0
 8005376:	d059      	beq.n	800542c <HAL_I2C_Mem_Write_DMA+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005378:	6804      	ldr	r4, [r0, #0]
 800537a:	69a4      	ldr	r4, [r4, #24]
 800537c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8005380:	f040 8092 	bne.w	80054a8 <HAL_I2C_Mem_Write_DMA+0x150>
    __HAL_LOCK(hi2c);
 8005384:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005388:	2c01      	cmp	r4, #1
 800538a:	f000 808f 	beq.w	80054ac <HAL_I2C_Mem_Write_DMA+0x154>
 800538e:	4698      	mov	r8, r3
 8005390:	4614      	mov	r4, r2
 8005392:	460f      	mov	r7, r1
 8005394:	4605      	mov	r5, r0
 8005396:	2301      	movs	r3, #1
 8005398:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800539c:	f7fc fe7c 	bl	8002098 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053a0:	2321      	movs	r3, #33	; 0x21
 80053a2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80053a6:	2340      	movs	r3, #64	; 0x40
 80053a8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80053b0:	9b08      	ldr	r3, [sp, #32]
 80053b2:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053b4:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b6:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <HAL_I2C_Mem_Write_DMA+0x158>)
 80053b8:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80053ba:	4b3e      	ldr	r3, [pc, #248]	; (80054b4 <HAL_I2C_Mem_Write_DMA+0x15c>)
 80053bc:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053be:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2bff      	cmp	r3, #255	; 0xff
 80053c4:	d937      	bls.n	8005436 <HAL_I2C_Mem_Write_DMA+0xde>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053c6:	23ff      	movs	r3, #255	; 0xff
 80053c8:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80053ca:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80053ce:	9001      	str	r0, [sp, #4]
 80053d0:	2319      	movs	r3, #25
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	4643      	mov	r3, r8
 80053d6:	4622      	mov	r2, r4
 80053d8:	4639      	mov	r1, r7
 80053da:	4628      	mov	r0, r5
 80053dc:	f7fe fd96 	bl	8003f0c <I2C_RequestMemoryWrite>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d12d      	bne.n	8005440 <HAL_I2C_Mem_Write_DMA+0xe8>
    if (hi2c->hdmatx != NULL)
 80053e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02f      	beq.n	800544a <HAL_I2C_Mem_Write_DMA+0xf2>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80053ea:	4a33      	ldr	r2, [pc, #204]	; (80054b8 <HAL_I2C_Mem_Write_DMA+0x160>)
 80053ec:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80053ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80053f0:	4a32      	ldr	r2, [pc, #200]	; (80054bc <HAL_I2C_Mem_Write_DMA+0x164>)
 80053f2:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80053f4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80053f6:	2300      	movs	r3, #0
 80053f8:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80053fa:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80053fc:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80053fe:	682a      	ldr	r2, [r5, #0]
 8005400:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005402:	3228      	adds	r2, #40	; 0x28
 8005404:	9908      	ldr	r1, [sp, #32]
 8005406:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005408:	f7fd f9b9 	bl	800277e <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 800540c:	4604      	mov	r4, r0
 800540e:	b350      	cbz	r0, 8005466 <HAL_I2C_Mem_Write_DMA+0x10e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005410:	2320      	movs	r3, #32
 8005412:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005416:	2200      	movs	r2, #0
 8005418:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800541c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800541e:	f043 0310 	orr.w	r3, r3, #16
 8005422:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005424:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005428:	2401      	movs	r4, #1
 800542a:	e039      	b.n	80054a0 <HAL_I2C_Mem_Write_DMA+0x148>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800542c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005430:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005432:	2401      	movs	r4, #1
 8005434:	e034      	b.n	80054a0 <HAL_I2C_Mem_Write_DMA+0x148>
      hi2c->XferSize = hi2c->XferCount;
 8005436:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8005438:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800543a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800543e:	e7c6      	b.n	80053ce <HAL_I2C_Mem_Write_DMA+0x76>
      __HAL_UNLOCK(hi2c);
 8005440:	2300      	movs	r3, #0
 8005442:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005446:	2401      	movs	r4, #1
 8005448:	e02a      	b.n	80054a0 <HAL_I2C_Mem_Write_DMA+0x148>
      hi2c->State     = HAL_I2C_STATE_READY;
 800544a:	2320      	movs	r3, #32
 800544c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005450:	2200      	movs	r2, #0
 8005452:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005456:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545c:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800545e:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005462:	2401      	movs	r4, #1
 8005464:	e01c      	b.n	80054a0 <HAL_I2C_Mem_Write_DMA+0x148>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005466:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800546a:	f04f 0800 	mov.w	r8, #0
 800546e:	f8cd 8000 	str.w	r8, [sp]
 8005472:	4633      	mov	r3, r6
 8005474:	4639      	mov	r1, r7
 8005476:	4628      	mov	r0, r5
 8005478:	f7fe fc17 	bl	8003caa <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800547c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800547e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	b29b      	uxth	r3, r3
 8005484:	856b      	strh	r3, [r5, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 8005486:	f885 8040 	strb.w	r8, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800548a:	2111      	movs	r1, #17
 800548c:	4628      	mov	r0, r5
 800548e:	f7fe fc27 	bl	8003ce0 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005492:	682a      	ldr	r2, [r5, #0]
 8005494:	6813      	ldr	r3, [r2, #0]
 8005496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800549a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800549c:	e000      	b.n	80054a0 <HAL_I2C_Mem_Write_DMA+0x148>
    return HAL_BUSY;
 800549e:	2402      	movs	r4, #2
}
 80054a0:	4620      	mov	r0, r4
 80054a2:	b002      	add	sp, #8
 80054a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 80054a8:	2402      	movs	r4, #2
 80054aa:	e7f9      	b.n	80054a0 <HAL_I2C_Mem_Write_DMA+0x148>
    __HAL_LOCK(hi2c);
 80054ac:	2402      	movs	r4, #2
 80054ae:	e7f7      	b.n	80054a0 <HAL_I2C_Mem_Write_DMA+0x148>
 80054b0:	ffff0000 	.word	0xffff0000
 80054b4:	08006a41 	.word	0x08006a41
 80054b8:	08006b8d 	.word	0x08006b8d
 80054bc:	08006b77 	.word	0x08006b77

080054c0 <HAL_I2C_Mem_Read_DMA>:
{
 80054c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ca:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80054ce:	b2e4      	uxtb	r4, r4
 80054d0:	2c20      	cmp	r4, #32
 80054d2:	f040 8097 	bne.w	8005604 <HAL_I2C_Mem_Read_DMA+0x144>
    if ((pData == NULL) || (Size == 0U))
 80054d6:	9c08      	ldr	r4, [sp, #32]
 80054d8:	2c00      	cmp	r4, #0
 80054da:	d05b      	beq.n	8005594 <HAL_I2C_Mem_Read_DMA+0xd4>
 80054dc:	2e00      	cmp	r6, #0
 80054de:	d059      	beq.n	8005594 <HAL_I2C_Mem_Read_DMA+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054e0:	6804      	ldr	r4, [r0, #0]
 80054e2:	69a4      	ldr	r4, [r4, #24]
 80054e4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80054e8:	f040 8091 	bne.w	800560e <HAL_I2C_Mem_Read_DMA+0x14e>
    __HAL_LOCK(hi2c);
 80054ec:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80054f0:	2c01      	cmp	r4, #1
 80054f2:	f000 808e 	beq.w	8005612 <HAL_I2C_Mem_Read_DMA+0x152>
 80054f6:	4698      	mov	r8, r3
 80054f8:	4614      	mov	r4, r2
 80054fa:	460f      	mov	r7, r1
 80054fc:	4605      	mov	r5, r0
 80054fe:	2301      	movs	r3, #1
 8005500:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005504:	f7fc fdc8 	bl	8002098 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005508:	2322      	movs	r3, #34	; 0x22
 800550a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800550e:	2340      	movs	r3, #64	; 0x40
 8005510:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005514:	2300      	movs	r3, #0
 8005516:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8005518:	9b08      	ldr	r3, [sp, #32]
 800551a:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 800551c:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800551e:	4b3e      	ldr	r3, [pc, #248]	; (8005618 <HAL_I2C_Mem_Read_DMA+0x158>)
 8005520:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005522:	4b3e      	ldr	r3, [pc, #248]	; (800561c <HAL_I2C_Mem_Read_DMA+0x15c>)
 8005524:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005526:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8005528:	b29b      	uxth	r3, r3
 800552a:	2bff      	cmp	r3, #255	; 0xff
 800552c:	d937      	bls.n	800559e <HAL_I2C_Mem_Read_DMA+0xde>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800552e:	23ff      	movs	r3, #255	; 0xff
 8005530:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005532:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005536:	9001      	str	r0, [sp, #4]
 8005538:	2319      	movs	r3, #25
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	4643      	mov	r3, r8
 800553e:	4622      	mov	r2, r4
 8005540:	4639      	mov	r1, r7
 8005542:	4628      	mov	r0, r5
 8005544:	f7fe fd1a 	bl	8003f7c <I2C_RequestMemoryRead>
 8005548:	2800      	cmp	r0, #0
 800554a:	d12d      	bne.n	80055a8 <HAL_I2C_Mem_Read_DMA+0xe8>
    if (hi2c->hdmarx != NULL)
 800554c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d02f      	beq.n	80055b2 <HAL_I2C_Mem_Read_DMA+0xf2>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005552:	4a33      	ldr	r2, [pc, #204]	; (8005620 <HAL_I2C_Mem_Read_DMA+0x160>)
 8005554:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005556:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005558:	4a32      	ldr	r2, [pc, #200]	; (8005624 <HAL_I2C_Mem_Read_DMA+0x164>)
 800555a:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800555c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800555e:	2300      	movs	r3, #0
 8005560:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005562:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005564:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005566:	6829      	ldr	r1, [r5, #0]
 8005568:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800556a:	9a08      	ldr	r2, [sp, #32]
 800556c:	3124      	adds	r1, #36	; 0x24
 800556e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8005570:	f7fd f905 	bl	800277e <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8005574:	4604      	mov	r4, r0
 8005576:	b350      	cbz	r0, 80055ce <HAL_I2C_Mem_Read_DMA+0x10e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005578:	2320      	movs	r3, #32
 800557a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800557e:	2200      	movs	r2, #0
 8005580:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005584:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005586:	f043 0310 	orr.w	r3, r3, #16
 800558a:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800558c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005590:	2401      	movs	r4, #1
 8005592:	e038      	b.n	8005606 <HAL_I2C_Mem_Read_DMA+0x146>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005598:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800559a:	2401      	movs	r4, #1
 800559c:	e033      	b.n	8005606 <HAL_I2C_Mem_Read_DMA+0x146>
      hi2c->XferSize = hi2c->XferCount;
 800559e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80055a0:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055a2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80055a6:	e7c6      	b.n	8005536 <HAL_I2C_Mem_Read_DMA+0x76>
      __HAL_UNLOCK(hi2c);
 80055a8:	2300      	movs	r3, #0
 80055aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80055ae:	2401      	movs	r4, #1
 80055b0:	e029      	b.n	8005606 <HAL_I2C_Mem_Read_DMA+0x146>
      hi2c->State     = HAL_I2C_STATE_READY;
 80055b2:	2320      	movs	r3, #32
 80055b4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055b8:	2200      	movs	r2, #0
 80055ba:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80055be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80055c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c4:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80055c6:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 80055ca:	2401      	movs	r4, #1
 80055cc:	e01b      	b.n	8005606 <HAL_I2C_Mem_Read_DMA+0x146>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80055ce:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <HAL_I2C_Mem_Read_DMA+0x168>)
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	4633      	mov	r3, r6
 80055d8:	4639      	mov	r1, r7
 80055da:	4628      	mov	r0, r5
 80055dc:	f7fe fb65 	bl	8003caa <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80055e0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80055e2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	856b      	strh	r3, [r5, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 80055ea:	2300      	movs	r3, #0
 80055ec:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80055f0:	2111      	movs	r1, #17
 80055f2:	4628      	mov	r0, r5
 80055f4:	f7fe fb74 	bl	8003ce0 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80055f8:	682a      	ldr	r2, [r5, #0]
 80055fa:	6813      	ldr	r3, [r2, #0]
 80055fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005600:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8005602:	e000      	b.n	8005606 <HAL_I2C_Mem_Read_DMA+0x146>
    return HAL_BUSY;
 8005604:	2402      	movs	r4, #2
}
 8005606:	4620      	mov	r0, r4
 8005608:	b002      	add	sp, #8
 800560a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 800560e:	2402      	movs	r4, #2
 8005610:	e7f9      	b.n	8005606 <HAL_I2C_Mem_Read_DMA+0x146>
    __HAL_LOCK(hi2c);
 8005612:	2402      	movs	r4, #2
 8005614:	e7f7      	b.n	8005606 <HAL_I2C_Mem_Read_DMA+0x146>
 8005616:	bf00      	nop
 8005618:	ffff0000 	.word	0xffff0000
 800561c:	08006a41 	.word	0x08006a41
 8005620:	08006be3 	.word	0x08006be3
 8005624:	08006b77 	.word	0x08006b77
 8005628:	80002400 	.word	0x80002400

0800562c <HAL_I2C_IsDeviceReady>:
{
 800562c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005630:	b085      	sub	sp, #20
  __IO uint32_t I2C_Trials = 0UL;
 8005632:	2400      	movs	r4, #0
 8005634:	9403      	str	r4, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005636:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 800563a:	b2f6      	uxtb	r6, r6
 800563c:	2e20      	cmp	r6, #32
 800563e:	f040 809e 	bne.w	800577e <HAL_I2C_IsDeviceReady+0x152>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005642:	6804      	ldr	r4, [r0, #0]
 8005644:	69a4      	ldr	r4, [r4, #24]
 8005646:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800564a:	f040 809d 	bne.w	8005788 <HAL_I2C_IsDeviceReady+0x15c>
    __HAL_LOCK(hi2c);
 800564e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005652:	2c01      	cmp	r4, #1
 8005654:	f000 809a 	beq.w	800578c <HAL_I2C_IsDeviceReady+0x160>
 8005658:	461d      	mov	r5, r3
 800565a:	4690      	mov	r8, r2
 800565c:	4604      	mov	r4, r0
 800565e:	2301      	movs	r3, #1
 8005660:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005664:	2324      	movs	r3, #36	; 0x24
 8005666:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800566a:	2300      	movs	r3, #0
 800566c:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800566e:	f3c1 0709 	ubfx	r7, r1, #0, #10
 8005672:	f447 5920 	orr.w	r9, r7, #10240	; 0x2800
 8005676:	e03b      	b.n	80056f0 <HAL_I2C_IsDeviceReady+0xc4>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800567c:	6999      	ldr	r1, [r3, #24]
 800567e:	f001 0110 	and.w	r1, r1, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005682:	f012 0f20 	tst.w	r2, #32
 8005686:	d116      	bne.n	80056b6 <HAL_I2C_IsDeviceReady+0x8a>
 8005688:	b9a9      	cbnz	r1, 80056b6 <HAL_I2C_IsDeviceReady+0x8a>
        if (Timeout != HAL_MAX_DELAY)
 800568a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800568e:	d0f3      	beq.n	8005678 <HAL_I2C_IsDeviceReady+0x4c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005690:	f7fc fd02 	bl	8002098 <HAL_GetTick>
 8005694:	1b80      	subs	r0, r0, r6
 8005696:	42a8      	cmp	r0, r5
 8005698:	d801      	bhi.n	800569e <HAL_I2C_IsDeviceReady+0x72>
 800569a:	2d00      	cmp	r5, #0
 800569c:	d1ec      	bne.n	8005678 <HAL_I2C_IsDeviceReady+0x4c>
            hi2c->State = HAL_I2C_STATE_READY;
 800569e:	2320      	movs	r3, #32
 80056a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056a6:	f043 0320 	orr.w	r3, r3, #32
 80056aa:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 80056ac:	2300      	movs	r3, #0
 80056ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e064      	b.n	8005780 <HAL_I2C_IsDeviceReady+0x154>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f013 0f10 	tst.w	r3, #16
 80056be:	d02f      	beq.n	8005720 <HAL_I2C_IsDeviceReady+0xf4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056c0:	9600      	str	r6, [sp, #0]
 80056c2:	462b      	mov	r3, r5
 80056c4:	2200      	movs	r2, #0
 80056c6:	2120      	movs	r1, #32
 80056c8:	4620      	mov	r0, r4
 80056ca:	f7fe fbf5 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d160      	bne.n	8005794 <HAL_I2C_IsDeviceReady+0x168>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	2210      	movs	r2, #16
 80056d6:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	2220      	movs	r2, #32
 80056dc:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	4543      	cmp	r3, r8
 80056e2:	d02f      	beq.n	8005744 <HAL_I2C_IsDeviceReady+0x118>
      I2C_Trials++;
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	9303      	str	r3, [sp, #12]
    while (I2C_Trials < Trials);
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	4543      	cmp	r3, r8
 80056ee:	d23a      	bcs.n	8005766 <HAL_I2C_IsDeviceReady+0x13a>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80056f0:	68e3      	ldr	r3, [r4, #12]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	bf06      	itte	eq
 80056f6:	f047 7300 	orreq.w	r3, r7, #33554432	; 0x2000000
 80056fa:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 80056fe:	464b      	movne	r3, r9
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8005704:	f7fc fcc8 	bl	8002098 <HAL_GetTick>
 8005708:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005714:	f012 0f20 	tst.w	r2, #32
 8005718:	d1cd      	bne.n	80056b6 <HAL_I2C_IsDeviceReady+0x8a>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0b5      	beq.n	800568a <HAL_I2C_IsDeviceReady+0x5e>
 800571e:	e7ca      	b.n	80056b6 <HAL_I2C_IsDeviceReady+0x8a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005720:	9600      	str	r6, [sp, #0]
 8005722:	462b      	mov	r3, r5
 8005724:	2200      	movs	r2, #0
 8005726:	2120      	movs	r1, #32
 8005728:	4620      	mov	r0, r4
 800572a:	f7fe fbc5 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	bb70      	cbnz	r0, 8005790 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005732:	6821      	ldr	r1, [r4, #0]
 8005734:	2220      	movs	r2, #32
 8005736:	61ca      	str	r2, [r1, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8005738:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800573c:	2200      	movs	r2, #0
 800573e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_OK;
 8005742:	e01d      	b.n	8005780 <HAL_I2C_IsDeviceReady+0x154>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	6853      	ldr	r3, [r2, #4]
 8005748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800574c:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800574e:	9600      	str	r6, [sp, #0]
 8005750:	462b      	mov	r3, r5
 8005752:	2200      	movs	r2, #0
 8005754:	2120      	movs	r1, #32
 8005756:	4620      	mov	r0, r4
 8005758:	f7fe fbae 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 800575c:	b9e0      	cbnz	r0, 8005798 <HAL_I2C_IsDeviceReady+0x16c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	2220      	movs	r2, #32
 8005762:	61da      	str	r2, [r3, #28]
 8005764:	e7be      	b.n	80056e4 <HAL_I2C_IsDeviceReady+0xb8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005766:	2320      	movs	r3, #32
 8005768:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800576c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800576e:	f043 0320 	orr.w	r3, r3, #32
 8005772:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8005774:	2300      	movs	r3, #0
 8005776:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <HAL_I2C_IsDeviceReady+0x154>
    return HAL_BUSY;
 800577e:	2302      	movs	r3, #2
}
 8005780:	4618      	mov	r0, r3
 8005782:	b005      	add	sp, #20
 8005784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
 800578a:	e7f9      	b.n	8005780 <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 800578c:	2302      	movs	r3, #2
 800578e:	e7f7      	b.n	8005780 <HAL_I2C_IsDeviceReady+0x154>
          return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e7f5      	b.n	8005780 <HAL_I2C_IsDeviceReady+0x154>
          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e7f3      	b.n	8005780 <HAL_I2C_IsDeviceReady+0x154>
          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e7f1      	b.n	8005780 <HAL_I2C_IsDeviceReady+0x154>

0800579c <HAL_I2C_Master_Seq_Transmit_IT>:
{
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80057a4:	b2e4      	uxtb	r4, r4
 80057a6:	2c20      	cmp	r4, #32
 80057a8:	d149      	bne.n	800583e <HAL_I2C_Master_Seq_Transmit_IT+0xa2>
    __HAL_LOCK(hi2c);
 80057aa:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80057ae:	2c01      	cmp	r4, #1
 80057b0:	d048      	beq.n	8005844 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
 80057b2:	2401      	movs	r4, #1
 80057b4:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057b8:	2421      	movs	r4, #33	; 0x21
 80057ba:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057be:	2410      	movs	r4, #16
 80057c0:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c4:	2400      	movs	r4, #0
 80057c6:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80057c8:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057ca:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80057cc:	9b06      	ldr	r3, [sp, #24]
 80057ce:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80057d0:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <HAL_I2C_Master_Seq_Transmit_IT+0xac>)
 80057d2:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2bff      	cmp	r3, #255	; 0xff
 80057da:	d910      	bls.n	80057fe <HAL_I2C_Master_Seq_Transmit_IT+0x62>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057dc:	23ff      	movs	r3, #255	; 0xff
 80057de:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80057e0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80057e4:	460d      	mov	r5, r1
 80057e6:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 80057e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80057ea:	2b11      	cmp	r3, #17
 80057ec:	d10b      	bne.n	8005806 <HAL_I2C_Master_Seq_Transmit_IT+0x6a>
 80057ee:	9b06      	ldr	r3, [sp, #24]
 80057f0:	2baa      	cmp	r3, #170	; 0xaa
 80057f2:	d008      	beq.n	8005806 <HAL_I2C_Master_Seq_Transmit_IT+0x6a>
 80057f4:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80057f8:	d005      	beq.n	8005806 <HAL_I2C_Master_Seq_Transmit_IT+0x6a>
      xferrequest = I2C_NO_STARTSTOP;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e00c      	b.n	8005818 <HAL_I2C_Master_Seq_Transmit_IT+0x7c>
      hi2c->XferSize = hi2c->XferCount;
 80057fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005800:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8005802:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8005804:	e7ee      	b.n	80057e4 <HAL_I2C_Master_Seq_Transmit_IT+0x48>
      I2C_ConvertOtherXferOptions(hi2c);
 8005806:	4620      	mov	r0, r4
 8005808:	f7fe fad5 	bl	8003db6 <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 800580c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	2bfe      	cmp	r3, #254	; 0xfe
 8005812:	d812      	bhi.n	800583a <HAL_I2C_Master_Seq_Transmit_IT+0x9e>
        xfermode = hi2c->XferOptions;
 8005814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <HAL_I2C_Master_Seq_Transmit_IT+0xb0>)
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8005818:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4633      	mov	r3, r6
 8005820:	4629      	mov	r1, r5
 8005822:	4620      	mov	r0, r4
 8005824:	f7fe fa41 	bl	8003caa <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8005828:	2500      	movs	r5, #0
 800582a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800582e:	2101      	movs	r1, #1
 8005830:	4620      	mov	r0, r4
 8005832:	f7fe fa55 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 8005836:	4628      	mov	r0, r5
 8005838:	e002      	b.n	8005840 <HAL_I2C_Master_Seq_Transmit_IT+0xa4>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800583a:	4b04      	ldr	r3, [pc, #16]	; (800584c <HAL_I2C_Master_Seq_Transmit_IT+0xb0>)
 800583c:	e7ec      	b.n	8005818 <HAL_I2C_Master_Seq_Transmit_IT+0x7c>
    return HAL_BUSY;
 800583e:	2002      	movs	r0, #2
}
 8005840:	b002      	add	sp, #8
 8005842:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 8005844:	2002      	movs	r0, #2
 8005846:	e7fb      	b.n	8005840 <HAL_I2C_Master_Seq_Transmit_IT+0xa4>
 8005848:	080067c1 	.word	0x080067c1
 800584c:	80002000 	.word	0x80002000

08005850 <HAL_I2C_Master_Seq_Transmit_DMA>:
{
 8005850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005856:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800585a:	b2e4      	uxtb	r4, r4
 800585c:	2c20      	cmp	r4, #32
 800585e:	f040 809c 	bne.w	800599a <HAL_I2C_Master_Seq_Transmit_DMA+0x14a>
    __HAL_LOCK(hi2c);
 8005862:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005866:	2c01      	cmp	r4, #1
 8005868:	f000 809c 	beq.w	80059a4 <HAL_I2C_Master_Seq_Transmit_DMA+0x154>
 800586c:	2401      	movs	r4, #1
 800586e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005872:	2421      	movs	r4, #33	; 0x21
 8005874:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005878:	2410      	movs	r4, #16
 800587a:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800587e:	2400      	movs	r4, #0
 8005880:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8005882:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005884:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8005886:	9b08      	ldr	r3, [sp, #32]
 8005888:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800588a:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x158>)
 800588c:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800588e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2bff      	cmp	r3, #255	; 0xff
 8005894:	d911      	bls.n	80058ba <HAL_I2C_Master_Seq_Transmit_DMA+0x6a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005896:	23ff      	movs	r3, #255	; 0xff
 8005898:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800589a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 800589e:	4615      	mov	r5, r2
 80058a0:	4688      	mov	r8, r1
 80058a2:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 80058a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80058a6:	2b11      	cmp	r3, #17
 80058a8:	d10b      	bne.n	80058c2 <HAL_I2C_Master_Seq_Transmit_DMA+0x72>
 80058aa:	9b08      	ldr	r3, [sp, #32]
 80058ac:	2baa      	cmp	r3, #170	; 0xaa
 80058ae:	d008      	beq.n	80058c2 <HAL_I2C_Master_Seq_Transmit_DMA+0x72>
 80058b0:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80058b4:	d005      	beq.n	80058c2 <HAL_I2C_Master_Seq_Transmit_DMA+0x72>
      xferrequest = I2C_NO_STARTSTOP;
 80058b6:	2600      	movs	r6, #0
 80058b8:	e00c      	b.n	80058d4 <HAL_I2C_Master_Seq_Transmit_DMA+0x84>
      hi2c->XferSize = hi2c->XferCount;
 80058ba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80058bc:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 80058be:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80058c0:	e7ed      	b.n	800589e <HAL_I2C_Master_Seq_Transmit_DMA+0x4e>
      I2C_ConvertOtherXferOptions(hi2c);
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7fe fa77 	bl	8003db6 <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 80058c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2bfe      	cmp	r3, #254	; 0xfe
 80058ce:	d827      	bhi.n	8005920 <HAL_I2C_Master_Seq_Transmit_DMA+0xd0>
        xfermode = hi2c->XferOptions;
 80058d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 80058d2:	4e36      	ldr	r6, [pc, #216]	; (80059ac <HAL_I2C_Master_Seq_Transmit_DMA+0x15c>)
    if (hi2c->XferSize > 0U)
 80058d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d04c      	beq.n	8005974 <HAL_I2C_Master_Seq_Transmit_DMA+0x124>
      if (hi2c->hdmatx != NULL)
 80058da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058dc:	b313      	cbz	r3, 8005924 <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80058de:	4a34      	ldr	r2, [pc, #208]	; (80059b0 <HAL_I2C_Master_Seq_Transmit_DMA+0x160>)
 80058e0:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80058e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058e4:	4a33      	ldr	r2, [pc, #204]	; (80059b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x164>)
 80058e6:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80058e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058ea:	2300      	movs	r3, #0
 80058ec:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80058ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058f0:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80058f2:	6822      	ldr	r2, [r4, #0]
 80058f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058f6:	3228      	adds	r2, #40	; 0x28
 80058f8:	4629      	mov	r1, r5
 80058fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80058fc:	f7fc ff3f 	bl	800277e <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8005900:	4605      	mov	r5, r0
 8005902:	b1e8      	cbz	r0, 8005940 <HAL_I2C_Master_Seq_Transmit_DMA+0xf0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005904:	2320      	movs	r3, #32
 8005906:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800590a:	2200      	movs	r2, #0
 800590c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005910:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005912:	f043 0310 	orr.w	r3, r3, #16
 8005916:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005918:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 800591c:	2501      	movs	r5, #1
 800591e:	e03d      	b.n	800599c <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8005920:	4e22      	ldr	r6, [pc, #136]	; (80059ac <HAL_I2C_Master_Seq_Transmit_DMA+0x15c>)
 8005922:	e7d7      	b.n	80058d4 <HAL_I2C_Master_Seq_Transmit_DMA+0x84>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005924:	2320      	movs	r3, #32
 8005926:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800592a:	2200      	movs	r2, #0
 800592c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005930:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005936:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005938:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 800593c:	2501      	movs	r5, #1
 800593e:	e02d      	b.n	800599c <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8005940:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005944:	9600      	str	r6, [sp, #0]
 8005946:	463b      	mov	r3, r7
 8005948:	4641      	mov	r1, r8
 800594a:	4620      	mov	r0, r4
 800594c:	f7fe f9ad 	bl	8003caa <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8005950:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005952:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	b29b      	uxth	r3, r3
 8005958:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 800595a:	2300      	movs	r3, #0
 800595c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005960:	2111      	movs	r1, #17
 8005962:	4620      	mov	r0, r4
 8005964:	f7fe f9bc 	bl	8003ce0 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005968:	6822      	ldr	r2, [r4, #0]
 800596a:	6813      	ldr	r3, [r2, #0]
 800596c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e013      	b.n	800599c <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005974:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_I2C_Master_Seq_Transmit_DMA+0x168>)
 8005976:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <HAL_I2C_Master_Seq_Transmit_DMA+0x15c>)
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005980:	2200      	movs	r2, #0
 8005982:	4641      	mov	r1, r8
 8005984:	4620      	mov	r0, r4
 8005986:	f7fe f990 	bl	8003caa <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 800598a:	2500      	movs	r5, #0
 800598c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005990:	2101      	movs	r1, #1
 8005992:	4620      	mov	r0, r4
 8005994:	f7fe f9a4 	bl	8003ce0 <I2C_Enable_IRQ>
 8005998:	e000      	b.n	800599c <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
    return HAL_BUSY;
 800599a:	2502      	movs	r5, #2
}
 800599c:	4628      	mov	r0, r5
 800599e:	b002      	add	sp, #8
 80059a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 80059a4:	2502      	movs	r5, #2
 80059a6:	e7f9      	b.n	800599c <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
 80059a8:	08006a41 	.word	0x08006a41
 80059ac:	80002000 	.word	0x80002000
 80059b0:	08006b8d 	.word	0x08006b8d
 80059b4:	08006b77 	.word	0x08006b77
 80059b8:	080067c1 	.word	0x080067c1

080059bc <HAL_I2C_Master_Seq_Receive_IT>:
{
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80059c4:	b2e4      	uxtb	r4, r4
 80059c6:	2c20      	cmp	r4, #32
 80059c8:	d149      	bne.n	8005a5e <HAL_I2C_Master_Seq_Receive_IT+0xa2>
    __HAL_LOCK(hi2c);
 80059ca:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80059ce:	2c01      	cmp	r4, #1
 80059d0:	d048      	beq.n	8005a64 <HAL_I2C_Master_Seq_Receive_IT+0xa8>
 80059d2:	2401      	movs	r4, #1
 80059d4:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d8:	2422      	movs	r4, #34	; 0x22
 80059da:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059de:	2410      	movs	r4, #16
 80059e0:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e4:	2400      	movs	r4, #0
 80059e6:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80059e8:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059ea:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80059ec:	9b06      	ldr	r3, [sp, #24]
 80059ee:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_I2C_Master_Seq_Receive_IT+0xac>)
 80059f2:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2bff      	cmp	r3, #255	; 0xff
 80059fa:	d910      	bls.n	8005a1e <HAL_I2C_Master_Seq_Receive_IT+0x62>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059fc:	23ff      	movs	r3, #255	; 0xff
 80059fe:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005a00:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8005a04:	460d      	mov	r5, r1
 8005a06:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8005a08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005a0a:	2b12      	cmp	r3, #18
 8005a0c:	d10b      	bne.n	8005a26 <HAL_I2C_Master_Seq_Receive_IT+0x6a>
 8005a0e:	9b06      	ldr	r3, [sp, #24]
 8005a10:	2baa      	cmp	r3, #170	; 0xaa
 8005a12:	d008      	beq.n	8005a26 <HAL_I2C_Master_Seq_Receive_IT+0x6a>
 8005a14:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8005a18:	d005      	beq.n	8005a26 <HAL_I2C_Master_Seq_Receive_IT+0x6a>
      xferrequest = I2C_NO_STARTSTOP;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e00c      	b.n	8005a38 <HAL_I2C_Master_Seq_Receive_IT+0x7c>
      hi2c->XferSize = hi2c->XferCount;
 8005a1e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005a20:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8005a22:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8005a24:	e7ee      	b.n	8005a04 <HAL_I2C_Master_Seq_Receive_IT+0x48>
      I2C_ConvertOtherXferOptions(hi2c);
 8005a26:	4620      	mov	r0, r4
 8005a28:	f7fe f9c5 	bl	8003db6 <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 8005a2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2bfe      	cmp	r3, #254	; 0xfe
 8005a32:	d812      	bhi.n	8005a5a <HAL_I2C_Master_Seq_Receive_IT+0x9e>
        xfermode = hi2c->XferOptions;
 8005a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <HAL_I2C_Master_Seq_Receive_IT+0xb0>)
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8005a38:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	4633      	mov	r3, r6
 8005a40:	4629      	mov	r1, r5
 8005a42:	4620      	mov	r0, r4
 8005a44:	f7fe f931 	bl	8003caa <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8005a48:	2500      	movs	r5, #0
 8005a4a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a4e:	2102      	movs	r1, #2
 8005a50:	4620      	mov	r0, r4
 8005a52:	f7fe f945 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 8005a56:	4628      	mov	r0, r5
 8005a58:	e002      	b.n	8005a60 <HAL_I2C_Master_Seq_Receive_IT+0xa4>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8005a5a:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <HAL_I2C_Master_Seq_Receive_IT+0xb0>)
 8005a5c:	e7ec      	b.n	8005a38 <HAL_I2C_Master_Seq_Receive_IT+0x7c>
    return HAL_BUSY;
 8005a5e:	2002      	movs	r0, #2
}
 8005a60:	b002      	add	sp, #8
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 8005a64:	2002      	movs	r0, #2
 8005a66:	e7fb      	b.n	8005a60 <HAL_I2C_Master_Seq_Receive_IT+0xa4>
 8005a68:	080067c1 	.word	0x080067c1
 8005a6c:	80002400 	.word	0x80002400

08005a70 <HAL_I2C_Master_Seq_Receive_DMA>:
{
 8005a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a74:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a76:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005a7a:	b2e4      	uxtb	r4, r4
 8005a7c:	2c20      	cmp	r4, #32
 8005a7e:	f040 809c 	bne.w	8005bba <HAL_I2C_Master_Seq_Receive_DMA+0x14a>
    __HAL_LOCK(hi2c);
 8005a82:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005a86:	2c01      	cmp	r4, #1
 8005a88:	f000 809c 	beq.w	8005bc4 <HAL_I2C_Master_Seq_Receive_DMA+0x154>
 8005a8c:	2401      	movs	r4, #1
 8005a8e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a92:	2422      	movs	r4, #34	; 0x22
 8005a94:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a98:	2410      	movs	r4, #16
 8005a9a:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a9e:	2400      	movs	r4, #0
 8005aa0:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8005aa2:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005aa4:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8005aa6:	9b08      	ldr	r3, [sp, #32]
 8005aa8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005aaa:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <HAL_I2C_Master_Seq_Receive_DMA+0x158>)
 8005aac:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2bff      	cmp	r3, #255	; 0xff
 8005ab4:	d911      	bls.n	8005ada <HAL_I2C_Master_Seq_Receive_DMA+0x6a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ab6:	23ff      	movs	r3, #255	; 0xff
 8005ab8:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005aba:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8005abe:	4615      	mov	r5, r2
 8005ac0:	4688      	mov	r8, r1
 8005ac2:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8005ac4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005ac6:	2b12      	cmp	r3, #18
 8005ac8:	d10b      	bne.n	8005ae2 <HAL_I2C_Master_Seq_Receive_DMA+0x72>
 8005aca:	9b08      	ldr	r3, [sp, #32]
 8005acc:	2baa      	cmp	r3, #170	; 0xaa
 8005ace:	d008      	beq.n	8005ae2 <HAL_I2C_Master_Seq_Receive_DMA+0x72>
 8005ad0:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8005ad4:	d005      	beq.n	8005ae2 <HAL_I2C_Master_Seq_Receive_DMA+0x72>
      xferrequest = I2C_NO_STARTSTOP;
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	e00c      	b.n	8005af4 <HAL_I2C_Master_Seq_Receive_DMA+0x84>
      hi2c->XferSize = hi2c->XferCount;
 8005ada:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005adc:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8005ade:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8005ae0:	e7ed      	b.n	8005abe <HAL_I2C_Master_Seq_Receive_DMA+0x4e>
      I2C_ConvertOtherXferOptions(hi2c);
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f7fe f967 	bl	8003db6 <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 8005ae8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2bfe      	cmp	r3, #254	; 0xfe
 8005aee:	d827      	bhi.n	8005b40 <HAL_I2C_Master_Seq_Receive_DMA+0xd0>
        xfermode = hi2c->XferOptions;
 8005af0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8005af2:	4e36      	ldr	r6, [pc, #216]	; (8005bcc <HAL_I2C_Master_Seq_Receive_DMA+0x15c>)
    if (hi2c->XferSize > 0U)
 8005af4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d04c      	beq.n	8005b94 <HAL_I2C_Master_Seq_Receive_DMA+0x124>
      if (hi2c->hdmarx != NULL)
 8005afa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005afc:	b313      	cbz	r3, 8005b44 <HAL_I2C_Master_Seq_Receive_DMA+0xd4>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005afe:	4a34      	ldr	r2, [pc, #208]	; (8005bd0 <HAL_I2C_Master_Seq_Receive_DMA+0x160>)
 8005b00:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b04:	4a33      	ldr	r2, [pc, #204]	; (8005bd4 <HAL_I2C_Master_Seq_Receive_DMA+0x164>)
 8005b06:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005b0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b10:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005b12:	6821      	ldr	r1, [r4, #0]
 8005b14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005b16:	462a      	mov	r2, r5
 8005b18:	3124      	adds	r1, #36	; 0x24
 8005b1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005b1c:	f7fc fe2f 	bl	800277e <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8005b20:	4605      	mov	r5, r0
 8005b22:	b1e8      	cbz	r0, 8005b60 <HAL_I2C_Master_Seq_Receive_DMA+0xf0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005b24:	2320      	movs	r3, #32
 8005b26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b32:	f043 0310 	orr.w	r3, r3, #16
 8005b36:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005b38:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005b3c:	2501      	movs	r5, #1
 8005b3e:	e03d      	b.n	8005bbc <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8005b40:	4e22      	ldr	r6, [pc, #136]	; (8005bcc <HAL_I2C_Master_Seq_Receive_DMA+0x15c>)
 8005b42:	e7d7      	b.n	8005af4 <HAL_I2C_Master_Seq_Receive_DMA+0x84>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005b44:	2320      	movs	r3, #32
 8005b46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005b50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b56:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005b58:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005b5c:	2501      	movs	r5, #1
 8005b5e:	e02d      	b.n	8005bbc <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8005b60:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005b64:	9600      	str	r6, [sp, #0]
 8005b66:	463b      	mov	r3, r7
 8005b68:	4641      	mov	r1, r8
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7fe f89d 	bl	8003caa <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8005b70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005b80:	2111      	movs	r1, #17
 8005b82:	4620      	mov	r0, r4
 8005b84:	f7fe f8ac 	bl	8003ce0 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e013      	b.n	8005bbc <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005b94:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <HAL_I2C_Master_Seq_Receive_DMA+0x168>)
 8005b96:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_I2C_Master_Seq_Receive_DMA+0x15c>)
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7fe f880 	bl	8003caa <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8005baa:	2500      	movs	r5, #0
 8005bac:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f7fe f894 	bl	8003ce0 <I2C_Enable_IRQ>
 8005bb8:	e000      	b.n	8005bbc <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
    return HAL_BUSY;
 8005bba:	2502      	movs	r5, #2
}
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	b002      	add	sp, #8
 8005bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8005bc4:	2502      	movs	r5, #2
 8005bc6:	e7f9      	b.n	8005bbc <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
 8005bc8:	08006a41 	.word	0x08006a41
 8005bcc:	80002400 	.word	0x80002400
 8005bd0:	08006be3 	.word	0x08006be3
 8005bd4:	08006b77 	.word	0x08006b77
 8005bd8:	080067c1 	.word	0x080067c1

08005bdc <HAL_I2C_Slave_Seq_Transmit_IT>:
{
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bde:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005be2:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8005be6:	2c28      	cmp	r4, #40	; 0x28
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_Slave_Seq_Transmit_IT+0x12>
    return HAL_ERROR;
 8005bea:	2001      	movs	r0, #1
}
 8005bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8005bee:	b101      	cbz	r1, 8005bf2 <HAL_I2C_Slave_Seq_Transmit_IT+0x16>
 8005bf0:	b922      	cbnz	r2, 8005bfc <HAL_I2C_Slave_Seq_Transmit_IT+0x20>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	e7f7      	b.n	8005bec <HAL_I2C_Slave_Seq_Transmit_IT+0x10>
 8005bfc:	461f      	mov	r7, r3
 8005bfe:	4616      	mov	r6, r2
 8005c00:	460d      	mov	r5, r1
 8005c02:	4604      	mov	r4, r0
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c04:	2105      	movs	r1, #5
 8005c06:	f7fe f8a5 	bl	8003d54 <I2C_Disable_IRQ>
    __HAL_LOCK(hi2c);
 8005c0a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d046      	beq.n	8005ca0 <HAL_I2C_Slave_Seq_Transmit_IT+0xc4>
 8005c12:	2301      	movs	r3, #1
 8005c14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c20:	d023      	beq.n	8005c6a <HAL_I2C_Slave_Seq_Transmit_IT+0x8e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8005c22:	2329      	movs	r3, #41	; 0x29
 8005c24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005c28:	2320      	movs	r3, #32
 8005c2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	6853      	ldr	r3, [r2, #4]
 8005c36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c3a:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8005c3c:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c3e:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c42:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005c44:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005c46:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <HAL_I2C_Slave_Seq_Transmit_IT+0xc8>)
 8005c48:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c52:	bf1c      	itt	ne
 8005c54:	2208      	movne	r2, #8
 8005c56:	61da      	strne	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005c58:	2500      	movs	r5, #0
 8005c5a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8005c5e:	2105      	movs	r1, #5
 8005c60:	4620      	mov	r0, r4
 8005c62:	f7fe f83d 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 8005c66:	4628      	mov	r0, r5
 8005c68:	e7c0      	b.n	8005bec <HAL_I2C_Slave_Seq_Transmit_IT+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7fe f871 	bl	8003d54 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005c7a:	d0d2      	beq.n	8005c22 <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c82:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmarx != NULL)
 8005c84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0cb      	beq.n	8005c22 <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c8a:	4a07      	ldr	r2, [pc, #28]	; (8005ca8 <HAL_I2C_Slave_Seq_Transmit_IT+0xcc>)
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c8e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005c90:	f7fc fde7 	bl	8002862 <HAL_DMA_Abort_IT>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d0c4      	beq.n	8005c22 <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c98:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005c9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005c9c:	4798      	blx	r3
 8005c9e:	e7c0      	b.n	8005c22 <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
    __HAL_LOCK(hi2c);
 8005ca0:	2002      	movs	r0, #2
 8005ca2:	e7a3      	b.n	8005bec <HAL_I2C_Slave_Seq_Transmit_IT+0x10>
 8005ca4:	08006599 	.word	0x08006599
 8005ca8:	08006cbf 	.word	0x08006cbf

08005cac <HAL_I2C_Slave_Seq_Transmit_DMA>:
{
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cae:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8005cb2:	f005 0528 	and.w	r5, r5, #40	; 0x28
 8005cb6:	2d28      	cmp	r5, #40	; 0x28
 8005cb8:	d002      	beq.n	8005cc0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x14>
    return HAL_ERROR;
 8005cba:	2501      	movs	r5, #1
}
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d05e      	beq.n	8005d82 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd6>
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	d05c      	beq.n	8005d82 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd6>
    __HAL_LOCK(hi2c);
 8005cc8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005ccc:	2c01      	cmp	r4, #1
 8005cce:	f000 80af 	beq.w	8005e30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x184>
 8005cd2:	461f      	mov	r7, r3
 8005cd4:	4616      	mov	r6, r2
 8005cd6:	460d      	mov	r5, r1
 8005cd8:	4604      	mov	r4, r0
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005ce0:	2105      	movs	r1, #5
 8005ce2:	f7fe f837 	bl	8003d54 <I2C_Disable_IRQ>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ce6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b2a      	cmp	r3, #42	; 0x2a
 8005cee:	d04d      	beq.n	8005d8c <HAL_I2C_Slave_Seq_Transmit_DMA+0xe0>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005cf0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b29      	cmp	r3, #41	; 0x29
 8005cf8:	d064      	beq.n	8005dc4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8005cfa:	2329      	movs	r3, #41	; 0x29
 8005cfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005d00:	2320      	movs	r3, #32
 8005d02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005d0a:	6822      	ldr	r2, [r4, #0]
 8005d0c:	6853      	ldr	r3, [r2, #4]
 8005d0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d12:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8005d14:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d16:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d1a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005d1c:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005d1e:	4b45      	ldr	r3, [pc, #276]	; (8005e34 <HAL_I2C_Slave_Seq_Transmit_DMA+0x188>)
 8005d20:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->hdmatx != NULL)
 8005d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d064      	beq.n	8005df2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x146>
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005d28:	4a43      	ldr	r2, [pc, #268]	; (8005e38 <HAL_I2C_Slave_Seq_Transmit_DMA+0x18c>)
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d2e:	4a43      	ldr	r2, [pc, #268]	; (8005e3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x190>)
 8005d30:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005d32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d34:	2300      	movs	r3, #0
 8005d36:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005d38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d3a:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005d3c:	6822      	ldr	r2, [r4, #0]
 8005d3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d40:	3228      	adds	r2, #40	; 0x28
 8005d42:	4629      	mov	r1, r5
 8005d44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005d46:	f7fc fd1a 	bl	800277e <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d15e      	bne.n	8005e0e <HAL_I2C_Slave_Seq_Transmit_DMA+0x162>
      hi2c->XferCount -= hi2c->XferSize;
 8005d50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d52:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	8523      	strh	r3, [r4, #40]	; 0x28
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005d66:	d160      	bne.n	8005e2a <HAL_I2C_Slave_Seq_Transmit_DMA+0x17e>
    __HAL_UNLOCK(hi2c);
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d6e:	2104      	movs	r1, #4
 8005d70:	4620      	mov	r0, r4
 8005d72:	f7fd ffb5 	bl	8003ce0 <I2C_Enable_IRQ>
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d76:	6822      	ldr	r2, [r4, #0]
 8005d78:	6813      	ldr	r3, [r2, #0]
 8005d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d7e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8005d80:	e79c      	b.n	8005cbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d86:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005d88:	2501      	movs	r5, #1
 8005d8a:	e797      	b.n	8005cbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d8c:	2102      	movs	r1, #2
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f7fd ffe0 	bl	8003d54 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005d9c:	d0ad      	beq.n	8005cfa <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
        if (hi2c->hdmarx != NULL)
 8005d9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	d0aa      	beq.n	8005cfa <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005daa:	601a      	str	r2, [r3, #0]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005dae:	4a24      	ldr	r2, [pc, #144]	; (8005e40 <HAL_I2C_Slave_Seq_Transmit_DMA+0x194>)
 8005db0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005db2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005db4:	f7fc fd55 	bl	8002862 <HAL_DMA_Abort_IT>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d09e      	beq.n	8005cfa <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005dbc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005dbe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005dc0:	4798      	blx	r3
 8005dc2:	e79a      	b.n	8005cfa <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005dcc:	d095      	beq.n	8005cfa <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dd4:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 8005dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d08e      	beq.n	8005cfa <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <HAL_I2C_Slave_Seq_Transmit_DMA+0x194>)
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005de0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005de2:	f7fc fd3e 	bl	8002862 <HAL_DMA_Abort_IT>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d087      	beq.n	8005cfa <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005dea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005dec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005dee:	4798      	blx	r3
 8005df0:	e783      	b.n	8005cfa <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005df2:	2328      	movs	r3, #40	; 0x28
 8005df4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005dfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005e06:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005e0a:	2501      	movs	r5, #1
 8005e0c:	e756      	b.n	8005cbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005e0e:	2328      	movs	r3, #40	; 0x28
 8005e10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005e14:	2200      	movs	r2, #0
 8005e16:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005e1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e1c:	f043 0310 	orr.w	r3, r3, #16
 8005e20:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005e22:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005e26:	2501      	movs	r5, #1
 8005e28:	e748      	b.n	8005cbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e2a:	2208      	movs	r2, #8
 8005e2c:	61da      	str	r2, [r3, #28]
 8005e2e:	e79b      	b.n	8005d68 <HAL_I2C_Slave_Seq_Transmit_DMA+0xbc>
    __HAL_LOCK(hi2c);
 8005e30:	2502      	movs	r5, #2
 8005e32:	e743      	b.n	8005cbc <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
 8005e34:	0800693d 	.word	0x0800693d
 8005e38:	08006239 	.word	0x08006239
 8005e3c:	08006b77 	.word	0x08006b77
 8005e40:	08006cbf 	.word	0x08006cbf

08005e44 <HAL_I2C_Slave_Seq_Receive_IT>:
{
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e46:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005e4a:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8005e4e:	2c28      	cmp	r4, #40	; 0x28
 8005e50:	d001      	beq.n	8005e56 <HAL_I2C_Slave_Seq_Receive_IT+0x12>
    return HAL_ERROR;
 8005e52:	2001      	movs	r0, #1
}
 8005e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8005e56:	b101      	cbz	r1, 8005e5a <HAL_I2C_Slave_Seq_Receive_IT+0x16>
 8005e58:	b922      	cbnz	r2, 8005e64 <HAL_I2C_Slave_Seq_Receive_IT+0x20>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e5e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005e60:	2001      	movs	r0, #1
 8005e62:	e7f7      	b.n	8005e54 <HAL_I2C_Slave_Seq_Receive_IT+0x10>
 8005e64:	461f      	mov	r7, r3
 8005e66:	4616      	mov	r6, r2
 8005e68:	460d      	mov	r5, r1
 8005e6a:	4604      	mov	r4, r0
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e6c:	2106      	movs	r1, #6
 8005e6e:	f7fd ff71 	bl	8003d54 <I2C_Disable_IRQ>
    __HAL_LOCK(hi2c);
 8005e72:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d046      	beq.n	8005f08 <HAL_I2C_Slave_Seq_Receive_IT+0xc4>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005e80:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b29      	cmp	r3, #41	; 0x29
 8005e88:	d023      	beq.n	8005ed2 <HAL_I2C_Slave_Seq_Receive_IT+0x8e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8005e8a:	232a      	movs	r3, #42	; 0x2a
 8005e8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005e90:	2320      	movs	r3, #32
 8005e92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	6853      	ldr	r3, [r2, #4]
 8005e9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ea2:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8005ea4:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ea6:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ea8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005eaa:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005eac:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <HAL_I2C_Slave_Seq_Receive_IT+0xc8>)
 8005eb0:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005eba:	bf04      	itt	eq
 8005ebc:	2208      	moveq	r2, #8
 8005ebe:	61da      	streq	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ec0:	2500      	movs	r5, #0
 8005ec2:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005ec6:	2106      	movs	r1, #6
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f7fd ff09 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 8005ece:	4628      	mov	r0, r5
 8005ed0:	e7c0      	b.n	8005e54 <HAL_I2C_Slave_Seq_Receive_IT+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f7fd ff3d 	bl	8003d54 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005ee2:	d0d2      	beq.n	8005e8a <HAL_I2C_Slave_Seq_Receive_IT+0x46>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005eea:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 8005eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0cb      	beq.n	8005e8a <HAL_I2C_Slave_Seq_Receive_IT+0x46>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <HAL_I2C_Slave_Seq_Receive_IT+0xcc>)
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ef6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ef8:	f7fc fcb3 	bl	8002862 <HAL_DMA_Abort_IT>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d0c4      	beq.n	8005e8a <HAL_I2C_Slave_Seq_Receive_IT+0x46>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005f02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005f04:	4798      	blx	r3
 8005f06:	e7c0      	b.n	8005e8a <HAL_I2C_Slave_Seq_Receive_IT+0x46>
    __HAL_LOCK(hi2c);
 8005f08:	2002      	movs	r0, #2
 8005f0a:	e7a3      	b.n	8005e54 <HAL_I2C_Slave_Seq_Receive_IT+0x10>
 8005f0c:	08006599 	.word	0x08006599
 8005f10:	08006cbf 	.word	0x08006cbf

08005f14 <HAL_I2C_Slave_Seq_Receive_DMA>:
{
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f16:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005f1a:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8005f1e:	2c28      	cmp	r4, #40	; 0x28
 8005f20:	d002      	beq.n	8005f28 <HAL_I2C_Slave_Seq_Receive_DMA+0x14>
    return HAL_ERROR;
 8005f22:	2501      	movs	r5, #1
}
 8005f24:	4628      	mov	r0, r5
 8005f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8005f28:	b101      	cbz	r1, 8005f2c <HAL_I2C_Slave_Seq_Receive_DMA+0x18>
 8005f2a:	b922      	cbnz	r2, 8005f36 <HAL_I2C_Slave_Seq_Receive_DMA+0x22>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f30:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005f32:	2501      	movs	r5, #1
 8005f34:	e7f6      	b.n	8005f24 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
 8005f36:	461f      	mov	r7, r3
 8005f38:	4616      	mov	r6, r2
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	4604      	mov	r4, r0
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005f3e:	2106      	movs	r1, #6
 8005f40:	f7fd ff08 	bl	8003d54 <I2C_Disable_IRQ>
    __HAL_LOCK(hi2c);
 8005f44:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	f000 80a3 	beq.w	8006094 <HAL_I2C_Slave_Seq_Receive_DMA+0x180>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005f54:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b29      	cmp	r3, #41	; 0x29
 8005f5c:	d048      	beq.n	8005ff0 <HAL_I2C_Slave_Seq_Receive_DMA+0xdc>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f5e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b2a      	cmp	r3, #42	; 0x2a
 8005f66:	d05f      	beq.n	8006028 <HAL_I2C_Slave_Seq_Receive_DMA+0x114>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8005f68:	232a      	movs	r3, #42	; 0x2a
 8005f6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005f6e:	2320      	movs	r3, #32
 8005f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f74:	2300      	movs	r3, #0
 8005f76:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	6853      	ldr	r3, [r2, #4]
 8005f7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f80:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8005f82:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f84:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f88:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005f8a:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005f8c:	4b42      	ldr	r3, [pc, #264]	; (8006098 <HAL_I2C_Slave_Seq_Receive_DMA+0x184>)
 8005f8e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->hdmarx != NULL)
 8005f90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d05f      	beq.n	8006056 <HAL_I2C_Slave_Seq_Receive_DMA+0x142>
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005f96:	4a41      	ldr	r2, [pc, #260]	; (800609c <HAL_I2C_Slave_Seq_Receive_DMA+0x188>)
 8005f98:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005f9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f9c:	4a40      	ldr	r2, [pc, #256]	; (80060a0 <HAL_I2C_Slave_Seq_Receive_DMA+0x18c>)
 8005f9e:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005fa0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005fa6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005fa8:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005faa:	6821      	ldr	r1, [r4, #0]
 8005fac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005fae:	462a      	mov	r2, r5
 8005fb0:	3124      	adds	r1, #36	; 0x24
 8005fb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005fb4:	f7fc fbe3 	bl	800277e <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8005fb8:	4605      	mov	r5, r0
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d159      	bne.n	8006072 <HAL_I2C_Slave_Seq_Receive_DMA+0x15e>
      hi2c->XferCount -= hi2c->XferSize;
 8005fbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fc0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	8523      	strh	r3, [r4, #40]	; 0x28
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	699a      	ldr	r2, [r3, #24]
 8005fd0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005fd4:	d05b      	beq.n	800608e <HAL_I2C_Slave_Seq_Receive_DMA+0x17a>
    __HAL_UNLOCK(hi2c);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005fdc:	2106      	movs	r1, #6
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7fd fe7e 	bl	8003ce0 <I2C_Enable_IRQ>
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fec:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8005fee:	e799      	b.n	8005f24 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f7fd feae 	bl	8003d54 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006000:	d0b2      	beq.n	8005f68 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
        if (hi2c->hdmatx != NULL)
 8006002:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006004:	2a00      	cmp	r2, #0
 8006006:	d0af      	beq.n	8005f68 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800600e:	601a      	str	r2, [r3, #0]
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006010:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006012:	4a24      	ldr	r2, [pc, #144]	; (80060a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x190>)
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006016:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006018:	f7fc fc23 	bl	8002862 <HAL_DMA_Abort_IT>
 800601c:	2800      	cmp	r0, #0
 800601e:	d0a3      	beq.n	8005f68 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006020:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006022:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006024:	4798      	blx	r3
 8006026:	e79f      	b.n	8005f68 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006030:	d09a      	beq.n	8005f68 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006038:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmarx != NULL)
 800603a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d093      	beq.n	8005f68 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006040:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x190>)
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006044:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006046:	f7fc fc0c 	bl	8002862 <HAL_DMA_Abort_IT>
 800604a:	2800      	cmp	r0, #0
 800604c:	d08c      	beq.n	8005f68 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800604e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006050:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006052:	4798      	blx	r3
 8006054:	e788      	b.n	8005f68 <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006056:	2328      	movs	r3, #40	; 0x28
 8006058:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800605c:	2200      	movs	r2, #0
 800605e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006062:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800606a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800606e:	2501      	movs	r5, #1
 8006070:	e758      	b.n	8005f24 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006072:	2328      	movs	r3, #40	; 0x28
 8006074:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006078:	2200      	movs	r2, #0
 800607a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800607e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006080:	f043 0310 	orr.w	r3, r3, #16
 8006084:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006086:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800608a:	2501      	movs	r5, #1
 800608c:	e74a      	b.n	8005f24 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800608e:	2208      	movs	r2, #8
 8006090:	61da      	str	r2, [r3, #28]
 8006092:	e7a0      	b.n	8005fd6 <HAL_I2C_Slave_Seq_Receive_DMA+0xc2>
    __HAL_LOCK(hi2c);
 8006094:	2502      	movs	r5, #2
 8006096:	e745      	b.n	8005f24 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
 8006098:	0800693d 	.word	0x0800693d
 800609c:	08006255 	.word	0x08006255
 80060a0:	08006b77 	.word	0x08006b77
 80060a4:	08006cbf 	.word	0x08006cbf

080060a8 <HAL_I2C_EnableListen_IT>:
{
 80060a8:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d001      	beq.n	80060b8 <HAL_I2C_EnableListen_IT+0x10>
    return HAL_BUSY;
 80060b4:	2002      	movs	r0, #2
}
 80060b6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80060b8:	2328      	movs	r3, #40	; 0x28
 80060ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80060be:	4b03      	ldr	r3, [pc, #12]	; (80060cc <HAL_I2C_EnableListen_IT+0x24>)
 80060c0:	6343      	str	r3, [r0, #52]	; 0x34
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80060c2:	2104      	movs	r1, #4
 80060c4:	f7fd fe0c 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 80060c8:	2000      	movs	r0, #0
 80060ca:	e7f4      	b.n	80060b6 <HAL_I2C_EnableListen_IT+0xe>
 80060cc:	08006599 	.word	0x08006599

080060d0 <HAL_I2C_DisableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80060d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b28      	cmp	r3, #40	; 0x28
 80060d8:	d001      	beq.n	80060de <HAL_I2C_DisableListen_IT+0xe>
    return HAL_BUSY;
 80060da:	2002      	movs	r0, #2
}
 80060dc:	4770      	bx	lr
{
 80060de:	b510      	push	{r4, lr}
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 80060e0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 80060e4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80060e8:	f002 0203 	and.w	r2, r2, #3
 80060ec:	4313      	orrs	r3, r2
 80060ee:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80060f0:	2320      	movs	r3, #32
 80060f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f6:	2400      	movs	r4, #0
 80060f8:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->XferISR = NULL;
 80060fc:	6344      	str	r4, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80060fe:	2104      	movs	r1, #4
 8006100:	f7fd fe28 	bl	8003d54 <I2C_Disable_IRQ>
    return HAL_OK;
 8006104:	4620      	mov	r0, r4
}
 8006106:	bd10      	pop	{r4, pc}

08006108 <HAL_I2C_Master_Abort_IT>:
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8006108:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b10      	cmp	r3, #16
 8006110:	d001      	beq.n	8006116 <HAL_I2C_Master_Abort_IT+0xe>
    return HAL_ERROR;
 8006112:	2001      	movs	r0, #1
 8006114:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006116:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800611a:	2b01      	cmp	r3, #1
 800611c:	d023      	beq.n	8006166 <HAL_I2C_Master_Abort_IT+0x5e>
{
 800611e:	b570      	push	{r4, r5, r6, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	460d      	mov	r5, r1
 8006124:	4604      	mov	r4, r0
    __HAL_LOCK(hi2c);
 8006126:	2601      	movs	r6, #1
 8006128:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800612c:	2102      	movs	r1, #2
 800612e:	f7fd fe11 	bl	8003d54 <I2C_Disable_IRQ>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006132:	4631      	mov	r1, r6
 8006134:	4620      	mov	r0, r4
 8006136:	f7fd fe0d 	bl	8003d54 <I2C_Disable_IRQ>
    hi2c->State = HAL_I2C_STATE_ABORT;
 800613a:	2360      	movs	r3, #96	; 0x60
 800613c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_I2C_Master_Abort_IT+0x64>)
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006148:	4632      	mov	r2, r6
 800614a:	4629      	mov	r1, r5
 800614c:	4620      	mov	r0, r4
 800614e:	f7fd fdac 	bl	8003caa <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8006152:	2500      	movs	r5, #0
 8006154:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006158:	2112      	movs	r1, #18
 800615a:	4620      	mov	r0, r4
 800615c:	f7fd fdc0 	bl	8003ce0 <I2C_Enable_IRQ>
    return HAL_OK;
 8006160:	4628      	mov	r0, r5
}
 8006162:	b002      	add	sp, #8
 8006164:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 8006166:	2002      	movs	r0, #2
}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	80004000 	.word	0x80004000

08006170 <HAL_I2C_EV_IRQHandler>:
{
 8006170:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006172:	6803      	ldr	r3, [r0, #0]
 8006174:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006176:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006178:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800617a:	b103      	cbz	r3, 800617e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 800617c:	4798      	blx	r3
}
 800617e:	bd08      	pop	{r3, pc}

08006180 <HAL_I2C_MasterTxCpltCallback>:
}
 8006180:	4770      	bx	lr

08006182 <HAL_I2C_MasterRxCpltCallback>:
}
 8006182:	4770      	bx	lr

08006184 <I2C_ITMasterSeqCplt>:
{
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006188:	2300      	movs	r3, #0
 800618a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800618e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b21      	cmp	r3, #33	; 0x21
 8006196:	d00f      	beq.n	80061b8 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006198:	2320      	movs	r3, #32
 800619a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800619e:	2312      	movs	r3, #18
 80061a0:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80061a2:	2500      	movs	r5, #0
 80061a4:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061a6:	2102      	movs	r1, #2
 80061a8:	f7fd fdd4 	bl	8003d54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061ac:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7ff ffe6 	bl	8006182 <HAL_I2C_MasterRxCpltCallback>
}
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 80061b8:	2320      	movs	r3, #32
 80061ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80061be:	2311      	movs	r3, #17
 80061c0:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80061c2:	2500      	movs	r5, #0
 80061c4:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061c6:	2101      	movs	r1, #1
 80061c8:	f7fd fdc4 	bl	8003d54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061cc:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80061d0:	4620      	mov	r0, r4
 80061d2:	f7ff ffd5 	bl	8006180 <HAL_I2C_MasterTxCpltCallback>
 80061d6:	e7ee      	b.n	80061b6 <I2C_ITMasterSeqCplt+0x32>

080061d8 <HAL_I2C_SlaveTxCpltCallback>:
}
 80061d8:	4770      	bx	lr

080061da <HAL_I2C_SlaveRxCpltCallback>:
}
 80061da:	4770      	bx	lr

080061dc <I2C_ITSlaveSeqCplt>:
{
 80061dc:	b510      	push	{r4, lr}
 80061de:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80061e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b29      	cmp	r3, #41	; 0x29
 80061ee:	d005      	beq.n	80061fc <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b2a      	cmp	r3, #42	; 0x2a
 80061f8:	d00f      	beq.n	800621a <I2C_ITSlaveSeqCplt+0x3e>
}
 80061fa:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061fc:	2328      	movs	r3, #40	; 0x28
 80061fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006202:	2321      	movs	r3, #33	; 0x21
 8006204:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006206:	2101      	movs	r1, #1
 8006208:	f7fd fda4 	bl	8003d54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800620c:	2300      	movs	r3, #0
 800620e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006212:	4620      	mov	r0, r4
 8006214:	f7ff ffe0 	bl	80061d8 <HAL_I2C_SlaveTxCpltCallback>
 8006218:	e7ef      	b.n	80061fa <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800621a:	2328      	movs	r3, #40	; 0x28
 800621c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006220:	2322      	movs	r3, #34	; 0x22
 8006222:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006224:	2102      	movs	r1, #2
 8006226:	f7fd fd95 	bl	8003d54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800622a:	2300      	movs	r3, #0
 800622c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006230:	4620      	mov	r0, r4
 8006232:	f7ff ffd2 	bl	80061da <HAL_I2C_SlaveRxCpltCallback>
}
 8006236:	e7e0      	b.n	80061fa <I2C_ITSlaveSeqCplt+0x1e>

08006238 <I2C_DMASlaveTransmitCplt>:
{
 8006238:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800623a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  uint32_t tmpoptions = hi2c->XferOptions;
 800623c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800623e:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8006242:	d106      	bne.n	8006252 <I2C_DMASlaveTransmitCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006244:	6802      	ldr	r2, [r0, #0]
 8006246:	6813      	ldr	r3, [r2, #0]
 8006248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624c:	6013      	str	r3, [r2, #0]
    I2C_ITSlaveSeqCplt(hi2c);
 800624e:	f7ff ffc5 	bl	80061dc <I2C_ITSlaveSeqCplt>
}
 8006252:	bd08      	pop	{r3, pc}

08006254 <I2C_DMASlaveReceiveCplt>:
{
 8006254:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006256:	6a80      	ldr	r0, [r0, #40]	; 0x28
  uint32_t tmpoptions = hi2c->XferOptions;
 8006258:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
 800625a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	b94b      	cbnz	r3, 8006276 <I2C_DMASlaveReceiveCplt+0x22>
 8006262:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006266:	d006      	beq.n	8006276 <I2C_DMASlaveReceiveCplt+0x22>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006268:	6802      	ldr	r2, [r0, #0]
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006270:	6013      	str	r3, [r2, #0]
    I2C_ITSlaveSeqCplt(hi2c);
 8006272:	f7ff ffb3 	bl	80061dc <I2C_ITSlaveSeqCplt>
}
 8006276:	bd08      	pop	{r3, pc}

08006278 <HAL_I2C_AddrCallback>:
}
 8006278:	4770      	bx	lr

0800627a <I2C_ITAddrCplt>:
{
 800627a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800627c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006280:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006284:	2b28      	cmp	r3, #40	; 0x28
 8006286:	d006      	beq.n	8006296 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006288:	6803      	ldr	r3, [r0, #0]
 800628a:	2208      	movs	r2, #8
 800628c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800628e:	2300      	movs	r3, #0
 8006290:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8006294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006296:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8006298:	6803      	ldr	r3, [r0, #0]
 800629a:	699e      	ldr	r6, [r3, #24]
 800629c:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	0c12      	lsrs	r2, r2, #16
 80062a4:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80062a8:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80062aa:	68df      	ldr	r7, [r3, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062ac:	68c1      	ldr	r1, [r0, #12]
 80062ae:	2902      	cmp	r1, #2
 80062b0:	d124      	bne.n	80062fc <I2C_ITAddrCplt+0x82>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80062b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80062b6:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80062ba:	f015 0f06 	tst.w	r5, #6
 80062be:	d110      	bne.n	80062e2 <I2C_ITAddrCplt+0x68>
        hi2c->AddrEventCount++;
 80062c0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80062c2:	3101      	adds	r1, #1
 80062c4:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80062c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80062c8:	2902      	cmp	r1, #2
 80062ca:	d1e3      	bne.n	8006294 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 80062cc:	2100      	movs	r1, #0
 80062ce:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80062d0:	2008      	movs	r0, #8
 80062d2:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80062d4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062d8:	4631      	mov	r1, r6
 80062da:	4620      	mov	r0, r4
 80062dc:	f7ff ffcc 	bl	8006278 <HAL_I2C_AddrCallback>
 80062e0:	e7d8      	b.n	8006294 <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80062e2:	2104      	movs	r1, #4
 80062e4:	f7fd fd36 	bl	8003d54 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80062e8:	2300      	movs	r3, #0
 80062ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062ee:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80062f2:	4631      	mov	r1, r6
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff ffbf 	bl	8006278 <HAL_I2C_AddrCallback>
 80062fa:	e7cb      	b.n	8006294 <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80062fc:	2104      	movs	r1, #4
 80062fe:	f7fd fd29 	bl	8003d54 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006302:	2300      	movs	r3, #0
 8006304:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006308:	462a      	mov	r2, r5
 800630a:	4631      	mov	r1, r6
 800630c:	4620      	mov	r0, r4
 800630e:	f7ff ffb3 	bl	8006278 <HAL_I2C_AddrCallback>
 8006312:	e7bf      	b.n	8006294 <I2C_ITAddrCplt+0x1a>

08006314 <HAL_I2C_ListenCpltCallback>:
}
 8006314:	4770      	bx	lr
	...

08006318 <I2C_ITListenCplt>:
{
 8006318:	b510      	push	{r4, lr}
 800631a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800631c:	4b16      	ldr	r3, [pc, #88]	; (8006378 <I2C_ITListenCplt+0x60>)
 800631e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006320:	2300      	movs	r3, #0
 8006322:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006324:	2220      	movs	r2, #32
 8006326:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800632a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800632e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006330:	f011 0f04 	tst.w	r1, #4
 8006334:	d012      	beq.n	800635c <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006336:	6803      	ldr	r3, [r0, #0]
 8006338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800633a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800633c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800633e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006340:	3301      	adds	r3, #1
 8006342:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006344:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8006346:	b14b      	cbz	r3, 800635c <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8006348:	3b01      	subs	r3, #1
 800634a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800634c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800634e:	3b01      	subs	r3, #1
 8006350:	b29b      	uxth	r3, r3
 8006352:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006354:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006356:	f043 0304 	orr.w	r3, r3, #4
 800635a:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800635c:	2107      	movs	r1, #7
 800635e:	4620      	mov	r0, r4
 8006360:	f7fd fcf8 	bl	8003d54 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	2210      	movs	r2, #16
 8006368:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800636a:	2300      	movs	r3, #0
 800636c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff ffcf 	bl	8006314 <HAL_I2C_ListenCpltCallback>
}
 8006376:	bd10      	pop	{r4, pc}
 8006378:	ffff0000 	.word	0xffff0000

0800637c <HAL_I2C_MemTxCpltCallback>:
}
 800637c:	4770      	bx	lr

0800637e <HAL_I2C_MemRxCpltCallback>:
}
 800637e:	4770      	bx	lr

08006380 <HAL_I2C_ErrorCallback>:
}
 8006380:	4770      	bx	lr

08006382 <HAL_I2C_AbortCpltCallback>:
}
 8006382:	4770      	bx	lr

08006384 <I2C_ITError>:
{
 8006384:	b510      	push	{r4, lr}
 8006386:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006388:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800638c:	2200      	movs	r2, #0
 800638e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006392:	4836      	ldr	r0, [pc, #216]	; (800646c <I2C_ITError+0xe8>)
 8006394:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006396:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006398:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800639a:	4311      	orrs	r1, r2
 800639c:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800639e:	3b28      	subs	r3, #40	; 0x28
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d822      	bhi.n	80063ec <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063a6:	2103      	movs	r1, #3
 80063a8:	4620      	mov	r0, r4
 80063aa:	f7fd fcd3 	bl	8003d54 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063ae:	2328      	movs	r3, #40	; 0x28
 80063b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80063b8:	4b2d      	ldr	r3, [pc, #180]	; (8006470 <I2C_ITError+0xec>)
 80063ba:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80063c4:	d022      	beq.n	800640c <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063cc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80063ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063d0:	b15b      	cbz	r3, 80063ea <I2C_ITError+0x66>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063d2:	4a28      	ldr	r2, [pc, #160]	; (8006474 <I2C_ITError+0xf0>)
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80063d6:	2300      	movs	r3, #0
 80063d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063de:	f7fc fa40 	bl	8002862 <HAL_DMA_Abort_IT>
 80063e2:	b110      	cbz	r0, 80063ea <I2C_ITError+0x66>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063e8:	4798      	blx	r3
}
 80063ea:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063ec:	2107      	movs	r1, #7
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7fd fcb0 	bl	8003d54 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80063f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 80063fc:	bf1c      	itt	ne
 80063fe:	2320      	movne	r3, #32
 8006400:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006404:	2300      	movs	r3, #0
 8006406:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006408:	6363      	str	r3, [r4, #52]	; 0x34
 800640a:	e7d7      	b.n	80063bc <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006412:	d014      	beq.n	800643e <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800641a:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800641c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0e3      	beq.n	80063ea <I2C_ITError+0x66>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006422:	4a14      	ldr	r2, [pc, #80]	; (8006474 <I2C_ITError+0xf0>)
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8006426:	2300      	movs	r3, #0
 8006428:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800642c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800642e:	f7fc fa18 	bl	8002862 <HAL_DMA_Abort_IT>
 8006432:	2800      	cmp	r0, #0
 8006434:	d0d9      	beq.n	80063ea <I2C_ITError+0x66>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006436:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006438:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800643a:	4798      	blx	r3
 800643c:	e7d5      	b.n	80063ea <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800643e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b60      	cmp	r3, #96	; 0x60
 8006446:	d006      	beq.n	8006456 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8006448:	2300      	movs	r3, #0
 800644a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800644e:	4620      	mov	r0, r4
 8006450:	f7ff ff96 	bl	8006380 <HAL_I2C_ErrorCallback>
}
 8006454:	e7c9      	b.n	80063ea <I2C_ITError+0x66>
    hi2c->State = HAL_I2C_STATE_READY;
 8006456:	2320      	movs	r3, #32
 8006458:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800645c:	2300      	movs	r3, #0
 800645e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8006462:	4620      	mov	r0, r4
 8006464:	f7ff ff8d 	bl	8006382 <HAL_I2C_AbortCpltCallback>
 8006468:	e7bf      	b.n	80063ea <I2C_ITError+0x66>
 800646a:	bf00      	nop
 800646c:	ffff0000 	.word	0xffff0000
 8006470:	08006599 	.word	0x08006599
 8006474:	08006cbf 	.word	0x08006cbf

08006478 <I2C_ITSlaveCplt>:
{
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4604      	mov	r4, r0
 800647c:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800647e:	6803      	ldr	r3, [r0, #0]
 8006480:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006482:	2220      	movs	r2, #32
 8006484:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006486:	2107      	movs	r1, #7
 8006488:	f7fd fc64 	bl	8003d54 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800648c:	6822      	ldr	r2, [r4, #0]
 800648e:	6853      	ldr	r3, [r2, #4]
 8006490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006494:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8006496:	6822      	ldr	r2, [r4, #0]
 8006498:	6853      	ldr	r3, [r2, #4]
 800649a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800649e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80064a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80064ac:	4620      	mov	r0, r4
 80064ae:	f7fd fbeb 	bl	8003c88 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064b2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80064b6:	d03a      	beq.n	800652e <I2C_ITSlaveCplt+0xb6>
    if (hi2c->hdmatx != NULL)
 80064b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064ba:	b11b      	cbz	r3, 80064c4 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80064c4:	f015 0f04 	tst.w	r5, #4
 80064c8:	d010      	beq.n	80064ec <I2C_ITSlaveCplt+0x74>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80064ca:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d8:	3301      	adds	r3, #1
 80064da:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80064dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064de:	b12b      	cbz	r3, 80064ec <I2C_ITSlaveCplt+0x74>
      hi2c->XferSize--;
 80064e0:	3b01      	subs	r3, #1
 80064e2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80064e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80064ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	b11b      	cbz	r3, 80064fa <I2C_ITSlaveCplt+0x82>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064f4:	f043 0304 	orr.w	r3, r3, #4
 80064f8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006502:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006504:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006506:	b9eb      	cbnz	r3, 8006544 <I2C_ITSlaveCplt+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006508:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800650a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800650e:	d127      	bne.n	8006560 <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006510:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b22      	cmp	r3, #34	; 0x22
 8006518:	d031      	beq.n	800657e <I2C_ITSlaveCplt+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 800651a:	2320      	movs	r3, #32
 800651c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006520:	2300      	movs	r3, #0
 8006522:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff fe56 	bl	80061d8 <HAL_I2C_SlaveTxCpltCallback>
}
 800652c:	e026      	b.n	800657c <I2C_ITSlaveCplt+0x104>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800652e:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8006532:	d0c7      	beq.n	80064c4 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8006534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0c4      	beq.n	80064c4 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	b29b      	uxth	r3, r3
 8006540:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006542:	e7bf      	b.n	80064c4 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006544:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006546:	4620      	mov	r0, r4
 8006548:	f7ff ff1c 	bl	8006384 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800654c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b28      	cmp	r3, #40	; 0x28
 8006554:	d112      	bne.n	800657c <I2C_ITSlaveCplt+0x104>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006556:	4629      	mov	r1, r5
 8006558:	4620      	mov	r0, r4
 800655a:	f7ff fedd 	bl	8006318 <I2C_ITListenCplt>
 800655e:	e00d      	b.n	800657c <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff fe3b 	bl	80061dc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <I2C_ITSlaveCplt+0x11c>)
 8006568:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800656a:	2320      	movs	r3, #32
 800656c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006570:	2300      	movs	r3, #0
 8006572:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006576:	4620      	mov	r0, r4
 8006578:	f7ff fecc 	bl	8006314 <HAL_I2C_ListenCpltCallback>
}
 800657c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800657e:	2320      	movs	r3, #32
 8006580:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006584:	2300      	movs	r3, #0
 8006586:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800658a:	4620      	mov	r0, r4
 800658c:	f7ff fe25 	bl	80061da <HAL_I2C_SlaveRxCpltCallback>
 8006590:	e7f4      	b.n	800657c <I2C_ITSlaveCplt+0x104>
 8006592:	bf00      	nop
 8006594:	ffff0000 	.word	0xffff0000

08006598 <I2C_Slave_ISR_IT>:
{
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	4616      	mov	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 800659c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800659e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	f000 8099 	beq.w	80066da <I2C_Slave_ISR_IT+0x142>
 80065a8:	4604      	mov	r4, r0
 80065aa:	460d      	mov	r5, r1
 80065ac:	2301      	movs	r3, #1
 80065ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80065b2:	f011 0f10 	tst.w	r1, #16
 80065b6:	d03d      	beq.n	8006634 <I2C_Slave_ISR_IT+0x9c>
 80065b8:	f016 0f10 	tst.w	r6, #16
 80065bc:	d03a      	beq.n	8006634 <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 80065be:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	bb4b      	cbnz	r3, 8006618 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80065c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b28      	cmp	r3, #40	; 0x28
 80065cc:	d011      	beq.n	80065f2 <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80065ce:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b29      	cmp	r3, #41	; 0x29
 80065d6:	d012      	beq.n	80065fe <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	2210      	movs	r2, #16
 80065dc:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065de:	f015 0f20 	tst.w	r5, #32
 80065e2:	d002      	beq.n	80065ea <I2C_Slave_ISR_IT+0x52>
 80065e4:	f016 0f20 	tst.w	r6, #32
 80065e8:	d172      	bne.n	80066d0 <I2C_Slave_ISR_IT+0x138>
  __HAL_UNLOCK(hi2c);
 80065ea:	2000      	movs	r0, #0
 80065ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80065f2:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80065f6:	d1ea      	bne.n	80065ce <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80065f8:	f7ff fe8e 	bl	8006318 <I2C_ITListenCplt>
 80065fc:	e7ef      	b.n	80065de <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80065fe:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006602:	d0e9      	beq.n	80065d8 <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	2210      	movs	r2, #16
 8006608:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800660a:	4620      	mov	r0, r4
 800660c:	f7fd fb3c 	bl	8003c88 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8006610:	4620      	mov	r0, r4
 8006612:	f7ff fde3 	bl	80061dc <I2C_ITSlaveSeqCplt>
 8006616:	e7e2      	b.n	80065de <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006618:	6803      	ldr	r3, [r0, #0]
 800661a:	2110      	movs	r1, #16
 800661c:	61d9      	str	r1, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800661e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006620:	f043 0304 	orr.w	r3, r3, #4
 8006624:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006626:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 800662a:	d1d8      	bne.n	80065de <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800662c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800662e:	f7ff fea9 	bl	8006384 <I2C_ITError>
 8006632:	e7d4      	b.n	80065de <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006634:	f015 0f04 	tst.w	r5, #4
 8006638:	d020      	beq.n	800667c <I2C_Slave_ISR_IT+0xe4>
 800663a:	f016 0f04 	tst.w	r6, #4
 800663e:	d01d      	beq.n	800667c <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount > 0U)
 8006640:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006642:	b29b      	uxth	r3, r3
 8006644:	b17b      	cbz	r3, 8006666 <I2C_Slave_ISR_IT+0xce>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8006646:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800664e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006650:	7019      	strb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8006652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006654:	3301      	adds	r3, #1
 8006656:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006658:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800665a:	3b01      	subs	r3, #1
 800665c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800665e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006660:	3b01      	subs	r3, #1
 8006662:	b29b      	uxth	r3, r3
 8006664:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8006666:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1b7      	bne.n	80065de <I2C_Slave_ISR_IT+0x46>
 800666e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006672:	d0b4      	beq.n	80065de <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSeqCplt(hi2c);
 8006674:	4620      	mov	r0, r4
 8006676:	f7ff fdb1 	bl	80061dc <I2C_ITSlaveSeqCplt>
 800667a:	e7b0      	b.n	80065de <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800667c:	f015 0f08 	tst.w	r5, #8
 8006680:	d002      	beq.n	8006688 <I2C_Slave_ISR_IT+0xf0>
 8006682:	f016 0f08 	tst.w	r6, #8
 8006686:	d117      	bne.n	80066b8 <I2C_Slave_ISR_IT+0x120>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006688:	f015 0f02 	tst.w	r5, #2
 800668c:	d0a7      	beq.n	80065de <I2C_Slave_ISR_IT+0x46>
 800668e:	f016 0f02 	tst.w	r6, #2
 8006692:	d0a4      	beq.n	80065de <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 8006694:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006696:	b29b      	uxth	r3, r3
 8006698:	b19b      	cbz	r3, 80066c2 <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800669e:	7812      	ldrb	r2, [r2, #0]
 80066a0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80066a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066a4:	3301      	adds	r3, #1
 80066a6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80066a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80066b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066b2:	3b01      	subs	r3, #1
 80066b4:	8523      	strh	r3, [r4, #40]	; 0x28
 80066b6:	e792      	b.n	80065de <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80066b8:	4629      	mov	r1, r5
 80066ba:	4620      	mov	r0, r4
 80066bc:	f7ff fddd 	bl	800627a <I2C_ITAddrCplt>
 80066c0:	e78d      	b.n	80065de <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80066c2:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 80066c6:	d18a      	bne.n	80065de <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSeqCplt(hi2c);
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff fd87 	bl	80061dc <I2C_ITSlaveSeqCplt>
 80066ce:	e786      	b.n	80065de <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80066d0:	4629      	mov	r1, r5
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff fed0 	bl	8006478 <I2C_ITSlaveCplt>
 80066d8:	e787      	b.n	80065ea <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80066da:	2002      	movs	r0, #2
 80066dc:	e788      	b.n	80065f0 <I2C_Slave_ISR_IT+0x58>

080066de <I2C_ITMasterCplt>:
{
 80066de:	b510      	push	{r4, lr}
 80066e0:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e2:	6803      	ldr	r3, [r0, #0]
 80066e4:	2220      	movs	r2, #32
 80066e6:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80066e8:	6802      	ldr	r2, [r0, #0]
 80066ea:	6853      	ldr	r3, [r2, #4]
 80066ec:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80066f0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80066f4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80066f8:	f023 0301 	bic.w	r3, r3, #1
 80066fc:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 80066fe:	2300      	movs	r3, #0
 8006700:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8006702:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006704:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8006708:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800670a:	f011 0f10 	tst.w	r1, #16
 800670e:	d006      	beq.n	800671e <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006710:	6803      	ldr	r3, [r0, #0]
 8006712:	2210      	movs	r2, #16
 8006714:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006716:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006718:	f043 0304 	orr.w	r3, r3, #4
 800671c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 800671e:	4620      	mov	r0, r4
 8006720:	f7fd fab2 	bl	8003c88 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006724:	2103      	movs	r1, #3
 8006726:	4620      	mov	r0, r4
 8006728:	f7fd fb14 	bl	8003d54 <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 800672c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800672e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b60      	cmp	r3, #96	; 0x60
 8006736:	d01b      	beq.n	8006770 <I2C_ITMasterCplt+0x92>
 8006738:	b9d2      	cbnz	r2, 8006770 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800673a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b21      	cmp	r3, #33	; 0x21
 8006742:	d01a      	beq.n	800677a <I2C_ITMasterCplt+0x9c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006744:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b22      	cmp	r3, #34	; 0x22
 800674c:	d114      	bne.n	8006778 <I2C_ITMasterCplt+0x9a>
    hi2c->State = HAL_I2C_STATE_READY;
 800674e:	2320      	movs	r3, #32
 8006750:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006754:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b40      	cmp	r3, #64	; 0x40
 800675c:	d027      	beq.n	80067ae <I2C_ITMasterCplt+0xd0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800675e:	2300      	movs	r3, #0
 8006760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006764:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006768:	4620      	mov	r0, r4
 800676a:	f7ff fd0a 	bl	8006182 <HAL_I2C_MasterRxCpltCallback>
}
 800676e:	e003      	b.n	8006778 <I2C_ITMasterCplt+0x9a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006770:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006772:	4620      	mov	r0, r4
 8006774:	f7ff fe06 	bl	8006384 <I2C_ITError>
}
 8006778:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800677a:	2320      	movs	r3, #32
 800677c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006780:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d008      	beq.n	800679c <I2C_ITMasterCplt+0xbe>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800678a:	2300      	movs	r3, #0
 800678c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006790:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006794:	4620      	mov	r0, r4
 8006796:	f7ff fcf3 	bl	8006180 <HAL_I2C_MasterTxCpltCallback>
 800679a:	e7ed      	b.n	8006778 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800679c:	2300      	movs	r3, #0
 800679e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80067a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80067a6:	4620      	mov	r0, r4
 80067a8:	f7ff fde8 	bl	800637c <HAL_I2C_MemTxCpltCallback>
 80067ac:	e7e4      	b.n	8006778 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80067b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80067b8:	4620      	mov	r0, r4
 80067ba:	f7ff fde0 	bl	800637e <HAL_I2C_MemRxCpltCallback>
 80067be:	e7db      	b.n	8006778 <I2C_ITMasterCplt+0x9a>

080067c0 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 80067c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f000 80b7 	beq.w	8006938 <I2C_Master_ISR_IT+0x178>
{
 80067ca:	b570      	push	{r4, r5, r6, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	4604      	mov	r4, r0
 80067d0:	460d      	mov	r5, r1
 80067d2:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 80067d4:	2301      	movs	r3, #1
 80067d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067da:	f011 0f10 	tst.w	r1, #16
 80067de:	d002      	beq.n	80067e6 <I2C_Master_ISR_IT+0x26>
 80067e0:	f012 0f10 	tst.w	r2, #16
 80067e4:	d121      	bne.n	800682a <I2C_Master_ISR_IT+0x6a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067e6:	f015 0f04 	tst.w	r5, #4
 80067ea:	d028      	beq.n	800683e <I2C_Master_ISR_IT+0x7e>
 80067ec:	f016 0f04 	tst.w	r6, #4
 80067f0:	d025      	beq.n	800683e <I2C_Master_ISR_IT+0x7e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80067f2:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006800:	3301      	adds	r3, #1
 8006802:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8006804:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006806:	3b01      	subs	r3, #1
 8006808:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 800680a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800680c:	3b01      	subs	r3, #1
 800680e:	b29b      	uxth	r3, r3
 8006810:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006812:	f015 0f20 	tst.w	r5, #32
 8006816:	d003      	beq.n	8006820 <I2C_Master_ISR_IT+0x60>
 8006818:	f016 0f20 	tst.w	r6, #32
 800681c:	f040 8087 	bne.w	800692e <I2C_Master_ISR_IT+0x16e>
  __HAL_UNLOCK(hi2c);
 8006820:	2000      	movs	r0, #0
 8006822:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006826:	b002      	add	sp, #8
 8006828:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800682a:	6803      	ldr	r3, [r0, #0]
 800682c:	2210      	movs	r2, #16
 800682e:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006830:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006832:	f043 0304 	orr.w	r3, r3, #4
 8006836:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 8006838:	f7fd fa26 	bl	8003c88 <I2C_Flush_TXDR>
 800683c:	e7e9      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800683e:	f015 0f02 	tst.w	r5, #2
 8006842:	d011      	beq.n	8006868 <I2C_Master_ISR_IT+0xa8>
 8006844:	f016 0f02 	tst.w	r6, #2
 8006848:	d00e      	beq.n	8006868 <I2C_Master_ISR_IT+0xa8>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006854:	3301      	adds	r3, #1
 8006856:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8006858:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800685a:	3b01      	subs	r3, #1
 800685c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 800685e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006860:	3b01      	subs	r3, #1
 8006862:	b29b      	uxth	r3, r3
 8006864:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006866:	e7d4      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006868:	f015 0f80 	tst.w	r5, #128	; 0x80
 800686c:	d03f      	beq.n	80068ee <I2C_Master_ISR_IT+0x12e>
 800686e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8006872:	d0ce      	beq.n	8006812 <I2C_Master_ISR_IT+0x52>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	b35b      	cbz	r3, 80068d2 <I2C_Master_ISR_IT+0x112>
 800687a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800687c:	bb4b      	cbnz	r3, 80068d2 <I2C_Master_ISR_IT+0x112>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	6859      	ldr	r1, [r3, #4]
 8006882:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006886:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	2bff      	cmp	r3, #255	; 0xff
 800688c:	d80e      	bhi.n	80068ac <I2C_Master_ISR_IT+0xec>
        hi2c->XferSize = hi2c->XferCount;
 800688e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006890:	b292      	uxth	r2, r2
 8006892:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006896:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800689a:	d011      	beq.n	80068c0 <I2C_Master_ISR_IT+0x100>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800689c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800689e:	2000      	movs	r0, #0
 80068a0:	9000      	str	r0, [sp, #0]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	4620      	mov	r0, r4
 80068a6:	f7fd fa00 	bl	8003caa <I2C_TransferConfig>
 80068aa:	e7b2      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ac:	22ff      	movs	r2, #255	; 0xff
 80068ae:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068b0:	2300      	movs	r3, #0
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068b8:	4620      	mov	r0, r4
 80068ba:	f7fd f9f6 	bl	8003caa <I2C_TransferConfig>
 80068be:	e7a8      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068c0:	2300      	movs	r3, #0
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7fd f9ed 	bl	8003caa <I2C_TransferConfig>
 80068d0:	e79f      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80068da:	d103      	bne.n	80068e4 <I2C_Master_ISR_IT+0x124>
        I2C_ITMasterSeqCplt(hi2c);
 80068dc:	4620      	mov	r0, r4
 80068de:	f7ff fc51 	bl	8006184 <I2C_ITMasterSeqCplt>
 80068e2:	e796      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80068e4:	2140      	movs	r1, #64	; 0x40
 80068e6:	4620      	mov	r0, r4
 80068e8:	f7ff fd4c 	bl	8006384 <I2C_ITError>
 80068ec:	e791      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80068ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068f2:	d08e      	beq.n	8006812 <I2C_Master_ISR_IT+0x52>
 80068f4:	f016 0f40 	tst.w	r6, #64	; 0x40
 80068f8:	d08b      	beq.n	8006812 <I2C_Master_ISR_IT+0x52>
    if (hi2c->XferCount == 0U)
 80068fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	b98b      	cbnz	r3, 8006924 <I2C_Master_ISR_IT+0x164>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006908:	d183      	bne.n	8006812 <I2C_Master_ISR_IT+0x52>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800690a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800690c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006910:	d104      	bne.n	800691c <I2C_Master_ISR_IT+0x15c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006918:	605a      	str	r2, [r3, #4]
 800691a:	e77a      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
          I2C_ITMasterSeqCplt(hi2c);
 800691c:	4620      	mov	r0, r4
 800691e:	f7ff fc31 	bl	8006184 <I2C_ITMasterSeqCplt>
 8006922:	e776      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006924:	2140      	movs	r1, #64	; 0x40
 8006926:	4620      	mov	r0, r4
 8006928:	f7ff fd2c 	bl	8006384 <I2C_ITError>
 800692c:	e771      	b.n	8006812 <I2C_Master_ISR_IT+0x52>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800692e:	4629      	mov	r1, r5
 8006930:	4620      	mov	r0, r4
 8006932:	f7ff fed4 	bl	80066de <I2C_ITMasterCplt>
 8006936:	e773      	b.n	8006820 <I2C_Master_ISR_IT+0x60>
  __HAL_LOCK(hi2c);
 8006938:	2002      	movs	r0, #2
}
 800693a:	4770      	bx	lr

0800693c <I2C_Slave_ISR_DMA>:
{
 800693c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 800693e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006940:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006944:	2b01      	cmp	r3, #1
 8006946:	d065      	beq.n	8006a14 <I2C_Slave_ISR_DMA+0xd8>
 8006948:	4604      	mov	r4, r0
 800694a:	2301      	movs	r3, #1
 800694c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006950:	f011 0f10 	tst.w	r1, #16
 8006954:	d046      	beq.n	80069e4 <I2C_Slave_ISR_DMA+0xa8>
 8006956:	f012 0f10 	tst.w	r2, #16
 800695a:	d043      	beq.n	80069e4 <I2C_Slave_ISR_DMA+0xa8>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800695c:	0b93      	lsrs	r3, r2, #14
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800695e:	0bd2      	lsrs	r2, r2, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006960:	ea43 0002 	orr.w	r0, r3, r2
 8006964:	f010 0f01 	tst.w	r0, #1
 8006968:	d038      	beq.n	80069dc <I2C_Slave_ISR_DMA+0xa0>
      if (hi2c->hdmarx != NULL)
 800696a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800696c:	2800      	cmp	r0, #0
 800696e:	d053      	beq.n	8006a18 <I2C_Slave_ISR_DMA+0xdc>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006970:	f012 0f01 	tst.w	r2, #1
 8006974:	d050      	beq.n	8006a18 <I2C_Slave_ISR_DMA+0xdc>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006976:	6802      	ldr	r2, [r0, #0]
 8006978:	6852      	ldr	r2, [r2, #4]
 800697a:	fab2 f282 	clz	r2, r2
 800697e:	0952      	lsrs	r2, r2, #5
      if (hi2c->hdmatx != NULL)
 8006980:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006982:	b138      	cbz	r0, 8006994 <I2C_Slave_ISR_DMA+0x58>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006984:	f013 0f01 	tst.w	r3, #1
 8006988:	d004      	beq.n	8006994 <I2C_Slave_ISR_DMA+0x58>
 800698a:	e000      	b.n	800698e <I2C_Slave_ISR_DMA+0x52>
 800698c:	2200      	movs	r2, #0
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800698e:	6803      	ldr	r3, [r0, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b10b      	cbz	r3, 8006998 <I2C_Slave_ISR_DMA+0x5c>
      if (treatdmanack == 1U)
 8006994:	2a00      	cmp	r2, #0
 8006996:	d044      	beq.n	8006a22 <I2C_Slave_ISR_DMA+0xe6>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8006998:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b28      	cmp	r3, #40	; 0x28
 80069a0:	d008      	beq.n	80069b4 <I2C_Slave_ISR_DMA+0x78>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069a2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b29      	cmp	r3, #41	; 0x29
 80069aa:	d00a      	beq.n	80069c2 <I2C_Slave_ISR_DMA+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	2210      	movs	r2, #16
 80069b0:	61da      	str	r2, [r3, #28]
 80069b2:	e023      	b.n	80069fc <I2C_Slave_ISR_DMA+0xc0>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80069b4:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 80069b8:	d1f3      	bne.n	80069a2 <I2C_Slave_ISR_DMA+0x66>
          I2C_ITListenCplt(hi2c, ITFlags);
 80069ba:	4620      	mov	r0, r4
 80069bc:	f7ff fcac 	bl	8006318 <I2C_ITListenCplt>
 80069c0:	e01c      	b.n	80069fc <I2C_Slave_ISR_DMA+0xc0>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069c2:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80069c6:	d0f1      	beq.n	80069ac <I2C_Slave_ISR_DMA+0x70>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	2210      	movs	r2, #16
 80069cc:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 80069ce:	4620      	mov	r0, r4
 80069d0:	f7fd f95a 	bl	8003c88 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 80069d4:	4620      	mov	r0, r4
 80069d6:	f7ff fc01 	bl	80061dc <I2C_ITSlaveSeqCplt>
 80069da:	e00f      	b.n	80069fc <I2C_Slave_ISR_DMA+0xc0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	2210      	movs	r2, #16
 80069e0:	61da      	str	r2, [r3, #28]
 80069e2:	e00b      	b.n	80069fc <I2C_Slave_ISR_DMA+0xc0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069e4:	f011 0f08 	tst.w	r1, #8
 80069e8:	d002      	beq.n	80069f0 <I2C_Slave_ISR_DMA+0xb4>
 80069ea:	f012 0f08 	tst.w	r2, #8
 80069ee:	d109      	bne.n	8006a04 <I2C_Slave_ISR_DMA+0xc8>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80069f0:	f011 0f20 	tst.w	r1, #32
 80069f4:	d002      	beq.n	80069fc <I2C_Slave_ISR_DMA+0xc0>
 80069f6:	f012 0f20 	tst.w	r2, #32
 80069fa:	d107      	bne.n	8006a0c <I2C_Slave_ISR_DMA+0xd0>
  __HAL_UNLOCK(hi2c);
 80069fc:	2000      	movs	r0, #0
 80069fe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006a04:	4620      	mov	r0, r4
 8006a06:	f7ff fc38 	bl	800627a <I2C_ITAddrCplt>
 8006a0a:	e7f7      	b.n	80069fc <I2C_Slave_ISR_DMA+0xc0>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f7ff fd33 	bl	8006478 <I2C_ITSlaveCplt>
 8006a12:	e7f3      	b.n	80069fc <I2C_Slave_ISR_DMA+0xc0>
  __HAL_LOCK(hi2c);
 8006a14:	2002      	movs	r0, #2
 8006a16:	e7f4      	b.n	8006a02 <I2C_Slave_ISR_DMA+0xc6>
      if (hi2c->hdmatx != NULL)
 8006a18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006a1a:	b110      	cbz	r0, 8006a22 <I2C_Slave_ISR_DMA+0xe6>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006a1c:	f013 0f01 	tst.w	r3, #1
 8006a20:	d1b4      	bne.n	800698c <I2C_Slave_ISR_DMA+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	2210      	movs	r2, #16
 8006a26:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a2a:	f043 0304 	orr.w	r3, r3, #4
 8006a2e:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a30:	f035 7380 	bics.w	r3, r5, #16777216	; 0x1000000
 8006a34:	d1e2      	bne.n	80069fc <I2C_Slave_ISR_DMA+0xc0>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f7ff fca3 	bl	8006384 <I2C_ITError>
 8006a3e:	e7dd      	b.n	80069fc <I2C_Slave_ISR_DMA+0xc0>

08006a40 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8006a40:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	f000 8094 	beq.w	8006b72 <I2C_Master_ISR_DMA+0x132>
{
 8006a4a:	b510      	push	{r4, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8006a50:	2301      	movs	r3, #1
 8006a52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a56:	f011 0f10 	tst.w	r1, #16
 8006a5a:	d002      	beq.n	8006a62 <I2C_Master_ISR_DMA+0x22>
 8006a5c:	f012 0f10 	tst.w	r2, #16
 8006a60:	d133      	bne.n	8006aca <I2C_Master_ISR_DMA+0x8a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a62:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006a66:	d05a      	beq.n	8006b1e <I2C_Master_ISR_DMA+0xde>
 8006a68:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a6c:	d077      	beq.n	8006b5e <I2C_Master_ISR_DMA+0x11e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	6813      	ldr	r3, [r2, #0]
 8006a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a76:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8006a78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d040      	beq.n	8006b02 <I2C_Master_ISR_DMA+0xc2>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	6859      	ldr	r1, [r3, #4]
 8006a84:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2bff      	cmp	r3, #255	; 0xff
 8006a8e:	d92e      	bls.n	8006aee <I2C_Master_ISR_DMA+0xae>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a90:	23ff      	movs	r3, #255	; 0xff
 8006a92:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006a98:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	9000      	str	r0, [sp, #0]
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f7fd f902 	bl	8003caa <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8006aa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006aa8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ab0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b22      	cmp	r3, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	6813      	ldr	r3, [r2, #0]
 8006abc:	bf0c      	ite	eq
 8006abe:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006ac2:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	e00c      	b.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aca:	6803      	ldr	r3, [r0, #0]
 8006acc:	2210      	movs	r2, #16
 8006ace:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ad0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006ad2:	f043 0304 	orr.w	r3, r3, #4
 8006ad6:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ad8:	2112      	movs	r1, #18
 8006ada:	f7fd f901 	bl	8003ce0 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7fd f8d2 	bl	8003c88 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006aea:	b002      	add	sp, #8
 8006aec:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 8006aee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006af0:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006af2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
          xfermode = hi2c->XferOptions;
 8006af8:	bf14      	ite	ne
 8006afa:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
          xfermode = I2C_AUTOEND_MODE;
 8006afc:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8006b00:	e7ca      	b.n	8006a98 <I2C_Master_ISR_DMA+0x58>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006b0a:	d103      	bne.n	8006b14 <I2C_Master_ISR_DMA+0xd4>
        I2C_ITMasterSeqCplt(hi2c);
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f7ff fb39 	bl	8006184 <I2C_ITMasterSeqCplt>
 8006b12:	e7e7      	b.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b14:	2140      	movs	r1, #64	; 0x40
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7ff fc34 	bl	8006384 <I2C_ITError>
 8006b1c:	e7e2      	b.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b1e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006b22:	d01c      	beq.n	8006b5e <I2C_Master_ISR_DMA+0x11e>
 8006b24:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006b28:	d019      	beq.n	8006b5e <I2C_Master_ISR_DMA+0x11e>
    if (hi2c->XferCount == 0U)
 8006b2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	b98b      	cbnz	r3, 8006b54 <I2C_Master_ISR_DMA+0x114>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006b38:	d1d4      	bne.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006b3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b3c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006b40:	d104      	bne.n	8006b4c <I2C_Master_ISR_DMA+0x10c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	e7cb      	b.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
          I2C_ITMasterSeqCplt(hi2c);
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f7ff fb19 	bl	8006184 <I2C_ITMasterSeqCplt>
 8006b52:	e7c7      	b.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b54:	2140      	movs	r1, #64	; 0x40
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7ff fc14 	bl	8006384 <I2C_ITError>
 8006b5c:	e7c2      	b.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b5e:	f011 0f20 	tst.w	r1, #32
 8006b62:	d0bf      	beq.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
 8006b64:	f012 0f20 	tst.w	r2, #32
 8006b68:	d0bc      	beq.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7ff fdb7 	bl	80066de <I2C_ITMasterCplt>
 8006b70:	e7b8      	b.n	8006ae4 <I2C_Master_ISR_DMA+0xa4>
  __HAL_LOCK(hi2c);
 8006b72:	2002      	movs	r0, #2
}
 8006b74:	4770      	bx	lr

08006b76 <I2C_DMAError>:
{
 8006b76:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b78:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b7a:	6802      	ldr	r2, [r0, #0]
 8006b7c:	6853      	ldr	r3, [r2, #4]
 8006b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b82:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b84:	2110      	movs	r1, #16
 8006b86:	f7ff fbfd 	bl	8006384 <I2C_ITError>
}
 8006b8a:	bd08      	pop	{r3, pc}

08006b8c <I2C_DMAMasterTransmitCplt>:
{
 8006b8c:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b8e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b90:	6822      	ldr	r2, [r4, #0]
 8006b92:	6813      	ldr	r3, [r2, #0]
 8006b94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b98:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8006b9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	b1b3      	cbz	r3, 8006bce <I2C_DMAMasterTransmitCplt+0x42>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006ba0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006ba2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ba4:	4419      	add	r1, r3
 8006ba6:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ba8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2bff      	cmp	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bae:	bf8c      	ite	hi
 8006bb0:	23ff      	movhi	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8006bb2:	8d63      	ldrhls	r3, [r4, #42]	; 0x2a
 8006bb4:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8006bb6:	6822      	ldr	r2, [r4, #0]
 8006bb8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006bba:	3228      	adds	r2, #40	; 0x28
 8006bbc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006bbe:	f7fb fdde 	bl	800277e <HAL_DMA_Start_IT>
 8006bc2:	b948      	cbnz	r0, 8006bd8 <I2C_DMAMasterTransmitCplt+0x4c>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006bc4:	2112      	movs	r1, #18
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f7fd f88a 	bl	8003ce0 <I2C_Enable_IRQ>
}
 8006bcc:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006bce:	2112      	movs	r1, #18
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f7fd f885 	bl	8003ce0 <I2C_Enable_IRQ>
 8006bd6:	e7f9      	b.n	8006bcc <I2C_DMAMasterTransmitCplt+0x40>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006bd8:	2110      	movs	r1, #16
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f7ff fbd2 	bl	8006384 <I2C_ITError>
 8006be0:	e7f4      	b.n	8006bcc <I2C_DMAMasterTransmitCplt+0x40>

08006be2 <I2C_DMAMasterReceiveCplt>:
{
 8006be2:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006be4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	6813      	ldr	r3, [r2, #0]
 8006bea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bee:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8006bf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	b1b3      	cbz	r3, 8006c24 <I2C_DMAMasterReceiveCplt+0x42>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006bf6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006bf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006bfa:	441a      	add	r2, r3
 8006bfc:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2bff      	cmp	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c04:	bf8c      	ite	hi
 8006c06:	23ff      	movhi	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8006c08:	8d63      	ldrhls	r3, [r4, #42]	; 0x2a
 8006c0a:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8006c0c:	6821      	ldr	r1, [r4, #0]
 8006c0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c10:	3124      	adds	r1, #36	; 0x24
 8006c12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c14:	f7fb fdb3 	bl	800277e <HAL_DMA_Start_IT>
 8006c18:	b948      	cbnz	r0, 8006c2e <I2C_DMAMasterReceiveCplt+0x4c>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006c1a:	2112      	movs	r1, #18
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f7fd f85f 	bl	8003ce0 <I2C_Enable_IRQ>
}
 8006c22:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006c24:	2112      	movs	r1, #18
 8006c26:	4620      	mov	r0, r4
 8006c28:	f7fd f85a 	bl	8003ce0 <I2C_Enable_IRQ>
 8006c2c:	e7f9      	b.n	8006c22 <I2C_DMAMasterReceiveCplt+0x40>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006c2e:	2110      	movs	r1, #16
 8006c30:	4620      	mov	r0, r4
 8006c32:	f7ff fba7 	bl	8006384 <I2C_ITError>
 8006c36:	e7f4      	b.n	8006c22 <I2C_DMAMasterReceiveCplt+0x40>

08006c38 <HAL_I2C_ER_IRQHandler>:
{
 8006c38:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c3a:	6802      	ldr	r2, [r0, #0]
 8006c3c:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c3e:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c44:	d010      	beq.n	8006c68 <HAL_I2C_ER_IRQHandler+0x30>
 8006c46:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006c4a:	d02e      	beq.n	8006caa <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006c4c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006c4e:	f041 0101 	orr.w	r1, r1, #1
 8006c52:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c58:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c5a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c5e:	d109      	bne.n	8006c74 <HAL_I2C_ER_IRQHandler+0x3c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c60:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c64:	d111      	bne.n	8006c8a <HAL_I2C_ER_IRQHandler+0x52>
 8006c66:	e018      	b.n	8006c9a <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c68:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c6c:	d020      	beq.n	8006cb0 <HAL_I2C_ER_IRQHandler+0x78>
 8006c6e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006c72:	d012      	beq.n	8006c9a <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c76:	f042 0208 	orr.w	r2, r2, #8
 8006c7a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c7c:	6802      	ldr	r2, [r0, #0]
 8006c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c82:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c84:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c88:	d007      	beq.n	8006c9a <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006c8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006c8c:	f043 0302 	orr.w	r3, r3, #2
 8006c90:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c92:	6803      	ldr	r3, [r0, #0]
 8006c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c98:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8006c9a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006c9c:	f011 0f0b 	tst.w	r1, #11
 8006ca0:	d100      	bne.n	8006ca4 <HAL_I2C_ER_IRQHandler+0x6c>
}
 8006ca2:	bd08      	pop	{r3, pc}
    I2C_ITError(hi2c, tmperror);
 8006ca4:	f7ff fb6e 	bl	8006384 <I2C_ITError>
}
 8006ca8:	e7fb      	b.n	8006ca2 <HAL_I2C_ER_IRQHandler+0x6a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006caa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006cae:	d1f4      	bne.n	8006c9a <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006cb0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006cb4:	d0f1      	beq.n	8006c9a <HAL_I2C_ER_IRQHandler+0x62>
 8006cb6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006cba:	d0ee      	beq.n	8006c9a <HAL_I2C_ER_IRQHandler+0x62>
 8006cbc:	e7e5      	b.n	8006c8a <HAL_I2C_ER_IRQHandler+0x52>

08006cbe <I2C_DMAAbort>:
{
 8006cbe:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006cc0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8006cc2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8006cc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006cca:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ccc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b60      	cmp	r3, #96	; 0x60
 8006cd4:	d002      	beq.n	8006cdc <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 8006cd6:	f7ff fb53 	bl	8006380 <HAL_I2C_ErrorCallback>
}
 8006cda:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006cdc:	2320      	movs	r3, #32
 8006cde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ce2:	f7ff fb4e 	bl	8006382 <HAL_I2C_AbortCpltCallback>
 8006ce6:	e7f8      	b.n	8006cda <I2C_DMAAbort+0x1c>

08006ce8 <HAL_I2C_GetState>:
  return hi2c->State;
 8006ce8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8006cec:	4770      	bx	lr

08006cee <HAL_I2C_GetMode>:
  return hi2c->Mode;
 8006cee:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
}
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8006cf4:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d124      	bne.n	8006d4c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d02:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d022      	beq.n	8006d50 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d10:	2324      	movs	r3, #36	; 0x24
 8006d12:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d16:	6802      	ldr	r2, [r0, #0]
 8006d18:	6813      	ldr	r3, [r2, #0]
 8006d1a:	f023 0301 	bic.w	r3, r3, #1
 8006d1e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d20:	6802      	ldr	r2, [r0, #0]
 8006d22:	6813      	ldr	r3, [r2, #0]
 8006d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d28:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d2a:	6802      	ldr	r2, [r0, #0]
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	4319      	orrs	r1, r3
 8006d30:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d32:	6802      	ldr	r2, [r0, #0]
 8006d34:	6813      	ldr	r3, [r2, #0]
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d42:	2300      	movs	r3, #0
 8006d44:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006d48:	4618      	mov	r0, r3
 8006d4a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006d4c:	2002      	movs	r0, #2
 8006d4e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006d50:	2002      	movs	r0, #2
  }
}
 8006d52:	4770      	bx	lr

08006d54 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d54:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d122      	bne.n	8006da4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d5e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d020      	beq.n	8006da8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006d66:	2301      	movs	r3, #1
 8006d68:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d6c:	2324      	movs	r3, #36	; 0x24
 8006d6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d72:	6802      	ldr	r2, [r0, #0]
 8006d74:	6813      	ldr	r3, [r2, #0]
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d7c:	6802      	ldr	r2, [r0, #0]
 8006d7e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d84:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d88:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d8a:	6802      	ldr	r2, [r0, #0]
 8006d8c:	6813      	ldr	r3, [r2, #0]
 8006d8e:	f043 0301 	orr.w	r3, r3, #1
 8006d92:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d94:	2320      	movs	r3, #32
 8006d96:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006da0:	4618      	mov	r0, r3
 8006da2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006da4:	2002      	movs	r0, #2
 8006da6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006da8:	2002      	movs	r0, #2
  }
}
 8006daa:	4770      	bx	lr

08006dac <HAL_I2CEx_EnableWakeUp>:
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d120      	bne.n	8006df8 <HAL_I2CEx_EnableWakeUp+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006db6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d01e      	beq.n	8006dfc <HAL_I2CEx_EnableWakeUp+0x50>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dc4:	2324      	movs	r3, #36	; 0x24
 8006dc6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dca:	6802      	ldr	r2, [r0, #0]
 8006dcc:	6813      	ldr	r3, [r2, #0]
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	6013      	str	r3, [r2, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
 8006dd4:	6802      	ldr	r2, [r0, #0]
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ddc:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dde:	6802      	ldr	r2, [r0, #0]
 8006de0:	6813      	ldr	r3, [r2, #0]
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006de8:	2320      	movs	r3, #32
 8006dea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dee:	2300      	movs	r3, #0
 8006df0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006df4:	4618      	mov	r0, r3
 8006df6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006df8:	2002      	movs	r0, #2
 8006dfa:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006dfc:	2002      	movs	r0, #2
  }
}
 8006dfe:	4770      	bx	lr

08006e00 <HAL_I2CEx_DisableWakeUp>:
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d120      	bne.n	8006e4c <HAL_I2CEx_DisableWakeUp+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e0a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d01e      	beq.n	8006e50 <HAL_I2CEx_DisableWakeUp+0x50>
 8006e12:	2301      	movs	r3, #1
 8006e14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e18:	2324      	movs	r3, #36	; 0x24
 8006e1a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e1e:	6802      	ldr	r2, [r0, #0]
 8006e20:	6813      	ldr	r3, [r2, #0]
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	6013      	str	r3, [r2, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
 8006e28:	6802      	ldr	r2, [r0, #0]
 8006e2a:	6813      	ldr	r3, [r2, #0]
 8006e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e30:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e32:	6802      	ldr	r2, [r0, #0]
 8006e34:	6813      	ldr	r3, [r2, #0]
 8006e36:	f043 0301 	orr.w	r3, r3, #1
 8006e3a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e3c:	2320      	movs	r3, #32
 8006e3e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e42:	2300      	movs	r3, #0
 8006e44:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006e48:	4618      	mov	r0, r3
 8006e4a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006e4c:	2002      	movs	r0, #2
 8006e4e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006e50:	2002      	movs	r0, #2
  }
}
 8006e52:	4770      	bx	lr

08006e54 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006e54:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e56:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <HAL_I2CEx_EnableFastModePlus+0x24>)
 8006e58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	661a      	str	r2, [r3, #96]	; 0x60
 8006e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006e6a:	4a04      	ldr	r2, [pc, #16]	; (8006e7c <HAL_I2CEx_EnableFastModePlus+0x28>)
 8006e6c:	6853      	ldr	r3, [r2, #4]
 8006e6e:	4318      	orrs	r0, r3
 8006e70:	6050      	str	r0, [r2, #4]
}
 8006e72:	b002      	add	sp, #8
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	40010000 	.word	0x40010000

08006e80 <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006e80:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e82:	4b08      	ldr	r3, [pc, #32]	; (8006ea4 <HAL_I2CEx_DisableFastModePlus+0x24>)
 8006e84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e86:	f042 0201 	orr.w	r2, r2, #1
 8006e8a:	661a      	str	r2, [r3, #96]	; 0x60
 8006e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	9301      	str	r3, [sp, #4]
 8006e94:	9b01      	ldr	r3, [sp, #4]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006e96:	4a04      	ldr	r2, [pc, #16]	; (8006ea8 <HAL_I2CEx_DisableFastModePlus+0x28>)
 8006e98:	6853      	ldr	r3, [r2, #4]
 8006e9a:	ea23 0000 	bic.w	r0, r3, r0
 8006e9e:	6050      	str	r0, [r2, #4]
}
 8006ea0:	b002      	add	sp, #8
 8006ea2:	4770      	bx	lr
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	40010000 	.word	0x40010000

08006eac <HAL_PWR_DeInit>:
  * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
  __HAL_RCC_PWR_FORCE_RESET();
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <HAL_PWR_DeInit+0x14>)
 8006eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_PWR_RELEASE_RESET();
 8006eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006ebc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006ebe:	4770      	bx	lr
 8006ec0:	40021000 	.word	0x40021000

08006ec4 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ec4:	4a02      	ldr	r2, [pc, #8]	; (8006ed0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8006ec6:	6813      	ldr	r3, [r2, #0]
 8006ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ecc:	6013      	str	r3, [r2, #0]
}
 8006ece:	4770      	bx	lr
 8006ed0:	40007000 	.word	0x40007000

08006ed4 <HAL_PWR_DisableBkUpAccess>:
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ed4:	4a02      	ldr	r2, [pc, #8]	; (8006ee0 <HAL_PWR_DisableBkUpAccess+0xc>)
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006edc:	6013      	str	r3, [r2, #0]
}
 8006ede:	4770      	bx	lr
 8006ee0:	40007000 	.word	0x40007000

08006ee4 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006ee4:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <HAL_PWR_ConfigPVD+0x7c>)
 8006ee6:	6853      	ldr	r3, [r2, #4]
 8006ee8:	f023 030e 	bic.w	r3, r3, #14
 8006eec:	6801      	ldr	r1, [r0, #0]
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	6053      	str	r3, [r2, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8006ef2:	4b1c      	ldr	r3, [pc, #112]	; (8006f64 <HAL_PWR_ConfigPVD+0x80>)
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006efa:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f02:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f0a:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f12:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8006f14:	6843      	ldr	r3, [r0, #4]
 8006f16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006f1a:	d004      	beq.n	8006f26 <HAL_PWR_ConfigPVD+0x42>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8006f1c:	4a11      	ldr	r2, [pc, #68]	; (8006f64 <HAL_PWR_ConfigPVD+0x80>)
 8006f1e:	6813      	ldr	r3, [r2, #0]
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f24:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006f26:	6843      	ldr	r3, [r0, #4]
 8006f28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006f2c:	d004      	beq.n	8006f38 <HAL_PWR_ConfigPVD+0x54>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006f2e:	4a0d      	ldr	r2, [pc, #52]	; (8006f64 <HAL_PWR_ConfigPVD+0x80>)
 8006f30:	6853      	ldr	r3, [r2, #4]
 8006f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f36:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8006f38:	6843      	ldr	r3, [r0, #4]
 8006f3a:	f013 0f01 	tst.w	r3, #1
 8006f3e:	d004      	beq.n	8006f4a <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8006f40:	4a08      	ldr	r2, [pc, #32]	; (8006f64 <HAL_PWR_ConfigPVD+0x80>)
 8006f42:	6893      	ldr	r3, [r2, #8]
 8006f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f48:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8006f4a:	6843      	ldr	r3, [r0, #4]
 8006f4c:	f013 0f02 	tst.w	r3, #2
 8006f50:	d004      	beq.n	8006f5c <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006f52:	4a04      	ldr	r2, [pc, #16]	; (8006f64 <HAL_PWR_ConfigPVD+0x80>)
 8006f54:	68d3      	ldr	r3, [r2, #12]
 8006f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5a:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
}
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	4770      	bx	lr
 8006f60:	40007000 	.word	0x40007000
 8006f64:	40010400 	.word	0x40010400

08006f68 <HAL_PWR_EnablePVD>:
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006f68:	4a02      	ldr	r2, [pc, #8]	; (8006f74 <HAL_PWR_EnablePVD+0xc>)
 8006f6a:	6853      	ldr	r3, [r2, #4]
 8006f6c:	f043 0301 	orr.w	r3, r3, #1
 8006f70:	6053      	str	r3, [r2, #4]
}
 8006f72:	4770      	bx	lr
 8006f74:	40007000 	.word	0x40007000

08006f78 <HAL_PWR_DisablePVD>:
  * @brief Disable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006f78:	4a02      	ldr	r2, [pc, #8]	; (8006f84 <HAL_PWR_DisablePVD+0xc>)
 8006f7a:	6853      	ldr	r3, [r2, #4]
 8006f7c:	f023 0301 	bic.w	r3, r3, #1
 8006f80:	6053      	str	r3, [r2, #4]
}
 8006f82:	4770      	bx	lr
 8006f84:	40007000 	.word	0x40007000

08006f88 <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8006f88:	4a06      	ldr	r2, [pc, #24]	; (8006fa4 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8006f8a:	68d3      	ldr	r3, [r2, #12]
 8006f8c:	f000 011f 	and.w	r1, r0, #31
 8006f90:	ea23 0301 	bic.w	r3, r3, r1
 8006f94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006f98:	60d0      	str	r0, [r2, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8006f9a:	6893      	ldr	r3, [r2, #8]
 8006f9c:	4319      	orrs	r1, r3
 8006f9e:	6091      	str	r1, [r2, #8]


}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40007000 	.word	0x40007000

08006fa8 <HAL_PWR_DisableWakeUpPin>:
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8006fa8:	4a03      	ldr	r2, [pc, #12]	; (8006fb8 <HAL_PWR_DisableWakeUpPin+0x10>)
 8006faa:	6893      	ldr	r3, [r2, #8]
 8006fac:	f000 001f 	and.w	r0, r0, #31
 8006fb0:	ea23 0300 	bic.w	r3, r3, r0
 8006fb4:	6093      	str	r3, [r2, #8]
}
 8006fb6:	4770      	bx	lr
 8006fb8:	40007000 	.word	0x40007000

08006fbc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006fc0:	b9a0      	cbnz	r0, 8006fec <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8006fc2:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <HAL_PWR_EnterSLEEPMode+0x44>)
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006fca:	d10a      	bne.n	8006fe2 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006fcc:	4a0d      	ldr	r2, [pc, #52]	; (8007004 <HAL_PWR_EnterSLEEPMode+0x48>)
 8006fce:	6913      	ldr	r3, [r2, #16]
 8006fd0:	f023 0304 	bic.w	r3, r3, #4
 8006fd4:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006fd6:	2c01      	cmp	r4, #1
 8006fd8:	d010      	beq.n	8006ffc <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006fda:	bf40      	sev
    __WFE();
 8006fdc:	bf20      	wfe
    __WFE();
 8006fde:	bf20      	wfe
  }

}
 8006fe0:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006fe2:	f000 fba3 	bl	800772c <HAL_PWREx_DisableLowPowerRunMode>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d0f0      	beq.n	8006fcc <HAL_PWR_EnterSLEEPMode+0x10>
 8006fea:	e7f9      	b.n	8006fe0 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <HAL_PWR_EnterSLEEPMode+0x44>)
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006ff4:	d1ea      	bne.n	8006fcc <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8006ff6:	f000 fb91 	bl	800771c <HAL_PWREx_EnableLowPowerRunMode>
 8006ffa:	e7e7      	b.n	8006fcc <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8006ffc:	bf30      	wfi
 8006ffe:	e7ef      	b.n	8006fe0 <HAL_PWR_EnterSLEEPMode+0x24>
 8007000:	40007000 	.word	0x40007000
 8007004:	e000ed00 	.word	0xe000ed00

08007008 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007008:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 800700a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800700e:	d003      	beq.n	8007018 <HAL_PWR_EnterSTOPMode+0x10>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8007010:	4608      	mov	r0, r1
 8007012:	f000 fbb7 	bl	8007784 <HAL_PWREx_EnterSTOP0Mode>
  }
}
 8007016:	bd08      	pop	{r3, pc}
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8007018:	4608      	mov	r0, r1
 800701a:	f000 fbcf 	bl	80077bc <HAL_PWREx_EnterSTOP1Mode>
 800701e:	e7fa      	b.n	8007016 <HAL_PWR_EnterSTOPMode+0xe>

08007020 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8007020:	4a06      	ldr	r2, [pc, #24]	; (800703c <HAL_PWR_EnterSTANDBYMode+0x1c>)
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	f023 0307 	bic.w	r3, r3, #7
 8007028:	f043 0303 	orr.w	r3, r3, #3
 800702c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800702e:	4a04      	ldr	r2, [pc, #16]	; (8007040 <HAL_PWR_EnterSTANDBYMode+0x20>)
 8007030:	6913      	ldr	r3, [r2, #16]
 8007032:	f043 0304 	orr.w	r3, r3, #4
 8007036:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007038:	bf30      	wfi
}
 800703a:	4770      	bx	lr
 800703c:	40007000 	.word	0x40007000
 8007040:	e000ed00 	.word	0xe000ed00

08007044 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007044:	4a02      	ldr	r2, [pc, #8]	; (8007050 <HAL_PWR_EnableSleepOnExit+0xc>)
 8007046:	6913      	ldr	r3, [r2, #16]
 8007048:	f043 0302 	orr.w	r3, r3, #2
 800704c:	6113      	str	r3, [r2, #16]
}
 800704e:	4770      	bx	lr
 8007050:	e000ed00 	.word	0xe000ed00

08007054 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007054:	4a02      	ldr	r2, [pc, #8]	; (8007060 <HAL_PWR_DisableSleepOnExit+0xc>)
 8007056:	6913      	ldr	r3, [r2, #16]
 8007058:	f023 0302 	bic.w	r3, r3, #2
 800705c:	6113      	str	r3, [r2, #16]
}
 800705e:	4770      	bx	lr
 8007060:	e000ed00 	.word	0xe000ed00

08007064 <HAL_PWR_EnableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8007064:	4a02      	ldr	r2, [pc, #8]	; (8007070 <HAL_PWR_EnableSEVOnPend+0xc>)
 8007066:	6913      	ldr	r3, [r2, #16]
 8007068:	f043 0310 	orr.w	r3, r3, #16
 800706c:	6113      	str	r3, [r2, #16]
}
 800706e:	4770      	bx	lr
 8007070:	e000ed00 	.word	0xe000ed00

08007074 <HAL_PWR_DisableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8007074:	4a02      	ldr	r2, [pc, #8]	; (8007080 <HAL_PWR_DisableSEVOnPend+0xc>)
 8007076:	6913      	ldr	r3, [r2, #16]
 8007078:	f023 0310 	bic.w	r3, r3, #16
 800707c:	6113      	str	r3, [r2, #16]
}
 800707e:	4770      	bx	lr
 8007080:	e000ed00 	.word	0xe000ed00

08007084 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8007084:	4770      	bx	lr
	...

08007088 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007088:	4b02      	ldr	r3, [pc, #8]	; (8007094 <HAL_PWREx_GetVoltageRange+0xc>)
 800708a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800708c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40007000 	.word	0x40007000

08007098 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007098:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800709c:	d00f      	beq.n	80070be <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800709e:	4b21      	ldr	r3, [pc, #132]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070aa:	d038      	beq.n	800711e <HAL_PWREx_ControlVoltageScaling+0x86>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80070ac:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80070ae:	6813      	ldr	r3, [r2, #0]
 80070b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070b8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80070ba:	2000      	movs	r0, #0
 80070bc:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80070be:	4b19      	ldr	r3, [pc, #100]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ca:	d026      	beq.n	800711a <HAL_PWREx_ControlVoltageScaling+0x82>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070cc:	4a15      	ldr	r2, [pc, #84]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070d8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <HAL_PWREx_ControlVoltageScaling+0x90>)
 80070dc:	6819      	ldr	r1, [r3, #0]
 80070de:	2332      	movs	r3, #50	; 0x32
 80070e0:	fb03 f301 	mul.w	r3, r3, r1
 80070e4:	4911      	ldr	r1, [pc, #68]	; (800712c <HAL_PWREx_ControlVoltageScaling+0x94>)
 80070e6:	fba1 1303 	umull	r1, r3, r1, r3
 80070ea:	0c9b      	lsrs	r3, r3, #18
 80070ec:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070ee:	6952      	ldr	r2, [r2, #20]
 80070f0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80070f4:	d008      	beq.n	8007108 <HAL_PWREx_ControlVoltageScaling+0x70>
 80070f6:	b13b      	cbz	r3, 8007108 <HAL_PWREx_ControlVoltageScaling+0x70>
 80070f8:	490a      	ldr	r1, [pc, #40]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x8c>)
        wait_loop_index--;
 80070fa:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070fc:	694a      	ldr	r2, [r1, #20]
 80070fe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007102:	d001      	beq.n	8007108 <HAL_PWREx_ControlVoltageScaling+0x70>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1f8      	bne.n	80070fa <HAL_PWREx_ControlVoltageScaling+0x62>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007108:	4b06      	ldr	r3, [pc, #24]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8007110:	2b00      	cmp	r3, #0
 8007112:	bf14      	ite	ne
 8007114:	2003      	movne	r0, #3
 8007116:	2000      	moveq	r0, #0
 8007118:	4770      	bx	lr
 800711a:	2000      	movs	r0, #0
 800711c:	4770      	bx	lr
 800711e:	2000      	movs	r0, #0
}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40007000 	.word	0x40007000
 8007128:	20000008 	.word	0x20000008
 800712c:	431bde83 	.word	0x431bde83

08007130 <HAL_PWREx_EnableBatteryCharging>:
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));

  /* Specify resistor selection */
  MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 8007130:	4a05      	ldr	r2, [pc, #20]	; (8007148 <HAL_PWREx_EnableBatteryCharging+0x18>)
 8007132:	68d3      	ldr	r3, [r2, #12]
 8007134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007138:	4318      	orrs	r0, r3
 800713a:	60d0      	str	r0, [r2, #12]

  /* Enable battery charging */
  SET_BIT(PWR->CR4, PWR_CR4_VBE);
 800713c:	68d3      	ldr	r3, [r2, #12]
 800713e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007142:	60d3      	str	r3, [r2, #12]
}
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40007000 	.word	0x40007000

0800714c <HAL_PWREx_DisableBatteryCharging>:
  * @brief Disable battery charging.
  * @retval None
  */
void HAL_PWREx_DisableBatteryCharging(void)
{
  CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 800714c:	4a02      	ldr	r2, [pc, #8]	; (8007158 <HAL_PWREx_DisableBatteryCharging+0xc>)
 800714e:	68d3      	ldr	r3, [r2, #12]
 8007150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007154:	60d3      	str	r3, [r2, #12]
}
 8007156:	4770      	bx	lr
 8007158:	40007000 	.word	0x40007000

0800715c <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800715c:	4a02      	ldr	r2, [pc, #8]	; (8007168 <HAL_PWREx_EnableVddUSB+0xc>)
 800715e:	6853      	ldr	r3, [r2, #4]
 8007160:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007164:	6053      	str	r3, [r2, #4]
}
 8007166:	4770      	bx	lr
 8007168:	40007000 	.word	0x40007000

0800716c <HAL_PWREx_DisableVddUSB>:
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 800716c:	4a02      	ldr	r2, [pc, #8]	; (8007178 <HAL_PWREx_DisableVddUSB+0xc>)
 800716e:	6853      	ldr	r3, [r2, #4]
 8007170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007174:	6053      	str	r3, [r2, #4]
}
 8007176:	4770      	bx	lr
 8007178:	40007000 	.word	0x40007000

0800717c <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800717c:	4a02      	ldr	r2, [pc, #8]	; (8007188 <HAL_PWREx_EnableVddIO2+0xc>)
 800717e:	6853      	ldr	r3, [r2, #4]
 8007180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007184:	6053      	str	r3, [r2, #4]
}
 8007186:	4770      	bx	lr
 8007188:	40007000 	.word	0x40007000

0800718c <HAL_PWREx_DisableVddIO2>:
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 800718c:	4a02      	ldr	r2, [pc, #8]	; (8007198 <HAL_PWREx_DisableVddIO2+0xc>)
 800718e:	6853      	ldr	r3, [r2, #4]
 8007190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007194:	6053      	str	r3, [r2, #4]
}
 8007196:	4770      	bx	lr
 8007198:	40007000 	.word	0x40007000

0800719c <HAL_PWREx_EnableInternalWakeUpLine>:
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 800719c:	4a02      	ldr	r2, [pc, #8]	; (80071a8 <HAL_PWREx_EnableInternalWakeUpLine+0xc>)
 800719e:	6893      	ldr	r3, [r2, #8]
 80071a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a4:	6093      	str	r3, [r2, #8]
}
 80071a6:	4770      	bx	lr
 80071a8:	40007000 	.word	0x40007000

080071ac <HAL_PWREx_DisableInternalWakeUpLine>:
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 80071ac:	4a02      	ldr	r2, [pc, #8]	; (80071b8 <HAL_PWREx_DisableInternalWakeUpLine+0xc>)
 80071ae:	6893      	ldr	r3, [r2, #8]
 80071b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071b4:	6093      	str	r3, [r2, #8]
}
 80071b6:	4770      	bx	lr
 80071b8:	40007000 	.word	0x40007000

080071bc <HAL_PWREx_EnableGPIOPullUp>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80071bc:	2807      	cmp	r0, #7
 80071be:	d85d      	bhi.n	800727c <HAL_PWREx_EnableGPIOPullUp+0xc0>
 80071c0:	e8df f000 	tbb	[pc, r0]
 80071c4:	281e1204 	.word	0x281e1204
 80071c8:	50463c32 	.word	0x50463c32
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80071cc:	4b2c      	ldr	r3, [pc, #176]	; (8007280 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 80071ce:	6a18      	ldr	r0, [r3, #32]
 80071d0:	f421 4280 	bic.w	r2, r1, #16384	; 0x4000
 80071d4:	4302      	orrs	r2, r0
 80071d6:	621a      	str	r2, [r3, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80071d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071da:	f421 4120 	bic.w	r1, r1, #40960	; 0xa000
 80071de:	ea22 0101 	bic.w	r1, r2, r1
 80071e2:	6259      	str	r1, [r3, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 80071e4:	2000      	movs	r0, #0
       break;
 80071e6:	4770      	bx	lr
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 80071e8:	4b25      	ldr	r3, [pc, #148]	; (8007280 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 80071ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ec:	430a      	orrs	r2, r1
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80071f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f2:	f021 0110 	bic.w	r1, r1, #16
 80071f6:	ea22 0101 	bic.w	r1, r2, r1
 80071fa:	62d9      	str	r1, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 80071fc:	2000      	movs	r0, #0
       break;
 80071fe:	4770      	bx	lr
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 8007200:	4b1f      	ldr	r3, [pc, #124]	; (8007280 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8007202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007204:	430a      	orrs	r2, r1
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 8007208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800720a:	ea22 0101 	bic.w	r1, r2, r1
 800720e:	6359      	str	r1, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8007210:	2000      	movs	r0, #0
       break;
 8007212:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 8007214:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8007216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007218:	430a      	orrs	r2, r1
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 800721c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800721e:	ea22 0101 	bic.w	r1, r2, r1
 8007222:	63d9      	str	r1, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007224:	2000      	movs	r0, #0
       break;
 8007226:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 8007228:	4b15      	ldr	r3, [pc, #84]	; (8007280 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 800722a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800722c:	430a      	orrs	r2, r1
 800722e:	641a      	str	r2, [r3, #64]	; 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8007230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007232:	ea22 0101 	bic.w	r1, r2, r1
 8007236:	6459      	str	r1, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8007238:	2000      	movs	r0, #0
       break;
 800723a:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, GPIONumber);
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 800723e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007240:	430a      	orrs	r2, r1
 8007242:	649a      	str	r2, [r3, #72]	; 0x48
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8007244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007246:	ea22 0101 	bic.w	r1, r2, r1
 800724a:	64d9      	str	r1, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 800724c:	2000      	movs	r0, #0
       break;
 800724e:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, GPIONumber);
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8007252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007254:	430a      	orrs	r2, r1
 8007256:	651a      	str	r2, [r3, #80]	; 0x50
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8007258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800725a:	ea22 0101 	bic.w	r1, r2, r1
 800725e:	6559      	str	r1, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007260:	2000      	movs	r0, #0
       break;
 8007262:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
       SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8007266:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007268:	f001 0103 	and.w	r1, r1, #3
 800726c:	430a      	orrs	r2, r1
 800726e:	659a      	str	r2, [r3, #88]	; 0x58
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8007270:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007272:	ea22 0101 	bic.w	r1, r2, r1
 8007276:	65d9      	str	r1, [r3, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8007278:	2000      	movs	r0, #0
#endif
       break;
 800727a:	4770      	bx	lr
       SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 800727c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800727e:	4770      	bx	lr
 8007280:	40007000 	.word	0x40007000

08007284 <HAL_PWREx_DisableGPIOPullUp>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8007284:	2807      	cmp	r0, #7
 8007286:	d841      	bhi.n	800730c <HAL_PWREx_DisableGPIOPullUp+0x88>
 8007288:	e8df f000 	tbb	[pc, r0]
 800728c:	1b140d04 	.word	0x1b140d04
 8007290:	37302922 	.word	0x37302922
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8007294:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8007296:	6a13      	ldr	r3, [r2, #32]
 8007298:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800729c:	ea23 0101 	bic.w	r1, r3, r1
 80072a0:	6211      	str	r1, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80072a2:	2000      	movs	r0, #0
       break;
 80072a4:	4770      	bx	lr
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 80072a6:	4a1a      	ldr	r2, [pc, #104]	; (8007310 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80072aa:	ea23 0101 	bic.w	r1, r3, r1
 80072ae:	6291      	str	r1, [r2, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 80072b0:	2000      	movs	r0, #0
       break;
 80072b2:	4770      	bx	lr
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 80072b4:	4a16      	ldr	r2, [pc, #88]	; (8007310 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80072b8:	ea23 0101 	bic.w	r1, r3, r1
 80072bc:	6311      	str	r1, [r2, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80072be:	2000      	movs	r0, #0
       break;
 80072c0:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 80072c2:	4a13      	ldr	r2, [pc, #76]	; (8007310 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80072c6:	ea23 0101 	bic.w	r1, r3, r1
 80072ca:	6391      	str	r1, [r2, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80072cc:	2000      	movs	r0, #0
       break;
 80072ce:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 80072d0:	4a0f      	ldr	r2, [pc, #60]	; (8007310 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80072d4:	ea23 0101 	bic.w	r1, r3, r1
 80072d8:	6411      	str	r1, [r2, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 80072da:	2000      	movs	r0, #0
       break;
 80072dc:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 80072de:	4a0c      	ldr	r2, [pc, #48]	; (8007310 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072e0:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80072e2:	ea23 0101 	bic.w	r1, r3, r1
 80072e6:	6491      	str	r1, [r2, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80072e8:	2000      	movs	r0, #0
       break;
 80072ea:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 80072ec:	4a08      	ldr	r2, [pc, #32]	; (8007310 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072ee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80072f0:	ea23 0101 	bic.w	r1, r3, r1
 80072f4:	6511      	str	r1, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80072f6:	2000      	movs	r0, #0
       break;
 80072f8:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80072fa:	4a05      	ldr	r2, [pc, #20]	; (8007310 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 80072fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80072fe:	f001 0103 	and.w	r1, r1, #3
 8007302:	ea23 0101 	bic.w	r1, r3, r1
 8007306:	6591      	str	r1, [r2, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8007308:	2000      	movs	r0, #0
       break;
 800730a:	4770      	bx	lr
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
       status = HAL_ERROR;
 800730c:	2001      	movs	r0, #1
       break;
  }

  return status;
}
 800730e:	4770      	bx	lr
 8007310:	40007000 	.word	0x40007000

08007314 <HAL_PWREx_EnableGPIOPullDown>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8007314:	2807      	cmp	r0, #7
 8007316:	d85d      	bhi.n	80073d4 <HAL_PWREx_EnableGPIOPullDown+0xc0>
 8007318:	e8df f000 	tbb	[pc, r0]
 800731c:	281e1204 	.word	0x281e1204
 8007320:	50463c32 	.word	0x50463c32
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8007324:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8007326:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007328:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
 800732c:	4302      	orrs	r2, r0
 800732e:	625a      	str	r2, [r3, #36]	; 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007336:	ea22 0101 	bic.w	r1, r2, r1
 800733a:	6219      	str	r1, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800733c:	2000      	movs	r0, #0
       break;
 800733e:	4770      	bx	lr
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8007340:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8007342:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007344:	f021 0210 	bic.w	r2, r1, #16
 8007348:	4302      	orrs	r2, r0
 800734a:	62da      	str	r2, [r3, #44]	; 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 800734c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800734e:	ea22 0101 	bic.w	r1, r2, r1
 8007352:	6299      	str	r1, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8007354:	2000      	movs	r0, #0
       break;
 8007356:	4770      	bx	lr
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 8007358:	4b1f      	ldr	r3, [pc, #124]	; (80073d8 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 800735a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800735c:	430a      	orrs	r2, r1
 800735e:	635a      	str	r2, [r3, #52]	; 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8007360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007362:	ea22 0101 	bic.w	r1, r2, r1
 8007366:	6319      	str	r1, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8007368:	2000      	movs	r0, #0
       break;
 800736a:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 800736c:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 800736e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007370:	430a      	orrs	r2, r1
 8007372:	63da      	str	r2, [r3, #60]	; 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8007374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007376:	ea22 0101 	bic.w	r1, r2, r1
 800737a:	6399      	str	r1, [r3, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800737c:	2000      	movs	r0, #0
       break;
 800737e:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 8007380:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8007382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007384:	430a      	orrs	r2, r1
 8007386:	645a      	str	r2, [r3, #68]	; 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 8007388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800738a:	ea22 0101 	bic.w	r1, r2, r1
 800738e:	6419      	str	r1, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8007390:	2000      	movs	r0, #0
       break;
 8007392:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 8007394:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8007396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007398:	430a      	orrs	r2, r1
 800739a:	64da      	str	r2, [r3, #76]	; 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 800739c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800739e:	ea22 0101 	bic.w	r1, r2, r1
 80073a2:	6499      	str	r1, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80073a4:	2000      	movs	r0, #0
       break;
 80073a6:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 80073a8:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 80073aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ac:	430a      	orrs	r2, r1
 80073ae:	655a      	str	r2, [r3, #84]	; 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 80073b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073b2:	ea22 0101 	bic.w	r1, r2, r1
 80073b6:	6519      	str	r1, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80073b8:	2000      	movs	r0, #0
       break;
 80073ba:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80073bc:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 80073be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073c0:	f001 0103 	and.w	r1, r1, #3
 80073c4:	430a      	orrs	r2, r1
 80073c6:	65da      	str	r2, [r3, #92]	; 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80073c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073ca:	ea22 0101 	bic.w	r1, r2, r1
 80073ce:	6599      	str	r1, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 80073d0:	2000      	movs	r0, #0
       break;
 80073d2:	4770      	bx	lr
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 80073d4:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 80073d6:	4770      	bx	lr
 80073d8:	40007000 	.word	0x40007000

080073dc <HAL_PWREx_DisableGPIOPullDown>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80073dc:	2807      	cmp	r0, #7
 80073de:	d843      	bhi.n	8007468 <HAL_PWREx_DisableGPIOPullDown+0x8c>
 80073e0:	e8df f000 	tbb	[pc, r0]
 80073e4:	1d160d04 	.word	0x1d160d04
 80073e8:	39322b24 	.word	0x39322b24
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80073ec:	4a1f      	ldr	r2, [pc, #124]	; (800746c <HAL_PWREx_DisableGPIOPullDown+0x90>)
 80073ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80073f0:	f421 4120 	bic.w	r1, r1, #40960	; 0xa000
 80073f4:	ea23 0101 	bic.w	r1, r3, r1
 80073f8:	6251      	str	r1, [r2, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 80073fa:	2000      	movs	r0, #0
       break;
 80073fc:	4770      	bx	lr
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80073fe:	4a1b      	ldr	r2, [pc, #108]	; (800746c <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8007400:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007402:	f021 0110 	bic.w	r1, r1, #16
 8007406:	ea23 0101 	bic.w	r1, r3, r1
 800740a:	62d1      	str	r1, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 800740c:	2000      	movs	r0, #0
       break;
 800740e:	4770      	bx	lr
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 8007410:	4a16      	ldr	r2, [pc, #88]	; (800746c <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8007412:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007414:	ea23 0101 	bic.w	r1, r3, r1
 8007418:	6351      	str	r1, [r2, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 800741a:	2000      	movs	r0, #0
       break;
 800741c:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 800741e:	4a13      	ldr	r2, [pc, #76]	; (800746c <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8007420:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007422:	ea23 0101 	bic.w	r1, r3, r1
 8007426:	63d1      	str	r1, [r2, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007428:	2000      	movs	r0, #0
       break;
 800742a:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 800742c:	4a0f      	ldr	r2, [pc, #60]	; (800746c <HAL_PWREx_DisableGPIOPullDown+0x90>)
 800742e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007430:	ea23 0101 	bic.w	r1, r3, r1
 8007434:	6451      	str	r1, [r2, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8007436:	2000      	movs	r0, #0
       break;
 8007438:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 800743a:	4a0c      	ldr	r2, [pc, #48]	; (800746c <HAL_PWREx_DisableGPIOPullDown+0x90>)
 800743c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800743e:	ea23 0101 	bic.w	r1, r3, r1
 8007442:	64d1      	str	r1, [r2, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8007444:	2000      	movs	r0, #0
       break;
 8007446:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8007448:	4a08      	ldr	r2, [pc, #32]	; (800746c <HAL_PWREx_DisableGPIOPullDown+0x90>)
 800744a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800744c:	ea23 0101 	bic.w	r1, r3, r1
 8007450:	6551      	str	r1, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007452:	2000      	movs	r0, #0
       break;
 8007454:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8007456:	4a05      	ldr	r2, [pc, #20]	; (800746c <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8007458:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800745a:	f001 0103 	and.w	r1, r1, #3
 800745e:	ea23 0101 	bic.w	r1, r3, r1
 8007462:	65d1      	str	r1, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8007464:	2000      	movs	r0, #0
#endif
       break;
 8007466:	4770      	bx	lr
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8007468:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800746a:	4770      	bx	lr
 800746c:	40007000 	.word	0x40007000

08007470 <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8007470:	4a02      	ldr	r2, [pc, #8]	; (800747c <HAL_PWREx_EnablePullUpPullDownConfig+0xc>)
 8007472:	6893      	ldr	r3, [r2, #8]
 8007474:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007478:	6093      	str	r3, [r2, #8]
}
 800747a:	4770      	bx	lr
 800747c:	40007000 	.word	0x40007000

08007480 <HAL_PWREx_DisablePullUpPullDownConfig>:
  *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8007480:	4a02      	ldr	r2, [pc, #8]	; (800748c <HAL_PWREx_DisablePullUpPullDownConfig+0xc>)
 8007482:	6893      	ldr	r3, [r2, #8]
 8007484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007488:	6093      	str	r3, [r2, #8]
}
 800748a:	4770      	bx	lr
 800748c:	40007000 	.word	0x40007000

08007490 <HAL_PWREx_EnableSRAM2ContentRetention>:
  *         Standby mode and its content is kept.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8007490:	4a02      	ldr	r2, [pc, #8]	; (800749c <HAL_PWREx_EnableSRAM2ContentRetention+0xc>)
 8007492:	6893      	ldr	r3, [r2, #8]
 8007494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007498:	6093      	str	r3, [r2, #8]
}
 800749a:	4770      	bx	lr
 800749c:	40007000 	.word	0x40007000

080074a0 <HAL_PWREx_DisableSRAM2ContentRetention>:
  *        and its content is lost.
  * @retval None
  */
void HAL_PWREx_DisableSRAM2ContentRetention(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 80074a0:	4a02      	ldr	r2, [pc, #8]	; (80074ac <HAL_PWREx_DisableSRAM2ContentRetention+0xc>)
 80074a2:	6893      	ldr	r3, [r2, #8]
 80074a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a8:	6093      	str	r3, [r2, #8]
}
 80074aa:	4770      	bx	lr
 80074ac:	40007000 	.word	0x40007000

080074b0 <HAL_PWREx_EnablePVM1>:
  * @brief Enable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM1(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_1);
 80074b0:	4a02      	ldr	r2, [pc, #8]	; (80074bc <HAL_PWREx_EnablePVM1+0xc>)
 80074b2:	6853      	ldr	r3, [r2, #4]
 80074b4:	f043 0310 	orr.w	r3, r3, #16
 80074b8:	6053      	str	r3, [r2, #4]
}
 80074ba:	4770      	bx	lr
 80074bc:	40007000 	.word	0x40007000

080074c0 <HAL_PWREx_DisablePVM1>:
  * @brief Disable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM1(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 80074c0:	4a02      	ldr	r2, [pc, #8]	; (80074cc <HAL_PWREx_DisablePVM1+0xc>)
 80074c2:	6853      	ldr	r3, [r2, #4]
 80074c4:	f023 0310 	bic.w	r3, r3, #16
 80074c8:	6053      	str	r3, [r2, #4]
}
 80074ca:	4770      	bx	lr
 80074cc:	40007000 	.word	0x40007000

080074d0 <HAL_PWREx_EnablePVM2>:
  * @brief Enable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_EnablePVM2(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_2);
 80074d0:	4a02      	ldr	r2, [pc, #8]	; (80074dc <HAL_PWREx_EnablePVM2+0xc>)
 80074d2:	6853      	ldr	r3, [r2, #4]
 80074d4:	f043 0320 	orr.w	r3, r3, #32
 80074d8:	6053      	str	r3, [r2, #4]
}
 80074da:	4770      	bx	lr
 80074dc:	40007000 	.word	0x40007000

080074e0 <HAL_PWREx_DisablePVM2>:
  * @brief Disable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_DisablePVM2(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_2);
 80074e0:	4a02      	ldr	r2, [pc, #8]	; (80074ec <HAL_PWREx_DisablePVM2+0xc>)
 80074e2:	6853      	ldr	r3, [r2, #4]
 80074e4:	f023 0320 	bic.w	r3, r3, #32
 80074e8:	6053      	str	r3, [r2, #4]
}
 80074ea:	4770      	bx	lr
 80074ec:	40007000 	.word	0x40007000

080074f0 <HAL_PWREx_EnablePVM3>:
  * @brief Enable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_EnablePVM3(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_3);
 80074f0:	4a02      	ldr	r2, [pc, #8]	; (80074fc <HAL_PWREx_EnablePVM3+0xc>)
 80074f2:	6853      	ldr	r3, [r2, #4]
 80074f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f8:	6053      	str	r3, [r2, #4]
}
 80074fa:	4770      	bx	lr
 80074fc:	40007000 	.word	0x40007000

08007500 <HAL_PWREx_DisablePVM3>:
  * @brief Disable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_DisablePVM3(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_3);
 8007500:	4a02      	ldr	r2, [pc, #8]	; (800750c <HAL_PWREx_DisablePVM3+0xc>)
 8007502:	6853      	ldr	r3, [r2, #4]
 8007504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007508:	6053      	str	r3, [r2, #4]
}
 800750a:	4770      	bx	lr
 800750c:	40007000 	.word	0x40007000

08007510 <HAL_PWREx_EnablePVM4>:
  * @brief Enable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM4(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_4);
 8007510:	4a02      	ldr	r2, [pc, #8]	; (800751c <HAL_PWREx_EnablePVM4+0xc>)
 8007512:	6853      	ldr	r3, [r2, #4]
 8007514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007518:	6053      	str	r3, [r2, #4]
}
 800751a:	4770      	bx	lr
 800751c:	40007000 	.word	0x40007000

08007520 <HAL_PWREx_DisablePVM4>:
  * @brief Disable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM4(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_4);
 8007520:	4a02      	ldr	r2, [pc, #8]	; (800752c <HAL_PWREx_DisablePVM4+0xc>)
 8007522:	6853      	ldr	r3, [r2, #4]
 8007524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007528:	6053      	str	r3, [r2, #4]
}
 800752a:	4770      	bx	lr
 800752c:	40007000 	.word	0x40007000

08007530 <HAL_PWREx_ConfigPVM>:


  /* Configure EXTI 35 to 38 interrupts if so required:
     scan thru PVMType to detect which PVMx is set and
     configure the corresponding EXTI line accordingly. */
  switch (sConfigPVM->PVMType)
 8007530:	6803      	ldr	r3, [r0, #0]
 8007532:	2b20      	cmp	r3, #32
 8007534:	d078      	beq.n	8007628 <HAL_PWREx_ConfigPVM+0xf8>
 8007536:	d93d      	bls.n	80075b4 <HAL_PWREx_ConfigPVM+0x84>
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	f000 80ac 	beq.w	8007696 <HAL_PWREx_ConfigPVM+0x166>
 800753e:	2b80      	cmp	r3, #128	; 0x80
 8007540:	f040 80e0 	bne.w	8007704 <HAL_PWREx_ConfigPVM+0x1d4>
      }
      break;

    case PWR_PVM_4:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM4_EXTI_DISABLE_EVENT();
 8007544:	4b74      	ldr	r3, [pc, #464]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM4_EXTI_DISABLE_IT();
 800754e:	6a1a      	ldr	r2, [r3, #32]
 8007550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007554:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM4_EXTI_DISABLE_FALLING_EDGE();
 8007556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800755c:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM4_EXTI_DISABLE_RISING_EDGE();
 800755e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007564:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8007566:	6843      	ldr	r3, [r0, #4]
 8007568:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800756c:	d004      	beq.n	8007578 <HAL_PWREx_ConfigPVM+0x48>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_IT();
 800756e:	4a6a      	ldr	r2, [pc, #424]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007570:	6a13      	ldr	r3, [r2, #32]
 8007572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007576:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8007578:	6843      	ldr	r3, [r0, #4]
 800757a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800757e:	d004      	beq.n	800758a <HAL_PWREx_ConfigPVM+0x5a>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
 8007580:	4a65      	ldr	r2, [pc, #404]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007582:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007588:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 800758a:	6843      	ldr	r3, [r0, #4]
 800758c:	f013 0f01 	tst.w	r3, #1
 8007590:	d004      	beq.n	800759c <HAL_PWREx_ConfigPVM+0x6c>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
 8007592:	4a61      	ldr	r2, [pc, #388]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007594:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759a:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 800759c:	6843      	ldr	r3, [r0, #4]
 800759e:	f013 0f02 	tst.w	r3, #2
 80075a2:	f000 80b7 	beq.w	8007714 <HAL_PWREx_ConfigPVM+0x1e4>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
 80075a6:	4a5c      	ldr	r2, [pc, #368]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 80075a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80075aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 80075b0:	2000      	movs	r0, #0
 80075b2:	4770      	bx	lr
  switch (sConfigPVM->PVMType)
 80075b4:	2b10      	cmp	r3, #16
 80075b6:	f040 80a5 	bne.w	8007704 <HAL_PWREx_ConfigPVM+0x1d4>
      __HAL_PWR_PVM1_EXTI_DISABLE_EVENT();
 80075ba:	4b57      	ldr	r3, [pc, #348]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 80075bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075be:	f022 0208 	bic.w	r2, r2, #8
 80075c2:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM1_EXTI_DISABLE_IT();
 80075c4:	6a1a      	ldr	r2, [r3, #32]
 80075c6:	f022 0208 	bic.w	r2, r2, #8
 80075ca:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM1_EXTI_DISABLE_FALLING_EDGE();
 80075cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ce:	f022 0208 	bic.w	r2, r2, #8
 80075d2:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM1_EXTI_DISABLE_RISING_EDGE();
 80075d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d6:	f022 0208 	bic.w	r2, r2, #8
 80075da:	629a      	str	r2, [r3, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 80075dc:	6843      	ldr	r3, [r0, #4]
 80075de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80075e2:	d004      	beq.n	80075ee <HAL_PWREx_ConfigPVM+0xbe>
        __HAL_PWR_PVM1_EXTI_ENABLE_IT();
 80075e4:	4a4c      	ldr	r2, [pc, #304]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 80075e6:	6a13      	ldr	r3, [r2, #32]
 80075e8:	f043 0308 	orr.w	r3, r3, #8
 80075ec:	6213      	str	r3, [r2, #32]
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 80075ee:	6843      	ldr	r3, [r0, #4]
 80075f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80075f4:	d004      	beq.n	8007600 <HAL_PWREx_ConfigPVM+0xd0>
        __HAL_PWR_PVM1_EXTI_ENABLE_EVENT();
 80075f6:	4a48      	ldr	r2, [pc, #288]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 80075f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80075fa:	f043 0308 	orr.w	r3, r3, #8
 80075fe:	6253      	str	r3, [r2, #36]	; 0x24
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8007600:	6843      	ldr	r3, [r0, #4]
 8007602:	f013 0f01 	tst.w	r3, #1
 8007606:	d004      	beq.n	8007612 <HAL_PWREx_ConfigPVM+0xe2>
        __HAL_PWR_PVM1_EXTI_ENABLE_RISING_EDGE();
 8007608:	4a43      	ldr	r2, [pc, #268]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 800760a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800760c:	f043 0308 	orr.w	r3, r3, #8
 8007610:	6293      	str	r3, [r2, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8007612:	6843      	ldr	r3, [r0, #4]
 8007614:	f013 0f02 	tst.w	r3, #2
 8007618:	d076      	beq.n	8007708 <HAL_PWREx_ConfigPVM+0x1d8>
        __HAL_PWR_PVM1_EXTI_ENABLE_FALLING_EDGE();
 800761a:	4a3f      	ldr	r2, [pc, #252]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 800761c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800761e:	f043 0308 	orr.w	r3, r3, #8
 8007622:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8007624:	2000      	movs	r0, #0
 8007626:	4770      	bx	lr
      __HAL_PWR_PVM2_EXTI_DISABLE_EVENT();
 8007628:	4b3b      	ldr	r3, [pc, #236]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 800762a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800762c:	f022 0210 	bic.w	r2, r2, #16
 8007630:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM2_EXTI_DISABLE_IT();
 8007632:	6a1a      	ldr	r2, [r3, #32]
 8007634:	f022 0210 	bic.w	r2, r2, #16
 8007638:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM2_EXTI_DISABLE_FALLING_EDGE();
 800763a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763c:	f022 0210 	bic.w	r2, r2, #16
 8007640:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM2_EXTI_DISABLE_RISING_EDGE();
 8007642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007644:	f022 0210 	bic.w	r2, r2, #16
 8007648:	629a      	str	r2, [r3, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 800764a:	6843      	ldr	r3, [r0, #4]
 800764c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007650:	d004      	beq.n	800765c <HAL_PWREx_ConfigPVM+0x12c>
        __HAL_PWR_PVM2_EXTI_ENABLE_IT();
 8007652:	4a31      	ldr	r2, [pc, #196]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007654:	6a13      	ldr	r3, [r2, #32]
 8007656:	f043 0310 	orr.w	r3, r3, #16
 800765a:	6213      	str	r3, [r2, #32]
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 800765c:	6843      	ldr	r3, [r0, #4]
 800765e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007662:	d004      	beq.n	800766e <HAL_PWREx_ConfigPVM+0x13e>
        __HAL_PWR_PVM2_EXTI_ENABLE_EVENT();
 8007664:	4a2c      	ldr	r2, [pc, #176]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007666:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007668:	f043 0310 	orr.w	r3, r3, #16
 800766c:	6253      	str	r3, [r2, #36]	; 0x24
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 800766e:	6843      	ldr	r3, [r0, #4]
 8007670:	f013 0f01 	tst.w	r3, #1
 8007674:	d004      	beq.n	8007680 <HAL_PWREx_ConfigPVM+0x150>
        __HAL_PWR_PVM2_EXTI_ENABLE_RISING_EDGE();
 8007676:	4a28      	ldr	r2, [pc, #160]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007678:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800767a:	f043 0310 	orr.w	r3, r3, #16
 800767e:	6293      	str	r3, [r2, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8007680:	6843      	ldr	r3, [r0, #4]
 8007682:	f013 0f02 	tst.w	r3, #2
 8007686:	d041      	beq.n	800770c <HAL_PWREx_ConfigPVM+0x1dc>
        __HAL_PWR_PVM2_EXTI_ENABLE_FALLING_EDGE();
 8007688:	4a23      	ldr	r2, [pc, #140]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 800768a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800768c:	f043 0310 	orr.w	r3, r3, #16
 8007690:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8007692:	2000      	movs	r0, #0
 8007694:	4770      	bx	lr
      __HAL_PWR_PVM3_EXTI_DISABLE_EVENT();
 8007696:	4b20      	ldr	r3, [pc, #128]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 8007698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800769a:	f022 0220 	bic.w	r2, r2, #32
 800769e:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM3_EXTI_DISABLE_IT();
 80076a0:	6a1a      	ldr	r2, [r3, #32]
 80076a2:	f022 0220 	bic.w	r2, r2, #32
 80076a6:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM3_EXTI_DISABLE_FALLING_EDGE();
 80076a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076aa:	f022 0220 	bic.w	r2, r2, #32
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM3_EXTI_DISABLE_RISING_EDGE();
 80076b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076b2:	f022 0220 	bic.w	r2, r2, #32
 80076b6:	629a      	str	r2, [r3, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 80076b8:	6843      	ldr	r3, [r0, #4]
 80076ba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80076be:	d004      	beq.n	80076ca <HAL_PWREx_ConfigPVM+0x19a>
        __HAL_PWR_PVM3_EXTI_ENABLE_IT();
 80076c0:	4a15      	ldr	r2, [pc, #84]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 80076c2:	6a13      	ldr	r3, [r2, #32]
 80076c4:	f043 0320 	orr.w	r3, r3, #32
 80076c8:	6213      	str	r3, [r2, #32]
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 80076ca:	6843      	ldr	r3, [r0, #4]
 80076cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80076d0:	d004      	beq.n	80076dc <HAL_PWREx_ConfigPVM+0x1ac>
        __HAL_PWR_PVM3_EXTI_ENABLE_EVENT();
 80076d2:	4a11      	ldr	r2, [pc, #68]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 80076d4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80076d6:	f043 0320 	orr.w	r3, r3, #32
 80076da:	6253      	str	r3, [r2, #36]	; 0x24
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 80076dc:	6843      	ldr	r3, [r0, #4]
 80076de:	f013 0f01 	tst.w	r3, #1
 80076e2:	d004      	beq.n	80076ee <HAL_PWREx_ConfigPVM+0x1be>
        __HAL_PWR_PVM3_EXTI_ENABLE_RISING_EDGE();
 80076e4:	4a0c      	ldr	r2, [pc, #48]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 80076e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80076e8:	f043 0320 	orr.w	r3, r3, #32
 80076ec:	6293      	str	r3, [r2, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 80076ee:	6843      	ldr	r3, [r0, #4]
 80076f0:	f013 0f02 	tst.w	r3, #2
 80076f4:	d00c      	beq.n	8007710 <HAL_PWREx_ConfigPVM+0x1e0>
        __HAL_PWR_PVM3_EXTI_ENABLE_FALLING_EDGE();
 80076f6:	4a08      	ldr	r2, [pc, #32]	; (8007718 <HAL_PWREx_ConfigPVM+0x1e8>)
 80076f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076fa:	f043 0320 	orr.w	r3, r3, #32
 80076fe:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8007700:	2000      	movs	r0, #0
 8007702:	4770      	bx	lr
      }
      break;

    default:
      status = HAL_ERROR;
 8007704:	2001      	movs	r0, #1
 8007706:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8007708:	2000      	movs	r0, #0
 800770a:	4770      	bx	lr
 800770c:	2000      	movs	r0, #0
 800770e:	4770      	bx	lr
 8007710:	2000      	movs	r0, #0
 8007712:	4770      	bx	lr
 8007714:	2000      	movs	r0, #0
      break;
  }

  return status;
}
 8007716:	4770      	bx	lr
 8007718:	40010400 	.word	0x40010400

0800771c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800771c:	4a02      	ldr	r2, [pc, #8]	; (8007728 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007724:	6013      	str	r3, [r2, #0]
}
 8007726:	4770      	bx	lr
 8007728:	40007000 	.word	0x40007000

0800772c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800772c:	4a12      	ldr	r2, [pc, #72]	; (8007778 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 800772e:	6813      	ldr	r3, [r2, #0]
 8007730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007734:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007736:	4b11      	ldr	r3, [pc, #68]	; (800777c <HAL_PWREx_DisableLowPowerRunMode+0x50>)
 8007738:	6819      	ldr	r1, [r3, #0]
 800773a:	2332      	movs	r3, #50	; 0x32
 800773c:	fb03 f301 	mul.w	r3, r3, r1
 8007740:	490f      	ldr	r1, [pc, #60]	; (8007780 <HAL_PWREx_DisableLowPowerRunMode+0x54>)
 8007742:	fba1 1303 	umull	r1, r3, r1, r3
 8007746:	0c9b      	lsrs	r3, r3, #18
 8007748:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800774a:	6952      	ldr	r2, [r2, #20]
 800774c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007750:	d008      	beq.n	8007764 <HAL_PWREx_DisableLowPowerRunMode+0x38>
 8007752:	b13b      	cbz	r3, 8007764 <HAL_PWREx_DisableLowPowerRunMode+0x38>
 8007754:	4908      	ldr	r1, [pc, #32]	; (8007778 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
  {
    wait_loop_index--;
 8007756:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007758:	694a      	ldr	r2, [r1, #20]
 800775a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800775e:	d001      	beq.n	8007764 <HAL_PWREx_DisableLowPowerRunMode+0x38>
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f8      	bne.n	8007756 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8007764:	4b04      	ldr	r3, [pc, #16]	; (8007778 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	f403 7300 	and.w	r3, r3, #512	; 0x200
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800776c:	2b00      	cmp	r3, #0
}
 800776e:	bf14      	ite	ne
 8007770:	2003      	movne	r0, #3
 8007772:	2000      	moveq	r0, #0
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40007000 	.word	0x40007000
 800777c:	20000008 	.word	0x20000008
 8007780:	431bde83 	.word	0x431bde83

08007784 <HAL_PWREx_EnterSTOP0Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8007784:	4a0b      	ldr	r2, [pc, #44]	; (80077b4 <HAL_PWREx_EnterSTOP0Mode+0x30>)
 8007786:	6813      	ldr	r3, [r2, #0]
 8007788:	f023 0307 	bic.w	r3, r3, #7
 800778c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800778e:	4a0a      	ldr	r2, [pc, #40]	; (80077b8 <HAL_PWREx_EnterSTOP0Mode+0x34>)
 8007790:	6913      	ldr	r3, [r2, #16]
 8007792:	f043 0304 	orr.w	r3, r3, #4
 8007796:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007798:	2801      	cmp	r0, #1
 800779a:	d008      	beq.n	80077ae <HAL_PWREx_EnterSTOP0Mode+0x2a>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800779c:	bf40      	sev
    __WFE();
 800779e:	bf20      	wfe
    __WFE();
 80077a0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80077a2:	4a05      	ldr	r2, [pc, #20]	; (80077b8 <HAL_PWREx_EnterSTOP0Mode+0x34>)
 80077a4:	6913      	ldr	r3, [r2, #16]
 80077a6:	f023 0304 	bic.w	r3, r3, #4
 80077aa:	6113      	str	r3, [r2, #16]
}
 80077ac:	4770      	bx	lr
    __WFI();
 80077ae:	bf30      	wfi
 80077b0:	e7f7      	b.n	80077a2 <HAL_PWREx_EnterSTOP0Mode+0x1e>
 80077b2:	bf00      	nop
 80077b4:	40007000 	.word	0x40007000
 80077b8:	e000ed00 	.word	0xe000ed00

080077bc <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80077bc:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <HAL_PWREx_EnterSTOP1Mode+0x34>)
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	f023 0307 	bic.w	r3, r3, #7
 80077c4:	f043 0301 	orr.w	r3, r3, #1
 80077c8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80077ca:	4a0a      	ldr	r2, [pc, #40]	; (80077f4 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 80077cc:	6913      	ldr	r3, [r2, #16]
 80077ce:	f043 0304 	orr.w	r3, r3, #4
 80077d2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80077d4:	2801      	cmp	r0, #1
 80077d6:	d008      	beq.n	80077ea <HAL_PWREx_EnterSTOP1Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80077d8:	bf40      	sev
    __WFE();
 80077da:	bf20      	wfe
    __WFE();
 80077dc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80077de:	4a05      	ldr	r2, [pc, #20]	; (80077f4 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 80077e0:	6913      	ldr	r3, [r2, #16]
 80077e2:	f023 0304 	bic.w	r3, r3, #4
 80077e6:	6113      	str	r3, [r2, #16]
}
 80077e8:	4770      	bx	lr
    __WFI();
 80077ea:	bf30      	wfi
 80077ec:	e7f7      	b.n	80077de <HAL_PWREx_EnterSTOP1Mode+0x22>
 80077ee:	bf00      	nop
 80077f0:	40007000 	.word	0x40007000
 80077f4:	e000ed00 	.word	0xe000ed00

080077f8 <HAL_PWREx_EnterSTOP2Mode>:
{
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80077f8:	4a0c      	ldr	r2, [pc, #48]	; (800782c <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80077fa:	6813      	ldr	r3, [r2, #0]
 80077fc:	f023 0307 	bic.w	r3, r3, #7
 8007800:	f043 0302 	orr.w	r3, r3, #2
 8007804:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007806:	4a0a      	ldr	r2, [pc, #40]	; (8007830 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8007808:	6913      	ldr	r3, [r2, #16]
 800780a:	f043 0304 	orr.w	r3, r3, #4
 800780e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007810:	2801      	cmp	r0, #1
 8007812:	d008      	beq.n	8007826 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007814:	bf40      	sev
    __WFE();
 8007816:	bf20      	wfe
    __WFE();
 8007818:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800781a:	4a05      	ldr	r2, [pc, #20]	; (8007830 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800781c:	6913      	ldr	r3, [r2, #16]
 800781e:	f023 0304 	bic.w	r3, r3, #4
 8007822:	6113      	str	r3, [r2, #16]
}
 8007824:	4770      	bx	lr
    __WFI();
 8007826:	bf30      	wfi
 8007828:	e7f7      	b.n	800781a <HAL_PWREx_EnterSTOP2Mode+0x22>
 800782a:	bf00      	nop
 800782c:	40007000 	.word	0x40007000
 8007830:	e000ed00 	.word	0xe000ed00

08007834 <HAL_PWREx_EnterSHUTDOWNMode>:
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8007834:	4a06      	ldr	r2, [pc, #24]	; (8007850 <HAL_PWREx_EnterSHUTDOWNMode+0x1c>)
 8007836:	6813      	ldr	r3, [r2, #0]
 8007838:	f023 0307 	bic.w	r3, r3, #7
 800783c:	f043 0304 	orr.w	r3, r3, #4
 8007840:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007842:	4a04      	ldr	r2, [pc, #16]	; (8007854 <HAL_PWREx_EnterSHUTDOWNMode+0x20>)
 8007844:	6913      	ldr	r3, [r2, #16]
 8007846:	f043 0304 	orr.w	r3, r3, #4
 800784a:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800784c:	bf30      	wfi
}
 800784e:	4770      	bx	lr
 8007850:	40007000 	.word	0x40007000
 8007854:	e000ed00 	.word	0xe000ed00

08007858 <HAL_PWREx_PVM1Callback>:
__weak void HAL_PWREx_PVM1Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8007858:	4770      	bx	lr

0800785a <HAL_PWREx_PVM2Callback>:
__weak void HAL_PWREx_PVM2Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800785a:	4770      	bx	lr

0800785c <HAL_PWREx_PVM3Callback>:
__weak void HAL_PWREx_PVM3Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800785c:	4770      	bx	lr

0800785e <HAL_PWREx_PVM4Callback>:
__weak void HAL_PWREx_PVM4Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800785e:	4770      	bx	lr

08007860 <HAL_PWREx_PVD_PVM_IRQHandler>:
{
 8007860:	b508      	push	{r3, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8007862:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800786a:	d114      	bne.n	8007896 <HAL_PWREx_PVD_PVM_IRQHandler+0x36>
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 800786c:	4b19      	ldr	r3, [pc, #100]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800786e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007870:	f013 0f08 	tst.w	r3, #8
 8007874:	d116      	bne.n	80078a4 <HAL_PWREx_PVD_PVM_IRQHandler+0x44>
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8007876:	4b17      	ldr	r3, [pc, #92]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	f013 0f10 	tst.w	r3, #16
 800787e:	d117      	bne.n	80078b0 <HAL_PWREx_PVD_PVM_IRQHandler+0x50>
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8007880:	4b14      	ldr	r3, [pc, #80]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 8007882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007884:	f013 0f20 	tst.w	r3, #32
 8007888:	d118      	bne.n	80078bc <HAL_PWREx_PVD_PVM_IRQHandler+0x5c>
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800788a:	4b12      	ldr	r3, [pc, #72]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800788c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007892:	d119      	bne.n	80078c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x68>
}
 8007894:	bd08      	pop	{r3, pc}
    HAL_PWR_PVDCallback();
 8007896:	f7ff fbf5 	bl	8007084 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800789a:	4b0e      	ldr	r3, [pc, #56]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800789c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80078a0:	615a      	str	r2, [r3, #20]
 80078a2:	e7e3      	b.n	800786c <HAL_PWREx_PVD_PVM_IRQHandler+0xc>
    HAL_PWREx_PVM1Callback();
 80078a4:	f7ff ffd8 	bl	8007858 <HAL_PWREx_PVM1Callback>
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 80078a8:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 80078aa:	2208      	movs	r2, #8
 80078ac:	635a      	str	r2, [r3, #52]	; 0x34
 80078ae:	e7e2      	b.n	8007876 <HAL_PWREx_PVD_PVM_IRQHandler+0x16>
    HAL_PWREx_PVM2Callback();
 80078b0:	f7ff ffd3 	bl	800785a <HAL_PWREx_PVM2Callback>
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 80078b6:	2210      	movs	r2, #16
 80078b8:	635a      	str	r2, [r3, #52]	; 0x34
 80078ba:	e7e1      	b.n	8007880 <HAL_PWREx_PVD_PVM_IRQHandler+0x20>
    HAL_PWREx_PVM3Callback();
 80078bc:	f7ff ffce 	bl	800785c <HAL_PWREx_PVM3Callback>
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80078c0:	4b04      	ldr	r3, [pc, #16]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 80078c2:	2220      	movs	r2, #32
 80078c4:	635a      	str	r2, [r3, #52]	; 0x34
 80078c6:	e7e0      	b.n	800788a <HAL_PWREx_PVD_PVM_IRQHandler+0x2a>
    HAL_PWREx_PVM4Callback();
 80078c8:	f7ff ffc9 	bl	800785e <HAL_PWREx_PVM4Callback>
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 80078cc:	4b01      	ldr	r3, [pc, #4]	; (80078d4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 80078ce:	2240      	movs	r2, #64	; 0x40
 80078d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80078d2:	e7df      	b.n	8007894 <HAL_PWREx_PVD_PVM_IRQHandler+0x34>
 80078d4:	40010400 	.word	0x40010400

080078d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80078d8:	b530      	push	{r4, r5, lr}
 80078da:	b083      	sub	sp, #12
 80078dc:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80078de:	4b1e      	ldr	r3, [pc, #120]	; (8007958 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80078e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80078e6:	d00c      	beq.n	8007902 <RCC_SetFlashLatencyFromMSIRange+0x2a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80078e8:	f7ff fbce 	bl	8007088 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80078f0:	d018      	beq.n	8007924 <RCC_SetFlashLatencyFromMSIRange+0x4c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80078f2:	2c80      	cmp	r4, #128	; 0x80
 80078f4:	d81f      	bhi.n	8007936 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80078f6:	d02d      	beq.n	8007954 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80078f8:	2c70      	cmp	r4, #112	; 0x70
 80078fa:	bf14      	ite	ne
 80078fc:	2400      	movne	r4, #0
 80078fe:	2401      	moveq	r4, #1
 8007900:	e01a      	b.n	8007938 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8007902:	4d15      	ldr	r5, [pc, #84]	; (8007958 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8007904:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800790a:	65ab      	str	r3, [r5, #88]	; 0x58
 800790c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800790e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8007916:	f7ff fbb7 	bl	8007088 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800791a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800791c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007920:	65ab      	str	r3, [r5, #88]	; 0x58
 8007922:	e7e3      	b.n	80078ec <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8007924:	2c80      	cmp	r4, #128	; 0x80
 8007926:	d904      	bls.n	8007932 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8007928:	2ca0      	cmp	r4, #160	; 0xa0
 800792a:	bf8c      	ite	hi
 800792c:	2402      	movhi	r4, #2
 800792e:	2401      	movls	r4, #1
 8007930:	e002      	b.n	8007938 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007932:	2400      	movs	r4, #0
 8007934:	e000      	b.n	8007938 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8007936:	2403      	movs	r4, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007938:	4908      	ldr	r1, [pc, #32]	; (800795c <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800793a:	680b      	ldr	r3, [r1, #0]
 800793c:	f023 0307 	bic.w	r3, r3, #7
 8007940:	4323      	orrs	r3, r4
 8007942:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007944:	6808      	ldr	r0, [r1, #0]
 8007946:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800794a:	1b00      	subs	r0, r0, r4
 800794c:	bf18      	it	ne
 800794e:	2001      	movne	r0, #1
 8007950:	b003      	add	sp, #12
 8007952:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8007954:	2402      	movs	r4, #2
 8007956:	e7ef      	b.n	8007938 <RCC_SetFlashLatencyFromMSIRange+0x60>
 8007958:	40021000 	.word	0x40021000
 800795c:	40022000 	.word	0x40022000

08007960 <HAL_RCC_DeInit>:
{
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007962:	4a37      	ldr	r2, [pc, #220]	; (8007a40 <HAL_RCC_DeInit+0xe0>)
 8007964:	6813      	ldr	r3, [r2, #0]
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800796c:	f7fa fb94 	bl	8002098 <HAL_GetTick>
 8007970:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007972:	4c33      	ldr	r4, [pc, #204]	; (8007a40 <HAL_RCC_DeInit+0xe0>)
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	f013 0f02 	tst.w	r3, #2
 800797a:	d107      	bne.n	800798c <HAL_RCC_DeInit+0x2c>
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800797c:	f7fa fb8c 	bl	8002098 <HAL_GetTick>
 8007980:	1b40      	subs	r0, r0, r5
 8007982:	2802      	cmp	r0, #2
 8007984:	d9f6      	bls.n	8007974 <HAL_RCC_DeInit+0x14>
      return HAL_TIMEOUT;
 8007986:	2403      	movs	r4, #3
}
 8007988:	4620      	mov	r0, r4
 800798a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 800798c:	4a2c      	ldr	r2, [pc, #176]	; (8007a40 <HAL_RCC_DeInit+0xe0>)
 800798e:	6813      	ldr	r3, [r2, #0]
 8007990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007994:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007998:	6013      	str	r3, [r2, #0]
  CLEAR_REG(RCC->CFGR);
 800799a:	2300      	movs	r3, #0
 800799c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = MSI_VALUE;
 800799e:	4b29      	ldr	r3, [pc, #164]	; (8007a44 <HAL_RCC_DeInit+0xe4>)
 80079a0:	4a29      	ldr	r2, [pc, #164]	; (8007a48 <HAL_RCC_DeInit+0xe8>)
 80079a2:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80079a4:	4b29      	ldr	r3, [pc, #164]	; (8007a4c <HAL_RCC_DeInit+0xec>)
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	f7fa fb2c 	bl	8002004 <HAL_InitTick>
 80079ac:	4604      	mov	r4, r0
 80079ae:	b108      	cbz	r0, 80079b4 <HAL_RCC_DeInit+0x54>
    return HAL_ERROR;
 80079b0:	2401      	movs	r4, #1
 80079b2:	e7e9      	b.n	8007988 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 80079b4:	f7fa fb70 	bl	8002098 <HAL_GetTick>
 80079b8:	4607      	mov	r7, r0
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80079ba:	4d21      	ldr	r5, [pc, #132]	; (8007a40 <HAL_RCC_DeInit+0xe0>)
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079bc:	f241 3688 	movw	r6, #5000	; 0x1388
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80079c0:	68ab      	ldr	r3, [r5, #8]
 80079c2:	f013 0f0c 	tst.w	r3, #12
 80079c6:	d006      	beq.n	80079d6 <HAL_RCC_DeInit+0x76>
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079c8:	f7fa fb66 	bl	8002098 <HAL_GetTick>
 80079cc:	1bc0      	subs	r0, r0, r7
 80079ce:	42b0      	cmp	r0, r6
 80079d0:	d9f6      	bls.n	80079c0 <HAL_RCC_DeInit+0x60>
      return HAL_TIMEOUT;
 80079d2:	2403      	movs	r4, #3
 80079d4:	e7d8      	b.n	8007988 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 80079d6:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <HAL_RCC_DeInit+0xe0>)
 80079d8:	6811      	ldr	r1, [r2, #0]
 80079da:	4b1d      	ldr	r3, [pc, #116]	; (8007a50 <HAL_RCC_DeInit+0xf0>)
 80079dc:	400b      	ands	r3, r1
 80079de:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80079e0:	f7fa fb5a 	bl	8002098 <HAL_GetTick>
 80079e4:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 80079e6:	4d16      	ldr	r5, [pc, #88]	; (8007a40 <HAL_RCC_DeInit+0xe0>)
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	f013 5f28 	tst.w	r3, #704643072	; 0x2a000000
 80079ee:	d006      	beq.n	80079fe <HAL_RCC_DeInit+0x9e>
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079f0:	f7fa fb52 	bl	8002098 <HAL_GetTick>
 80079f4:	1b80      	subs	r0, r0, r6
 80079f6:	2802      	cmp	r0, #2
 80079f8:	d9f6      	bls.n	80079e8 <HAL_RCC_DeInit+0x88>
      return HAL_TIMEOUT;
 80079fa:	2403      	movs	r4, #3
 80079fc:	e7c4      	b.n	8007988 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->PLLCFGR);
 80079fe:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <HAL_RCC_DeInit+0xe0>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8007a04:	68d9      	ldr	r1, [r3, #12]
 8007a06:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007a0a:	60d9      	str	r1, [r3, #12]
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8007a0c:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8007a0e:	6919      	ldr	r1, [r3, #16]
 8007a10:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007a14:	6119      	str	r1, [r3, #16]
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8007a16:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 8007a18:	6959      	ldr	r1, [r3, #20]
 8007a1a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007a1e:	6159      	str	r1, [r3, #20]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8007a20:	6819      	ldr	r1, [r3, #0]
 8007a22:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007a26:	6019      	str	r1, [r3, #0]
  CLEAR_REG(RCC->CIER);
 8007a28:	619a      	str	r2, [r3, #24]
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a2e:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8007a30:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007a34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007a38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return HAL_OK;
 8007a3c:	e7a4      	b.n	8007988 <HAL_RCC_DeInit+0x28>
 8007a3e:	bf00      	nop
 8007a40:	40021000 	.word	0x40021000
 8007a44:	20000008 	.word	0x20000008
 8007a48:	003d0900 	.word	0x003d0900
 8007a4c:	20000010 	.word	0x20000010
 8007a50:	eafef4ff 	.word	0xeafef4ff

08007a54 <HAL_RCC_MCOConfig>:
{
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	460d      	mov	r5, r1
 8007a5a:	4616      	mov	r6, r2
  __MCO1_CLK_ENABLE();
 8007a5c:	4c0f      	ldr	r4, [pc, #60]	; (8007a9c <HAL_RCC_MCOConfig+0x48>)
 8007a5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007a60:	f043 0301 	orr.w	r3, r3, #1
 8007a64:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007a66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = MCO1_PIN;
 8007a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a74:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a76:	2302      	movs	r3, #2
 8007a78:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a7a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007a80:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007a82:	a901      	add	r1, sp, #4
 8007a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a88:	f7fb ff32 	bl	80038f0 <HAL_GPIO_Init>
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8007a8c:	68a1      	ldr	r1, [r4, #8]
 8007a8e:	f021 41ee 	bic.w	r1, r1, #1996488704	; 0x77000000
 8007a92:	4331      	orrs	r1, r6
 8007a94:	4329      	orrs	r1, r5
 8007a96:	60a1      	str	r1, [r4, #8]
}
 8007a98:	b006      	add	sp, #24
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	40021000 	.word	0x40021000

08007aa0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007aa0:	4a25      	ldr	r2, [pc, #148]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8007aa2:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007aa4:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007aa6:	f013 030c 	ands.w	r3, r3, #12
 8007aaa:	d00e      	beq.n	8007aca <HAL_RCC_GetSysClockFreq+0x2a>
 8007aac:	2b0c      	cmp	r3, #12
 8007aae:	d006      	beq.n	8007abe <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d03f      	beq.n	8007b34 <HAL_RCC_GetSysClockFreq+0x94>
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	4821      	ldr	r0, [pc, #132]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007ab8:	bf18      	it	ne
 8007aba:	2000      	movne	r0, #0
 8007abc:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007abe:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007ac2:	2a01      	cmp	r2, #1
 8007ac4:	d001      	beq.n	8007aca <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e012      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007aca:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8007acc:	6812      	ldr	r2, [r2, #0]
 8007ace:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ad2:	4a19      	ldr	r2, [pc, #100]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8007ad4:	bf07      	ittee	eq
 8007ad6:	f8d2 2094 	ldreq.w	r2, [r2, #148]	; 0x94
 8007ada:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ade:	6812      	ldrne	r2, [r2, #0]
 8007ae0:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8007ae4:	4916      	ldr	r1, [pc, #88]	; (8007b40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007ae6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007aea:	b323      	cbz	r3, 8007b36 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007aec:	2b0c      	cmp	r3, #12
 8007aee:	d11f      	bne.n	8007b30 <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007af0:	4b11      	ldr	r3, [pc, #68]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d017      	beq.n	8007b2c <HAL_RCC_GetSysClockFreq+0x8c>
      pllvco = HSE_VALUE;
 8007afc:	4a0f      	ldr	r2, [pc, #60]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	bf08      	it	eq
 8007b02:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b04:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8007b06:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b08:	68d9      	ldr	r1, [r3, #12]
 8007b0a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8007b0e:	fb00 f001 	mul.w	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b12:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b14:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007b18:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b1a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b1e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007b22:	3301      	adds	r3, #1
 8007b24:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8007b26:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b2a:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8007b2c:	4805      	ldr	r0, [pc, #20]	; (8007b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007b2e:	e7e9      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x64>
 8007b30:	2000      	movs	r0, #0
  return sysclockfreq;
 8007b32:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007b34:	4803      	ldr	r0, [pc, #12]	; (8007b44 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8007b36:	4770      	bx	lr
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	007a1200 	.word	0x007a1200
 8007b40:	08013bcc 	.word	0x08013bcc
 8007b44:	00f42400 	.word	0x00f42400

08007b48 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	f000 82db 	beq.w	8008104 <HAL_RCC_OscConfig+0x5bc>
{
 8007b4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b52:	b083      	sub	sp, #12
 8007b54:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b56:	4bad      	ldr	r3, [pc, #692]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007b58:	689d      	ldr	r5, [r3, #8]
 8007b5a:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b5e:	68de      	ldr	r6, [r3, #12]
 8007b60:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b64:	6803      	ldr	r3, [r0, #0]
 8007b66:	f013 0f10 	tst.w	r3, #16
 8007b6a:	d062      	beq.n	8007c32 <HAL_RCC_OscConfig+0xea>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007b6c:	b1ed      	cbz	r5, 8007baa <HAL_RCC_OscConfig+0x62>
 8007b6e:	2d0c      	cmp	r5, #12
 8007b70:	d019      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x5e>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007b72:	69a3      	ldr	r3, [r4, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80b6 	beq.w	8007ce6 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_MSI_ENABLE();
 8007b7a:	4aa4      	ldr	r2, [pc, #656]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007b7c:	6813      	ldr	r3, [r2, #0]
 8007b7e:	f043 0301 	orr.w	r3, r3, #1
 8007b82:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007b84:	f7fa fa88 	bl	8002098 <HAL_GetTick>
 8007b88:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b8a:	4fa0      	ldr	r7, [pc, #640]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f013 0f02 	tst.w	r3, #2
 8007b92:	f040 8095 	bne.w	8007cc0 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b96:	f7fa fa7f 	bl	8002098 <HAL_GetTick>
 8007b9a:	eba0 0008 	sub.w	r0, r0, r8
 8007b9e:	2802      	cmp	r0, #2
 8007ba0:	d9f4      	bls.n	8007b8c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e2ba      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007ba6:	2e01      	cmp	r6, #1
 8007ba8:	d1e3      	bne.n	8007b72 <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007baa:	4b98      	ldr	r3, [pc, #608]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f013 0f02 	tst.w	r3, #2
 8007bb2:	d003      	beq.n	8007bbc <HAL_RCC_OscConfig+0x74>
 8007bb4:	69a3      	ldr	r3, [r4, #24]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 82a7 	beq.w	800810a <HAL_RCC_OscConfig+0x5c2>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007bbc:	6a20      	ldr	r0, [r4, #32]
 8007bbe:	4b93      	ldr	r3, [pc, #588]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f013 0f08 	tst.w	r3, #8
 8007bc6:	4b91      	ldr	r3, [pc, #580]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007bc8:	bf12      	itee	ne
 8007bca:	681b      	ldrne	r3, [r3, #0]
 8007bcc:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8007bd0:	091b      	lsreq	r3, r3, #4
 8007bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bd6:	4298      	cmp	r0, r3
 8007bd8:	d959      	bls.n	8007c8e <HAL_RCC_OscConfig+0x146>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007bda:	f7ff fe7d 	bl	80078d8 <RCC_SetFlashLatencyFromMSIRange>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f040 8295 	bne.w	800810e <HAL_RCC_OscConfig+0x5c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007be4:	4b89      	ldr	r3, [pc, #548]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	f042 0208 	orr.w	r2, r2, #8
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007bf4:	6a21      	ldr	r1, [r4, #32]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	69e1      	ldr	r1, [r4, #28]
 8007bfe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007c02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007c06:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c08:	f7ff ff4a 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
 8007c0c:	4b7f      	ldr	r3, [pc, #508]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007c14:	4a7e      	ldr	r2, [pc, #504]	; (8007e10 <HAL_RCC_OscConfig+0x2c8>)
 8007c16:	5cd3      	ldrb	r3, [r2, r3]
 8007c18:	f003 031f 	and.w	r3, r3, #31
 8007c1c:	40d8      	lsrs	r0, r3
 8007c1e:	4b7d      	ldr	r3, [pc, #500]	; (8007e14 <HAL_RCC_OscConfig+0x2cc>)
 8007c20:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8007c22:	4b7d      	ldr	r3, [pc, #500]	; (8007e18 <HAL_RCC_OscConfig+0x2d0>)
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	f7fa f9ed 	bl	8002004 <HAL_InitTick>
        if(status != HAL_OK)
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f040 8275 	bne.w	800811c <HAL_RCC_OscConfig+0x5d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	f013 0f01 	tst.w	r3, #1
 8007c38:	d075      	beq.n	8007d26 <HAL_RCC_OscConfig+0x1de>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007c3a:	2d08      	cmp	r5, #8
 8007c3c:	d06a      	beq.n	8007d14 <HAL_RCC_OscConfig+0x1cc>
 8007c3e:	2d0c      	cmp	r5, #12
 8007c40:	d066      	beq.n	8007d10 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c42:	6863      	ldr	r3, [r4, #4]
 8007c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c48:	f000 808c 	beq.w	8007d64 <HAL_RCC_OscConfig+0x21c>
 8007c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c50:	f000 808e 	beq.w	8007d70 <HAL_RCC_OscConfig+0x228>
 8007c54:	4b6d      	ldr	r3, [pc, #436]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c64:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 808e 	beq.w	8007d8a <HAL_RCC_OscConfig+0x242>
        tickstart = HAL_GetTick();
 8007c6e:	f7fa fa13 	bl	8002098 <HAL_GetTick>
 8007c72:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c74:	4f65      	ldr	r7, [pc, #404]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007c7c:	d153      	bne.n	8007d26 <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c7e:	f7fa fa0b 	bl	8002098 <HAL_GetTick>
 8007c82:	eba0 0008 	sub.w	r0, r0, r8
 8007c86:	2864      	cmp	r0, #100	; 0x64
 8007c88:	d9f5      	bls.n	8007c76 <HAL_RCC_OscConfig+0x12e>
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e246      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c8e:	4b5f      	ldr	r3, [pc, #380]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	f042 0208 	orr.w	r2, r2, #8
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007c9e:	6a21      	ldr	r1, [r4, #32]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	69e1      	ldr	r1, [r4, #28]
 8007ca8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007cac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007cb0:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007cb2:	6a20      	ldr	r0, [r4, #32]
 8007cb4:	f7ff fe10 	bl	80078d8 <RCC_SetFlashLatencyFromMSIRange>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d0a5      	beq.n	8007c08 <HAL_RCC_OscConfig+0xc0>
            return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e22d      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cc0:	4b52      	ldr	r3, [pc, #328]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	f042 0208 	orr.w	r2, r2, #8
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007cd0:	6a21      	ldr	r1, [r4, #32]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	69e1      	ldr	r1, [r4, #28]
 8007cda:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007cde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007ce2:	605a      	str	r2, [r3, #4]
 8007ce4:	e7a5      	b.n	8007c32 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8007ce6:	4a49      	ldr	r2, [pc, #292]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007ce8:	6813      	ldr	r3, [r2, #0]
 8007cea:	f023 0301 	bic.w	r3, r3, #1
 8007cee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007cf0:	f7fa f9d2 	bl	8002098 <HAL_GetTick>
 8007cf4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007cf6:	4f45      	ldr	r7, [pc, #276]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	f013 0f02 	tst.w	r3, #2
 8007cfe:	d098      	beq.n	8007c32 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d00:	f7fa f9ca 	bl	8002098 <HAL_GetTick>
 8007d04:	eba0 0008 	sub.w	r0, r0, r8
 8007d08:	2802      	cmp	r0, #2
 8007d0a:	d9f5      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e205      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007d10:	2e03      	cmp	r6, #3
 8007d12:	d196      	bne.n	8007c42 <HAL_RCC_OscConfig+0xfa>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d14:	4b3d      	ldr	r3, [pc, #244]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007d1c:	d003      	beq.n	8007d26 <HAL_RCC_OscConfig+0x1de>
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 81f6 	beq.w	8008112 <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	f013 0f02 	tst.w	r3, #2
 8007d2c:	d050      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x288>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007d2e:	2d04      	cmp	r5, #4
 8007d30:	d03d      	beq.n	8007dae <HAL_RCC_OscConfig+0x266>
 8007d32:	2d0c      	cmp	r5, #12
 8007d34:	d039      	beq.n	8007daa <HAL_RCC_OscConfig+0x262>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d36:	68e3      	ldr	r3, [r4, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d078      	beq.n	8007e2e <HAL_RCC_OscConfig+0x2e6>
        __HAL_RCC_HSI_ENABLE();
 8007d3c:	4a33      	ldr	r2, [pc, #204]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007d3e:	6813      	ldr	r3, [r2, #0]
 8007d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d44:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007d46:	f7fa f9a7 	bl	8002098 <HAL_GetTick>
 8007d4a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d4c:	4e2f      	ldr	r6, [pc, #188]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007d4e:	6833      	ldr	r3, [r6, #0]
 8007d50:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007d54:	d162      	bne.n	8007e1c <HAL_RCC_OscConfig+0x2d4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d56:	f7fa f99f 	bl	8002098 <HAL_GetTick>
 8007d5a:	1bc0      	subs	r0, r0, r7
 8007d5c:	2802      	cmp	r0, #2
 8007d5e:	d9f6      	bls.n	8007d4e <HAL_RCC_OscConfig+0x206>
            return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e1db      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d64:	4a29      	ldr	r2, [pc, #164]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007d66:	6813      	ldr	r3, [r2, #0]
 8007d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	e77a      	b.n	8007c66 <HAL_RCC_OscConfig+0x11e>
 8007d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d74:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	e76d      	b.n	8007c66 <HAL_RCC_OscConfig+0x11e>
        tickstart = HAL_GetTick();
 8007d8a:	f7fa f985 	bl	8002098 <HAL_GetTick>
 8007d8e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d90:	4f1e      	ldr	r7, [pc, #120]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007d98:	d0c5      	beq.n	8007d26 <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d9a:	f7fa f97d 	bl	8002098 <HAL_GetTick>
 8007d9e:	eba0 0008 	sub.w	r0, r0, r8
 8007da2:	2864      	cmp	r0, #100	; 0x64
 8007da4:	d9f5      	bls.n	8007d92 <HAL_RCC_OscConfig+0x24a>
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e1b8      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007daa:	2e02      	cmp	r6, #2
 8007dac:	d1c3      	bne.n	8007d36 <HAL_RCC_OscConfig+0x1ee>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dae:	4b17      	ldr	r3, [pc, #92]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007db6:	d003      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x278>
 8007db8:	68e3      	ldr	r3, [r4, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 81ab 	beq.w	8008116 <HAL_RCC_OscConfig+0x5ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dc0:	4a12      	ldr	r2, [pc, #72]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007dc2:	6853      	ldr	r3, [r2, #4]
 8007dc4:	6921      	ldr	r1, [r4, #16]
 8007dc6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8007dca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007dce:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	f013 0f08 	tst.w	r3, #8
 8007dd6:	d055      	beq.n	8007e84 <HAL_RCC_OscConfig+0x33c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007dd8:	6963      	ldr	r3, [r4, #20]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d03b      	beq.n	8007e56 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 8007dde:	4a0b      	ldr	r2, [pc, #44]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007de0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007de4:	f043 0301 	orr.w	r3, r3, #1
 8007de8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007dec:	f7fa f954 	bl	8002098 <HAL_GetTick>
 8007df0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007df2:	4e06      	ldr	r6, [pc, #24]	; (8007e0c <HAL_RCC_OscConfig+0x2c4>)
 8007df4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8007df8:	f013 0f02 	tst.w	r3, #2
 8007dfc:	d142      	bne.n	8007e84 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dfe:	f7fa f94b 	bl	8002098 <HAL_GetTick>
 8007e02:	1bc0      	subs	r0, r0, r7
 8007e04:	2802      	cmp	r0, #2
 8007e06:	d9f5      	bls.n	8007df4 <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e187      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
 8007e0c:	40021000 	.word	0x40021000
 8007e10:	08013bb4 	.word	0x08013bb4
 8007e14:	20000008 	.word	0x20000008
 8007e18:	20000010 	.word	0x20000010
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e1c:	4ab6      	ldr	r2, [pc, #728]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007e1e:	6853      	ldr	r3, [r2, #4]
 8007e20:	6921      	ldr	r1, [r4, #16]
 8007e22:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8007e26:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007e2a:	6053      	str	r3, [r2, #4]
 8007e2c:	e7d0      	b.n	8007dd0 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_HSI_DISABLE();
 8007e2e:	4ab2      	ldr	r2, [pc, #712]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007e30:	6813      	ldr	r3, [r2, #0]
 8007e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e36:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007e38:	f7fa f92e 	bl	8002098 <HAL_GetTick>
 8007e3c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e3e:	4eae      	ldr	r6, [pc, #696]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007e40:	6833      	ldr	r3, [r6, #0]
 8007e42:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e46:	d0c3      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x288>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e48:	f7fa f926 	bl	8002098 <HAL_GetTick>
 8007e4c:	1bc0      	subs	r0, r0, r7
 8007e4e:	2802      	cmp	r0, #2
 8007e50:	d9f6      	bls.n	8007e40 <HAL_RCC_OscConfig+0x2f8>
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e162      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_LSI_DISABLE();
 8007e56:	4aa8      	ldr	r2, [pc, #672]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007e58:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007e5c:	f023 0301 	bic.w	r3, r3, #1
 8007e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007e64:	f7fa f918 	bl	8002098 <HAL_GetTick>
 8007e68:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e6a:	4ea3      	ldr	r6, [pc, #652]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007e6c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8007e70:	f013 0f02 	tst.w	r3, #2
 8007e74:	d006      	beq.n	8007e84 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e76:	f7fa f90f 	bl	8002098 <HAL_GetTick>
 8007e7a:	1bc0      	subs	r0, r0, r7
 8007e7c:	2802      	cmp	r0, #2
 8007e7e:	d9f5      	bls.n	8007e6c <HAL_RCC_OscConfig+0x324>
          return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e14b      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	f013 0f04 	tst.w	r3, #4
 8007e8a:	d07d      	beq.n	8007f88 <HAL_RCC_OscConfig+0x440>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007e8c:	4b9a      	ldr	r3, [pc, #616]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e90:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007e94:	d10b      	bne.n	8007eae <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e96:	4b98      	ldr	r3, [pc, #608]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007e98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e9e:	659a      	str	r2, [r3, #88]	; 0x58
 8007ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007eaa:	2601      	movs	r6, #1
 8007eac:	e000      	b.n	8007eb0 <HAL_RCC_OscConfig+0x368>
    FlagStatus       pwrclkchanged = RESET;
 8007eae:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eb0:	4b92      	ldr	r3, [pc, #584]	; (80080fc <HAL_RCC_OscConfig+0x5b4>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007eb8:	d027      	beq.n	8007f0a <HAL_RCC_OscConfig+0x3c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007eba:	68a3      	ldr	r3, [r4, #8]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d039      	beq.n	8007f34 <HAL_RCC_OscConfig+0x3ec>
 8007ec0:	2b05      	cmp	r3, #5
 8007ec2:	d03f      	beq.n	8007f44 <HAL_RCC_OscConfig+0x3fc>
 8007ec4:	4b8c      	ldr	r3, [pc, #560]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007ec6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007eca:	f022 0201 	bic.w	r2, r2, #1
 8007ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007ed2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007ed6:	f022 0204 	bic.w	r2, r2, #4
 8007eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ede:	68a3      	ldr	r3, [r4, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d03d      	beq.n	8007f60 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8007ee4:	f7fa f8d8 	bl	8002098 <HAL_GetTick>
 8007ee8:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eea:	4f83      	ldr	r7, [pc, #524]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eec:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ef4:	f013 0f02 	tst.w	r3, #2
 8007ef8:	d145      	bne.n	8007f86 <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007efa:	f7fa f8cd 	bl	8002098 <HAL_GetTick>
 8007efe:	eba0 0009 	sub.w	r0, r0, r9
 8007f02:	4540      	cmp	r0, r8
 8007f04:	d9f4      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e108      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f0a:	4a7c      	ldr	r2, [pc, #496]	; (80080fc <HAL_RCC_OscConfig+0x5b4>)
 8007f0c:	6813      	ldr	r3, [r2, #0]
 8007f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f12:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007f14:	f7fa f8c0 	bl	8002098 <HAL_GetTick>
 8007f18:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f1a:	4f78      	ldr	r7, [pc, #480]	; (80080fc <HAL_RCC_OscConfig+0x5b4>)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007f22:	d1ca      	bne.n	8007eba <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f24:	f7fa f8b8 	bl	8002098 <HAL_GetTick>
 8007f28:	eba0 0008 	sub.w	r0, r0, r8
 8007f2c:	2802      	cmp	r0, #2
 8007f2e:	d9f5      	bls.n	8007f1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e0f3      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f34:	4a70      	ldr	r2, [pc, #448]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007f36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007f3a:	f043 0301 	orr.w	r3, r3, #1
 8007f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f42:	e7cc      	b.n	8007ede <HAL_RCC_OscConfig+0x396>
 8007f44:	4b6c      	ldr	r3, [pc, #432]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007f46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007f4a:	f042 0204 	orr.w	r2, r2, #4
 8007f4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007f52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007f56:	f042 0201 	orr.w	r2, r2, #1
 8007f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007f5e:	e7be      	b.n	8007ede <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8007f60:	f7fa f89a 	bl	8002098 <HAL_GetTick>
 8007f64:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f66:	4f64      	ldr	r7, [pc, #400]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f68:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f70:	f013 0f02 	tst.w	r3, #2
 8007f74:	d007      	beq.n	8007f86 <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f76:	f7fa f88f 	bl	8002098 <HAL_GetTick>
 8007f7a:	eba0 0009 	sub.w	r0, r0, r9
 8007f7e:	4540      	cmp	r0, r8
 8007f80:	d9f4      	bls.n	8007f6c <HAL_RCC_OscConfig+0x424>
          return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e0ca      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
    if(pwrclkchanged == SET)
 8007f86:	bb5e      	cbnz	r6, 8007fe0 <HAL_RCC_OscConfig+0x498>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 80c5 	beq.w	800811a <HAL_RCC_OscConfig+0x5d2>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f90:	2d0c      	cmp	r5, #12
 8007f92:	d076      	beq.n	8008082 <HAL_RCC_OscConfig+0x53a>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d029      	beq.n	8007fec <HAL_RCC_OscConfig+0x4a4>
        __HAL_RCC_PLL_DISABLE();
 8007f98:	4b57      	ldr	r3, [pc, #348]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007fa0:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8007fa8:	d104      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007faa:	4a53      	ldr	r2, [pc, #332]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007fac:	68d3      	ldr	r3, [r2, #12]
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007fb4:	4a50      	ldr	r2, [pc, #320]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007fb6:	68d3      	ldr	r3, [r2, #12]
 8007fb8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fc0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8007fc2:	f7fa f869 	bl	8002098 <HAL_GetTick>
 8007fc6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fc8:	4c4b      	ldr	r4, [pc, #300]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007fd0:	d055      	beq.n	800807e <HAL_RCC_OscConfig+0x536>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fd2:	f7fa f861 	bl	8002098 <HAL_GetTick>
 8007fd6:	1b40      	subs	r0, r0, r5
 8007fd8:	2802      	cmp	r0, #2
 8007fda:	d9f6      	bls.n	8007fca <HAL_RCC_OscConfig+0x482>
            return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e09d      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fe0:	4a45      	ldr	r2, [pc, #276]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007fe2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8007fea:	e7cd      	b.n	8007f88 <HAL_RCC_OscConfig+0x440>
        __HAL_RCC_PLL_DISABLE();
 8007fec:	4a42      	ldr	r2, [pc, #264]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007fee:	6813      	ldr	r3, [r2, #0]
 8007ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ff4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007ff6:	f7fa f84f 	bl	8002098 <HAL_GetTick>
 8007ffa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ffc:	4d3e      	ldr	r5, [pc, #248]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8007ffe:	682b      	ldr	r3, [r5, #0]
 8008000:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008004:	d006      	beq.n	8008014 <HAL_RCC_OscConfig+0x4cc>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008006:	f7fa f847 	bl	8002098 <HAL_GetTick>
 800800a:	1b80      	subs	r0, r0, r6
 800800c:	2802      	cmp	r0, #2
 800800e:	d9f6      	bls.n	8007ffe <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e083      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008014:	4a38      	ldr	r2, [pc, #224]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8008016:	68d1      	ldr	r1, [r2, #12]
 8008018:	4b39      	ldr	r3, [pc, #228]	; (8008100 <HAL_RCC_OscConfig+0x5b8>)
 800801a:	400b      	ands	r3, r1
 800801c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800801e:	430b      	orrs	r3, r1
 8008020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008022:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008026:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008028:	3901      	subs	r1, #1
 800802a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800802e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008030:	0909      	lsrs	r1, r1, #4
 8008032:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8008036:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008038:	0849      	lsrs	r1, r1, #1
 800803a:	3901      	subs	r1, #1
 800803c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8008040:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008042:	0849      	lsrs	r1, r1, #1
 8008044:	3901      	subs	r1, #1
 8008046:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800804a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800804c:	6813      	ldr	r3, [r2, #0]
 800804e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008052:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008054:	68d3      	ldr	r3, [r2, #12]
 8008056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800805a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800805c:	f7fa f81c 	bl	8002098 <HAL_GetTick>
 8008060:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008062:	4c25      	ldr	r4, [pc, #148]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800806a:	d106      	bne.n	800807a <HAL_RCC_OscConfig+0x532>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800806c:	f7fa f814 	bl	8002098 <HAL_GetTick>
 8008070:	1b40      	subs	r0, r0, r5
 8008072:	2802      	cmp	r0, #2
 8008074:	d9f6      	bls.n	8008064 <HAL_RCC_OscConfig+0x51c>
            return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e050      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
  return HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	e04e      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
 800807e:	2300      	movs	r3, #0
 8008080:	e04c      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008082:	2b01      	cmp	r3, #1
 8008084:	d04e      	beq.n	8008124 <HAL_RCC_OscConfig+0x5dc>
        pll_config = RCC->PLLCFGR;
 8008086:	4b1c      	ldr	r3, [pc, #112]	; (80080f8 <HAL_RCC_OscConfig+0x5b0>)
 8008088:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800808a:	f003 0103 	and.w	r1, r3, #3
 800808e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008090:	4291      	cmp	r1, r2
 8008092:	d001      	beq.n	8008098 <HAL_RCC_OscConfig+0x550>
          return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e041      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008098:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800809c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800809e:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080a0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80080a4:	d001      	beq.n	80080aa <HAL_RCC_OscConfig+0x562>
          return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e038      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80080ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080b0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80080b4:	d001      	beq.n	80080ba <HAL_RCC_OscConfig+0x572>
          return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e030      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80080ba:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80080be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080c0:	3a07      	subs	r2, #7
 80080c2:	bf18      	it	ne
 80080c4:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080c6:	4291      	cmp	r1, r2
 80080c8:	d001      	beq.n	80080ce <HAL_RCC_OscConfig+0x586>
          return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e026      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080ce:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80080d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80080d4:	0852      	lsrs	r2, r2, #1
 80080d6:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80080d8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80080dc:	d001      	beq.n	80080e2 <HAL_RCC_OscConfig+0x59a>
          return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e01c      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80080e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080e4:	0852      	lsrs	r2, r2, #1
 80080e6:	3a01      	subs	r2, #1
 80080e8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080ec:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80080f0:	bf14      	ite	ne
 80080f2:	2301      	movne	r3, #1
 80080f4:	2300      	moveq	r3, #0
 80080f6:	e011      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
 80080f8:	40021000 	.word	0x40021000
 80080fc:	40007000 	.word	0x40007000
 8008100:	f99d808c 	.word	0xf99d808c
 8008104:	2301      	movs	r3, #1
}
 8008106:	4618      	mov	r0, r3
 8008108:	4770      	bx	lr
        return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e006      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
            return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e004      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e002      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e000      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>
  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	b003      	add	sp, #12
 8008120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e7f9      	b.n	800811c <HAL_RCC_OscConfig+0x5d4>

08008128 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008128:	2800      	cmp	r0, #0
 800812a:	f000 809e 	beq.w	800826a <HAL_RCC_ClockConfig+0x142>
{
 800812e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008134:	4b4f      	ldr	r3, [pc, #316]	; (8008274 <HAL_RCC_ClockConfig+0x14c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	428b      	cmp	r3, r1
 800813e:	d20d      	bcs.n	800815c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008140:	4a4c      	ldr	r2, [pc, #304]	; (8008274 <HAL_RCC_ClockConfig+0x14c>)
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	f023 0307 	bic.w	r3, r3, #7
 8008148:	430b      	orrs	r3, r1
 800814a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800814c:	6813      	ldr	r3, [r2, #0]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	428b      	cmp	r3, r1
 8008154:	d002      	beq.n	800815c <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
 8008156:	2001      	movs	r0, #1
}
 8008158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815c:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	f013 0f01 	tst.w	r3, #1
 8008164:	d03a      	beq.n	80081dc <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008166:	6863      	ldr	r3, [r4, #4]
 8008168:	2b03      	cmp	r3, #3
 800816a:	d009      	beq.n	8008180 <HAL_RCC_ClockConfig+0x58>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800816c:	2b02      	cmp	r3, #2
 800816e:	d027      	beq.n	80081c0 <HAL_RCC_ClockConfig+0x98>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008170:	bb6b      	cbnz	r3, 80081ce <HAL_RCC_ClockConfig+0xa6>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008172:	4a41      	ldr	r2, [pc, #260]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	f012 0f02 	tst.w	r2, #2
 800817a:	d106      	bne.n	800818a <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 800817c:	2001      	movs	r0, #1
 800817e:	e7eb      	b.n	8008158 <HAL_RCC_ClockConfig+0x30>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008180:	4a3d      	ldr	r2, [pc, #244]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008188:	d071      	beq.n	800826e <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800818a:	493b      	ldr	r1, [pc, #236]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
 800818c:	688a      	ldr	r2, [r1, #8]
 800818e:	f022 0203 	bic.w	r2, r2, #3
 8008192:	4313      	orrs	r3, r2
 8008194:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008196:	f7f9 ff7f 	bl	8002098 <HAL_GetTick>
 800819a:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800819c:	4e36      	ldr	r6, [pc, #216]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800819e:	f241 3788 	movw	r7, #5000	; 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081a2:	68b3      	ldr	r3, [r6, #8]
 80081a4:	f003 030c 	and.w	r3, r3, #12
 80081a8:	6862      	ldr	r2, [r4, #4]
 80081aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80081ae:	d015      	beq.n	80081dc <HAL_RCC_ClockConfig+0xb4>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081b0:	f7f9 ff72 	bl	8002098 <HAL_GetTick>
 80081b4:	eba0 0008 	sub.w	r0, r0, r8
 80081b8:	42b8      	cmp	r0, r7
 80081ba:	d9f2      	bls.n	80081a2 <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 80081bc:	2003      	movs	r0, #3
 80081be:	e7cb      	b.n	8008158 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081c0:	4a2d      	ldr	r2, [pc, #180]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80081c8:	d1df      	bne.n	800818a <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 80081ca:	2001      	movs	r0, #1
 80081cc:	e7c4      	b.n	8008158 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081ce:	4a2a      	ldr	r2, [pc, #168]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
 80081d0:	6812      	ldr	r2, [r2, #0]
 80081d2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80081d6:	d1d8      	bne.n	800818a <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 80081d8:	2001      	movs	r0, #1
 80081da:	e7bd      	b.n	8008158 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	f013 0f02 	tst.w	r3, #2
 80081e2:	d006      	beq.n	80081f2 <HAL_RCC_ClockConfig+0xca>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081e4:	4a24      	ldr	r2, [pc, #144]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
 80081e6:	6893      	ldr	r3, [r2, #8]
 80081e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081ec:	68a1      	ldr	r1, [r4, #8]
 80081ee:	430b      	orrs	r3, r1
 80081f0:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081f2:	4b20      	ldr	r3, [pc, #128]	; (8008274 <HAL_RCC_ClockConfig+0x14c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	42ab      	cmp	r3, r5
 80081fc:	d90c      	bls.n	8008218 <HAL_RCC_ClockConfig+0xf0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081fe:	4a1d      	ldr	r2, [pc, #116]	; (8008274 <HAL_RCC_ClockConfig+0x14c>)
 8008200:	6813      	ldr	r3, [r2, #0]
 8008202:	f023 0307 	bic.w	r3, r3, #7
 8008206:	432b      	orrs	r3, r5
 8008208:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800820a:	6813      	ldr	r3, [r2, #0]
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	42ab      	cmp	r3, r5
 8008212:	d001      	beq.n	8008218 <HAL_RCC_ClockConfig+0xf0>
      return HAL_ERROR;
 8008214:	2001      	movs	r0, #1
 8008216:	e79f      	b.n	8008158 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	f013 0f04 	tst.w	r3, #4
 800821e:	d006      	beq.n	800822e <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008220:	4a15      	ldr	r2, [pc, #84]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
 8008222:	6893      	ldr	r3, [r2, #8]
 8008224:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008228:	68e1      	ldr	r1, [r4, #12]
 800822a:	430b      	orrs	r3, r1
 800822c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	f013 0f08 	tst.w	r3, #8
 8008234:	d007      	beq.n	8008246 <HAL_RCC_ClockConfig+0x11e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008236:	4a10      	ldr	r2, [pc, #64]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
 8008238:	6893      	ldr	r3, [r2, #8]
 800823a:	6921      	ldr	r1, [r4, #16]
 800823c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008240:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008244:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008246:	f7ff fc2b 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
 800824a:	4b0b      	ldr	r3, [pc, #44]	; (8008278 <HAL_RCC_ClockConfig+0x150>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008252:	4a0a      	ldr	r2, [pc, #40]	; (800827c <HAL_RCC_ClockConfig+0x154>)
 8008254:	5cd3      	ldrb	r3, [r2, r3]
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	40d8      	lsrs	r0, r3
 800825c:	4b08      	ldr	r3, [pc, #32]	; (8008280 <HAL_RCC_ClockConfig+0x158>)
 800825e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8008260:	4b08      	ldr	r3, [pc, #32]	; (8008284 <HAL_RCC_ClockConfig+0x15c>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	f7f9 fece 	bl	8002004 <HAL_InitTick>
  return status;
 8008268:	e776      	b.n	8008158 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800826a:	2001      	movs	r0, #1
}
 800826c:	4770      	bx	lr
        return HAL_ERROR;
 800826e:	2001      	movs	r0, #1
 8008270:	e772      	b.n	8008158 <HAL_RCC_ClockConfig+0x30>
 8008272:	bf00      	nop
 8008274:	40022000 	.word	0x40022000
 8008278:	40021000 	.word	0x40021000
 800827c:	08013bb4 	.word	0x08013bb4
 8008280:	20000008 	.word	0x20000008
 8008284:	20000010 	.word	0x20000010

08008288 <HAL_RCC_GetHCLKFreq>:
}
 8008288:	4b01      	ldr	r3, [pc, #4]	; (8008290 <HAL_RCC_GetHCLKFreq+0x8>)
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20000008 	.word	0x20000008

08008294 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800829c:	4a04      	ldr	r2, [pc, #16]	; (80082b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800829e:	5cd3      	ldrb	r3, [r2, r3]
 80082a0:	f003 031f 	and.w	r3, r3, #31
 80082a4:	4a03      	ldr	r2, [pc, #12]	; (80082b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082a6:	6810      	ldr	r0, [r2, #0]
}
 80082a8:	40d8      	lsrs	r0, r3
 80082aa:	4770      	bx	lr
 80082ac:	40021000 	.word	0x40021000
 80082b0:	08013bc4 	.word	0x08013bc4
 80082b4:	20000008 	.word	0x20000008

080082b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80082b8:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80082c0:	4a04      	ldr	r2, [pc, #16]	; (80082d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80082c2:	5cd3      	ldrb	r3, [r2, r3]
 80082c4:	f003 031f 	and.w	r3, r3, #31
 80082c8:	4a03      	ldr	r2, [pc, #12]	; (80082d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082ca:	6810      	ldr	r0, [r2, #0]
}
 80082cc:	40d8      	lsrs	r0, r3
 80082ce:	4770      	bx	lr
 80082d0:	40021000 	.word	0x40021000
 80082d4:	08013bc4 	.word	0x08013bc4
 80082d8:	20000008 	.word	0x20000008

080082dc <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 80082dc:	231f      	movs	r3, #31
 80082de:	6003      	str	r3, [r0, #0]
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 80082e0:	4b3c      	ldr	r3, [pc, #240]	; (80083d4 <HAL_RCC_GetOscConfig+0xf8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80082e8:	d05f      	beq.n	80083aa <HAL_RCC_GetOscConfig+0xce>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80082ea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80082ee:	6043      	str	r3, [r0, #4]
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 80082f0:	4b38      	ldr	r3, [pc, #224]	; (80083d4 <HAL_RCC_GetOscConfig+0xf8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f013 0f01 	tst.w	r3, #1
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 80082f8:	bf14      	ite	ne
 80082fa:	2301      	movne	r3, #1
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 80082fc:	2300      	moveq	r3, #0
 80082fe:	6183      	str	r3, [r0, #24]
  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 8008300:	4b34      	ldr	r3, [pc, #208]	; (80083d4 <HAL_RCC_GetOscConfig+0xf8>)
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008308:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008310:	6202      	str	r2, [r0, #32]
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f413 7f80 	tst.w	r3, #256	; 0x100
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8008318:	bf14      	ite	ne
 800831a:	f44f 7380 	movne.w	r3, #256	; 0x100
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800831e:	2300      	moveq	r3, #0
 8008320:	60c3      	str	r3, [r0, #12]
  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 8008322:	4a2c      	ldr	r2, [pc, #176]	; (80083d4 <HAL_RCC_GetOscConfig+0xf8>)
 8008324:	6853      	ldr	r3, [r2, #4]
 8008326:	f3c3 6304 	ubfx	r3, r3, #24, #5
 800832a:	6103      	str	r3, [r0, #16]
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 800832c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008330:	f013 0f04 	tst.w	r3, #4
 8008334:	d043      	beq.n	80083be <HAL_RCC_GetOscConfig+0xe2>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8008336:	2305      	movs	r3, #5
 8008338:	6083      	str	r3, [r0, #8]
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 800833a:	4b26      	ldr	r3, [pc, #152]	; (80083d4 <HAL_RCC_GetOscConfig+0xf8>)
 800833c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008340:	f013 0f01 	tst.w	r3, #1
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8008344:	bf14      	ite	ne
 8008346:	2301      	movne	r3, #1
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8008348:	2300      	moveq	r3, #0
 800834a:	6143      	str	r3, [r0, #20]
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 800834c:	2300      	movs	r3, #0
 800834e:	6243      	str	r3, [r0, #36]	; 0x24
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 8008350:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008354:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800835e:	bf14      	ite	ne
 8008360:	2302      	movne	r3, #2
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8008362:	2301      	moveq	r3, #1
 8008364:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008366:	4a1b      	ldr	r2, [pc, #108]	; (80083d4 <HAL_RCC_GetOscConfig+0xf8>)
 8008368:	68d3      	ldr	r3, [r2, #12]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	62c3      	str	r3, [r0, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008370:	68d3      	ldr	r3, [r2, #12]
 8008372:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008376:	3301      	adds	r3, #1
 8008378:	6303      	str	r3, [r0, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800837a:	68d3      	ldr	r3, [r2, #12]
 800837c:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8008380:	6343      	str	r3, [r0, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008382:	68d3      	ldr	r3, [r2, #12]
 8008384:	f3c3 5341 	ubfx	r3, r3, #21, #2
 8008388:	3301      	adds	r3, #1
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	63c3      	str	r3, [r0, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 800838e:	68d3      	ldr	r3, [r2, #12]
 8008390:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008394:	3301      	adds	r3, #1
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	6403      	str	r3, [r0, #64]	; 0x40
  if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800839a:	68d3      	ldr	r3, [r2, #12]
 800839c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 80083a0:	bf14      	ite	ne
 80083a2:	2311      	movne	r3, #17
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
 80083a4:	2307      	moveq	r3, #7
 80083a6:	6383      	str	r3, [r0, #56]	; 0x38
}
 80083a8:	4770      	bx	lr
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <HAL_RCC_GetOscConfig+0xf8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80083b2:	bf14      	ite	ne
 80083b4:	f44f 3380 	movne.w	r3, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80083b8:	2300      	moveq	r3, #0
 80083ba:	6043      	str	r3, [r0, #4]
 80083bc:	e798      	b.n	80082f0 <HAL_RCC_GetOscConfig+0x14>
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <HAL_RCC_GetOscConfig+0xf8>)
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c4:	f013 0f01 	tst.w	r3, #1
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80083c8:	bf14      	ite	ne
 80083ca:	2301      	movne	r3, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80083cc:	2300      	moveq	r3, #0
 80083ce:	6083      	str	r3, [r0, #8]
 80083d0:	e7b3      	b.n	800833a <HAL_RCC_GetOscConfig+0x5e>
 80083d2:	bf00      	nop
 80083d4:	40021000 	.word	0x40021000

080083d8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80083d8:	230f      	movs	r3, #15
 80083da:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <HAL_RCC_GetClockConfig+0x34>)
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	f002 0203 	and.w	r2, r2, #3
 80083e4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80083ec:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80083f4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	08db      	lsrs	r3, r3, #3
 80083fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083fe:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008400:	4b03      	ldr	r3, [pc, #12]	; (8008410 <HAL_RCC_GetClockConfig+0x38>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	600b      	str	r3, [r1, #0]
}
 800840a:	4770      	bx	lr
 800840c:	40021000 	.word	0x40021000
 8008410:	40022000 	.word	0x40022000

08008414 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8008414:	4a02      	ldr	r2, [pc, #8]	; (8008420 <HAL_RCC_EnableCSS+0xc>)
 8008416:	6813      	ldr	r3, [r2, #0]
 8008418:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800841c:	6013      	str	r3, [r2, #0]
}
 800841e:	4770      	bx	lr
 8008420:	40021000 	.word	0x40021000

08008424 <HAL_RCC_CSSCallback>:
}
 8008424:	4770      	bx	lr
	...

08008428 <HAL_RCC_NMI_IRQHandler>:
{
 8008428:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800842a:	4b06      	ldr	r3, [pc, #24]	; (8008444 <HAL_RCC_NMI_IRQHandler+0x1c>)
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008432:	d100      	bne.n	8008436 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8008434:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8008436:	f7ff fff5 	bl	8008424 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800843a:	4b02      	ldr	r3, [pc, #8]	; (8008444 <HAL_RCC_NMI_IRQHandler+0x1c>)
 800843c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	e7f7      	b.n	8008434 <HAL_RCC_NMI_IRQHandler+0xc>
 8008444:	40021000 	.word	0x40021000

08008448 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008448:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800844c:	d01d      	beq.n	800848a <RCCEx_GetSAIxPeriphCLKFreq+0x42>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800844e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8008452:	d043      	beq.n	80084dc <RCCEx_GetSAIxPeriphCLKFreq+0x94>
        frequency = (pllvco * plln) / pllp;
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8008454:	4b3d      	ldr	r3, [pc, #244]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800845c:	d071      	beq.n	8008542 <RCCEx_GetSAIxPeriphCLKFreq+0xfa>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800845e:	4b3b      	ldr	r3, [pc, #236]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 8008460:	68d8      	ldr	r0, [r3, #12]
 8008462:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8008466:	3001      	adds	r0, #1
 8008468:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800846c:	6918      	ldr	r0, [r3, #16]
 800846e:	f3c0 2006 	ubfx	r0, r0, #8, #7
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 8008478:	2b00      	cmp	r3, #0
 800847a:	bf14      	ite	ne
 800847c:	2311      	movne	r3, #17
 800847e:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008480:	fb00 f001 	mul.w	r0, r0, r1
 8008484:	fbb0 f0f3 	udiv	r0, r0, r3
 8008488:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800848a:	4b30      	ldr	r3, [pc, #192]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800848c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008490:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008494:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008498:	d04f      	beq.n	800853a <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800849a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800849e:	d002      	beq.n	80084a6 <RCCEx_GetSAIxPeriphCLKFreq+0x5e>
 80084a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084a4:	d124      	bne.n	80084f0 <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80084a6:	4b29      	ldr	r3, [pc, #164]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80084ae:	d046      	beq.n	800853e <RCCEx_GetSAIxPeriphCLKFreq+0xf6>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80084b0:	4b26      	ldr	r3, [pc, #152]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 80084b2:	68d8      	ldr	r0, [r3, #12]
 80084b4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80084b8:	3001      	adds	r0, #1
 80084ba:	fbb1 f1f0 	udiv	r1, r1, r0
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80084be:	68d8      	ldr	r0, [r3, #12]
 80084c0:	f3c0 2006 	ubfx	r0, r0, #8, #7
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
            pllp = 7U;
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	bf14      	ite	ne
 80084ce:	2311      	movne	r3, #17
 80084d0:	2307      	moveq	r3, #7
        frequency = (pllvco * plln) / pllp;
 80084d2:	fb00 f001 	mul.w	r0, r0, r1
 80084d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80084da:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80084dc:	4b1b      	ldr	r3, [pc, #108]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 80084de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80084e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084ea:	d1d6      	bne.n	800849a <RCCEx_GetSAIxPeriphCLKFreq+0x52>
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80084ec:	4818      	ldr	r0, [pc, #96]	; (8008550 <RCCEx_GetSAIxPeriphCLKFreq+0x108>)
 80084ee:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0af      	beq.n	8008454 <RCCEx_GetSAIxPeriphCLKFreq+0xc>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80084f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f8:	d004      	beq.n	8008504 <RCCEx_GetSAIxPeriphCLKFreq+0xbc>
 80084fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084fe:	d001      	beq.n	8008504 <RCCEx_GetSAIxPeriphCLKFreq+0xbc>
 8008500:	2000      	movs	r0, #0
 8008502:	4770      	bx	lr
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8008504:	4b11      	ldr	r3, [pc, #68]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800850c:	d01b      	beq.n	8008546 <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800850e:	4b0f      	ldr	r3, [pc, #60]	; (800854c <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 8008510:	68d8      	ldr	r0, [r3, #12]
 8008512:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8008516:	3001      	adds	r0, #1
 8008518:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800851c:	6958      	ldr	r0, [r3, #20]
 800851e:	f3c0 2006 	ubfx	r0, r0, #8, #7
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 8008528:	2b00      	cmp	r3, #0
 800852a:	bf14      	ite	ne
 800852c:	2311      	movne	r3, #17
 800852e:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008530:	fb00 f001 	mul.w	r0, r0, r1
 8008534:	fbb0 f0f3 	udiv	r0, r0, r3
 8008538:	4770      	bx	lr
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800853a:	4805      	ldr	r0, [pc, #20]	; (8008550 <RCCEx_GetSAIxPeriphCLKFreq+0x108>)
 800853c:	4770      	bx	lr
 800853e:	2000      	movs	r0, #0
 8008540:	4770      	bx	lr
 8008542:	2000      	movs	r0, #0
 8008544:	4770      	bx	lr
 8008546:	2000      	movs	r0, #0
    }
  }


  return frequency;
}
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	40021000 	.word	0x40021000
 8008550:	001fff68 	.word	0x001fff68

08008554 <RCCEx_PLLSAI1_Config>:
{
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008556:	4b56      	ldr	r3, [pc, #344]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f013 0f03 	tst.w	r3, #3
 800855e:	d014      	beq.n	800858a <RCCEx_PLLSAI1_Config+0x36>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008560:	4b53      	ldr	r3, [pc, #332]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0303 	and.w	r3, r3, #3
 8008568:	6802      	ldr	r2, [r0, #0]
 800856a:	4293      	cmp	r3, r2
 800856c:	d001      	beq.n	8008572 <RCCEx_PLLSAI1_Config+0x1e>
 800856e:	2001      	movs	r0, #1
}
 8008570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8008572:	2b00      	cmp	r3, #0
 8008574:	d07c      	beq.n	8008670 <RCCEx_PLLSAI1_Config+0x11c>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008576:	4b4e      	ldr	r3, [pc, #312]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800857e:	3301      	adds	r3, #1
       ||
 8008580:	6842      	ldr	r2, [r0, #4]
 8008582:	4293      	cmp	r3, r2
 8008584:	d019      	beq.n	80085ba <RCCEx_PLLSAI1_Config+0x66>
 8008586:	2001      	movs	r0, #1
 8008588:	e7f2      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 800858a:	6803      	ldr	r3, [r0, #0]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d02a      	beq.n	80085e6 <RCCEx_PLLSAI1_Config+0x92>
 8008590:	2b03      	cmp	r3, #3
 8008592:	d02f      	beq.n	80085f4 <RCCEx_PLLSAI1_Config+0xa0>
 8008594:	2b01      	cmp	r3, #1
 8008596:	d001      	beq.n	800859c <RCCEx_PLLSAI1_Config+0x48>
 8008598:	2001      	movs	r0, #1
 800859a:	e7e9      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800859c:	4a44      	ldr	r2, [pc, #272]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	f012 0f02 	tst.w	r2, #2
 80085a4:	d066      	beq.n	8008674 <RCCEx_PLLSAI1_Config+0x120>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80085a6:	4d42      	ldr	r5, [pc, #264]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 80085a8:	68ea      	ldr	r2, [r5, #12]
 80085aa:	6844      	ldr	r4, [r0, #4]
 80085ac:	3c01      	subs	r4, #1
 80085ae:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80085b2:	4313      	orrs	r3, r2
 80085b4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80085b8:	60eb      	str	r3, [r5, #12]
 80085ba:	460f      	mov	r7, r1
 80085bc:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80085be:	4a3c      	ldr	r2, [pc, #240]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 80085c0:	6813      	ldr	r3, [r2, #0]
 80085c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085c6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80085c8:	f7f9 fd66 	bl	8002098 <HAL_GetTick>
 80085cc:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80085ce:	4d38      	ldr	r5, [pc, #224]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80085d6:	d04f      	beq.n	8008678 <RCCEx_PLLSAI1_Config+0x124>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085d8:	f7f9 fd5e 	bl	8002098 <HAL_GetTick>
 80085dc:	1b80      	subs	r0, r0, r6
 80085de:	2802      	cmp	r0, #2
 80085e0:	d9f6      	bls.n	80085d0 <RCCEx_PLLSAI1_Config+0x7c>
        status = HAL_TIMEOUT;
 80085e2:	2003      	movs	r0, #3
 80085e4:	e7c4      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085e6:	4a32      	ldr	r2, [pc, #200]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 80085e8:	6812      	ldr	r2, [r2, #0]
 80085ea:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80085ee:	d1da      	bne.n	80085a6 <RCCEx_PLLSAI1_Config+0x52>
 80085f0:	2001      	movs	r0, #1
 80085f2:	e7bd      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085f4:	4a2e      	ldr	r2, [pc, #184]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80085fc:	d1d3      	bne.n	80085a6 <RCCEx_PLLSAI1_Config+0x52>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80085fe:	4a2c      	ldr	r2, [pc, #176]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 8008600:	6812      	ldr	r2, [r2, #0]
 8008602:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8008606:	d1ce      	bne.n	80085a6 <RCCEx_PLLSAI1_Config+0x52>
 8008608:	2001      	movs	r0, #1
 800860a:	e7b1      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800860c:	4928      	ldr	r1, [pc, #160]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 800860e:	690b      	ldr	r3, [r1, #16]
 8008610:	68a2      	ldr	r2, [r4, #8]
 8008612:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800861a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800861e:	68e2      	ldr	r2, [r4, #12]
 8008620:	0912      	lsrs	r2, r2, #4
 8008622:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8008626:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8008628:	4a21      	ldr	r2, [pc, #132]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 800862a:	6813      	ldr	r3, [r2, #0]
 800862c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008630:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008632:	f7f9 fd31 	bl	8002098 <HAL_GetTick>
 8008636:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008638:	4d1d      	ldr	r5, [pc, #116]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 800863a:	682b      	ldr	r3, [r5, #0]
 800863c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008640:	d12e      	bne.n	80086a0 <RCCEx_PLLSAI1_Config+0x14c>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008642:	f7f9 fd29 	bl	8002098 <HAL_GetTick>
 8008646:	1b80      	subs	r0, r0, r6
 8008648:	2802      	cmp	r0, #2
 800864a:	d9f6      	bls.n	800863a <RCCEx_PLLSAI1_Config+0xe6>
          status = HAL_TIMEOUT;
 800864c:	2003      	movs	r0, #3
 800864e:	e78f      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008650:	4917      	ldr	r1, [pc, #92]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 8008652:	690b      	ldr	r3, [r1, #16]
 8008654:	6922      	ldr	r2, [r4, #16]
 8008656:	0852      	lsrs	r2, r2, #1
 8008658:	3a01      	subs	r2, #1
 800865a:	68a0      	ldr	r0, [r4, #8]
 800865c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008660:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008664:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008668:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800866c:	610b      	str	r3, [r1, #16]
 800866e:	e7db      	b.n	8008628 <RCCEx_PLLSAI1_Config+0xd4>
 8008670:	2001      	movs	r0, #1
 8008672:	e77d      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1c>
 8008674:	2001      	movs	r0, #1
 8008676:	e77b      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8008678:	2f00      	cmp	r7, #0
 800867a:	d0c7      	beq.n	800860c <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 800867c:	2f01      	cmp	r7, #1
 800867e:	d0e7      	beq.n	8008650 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008680:	490b      	ldr	r1, [pc, #44]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 8008682:	690b      	ldr	r3, [r1, #16]
 8008684:	6962      	ldr	r2, [r4, #20]
 8008686:	0852      	lsrs	r2, r2, #1
 8008688:	3a01      	subs	r2, #1
 800868a:	68a0      	ldr	r0, [r4, #8]
 800868c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008690:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008694:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008698:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800869c:	610b      	str	r3, [r1, #16]
 800869e:	e7c3      	b.n	8008628 <RCCEx_PLLSAI1_Config+0xd4>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80086a0:	4a03      	ldr	r2, [pc, #12]	; (80086b0 <RCCEx_PLLSAI1_Config+0x15c>)
 80086a2:	6913      	ldr	r3, [r2, #16]
 80086a4:	69a1      	ldr	r1, [r4, #24]
 80086a6:	430b      	orrs	r3, r1
 80086a8:	6113      	str	r3, [r2, #16]
 80086aa:	2000      	movs	r0, #0
  return status;
 80086ac:	e760      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1c>
 80086ae:	bf00      	nop
 80086b0:	40021000 	.word	0x40021000

080086b4 <RCCEx_PLLSAI2_Config>:
{
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80086b6:	4b4d      	ldr	r3, [pc, #308]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f013 0f03 	tst.w	r3, #3
 80086be:	d014      	beq.n	80086ea <RCCEx_PLLSAI2_Config+0x36>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80086c0:	4b4a      	ldr	r3, [pc, #296]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f003 0303 	and.w	r3, r3, #3
 80086c8:	6802      	ldr	r2, [r0, #0]
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d001      	beq.n	80086d2 <RCCEx_PLLSAI2_Config+0x1e>
 80086ce:	2001      	movs	r0, #1
}
 80086d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d06c      	beq.n	80087b0 <RCCEx_PLLSAI2_Config+0xfc>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80086d6:	4b45      	ldr	r3, [pc, #276]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80086de:	3301      	adds	r3, #1
       ||
 80086e0:	6842      	ldr	r2, [r0, #4]
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d019      	beq.n	800871a <RCCEx_PLLSAI2_Config+0x66>
 80086e6:	2001      	movs	r0, #1
 80086e8:	e7f2      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x1c>
    switch(PllSai2->PLLSAI2Source)
 80086ea:	6803      	ldr	r3, [r0, #0]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d02a      	beq.n	8008746 <RCCEx_PLLSAI2_Config+0x92>
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d02f      	beq.n	8008754 <RCCEx_PLLSAI2_Config+0xa0>
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d001      	beq.n	80086fc <RCCEx_PLLSAI2_Config+0x48>
 80086f8:	2001      	movs	r0, #1
 80086fa:	e7e9      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80086fc:	4a3b      	ldr	r2, [pc, #236]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 80086fe:	6812      	ldr	r2, [r2, #0]
 8008700:	f012 0f02 	tst.w	r2, #2
 8008704:	d056      	beq.n	80087b4 <RCCEx_PLLSAI2_Config+0x100>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008706:	4d39      	ldr	r5, [pc, #228]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 8008708:	68ea      	ldr	r2, [r5, #12]
 800870a:	6844      	ldr	r4, [r0, #4]
 800870c:	3c01      	subs	r4, #1
 800870e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008712:	4313      	orrs	r3, r2
 8008714:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008718:	60eb      	str	r3, [r5, #12]
 800871a:	460f      	mov	r7, r1
 800871c:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI2_DISABLE();
 800871e:	4a33      	ldr	r2, [pc, #204]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 8008720:	6813      	ldr	r3, [r2, #0]
 8008722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008726:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008728:	f7f9 fcb6 	bl	8002098 <HAL_GetTick>
 800872c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800872e:	4d2f      	ldr	r5, [pc, #188]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008736:	d03f      	beq.n	80087b8 <RCCEx_PLLSAI2_Config+0x104>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008738:	f7f9 fcae 	bl	8002098 <HAL_GetTick>
 800873c:	1b80      	subs	r0, r0, r6
 800873e:	2802      	cmp	r0, #2
 8008740:	d9f6      	bls.n	8008730 <RCCEx_PLLSAI2_Config+0x7c>
        status = HAL_TIMEOUT;
 8008742:	2003      	movs	r0, #3
 8008744:	e7c4      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008746:	4a29      	ldr	r2, [pc, #164]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800874e:	d1da      	bne.n	8008706 <RCCEx_PLLSAI2_Config+0x52>
 8008750:	2001      	movs	r0, #1
 8008752:	e7bd      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008754:	4a25      	ldr	r2, [pc, #148]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 8008756:	6812      	ldr	r2, [r2, #0]
 8008758:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800875c:	d1d3      	bne.n	8008706 <RCCEx_PLLSAI2_Config+0x52>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800875e:	4a23      	ldr	r2, [pc, #140]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 8008760:	6812      	ldr	r2, [r2, #0]
 8008762:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8008766:	d1ce      	bne.n	8008706 <RCCEx_PLLSAI2_Config+0x52>
 8008768:	2001      	movs	r0, #1
 800876a:	e7b1      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800876c:	491f      	ldr	r1, [pc, #124]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 800876e:	694b      	ldr	r3, [r1, #20]
 8008770:	68a2      	ldr	r2, [r4, #8]
 8008772:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800877a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800877e:	68e2      	ldr	r2, [r4, #12]
 8008780:	0912      	lsrs	r2, r2, #4
 8008782:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8008786:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8008788:	4a18      	ldr	r2, [pc, #96]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 800878a:	6813      	ldr	r3, [r2, #0]
 800878c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008790:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008792:	f7f9 fc81 	bl	8002098 <HAL_GetTick>
 8008796:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008798:	4d14      	ldr	r5, [pc, #80]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80087a0:	d11c      	bne.n	80087dc <RCCEx_PLLSAI2_Config+0x128>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80087a2:	f7f9 fc79 	bl	8002098 <HAL_GetTick>
 80087a6:	1b80      	subs	r0, r0, r6
 80087a8:	2802      	cmp	r0, #2
 80087aa:	d9f6      	bls.n	800879a <RCCEx_PLLSAI2_Config+0xe6>
          status = HAL_TIMEOUT;
 80087ac:	2003      	movs	r0, #3
 80087ae:	e78f      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x1c>
 80087b0:	2001      	movs	r0, #1
 80087b2:	e78d      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x1c>
 80087b4:	2001      	movs	r0, #1
 80087b6:	e78b      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 80087b8:	2f00      	cmp	r7, #0
 80087ba:	d0d7      	beq.n	800876c <RCCEx_PLLSAI2_Config+0xb8>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80087bc:	480b      	ldr	r0, [pc, #44]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 80087be:	6942      	ldr	r2, [r0, #20]
 80087c0:	6923      	ldr	r3, [r4, #16]
 80087c2:	085b      	lsrs	r3, r3, #1
 80087c4:	1e59      	subs	r1, r3, #1
 80087c6:	68a5      	ldr	r5, [r4, #8]
 80087c8:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 80087cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087d0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80087d4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80087d8:	6143      	str	r3, [r0, #20]
 80087da:	e7d5      	b.n	8008788 <RCCEx_PLLSAI2_Config+0xd4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80087dc:	4a03      	ldr	r2, [pc, #12]	; (80087ec <RCCEx_PLLSAI2_Config+0x138>)
 80087de:	6953      	ldr	r3, [r2, #20]
 80087e0:	6961      	ldr	r1, [r4, #20]
 80087e2:	430b      	orrs	r3, r1
 80087e4:	6153      	str	r3, [r2, #20]
 80087e6:	2000      	movs	r0, #0
  return status;
 80087e8:	e772      	b.n	80086d0 <RCCEx_PLLSAI2_Config+0x1c>
 80087ea:	bf00      	nop
 80087ec:	40021000 	.word	0x40021000

080087f0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80087f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087f4:	b083      	sub	sp, #12
 80087f6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80087f8:	6803      	ldr	r3, [r0, #0]
 80087fa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80087fe:	d029      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008800:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008806:	d01f      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8008808:	d910      	bls.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800880a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800880e:	d015      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8008810:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008814:	d131      	bne.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008816:	4a2c      	ldr	r2, [pc, #176]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8008818:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800881c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008820:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008822:	430b      	orrs	r3, r1
 8008824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008828:	2500      	movs	r5, #0
 800882a:	e014      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 800882c:	bb2b      	cbnz	r3, 800887a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800882e:	2100      	movs	r1, #0
 8008830:	3004      	adds	r0, #4
 8008832:	f7ff fe8f 	bl	8008554 <RCCEx_PLLSAI1_Config>
 8008836:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008838:	b96d      	cbnz	r5, 8008856 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800883a:	e7ec      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x26>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800883c:	4a22      	ldr	r2, [pc, #136]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800883e:	68d3      	ldr	r3, [r2, #12]
 8008840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008844:	60d3      	str	r3, [r2, #12]
 8008846:	e7e6      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008848:	2100      	movs	r1, #0
 800884a:	3020      	adds	r0, #32
 800884c:	f7ff ff32 	bl	80086b4 <RCCEx_PLLSAI2_Config>
 8008850:	4605      	mov	r5, r0
      break;
 8008852:	e7f1      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x48>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008854:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800885c:	d036      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    switch(PeriphClkInit->Sai2ClockSelection)
 800885e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008864:	d028      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8008866:	d90a      	bls.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8008868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800886c:	d010      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800886e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008872:	f040 8160 	bne.w	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8008876:	46a8      	mov	r8, r5
 8008878:	e010      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xac>
      ret = HAL_ERROR;
 800887a:	2501      	movs	r5, #1
 800887c:	e7eb      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai2ClockSelection)
 800887e:	2b00      	cmp	r3, #0
 8008880:	f040 8159 	bne.w	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008884:	2100      	movs	r1, #0
 8008886:	1d20      	adds	r0, r4, #4
 8008888:	f7ff fe64 	bl	8008554 <RCCEx_PLLSAI1_Config>
 800888c:	4680      	mov	r8, r0
      break;
 800888e:	e005      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008890:	4a0d      	ldr	r2, [pc, #52]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8008892:	68d3      	ldr	r3, [r2, #12]
 8008894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008898:	60d3      	str	r3, [r2, #12]
      break;
 800889a:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 800889c:	f1b8 0f00 	cmp.w	r8, #0
 80088a0:	f040 814c 	bne.w	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x34c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80088a4:	4a08      	ldr	r2, [pc, #32]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 80088a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80088aa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80088ae:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80088b0:	430b      	orrs	r3, r1
 80088b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80088b6:	e00a      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80088b8:	2100      	movs	r1, #0
 80088ba:	f104 0020 	add.w	r0, r4, #32
 80088be:	f7ff fef9 	bl	80086b4 <RCCEx_PLLSAI2_Config>
 80088c2:	4680      	mov	r8, r0
      break;
 80088c4:	e7ea      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80088c6:	bf00      	nop
 80088c8:	40021000 	.word	0x40021000
 80088cc:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80088d4:	d029      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80088d6:	4bc3      	ldr	r3, [pc, #780]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80088d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80088de:	f040 812f 	bne.w	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      __HAL_RCC_PWR_CLK_ENABLE();
 80088e2:	4bc0      	ldr	r3, [pc, #768]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80088e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80088ea:	659a      	str	r2, [r3, #88]	; 0x58
 80088ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f2:	9301      	str	r3, [sp, #4]
 80088f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80088f6:	f04f 0901 	mov.w	r9, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088fa:	4abb      	ldr	r2, [pc, #748]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80088fc:	6813      	ldr	r3, [r2, #0]
 80088fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008902:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008904:	f7f9 fbc8 	bl	8002098 <HAL_GetTick>
 8008908:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800890a:	4eb7      	ldr	r6, [pc, #732]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008912:	f040 8118 	bne.w	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x356>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008916:	f7f9 fbbf 	bl	8002098 <HAL_GetTick>
 800891a:	1bc0      	subs	r0, r0, r7
 800891c:	2802      	cmp	r0, #2
 800891e:	d9f5      	bls.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        ret = HAL_TIMEOUT;
 8008920:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8008922:	f1b9 0f00 	cmp.w	r9, #0
 8008926:	f040 8151 	bne.w	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	f013 0f01 	tst.w	r3, #1
 8008930:	d008      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008932:	4aac      	ldr	r2, [pc, #688]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008934:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008938:	f023 0303 	bic.w	r3, r3, #3
 800893c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800893e:	430b      	orrs	r3, r1
 8008940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	f013 0f02 	tst.w	r3, #2
 800894a:	d008      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800894c:	4aa5      	ldr	r2, [pc, #660]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800894e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008952:	f023 030c 	bic.w	r3, r3, #12
 8008956:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008958:	430b      	orrs	r3, r1
 800895a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	f013 0f04 	tst.w	r3, #4
 8008964:	d008      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x188>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008966:	4a9f      	ldr	r2, [pc, #636]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008968:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800896c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008970:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008972:	430b      	orrs	r3, r1
 8008974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	f013 0f08 	tst.w	r3, #8
 800897e:	d008      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008980:	4a98      	ldr	r2, [pc, #608]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008982:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008986:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800898a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800898c:	430b      	orrs	r3, r1
 800898e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	f013 0f10 	tst.w	r3, #16
 8008998:	d008      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800899a:	4a92      	ldr	r2, [pc, #584]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800899c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80089a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80089a6:	430b      	orrs	r3, r1
 80089a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	f013 0f20 	tst.w	r3, #32
 80089b2:	d008      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089b4:	4a8b      	ldr	r2, [pc, #556]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80089b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80089ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80089be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80089c0:	430b      	orrs	r3, r1
 80089c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80089cc:	d008      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089ce:	4a85      	ldr	r2, [pc, #532]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80089d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80089d4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80089d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80089da:	430b      	orrs	r3, r1
 80089dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80089e6:	d008      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089e8:	4a7e      	ldr	r2, [pc, #504]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80089ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80089ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80089f2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80089f4:	430b      	orrs	r3, r1
 80089f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a00:	d008      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a02:	4a78      	ldr	r2, [pc, #480]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008a0c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008a0e:	430b      	orrs	r3, r1
 8008a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a1a:	d008      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x23e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a1c:	4a71      	ldr	r2, [pc, #452]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008a26:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a34:	d008      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a36:	4a6b      	ldr	r2, [pc, #428]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a38:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a3c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008a40:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008a42:	430b      	orrs	r3, r1
 8008a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008a4e:	d011      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a50:	4a64      	ldr	r2, [pc, #400]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a56:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008a5a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a62:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a68:	f000 80b6 	beq.w	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a70:	f000 80bc 	beq.w	8008bec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008a7a:	d011      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008a7c:	4a59      	ldr	r2, [pc, #356]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008a82:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008a86:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008a8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a94:	f000 80b2 	beq.w	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x40c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a9c:	f000 80b3 	beq.w	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x416>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8008aa6:	d011      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008aa8:	4a4e      	ldr	r2, [pc, #312]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008aaa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008aae:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008ab2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008aba:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ac0:	f000 80a9 	beq.w	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x426>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ac8:	f000 80aa 	beq.w	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008ad2:	d011      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ad4:	4a43      	ldr	r2, [pc, #268]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ad6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ada:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008ade:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008ae6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008ae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aec:	f000 80a0 	beq.w	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x440>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af4:	f000 80a4 	beq.w	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008afe:	d008      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x322>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b00:	4a38      	ldr	r2, [pc, #224]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b02:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b0a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008b18:	d009      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b1a:	4a32      	ldr	r2, [pc, #200]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b1c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b24:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8008b2e:	4628      	mov	r0, r5
 8008b30:	b003      	add	sp, #12
 8008b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = HAL_ERROR;
 8008b36:	2501      	movs	r5, #1
 8008b38:	46a8      	mov	r8, r5
 8008b3a:	e6c8      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008b3c:	4645      	mov	r5, r8
 8008b3e:	e6c6      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xde>
    FlagStatus       pwrclkchanged = RESET;
 8008b40:	f04f 0900 	mov.w	r9, #0
 8008b44:	e6d9      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x10a>
    if(ret == HAL_OK)
 8008b46:	f1b8 0f00 	cmp.w	r8, #0
 8008b4a:	d13d      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b4c:	4b25      	ldr	r3, [pc, #148]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008b52:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008b56:	d02c      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8008b58:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d012      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x396>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b60:	4a20      	ldr	r2, [pc, #128]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b6a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008b6e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008b72:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b76:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008b7a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008b7e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8008b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b86:	f013 0f01 	tst.w	r3, #1
 8008b8a:	d012      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        tickstart = HAL_GetTick();
 8008b8c:	f7f9 fa84 	bl	8002098 <HAL_GetTick>
 8008b90:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b92:	4e14      	ldr	r6, [pc, #80]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b94:	f241 3788 	movw	r7, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b98:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8008b9c:	f013 0f02 	tst.w	r3, #2
 8008ba0:	d107      	bne.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba2:	f7f9 fa79 	bl	8002098 <HAL_GetTick>
 8008ba6:	eba0 0008 	sub.w	r0, r0, r8
 8008baa:	42b8      	cmp	r0, r7
 8008bac:	d9f4      	bls.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
            ret = HAL_TIMEOUT;
 8008bae:	2503      	movs	r5, #3
 8008bb0:	e6b7      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x132>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bb2:	4a0c      	ldr	r2, [pc, #48]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bb4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bbc:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008bc6:	e6ac      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8008bc8:	4645      	mov	r5, r8
 8008bca:	e6aa      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bcc:	4a05      	ldr	r2, [pc, #20]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8008bd6:	e6a8      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bd8:	68d3      	ldr	r3, [r2, #12]
 8008bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bde:	60d3      	str	r3, [r2, #12]
 8008be0:	e748      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8008be2:	bf00      	nop
 8008be4:	40021000 	.word	0x40021000
 8008be8:	40007000 	.word	0x40007000
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008bec:	2101      	movs	r1, #1
 8008bee:	1d20      	adds	r0, r4, #4
 8008bf0:	f7ff fcb0 	bl	8008554 <RCCEx_PLLSAI1_Config>
          status = ret;
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	bf18      	it	ne
 8008bf8:	4605      	movne	r5, r0
 8008bfa:	e73b      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bfc:	68d3      	ldr	r3, [r2, #12]
 8008bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c02:	60d3      	str	r3, [r2, #12]
 8008c04:	e74c      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c06:	2101      	movs	r1, #1
 8008c08:	1d20      	adds	r0, r4, #4
 8008c0a:	f7ff fca3 	bl	8008554 <RCCEx_PLLSAI1_Config>
        status = ret;
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	bf18      	it	ne
 8008c12:	4605      	movne	r5, r0
 8008c14:	e744      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c16:	68d3      	ldr	r3, [r2, #12]
 8008c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c1c:	60d3      	str	r3, [r2, #12]
 8008c1e:	e755      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c20:	2101      	movs	r1, #1
 8008c22:	1d20      	adds	r0, r4, #4
 8008c24:	f7ff fc96 	bl	8008554 <RCCEx_PLLSAI1_Config>
        status = ret;
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	bf18      	it	ne
 8008c2c:	4605      	movne	r5, r0
 8008c2e:	e74d      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c30:	2102      	movs	r1, #2
 8008c32:	1d20      	adds	r0, r4, #4
 8008c34:	f7ff fc8e 	bl	8008554 <RCCEx_PLLSAI1_Config>
        status = ret;
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	bf18      	it	ne
 8008c3c:	4605      	movne	r5, r0
 8008c3e:	e75b      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008c40:	2102      	movs	r1, #2
 8008c42:	f104 0020 	add.w	r0, r4, #32
 8008c46:	f7ff fd35 	bl	80086b4 <RCCEx_PLLSAI2_Config>
        status = ret;
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	bf18      	it	ne
 8008c4e:	4605      	movne	r5, r0
 8008c50:	e752      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008c52:	bf00      	nop

08008c54 <HAL_RCCEx_GetPeriphCLKConfig>:
{
 8008c54:	b410      	push	{r4}
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8008c56:	4b4e      	ldr	r3, [pc, #312]	; (8008d90 <HAL_RCCEx_GetPeriphCLKConfig+0x13c>)
 8008c58:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 8008c5a:	4b4e      	ldr	r3, [pc, #312]	; (8008d94 <HAL_RCCEx_GetPeriphCLKConfig+0x140>)
 8008c5c:	68dc      	ldr	r4, [r3, #12]
 8008c5e:	f004 0403 	and.w	r4, r4, #3
 8008c62:	6044      	str	r4, [r0, #4]
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008c64:	68d9      	ldr	r1, [r3, #12]
 8008c66:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8008c6a:	3101      	adds	r1, #1
 8008c6c:	6081      	str	r1, [r0, #8]
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008c6e:	691a      	ldr	r2, [r3, #16]
 8008c70:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008c74:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	0b52      	lsrs	r2, r2, #13
 8008c7a:	f002 0210 	and.w	r2, r2, #16
 8008c7e:	3207      	adds	r2, #7
 8008c80:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8008c82:	691a      	ldr	r2, [r3, #16]
 8008c84:	f3c2 5241 	ubfx	r2, r2, #21, #2
 8008c88:	3201      	adds	r2, #1
 8008c8a:	0052      	lsls	r2, r2, #1
 8008c8c:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8008c94:	3201      	adds	r2, #1
 8008c96:	0052      	lsls	r2, r2, #1
 8008c98:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8008c9a:	6204      	str	r4, [r0, #32]
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8008c9c:	6241      	str	r1, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008c9e:	695a      	ldr	r2, [r3, #20]
 8008ca0:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008ca4:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8008ca6:	695a      	ldr	r2, [r3, #20]
 8008ca8:	0b52      	lsrs	r2, r2, #13
 8008caa:	f002 0210 	and.w	r2, r2, #16
 8008cae:	3207      	adds	r2, #7
 8008cb0:	62c2      	str	r2, [r0, #44]	; 0x2c
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8008cb2:	695a      	ldr	r2, [r3, #20]
 8008cb4:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8008cb8:	3201      	adds	r2, #1
 8008cba:	0052      	lsls	r2, r2, #1
 8008cbc:	6302      	str	r2, [r0, #48]	; 0x30
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8008cbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cc2:	f002 0203 	and.w	r2, r2, #3
 8008cc6:	6382      	str	r2, [r0, #56]	; 0x38
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8008cc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008ccc:	f002 020c 	and.w	r2, r2, #12
 8008cd0:	63c2      	str	r2, [r0, #60]	; 0x3c
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8008cd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cd6:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8008cda:	6402      	str	r2, [r0, #64]	; 0x40
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8008cdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008ce0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8008ce4:	6442      	str	r2, [r0, #68]	; 0x44
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8008ce6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cea:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008cee:	6482      	str	r2, [r0, #72]	; 0x48
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8008cf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cf4:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8008cf8:	64c2      	str	r2, [r0, #76]	; 0x4c
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8008cfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cfe:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8008d02:	6502      	str	r2, [r0, #80]	; 0x50
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8008d04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d08:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8008d0c:	6542      	str	r2, [r0, #84]	; 0x54
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8008d0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d12:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8008d16:	6582      	str	r2, [r0, #88]	; 0x58
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008d18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d1c:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008d20:	65c2      	str	r2, [r0, #92]	; 0x5c
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008d22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d26:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8008d2a:	6602      	str	r2, [r0, #96]	; 0x60
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8008d2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d30:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8008d34:	6642      	str	r2, [r0, #100]	; 0x64
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8008d36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d3a:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8008d3e:	6682      	str	r2, [r0, #104]	; 0x68
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8008d40:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008d44:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008d48:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8008d4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d50:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8008d54:	66c2      	str	r2, [r0, #108]	; 0x6c
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008d56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d5a:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8008d5e:	6702      	str	r2, [r0, #112]	; 0x70
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8008d60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d64:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8008d68:	6742      	str	r2, [r0, #116]	; 0x74
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8008d6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d6e:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 8008d72:	6782      	str	r2, [r0, #120]	; 0x78
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008d74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008d7c:	67c2      	str	r2, [r0, #124]	; 0x7c
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d86:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8008d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	000fffff 	.word	0x000fffff
 8008d94:	40021000 	.word	0x40021000

08008d98 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8008d98:	b508      	push	{r3, lr}
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008d9a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8008d9e:	d00b      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008da0:	4bbe      	ldr	r3, [pc, #760]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d04a      	beq.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d07f      	beq.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d030      	beq.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
      pllvco = 0U;
 8008db4:	2100      	movs	r1, #0
 8008db6:	e04c      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008db8:	4bb8      	ldr	r3, [pc, #736]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
    switch(srcclk)
 8008dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc6:	d012      	beq.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8008dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dcc:	d01a      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8008dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd2:	d001      	beq.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
  uint32_t frequency = 0U;
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	e009      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008dd8:	4bb0      	ldr	r3, [pc, #704]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dde:	f003 0302 	and.w	r3, r3, #2
        frequency = LSE_VALUE;
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf0c      	ite	eq
 8008de6:	2000      	moveq	r0, #0
 8008de8:	f44f 4000 	movne.w	r0, #32768	; 0x8000
}
 8008dec:	bd08      	pop	{r3, pc}
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008dee:	4bab      	ldr	r3, [pc, #684]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008df4:	f003 0302 	and.w	r3, r3, #2
          frequency = LSI_VALUE;
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	bf0c      	ite	eq
 8008dfc:	2000      	moveq	r0, #0
 8008dfe:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8008e02:	e7f3      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e04:	4ba5      	ldr	r3, [pc, #660]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
        frequency = HSE_VALUE / 32U;
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	48a4      	ldr	r0, [pc, #656]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8008e10:	bf08      	it	eq
 8008e12:	2000      	moveq	r0, #0
 8008e14:	e7ea      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008e16:	4ba1      	ldr	r3, [pc, #644]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f013 0f02 	tst.w	r3, #2
 8008e1e:	d050      	beq.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008e20:	4b9e      	ldr	r3, [pc, #632]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f013 0f08 	tst.w	r3, #8
 8008e28:	4b9c      	ldr	r3, [pc, #624]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e2a:	bf19      	ittee	ne
 8008e2c:	681b      	ldrne	r3, [r3, #0]
 8008e2e:	f3c3 1303 	ubfxne	r3, r3, #4, #4
 8008e32:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8008e36:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 8008e3a:	4a9a      	ldr	r2, [pc, #616]	; (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8008e3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e40:	e007      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e42:	4b96      	ldr	r3, [pc, #600]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        pllvco = 0U;
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	4996      	ldr	r1, [pc, #600]	; (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008e4e:	bf08      	it	eq
 8008e50:	2100      	moveq	r1, #0
    switch(PeriphClk)
 8008e52:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008e56:	f000 82b1 	beq.w	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8008e5a:	f200 8082 	bhi.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8008e5e:	2810      	cmp	r0, #16
 8008e60:	f000 81cd 	beq.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008e64:	d840      	bhi.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8008e66:	2802      	cmp	r0, #2
 8008e68:	f000 815c 	beq.w	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8008e6c:	d92b      	bls.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8008e6e:	2804      	cmp	r0, #4
 8008e70:	f000 8189 	beq.w	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8008e74:	2808      	cmp	r0, #8
 8008e76:	f040 80d3 	bne.w	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008e7a:	4b88      	ldr	r3, [pc, #544]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        switch(srcclk)
 8008e84:	2b40      	cmp	r3, #64	; 0x40
 8008e86:	f000 81ae 	beq.w	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008e8a:	f240 81a6 	bls.w	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008e8e:	2b80      	cmp	r3, #128	; 0x80
 8008e90:	f000 81ac 	beq.w	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8008e94:	2bc0      	cmp	r3, #192	; 0xc0
 8008e96:	f040 82f9 	bne.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e9a:	4b80      	ldr	r3, [pc, #512]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea0:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2000      	moveq	r0, #0
 8008eaa:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008eae:	e79d      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008eb0:	4b7a      	ldr	r3, [pc, #488]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
        pllvco = 0U;
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	497c      	ldr	r1, [pc, #496]	; (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8008ebc:	bf08      	it	eq
 8008ebe:	2100      	moveq	r1, #0
 8008ec0:	e7c7      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
        pllvco = 0U;
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	e7c5      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    switch(PeriphClk)
 8008ec6:	2801      	cmp	r0, #1
 8008ec8:	f040 80aa 	bne.w	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008ecc:	4b73      	ldr	r3, [pc, #460]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed2:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	f200 82d2 	bhi.w	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008edc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008ee0:	010b0108 	.word	0x010b0108
 8008ee4:	0117010e 	.word	0x0117010e
    switch(PeriphClk)
 8008ee8:	2840      	cmp	r0, #64	; 0x40
 8008eea:	f000 8219 	beq.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
 8008eee:	d918      	bls.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8008ef0:	2880      	cmp	r0, #128	; 0x80
 8008ef2:	f000 8232 	beq.w	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8008ef6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008efa:	f040 8091 	bne.w	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008efe:	4b67      	ldr	r3, [pc, #412]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        switch(srcclk)
 8008f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0c:	f000 824a 	beq.w	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f14:	f000 8249 	beq.w	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 8240 	beq.w	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
  uint32_t frequency = 0U;
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e764      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008f22:	2820      	cmp	r0, #32
 8008f24:	d17c      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008f26:	4b5d      	ldr	r3, [pc, #372]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        switch(srcclk)
 8008f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f34:	f000 8196 	beq.w	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8008f38:	f240 818e 	bls.w	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8008f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f40:	f000 8193 	beq.w	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8008f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f48:	f040 82a4 	bne.w	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f4c:	4b53      	ldr	r3, [pc, #332]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f52:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bf0c      	ite	eq
 8008f5a:	2000      	moveq	r0, #0
 8008f5c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008f60:	e744      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008f62:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8008f66:	f000 8189 	beq.w	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8008f6a:	d83f      	bhi.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008f6c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008f70:	d058      	beq.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
 8008f72:	d907      	bls.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8008f74:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8008f78:	d125      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008f7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008f7e:	f7ff fa63 	bl	8008448 <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 8008f82:	e733      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008f84:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008f88:	d14a      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008f8a:	4b44      	ldr	r3, [pc, #272]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f90:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 8008f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f98:	f000 8248 	beq.w	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
 8008f9c:	f240 8241 	bls.w	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008fa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fa4:	f000 824d 	beq.w	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
 8008fa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fac:	f040 827a 	bne.w	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008fb0:	4b3a      	ldr	r3, [pc, #232]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb6:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bf0c      	ite	eq
 8008fbe:	2000      	moveq	r0, #0
 8008fc0:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008fc4:	e712      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008fc6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008fca:	d129      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008fcc:	4b33      	ldr	r3, [pc, #204]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
        switch(srcclk)
 8008fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fda:	d03f      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008fdc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fe0:	d025      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
 8008fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fe6:	d063      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
  uint32_t frequency = 0U;
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e6ff      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8008fec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8008ff0:	f000 818b 	beq.w	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8008ff4:	d80e      	bhi.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008ff6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008ffa:	d111      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008ffc:	4b27      	ldr	r3, [pc, #156]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        switch(srcclk)
 8009002:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8009006:	f000 8225 	beq.w	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 800900a:	2b00      	cmp	r3, #0
 800900c:	f040 8225 	bne.w	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
  uint32_t frequency = 0U;
 8009010:	2000      	movs	r0, #0
 8009012:	e6eb      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 8009014:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8009018:	d0d8      	beq.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800901a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800901e:	d0d5      	beq.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
  uint32_t frequency = 0U;
 8009020:	2000      	movs	r0, #0
 8009022:	e6e3      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009024:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009028:	f7ff fa0e 	bl	8008448 <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 800902c:	e6de      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800902e:	4b1b      	ldr	r3, [pc, #108]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f013 0f02 	tst.w	r3, #2
 8009036:	f000 8219 	beq.w	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800903a:	4b18      	ldr	r3, [pc, #96]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f013 0f08 	tst.w	r3, #8
 8009042:	4b16      	ldr	r3, [pc, #88]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8009044:	bf19      	ittee	ne
 8009046:	681b      	ldrne	r3, [r3, #0]
 8009048:	f3c3 1303 	ubfxne	r3, r3, #4, #4
 800904c:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8009050:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 8009054:	4a13      	ldr	r2, [pc, #76]	; (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8009056:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800905a:	e6c7      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800905c:	4b0f      	ldr	r3, [pc, #60]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009064:	f000 8204 	beq.w	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009070:	f000 8200 	beq.w	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009074:	4809      	ldr	r0, [pc, #36]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8009076:	68c3      	ldr	r3, [r0, #12]
 8009078:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800907c:	fb01 f303 	mul.w	r3, r1, r3
 8009080:	68c2      	ldr	r2, [r0, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009082:	68c0      	ldr	r0, [r0, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009084:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8009088:	3201      	adds	r2, #1
 800908a:	fbb3 f3f2 	udiv	r3, r3, r2
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800908e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8009092:	3001      	adds	r0, #1
 8009094:	0040      	lsls	r0, r0, #1
 8009096:	fbb3 f0f0 	udiv	r0, r3, r0
 800909a:	e6a7      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800909c:	40021000 	.word	0x40021000
 80090a0:	0003d090 	.word	0x0003d090
 80090a4:	08013bcc 	.word	0x08013bcc
 80090a8:	00f42400 	.word	0x00f42400
 80090ac:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80090b0:	4bb4      	ldr	r3, [pc, #720]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80090b8:	f000 81de 	beq.w	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80090bc:	4bb1      	ldr	r3, [pc, #708]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80090c4:	f000 81da 	beq.w	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80090c8:	48ae      	ldr	r0, [pc, #696]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80090ca:	6903      	ldr	r3, [r0, #16]
 80090cc:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80090d0:	fb01 f303 	mul.w	r3, r1, r3
 80090d4:	68c2      	ldr	r2, [r0, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80090d6:	6900      	ldr	r0, [r0, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80090d8:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80090dc:	3201      	adds	r2, #1
 80090de:	fbb3 f3f2 	udiv	r3, r3, r2
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80090e2:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80090e6:	3001      	adds	r0, #1
 80090e8:	0040      	lsls	r0, r0, #1
 80090ea:	fbb3 f0f0 	udiv	r0, r3, r0
 80090ee:	e67d      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK2Freq();
 80090f0:	f7ff f8e2 	bl	80082b8 <HAL_RCC_GetPCLK2Freq>
          break;
 80090f4:	e67a      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 80090f6:	f7fe fcd3 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 80090fa:	e677      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090fc:	4ba1      	ldr	r3, [pc, #644]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009104:	2b00      	cmp	r3, #0
 8009106:	48a0      	ldr	r0, [pc, #640]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8009108:	bf08      	it	eq
 800910a:	2000      	moveq	r0, #0
 800910c:	e66e      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800910e:	4b9d      	ldr	r3, [pc, #628]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009114:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8009118:	2b00      	cmp	r3, #0
 800911a:	bf0c      	ite	eq
 800911c:	2000      	moveq	r0, #0
 800911e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009122:	e663      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009124:	4b97      	ldr	r3, [pc, #604]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912a:	f003 030c 	and.w	r3, r3, #12
        switch(srcclk)
 800912e:	2b0c      	cmp	r3, #12
 8009130:	f200 81a8 	bhi.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8009134:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009138:	01a6000d 	.word	0x01a6000d
 800913c:	01a601a6 	.word	0x01a601a6
 8009140:	01a60010 	.word	0x01a60010
 8009144:	01a601a6 	.word	0x01a601a6
 8009148:	01a60013 	.word	0x01a60013
 800914c:	01a601a6 	.word	0x01a601a6
 8009150:	001c      	.short	0x001c
          frequency = HAL_RCC_GetPCLK1Freq();
 8009152:	f7ff f89f 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 8009156:	e649      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 8009158:	f7fe fca2 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 800915c:	e646      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800915e:	4b89      	ldr	r3, [pc, #548]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009166:	2b00      	cmp	r3, #0
 8009168:	4887      	ldr	r0, [pc, #540]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800916a:	bf08      	it	eq
 800916c:	2000      	moveq	r0, #0
 800916e:	e63d      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009170:	4b84      	ldr	r3, [pc, #528]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009176:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 800917a:	2b00      	cmp	r3, #0
 800917c:	bf0c      	ite	eq
 800917e:	2000      	moveq	r0, #0
 8009180:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009184:	e632      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009186:	4b7f      	ldr	r3, [pc, #508]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        switch(srcclk)
 8009190:	2b10      	cmp	r3, #16
 8009192:	d016      	beq.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
 8009194:	d90f      	bls.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 8009196:	2b20      	cmp	r3, #32
 8009198:	d016      	beq.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 800919a:	2b30      	cmp	r3, #48	; 0x30
 800919c:	f040 8174 	bne.w	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091a0:	4b78      	ldr	r3, [pc, #480]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80091a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a6:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bf0c      	ite	eq
 80091ae:	2000      	moveq	r0, #0
 80091b0:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80091b4:	e61a      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f040 8166 	bne.w	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091bc:	f7ff f86a 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 80091c0:	e614      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 80091c2:	f7fe fc6d 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 80091c6:	e611      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091c8:	4b6e      	ldr	r3, [pc, #440]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	486d      	ldr	r0, [pc, #436]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80091d4:	bf08      	it	eq
 80091d6:	2000      	moveq	r0, #0
 80091d8:	e608      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f040 8156 	bne.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091e0:	f7ff f858 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 80091e4:	e602      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 80091e6:	f7fe fc5b 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 80091ea:	e5ff      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091ec:	4b65      	ldr	r3, [pc, #404]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	4864      	ldr	r0, [pc, #400]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80091f8:	bf08      	it	eq
 80091fa:	2000      	moveq	r0, #0
 80091fc:	e5f6      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80091fe:	4b61      	ldr	r3, [pc, #388]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009204:	f403 7340 	and.w	r3, r3, #768	; 0x300
        switch(srcclk)
 8009208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800920c:	d018      	beq.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800920e:	d911      	bls.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 8009210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009214:	d017      	beq.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800921a:	f040 8139 	bne.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800921e:	4b59      	ldr	r3, [pc, #356]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009224:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 8009228:	2b00      	cmp	r3, #0
 800922a:	bf0c      	ite	eq
 800922c:	2000      	moveq	r0, #0
 800922e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009232:	e5db      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 8009234:	2b00      	cmp	r3, #0
 8009236:	f040 812b 	bne.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800923a:	f7ff f82b 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 800923e:	e5d5      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 8009240:	f7fe fc2e 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 8009244:	e5d2      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009246:	4b4f      	ldr	r3, [pc, #316]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800924e:	2b00      	cmp	r3, #0
 8009250:	484d      	ldr	r0, [pc, #308]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8009252:	bf08      	it	eq
 8009254:	2000      	moveq	r0, #0
 8009256:	e5c9      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 8009258:	2b00      	cmp	r3, #0
 800925a:	f040 811b 	bne.w	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800925e:	f7ff f819 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 8009262:	e5c3      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 8009264:	f7fe fc1c 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 8009268:	e5c0      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800926a:	4b46      	ldr	r3, [pc, #280]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009272:	2b00      	cmp	r3, #0
 8009274:	4844      	ldr	r0, [pc, #272]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8009276:	bf08      	it	eq
 8009278:	2000      	moveq	r0, #0
 800927a:	e5b7      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800927c:	4b41      	ldr	r3, [pc, #260]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800927e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        switch(srcclk)
 8009286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800928a:	d024      	beq.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 800928c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009290:	d004      	beq.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009296:	d004      	beq.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
  uint32_t frequency = 0U;
 8009298:	2000      	movs	r0, #0
 800929a:	e5a7      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800929c:	f7fe fc00 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 80092a0:	e5a4      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 80092a2:	4b38      	ldr	r3, [pc, #224]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80092aa:	f000 80f5 	beq.w	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80092ae:	4835      	ldr	r0, [pc, #212]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80092b0:	6903      	ldr	r3, [r0, #16]
 80092b2:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80092b6:	fb01 f303 	mul.w	r3, r1, r3
 80092ba:	68c2      	ldr	r2, [r0, #12]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80092bc:	6900      	ldr	r0, [r0, #16]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80092be:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80092c2:	3201      	adds	r2, #1
 80092c4:	fbb3 f3f2 	udiv	r3, r3, r2
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80092c8:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80092cc:	3001      	adds	r0, #1
 80092ce:	0040      	lsls	r0, r0, #1
 80092d0:	fbb3 f0f0 	udiv	r0, r3, r0
 80092d4:	e58a      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 80092d6:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80092de:	f000 80dd 	beq.w	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80092e2:	4b28      	ldr	r3, [pc, #160]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80092e4:	6958      	ldr	r0, [r3, #20]
 80092e6:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80092ea:	fb01 f000 	mul.w	r0, r1, r0
 80092ee:	68da      	ldr	r2, [r3, #12]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80092f0:	695b      	ldr	r3, [r3, #20]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80092f2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80092f6:	3201      	adds	r2, #1
 80092f8:	fbb0 f0f2 	udiv	r0, r0, r2
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80092fc:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8009300:	3301      	adds	r3, #1
 8009302:	005b      	lsls	r3, r3, #1
 8009304:	fbb0 f0f3 	udiv	r0, r0, r3
 8009308:	e570      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800930a:	4b1e      	ldr	r3, [pc, #120]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800930c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8009310:	2b00      	cmp	r3, #0
 8009312:	db02      	blt.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x582>
          frequency = HAL_RCC_GetPCLK2Freq();
 8009314:	f7fe ffd0 	bl	80082b8 <HAL_RCC_GetPCLK2Freq>
 8009318:	e568      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800931a:	f7fe fbc1 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
 800931e:	e565      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009320:	4b18      	ldr	r3, [pc, #96]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8009322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009326:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
        switch(srcclk)
 800932a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932e:	d008      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8009330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009334:	d008      	beq.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8009336:	b10b      	cbz	r3, 800933c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
  uint32_t frequency = 0U;
 8009338:	2000      	movs	r0, #0
 800933a:	e557      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 800933c:	f7fe ffaa 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 8009340:	e554      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 8009342:	f7fe fbad 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 8009346:	e551      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009348:	4b0e      	ldr	r3, [pc, #56]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009350:	2b00      	cmp	r3, #0
 8009352:	480d      	ldr	r0, [pc, #52]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8009354:	bf08      	it	eq
 8009356:	2000      	moveq	r0, #0
 8009358:	e548      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800935a:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800935c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009360:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        switch(srcclk)
 8009364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009368:	d008      	beq.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800936a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800936e:	d00d      	beq.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 8009370:	b10b      	cbz	r3, 8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
  uint32_t frequency = 0U;
 8009372:	2000      	movs	r0, #0
 8009374:	e53a      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009376:	f7fe ff8d 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 800937a:	e537      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800937c:	f7fe fb90 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 8009380:	e534      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009382:	bf00      	nop
 8009384:	40021000 	.word	0x40021000
 8009388:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800938c:	4b46      	ldr	r3, [pc, #280]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009394:	2b00      	cmp	r3, #0
 8009396:	4845      	ldr	r0, [pc, #276]	; (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 8009398:	bf08      	it	eq
 800939a:	2000      	moveq	r0, #0
 800939c:	e526      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 800939e:	f7fe ff79 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 80093a2:	e523      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 80093a4:	f7fe fb7c 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
          break;
 80093a8:	e520      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093aa:	4b3f      	ldr	r3, [pc, #252]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	483d      	ldr	r0, [pc, #244]	; (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 80093b6:	bf08      	it	eq
 80093b8:	2000      	moveq	r0, #0
 80093ba:	e517      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80093bc:	4b3a      	ldr	r3, [pc, #232]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 80093be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        switch(srcclk)
 80093c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093ca:	d016      	beq.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80093cc:	d910      	bls.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80093ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80093d2:	d01d      	beq.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 80093d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80093d8:	d162      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80093da:	4b33      	ldr	r3, [pc, #204]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 80093dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e0:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bf0c      	ite	eq
 80093e8:	2000      	moveq	r0, #0
 80093ea:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80093ee:	e4fd      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d155      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
          frequency = HAL_RCC_GetPCLK1Freq();
 80093f4:	f7fe ff4e 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 80093f8:	e4f8      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80093fa:	4b2b      	ldr	r3, [pc, #172]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 80093fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009400:	f003 0302 	and.w	r3, r3, #2
              frequency = LSI_VALUE;
 8009404:	2b00      	cmp	r3, #0
 8009406:	bf0c      	ite	eq
 8009408:	2000      	moveq	r0, #0
 800940a:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800940e:	e4ed      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009410:	4b25      	ldr	r3, [pc, #148]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009418:	2b00      	cmp	r3, #0
 800941a:	4824      	ldr	r0, [pc, #144]	; (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 800941c:	bf08      	it	eq
 800941e:	2000      	moveq	r0, #0
 8009420:	e4e4      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 8009422:	2b00      	cmp	r3, #0
 8009424:	d13e      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009426:	f7fe ff35 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 800942a:	e4df      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800942c:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800942e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009432:	f003 0302 	and.w	r3, r3, #2
              frequency = LSI_VALUE;
 8009436:	2b00      	cmp	r3, #0
 8009438:	bf0c      	ite	eq
 800943a:	2000      	moveq	r0, #0
 800943c:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8009440:	e4d4      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009442:	4b19      	ldr	r3, [pc, #100]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800944a:	2b00      	cmp	r3, #0
 800944c:	4817      	ldr	r0, [pc, #92]	; (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 800944e:	bf08      	it	eq
 8009450:	2000      	moveq	r0, #0
 8009452:	e4cb      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009454:	f7fe ff1e 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
          break;
 8009458:	e4c8      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800945a:	4b13      	ldr	r3, [pc, #76]	; (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 8009462:	2b00      	cmp	r3, #0
 8009464:	4811      	ldr	r0, [pc, #68]	; (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 8009466:	bf08      	it	eq
 8009468:	2000      	moveq	r0, #0
 800946a:	e4bf      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0U;
 800946c:	2000      	movs	r0, #0
 800946e:	e4bd      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009470:	2000      	movs	r0, #0
 8009472:	e4bb      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009474:	2000      	movs	r0, #0
 8009476:	e4b9      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009478:	2000      	movs	r0, #0
 800947a:	e4b7      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800947c:	2000      	movs	r0, #0
 800947e:	e4b5      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009480:	2000      	movs	r0, #0
 8009482:	e4b3      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009484:	2000      	movs	r0, #0
 8009486:	e4b1      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009488:	2000      	movs	r0, #0
 800948a:	e4af      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800948c:	2000      	movs	r0, #0
 800948e:	e4ad      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009490:	2000      	movs	r0, #0
 8009492:	e4ab      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009494:	2000      	movs	r0, #0
 8009496:	e4a9      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8009498:	2000      	movs	r0, #0
 800949a:	e4a7      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800949c:	2000      	movs	r0, #0
 800949e:	e4a5      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80094a0:	2000      	movs	r0, #0
 80094a2:	e4a3      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80094a4:	2000      	movs	r0, #0
 80094a6:	e4a1      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80094a8:	40021000 	.word	0x40021000
 80094ac:	00f42400 	.word	0x00f42400

080094b0 <HAL_RCCEx_EnablePLLSAI1>:
{
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	4606      	mov	r6, r0
  __HAL_RCC_PLLSAI1_DISABLE();
 80094b4:	4a21      	ldr	r2, [pc, #132]	; (800953c <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 80094b6:	6813      	ldr	r3, [r2, #0]
 80094b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094bc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80094be:	f7f8 fdeb 	bl	8002098 <HAL_GetTick>
 80094c2:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80094c4:	4c1d      	ldr	r4, [pc, #116]	; (800953c <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80094cc:	d008      	beq.n	80094e0 <HAL_RCCEx_EnablePLLSAI1+0x30>
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094ce:	f7f8 fde3 	bl	8002098 <HAL_GetTick>
 80094d2:	1b40      	subs	r0, r0, r5
 80094d4:	2802      	cmp	r0, #2
 80094d6:	d9f6      	bls.n	80094c6 <HAL_RCCEx_EnablePLLSAI1+0x16>
      status = HAL_TIMEOUT;
 80094d8:	2003      	movs	r0, #3
}
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	2000      	movs	r0, #0
 80094de:	e7fc      	b.n	80094da <HAL_RCCEx_EnablePLLSAI1+0x2a>
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
 80094e0:	4a16      	ldr	r2, [pc, #88]	; (800953c <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 80094e2:	6910      	ldr	r0, [r2, #16]
 80094e4:	68b1      	ldr	r1, [r6, #8]
 80094e6:	4b16      	ldr	r3, [pc, #88]	; (8009540 <HAL_RCCEx_EnablePLLSAI1+0x90>)
 80094e8:	4003      	ands	r3, r0
 80094ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80094ee:	68f1      	ldr	r1, [r6, #12]
 80094f0:	0909      	lsrs	r1, r1, #4
 80094f2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80094f6:	6931      	ldr	r1, [r6, #16]
 80094f8:	0849      	lsrs	r1, r1, #1
 80094fa:	3901      	subs	r1, #1
 80094fc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8009500:	6971      	ldr	r1, [r6, #20]
 8009502:	0849      	lsrs	r1, r1, #1
 8009504:	3901      	subs	r1, #1
 8009506:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800950a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1Init->PLLSAI1ClockOut);
 800950c:	6913      	ldr	r3, [r2, #16]
 800950e:	69b1      	ldr	r1, [r6, #24]
 8009510:	430b      	orrs	r3, r1
 8009512:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 8009514:	6813      	ldr	r3, [r2, #0]
 8009516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800951a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800951c:	f7f8 fdbc 	bl	8002098 <HAL_GetTick>
 8009520:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009522:	4c06      	ldr	r4, [pc, #24]	; (800953c <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800952a:	d1d7      	bne.n	80094dc <HAL_RCCEx_EnablePLLSAI1+0x2c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800952c:	f7f8 fdb4 	bl	8002098 <HAL_GetTick>
 8009530:	1b40      	subs	r0, r0, r5
 8009532:	2802      	cmp	r0, #2
 8009534:	d9f6      	bls.n	8009524 <HAL_RCCEx_EnablePLLSAI1+0x74>
        status = HAL_TIMEOUT;
 8009536:	2003      	movs	r0, #3
  return status;
 8009538:	e7cf      	b.n	80094da <HAL_RCCEx_EnablePLLSAI1+0x2a>
 800953a:	bf00      	nop
 800953c:	40021000 	.word	0x40021000
 8009540:	f99d80ff 	.word	0xf99d80ff

08009544 <HAL_RCCEx_DisablePLLSAI1>:
{
 8009544:	b538      	push	{r3, r4, r5, lr}
  __HAL_RCC_PLLSAI1_DISABLE();
 8009546:	4a12      	ldr	r2, [pc, #72]	; (8009590 <HAL_RCCEx_DisablePLLSAI1+0x4c>)
 8009548:	6813      	ldr	r3, [r2, #0]
 800954a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800954e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8009550:	f7f8 fda2 	bl	8002098 <HAL_GetTick>
 8009554:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009556:	4c0e      	ldr	r4, [pc, #56]	; (8009590 <HAL_RCCEx_DisablePLLSAI1+0x4c>)
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800955e:	d006      	beq.n	800956e <HAL_RCCEx_DisablePLLSAI1+0x2a>
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009560:	f7f8 fd9a 	bl	8002098 <HAL_GetTick>
 8009564:	1b40      	subs	r0, r0, r5
 8009566:	2802      	cmp	r0, #2
 8009568:	d9f6      	bls.n	8009558 <HAL_RCCEx_DisablePLLSAI1+0x14>
      status = HAL_TIMEOUT;
 800956a:	2003      	movs	r0, #3
 800956c:	e000      	b.n	8009570 <HAL_RCCEx_DisablePLLSAI1+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 800956e:	2000      	movs	r0, #0
  __HAL_RCC_PLLSAI1CLKOUT_DISABLE(RCC_PLLSAI1CFGR_PLLSAI1PEN|RCC_PLLSAI1CFGR_PLLSAI1QEN|RCC_PLLSAI1CFGR_PLLSAI1REN);
 8009570:	4a07      	ldr	r2, [pc, #28]	; (8009590 <HAL_RCCEx_DisablePLLSAI1+0x4c>)
 8009572:	6913      	ldr	r3, [r2, #16]
 8009574:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800957c:	6113      	str	r3, [r2, #16]
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800957e:	6813      	ldr	r3, [r2, #0]
 8009580:	f013 5f08 	tst.w	r3, #570425344	; 0x22000000
 8009584:	d103      	bne.n	800958e <HAL_RCCEx_DisablePLLSAI1+0x4a>
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009586:	68d3      	ldr	r3, [r2, #12]
 8009588:	f023 0303 	bic.w	r3, r3, #3
 800958c:	60d3      	str	r3, [r2, #12]
}
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	40021000 	.word	0x40021000

08009594 <HAL_RCCEx_EnablePLLSAI2>:
{
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	4606      	mov	r6, r0
  __HAL_RCC_PLLSAI2_DISABLE();
 8009598:	4a1e      	ldr	r2, [pc, #120]	; (8009614 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 800959a:	6813      	ldr	r3, [r2, #0]
 800959c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095a0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80095a2:	f7f8 fd79 	bl	8002098 <HAL_GetTick>
 80095a6:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80095a8:	4c1a      	ldr	r4, [pc, #104]	; (8009614 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80095b0:	d008      	beq.n	80095c4 <HAL_RCCEx_EnablePLLSAI2+0x30>
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80095b2:	f7f8 fd71 	bl	8002098 <HAL_GetTick>
 80095b6:	1b40      	subs	r0, r0, r5
 80095b8:	2802      	cmp	r0, #2
 80095ba:	d9f6      	bls.n	80095aa <HAL_RCCEx_EnablePLLSAI2+0x16>
      status = HAL_TIMEOUT;
 80095bc:	2003      	movs	r0, #3
}
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	2000      	movs	r0, #0
 80095c2:	e7fc      	b.n	80095be <HAL_RCCEx_EnablePLLSAI2+0x2a>
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2R);
 80095c4:	4a13      	ldr	r2, [pc, #76]	; (8009614 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 80095c6:	6950      	ldr	r0, [r2, #20]
 80095c8:	68b1      	ldr	r1, [r6, #8]
 80095ca:	4b13      	ldr	r3, [pc, #76]	; (8009618 <HAL_RCCEx_EnablePLLSAI2+0x84>)
 80095cc:	4003      	ands	r3, r0
 80095ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80095d2:	68f1      	ldr	r1, [r6, #12]
 80095d4:	0909      	lsrs	r1, r1, #4
 80095d6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80095da:	6931      	ldr	r1, [r6, #16]
 80095dc:	0849      	lsrs	r1, r1, #1
 80095de:	3901      	subs	r1, #1
 80095e0:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80095e4:	6153      	str	r3, [r2, #20]
    __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PLLSAI2Init->PLLSAI2ClockOut);
 80095e6:	6953      	ldr	r3, [r2, #20]
 80095e8:	6971      	ldr	r1, [r6, #20]
 80095ea:	430b      	orrs	r3, r1
 80095ec:	6153      	str	r3, [r2, #20]
    __HAL_RCC_PLLSAI2_ENABLE();
 80095ee:	6813      	ldr	r3, [r2, #0]
 80095f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095f4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80095f6:	f7f8 fd4f 	bl	8002098 <HAL_GetTick>
 80095fa:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095fc:	4c05      	ldr	r4, [pc, #20]	; (8009614 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8009604:	d1dc      	bne.n	80095c0 <HAL_RCCEx_EnablePLLSAI2+0x2c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009606:	f7f8 fd47 	bl	8002098 <HAL_GetTick>
 800960a:	1b40      	subs	r0, r0, r5
 800960c:	2802      	cmp	r0, #2
 800960e:	d9f6      	bls.n	80095fe <HAL_RCCEx_EnablePLLSAI2+0x6a>
        status = HAL_TIMEOUT;
 8009610:	2003      	movs	r0, #3
  return status;
 8009612:	e7d4      	b.n	80095be <HAL_RCCEx_EnablePLLSAI2+0x2a>
 8009614:	40021000 	.word	0x40021000
 8009618:	f9fd80ff 	.word	0xf9fd80ff

0800961c <HAL_RCCEx_DisablePLLSAI2>:
{
 800961c:	b538      	push	{r3, r4, r5, lr}
  __HAL_RCC_PLLSAI2_DISABLE();
 800961e:	4a12      	ldr	r2, [pc, #72]	; (8009668 <HAL_RCCEx_DisablePLLSAI2+0x4c>)
 8009620:	6813      	ldr	r3, [r2, #0]
 8009622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009626:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8009628:	f7f8 fd36 	bl	8002098 <HAL_GetTick>
 800962c:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800962e:	4c0e      	ldr	r4, [pc, #56]	; (8009668 <HAL_RCCEx_DisablePLLSAI2+0x4c>)
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8009636:	d006      	beq.n	8009646 <HAL_RCCEx_DisablePLLSAI2+0x2a>
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009638:	f7f8 fd2e 	bl	8002098 <HAL_GetTick>
 800963c:	1b40      	subs	r0, r0, r5
 800963e:	2802      	cmp	r0, #2
 8009640:	d9f6      	bls.n	8009630 <HAL_RCCEx_DisablePLLSAI2+0x14>
      status = HAL_TIMEOUT;
 8009642:	2003      	movs	r0, #3
 8009644:	e000      	b.n	8009648 <HAL_RCCEx_DisablePLLSAI2+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 8009646:	2000      	movs	r0, #0
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
 8009648:	4a07      	ldr	r2, [pc, #28]	; (8009668 <HAL_RCCEx_DisablePLLSAI2+0x4c>)
 800964a:	6953      	ldr	r3, [r2, #20]
 800964c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009654:	6153      	str	r3, [r2, #20]
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY)) == 0U)
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	f013 6f20 	tst.w	r3, #167772160	; 0xa000000
 800965c:	d103      	bne.n	8009666 <HAL_RCCEx_DisablePLLSAI2+0x4a>
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800965e:	68d3      	ldr	r3, [r2, #12]
 8009660:	f023 0303 	bic.w	r3, r3, #3
 8009664:	60d3      	str	r3, [r2, #12]
}
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	40021000 	.word	0x40021000

0800966c <HAL_RCCEx_WakeUpStopCLKConfig>:
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 800966c:	4a03      	ldr	r2, [pc, #12]	; (800967c <HAL_RCCEx_WakeUpStopCLKConfig+0x10>)
 800966e:	6893      	ldr	r3, [r2, #8]
 8009670:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009674:	4318      	orrs	r0, r3
 8009676:	6090      	str	r0, [r2, #8]
}
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	40021000 	.word	0x40021000

08009680 <HAL_RCCEx_StandbyMSIRangeConfig>:
  __HAL_RCC_MSI_STANDBY_RANGE_CONFIG(MSIRange);
 8009680:	4a04      	ldr	r2, [pc, #16]	; (8009694 <HAL_RCCEx_StandbyMSIRangeConfig+0x14>)
 8009682:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8009686:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800968a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800968e:	f8c2 0094 	str.w	r0, [r2, #148]	; 0x94
}
 8009692:	4770      	bx	lr
 8009694:	40021000 	.word	0x40021000

08009698 <HAL_RCCEx_EnableLSECSS>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8009698:	4a03      	ldr	r2, [pc, #12]	; (80096a8 <HAL_RCCEx_EnableLSECSS+0x10>)
 800969a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800969e:	f043 0320 	orr.w	r3, r3, #32
 80096a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80096a6:	4770      	bx	lr
 80096a8:	40021000 	.word	0x40021000

080096ac <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80096ac:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <HAL_RCCEx_DisableLSECSS+0x18>)
 80096ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80096b2:	f022 0220 	bic.w	r2, r2, #32
 80096b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 80096ba:	699a      	ldr	r2, [r3, #24]
 80096bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80096c0:	619a      	str	r2, [r3, #24]
}
 80096c2:	4770      	bx	lr
 80096c4:	40021000 	.word	0x40021000

080096c8 <HAL_RCCEx_EnableLSECSS_IT>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80096c8:	4b0a      	ldr	r3, [pc, #40]	; (80096f4 <HAL_RCCEx_EnableLSECSS_IT+0x2c>)
 80096ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80096ce:	f042 0220 	orr.w	r2, r2, #32
 80096d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 80096d6:	699a      	ldr	r2, [r3, #24]
 80096d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096dc:	619a      	str	r2, [r3, #24]
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 80096de:	f5a3 3386 	sub.w	r3, r3, #68608	; 0x10c00
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80096e8:	601a      	str	r2, [r3, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80096f0:	609a      	str	r2, [r3, #8]
}
 80096f2:	4770      	bx	lr
 80096f4:	40021000 	.word	0x40021000

080096f8 <HAL_RCCEx_LSECSS_Callback>:
}
 80096f8:	4770      	bx	lr
	...

080096fc <HAL_RCCEx_LSECSS_IRQHandler>:
{
 80096fc:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 80096fe:	4b06      	ldr	r3, [pc, #24]	; (8009718 <HAL_RCCEx_LSECSS_IRQHandler+0x1c>)
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009706:	d100      	bne.n	800970a <HAL_RCCEx_LSECSS_IRQHandler+0xe>
}
 8009708:	bd08      	pop	{r3, pc}
    HAL_RCCEx_LSECSS_Callback();
 800970a:	f7ff fff5 	bl	80096f8 <HAL_RCCEx_LSECSS_Callback>
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800970e:	4b02      	ldr	r3, [pc, #8]	; (8009718 <HAL_RCCEx_LSECSS_IRQHandler+0x1c>)
 8009710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009714:	621a      	str	r2, [r3, #32]
}
 8009716:	e7f7      	b.n	8009708 <HAL_RCCEx_LSECSS_IRQHandler+0xc>
 8009718:	40021000 	.word	0x40021000

0800971c <HAL_RCCEx_EnableLSCO>:
{
 800971c:	b530      	push	{r4, r5, lr}
 800971e:	b089      	sub	sp, #36	; 0x24
 8009720:	4605      	mov	r5, r0
  __LSCO_CLK_ENABLE();
 8009722:	4c27      	ldr	r4, [pc, #156]	; (80097c0 <HAL_RCCEx_EnableLSCO+0xa4>)
 8009724:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009726:	f043 0301 	orr.w	r3, r3, #1
 800972a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800972c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LSCO_PIN;
 8009736:	2304      	movs	r3, #4
 8009738:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800973a:	2303      	movs	r3, #3
 800973c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800973e:	2302      	movs	r3, #2
 8009740:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009742:	2300      	movs	r3, #0
 8009744:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8009746:	a903      	add	r1, sp, #12
 8009748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800974c:	f7fa f8d0 	bl	80038f0 <HAL_GPIO_Init>
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009750:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009752:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8009756:	d11b      	bne.n	8009790 <HAL_RCCEx_EnableLSCO+0x74>
    __HAL_RCC_PWR_CLK_ENABLE();
 8009758:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800975a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800975e:	65a2      	str	r2, [r4, #88]	; 0x58
 8009760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009766:	9302      	str	r3, [sp, #8]
 8009768:	9b02      	ldr	r3, [sp, #8]
    pwrclkchanged = SET;
 800976a:	2401      	movs	r4, #1
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800976c:	4b15      	ldr	r3, [pc, #84]	; (80097c4 <HAL_RCCEx_EnableLSCO+0xa8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009774:	d00e      	beq.n	8009794 <HAL_RCCEx_EnableLSCO+0x78>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8009776:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <HAL_RCCEx_EnableLSCO+0xa4>)
 8009778:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800977c:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8009780:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8009784:	4328      	orrs	r0, r5
 8009786:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
  if(pwrclkchanged == SET)
 800978a:	b994      	cbnz	r4, 80097b2 <HAL_RCCEx_EnableLSCO+0x96>
}
 800978c:	b009      	add	sp, #36	; 0x24
 800978e:	bd30      	pop	{r4, r5, pc}
  FlagStatus       pwrclkchanged = RESET;
 8009790:	2400      	movs	r4, #0
 8009792:	e7eb      	b.n	800976c <HAL_RCCEx_EnableLSCO+0x50>
    HAL_PWR_EnableBkUpAccess();
 8009794:	f7fd fb96 	bl	8006ec4 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8009798:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <HAL_RCCEx_EnableLSCO+0xa4>)
 800979a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800979e:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80097a2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80097a6:	4328      	orrs	r0, r5
 80097a8:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
    HAL_PWR_DisableBkUpAccess();
 80097ac:	f7fd fb92 	bl	8006ed4 <HAL_PWR_DisableBkUpAccess>
 80097b0:	e7eb      	b.n	800978a <HAL_RCCEx_EnableLSCO+0x6e>
    __HAL_RCC_PWR_CLK_DISABLE();
 80097b2:	4a03      	ldr	r2, [pc, #12]	; (80097c0 <HAL_RCCEx_EnableLSCO+0xa4>)
 80097b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80097b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097ba:	6593      	str	r3, [r2, #88]	; 0x58
}
 80097bc:	e7e6      	b.n	800978c <HAL_RCCEx_EnableLSCO+0x70>
 80097be:	bf00      	nop
 80097c0:	40021000 	.word	0x40021000
 80097c4:	40007000 	.word	0x40007000

080097c8 <HAL_RCCEx_DisableLSCO>:
{
 80097c8:	b510      	push	{r4, lr}
 80097ca:	b082      	sub	sp, #8
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097cc:	4b19      	ldr	r3, [pc, #100]	; (8009834 <HAL_RCCEx_DisableLSCO+0x6c>)
 80097ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80097d4:	d119      	bne.n	800980a <HAL_RCCEx_DisableLSCO+0x42>
    __HAL_RCC_PWR_CLK_ENABLE();
 80097d6:	4b17      	ldr	r3, [pc, #92]	; (8009834 <HAL_RCCEx_DisableLSCO+0x6c>)
 80097d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80097de:	659a      	str	r2, [r3, #88]	; 0x58
 80097e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	9b01      	ldr	r3, [sp, #4]
    pwrclkchanged = SET;
 80097ea:	2401      	movs	r4, #1
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097ec:	4b12      	ldr	r3, [pc, #72]	; (8009838 <HAL_RCCEx_DisableLSCO+0x70>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80097f4:	d00b      	beq.n	800980e <HAL_RCCEx_DisableLSCO+0x46>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 80097f6:	4a0f      	ldr	r2, [pc, #60]	; (8009834 <HAL_RCCEx_DisableLSCO+0x6c>)
 80097f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80097fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if(pwrclkchanged == SET)
 8009804:	b97c      	cbnz	r4, 8009826 <HAL_RCCEx_DisableLSCO+0x5e>
}
 8009806:	b002      	add	sp, #8
 8009808:	bd10      	pop	{r4, pc}
  FlagStatus       pwrclkchanged = RESET;
 800980a:	2400      	movs	r4, #0
 800980c:	e7ee      	b.n	80097ec <HAL_RCCEx_DisableLSCO+0x24>
    HAL_PWR_EnableBkUpAccess();
 800980e:	f7fd fb59 	bl	8006ec4 <HAL_PWR_EnableBkUpAccess>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 8009812:	4a08      	ldr	r2, [pc, #32]	; (8009834 <HAL_RCCEx_DisableLSCO+0x6c>)
 8009814:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009818:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800981c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    HAL_PWR_DisableBkUpAccess();
 8009820:	f7fd fb58 	bl	8006ed4 <HAL_PWR_DisableBkUpAccess>
 8009824:	e7ee      	b.n	8009804 <HAL_RCCEx_DisableLSCO+0x3c>
    __HAL_RCC_PWR_CLK_DISABLE();
 8009826:	4a03      	ldr	r2, [pc, #12]	; (8009834 <HAL_RCCEx_DisableLSCO+0x6c>)
 8009828:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800982a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800982e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8009830:	e7e9      	b.n	8009806 <HAL_RCCEx_DisableLSCO+0x3e>
 8009832:	bf00      	nop
 8009834:	40021000 	.word	0x40021000
 8009838:	40007000 	.word	0x40007000

0800983c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800983c:	4a02      	ldr	r2, [pc, #8]	; (8009848 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800983e:	6813      	ldr	r3, [r2, #0]
 8009840:	f043 0304 	orr.w	r3, r3, #4
 8009844:	6013      	str	r3, [r2, #0]
}
 8009846:	4770      	bx	lr
 8009848:	40021000 	.word	0x40021000

0800984c <HAL_RCCEx_DisableMSIPLLMode>:
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800984c:	4a02      	ldr	r2, [pc, #8]	; (8009858 <HAL_RCCEx_DisableMSIPLLMode+0xc>)
 800984e:	6813      	ldr	r3, [r2, #0]
 8009850:	f023 0304 	bic.w	r3, r3, #4
 8009854:	6013      	str	r3, [r2, #0]
}
 8009856:	4770      	bx	lr
 8009858:	40021000 	.word	0x40021000

0800985c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	4607      	mov	r7, r0
 8009860:	460e      	mov	r6, r1
 8009862:	4615      	mov	r5, r2
 8009864:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	6893      	ldr	r3, [r2, #8]
 800986a:	ea36 0303 	bics.w	r3, r6, r3
 800986e:	bf0c      	ite	eq
 8009870:	2301      	moveq	r3, #1
 8009872:	2300      	movne	r3, #0
 8009874:	42ab      	cmp	r3, r5
 8009876:	d037      	beq.n	80098e8 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009878:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800987c:	d0f4      	beq.n	8009868 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800987e:	f7f8 fc0b 	bl	8002098 <HAL_GetTick>
 8009882:	9b06      	ldr	r3, [sp, #24]
 8009884:	1ac0      	subs	r0, r0, r3
 8009886:	42a0      	cmp	r0, r4
 8009888:	d201      	bcs.n	800988e <SPI_WaitFlagStateUntilTimeout+0x32>
 800988a:	2c00      	cmp	r4, #0
 800988c:	d1eb      	bne.n	8009866 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	6853      	ldr	r3, [r2, #4]
 8009892:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009896:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800989e:	d00b      	beq.n	80098b8 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a6:	d014      	beq.n	80098d2 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098ae:	2300      	movs	r3, #0
 80098b0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 80098b4:	2003      	movs	r0, #3
 80098b6:	e018      	b.n	80098ea <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098be:	d002      	beq.n	80098c6 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098c4:	d1ec      	bne.n	80098a0 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	6813      	ldr	r3, [r2, #0]
 80098ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	e7e6      	b.n	80098a0 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	6813      	ldr	r3, [r2, #0]
 80098d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	6813      	ldr	r3, [r2, #0]
 80098e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	e7df      	b.n	80098a8 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80098e8:	2000      	movs	r0, #0
}
 80098ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	4607      	mov	r7, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	4615      	mov	r5, r2
 80098f4:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	e002      	b.n	8009900 <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80098fa:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80098fe:	d10a      	bne.n	8009916 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8009900:	6893      	ldr	r3, [r2, #8]
 8009902:	4023      	ands	r3, r4
 8009904:	42ab      	cmp	r3, r5
 8009906:	d03b      	beq.n	8009980 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009908:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800990c:	d1f5      	bne.n	80098fa <SPI_WaitFifoStateUntilTimeout+0xe>
 800990e:	2d00      	cmp	r5, #0
 8009910:	d1f3      	bne.n	80098fa <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009912:	7b13      	ldrb	r3, [r2, #12]
 8009914:	e7f1      	b.n	80098fa <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009916:	f7f8 fbbf 	bl	8002098 <HAL_GetTick>
 800991a:	9b06      	ldr	r3, [sp, #24]
 800991c:	1ac0      	subs	r0, r0, r3
 800991e:	42b0      	cmp	r0, r6
 8009920:	d201      	bcs.n	8009926 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8009922:	2e00      	cmp	r6, #0
 8009924:	d1e7      	bne.n	80098f6 <SPI_WaitFifoStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	6853      	ldr	r3, [r2, #4]
 800992a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800992e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009936:	d00b      	beq.n	8009950 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800993e:	d014      	beq.n	800996a <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009940:	2301      	movs	r3, #1
 8009942:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009946:	2300      	movs	r3, #0
 8009948:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 800994c:	2003      	movs	r0, #3
 800994e:	e018      	b.n	8009982 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009956:	d002      	beq.n	800995e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800995c:	d1ec      	bne.n	8009938 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	6813      	ldr	r3, [r2, #0]
 8009962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009966:	6013      	str	r3, [r2, #0]
 8009968:	e7e6      	b.n	8009938 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	6813      	ldr	r3, [r2, #0]
 800996e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	6813      	ldr	r3, [r2, #0]
 8009978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	e7df      	b.n	8009940 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8009980:	2000      	movs	r0, #0
}
 8009982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	4604      	mov	r4, r0
 800998a:	460d      	mov	r5, r1
 800998c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800998e:	9200      	str	r2, [sp, #0]
 8009990:	460b      	mov	r3, r1
 8009992:	2200      	movs	r2, #0
 8009994:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009998:	f7ff ffa8 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 800999c:	b9b8      	cbnz	r0, 80099ce <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800999e:	9600      	str	r6, [sp, #0]
 80099a0:	462b      	mov	r3, r5
 80099a2:	2200      	movs	r2, #0
 80099a4:	2180      	movs	r1, #128	; 0x80
 80099a6:	4620      	mov	r0, r4
 80099a8:	f7ff ff58 	bl	800985c <SPI_WaitFlagStateUntilTimeout>
 80099ac:	b9b8      	cbnz	r0, 80099de <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099ae:	9600      	str	r6, [sp, #0]
 80099b0:	462b      	mov	r3, r5
 80099b2:	2200      	movs	r2, #0
 80099b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80099b8:	4620      	mov	r0, r4
 80099ba:	f7ff ff97 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 80099be:	4603      	mov	r3, r0
 80099c0:	b150      	cbz	r0, 80099d8 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80099c4:	f043 0320 	orr.w	r3, r3, #32
 80099c8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e004      	b.n	80099d8 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80099d0:	f043 0320 	orr.w	r3, r3, #32
 80099d4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 80099d8:	4618      	mov	r0, r3
 80099da:	b002      	add	sp, #8
 80099dc:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80099e0:	f043 0320 	orr.w	r3, r3, #32
 80099e4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80099e6:	2303      	movs	r3, #3
 80099e8:	e7f6      	b.n	80099d8 <SPI_EndRxTxTransaction+0x54>

080099ea <SPI_EndRxTransaction>:
{
 80099ea:	b570      	push	{r4, r5, r6, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	4604      	mov	r4, r0
 80099f0:	460d      	mov	r5, r1
 80099f2:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099f4:	6843      	ldr	r3, [r0, #4]
 80099f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099fa:	d00f      	beq.n	8009a1c <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099fc:	9600      	str	r6, [sp, #0]
 80099fe:	462b      	mov	r3, r5
 8009a00:	2200      	movs	r2, #0
 8009a02:	2180      	movs	r1, #128	; 0x80
 8009a04:	4620      	mov	r0, r4
 8009a06:	f7ff ff29 	bl	800985c <SPI_WaitFlagStateUntilTimeout>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	b998      	cbnz	r0, 8009a36 <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a0e:	6862      	ldr	r2, [r4, #4]
 8009a10:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009a14:	d015      	beq.n	8009a42 <SPI_EndRxTransaction+0x58>
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	b002      	add	sp, #8
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a1c:	6883      	ldr	r3, [r0, #8]
 8009a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a22:	d002      	beq.n	8009a2a <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a28:	d1e8      	bne.n	80099fc <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	6813      	ldr	r3, [r2, #0]
 8009a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	e7e2      	b.n	80099fc <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a36:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009a38:	f043 0320 	orr.w	r3, r3, #32
 8009a3c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e7e9      	b.n	8009a16 <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a42:	68a2      	ldr	r2, [r4, #8]
 8009a44:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009a48:	d002      	beq.n	8009a50 <SPI_EndRxTransaction+0x66>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a4a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009a4e:	d1e2      	bne.n	8009a16 <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a50:	9600      	str	r6, [sp, #0]
 8009a52:	462b      	mov	r3, r5
 8009a54:	2200      	movs	r2, #0
 8009a56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff ff46 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d0d7      	beq.n	8009a16 <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a66:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009a68:	f043 0320 	orr.w	r3, r3, #32
 8009a6c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e7d1      	b.n	8009a16 <SPI_EndRxTransaction+0x2c>
	...

08009a74 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009a74:	b510      	push	{r4, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	4604      	mov	r4, r0
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a7a:	6802      	ldr	r2, [r0, #0]
 8009a7c:	6813      	ldr	r3, [r2, #0]
 8009a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a82:	6013      	str	r3, [r2, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009a84:	4b1d      	ldr	r3, [pc, #116]	; (8009afc <SPI_AbortRx_ISR+0x88>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a1d      	ldr	r2, [pc, #116]	; (8009b00 <SPI_AbortRx_ISR+0x8c>)
 8009a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8e:	0a5b      	lsrs	r3, r3, #9
 8009a90:	2264      	movs	r2, #100	; 0x64
 8009a92:	fb02 f303 	mul.w	r3, r2, r3
 8009a96:	9303      	str	r3, [sp, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009a98:	6802      	ldr	r2, [r0, #0]
 8009a9a:	6853      	ldr	r3, [r2, #4]
 8009a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aa0:	6053      	str	r3, [r2, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	b143      	cbz	r3, 8009ab8 <SPI_AbortRx_ISR+0x44>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
      break;
    }
    count--;
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	9303      	str	r3, [sp, #12]
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ab4:	d1f5      	bne.n	8009aa2 <SPI_AbortRx_ISR+0x2e>
 8009ab6:	e003      	b.n	8009ac0 <SPI_AbortRx_ISR+0x4c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ab8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009abe:	6623      	str	r3, [r4, #96]	; 0x60

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009ac0:	f7f8 faea 	bl	8002098 <HAL_GetTick>
 8009ac4:	9000      	str	r0, [sp, #0]
 8009ac6:	2364      	movs	r3, #100	; 0x64
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2180      	movs	r1, #128	; 0x80
 8009acc:	4620      	mov	r0, r4
 8009ace:	f7ff fec5 	bl	800985c <SPI_WaitFlagStateUntilTimeout>
 8009ad2:	b108      	cbz	r0, 8009ad8 <SPI_AbortRx_ISR+0x64>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009ad4:	2340      	movs	r3, #64	; 0x40
 8009ad6:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009ad8:	f7f8 fade 	bl	8002098 <HAL_GetTick>
 8009adc:	9000      	str	r0, [sp, #0]
 8009ade:	2364      	movs	r3, #100	; 0x64
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f7ff ff00 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 8009aec:	b108      	cbz	r0, 8009af2 <SPI_AbortRx_ISR+0x7e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009aee:	2340      	movs	r3, #64	; 0x40
 8009af0:	6623      	str	r3, [r4, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8009af2:	2307      	movs	r3, #7
 8009af4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8009af8:	b004      	add	sp, #16
 8009afa:	bd10      	pop	{r4, pc}
 8009afc:	20000008 	.word	0x20000008
 8009b00:	057619f1 	.word	0x057619f1

08009b04 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009b04:	b510      	push	{r4, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	4604      	mov	r4, r0
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009b0a:	4b38      	ldr	r3, [pc, #224]	; (8009bec <SPI_AbortTx_ISR+0xe8>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a38      	ldr	r2, [pc, #224]	; (8009bf0 <SPI_AbortTx_ISR+0xec>)
 8009b10:	fba2 2303 	umull	r2, r3, r2, r3
 8009b14:	0a5b      	lsrs	r3, r3, #9
 8009b16:	2264      	movs	r2, #100	; 0x64
 8009b18:	fb02 f303 	mul.w	r3, r2, r3
 8009b1c:	9303      	str	r3, [sp, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8009b1e:	6802      	ldr	r2, [r0, #0]
 8009b20:	6853      	ldr	r3, [r2, #4]
 8009b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b26:	6053      	str	r3, [r2, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	b143      	cbz	r3, 8009b3e <SPI_AbortTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
      break;
    }
    count--;
 8009b2c:	9b03      	ldr	r3, [sp, #12]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	9303      	str	r3, [sp, #12]
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b3a:	d1f5      	bne.n	8009b28 <SPI_AbortTx_ISR+0x24>
 8009b3c:	e003      	b.n	8009b46 <SPI_AbortTx_ISR+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b44:	6623      	str	r3, [r4, #96]	; 0x60

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009b46:	f7f8 faa7 	bl	8002098 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	2164      	movs	r1, #100	; 0x64
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f7ff ff18 	bl	8009984 <SPI_EndRxTxTransaction>
 8009b54:	b108      	cbz	r0, 8009b5a <SPI_AbortTx_ISR+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009b56:	2340      	movs	r3, #64	; 0x40
 8009b58:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b5a:	6822      	ldr	r2, [r4, #0]
 8009b5c:	6813      	ldr	r3, [r2, #0]
 8009b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b62:	6013      	str	r3, [r2, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009b64:	f7f8 fa98 	bl	8002098 <HAL_GetTick>
 8009b68:	9000      	str	r0, [sp, #0]
 8009b6a:	2364      	movs	r3, #100	; 0x64
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009b72:	4620      	mov	r0, r4
 8009b74:	f7ff feba 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 8009b78:	b108      	cbz	r0, 8009b7e <SPI_AbortTx_ISR+0x7a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009b7a:	2340      	movs	r3, #64	; 0x40
 8009b7c:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009b86:	d02b      	beq.n	8009be0 <SPI_AbortTx_ISR+0xdc>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b8e:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	b143      	cbz	r3, 8009ba6 <SPI_AbortTx_ISR+0xa2>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
        break;
      }
      count--;
 8009b94:	9b03      	ldr	r3, [sp, #12]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	9303      	str	r3, [sp, #12]
    }
    while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ba2:	d1f5      	bne.n	8009b90 <SPI_AbortTx_ISR+0x8c>
 8009ba4:	e003      	b.n	8009bae <SPI_AbortTx_ISR+0xaa>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ba6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bac:	6623      	str	r3, [r4, #96]	; 0x60

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009bae:	f7f8 fa73 	bl	8002098 <HAL_GetTick>
 8009bb2:	9000      	str	r0, [sp, #0]
 8009bb4:	2364      	movs	r3, #100	; 0x64
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2180      	movs	r1, #128	; 0x80
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f7ff fe4e 	bl	800985c <SPI_WaitFlagStateUntilTimeout>
 8009bc0:	b108      	cbz	r0, 8009bc6 <SPI_AbortTx_ISR+0xc2>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009bc2:	2340      	movs	r3, #64	; 0x40
 8009bc4:	6623      	str	r3, [r4, #96]	; 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009bc6:	f7f8 fa67 	bl	8002098 <HAL_GetTick>
 8009bca:	9000      	str	r0, [sp, #0]
 8009bcc:	2364      	movs	r3, #100	; 0x64
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f7ff fe89 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 8009bda:	b108      	cbz	r0, 8009be0 <SPI_AbortTx_ISR+0xdc>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	6623      	str	r3, [r4, #96]	; 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 8009be0:	2307      	movs	r3, #7
 8009be2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8009be6:	b004      	add	sp, #16
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	bf00      	nop
 8009bec:	20000008 	.word	0x20000008
 8009bf0:	057619f1 	.word	0x057619f1
}
 8009bf4:	4770      	bx	lr

08009bf6 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d052      	beq.n	8009ca0 <HAL_SPI_Init+0xaa>
{
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c02:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8009c06:	b1bb      	cbz	r3, 8009c38 <HAL_SPI_Init+0x42>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8009c0e:	6822      	ldr	r2, [r4, #0]
 8009c10:	6813      	ldr	r3, [r2, #0]
 8009c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c16:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c18:	68e3      	ldr	r3, [r4, #12]
 8009c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c1e:	d841      	bhi.n	8009ca4 <HAL_SPI_Init+0xae>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c20:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009c24:	d04d      	beq.n	8009cc2 <HAL_SPI_Init+0xcc>
 8009c26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c2a:	d10a      	bne.n	8009c42 <HAL_SPI_Init+0x4c>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009c2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d033      	beq.n	8009c9a <HAL_SPI_Init+0xa4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c36:	e00b      	b.n	8009c50 <HAL_SPI_Init+0x5a>
    hspi->Lock = HAL_UNLOCKED;
 8009c38:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8009c3c:	f7f7 ff10 	bl	8001a60 <HAL_SPI_MspInit>
 8009c40:	e7e2      	b.n	8009c08 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c46:	e031      	b.n	8009cac <HAL_SPI_Init+0xb6>
 8009c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009c50:	6822      	ldr	r2, [r4, #0]
 8009c52:	6863      	ldr	r3, [r4, #4]
 8009c54:	68a0      	ldr	r0, [r4, #8]
 8009c56:	4303      	orrs	r3, r0
 8009c58:	6920      	ldr	r0, [r4, #16]
 8009c5a:	4303      	orrs	r3, r0
 8009c5c:	6960      	ldr	r0, [r4, #20]
 8009c5e:	4303      	orrs	r3, r0
 8009c60:	69e0      	ldr	r0, [r4, #28]
 8009c62:	4303      	orrs	r3, r0
 8009c64:	6a20      	ldr	r0, [r4, #32]
 8009c66:	4303      	orrs	r3, r0
 8009c68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009c6a:	4303      	orrs	r3, r0
 8009c6c:	69a0      	ldr	r0, [r4, #24]
 8009c6e:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8009c72:	4303      	orrs	r3, r0
 8009c74:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009c76:	6822      	ldr	r2, [r4, #0]
 8009c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009c7c:	4303      	orrs	r3, r0
 8009c7e:	68e0      	ldr	r0, [r4, #12]
 8009c80:	4303      	orrs	r3, r0
 8009c82:	8b60      	ldrh	r0, [r4, #26]
 8009c84:	f000 0004 	and.w	r0, r0, #4
 8009c88:	4303      	orrs	r3, r0
 8009c8a:	430b      	orrs	r3, r1
 8009c8c:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c8e:	2000      	movs	r0, #0
 8009c90:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8009c98:	bd10      	pop	{r4, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c9e:	e00d      	b.n	8009cbc <HAL_SPI_Init+0xc6>
    return HAL_ERROR;
 8009ca0:	2001      	movs	r0, #1
}
 8009ca2:	4770      	bx	lr
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ca4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009ca8:	d011      	beq.n	8009cce <HAL_SPI_Init+0xd8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009caa:	2100      	movs	r1, #0
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cac:	2200      	movs	r2, #0
 8009cae:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009cb0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	d1cc      	bne.n	8009c50 <HAL_SPI_Init+0x5a>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cba:	d8c7      	bhi.n	8009c4c <HAL_SPI_Init+0x56>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8009cc0:	e7c6      	b.n	8009c50 <HAL_SPI_Init+0x5a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009cc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d0bf      	beq.n	8009c48 <HAL_SPI_Init+0x52>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ccc:	e7c0      	b.n	8009c50 <HAL_SPI_Init+0x5a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009cce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	d0bb      	beq.n	8009c4c <HAL_SPI_Init+0x56>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	e7bb      	b.n	8009c50 <HAL_SPI_Init+0x5a>
}
 8009cd8:	4770      	bx	lr

08009cda <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8009cda:	b190      	cbz	r0, 8009d02 <HAL_SPI_DeInit+0x28>
{
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8009ce6:	6802      	ldr	r2, [r0, #0]
 8009ce8:	6813      	ldr	r3, [r2, #0]
 8009cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cee:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8009cf0:	f7f7 ff02 	bl	8001af8 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8009cf8:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009cfc:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
}
 8009d00:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009d02:	2001      	movs	r0, #1
}
 8009d04:	4770      	bx	lr

08009d06 <HAL_SPI_Transmit>:
{
 8009d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8009d0c:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8009d10:	2c01      	cmp	r4, #1
 8009d12:	f000 80e3 	beq.w	8009edc <HAL_SPI_Transmit+0x1d6>
 8009d16:	461e      	mov	r6, r3
 8009d18:	4615      	mov	r5, r2
 8009d1a:	4688      	mov	r8, r1
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	2301      	movs	r3, #1
 8009d20:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8009d24:	f7f8 f9b8 	bl	8002098 <HAL_GetTick>
 8009d28:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8009d2a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8009d2e:	b2d2      	uxtb	r2, r2
 8009d30:	2a01      	cmp	r2, #1
 8009d32:	d009      	beq.n	8009d48 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8009d34:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009d36:	2301      	movs	r3, #1
 8009d38:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8009d42:	b002      	add	sp, #8
 8009d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8009d48:	f1b8 0f00 	cmp.w	r8, #0
 8009d4c:	f000 80c0 	beq.w	8009ed0 <HAL_SPI_Transmit+0x1ca>
 8009d50:	2d00      	cmp	r5, #0
 8009d52:	f000 80bf 	beq.w	8009ed4 <HAL_SPI_Transmit+0x1ce>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d56:	2303      	movs	r3, #3
 8009d58:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009d60:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009d64:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009d66:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009d68:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009d6a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009d6e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009d72:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009d74:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d76:	68a3      	ldr	r3, [r4, #8]
 8009d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d7c:	d01c      	beq.n	8009db8 <HAL_SPI_Transmit+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009d86:	d103      	bne.n	8009d90 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d8e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d90:	68e3      	ldr	r3, [r4, #12]
 8009d92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d96:	d936      	bls.n	8009e06 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d98:	6863      	ldr	r3, [r4, #4]
 8009d9a:	b10b      	cbz	r3, 8009da0 <HAL_SPI_Transmit+0x9a>
 8009d9c:	2d01      	cmp	r5, #1
 8009d9e:	d11a      	bne.n	8009dd6 <HAL_SPI_Transmit+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009da4:	8812      	ldrh	r2, [r2, #0]
 8009da6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009da8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009daa:	3302      	adds	r3, #2
 8009dac:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009dae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009db0:	3b01      	subs	r3, #1
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009db6:	e00e      	b.n	8009dd6 <HAL_SPI_Transmit+0xd0>
    SPI_1LINE_TX(hspi);
 8009db8:	6822      	ldr	r2, [r4, #0]
 8009dba:	6813      	ldr	r3, [r2, #0]
 8009dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	e7dc      	b.n	8009d7e <HAL_SPI_Transmit+0x78>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dc4:	f7f8 f968 	bl	8002098 <HAL_GetTick>
 8009dc8:	1bc0      	subs	r0, r0, r7
 8009dca:	42b0      	cmp	r0, r6
 8009dcc:	d317      	bcc.n	8009dfe <HAL_SPI_Transmit+0xf8>
 8009dce:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8009dd2:	f040 8081 	bne.w	8009ed8 <HAL_SPI_Transmit+0x1d2>
    while (hspi->TxXferCount > 0U)
 8009dd6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d062      	beq.n	8009ea4 <HAL_SPI_Transmit+0x19e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	f012 0f02 	tst.w	r2, #2
 8009de6:	d0ed      	beq.n	8009dc4 <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009de8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009dea:	8812      	ldrh	r2, [r2, #0]
 8009dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009df0:	3302      	adds	r3, #2
 8009df2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009df4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009dfc:	e7eb      	b.n	8009dd6 <HAL_SPI_Transmit+0xd0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dfe:	2e00      	cmp	r6, #0
 8009e00:	d1e9      	bne.n	8009dd6 <HAL_SPI_Transmit+0xd0>
          errorcode = HAL_TIMEOUT;
 8009e02:	2003      	movs	r0, #3
 8009e04:	e797      	b.n	8009d36 <HAL_SPI_Transmit+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e06:	6863      	ldr	r3, [r4, #4]
 8009e08:	b10b      	cbz	r3, 8009e0e <HAL_SPI_Transmit+0x108>
 8009e0a:	2d01      	cmp	r5, #1
 8009e0c:	d125      	bne.n	8009e5a <HAL_SPI_Transmit+0x154>
      if (hspi->TxXferCount > 1U)
 8009e0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d90b      	bls.n	8009e2e <HAL_SPI_Transmit+0x128>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e1a:	8812      	ldrh	r2, [r2, #0]
 8009e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e20:	3302      	adds	r3, #2
 8009e22:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009e24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e26:	3b02      	subs	r3, #2
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009e2c:	e015      	b.n	8009e5a <HAL_SPI_Transmit+0x154>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e32:	7812      	ldrb	r2, [r2, #0]
 8009e34:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8009e36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e38:	3301      	adds	r3, #1
 8009e3a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009e3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009e44:	e009      	b.n	8009e5a <HAL_SPI_Transmit+0x154>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8009e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e4e:	3301      	adds	r3, #1
 8009e50:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8009e52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e54:	3b01      	subs	r3, #1
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8009e5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	b30b      	cbz	r3, 8009ea4 <HAL_SPI_Transmit+0x19e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e60:	6822      	ldr	r2, [r4, #0]
 8009e62:	6893      	ldr	r3, [r2, #8]
 8009e64:	f013 0f02 	tst.w	r3, #2
 8009e68:	d00e      	beq.n	8009e88 <HAL_SPI_Transmit+0x182>
        if (hspi->TxXferCount > 1U)
 8009e6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d9e9      	bls.n	8009e46 <HAL_SPI_Transmit+0x140>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e7a:	3302      	adds	r3, #2
 8009e7c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009e7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e80:	3b02      	subs	r3, #2
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009e86:	e7e8      	b.n	8009e5a <HAL_SPI_Transmit+0x154>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e88:	f7f8 f906 	bl	8002098 <HAL_GetTick>
 8009e8c:	1bc0      	subs	r0, r0, r7
 8009e8e:	42b0      	cmp	r0, r6
 8009e90:	d304      	bcc.n	8009e9c <HAL_SPI_Transmit+0x196>
 8009e92:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8009e96:	d0e0      	beq.n	8009e5a <HAL_SPI_Transmit+0x154>
          errorcode = HAL_TIMEOUT;
 8009e98:	2003      	movs	r0, #3
 8009e9a:	e74c      	b.n	8009d36 <HAL_SPI_Transmit+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e9c:	2e00      	cmp	r6, #0
 8009e9e:	d1dc      	bne.n	8009e5a <HAL_SPI_Transmit+0x154>
          errorcode = HAL_TIMEOUT;
 8009ea0:	2003      	movs	r0, #3
 8009ea2:	e748      	b.n	8009d36 <HAL_SPI_Transmit+0x30>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ea4:	463a      	mov	r2, r7
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f7ff fd6b 	bl	8009984 <SPI_EndRxTxTransaction>
 8009eae:	b108      	cbz	r0, 8009eb4 <HAL_SPI_Transmit+0x1ae>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009eb4:	68a3      	ldr	r3, [r4, #8]
 8009eb6:	b933      	cbnz	r3, 8009ec6 <HAL_SPI_Transmit+0x1c0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	9201      	str	r2, [sp, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	9301      	str	r3, [sp, #4]
 8009ec4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ec6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8009ec8:	3000      	adds	r0, #0
 8009eca:	bf18      	it	ne
 8009ecc:	2001      	movne	r0, #1
error:
 8009ece:	e732      	b.n	8009d36 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	e730      	b.n	8009d36 <HAL_SPI_Transmit+0x30>
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	e72e      	b.n	8009d36 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8009ed8:	2003      	movs	r0, #3
 8009eda:	e72c      	b.n	8009d36 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8009edc:	2002      	movs	r0, #2
 8009ede:	e730      	b.n	8009d42 <HAL_SPI_Transmit+0x3c>

08009ee0 <HAL_SPI_TransmitReceive>:
{
 8009ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8009ee8:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8009eec:	2c01      	cmp	r4, #1
 8009eee:	f000 8161 	beq.w	800a1b4 <HAL_SPI_TransmitReceive+0x2d4>
 8009ef2:	461d      	mov	r5, r3
 8009ef4:	4617      	mov	r7, r2
 8009ef6:	460e      	mov	r6, r1
 8009ef8:	4604      	mov	r4, r0
 8009efa:	2301      	movs	r3, #1
 8009efc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8009f00:	f7f8 f8ca 	bl	8002098 <HAL_GetTick>
 8009f04:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8009f06:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8009f0a:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f0c:	2801      	cmp	r0, #1
 8009f0e:	d015      	beq.n	8009f3c <HAL_SPI_TransmitReceive+0x5c>
 8009f10:	6863      	ldr	r3, [r4, #4]
 8009f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f16:	d009      	beq.n	8009f2c <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8009f18:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009f20:	2200      	movs	r2, #0
 8009f22:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f2c:	68a3      	ldr	r3, [r4, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f040 8134 	bne.w	800a19c <HAL_SPI_TransmitReceive+0x2bc>
 8009f34:	2804      	cmp	r0, #4
 8009f36:	d001      	beq.n	8009f3c <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 8009f38:	2302      	movs	r3, #2
 8009f3a:	e7ee      	b.n	8009f1a <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f3c:	2e00      	cmp	r6, #0
 8009f3e:	f000 812f 	beq.w	800a1a0 <HAL_SPI_TransmitReceive+0x2c0>
 8009f42:	2f00      	cmp	r7, #0
 8009f44:	f000 812e 	beq.w	800a1a4 <HAL_SPI_TransmitReceive+0x2c4>
 8009f48:	2d00      	cmp	r5, #0
 8009f4a:	f000 812d 	beq.w	800a1a8 <HAL_SPI_TransmitReceive+0x2c8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f4e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f56:	bf1c      	itt	ne
 8009f58:	2305      	movne	r3, #5
 8009f5a:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f62:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009f64:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009f68:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f6c:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009f6e:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009f70:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8009f72:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009f74:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009f76:	68e3      	ldr	r3, [r4, #12]
 8009f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f7c:	d801      	bhi.n	8009f82 <HAL_SPI_TransmitReceive+0xa2>
 8009f7e:	2d01      	cmp	r5, #1
 8009f80:	d924      	bls.n	8009fcc <HAL_SPI_TransmitReceive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f82:	6822      	ldr	r2, [r4, #0]
 8009f84:	6853      	ldr	r3, [r2, #4]
 8009f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f8a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f8c:	6823      	ldr	r3, [r4, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009f94:	d103      	bne.n	8009f9e <HAL_SPI_TransmitReceive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f9c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f9e:	68e3      	ldr	r3, [r4, #12]
 8009fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fa4:	d958      	bls.n	800a058 <HAL_SPI_TransmitReceive+0x178>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fa6:	6863      	ldr	r3, [r4, #4]
 8009fa8:	b10b      	cbz	r3, 8009fae <HAL_SPI_TransmitReceive+0xce>
 8009faa:	2d01      	cmp	r5, #1
 8009fac:	d10a      	bne.n	8009fc4 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009fb2:	8812      	ldrh	r2, [r2, #0]
 8009fb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009fb8:	3302      	adds	r3, #2
 8009fba:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009fbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009fc4:	2501      	movs	r5, #1
        txallowed = 0U;
 8009fc6:	2700      	movs	r7, #0
        txallowed = 1U;
 8009fc8:	462e      	mov	r6, r5
 8009fca:	e025      	b.n	800a018 <HAL_SPI_TransmitReceive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fcc:	6822      	ldr	r2, [r4, #0]
 8009fce:	6853      	ldr	r3, [r2, #4]
 8009fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fd4:	6053      	str	r3, [r2, #4]
 8009fd6:	e7d9      	b.n	8009f8c <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	f012 0f01 	tst.w	r2, #1
 8009fe0:	d010      	beq.n	800a004 <HAL_SPI_TransmitReceive+0x124>
 8009fe2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8009fe6:	b292      	uxth	r2, r2
 8009fe8:	b162      	cbz	r2, 800a004 <HAL_SPI_TransmitReceive+0x124>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fea:	68da      	ldr	r2, [r3, #12]
 8009fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ff2:	3302      	adds	r3, #2
 8009ff4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009ff6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800a002:	4635      	mov	r5, r6
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a004:	f7f8 f848 	bl	8002098 <HAL_GetTick>
 800a008:	eba0 0009 	sub.w	r0, r0, r9
 800a00c:	4540      	cmp	r0, r8
 800a00e:	d303      	bcc.n	800a018 <HAL_SPI_TransmitReceive+0x138>
 800a010:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a014:	f040 80ca 	bne.w	800a1ac <HAL_SPI_TransmitReceive+0x2cc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a018:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	b92b      	cbnz	r3, 800a02a <HAL_SPI_TransmitReceive+0x14a>
 800a01e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a022:	b29b      	uxth	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 80ac 	beq.w	800a182 <HAL_SPI_TransmitReceive+0x2a2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	689a      	ldr	r2, [r3, #8]
 800a02e:	f012 0f02 	tst.w	r2, #2
 800a032:	d0d1      	beq.n	8009fd8 <HAL_SPI_TransmitReceive+0xf8>
 800a034:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a036:	b292      	uxth	r2, r2
 800a038:	2a00      	cmp	r2, #0
 800a03a:	d0cd      	beq.n	8009fd8 <HAL_SPI_TransmitReceive+0xf8>
 800a03c:	2d00      	cmp	r5, #0
 800a03e:	d0cb      	beq.n	8009fd8 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a040:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a042:	8812      	ldrh	r2, [r2, #0]
 800a044:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a048:	3302      	adds	r3, #2
 800a04a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a04c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a04e:	3b01      	subs	r3, #1
 800a050:	b29b      	uxth	r3, r3
 800a052:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800a054:	463d      	mov	r5, r7
 800a056:	e7bf      	b.n	8009fd8 <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a058:	6863      	ldr	r3, [r4, #4]
 800a05a:	b10b      	cbz	r3, 800a060 <HAL_SPI_TransmitReceive+0x180>
 800a05c:	2d01      	cmp	r5, #1
 800a05e:	d10e      	bne.n	800a07e <HAL_SPI_TransmitReceive+0x19e>
      if (hspi->TxXferCount > 1U)
 800a060:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a062:	b29b      	uxth	r3, r3
 800a064:	2b01      	cmp	r3, #1
 800a066:	d90e      	bls.n	800a086 <HAL_SPI_TransmitReceive+0x1a6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a06c:	8812      	ldrh	r2, [r2, #0]
 800a06e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a070:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a072:	3302      	adds	r3, #2
 800a074:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a076:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a078:	3b02      	subs	r3, #2
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a07e:	2501      	movs	r5, #1
        txallowed = 0U;
 800a080:	2700      	movs	r7, #0
        txallowed = 1U;
 800a082:	462e      	mov	r6, r5
 800a084:	e044      	b.n	800a110 <HAL_SPI_TransmitReceive+0x230>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a08a:	7812      	ldrb	r2, [r2, #0]
 800a08c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800a08e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a090:	3301      	adds	r3, #1
 800a092:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a094:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a096:	3b01      	subs	r3, #1
 800a098:	b29b      	uxth	r3, r3
 800a09a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a09c:	e7ef      	b.n	800a07e <HAL_SPI_TransmitReceive+0x19e>
        if (hspi->TxXferCount > 1U)
 800a09e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a0a0:	b292      	uxth	r2, r2
 800a0a2:	2a01      	cmp	r2, #1
 800a0a4:	d90b      	bls.n	800a0be <HAL_SPI_TransmitReceive+0x1de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a0a8:	8812      	ldrh	r2, [r2, #0]
 800a0aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a0b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a0b4:	3b02      	subs	r3, #2
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800a0ba:	463d      	mov	r5, r7
 800a0bc:	e03a      	b.n	800a134 <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a0c0:	7812      	ldrb	r2, [r2, #0]
 800a0c2:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800a0c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800a0ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800a0d2:	463d      	mov	r5, r7
 800a0d4:	e02e      	b.n	800a134 <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0d6:	6822      	ldr	r2, [r4, #0]
 800a0d8:	6853      	ldr	r3, [r2, #4]
 800a0da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0de:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800a0e0:	4635      	mov	r5, r6
 800a0e2:	e00c      	b.n	800a0fe <HAL_SPI_TransmitReceive+0x21e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a0e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a0e6:	7b1b      	ldrb	r3, [r3, #12]
 800a0e8:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800a0ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800a0f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800a0fc:	4635      	mov	r5, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a0fe:	f7f7 ffcb 	bl	8002098 <HAL_GetTick>
 800a102:	eba0 0009 	sub.w	r0, r0, r9
 800a106:	4540      	cmp	r0, r8
 800a108:	d336      	bcc.n	800a178 <HAL_SPI_TransmitReceive+0x298>
 800a10a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a10e:	d14f      	bne.n	800a1b0 <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a110:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a112:	b29b      	uxth	r3, r3
 800a114:	b923      	cbnz	r3, 800a120 <HAL_SPI_TransmitReceive+0x240>
 800a116:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d030      	beq.n	800a182 <HAL_SPI_TransmitReceive+0x2a2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	689a      	ldr	r2, [r3, #8]
 800a124:	f012 0f02 	tst.w	r2, #2
 800a128:	d004      	beq.n	800a134 <HAL_SPI_TransmitReceive+0x254>
 800a12a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a12c:	b292      	uxth	r2, r2
 800a12e:	b10a      	cbz	r2, 800a134 <HAL_SPI_TransmitReceive+0x254>
 800a130:	2d01      	cmp	r5, #1
 800a132:	d0b4      	beq.n	800a09e <HAL_SPI_TransmitReceive+0x1be>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	f012 0f01 	tst.w	r2, #1
 800a13c:	d0df      	beq.n	800a0fe <HAL_SPI_TransmitReceive+0x21e>
 800a13e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800a142:	b292      	uxth	r2, r2
 800a144:	2a00      	cmp	r2, #0
 800a146:	d0da      	beq.n	800a0fe <HAL_SPI_TransmitReceive+0x21e>
        if (hspi->RxXferCount > 1U)
 800a148:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800a14c:	b292      	uxth	r2, r2
 800a14e:	2a01      	cmp	r2, #1
 800a150:	d9c8      	bls.n	800a0e4 <HAL_SPI_TransmitReceive+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a152:	68da      	ldr	r2, [r3, #12]
 800a154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a156:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a15a:	3302      	adds	r3, #2
 800a15c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a15e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a162:	3b02      	subs	r3, #2
 800a164:	b29b      	uxth	r3, r3
 800a166:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a16a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2b01      	cmp	r3, #1
 800a172:	d9b0      	bls.n	800a0d6 <HAL_SPI_TransmitReceive+0x1f6>
        txallowed = 1U;
 800a174:	4635      	mov	r5, r6
 800a176:	e7c2      	b.n	800a0fe <HAL_SPI_TransmitReceive+0x21e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a178:	f1b8 0f00 	cmp.w	r8, #0
 800a17c:	d1c8      	bne.n	800a110 <HAL_SPI_TransmitReceive+0x230>
        errorcode = HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e6cb      	b.n	8009f1a <HAL_SPI_TransmitReceive+0x3a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a182:	464a      	mov	r2, r9
 800a184:	4641      	mov	r1, r8
 800a186:	4620      	mov	r0, r4
 800a188:	f7ff fbfc 	bl	8009984 <SPI_EndRxTxTransaction>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2800      	cmp	r0, #0
 800a190:	f43f aec3 	beq.w	8009f1a <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a194:	2320      	movs	r3, #32
 800a196:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e6be      	b.n	8009f1a <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 800a19c:	2302      	movs	r3, #2
 800a19e:	e6bc      	b.n	8009f1a <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e6ba      	b.n	8009f1a <HAL_SPI_TransmitReceive+0x3a>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e6b8      	b.n	8009f1a <HAL_SPI_TransmitReceive+0x3a>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e6b6      	b.n	8009f1a <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e6b4      	b.n	8009f1a <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e6b2      	b.n	8009f1a <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e6b6      	b.n	8009f26 <HAL_SPI_TransmitReceive+0x46>

0800a1b8 <HAL_SPI_Receive>:
{
 800a1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	4604      	mov	r4, r0
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	4690      	mov	r8, r2
 800a1c4:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a1c6:	6843      	ldr	r3, [r0, #4]
 800a1c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1cc:	d019      	beq.n	800a202 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800a1ce:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	f000 80b4 	beq.w	800a340 <HAL_SPI_Receive+0x188>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800a1de:	f7f7 ff5b 	bl	8002098 <HAL_GetTick>
 800a1e2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a1e4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d015      	beq.n	800a21a <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800a1ee:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800a1fc:	b002      	add	sp, #8
 800a1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a202:	6883      	ldr	r3, [r0, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e2      	bne.n	800a1ce <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a208:	2304      	movs	r3, #4
 800a20a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a20e:	9500      	str	r5, [sp, #0]
 800a210:	4613      	mov	r3, r2
 800a212:	460a      	mov	r2, r1
 800a214:	f7ff fe64 	bl	8009ee0 <HAL_SPI_TransmitReceive>
 800a218:	e7f0      	b.n	800a1fc <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 800a21a:	2f00      	cmp	r7, #0
 800a21c:	f000 8088 	beq.w	800a330 <HAL_SPI_Receive+0x178>
 800a220:	f1b8 0f00 	cmp.w	r8, #0
 800a224:	f000 8086 	beq.w	800a334 <HAL_SPI_Receive+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a228:	2304      	movs	r3, #4
 800a22a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a22e:	2300      	movs	r3, #0
 800a230:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a232:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a234:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a238:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a23c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a23e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a240:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a242:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a244:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a246:	68e3      	ldr	r3, [r4, #12]
 800a248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	6853      	ldr	r3, [r2, #4]
 800a250:	bf8c      	ite	hi
 800a252:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a256:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 800a25a:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a25c:	68a3      	ldr	r3, [r4, #8]
 800a25e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a262:	d00d      	beq.n	800a280 <HAL_SPI_Receive+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a26c:	d103      	bne.n	800a276 <HAL_SPI_Receive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a274:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a276:	68e3      	ldr	r3, [r4, #12]
 800a278:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a27c:	d90e      	bls.n	800a29c <HAL_SPI_Receive+0xe4>
 800a27e:	e030      	b.n	800a2e2 <HAL_SPI_Receive+0x12a>
    SPI_1LINE_RX(hspi);
 800a280:	6822      	ldr	r2, [r4, #0]
 800a282:	6813      	ldr	r3, [r2, #0]
 800a284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	e7eb      	b.n	800a264 <HAL_SPI_Receive+0xac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a28c:	f7f7 ff04 	bl	8002098 <HAL_GetTick>
 800a290:	1b80      	subs	r0, r0, r6
 800a292:	42a8      	cmp	r0, r5
 800a294:	d319      	bcc.n	800a2ca <HAL_SPI_Receive+0x112>
 800a296:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a29a:	d14d      	bne.n	800a338 <HAL_SPI_Receive+0x180>
    while (hspi->RxXferCount > 0U)
 800a29c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d037      	beq.n	800a316 <HAL_SPI_Receive+0x15e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	689a      	ldr	r2, [r3, #8]
 800a2aa:	f012 0f01 	tst.w	r2, #1
 800a2ae:	d0ed      	beq.n	800a28c <HAL_SPI_Receive+0xd4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a2b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a2b2:	7b1b      	ldrb	r3, [r3, #12]
 800a2b4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800a2bc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a2c8:	e7e8      	b.n	800a29c <HAL_SPI_Receive+0xe4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2ca:	2d00      	cmp	r5, #0
 800a2cc:	d1e6      	bne.n	800a29c <HAL_SPI_Receive+0xe4>
          errorcode = HAL_TIMEOUT;
 800a2ce:	2003      	movs	r0, #3
 800a2d0:	e78e      	b.n	800a1f0 <HAL_SPI_Receive+0x38>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2d2:	f7f7 fee1 	bl	8002098 <HAL_GetTick>
 800a2d6:	1b80      	subs	r0, r0, r6
 800a2d8:	42a8      	cmp	r0, r5
 800a2da:	d318      	bcc.n	800a30e <HAL_SPI_Receive+0x156>
 800a2dc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a2e0:	d12c      	bne.n	800a33c <HAL_SPI_Receive+0x184>
    while (hspi->RxXferCount > 0U)
 800a2e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	b1ab      	cbz	r3, 800a316 <HAL_SPI_Receive+0x15e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	689a      	ldr	r2, [r3, #8]
 800a2ee:	f012 0f01 	tst.w	r2, #1
 800a2f2:	d0ee      	beq.n	800a2d2 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2fc:	3302      	adds	r3, #2
 800a2fe:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800a300:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a304:	3b01      	subs	r3, #1
 800a306:	b29b      	uxth	r3, r3
 800a308:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a30c:	e7e9      	b.n	800a2e2 <HAL_SPI_Receive+0x12a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a30e:	2d00      	cmp	r5, #0
 800a310:	d1e7      	bne.n	800a2e2 <HAL_SPI_Receive+0x12a>
          errorcode = HAL_TIMEOUT;
 800a312:	2003      	movs	r0, #3
 800a314:	e76c      	b.n	800a1f0 <HAL_SPI_Receive+0x38>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a316:	4632      	mov	r2, r6
 800a318:	4629      	mov	r1, r5
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff fb65 	bl	80099ea <SPI_EndRxTransaction>
 800a320:	b108      	cbz	r0, 800a326 <HAL_SPI_Receive+0x16e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a322:	2320      	movs	r3, #32
 800a324:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a326:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800a328:	3000      	adds	r0, #0
 800a32a:	bf18      	it	ne
 800a32c:	2001      	movne	r0, #1
error :
 800a32e:	e75f      	b.n	800a1f0 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800a330:	2001      	movs	r0, #1
 800a332:	e75d      	b.n	800a1f0 <HAL_SPI_Receive+0x38>
 800a334:	2001      	movs	r0, #1
 800a336:	e75b      	b.n	800a1f0 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800a338:	2003      	movs	r0, #3
 800a33a:	e759      	b.n	800a1f0 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800a33c:	2003      	movs	r0, #3
 800a33e:	e757      	b.n	800a1f0 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 800a340:	2002      	movs	r0, #2
 800a342:	e75b      	b.n	800a1fc <HAL_SPI_Receive+0x44>

0800a344 <HAL_SPI_Transmit_IT>:
{
 800a344:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800a346:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800a34a:	2801      	cmp	r0, #1
 800a34c:	d045      	beq.n	800a3da <HAL_SPI_Transmit_IT+0x96>
 800a34e:	2001      	movs	r0, #1
 800a350:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800a354:	2900      	cmp	r1, #0
 800a356:	d037      	beq.n	800a3c8 <HAL_SPI_Transmit_IT+0x84>
 800a358:	2a00      	cmp	r2, #0
 800a35a:	d037      	beq.n	800a3cc <HAL_SPI_Transmit_IT+0x88>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a35c:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 800a360:	b2c0      	uxtb	r0, r0
 800a362:	2801      	cmp	r0, #1
 800a364:	d001      	beq.n	800a36a <HAL_SPI_Transmit_IT+0x26>
    errorcode = HAL_BUSY;
 800a366:	2002      	movs	r0, #2
 800a368:	e031      	b.n	800a3ce <HAL_SPI_Transmit_IT+0x8a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a36a:	2003      	movs	r0, #3
 800a36c:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a370:	2000      	movs	r0, #0
 800a372:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a374:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a376:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a37a:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a37c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a380:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a384:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    hspi->TxISR = SPI_TxISR_16BIT;
 800a38c:	bf8c      	ite	hi
 800a38e:	4a14      	ldrhi	r2, [pc, #80]	; (800a3e0 <HAL_SPI_Transmit_IT+0x9c>)
    hspi->TxISR = SPI_TxISR_8BIT;
 800a390:	4a14      	ldrls	r2, [pc, #80]	; (800a3e4 <HAL_SPI_Transmit_IT+0xa0>)
 800a392:	651a      	str	r2, [r3, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a39a:	d00f      	beq.n	800a3bc <HAL_SPI_Transmit_IT+0x78>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a39c:	6819      	ldr	r1, [r3, #0]
 800a39e:	684a      	ldr	r2, [r1, #4]
 800a3a0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800a3a4:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	6811      	ldr	r1, [r2, #0]
 800a3aa:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a3ae:	d112      	bne.n	800a3d6 <HAL_SPI_Transmit_IT+0x92>
    __HAL_SPI_ENABLE(hspi);
 800a3b0:	6811      	ldr	r1, [r2, #0]
 800a3b2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a3b6:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	e008      	b.n	800a3ce <HAL_SPI_Transmit_IT+0x8a>
    SPI_1LINE_TX(hspi);
 800a3bc:	6819      	ldr	r1, [r3, #0]
 800a3be:	680a      	ldr	r2, [r1, #0]
 800a3c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3c4:	600a      	str	r2, [r1, #0]
 800a3c6:	e7e9      	b.n	800a39c <HAL_SPI_Transmit_IT+0x58>
    errorcode = HAL_ERROR;
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	e000      	b.n	800a3ce <HAL_SPI_Transmit_IT+0x8a>
 800a3cc:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a3d4:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e7f9      	b.n	800a3ce <HAL_SPI_Transmit_IT+0x8a>
  __HAL_LOCK(hspi);
 800a3da:	2002      	movs	r0, #2
}
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	0800ad1f 	.word	0x0800ad1f
 800a3e4:	0800acf9 	.word	0x0800acf9

0800a3e8 <HAL_SPI_TransmitReceive_IT>:
{
 800a3e8:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 800a3ea:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800a3ee:	2c01      	cmp	r4, #1
 800a3f0:	d064      	beq.n	800a4bc <HAL_SPI_TransmitReceive_IT+0xd4>
 800a3f2:	2401      	movs	r4, #1
 800a3f4:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 800a3f8:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800a3fc:	b2e4      	uxtb	r4, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a3fe:	2c01      	cmp	r4, #1
 800a400:	d011      	beq.n	800a426 <HAL_SPI_TransmitReceive_IT+0x3e>
 800a402:	6845      	ldr	r5, [r0, #4]
 800a404:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800a408:	d006      	beq.n	800a418 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 800a40a:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800a40c:	2200      	movs	r2, #0
 800a40e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 800a412:	4618      	mov	r0, r3
 800a414:	bc30      	pop	{r4, r5}
 800a416:	4770      	bx	lr
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a418:	6885      	ldr	r5, [r0, #8]
 800a41a:	2d00      	cmp	r5, #0
 800a41c:	d144      	bne.n	800a4a8 <HAL_SPI_TransmitReceive_IT+0xc0>
 800a41e:	2c04      	cmp	r4, #4
 800a420:	d001      	beq.n	800a426 <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 800a422:	2302      	movs	r3, #2
 800a424:	e7f2      	b.n	800a40c <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a426:	2900      	cmp	r1, #0
 800a428:	d040      	beq.n	800a4ac <HAL_SPI_TransmitReceive_IT+0xc4>
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	d040      	beq.n	800a4b0 <HAL_SPI_TransmitReceive_IT+0xc8>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d040      	beq.n	800a4b4 <HAL_SPI_TransmitReceive_IT+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a432:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800a436:	b2e4      	uxtb	r4, r4
 800a438:	2c04      	cmp	r4, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a43a:	bf1c      	itt	ne
 800a43c:	2405      	movne	r4, #5
 800a43e:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a442:	2400      	movs	r4, #0
 800a444:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a446:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a448:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a44a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a44c:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a44e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a452:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a456:	68c2      	ldr	r2, [r0, #12]
 800a458:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800a45c:	d918      	bls.n	800a490 <HAL_SPI_TransmitReceive_IT+0xa8>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a45e:	4b18      	ldr	r3, [pc, #96]	; (800a4c0 <HAL_SPI_TransmitReceive_IT+0xd8>)
 800a460:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a462:	4b18      	ldr	r3, [pc, #96]	; (800a4c4 <HAL_SPI_TransmitReceive_IT+0xdc>)
 800a464:	6503      	str	r3, [r0, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a466:	6802      	ldr	r2, [r0, #0]
 800a468:	6853      	ldr	r3, [r2, #4]
 800a46a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a46e:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a470:	6802      	ldr	r2, [r0, #0]
 800a472:	6853      	ldr	r3, [r2, #4]
 800a474:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800a478:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a47a:	6803      	ldr	r3, [r0, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a482:	d119      	bne.n	800a4b8 <HAL_SPI_TransmitReceive_IT+0xd0>
    __HAL_SPI_ENABLE(hspi);
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a48a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	e7bd      	b.n	800a40c <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a490:	4a0d      	ldr	r2, [pc, #52]	; (800a4c8 <HAL_SPI_TransmitReceive_IT+0xe0>)
 800a492:	64c2      	str	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a494:	4a0d      	ldr	r2, [pc, #52]	; (800a4cc <HAL_SPI_TransmitReceive_IT+0xe4>)
 800a496:	6502      	str	r2, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d8e4      	bhi.n	800a466 <HAL_SPI_TransmitReceive_IT+0x7e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a49c:	6802      	ldr	r2, [r0, #0]
 800a49e:	6853      	ldr	r3, [r2, #4]
 800a4a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4a4:	6053      	str	r3, [r2, #4]
 800a4a6:	e7e3      	b.n	800a470 <HAL_SPI_TransmitReceive_IT+0x88>
    errorcode = HAL_BUSY;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	e7af      	b.n	800a40c <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e7ad      	b.n	800a40c <HAL_SPI_TransmitReceive_IT+0x24>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e7ab      	b.n	800a40c <HAL_SPI_TransmitReceive_IT+0x24>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e7a9      	b.n	800a40c <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	e7a7      	b.n	800a40c <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e7a8      	b.n	800a412 <HAL_SPI_TransmitReceive_IT+0x2a>
 800a4c0:	0800af43 	.word	0x0800af43
 800a4c4:	0800af0b 	.word	0x0800af0b
 800a4c8:	0800ae93 	.word	0x0800ae93
 800a4cc:	0800ae3b 	.word	0x0800ae3b

0800a4d0 <HAL_SPI_Receive_IT>:
{
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a4d4:	6880      	ldr	r0, [r0, #8]
 800a4d6:	b918      	cbnz	r0, 800a4e0 <HAL_SPI_Receive_IT+0x10>
 800a4d8:	6863      	ldr	r3, [r4, #4]
 800a4da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4de:	d010      	beq.n	800a502 <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 800a4e0:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 800a4e4:	2801      	cmp	r0, #1
 800a4e6:	d05a      	beq.n	800a59e <HAL_SPI_Receive_IT+0xce>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800a4ee:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800a4f2:	b2c0      	uxtb	r0, r0
 800a4f4:	4298      	cmp	r0, r3
 800a4f6:	d00d      	beq.n	800a514 <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 800a4f8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800a500:	bd10      	pop	{r4, pc}
 800a502:	4613      	mov	r3, r2
 800a504:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a506:	2204      	movs	r2, #4
 800a508:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a50c:	460a      	mov	r2, r1
 800a50e:	f7ff ff6b 	bl	800a3e8 <HAL_SPI_TransmitReceive_IT>
 800a512:	e7f5      	b.n	800a500 <HAL_SPI_Receive_IT+0x30>
  if ((pData == NULL) || (Size == 0U))
 800a514:	2900      	cmp	r1, #0
 800a516:	d03c      	beq.n	800a592 <HAL_SPI_Receive_IT+0xc2>
 800a518:	2a00      	cmp	r2, #0
 800a51a:	d03c      	beq.n	800a596 <HAL_SPI_Receive_IT+0xc6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a51c:	2304      	movs	r3, #4
 800a51e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a522:	2300      	movs	r3, #0
 800a524:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a526:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a528:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a52c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a530:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a532:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a534:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a536:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a538:	68e3      	ldr	r3, [r4, #12]
 800a53a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a53e:	d91a      	bls.n	800a576 <HAL_SPI_Receive_IT+0xa6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a540:	6822      	ldr	r2, [r4, #0]
 800a542:	6853      	ldr	r3, [r2, #4]
 800a544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a548:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800a54a:	4b16      	ldr	r3, [pc, #88]	; (800a5a4 <HAL_SPI_Receive_IT+0xd4>)
 800a54c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a54e:	68a3      	ldr	r3, [r4, #8]
 800a550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a554:	d017      	beq.n	800a586 <HAL_SPI_Receive_IT+0xb6>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a556:	6822      	ldr	r2, [r4, #0]
 800a558:	6853      	ldr	r3, [r2, #4]
 800a55a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a55e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a568:	d117      	bne.n	800a59a <HAL_SPI_Receive_IT+0xca>
    __HAL_SPI_ENABLE(hspi);
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a570:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a572:	2000      	movs	r0, #0
 800a574:	e7c1      	b.n	800a4fa <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a576:	6822      	ldr	r2, [r4, #0]
 800a578:	6853      	ldr	r3, [r2, #4]
 800a57a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a57e:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800a580:	4b09      	ldr	r3, [pc, #36]	; (800a5a8 <HAL_SPI_Receive_IT+0xd8>)
 800a582:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a584:	e7e3      	b.n	800a54e <HAL_SPI_Receive_IT+0x7e>
    SPI_1LINE_RX(hspi);
 800a586:	6822      	ldr	r2, [r4, #0]
 800a588:	6813      	ldr	r3, [r2, #0]
 800a58a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	e7e1      	b.n	800a556 <HAL_SPI_Receive_IT+0x86>
    errorcode = HAL_ERROR;
 800a592:	2001      	movs	r0, #1
 800a594:	e7b1      	b.n	800a4fa <HAL_SPI_Receive_IT+0x2a>
 800a596:	2001      	movs	r0, #1
 800a598:	e7af      	b.n	800a4fa <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a59a:	2000      	movs	r0, #0
 800a59c:	e7ad      	b.n	800a4fa <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 800a59e:	2002      	movs	r0, #2
 800a5a0:	e7ae      	b.n	800a500 <HAL_SPI_Receive_IT+0x30>
 800a5a2:	bf00      	nop
 800a5a4:	0800adb1 	.word	0x0800adb1
 800a5a8:	0800ad85 	.word	0x0800ad85

0800a5ac <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 800a5ac:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	f000 8087 	beq.w	800a6c4 <HAL_SPI_Transmit_DMA+0x118>
{
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800a5c0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d005      	beq.n	800a5d6 <HAL_SPI_Transmit_DMA+0x2a>
    errorcode = HAL_BUSY;
 800a5ca:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 800a5d6:	2900      	cmp	r1, #0
 800a5d8:	d070      	beq.n	800a6bc <HAL_SPI_Transmit_DMA+0x110>
 800a5da:	2a00      	cmp	r2, #0
 800a5dc:	d070      	beq.n	800a6c0 <HAL_SPI_Transmit_DMA+0x114>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a5e8:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a5ea:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a5ec:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a5ee:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a5f0:	6503      	str	r3, [r0, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a5f2:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800a5f4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a5f8:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5fc:	6883      	ldr	r3, [r0, #8]
 800a5fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a602:	d02a      	beq.n	800a65a <HAL_SPI_Transmit_DMA+0xae>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a604:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a606:	4a31      	ldr	r2, [pc, #196]	; (800a6cc <HAL_SPI_Transmit_DMA+0x120>)
 800a608:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a60a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a60c:	4a30      	ldr	r2, [pc, #192]	; (800a6d0 <HAL_SPI_Transmit_DMA+0x124>)
 800a60e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a610:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a612:	4a30      	ldr	r2, [pc, #192]	; (800a6d4 <HAL_SPI_Transmit_DMA+0x128>)
 800a614:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 800a616:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a618:	2200      	movs	r2, #0
 800a61a:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a61c:	6822      	ldr	r2, [r4, #0]
 800a61e:	6853      	ldr	r3, [r2, #4]
 800a620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a624:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800a626:	68e3      	ldr	r3, [r4, #12]
 800a628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a62c:	d804      	bhi.n	800a638 <HAL_SPI_Transmit_DMA+0x8c>
 800a62e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a636:	d016      	beq.n	800a666 <HAL_SPI_Transmit_DMA+0xba>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800a638:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a63a:	6822      	ldr	r2, [r4, #0]
 800a63c:	320c      	adds	r2, #12
 800a63e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a640:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a642:	f7f8 f89c 	bl	800277e <HAL_DMA_Start_IT>
 800a646:	4603      	mov	r3, r0
 800a648:	b320      	cbz	r0, 800a694 <HAL_SPI_Transmit_DMA+0xe8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a64a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a64c:	f043 0310 	orr.w	r3, r3, #16
 800a650:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800a652:	2301      	movs	r3, #1
 800a654:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800a658:	e7b8      	b.n	800a5cc <HAL_SPI_Transmit_DMA+0x20>
    SPI_1LINE_TX(hspi);
 800a65a:	6802      	ldr	r2, [r0, #0]
 800a65c:	6813      	ldr	r3, [r2, #0]
 800a65e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a662:	6013      	str	r3, [r2, #0]
 800a664:	e7ce      	b.n	800a604 <HAL_SPI_Transmit_DMA+0x58>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800a666:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a668:	f013 0f01 	tst.w	r3, #1
 800a66c:	d108      	bne.n	800a680 <HAL_SPI_Transmit_DMA+0xd4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a66e:	6822      	ldr	r2, [r4, #0]
 800a670:	6853      	ldr	r3, [r2, #4]
 800a672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a676:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800a678:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a67e:	e7db      	b.n	800a638 <HAL_SPI_Transmit_DMA+0x8c>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a680:	6822      	ldr	r2, [r4, #0]
 800a682:	6853      	ldr	r3, [r2, #4]
 800a684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a688:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a68a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a68c:	085b      	lsrs	r3, r3, #1
 800a68e:	3301      	adds	r3, #1
 800a690:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a692:	e7d1      	b.n	800a638 <HAL_SPI_Transmit_DMA+0x8c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a694:	6822      	ldr	r2, [r4, #0]
 800a696:	6811      	ldr	r1, [r2, #0]
 800a698:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a69c:	d103      	bne.n	800a6a6 <HAL_SPI_Transmit_DMA+0xfa>
    __HAL_SPI_ENABLE(hspi);
 800a69e:	6811      	ldr	r1, [r2, #0]
 800a6a0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a6a4:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a6a6:	6821      	ldr	r1, [r4, #0]
 800a6a8:	684a      	ldr	r2, [r1, #4]
 800a6aa:	f042 0220 	orr.w	r2, r2, #32
 800a6ae:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a6b0:	6821      	ldr	r1, [r4, #0]
 800a6b2:	684a      	ldr	r2, [r1, #4]
 800a6b4:	f042 0202 	orr.w	r2, r2, #2
 800a6b8:	604a      	str	r2, [r1, #4]
 800a6ba:	e787      	b.n	800a5cc <HAL_SPI_Transmit_DMA+0x20>
    errorcode = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e785      	b.n	800a5cc <HAL_SPI_Transmit_DMA+0x20>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e783      	b.n	800a5cc <HAL_SPI_Transmit_DMA+0x20>
  __HAL_LOCK(hspi);
 800a6c4:	2302      	movs	r3, #2
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	0800ac7f 	.word	0x0800ac7f
 800a6d0:	0800afa1 	.word	0x0800afa1
 800a6d4:	0800af7f 	.word	0x0800af7f

0800a6d8 <HAL_SPI_TransmitReceive_DMA>:
{
 800a6d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800a6da:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800a6de:	2c01      	cmp	r4, #1
 800a6e0:	f000 80f2 	beq.w	800a8c8 <HAL_SPI_TransmitReceive_DMA+0x1f0>
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 800a6ec:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800a6f0:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a6f2:	2801      	cmp	r0, #1
 800a6f4:	d011      	beq.n	800a71a <HAL_SPI_TransmitReceive_DMA+0x42>
 800a6f6:	6865      	ldr	r5, [r4, #4]
 800a6f8:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800a6fc:	d005      	beq.n	800a70a <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 800a6fe:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800a700:	2200      	movs	r2, #0
 800a702:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800a706:	4618      	mov	r0, r3
 800a708:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a70a:	68a5      	ldr	r5, [r4, #8]
 800a70c:	2d00      	cmp	r5, #0
 800a70e:	f040 80d3 	bne.w	800a8b8 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 800a712:	2804      	cmp	r0, #4
 800a714:	d001      	beq.n	800a71a <HAL_SPI_TransmitReceive_DMA+0x42>
    errorcode = HAL_BUSY;
 800a716:	2302      	movs	r3, #2
 800a718:	e7f2      	b.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a71a:	2900      	cmp	r1, #0
 800a71c:	f000 80ce 	beq.w	800a8bc <HAL_SPI_TransmitReceive_DMA+0x1e4>
 800a720:	2a00      	cmp	r2, #0
 800a722:	f000 80cd 	beq.w	800a8c0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 80cc 	beq.w	800a8c4 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a72c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800a730:	b2c0      	uxtb	r0, r0
 800a732:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a734:	bf1c      	itt	ne
 800a736:	2005      	movne	r0, #5
 800a738:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a73c:	2000      	movs	r0, #0
 800a73e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a740:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a742:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a744:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a746:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a748:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a74c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a750:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a752:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a754:	6822      	ldr	r2, [r4, #0]
 800a756:	6853      	ldr	r3, [r2, #4]
 800a758:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a75c:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a75e:	68e3      	ldr	r3, [r4, #12]
 800a760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a764:	d927      	bls.n	800a7b6 <HAL_SPI_TransmitReceive_DMA+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a766:	6822      	ldr	r2, [r4, #0]
 800a768:	6853      	ldr	r3, [r2, #4]
 800a76a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a76e:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a770:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b04      	cmp	r3, #4
 800a778:	d064      	beq.n	800a844 <HAL_SPI_TransmitReceive_DMA+0x16c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a77a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a77c:	4a53      	ldr	r2, [pc, #332]	; (800a8cc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800a77e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a782:	4a53      	ldr	r2, [pc, #332]	; (800a8d0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800a784:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a786:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a788:	4a52      	ldr	r2, [pc, #328]	; (800a8d4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800a78a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800a78c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a78e:	2200      	movs	r2, #0
 800a790:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a792:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a796:	6821      	ldr	r1, [r4, #0]
 800a798:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a79a:	310c      	adds	r1, #12
 800a79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a79e:	f7f7 ffee 	bl	800277e <HAL_DMA_Start_IT>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d055      	beq.n	800a852 <HAL_SPI_TransmitReceive_DMA+0x17a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a7a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a7a8:	f043 0310 	orr.w	r3, r3, #16
 800a7ac:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800a7b4:	e7a4      	b.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x28>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a7b6:	6822      	ldr	r2, [r4, #0]
 800a7b8:	6853      	ldr	r3, [r2, #4]
 800a7ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a7be:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c8:	d019      	beq.n	800a7fe <HAL_SPI_TransmitReceive_DMA+0x126>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7d2:	d1cd      	bne.n	800a770 <HAL_SPI_TransmitReceive_DMA+0x98>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a7d4:	6822      	ldr	r2, [r4, #0]
 800a7d6:	6853      	ldr	r3, [r2, #4]
 800a7d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7dc:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a7de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a7e2:	f013 0f01 	tst.w	r3, #1
 800a7e6:	d121      	bne.n	800a82c <HAL_SPI_TransmitReceive_DMA+0x154>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a7e8:	6822      	ldr	r2, [r4, #0]
 800a7ea:	6853      	ldr	r3, [r2, #4]
 800a7ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7f0:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a7f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a7f6:	085b      	lsrs	r3, r3, #1
 800a7f8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a7fc:	e7b8      	b.n	800a770 <HAL_SPI_TransmitReceive_DMA+0x98>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a7fe:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800a800:	f013 0f01 	tst.w	r3, #1
 800a804:	d108      	bne.n	800a818 <HAL_SPI_TransmitReceive_DMA+0x140>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a806:	6822      	ldr	r2, [r4, #0]
 800a808:	6853      	ldr	r3, [r2, #4]
 800a80a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a80e:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a810:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a812:	085b      	lsrs	r3, r3, #1
 800a814:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a816:	e7d8      	b.n	800a7ca <HAL_SPI_TransmitReceive_DMA+0xf2>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a818:	6822      	ldr	r2, [r4, #0]
 800a81a:	6853      	ldr	r3, [r2, #4]
 800a81c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a820:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a822:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a824:	085b      	lsrs	r3, r3, #1
 800a826:	3301      	adds	r3, #1
 800a828:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a82a:	e7ce      	b.n	800a7ca <HAL_SPI_TransmitReceive_DMA+0xf2>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a82c:	6822      	ldr	r2, [r4, #0]
 800a82e:	6853      	ldr	r3, [r2, #4]
 800a830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a834:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a836:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a83a:	085b      	lsrs	r3, r3, #1
 800a83c:	3301      	adds	r3, #1
 800a83e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a842:	e795      	b.n	800a770 <HAL_SPI_TransmitReceive_DMA+0x98>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a844:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a846:	4a24      	ldr	r2, [pc, #144]	; (800a8d8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800a848:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a84a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a84c:	4a23      	ldr	r2, [pc, #140]	; (800a8dc <HAL_SPI_TransmitReceive_DMA+0x204>)
 800a84e:	62da      	str	r2, [r3, #44]	; 0x2c
 800a850:	e799      	b.n	800a786 <HAL_SPI_TransmitReceive_DMA+0xae>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a852:	6822      	ldr	r2, [r4, #0]
 800a854:	6853      	ldr	r3, [r2, #4]
 800a856:	f043 0301 	orr.w	r3, r3, #1
 800a85a:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a85c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a85e:	2300      	movs	r3, #0
 800a860:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a862:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a864:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a866:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a868:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a86a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a86c:	6393      	str	r3, [r2, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800a86e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	320c      	adds	r2, #12
 800a874:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a878:	f7f7 ff81 	bl	800277e <HAL_DMA_Start_IT>
 800a87c:	4603      	mov	r3, r0
 800a87e:	b138      	cbz	r0, 800a890 <HAL_SPI_TransmitReceive_DMA+0x1b8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a880:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a882:	f043 0310 	orr.w	r3, r3, #16
 800a886:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800a888:	2301      	movs	r3, #1
 800a88a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800a88e:	e737      	b.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a890:	6822      	ldr	r2, [r4, #0]
 800a892:	6811      	ldr	r1, [r2, #0]
 800a894:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a898:	d103      	bne.n	800a8a2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    __HAL_SPI_ENABLE(hspi);
 800a89a:	6811      	ldr	r1, [r2, #0]
 800a89c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a8a0:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a8a2:	6821      	ldr	r1, [r4, #0]
 800a8a4:	684a      	ldr	r2, [r1, #4]
 800a8a6:	f042 0220 	orr.w	r2, r2, #32
 800a8aa:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a8ac:	6821      	ldr	r1, [r4, #0]
 800a8ae:	684a      	ldr	r2, [r1, #4]
 800a8b0:	f042 0202 	orr.w	r2, r2, #2
 800a8b4:	604a      	str	r2, [r1, #4]
 800a8b6:	e723      	b.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_BUSY;
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	e721      	b.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e71f      	b.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x28>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e71d      	b.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x28>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e71b      	b.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e71c      	b.n	800a706 <HAL_SPI_TransmitReceive_DMA+0x2e>
 800a8cc:	0800ac97 	.word	0x0800ac97
 800a8d0:	0800b069 	.word	0x0800b069
 800a8d4:	0800af7f 	.word	0x0800af7f
 800a8d8:	0800ac8b 	.word	0x0800ac8b
 800a8dc:	0800b011 	.word	0x0800b011

0800a8e0 <HAL_SPI_Receive_DMA>:
{
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a8e4:	6885      	ldr	r5, [r0, #8]
 800a8e6:	b91d      	cbnz	r5, 800a8f0 <HAL_SPI_Receive_DMA+0x10>
 800a8e8:	6843      	ldr	r3, [r0, #4]
 800a8ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8ee:	d012      	beq.n	800a916 <HAL_SPI_Receive_DMA+0x36>
  __HAL_LOCK(hspi);
 800a8f0:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 800a8f4:	2801      	cmp	r0, #1
 800a8f6:	f000 80a4 	beq.w	800aa42 <HAL_SPI_Receive_DMA+0x162>
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800a900:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800a904:	b2c0      	uxtb	r0, r0
 800a906:	2801      	cmp	r0, #1
 800a908:	d00e      	beq.n	800a928 <HAL_SPI_Receive_DMA+0x48>
    errorcode = HAL_BUSY;
 800a90a:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800a90c:	2200      	movs	r2, #0
 800a90e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800a912:	4618      	mov	r0, r3
 800a914:	bd38      	pop	{r3, r4, r5, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a916:	2304      	movs	r3, #4
 800a918:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a91c:	4613      	mov	r3, r2
 800a91e:	460a      	mov	r2, r1
 800a920:	f7ff feda 	bl	800a6d8 <HAL_SPI_TransmitReceive_DMA>
 800a924:	4603      	mov	r3, r0
 800a926:	e7f4      	b.n	800a912 <HAL_SPI_Receive_DMA+0x32>
  if ((pData == NULL) || (Size == 0U))
 800a928:	2900      	cmp	r1, #0
 800a92a:	f000 8086 	beq.w	800aa3a <HAL_SPI_Receive_DMA+0x15a>
 800a92e:	2a00      	cmp	r2, #0
 800a930:	f000 8085 	beq.w	800aa3e <HAL_SPI_Receive_DMA+0x15e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a934:	2304      	movs	r3, #4
 800a936:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a93a:	2300      	movs	r3, #0
 800a93c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a93e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a940:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a944:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a948:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a94a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800a94c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a94e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a950:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a954:	d02c      	beq.n	800a9b0 <HAL_SPI_Receive_DMA+0xd0>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a956:	6822      	ldr	r2, [r4, #0]
 800a958:	6853      	ldr	r3, [r2, #4]
 800a95a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a95e:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a960:	68e3      	ldr	r3, [r4, #12]
 800a962:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a966:	d929      	bls.n	800a9bc <HAL_SPI_Receive_DMA+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a968:	6822      	ldr	r2, [r4, #0]
 800a96a:	6853      	ldr	r3, [r2, #4]
 800a96c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a970:	6053      	str	r3, [r2, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a972:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a974:	4a34      	ldr	r2, [pc, #208]	; (800aa48 <HAL_SPI_Receive_DMA+0x168>)
 800a976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a978:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a97a:	4a34      	ldr	r2, [pc, #208]	; (800aa4c <HAL_SPI_Receive_DMA+0x16c>)
 800a97c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a97e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a980:	4a33      	ldr	r2, [pc, #204]	; (800aa50 <HAL_SPI_Receive_DMA+0x170>)
 800a982:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800a984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a986:	2200      	movs	r2, #0
 800a988:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a98a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a98e:	6821      	ldr	r1, [r4, #0]
 800a990:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a992:	310c      	adds	r1, #12
 800a994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a996:	f7f7 fef2 	bl	800277e <HAL_DMA_Start_IT>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d038      	beq.n	800aa12 <HAL_SPI_Receive_DMA+0x132>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a9a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a9a2:	f043 0310 	orr.w	r3, r3, #16
 800a9a6:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800a9ae:	e7ad      	b.n	800a90c <HAL_SPI_Receive_DMA+0x2c>
    SPI_1LINE_RX(hspi);
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	6813      	ldr	r3, [r2, #0]
 800a9b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	e7cc      	b.n	800a956 <HAL_SPI_Receive_DMA+0x76>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9bc:	6822      	ldr	r2, [r4, #0]
 800a9be:	6853      	ldr	r3, [r2, #4]
 800a9c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9c4:	6053      	str	r3, [r2, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ce:	d1d0      	bne.n	800a972 <HAL_SPI_Receive_DMA+0x92>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	6853      	ldr	r3, [r2, #4]
 800a9d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9d8:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a9da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a9de:	f013 0f01 	tst.w	r3, #1
 800a9e2:	d10a      	bne.n	800a9fa <HAL_SPI_Receive_DMA+0x11a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a9e4:	6822      	ldr	r2, [r4, #0]
 800a9e6:	6853      	ldr	r3, [r2, #4]
 800a9e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9ec:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a9ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a9f2:	085b      	lsrs	r3, r3, #1
 800a9f4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a9f8:	e7bb      	b.n	800a972 <HAL_SPI_Receive_DMA+0x92>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a9fa:	6822      	ldr	r2, [r4, #0]
 800a9fc:	6853      	ldr	r3, [r2, #4]
 800a9fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa02:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800aa04:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aa08:	085b      	lsrs	r3, r3, #1
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800aa10:	e7af      	b.n	800a972 <HAL_SPI_Receive_DMA+0x92>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa12:	6822      	ldr	r2, [r4, #0]
 800aa14:	6811      	ldr	r1, [r2, #0]
 800aa16:	f011 0f40 	tst.w	r1, #64	; 0x40
 800aa1a:	d103      	bne.n	800aa24 <HAL_SPI_Receive_DMA+0x144>
    __HAL_SPI_ENABLE(hspi);
 800aa1c:	6811      	ldr	r1, [r2, #0]
 800aa1e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800aa22:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800aa24:	6821      	ldr	r1, [r4, #0]
 800aa26:	684a      	ldr	r2, [r1, #4]
 800aa28:	f042 0220 	orr.w	r2, r2, #32
 800aa2c:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800aa2e:	6821      	ldr	r1, [r4, #0]
 800aa30:	684a      	ldr	r2, [r1, #4]
 800aa32:	f042 0201 	orr.w	r2, r2, #1
 800aa36:	604a      	str	r2, [r1, #4]
 800aa38:	e768      	b.n	800a90c <HAL_SPI_Receive_DMA+0x2c>
    errorcode = HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e766      	b.n	800a90c <HAL_SPI_Receive_DMA+0x2c>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e764      	b.n	800a90c <HAL_SPI_Receive_DMA+0x2c>
  __HAL_LOCK(hspi);
 800aa42:	2302      	movs	r3, #2
 800aa44:	e765      	b.n	800a912 <HAL_SPI_Receive_DMA+0x32>
 800aa46:	bf00      	nop
 800aa48:	0800ac8b 	.word	0x0800ac8b
 800aa4c:	0800b011 	.word	0x0800b011
 800aa50:	0800af7f 	.word	0x0800af7f

0800aa54 <HAL_SPI_Abort>:
{
 800aa54:	b510      	push	{r4, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	4604      	mov	r4, r0
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800aa5a:	4b5e      	ldr	r3, [pc, #376]	; (800abd4 <HAL_SPI_Abort+0x180>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a5e      	ldr	r2, [pc, #376]	; (800abd8 <HAL_SPI_Abort+0x184>)
 800aa60:	fba2 2303 	umull	r2, r3, r2, r3
 800aa64:	0a5b      	lsrs	r3, r3, #9
 800aa66:	2264      	movs	r2, #100	; 0x64
 800aa68:	fb02 f303 	mul.w	r3, r2, r3
 800aa6c:	9304      	str	r3, [sp, #16]
  count = resetcount;
 800aa6e:	9b04      	ldr	r3, [sp, #16]
 800aa70:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800aa72:	6802      	ldr	r2, [r0, #0]
 800aa74:	6853      	ldr	r3, [r2, #4]
 800aa76:	f023 0320 	bic.w	r3, r3, #32
 800aa7a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800aa7c:	6802      	ldr	r2, [r0, #0]
 800aa7e:	6853      	ldr	r3, [r2, #4]
 800aa80:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa84:	d012      	beq.n	800aaac <HAL_SPI_Abort+0x58>
    hspi->TxISR = SPI_AbortTx_ISR;
 800aa86:	4b55      	ldr	r3, [pc, #340]	; (800abdc <HAL_SPI_Abort+0x188>)
 800aa88:	6503      	str	r3, [r0, #80]	; 0x50
      if (count == 0U)
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	b143      	cbz	r3, 800aaa0 <HAL_SPI_Abort+0x4c>
      count--;
 800aa8e:	9b05      	ldr	r3, [sp, #20]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	9305      	str	r3, [sp, #20]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800aa94:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b07      	cmp	r3, #7
 800aa9c:	d1f5      	bne.n	800aa8a <HAL_SPI_Abort+0x36>
 800aa9e:	e003      	b.n	800aaa8 <HAL_SPI_Abort+0x54>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aaa0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800aaa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa6:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800aaa8:	9b04      	ldr	r3, [sp, #16]
 800aaaa:	9305      	str	r3, [sp, #20]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800aaac:	6853      	ldr	r3, [r2, #4]
 800aaae:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aab2:	d012      	beq.n	800aada <HAL_SPI_Abort+0x86>
    hspi->RxISR = SPI_AbortRx_ISR;
 800aab4:	4b4a      	ldr	r3, [pc, #296]	; (800abe0 <HAL_SPI_Abort+0x18c>)
 800aab6:	64e3      	str	r3, [r4, #76]	; 0x4c
      if (count == 0U)
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	b143      	cbz	r3, 800aace <HAL_SPI_Abort+0x7a>
      count--;
 800aabc:	9b05      	ldr	r3, [sp, #20]
 800aabe:	3b01      	subs	r3, #1
 800aac0:	9305      	str	r3, [sp, #20]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800aac2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b07      	cmp	r3, #7
 800aaca:	d1f5      	bne.n	800aab8 <HAL_SPI_Abort+0x64>
 800aacc:	e003      	b.n	800aad6 <HAL_SPI_Abort+0x82>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aace:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800aad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad4:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800aad6:	9b04      	ldr	r3, [sp, #16]
 800aad8:	9305      	str	r3, [sp, #20]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800aada:	6853      	ldr	r3, [r2, #4]
 800aadc:	f013 0f02 	tst.w	r3, #2
 800aae0:	d02a      	beq.n	800ab38 <HAL_SPI_Abort+0xe4>
    if (hspi->hdmatx != NULL)
 800aae2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aae4:	b343      	cbz	r3, 800ab38 <HAL_SPI_Abort+0xe4>
      hspi->hdmatx->XferAbortCallback = NULL;
 800aae6:	2200      	movs	r2, #0
 800aae8:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800aaea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaec:	f7f7 fe94 	bl	8002818 <HAL_DMA_Abort>
 800aaf0:	b108      	cbz	r0, 800aaf6 <HAL_SPI_Abort+0xa2>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800aaf2:	2340      	movs	r3, #64	; 0x40
 800aaf4:	6623      	str	r3, [r4, #96]	; 0x60
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 800aaf6:	6822      	ldr	r2, [r4, #0]
 800aaf8:	6853      	ldr	r3, [r2, #4]
 800aafa:	f023 0302 	bic.w	r3, r3, #2
 800aafe:	6053      	str	r3, [r2, #4]
      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab00:	f7f7 faca 	bl	8002098 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	2164      	movs	r1, #100	; 0x64
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f7fe ff3b 	bl	8009984 <SPI_EndRxTxTransaction>
 800ab0e:	b108      	cbz	r0, 800ab14 <HAL_SPI_Abort+0xc0>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab10:	2340      	movs	r3, #64	; 0x40
 800ab12:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_DISABLE(hspi);
 800ab14:	6822      	ldr	r2, [r4, #0]
 800ab16:	6813      	ldr	r3, [r2, #0]
 800ab18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab1c:	6013      	str	r3, [r2, #0]
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab1e:	f7f7 fabb 	bl	8002098 <HAL_GetTick>
 800ab22:	9000      	str	r0, [sp, #0]
 800ab24:	2364      	movs	r3, #100	; 0x64
 800ab26:	2200      	movs	r2, #0
 800ab28:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f7fe fedd 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 800ab32:	b108      	cbz	r0, 800ab38 <HAL_SPI_Abort+0xe4>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab34:	2340      	movs	r3, #64	; 0x40
 800ab36:	6623      	str	r3, [r4, #96]	; 0x60
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	f013 0f01 	tst.w	r3, #1
 800ab40:	d02c      	beq.n	800ab9c <HAL_SPI_Abort+0x148>
    if (hspi->hdmarx != NULL)
 800ab42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab44:	b353      	cbz	r3, 800ab9c <HAL_SPI_Abort+0x148>
      hspi->hdmarx->XferAbortCallback = NULL;
 800ab46:	2200      	movs	r2, #0
 800ab48:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800ab4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab4c:	f7f7 fe64 	bl	8002818 <HAL_DMA_Abort>
 800ab50:	b108      	cbz	r0, 800ab56 <HAL_SPI_Abort+0x102>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab52:	2340      	movs	r3, #64	; 0x40
 800ab54:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_DISABLE(hspi);
 800ab56:	6822      	ldr	r2, [r4, #0]
 800ab58:	6813      	ldr	r3, [r2, #0]
 800ab5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab5e:	6013      	str	r3, [r2, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab60:	f7f7 fa9a 	bl	8002098 <HAL_GetTick>
 800ab64:	9000      	str	r0, [sp, #0]
 800ab66:	2364      	movs	r3, #100	; 0x64
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2180      	movs	r1, #128	; 0x80
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f7fe fe75 	bl	800985c <SPI_WaitFlagStateUntilTimeout>
 800ab72:	b108      	cbz	r0, 800ab78 <HAL_SPI_Abort+0x124>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	6623      	str	r3, [r4, #96]	; 0x60
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab78:	f7f7 fa8e 	bl	8002098 <HAL_GetTick>
 800ab7c:	9000      	str	r0, [sp, #0]
 800ab7e:	2364      	movs	r3, #100	; 0x64
 800ab80:	2200      	movs	r2, #0
 800ab82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ab86:	4620      	mov	r0, r4
 800ab88:	f7fe feb0 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 800ab8c:	b108      	cbz	r0, 800ab92 <HAL_SPI_Abort+0x13e>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab8e:	2340      	movs	r3, #64	; 0x40
 800ab90:	6623      	str	r3, [r4, #96]	; 0x60
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 800ab92:	6822      	ldr	r2, [r4, #0]
 800ab94:	6853      	ldr	r3, [r2, #4]
 800ab96:	f023 0301 	bic.w	r3, r3, #1
 800ab9a:	6053      	str	r3, [r2, #4]
  hspi->RxXferCount = 0U;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800aba2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800aba4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800aba6:	2b40      	cmp	r3, #64	; 0x40
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aba8:	bf1a      	itte	ne
 800abaa:	2000      	movne	r0, #0
 800abac:	6620      	strne	r0, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800abae:	2001      	moveq	r0, #1
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abb0:	2200      	movs	r2, #0
 800abb2:	9202      	str	r2, [sp, #8]
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	68d9      	ldr	r1, [r3, #12]
 800abb8:	9102      	str	r1, [sp, #8]
 800abba:	6899      	ldr	r1, [r3, #8]
 800abbc:	9102      	str	r1, [sp, #8]
 800abbe:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800abc0:	9203      	str	r2, [sp, #12]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	9303      	str	r3, [sp, #12]
 800abc6:	9b03      	ldr	r3, [sp, #12]
  hspi->State = HAL_SPI_STATE_READY;
 800abc8:	2301      	movs	r3, #1
 800abca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800abce:	b006      	add	sp, #24
 800abd0:	bd10      	pop	{r4, pc}
 800abd2:	bf00      	nop
 800abd4:	20000008 	.word	0x20000008
 800abd8:	057619f1 	.word	0x057619f1
 800abdc:	08009b05 	.word	0x08009b05
 800abe0:	08009a75 	.word	0x08009a75

0800abe4 <HAL_SPI_DMAPause>:
  __HAL_LOCK(hspi);
 800abe4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d00c      	beq.n	800ac06 <HAL_SPI_DMAPause+0x22>
 800abec:	2301      	movs	r3, #1
 800abee:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800abf2:	6802      	ldr	r2, [r0, #0]
 800abf4:	6853      	ldr	r3, [r2, #4]
 800abf6:	f023 0303 	bic.w	r3, r3, #3
 800abfa:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hspi);
 800abfc:	2300      	movs	r3, #0
 800abfe:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800ac02:	4618      	mov	r0, r3
 800ac04:	4770      	bx	lr
  __HAL_LOCK(hspi);
 800ac06:	2002      	movs	r0, #2
}
 800ac08:	4770      	bx	lr

0800ac0a <HAL_SPI_DMAResume>:
  __HAL_LOCK(hspi);
 800ac0a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d00c      	beq.n	800ac2c <HAL_SPI_DMAResume+0x22>
 800ac12:	2301      	movs	r3, #1
 800ac14:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac18:	6802      	ldr	r2, [r0, #0]
 800ac1a:	6853      	ldr	r3, [r2, #4]
 800ac1c:	f043 0303 	orr.w	r3, r3, #3
 800ac20:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hspi);
 800ac22:	2300      	movs	r3, #0
 800ac24:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800ac28:	4618      	mov	r0, r3
 800ac2a:	4770      	bx	lr
  __HAL_LOCK(hspi);
 800ac2c:	2002      	movs	r0, #2
}
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_SPI_DMAStop>:
{
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4604      	mov	r4, r0
  if (hspi->hdmatx != NULL)
 800ac34:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800ac36:	b148      	cbz	r0, 800ac4c <HAL_SPI_DMAStop+0x1c>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800ac38:	f7f7 fdee 	bl	8002818 <HAL_DMA_Abort>
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	b130      	cbz	r0, 800ac4e <HAL_SPI_DMAStop+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac40:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ac42:	f043 0310 	orr.w	r3, r3, #16
 800ac46:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800ac48:	2501      	movs	r5, #1
 800ac4a:	e000      	b.n	800ac4e <HAL_SPI_DMAStop+0x1e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac4c:	2500      	movs	r5, #0
  if (hspi->hdmarx != NULL)
 800ac4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac50:	b138      	cbz	r0, 800ac62 <HAL_SPI_DMAStop+0x32>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800ac52:	f7f7 fde1 	bl	8002818 <HAL_DMA_Abort>
 800ac56:	b120      	cbz	r0, 800ac62 <HAL_SPI_DMAStop+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ac5a:	f043 0310 	orr.w	r3, r3, #16
 800ac5e:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800ac60:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	6853      	ldr	r3, [r2, #4]
 800ac66:	f023 0303 	bic.w	r3, r3, #3
 800ac6a:	6053      	str	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800ac72:	4628      	mov	r0, r5
 800ac74:	bd38      	pop	{r3, r4, r5, pc}

0800ac76 <HAL_SPI_TxCpltCallback>:
}
 800ac76:	4770      	bx	lr

0800ac78 <HAL_SPI_RxCpltCallback>:
}
 800ac78:	4770      	bx	lr

0800ac7a <HAL_SPI_TxRxCpltCallback>:
}
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_SPI_TxHalfCpltCallback>:
}
 800ac7c:	4770      	bx	lr

0800ac7e <SPI_DMAHalfTransmitCplt>:
{
 800ac7e:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ac80:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ac82:	f7ff fffb 	bl	800ac7c <HAL_SPI_TxHalfCpltCallback>
}
 800ac86:	bd08      	pop	{r3, pc}

0800ac88 <HAL_SPI_RxHalfCpltCallback>:
}
 800ac88:	4770      	bx	lr

0800ac8a <SPI_DMAHalfReceiveCplt>:
{
 800ac8a:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ac8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ac8e:	f7ff fffb 	bl	800ac88 <HAL_SPI_RxHalfCpltCallback>
}
 800ac92:	bd08      	pop	{r3, pc}

0800ac94 <HAL_SPI_TxRxHalfCpltCallback>:
}
 800ac94:	4770      	bx	lr

0800ac96 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800ac96:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ac98:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ac9a:	f7ff fffb 	bl	800ac94 <HAL_SPI_TxRxHalfCpltCallback>
}
 800ac9e:	bd08      	pop	{r3, pc}

0800aca0 <HAL_SPI_ErrorCallback>:
}
 800aca0:	4770      	bx	lr

0800aca2 <SPI_CloseTx_ISR>:
{
 800aca2:	b510      	push	{r4, lr}
 800aca4:	b082      	sub	sp, #8
 800aca6:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800aca8:	f7f7 f9f6 	bl	8002098 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800acac:	6822      	ldr	r2, [r4, #0]
 800acae:	6853      	ldr	r3, [r2, #4]
 800acb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acb4:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800acb6:	4602      	mov	r2, r0
 800acb8:	2164      	movs	r1, #100	; 0x64
 800acba:	4620      	mov	r0, r4
 800acbc:	f7fe fe62 	bl	8009984 <SPI_EndRxTxTransaction>
 800acc0:	b118      	cbz	r0, 800acca <SPI_CloseTx_ISR+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800acc4:	f043 0320 	orr.w	r3, r3, #32
 800acc8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acca:	68a3      	ldr	r3, [r4, #8]
 800accc:	b933      	cbnz	r3, 800acdc <SPI_CloseTx_ISR+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	68da      	ldr	r2, [r3, #12]
 800acd4:	9201      	str	r2, [sp, #4]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800acdc:	2301      	movs	r3, #1
 800acde:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ace2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ace4:	b923      	cbnz	r3, 800acf0 <SPI_CloseTx_ISR+0x4e>
    HAL_SPI_TxCpltCallback(hspi);
 800ace6:	4620      	mov	r0, r4
 800ace8:	f7ff ffc5 	bl	800ac76 <HAL_SPI_TxCpltCallback>
}
 800acec:	b002      	add	sp, #8
 800acee:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7ff ffd5 	bl	800aca0 <HAL_SPI_ErrorCallback>
 800acf6:	e7f9      	b.n	800acec <SPI_CloseTx_ISR+0x4a>

0800acf8 <SPI_TxISR_8BIT>:
{
 800acf8:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800acfa:	6803      	ldr	r3, [r0, #0]
 800acfc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800acfe:	7812      	ldrb	r2, [r2, #0]
 800ad00:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 800ad02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ad04:	3301      	adds	r3, #1
 800ad06:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800ad08:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800ad10:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	b103      	cbz	r3, 800ad18 <SPI_TxISR_8BIT+0x20>
}
 800ad16:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800ad18:	f7ff ffc3 	bl	800aca2 <SPI_CloseTx_ISR>
}
 800ad1c:	e7fb      	b.n	800ad16 <SPI_TxISR_8BIT+0x1e>

0800ad1e <SPI_TxISR_16BIT>:
{
 800ad1e:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad20:	6803      	ldr	r3, [r0, #0]
 800ad22:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800ad24:	8812      	ldrh	r2, [r2, #0]
 800ad26:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad28:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ad2a:	3302      	adds	r3, #2
 800ad2c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800ad2e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ad30:	3b01      	subs	r3, #1
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800ad36:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	b103      	cbz	r3, 800ad3e <SPI_TxISR_16BIT+0x20>
}
 800ad3c:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800ad3e:	f7ff ffb0 	bl	800aca2 <SPI_CloseTx_ISR>
}
 800ad42:	e7fb      	b.n	800ad3c <SPI_TxISR_16BIT+0x1e>

0800ad44 <SPI_CloseRx_ISR>:
{
 800ad44:	b510      	push	{r4, lr}
 800ad46:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ad48:	6802      	ldr	r2, [r0, #0]
 800ad4a:	6853      	ldr	r3, [r2, #4]
 800ad4c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800ad50:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ad52:	f7f7 f9a1 	bl	8002098 <HAL_GetTick>
 800ad56:	4602      	mov	r2, r0
 800ad58:	2164      	movs	r1, #100	; 0x64
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f7fe fe45 	bl	80099ea <SPI_EndRxTransaction>
 800ad60:	b118      	cbz	r0, 800ad6a <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad62:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ad64:	f043 0320 	orr.w	r3, r3, #32
 800ad68:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ad70:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ad72:	b11b      	cbz	r3, 800ad7c <SPI_CloseRx_ISR+0x38>
      HAL_SPI_ErrorCallback(hspi);
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7ff ff93 	bl	800aca0 <HAL_SPI_ErrorCallback>
}
 800ad7a:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f7ff ff7b 	bl	800ac78 <HAL_SPI_RxCpltCallback>
 800ad82:	e7fa      	b.n	800ad7a <SPI_CloseRx_ISR+0x36>

0800ad84 <SPI_RxISR_8BIT>:
{
 800ad84:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800ad86:	6802      	ldr	r2, [r0, #0]
 800ad88:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ad8a:	7b12      	ldrb	r2, [r2, #12]
 800ad8c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ad8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ad90:	3301      	adds	r3, #1
 800ad92:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800ad94:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800ada0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	b103      	cbz	r3, 800adaa <SPI_RxISR_8BIT+0x26>
}
 800ada8:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 800adaa:	f7ff ffcb 	bl	800ad44 <SPI_CloseRx_ISR>
}
 800adae:	e7fb      	b.n	800ada8 <SPI_RxISR_8BIT+0x24>

0800adb0 <SPI_RxISR_16BIT>:
{
 800adb0:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800adb2:	6803      	ldr	r3, [r0, #0]
 800adb4:	68da      	ldr	r2, [r3, #12]
 800adb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800adb8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800adba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800adbc:	3302      	adds	r3, #2
 800adbe:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800adc0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800adc4:	3b01      	subs	r3, #1
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800adcc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800add0:	b29b      	uxth	r3, r3
 800add2:	b103      	cbz	r3, 800add6 <SPI_RxISR_16BIT+0x26>
}
 800add4:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 800add6:	f7ff ffb5 	bl	800ad44 <SPI_CloseRx_ISR>
}
 800adda:	e7fb      	b.n	800add4 <SPI_RxISR_16BIT+0x24>

0800addc <SPI_CloseRxTx_ISR>:
{
 800addc:	b510      	push	{r4, lr}
 800adde:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800ade0:	f7f7 f95a 	bl	8002098 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ade4:	6822      	ldr	r2, [r4, #0]
 800ade6:	6853      	ldr	r3, [r2, #4]
 800ade8:	f023 0320 	bic.w	r3, r3, #32
 800adec:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800adee:	4602      	mov	r2, r0
 800adf0:	2164      	movs	r1, #100	; 0x64
 800adf2:	4620      	mov	r0, r4
 800adf4:	f7fe fdc6 	bl	8009984 <SPI_EndRxTxTransaction>
 800adf8:	b118      	cbz	r0, 800ae02 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adfa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800adfc:	f043 0320 	orr.w	r3, r3, #32
 800ae00:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ae02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ae04:	b993      	cbnz	r3, 800ae2c <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ae06:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d006      	beq.n	800ae1e <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 800ae10:	2301      	movs	r3, #1
 800ae12:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800ae16:	4620      	mov	r0, r4
 800ae18:	f7ff ff2f 	bl	800ac7a <HAL_SPI_TxRxCpltCallback>
}
 800ae1c:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800ae24:	4620      	mov	r0, r4
 800ae26:	f7ff ff27 	bl	800ac78 <HAL_SPI_RxCpltCallback>
 800ae2a:	e7f7      	b.n	800ae1c <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800ae32:	4620      	mov	r0, r4
 800ae34:	f7ff ff34 	bl	800aca0 <HAL_SPI_ErrorCallback>
}
 800ae38:	e7f0      	b.n	800ae1c <SPI_CloseRxTx_ISR+0x40>

0800ae3a <SPI_2linesTxISR_8BIT>:
{
 800ae3a:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 800ae3c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d917      	bls.n	800ae74 <SPI_2linesTxISR_8BIT+0x3a>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae44:	6803      	ldr	r3, [r0, #0]
 800ae46:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800ae48:	8812      	ldrh	r2, [r2, #0]
 800ae4a:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ae4e:	3302      	adds	r3, #2
 800ae50:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800ae52:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ae54:	3b02      	subs	r3, #2
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800ae5a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	b943      	cbnz	r3, 800ae72 <SPI_2linesTxISR_8BIT+0x38>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ae60:	6802      	ldr	r2, [r0, #0]
 800ae62:	6853      	ldr	r3, [r2, #4]
 800ae64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae68:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800ae6a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	b163      	cbz	r3, 800ae8c <SPI_2linesTxISR_8BIT+0x52>
}
 800ae72:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae74:	6803      	ldr	r3, [r0, #0]
 800ae76:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800ae78:	7812      	ldrb	r2, [r2, #0]
 800ae7a:	731a      	strb	r2, [r3, #12]
    hspi->pTxBuffPtr++;
 800ae7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ae7e:	3301      	adds	r3, #1
 800ae80:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 800ae82:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ae84:	3b01      	subs	r3, #1
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	87c3      	strh	r3, [r0, #62]	; 0x3e
 800ae8a:	e7e6      	b.n	800ae5a <SPI_2linesTxISR_8BIT+0x20>
      SPI_CloseRxTx_ISR(hspi);
 800ae8c:	f7ff ffa6 	bl	800addc <SPI_CloseRxTx_ISR>
}
 800ae90:	e7ef      	b.n	800ae72 <SPI_2linesTxISR_8BIT+0x38>

0800ae92 <SPI_2linesRxISR_8BIT>:
{
 800ae92:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 800ae94:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d924      	bls.n	800aee8 <SPI_2linesRxISR_8BIT+0x56>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ae9e:	6803      	ldr	r3, [r0, #0]
 800aea0:	68da      	ldr	r2, [r3, #12]
 800aea2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aea4:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800aea6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aea8:	3302      	adds	r3, #2
 800aeaa:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800aeac:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800aeb0:	3b02      	subs	r3, #2
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800aeb8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d00c      	beq.n	800aedc <SPI_2linesRxISR_8BIT+0x4a>
  if (hspi->RxXferCount == 0U)
 800aec2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	b93b      	cbnz	r3, 800aeda <SPI_2linesRxISR_8BIT+0x48>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800aeca:	6802      	ldr	r2, [r0, #0]
 800aecc:	6853      	ldr	r3, [r2, #4]
 800aece:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800aed2:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800aed4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	b1a3      	cbz	r3, 800af04 <SPI_2linesRxISR_8BIT+0x72>
}
 800aeda:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aedc:	6802      	ldr	r2, [r0, #0]
 800aede:	6853      	ldr	r3, [r2, #4]
 800aee0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aee4:	6053      	str	r3, [r2, #4]
 800aee6:	e7ec      	b.n	800aec2 <SPI_2linesRxISR_8BIT+0x30>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800aee8:	6802      	ldr	r2, [r0, #0]
 800aeea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aeec:	7b12      	ldrb	r2, [r2, #12]
 800aeee:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800aef0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aef2:	3301      	adds	r3, #1
 800aef4:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 800aef6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800aefa:	3b01      	subs	r3, #1
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 800af02:	e7de      	b.n	800aec2 <SPI_2linesRxISR_8BIT+0x30>
      SPI_CloseRxTx_ISR(hspi);
 800af04:	f7ff ff6a 	bl	800addc <SPI_CloseRxTx_ISR>
}
 800af08:	e7e7      	b.n	800aeda <SPI_2linesRxISR_8BIT+0x48>

0800af0a <SPI_2linesTxISR_16BIT>:
{
 800af0a:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af0c:	6803      	ldr	r3, [r0, #0]
 800af0e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800af10:	8812      	ldrh	r2, [r2, #0]
 800af12:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800af14:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800af16:	3302      	adds	r3, #2
 800af18:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800af1a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800af1c:	3b01      	subs	r3, #1
 800af1e:	b29b      	uxth	r3, r3
 800af20:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800af22:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800af24:	b29b      	uxth	r3, r3
 800af26:	b943      	cbnz	r3, 800af3a <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800af28:	6802      	ldr	r2, [r0, #0]
 800af2a:	6853      	ldr	r3, [r2, #4]
 800af2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af30:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800af32:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800af36:	b29b      	uxth	r3, r3
 800af38:	b103      	cbz	r3, 800af3c <SPI_2linesTxISR_16BIT+0x32>
}
 800af3a:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800af3c:	f7ff ff4e 	bl	800addc <SPI_CloseRxTx_ISR>
}
 800af40:	e7fb      	b.n	800af3a <SPI_2linesTxISR_16BIT+0x30>

0800af42 <SPI_2linesRxISR_16BIT>:
{
 800af42:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800af44:	6803      	ldr	r3, [r0, #0]
 800af46:	68da      	ldr	r2, [r3, #12]
 800af48:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af4a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800af4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af4e:	3302      	adds	r3, #2
 800af50:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800af52:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800af56:	3b01      	subs	r3, #1
 800af58:	b29b      	uxth	r3, r3
 800af5a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800af5e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800af62:	b29b      	uxth	r3, r3
 800af64:	b93b      	cbnz	r3, 800af76 <SPI_2linesRxISR_16BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800af66:	6802      	ldr	r2, [r0, #0]
 800af68:	6853      	ldr	r3, [r2, #4]
 800af6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af6e:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800af70:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800af72:	b29b      	uxth	r3, r3
 800af74:	b103      	cbz	r3, 800af78 <SPI_2linesRxISR_16BIT+0x36>
}
 800af76:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800af78:	f7ff ff30 	bl	800addc <SPI_CloseRxTx_ISR>
}
 800af7c:	e7fb      	b.n	800af76 <SPI_2linesRxISR_16BIT+0x34>

0800af7e <SPI_DMAError>:
{
 800af7e:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af80:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800af82:	6802      	ldr	r2, [r0, #0]
 800af84:	6853      	ldr	r3, [r2, #4]
 800af86:	f023 0303 	bic.w	r3, r3, #3
 800af8a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af8c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800af8e:	f043 0310 	orr.w	r3, r3, #16
 800af92:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800af94:	2301      	movs	r3, #1
 800af96:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 800af9a:	f7ff fe81 	bl	800aca0 <HAL_SPI_ErrorCallback>
}
 800af9e:	bd08      	pop	{r3, pc}

0800afa0 <SPI_DMATransmitCplt>:
{
 800afa0:	b530      	push	{r4, r5, lr}
 800afa2:	b083      	sub	sp, #12
 800afa4:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800afa6:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800afa8:	f7f7 f876 	bl	8002098 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800afac:	682b      	ldr	r3, [r5, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f013 0f20 	tst.w	r3, #32
 800afb4:	d123      	bne.n	800affe <SPI_DMATransmitCplt+0x5e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800afb6:	6822      	ldr	r2, [r4, #0]
 800afb8:	6853      	ldr	r3, [r2, #4]
 800afba:	f023 0320 	bic.w	r3, r3, #32
 800afbe:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800afc0:	6822      	ldr	r2, [r4, #0]
 800afc2:	6853      	ldr	r3, [r2, #4]
 800afc4:	f023 0302 	bic.w	r3, r3, #2
 800afc8:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800afca:	4602      	mov	r2, r0
 800afcc:	2164      	movs	r1, #100	; 0x64
 800afce:	4620      	mov	r0, r4
 800afd0:	f7fe fcd8 	bl	8009984 <SPI_EndRxTxTransaction>
 800afd4:	b118      	cbz	r0, 800afde <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afd6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800afd8:	f043 0320 	orr.w	r3, r3, #32
 800afdc:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800afde:	68a3      	ldr	r3, [r4, #8]
 800afe0:	b933      	cbnz	r3, 800aff0 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	68da      	ldr	r2, [r3, #12]
 800afe8:	9201      	str	r2, [sp, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800aff0:	2300      	movs	r3, #0
 800aff2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800aff4:	2301      	movs	r3, #1
 800aff6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800affa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800affc:	b923      	cbnz	r3, 800b008 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 800affe:	4620      	mov	r0, r4
 800b000:	f7ff fe39 	bl	800ac76 <HAL_SPI_TxCpltCallback>
}
 800b004:	b003      	add	sp, #12
 800b006:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800b008:	4620      	mov	r0, r4
 800b00a:	f7ff fe49 	bl	800aca0 <HAL_SPI_ErrorCallback>
      return;
 800b00e:	e7f9      	b.n	800b004 <SPI_DMATransmitCplt+0x64>

0800b010 <SPI_DMAReceiveCplt>:
{
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b014:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800b016:	f7f7 f83f 	bl	8002098 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f013 0f20 	tst.w	r3, #32
 800b022:	d119      	bne.n	800b058 <SPI_DMAReceiveCplt+0x48>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b024:	6822      	ldr	r2, [r4, #0]
 800b026:	6853      	ldr	r3, [r2, #4]
 800b028:	f023 0320 	bic.w	r3, r3, #32
 800b02c:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b02e:	6822      	ldr	r2, [r4, #0]
 800b030:	6853      	ldr	r3, [r2, #4]
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b038:	4602      	mov	r2, r0
 800b03a:	2164      	movs	r1, #100	; 0x64
 800b03c:	4620      	mov	r0, r4
 800b03e:	f7fe fcd4 	bl	80099ea <SPI_EndRxTransaction>
 800b042:	b108      	cbz	r0, 800b048 <SPI_DMAReceiveCplt+0x38>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b044:	2320      	movs	r3, #32
 800b046:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 800b048:	2300      	movs	r3, #0
 800b04a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b04e:	2301      	movs	r3, #1
 800b050:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b054:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b056:	b91b      	cbnz	r3, 800b060 <SPI_DMAReceiveCplt+0x50>
  HAL_SPI_RxCpltCallback(hspi);
 800b058:	4620      	mov	r0, r4
 800b05a:	f7ff fe0d 	bl	800ac78 <HAL_SPI_RxCpltCallback>
}
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800b060:	4620      	mov	r0, r4
 800b062:	f7ff fe1d 	bl	800aca0 <HAL_SPI_ErrorCallback>
      return;
 800b066:	e7fa      	b.n	800b05e <SPI_DMAReceiveCplt+0x4e>

0800b068 <SPI_DMATransmitReceiveCplt>:
{
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b06c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800b06e:	f7f7 f813 	bl	8002098 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b072:	682b      	ldr	r3, [r5, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f013 0f20 	tst.w	r3, #32
 800b07a:	d11c      	bne.n	800b0b6 <SPI_DMATransmitReceiveCplt+0x4e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b07c:	6822      	ldr	r2, [r4, #0]
 800b07e:	6853      	ldr	r3, [r2, #4]
 800b080:	f023 0320 	bic.w	r3, r3, #32
 800b084:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b086:	4602      	mov	r2, r0
 800b088:	2164      	movs	r1, #100	; 0x64
 800b08a:	4620      	mov	r0, r4
 800b08c:	f7fe fc7a 	bl	8009984 <SPI_EndRxTxTransaction>
 800b090:	b118      	cbz	r0, 800b09a <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b092:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b094:	f043 0320 	orr.w	r3, r3, #32
 800b098:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b09a:	6822      	ldr	r2, [r4, #0]
 800b09c:	6853      	ldr	r3, [r2, #4]
 800b09e:	f023 0303 	bic.w	r3, r3, #3
 800b0a2:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800b0a8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b0b4:	b91b      	cbnz	r3, 800b0be <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f7ff fddf 	bl	800ac7a <HAL_SPI_TxRxCpltCallback>
}
 800b0bc:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f7ff fdee 	bl	800aca0 <HAL_SPI_ErrorCallback>
      return;
 800b0c4:	e7fa      	b.n	800b0bc <SPI_DMATransmitReceiveCplt+0x54>
	...

0800b0c8 <HAL_SPI_IRQHandler>:
{
 800b0c8:	b570      	push	{r4, r5, r6, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800b0ce:	6801      	ldr	r1, [r0, #0]
 800b0d0:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800b0d2:	688a      	ldr	r2, [r1, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b0d4:	0993      	lsrs	r3, r2, #6
 800b0d6:	f013 0501 	ands.w	r5, r3, #1
 800b0da:	d109      	bne.n	800b0f0 <HAL_SPI_IRQHandler+0x28>
 800b0dc:	f012 0f01 	tst.w	r2, #1
 800b0e0:	d006      	beq.n	800b0f0 <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b0e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0e6:	d003      	beq.n	800b0f0 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800b0e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	4798      	blx	r3
    return;
 800b0ee:	e008      	b.n	800b102 <HAL_SPI_IRQHandler+0x3a>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b0f0:	f012 0f02 	tst.w	r2, #2
 800b0f4:	d007      	beq.n	800b106 <HAL_SPI_IRQHandler+0x3e>
 800b0f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b0fa:	d004      	beq.n	800b106 <HAL_SPI_IRQHandler+0x3e>
    hspi->TxISR(hspi);
 800b0fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b0fe:	4620      	mov	r0, r4
 800b100:	4798      	blx	r3
}
 800b102:	b004      	add	sp, #16
 800b104:	bd70      	pop	{r4, r5, r6, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b106:	0956      	lsrs	r6, r2, #5
 800b108:	4333      	orrs	r3, r6
 800b10a:	f013 0f01 	tst.w	r3, #1
 800b10e:	d05e      	beq.n	800b1ce <HAL_SPI_IRQHandler+0x106>
 800b110:	f010 0f20 	tst.w	r0, #32
 800b114:	d0f5      	beq.n	800b102 <HAL_SPI_IRQHandler+0x3a>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b116:	b17d      	cbz	r5, 800b138 <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b118:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d059      	beq.n	800b1d6 <HAL_SPI_IRQHandler+0x10e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b122:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b124:	f043 0304 	orr.w	r3, r3, #4
 800b128:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b12a:	2300      	movs	r3, #0
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	68cb      	ldr	r3, [r1, #12]
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	688b      	ldr	r3, [r1, #8]
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	9b00      	ldr	r3, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b138:	f016 0f01 	tst.w	r6, #1
 800b13c:	d00c      	beq.n	800b158 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b13e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b140:	f043 0301 	orr.w	r3, r3, #1
 800b144:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b146:	2300      	movs	r3, #0
 800b148:	9302      	str	r3, [sp, #8]
 800b14a:	688b      	ldr	r3, [r1, #8]
 800b14c:	9302      	str	r3, [sp, #8]
 800b14e:	680b      	ldr	r3, [r1, #0]
 800b150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b154:	600b      	str	r3, [r1, #0]
 800b156:	9b02      	ldr	r3, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b158:	f412 7f80 	tst.w	r2, #256	; 0x100
 800b15c:	d009      	beq.n	800b172 <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b15e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b160:	f043 0308 	orr.w	r3, r3, #8
 800b164:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b166:	2300      	movs	r3, #0
 800b168:	9303      	str	r3, [sp, #12]
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	9303      	str	r3, [sp, #12]
 800b170:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b172:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b174:	2b00      	cmp	r3, #0
 800b176:	d0c4      	beq.n	800b102 <HAL_SPI_IRQHandler+0x3a>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b178:	6822      	ldr	r2, [r4, #0]
 800b17a:	6853      	ldr	r3, [r2, #4]
 800b17c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b180:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800b182:	2301      	movs	r3, #1
 800b184:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b188:	f010 0f03 	tst.w	r0, #3
 800b18c:	d02b      	beq.n	800b1e6 <HAL_SPI_IRQHandler+0x11e>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b18e:	6822      	ldr	r2, [r4, #0]
 800b190:	6853      	ldr	r3, [r2, #4]
 800b192:	f023 0303 	bic.w	r3, r3, #3
 800b196:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800b198:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b19a:	b14b      	cbz	r3, 800b1b0 <HAL_SPI_IRQHandler+0xe8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b19c:	4a14      	ldr	r2, [pc, #80]	; (800b1f0 <HAL_SPI_IRQHandler+0x128>)
 800b19e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1a2:	f7f7 fb5e 	bl	8002862 <HAL_DMA_Abort_IT>
 800b1a6:	b118      	cbz	r0, 800b1b0 <HAL_SPI_IRQHandler+0xe8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b1a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ae:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b1b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0a5      	beq.n	800b102 <HAL_SPI_IRQHandler+0x3a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b1b6:	4a0e      	ldr	r2, [pc, #56]	; (800b1f0 <HAL_SPI_IRQHandler+0x128>)
 800b1b8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b1ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1bc:	f7f7 fb51 	bl	8002862 <HAL_DMA_Abort_IT>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d09e      	beq.n	800b102 <HAL_SPI_IRQHandler+0x3a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b1c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ca:	6623      	str	r3, [r4, #96]	; 0x60
 800b1cc:	e799      	b.n	800b102 <HAL_SPI_IRQHandler+0x3a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b1ce:	f412 7f80 	tst.w	r2, #256	; 0x100
 800b1d2:	d19d      	bne.n	800b110 <HAL_SPI_IRQHandler+0x48>
 800b1d4:	e795      	b.n	800b102 <HAL_SPI_IRQHandler+0x3a>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	68cb      	ldr	r3, [r1, #12]
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	688b      	ldr	r3, [r1, #8]
 800b1e0:	9301      	str	r3, [sp, #4]
 800b1e2:	9b01      	ldr	r3, [sp, #4]
        return;
 800b1e4:	e78d      	b.n	800b102 <HAL_SPI_IRQHandler+0x3a>
        HAL_SPI_ErrorCallback(hspi);
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f7ff fd5a 	bl	800aca0 <HAL_SPI_ErrorCallback>
 800b1ec:	e789      	b.n	800b102 <HAL_SPI_IRQHandler+0x3a>
 800b1ee:	bf00      	nop
 800b1f0:	0800b1f5 	.word	0x0800b1f5

0800b1f4 <SPI_DMAAbortOnError>:
{
 800b1f4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b1f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b1fe:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800b200:	f7ff fd4e 	bl	800aca0 <HAL_SPI_ErrorCallback>
}
 800b204:	bd08      	pop	{r3, pc}

0800b206 <HAL_SPI_AbortCpltCallback>:
}
 800b206:	4770      	bx	lr

0800b208 <HAL_SPI_Abort_IT>:
{
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	4604      	mov	r4, r0
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800b20e:	4b50      	ldr	r3, [pc, #320]	; (800b350 <HAL_SPI_Abort_IT+0x148>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a50      	ldr	r2, [pc, #320]	; (800b354 <HAL_SPI_Abort_IT+0x14c>)
 800b214:	fba2 2303 	umull	r2, r3, r2, r3
 800b218:	0a5b      	lsrs	r3, r3, #9
 800b21a:	2264      	movs	r2, #100	; 0x64
 800b21c:	fb02 f303 	mul.w	r3, r2, r3
 800b220:	9302      	str	r3, [sp, #8]
  count = resetcount;
 800b222:	9b02      	ldr	r3, [sp, #8]
 800b224:	9303      	str	r3, [sp, #12]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800b226:	6802      	ldr	r2, [r0, #0]
 800b228:	6853      	ldr	r3, [r2, #4]
 800b22a:	f023 0320 	bic.w	r3, r3, #32
 800b22e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800b230:	6802      	ldr	r2, [r0, #0]
 800b232:	6853      	ldr	r3, [r2, #4]
 800b234:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b238:	d012      	beq.n	800b260 <HAL_SPI_Abort_IT+0x58>
    hspi->TxISR = SPI_AbortTx_ISR;
 800b23a:	4b47      	ldr	r3, [pc, #284]	; (800b358 <HAL_SPI_Abort_IT+0x150>)
 800b23c:	6503      	str	r3, [r0, #80]	; 0x50
      if (count == 0U)
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	b143      	cbz	r3, 800b254 <HAL_SPI_Abort_IT+0x4c>
      count--;
 800b242:	9b03      	ldr	r3, [sp, #12]
 800b244:	3b01      	subs	r3, #1
 800b246:	9303      	str	r3, [sp, #12]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800b248:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b07      	cmp	r3, #7
 800b250:	d1f5      	bne.n	800b23e <HAL_SPI_Abort_IT+0x36>
 800b252:	e003      	b.n	800b25c <HAL_SPI_Abort_IT+0x54>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b254:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b25a:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800b25c:	9b02      	ldr	r3, [sp, #8]
 800b25e:	9303      	str	r3, [sp, #12]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800b260:	6853      	ldr	r3, [r2, #4]
 800b262:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b266:	d012      	beq.n	800b28e <HAL_SPI_Abort_IT+0x86>
    hspi->RxISR = SPI_AbortRx_ISR;
 800b268:	4b3c      	ldr	r3, [pc, #240]	; (800b35c <HAL_SPI_Abort_IT+0x154>)
 800b26a:	64e3      	str	r3, [r4, #76]	; 0x4c
      if (count == 0U)
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	b143      	cbz	r3, 800b282 <HAL_SPI_Abort_IT+0x7a>
      count--;
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	3b01      	subs	r3, #1
 800b274:	9303      	str	r3, [sp, #12]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800b276:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b07      	cmp	r3, #7
 800b27e:	d1f5      	bne.n	800b26c <HAL_SPI_Abort_IT+0x64>
 800b280:	e003      	b.n	800b28a <HAL_SPI_Abort_IT+0x82>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b282:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b288:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800b28a:	9b02      	ldr	r3, [sp, #8]
 800b28c:	9303      	str	r3, [sp, #12]
  if (hspi->hdmatx != NULL)
 800b28e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b290:	b133      	cbz	r3, 800b2a0 <HAL_SPI_Abort_IT+0x98>
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800b292:	6852      	ldr	r2, [r2, #4]
 800b294:	f012 0f02 	tst.w	r2, #2
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800b298:	bf14      	ite	ne
 800b29a:	4a31      	ldrne	r2, [pc, #196]	; (800b360 <HAL_SPI_Abort_IT+0x158>)
      hspi->hdmatx->XferAbortCallback = NULL;
 800b29c:	2200      	moveq	r2, #0
 800b29e:	639a      	str	r2, [r3, #56]	; 0x38
  if (hspi->hdmarx != NULL)
 800b2a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2a2:	b13b      	cbz	r3, 800b2b4 <HAL_SPI_Abort_IT+0xac>
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	6852      	ldr	r2, [r2, #4]
 800b2a8:	f012 0f01 	tst.w	r2, #1
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800b2ac:	bf14      	ite	ne
 800b2ae:	4a2d      	ldrne	r2, [pc, #180]	; (800b364 <HAL_SPI_Abort_IT+0x15c>)
      hspi->hdmarx->XferAbortCallback = NULL;
 800b2b0:	2200      	moveq	r2, #0
 800b2b2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	f013 0f02 	tst.w	r3, #2
 800b2bc:	d00b      	beq.n	800b2d6 <HAL_SPI_Abort_IT+0xce>
    if (hspi->hdmatx != NULL)
 800b2be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2c0:	b148      	cbz	r0, 800b2d6 <HAL_SPI_Abort_IT+0xce>
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800b2c2:	f7f7 face 	bl	8002862 <HAL_DMA_Abort_IT>
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d037      	beq.n	800b33c <HAL_SPI_Abort_IT+0x134>
        hspi->hdmatx->XferAbortCallback = NULL;
 800b2cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b2d2:	2340      	movs	r3, #64	; 0x40
 800b2d4:	6623      	str	r3, [r4, #96]	; 0x60
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	f013 0f01 	tst.w	r3, #1
 800b2de:	d010      	beq.n	800b302 <HAL_SPI_Abort_IT+0xfa>
    if (hspi->hdmarx != NULL)
 800b2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2e2:	2601      	movs	r6, #1
 800b2e4:	b168      	cbz	r0, 800b302 <HAL_SPI_Abort_IT+0xfa>
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800b2e6:	f7f7 fabc 	bl	8002862 <HAL_DMA_Abort_IT>
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	b130      	cbz	r0, 800b2fc <HAL_SPI_Abort_IT+0xf4>
        hspi->hdmarx->XferAbortCallback = NULL;
 800b2ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b2f4:	2340      	movs	r3, #64	; 0x40
 800b2f6:	6623      	str	r3, [r4, #96]	; 0x60
  errorcode = HAL_OK;
 800b2f8:	2500      	movs	r5, #0
  if (abortcplt == 1U)
 800b2fa:	b916      	cbnz	r6, 800b302 <HAL_SPI_Abort_IT+0xfa>
}
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	b004      	add	sp, #16
 800b300:	bd70      	pop	{r4, r5, r6, pc}
    hspi->RxXferCount = 0U;
 800b302:	2300      	movs	r3, #0
 800b304:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->TxXferCount = 0U;
 800b308:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800b30a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b30c:	2b40      	cmp	r3, #64	; 0x40
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b30e:	bf1a      	itte	ne
 800b310:	2500      	movne	r5, #0
 800b312:	6625      	strne	r5, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800b314:	2501      	moveq	r5, #1
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b316:	2200      	movs	r2, #0
 800b318:	9200      	str	r2, [sp, #0]
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	68d9      	ldr	r1, [r3, #12]
 800b31e:	9100      	str	r1, [sp, #0]
 800b320:	6899      	ldr	r1, [r3, #8]
 800b322:	9100      	str	r1, [sp, #0]
 800b324:	9900      	ldr	r1, [sp, #0]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b326:	9201      	str	r2, [sp, #4]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY;
 800b32e:	2301      	movs	r3, #1
 800b330:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    HAL_SPI_AbortCpltCallback(hspi);
 800b334:	4620      	mov	r0, r4
 800b336:	f7ff ff66 	bl	800b206 <HAL_SPI_AbortCpltCallback>
 800b33a:	e7df      	b.n	800b2fc <HAL_SPI_Abort_IT+0xf4>
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	f013 0f01 	tst.w	r3, #1
 800b344:	d0da      	beq.n	800b2fc <HAL_SPI_Abort_IT+0xf4>
    if (hspi->hdmarx != NULL)
 800b346:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b348:	2800      	cmp	r0, #0
 800b34a:	d0d7      	beq.n	800b2fc <HAL_SPI_Abort_IT+0xf4>
        abortcplt = 0U;
 800b34c:	2600      	movs	r6, #0
 800b34e:	e7ca      	b.n	800b2e6 <HAL_SPI_Abort_IT+0xde>
 800b350:	20000008 	.word	0x20000008
 800b354:	057619f1 	.word	0x057619f1
 800b358:	08009b05 	.word	0x08009b05
 800b35c:	08009a75 	.word	0x08009a75
 800b360:	0800b3fd 	.word	0x0800b3fd
 800b364:	0800b369 	.word	0x0800b369

0800b368 <SPI_DMARxAbortCallback>:
{
 800b368:	b530      	push	{r4, r5, lr}
 800b36a:	b085      	sub	sp, #20
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b36c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  __HAL_SPI_DISABLE(hspi);
 800b36e:	6822      	ldr	r2, [r4, #0]
 800b370:	6813      	ldr	r3, [r2, #0]
 800b372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b376:	6013      	str	r3, [r2, #0]
  hspi->hdmarx->XferAbortCallback = NULL;
 800b378:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b37a:	2500      	movs	r5, #0
 800b37c:	639d      	str	r5, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b37e:	6822      	ldr	r2, [r4, #0]
 800b380:	6853      	ldr	r3, [r2, #4]
 800b382:	f023 0301 	bic.w	r3, r3, #1
 800b386:	6053      	str	r3, [r2, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b388:	f7f6 fe86 	bl	8002098 <HAL_GetTick>
 800b38c:	9000      	str	r0, [sp, #0]
 800b38e:	2364      	movs	r3, #100	; 0x64
 800b390:	462a      	mov	r2, r5
 800b392:	2180      	movs	r1, #128	; 0x80
 800b394:	4620      	mov	r0, r4
 800b396:	f7fe fa61 	bl	800985c <SPI_WaitFlagStateUntilTimeout>
 800b39a:	b108      	cbz	r0, 800b3a0 <SPI_DMARxAbortCallback+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b39c:	2340      	movs	r3, #64	; 0x40
 800b39e:	6623      	str	r3, [r4, #96]	; 0x60
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b3a0:	f7f6 fe7a 	bl	8002098 <HAL_GetTick>
 800b3a4:	9000      	str	r0, [sp, #0]
 800b3a6:	2364      	movs	r3, #100	; 0x64
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7fe fa9c 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 800b3b4:	b108      	cbz	r0, 800b3ba <SPI_DMARxAbortCallback+0x52>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b3b6:	2340      	movs	r3, #64	; 0x40
 800b3b8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->hdmatx != NULL)
 800b3ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b3bc:	b10b      	cbz	r3, 800b3c2 <SPI_DMARxAbortCallback+0x5a>
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800b3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c0:	b9d3      	cbnz	r3, 800b3f8 <SPI_DMARxAbortCallback+0x90>
  hspi->RxXferCount = 0U;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b3c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800b3ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b3cc:	2b40      	cmp	r3, #64	; 0x40
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3ce:	bf1c      	itt	ne
 800b3d0:	2300      	movne	r3, #0
 800b3d2:	6623      	strne	r3, [r4, #96]	; 0x60
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	9202      	str	r2, [sp, #8]
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	68d9      	ldr	r1, [r3, #12]
 800b3dc:	9102      	str	r1, [sp, #8]
 800b3de:	6899      	ldr	r1, [r3, #8]
 800b3e0:	9102      	str	r1, [sp, #8]
 800b3e2:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b3e4:	9203      	str	r2, [sp, #12]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	9303      	str	r3, [sp, #12]
 800b3ea:	9b03      	ldr	r3, [sp, #12]
  hspi->State  = HAL_SPI_STATE_READY;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_SPI_AbortCpltCallback(hspi);
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f7ff ff07 	bl	800b206 <HAL_SPI_AbortCpltCallback>
}
 800b3f8:	b005      	add	sp, #20
 800b3fa:	bd30      	pop	{r4, r5, pc}

0800b3fc <SPI_DMATxAbortCallback>:
{
 800b3fc:	b510      	push	{r4, lr}
 800b3fe:	b084      	sub	sp, #16
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b400:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hspi->hdmatx->XferAbortCallback = NULL;
 800b402:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b404:	2200      	movs	r2, #0
 800b406:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	6853      	ldr	r3, [r2, #4]
 800b40c:	f023 0302 	bic.w	r3, r3, #2
 800b410:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b412:	f7f6 fe41 	bl	8002098 <HAL_GetTick>
 800b416:	4602      	mov	r2, r0
 800b418:	2164      	movs	r1, #100	; 0x64
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7fe fab2 	bl	8009984 <SPI_EndRxTxTransaction>
 800b420:	b108      	cbz	r0, 800b426 <SPI_DMATxAbortCallback+0x2a>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b422:	2340      	movs	r3, #64	; 0x40
 800b424:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_SPI_DISABLE(hspi);
 800b426:	6822      	ldr	r2, [r4, #0]
 800b428:	6813      	ldr	r3, [r2, #0]
 800b42a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b42e:	6013      	str	r3, [r2, #0]
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b430:	f7f6 fe32 	bl	8002098 <HAL_GetTick>
 800b434:	9000      	str	r0, [sp, #0]
 800b436:	2364      	movs	r3, #100	; 0x64
 800b438:	2200      	movs	r2, #0
 800b43a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b43e:	4620      	mov	r0, r4
 800b440:	f7fe fa54 	bl	80098ec <SPI_WaitFifoStateUntilTimeout>
 800b444:	b108      	cbz	r0, 800b44a <SPI_DMATxAbortCallback+0x4e>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b446:	2340      	movs	r3, #64	; 0x40
 800b448:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->hdmarx != NULL)
 800b44a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b44c:	b10b      	cbz	r3, 800b452 <SPI_DMATxAbortCallback+0x56>
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800b44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b450:	b9d3      	cbnz	r3, 800b488 <SPI_DMATxAbortCallback+0x8c>
  hspi->RxXferCount = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b458:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800b45a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b45c:	2b40      	cmp	r3, #64	; 0x40
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b45e:	bf1c      	itt	ne
 800b460:	2300      	movne	r3, #0
 800b462:	6623      	strne	r3, [r4, #96]	; 0x60
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b464:	2200      	movs	r2, #0
 800b466:	9202      	str	r2, [sp, #8]
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	68d9      	ldr	r1, [r3, #12]
 800b46c:	9102      	str	r1, [sp, #8]
 800b46e:	6899      	ldr	r1, [r3, #8]
 800b470:	9102      	str	r1, [sp, #8]
 800b472:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b474:	9203      	str	r2, [sp, #12]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	9303      	str	r3, [sp, #12]
 800b47a:	9b03      	ldr	r3, [sp, #12]
  hspi->State  = HAL_SPI_STATE_READY;
 800b47c:	2301      	movs	r3, #1
 800b47e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_SPI_AbortCpltCallback(hspi);
 800b482:	4620      	mov	r0, r4
 800b484:	f7ff febf 	bl	800b206 <HAL_SPI_AbortCpltCallback>
}
 800b488:	b004      	add	sp, #16
 800b48a:	bd10      	pop	{r4, pc}

0800b48c <HAL_SPI_GetState>:
  return hspi->State;
 800b48c:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 800b490:	4770      	bx	lr

0800b492 <HAL_SPI_GetError>:
  return hspi->ErrorCode;
 800b492:	6e00      	ldr	r0, [r0, #96]	; 0x60
}
 800b494:	4770      	bx	lr

0800b496 <HAL_SPIEx_FlushRxFifo>:
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800b496:	6802      	ldr	r2, [r0, #0]
 800b498:	2304      	movs	r3, #4
 800b49a:	6891      	ldr	r1, [r2, #8]
 800b49c:	f411 6fc0 	tst.w	r1, #1536	; 0x600
 800b4a0:	d011      	beq.n	800b4c6 <HAL_SPIEx_FlushRxFifo+0x30>
{
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	e003      	b.n	800b4ae <HAL_SPIEx_FlushRxFifo+0x18>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800b4a6:	6891      	ldr	r1, [r2, #8]
 800b4a8:	f411 6fc0 	tst.w	r1, #1536	; 0x600
 800b4ac:	d009      	beq.n	800b4c2 <HAL_SPIEx_FlushRxFifo+0x2c>
  {
    count++;
    tmpreg = hspi->Instance->DR;
 800b4ae:	68d1      	ldr	r1, [r2, #12]
 800b4b0:	9101      	str	r1, [sp, #4]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800b4b2:	9901      	ldr	r1, [sp, #4]
 800b4b4:	3b01      	subs	r3, #1
    if (count == SPI_FIFO_SIZE)
 800b4b6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800b4ba:	d1f4      	bne.n	800b4a6 <HAL_SPIEx_FlushRxFifo+0x10>
    {
      return HAL_TIMEOUT;
 800b4bc:	2003      	movs	r0, #3
    }
  }
  return HAL_OK;
}
 800b4be:	b002      	add	sp, #8
 800b4c0:	4770      	bx	lr
  return HAL_OK;
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	e7fb      	b.n	800b4be <HAL_SPIEx_FlushRxFifo+0x28>
 800b4c6:	2000      	movs	r0, #0
}
 800b4c8:	4770      	bx	lr
	...

0800b4cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4cc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4ce:	6a03      	ldr	r3, [r0, #32]
 800b4d0:	f023 0301 	bic.w	r3, r3, #1
 800b4d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4d8:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4da:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b4e0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4e4:	680d      	ldr	r5, [r1, #0]
 800b4e6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4e8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4ec:	688d      	ldr	r5, [r1, #8]
 800b4ee:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4f0:	4d20      	ldr	r5, [pc, #128]	; (800b574 <TIM_OC1_SetConfig+0xa8>)
 800b4f2:	42a8      	cmp	r0, r5
 800b4f4:	d02a      	beq.n	800b54c <TIM_OC1_SetConfig+0x80>
 800b4f6:	4f20      	ldr	r7, [pc, #128]	; (800b578 <TIM_OC1_SetConfig+0xac>)
 800b4f8:	42b8      	cmp	r0, r7
 800b4fa:	d019      	beq.n	800b530 <TIM_OC1_SetConfig+0x64>
 800b4fc:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800b500:	42a8      	cmp	r0, r5
 800b502:	d01c      	beq.n	800b53e <TIM_OC1_SetConfig+0x72>
 800b504:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b508:	42a8      	cmp	r0, r5
 800b50a:	d00a      	beq.n	800b522 <TIM_OC1_SetConfig+0x56>
 800b50c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b510:	42a8      	cmp	r0, r5
 800b512:	d127      	bne.n	800b564 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b514:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b518:	68cd      	ldr	r5, [r1, #12]
 800b51a:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b51c:	f023 0304 	bic.w	r3, r3, #4
 800b520:	e01a      	b.n	800b558 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b522:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b526:	68cd      	ldr	r5, [r1, #12]
 800b528:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b52a:	f023 0304 	bic.w	r3, r3, #4
 800b52e:	e013      	b.n	800b558 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b530:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b534:	68cd      	ldr	r5, [r1, #12]
 800b536:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b538:	f023 0304 	bic.w	r3, r3, #4
 800b53c:	e00c      	b.n	800b558 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b53e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b542:	68cd      	ldr	r5, [r1, #12]
 800b544:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b546:	f023 0304 	bic.w	r3, r3, #4
 800b54a:	e005      	b.n	800b558 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b54c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800b550:	68cd      	ldr	r5, [r1, #12]
 800b552:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800b554:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b558:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b55c:	694c      	ldr	r4, [r1, #20]
 800b55e:	698f      	ldr	r7, [r1, #24]
 800b560:	433c      	orrs	r4, r7
 800b562:	4326      	orrs	r6, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b564:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b566:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b568:	684a      	ldr	r2, [r1, #4]
 800b56a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b56c:	6203      	str	r3, [r0, #32]
}
 800b56e:	bcf0      	pop	{r4, r5, r6, r7}
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	40012c00 	.word	0x40012c00
 800b578:	40013400 	.word	0x40013400

0800b57c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b57c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b57e:	6a03      	ldr	r3, [r0, #32]
 800b580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b584:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b586:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b588:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b58a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b58c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b590:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b594:	680d      	ldr	r5, [r1, #0]
 800b596:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b59c:	688d      	ldr	r5, [r1, #8]
 800b59e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5a2:	4d18      	ldr	r5, [pc, #96]	; (800b604 <TIM_OC3_SetConfig+0x88>)
 800b5a4:	42a8      	cmp	r0, r5
 800b5a6:	d017      	beq.n	800b5d8 <TIM_OC3_SetConfig+0x5c>
 800b5a8:	4f17      	ldr	r7, [pc, #92]	; (800b608 <TIM_OC3_SetConfig+0x8c>)
 800b5aa:	42b8      	cmp	r0, r7
 800b5ac:	d00c      	beq.n	800b5c8 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ae:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800b5b2:	42a8      	cmp	r0, r5
 800b5b4:	d017      	beq.n	800b5e6 <TIM_OC3_SetConfig+0x6a>
 800b5b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b5ba:	42a8      	cmp	r0, r5
 800b5bc:	d013      	beq.n	800b5e6 <TIM_OC3_SetConfig+0x6a>
 800b5be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b5c2:	42a8      	cmp	r0, r5
 800b5c4:	d116      	bne.n	800b5f4 <TIM_OC3_SetConfig+0x78>
 800b5c6:	e00e      	b.n	800b5e6 <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5cc:	68cd      	ldr	r5, [r1, #12]
 800b5ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5d6:	e006      	b.n	800b5e6 <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5dc:	68cd      	ldr	r5, [r1, #12]
 800b5de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5e6:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5ea:	694c      	ldr	r4, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5ec:	698f      	ldr	r7, [r1, #24]
 800b5ee:	433c      	orrs	r4, r7
 800b5f0:	ea46 1604 	orr.w	r6, r6, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5f4:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5f6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5f8:	684a      	ldr	r2, [r1, #4]
 800b5fa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fc:	6203      	str	r3, [r0, #32]
}
 800b5fe:	bcf0      	pop	{r4, r5, r6, r7}
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	40012c00 	.word	0x40012c00
 800b608:	40013400 	.word	0x40013400

0800b60c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b60c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b60e:	6a03      	ldr	r3, [r0, #32]
 800b610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b614:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b616:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b618:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b61a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b61c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b620:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b624:	680d      	ldr	r5, [r1, #0]
 800b626:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b62a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b62e:	688d      	ldr	r5, [r1, #8]
 800b630:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b634:	4d0f      	ldr	r5, [pc, #60]	; (800b674 <TIM_OC4_SetConfig+0x68>)
 800b636:	42a8      	cmp	r0, r5
 800b638:	d00f      	beq.n	800b65a <TIM_OC4_SetConfig+0x4e>
 800b63a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b63e:	42a8      	cmp	r0, r5
 800b640:	d00b      	beq.n	800b65a <TIM_OC4_SetConfig+0x4e>
 800b642:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b646:	42a8      	cmp	r0, r5
 800b648:	d007      	beq.n	800b65a <TIM_OC4_SetConfig+0x4e>
 800b64a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b64e:	42a8      	cmp	r0, r5
 800b650:	d003      	beq.n	800b65a <TIM_OC4_SetConfig+0x4e>
 800b652:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b656:	42a8      	cmp	r0, r5
 800b658:	d104      	bne.n	800b664 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b65a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b65e:	694d      	ldr	r5, [r1, #20]
 800b660:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b664:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b666:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b668:	684a      	ldr	r2, [r1, #4]
 800b66a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b66c:	6203      	str	r3, [r0, #32]
}
 800b66e:	bc30      	pop	{r4, r5}
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	40012c00 	.word	0x40012c00

0800b678 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b678:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b67a:	6a03      	ldr	r3, [r0, #32]
 800b67c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b680:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b682:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b684:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b686:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b688:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b68c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b690:	680d      	ldr	r5, [r1, #0]
 800b692:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b694:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b698:	688d      	ldr	r5, [r1, #8]
 800b69a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b69e:	4d0f      	ldr	r5, [pc, #60]	; (800b6dc <TIM_OC5_SetConfig+0x64>)
 800b6a0:	42a8      	cmp	r0, r5
 800b6a2:	d00f      	beq.n	800b6c4 <TIM_OC5_SetConfig+0x4c>
 800b6a4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b6a8:	42a8      	cmp	r0, r5
 800b6aa:	d00b      	beq.n	800b6c4 <TIM_OC5_SetConfig+0x4c>
 800b6ac:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b6b0:	42a8      	cmp	r0, r5
 800b6b2:	d007      	beq.n	800b6c4 <TIM_OC5_SetConfig+0x4c>
 800b6b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b6b8:	42a8      	cmp	r0, r5
 800b6ba:	d003      	beq.n	800b6c4 <TIM_OC5_SetConfig+0x4c>
 800b6bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b6c0:	42a8      	cmp	r0, r5
 800b6c2:	d104      	bne.n	800b6ce <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6c4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6c8:	694d      	ldr	r5, [r1, #20]
 800b6ca:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6d0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b6d2:	684a      	ldr	r2, [r1, #4]
 800b6d4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6d6:	6203      	str	r3, [r0, #32]
}
 800b6d8:	bc30      	pop	{r4, r5}
 800b6da:	4770      	bx	lr
 800b6dc:	40012c00 	.word	0x40012c00

0800b6e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6e0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6e2:	6a03      	ldr	r3, [r0, #32]
 800b6e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6ec:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ee:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6f0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b6f4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6f8:	680d      	ldr	r5, [r1, #0]
 800b6fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b6fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b702:	688d      	ldr	r5, [r1, #8]
 800b704:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b708:	4d0f      	ldr	r5, [pc, #60]	; (800b748 <TIM_OC6_SetConfig+0x68>)
 800b70a:	42a8      	cmp	r0, r5
 800b70c:	d00f      	beq.n	800b72e <TIM_OC6_SetConfig+0x4e>
 800b70e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b712:	42a8      	cmp	r0, r5
 800b714:	d00b      	beq.n	800b72e <TIM_OC6_SetConfig+0x4e>
 800b716:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b71a:	42a8      	cmp	r0, r5
 800b71c:	d007      	beq.n	800b72e <TIM_OC6_SetConfig+0x4e>
 800b71e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b722:	42a8      	cmp	r0, r5
 800b724:	d003      	beq.n	800b72e <TIM_OC6_SetConfig+0x4e>
 800b726:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b72a:	42a8      	cmp	r0, r5
 800b72c:	d104      	bne.n	800b738 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b72e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b732:	694d      	ldr	r5, [r1, #20]
 800b734:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b738:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b73a:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b73c:	684a      	ldr	r2, [r1, #4]
 800b73e:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b740:	6203      	str	r3, [r0, #32]
}
 800b742:	bc30      	pop	{r4, r5}
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	40012c00 	.word	0x40012c00
}
 800b74c:	4770      	bx	lr
}
 800b74e:	4770      	bx	lr

0800b750 <HAL_TIM_Base_DeInit>:
{
 800b750:	b510      	push	{r4, lr}
 800b752:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b754:	2302      	movs	r3, #2
 800b756:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b75a:	6803      	ldr	r3, [r0, #0]
 800b75c:	6a19      	ldr	r1, [r3, #32]
 800b75e:	f241 1211 	movw	r2, #4369	; 0x1111
 800b762:	4211      	tst	r1, r2
 800b764:	d108      	bne.n	800b778 <HAL_TIM_Base_DeInit+0x28>
 800b766:	6a19      	ldr	r1, [r3, #32]
 800b768:	f240 4244 	movw	r2, #1092	; 0x444
 800b76c:	4211      	tst	r1, r2
 800b76e:	d103      	bne.n	800b778 <HAL_TIM_Base_DeInit+0x28>
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	f022 0201 	bic.w	r2, r2, #1
 800b776:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 800b778:	4620      	mov	r0, r4
 800b77a:	f7f6 fa35 	bl	8001be8 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b77e:	2000      	movs	r0, #0
 800b780:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b784:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b788:	bd10      	pop	{r4, pc}
	...

0800b78c <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800b78c:	2302      	movs	r3, #2
 800b78e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b792:	6802      	ldr	r2, [r0, #0]
 800b794:	6891      	ldr	r1, [r2, #8]
 800b796:	4b08      	ldr	r3, [pc, #32]	; (800b7b8 <HAL_TIM_Base_Start+0x2c>)
 800b798:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b79a:	2b06      	cmp	r3, #6
 800b79c:	d006      	beq.n	800b7ac <HAL_TIM_Base_Start+0x20>
 800b79e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7a2:	d003      	beq.n	800b7ac <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 800b7a4:	6813      	ldr	r3, [r2, #0]
 800b7a6:	f043 0301 	orr.w	r3, r3, #1
 800b7aa:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	00010007 	.word	0x00010007

0800b7bc <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 800b7bc:	2302      	movs	r3, #2
 800b7be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b7c2:	6803      	ldr	r3, [r0, #0]
 800b7c4:	6a19      	ldr	r1, [r3, #32]
 800b7c6:	f241 1211 	movw	r2, #4369	; 0x1111
 800b7ca:	4211      	tst	r1, r2
 800b7cc:	d108      	bne.n	800b7e0 <HAL_TIM_Base_Stop+0x24>
 800b7ce:	6a19      	ldr	r1, [r3, #32]
 800b7d0:	f240 4244 	movw	r2, #1092	; 0x444
 800b7d4:	4211      	tst	r1, r2
 800b7d6:	d103      	bne.n	800b7e0 <HAL_TIM_Base_Stop+0x24>
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	f022 0201 	bic.w	r2, r2, #1
 800b7de:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	4770      	bx	lr
	...

0800b7ec <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7ec:	6802      	ldr	r2, [r0, #0]
 800b7ee:	68d3      	ldr	r3, [r2, #12]
 800b7f0:	f043 0301 	orr.w	r3, r3, #1
 800b7f4:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7f6:	6802      	ldr	r2, [r0, #0]
 800b7f8:	6891      	ldr	r1, [r2, #8]
 800b7fa:	4b06      	ldr	r3, [pc, #24]	; (800b814 <HAL_TIM_Base_Start_IT+0x28>)
 800b7fc:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7fe:	2b06      	cmp	r3, #6
 800b800:	d006      	beq.n	800b810 <HAL_TIM_Base_Start_IT+0x24>
 800b802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b806:	d003      	beq.n	800b810 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 800b808:	6813      	ldr	r3, [r2, #0]
 800b80a:	f043 0301 	orr.w	r3, r3, #1
 800b80e:	6013      	str	r3, [r2, #0]
}
 800b810:	2000      	movs	r0, #0
 800b812:	4770      	bx	lr
 800b814:	00010007 	.word	0x00010007

0800b818 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b818:	6802      	ldr	r2, [r0, #0]
 800b81a:	68d3      	ldr	r3, [r2, #12]
 800b81c:	f023 0301 	bic.w	r3, r3, #1
 800b820:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800b822:	6803      	ldr	r3, [r0, #0]
 800b824:	6a19      	ldr	r1, [r3, #32]
 800b826:	f241 1211 	movw	r2, #4369	; 0x1111
 800b82a:	4211      	tst	r1, r2
 800b82c:	d108      	bne.n	800b840 <HAL_TIM_Base_Stop_IT+0x28>
 800b82e:	6a19      	ldr	r1, [r3, #32]
 800b830:	f240 4244 	movw	r2, #1092	; 0x444
 800b834:	4211      	tst	r1, r2
 800b836:	d103      	bne.n	800b840 <HAL_TIM_Base_Stop_IT+0x28>
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	f022 0201 	bic.w	r2, r2, #1
 800b83e:	601a      	str	r2, [r3, #0]
}
 800b840:	2000      	movs	r0, #0
 800b842:	4770      	bx	lr

0800b844 <HAL_TIM_Base_Start_DMA>:
{
 800b844:	b538      	push	{r3, r4, r5, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800b846:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800b84a:	b2ed      	uxtb	r5, r5
 800b84c:	2d02      	cmp	r5, #2
 800b84e:	d031      	beq.n	800b8b4 <HAL_TIM_Base_Start_DMA+0x70>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800b850:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b01      	cmp	r3, #1
 800b858:	d103      	bne.n	800b862 <HAL_TIM_Base_Start_DMA+0x1e>
    if ((pData == NULL) && (Length > 0U))
 800b85a:	b339      	cbz	r1, 800b8ac <HAL_TIM_Base_Start_DMA+0x68>
      htim->State = HAL_TIM_STATE_BUSY;
 800b85c:	2302      	movs	r3, #2
 800b85e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800b862:	4613      	mov	r3, r2
 800b864:	4604      	mov	r4, r0
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800b866:	6a02      	ldr	r2, [r0, #32]
 800b868:	4815      	ldr	r0, [pc, #84]	; (800b8c0 <HAL_TIM_Base_Start_DMA+0x7c>)
 800b86a:	62d0      	str	r0, [r2, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800b86c:	6a22      	ldr	r2, [r4, #32]
 800b86e:	4815      	ldr	r0, [pc, #84]	; (800b8c4 <HAL_TIM_Base_Start_DMA+0x80>)
 800b870:	6310      	str	r0, [r2, #48]	; 0x30
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800b872:	6a22      	ldr	r2, [r4, #32]
 800b874:	4814      	ldr	r0, [pc, #80]	; (800b8c8 <HAL_TIM_Base_Start_DMA+0x84>)
 800b876:	6350      	str	r0, [r2, #52]	; 0x34
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length) != HAL_OK)
 800b878:	6822      	ldr	r2, [r4, #0]
 800b87a:	322c      	adds	r2, #44	; 0x2c
 800b87c:	6a20      	ldr	r0, [r4, #32]
 800b87e:	f7f6 ff7e 	bl	800277e <HAL_DMA_Start_IT>
 800b882:	4603      	mov	r3, r0
 800b884:	b9c0      	cbnz	r0, 800b8b8 <HAL_TIM_Base_Start_DMA+0x74>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800b886:	6821      	ldr	r1, [r4, #0]
 800b888:	68ca      	ldr	r2, [r1, #12]
 800b88a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b88e:	60ca      	str	r2, [r1, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b890:	6821      	ldr	r1, [r4, #0]
 800b892:	6888      	ldr	r0, [r1, #8]
 800b894:	4a0d      	ldr	r2, [pc, #52]	; (800b8cc <HAL_TIM_Base_Start_DMA+0x88>)
 800b896:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b898:	2a06      	cmp	r2, #6
 800b89a:	d00e      	beq.n	800b8ba <HAL_TIM_Base_Start_DMA+0x76>
 800b89c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b8a0:	d00b      	beq.n	800b8ba <HAL_TIM_Base_Start_DMA+0x76>
    __HAL_TIM_ENABLE(htim);
 800b8a2:	680a      	ldr	r2, [r1, #0]
 800b8a4:	f042 0201 	orr.w	r2, r2, #1
 800b8a8:	600a      	str	r2, [r1, #0]
 800b8aa:	e006      	b.n	800b8ba <HAL_TIM_Base_Start_DMA+0x76>
    if ((pData == NULL) && (Length > 0U))
 800b8ac:	2a00      	cmp	r2, #0
 800b8ae:	d0d5      	beq.n	800b85c <HAL_TIM_Base_Start_DMA+0x18>
      return HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e002      	b.n	800b8ba <HAL_TIM_Base_Start_DMA+0x76>
    return HAL_BUSY;
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	e000      	b.n	800b8ba <HAL_TIM_Base_Start_DMA+0x76>
    return HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	bd38      	pop	{r3, r4, r5, pc}
 800b8be:	bf00      	nop
 800b8c0:	0800bf47 	.word	0x0800bf47
 800b8c4:	0800bf59 	.word	0x0800bf59
 800b8c8:	0800c243 	.word	0x0800c243
 800b8cc:	00010007 	.word	0x00010007

0800b8d0 <HAL_TIM_Base_Stop_DMA>:
{
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 800b8d4:	6802      	ldr	r2, [r0, #0]
 800b8d6:	68d3      	ldr	r3, [r2, #12]
 800b8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8dc:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800b8de:	6a00      	ldr	r0, [r0, #32]
 800b8e0:	f7f6 ffbf 	bl	8002862 <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800b8e4:	6823      	ldr	r3, [r4, #0]
 800b8e6:	6a19      	ldr	r1, [r3, #32]
 800b8e8:	f241 1211 	movw	r2, #4369	; 0x1111
 800b8ec:	4211      	tst	r1, r2
 800b8ee:	d108      	bne.n	800b902 <HAL_TIM_Base_Stop_DMA+0x32>
 800b8f0:	6a19      	ldr	r1, [r3, #32]
 800b8f2:	f240 4244 	movw	r2, #1092	; 0x444
 800b8f6:	4211      	tst	r1, r2
 800b8f8:	d103      	bne.n	800b902 <HAL_TIM_Base_Stop_DMA+0x32>
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	f022 0201 	bic.w	r2, r2, #1
 800b900:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b902:	2301      	movs	r3, #1
 800b904:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800b908:	2000      	movs	r0, #0
 800b90a:	bd10      	pop	{r4, pc}

0800b90c <HAL_TIM_OC_MspInit>:
}
 800b90c:	4770      	bx	lr

0800b90e <HAL_TIM_OC_MspDeInit>:
}
 800b90e:	4770      	bx	lr

0800b910 <HAL_TIM_OC_DeInit>:
{
 800b910:	b510      	push	{r4, lr}
 800b912:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b914:	2302      	movs	r3, #2
 800b916:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b91a:	6803      	ldr	r3, [r0, #0]
 800b91c:	6a19      	ldr	r1, [r3, #32]
 800b91e:	f241 1211 	movw	r2, #4369	; 0x1111
 800b922:	4211      	tst	r1, r2
 800b924:	d108      	bne.n	800b938 <HAL_TIM_OC_DeInit+0x28>
 800b926:	6a19      	ldr	r1, [r3, #32]
 800b928:	f240 4244 	movw	r2, #1092	; 0x444
 800b92c:	4211      	tst	r1, r2
 800b92e:	d103      	bne.n	800b938 <HAL_TIM_OC_DeInit+0x28>
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	f022 0201 	bic.w	r2, r2, #1
 800b936:	601a      	str	r2, [r3, #0]
  HAL_TIM_OC_MspDeInit(htim);
 800b938:	4620      	mov	r0, r4
 800b93a:	f7ff ffe8 	bl	800b90e <HAL_TIM_OC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b93e:	2000      	movs	r0, #0
 800b940:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b944:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b948:	bd10      	pop	{r4, pc}

0800b94a <HAL_TIM_PWM_MspInit>:
}
 800b94a:	4770      	bx	lr

0800b94c <HAL_TIM_PWM_MspDeInit>:
}
 800b94c:	4770      	bx	lr

0800b94e <HAL_TIM_PWM_DeInit>:
{
 800b94e:	b510      	push	{r4, lr}
 800b950:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b952:	2302      	movs	r3, #2
 800b954:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b958:	6803      	ldr	r3, [r0, #0]
 800b95a:	6a19      	ldr	r1, [r3, #32]
 800b95c:	f241 1211 	movw	r2, #4369	; 0x1111
 800b960:	4211      	tst	r1, r2
 800b962:	d108      	bne.n	800b976 <HAL_TIM_PWM_DeInit+0x28>
 800b964:	6a19      	ldr	r1, [r3, #32]
 800b966:	f240 4244 	movw	r2, #1092	; 0x444
 800b96a:	4211      	tst	r1, r2
 800b96c:	d103      	bne.n	800b976 <HAL_TIM_PWM_DeInit+0x28>
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	f022 0201 	bic.w	r2, r2, #1
 800b974:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 800b976:	4620      	mov	r0, r4
 800b978:	f7ff ffe8 	bl	800b94c <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b97c:	2000      	movs	r0, #0
 800b97e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b982:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b986:	bd10      	pop	{r4, pc}

0800b988 <HAL_TIM_IC_MspInit>:
}
 800b988:	4770      	bx	lr

0800b98a <HAL_TIM_IC_MspDeInit>:
}
 800b98a:	4770      	bx	lr

0800b98c <HAL_TIM_IC_DeInit>:
{
 800b98c:	b510      	push	{r4, lr}
 800b98e:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b990:	2302      	movs	r3, #2
 800b992:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b996:	6803      	ldr	r3, [r0, #0]
 800b998:	6a19      	ldr	r1, [r3, #32]
 800b99a:	f241 1211 	movw	r2, #4369	; 0x1111
 800b99e:	4211      	tst	r1, r2
 800b9a0:	d108      	bne.n	800b9b4 <HAL_TIM_IC_DeInit+0x28>
 800b9a2:	6a19      	ldr	r1, [r3, #32]
 800b9a4:	f240 4244 	movw	r2, #1092	; 0x444
 800b9a8:	4211      	tst	r1, r2
 800b9aa:	d103      	bne.n	800b9b4 <HAL_TIM_IC_DeInit+0x28>
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	f022 0201 	bic.w	r2, r2, #1
 800b9b2:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_MspDeInit(htim);
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7ff ffe8 	bl	800b98a <HAL_TIM_IC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b9c0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b9c4:	bd10      	pop	{r4, pc}

0800b9c6 <HAL_TIM_OnePulse_MspInit>:
}
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_TIM_OnePulse_MspDeInit>:
}
 800b9c8:	4770      	bx	lr

0800b9ca <HAL_TIM_OnePulse_DeInit>:
{
 800b9ca:	b510      	push	{r4, lr}
 800b9cc:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b9d4:	6803      	ldr	r3, [r0, #0]
 800b9d6:	6a19      	ldr	r1, [r3, #32]
 800b9d8:	f241 1211 	movw	r2, #4369	; 0x1111
 800b9dc:	4211      	tst	r1, r2
 800b9de:	d108      	bne.n	800b9f2 <HAL_TIM_OnePulse_DeInit+0x28>
 800b9e0:	6a19      	ldr	r1, [r3, #32]
 800b9e2:	f240 4244 	movw	r2, #1092	; 0x444
 800b9e6:	4211      	tst	r1, r2
 800b9e8:	d103      	bne.n	800b9f2 <HAL_TIM_OnePulse_DeInit+0x28>
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	f022 0201 	bic.w	r2, r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]
  HAL_TIM_OnePulse_MspDeInit(htim);
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f7ff ffe8 	bl	800b9c8 <HAL_TIM_OnePulse_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b9fe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ba02:	bd10      	pop	{r4, pc}

0800ba04 <HAL_TIM_Encoder_MspInit>:
}
 800ba04:	4770      	bx	lr

0800ba06 <HAL_TIM_Encoder_MspDeInit>:
}
 800ba06:	4770      	bx	lr

0800ba08 <HAL_TIM_Encoder_DeInit>:
{
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800ba12:	6803      	ldr	r3, [r0, #0]
 800ba14:	6a19      	ldr	r1, [r3, #32]
 800ba16:	f241 1211 	movw	r2, #4369	; 0x1111
 800ba1a:	4211      	tst	r1, r2
 800ba1c:	d108      	bne.n	800ba30 <HAL_TIM_Encoder_DeInit+0x28>
 800ba1e:	6a19      	ldr	r1, [r3, #32]
 800ba20:	f240 4244 	movw	r2, #1092	; 0x444
 800ba24:	4211      	tst	r1, r2
 800ba26:	d103      	bne.n	800ba30 <HAL_TIM_Encoder_DeInit+0x28>
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	f022 0201 	bic.w	r2, r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_MspDeInit(htim);
 800ba30:	4620      	mov	r0, r4
 800ba32:	f7ff ffe8 	bl	800ba06 <HAL_TIM_Encoder_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800ba36:	2000      	movs	r0, #0
 800ba38:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ba3c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ba40:	bd10      	pop	{r4, pc}
	...

0800ba44 <HAL_TIM_DMABurst_WriteStart>:
{
 800ba44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba48:	9e06      	ldr	r6, [sp, #24]
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800ba4a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800ba4e:	b2e4      	uxtb	r4, r4
 800ba50:	2c02      	cmp	r4, #2
 800ba52:	f000 80cd 	beq.w	800bbf0 <HAL_TIM_DMABurst_WriteStart+0x1ac>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800ba56:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800ba5a:	b2e4      	uxtb	r4, r4
 800ba5c:	2c01      	cmp	r4, #1
 800ba5e:	d01e      	beq.n	800ba9e <HAL_TIM_DMABurst_WriteStart+0x5a>
 800ba60:	461f      	mov	r7, r3
 800ba62:	4615      	mov	r5, r2
 800ba64:	4688      	mov	r8, r1
 800ba66:	4604      	mov	r4, r0
  switch (BurstRequestSrc)
 800ba68:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800ba6c:	d07e      	beq.n	800bb6c <HAL_TIM_DMABurst_WriteStart+0x128>
 800ba6e:	d81f      	bhi.n	800bab0 <HAL_TIM_DMABurst_WriteStart+0x6c>
 800ba70:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800ba74:	d050      	beq.n	800bb18 <HAL_TIM_DMABurst_WriteStart+0xd4>
 800ba76:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ba7a:	d062      	beq.n	800bb42 <HAL_TIM_DMABurst_WriteStart+0xfe>
 800ba7c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ba80:	d035      	beq.n	800baee <HAL_TIM_DMABurst_WriteStart+0xaa>
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	ea46 0608 	orr.w	r6, r6, r8
 800ba88:	649e      	str	r6, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	68da      	ldr	r2, [r3, #12]
 800ba8e:	4315      	orrs	r5, r2
 800ba90:	60dd      	str	r5, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ba92:	2301      	movs	r3, #1
 800ba94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800ba98:	2000      	movs	r0, #0
}
 800ba9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800ba9e:	b11b      	cbz	r3, 800baa8 <HAL_TIM_DMABurst_WriteStart+0x64>
      htim->State = HAL_TIM_STATE_BUSY;
 800baa0:	2402      	movs	r4, #2
 800baa2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800baa6:	e7db      	b.n	800ba60 <HAL_TIM_DMABurst_WriteStart+0x1c>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800baa8:	2e00      	cmp	r6, #0
 800baaa:	d0f9      	beq.n	800baa0 <HAL_TIM_DMABurst_WriteStart+0x5c>
      return HAL_ERROR;
 800baac:	2001      	movs	r0, #1
 800baae:	e7f4      	b.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x56>
  switch (BurstRequestSrc)
 800bab0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bab4:	d070      	beq.n	800bb98 <HAL_TIM_DMABurst_WriteStart+0x154>
 800bab6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800baba:	f000 8083 	beq.w	800bbc4 <HAL_TIM_DMABurst_WriteStart+0x180>
 800babe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bac2:	d1de      	bne.n	800ba82 <HAL_TIM_DMABurst_WriteStart+0x3e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bac4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bac6:	4a4b      	ldr	r2, [pc, #300]	; (800bbf4 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800bac8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800baca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bacc:	4a4a      	ldr	r2, [pc, #296]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800bace:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bad0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bad2:	4a4a      	ldr	r2, [pc, #296]	; (800bbfc <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bad4:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bad6:	0a33      	lsrs	r3, r6, #8
 800bad8:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 800bada:	3301      	adds	r3, #1
 800badc:	324c      	adds	r2, #76	; 0x4c
 800bade:	4639      	mov	r1, r7
 800bae0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bae2:	f7f6 fe4c 	bl	800277e <HAL_DMA_Start_IT>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d0cb      	beq.n	800ba82 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800baea:	2001      	movs	r0, #1
 800baec:	e7d5      	b.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800baee:	6a03      	ldr	r3, [r0, #32]
 800baf0:	4a43      	ldr	r2, [pc, #268]	; (800bc00 <HAL_TIM_DMABurst_WriteStart+0x1bc>)
 800baf2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800baf4:	6a03      	ldr	r3, [r0, #32]
 800baf6:	4a43      	ldr	r2, [pc, #268]	; (800bc04 <HAL_TIM_DMABurst_WriteStart+0x1c0>)
 800baf8:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800bafa:	6a03      	ldr	r3, [r0, #32]
 800bafc:	4a3f      	ldr	r2, [pc, #252]	; (800bbfc <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bafe:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bb00:	0a33      	lsrs	r3, r6, #8
 800bb02:	6802      	ldr	r2, [r0, #0]
 800bb04:	3301      	adds	r3, #1
 800bb06:	324c      	adds	r2, #76	; 0x4c
 800bb08:	4639      	mov	r1, r7
 800bb0a:	6a00      	ldr	r0, [r0, #32]
 800bb0c:	f7f6 fe37 	bl	800277e <HAL_DMA_Start_IT>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d0b6      	beq.n	800ba82 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bb14:	2001      	movs	r0, #1
 800bb16:	e7c0      	b.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bb18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb1a:	4a36      	ldr	r2, [pc, #216]	; (800bbf4 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800bb1c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bb1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb20:	4a35      	ldr	r2, [pc, #212]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800bb22:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bb24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb26:	4a35      	ldr	r2, [pc, #212]	; (800bbfc <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bb28:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bb2a:	0a33      	lsrs	r3, r6, #8
 800bb2c:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800bb2e:	3301      	adds	r3, #1
 800bb30:	324c      	adds	r2, #76	; 0x4c
 800bb32:	4639      	mov	r1, r7
 800bb34:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bb36:	f7f6 fe22 	bl	800277e <HAL_DMA_Start_IT>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d0a1      	beq.n	800ba82 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bb3e:	2001      	movs	r0, #1
 800bb40:	e7ab      	b.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bb42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb44:	4a2b      	ldr	r2, [pc, #172]	; (800bbf4 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800bb46:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bb48:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb4a:	4a2b      	ldr	r2, [pc, #172]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800bb4c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bb4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb50:	4a2a      	ldr	r2, [pc, #168]	; (800bbfc <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bb52:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bb54:	0a33      	lsrs	r3, r6, #8
 800bb56:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 800bb58:	3301      	adds	r3, #1
 800bb5a:	324c      	adds	r2, #76	; 0x4c
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bb60:	f7f6 fe0d 	bl	800277e <HAL_DMA_Start_IT>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d08c      	beq.n	800ba82 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bb68:	2001      	movs	r0, #1
 800bb6a:	e796      	b.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bb6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bb6e:	4a21      	ldr	r2, [pc, #132]	; (800bbf4 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800bb70:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bb72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bb74:	4a20      	ldr	r2, [pc, #128]	; (800bbf8 <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800bb76:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bb78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bb7a:	4a20      	ldr	r2, [pc, #128]	; (800bbfc <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bb7c:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bb7e:	0a33      	lsrs	r3, r6, #8
 800bb80:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 800bb82:	3301      	adds	r3, #1
 800bb84:	324c      	adds	r2, #76	; 0x4c
 800bb86:	4639      	mov	r1, r7
 800bb88:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bb8a:	f7f6 fdf8 	bl	800277e <HAL_DMA_Start_IT>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f af77 	beq.w	800ba82 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bb94:	2001      	movs	r0, #1
 800bb96:	e780      	b.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800bb98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bb9a:	4a1b      	ldr	r2, [pc, #108]	; (800bc08 <HAL_TIM_DMABurst_WriteStart+0x1c4>)
 800bb9c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800bb9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bba0:	4a1a      	ldr	r2, [pc, #104]	; (800bc0c <HAL_TIM_DMABurst_WriteStart+0x1c8>)
 800bba2:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800bba4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bba6:	4a15      	ldr	r2, [pc, #84]	; (800bbfc <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bba8:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bbaa:	0a33      	lsrs	r3, r6, #8
 800bbac:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800bbae:	3301      	adds	r3, #1
 800bbb0:	324c      	adds	r2, #76	; 0x4c
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bbb6:	f7f6 fde2 	bl	800277e <HAL_DMA_Start_IT>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	f43f af61 	beq.w	800ba82 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bbc0:	2001      	movs	r0, #1
 800bbc2:	e76a      	b.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800bbc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bbc6:	4a12      	ldr	r2, [pc, #72]	; (800bc10 <HAL_TIM_DMABurst_WriteStart+0x1cc>)
 800bbc8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800bbca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bbcc:	4a11      	ldr	r2, [pc, #68]	; (800bc14 <HAL_TIM_DMABurst_WriteStart+0x1d0>)
 800bbce:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800bbd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bbd2:	4a0a      	ldr	r2, [pc, #40]	; (800bbfc <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800bbd4:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bbd6:	0a33      	lsrs	r3, r6, #8
 800bbd8:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 800bbda:	3301      	adds	r3, #1
 800bbdc:	324c      	adds	r2, #76	; 0x4c
 800bbde:	4639      	mov	r1, r7
 800bbe0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bbe2:	f7f6 fdcc 	bl	800277e <HAL_DMA_Start_IT>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f43f af4b 	beq.w	800ba82 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800bbec:	2001      	movs	r0, #1
 800bbee:	e754      	b.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x56>
    return HAL_BUSY;
 800bbf0:	2002      	movs	r0, #2
 800bbf2:	e752      	b.n	800ba9a <HAL_TIM_DMABurst_WriteStart+0x56>
 800bbf4:	0800bff9 	.word	0x0800bff9
 800bbf8:	0800c03f 	.word	0x0800c03f
 800bbfc:	0800c243 	.word	0x0800c243
 800bc00:	0800bf47 	.word	0x0800bf47
 800bc04:	0800bf59 	.word	0x0800bf59
 800bc08:	0800ee81 	.word	0x0800ee81
 800bc0c:	0800ee93 	.word	0x0800ee93
 800bc10:	0800c21f 	.word	0x0800c21f
 800bc14:	0800c231 	.word	0x0800c231

0800bc18 <HAL_TIM_DMABurst_WriteStop>:
{
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800bc1e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800bc22:	d029      	beq.n	800bc78 <HAL_TIM_DMABurst_WriteStop+0x60>
 800bc24:	d813      	bhi.n	800bc4e <HAL_TIM_DMABurst_WriteStop+0x36>
 800bc26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bc2a:	d01d      	beq.n	800bc68 <HAL_TIM_DMABurst_WriteStop+0x50>
 800bc2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bc30:	d01e      	beq.n	800bc70 <HAL_TIM_DMABurst_WriteStop+0x58>
 800bc32:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bc36:	d103      	bne.n	800bc40 <HAL_TIM_DMABurst_WriteStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800bc38:	6a00      	ldr	r0, [r0, #32]
 800bc3a:	f7f6 fe12 	bl	8002862 <HAL_DMA_Abort_IT>
  if (HAL_OK == status)
 800bc3e:	b928      	cbnz	r0, 800bc4c <HAL_TIM_DMABurst_WriteStop+0x34>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800bc40:	682a      	ldr	r2, [r5, #0]
 800bc42:	68d3      	ldr	r3, [r2, #12]
 800bc44:	ea23 0404 	bic.w	r4, r3, r4
 800bc48:	60d4      	str	r4, [r2, #12]
 800bc4a:	2000      	movs	r0, #0
}
 800bc4c:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 800bc4e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bc52:	d015      	beq.n	800bc80 <HAL_TIM_DMABurst_WriteStop+0x68>
 800bc54:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bc58:	d016      	beq.n	800bc88 <HAL_TIM_DMABurst_WriteStop+0x70>
 800bc5a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bc5e:	d1ef      	bne.n	800bc40 <HAL_TIM_DMABurst_WriteStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800bc60:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bc62:	f7f6 fdfe 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800bc66:	e7ea      	b.n	800bc3e <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800bc68:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bc6a:	f7f6 fdfa 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800bc6e:	e7e6      	b.n	800bc3e <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800bc70:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bc72:	f7f6 fdf6 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800bc76:	e7e2      	b.n	800bc3e <HAL_TIM_DMABurst_WriteStop+0x26>
      status =  HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800bc78:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bc7a:	f7f6 fdf2 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800bc7e:	e7de      	b.n	800bc3e <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800bc80:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bc82:	f7f6 fdee 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800bc86:	e7da      	b.n	800bc3e <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800bc88:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bc8a:	f7f6 fdea 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800bc8e:	e7d6      	b.n	800bc3e <HAL_TIM_DMABurst_WriteStop+0x26>

0800bc90 <HAL_TIM_DMABurst_ReadStart>:
{
 800bc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc94:	9e06      	ldr	r6, [sp, #24]
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800bc96:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800bc9a:	b2e4      	uxtb	r4, r4
 800bc9c:	2c02      	cmp	r4, #2
 800bc9e:	f000 80cd 	beq.w	800be3c <HAL_TIM_DMABurst_ReadStart+0x1ac>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800bca2:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800bca6:	b2e4      	uxtb	r4, r4
 800bca8:	2c01      	cmp	r4, #1
 800bcaa:	d01e      	beq.n	800bcea <HAL_TIM_DMABurst_ReadStart+0x5a>
 800bcac:	461f      	mov	r7, r3
 800bcae:	4615      	mov	r5, r2
 800bcb0:	4688      	mov	r8, r1
 800bcb2:	4604      	mov	r4, r0
  switch (BurstRequestSrc)
 800bcb4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800bcb8:	d07e      	beq.n	800bdb8 <HAL_TIM_DMABurst_ReadStart+0x128>
 800bcba:	d81f      	bhi.n	800bcfc <HAL_TIM_DMABurst_ReadStart+0x6c>
 800bcbc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bcc0:	d050      	beq.n	800bd64 <HAL_TIM_DMABurst_ReadStart+0xd4>
 800bcc2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800bcc6:	d062      	beq.n	800bd8e <HAL_TIM_DMABurst_ReadStart+0xfe>
 800bcc8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800bccc:	d035      	beq.n	800bd3a <HAL_TIM_DMABurst_ReadStart+0xaa>
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	ea46 0608 	orr.w	r6, r6, r8
 800bcd4:	649e      	str	r6, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	68da      	ldr	r2, [r3, #12]
 800bcda:	4315      	orrs	r5, r2
 800bcdc:	60dd      	str	r5, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800bcde:	2301      	movs	r3, #1
 800bce0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800bce4:	2000      	movs	r0, #0
}
 800bce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800bcea:	b11b      	cbz	r3, 800bcf4 <HAL_TIM_DMABurst_ReadStart+0x64>
      htim->State = HAL_TIM_STATE_BUSY;
 800bcec:	2402      	movs	r4, #2
 800bcee:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800bcf2:	e7db      	b.n	800bcac <HAL_TIM_DMABurst_ReadStart+0x1c>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800bcf4:	2e00      	cmp	r6, #0
 800bcf6:	d0f9      	beq.n	800bcec <HAL_TIM_DMABurst_ReadStart+0x5c>
      return HAL_ERROR;
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	e7f4      	b.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x56>
  switch (BurstRequestSrc)
 800bcfc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bd00:	d070      	beq.n	800bde4 <HAL_TIM_DMABurst_ReadStart+0x154>
 800bd02:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800bd06:	f000 8083 	beq.w	800be10 <HAL_TIM_DMABurst_ReadStart+0x180>
 800bd0a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bd0e:	d1de      	bne.n	800bcce <HAL_TIM_DMABurst_ReadStart+0x3e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800bd10:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bd12:	4a4b      	ldr	r2, [pc, #300]	; (800be40 <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800bd14:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bd16:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bd18:	4a4a      	ldr	r2, [pc, #296]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800bd1a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bd1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bd1e:	4a4a      	ldr	r2, [pc, #296]	; (800be48 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bd20:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bd22:	0a33      	lsrs	r3, r6, #8
 800bd24:	6801      	ldr	r1, [r0, #0]
 800bd26:	3301      	adds	r3, #1
 800bd28:	463a      	mov	r2, r7
 800bd2a:	314c      	adds	r1, #76	; 0x4c
 800bd2c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bd2e:	f7f6 fd26 	bl	800277e <HAL_DMA_Start_IT>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d0cb      	beq.n	800bcce <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bd36:	2001      	movs	r0, #1
 800bd38:	e7d5      	b.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800bd3a:	6a03      	ldr	r3, [r0, #32]
 800bd3c:	4a43      	ldr	r2, [pc, #268]	; (800be4c <HAL_TIM_DMABurst_ReadStart+0x1bc>)
 800bd3e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800bd40:	6a03      	ldr	r3, [r0, #32]
 800bd42:	4a43      	ldr	r2, [pc, #268]	; (800be50 <HAL_TIM_DMABurst_ReadStart+0x1c0>)
 800bd44:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800bd46:	6a03      	ldr	r3, [r0, #32]
 800bd48:	4a3f      	ldr	r2, [pc, #252]	; (800be48 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bd4a:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bd4c:	0a33      	lsrs	r3, r6, #8
 800bd4e:	6801      	ldr	r1, [r0, #0]
 800bd50:	3301      	adds	r3, #1
 800bd52:	463a      	mov	r2, r7
 800bd54:	314c      	adds	r1, #76	; 0x4c
 800bd56:	6a00      	ldr	r0, [r0, #32]
 800bd58:	f7f6 fd11 	bl	800277e <HAL_DMA_Start_IT>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d0b6      	beq.n	800bcce <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bd60:	2001      	movs	r0, #1
 800bd62:	e7c0      	b.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800bd64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd66:	4a36      	ldr	r2, [pc, #216]	; (800be40 <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800bd68:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bd6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd6c:	4a35      	ldr	r2, [pc, #212]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800bd6e:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bd70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd72:	4a35      	ldr	r2, [pc, #212]	; (800be48 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bd74:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bd76:	0a33      	lsrs	r3, r6, #8
 800bd78:	6801      	ldr	r1, [r0, #0]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	463a      	mov	r2, r7
 800bd7e:	314c      	adds	r1, #76	; 0x4c
 800bd80:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bd82:	f7f6 fcfc 	bl	800277e <HAL_DMA_Start_IT>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d0a1      	beq.n	800bcce <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bd8a:	2001      	movs	r0, #1
 800bd8c:	e7ab      	b.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800bd8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd90:	4a2b      	ldr	r2, [pc, #172]	; (800be40 <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800bd92:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bd94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd96:	4a2b      	ldr	r2, [pc, #172]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800bd98:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bd9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd9c:	4a2a      	ldr	r2, [pc, #168]	; (800be48 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bd9e:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bda0:	0a33      	lsrs	r3, r6, #8
 800bda2:	6801      	ldr	r1, [r0, #0]
 800bda4:	3301      	adds	r3, #1
 800bda6:	463a      	mov	r2, r7
 800bda8:	314c      	adds	r1, #76	; 0x4c
 800bdaa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bdac:	f7f6 fce7 	bl	800277e <HAL_DMA_Start_IT>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d08c      	beq.n	800bcce <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	e796      	b.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800bdb8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bdba:	4a21      	ldr	r2, [pc, #132]	; (800be40 <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800bdbc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bdbe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bdc0:	4a20      	ldr	r2, [pc, #128]	; (800be44 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800bdc2:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bdc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bdc6:	4a20      	ldr	r2, [pc, #128]	; (800be48 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bdc8:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bdca:	0a33      	lsrs	r3, r6, #8
 800bdcc:	6801      	ldr	r1, [r0, #0]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	463a      	mov	r2, r7
 800bdd2:	314c      	adds	r1, #76	; 0x4c
 800bdd4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bdd6:	f7f6 fcd2 	bl	800277e <HAL_DMA_Start_IT>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	f43f af77 	beq.w	800bcce <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800bde0:	2001      	movs	r0, #1
 800bde2:	e780      	b.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800bde4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bde6:	4a1b      	ldr	r2, [pc, #108]	; (800be54 <HAL_TIM_DMABurst_ReadStart+0x1c4>)
 800bde8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800bdea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bdec:	4a1a      	ldr	r2, [pc, #104]	; (800be58 <HAL_TIM_DMABurst_ReadStart+0x1c8>)
 800bdee:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800bdf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bdf2:	4a15      	ldr	r2, [pc, #84]	; (800be48 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800bdf4:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800bdf6:	0a33      	lsrs	r3, r6, #8
 800bdf8:	6801      	ldr	r1, [r0, #0]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	463a      	mov	r2, r7
 800bdfe:	314c      	adds	r1, #76	; 0x4c
 800be00:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800be02:	f7f6 fcbc 	bl	800277e <HAL_DMA_Start_IT>
 800be06:	2800      	cmp	r0, #0
 800be08:	f43f af61 	beq.w	800bcce <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800be0c:	2001      	movs	r0, #1
 800be0e:	e76a      	b.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800be10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800be12:	4a12      	ldr	r2, [pc, #72]	; (800be5c <HAL_TIM_DMABurst_ReadStart+0x1cc>)
 800be14:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800be16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800be18:	4a11      	ldr	r2, [pc, #68]	; (800be60 <HAL_TIM_DMABurst_ReadStart+0x1d0>)
 800be1a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800be1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800be1e:	4a0a      	ldr	r2, [pc, #40]	; (800be48 <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800be20:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800be22:	0a33      	lsrs	r3, r6, #8
 800be24:	6801      	ldr	r1, [r0, #0]
 800be26:	3301      	adds	r3, #1
 800be28:	463a      	mov	r2, r7
 800be2a:	314c      	adds	r1, #76	; 0x4c
 800be2c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800be2e:	f7f6 fca6 	bl	800277e <HAL_DMA_Start_IT>
 800be32:	2800      	cmp	r0, #0
 800be34:	f43f af4b 	beq.w	800bcce <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800be38:	2001      	movs	r0, #1
 800be3a:	e754      	b.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x56>
    return HAL_BUSY;
 800be3c:	2002      	movs	r0, #2
 800be3e:	e752      	b.n	800bce6 <HAL_TIM_DMABurst_ReadStart+0x56>
 800be40:	0800bf6d 	.word	0x0800bf6d
 800be44:	0800bfb3 	.word	0x0800bfb3
 800be48:	0800c243 	.word	0x0800c243
 800be4c:	0800bf47 	.word	0x0800bf47
 800be50:	0800bf59 	.word	0x0800bf59
 800be54:	0800ee81 	.word	0x0800ee81
 800be58:	0800ee93 	.word	0x0800ee93
 800be5c:	0800c21f 	.word	0x0800c21f
 800be60:	0800c231 	.word	0x0800c231

0800be64 <HAL_TIM_DMABurst_ReadStop>:
{
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4605      	mov	r5, r0
 800be68:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800be6a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800be6e:	d029      	beq.n	800bec4 <HAL_TIM_DMABurst_ReadStop+0x60>
 800be70:	d813      	bhi.n	800be9a <HAL_TIM_DMABurst_ReadStop+0x36>
 800be72:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800be76:	d01d      	beq.n	800beb4 <HAL_TIM_DMABurst_ReadStop+0x50>
 800be78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800be7c:	d01e      	beq.n	800bebc <HAL_TIM_DMABurst_ReadStop+0x58>
 800be7e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800be82:	d103      	bne.n	800be8c <HAL_TIM_DMABurst_ReadStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800be84:	6a00      	ldr	r0, [r0, #32]
 800be86:	f7f6 fcec 	bl	8002862 <HAL_DMA_Abort_IT>
  if (HAL_OK == status)
 800be8a:	b928      	cbnz	r0, 800be98 <HAL_TIM_DMABurst_ReadStop+0x34>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800be8c:	682a      	ldr	r2, [r5, #0]
 800be8e:	68d3      	ldr	r3, [r2, #12]
 800be90:	ea23 0404 	bic.w	r4, r3, r4
 800be94:	60d4      	str	r4, [r2, #12]
 800be96:	2000      	movs	r0, #0
}
 800be98:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 800be9a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800be9e:	d015      	beq.n	800becc <HAL_TIM_DMABurst_ReadStop+0x68>
 800bea0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bea4:	d016      	beq.n	800bed4 <HAL_TIM_DMABurst_ReadStop+0x70>
 800bea6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800beaa:	d1ef      	bne.n	800be8c <HAL_TIM_DMABurst_ReadStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800beac:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800beae:	f7f6 fcd8 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800beb2:	e7ea      	b.n	800be8a <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800beb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800beb6:	f7f6 fcd4 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800beba:	e7e6      	b.n	800be8a <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800bebc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bebe:	f7f6 fcd0 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800bec2:	e7e2      	b.n	800be8a <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800bec4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bec6:	f7f6 fccc 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800beca:	e7de      	b.n	800be8a <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800becc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bece:	f7f6 fcc8 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800bed2:	e7da      	b.n	800be8a <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800bed4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bed6:	f7f6 fcc4 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800beda:	e7d6      	b.n	800be8a <HAL_TIM_DMABurst_ReadStop+0x26>

0800bedc <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 800bedc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d00c      	beq.n	800befe <HAL_TIM_GenerateEvent+0x22>
  htim->State = HAL_TIM_STATE_BUSY;
 800bee4:	2302      	movs	r3, #2
 800bee6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 800beea:	6803      	ldr	r3, [r0, #0]
 800beec:	6159      	str	r1, [r3, #20]
  htim->State = HAL_TIM_STATE_READY;
 800beee:	2301      	movs	r3, #1
 800bef0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bef4:	2300      	movs	r3, #0
 800bef6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800befa:	4618      	mov	r0, r3
 800befc:	4770      	bx	lr
  __HAL_LOCK(htim);
 800befe:	2002      	movs	r0, #2
}
 800bf00:	4770      	bx	lr

0800bf02 <HAL_TIM_ConfigTI1Input>:
  tmpcr2 = htim->Instance->CR2;
 800bf02:	6802      	ldr	r2, [r0, #0]
 800bf04:	6853      	ldr	r3, [r2, #4]
  tmpcr2 &= ~TIM_CR2_TI1S;
 800bf06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr2 |= TI1_Selection;
 800bf0a:	4319      	orrs	r1, r3
  htim->Instance->CR2 = tmpcr2;
 800bf0c:	6051      	str	r1, [r2, #4]
}
 800bf0e:	2000      	movs	r0, #0
 800bf10:	4770      	bx	lr

0800bf12 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800bf12:	290c      	cmp	r1, #12
 800bf14:	d814      	bhi.n	800bf40 <HAL_TIM_ReadCapturedValue+0x2e>
 800bf16:	e8df f001 	tbb	[pc, r1]
 800bf1a:	1307      	.short	0x1307
 800bf1c:	130a1313 	.word	0x130a1313
 800bf20:	130d1313 	.word	0x130d1313
 800bf24:	1313      	.short	0x1313
 800bf26:	10          	.byte	0x10
 800bf27:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800bf28:	6803      	ldr	r3, [r0, #0]
 800bf2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800bf2c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800bf2e:	6803      	ldr	r3, [r0, #0]
 800bf30:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800bf32:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800bf34:	6803      	ldr	r3, [r0, #0]
 800bf36:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800bf38:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800bf3a:	6803      	ldr	r3, [r0, #0]
 800bf3c:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 800bf3e:	4770      	bx	lr
  uint32_t tmpreg = 0U;
 800bf40:	2000      	movs	r0, #0
}
 800bf42:	4770      	bx	lr
}
 800bf44:	4770      	bx	lr

0800bf46 <TIM_DMAPeriodElapsedCplt>:
{
 800bf46:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf48:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedCallback(htim);
 800bf50:	f7f5 fb84 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
}
 800bf54:	bd08      	pop	{r3, pc}

0800bf56 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
}
 800bf56:	4770      	bx	lr

0800bf58 <TIM_DMAPeriodElapsedHalfCplt>:
{
 800bf58:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800bf62:	f7ff fff8 	bl	800bf56 <HAL_TIM_PeriodElapsedHalfCpltCallback>
}
 800bf66:	bd08      	pop	{r3, pc}

0800bf68 <HAL_TIM_OC_DelayElapsedCallback>:
}
 800bf68:	4770      	bx	lr

0800bf6a <HAL_TIM_IC_CaptureCallback>:
}
 800bf6a:	4770      	bx	lr

0800bf6c <TIM_DMACaptureCplt>:
{
 800bf6c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bf70:	2301      	movs	r3, #1
 800bf72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bf76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf78:	4283      	cmp	r3, r0
 800bf7a:	d010      	beq.n	800bf9e <TIM_DMACaptureCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bf7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf7e:	4283      	cmp	r3, r0
 800bf80:	d010      	beq.n	800bfa4 <TIM_DMACaptureCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bf82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bf84:	4283      	cmp	r3, r0
 800bf86:	d010      	beq.n	800bfaa <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bf88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bf8a:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf8c:	bf04      	itt	eq
 800bf8e:	2308      	moveq	r3, #8
 800bf90:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800bf92:	4620      	mov	r0, r4
 800bf94:	f7ff ffe9 	bl	800bf6a <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	7723      	strb	r3, [r4, #28]
}
 800bf9c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	7723      	strb	r3, [r4, #28]
 800bfa2:	e7f6      	b.n	800bf92 <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	7723      	strb	r3, [r4, #28]
 800bfa8:	e7f3      	b.n	800bf92 <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bfaa:	2304      	movs	r3, #4
 800bfac:	7723      	strb	r3, [r4, #28]
 800bfae:	e7f0      	b.n	800bf92 <TIM_DMACaptureCplt+0x26>

0800bfb0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
}
 800bfb0:	4770      	bx	lr

0800bfb2 <TIM_DMACaptureHalfCplt>:
{
 800bfb2:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfb4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bfbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfbe:	4283      	cmp	r3, r0
 800bfc0:	d010      	beq.n	800bfe4 <TIM_DMACaptureHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bfc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bfc4:	4283      	cmp	r3, r0
 800bfc6:	d010      	beq.n	800bfea <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bfc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bfca:	4283      	cmp	r3, r0
 800bfcc:	d010      	beq.n	800bff0 <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bfce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bfd0:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfd2:	bf04      	itt	eq
 800bfd4:	2308      	moveq	r3, #8
 800bfd6:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f7ff ffe9 	bl	800bfb0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	7723      	strb	r3, [r4, #28]
}
 800bfe2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	7723      	strb	r3, [r4, #28]
 800bfe8:	e7f6      	b.n	800bfd8 <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfea:	2302      	movs	r3, #2
 800bfec:	7723      	strb	r3, [r4, #28]
 800bfee:	e7f3      	b.n	800bfd8 <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bff0:	2304      	movs	r3, #4
 800bff2:	7723      	strb	r3, [r4, #28]
 800bff4:	e7f0      	b.n	800bfd8 <TIM_DMACaptureHalfCplt+0x26>

0800bff6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800bff6:	4770      	bx	lr

0800bff8 <TIM_DMADelayPulseCplt>:
{
 800bff8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bffa:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800bffc:	2301      	movs	r3, #1
 800bffe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c004:	4283      	cmp	r3, r0
 800c006:	d010      	beq.n	800c02a <TIM_DMADelayPulseCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c008:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c00a:	4283      	cmp	r3, r0
 800c00c:	d010      	beq.n	800c030 <TIM_DMADelayPulseCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c00e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c010:	4283      	cmp	r3, r0
 800c012:	d010      	beq.n	800c036 <TIM_DMADelayPulseCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c014:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c016:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c018:	bf04      	itt	eq
 800c01a:	2308      	moveq	r3, #8
 800c01c:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c01e:	4620      	mov	r0, r4
 800c020:	f7ff ffe9 	bl	800bff6 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c024:	2300      	movs	r3, #0
 800c026:	7723      	strb	r3, [r4, #28]
}
 800c028:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c02a:	2301      	movs	r3, #1
 800c02c:	7723      	strb	r3, [r4, #28]
 800c02e:	e7f6      	b.n	800c01e <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c030:	2302      	movs	r3, #2
 800c032:	7723      	strb	r3, [r4, #28]
 800c034:	e7f3      	b.n	800c01e <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c036:	2304      	movs	r3, #4
 800c038:	7723      	strb	r3, [r4, #28]
 800c03a:	e7f0      	b.n	800c01e <TIM_DMADelayPulseCplt+0x26>

0800c03c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 800c03c:	4770      	bx	lr

0800c03e <TIM_DMADelayPulseHalfCplt>:
{
 800c03e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c040:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800c042:	2301      	movs	r3, #1
 800c044:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c04a:	4283      	cmp	r3, r0
 800c04c:	d010      	beq.n	800c070 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c04e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c050:	4283      	cmp	r3, r0
 800c052:	d010      	beq.n	800c076 <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c054:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c056:	4283      	cmp	r3, r0
 800c058:	d010      	beq.n	800c07c <TIM_DMADelayPulseHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c05a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c05c:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c05e:	bf04      	itt	eq
 800c060:	2308      	moveq	r3, #8
 800c062:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800c064:	4620      	mov	r0, r4
 800c066:	f7ff ffe9 	bl	800c03c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c06a:	2300      	movs	r3, #0
 800c06c:	7723      	strb	r3, [r4, #28]
}
 800c06e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c070:	2301      	movs	r3, #1
 800c072:	7723      	strb	r3, [r4, #28]
 800c074:	e7f6      	b.n	800c064 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c076:	2302      	movs	r3, #2
 800c078:	7723      	strb	r3, [r4, #28]
 800c07a:	e7f3      	b.n	800c064 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c07c:	2304      	movs	r3, #4
 800c07e:	7723      	strb	r3, [r4, #28]
 800c080:	e7f0      	b.n	800c064 <TIM_DMADelayPulseHalfCplt+0x26>

0800c082 <HAL_TIM_TriggerCallback>:
}
 800c082:	4770      	bx	lr

0800c084 <HAL_TIM_IRQHandler>:
{
 800c084:	b510      	push	{r4, lr}
 800c086:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c088:	6803      	ldr	r3, [r0, #0]
 800c08a:	691a      	ldr	r2, [r3, #16]
 800c08c:	f012 0f02 	tst.w	r2, #2
 800c090:	d011      	beq.n	800c0b6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c092:	68da      	ldr	r2, [r3, #12]
 800c094:	f012 0f02 	tst.w	r2, #2
 800c098:	d00d      	beq.n	800c0b6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c09a:	f06f 0202 	mvn.w	r2, #2
 800c09e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0a4:	6803      	ldr	r3, [r0, #0]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	f013 0f03 	tst.w	r3, #3
 800c0ac:	d079      	beq.n	800c1a2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c0ae:	f7ff ff5c 	bl	800bf6a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c0b6:	6823      	ldr	r3, [r4, #0]
 800c0b8:	691a      	ldr	r2, [r3, #16]
 800c0ba:	f012 0f04 	tst.w	r2, #4
 800c0be:	d012      	beq.n	800c0e6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c0c0:	68da      	ldr	r2, [r3, #12]
 800c0c2:	f012 0f04 	tst.w	r2, #4
 800c0c6:	d00e      	beq.n	800c0e6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0c8:	f06f 0204 	mvn.w	r2, #4
 800c0cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0ce:	2302      	movs	r3, #2
 800c0d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c0da:	d068      	beq.n	800c1ae <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f7ff ff44 	bl	800bf6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	691a      	ldr	r2, [r3, #16]
 800c0ea:	f012 0f08 	tst.w	r2, #8
 800c0ee:	d012      	beq.n	800c116 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c0f0:	68da      	ldr	r2, [r3, #12]
 800c0f2:	f012 0f08 	tst.w	r2, #8
 800c0f6:	d00e      	beq.n	800c116 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c0f8:	f06f 0208 	mvn.w	r2, #8
 800c0fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0fe:	2304      	movs	r3, #4
 800c100:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	f013 0f03 	tst.w	r3, #3
 800c10a:	d057      	beq.n	800c1bc <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800c10c:	4620      	mov	r0, r4
 800c10e:	f7ff ff2c 	bl	800bf6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c112:	2300      	movs	r3, #0
 800c114:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	691a      	ldr	r2, [r3, #16]
 800c11a:	f012 0f10 	tst.w	r2, #16
 800c11e:	d012      	beq.n	800c146 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c120:	68da      	ldr	r2, [r3, #12]
 800c122:	f012 0f10 	tst.w	r2, #16
 800c126:	d00e      	beq.n	800c146 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c128:	f06f 0210 	mvn.w	r2, #16
 800c12c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c12e:	2308      	movs	r3, #8
 800c130:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	69db      	ldr	r3, [r3, #28]
 800c136:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c13a:	d046      	beq.n	800c1ca <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800c13c:	4620      	mov	r0, r4
 800c13e:	f7ff ff14 	bl	800bf6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c142:	2300      	movs	r3, #0
 800c144:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	691a      	ldr	r2, [r3, #16]
 800c14a:	f012 0f01 	tst.w	r2, #1
 800c14e:	d003      	beq.n	800c158 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c150:	68da      	ldr	r2, [r3, #12]
 800c152:	f012 0f01 	tst.w	r2, #1
 800c156:	d13f      	bne.n	800c1d8 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c158:	6823      	ldr	r3, [r4, #0]
 800c15a:	691a      	ldr	r2, [r3, #16]
 800c15c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c160:	d003      	beq.n	800c16a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c162:	68da      	ldr	r2, [r3, #12]
 800c164:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c168:	d13d      	bne.n	800c1e6 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c16a:	6823      	ldr	r3, [r4, #0]
 800c16c:	691a      	ldr	r2, [r3, #16]
 800c16e:	f412 7f80 	tst.w	r2, #256	; 0x100
 800c172:	d003      	beq.n	800c17c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c174:	68da      	ldr	r2, [r3, #12]
 800c176:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c17a:	d13b      	bne.n	800c1f4 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	691a      	ldr	r2, [r3, #16]
 800c180:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c184:	d003      	beq.n	800c18e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c186:	68da      	ldr	r2, [r3, #12]
 800c188:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c18c:	d139      	bne.n	800c202 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	691a      	ldr	r2, [r3, #16]
 800c192:	f012 0f20 	tst.w	r2, #32
 800c196:	d003      	beq.n	800c1a0 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	f012 0f20 	tst.w	r2, #32
 800c19e:	d137      	bne.n	800c210 <HAL_TIM_IRQHandler+0x18c>
}
 800c1a0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1a2:	f7ff fee1 	bl	800bf68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f7ff ff25 	bl	800bff6 <HAL_TIM_PWM_PulseFinishedCallback>
 800c1ac:	e781      	b.n	800c0b2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f7ff feda 	bl	800bf68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f7ff ff1e 	bl	800bff6 <HAL_TIM_PWM_PulseFinishedCallback>
 800c1ba:	e792      	b.n	800c0e2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f7ff fed3 	bl	800bf68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f7ff ff17 	bl	800bff6 <HAL_TIM_PWM_PulseFinishedCallback>
 800c1c8:	e7a3      	b.n	800c112 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f7ff fecc 	bl	800bf68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f7ff ff10 	bl	800bff6 <HAL_TIM_PWM_PulseFinishedCallback>
 800c1d6:	e7b4      	b.n	800c142 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c1d8:	f06f 0201 	mvn.w	r2, #1
 800c1dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f7f5 fa3c 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
 800c1e4:	e7b8      	b.n	800c158 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c1e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f002 fe58 	bl	800eea2 <HAL_TIMEx_BreakCallback>
 800c1f2:	e7ba      	b.n	800c16a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f002 fe52 	bl	800eea4 <HAL_TIMEx_Break2Callback>
 800c200:	e7bc      	b.n	800c17c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c206:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c208:	4620      	mov	r0, r4
 800c20a:	f7ff ff3a 	bl	800c082 <HAL_TIM_TriggerCallback>
 800c20e:	e7be      	b.n	800c18e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c210:	f06f 0220 	mvn.w	r2, #32
 800c214:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800c216:	4620      	mov	r0, r4
 800c218:	f002 fe31 	bl	800ee7e <HAL_TIMEx_CommutCallback>
}
 800c21c:	e7c0      	b.n	800c1a0 <HAL_TIM_IRQHandler+0x11c>

0800c21e <TIM_DMATriggerCplt>:
{
 800c21e:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c220:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800c222:	2301      	movs	r3, #1
 800c224:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerCallback(htim);
 800c228:	f7ff ff2b 	bl	800c082 <HAL_TIM_TriggerCallback>
}
 800c22c:	bd08      	pop	{r3, pc}

0800c22e <HAL_TIM_TriggerHalfCpltCallback>:
}
 800c22e:	4770      	bx	lr

0800c230 <TIM_DMATriggerHalfCplt>:
{
 800c230:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c232:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800c234:	2301      	movs	r3, #1
 800c236:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerHalfCpltCallback(htim);
 800c23a:	f7ff fff8 	bl	800c22e <HAL_TIM_TriggerHalfCpltCallback>
}
 800c23e:	bd08      	pop	{r3, pc}

0800c240 <HAL_TIM_ErrorCallback>:
}
 800c240:	4770      	bx	lr

0800c242 <TIM_DMAError>:
{
 800c242:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c244:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800c246:	2301      	movs	r3, #1
 800c248:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800c24c:	f7ff fff8 	bl	800c240 <HAL_TIM_ErrorCallback>
}
 800c250:	bd08      	pop	{r3, pc}

0800c252 <HAL_TIM_Base_GetState>:
  return htim->State;
 800c252:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c256:	4770      	bx	lr

0800c258 <HAL_TIM_OC_GetState>:
  return htim->State;
 800c258:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c25c:	4770      	bx	lr

0800c25e <HAL_TIM_PWM_GetState>:
  return htim->State;
 800c25e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c262:	4770      	bx	lr

0800c264 <HAL_TIM_IC_GetState>:
  return htim->State;
 800c264:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c268:	4770      	bx	lr

0800c26a <HAL_TIM_OnePulse_GetState>:
  return htim->State;
 800c26a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c26e:	4770      	bx	lr

0800c270 <HAL_TIM_Encoder_GetState>:
  return htim->State;
 800c270:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c274:	4770      	bx	lr
	...

0800c278 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800c278:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c27a:	4a4c      	ldr	r2, [pc, #304]	; (800c3ac <TIM_Base_SetConfig+0x134>)
 800c27c:	4290      	cmp	r0, r2
 800c27e:	d032      	beq.n	800c2e6 <TIM_Base_SetConfig+0x6e>
 800c280:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c284:	d062      	beq.n	800c34c <TIM_Base_SetConfig+0xd4>
 800c286:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c28a:	4290      	cmp	r0, r2
 800c28c:	d026      	beq.n	800c2dc <TIM_Base_SetConfig+0x64>
 800c28e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c292:	4290      	cmp	r0, r2
 800c294:	d055      	beq.n	800c342 <TIM_Base_SetConfig+0xca>
 800c296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c29a:	4290      	cmp	r0, r2
 800c29c:	d019      	beq.n	800c2d2 <TIM_Base_SetConfig+0x5a>
 800c29e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c2a2:	4290      	cmp	r0, r2
 800c2a4:	d048      	beq.n	800c338 <TIM_Base_SetConfig+0xc0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2a6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800c2aa:	4290      	cmp	r0, r2
 800c2ac:	d053      	beq.n	800c356 <TIM_Base_SetConfig+0xde>
 800c2ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2b2:	4290      	cmp	r0, r2
 800c2b4:	d05d      	beq.n	800c372 <TIM_Base_SetConfig+0xfa>
 800c2b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2ba:	4290      	cmp	r0, r2
 800c2bc:	d067      	beq.n	800c38e <TIM_Base_SetConfig+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2c2:	694a      	ldr	r2, [r1, #20]
 800c2c4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c2c6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2c8:	688b      	ldr	r3, [r1, #8]
 800c2ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c2cc:	680b      	ldr	r3, [r1, #0]
 800c2ce:	6283      	str	r3, [r0, #40]	; 0x28
 800c2d0:	e02f      	b.n	800c332 <TIM_Base_SetConfig+0xba>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c2d6:	684a      	ldr	r2, [r1, #4]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	e008      	b.n	800c2ee <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c2e0:	684a      	ldr	r2, [r1, #4]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	e003      	b.n	800c2ee <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c2ea:	684a      	ldr	r2, [r1, #4]
 800c2ec:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2f2:	68ca      	ldr	r2, [r1, #12]
 800c2f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2fa:	694a      	ldr	r2, [r1, #20]
 800c2fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c2fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c300:	688b      	ldr	r3, [r1, #8]
 800c302:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c304:	680b      	ldr	r3, [r1, #0]
 800c306:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c308:	4b28      	ldr	r3, [pc, #160]	; (800c3ac <TIM_Base_SetConfig+0x134>)
 800c30a:	4298      	cmp	r0, r3
 800c30c:	d00f      	beq.n	800c32e <TIM_Base_SetConfig+0xb6>
 800c30e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c312:	4298      	cmp	r0, r3
 800c314:	d00b      	beq.n	800c32e <TIM_Base_SetConfig+0xb6>
 800c316:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800c31a:	4298      	cmp	r0, r3
 800c31c:	d007      	beq.n	800c32e <TIM_Base_SetConfig+0xb6>
 800c31e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c322:	4298      	cmp	r0, r3
 800c324:	d003      	beq.n	800c32e <TIM_Base_SetConfig+0xb6>
 800c326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c32a:	4298      	cmp	r0, r3
 800c32c:	d101      	bne.n	800c332 <TIM_Base_SetConfig+0xba>
    TIMx->RCR = Structure->RepetitionCounter;
 800c32e:	690b      	ldr	r3, [r1, #16]
 800c330:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c332:	2301      	movs	r3, #1
 800c334:	6143      	str	r3, [r0, #20]
}
 800c336:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c33c:	684a      	ldr	r2, [r1, #4]
 800c33e:	4313      	orrs	r3, r2
 800c340:	e7d5      	b.n	800c2ee <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c346:	684a      	ldr	r2, [r1, #4]
 800c348:	4313      	orrs	r3, r2
 800c34a:	e7d0      	b.n	800c2ee <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c34c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c350:	684a      	ldr	r2, [r1, #4]
 800c352:	4313      	orrs	r3, r2
 800c354:	e7cb      	b.n	800c2ee <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c35a:	68ca      	ldr	r2, [r1, #12]
 800c35c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c35e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c362:	694a      	ldr	r2, [r1, #20]
 800c364:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c366:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c368:	688b      	ldr	r3, [r1, #8]
 800c36a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c36c:	680b      	ldr	r3, [r1, #0]
 800c36e:	6283      	str	r3, [r0, #40]	; 0x28
 800c370:	e7dd      	b.n	800c32e <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c376:	68ca      	ldr	r2, [r1, #12]
 800c378:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c37e:	694a      	ldr	r2, [r1, #20]
 800c380:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c382:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c384:	688b      	ldr	r3, [r1, #8]
 800c386:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c388:	680b      	ldr	r3, [r1, #0]
 800c38a:	6283      	str	r3, [r0, #40]	; 0x28
 800c38c:	e7cf      	b.n	800c32e <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c38e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c392:	68ca      	ldr	r2, [r1, #12]
 800c394:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c39a:	694a      	ldr	r2, [r1, #20]
 800c39c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c39e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3a0:	688b      	ldr	r3, [r1, #8]
 800c3a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c3a4:	680b      	ldr	r3, [r1, #0]
 800c3a6:	6283      	str	r3, [r0, #40]	; 0x28
 800c3a8:	e7c1      	b.n	800c32e <TIM_Base_SetConfig+0xb6>
 800c3aa:	bf00      	nop
 800c3ac:	40012c00 	.word	0x40012c00

0800c3b0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c3b0:	b1a8      	cbz	r0, 800c3de <HAL_TIM_Base_Init+0x2e>
{
 800c3b2:	b510      	push	{r4, lr}
 800c3b4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c3b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c3ba:	b15b      	cbz	r3, 800c3d4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c3bc:	2302      	movs	r3, #2
 800c3be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3c2:	1d21      	adds	r1, r4, #4
 800c3c4:	6820      	ldr	r0, [r4, #0]
 800c3c6:	f7ff ff57 	bl	800c278 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c3d0:	2000      	movs	r0, #0
}
 800c3d2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c3d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c3d8:	f7f5 fbac 	bl	8001b34 <HAL_TIM_Base_MspInit>
 800c3dc:	e7ee      	b.n	800c3bc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800c3de:	2001      	movs	r0, #1
}
 800c3e0:	4770      	bx	lr

0800c3e2 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800c3e2:	b1a8      	cbz	r0, 800c410 <HAL_TIM_OC_Init+0x2e>
{
 800c3e4:	b510      	push	{r4, lr}
 800c3e6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c3e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c3ec:	b15b      	cbz	r3, 800c406 <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c3f4:	1d21      	adds	r1, r4, #4
 800c3f6:	6820      	ldr	r0, [r4, #0]
 800c3f8:	f7ff ff3e 	bl	800c278 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c402:	2000      	movs	r0, #0
}
 800c404:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c406:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800c40a:	f7ff fa7f 	bl	800b90c <HAL_TIM_OC_MspInit>
 800c40e:	e7ee      	b.n	800c3ee <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800c410:	2001      	movs	r0, #1
}
 800c412:	4770      	bx	lr

0800c414 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800c414:	b1a8      	cbz	r0, 800c442 <HAL_TIM_PWM_Init+0x2e>
{
 800c416:	b510      	push	{r4, lr}
 800c418:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c41a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c41e:	b15b      	cbz	r3, 800c438 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c420:	2302      	movs	r3, #2
 800c422:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c426:	1d21      	adds	r1, r4, #4
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	f7ff ff25 	bl	800c278 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c42e:	2301      	movs	r3, #1
 800c430:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c434:	2000      	movs	r0, #0
}
 800c436:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c438:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c43c:	f7ff fa85 	bl	800b94a <HAL_TIM_PWM_MspInit>
 800c440:	e7ee      	b.n	800c420 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800c442:	2001      	movs	r0, #1
}
 800c444:	4770      	bx	lr

0800c446 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800c446:	b1a8      	cbz	r0, 800c474 <HAL_TIM_IC_Init+0x2e>
{
 800c448:	b510      	push	{r4, lr}
 800c44a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c44c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c450:	b15b      	cbz	r3, 800c46a <HAL_TIM_IC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800c452:	2302      	movs	r3, #2
 800c454:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c458:	1d21      	adds	r1, r4, #4
 800c45a:	6820      	ldr	r0, [r4, #0]
 800c45c:	f7ff ff0c 	bl	800c278 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c460:	2301      	movs	r3, #1
 800c462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c466:	2000      	movs	r0, #0
}
 800c468:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c46a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800c46e:	f7ff fa8b 	bl	800b988 <HAL_TIM_IC_MspInit>
 800c472:	e7ee      	b.n	800c452 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800c474:	2001      	movs	r0, #1
}
 800c476:	4770      	bx	lr

0800c478 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 800c478:	b1f8      	cbz	r0, 800c4ba <HAL_TIM_OnePulse_Init+0x42>
{
 800c47a:	b538      	push	{r3, r4, r5, lr}
 800c47c:	4604      	mov	r4, r0
 800c47e:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800c480:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c484:	b1a3      	cbz	r3, 800c4b0 <HAL_TIM_OnePulse_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800c486:	2302      	movs	r3, #2
 800c488:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c48c:	1d21      	adds	r1, r4, #4
 800c48e:	6820      	ldr	r0, [r4, #0]
 800c490:	f7ff fef2 	bl	800c278 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c494:	6822      	ldr	r2, [r4, #0]
 800c496:	6813      	ldr	r3, [r2, #0]
 800c498:	f023 0308 	bic.w	r3, r3, #8
 800c49c:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800c49e:	6822      	ldr	r2, [r4, #0]
 800c4a0:	6813      	ldr	r3, [r2, #0]
 800c4a2:	432b      	orrs	r3, r5
 800c4a4:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c4ac:	2000      	movs	r0, #0
}
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c4b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800c4b4:	f7ff fa87 	bl	800b9c6 <HAL_TIM_OnePulse_MspInit>
 800c4b8:	e7e5      	b.n	800c486 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 800c4ba:	2001      	movs	r0, #1
}
 800c4bc:	4770      	bx	lr

0800c4be <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d049      	beq.n	800c556 <HAL_TIM_Encoder_Init+0x98>
{
 800c4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800c4c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d03d      	beq.n	800c54c <HAL_TIM_Encoder_Init+0x8e>
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d0:	2302      	movs	r3, #2
 800c4d2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	f851 2b04 	ldr.w	r2, [r1], #4
 800c4dc:	6893      	ldr	r3, [r2, #8]
 800c4de:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c4e2:	f023 0307 	bic.w	r3, r3, #7
 800c4e6:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4e8:	6828      	ldr	r0, [r5, #0]
 800c4ea:	f7ff fec5 	bl	800c278 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800c4ee:	6828      	ldr	r0, [r5, #0]
 800c4f0:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800c4f2:	6982      	ldr	r2, [r0, #24]
  tmpccer = htim->Instance->CCER;
 800c4f4:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	431e      	orrs	r6, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c4fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c4fe:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c502:	69a3      	ldr	r3, [r4, #24]
 800c504:	68a1      	ldr	r1, [r4, #8]
 800c506:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800c50a:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c50c:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
 800c510:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c514:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c516:	6923      	ldr	r3, [r4, #16]
 800c518:	011b      	lsls	r3, r3, #4
 800c51a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c51e:	68e1      	ldr	r1, [r4, #12]
 800c520:	430b      	orrs	r3, r1
 800c522:	6a21      	ldr	r1, [r4, #32]
 800c524:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800c528:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c52a:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c52e:	6961      	ldr	r1, [r4, #20]
 800c530:	6862      	ldr	r2, [r4, #4]
 800c532:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800c536:	4317      	orrs	r7, r2
  htim->Instance->SMCR = tmpsmcr;
 800c538:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800c53a:	682a      	ldr	r2, [r5, #0]
 800c53c:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 800c53e:	682b      	ldr	r3, [r5, #0]
 800c540:	621f      	str	r7, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 800c542:	2301      	movs	r3, #1
 800c544:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 800c548:	2000      	movs	r0, #0
}
 800c54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800c54c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800c550:	f7ff fa58 	bl	800ba04 <HAL_TIM_Encoder_MspInit>
 800c554:	e7bc      	b.n	800c4d0 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800c556:	2001      	movs	r0, #1
}
 800c558:	4770      	bx	lr
	...

0800c55c <TIM_OC2_SetConfig>:
{
 800c55c:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c55e:	6a03      	ldr	r3, [r0, #32]
 800c560:	f023 0310 	bic.w	r3, r3, #16
 800c564:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c566:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c568:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c56a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c56c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800c570:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c574:	680d      	ldr	r5, [r1, #0]
 800c576:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800c57a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c57e:	688d      	ldr	r5, [r1, #8]
 800c580:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c584:	4d17      	ldr	r5, [pc, #92]	; (800c5e4 <TIM_OC2_SetConfig+0x88>)
 800c586:	42a8      	cmp	r0, r5
 800c588:	d017      	beq.n	800c5ba <TIM_OC2_SetConfig+0x5e>
 800c58a:	4f17      	ldr	r7, [pc, #92]	; (800c5e8 <TIM_OC2_SetConfig+0x8c>)
 800c58c:	42b8      	cmp	r0, r7
 800c58e:	d00c      	beq.n	800c5aa <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c590:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800c594:	42a8      	cmp	r0, r5
 800c596:	d017      	beq.n	800c5c8 <TIM_OC2_SetConfig+0x6c>
 800c598:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c59c:	42a8      	cmp	r0, r5
 800c59e:	d013      	beq.n	800c5c8 <TIM_OC2_SetConfig+0x6c>
 800c5a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c5a4:	42a8      	cmp	r0, r5
 800c5a6:	d116      	bne.n	800c5d6 <TIM_OC2_SetConfig+0x7a>
 800c5a8:	e00e      	b.n	800c5c8 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c5ae:	68cd      	ldr	r5, [r1, #12]
 800c5b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5b8:	e006      	b.n	800c5c8 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c5be:	68cd      	ldr	r5, [r1, #12]
 800c5c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5c8:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5cc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5ce:	698f      	ldr	r7, [r1, #24]
 800c5d0:	433c      	orrs	r4, r7
 800c5d2:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800c5d6:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c5d8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c5da:	684a      	ldr	r2, [r1, #4]
 800c5dc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800c5de:	6203      	str	r3, [r0, #32]
}
 800c5e0:	bcf0      	pop	{r4, r5, r6, r7}
 800c5e2:	4770      	bx	lr
 800c5e4:	40012c00 	.word	0x40012c00
 800c5e8:	40013400 	.word	0x40013400

0800c5ec <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800c5ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d034      	beq.n	800c65e <HAL_TIM_OC_ConfigChannel+0x72>
{
 800c5f4:	b510      	push	{r4, lr}
 800c5f6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c5fe:	2302      	movs	r3, #2
 800c600:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800c604:	2a14      	cmp	r2, #20
 800c606:	d80f      	bhi.n	800c628 <HAL_TIM_OC_ConfigChannel+0x3c>
 800c608:	e8df f002 	tbb	[pc, r2]
 800c60c:	0e0e0e0b 	.word	0x0e0e0e0b
 800c610:	0e0e0e15 	.word	0x0e0e0e15
 800c614:	0e0e0e19 	.word	0x0e0e0e19
 800c618:	0e0e0e1d 	.word	0x0e0e0e1d
 800c61c:	0e0e0e21 	.word	0x0e0e0e21
 800c620:	25          	.byte	0x25
 800c621:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c622:	6800      	ldr	r0, [r0, #0]
 800c624:	f7fe ff52 	bl	800b4cc <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c628:	2301      	movs	r3, #1
 800c62a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c62e:	2000      	movs	r0, #0
 800c630:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c634:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c636:	6800      	ldr	r0, [r0, #0]
 800c638:	f7ff ff90 	bl	800c55c <TIM_OC2_SetConfig>
      break;
 800c63c:	e7f4      	b.n	800c628 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c63e:	6800      	ldr	r0, [r0, #0]
 800c640:	f7fe ff9c 	bl	800b57c <TIM_OC3_SetConfig>
      break;
 800c644:	e7f0      	b.n	800c628 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c646:	6800      	ldr	r0, [r0, #0]
 800c648:	f7fe ffe0 	bl	800b60c <TIM_OC4_SetConfig>
      break;
 800c64c:	e7ec      	b.n	800c628 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c64e:	6800      	ldr	r0, [r0, #0]
 800c650:	f7ff f812 	bl	800b678 <TIM_OC5_SetConfig>
      break;
 800c654:	e7e8      	b.n	800c628 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c656:	6800      	ldr	r0, [r0, #0]
 800c658:	f7ff f842 	bl	800b6e0 <TIM_OC6_SetConfig>
      break;
 800c65c:	e7e4      	b.n	800c628 <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 800c65e:	2002      	movs	r0, #2
}
 800c660:	4770      	bx	lr

0800c662 <HAL_TIM_PWM_ConfigChannel>:
{
 800c662:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800c664:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c668:	2b01      	cmp	r3, #1
 800c66a:	f000 8092 	beq.w	800c792 <HAL_TIM_PWM_ConfigChannel+0x130>
 800c66e:	460d      	mov	r5, r1
 800c670:	4604      	mov	r4, r0
 800c672:	2301      	movs	r3, #1
 800c674:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c678:	2302      	movs	r3, #2
 800c67a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800c67e:	2a14      	cmp	r2, #20
 800c680:	d81e      	bhi.n	800c6c0 <HAL_TIM_PWM_ConfigChannel+0x5e>
 800c682:	e8df f002 	tbb	[pc, r2]
 800c686:	1d0b      	.short	0x1d0b
 800c688:	1d241d1d 	.word	0x1d241d1d
 800c68c:	1d381d1d 	.word	0x1d381d1d
 800c690:	1d4b1d1d 	.word	0x1d4b1d1d
 800c694:	1d5f1d1d 	.word	0x1d5f1d1d
 800c698:	1d1d      	.short	0x1d1d
 800c69a:	72          	.byte	0x72
 800c69b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c69c:	6800      	ldr	r0, [r0, #0]
 800c69e:	f7fe ff15 	bl	800b4cc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c6a2:	6822      	ldr	r2, [r4, #0]
 800c6a4:	6993      	ldr	r3, [r2, #24]
 800c6a6:	f043 0308 	orr.w	r3, r3, #8
 800c6aa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c6ac:	6822      	ldr	r2, [r4, #0]
 800c6ae:	6993      	ldr	r3, [r2, #24]
 800c6b0:	f023 0304 	bic.w	r3, r3, #4
 800c6b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c6b6:	6822      	ldr	r2, [r4, #0]
 800c6b8:	6993      	ldr	r3, [r2, #24]
 800c6ba:	6929      	ldr	r1, [r5, #16]
 800c6bc:	430b      	orrs	r3, r1
 800c6be:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c6ce:	6800      	ldr	r0, [r0, #0]
 800c6d0:	f7ff ff44 	bl	800c55c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c6d4:	6822      	ldr	r2, [r4, #0]
 800c6d6:	6993      	ldr	r3, [r2, #24]
 800c6d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c6dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6de:	6822      	ldr	r2, [r4, #0]
 800c6e0:	6993      	ldr	r3, [r2, #24]
 800c6e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6e6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6e8:	6822      	ldr	r2, [r4, #0]
 800c6ea:	6993      	ldr	r3, [r2, #24]
 800c6ec:	6929      	ldr	r1, [r5, #16]
 800c6ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c6f2:	6193      	str	r3, [r2, #24]
      break;
 800c6f4:	e7e4      	b.n	800c6c0 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6f6:	6800      	ldr	r0, [r0, #0]
 800c6f8:	f7fe ff40 	bl	800b57c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6fc:	6822      	ldr	r2, [r4, #0]
 800c6fe:	69d3      	ldr	r3, [r2, #28]
 800c700:	f043 0308 	orr.w	r3, r3, #8
 800c704:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c706:	6822      	ldr	r2, [r4, #0]
 800c708:	69d3      	ldr	r3, [r2, #28]
 800c70a:	f023 0304 	bic.w	r3, r3, #4
 800c70e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c710:	6822      	ldr	r2, [r4, #0]
 800c712:	69d3      	ldr	r3, [r2, #28]
 800c714:	6929      	ldr	r1, [r5, #16]
 800c716:	430b      	orrs	r3, r1
 800c718:	61d3      	str	r3, [r2, #28]
      break;
 800c71a:	e7d1      	b.n	800c6c0 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c71c:	6800      	ldr	r0, [r0, #0]
 800c71e:	f7fe ff75 	bl	800b60c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c722:	6822      	ldr	r2, [r4, #0]
 800c724:	69d3      	ldr	r3, [r2, #28]
 800c726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c72a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c72c:	6822      	ldr	r2, [r4, #0]
 800c72e:	69d3      	ldr	r3, [r2, #28]
 800c730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c734:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c736:	6822      	ldr	r2, [r4, #0]
 800c738:	69d3      	ldr	r3, [r2, #28]
 800c73a:	6929      	ldr	r1, [r5, #16]
 800c73c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c740:	61d3      	str	r3, [r2, #28]
      break;
 800c742:	e7bd      	b.n	800c6c0 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c744:	6800      	ldr	r0, [r0, #0]
 800c746:	f7fe ff97 	bl	800b678 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c74a:	6822      	ldr	r2, [r4, #0]
 800c74c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c74e:	f043 0308 	orr.w	r3, r3, #8
 800c752:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c754:	6822      	ldr	r2, [r4, #0]
 800c756:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c758:	f023 0304 	bic.w	r3, r3, #4
 800c75c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c75e:	6822      	ldr	r2, [r4, #0]
 800c760:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c762:	6929      	ldr	r1, [r5, #16]
 800c764:	430b      	orrs	r3, r1
 800c766:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800c768:	e7aa      	b.n	800c6c0 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c76a:	6800      	ldr	r0, [r0, #0]
 800c76c:	f7fe ffb8 	bl	800b6e0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c770:	6822      	ldr	r2, [r4, #0]
 800c772:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c778:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c77a:	6822      	ldr	r2, [r4, #0]
 800c77c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c77e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c782:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c784:	6822      	ldr	r2, [r4, #0]
 800c786:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c788:	6929      	ldr	r1, [r5, #16]
 800c78a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c78e:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800c790:	e796      	b.n	800c6c0 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 800c792:	2002      	movs	r0, #2
 800c794:	e79a      	b.n	800c6cc <HAL_TIM_PWM_ConfigChannel+0x6a>
	...

0800c798 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c798:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c79a:	6a04      	ldr	r4, [r0, #32]
 800c79c:	f024 0401 	bic.w	r4, r4, #1
 800c7a0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7a2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800c7a4:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c7a6:	4e17      	ldr	r6, [pc, #92]	; (800c804 <TIM_TI1_SetConfig+0x6c>)
 800c7a8:	42b0      	cmp	r0, r6
 800c7aa:	d019      	beq.n	800c7e0 <TIM_TI1_SetConfig+0x48>
 800c7ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c7b0:	d016      	beq.n	800c7e0 <TIM_TI1_SetConfig+0x48>
 800c7b2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800c7b6:	42b0      	cmp	r0, r6
 800c7b8:	d012      	beq.n	800c7e0 <TIM_TI1_SetConfig+0x48>
 800c7ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c7be:	42b0      	cmp	r0, r6
 800c7c0:	d00e      	beq.n	800c7e0 <TIM_TI1_SetConfig+0x48>
 800c7c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c7c6:	42b0      	cmp	r0, r6
 800c7c8:	d00a      	beq.n	800c7e0 <TIM_TI1_SetConfig+0x48>
 800c7ca:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800c7ce:	42b0      	cmp	r0, r6
 800c7d0:	d006      	beq.n	800c7e0 <TIM_TI1_SetConfig+0x48>
 800c7d2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800c7d6:	42b0      	cmp	r0, r6
 800c7d8:	d002      	beq.n	800c7e0 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c7da:	f044 0201 	orr.w	r2, r4, #1
 800c7de:	e002      	b.n	800c7e6 <TIM_TI1_SetConfig+0x4e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c7e0:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800c7e4:	4322      	orrs	r2, r4
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c7ea:	011b      	lsls	r3, r3, #4
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7f0:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c7f4:	f001 010a 	and.w	r1, r1, #10
 800c7f8:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7fa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800c7fc:	6201      	str	r1, [r0, #32]
}
 800c7fe:	bc70      	pop	{r4, r5, r6}
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	40012c00 	.word	0x40012c00

0800c808 <HAL_TIM_IC_ConfigChannel>:
{
 800c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800c80a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c80e:	2b01      	cmp	r3, #1
 800c810:	f000 8098 	beq.w	800c944 <HAL_TIM_IC_ConfigChannel+0x13c>
 800c814:	460d      	mov	r5, r1
 800c816:	4604      	mov	r4, r0
 800c818:	2301      	movs	r3, #1
 800c81a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c81e:	2302      	movs	r3, #2
 800c820:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800c824:	2a00      	cmp	r2, #0
 800c826:	d030      	beq.n	800c88a <HAL_TIM_IC_ConfigChannel+0x82>
  else if (Channel == TIM_CHANNEL_2)
 800c828:	2a04      	cmp	r2, #4
 800c82a:	d03f      	beq.n	800c8ac <HAL_TIM_IC_ConfigChannel+0xa4>
  else if (Channel == TIM_CHANNEL_3)
 800c82c:	2a08      	cmp	r2, #8
 800c82e:	d064      	beq.n	800c8fa <HAL_TIM_IC_ConfigChannel+0xf2>
    TIM_TI4_SetConfig(htim->Instance,
 800c830:	6800      	ldr	r0, [r0, #0]
 800c832:	680b      	ldr	r3, [r1, #0]
 800c834:	684f      	ldr	r7, [r1, #4]
 800c836:	68ca      	ldr	r2, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c838:	6a06      	ldr	r6, [r0, #32]
 800c83a:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
 800c83e:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c840:	69c1      	ldr	r1, [r0, #28]
  tmpccer = TIMx->CCER;
 800c842:	6a06      	ldr	r6, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c844:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c848:	ea41 2107 	orr.w	r1, r1, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c84c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c850:	0312      	lsls	r2, r2, #12
 800c852:	b292      	uxth	r2, r2
 800c854:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c856:	f426 4120 	bic.w	r1, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c85a:	031b      	lsls	r3, r3, #12
 800c85c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c860:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c862:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800c864:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c866:	6822      	ldr	r2, [r4, #0]
 800c868:	69d3      	ldr	r3, [r2, #28]
 800c86a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c86e:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c870:	6822      	ldr	r2, [r4, #0]
 800c872:	69d3      	ldr	r3, [r2, #28]
 800c874:	68a9      	ldr	r1, [r5, #8]
 800c876:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c87a:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800c87c:	2301      	movs	r3, #1
 800c87e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c882:	2000      	movs	r0, #0
 800c884:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800c88a:	68cb      	ldr	r3, [r1, #12]
 800c88c:	684a      	ldr	r2, [r1, #4]
 800c88e:	6809      	ldr	r1, [r1, #0]
 800c890:	6800      	ldr	r0, [r0, #0]
 800c892:	f7ff ff81 	bl	800c798 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c896:	6822      	ldr	r2, [r4, #0]
 800c898:	6993      	ldr	r3, [r2, #24]
 800c89a:	f023 030c 	bic.w	r3, r3, #12
 800c89e:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c8a0:	6822      	ldr	r2, [r4, #0]
 800c8a2:	6993      	ldr	r3, [r2, #24]
 800c8a4:	68a9      	ldr	r1, [r5, #8]
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	6193      	str	r3, [r2, #24]
 800c8aa:	e7e7      	b.n	800c87c <HAL_TIM_IC_ConfigChannel+0x74>
    TIM_TI2_SetConfig(htim->Instance,
 800c8ac:	6800      	ldr	r0, [r0, #0]
 800c8ae:	680b      	ldr	r3, [r1, #0]
 800c8b0:	684f      	ldr	r7, [r1, #4]
 800c8b2:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8b4:	6a06      	ldr	r6, [r0, #32]
 800c8b6:	f026 0610 	bic.w	r6, r6, #16
 800c8ba:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8bc:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800c8be:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c8c0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c8c4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8c8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c8cc:	0312      	lsls	r2, r2, #12
 800c8ce:	b292      	uxth	r2, r2
 800c8d0:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8d2:	f026 01a0 	bic.w	r1, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c8d6:	011b      	lsls	r3, r3, #4
 800c8d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c8dc:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800c8de:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800c8e0:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c8e2:	6822      	ldr	r2, [r4, #0]
 800c8e4:	6993      	ldr	r3, [r2, #24]
 800c8e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c8ea:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c8ec:	6822      	ldr	r2, [r4, #0]
 800c8ee:	6993      	ldr	r3, [r2, #24]
 800c8f0:	68a9      	ldr	r1, [r5, #8]
 800c8f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c8f6:	6193      	str	r3, [r2, #24]
 800c8f8:	e7c0      	b.n	800c87c <HAL_TIM_IC_ConfigChannel+0x74>
    TIM_TI3_SetConfig(htim->Instance,
 800c8fa:	6801      	ldr	r1, [r0, #0]
 800c8fc:	682b      	ldr	r3, [r5, #0]
 800c8fe:	6868      	ldr	r0, [r5, #4]
 800c900:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c902:	6a0e      	ldr	r6, [r1, #32]
 800c904:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 800c908:	620e      	str	r6, [r1, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c90a:	69cf      	ldr	r7, [r1, #28]
  tmpccer = TIMx->CCER;
 800c90c:	6a0e      	ldr	r6, [r1, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c90e:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800c912:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c914:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c918:	0112      	lsls	r2, r2, #4
 800c91a:	b2d2      	uxtb	r2, r2
 800c91c:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c91e:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c922:	021b      	lsls	r3, r3, #8
 800c924:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c928:	4303      	orrs	r3, r0
  TIMx->CCMR2 = tmpccmr2;
 800c92a:	61ca      	str	r2, [r1, #28]
  TIMx->CCER = tmpccer;
 800c92c:	620b      	str	r3, [r1, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c92e:	6822      	ldr	r2, [r4, #0]
 800c930:	69d3      	ldr	r3, [r2, #28]
 800c932:	f023 030c 	bic.w	r3, r3, #12
 800c936:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c938:	6822      	ldr	r2, [r4, #0]
 800c93a:	69d3      	ldr	r3, [r2, #28]
 800c93c:	68a9      	ldr	r1, [r5, #8]
 800c93e:	430b      	orrs	r3, r1
 800c940:	61d3      	str	r3, [r2, #28]
 800c942:	e79b      	b.n	800c87c <HAL_TIM_IC_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 800c944:	2002      	movs	r0, #2
 800c946:	e79f      	b.n	800c888 <HAL_TIM_IC_ConfigChannel+0x80>

0800c948 <HAL_TIM_OnePulse_ConfigChannel>:
  if (OutputChannel != InputChannel)
 800c948:	429a      	cmp	r2, r3
 800c94a:	f000 808d 	beq.w	800ca68 <HAL_TIM_OnePulse_ConfigChannel+0x120>
{
 800c94e:	b570      	push	{r4, r5, r6, lr}
 800c950:	b088      	sub	sp, #32
    __HAL_LOCK(htim);
 800c952:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800c956:	2c01      	cmp	r4, #1
 800c958:	f000 8088 	beq.w	800ca6c <HAL_TIM_OnePulse_ConfigChannel+0x124>
 800c95c:	461e      	mov	r6, r3
 800c95e:	460d      	mov	r5, r1
 800c960:	4604      	mov	r4, r0
 800c962:	2301      	movs	r3, #1
 800c964:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    htim->State = HAL_TIM_STATE_BUSY;
 800c968:	2302      	movs	r3, #2
 800c96a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    temp1.OCMode = sConfig->OCMode;
 800c96e:	680b      	ldr	r3, [r1, #0]
 800c970:	9301      	str	r3, [sp, #4]
    temp1.Pulse = sConfig->Pulse;
 800c972:	684b      	ldr	r3, [r1, #4]
 800c974:	9302      	str	r3, [sp, #8]
    temp1.OCPolarity = sConfig->OCPolarity;
 800c976:	688b      	ldr	r3, [r1, #8]
 800c978:	9303      	str	r3, [sp, #12]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 800c97a:	68cb      	ldr	r3, [r1, #12]
 800c97c:	9304      	str	r3, [sp, #16]
    temp1.OCIdleState = sConfig->OCIdleState;
 800c97e:	690b      	ldr	r3, [r1, #16]
 800c980:	9306      	str	r3, [sp, #24]
    temp1.OCNIdleState = sConfig->OCNIdleState;
 800c982:	694b      	ldr	r3, [r1, #20]
 800c984:	9307      	str	r3, [sp, #28]
    switch (OutputChannel)
 800c986:	b162      	cbz	r2, 800c9a2 <HAL_TIM_OnePulse_ConfigChannel+0x5a>
 800c988:	2a04      	cmp	r2, #4
 800c98a:	d00f      	beq.n	800c9ac <HAL_TIM_OnePulse_ConfigChannel+0x64>
    switch (InputChannel)
 800c98c:	b19e      	cbz	r6, 800c9b6 <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 800c98e:	2e04      	cmp	r6, #4
 800c990:	d033      	beq.n	800c9fa <HAL_TIM_OnePulse_ConfigChannel+0xb2>
    htim->State = HAL_TIM_STATE_READY;
 800c992:	2301      	movs	r3, #1
 800c994:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800c998:	2000      	movs	r0, #0
 800c99a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c99e:	b008      	add	sp, #32
 800c9a0:	bd70      	pop	{r4, r5, r6, pc}
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 800c9a2:	a901      	add	r1, sp, #4
 800c9a4:	6800      	ldr	r0, [r0, #0]
 800c9a6:	f7fe fd91 	bl	800b4cc <TIM_OC1_SetConfig>
        break;
 800c9aa:	e7ef      	b.n	800c98c <HAL_TIM_OnePulse_ConfigChannel+0x44>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 800c9ac:	a901      	add	r1, sp, #4
 800c9ae:	6800      	ldr	r0, [r0, #0]
 800c9b0:	f7ff fdd4 	bl	800c55c <TIM_OC2_SetConfig>
        break;
 800c9b4:	e7ea      	b.n	800c98c <HAL_TIM_OnePulse_ConfigChannel+0x44>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 800c9b6:	6a2b      	ldr	r3, [r5, #32]
 800c9b8:	69ea      	ldr	r2, [r5, #28]
 800c9ba:	69a9      	ldr	r1, [r5, #24]
 800c9bc:	6820      	ldr	r0, [r4, #0]
 800c9be:	f7ff feeb 	bl	800c798 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c9c2:	6822      	ldr	r2, [r4, #0]
 800c9c4:	6993      	ldr	r3, [r2, #24]
 800c9c6:	f023 030c 	bic.w	r3, r3, #12
 800c9ca:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800c9cc:	6822      	ldr	r2, [r4, #0]
 800c9ce:	6893      	ldr	r3, [r2, #8]
 800c9d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9d4:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800c9d6:	6822      	ldr	r2, [r4, #0]
 800c9d8:	6893      	ldr	r3, [r2, #8]
 800c9da:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800c9de:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800c9e0:	6822      	ldr	r2, [r4, #0]
 800c9e2:	6893      	ldr	r3, [r2, #8]
 800c9e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9e8:	f023 0307 	bic.w	r3, r3, #7
 800c9ec:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	6893      	ldr	r3, [r2, #8]
 800c9f2:	f043 0306 	orr.w	r3, r3, #6
 800c9f6:	6093      	str	r3, [r2, #8]
        break;
 800c9f8:	e7cb      	b.n	800c992 <HAL_TIM_OnePulse_ConfigChannel+0x4a>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800c9fa:	6820      	ldr	r0, [r4, #0]
 800c9fc:	69ab      	ldr	r3, [r5, #24]
 800c9fe:	69ee      	ldr	r6, [r5, #28]
 800ca00:	6a2a      	ldr	r2, [r5, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca02:	6a05      	ldr	r5, [r0, #32]
 800ca04:	f025 0510 	bic.w	r5, r5, #16
 800ca08:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca0a:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800ca0c:	6a05      	ldr	r5, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ca0e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ca12:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca16:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ca1a:	0312      	lsls	r2, r2, #12
 800ca1c:	b292      	uxth	r2, r2
 800ca1e:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca20:	f025 01a0 	bic.w	r1, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ca24:	011b      	lsls	r3, r3, #4
 800ca26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ca2a:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800ca2c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ca2e:	6203      	str	r3, [r0, #32]
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ca30:	6822      	ldr	r2, [r4, #0]
 800ca32:	6993      	ldr	r3, [r2, #24]
 800ca34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ca38:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ca3a:	6822      	ldr	r2, [r4, #0]
 800ca3c:	6893      	ldr	r3, [r2, #8]
 800ca3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca42:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800ca44:	6822      	ldr	r2, [r4, #0]
 800ca46:	6893      	ldr	r3, [r2, #8]
 800ca48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ca4c:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800ca4e:	6822      	ldr	r2, [r4, #0]
 800ca50:	6893      	ldr	r3, [r2, #8]
 800ca52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca56:	f023 0307 	bic.w	r3, r3, #7
 800ca5a:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800ca5c:	6822      	ldr	r2, [r4, #0]
 800ca5e:	6893      	ldr	r3, [r2, #8]
 800ca60:	f043 0306 	orr.w	r3, r3, #6
 800ca64:	6093      	str	r3, [r2, #8]
        break;
 800ca66:	e794      	b.n	800c992 <HAL_TIM_OnePulse_ConfigChannel+0x4a>
    return HAL_ERROR;
 800ca68:	2001      	movs	r0, #1
}
 800ca6a:	4770      	bx	lr
    __HAL_LOCK(htim);
 800ca6c:	2002      	movs	r0, #2
 800ca6e:	e796      	b.n	800c99e <HAL_TIM_OnePulse_ConfigChannel+0x56>

0800ca70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca70:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca72:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca74:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800ca7e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca80:	6083      	str	r3, [r0, #8]
}
 800ca82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <HAL_TIM_ConfigOCrefClear>:
  __HAL_LOCK(htim);
 800ca88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	f000 809c 	beq.w	800cbca <HAL_TIM_ConfigOCrefClear+0x142>
{
 800ca92:	b570      	push	{r4, r5, r6, lr}
 800ca94:	4616      	mov	r6, r2
 800ca96:	460d      	mov	r5, r1
 800ca98:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800caa0:	2302      	movs	r3, #2
 800caa2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (sClearInputConfig->ClearInputSource)
 800caa6:	684b      	ldr	r3, [r1, #4]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d01f      	beq.n	800caec <HAL_TIM_ConfigOCrefClear+0x64>
 800caac:	b183      	cbz	r3, 800cad0 <HAL_TIM_ConfigOCrefClear+0x48>
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d016      	beq.n	800cae0 <HAL_TIM_ConfigOCrefClear+0x58>
  switch (Channel)
 800cab2:	2e14      	cmp	r6, #20
 800cab4:	d836      	bhi.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
 800cab6:	e8df f006 	tbb	[pc, r6]
 800caba:	352e      	.short	0x352e
 800cabc:	35423535 	.word	0x35423535
 800cac0:	35503535 	.word	0x35503535
 800cac4:	355e3535 	.word	0x355e3535
 800cac8:	356c3535 	.word	0x356c3535
 800cacc:	3535      	.short	0x3535
 800cace:	7a          	.byte	0x7a
 800cacf:	00          	.byte	0x00
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800cad0:	6802      	ldr	r2, [r0, #0]
 800cad2:	6893      	ldr	r3, [r2, #8]
 800cad4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cad8:	f023 0308 	bic.w	r3, r3, #8
 800cadc:	6093      	str	r3, [r2, #8]
      break;
 800cade:	e7e8      	b.n	800cab2 <HAL_TIM_ConfigOCrefClear+0x2a>
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 800cae0:	6802      	ldr	r2, [r0, #0]
 800cae2:	6893      	ldr	r3, [r2, #8]
 800cae4:	f023 0308 	bic.w	r3, r3, #8
 800cae8:	6093      	str	r3, [r2, #8]
    break;
 800caea:	e7e2      	b.n	800cab2 <HAL_TIM_ConfigOCrefClear+0x2a>
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800caec:	68cb      	ldr	r3, [r1, #12]
 800caee:	b133      	cbz	r3, 800cafe <HAL_TIM_ConfigOCrefClear+0x76>
        htim->State = HAL_TIM_STATE_READY;
 800caf0:	2001      	movs	r0, #1
 800caf2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 800caf6:	2300      	movs	r3, #0
 800caf8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800cafc:	e018      	b.n	800cb30 <HAL_TIM_ConfigOCrefClear+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 800cafe:	690b      	ldr	r3, [r1, #16]
 800cb00:	688a      	ldr	r2, [r1, #8]
 800cb02:	2100      	movs	r1, #0
 800cb04:	6800      	ldr	r0, [r0, #0]
 800cb06:	f7ff ffb3 	bl	800ca70 <TIM_ETR_SetConfig>
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 800cb0a:	6822      	ldr	r2, [r4, #0]
 800cb0c:	6893      	ldr	r3, [r2, #8]
 800cb0e:	f043 0308 	orr.w	r3, r3, #8
 800cb12:	6093      	str	r3, [r2, #8]
      break;
 800cb14:	e7cd      	b.n	800cab2 <HAL_TIM_ConfigOCrefClear+0x2a>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb16:	682b      	ldr	r3, [r5, #0]
 800cb18:	b15b      	cbz	r3, 800cb32 <HAL_TIM_ConfigOCrefClear+0xaa>
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800cb1a:	6822      	ldr	r2, [r4, #0]
 800cb1c:	6993      	ldr	r3, [r2, #24]
 800cb1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb22:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800cb24:	2301      	movs	r3, #1
 800cb26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800cb30:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800cb32:	6822      	ldr	r2, [r4, #0]
 800cb34:	6993      	ldr	r3, [r2, #24]
 800cb36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb3a:	6193      	str	r3, [r2, #24]
 800cb3c:	e7f2      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb3e:	682b      	ldr	r3, [r5, #0]
 800cb40:	b12b      	cbz	r3, 800cb4e <HAL_TIM_ConfigOCrefClear+0xc6>
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800cb42:	6822      	ldr	r2, [r4, #0]
 800cb44:	6993      	ldr	r3, [r2, #24]
 800cb46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb4a:	6193      	str	r3, [r2, #24]
 800cb4c:	e7ea      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800cb4e:	6822      	ldr	r2, [r4, #0]
 800cb50:	6993      	ldr	r3, [r2, #24]
 800cb52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb56:	6193      	str	r3, [r2, #24]
 800cb58:	e7e4      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb5a:	682b      	ldr	r3, [r5, #0]
 800cb5c:	b12b      	cbz	r3, 800cb6a <HAL_TIM_ConfigOCrefClear+0xe2>
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800cb5e:	6822      	ldr	r2, [r4, #0]
 800cb60:	69d3      	ldr	r3, [r2, #28]
 800cb62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb66:	61d3      	str	r3, [r2, #28]
 800cb68:	e7dc      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800cb6a:	6822      	ldr	r2, [r4, #0]
 800cb6c:	69d3      	ldr	r3, [r2, #28]
 800cb6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb72:	61d3      	str	r3, [r2, #28]
 800cb74:	e7d6      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb76:	682b      	ldr	r3, [r5, #0]
 800cb78:	b12b      	cbz	r3, 800cb86 <HAL_TIM_ConfigOCrefClear+0xfe>
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800cb7a:	6822      	ldr	r2, [r4, #0]
 800cb7c:	69d3      	ldr	r3, [r2, #28]
 800cb7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb82:	61d3      	str	r3, [r2, #28]
 800cb84:	e7ce      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800cb86:	6822      	ldr	r2, [r4, #0]
 800cb88:	69d3      	ldr	r3, [r2, #28]
 800cb8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb8e:	61d3      	str	r3, [r2, #28]
 800cb90:	e7c8      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cb92:	682b      	ldr	r3, [r5, #0]
 800cb94:	b12b      	cbz	r3, 800cba2 <HAL_TIM_ConfigOCrefClear+0x11a>
        SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800cb96:	6822      	ldr	r2, [r4, #0]
 800cb98:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cb9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb9e:	6553      	str	r3, [r2, #84]	; 0x54
 800cba0:	e7c0      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800cba2:	6822      	ldr	r2, [r4, #0]
 800cba4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbaa:	6553      	str	r3, [r2, #84]	; 0x54
 800cbac:	e7ba      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cbae:	682b      	ldr	r3, [r5, #0]
 800cbb0:	b12b      	cbz	r3, 800cbbe <HAL_TIM_ConfigOCrefClear+0x136>
        SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 800cbb2:	6822      	ldr	r2, [r4, #0]
 800cbb4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbba:	6553      	str	r3, [r2, #84]	; 0x54
 800cbbc:	e7b2      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 800cbbe:	6822      	ldr	r2, [r4, #0]
 800cbc0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbc6:	6553      	str	r3, [r2, #84]	; 0x54
 800cbc8:	e7ac      	b.n	800cb24 <HAL_TIM_ConfigOCrefClear+0x9c>
  __HAL_LOCK(htim);
 800cbca:	2002      	movs	r0, #2
}
 800cbcc:	4770      	bx	lr
	...

0800cbd0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800cbd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	f000 809b 	beq.w	800cd10 <HAL_TIM_ConfigClockSource+0x140>
{
 800cbda:	b570      	push	{r4, r5, r6, lr}
 800cbdc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cbde:	2301      	movs	r3, #1
 800cbe0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cbe4:	2302      	movs	r3, #2
 800cbe6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800cbea:	6802      	ldr	r2, [r0, #0]
 800cbec:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbee:	4b49      	ldr	r3, [pc, #292]	; (800cd14 <HAL_TIM_ConfigClockSource+0x144>)
 800cbf0:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800cbf2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800cbf4:	680b      	ldr	r3, [r1, #0]
 800cbf6:	2b40      	cmp	r3, #64	; 0x40
 800cbf8:	d070      	beq.n	800ccdc <HAL_TIM_ConfigClockSource+0x10c>
 800cbfa:	d913      	bls.n	800cc24 <HAL_TIM_ConfigClockSource+0x54>
 800cbfc:	2b60      	cmp	r3, #96	; 0x60
 800cbfe:	d052      	beq.n	800cca6 <HAL_TIM_ConfigClockSource+0xd6>
 800cc00:	d923      	bls.n	800cc4a <HAL_TIM_ConfigClockSource+0x7a>
 800cc02:	2b70      	cmp	r3, #112	; 0x70
 800cc04:	d03d      	beq.n	800cc82 <HAL_TIM_ConfigClockSource+0xb2>
 800cc06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc0a:	d145      	bne.n	800cc98 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 800cc0c:	68cb      	ldr	r3, [r1, #12]
 800cc0e:	684a      	ldr	r2, [r1, #4]
 800cc10:	6889      	ldr	r1, [r1, #8]
 800cc12:	6820      	ldr	r0, [r4, #0]
 800cc14:	f7ff ff2c 	bl	800ca70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc18:	6822      	ldr	r2, [r4, #0]
 800cc1a:	6893      	ldr	r3, [r2, #8]
 800cc1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cc20:	6093      	str	r3, [r2, #8]
      break;
 800cc22:	e039      	b.n	800cc98 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800cc24:	2b10      	cmp	r3, #16
 800cc26:	d007      	beq.n	800cc38 <HAL_TIM_ConfigClockSource+0x68>
 800cc28:	d904      	bls.n	800cc34 <HAL_TIM_ConfigClockSource+0x64>
 800cc2a:	2b20      	cmp	r3, #32
 800cc2c:	d004      	beq.n	800cc38 <HAL_TIM_ConfigClockSource+0x68>
 800cc2e:	2b30      	cmp	r3, #48	; 0x30
 800cc30:	d002      	beq.n	800cc38 <HAL_TIM_ConfigClockSource+0x68>
 800cc32:	e031      	b.n	800cc98 <HAL_TIM_ConfigClockSource+0xc8>
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d12f      	bne.n	800cc98 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc38:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cc3a:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc40:	f043 0307 	orr.w	r3, r3, #7
 800cc44:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800cc46:	608b      	str	r3, [r1, #8]
 800cc48:	e026      	b.n	800cc98 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800cc4a:	2b50      	cmp	r3, #80	; 0x50
 800cc4c:	d124      	bne.n	800cc98 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	6848      	ldr	r0, [r1, #4]
 800cc52:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800cc54:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc56:	6a1d      	ldr	r5, [r3, #32]
 800cc58:	f025 0501 	bic.w	r5, r5, #1
 800cc5c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc5e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc64:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc68:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800cc6c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800cc6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc70:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc72:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cc74:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc7a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800cc7e:	6093      	str	r3, [r2, #8]
 800cc80:	e00a      	b.n	800cc98 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 800cc82:	68cb      	ldr	r3, [r1, #12]
 800cc84:	684a      	ldr	r2, [r1, #4]
 800cc86:	6889      	ldr	r1, [r1, #8]
 800cc88:	6820      	ldr	r0, [r4, #0]
 800cc8a:	f7ff fef1 	bl	800ca70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cc8e:	6822      	ldr	r2, [r4, #0]
 800cc90:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800cc96:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cc9e:	2000      	movs	r0, #0
 800cca0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800cca4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	684d      	ldr	r5, [r1, #4]
 800ccaa:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccac:	6a18      	ldr	r0, [r3, #32]
 800ccae:	f020 0010 	bic.w	r0, r0, #16
 800ccb2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccb4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800ccb6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ccb8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ccbc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ccc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800ccc4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ccc8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccca:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cccc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800ccce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ccd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccd4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800ccd8:	6093      	str	r3, [r2, #8]
 800ccda:	e7dd      	b.n	800cc98 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	6848      	ldr	r0, [r1, #4]
 800cce0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800cce2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cce4:	6a1d      	ldr	r5, [r3, #32]
 800cce6:	f025 0501 	bic.w	r5, r5, #1
 800ccea:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccec:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ccf2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ccf6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800ccfa:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800ccfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccfe:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cd00:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cd02:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd08:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800cd0c:	6093      	str	r3, [r2, #8]
 800cd0e:	e7c3      	b.n	800cc98 <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 800cd10:	2002      	movs	r0, #2
}
 800cd12:	4770      	bx	lr
 800cd14:	fffe0088 	.word	0xfffe0088

0800cd18 <TIM_SlaveTimer_SetConfig>:
{
 800cd18:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800cd1a:	6802      	ldr	r2, [r0, #0]
 800cd1c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800cd22:	684c      	ldr	r4, [r1, #4]
 800cd24:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 800cd26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd2a:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800cd2e:	680c      	ldr	r4, [r1, #0]
 800cd30:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 800cd32:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 800cd34:	684b      	ldr	r3, [r1, #4]
 800cd36:	2b50      	cmp	r3, #80	; 0x50
 800cd38:	d023      	beq.n	800cd82 <TIM_SlaveTimer_SetConfig+0x6a>
 800cd3a:	d90b      	bls.n	800cd54 <TIM_SlaveTimer_SetConfig+0x3c>
 800cd3c:	2b60      	cmp	r3, #96	; 0x60
 800cd3e:	d034      	beq.n	800cdaa <TIM_SlaveTimer_SetConfig+0x92>
 800cd40:	2b70      	cmp	r3, #112	; 0x70
 800cd42:	d147      	bne.n	800cdd4 <TIM_SlaveTimer_SetConfig+0xbc>
      TIM_ETR_SetConfig(htim->Instance,
 800cd44:	690b      	ldr	r3, [r1, #16]
 800cd46:	688a      	ldr	r2, [r1, #8]
 800cd48:	68c9      	ldr	r1, [r1, #12]
 800cd4a:	6800      	ldr	r0, [r0, #0]
 800cd4c:	f7ff fe90 	bl	800ca70 <TIM_ETR_SetConfig>
  return HAL_OK;
 800cd50:	2000      	movs	r0, #0
}
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800cd54:	2b40      	cmp	r3, #64	; 0x40
 800cd56:	d13d      	bne.n	800cdd4 <TIM_SlaveTimer_SetConfig+0xbc>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800cd58:	680b      	ldr	r3, [r1, #0]
 800cd5a:	2b05      	cmp	r3, #5
 800cd5c:	d03c      	beq.n	800cdd8 <TIM_SlaveTimer_SetConfig+0xc0>
      tmpccer = htim->Instance->CCER;
 800cd5e:	6803      	ldr	r3, [r0, #0]
 800cd60:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800cd62:	6a1a      	ldr	r2, [r3, #32]
 800cd64:	f022 0201 	bic.w	r2, r2, #1
 800cd68:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800cd6a:	6802      	ldr	r2, [r0, #0]
 800cd6c:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cd72:	6909      	ldr	r1, [r1, #16]
 800cd74:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800cd78:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800cd7a:	6803      	ldr	r3, [r0, #0]
 800cd7c:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 800cd7e:	2000      	movs	r0, #0
      break;
 800cd80:	e7e7      	b.n	800cd52 <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd82:	6803      	ldr	r3, [r0, #0]
 800cd84:	6888      	ldr	r0, [r1, #8]
 800cd86:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800cd88:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd8a:	6a1c      	ldr	r4, [r3, #32]
 800cd8c:	f024 0401 	bic.w	r4, r4, #1
 800cd90:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd92:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd98:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd9c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800cda0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800cda2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cda4:	6219      	str	r1, [r3, #32]
  return HAL_OK;
 800cda6:	2000      	movs	r0, #0
 800cda8:	e7d3      	b.n	800cd52 <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdaa:	6803      	ldr	r3, [r0, #0]
 800cdac:	688c      	ldr	r4, [r1, #8]
 800cdae:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdb0:	6a18      	ldr	r0, [r3, #32]
 800cdb2:	f020 0010 	bic.w	r0, r0, #16
 800cdb6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdb8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800cdba:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cdbc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cdc0:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cdc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800cdc8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800cdcc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdce:	621a      	str	r2, [r3, #32]
  return HAL_OK;
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	e7be      	b.n	800cd52 <TIM_SlaveTimer_SetConfig+0x3a>
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	e7bc      	b.n	800cd52 <TIM_SlaveTimer_SetConfig+0x3a>
        return HAL_ERROR;
 800cdd8:	2001      	movs	r0, #1
 800cdda:	e7ba      	b.n	800cd52 <TIM_SlaveTimer_SetConfig+0x3a>

0800cddc <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800cddc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d024      	beq.n	800ce2e <HAL_TIM_SlaveConfigSynchro+0x52>
{
 800cde4:	b510      	push	{r4, lr}
 800cde6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cde8:	2301      	movs	r3, #1
 800cdea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cdee:	2302      	movs	r3, #2
 800cdf0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800cdf4:	f7ff ff90 	bl	800cd18 <TIM_SlaveTimer_SetConfig>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	b988      	cbnz	r0, 800ce20 <HAL_TIM_SlaveConfigSynchro+0x44>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800cdfc:	6821      	ldr	r1, [r4, #0]
 800cdfe:	68ca      	ldr	r2, [r1, #12]
 800ce00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce04:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ce06:	6821      	ldr	r1, [r4, #0]
 800ce08:	68ca      	ldr	r2, [r1, #12]
 800ce0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce0e:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ce10:	2201      	movs	r2, #1
 800ce12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ce16:	2200      	movs	r2, #0
 800ce18:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800ce20:	2301      	movs	r3, #1
 800ce22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ce26:	2200      	movs	r2, #0
 800ce28:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800ce2c:	e7f6      	b.n	800ce1c <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 800ce2e:	2302      	movs	r3, #2
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	4770      	bx	lr

0800ce34 <HAL_TIM_SlaveConfigSynchro_IT>:
  __HAL_LOCK(htim);
 800ce34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d024      	beq.n	800ce86 <HAL_TIM_SlaveConfigSynchro_IT+0x52>
{
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800ce40:	2301      	movs	r3, #1
 800ce42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ce46:	2302      	movs	r3, #2
 800ce48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ce4c:	f7ff ff64 	bl	800cd18 <TIM_SlaveTimer_SetConfig>
 800ce50:	4603      	mov	r3, r0
 800ce52:	b988      	cbnz	r0, 800ce78 <HAL_TIM_SlaveConfigSynchro_IT+0x44>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800ce54:	6821      	ldr	r1, [r4, #0]
 800ce56:	68ca      	ldr	r2, [r1, #12]
 800ce58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce5c:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ce5e:	6821      	ldr	r1, [r4, #0]
 800ce60:	68ca      	ldr	r2, [r1, #12]
 800ce62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce66:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ce68:	2201      	movs	r2, #1
 800ce6a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800ce84:	e7f6      	b.n	800ce74 <HAL_TIM_SlaveConfigSynchro_IT+0x40>
  __HAL_LOCK(htim);
 800ce86:	2302      	movs	r3, #2
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	4770      	bx	lr

0800ce8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ce8c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce8e:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce92:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce94:	2401      	movs	r4, #1
 800ce96:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800ce98:	ea23 0304 	bic.w	r3, r3, r4
 800ce9c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce9e:	6a03      	ldr	r3, [r0, #32]
 800cea0:	408a      	lsls	r2, r1
 800cea2:	431a      	orrs	r2, r3
 800cea4:	6202      	str	r2, [r0, #32]
}
 800cea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_TIM_OC_Start>:
{
 800ceac:	b510      	push	{r4, lr}
 800ceae:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	6800      	ldr	r0, [r0, #0]
 800ceb4:	f7ff ffea 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	4a13      	ldr	r2, [pc, #76]	; (800cf08 <HAL_TIM_OC_Start+0x5c>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d00f      	beq.n	800cee0 <HAL_TIM_OC_Start+0x34>
 800cec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d00b      	beq.n	800cee0 <HAL_TIM_OC_Start+0x34>
 800cec8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cecc:	4293      	cmp	r3, r2
 800cece:	d007      	beq.n	800cee0 <HAL_TIM_OC_Start+0x34>
 800ced0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d003      	beq.n	800cee0 <HAL_TIM_OC_Start+0x34>
 800ced8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cedc:	4293      	cmp	r3, r2
 800cede:	d103      	bne.n	800cee8 <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_MOE_ENABLE(htim);
 800cee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cee6:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cee8:	6822      	ldr	r2, [r4, #0]
 800ceea:	6891      	ldr	r1, [r2, #8]
 800ceec:	4b07      	ldr	r3, [pc, #28]	; (800cf0c <HAL_TIM_OC_Start+0x60>)
 800ceee:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cef0:	2b06      	cmp	r3, #6
 800cef2:	d006      	beq.n	800cf02 <HAL_TIM_OC_Start+0x56>
 800cef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cef8:	d003      	beq.n	800cf02 <HAL_TIM_OC_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800cefa:	6813      	ldr	r3, [r2, #0]
 800cefc:	f043 0301 	orr.w	r3, r3, #1
 800cf00:	6013      	str	r3, [r2, #0]
}
 800cf02:	2000      	movs	r0, #0
 800cf04:	bd10      	pop	{r4, pc}
 800cf06:	bf00      	nop
 800cf08:	40012c00 	.word	0x40012c00
 800cf0c:	00010007 	.word	0x00010007

0800cf10 <HAL_TIM_OC_Stop>:
{
 800cf10:	b510      	push	{r4, lr}
 800cf12:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cf14:	2200      	movs	r2, #0
 800cf16:	6800      	ldr	r0, [r0, #0]
 800cf18:	f7ff ffb8 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	4a19      	ldr	r2, [pc, #100]	; (800cf84 <HAL_TIM_OC_Stop+0x74>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d00f      	beq.n	800cf44 <HAL_TIM_OC_Stop+0x34>
 800cf24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d00b      	beq.n	800cf44 <HAL_TIM_OC_Stop+0x34>
 800cf2c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d007      	beq.n	800cf44 <HAL_TIM_OC_Stop+0x34>
 800cf34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d003      	beq.n	800cf44 <HAL_TIM_OC_Stop+0x34>
 800cf3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d10d      	bne.n	800cf60 <HAL_TIM_OC_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 800cf44:	6a19      	ldr	r1, [r3, #32]
 800cf46:	f241 1211 	movw	r2, #4369	; 0x1111
 800cf4a:	4211      	tst	r1, r2
 800cf4c:	d108      	bne.n	800cf60 <HAL_TIM_OC_Stop+0x50>
 800cf4e:	6a19      	ldr	r1, [r3, #32]
 800cf50:	f240 4244 	movw	r2, #1092	; 0x444
 800cf54:	4211      	tst	r1, r2
 800cf56:	d103      	bne.n	800cf60 <HAL_TIM_OC_Stop+0x50>
 800cf58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf5e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	6a19      	ldr	r1, [r3, #32]
 800cf64:	f241 1211 	movw	r2, #4369	; 0x1111
 800cf68:	4211      	tst	r1, r2
 800cf6a:	d108      	bne.n	800cf7e <HAL_TIM_OC_Stop+0x6e>
 800cf6c:	6a19      	ldr	r1, [r3, #32]
 800cf6e:	f240 4244 	movw	r2, #1092	; 0x444
 800cf72:	4211      	tst	r1, r2
 800cf74:	d103      	bne.n	800cf7e <HAL_TIM_OC_Stop+0x6e>
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	f022 0201 	bic.w	r2, r2, #1
 800cf7c:	601a      	str	r2, [r3, #0]
}
 800cf7e:	2000      	movs	r0, #0
 800cf80:	bd10      	pop	{r4, pc}
 800cf82:	bf00      	nop
 800cf84:	40012c00 	.word	0x40012c00

0800cf88 <HAL_TIM_OC_Start_IT>:
{
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	4604      	mov	r4, r0
  switch (Channel)
 800cf8c:	290c      	cmp	r1, #12
 800cf8e:	d80d      	bhi.n	800cfac <HAL_TIM_OC_Start_IT+0x24>
 800cf90:	e8df f001 	tbb	[pc, r1]
 800cf94:	0c0c0c07 	.word	0x0c0c0c07
 800cf98:	0c0c0c37 	.word	0x0c0c0c37
 800cf9c:	0c0c0c3d 	.word	0x0c0c0c3d
 800cfa0:	43          	.byte	0x43
 800cfa1:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cfa2:	6802      	ldr	r2, [r0, #0]
 800cfa4:	68d3      	ldr	r3, [r2, #12]
 800cfa6:	f043 0302 	orr.w	r3, r3, #2
 800cfaa:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cfac:	2201      	movs	r2, #1
 800cfae:	6820      	ldr	r0, [r4, #0]
 800cfb0:	f7ff ff6c 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	4a1c      	ldr	r2, [pc, #112]	; (800d028 <HAL_TIM_OC_Start_IT+0xa0>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d00f      	beq.n	800cfdc <HAL_TIM_OC_Start_IT+0x54>
 800cfbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d00b      	beq.n	800cfdc <HAL_TIM_OC_Start_IT+0x54>
 800cfc4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d007      	beq.n	800cfdc <HAL_TIM_OC_Start_IT+0x54>
 800cfcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d003      	beq.n	800cfdc <HAL_TIM_OC_Start_IT+0x54>
 800cfd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d103      	bne.n	800cfe4 <HAL_TIM_OC_Start_IT+0x5c>
    __HAL_TIM_MOE_ENABLE(htim);
 800cfdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfe2:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfe4:	6822      	ldr	r2, [r4, #0]
 800cfe6:	6891      	ldr	r1, [r2, #8]
 800cfe8:	4b10      	ldr	r3, [pc, #64]	; (800d02c <HAL_TIM_OC_Start_IT+0xa4>)
 800cfea:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfec:	2b06      	cmp	r3, #6
 800cfee:	d006      	beq.n	800cffe <HAL_TIM_OC_Start_IT+0x76>
 800cff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cff4:	d003      	beq.n	800cffe <HAL_TIM_OC_Start_IT+0x76>
    __HAL_TIM_ENABLE(htim);
 800cff6:	6813      	ldr	r3, [r2, #0]
 800cff8:	f043 0301 	orr.w	r3, r3, #1
 800cffc:	6013      	str	r3, [r2, #0]
}
 800cffe:	2000      	movs	r0, #0
 800d000:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d002:	6802      	ldr	r2, [r0, #0]
 800d004:	68d3      	ldr	r3, [r2, #12]
 800d006:	f043 0304 	orr.w	r3, r3, #4
 800d00a:	60d3      	str	r3, [r2, #12]
      break;
 800d00c:	e7ce      	b.n	800cfac <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d00e:	6802      	ldr	r2, [r0, #0]
 800d010:	68d3      	ldr	r3, [r2, #12]
 800d012:	f043 0308 	orr.w	r3, r3, #8
 800d016:	60d3      	str	r3, [r2, #12]
      break;
 800d018:	e7c8      	b.n	800cfac <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d01a:	6802      	ldr	r2, [r0, #0]
 800d01c:	68d3      	ldr	r3, [r2, #12]
 800d01e:	f043 0310 	orr.w	r3, r3, #16
 800d022:	60d3      	str	r3, [r2, #12]
      break;
 800d024:	e7c2      	b.n	800cfac <HAL_TIM_OC_Start_IT+0x24>
 800d026:	bf00      	nop
 800d028:	40012c00 	.word	0x40012c00
 800d02c:	00010007 	.word	0x00010007

0800d030 <HAL_TIM_OC_Stop_IT>:
{
 800d030:	b510      	push	{r4, lr}
 800d032:	4604      	mov	r4, r0
  switch (Channel)
 800d034:	290c      	cmp	r1, #12
 800d036:	d80d      	bhi.n	800d054 <HAL_TIM_OC_Stop_IT+0x24>
 800d038:	e8df f001 	tbb	[pc, r1]
 800d03c:	0c0c0c07 	.word	0x0c0c0c07
 800d040:	0c0c0c43 	.word	0x0c0c0c43
 800d044:	0c0c0c49 	.word	0x0c0c0c49
 800d048:	4f          	.byte	0x4f
 800d049:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d04a:	6802      	ldr	r2, [r0, #0]
 800d04c:	68d3      	ldr	r3, [r2, #12]
 800d04e:	f023 0302 	bic.w	r3, r3, #2
 800d052:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d054:	2200      	movs	r2, #0
 800d056:	6820      	ldr	r0, [r4, #0]
 800d058:	f7ff ff18 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d05c:	6823      	ldr	r3, [r4, #0]
 800d05e:	4a22      	ldr	r2, [pc, #136]	; (800d0e8 <HAL_TIM_OC_Stop_IT+0xb8>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d00f      	beq.n	800d084 <HAL_TIM_OC_Stop_IT+0x54>
 800d064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d068:	4293      	cmp	r3, r2
 800d06a:	d00b      	beq.n	800d084 <HAL_TIM_OC_Stop_IT+0x54>
 800d06c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d070:	4293      	cmp	r3, r2
 800d072:	d007      	beq.n	800d084 <HAL_TIM_OC_Stop_IT+0x54>
 800d074:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d078:	4293      	cmp	r3, r2
 800d07a:	d003      	beq.n	800d084 <HAL_TIM_OC_Stop_IT+0x54>
 800d07c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d080:	4293      	cmp	r3, r2
 800d082:	d10d      	bne.n	800d0a0 <HAL_TIM_OC_Stop_IT+0x70>
    __HAL_TIM_MOE_DISABLE(htim);
 800d084:	6a19      	ldr	r1, [r3, #32]
 800d086:	f241 1211 	movw	r2, #4369	; 0x1111
 800d08a:	4211      	tst	r1, r2
 800d08c:	d108      	bne.n	800d0a0 <HAL_TIM_OC_Stop_IT+0x70>
 800d08e:	6a19      	ldr	r1, [r3, #32]
 800d090:	f240 4244 	movw	r2, #1092	; 0x444
 800d094:	4211      	tst	r1, r2
 800d096:	d103      	bne.n	800d0a0 <HAL_TIM_OC_Stop_IT+0x70>
 800d098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d09a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d09e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	6a19      	ldr	r1, [r3, #32]
 800d0a4:	f241 1211 	movw	r2, #4369	; 0x1111
 800d0a8:	4211      	tst	r1, r2
 800d0aa:	d108      	bne.n	800d0be <HAL_TIM_OC_Stop_IT+0x8e>
 800d0ac:	6a19      	ldr	r1, [r3, #32]
 800d0ae:	f240 4244 	movw	r2, #1092	; 0x444
 800d0b2:	4211      	tst	r1, r2
 800d0b4:	d103      	bne.n	800d0be <HAL_TIM_OC_Stop_IT+0x8e>
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	f022 0201 	bic.w	r2, r2, #1
 800d0bc:	601a      	str	r2, [r3, #0]
}
 800d0be:	2000      	movs	r0, #0
 800d0c0:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d0c2:	6802      	ldr	r2, [r0, #0]
 800d0c4:	68d3      	ldr	r3, [r2, #12]
 800d0c6:	f023 0304 	bic.w	r3, r3, #4
 800d0ca:	60d3      	str	r3, [r2, #12]
      break;
 800d0cc:	e7c2      	b.n	800d054 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d0ce:	6802      	ldr	r2, [r0, #0]
 800d0d0:	68d3      	ldr	r3, [r2, #12]
 800d0d2:	f023 0308 	bic.w	r3, r3, #8
 800d0d6:	60d3      	str	r3, [r2, #12]
      break;
 800d0d8:	e7bc      	b.n	800d054 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d0da:	6802      	ldr	r2, [r0, #0]
 800d0dc:	68d3      	ldr	r3, [r2, #12]
 800d0de:	f023 0310 	bic.w	r3, r3, #16
 800d0e2:	60d3      	str	r3, [r2, #12]
      break;
 800d0e4:	e7b6      	b.n	800d054 <HAL_TIM_OC_Stop_IT+0x24>
 800d0e6:	bf00      	nop
 800d0e8:	40012c00 	.word	0x40012c00

0800d0ec <HAL_TIM_OC_Start_DMA>:
{
 800d0ec:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800d0ee:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d0f2:	b2f6      	uxtb	r6, r6
 800d0f4:	2e02      	cmp	r6, #2
 800d0f6:	f000 80a1 	beq.w	800d23c <HAL_TIM_OC_Start_DMA+0x150>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800d0fa:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d0fe:	b2f6      	uxtb	r6, r6
 800d100:	2e01      	cmp	r6, #1
 800d102:	d00d      	beq.n	800d120 <HAL_TIM_OC_Start_DMA+0x34>
 800d104:	4616      	mov	r6, r2
 800d106:	460d      	mov	r5, r1
 800d108:	4604      	mov	r4, r0
  switch (Channel)
 800d10a:	290c      	cmp	r1, #12
 800d10c:	d827      	bhi.n	800d15e <HAL_TIM_OC_Start_DMA+0x72>
 800d10e:	e8df f001 	tbb	[pc, r1]
 800d112:	2610      	.short	0x2610
 800d114:	26522626 	.word	0x26522626
 800d118:	26692626 	.word	0x26692626
 800d11c:	2626      	.short	0x2626
 800d11e:	7f          	.byte	0x7f
 800d11f:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800d120:	b11a      	cbz	r2, 800d12a <HAL_TIM_OC_Start_DMA+0x3e>
      htim->State = HAL_TIM_STATE_BUSY;
 800d122:	2402      	movs	r4, #2
 800d124:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800d128:	e7ec      	b.n	800d104 <HAL_TIM_OC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d0f9      	beq.n	800d122 <HAL_TIM_OC_Start_DMA+0x36>
      return HAL_ERROR;
 800d12e:	2001      	movs	r0, #1
 800d130:	e040      	b.n	800d1b4 <HAL_TIM_OC_Start_DMA+0xc8>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d132:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d134:	4948      	ldr	r1, [pc, #288]	; (800d258 <HAL_TIM_OC_Start_DMA+0x16c>)
 800d136:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d138:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d13a:	4948      	ldr	r1, [pc, #288]	; (800d25c <HAL_TIM_OC_Start_DMA+0x170>)
 800d13c:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d13e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d140:	4947      	ldr	r1, [pc, #284]	; (800d260 <HAL_TIM_OC_Start_DMA+0x174>)
 800d142:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800d144:	6802      	ldr	r2, [r0, #0]
 800d146:	3234      	adds	r2, #52	; 0x34
 800d148:	4631      	mov	r1, r6
 800d14a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d14c:	f7f5 fb17 	bl	800277e <HAL_DMA_Start_IT>
 800d150:	2800      	cmp	r0, #0
 800d152:	d175      	bne.n	800d240 <HAL_TIM_OC_Start_DMA+0x154>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d154:	6822      	ldr	r2, [r4, #0]
 800d156:	68d3      	ldr	r3, [r2, #12]
 800d158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d15c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d15e:	2201      	movs	r2, #1
 800d160:	4629      	mov	r1, r5
 800d162:	6820      	ldr	r0, [r4, #0]
 800d164:	f7ff fe92 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d168:	6823      	ldr	r3, [r4, #0]
 800d16a:	4a3e      	ldr	r2, [pc, #248]	; (800d264 <HAL_TIM_OC_Start_DMA+0x178>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d00f      	beq.n	800d190 <HAL_TIM_OC_Start_DMA+0xa4>
 800d170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d174:	4293      	cmp	r3, r2
 800d176:	d00b      	beq.n	800d190 <HAL_TIM_OC_Start_DMA+0xa4>
 800d178:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d007      	beq.n	800d190 <HAL_TIM_OC_Start_DMA+0xa4>
 800d180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d184:	4293      	cmp	r3, r2
 800d186:	d003      	beq.n	800d190 <HAL_TIM_OC_Start_DMA+0xa4>
 800d188:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d103      	bne.n	800d198 <HAL_TIM_OC_Start_DMA+0xac>
    __HAL_TIM_MOE_ENABLE(htim);
 800d190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d196:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d198:	6822      	ldr	r2, [r4, #0]
 800d19a:	6891      	ldr	r1, [r2, #8]
 800d19c:	4b32      	ldr	r3, [pc, #200]	; (800d268 <HAL_TIM_OC_Start_DMA+0x17c>)
 800d19e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1a0:	2b06      	cmp	r3, #6
 800d1a2:	d055      	beq.n	800d250 <HAL_TIM_OC_Start_DMA+0x164>
 800d1a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1a8:	d054      	beq.n	800d254 <HAL_TIM_OC_Start_DMA+0x168>
    __HAL_TIM_ENABLE(htim);
 800d1aa:	6813      	ldr	r3, [r2, #0]
 800d1ac:	f043 0301 	orr.w	r3, r3, #1
 800d1b0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d1b2:	2000      	movs	r0, #0
}
 800d1b4:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d1b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1b8:	4927      	ldr	r1, [pc, #156]	; (800d258 <HAL_TIM_OC_Start_DMA+0x16c>)
 800d1ba:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d1bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1be:	4927      	ldr	r1, [pc, #156]	; (800d25c <HAL_TIM_OC_Start_DMA+0x170>)
 800d1c0:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d1c2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1c4:	4926      	ldr	r1, [pc, #152]	; (800d260 <HAL_TIM_OC_Start_DMA+0x174>)
 800d1c6:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800d1c8:	6802      	ldr	r2, [r0, #0]
 800d1ca:	3238      	adds	r2, #56	; 0x38
 800d1cc:	4631      	mov	r1, r6
 800d1ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d1d0:	f7f5 fad5 	bl	800277e <HAL_DMA_Start_IT>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	d135      	bne.n	800d244 <HAL_TIM_OC_Start_DMA+0x158>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d1d8:	6822      	ldr	r2, [r4, #0]
 800d1da:	68d3      	ldr	r3, [r2, #12]
 800d1dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d1e0:	60d3      	str	r3, [r2, #12]
      break;
 800d1e2:	e7bc      	b.n	800d15e <HAL_TIM_OC_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d1e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d1e6:	491c      	ldr	r1, [pc, #112]	; (800d258 <HAL_TIM_OC_Start_DMA+0x16c>)
 800d1e8:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d1ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d1ec:	491b      	ldr	r1, [pc, #108]	; (800d25c <HAL_TIM_OC_Start_DMA+0x170>)
 800d1ee:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d1f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d1f2:	491b      	ldr	r1, [pc, #108]	; (800d260 <HAL_TIM_OC_Start_DMA+0x174>)
 800d1f4:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800d1f6:	6802      	ldr	r2, [r0, #0]
 800d1f8:	323c      	adds	r2, #60	; 0x3c
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d1fe:	f7f5 fabe 	bl	800277e <HAL_DMA_Start_IT>
 800d202:	bb08      	cbnz	r0, 800d248 <HAL_TIM_OC_Start_DMA+0x15c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d204:	6822      	ldr	r2, [r4, #0]
 800d206:	68d3      	ldr	r3, [r2, #12]
 800d208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d20c:	60d3      	str	r3, [r2, #12]
      break;
 800d20e:	e7a6      	b.n	800d15e <HAL_TIM_OC_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d210:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d212:	4911      	ldr	r1, [pc, #68]	; (800d258 <HAL_TIM_OC_Start_DMA+0x16c>)
 800d214:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d216:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d218:	4910      	ldr	r1, [pc, #64]	; (800d25c <HAL_TIM_OC_Start_DMA+0x170>)
 800d21a:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d21c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d21e:	4910      	ldr	r1, [pc, #64]	; (800d260 <HAL_TIM_OC_Start_DMA+0x174>)
 800d220:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800d222:	6802      	ldr	r2, [r0, #0]
 800d224:	3240      	adds	r2, #64	; 0x40
 800d226:	4631      	mov	r1, r6
 800d228:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d22a:	f7f5 faa8 	bl	800277e <HAL_DMA_Start_IT>
 800d22e:	b968      	cbnz	r0, 800d24c <HAL_TIM_OC_Start_DMA+0x160>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d230:	6822      	ldr	r2, [r4, #0]
 800d232:	68d3      	ldr	r3, [r2, #12]
 800d234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d238:	60d3      	str	r3, [r2, #12]
      break;
 800d23a:	e790      	b.n	800d15e <HAL_TIM_OC_Start_DMA+0x72>
    return HAL_BUSY;
 800d23c:	2002      	movs	r0, #2
 800d23e:	e7b9      	b.n	800d1b4 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800d240:	2001      	movs	r0, #1
 800d242:	e7b7      	b.n	800d1b4 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800d244:	2001      	movs	r0, #1
 800d246:	e7b5      	b.n	800d1b4 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800d248:	2001      	movs	r0, #1
 800d24a:	e7b3      	b.n	800d1b4 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800d24c:	2001      	movs	r0, #1
 800d24e:	e7b1      	b.n	800d1b4 <HAL_TIM_OC_Start_DMA+0xc8>
  return HAL_OK;
 800d250:	2000      	movs	r0, #0
 800d252:	e7af      	b.n	800d1b4 <HAL_TIM_OC_Start_DMA+0xc8>
 800d254:	2000      	movs	r0, #0
 800d256:	e7ad      	b.n	800d1b4 <HAL_TIM_OC_Start_DMA+0xc8>
 800d258:	0800bff9 	.word	0x0800bff9
 800d25c:	0800c03f 	.word	0x0800c03f
 800d260:	0800c243 	.word	0x0800c243
 800d264:	40012c00 	.word	0x40012c00
 800d268:	00010007 	.word	0x00010007

0800d26c <HAL_TIM_OC_Stop_DMA>:
{
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4604      	mov	r4, r0
 800d270:	460d      	mov	r5, r1
  switch (Channel)
 800d272:	290c      	cmp	r1, #12
 800d274:	d810      	bhi.n	800d298 <HAL_TIM_OC_Stop_DMA+0x2c>
 800d276:	e8df f001 	tbb	[pc, r1]
 800d27a:	0f07      	.short	0x0f07
 800d27c:	0f4a0f0f 	.word	0x0f4a0f0f
 800d280:	0f530f0f 	.word	0x0f530f0f
 800d284:	0f0f      	.short	0x0f0f
 800d286:	5c          	.byte	0x5c
 800d287:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d288:	6802      	ldr	r2, [r0, #0]
 800d28a:	68d3      	ldr	r3, [r2, #12]
 800d28c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d290:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d292:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d294:	f7f5 fae5 	bl	8002862 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d298:	2200      	movs	r2, #0
 800d29a:	4629      	mov	r1, r5
 800d29c:	6820      	ldr	r0, [r4, #0]
 800d29e:	f7ff fdf5 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	4a27      	ldr	r2, [pc, #156]	; (800d344 <HAL_TIM_OC_Stop_DMA+0xd8>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d00f      	beq.n	800d2ca <HAL_TIM_OC_Stop_DMA+0x5e>
 800d2aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d00b      	beq.n	800d2ca <HAL_TIM_OC_Stop_DMA+0x5e>
 800d2b2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d007      	beq.n	800d2ca <HAL_TIM_OC_Stop_DMA+0x5e>
 800d2ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d003      	beq.n	800d2ca <HAL_TIM_OC_Stop_DMA+0x5e>
 800d2c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d10d      	bne.n	800d2e6 <HAL_TIM_OC_Stop_DMA+0x7a>
    __HAL_TIM_MOE_DISABLE(htim);
 800d2ca:	6a19      	ldr	r1, [r3, #32]
 800d2cc:	f241 1211 	movw	r2, #4369	; 0x1111
 800d2d0:	4211      	tst	r1, r2
 800d2d2:	d108      	bne.n	800d2e6 <HAL_TIM_OC_Stop_DMA+0x7a>
 800d2d4:	6a19      	ldr	r1, [r3, #32]
 800d2d6:	f240 4244 	movw	r2, #1092	; 0x444
 800d2da:	4211      	tst	r1, r2
 800d2dc:	d103      	bne.n	800d2e6 <HAL_TIM_OC_Stop_DMA+0x7a>
 800d2de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d2e4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d2e6:	6823      	ldr	r3, [r4, #0]
 800d2e8:	6a19      	ldr	r1, [r3, #32]
 800d2ea:	f241 1211 	movw	r2, #4369	; 0x1111
 800d2ee:	4211      	tst	r1, r2
 800d2f0:	d108      	bne.n	800d304 <HAL_TIM_OC_Stop_DMA+0x98>
 800d2f2:	6a19      	ldr	r1, [r3, #32]
 800d2f4:	f240 4244 	movw	r2, #1092	; 0x444
 800d2f8:	4211      	tst	r1, r2
 800d2fa:	d103      	bne.n	800d304 <HAL_TIM_OC_Stop_DMA+0x98>
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	f022 0201 	bic.w	r2, r2, #1
 800d302:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d304:	2301      	movs	r3, #1
 800d306:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d30a:	2000      	movs	r0, #0
 800d30c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d30e:	6802      	ldr	r2, [r0, #0]
 800d310:	68d3      	ldr	r3, [r2, #12]
 800d312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d316:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d318:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d31a:	f7f5 faa2 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800d31e:	e7bb      	b.n	800d298 <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d320:	6802      	ldr	r2, [r0, #0]
 800d322:	68d3      	ldr	r3, [r2, #12]
 800d324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d328:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d32a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d32c:	f7f5 fa99 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800d330:	e7b2      	b.n	800d298 <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d332:	6802      	ldr	r2, [r0, #0]
 800d334:	68d3      	ldr	r3, [r2, #12]
 800d336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d33a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d33c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d33e:	f7f5 fa90 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800d342:	e7a9      	b.n	800d298 <HAL_TIM_OC_Stop_DMA+0x2c>
 800d344:	40012c00 	.word	0x40012c00

0800d348 <HAL_TIM_PWM_Start>:
{
 800d348:	b510      	push	{r4, lr}
 800d34a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d34c:	2201      	movs	r2, #1
 800d34e:	6800      	ldr	r0, [r0, #0]
 800d350:	f7ff fd9c 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d354:	6823      	ldr	r3, [r4, #0]
 800d356:	4a13      	ldr	r2, [pc, #76]	; (800d3a4 <HAL_TIM_PWM_Start+0x5c>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d00f      	beq.n	800d37c <HAL_TIM_PWM_Start+0x34>
 800d35c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d360:	4293      	cmp	r3, r2
 800d362:	d00b      	beq.n	800d37c <HAL_TIM_PWM_Start+0x34>
 800d364:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d368:	4293      	cmp	r3, r2
 800d36a:	d007      	beq.n	800d37c <HAL_TIM_PWM_Start+0x34>
 800d36c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d370:	4293      	cmp	r3, r2
 800d372:	d003      	beq.n	800d37c <HAL_TIM_PWM_Start+0x34>
 800d374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d378:	4293      	cmp	r3, r2
 800d37a:	d103      	bne.n	800d384 <HAL_TIM_PWM_Start+0x3c>
    __HAL_TIM_MOE_ENABLE(htim);
 800d37c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d37e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d382:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d384:	6822      	ldr	r2, [r4, #0]
 800d386:	6891      	ldr	r1, [r2, #8]
 800d388:	4b07      	ldr	r3, [pc, #28]	; (800d3a8 <HAL_TIM_PWM_Start+0x60>)
 800d38a:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d38c:	2b06      	cmp	r3, #6
 800d38e:	d006      	beq.n	800d39e <HAL_TIM_PWM_Start+0x56>
 800d390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d394:	d003      	beq.n	800d39e <HAL_TIM_PWM_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800d396:	6813      	ldr	r3, [r2, #0]
 800d398:	f043 0301 	orr.w	r3, r3, #1
 800d39c:	6013      	str	r3, [r2, #0]
}
 800d39e:	2000      	movs	r0, #0
 800d3a0:	bd10      	pop	{r4, pc}
 800d3a2:	bf00      	nop
 800d3a4:	40012c00 	.word	0x40012c00
 800d3a8:	00010007 	.word	0x00010007

0800d3ac <HAL_TIM_PWM_Stop>:
{
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	6800      	ldr	r0, [r0, #0]
 800d3b4:	f7ff fd6a 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	4a1a      	ldr	r2, [pc, #104]	; (800d424 <HAL_TIM_PWM_Stop+0x78>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d00f      	beq.n	800d3e0 <HAL_TIM_PWM_Stop+0x34>
 800d3c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d00b      	beq.n	800d3e0 <HAL_TIM_PWM_Stop+0x34>
 800d3c8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d007      	beq.n	800d3e0 <HAL_TIM_PWM_Stop+0x34>
 800d3d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d003      	beq.n	800d3e0 <HAL_TIM_PWM_Stop+0x34>
 800d3d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d10d      	bne.n	800d3fc <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 800d3e0:	6a19      	ldr	r1, [r3, #32]
 800d3e2:	f241 1211 	movw	r2, #4369	; 0x1111
 800d3e6:	4211      	tst	r1, r2
 800d3e8:	d108      	bne.n	800d3fc <HAL_TIM_PWM_Stop+0x50>
 800d3ea:	6a19      	ldr	r1, [r3, #32]
 800d3ec:	f240 4244 	movw	r2, #1092	; 0x444
 800d3f0:	4211      	tst	r1, r2
 800d3f2:	d103      	bne.n	800d3fc <HAL_TIM_PWM_Stop+0x50>
 800d3f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d3fa:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	6a19      	ldr	r1, [r3, #32]
 800d400:	f241 1211 	movw	r2, #4369	; 0x1111
 800d404:	4211      	tst	r1, r2
 800d406:	d108      	bne.n	800d41a <HAL_TIM_PWM_Stop+0x6e>
 800d408:	6a19      	ldr	r1, [r3, #32]
 800d40a:	f240 4244 	movw	r2, #1092	; 0x444
 800d40e:	4211      	tst	r1, r2
 800d410:	d103      	bne.n	800d41a <HAL_TIM_PWM_Stop+0x6e>
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	f022 0201 	bic.w	r2, r2, #1
 800d418:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d41a:	2301      	movs	r3, #1
 800d41c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d420:	2000      	movs	r0, #0
 800d422:	bd10      	pop	{r4, pc}
 800d424:	40012c00 	.word	0x40012c00

0800d428 <HAL_TIM_PWM_Start_IT>:
{
 800d428:	b510      	push	{r4, lr}
 800d42a:	4604      	mov	r4, r0
  switch (Channel)
 800d42c:	290c      	cmp	r1, #12
 800d42e:	d80d      	bhi.n	800d44c <HAL_TIM_PWM_Start_IT+0x24>
 800d430:	e8df f001 	tbb	[pc, r1]
 800d434:	0c0c0c07 	.word	0x0c0c0c07
 800d438:	0c0c0c37 	.word	0x0c0c0c37
 800d43c:	0c0c0c3d 	.word	0x0c0c0c3d
 800d440:	43          	.byte	0x43
 800d441:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d442:	6802      	ldr	r2, [r0, #0]
 800d444:	68d3      	ldr	r3, [r2, #12]
 800d446:	f043 0302 	orr.w	r3, r3, #2
 800d44a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d44c:	2201      	movs	r2, #1
 800d44e:	6820      	ldr	r0, [r4, #0]
 800d450:	f7ff fd1c 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	4a1c      	ldr	r2, [pc, #112]	; (800d4c8 <HAL_TIM_PWM_Start_IT+0xa0>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d00f      	beq.n	800d47c <HAL_TIM_PWM_Start_IT+0x54>
 800d45c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d460:	4293      	cmp	r3, r2
 800d462:	d00b      	beq.n	800d47c <HAL_TIM_PWM_Start_IT+0x54>
 800d464:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d468:	4293      	cmp	r3, r2
 800d46a:	d007      	beq.n	800d47c <HAL_TIM_PWM_Start_IT+0x54>
 800d46c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d470:	4293      	cmp	r3, r2
 800d472:	d003      	beq.n	800d47c <HAL_TIM_PWM_Start_IT+0x54>
 800d474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d478:	4293      	cmp	r3, r2
 800d47a:	d103      	bne.n	800d484 <HAL_TIM_PWM_Start_IT+0x5c>
    __HAL_TIM_MOE_ENABLE(htim);
 800d47c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d47e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d482:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d484:	6822      	ldr	r2, [r4, #0]
 800d486:	6891      	ldr	r1, [r2, #8]
 800d488:	4b10      	ldr	r3, [pc, #64]	; (800d4cc <HAL_TIM_PWM_Start_IT+0xa4>)
 800d48a:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d48c:	2b06      	cmp	r3, #6
 800d48e:	d006      	beq.n	800d49e <HAL_TIM_PWM_Start_IT+0x76>
 800d490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d494:	d003      	beq.n	800d49e <HAL_TIM_PWM_Start_IT+0x76>
    __HAL_TIM_ENABLE(htim);
 800d496:	6813      	ldr	r3, [r2, #0]
 800d498:	f043 0301 	orr.w	r3, r3, #1
 800d49c:	6013      	str	r3, [r2, #0]
}
 800d49e:	2000      	movs	r0, #0
 800d4a0:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d4a2:	6802      	ldr	r2, [r0, #0]
 800d4a4:	68d3      	ldr	r3, [r2, #12]
 800d4a6:	f043 0304 	orr.w	r3, r3, #4
 800d4aa:	60d3      	str	r3, [r2, #12]
      break;
 800d4ac:	e7ce      	b.n	800d44c <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d4ae:	6802      	ldr	r2, [r0, #0]
 800d4b0:	68d3      	ldr	r3, [r2, #12]
 800d4b2:	f043 0308 	orr.w	r3, r3, #8
 800d4b6:	60d3      	str	r3, [r2, #12]
      break;
 800d4b8:	e7c8      	b.n	800d44c <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d4ba:	6802      	ldr	r2, [r0, #0]
 800d4bc:	68d3      	ldr	r3, [r2, #12]
 800d4be:	f043 0310 	orr.w	r3, r3, #16
 800d4c2:	60d3      	str	r3, [r2, #12]
      break;
 800d4c4:	e7c2      	b.n	800d44c <HAL_TIM_PWM_Start_IT+0x24>
 800d4c6:	bf00      	nop
 800d4c8:	40012c00 	.word	0x40012c00
 800d4cc:	00010007 	.word	0x00010007

0800d4d0 <HAL_TIM_PWM_Stop_IT>:
{
 800d4d0:	b510      	push	{r4, lr}
 800d4d2:	4604      	mov	r4, r0
  switch (Channel)
 800d4d4:	290c      	cmp	r1, #12
 800d4d6:	d80d      	bhi.n	800d4f4 <HAL_TIM_PWM_Stop_IT+0x24>
 800d4d8:	e8df f001 	tbb	[pc, r1]
 800d4dc:	0c0c0c07 	.word	0x0c0c0c07
 800d4e0:	0c0c0c43 	.word	0x0c0c0c43
 800d4e4:	0c0c0c49 	.word	0x0c0c0c49
 800d4e8:	4f          	.byte	0x4f
 800d4e9:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d4ea:	6802      	ldr	r2, [r0, #0]
 800d4ec:	68d3      	ldr	r3, [r2, #12]
 800d4ee:	f023 0302 	bic.w	r3, r3, #2
 800d4f2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	6820      	ldr	r0, [r4, #0]
 800d4f8:	f7ff fcc8 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	4a22      	ldr	r2, [pc, #136]	; (800d588 <HAL_TIM_PWM_Stop_IT+0xb8>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d00f      	beq.n	800d524 <HAL_TIM_PWM_Stop_IT+0x54>
 800d504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d508:	4293      	cmp	r3, r2
 800d50a:	d00b      	beq.n	800d524 <HAL_TIM_PWM_Stop_IT+0x54>
 800d50c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d510:	4293      	cmp	r3, r2
 800d512:	d007      	beq.n	800d524 <HAL_TIM_PWM_Stop_IT+0x54>
 800d514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d518:	4293      	cmp	r3, r2
 800d51a:	d003      	beq.n	800d524 <HAL_TIM_PWM_Stop_IT+0x54>
 800d51c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d520:	4293      	cmp	r3, r2
 800d522:	d10d      	bne.n	800d540 <HAL_TIM_PWM_Stop_IT+0x70>
    __HAL_TIM_MOE_DISABLE(htim);
 800d524:	6a19      	ldr	r1, [r3, #32]
 800d526:	f241 1211 	movw	r2, #4369	; 0x1111
 800d52a:	4211      	tst	r1, r2
 800d52c:	d108      	bne.n	800d540 <HAL_TIM_PWM_Stop_IT+0x70>
 800d52e:	6a19      	ldr	r1, [r3, #32]
 800d530:	f240 4244 	movw	r2, #1092	; 0x444
 800d534:	4211      	tst	r1, r2
 800d536:	d103      	bne.n	800d540 <HAL_TIM_PWM_Stop_IT+0x70>
 800d538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d53a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d53e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d540:	6823      	ldr	r3, [r4, #0]
 800d542:	6a19      	ldr	r1, [r3, #32]
 800d544:	f241 1211 	movw	r2, #4369	; 0x1111
 800d548:	4211      	tst	r1, r2
 800d54a:	d108      	bne.n	800d55e <HAL_TIM_PWM_Stop_IT+0x8e>
 800d54c:	6a19      	ldr	r1, [r3, #32]
 800d54e:	f240 4244 	movw	r2, #1092	; 0x444
 800d552:	4211      	tst	r1, r2
 800d554:	d103      	bne.n	800d55e <HAL_TIM_PWM_Stop_IT+0x8e>
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	f022 0201 	bic.w	r2, r2, #1
 800d55c:	601a      	str	r2, [r3, #0]
}
 800d55e:	2000      	movs	r0, #0
 800d560:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d562:	6802      	ldr	r2, [r0, #0]
 800d564:	68d3      	ldr	r3, [r2, #12]
 800d566:	f023 0304 	bic.w	r3, r3, #4
 800d56a:	60d3      	str	r3, [r2, #12]
      break;
 800d56c:	e7c2      	b.n	800d4f4 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d56e:	6802      	ldr	r2, [r0, #0]
 800d570:	68d3      	ldr	r3, [r2, #12]
 800d572:	f023 0308 	bic.w	r3, r3, #8
 800d576:	60d3      	str	r3, [r2, #12]
      break;
 800d578:	e7bc      	b.n	800d4f4 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d57a:	6802      	ldr	r2, [r0, #0]
 800d57c:	68d3      	ldr	r3, [r2, #12]
 800d57e:	f023 0310 	bic.w	r3, r3, #16
 800d582:	60d3      	str	r3, [r2, #12]
      break;
 800d584:	e7b6      	b.n	800d4f4 <HAL_TIM_PWM_Stop_IT+0x24>
 800d586:	bf00      	nop
 800d588:	40012c00 	.word	0x40012c00

0800d58c <HAL_TIM_PWM_Start_DMA>:
{
 800d58c:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800d58e:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d592:	b2f6      	uxtb	r6, r6
 800d594:	2e02      	cmp	r6, #2
 800d596:	f000 80a1 	beq.w	800d6dc <HAL_TIM_PWM_Start_DMA+0x150>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800d59a:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800d59e:	b2f6      	uxtb	r6, r6
 800d5a0:	2e01      	cmp	r6, #1
 800d5a2:	d00d      	beq.n	800d5c0 <HAL_TIM_PWM_Start_DMA+0x34>
 800d5a4:	4616      	mov	r6, r2
 800d5a6:	460d      	mov	r5, r1
 800d5a8:	4604      	mov	r4, r0
  switch (Channel)
 800d5aa:	290c      	cmp	r1, #12
 800d5ac:	d827      	bhi.n	800d5fe <HAL_TIM_PWM_Start_DMA+0x72>
 800d5ae:	e8df f001 	tbb	[pc, r1]
 800d5b2:	2610      	.short	0x2610
 800d5b4:	26522626 	.word	0x26522626
 800d5b8:	26692626 	.word	0x26692626
 800d5bc:	2626      	.short	0x2626
 800d5be:	7f          	.byte	0x7f
 800d5bf:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800d5c0:	b11a      	cbz	r2, 800d5ca <HAL_TIM_PWM_Start_DMA+0x3e>
      htim->State = HAL_TIM_STATE_BUSY;
 800d5c2:	2402      	movs	r4, #2
 800d5c4:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800d5c8:	e7ec      	b.n	800d5a4 <HAL_TIM_PWM_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d0f9      	beq.n	800d5c2 <HAL_TIM_PWM_Start_DMA+0x36>
      return HAL_ERROR;
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	e040      	b.n	800d654 <HAL_TIM_PWM_Start_DMA+0xc8>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d5d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d5d4:	4948      	ldr	r1, [pc, #288]	; (800d6f8 <HAL_TIM_PWM_Start_DMA+0x16c>)
 800d5d6:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d5d8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d5da:	4948      	ldr	r1, [pc, #288]	; (800d6fc <HAL_TIM_PWM_Start_DMA+0x170>)
 800d5dc:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d5de:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d5e0:	4947      	ldr	r1, [pc, #284]	; (800d700 <HAL_TIM_PWM_Start_DMA+0x174>)
 800d5e2:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800d5e4:	6802      	ldr	r2, [r0, #0]
 800d5e6:	3234      	adds	r2, #52	; 0x34
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d5ec:	f7f5 f8c7 	bl	800277e <HAL_DMA_Start_IT>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	d175      	bne.n	800d6e0 <HAL_TIM_PWM_Start_DMA+0x154>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d5f4:	6822      	ldr	r2, [r4, #0]
 800d5f6:	68d3      	ldr	r3, [r2, #12]
 800d5f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d5fc:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5fe:	2201      	movs	r2, #1
 800d600:	4629      	mov	r1, r5
 800d602:	6820      	ldr	r0, [r4, #0]
 800d604:	f7ff fc42 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	4a3e      	ldr	r2, [pc, #248]	; (800d704 <HAL_TIM_PWM_Start_DMA+0x178>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d00f      	beq.n	800d630 <HAL_TIM_PWM_Start_DMA+0xa4>
 800d610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d614:	4293      	cmp	r3, r2
 800d616:	d00b      	beq.n	800d630 <HAL_TIM_PWM_Start_DMA+0xa4>
 800d618:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d007      	beq.n	800d630 <HAL_TIM_PWM_Start_DMA+0xa4>
 800d620:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d624:	4293      	cmp	r3, r2
 800d626:	d003      	beq.n	800d630 <HAL_TIM_PWM_Start_DMA+0xa4>
 800d628:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d103      	bne.n	800d638 <HAL_TIM_PWM_Start_DMA+0xac>
    __HAL_TIM_MOE_ENABLE(htim);
 800d630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d636:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d638:	6822      	ldr	r2, [r4, #0]
 800d63a:	6891      	ldr	r1, [r2, #8]
 800d63c:	4b32      	ldr	r3, [pc, #200]	; (800d708 <HAL_TIM_PWM_Start_DMA+0x17c>)
 800d63e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d640:	2b06      	cmp	r3, #6
 800d642:	d055      	beq.n	800d6f0 <HAL_TIM_PWM_Start_DMA+0x164>
 800d644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d648:	d054      	beq.n	800d6f4 <HAL_TIM_PWM_Start_DMA+0x168>
    __HAL_TIM_ENABLE(htim);
 800d64a:	6813      	ldr	r3, [r2, #0]
 800d64c:	f043 0301 	orr.w	r3, r3, #1
 800d650:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d652:	2000      	movs	r0, #0
}
 800d654:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d656:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d658:	4927      	ldr	r1, [pc, #156]	; (800d6f8 <HAL_TIM_PWM_Start_DMA+0x16c>)
 800d65a:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d65c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d65e:	4927      	ldr	r1, [pc, #156]	; (800d6fc <HAL_TIM_PWM_Start_DMA+0x170>)
 800d660:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d662:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d664:	4926      	ldr	r1, [pc, #152]	; (800d700 <HAL_TIM_PWM_Start_DMA+0x174>)
 800d666:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800d668:	6802      	ldr	r2, [r0, #0]
 800d66a:	3238      	adds	r2, #56	; 0x38
 800d66c:	4631      	mov	r1, r6
 800d66e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d670:	f7f5 f885 	bl	800277e <HAL_DMA_Start_IT>
 800d674:	2800      	cmp	r0, #0
 800d676:	d135      	bne.n	800d6e4 <HAL_TIM_PWM_Start_DMA+0x158>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d678:	6822      	ldr	r2, [r4, #0]
 800d67a:	68d3      	ldr	r3, [r2, #12]
 800d67c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d680:	60d3      	str	r3, [r2, #12]
      break;
 800d682:	e7bc      	b.n	800d5fe <HAL_TIM_PWM_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d684:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d686:	491c      	ldr	r1, [pc, #112]	; (800d6f8 <HAL_TIM_PWM_Start_DMA+0x16c>)
 800d688:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d68a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d68c:	491b      	ldr	r1, [pc, #108]	; (800d6fc <HAL_TIM_PWM_Start_DMA+0x170>)
 800d68e:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d690:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d692:	491b      	ldr	r1, [pc, #108]	; (800d700 <HAL_TIM_PWM_Start_DMA+0x174>)
 800d694:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800d696:	6802      	ldr	r2, [r0, #0]
 800d698:	323c      	adds	r2, #60	; 0x3c
 800d69a:	4631      	mov	r1, r6
 800d69c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d69e:	f7f5 f86e 	bl	800277e <HAL_DMA_Start_IT>
 800d6a2:	bb08      	cbnz	r0, 800d6e8 <HAL_TIM_PWM_Start_DMA+0x15c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d6a4:	6822      	ldr	r2, [r4, #0]
 800d6a6:	68d3      	ldr	r3, [r2, #12]
 800d6a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d6ac:	60d3      	str	r3, [r2, #12]
      break;
 800d6ae:	e7a6      	b.n	800d5fe <HAL_TIM_PWM_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d6b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d6b2:	4911      	ldr	r1, [pc, #68]	; (800d6f8 <HAL_TIM_PWM_Start_DMA+0x16c>)
 800d6b4:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d6b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d6b8:	4910      	ldr	r1, [pc, #64]	; (800d6fc <HAL_TIM_PWM_Start_DMA+0x170>)
 800d6ba:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d6bc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d6be:	4910      	ldr	r1, [pc, #64]	; (800d700 <HAL_TIM_PWM_Start_DMA+0x174>)
 800d6c0:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800d6c2:	6802      	ldr	r2, [r0, #0]
 800d6c4:	3240      	adds	r2, #64	; 0x40
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d6ca:	f7f5 f858 	bl	800277e <HAL_DMA_Start_IT>
 800d6ce:	b968      	cbnz	r0, 800d6ec <HAL_TIM_PWM_Start_DMA+0x160>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d6d0:	6822      	ldr	r2, [r4, #0]
 800d6d2:	68d3      	ldr	r3, [r2, #12]
 800d6d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d6d8:	60d3      	str	r3, [r2, #12]
      break;
 800d6da:	e790      	b.n	800d5fe <HAL_TIM_PWM_Start_DMA+0x72>
    return HAL_BUSY;
 800d6dc:	2002      	movs	r0, #2
 800d6de:	e7b9      	b.n	800d654 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800d6e0:	2001      	movs	r0, #1
 800d6e2:	e7b7      	b.n	800d654 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	e7b5      	b.n	800d654 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	e7b3      	b.n	800d654 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	e7b1      	b.n	800d654 <HAL_TIM_PWM_Start_DMA+0xc8>
  return HAL_OK;
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	e7af      	b.n	800d654 <HAL_TIM_PWM_Start_DMA+0xc8>
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	e7ad      	b.n	800d654 <HAL_TIM_PWM_Start_DMA+0xc8>
 800d6f8:	0800bff9 	.word	0x0800bff9
 800d6fc:	0800c03f 	.word	0x0800c03f
 800d700:	0800c243 	.word	0x0800c243
 800d704:	40012c00 	.word	0x40012c00
 800d708:	00010007 	.word	0x00010007

0800d70c <HAL_TIM_PWM_Stop_DMA>:
{
 800d70c:	b538      	push	{r3, r4, r5, lr}
 800d70e:	4604      	mov	r4, r0
 800d710:	460d      	mov	r5, r1
  switch (Channel)
 800d712:	290c      	cmp	r1, #12
 800d714:	d810      	bhi.n	800d738 <HAL_TIM_PWM_Stop_DMA+0x2c>
 800d716:	e8df f001 	tbb	[pc, r1]
 800d71a:	0f07      	.short	0x0f07
 800d71c:	0f4a0f0f 	.word	0x0f4a0f0f
 800d720:	0f530f0f 	.word	0x0f530f0f
 800d724:	0f0f      	.short	0x0f0f
 800d726:	5c          	.byte	0x5c
 800d727:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d728:	6802      	ldr	r2, [r0, #0]
 800d72a:	68d3      	ldr	r3, [r2, #12]
 800d72c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d730:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d732:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d734:	f7f5 f895 	bl	8002862 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d738:	2200      	movs	r2, #0
 800d73a:	4629      	mov	r1, r5
 800d73c:	6820      	ldr	r0, [r4, #0]
 800d73e:	f7ff fba5 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	4a27      	ldr	r2, [pc, #156]	; (800d7e4 <HAL_TIM_PWM_Stop_DMA+0xd8>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d00f      	beq.n	800d76a <HAL_TIM_PWM_Stop_DMA+0x5e>
 800d74a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d74e:	4293      	cmp	r3, r2
 800d750:	d00b      	beq.n	800d76a <HAL_TIM_PWM_Stop_DMA+0x5e>
 800d752:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d756:	4293      	cmp	r3, r2
 800d758:	d007      	beq.n	800d76a <HAL_TIM_PWM_Stop_DMA+0x5e>
 800d75a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d75e:	4293      	cmp	r3, r2
 800d760:	d003      	beq.n	800d76a <HAL_TIM_PWM_Stop_DMA+0x5e>
 800d762:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d766:	4293      	cmp	r3, r2
 800d768:	d10d      	bne.n	800d786 <HAL_TIM_PWM_Stop_DMA+0x7a>
    __HAL_TIM_MOE_DISABLE(htim);
 800d76a:	6a19      	ldr	r1, [r3, #32]
 800d76c:	f241 1211 	movw	r2, #4369	; 0x1111
 800d770:	4211      	tst	r1, r2
 800d772:	d108      	bne.n	800d786 <HAL_TIM_PWM_Stop_DMA+0x7a>
 800d774:	6a19      	ldr	r1, [r3, #32]
 800d776:	f240 4244 	movw	r2, #1092	; 0x444
 800d77a:	4211      	tst	r1, r2
 800d77c:	d103      	bne.n	800d786 <HAL_TIM_PWM_Stop_DMA+0x7a>
 800d77e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d784:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	6a19      	ldr	r1, [r3, #32]
 800d78a:	f241 1211 	movw	r2, #4369	; 0x1111
 800d78e:	4211      	tst	r1, r2
 800d790:	d108      	bne.n	800d7a4 <HAL_TIM_PWM_Stop_DMA+0x98>
 800d792:	6a19      	ldr	r1, [r3, #32]
 800d794:	f240 4244 	movw	r2, #1092	; 0x444
 800d798:	4211      	tst	r1, r2
 800d79a:	d103      	bne.n	800d7a4 <HAL_TIM_PWM_Stop_DMA+0x98>
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	f022 0201 	bic.w	r2, r2, #1
 800d7a2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d7aa:	2000      	movs	r0, #0
 800d7ac:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d7ae:	6802      	ldr	r2, [r0, #0]
 800d7b0:	68d3      	ldr	r3, [r2, #12]
 800d7b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7b6:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d7b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d7ba:	f7f5 f852 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800d7be:	e7bb      	b.n	800d738 <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d7c0:	6802      	ldr	r2, [r0, #0]
 800d7c2:	68d3      	ldr	r3, [r2, #12]
 800d7c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7c8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d7ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800d7cc:	f7f5 f849 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800d7d0:	e7b2      	b.n	800d738 <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d7d2:	6802      	ldr	r2, [r0, #0]
 800d7d4:	68d3      	ldr	r3, [r2, #12]
 800d7d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7da:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d7dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d7de:	f7f5 f840 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800d7e2:	e7a9      	b.n	800d738 <HAL_TIM_PWM_Stop_DMA+0x2c>
 800d7e4:	40012c00 	.word	0x40012c00

0800d7e8 <HAL_TIM_IC_Start>:
{
 800d7e8:	b510      	push	{r4, lr}
 800d7ea:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	6800      	ldr	r0, [r0, #0]
 800d7f0:	f7ff fb4c 	bl	800ce8c <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7f4:	6822      	ldr	r2, [r4, #0]
 800d7f6:	6891      	ldr	r1, [r2, #8]
 800d7f8:	4b06      	ldr	r3, [pc, #24]	; (800d814 <HAL_TIM_IC_Start+0x2c>)
 800d7fa:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7fc:	2b06      	cmp	r3, #6
 800d7fe:	d006      	beq.n	800d80e <HAL_TIM_IC_Start+0x26>
 800d800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d804:	d003      	beq.n	800d80e <HAL_TIM_IC_Start+0x26>
    __HAL_TIM_ENABLE(htim);
 800d806:	6813      	ldr	r3, [r2, #0]
 800d808:	f043 0301 	orr.w	r3, r3, #1
 800d80c:	6013      	str	r3, [r2, #0]
}
 800d80e:	2000      	movs	r0, #0
 800d810:	bd10      	pop	{r4, pc}
 800d812:	bf00      	nop
 800d814:	00010007 	.word	0x00010007

0800d818 <HAL_TIM_IC_Stop>:
{
 800d818:	b510      	push	{r4, lr}
 800d81a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d81c:	2200      	movs	r2, #0
 800d81e:	6800      	ldr	r0, [r0, #0]
 800d820:	f7ff fb34 	bl	800ce8c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800d824:	6823      	ldr	r3, [r4, #0]
 800d826:	6a19      	ldr	r1, [r3, #32]
 800d828:	f241 1211 	movw	r2, #4369	; 0x1111
 800d82c:	4211      	tst	r1, r2
 800d82e:	d108      	bne.n	800d842 <HAL_TIM_IC_Stop+0x2a>
 800d830:	6a19      	ldr	r1, [r3, #32]
 800d832:	f240 4244 	movw	r2, #1092	; 0x444
 800d836:	4211      	tst	r1, r2
 800d838:	d103      	bne.n	800d842 <HAL_TIM_IC_Stop+0x2a>
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	f022 0201 	bic.w	r2, r2, #1
 800d840:	601a      	str	r2, [r3, #0]
}
 800d842:	2000      	movs	r0, #0
 800d844:	bd10      	pop	{r4, pc}
	...

0800d848 <HAL_TIM_IC_Start_IT>:
{
 800d848:	b510      	push	{r4, lr}
 800d84a:	4604      	mov	r4, r0
  switch (Channel)
 800d84c:	290c      	cmp	r1, #12
 800d84e:	d80d      	bhi.n	800d86c <HAL_TIM_IC_Start_IT+0x24>
 800d850:	e8df f001 	tbb	[pc, r1]
 800d854:	0c0c0c07 	.word	0x0c0c0c07
 800d858:	0c0c0c1f 	.word	0x0c0c0c1f
 800d85c:	0c0c0c25 	.word	0x0c0c0c25
 800d860:	2b          	.byte	0x2b
 800d861:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d862:	6802      	ldr	r2, [r0, #0]
 800d864:	68d3      	ldr	r3, [r2, #12]
 800d866:	f043 0302 	orr.w	r3, r3, #2
 800d86a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d86c:	2201      	movs	r2, #1
 800d86e:	6820      	ldr	r0, [r4, #0]
 800d870:	f7ff fb0c 	bl	800ce8c <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d874:	6822      	ldr	r2, [r4, #0]
 800d876:	6891      	ldr	r1, [r2, #8]
 800d878:	4b0f      	ldr	r3, [pc, #60]	; (800d8b8 <HAL_TIM_IC_Start_IT+0x70>)
 800d87a:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d87c:	2b06      	cmp	r3, #6
 800d87e:	d006      	beq.n	800d88e <HAL_TIM_IC_Start_IT+0x46>
 800d880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d884:	d003      	beq.n	800d88e <HAL_TIM_IC_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 800d886:	6813      	ldr	r3, [r2, #0]
 800d888:	f043 0301 	orr.w	r3, r3, #1
 800d88c:	6013      	str	r3, [r2, #0]
}
 800d88e:	2000      	movs	r0, #0
 800d890:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d892:	6802      	ldr	r2, [r0, #0]
 800d894:	68d3      	ldr	r3, [r2, #12]
 800d896:	f043 0304 	orr.w	r3, r3, #4
 800d89a:	60d3      	str	r3, [r2, #12]
      break;
 800d89c:	e7e6      	b.n	800d86c <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d89e:	6802      	ldr	r2, [r0, #0]
 800d8a0:	68d3      	ldr	r3, [r2, #12]
 800d8a2:	f043 0308 	orr.w	r3, r3, #8
 800d8a6:	60d3      	str	r3, [r2, #12]
      break;
 800d8a8:	e7e0      	b.n	800d86c <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d8aa:	6802      	ldr	r2, [r0, #0]
 800d8ac:	68d3      	ldr	r3, [r2, #12]
 800d8ae:	f043 0310 	orr.w	r3, r3, #16
 800d8b2:	60d3      	str	r3, [r2, #12]
      break;
 800d8b4:	e7da      	b.n	800d86c <HAL_TIM_IC_Start_IT+0x24>
 800d8b6:	bf00      	nop
 800d8b8:	00010007 	.word	0x00010007

0800d8bc <HAL_TIM_IC_Stop_IT>:
{
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	4604      	mov	r4, r0
  switch (Channel)
 800d8c0:	290c      	cmp	r1, #12
 800d8c2:	d80d      	bhi.n	800d8e0 <HAL_TIM_IC_Stop_IT+0x24>
 800d8c4:	e8df f001 	tbb	[pc, r1]
 800d8c8:	0c0c0c07 	.word	0x0c0c0c07
 800d8cc:	0c0c0c21 	.word	0x0c0c0c21
 800d8d0:	0c0c0c27 	.word	0x0c0c0c27
 800d8d4:	2d          	.byte	0x2d
 800d8d5:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d8d6:	6802      	ldr	r2, [r0, #0]
 800d8d8:	68d3      	ldr	r3, [r2, #12]
 800d8da:	f023 0302 	bic.w	r3, r3, #2
 800d8de:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	6820      	ldr	r0, [r4, #0]
 800d8e4:	f7ff fad2 	bl	800ce8c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	6a19      	ldr	r1, [r3, #32]
 800d8ec:	f241 1211 	movw	r2, #4369	; 0x1111
 800d8f0:	4211      	tst	r1, r2
 800d8f2:	d108      	bne.n	800d906 <HAL_TIM_IC_Stop_IT+0x4a>
 800d8f4:	6a19      	ldr	r1, [r3, #32]
 800d8f6:	f240 4244 	movw	r2, #1092	; 0x444
 800d8fa:	4211      	tst	r1, r2
 800d8fc:	d103      	bne.n	800d906 <HAL_TIM_IC_Stop_IT+0x4a>
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	f022 0201 	bic.w	r2, r2, #1
 800d904:	601a      	str	r2, [r3, #0]
}
 800d906:	2000      	movs	r0, #0
 800d908:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d90a:	6802      	ldr	r2, [r0, #0]
 800d90c:	68d3      	ldr	r3, [r2, #12]
 800d90e:	f023 0304 	bic.w	r3, r3, #4
 800d912:	60d3      	str	r3, [r2, #12]
      break;
 800d914:	e7e4      	b.n	800d8e0 <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d916:	6802      	ldr	r2, [r0, #0]
 800d918:	68d3      	ldr	r3, [r2, #12]
 800d91a:	f023 0308 	bic.w	r3, r3, #8
 800d91e:	60d3      	str	r3, [r2, #12]
      break;
 800d920:	e7de      	b.n	800d8e0 <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d922:	6802      	ldr	r2, [r0, #0]
 800d924:	68d3      	ldr	r3, [r2, #12]
 800d926:	f023 0310 	bic.w	r3, r3, #16
 800d92a:	60d3      	str	r3, [r2, #12]
      break;
 800d92c:	e7d8      	b.n	800d8e0 <HAL_TIM_IC_Stop_IT+0x24>
	...

0800d930 <HAL_TIM_IC_Start_DMA>:
{
 800d930:	b538      	push	{r3, r4, r5, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800d932:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800d936:	b2e4      	uxtb	r4, r4
 800d938:	2c02      	cmp	r4, #2
 800d93a:	f000 8084 	beq.w	800da46 <HAL_TIM_IC_Start_DMA+0x116>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800d93e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800d942:	b2e4      	uxtb	r4, r4
 800d944:	2c01      	cmp	r4, #1
 800d946:	d00c      	beq.n	800d962 <HAL_TIM_IC_Start_DMA+0x32>
 800d948:	460d      	mov	r5, r1
 800d94a:	4604      	mov	r4, r0
  switch (Channel)
 800d94c:	2d0c      	cmp	r5, #12
 800d94e:	d826      	bhi.n	800d99e <HAL_TIM_IC_Start_DMA+0x6e>
 800d950:	e8df f005 	tbb	[pc, r5]
 800d954:	25252510 	.word	0x25252510
 800d958:	25252539 	.word	0x25252539
 800d95c:	2525254f 	.word	0x2525254f
 800d960:	64          	.byte	0x64
 800d961:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800d962:	b11a      	cbz	r2, 800d96c <HAL_TIM_IC_Start_DMA+0x3c>
      htim->State = HAL_TIM_STATE_BUSY;
 800d964:	2402      	movs	r4, #2
 800d966:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800d96a:	e7ed      	b.n	800d948 <HAL_TIM_IC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d0f9      	beq.n	800d964 <HAL_TIM_IC_Start_DMA+0x34>
      return HAL_ERROR;
 800d970:	2001      	movs	r0, #1
 800d972:	e027      	b.n	800d9c4 <HAL_TIM_IC_Start_DMA+0x94>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800d974:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d976:	483b      	ldr	r0, [pc, #236]	; (800da64 <HAL_TIM_IC_Start_DMA+0x134>)
 800d978:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d97a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d97c:	483a      	ldr	r0, [pc, #232]	; (800da68 <HAL_TIM_IC_Start_DMA+0x138>)
 800d97e:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d980:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d982:	483a      	ldr	r0, [pc, #232]	; (800da6c <HAL_TIM_IC_Start_DMA+0x13c>)
 800d984:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800d986:	6821      	ldr	r1, [r4, #0]
 800d988:	3134      	adds	r1, #52	; 0x34
 800d98a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d98c:	f7f4 fef7 	bl	800277e <HAL_DMA_Start_IT>
 800d990:	2800      	cmp	r0, #0
 800d992:	d15a      	bne.n	800da4a <HAL_TIM_IC_Start_DMA+0x11a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d994:	6822      	ldr	r2, [r4, #0]
 800d996:	68d3      	ldr	r3, [r2, #12]
 800d998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d99c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d99e:	2201      	movs	r2, #1
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	6820      	ldr	r0, [r4, #0]
 800d9a4:	f7ff fa72 	bl	800ce8c <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9a8:	6822      	ldr	r2, [r4, #0]
 800d9aa:	6891      	ldr	r1, [r2, #8]
 800d9ac:	4b30      	ldr	r3, [pc, #192]	; (800da70 <HAL_TIM_IC_Start_DMA+0x140>)
 800d9ae:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9b0:	2b06      	cmp	r3, #6
 800d9b2:	d052      	beq.n	800da5a <HAL_TIM_IC_Start_DMA+0x12a>
 800d9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9b8:	d051      	beq.n	800da5e <HAL_TIM_IC_Start_DMA+0x12e>
    __HAL_TIM_ENABLE(htim);
 800d9ba:	6813      	ldr	r3, [r2, #0]
 800d9bc:	f043 0301 	orr.w	r3, r3, #1
 800d9c0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d9c2:	2000      	movs	r0, #0
}
 800d9c4:	bd38      	pop	{r3, r4, r5, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800d9c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d9c8:	4826      	ldr	r0, [pc, #152]	; (800da64 <HAL_TIM_IC_Start_DMA+0x134>)
 800d9ca:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d9cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d9ce:	4826      	ldr	r0, [pc, #152]	; (800da68 <HAL_TIM_IC_Start_DMA+0x138>)
 800d9d0:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d9d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d9d4:	4825      	ldr	r0, [pc, #148]	; (800da6c <HAL_TIM_IC_Start_DMA+0x13c>)
 800d9d6:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800d9d8:	6821      	ldr	r1, [r4, #0]
 800d9da:	3138      	adds	r1, #56	; 0x38
 800d9dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d9de:	f7f4 fece 	bl	800277e <HAL_DMA_Start_IT>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d133      	bne.n	800da4e <HAL_TIM_IC_Start_DMA+0x11e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d9e6:	6822      	ldr	r2, [r4, #0]
 800d9e8:	68d3      	ldr	r3, [r2, #12]
 800d9ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d9ee:	60d3      	str	r3, [r2, #12]
      break;
 800d9f0:	e7d5      	b.n	800d99e <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800d9f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d9f4:	481b      	ldr	r0, [pc, #108]	; (800da64 <HAL_TIM_IC_Start_DMA+0x134>)
 800d9f6:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d9f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d9fa:	481b      	ldr	r0, [pc, #108]	; (800da68 <HAL_TIM_IC_Start_DMA+0x138>)
 800d9fc:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d9fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800da00:	481a      	ldr	r0, [pc, #104]	; (800da6c <HAL_TIM_IC_Start_DMA+0x13c>)
 800da02:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800da04:	6821      	ldr	r1, [r4, #0]
 800da06:	313c      	adds	r1, #60	; 0x3c
 800da08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800da0a:	f7f4 feb8 	bl	800277e <HAL_DMA_Start_IT>
 800da0e:	bb00      	cbnz	r0, 800da52 <HAL_TIM_IC_Start_DMA+0x122>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800da10:	6822      	ldr	r2, [r4, #0]
 800da12:	68d3      	ldr	r3, [r2, #12]
 800da14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800da18:	60d3      	str	r3, [r2, #12]
      break;
 800da1a:	e7c0      	b.n	800d99e <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800da1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800da1e:	4811      	ldr	r0, [pc, #68]	; (800da64 <HAL_TIM_IC_Start_DMA+0x134>)
 800da20:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800da22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800da24:	4810      	ldr	r0, [pc, #64]	; (800da68 <HAL_TIM_IC_Start_DMA+0x138>)
 800da26:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800da28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800da2a:	4810      	ldr	r0, [pc, #64]	; (800da6c <HAL_TIM_IC_Start_DMA+0x13c>)
 800da2c:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800da2e:	6821      	ldr	r1, [r4, #0]
 800da30:	3140      	adds	r1, #64	; 0x40
 800da32:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800da34:	f7f4 fea3 	bl	800277e <HAL_DMA_Start_IT>
 800da38:	b968      	cbnz	r0, 800da56 <HAL_TIM_IC_Start_DMA+0x126>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800da3a:	6822      	ldr	r2, [r4, #0]
 800da3c:	68d3      	ldr	r3, [r2, #12]
 800da3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800da42:	60d3      	str	r3, [r2, #12]
      break;
 800da44:	e7ab      	b.n	800d99e <HAL_TIM_IC_Start_DMA+0x6e>
    return HAL_BUSY;
 800da46:	2002      	movs	r0, #2
 800da48:	e7bc      	b.n	800d9c4 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 800da4a:	2001      	movs	r0, #1
 800da4c:	e7ba      	b.n	800d9c4 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 800da4e:	2001      	movs	r0, #1
 800da50:	e7b8      	b.n	800d9c4 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 800da52:	2001      	movs	r0, #1
 800da54:	e7b6      	b.n	800d9c4 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 800da56:	2001      	movs	r0, #1
 800da58:	e7b4      	b.n	800d9c4 <HAL_TIM_IC_Start_DMA+0x94>
  return HAL_OK;
 800da5a:	2000      	movs	r0, #0
 800da5c:	e7b2      	b.n	800d9c4 <HAL_TIM_IC_Start_DMA+0x94>
 800da5e:	2000      	movs	r0, #0
 800da60:	e7b0      	b.n	800d9c4 <HAL_TIM_IC_Start_DMA+0x94>
 800da62:	bf00      	nop
 800da64:	0800bf6d 	.word	0x0800bf6d
 800da68:	0800bfb3 	.word	0x0800bfb3
 800da6c:	0800c243 	.word	0x0800c243
 800da70:	00010007 	.word	0x00010007

0800da74 <HAL_TIM_IC_Stop_DMA>:
{
 800da74:	b538      	push	{r3, r4, r5, lr}
 800da76:	4604      	mov	r4, r0
 800da78:	460d      	mov	r5, r1
  switch (Channel)
 800da7a:	290c      	cmp	r1, #12
 800da7c:	d810      	bhi.n	800daa0 <HAL_TIM_IC_Stop_DMA+0x2c>
 800da7e:	e8df f001 	tbb	[pc, r1]
 800da82:	0f07      	.short	0x0f07
 800da84:	0f280f0f 	.word	0x0f280f0f
 800da88:	0f310f0f 	.word	0x0f310f0f
 800da8c:	0f0f      	.short	0x0f0f
 800da8e:	3a          	.byte	0x3a
 800da8f:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800da90:	6802      	ldr	r2, [r0, #0]
 800da92:	68d3      	ldr	r3, [r2, #12]
 800da94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da98:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800da9a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800da9c:	f7f4 fee1 	bl	8002862 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800daa0:	2200      	movs	r2, #0
 800daa2:	4629      	mov	r1, r5
 800daa4:	6820      	ldr	r0, [r4, #0]
 800daa6:	f7ff f9f1 	bl	800ce8c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	6a19      	ldr	r1, [r3, #32]
 800daae:	f241 1211 	movw	r2, #4369	; 0x1111
 800dab2:	4211      	tst	r1, r2
 800dab4:	d108      	bne.n	800dac8 <HAL_TIM_IC_Stop_DMA+0x54>
 800dab6:	6a19      	ldr	r1, [r3, #32]
 800dab8:	f240 4244 	movw	r2, #1092	; 0x444
 800dabc:	4211      	tst	r1, r2
 800dabe:	d103      	bne.n	800dac8 <HAL_TIM_IC_Stop_DMA+0x54>
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	f022 0201 	bic.w	r2, r2, #1
 800dac6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800dac8:	2301      	movs	r3, #1
 800daca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800dace:	2000      	movs	r0, #0
 800dad0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800dad2:	6802      	ldr	r2, [r0, #0]
 800dad4:	68d3      	ldr	r3, [r2, #12]
 800dad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dada:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800dadc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800dade:	f7f4 fec0 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800dae2:	e7dd      	b.n	800daa0 <HAL_TIM_IC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800dae4:	6802      	ldr	r2, [r0, #0]
 800dae6:	68d3      	ldr	r3, [r2, #12]
 800dae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800daec:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800daee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800daf0:	f7f4 feb7 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800daf4:	e7d4      	b.n	800daa0 <HAL_TIM_IC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800daf6:	6802      	ldr	r2, [r0, #0]
 800daf8:	68d3      	ldr	r3, [r2, #12]
 800dafa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dafe:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800db00:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800db02:	f7f4 feae 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800db06:	e7cb      	b.n	800daa0 <HAL_TIM_IC_Stop_DMA+0x2c>

0800db08 <HAL_TIM_OnePulse_Start>:
{
 800db08:	b510      	push	{r4, lr}
 800db0a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db0c:	2201      	movs	r2, #1
 800db0e:	2100      	movs	r1, #0
 800db10:	6800      	ldr	r0, [r0, #0]
 800db12:	f7ff f9bb 	bl	800ce8c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db16:	2201      	movs	r2, #1
 800db18:	2104      	movs	r1, #4
 800db1a:	6820      	ldr	r0, [r4, #0]
 800db1c:	f7ff f9b6 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	4a0c      	ldr	r2, [pc, #48]	; (800db54 <HAL_TIM_OnePulse_Start+0x4c>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d00f      	beq.n	800db48 <HAL_TIM_OnePulse_Start+0x40>
 800db28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d00b      	beq.n	800db48 <HAL_TIM_OnePulse_Start+0x40>
 800db30:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800db34:	4293      	cmp	r3, r2
 800db36:	d007      	beq.n	800db48 <HAL_TIM_OnePulse_Start+0x40>
 800db38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d003      	beq.n	800db48 <HAL_TIM_OnePulse_Start+0x40>
 800db40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db44:	4293      	cmp	r3, r2
 800db46:	d103      	bne.n	800db50 <HAL_TIM_OnePulse_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 800db48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db4e:	645a      	str	r2, [r3, #68]	; 0x44
}
 800db50:	2000      	movs	r0, #0
 800db52:	bd10      	pop	{r4, pc}
 800db54:	40012c00 	.word	0x40012c00

0800db58 <HAL_TIM_OnePulse_Stop>:
{
 800db58:	b510      	push	{r4, lr}
 800db5a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800db5c:	2200      	movs	r2, #0
 800db5e:	4611      	mov	r1, r2
 800db60:	6800      	ldr	r0, [r0, #0]
 800db62:	f7ff f993 	bl	800ce8c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800db66:	2200      	movs	r2, #0
 800db68:	2104      	movs	r1, #4
 800db6a:	6820      	ldr	r0, [r4, #0]
 800db6c:	f7ff f98e 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	4a19      	ldr	r2, [pc, #100]	; (800dbd8 <HAL_TIM_OnePulse_Stop+0x80>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d00f      	beq.n	800db98 <HAL_TIM_OnePulse_Stop+0x40>
 800db78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d00b      	beq.n	800db98 <HAL_TIM_OnePulse_Stop+0x40>
 800db80:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800db84:	4293      	cmp	r3, r2
 800db86:	d007      	beq.n	800db98 <HAL_TIM_OnePulse_Stop+0x40>
 800db88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d003      	beq.n	800db98 <HAL_TIM_OnePulse_Stop+0x40>
 800db90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db94:	4293      	cmp	r3, r2
 800db96:	d10d      	bne.n	800dbb4 <HAL_TIM_OnePulse_Stop+0x5c>
    __HAL_TIM_MOE_DISABLE(htim);
 800db98:	6a19      	ldr	r1, [r3, #32]
 800db9a:	f241 1211 	movw	r2, #4369	; 0x1111
 800db9e:	4211      	tst	r1, r2
 800dba0:	d108      	bne.n	800dbb4 <HAL_TIM_OnePulse_Stop+0x5c>
 800dba2:	6a19      	ldr	r1, [r3, #32]
 800dba4:	f240 4244 	movw	r2, #1092	; 0x444
 800dba8:	4211      	tst	r1, r2
 800dbaa:	d103      	bne.n	800dbb4 <HAL_TIM_OnePulse_Stop+0x5c>
 800dbac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dbb2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	6a19      	ldr	r1, [r3, #32]
 800dbb8:	f241 1211 	movw	r2, #4369	; 0x1111
 800dbbc:	4211      	tst	r1, r2
 800dbbe:	d108      	bne.n	800dbd2 <HAL_TIM_OnePulse_Stop+0x7a>
 800dbc0:	6a19      	ldr	r1, [r3, #32]
 800dbc2:	f240 4244 	movw	r2, #1092	; 0x444
 800dbc6:	4211      	tst	r1, r2
 800dbc8:	d103      	bne.n	800dbd2 <HAL_TIM_OnePulse_Stop+0x7a>
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	f022 0201 	bic.w	r2, r2, #1
 800dbd0:	601a      	str	r2, [r3, #0]
}
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	bd10      	pop	{r4, pc}
 800dbd6:	bf00      	nop
 800dbd8:	40012c00 	.word	0x40012c00

0800dbdc <HAL_TIM_OnePulse_Start_IT>:
{
 800dbdc:	b510      	push	{r4, lr}
 800dbde:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dbe0:	6802      	ldr	r2, [r0, #0]
 800dbe2:	68d3      	ldr	r3, [r2, #12]
 800dbe4:	f043 0302 	orr.w	r3, r3, #2
 800dbe8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dbea:	6802      	ldr	r2, [r0, #0]
 800dbec:	68d3      	ldr	r3, [r2, #12]
 800dbee:	f043 0304 	orr.w	r3, r3, #4
 800dbf2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	6800      	ldr	r0, [r0, #0]
 800dbfa:	f7ff f947 	bl	800ce8c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dbfe:	2201      	movs	r2, #1
 800dc00:	2104      	movs	r1, #4
 800dc02:	6820      	ldr	r0, [r4, #0]
 800dc04:	f7ff f942 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	4a0c      	ldr	r2, [pc, #48]	; (800dc3c <HAL_TIM_OnePulse_Start_IT+0x60>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d00f      	beq.n	800dc30 <HAL_TIM_OnePulse_Start_IT+0x54>
 800dc10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d00b      	beq.n	800dc30 <HAL_TIM_OnePulse_Start_IT+0x54>
 800dc18:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d007      	beq.n	800dc30 <HAL_TIM_OnePulse_Start_IT+0x54>
 800dc20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d003      	beq.n	800dc30 <HAL_TIM_OnePulse_Start_IT+0x54>
 800dc28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d103      	bne.n	800dc38 <HAL_TIM_OnePulse_Start_IT+0x5c>
    __HAL_TIM_MOE_ENABLE(htim);
 800dc30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dc36:	645a      	str	r2, [r3, #68]	; 0x44
}
 800dc38:	2000      	movs	r0, #0
 800dc3a:	bd10      	pop	{r4, pc}
 800dc3c:	40012c00 	.word	0x40012c00

0800dc40 <HAL_TIM_OnePulse_Stop_IT>:
{
 800dc40:	b510      	push	{r4, lr}
 800dc42:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800dc44:	6802      	ldr	r2, [r0, #0]
 800dc46:	68d3      	ldr	r3, [r2, #12]
 800dc48:	f023 0302 	bic.w	r3, r3, #2
 800dc4c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800dc4e:	6802      	ldr	r2, [r0, #0]
 800dc50:	68d3      	ldr	r3, [r2, #12]
 800dc52:	f023 0304 	bic.w	r3, r3, #4
 800dc56:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dc58:	2200      	movs	r2, #0
 800dc5a:	4611      	mov	r1, r2
 800dc5c:	6800      	ldr	r0, [r0, #0]
 800dc5e:	f7ff f915 	bl	800ce8c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dc62:	2200      	movs	r2, #0
 800dc64:	2104      	movs	r1, #4
 800dc66:	6820      	ldr	r0, [r4, #0]
 800dc68:	f7ff f910 	bl	800ce8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	4a19      	ldr	r2, [pc, #100]	; (800dcd4 <HAL_TIM_OnePulse_Stop_IT+0x94>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d00f      	beq.n	800dc94 <HAL_TIM_OnePulse_Stop_IT+0x54>
 800dc74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d00b      	beq.n	800dc94 <HAL_TIM_OnePulse_Stop_IT+0x54>
 800dc7c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d007      	beq.n	800dc94 <HAL_TIM_OnePulse_Stop_IT+0x54>
 800dc84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d003      	beq.n	800dc94 <HAL_TIM_OnePulse_Stop_IT+0x54>
 800dc8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d10d      	bne.n	800dcb0 <HAL_TIM_OnePulse_Stop_IT+0x70>
    __HAL_TIM_MOE_DISABLE(htim);
 800dc94:	6a19      	ldr	r1, [r3, #32]
 800dc96:	f241 1211 	movw	r2, #4369	; 0x1111
 800dc9a:	4211      	tst	r1, r2
 800dc9c:	d108      	bne.n	800dcb0 <HAL_TIM_OnePulse_Stop_IT+0x70>
 800dc9e:	6a19      	ldr	r1, [r3, #32]
 800dca0:	f240 4244 	movw	r2, #1092	; 0x444
 800dca4:	4211      	tst	r1, r2
 800dca6:	d103      	bne.n	800dcb0 <HAL_TIM_OnePulse_Stop_IT+0x70>
 800dca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dcae:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800dcb0:	6823      	ldr	r3, [r4, #0]
 800dcb2:	6a19      	ldr	r1, [r3, #32]
 800dcb4:	f241 1211 	movw	r2, #4369	; 0x1111
 800dcb8:	4211      	tst	r1, r2
 800dcba:	d108      	bne.n	800dcce <HAL_TIM_OnePulse_Stop_IT+0x8e>
 800dcbc:	6a19      	ldr	r1, [r3, #32]
 800dcbe:	f240 4244 	movw	r2, #1092	; 0x444
 800dcc2:	4211      	tst	r1, r2
 800dcc4:	d103      	bne.n	800dcce <HAL_TIM_OnePulse_Stop_IT+0x8e>
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	f022 0201 	bic.w	r2, r2, #1
 800dccc:	601a      	str	r2, [r3, #0]
}
 800dcce:	2000      	movs	r0, #0
 800dcd0:	bd10      	pop	{r4, pc}
 800dcd2:	bf00      	nop
 800dcd4:	40012c00 	.word	0x40012c00

0800dcd8 <HAL_TIM_Encoder_Start>:
{
 800dcd8:	b510      	push	{r4, lr}
 800dcda:	4604      	mov	r4, r0
  switch (Channel)
 800dcdc:	b161      	cbz	r1, 800dcf8 <HAL_TIM_Encoder_Start+0x20>
 800dcde:	2904      	cmp	r1, #4
 800dce0:	d016      	beq.n	800dd10 <HAL_TIM_Encoder_Start+0x38>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dce2:	2201      	movs	r2, #1
 800dce4:	2100      	movs	r1, #0
 800dce6:	6800      	ldr	r0, [r0, #0]
 800dce8:	f7ff f8d0 	bl	800ce8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dcec:	2201      	movs	r2, #1
 800dcee:	2104      	movs	r1, #4
 800dcf0:	6820      	ldr	r0, [r4, #0]
 800dcf2:	f7ff f8cb 	bl	800ce8c <TIM_CCxChannelCmd>
      break;
 800dcf6:	e004      	b.n	800dd02 <HAL_TIM_Encoder_Start+0x2a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	6800      	ldr	r0, [r0, #0]
 800dcfe:	f7ff f8c5 	bl	800ce8c <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800dd02:	6822      	ldr	r2, [r4, #0]
 800dd04:	6813      	ldr	r3, [r2, #0]
 800dd06:	f043 0301 	orr.w	r3, r3, #1
 800dd0a:	6013      	str	r3, [r2, #0]
}
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd10:	2201      	movs	r2, #1
 800dd12:	2104      	movs	r1, #4
 800dd14:	6800      	ldr	r0, [r0, #0]
 800dd16:	f7ff f8b9 	bl	800ce8c <TIM_CCxChannelCmd>
      break;
 800dd1a:	e7f2      	b.n	800dd02 <HAL_TIM_Encoder_Start+0x2a>

0800dd1c <HAL_TIM_Encoder_Stop>:
{
 800dd1c:	b510      	push	{r4, lr}
 800dd1e:	4604      	mov	r4, r0
  switch (Channel)
 800dd20:	b161      	cbz	r1, 800dd3c <HAL_TIM_Encoder_Stop+0x20>
 800dd22:	2904      	cmp	r1, #4
 800dd24:	d020      	beq.n	800dd68 <HAL_TIM_Encoder_Stop+0x4c>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dd26:	2200      	movs	r2, #0
 800dd28:	4611      	mov	r1, r2
 800dd2a:	6800      	ldr	r0, [r0, #0]
 800dd2c:	f7ff f8ae 	bl	800ce8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dd30:	2200      	movs	r2, #0
 800dd32:	2104      	movs	r1, #4
 800dd34:	6820      	ldr	r0, [r4, #0]
 800dd36:	f7ff f8a9 	bl	800ce8c <TIM_CCxChannelCmd>
      break;
 800dd3a:	e004      	b.n	800dd46 <HAL_TIM_Encoder_Stop+0x2a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	4611      	mov	r1, r2
 800dd40:	6800      	ldr	r0, [r0, #0]
 800dd42:	f7ff f8a3 	bl	800ce8c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	6a19      	ldr	r1, [r3, #32]
 800dd4a:	f241 1211 	movw	r2, #4369	; 0x1111
 800dd4e:	4211      	tst	r1, r2
 800dd50:	d108      	bne.n	800dd64 <HAL_TIM_Encoder_Stop+0x48>
 800dd52:	6a19      	ldr	r1, [r3, #32]
 800dd54:	f240 4244 	movw	r2, #1092	; 0x444
 800dd58:	4211      	tst	r1, r2
 800dd5a:	d103      	bne.n	800dd64 <HAL_TIM_Encoder_Stop+0x48>
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	f022 0201 	bic.w	r2, r2, #1
 800dd62:	601a      	str	r2, [r3, #0]
}
 800dd64:	2000      	movs	r0, #0
 800dd66:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dd68:	2200      	movs	r2, #0
 800dd6a:	2104      	movs	r1, #4
 800dd6c:	6800      	ldr	r0, [r0, #0]
 800dd6e:	f7ff f88d 	bl	800ce8c <TIM_CCxChannelCmd>
      break;
 800dd72:	e7e8      	b.n	800dd46 <HAL_TIM_Encoder_Stop+0x2a>

0800dd74 <HAL_TIM_Encoder_Start_IT>:
{
 800dd74:	b510      	push	{r4, lr}
 800dd76:	4604      	mov	r4, r0
  switch (Channel)
 800dd78:	b1b1      	cbz	r1, 800dda8 <HAL_TIM_Encoder_Start_IT+0x34>
 800dd7a:	2904      	cmp	r1, #4
 800dd7c:	d025      	beq.n	800ddca <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dd7e:	2201      	movs	r2, #1
 800dd80:	2100      	movs	r1, #0
 800dd82:	6800      	ldr	r0, [r0, #0]
 800dd84:	f7ff f882 	bl	800ce8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd88:	2201      	movs	r2, #1
 800dd8a:	2104      	movs	r1, #4
 800dd8c:	6820      	ldr	r0, [r4, #0]
 800dd8e:	f7ff f87d 	bl	800ce8c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dd92:	6822      	ldr	r2, [r4, #0]
 800dd94:	68d3      	ldr	r3, [r2, #12]
 800dd96:	f043 0302 	orr.w	r3, r3, #2
 800dd9a:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dd9c:	6822      	ldr	r2, [r4, #0]
 800dd9e:	68d3      	ldr	r3, [r2, #12]
 800dda0:	f043 0304 	orr.w	r3, r3, #4
 800dda4:	60d3      	str	r3, [r2, #12]
      break;
 800dda6:	e009      	b.n	800ddbc <HAL_TIM_Encoder_Start_IT+0x48>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dda8:	2201      	movs	r2, #1
 800ddaa:	2100      	movs	r1, #0
 800ddac:	6800      	ldr	r0, [r0, #0]
 800ddae:	f7ff f86d 	bl	800ce8c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ddb2:	6822      	ldr	r2, [r4, #0]
 800ddb4:	68d3      	ldr	r3, [r2, #12]
 800ddb6:	f043 0302 	orr.w	r3, r3, #2
 800ddba:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 800ddbc:	6822      	ldr	r2, [r4, #0]
 800ddbe:	6813      	ldr	r3, [r2, #0]
 800ddc0:	f043 0301 	orr.w	r3, r3, #1
 800ddc4:	6013      	str	r3, [r2, #0]
}
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ddca:	2201      	movs	r2, #1
 800ddcc:	2104      	movs	r1, #4
 800ddce:	6800      	ldr	r0, [r0, #0]
 800ddd0:	f7ff f85c 	bl	800ce8c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ddd4:	6822      	ldr	r2, [r4, #0]
 800ddd6:	68d3      	ldr	r3, [r2, #12]
 800ddd8:	f043 0304 	orr.w	r3, r3, #4
 800dddc:	60d3      	str	r3, [r2, #12]
      break;
 800ddde:	e7ed      	b.n	800ddbc <HAL_TIM_Encoder_Start_IT+0x48>

0800dde0 <HAL_TIM_Encoder_Stop_IT>:
{
 800dde0:	b510      	push	{r4, lr}
 800dde2:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 800dde4:	b349      	cbz	r1, 800de3a <HAL_TIM_Encoder_Stop_IT+0x5a>
  else if (Channel == TIM_CHANNEL_2)
 800dde6:	2904      	cmp	r1, #4
 800dde8:	d032      	beq.n	800de50 <HAL_TIM_Encoder_Stop_IT+0x70>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800ddea:	2200      	movs	r2, #0
 800ddec:	4611      	mov	r1, r2
 800ddee:	6800      	ldr	r0, [r0, #0]
 800ddf0:	f7ff f84c 	bl	800ce8c <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	2104      	movs	r1, #4
 800ddf8:	6820      	ldr	r0, [r4, #0]
 800ddfa:	f7ff f847 	bl	800ce8c <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ddfe:	6822      	ldr	r2, [r4, #0]
 800de00:	68d3      	ldr	r3, [r2, #12]
 800de02:	f023 0302 	bic.w	r3, r3, #2
 800de06:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800de08:	6822      	ldr	r2, [r4, #0]
 800de0a:	68d3      	ldr	r3, [r2, #12]
 800de0c:	f023 0304 	bic.w	r3, r3, #4
 800de10:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	6a19      	ldr	r1, [r3, #32]
 800de16:	f241 1211 	movw	r2, #4369	; 0x1111
 800de1a:	4211      	tst	r1, r2
 800de1c:	d108      	bne.n	800de30 <HAL_TIM_Encoder_Stop_IT+0x50>
 800de1e:	6a19      	ldr	r1, [r3, #32]
 800de20:	f240 4244 	movw	r2, #1092	; 0x444
 800de24:	4211      	tst	r1, r2
 800de26:	d103      	bne.n	800de30 <HAL_TIM_Encoder_Stop_IT+0x50>
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	f022 0201 	bic.w	r2, r2, #1
 800de2e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800de30:	2301      	movs	r3, #1
 800de32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800de36:	2000      	movs	r0, #0
 800de38:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800de3a:	2200      	movs	r2, #0
 800de3c:	4611      	mov	r1, r2
 800de3e:	6800      	ldr	r0, [r0, #0]
 800de40:	f7ff f824 	bl	800ce8c <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800de44:	6822      	ldr	r2, [r4, #0]
 800de46:	68d3      	ldr	r3, [r2, #12]
 800de48:	f023 0302 	bic.w	r3, r3, #2
 800de4c:	60d3      	str	r3, [r2, #12]
 800de4e:	e7e0      	b.n	800de12 <HAL_TIM_Encoder_Stop_IT+0x32>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800de50:	2200      	movs	r2, #0
 800de52:	2104      	movs	r1, #4
 800de54:	6800      	ldr	r0, [r0, #0]
 800de56:	f7ff f819 	bl	800ce8c <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800de5a:	6822      	ldr	r2, [r4, #0]
 800de5c:	68d3      	ldr	r3, [r2, #12]
 800de5e:	f023 0304 	bic.w	r3, r3, #4
 800de62:	60d3      	str	r3, [r2, #12]
 800de64:	e7d5      	b.n	800de12 <HAL_TIM_Encoder_Stop_IT+0x32>
	...

0800de68 <HAL_TIM_Encoder_Start_DMA>:
{
 800de68:	b570      	push	{r4, r5, r6, lr}
 800de6a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800de6e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800de72:	b2e4      	uxtb	r4, r4
 800de74:	2c02      	cmp	r4, #2
 800de76:	f000 809f 	beq.w	800dfb8 <HAL_TIM_Encoder_Start_DMA+0x150>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800de7a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800de7e:	b2e4      	uxtb	r4, r4
 800de80:	2c01      	cmp	r4, #1
 800de82:	d008      	beq.n	800de96 <HAL_TIM_Encoder_Start_DMA+0x2e>
 800de84:	461e      	mov	r6, r3
 800de86:	4604      	mov	r4, r0
  switch (Channel)
 800de88:	2904      	cmp	r1, #4
 800de8a:	d031      	beq.n	800def0 <HAL_TIM_Encoder_Start_DMA+0x88>
 800de8c:	293c      	cmp	r1, #60	; 0x3c
 800de8e:	d053      	beq.n	800df38 <HAL_TIM_Encoder_Start_DMA+0xd0>
 800de90:	b159      	cbz	r1, 800deaa <HAL_TIM_Encoder_Start_DMA+0x42>
  return HAL_OK;
 800de92:	2500      	movs	r5, #0
 800de94:	e091      	b.n	800dfba <HAL_TIM_Encoder_Start_DMA+0x152>
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 800de96:	b122      	cbz	r2, 800dea2 <HAL_TIM_Encoder_Start_DMA+0x3a>
 800de98:	b11b      	cbz	r3, 800dea2 <HAL_TIM_Encoder_Start_DMA+0x3a>
      htim->State = HAL_TIM_STATE_BUSY;
 800de9a:	2402      	movs	r4, #2
 800de9c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800dea0:	e7f0      	b.n	800de84 <HAL_TIM_Encoder_Start_DMA+0x1c>
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 800dea2:	2d00      	cmp	r5, #0
 800dea4:	d0f9      	beq.n	800de9a <HAL_TIM_Encoder_Start_DMA+0x32>
      return HAL_ERROR;
 800dea6:	2501      	movs	r5, #1
 800dea8:	e087      	b.n	800dfba <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800deaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800deac:	4944      	ldr	r1, [pc, #272]	; (800dfc0 <HAL_TIM_Encoder_Start_DMA+0x158>)
 800deae:	62d9      	str	r1, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800deb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800deb2:	4944      	ldr	r1, [pc, #272]	; (800dfc4 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 800deb4:	6319      	str	r1, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800deb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800deb8:	4943      	ldr	r1, [pc, #268]	; (800dfc8 <HAL_TIM_Encoder_Start_DMA+0x160>)
 800deba:	6359      	str	r1, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 800debc:	6801      	ldr	r1, [r0, #0]
 800debe:	462b      	mov	r3, r5
 800dec0:	3134      	adds	r1, #52	; 0x34
 800dec2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800dec4:	f7f4 fc5b 	bl	800277e <HAL_DMA_Start_IT>
 800dec8:	4605      	mov	r5, r0
 800deca:	b108      	cbz	r0, 800ded0 <HAL_TIM_Encoder_Start_DMA+0x68>
        return HAL_ERROR;
 800decc:	2501      	movs	r5, #1
 800dece:	e074      	b.n	800dfba <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ded0:	6822      	ldr	r2, [r4, #0]
 800ded2:	68d3      	ldr	r3, [r2, #12]
 800ded4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ded8:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 800deda:	6822      	ldr	r2, [r4, #0]
 800dedc:	6813      	ldr	r3, [r2, #0]
 800dede:	f043 0301 	orr.w	r3, r3, #1
 800dee2:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dee4:	2201      	movs	r2, #1
 800dee6:	2100      	movs	r1, #0
 800dee8:	6820      	ldr	r0, [r4, #0]
 800deea:	f7fe ffcf 	bl	800ce8c <TIM_CCxChannelCmd>
      break;
 800deee:	e064      	b.n	800dfba <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800def0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800def2:	4a33      	ldr	r2, [pc, #204]	; (800dfc0 <HAL_TIM_Encoder_Start_DMA+0x158>)
 800def4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800def6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800def8:	4a32      	ldr	r2, [pc, #200]	; (800dfc4 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 800defa:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800defc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800defe:	4a32      	ldr	r2, [pc, #200]	; (800dfc8 <HAL_TIM_Encoder_Start_DMA+0x160>)
 800df00:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 800df02:	6801      	ldr	r1, [r0, #0]
 800df04:	462b      	mov	r3, r5
 800df06:	4632      	mov	r2, r6
 800df08:	3138      	adds	r1, #56	; 0x38
 800df0a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800df0c:	f7f4 fc37 	bl	800277e <HAL_DMA_Start_IT>
 800df10:	4605      	mov	r5, r0
 800df12:	b108      	cbz	r0, 800df18 <HAL_TIM_Encoder_Start_DMA+0xb0>
        return HAL_ERROR;
 800df14:	2501      	movs	r5, #1
 800df16:	e050      	b.n	800dfba <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800df18:	6822      	ldr	r2, [r4, #0]
 800df1a:	68d3      	ldr	r3, [r2, #12]
 800df1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800df20:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 800df22:	6822      	ldr	r2, [r4, #0]
 800df24:	6813      	ldr	r3, [r2, #0]
 800df26:	f043 0301 	orr.w	r3, r3, #1
 800df2a:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800df2c:	2201      	movs	r2, #1
 800df2e:	2104      	movs	r1, #4
 800df30:	6820      	ldr	r0, [r4, #0]
 800df32:	f7fe ffab 	bl	800ce8c <TIM_CCxChannelCmd>
      break;
 800df36:	e040      	b.n	800dfba <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800df38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df3a:	4921      	ldr	r1, [pc, #132]	; (800dfc0 <HAL_TIM_Encoder_Start_DMA+0x158>)
 800df3c:	62d9      	str	r1, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800df3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df40:	4920      	ldr	r1, [pc, #128]	; (800dfc4 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 800df42:	6319      	str	r1, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800df44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df46:	4920      	ldr	r1, [pc, #128]	; (800dfc8 <HAL_TIM_Encoder_Start_DMA+0x160>)
 800df48:	6359      	str	r1, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 800df4a:	6801      	ldr	r1, [r0, #0]
 800df4c:	462b      	mov	r3, r5
 800df4e:	3134      	adds	r1, #52	; 0x34
 800df50:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800df52:	f7f4 fc14 	bl	800277e <HAL_DMA_Start_IT>
 800df56:	b108      	cbz	r0, 800df5c <HAL_TIM_Encoder_Start_DMA+0xf4>
        return HAL_ERROR;
 800df58:	2501      	movs	r5, #1
 800df5a:	e02e      	b.n	800dfba <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800df5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df5e:	4a18      	ldr	r2, [pc, #96]	; (800dfc0 <HAL_TIM_Encoder_Start_DMA+0x158>)
 800df60:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800df62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df64:	4a17      	ldr	r2, [pc, #92]	; (800dfc4 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 800df66:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800df68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df6a:	4a17      	ldr	r2, [pc, #92]	; (800dfc8 <HAL_TIM_Encoder_Start_DMA+0x160>)
 800df6c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 800df6e:	6821      	ldr	r1, [r4, #0]
 800df70:	462b      	mov	r3, r5
 800df72:	4632      	mov	r2, r6
 800df74:	3138      	adds	r1, #56	; 0x38
 800df76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800df78:	f7f4 fc01 	bl	800277e <HAL_DMA_Start_IT>
 800df7c:	4605      	mov	r5, r0
 800df7e:	b108      	cbz	r0, 800df84 <HAL_TIM_Encoder_Start_DMA+0x11c>
        return HAL_ERROR;
 800df80:	2501      	movs	r5, #1
 800df82:	e01a      	b.n	800dfba <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE(htim);
 800df84:	6822      	ldr	r2, [r4, #0]
 800df86:	6813      	ldr	r3, [r2, #0]
 800df88:	f043 0301 	orr.w	r3, r3, #1
 800df8c:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800df8e:	2201      	movs	r2, #1
 800df90:	2100      	movs	r1, #0
 800df92:	6820      	ldr	r0, [r4, #0]
 800df94:	f7fe ff7a 	bl	800ce8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800df98:	2201      	movs	r2, #1
 800df9a:	2104      	movs	r1, #4
 800df9c:	6820      	ldr	r0, [r4, #0]
 800df9e:	f7fe ff75 	bl	800ce8c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800dfa2:	6822      	ldr	r2, [r4, #0]
 800dfa4:	68d3      	ldr	r3, [r2, #12]
 800dfa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dfaa:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800dfac:	6822      	ldr	r2, [r4, #0]
 800dfae:	68d3      	ldr	r3, [r2, #12]
 800dfb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dfb4:	60d3      	str	r3, [r2, #12]
      break;
 800dfb6:	e000      	b.n	800dfba <HAL_TIM_Encoder_Start_DMA+0x152>
    return HAL_BUSY;
 800dfb8:	2502      	movs	r5, #2
}
 800dfba:	4628      	mov	r0, r5
 800dfbc:	bd70      	pop	{r4, r5, r6, pc}
 800dfbe:	bf00      	nop
 800dfc0:	0800bf6d 	.word	0x0800bf6d
 800dfc4:	0800bfb3 	.word	0x0800bfb3
 800dfc8:	0800c243 	.word	0x0800c243

0800dfcc <HAL_TIM_Encoder_Stop_DMA>:
{
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 800dfd0:	2900      	cmp	r1, #0
 800dfd2:	d02f      	beq.n	800e034 <HAL_TIM_Encoder_Stop_DMA+0x68>
  else if (Channel == TIM_CHANNEL_2)
 800dfd4:	2904      	cmp	r1, #4
 800dfd6:	d03b      	beq.n	800e050 <HAL_TIM_Encoder_Stop_DMA+0x84>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800dfd8:	2200      	movs	r2, #0
 800dfda:	4611      	mov	r1, r2
 800dfdc:	6800      	ldr	r0, [r0, #0]
 800dfde:	f7fe ff55 	bl	800ce8c <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	2104      	movs	r1, #4
 800dfe6:	6820      	ldr	r0, [r4, #0]
 800dfe8:	f7fe ff50 	bl	800ce8c <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800dfec:	6822      	ldr	r2, [r4, #0]
 800dfee:	68d3      	ldr	r3, [r2, #12]
 800dff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dff4:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800dff6:	6822      	ldr	r2, [r4, #0]
 800dff8:	68d3      	ldr	r3, [r2, #12]
 800dffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dffe:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e000:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e002:	f7f4 fc2e 	bl	8002862 <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e006:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e008:	f7f4 fc2b 	bl	8002862 <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	6a19      	ldr	r1, [r3, #32]
 800e010:	f241 1211 	movw	r2, #4369	; 0x1111
 800e014:	4211      	tst	r1, r2
 800e016:	d108      	bne.n	800e02a <HAL_TIM_Encoder_Stop_DMA+0x5e>
 800e018:	6a19      	ldr	r1, [r3, #32]
 800e01a:	f240 4244 	movw	r2, #1092	; 0x444
 800e01e:	4211      	tst	r1, r2
 800e020:	d103      	bne.n	800e02a <HAL_TIM_Encoder_Stop_DMA+0x5e>
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	f022 0201 	bic.w	r2, r2, #1
 800e028:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e02a:	2301      	movs	r3, #1
 800e02c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e030:	2000      	movs	r0, #0
 800e032:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e034:	2200      	movs	r2, #0
 800e036:	4611      	mov	r1, r2
 800e038:	6800      	ldr	r0, [r0, #0]
 800e03a:	f7fe ff27 	bl	800ce8c <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e03e:	6822      	ldr	r2, [r4, #0]
 800e040:	68d3      	ldr	r3, [r2, #12]
 800e042:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e046:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e048:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e04a:	f7f4 fc0a 	bl	8002862 <HAL_DMA_Abort_IT>
 800e04e:	e7dd      	b.n	800e00c <HAL_TIM_Encoder_Stop_DMA+0x40>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800e050:	2200      	movs	r2, #0
 800e052:	2104      	movs	r1, #4
 800e054:	6800      	ldr	r0, [r0, #0]
 800e056:	f7fe ff19 	bl	800ce8c <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e05a:	6822      	ldr	r2, [r4, #0]
 800e05c:	68d3      	ldr	r3, [r2, #12]
 800e05e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e062:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e064:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e066:	f7f4 fbfc 	bl	8002862 <HAL_DMA_Abort_IT>
 800e06a:	e7cf      	b.n	800e00c <HAL_TIM_Encoder_Stop_DMA+0x40>

0800e06c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800e06c:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e06e:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800e072:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e074:	2404      	movs	r4, #4
 800e076:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 800e078:	ea23 0304 	bic.w	r3, r3, r4
 800e07c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e07e:	6a03      	ldr	r3, [r0, #32]
 800e080:	408a      	lsls	r2, r1
 800e082:	431a      	orrs	r2, r3
 800e084:	6202      	str	r2, [r0, #32]
}
 800e086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <HAL_TIMEx_HallSensor_MspInit>:
}
 800e08c:	4770      	bx	lr

0800e08e <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 800e08e:	2800      	cmp	r0, #0
 800e090:	d05c      	beq.n	800e14c <HAL_TIMEx_HallSensor_Init+0xbe>
{
 800e092:	b570      	push	{r4, r5, r6, lr}
 800e094:	b088      	sub	sp, #32
 800e096:	4604      	mov	r4, r0
 800e098:	460e      	mov	r6, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800e09a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d04f      	beq.n	800e142 <HAL_TIMEx_HallSensor_Init+0xb4>
  htim->State = HAL_TIM_STATE_BUSY;
 800e0a2:	2302      	movs	r3, #2
 800e0a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0a8:	1d21      	adds	r1, r4, #4
 800e0aa:	6820      	ldr	r0, [r4, #0]
 800e0ac:	f7fe f8e4 	bl	800c278 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800e0b0:	68b3      	ldr	r3, [r6, #8]
 800e0b2:	2203      	movs	r2, #3
 800e0b4:	6831      	ldr	r1, [r6, #0]
 800e0b6:	6820      	ldr	r0, [r4, #0]
 800e0b8:	f7fe fb6e 	bl	800c798 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e0bc:	6822      	ldr	r2, [r4, #0]
 800e0be:	6993      	ldr	r3, [r2, #24]
 800e0c0:	f023 030c 	bic.w	r3, r3, #12
 800e0c4:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800e0c6:	6822      	ldr	r2, [r4, #0]
 800e0c8:	6993      	ldr	r3, [r2, #24]
 800e0ca:	6871      	ldr	r1, [r6, #4]
 800e0cc:	430b      	orrs	r3, r1
 800e0ce:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800e0d0:	6822      	ldr	r2, [r4, #0]
 800e0d2:	6853      	ldr	r3, [r2, #4]
 800e0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0d8:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800e0da:	6822      	ldr	r2, [r4, #0]
 800e0dc:	6893      	ldr	r3, [r2, #8]
 800e0de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0e2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800e0e4:	6822      	ldr	r2, [r4, #0]
 800e0e6:	6893      	ldr	r3, [r2, #8]
 800e0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0ec:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800e0ee:	6822      	ldr	r2, [r4, #0]
 800e0f0:	6893      	ldr	r3, [r2, #8]
 800e0f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0f6:	f023 0307 	bic.w	r3, r3, #7
 800e0fa:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800e0fc:	6822      	ldr	r2, [r4, #0]
 800e0fe:	6893      	ldr	r3, [r2, #8]
 800e100:	f043 0304 	orr.w	r3, r3, #4
 800e104:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800e106:	2500      	movs	r5, #0
 800e108:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e10a:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800e10c:	2370      	movs	r3, #112	; 0x70
 800e10e:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e110:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e112:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e114:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800e116:	68f3      	ldr	r3, [r6, #12]
 800e118:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800e11a:	a901      	add	r1, sp, #4
 800e11c:	6820      	ldr	r0, [r4, #0]
 800e11e:	f7fe fa1d 	bl	800c55c <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800e122:	6822      	ldr	r2, [r4, #0]
 800e124:	6853      	ldr	r3, [r2, #4]
 800e126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e12a:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800e12c:	6822      	ldr	r2, [r4, #0]
 800e12e:	6853      	ldr	r3, [r2, #4]
 800e130:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800e134:	6053      	str	r3, [r2, #4]
  htim->State = HAL_TIM_STATE_READY;
 800e136:	2301      	movs	r3, #1
 800e138:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800e13c:	4628      	mov	r0, r5
}
 800e13e:	b008      	add	sp, #32
 800e140:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800e142:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800e146:	f7ff ffa1 	bl	800e08c <HAL_TIMEx_HallSensor_MspInit>
 800e14a:	e7aa      	b.n	800e0a2 <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 800e14c:	2001      	movs	r0, #1
}
 800e14e:	4770      	bx	lr

0800e150 <HAL_TIMEx_HallSensor_MspDeInit>:
}
 800e150:	4770      	bx	lr

0800e152 <HAL_TIMEx_HallSensor_DeInit>:
{
 800e152:	b510      	push	{r4, lr}
 800e154:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800e156:	2302      	movs	r3, #2
 800e158:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800e15c:	6803      	ldr	r3, [r0, #0]
 800e15e:	6a19      	ldr	r1, [r3, #32]
 800e160:	f241 1211 	movw	r2, #4369	; 0x1111
 800e164:	4211      	tst	r1, r2
 800e166:	d108      	bne.n	800e17a <HAL_TIMEx_HallSensor_DeInit+0x28>
 800e168:	6a19      	ldr	r1, [r3, #32]
 800e16a:	f240 4244 	movw	r2, #1092	; 0x444
 800e16e:	4211      	tst	r1, r2
 800e170:	d103      	bne.n	800e17a <HAL_TIMEx_HallSensor_DeInit+0x28>
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	f022 0201 	bic.w	r2, r2, #1
 800e178:	601a      	str	r2, [r3, #0]
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800e17a:	4620      	mov	r0, r4
 800e17c:	f7ff ffe8 	bl	800e150 <HAL_TIMEx_HallSensor_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800e180:	2000      	movs	r0, #0
 800e182:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e186:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800e18a:	bd10      	pop	{r4, pc}

0800e18c <HAL_TIMEx_HallSensor_Start>:
{
 800e18c:	b510      	push	{r4, lr}
 800e18e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e190:	2201      	movs	r2, #1
 800e192:	2100      	movs	r1, #0
 800e194:	6800      	ldr	r0, [r0, #0]
 800e196:	f7fe fe79 	bl	800ce8c <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e19a:	6822      	ldr	r2, [r4, #0]
 800e19c:	6891      	ldr	r1, [r2, #8]
 800e19e:	4b06      	ldr	r3, [pc, #24]	; (800e1b8 <HAL_TIMEx_HallSensor_Start+0x2c>)
 800e1a0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1a2:	2b06      	cmp	r3, #6
 800e1a4:	d006      	beq.n	800e1b4 <HAL_TIMEx_HallSensor_Start+0x28>
 800e1a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1aa:	d003      	beq.n	800e1b4 <HAL_TIMEx_HallSensor_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 800e1ac:	6813      	ldr	r3, [r2, #0]
 800e1ae:	f043 0301 	orr.w	r3, r3, #1
 800e1b2:	6013      	str	r3, [r2, #0]
}
 800e1b4:	2000      	movs	r0, #0
 800e1b6:	bd10      	pop	{r4, pc}
 800e1b8:	00010007 	.word	0x00010007

0800e1bc <HAL_TIMEx_HallSensor_Stop>:
{
 800e1bc:	b510      	push	{r4, lr}
 800e1be:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	6800      	ldr	r0, [r0, #0]
 800e1c6:	f7fe fe61 	bl	800ce8c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	6a19      	ldr	r1, [r3, #32]
 800e1ce:	f241 1211 	movw	r2, #4369	; 0x1111
 800e1d2:	4211      	tst	r1, r2
 800e1d4:	d108      	bne.n	800e1e8 <HAL_TIMEx_HallSensor_Stop+0x2c>
 800e1d6:	6a19      	ldr	r1, [r3, #32]
 800e1d8:	f240 4244 	movw	r2, #1092	; 0x444
 800e1dc:	4211      	tst	r1, r2
 800e1de:	d103      	bne.n	800e1e8 <HAL_TIMEx_HallSensor_Stop+0x2c>
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	f022 0201 	bic.w	r2, r2, #1
 800e1e6:	601a      	str	r2, [r3, #0]
}
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	bd10      	pop	{r4, pc}

0800e1ec <HAL_TIMEx_HallSensor_Start_IT>:
{
 800e1ec:	b510      	push	{r4, lr}
 800e1ee:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e1f0:	6802      	ldr	r2, [r0, #0]
 800e1f2:	68d3      	ldr	r3, [r2, #12]
 800e1f4:	f043 0302 	orr.w	r3, r3, #2
 800e1f8:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	6800      	ldr	r0, [r0, #0]
 800e200:	f7fe fe44 	bl	800ce8c <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e204:	6822      	ldr	r2, [r4, #0]
 800e206:	6891      	ldr	r1, [r2, #8]
 800e208:	4b06      	ldr	r3, [pc, #24]	; (800e224 <HAL_TIMEx_HallSensor_Start_IT+0x38>)
 800e20a:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e20c:	2b06      	cmp	r3, #6
 800e20e:	d006      	beq.n	800e21e <HAL_TIMEx_HallSensor_Start_IT+0x32>
 800e210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e214:	d003      	beq.n	800e21e <HAL_TIMEx_HallSensor_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 800e216:	6813      	ldr	r3, [r2, #0]
 800e218:	f043 0301 	orr.w	r3, r3, #1
 800e21c:	6013      	str	r3, [r2, #0]
}
 800e21e:	2000      	movs	r0, #0
 800e220:	bd10      	pop	{r4, pc}
 800e222:	bf00      	nop
 800e224:	00010007 	.word	0x00010007

0800e228 <HAL_TIMEx_HallSensor_Stop_IT>:
{
 800e228:	b510      	push	{r4, lr}
 800e22a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e22c:	2200      	movs	r2, #0
 800e22e:	4611      	mov	r1, r2
 800e230:	6800      	ldr	r0, [r0, #0]
 800e232:	f7fe fe2b 	bl	800ce8c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e236:	6822      	ldr	r2, [r4, #0]
 800e238:	68d3      	ldr	r3, [r2, #12]
 800e23a:	f023 0302 	bic.w	r3, r3, #2
 800e23e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800e240:	6823      	ldr	r3, [r4, #0]
 800e242:	6a19      	ldr	r1, [r3, #32]
 800e244:	f241 1211 	movw	r2, #4369	; 0x1111
 800e248:	4211      	tst	r1, r2
 800e24a:	d108      	bne.n	800e25e <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 800e24c:	6a19      	ldr	r1, [r3, #32]
 800e24e:	f240 4244 	movw	r2, #1092	; 0x444
 800e252:	4211      	tst	r1, r2
 800e254:	d103      	bne.n	800e25e <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	f022 0201 	bic.w	r2, r2, #1
 800e25c:	601a      	str	r2, [r3, #0]
}
 800e25e:	2000      	movs	r0, #0
 800e260:	bd10      	pop	{r4, pc}
	...

0800e264 <HAL_TIMEx_HallSensor_Start_DMA>:
{
 800e264:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800e266:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800e26a:	b2ed      	uxtb	r5, r5
 800e26c:	2d02      	cmp	r5, #2
 800e26e:	d03a      	beq.n	800e2e6 <HAL_TIMEx_HallSensor_Start_DMA+0x82>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800e270:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e274:	b2e4      	uxtb	r4, r4
 800e276:	2c01      	cmp	r4, #1
 800e278:	d104      	bne.n	800e284 <HAL_TIMEx_HallSensor_Start_DMA+0x20>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e27a:	2900      	cmp	r1, #0
 800e27c:	d02f      	beq.n	800e2de <HAL_TIMEx_HallSensor_Start_DMA+0x7a>
      htim->State = HAL_TIM_STATE_BUSY;
 800e27e:	2302      	movs	r3, #2
 800e280:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800e284:	4616      	mov	r6, r2
 800e286:	460d      	mov	r5, r1
 800e288:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e28a:	2201      	movs	r2, #1
 800e28c:	2100      	movs	r1, #0
 800e28e:	6800      	ldr	r0, [r0, #0]
 800e290:	f7fe fdfc 	bl	800ce8c <TIM_CCxChannelCmd>
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800e294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e296:	4a16      	ldr	r2, [pc, #88]	; (800e2f0 <HAL_TIMEx_HallSensor_Start_DMA+0x8c>)
 800e298:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e29c:	4a15      	ldr	r2, [pc, #84]	; (800e2f4 <HAL_TIMEx_HallSensor_Start_DMA+0x90>)
 800e29e:	631a      	str	r2, [r3, #48]	; 0x30
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2a2:	4a15      	ldr	r2, [pc, #84]	; (800e2f8 <HAL_TIMEx_HallSensor_Start_DMA+0x94>)
 800e2a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800e2a6:	6821      	ldr	r1, [r4, #0]
 800e2a8:	4633      	mov	r3, r6
 800e2aa:	462a      	mov	r2, r5
 800e2ac:	3134      	adds	r1, #52	; 0x34
 800e2ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e2b0:	f7f4 fa65 	bl	800277e <HAL_DMA_Start_IT>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	b9c0      	cbnz	r0, 800e2ea <HAL_TIMEx_HallSensor_Start_DMA+0x86>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e2b8:	6821      	ldr	r1, [r4, #0]
 800e2ba:	68ca      	ldr	r2, [r1, #12]
 800e2bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2c0:	60ca      	str	r2, [r1, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2c2:	6821      	ldr	r1, [r4, #0]
 800e2c4:	6888      	ldr	r0, [r1, #8]
 800e2c6:	4a0d      	ldr	r2, [pc, #52]	; (800e2fc <HAL_TIMEx_HallSensor_Start_DMA+0x98>)
 800e2c8:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2ca:	2a06      	cmp	r2, #6
 800e2cc:	d00e      	beq.n	800e2ec <HAL_TIMEx_HallSensor_Start_DMA+0x88>
 800e2ce:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e2d2:	d00b      	beq.n	800e2ec <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    __HAL_TIM_ENABLE(htim);
 800e2d4:	680a      	ldr	r2, [r1, #0]
 800e2d6:	f042 0201 	orr.w	r2, r2, #1
 800e2da:	600a      	str	r2, [r1, #0]
 800e2dc:	e006      	b.n	800e2ec <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e2de:	2a00      	cmp	r2, #0
 800e2e0:	d0cd      	beq.n	800e27e <HAL_TIMEx_HallSensor_Start_DMA+0x1a>
      return HAL_ERROR;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	e002      	b.n	800e2ec <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    return HAL_BUSY;
 800e2e6:	2302      	movs	r3, #2
 800e2e8:	e000      	b.n	800e2ec <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    return HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	bd70      	pop	{r4, r5, r6, pc}
 800e2f0:	0800bf6d 	.word	0x0800bf6d
 800e2f4:	0800bfb3 	.word	0x0800bfb3
 800e2f8:	0800c243 	.word	0x0800c243
 800e2fc:	00010007 	.word	0x00010007

0800e300 <HAL_TIMEx_HallSensor_Stop_DMA>:
{
 800e300:	b510      	push	{r4, lr}
 800e302:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800e304:	2200      	movs	r2, #0
 800e306:	4611      	mov	r1, r2
 800e308:	6800      	ldr	r0, [r0, #0]
 800e30a:	f7fe fdbf 	bl	800ce8c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e30e:	6822      	ldr	r2, [r4, #0]
 800e310:	68d3      	ldr	r3, [r2, #12]
 800e312:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e316:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e318:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e31a:	f7f4 faa2 	bl	8002862 <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	6a19      	ldr	r1, [r3, #32]
 800e322:	f241 1211 	movw	r2, #4369	; 0x1111
 800e326:	4211      	tst	r1, r2
 800e328:	d108      	bne.n	800e33c <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 800e32a:	6a19      	ldr	r1, [r3, #32]
 800e32c:	f240 4244 	movw	r2, #1092	; 0x444
 800e330:	4211      	tst	r1, r2
 800e332:	d103      	bne.n	800e33c <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	f022 0201 	bic.w	r2, r2, #1
 800e33a:	601a      	str	r2, [r3, #0]
}
 800e33c:	2000      	movs	r0, #0
 800e33e:	bd10      	pop	{r4, pc}

0800e340 <HAL_TIMEx_OCN_Start>:
{
 800e340:	b510      	push	{r4, lr}
 800e342:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e344:	2204      	movs	r2, #4
 800e346:	6800      	ldr	r0, [r0, #0]
 800e348:	f7ff fe90 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e34c:	6822      	ldr	r2, [r4, #0]
 800e34e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e354:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e356:	6822      	ldr	r2, [r4, #0]
 800e358:	6891      	ldr	r1, [r2, #8]
 800e35a:	4b06      	ldr	r3, [pc, #24]	; (800e374 <HAL_TIMEx_OCN_Start+0x34>)
 800e35c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e35e:	2b06      	cmp	r3, #6
 800e360:	d006      	beq.n	800e370 <HAL_TIMEx_OCN_Start+0x30>
 800e362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e366:	d003      	beq.n	800e370 <HAL_TIMEx_OCN_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 800e368:	6813      	ldr	r3, [r2, #0]
 800e36a:	f043 0301 	orr.w	r3, r3, #1
 800e36e:	6013      	str	r3, [r2, #0]
}
 800e370:	2000      	movs	r0, #0
 800e372:	bd10      	pop	{r4, pc}
 800e374:	00010007 	.word	0x00010007

0800e378 <HAL_TIMEx_OCN_Stop>:
{
 800e378:	b510      	push	{r4, lr}
 800e37a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e37c:	2200      	movs	r2, #0
 800e37e:	6800      	ldr	r0, [r0, #0]
 800e380:	f7ff fe74 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e384:	6823      	ldr	r3, [r4, #0]
 800e386:	6a19      	ldr	r1, [r3, #32]
 800e388:	f241 1211 	movw	r2, #4369	; 0x1111
 800e38c:	4211      	tst	r1, r2
 800e38e:	d108      	bne.n	800e3a2 <HAL_TIMEx_OCN_Stop+0x2a>
 800e390:	6a19      	ldr	r1, [r3, #32]
 800e392:	f240 4244 	movw	r2, #1092	; 0x444
 800e396:	4211      	tst	r1, r2
 800e398:	d103      	bne.n	800e3a2 <HAL_TIMEx_OCN_Stop+0x2a>
 800e39a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e39c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e3a0:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	6a19      	ldr	r1, [r3, #32]
 800e3a6:	f241 1211 	movw	r2, #4369	; 0x1111
 800e3aa:	4211      	tst	r1, r2
 800e3ac:	d108      	bne.n	800e3c0 <HAL_TIMEx_OCN_Stop+0x48>
 800e3ae:	6a19      	ldr	r1, [r3, #32]
 800e3b0:	f240 4244 	movw	r2, #1092	; 0x444
 800e3b4:	4211      	tst	r1, r2
 800e3b6:	d103      	bne.n	800e3c0 <HAL_TIMEx_OCN_Stop+0x48>
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	f022 0201 	bic.w	r2, r2, #1
 800e3be:	601a      	str	r2, [r3, #0]
}
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	bd10      	pop	{r4, pc}

0800e3c4 <HAL_TIMEx_OCN_Start_IT>:
{
 800e3c4:	b510      	push	{r4, lr}
 800e3c6:	4604      	mov	r4, r0
  switch (Channel)
 800e3c8:	2904      	cmp	r1, #4
 800e3ca:	d025      	beq.n	800e418 <HAL_TIMEx_OCN_Start_IT+0x54>
 800e3cc:	2908      	cmp	r1, #8
 800e3ce:	d029      	beq.n	800e424 <HAL_TIMEx_OCN_Start_IT+0x60>
 800e3d0:	b1e1      	cbz	r1, 800e40c <HAL_TIMEx_OCN_Start_IT+0x48>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e3d2:	6822      	ldr	r2, [r4, #0]
 800e3d4:	68d3      	ldr	r3, [r2, #12]
 800e3d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3da:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e3dc:	2204      	movs	r2, #4
 800e3de:	6820      	ldr	r0, [r4, #0]
 800e3e0:	f7ff fe44 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e3e4:	6822      	ldr	r2, [r4, #0]
 800e3e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e3e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3ec:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3ee:	6822      	ldr	r2, [r4, #0]
 800e3f0:	6891      	ldr	r1, [r2, #8]
 800e3f2:	4b0f      	ldr	r3, [pc, #60]	; (800e430 <HAL_TIMEx_OCN_Start_IT+0x6c>)
 800e3f4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3f6:	2b06      	cmp	r3, #6
 800e3f8:	d006      	beq.n	800e408 <HAL_TIMEx_OCN_Start_IT+0x44>
 800e3fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3fe:	d003      	beq.n	800e408 <HAL_TIMEx_OCN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 800e400:	6813      	ldr	r3, [r2, #0]
 800e402:	f043 0301 	orr.w	r3, r3, #1
 800e406:	6013      	str	r3, [r2, #0]
}
 800e408:	2000      	movs	r0, #0
 800e40a:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e40c:	6802      	ldr	r2, [r0, #0]
 800e40e:	68d3      	ldr	r3, [r2, #12]
 800e410:	f043 0302 	orr.w	r3, r3, #2
 800e414:	60d3      	str	r3, [r2, #12]
      break;
 800e416:	e7dc      	b.n	800e3d2 <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e418:	6802      	ldr	r2, [r0, #0]
 800e41a:	68d3      	ldr	r3, [r2, #12]
 800e41c:	f043 0304 	orr.w	r3, r3, #4
 800e420:	60d3      	str	r3, [r2, #12]
      break;
 800e422:	e7d6      	b.n	800e3d2 <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e424:	6802      	ldr	r2, [r0, #0]
 800e426:	68d3      	ldr	r3, [r2, #12]
 800e428:	f043 0308 	orr.w	r3, r3, #8
 800e42c:	60d3      	str	r3, [r2, #12]
      break;
 800e42e:	e7d0      	b.n	800e3d2 <HAL_TIMEx_OCN_Start_IT+0xe>
 800e430:	00010007 	.word	0x00010007

0800e434 <HAL_TIMEx_OCN_Stop_IT>:
{
 800e434:	b510      	push	{r4, lr}
 800e436:	4604      	mov	r4, r0
  switch (Channel)
 800e438:	2904      	cmp	r1, #4
 800e43a:	d037      	beq.n	800e4ac <HAL_TIMEx_OCN_Stop_IT+0x78>
 800e43c:	2908      	cmp	r1, #8
 800e43e:	d03b      	beq.n	800e4b8 <HAL_TIMEx_OCN_Stop_IT+0x84>
 800e440:	2900      	cmp	r1, #0
 800e442:	d02d      	beq.n	800e4a0 <HAL_TIMEx_OCN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e444:	2200      	movs	r2, #0
 800e446:	6820      	ldr	r0, [r4, #0]
 800e448:	f7ff fe10 	bl	800e06c <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 800e44c:	6823      	ldr	r3, [r4, #0]
 800e44e:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800e450:	f240 4244 	movw	r2, #1092	; 0x444
 800e454:	4211      	tst	r1, r2
 800e456:	d103      	bne.n	800e460 <HAL_TIMEx_OCN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800e458:	68da      	ldr	r2, [r3, #12]
 800e45a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e45e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 800e460:	6823      	ldr	r3, [r4, #0]
 800e462:	6a19      	ldr	r1, [r3, #32]
 800e464:	f241 1211 	movw	r2, #4369	; 0x1111
 800e468:	4211      	tst	r1, r2
 800e46a:	d108      	bne.n	800e47e <HAL_TIMEx_OCN_Stop_IT+0x4a>
 800e46c:	6a19      	ldr	r1, [r3, #32]
 800e46e:	f240 4244 	movw	r2, #1092	; 0x444
 800e472:	4211      	tst	r1, r2
 800e474:	d103      	bne.n	800e47e <HAL_TIMEx_OCN_Stop_IT+0x4a>
 800e476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e47c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e47e:	6823      	ldr	r3, [r4, #0]
 800e480:	6a19      	ldr	r1, [r3, #32]
 800e482:	f241 1211 	movw	r2, #4369	; 0x1111
 800e486:	4211      	tst	r1, r2
 800e488:	d108      	bne.n	800e49c <HAL_TIMEx_OCN_Stop_IT+0x68>
 800e48a:	6a19      	ldr	r1, [r3, #32]
 800e48c:	f240 4244 	movw	r2, #1092	; 0x444
 800e490:	4211      	tst	r1, r2
 800e492:	d103      	bne.n	800e49c <HAL_TIMEx_OCN_Stop_IT+0x68>
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	f022 0201 	bic.w	r2, r2, #1
 800e49a:	601a      	str	r2, [r3, #0]
}
 800e49c:	2000      	movs	r0, #0
 800e49e:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e4a0:	6802      	ldr	r2, [r0, #0]
 800e4a2:	68d3      	ldr	r3, [r2, #12]
 800e4a4:	f023 0302 	bic.w	r3, r3, #2
 800e4a8:	60d3      	str	r3, [r2, #12]
      break;
 800e4aa:	e7cb      	b.n	800e444 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e4ac:	6802      	ldr	r2, [r0, #0]
 800e4ae:	68d3      	ldr	r3, [r2, #12]
 800e4b0:	f023 0304 	bic.w	r3, r3, #4
 800e4b4:	60d3      	str	r3, [r2, #12]
      break;
 800e4b6:	e7c5      	b.n	800e444 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e4b8:	6802      	ldr	r2, [r0, #0]
 800e4ba:	68d3      	ldr	r3, [r2, #12]
 800e4bc:	f023 0308 	bic.w	r3, r3, #8
 800e4c0:	60d3      	str	r3, [r2, #12]
      break;
 800e4c2:	e7bf      	b.n	800e444 <HAL_TIMEx_OCN_Stop_IT+0x10>

0800e4c4 <HAL_TIMEx_OCN_Start_DMA>:
{
 800e4c4:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800e4c6:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e4ca:	b2e4      	uxtb	r4, r4
 800e4cc:	2c02      	cmp	r4, #2
 800e4ce:	d071      	beq.n	800e5b4 <HAL_TIMEx_OCN_Start_DMA+0xf0>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800e4d0:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e4d4:	b2e4      	uxtb	r4, r4
 800e4d6:	2c01      	cmp	r4, #1
 800e4d8:	d020      	beq.n	800e51c <HAL_TIMEx_OCN_Start_DMA+0x58>
 800e4da:	4616      	mov	r6, r2
 800e4dc:	460d      	mov	r5, r1
 800e4de:	4604      	mov	r4, r0
  switch (Channel)
 800e4e0:	2904      	cmp	r1, #4
 800e4e2:	d03b      	beq.n	800e55c <HAL_TIMEx_OCN_Start_DMA+0x98>
 800e4e4:	2908      	cmp	r1, #8
 800e4e6:	d04f      	beq.n	800e588 <HAL_TIMEx_OCN_Start_DMA+0xc4>
 800e4e8:	b309      	cbz	r1, 800e52e <HAL_TIMEx_OCN_Start_DMA+0x6a>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e4ea:	2204      	movs	r2, #4
 800e4ec:	4629      	mov	r1, r5
 800e4ee:	6820      	ldr	r0, [r4, #0]
 800e4f0:	f7ff fdbc 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e4f4:	6822      	ldr	r2, [r4, #0]
 800e4f6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e4f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4fc:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4fe:	6822      	ldr	r2, [r4, #0]
 800e500:	6891      	ldr	r1, [r2, #8]
 800e502:	4b32      	ldr	r3, [pc, #200]	; (800e5cc <HAL_TIMEx_OCN_Start_DMA+0x108>)
 800e504:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e506:	2b06      	cmp	r3, #6
 800e508:	d05c      	beq.n	800e5c4 <HAL_TIMEx_OCN_Start_DMA+0x100>
 800e50a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e50e:	d05b      	beq.n	800e5c8 <HAL_TIMEx_OCN_Start_DMA+0x104>
    __HAL_TIM_ENABLE(htim);
 800e510:	6813      	ldr	r3, [r2, #0]
 800e512:	f043 0301 	orr.w	r3, r3, #1
 800e516:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800e518:	2000      	movs	r0, #0
}
 800e51a:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e51c:	b11a      	cbz	r2, 800e526 <HAL_TIMEx_OCN_Start_DMA+0x62>
      htim->State = HAL_TIM_STATE_BUSY;
 800e51e:	2402      	movs	r4, #2
 800e520:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800e524:	e7d9      	b.n	800e4da <HAL_TIMEx_OCN_Start_DMA+0x16>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0f9      	beq.n	800e51e <HAL_TIMEx_OCN_Start_DMA+0x5a>
      return HAL_ERROR;
 800e52a:	2001      	movs	r0, #1
 800e52c:	e7f5      	b.n	800e51a <HAL_TIMEx_OCN_Start_DMA+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e52e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e530:	4927      	ldr	r1, [pc, #156]	; (800e5d0 <HAL_TIMEx_OCN_Start_DMA+0x10c>)
 800e532:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e534:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e536:	4927      	ldr	r1, [pc, #156]	; (800e5d4 <HAL_TIMEx_OCN_Start_DMA+0x110>)
 800e538:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e53a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e53c:	4926      	ldr	r1, [pc, #152]	; (800e5d8 <HAL_TIMEx_OCN_Start_DMA+0x114>)
 800e53e:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800e540:	6802      	ldr	r2, [r0, #0]
 800e542:	3234      	adds	r2, #52	; 0x34
 800e544:	4631      	mov	r1, r6
 800e546:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e548:	f7f4 f919 	bl	800277e <HAL_DMA_Start_IT>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d133      	bne.n	800e5b8 <HAL_TIMEx_OCN_Start_DMA+0xf4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e550:	6822      	ldr	r2, [r4, #0]
 800e552:	68d3      	ldr	r3, [r2, #12]
 800e554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e558:	60d3      	str	r3, [r2, #12]
      break;
 800e55a:	e7c6      	b.n	800e4ea <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e55c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e55e:	491c      	ldr	r1, [pc, #112]	; (800e5d0 <HAL_TIMEx_OCN_Start_DMA+0x10c>)
 800e560:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e562:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e564:	491b      	ldr	r1, [pc, #108]	; (800e5d4 <HAL_TIMEx_OCN_Start_DMA+0x110>)
 800e566:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e568:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e56a:	491b      	ldr	r1, [pc, #108]	; (800e5d8 <HAL_TIMEx_OCN_Start_DMA+0x114>)
 800e56c:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800e56e:	6802      	ldr	r2, [r0, #0]
 800e570:	3238      	adds	r2, #56	; 0x38
 800e572:	4631      	mov	r1, r6
 800e574:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e576:	f7f4 f902 	bl	800277e <HAL_DMA_Start_IT>
 800e57a:	b9f8      	cbnz	r0, 800e5bc <HAL_TIMEx_OCN_Start_DMA+0xf8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e57c:	6822      	ldr	r2, [r4, #0]
 800e57e:	68d3      	ldr	r3, [r2, #12]
 800e580:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e584:	60d3      	str	r3, [r2, #12]
      break;
 800e586:	e7b0      	b.n	800e4ea <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e588:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e58a:	4911      	ldr	r1, [pc, #68]	; (800e5d0 <HAL_TIMEx_OCN_Start_DMA+0x10c>)
 800e58c:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e58e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e590:	4910      	ldr	r1, [pc, #64]	; (800e5d4 <HAL_TIMEx_OCN_Start_DMA+0x110>)
 800e592:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e594:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e596:	4910      	ldr	r1, [pc, #64]	; (800e5d8 <HAL_TIMEx_OCN_Start_DMA+0x114>)
 800e598:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800e59a:	6802      	ldr	r2, [r0, #0]
 800e59c:	323c      	adds	r2, #60	; 0x3c
 800e59e:	4631      	mov	r1, r6
 800e5a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e5a2:	f7f4 f8ec 	bl	800277e <HAL_DMA_Start_IT>
 800e5a6:	b958      	cbnz	r0, 800e5c0 <HAL_TIMEx_OCN_Start_DMA+0xfc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e5a8:	6822      	ldr	r2, [r4, #0]
 800e5aa:	68d3      	ldr	r3, [r2, #12]
 800e5ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e5b0:	60d3      	str	r3, [r2, #12]
      break;
 800e5b2:	e79a      	b.n	800e4ea <HAL_TIMEx_OCN_Start_DMA+0x26>
    return HAL_BUSY;
 800e5b4:	2002      	movs	r0, #2
 800e5b6:	e7b0      	b.n	800e51a <HAL_TIMEx_OCN_Start_DMA+0x56>
        return HAL_ERROR;
 800e5b8:	2001      	movs	r0, #1
 800e5ba:	e7ae      	b.n	800e51a <HAL_TIMEx_OCN_Start_DMA+0x56>
        return HAL_ERROR;
 800e5bc:	2001      	movs	r0, #1
 800e5be:	e7ac      	b.n	800e51a <HAL_TIMEx_OCN_Start_DMA+0x56>
        return HAL_ERROR;
 800e5c0:	2001      	movs	r0, #1
 800e5c2:	e7aa      	b.n	800e51a <HAL_TIMEx_OCN_Start_DMA+0x56>
  return HAL_OK;
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	e7a8      	b.n	800e51a <HAL_TIMEx_OCN_Start_DMA+0x56>
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	e7a6      	b.n	800e51a <HAL_TIMEx_OCN_Start_DMA+0x56>
 800e5cc:	00010007 	.word	0x00010007
 800e5d0:	0800bff9 	.word	0x0800bff9
 800e5d4:	0800c03f 	.word	0x0800c03f
 800e5d8:	0800c243 	.word	0x0800c243

0800e5dc <HAL_TIMEx_OCN_Stop_DMA>:
{
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4604      	mov	r4, r0
 800e5e0:	460d      	mov	r5, r1
  switch (Channel)
 800e5e2:	2904      	cmp	r1, #4
 800e5e4:	d033      	beq.n	800e64e <HAL_TIMEx_OCN_Stop_DMA+0x72>
 800e5e6:	2908      	cmp	r1, #8
 800e5e8:	d03a      	beq.n	800e660 <HAL_TIMEx_OCN_Stop_DMA+0x84>
 800e5ea:	b339      	cbz	r1, 800e63c <HAL_TIMEx_OCN_Stop_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	6820      	ldr	r0, [r4, #0]
 800e5f2:	f7ff fd3b 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	6a19      	ldr	r1, [r3, #32]
 800e5fa:	f241 1211 	movw	r2, #4369	; 0x1111
 800e5fe:	4211      	tst	r1, r2
 800e600:	d108      	bne.n	800e614 <HAL_TIMEx_OCN_Stop_DMA+0x38>
 800e602:	6a19      	ldr	r1, [r3, #32]
 800e604:	f240 4244 	movw	r2, #1092	; 0x444
 800e608:	4211      	tst	r1, r2
 800e60a:	d103      	bne.n	800e614 <HAL_TIMEx_OCN_Stop_DMA+0x38>
 800e60c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e60e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e612:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	6a19      	ldr	r1, [r3, #32]
 800e618:	f241 1211 	movw	r2, #4369	; 0x1111
 800e61c:	4211      	tst	r1, r2
 800e61e:	d108      	bne.n	800e632 <HAL_TIMEx_OCN_Stop_DMA+0x56>
 800e620:	6a19      	ldr	r1, [r3, #32]
 800e622:	f240 4244 	movw	r2, #1092	; 0x444
 800e626:	4211      	tst	r1, r2
 800e628:	d103      	bne.n	800e632 <HAL_TIMEx_OCN_Stop_DMA+0x56>
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	f022 0201 	bic.w	r2, r2, #1
 800e630:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e632:	2301      	movs	r3, #1
 800e634:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e638:	2000      	movs	r0, #0
 800e63a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e63c:	6802      	ldr	r2, [r0, #0]
 800e63e:	68d3      	ldr	r3, [r2, #12]
 800e640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e644:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e646:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e648:	f7f4 f90b 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800e64c:	e7ce      	b.n	800e5ec <HAL_TIMEx_OCN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e64e:	6802      	ldr	r2, [r0, #0]
 800e650:	68d3      	ldr	r3, [r2, #12]
 800e652:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e656:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e658:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e65a:	f7f4 f902 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800e65e:	e7c5      	b.n	800e5ec <HAL_TIMEx_OCN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e660:	6802      	ldr	r2, [r0, #0]
 800e662:	68d3      	ldr	r3, [r2, #12]
 800e664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e668:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e66a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e66c:	f7f4 f8f9 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800e670:	e7bc      	b.n	800e5ec <HAL_TIMEx_OCN_Stop_DMA+0x10>
	...

0800e674 <HAL_TIMEx_PWMN_Start>:
{
 800e674:	b510      	push	{r4, lr}
 800e676:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e678:	2204      	movs	r2, #4
 800e67a:	6800      	ldr	r0, [r0, #0]
 800e67c:	f7ff fcf6 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e680:	6822      	ldr	r2, [r4, #0]
 800e682:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e688:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e68a:	6822      	ldr	r2, [r4, #0]
 800e68c:	6891      	ldr	r1, [r2, #8]
 800e68e:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <HAL_TIMEx_PWMN_Start+0x34>)
 800e690:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e692:	2b06      	cmp	r3, #6
 800e694:	d006      	beq.n	800e6a4 <HAL_TIMEx_PWMN_Start+0x30>
 800e696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e69a:	d003      	beq.n	800e6a4 <HAL_TIMEx_PWMN_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 800e69c:	6813      	ldr	r3, [r2, #0]
 800e69e:	f043 0301 	orr.w	r3, r3, #1
 800e6a2:	6013      	str	r3, [r2, #0]
}
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	bd10      	pop	{r4, pc}
 800e6a8:	00010007 	.word	0x00010007

0800e6ac <HAL_TIMEx_PWMN_Stop>:
{
 800e6ac:	b510      	push	{r4, lr}
 800e6ae:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	6800      	ldr	r0, [r0, #0]
 800e6b4:	f7ff fcda 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	6a19      	ldr	r1, [r3, #32]
 800e6bc:	f241 1211 	movw	r2, #4369	; 0x1111
 800e6c0:	4211      	tst	r1, r2
 800e6c2:	d108      	bne.n	800e6d6 <HAL_TIMEx_PWMN_Stop+0x2a>
 800e6c4:	6a19      	ldr	r1, [r3, #32]
 800e6c6:	f240 4244 	movw	r2, #1092	; 0x444
 800e6ca:	4211      	tst	r1, r2
 800e6cc:	d103      	bne.n	800e6d6 <HAL_TIMEx_PWMN_Stop+0x2a>
 800e6ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e6d4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	6a19      	ldr	r1, [r3, #32]
 800e6da:	f241 1211 	movw	r2, #4369	; 0x1111
 800e6de:	4211      	tst	r1, r2
 800e6e0:	d108      	bne.n	800e6f4 <HAL_TIMEx_PWMN_Stop+0x48>
 800e6e2:	6a19      	ldr	r1, [r3, #32]
 800e6e4:	f240 4244 	movw	r2, #1092	; 0x444
 800e6e8:	4211      	tst	r1, r2
 800e6ea:	d103      	bne.n	800e6f4 <HAL_TIMEx_PWMN_Stop+0x48>
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	f022 0201 	bic.w	r2, r2, #1
 800e6f2:	601a      	str	r2, [r3, #0]
}
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	bd10      	pop	{r4, pc}

0800e6f8 <HAL_TIMEx_PWMN_Start_IT>:
{
 800e6f8:	b510      	push	{r4, lr}
 800e6fa:	4604      	mov	r4, r0
  switch (Channel)
 800e6fc:	2904      	cmp	r1, #4
 800e6fe:	d025      	beq.n	800e74c <HAL_TIMEx_PWMN_Start_IT+0x54>
 800e700:	2908      	cmp	r1, #8
 800e702:	d029      	beq.n	800e758 <HAL_TIMEx_PWMN_Start_IT+0x60>
 800e704:	b1e1      	cbz	r1, 800e740 <HAL_TIMEx_PWMN_Start_IT+0x48>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e706:	6822      	ldr	r2, [r4, #0]
 800e708:	68d3      	ldr	r3, [r2, #12]
 800e70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e70e:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e710:	2204      	movs	r2, #4
 800e712:	6820      	ldr	r0, [r4, #0]
 800e714:	f7ff fcaa 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e718:	6822      	ldr	r2, [r4, #0]
 800e71a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e71c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e720:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e722:	6822      	ldr	r2, [r4, #0]
 800e724:	6891      	ldr	r1, [r2, #8]
 800e726:	4b0f      	ldr	r3, [pc, #60]	; (800e764 <HAL_TIMEx_PWMN_Start_IT+0x6c>)
 800e728:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e72a:	2b06      	cmp	r3, #6
 800e72c:	d006      	beq.n	800e73c <HAL_TIMEx_PWMN_Start_IT+0x44>
 800e72e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e732:	d003      	beq.n	800e73c <HAL_TIMEx_PWMN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 800e734:	6813      	ldr	r3, [r2, #0]
 800e736:	f043 0301 	orr.w	r3, r3, #1
 800e73a:	6013      	str	r3, [r2, #0]
}
 800e73c:	2000      	movs	r0, #0
 800e73e:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e740:	6802      	ldr	r2, [r0, #0]
 800e742:	68d3      	ldr	r3, [r2, #12]
 800e744:	f043 0302 	orr.w	r3, r3, #2
 800e748:	60d3      	str	r3, [r2, #12]
      break;
 800e74a:	e7dc      	b.n	800e706 <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e74c:	6802      	ldr	r2, [r0, #0]
 800e74e:	68d3      	ldr	r3, [r2, #12]
 800e750:	f043 0304 	orr.w	r3, r3, #4
 800e754:	60d3      	str	r3, [r2, #12]
      break;
 800e756:	e7d6      	b.n	800e706 <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e758:	6802      	ldr	r2, [r0, #0]
 800e75a:	68d3      	ldr	r3, [r2, #12]
 800e75c:	f043 0308 	orr.w	r3, r3, #8
 800e760:	60d3      	str	r3, [r2, #12]
      break;
 800e762:	e7d0      	b.n	800e706 <HAL_TIMEx_PWMN_Start_IT+0xe>
 800e764:	00010007 	.word	0x00010007

0800e768 <HAL_TIMEx_PWMN_Stop_IT>:
{
 800e768:	b510      	push	{r4, lr}
 800e76a:	4604      	mov	r4, r0
  switch (Channel)
 800e76c:	2904      	cmp	r1, #4
 800e76e:	d037      	beq.n	800e7e0 <HAL_TIMEx_PWMN_Stop_IT+0x78>
 800e770:	2908      	cmp	r1, #8
 800e772:	d03b      	beq.n	800e7ec <HAL_TIMEx_PWMN_Stop_IT+0x84>
 800e774:	2900      	cmp	r1, #0
 800e776:	d02d      	beq.n	800e7d4 <HAL_TIMEx_PWMN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e778:	2200      	movs	r2, #0
 800e77a:	6820      	ldr	r0, [r4, #0]
 800e77c:	f7ff fc76 	bl	800e06c <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 800e780:	6823      	ldr	r3, [r4, #0]
 800e782:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800e784:	f240 4244 	movw	r2, #1092	; 0x444
 800e788:	4211      	tst	r1, r2
 800e78a:	d103      	bne.n	800e794 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800e78c:	68da      	ldr	r2, [r3, #12]
 800e78e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e792:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 800e794:	6823      	ldr	r3, [r4, #0]
 800e796:	6a19      	ldr	r1, [r3, #32]
 800e798:	f241 1211 	movw	r2, #4369	; 0x1111
 800e79c:	4211      	tst	r1, r2
 800e79e:	d108      	bne.n	800e7b2 <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 800e7a0:	6a19      	ldr	r1, [r3, #32]
 800e7a2:	f240 4244 	movw	r2, #1092	; 0x444
 800e7a6:	4211      	tst	r1, r2
 800e7a8:	d103      	bne.n	800e7b2 <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 800e7aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e7b0:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	6a19      	ldr	r1, [r3, #32]
 800e7b6:	f241 1211 	movw	r2, #4369	; 0x1111
 800e7ba:	4211      	tst	r1, r2
 800e7bc:	d108      	bne.n	800e7d0 <HAL_TIMEx_PWMN_Stop_IT+0x68>
 800e7be:	6a19      	ldr	r1, [r3, #32]
 800e7c0:	f240 4244 	movw	r2, #1092	; 0x444
 800e7c4:	4211      	tst	r1, r2
 800e7c6:	d103      	bne.n	800e7d0 <HAL_TIMEx_PWMN_Stop_IT+0x68>
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	f022 0201 	bic.w	r2, r2, #1
 800e7ce:	601a      	str	r2, [r3, #0]
}
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e7d4:	6802      	ldr	r2, [r0, #0]
 800e7d6:	68d3      	ldr	r3, [r2, #12]
 800e7d8:	f023 0302 	bic.w	r3, r3, #2
 800e7dc:	60d3      	str	r3, [r2, #12]
      break;
 800e7de:	e7cb      	b.n	800e778 <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e7e0:	6802      	ldr	r2, [r0, #0]
 800e7e2:	68d3      	ldr	r3, [r2, #12]
 800e7e4:	f023 0304 	bic.w	r3, r3, #4
 800e7e8:	60d3      	str	r3, [r2, #12]
      break;
 800e7ea:	e7c5      	b.n	800e778 <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e7ec:	6802      	ldr	r2, [r0, #0]
 800e7ee:	68d3      	ldr	r3, [r2, #12]
 800e7f0:	f023 0308 	bic.w	r3, r3, #8
 800e7f4:	60d3      	str	r3, [r2, #12]
      break;
 800e7f6:	e7bf      	b.n	800e778 <HAL_TIMEx_PWMN_Stop_IT+0x10>

0800e7f8 <HAL_TIMEx_PWMN_Start_DMA>:
{
 800e7f8:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800e7fa:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e7fe:	b2e4      	uxtb	r4, r4
 800e800:	2c02      	cmp	r4, #2
 800e802:	d071      	beq.n	800e8e8 <HAL_TIMEx_PWMN_Start_DMA+0xf0>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800e804:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e808:	b2e4      	uxtb	r4, r4
 800e80a:	2c01      	cmp	r4, #1
 800e80c:	d020      	beq.n	800e850 <HAL_TIMEx_PWMN_Start_DMA+0x58>
 800e80e:	4616      	mov	r6, r2
 800e810:	460d      	mov	r5, r1
 800e812:	4604      	mov	r4, r0
  switch (Channel)
 800e814:	2904      	cmp	r1, #4
 800e816:	d03b      	beq.n	800e890 <HAL_TIMEx_PWMN_Start_DMA+0x98>
 800e818:	2908      	cmp	r1, #8
 800e81a:	d04f      	beq.n	800e8bc <HAL_TIMEx_PWMN_Start_DMA+0xc4>
 800e81c:	b309      	cbz	r1, 800e862 <HAL_TIMEx_PWMN_Start_DMA+0x6a>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e81e:	2204      	movs	r2, #4
 800e820:	4629      	mov	r1, r5
 800e822:	6820      	ldr	r0, [r4, #0]
 800e824:	f7ff fc22 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e828:	6822      	ldr	r2, [r4, #0]
 800e82a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e82c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e830:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e832:	6822      	ldr	r2, [r4, #0]
 800e834:	6891      	ldr	r1, [r2, #8]
 800e836:	4b32      	ldr	r3, [pc, #200]	; (800e900 <HAL_TIMEx_PWMN_Start_DMA+0x108>)
 800e838:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e83a:	2b06      	cmp	r3, #6
 800e83c:	d05c      	beq.n	800e8f8 <HAL_TIMEx_PWMN_Start_DMA+0x100>
 800e83e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e842:	d05b      	beq.n	800e8fc <HAL_TIMEx_PWMN_Start_DMA+0x104>
    __HAL_TIM_ENABLE(htim);
 800e844:	6813      	ldr	r3, [r2, #0]
 800e846:	f043 0301 	orr.w	r3, r3, #1
 800e84a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800e84c:	2000      	movs	r0, #0
}
 800e84e:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e850:	b11a      	cbz	r2, 800e85a <HAL_TIMEx_PWMN_Start_DMA+0x62>
      htim->State = HAL_TIM_STATE_BUSY;
 800e852:	2402      	movs	r4, #2
 800e854:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800e858:	e7d9      	b.n	800e80e <HAL_TIMEx_PWMN_Start_DMA+0x16>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d0f9      	beq.n	800e852 <HAL_TIMEx_PWMN_Start_DMA+0x5a>
      return HAL_ERROR;
 800e85e:	2001      	movs	r0, #1
 800e860:	e7f5      	b.n	800e84e <HAL_TIMEx_PWMN_Start_DMA+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e862:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e864:	4927      	ldr	r1, [pc, #156]	; (800e904 <HAL_TIMEx_PWMN_Start_DMA+0x10c>)
 800e866:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e868:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e86a:	4927      	ldr	r1, [pc, #156]	; (800e908 <HAL_TIMEx_PWMN_Start_DMA+0x110>)
 800e86c:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e86e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e870:	4926      	ldr	r1, [pc, #152]	; (800e90c <HAL_TIMEx_PWMN_Start_DMA+0x114>)
 800e872:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800e874:	6802      	ldr	r2, [r0, #0]
 800e876:	3234      	adds	r2, #52	; 0x34
 800e878:	4631      	mov	r1, r6
 800e87a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e87c:	f7f3 ff7f 	bl	800277e <HAL_DMA_Start_IT>
 800e880:	2800      	cmp	r0, #0
 800e882:	d133      	bne.n	800e8ec <HAL_TIMEx_PWMN_Start_DMA+0xf4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e884:	6822      	ldr	r2, [r4, #0]
 800e886:	68d3      	ldr	r3, [r2, #12]
 800e888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e88c:	60d3      	str	r3, [r2, #12]
      break;
 800e88e:	e7c6      	b.n	800e81e <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e890:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e892:	491c      	ldr	r1, [pc, #112]	; (800e904 <HAL_TIMEx_PWMN_Start_DMA+0x10c>)
 800e894:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e896:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e898:	491b      	ldr	r1, [pc, #108]	; (800e908 <HAL_TIMEx_PWMN_Start_DMA+0x110>)
 800e89a:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e89c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e89e:	491b      	ldr	r1, [pc, #108]	; (800e90c <HAL_TIMEx_PWMN_Start_DMA+0x114>)
 800e8a0:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800e8a2:	6802      	ldr	r2, [r0, #0]
 800e8a4:	3238      	adds	r2, #56	; 0x38
 800e8a6:	4631      	mov	r1, r6
 800e8a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e8aa:	f7f3 ff68 	bl	800277e <HAL_DMA_Start_IT>
 800e8ae:	b9f8      	cbnz	r0, 800e8f0 <HAL_TIMEx_PWMN_Start_DMA+0xf8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e8b0:	6822      	ldr	r2, [r4, #0]
 800e8b2:	68d3      	ldr	r3, [r2, #12]
 800e8b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e8b8:	60d3      	str	r3, [r2, #12]
      break;
 800e8ba:	e7b0      	b.n	800e81e <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e8bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e8be:	4911      	ldr	r1, [pc, #68]	; (800e904 <HAL_TIMEx_PWMN_Start_DMA+0x10c>)
 800e8c0:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e8c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e8c4:	4910      	ldr	r1, [pc, #64]	; (800e908 <HAL_TIMEx_PWMN_Start_DMA+0x110>)
 800e8c6:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e8c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e8ca:	4910      	ldr	r1, [pc, #64]	; (800e90c <HAL_TIMEx_PWMN_Start_DMA+0x114>)
 800e8cc:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800e8ce:	6802      	ldr	r2, [r0, #0]
 800e8d0:	323c      	adds	r2, #60	; 0x3c
 800e8d2:	4631      	mov	r1, r6
 800e8d4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e8d6:	f7f3 ff52 	bl	800277e <HAL_DMA_Start_IT>
 800e8da:	b958      	cbnz	r0, 800e8f4 <HAL_TIMEx_PWMN_Start_DMA+0xfc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e8dc:	6822      	ldr	r2, [r4, #0]
 800e8de:	68d3      	ldr	r3, [r2, #12]
 800e8e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e8e4:	60d3      	str	r3, [r2, #12]
      break;
 800e8e6:	e79a      	b.n	800e81e <HAL_TIMEx_PWMN_Start_DMA+0x26>
    return HAL_BUSY;
 800e8e8:	2002      	movs	r0, #2
 800e8ea:	e7b0      	b.n	800e84e <HAL_TIMEx_PWMN_Start_DMA+0x56>
        return HAL_ERROR;
 800e8ec:	2001      	movs	r0, #1
 800e8ee:	e7ae      	b.n	800e84e <HAL_TIMEx_PWMN_Start_DMA+0x56>
        return HAL_ERROR;
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	e7ac      	b.n	800e84e <HAL_TIMEx_PWMN_Start_DMA+0x56>
        return HAL_ERROR;
 800e8f4:	2001      	movs	r0, #1
 800e8f6:	e7aa      	b.n	800e84e <HAL_TIMEx_PWMN_Start_DMA+0x56>
  return HAL_OK;
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e7a8      	b.n	800e84e <HAL_TIMEx_PWMN_Start_DMA+0x56>
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	e7a6      	b.n	800e84e <HAL_TIMEx_PWMN_Start_DMA+0x56>
 800e900:	00010007 	.word	0x00010007
 800e904:	0800bff9 	.word	0x0800bff9
 800e908:	0800c03f 	.word	0x0800c03f
 800e90c:	0800c243 	.word	0x0800c243

0800e910 <HAL_TIMEx_PWMN_Stop_DMA>:
{
 800e910:	b538      	push	{r3, r4, r5, lr}
 800e912:	4604      	mov	r4, r0
 800e914:	460d      	mov	r5, r1
  switch (Channel)
 800e916:	2904      	cmp	r1, #4
 800e918:	d033      	beq.n	800e982 <HAL_TIMEx_PWMN_Stop_DMA+0x72>
 800e91a:	2908      	cmp	r1, #8
 800e91c:	d03a      	beq.n	800e994 <HAL_TIMEx_PWMN_Stop_DMA+0x84>
 800e91e:	b339      	cbz	r1, 800e970 <HAL_TIMEx_PWMN_Stop_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800e920:	2200      	movs	r2, #0
 800e922:	4629      	mov	r1, r5
 800e924:	6820      	ldr	r0, [r4, #0]
 800e926:	f7ff fba1 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	6a19      	ldr	r1, [r3, #32]
 800e92e:	f241 1211 	movw	r2, #4369	; 0x1111
 800e932:	4211      	tst	r1, r2
 800e934:	d108      	bne.n	800e948 <HAL_TIMEx_PWMN_Stop_DMA+0x38>
 800e936:	6a19      	ldr	r1, [r3, #32]
 800e938:	f240 4244 	movw	r2, #1092	; 0x444
 800e93c:	4211      	tst	r1, r2
 800e93e:	d103      	bne.n	800e948 <HAL_TIMEx_PWMN_Stop_DMA+0x38>
 800e940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e946:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	6a19      	ldr	r1, [r3, #32]
 800e94c:	f241 1211 	movw	r2, #4369	; 0x1111
 800e950:	4211      	tst	r1, r2
 800e952:	d108      	bne.n	800e966 <HAL_TIMEx_PWMN_Stop_DMA+0x56>
 800e954:	6a19      	ldr	r1, [r3, #32]
 800e956:	f240 4244 	movw	r2, #1092	; 0x444
 800e95a:	4211      	tst	r1, r2
 800e95c:	d103      	bne.n	800e966 <HAL_TIMEx_PWMN_Stop_DMA+0x56>
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	f022 0201 	bic.w	r2, r2, #1
 800e964:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e966:	2301      	movs	r3, #1
 800e968:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e96c:	2000      	movs	r0, #0
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e970:	6802      	ldr	r2, [r0, #0]
 800e972:	68d3      	ldr	r3, [r2, #12]
 800e974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e978:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e97a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e97c:	f7f3 ff71 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800e980:	e7ce      	b.n	800e920 <HAL_TIMEx_PWMN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e982:	6802      	ldr	r2, [r0, #0]
 800e984:	68d3      	ldr	r3, [r2, #12]
 800e986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e98a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e98c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e98e:	f7f3 ff68 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800e992:	e7c5      	b.n	800e920 <HAL_TIMEx_PWMN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e994:	6802      	ldr	r2, [r0, #0]
 800e996:	68d3      	ldr	r3, [r2, #12]
 800e998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e99c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e99e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e9a0:	f7f3 ff5f 	bl	8002862 <HAL_DMA_Abort_IT>
      break;
 800e9a4:	e7bc      	b.n	800e920 <HAL_TIMEx_PWMN_Stop_DMA+0x10>

0800e9a6 <HAL_TIMEx_OnePulseN_Start>:
{
 800e9a6:	b510      	push	{r4, lr}
 800e9a8:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800e9aa:	2204      	movs	r2, #4
 800e9ac:	6800      	ldr	r0, [r0, #0]
 800e9ae:	f7ff fb5d 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800e9b2:	6822      	ldr	r2, [r4, #0]
 800e9b4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e9b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9ba:	6453      	str	r3, [r2, #68]	; 0x44
}
 800e9bc:	2000      	movs	r0, #0
 800e9be:	bd10      	pop	{r4, pc}

0800e9c0 <HAL_TIMEx_OnePulseN_Stop>:
{
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	6800      	ldr	r0, [r0, #0]
 800e9c8:	f7ff fb50 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	6a19      	ldr	r1, [r3, #32]
 800e9d0:	f241 1211 	movw	r2, #4369	; 0x1111
 800e9d4:	4211      	tst	r1, r2
 800e9d6:	d108      	bne.n	800e9ea <HAL_TIMEx_OnePulseN_Stop+0x2a>
 800e9d8:	6a19      	ldr	r1, [r3, #32]
 800e9da:	f240 4244 	movw	r2, #1092	; 0x444
 800e9de:	4211      	tst	r1, r2
 800e9e0:	d103      	bne.n	800e9ea <HAL_TIMEx_OnePulseN_Stop+0x2a>
 800e9e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e9e8:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e9ea:	6823      	ldr	r3, [r4, #0]
 800e9ec:	6a19      	ldr	r1, [r3, #32]
 800e9ee:	f241 1211 	movw	r2, #4369	; 0x1111
 800e9f2:	4211      	tst	r1, r2
 800e9f4:	d108      	bne.n	800ea08 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800e9f6:	6a19      	ldr	r1, [r3, #32]
 800e9f8:	f240 4244 	movw	r2, #1092	; 0x444
 800e9fc:	4211      	tst	r1, r2
 800e9fe:	d103      	bne.n	800ea08 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	f022 0201 	bic.w	r2, r2, #1
 800ea06:	601a      	str	r2, [r3, #0]
}
 800ea08:	2000      	movs	r0, #0
 800ea0a:	bd10      	pop	{r4, pc}

0800ea0c <HAL_TIMEx_OnePulseN_Start_IT>:
{
 800ea0c:	b510      	push	{r4, lr}
 800ea0e:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ea10:	6802      	ldr	r2, [r0, #0]
 800ea12:	68d3      	ldr	r3, [r2, #12]
 800ea14:	f043 0302 	orr.w	r3, r3, #2
 800ea18:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ea1a:	6802      	ldr	r2, [r0, #0]
 800ea1c:	68d3      	ldr	r3, [r2, #12]
 800ea1e:	f043 0304 	orr.w	r3, r3, #4
 800ea22:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800ea24:	2204      	movs	r2, #4
 800ea26:	6800      	ldr	r0, [r0, #0]
 800ea28:	f7ff fb20 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800ea2c:	6822      	ldr	r2, [r4, #0]
 800ea2e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800ea30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea34:	6453      	str	r3, [r2, #68]	; 0x44
}
 800ea36:	2000      	movs	r0, #0
 800ea38:	bd10      	pop	{r4, pc}

0800ea3a <HAL_TIMEx_OnePulseN_Stop_IT>:
{
 800ea3a:	b510      	push	{r4, lr}
 800ea3c:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ea3e:	6802      	ldr	r2, [r0, #0]
 800ea40:	68d3      	ldr	r3, [r2, #12]
 800ea42:	f023 0302 	bic.w	r3, r3, #2
 800ea46:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ea48:	6802      	ldr	r2, [r0, #0]
 800ea4a:	68d3      	ldr	r3, [r2, #12]
 800ea4c:	f023 0304 	bic.w	r3, r3, #4
 800ea50:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800ea52:	2200      	movs	r2, #0
 800ea54:	6800      	ldr	r0, [r0, #0]
 800ea56:	f7ff fb09 	bl	800e06c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800ea5a:	6823      	ldr	r3, [r4, #0]
 800ea5c:	6a19      	ldr	r1, [r3, #32]
 800ea5e:	f241 1211 	movw	r2, #4369	; 0x1111
 800ea62:	4211      	tst	r1, r2
 800ea64:	d108      	bne.n	800ea78 <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 800ea66:	6a19      	ldr	r1, [r3, #32]
 800ea68:	f240 4244 	movw	r2, #1092	; 0x444
 800ea6c:	4211      	tst	r1, r2
 800ea6e:	d103      	bne.n	800ea78 <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 800ea70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ea76:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	6a19      	ldr	r1, [r3, #32]
 800ea7c:	f241 1211 	movw	r2, #4369	; 0x1111
 800ea80:	4211      	tst	r1, r2
 800ea82:	d108      	bne.n	800ea96 <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 800ea84:	6a19      	ldr	r1, [r3, #32]
 800ea86:	f240 4244 	movw	r2, #1092	; 0x444
 800ea8a:	4211      	tst	r1, r2
 800ea8c:	d103      	bne.n	800ea96 <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	f022 0201 	bic.w	r2, r2, #1
 800ea94:	601a      	str	r2, [r3, #0]
}
 800ea96:	2000      	movs	r0, #0
 800ea98:	bd10      	pop	{r4, pc}

0800ea9a <HAL_TIMEx_ConfigCommutEvent>:
  __HAL_LOCK(htim);
 800ea9a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d030      	beq.n	800eb04 <HAL_TIMEx_ConfigCommutEvent+0x6a>
{
 800eaa2:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800eaaa:	f031 0310 	bics.w	r3, r1, #16
 800eaae:	d001      	beq.n	800eab4 <HAL_TIMEx_ConfigCommutEvent+0x1a>
 800eab0:	2b20      	cmp	r3, #32
 800eab2:	d108      	bne.n	800eac6 <HAL_TIMEx_ConfigCommutEvent+0x2c>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800eab4:	6804      	ldr	r4, [r0, #0]
 800eab6:	68a3      	ldr	r3, [r4, #8]
 800eab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eabc:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800eabe:	6804      	ldr	r4, [r0, #0]
 800eac0:	68a3      	ldr	r3, [r4, #8]
 800eac2:	4319      	orrs	r1, r3
 800eac4:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800eac6:	6801      	ldr	r1, [r0, #0]
 800eac8:	684b      	ldr	r3, [r1, #4]
 800eaca:	f043 0301 	orr.w	r3, r3, #1
 800eace:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800ead0:	6801      	ldr	r1, [r0, #0]
 800ead2:	684b      	ldr	r3, [r1, #4]
 800ead4:	f023 0304 	bic.w	r3, r3, #4
 800ead8:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 800eada:	6801      	ldr	r1, [r0, #0]
 800eadc:	684b      	ldr	r3, [r1, #4]
 800eade:	431a      	orrs	r2, r3
 800eae0:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800eae2:	6802      	ldr	r2, [r0, #0]
 800eae4:	68d3      	ldr	r3, [r2, #12]
 800eae6:	f023 0320 	bic.w	r3, r3, #32
 800eaea:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800eaec:	6802      	ldr	r2, [r0, #0]
 800eaee:	68d3      	ldr	r3, [r2, #12]
 800eaf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eaf4:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800eafc:	4618      	mov	r0, r3
}
 800eafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb02:	4770      	bx	lr
  __HAL_LOCK(htim);
 800eb04:	2002      	movs	r0, #2
}
 800eb06:	4770      	bx	lr

0800eb08 <HAL_TIMEx_ConfigCommutEvent_IT>:
  __HAL_LOCK(htim);
 800eb08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d030      	beq.n	800eb72 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
{
 800eb10:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800eb12:	2301      	movs	r3, #1
 800eb14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800eb18:	f031 0310 	bics.w	r3, r1, #16
 800eb1c:	d001      	beq.n	800eb22 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 800eb1e:	2b20      	cmp	r3, #32
 800eb20:	d108      	bne.n	800eb34 <HAL_TIMEx_ConfigCommutEvent_IT+0x2c>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800eb22:	6804      	ldr	r4, [r0, #0]
 800eb24:	68a3      	ldr	r3, [r4, #8]
 800eb26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb2a:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800eb2c:	6804      	ldr	r4, [r0, #0]
 800eb2e:	68a3      	ldr	r3, [r4, #8]
 800eb30:	4319      	orrs	r1, r3
 800eb32:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800eb34:	6801      	ldr	r1, [r0, #0]
 800eb36:	684b      	ldr	r3, [r1, #4]
 800eb38:	f043 0301 	orr.w	r3, r3, #1
 800eb3c:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800eb3e:	6801      	ldr	r1, [r0, #0]
 800eb40:	684b      	ldr	r3, [r1, #4]
 800eb42:	f023 0304 	bic.w	r3, r3, #4
 800eb46:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 800eb48:	6801      	ldr	r1, [r0, #0]
 800eb4a:	684b      	ldr	r3, [r1, #4]
 800eb4c:	431a      	orrs	r2, r3
 800eb4e:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800eb50:	6802      	ldr	r2, [r0, #0]
 800eb52:	68d3      	ldr	r3, [r2, #12]
 800eb54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb58:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800eb5a:	6802      	ldr	r2, [r0, #0]
 800eb5c:	68d3      	ldr	r3, [r2, #12]
 800eb5e:	f043 0320 	orr.w	r3, r3, #32
 800eb62:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 800eb64:	2300      	movs	r3, #0
 800eb66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800eb6a:	4618      	mov	r0, r3
}
 800eb6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb70:	4770      	bx	lr
  __HAL_LOCK(htim);
 800eb72:	2002      	movs	r0, #2
}
 800eb74:	4770      	bx	lr
	...

0800eb78 <HAL_TIMEx_ConfigCommutEvent_DMA>:
  __HAL_LOCK(htim);
 800eb78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d039      	beq.n	800ebf4 <HAL_TIMEx_ConfigCommutEvent_DMA+0x7c>
{
 800eb80:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800eb82:	2301      	movs	r3, #1
 800eb84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800eb88:	f031 0310 	bics.w	r3, r1, #16
 800eb8c:	d001      	beq.n	800eb92 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 800eb8e:	2b20      	cmp	r3, #32
 800eb90:	d108      	bne.n	800eba4 <HAL_TIMEx_ConfigCommutEvent_DMA+0x2c>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800eb92:	6804      	ldr	r4, [r0, #0]
 800eb94:	68a3      	ldr	r3, [r4, #8]
 800eb96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb9a:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800eb9c:	6804      	ldr	r4, [r0, #0]
 800eb9e:	68a3      	ldr	r3, [r4, #8]
 800eba0:	4319      	orrs	r1, r3
 800eba2:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800eba4:	6801      	ldr	r1, [r0, #0]
 800eba6:	684b      	ldr	r3, [r1, #4]
 800eba8:	f043 0301 	orr.w	r3, r3, #1
 800ebac:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800ebae:	6801      	ldr	r1, [r0, #0]
 800ebb0:	684b      	ldr	r3, [r1, #4]
 800ebb2:	f023 0304 	bic.w	r3, r3, #4
 800ebb6:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 800ebb8:	6801      	ldr	r1, [r0, #0]
 800ebba:	684b      	ldr	r3, [r1, #4]
 800ebbc:	431a      	orrs	r2, r3
 800ebbe:	604a      	str	r2, [r1, #4]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800ebc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebc2:	4a0d      	ldr	r2, [pc, #52]	; (800ebf8 <HAL_TIMEx_ConfigCommutEvent_DMA+0x80>)
 800ebc4:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 800ebc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebc8:	4a0c      	ldr	r2, [pc, #48]	; (800ebfc <HAL_TIMEx_ConfigCommutEvent_DMA+0x84>)
 800ebca:	631a      	str	r2, [r3, #48]	; 0x30
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800ebcc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebce:	4a0c      	ldr	r2, [pc, #48]	; (800ec00 <HAL_TIMEx_ConfigCommutEvent_DMA+0x88>)
 800ebd0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800ebd2:	6802      	ldr	r2, [r0, #0]
 800ebd4:	68d3      	ldr	r3, [r2, #12]
 800ebd6:	f023 0320 	bic.w	r3, r3, #32
 800ebda:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800ebdc:	6802      	ldr	r2, [r0, #0]
 800ebde:	68d3      	ldr	r3, [r2, #12]
 800ebe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ebe4:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ebec:	4618      	mov	r0, r3
}
 800ebee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebf2:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ebf4:	2002      	movs	r0, #2
}
 800ebf6:	4770      	bx	lr
 800ebf8:	0800ee81 	.word	0x0800ee81
 800ebfc:	0800ee93 	.word	0x0800ee93
 800ec00:	0800c243 	.word	0x0800c243

0800ec04 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800ec04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d028      	beq.n	800ec5e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 800ec0c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800ec0e:	2301      	movs	r3, #1
 800ec10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ec14:	2302      	movs	r3, #2
 800ec16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800ec1a:	6804      	ldr	r4, [r0, #0]
 800ec1c:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 800ec1e:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec20:	4d10      	ldr	r5, [pc, #64]	; (800ec64 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800ec22:	42ac      	cmp	r4, r5
 800ec24:	d003      	beq.n	800ec2e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 800ec26:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800ec2a:	42ac      	cmp	r4, r5
 800ec2c:	d103      	bne.n	800ec36 <HAL_TIMEx_MasterConfigSynchronization+0x32>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec32:	684d      	ldr	r5, [r1, #4]
 800ec34:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec3a:	680d      	ldr	r5, [r1, #0]
 800ec3c:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800ec3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ec42:	6889      	ldr	r1, [r1, #8]
 800ec44:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 800ec46:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800ec48:	6803      	ldr	r3, [r0, #0]
 800ec4a:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ec52:	2300      	movs	r3, #0
 800ec54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ec58:	4618      	mov	r0, r3
}
 800ec5a:	bc30      	pop	{r4, r5}
 800ec5c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ec5e:	2002      	movs	r0, #2
}
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	40012c00 	.word	0x40012c00

0800ec68 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800ec68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d03e      	beq.n	800ecee <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 800ec70:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800ec72:	2301      	movs	r3, #1
 800ec74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ec78:	68cb      	ldr	r3, [r1, #12]
 800ec7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec7e:	688a      	ldr	r2, [r1, #8]
 800ec80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ec82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec86:	684a      	ldr	r2, [r1, #4]
 800ec88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ec8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec8e:	680a      	ldr	r2, [r1, #0]
 800ec90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ec92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec96:	690a      	ldr	r2, [r1, #16]
 800ec98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec9e:	694a      	ldr	r2, [r1, #20]
 800eca0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eca6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800eca8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ecaa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800ecae:	698a      	ldr	r2, [r1, #24]
 800ecb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ecb4:	6802      	ldr	r2, [r0, #0]
 800ecb6:	4c0f      	ldr	r4, [pc, #60]	; (800ecf4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800ecb8:	42a2      	cmp	r2, r4
 800ecba:	d003      	beq.n	800ecc4 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 800ecbc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800ecc0:	42a2      	cmp	r2, r4
 800ecc2:	d10c      	bne.n	800ecde <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ecc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ecc8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800ecca:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ecce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ecd2:	69cc      	ldr	r4, [r1, #28]
 800ecd4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ecd6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ecda:	6a09      	ldr	r1, [r1, #32]
 800ecdc:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800ecde:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800ece0:	2300      	movs	r3, #0
 800ece2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ece6:	4618      	mov	r0, r3
}
 800ece8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecec:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ecee:	2002      	movs	r0, #2
}
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	40012c00 	.word	0x40012c00

0800ecf8 <HAL_TIMEx_ConfigBreakInput>:
  __HAL_LOCK(htim);
 800ecf8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d023      	beq.n	800ed48 <HAL_TIMEx_ConfigBreakInput+0x50>
{
 800ed00:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800ed02:	2301      	movs	r3, #1
 800ed04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (sBreakInputConfig->Source)
 800ed08:	6814      	ldr	r4, [r2, #0]
 800ed0a:	1e63      	subs	r3, r4, #1
 800ed0c:	2b07      	cmp	r3, #7
 800ed0e:	d80b      	bhi.n	800ed28 <HAL_TIMEx_ConfigBreakInput+0x30>
 800ed10:	e8df f003 	tbb	[pc, r3]
 800ed14:	360a0430 	.word	0x360a0430
 800ed18:	5d0a0a0a 	.word	0x5d0a0a0a
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800ed1c:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800ed1e:	260a      	movs	r6, #10
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800ed20:	2301      	movs	r3, #1
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800ed22:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800ed26:	e030      	b.n	800ed8a <HAL_TIMEx_ConfigBreakInput+0x92>
  switch (BreakInput)
 800ed28:	2901      	cmp	r1, #1
 800ed2a:	d006      	beq.n	800ed3a <HAL_TIMEx_ConfigBreakInput+0x42>
 800ed2c:	2902      	cmp	r1, #2
 800ed2e:	d11c      	bne.n	800ed6a <HAL_TIMEx_ConfigBreakInput+0x72>
  uint32_t bkin_polarity_bitpos = 0U;
 800ed30:	2600      	movs	r6, #0
  uint32_t bkin_enable_bitpos = 0U;
 800ed32:	4633      	mov	r3, r6
  uint32_t bkin_polarity_mask = 0U;
 800ed34:	4635      	mov	r5, r6
  uint32_t bkin_enable_mask = 0U;
 800ed36:	46b4      	mov	ip, r6
 800ed38:	e02b      	b.n	800ed92 <HAL_TIMEx_ConfigBreakInput+0x9a>
      tmporx = htim->Instance->OR2;
 800ed3a:	6801      	ldr	r1, [r0, #0]
 800ed3c:	6e0b      	ldr	r3, [r1, #96]	; 0x60
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800ed3e:	2c08      	cmp	r4, #8
 800ed40:	d012      	beq.n	800ed68 <HAL_TIMEx_ConfigBreakInput+0x70>
  uint32_t bkin_polarity_bitpos = 0U;
 800ed42:	2600      	movs	r6, #0
  uint32_t bkin_polarity_mask = 0U;
 800ed44:	4635      	mov	r5, r6
 800ed46:	e00a      	b.n	800ed5e <HAL_TIMEx_ConfigBreakInput+0x66>
  __HAL_LOCK(htim);
 800ed48:	2002      	movs	r0, #2
}
 800ed4a:	4770      	bx	lr
      tmporx = htim->Instance->OR2;
 800ed4c:	6801      	ldr	r1, [r0, #0]
 800ed4e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800ed50:	6857      	ldr	r7, [r2, #4]
 800ed52:	fa07 f303 	lsl.w	r3, r7, r3
 800ed56:	4063      	eors	r3, r4
 800ed58:	ea03 030c 	and.w	r3, r3, ip
 800ed5c:	4063      	eors	r3, r4
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800ed5e:	6892      	ldr	r2, [r2, #8]
 800ed60:	40b2      	lsls	r2, r6
 800ed62:	405a      	eors	r2, r3
 800ed64:	402a      	ands	r2, r5
 800ed66:	4053      	eors	r3, r2
      htim->Instance->OR2 = tmporx;
 800ed68:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ed70:	4618      	mov	r0, r3
}
 800ed72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_enable_mask = TIM1_OR2_BKINE;
 800ed74:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800ed76:	2609      	movs	r6, #9
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800ed78:	2300      	movs	r3, #0
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800ed7a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800ed7e:	e004      	b.n	800ed8a <HAL_TIMEx_ConfigBreakInput+0x92>
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800ed80:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800ed82:	260b      	movs	r6, #11
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800ed84:	2302      	movs	r3, #2
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800ed86:	f44f 6500 	mov.w	r5, #2048	; 0x800
  switch (BreakInput)
 800ed8a:	2901      	cmp	r1, #1
 800ed8c:	d0de      	beq.n	800ed4c <HAL_TIMEx_ConfigBreakInput+0x54>
 800ed8e:	2902      	cmp	r1, #2
 800ed90:	d1eb      	bne.n	800ed6a <HAL_TIMEx_ConfigBreakInput+0x72>
      tmporx = htim->Instance->OR3;
 800ed92:	6807      	ldr	r7, [r0, #0]
 800ed94:	f8d7 e064 	ldr.w	lr, [r7, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800ed98:	6851      	ldr	r1, [r2, #4]
 800ed9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ed9e:	ea83 030e 	eor.w	r3, r3, lr
 800eda2:	ea03 030c 	and.w	r3, r3, ip
 800eda6:	ea83 030e 	eor.w	r3, r3, lr
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800edaa:	2c08      	cmp	r4, #8
 800edac:	d004      	beq.n	800edb8 <HAL_TIMEx_ConfigBreakInput+0xc0>
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800edae:	6892      	ldr	r2, [r2, #8]
 800edb0:	40b2      	lsls	r2, r6
 800edb2:	405a      	eors	r2, r3
 800edb4:	402a      	ands	r2, r5
 800edb6:	4053      	eors	r3, r2
      htim->Instance->OR3 = tmporx;
 800edb8:	667b      	str	r3, [r7, #100]	; 0x64
      break;
 800edba:	e7d6      	b.n	800ed6a <HAL_TIMEx_ConfigBreakInput+0x72>
      tmporx = htim->Instance->OR2;
 800edbc:	6801      	ldr	r1, [r0, #0]
 800edbe:	6e0b      	ldr	r3, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800edc0:	6852      	ldr	r2, [r2, #4]
 800edc2:	ea83 2202 	eor.w	r2, r3, r2, lsl #8
 800edc6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800edca:	4053      	eors	r3, r2
 800edcc:	e7cc      	b.n	800ed68 <HAL_TIMEx_ConfigBreakInput+0x70>
  switch (BreakInput)
 800edce:	2901      	cmp	r1, #1
 800edd0:	d0f4      	beq.n	800edbc <HAL_TIMEx_ConfigBreakInput+0xc4>
 800edd2:	2902      	cmp	r1, #2
 800edd4:	d1c9      	bne.n	800ed6a <HAL_TIMEx_ConfigBreakInput+0x72>
  uint32_t bkin_polarity_bitpos = 0U;
 800edd6:	2600      	movs	r6, #0
      bkin_enable_bitpos = 8U;
 800edd8:	2308      	movs	r3, #8
  uint32_t bkin_polarity_mask = 0U;
 800edda:	4635      	mov	r5, r6
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800eddc:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800ede0:	e7d7      	b.n	800ed92 <HAL_TIMEx_ConfigBreakInput+0x9a>
	...

0800ede4 <HAL_TIMEx_RemapConfig>:
  __HAL_LOCK(htim);
 800ede4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d024      	beq.n	800ee36 <HAL_TIMEx_RemapConfig+0x52>
{
 800edec:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800edee:	2301      	movs	r3, #1
 800edf0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 800edf4:	6803      	ldr	r3, [r0, #0]
 800edf6:	4a11      	ldr	r2, [pc, #68]	; (800ee3c <HAL_TIMEx_RemapConfig+0x58>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d00a      	beq.n	800ee12 <HAL_TIMEx_RemapConfig+0x2e>
 800edfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee00:	d007      	beq.n	800ee12 <HAL_TIMEx_RemapConfig+0x2e>
 800ee02:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d003      	beq.n	800ee12 <HAL_TIMEx_RemapConfig+0x2e>
 800ee0a:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d106      	bne.n	800ee20 <HAL_TIMEx_RemapConfig+0x3c>
    tmpor2 = htim->Instance->OR2;
 800ee12:	6e1c      	ldr	r4, [r3, #96]	; 0x60
    tmpor2 &= ~TIM1_OR2_ETRSEL_Msk;
 800ee14:	f424 34e0 	bic.w	r4, r4, #114688	; 0x1c000
    tmpor2 |= (Remap & TIM1_OR2_ETRSEL_Msk);
 800ee18:	f401 32e0 	and.w	r2, r1, #114688	; 0x1c000
 800ee1c:	4322      	orrs	r2, r4
    htim->Instance->OR2 = tmpor2;
 800ee1e:	661a      	str	r2, [r3, #96]	; 0x60
  tmpor1 &= ~TIM1_OR2_ETRSEL_Msk;
 800ee20:	f421 31e0 	bic.w	r1, r1, #114688	; 0x1c000
  htim->Instance->OR1 = tmpor1;
 800ee24:	6803      	ldr	r3, [r0, #0]
 800ee26:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800ee28:	2300      	movs	r3, #0
 800ee2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ee2e:	4618      	mov	r0, r3
}
 800ee30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee34:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ee36:	2002      	movs	r0, #2
}
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	40012c00 	.word	0x40012c00

0800ee40 <HAL_TIMEx_GroupChannel5>:
  __HAL_LOCK(htim);
 800ee40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d018      	beq.n	800ee7a <HAL_TIMEx_GroupChannel5+0x3a>
{
 800ee48:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ee50:	2302      	movs	r3, #2
 800ee52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->CCR5 &= ~(TIM_CCR5_GC5C3 | TIM_CCR5_GC5C2 | TIM_CCR5_GC5C1);
 800ee56:	6804      	ldr	r4, [r0, #0]
 800ee58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee5a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800ee5e:	65a3      	str	r3, [r4, #88]	; 0x58
  htim->Instance->CCR5 |= Channels;
 800ee60:	6804      	ldr	r4, [r0, #0]
 800ee62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee64:	4319      	orrs	r1, r3
 800ee66:	65a1      	str	r1, [r4, #88]	; 0x58
  htim->State = HAL_TIM_STATE_READY;
 800ee68:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800ee72:	4618      	mov	r0, r3
}
 800ee74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee78:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ee7a:	2002      	movs	r0, #2
}
 800ee7c:	4770      	bx	lr

0800ee7e <HAL_TIMEx_CommutCallback>:
}
 800ee7e:	4770      	bx	lr

0800ee80 <TIMEx_DMACommutationCplt>:
{
 800ee80:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee82:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800ee84:	2301      	movs	r3, #1
 800ee86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutCallback(htim);
 800ee8a:	f7ff fff8 	bl	800ee7e <HAL_TIMEx_CommutCallback>
}
 800ee8e:	bd08      	pop	{r3, pc}

0800ee90 <HAL_TIMEx_CommutHalfCpltCallback>:
}
 800ee90:	4770      	bx	lr

0800ee92 <TIMEx_DMACommutationHalfCplt>:
{
 800ee92:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee94:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800ee96:	2301      	movs	r3, #1
 800ee98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 800ee9c:	f7ff fff8 	bl	800ee90 <HAL_TIMEx_CommutHalfCpltCallback>
}
 800eea0:	bd08      	pop	{r3, pc}

0800eea2 <HAL_TIMEx_BreakCallback>:
}
 800eea2:	4770      	bx	lr

0800eea4 <HAL_TIMEx_Break2Callback>:
}
 800eea4:	4770      	bx	lr

0800eea6 <HAL_TIMEx_HallSensor_GetState>:
  return htim->State;
 800eea6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800eeaa:	4770      	bx	lr

0800eeac <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eeac:	6802      	ldr	r2, [r0, #0]
 800eeae:	6813      	ldr	r3, [r2, #0]
 800eeb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eeb4:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeb6:	6802      	ldr	r2, [r0, #0]
 800eeb8:	6893      	ldr	r3, [r2, #8]
 800eeba:	f023 0301 	bic.w	r3, r3, #1
 800eebe:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eec0:	2320      	movs	r3, #32
 800eec2:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eec4:	2300      	movs	r3, #0
 800eec6:	6603      	str	r3, [r0, #96]	; 0x60
}
 800eec8:	4770      	bx	lr

0800eeca <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eeca:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800eecc:	2b21      	cmp	r3, #33	; 0x21
 800eece:	d000      	beq.n	800eed2 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800eed0:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800eed2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	b16b      	cbz	r3, 800eef6 <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800eeda:	6803      	ldr	r3, [r0, #0]
 800eedc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800eede:	7812      	ldrb	r2, [r2, #0]
 800eee0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800eee2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800eee4:	3301      	adds	r3, #1
 800eee6:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800eee8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800eeec:	3b01      	subs	r3, #1
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 800eef4:	e7ec      	b.n	800eed0 <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800eef6:	6802      	ldr	r2, [r0, #0]
 800eef8:	6813      	ldr	r3, [r2, #0]
 800eefa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eefe:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef00:	6802      	ldr	r2, [r0, #0]
 800ef02:	6813      	ldr	r3, [r2, #0]
 800ef04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef08:	6013      	str	r3, [r2, #0]
 800ef0a:	4770      	bx	lr

0800ef0c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ef0c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ef0e:	2b21      	cmp	r3, #33	; 0x21
 800ef10:	d000      	beq.n	800ef14 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ef12:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800ef14:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	b17b      	cbz	r3, 800ef3c <UART_TxISR_16BIT+0x30>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ef1c:	6802      	ldr	r2, [r0, #0]
 800ef1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ef20:	881b      	ldrh	r3, [r3, #0]
 800ef22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef26:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ef28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ef2a:	3302      	adds	r3, #2
 800ef2c:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800ef2e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800ef32:	3b01      	subs	r3, #1
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 800ef3a:	e7ea      	b.n	800ef12 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ef3c:	6802      	ldr	r2, [r0, #0]
 800ef3e:	6813      	ldr	r3, [r2, #0]
 800ef40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef44:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef46:	6802      	ldr	r2, [r0, #0]
 800ef48:	6813      	ldr	r3, [r2, #0]
 800ef4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef4e:	6013      	str	r3, [r2, #0]
 800ef50:	4770      	bx	lr
}
 800ef52:	4770      	bx	lr
}
 800ef54:	4770      	bx	lr

0800ef56 <HAL_UART_DeInit>:
  if (huart == NULL)
 800ef56:	b1c0      	cbz	r0, 800ef8a <HAL_UART_DeInit+0x34>
{
 800ef58:	b538      	push	{r3, r4, r5, lr}
 800ef5a:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800ef5c:	2324      	movs	r3, #36	; 0x24
 800ef5e:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800ef60:	6802      	ldr	r2, [r0, #0]
 800ef62:	6813      	ldr	r3, [r2, #0]
 800ef64:	f023 0301 	bic.w	r3, r3, #1
 800ef68:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800ef6a:	6803      	ldr	r3, [r0, #0]
 800ef6c:	2500      	movs	r5, #0
 800ef6e:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800ef70:	6803      	ldr	r3, [r0, #0]
 800ef72:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800ef74:	6803      	ldr	r3, [r0, #0]
 800ef76:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800ef78:	f7f2 feaa 	bl	8001cd0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef7c:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800ef7e:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800ef80:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800ef82:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 800ef86:	4628      	mov	r0, r5
}
 800ef88:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ef8a:	2001      	movs	r0, #1
}
 800ef8c:	4770      	bx	lr
	...

0800ef90 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800ef90:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ef92:	2b20      	cmp	r3, #32
 800ef94:	d128      	bne.n	800efe8 <HAL_UART_Transmit_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 800ef96:	b349      	cbz	r1, 800efec <HAL_UART_Transmit_IT+0x5c>
 800ef98:	b352      	cbz	r2, 800eff0 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 800ef9a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d028      	beq.n	800eff4 <HAL_UART_Transmit_IT+0x64>
 800efa2:	2301      	movs	r3, #1
 800efa4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 800efa8:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800efaa:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800efae:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 800efb2:	2300      	movs	r3, #0
 800efb4:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efb6:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800efb8:	2321      	movs	r3, #33	; 0x21
 800efba:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efbc:	6883      	ldr	r3, [r0, #8]
 800efbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efc2:	d00b      	beq.n	800efdc <HAL_UART_Transmit_IT+0x4c>
      huart->TxISR = UART_TxISR_8BIT;
 800efc4:	4b0c      	ldr	r3, [pc, #48]	; (800eff8 <HAL_UART_Transmit_IT+0x68>)
 800efc6:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 800efc8:	2300      	movs	r3, #0
 800efca:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800efce:	6801      	ldr	r1, [r0, #0]
 800efd0:	680a      	ldr	r2, [r1, #0]
 800efd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800efd6:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800efd8:	4618      	mov	r0, r3
 800efda:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efdc:	6903      	ldr	r3, [r0, #16]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1f0      	bne.n	800efc4 <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 800efe2:	4b06      	ldr	r3, [pc, #24]	; (800effc <HAL_UART_Transmit_IT+0x6c>)
 800efe4:	6643      	str	r3, [r0, #100]	; 0x64
 800efe6:	e7ef      	b.n	800efc8 <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 800efe8:	2002      	movs	r0, #2
 800efea:	4770      	bx	lr
      return HAL_ERROR;
 800efec:	2001      	movs	r0, #1
 800efee:	4770      	bx	lr
 800eff0:	2001      	movs	r0, #1
 800eff2:	4770      	bx	lr
    __HAL_LOCK(huart);
 800eff4:	2002      	movs	r0, #2
}
 800eff6:	4770      	bx	lr
 800eff8:	0800eecb 	.word	0x0800eecb
 800effc:	0800ef0d 	.word	0x0800ef0d

0800f000 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800f000:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800f002:	2b20      	cmp	r3, #32
 800f004:	d15a      	bne.n	800f0bc <HAL_UART_Receive_IT+0xbc>
    if ((pData == NULL) || (Size == 0U))
 800f006:	2900      	cmp	r1, #0
 800f008:	d05a      	beq.n	800f0c0 <HAL_UART_Receive_IT+0xc0>
 800f00a:	2a00      	cmp	r2, #0
 800f00c:	d05a      	beq.n	800f0c4 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 800f00e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f012:	2b01      	cmp	r3, #1
 800f014:	d058      	beq.n	800f0c8 <HAL_UART_Receive_IT+0xc8>
 800f016:	2301      	movs	r3, #1
 800f018:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 800f01c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 800f01e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800f022:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 800f026:	2300      	movs	r3, #0
 800f028:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800f02a:	6883      	ldr	r3, [r0, #8]
 800f02c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f030:	d006      	beq.n	800f040 <HAL_UART_Receive_IT+0x40>
 800f032:	b9a3      	cbnz	r3, 800f05e <HAL_UART_Receive_IT+0x5e>
 800f034:	6903      	ldr	r3, [r0, #16]
 800f036:	b973      	cbnz	r3, 800f056 <HAL_UART_Receive_IT+0x56>
 800f038:	23ff      	movs	r3, #255	; 0xff
 800f03a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f03e:	e014      	b.n	800f06a <HAL_UART_Receive_IT+0x6a>
 800f040:	6903      	ldr	r3, [r0, #16]
 800f042:	b923      	cbnz	r3, 800f04e <HAL_UART_Receive_IT+0x4e>
 800f044:	f240 13ff 	movw	r3, #511	; 0x1ff
 800f048:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f04c:	e00d      	b.n	800f06a <HAL_UART_Receive_IT+0x6a>
 800f04e:	23ff      	movs	r3, #255	; 0xff
 800f050:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f054:	e009      	b.n	800f06a <HAL_UART_Receive_IT+0x6a>
 800f056:	237f      	movs	r3, #127	; 0x7f
 800f058:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f05c:	e005      	b.n	800f06a <HAL_UART_Receive_IT+0x6a>
 800f05e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f062:	d01b      	beq.n	800f09c <HAL_UART_Receive_IT+0x9c>
 800f064:	2300      	movs	r3, #0
 800f066:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f06a:	2300      	movs	r3, #0
 800f06c:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f06e:	2322      	movs	r3, #34	; 0x22
 800f070:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f072:	6802      	ldr	r2, [r0, #0]
 800f074:	6893      	ldr	r3, [r2, #8]
 800f076:	f043 0301 	orr.w	r3, r3, #1
 800f07a:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f07c:	6883      	ldr	r3, [r0, #8]
 800f07e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f082:	d015      	beq.n	800f0b0 <HAL_UART_Receive_IT+0xb0>
      huart->RxISR = UART_RxISR_8BIT;
 800f084:	4b11      	ldr	r3, [pc, #68]	; (800f0cc <HAL_UART_Receive_IT+0xcc>)
 800f086:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 800f088:	2300      	movs	r3, #0
 800f08a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f08e:	6801      	ldr	r1, [r0, #0]
 800f090:	680a      	ldr	r2, [r1, #0]
 800f092:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f096:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800f098:	4618      	mov	r0, r3
 800f09a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800f09c:	6903      	ldr	r3, [r0, #16]
 800f09e:	b91b      	cbnz	r3, 800f0a8 <HAL_UART_Receive_IT+0xa8>
 800f0a0:	237f      	movs	r3, #127	; 0x7f
 800f0a2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f0a6:	e7e0      	b.n	800f06a <HAL_UART_Receive_IT+0x6a>
 800f0a8:	233f      	movs	r3, #63	; 0x3f
 800f0aa:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f0ae:	e7dc      	b.n	800f06a <HAL_UART_Receive_IT+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0b0:	6903      	ldr	r3, [r0, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1e6      	bne.n	800f084 <HAL_UART_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 800f0b6:	4b06      	ldr	r3, [pc, #24]	; (800f0d0 <HAL_UART_Receive_IT+0xd0>)
 800f0b8:	6603      	str	r3, [r0, #96]	; 0x60
 800f0ba:	e7e5      	b.n	800f088 <HAL_UART_Receive_IT+0x88>
    return HAL_BUSY;
 800f0bc:	2002      	movs	r0, #2
 800f0be:	4770      	bx	lr
      return HAL_ERROR;
 800f0c0:	2001      	movs	r0, #1
 800f0c2:	4770      	bx	lr
 800f0c4:	2001      	movs	r0, #1
 800f0c6:	4770      	bx	lr
    __HAL_LOCK(huart);
 800f0c8:	2002      	movs	r0, #2
}
 800f0ca:	4770      	bx	lr
 800f0cc:	0800f513 	.word	0x0800f513
 800f0d0:	0800f573 	.word	0x0800f573

0800f0d4 <HAL_UART_Transmit_DMA>:
{
 800f0d4:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800f0d6:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800f0d8:	2c20      	cmp	r4, #32
 800f0da:	d13e      	bne.n	800f15a <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 800f0dc:	2900      	cmp	r1, #0
 800f0de:	d03e      	beq.n	800f15e <HAL_UART_Transmit_DMA+0x8a>
 800f0e0:	2a00      	cmp	r2, #0
 800f0e2:	d03e      	beq.n	800f162 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_LOCK(huart);
 800f0e4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d03c      	beq.n	800f166 <HAL_UART_Transmit_DMA+0x92>
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 800f0f6:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f0f8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800f0fc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f100:	2200      	movs	r2, #0
 800f102:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f104:	2221      	movs	r2, #33	; 0x21
 800f106:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 800f108:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f10a:	b18a      	cbz	r2, 800f130 <HAL_UART_Transmit_DMA+0x5c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f10c:	4917      	ldr	r1, [pc, #92]	; (800f16c <HAL_UART_Transmit_DMA+0x98>)
 800f10e:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f110:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f112:	4917      	ldr	r1, [pc, #92]	; (800f170 <HAL_UART_Transmit_DMA+0x9c>)
 800f114:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f116:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f118:	4916      	ldr	r1, [pc, #88]	; (800f174 <HAL_UART_Transmit_DMA+0xa0>)
 800f11a:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800f11c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f11e:	2100      	movs	r1, #0
 800f120:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f122:	6802      	ldr	r2, [r0, #0]
 800f124:	3228      	adds	r2, #40	; 0x28
 800f126:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f128:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f12a:	f7f3 fb28 	bl	800277e <HAL_DMA_Start_IT>
 800f12e:	b958      	cbnz	r0, 800f148 <HAL_UART_Transmit_DMA+0x74>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	2240      	movs	r2, #64	; 0x40
 800f134:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800f136:	2000      	movs	r0, #0
 800f138:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f13c:	6822      	ldr	r2, [r4, #0]
 800f13e:	6893      	ldr	r3, [r2, #8]
 800f140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f144:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800f146:	e009      	b.n	800f15c <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f148:	2310      	movs	r3, #16
 800f14a:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800f14c:	2300      	movs	r3, #0
 800f14e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 800f152:	2320      	movs	r3, #32
 800f154:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 800f156:	2001      	movs	r0, #1
 800f158:	e000      	b.n	800f15c <HAL_UART_Transmit_DMA+0x88>
    return HAL_BUSY;
 800f15a:	2002      	movs	r0, #2
}
 800f15c:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800f15e:	2001      	movs	r0, #1
 800f160:	e7fc      	b.n	800f15c <HAL_UART_Transmit_DMA+0x88>
 800f162:	2001      	movs	r0, #1
 800f164:	e7fa      	b.n	800f15c <HAL_UART_Transmit_DMA+0x88>
    __HAL_LOCK(huart);
 800f166:	2002      	movs	r0, #2
 800f168:	e7f8      	b.n	800f15c <HAL_UART_Transmit_DMA+0x88>
 800f16a:	bf00      	nop
 800f16c:	0800f4d3 	.word	0x0800f4d3
 800f170:	0800f507 	.word	0x0800f507
 800f174:	0800f61f 	.word	0x0800f61f

0800f178 <HAL_UART_Receive_DMA>:
{
 800f178:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800f17a:	6f84      	ldr	r4, [r0, #120]	; 0x78
 800f17c:	2c20      	cmp	r4, #32
 800f17e:	d143      	bne.n	800f208 <HAL_UART_Receive_DMA+0x90>
    if ((pData == NULL) || (Size == 0U))
 800f180:	2900      	cmp	r1, #0
 800f182:	d043      	beq.n	800f20c <HAL_UART_Receive_DMA+0x94>
 800f184:	2a00      	cmp	r2, #0
 800f186:	d043      	beq.n	800f210 <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 800f188:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d041      	beq.n	800f214 <HAL_UART_Receive_DMA+0x9c>
 800f190:	4613      	mov	r3, r2
 800f192:	4604      	mov	r4, r0
 800f194:	2201      	movs	r2, #1
 800f196:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pRxBuffPtr = pData;
 800f19a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800f19c:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f1a4:	2222      	movs	r2, #34	; 0x22
 800f1a6:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800f1a8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f1aa:	b18a      	cbz	r2, 800f1d0 <HAL_UART_Receive_DMA+0x58>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f1ac:	491a      	ldr	r1, [pc, #104]	; (800f218 <HAL_UART_Receive_DMA+0xa0>)
 800f1ae:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f1b0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f1b2:	491a      	ldr	r1, [pc, #104]	; (800f21c <HAL_UART_Receive_DMA+0xa4>)
 800f1b4:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f1b6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f1b8:	4919      	ldr	r1, [pc, #100]	; (800f220 <HAL_UART_Receive_DMA+0xa8>)
 800f1ba:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmarx->XferAbortCallback = NULL;
 800f1bc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f1be:	2100      	movs	r1, #0
 800f1c0:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f1c2:	6801      	ldr	r1, [r0, #0]
 800f1c4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f1c6:	3124      	adds	r1, #36	; 0x24
 800f1c8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f1ca:	f7f3 fad8 	bl	800277e <HAL_DMA_Start_IT>
 800f1ce:	b990      	cbnz	r0, 800f1f6 <HAL_UART_Receive_DMA+0x7e>
    __HAL_UNLOCK(huart);
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1d6:	6822      	ldr	r2, [r4, #0]
 800f1d8:	6813      	ldr	r3, [r2, #0]
 800f1da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f1de:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1e0:	6822      	ldr	r2, [r4, #0]
 800f1e2:	6893      	ldr	r3, [r2, #8]
 800f1e4:	f043 0301 	orr.w	r3, r3, #1
 800f1e8:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1ea:	6822      	ldr	r2, [r4, #0]
 800f1ec:	6893      	ldr	r3, [r2, #8]
 800f1ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1f2:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800f1f4:	e009      	b.n	800f20a <HAL_UART_Receive_DMA+0x92>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f1f6:	2310      	movs	r3, #16
 800f1f8:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 800f200:	2320      	movs	r3, #32
 800f202:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 800f204:	2001      	movs	r0, #1
 800f206:	e000      	b.n	800f20a <HAL_UART_Receive_DMA+0x92>
    return HAL_BUSY;
 800f208:	2002      	movs	r0, #2
}
 800f20a:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800f20c:	2001      	movs	r0, #1
 800f20e:	e7fc      	b.n	800f20a <HAL_UART_Receive_DMA+0x92>
 800f210:	2001      	movs	r0, #1
 800f212:	e7fa      	b.n	800f20a <HAL_UART_Receive_DMA+0x92>
    __HAL_LOCK(huart);
 800f214:	2002      	movs	r0, #2
 800f216:	e7f8      	b.n	800f20a <HAL_UART_Receive_DMA+0x92>
 800f218:	0800f5d3 	.word	0x0800f5d3
 800f21c:	0800f613 	.word	0x0800f613
 800f220:	0800f61f 	.word	0x0800f61f

0800f224 <HAL_UART_DMAPause>:
{
 800f224:	b410      	push	{r4}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f226:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f228:	6f81      	ldr	r1, [r0, #120]	; 0x78
  __HAL_LOCK(huart);
 800f22a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d02b      	beq.n	800f28a <HAL_UART_DMAPause+0x66>
 800f232:	2301      	movs	r3, #1
 800f234:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f238:	6803      	ldr	r3, [r0, #0]
 800f23a:	689a      	ldr	r2, [r3, #8]
 800f23c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f240:	d001      	beq.n	800f246 <HAL_UART_DMAPause+0x22>
 800f242:	2c21      	cmp	r4, #33	; 0x21
 800f244:	d00d      	beq.n	800f262 <HAL_UART_DMAPause+0x3e>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f246:	6803      	ldr	r3, [r0, #0]
 800f248:	689a      	ldr	r2, [r3, #8]
 800f24a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f24e:	d001      	beq.n	800f254 <HAL_UART_DMAPause+0x30>
 800f250:	2922      	cmp	r1, #34	; 0x22
 800f252:	d00b      	beq.n	800f26c <HAL_UART_DMAPause+0x48>
  __HAL_UNLOCK(huart);
 800f254:	2300      	movs	r3, #0
 800f256:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800f25a:	4618      	mov	r0, r3
}
 800f25c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f260:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f262:	689a      	ldr	r2, [r3, #8]
 800f264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f268:	609a      	str	r2, [r3, #8]
 800f26a:	e7ec      	b.n	800f246 <HAL_UART_DMAPause+0x22>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f272:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f274:	6802      	ldr	r2, [r0, #0]
 800f276:	6893      	ldr	r3, [r2, #8]
 800f278:	f023 0301 	bic.w	r3, r3, #1
 800f27c:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f27e:	6802      	ldr	r2, [r0, #0]
 800f280:	6893      	ldr	r3, [r2, #8]
 800f282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f286:	6093      	str	r3, [r2, #8]
 800f288:	e7e4      	b.n	800f254 <HAL_UART_DMAPause+0x30>
  __HAL_LOCK(huart);
 800f28a:	2002      	movs	r0, #2
 800f28c:	e7e6      	b.n	800f25c <HAL_UART_DMAPause+0x38>

0800f28e <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 800f28e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f292:	2b01      	cmp	r3, #1
 800f294:	d026      	beq.n	800f2e4 <HAL_UART_DMAResume+0x56>
 800f296:	2301      	movs	r3, #1
 800f298:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f29c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800f29e:	2b21      	cmp	r3, #33	; 0x21
 800f2a0:	d007      	beq.n	800f2b2 <HAL_UART_DMAResume+0x24>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2a2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800f2a4:	2b22      	cmp	r3, #34	; 0x22
 800f2a6:	d00a      	beq.n	800f2be <HAL_UART_DMAResume+0x30>
  __HAL_UNLOCK(huart);
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	4770      	bx	lr
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2b2:	6802      	ldr	r2, [r0, #0]
 800f2b4:	6893      	ldr	r3, [r2, #8]
 800f2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2ba:	6093      	str	r3, [r2, #8]
 800f2bc:	e7f1      	b.n	800f2a2 <HAL_UART_DMAResume+0x14>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2be:	6803      	ldr	r3, [r0, #0]
 800f2c0:	2208      	movs	r2, #8
 800f2c2:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2c4:	6802      	ldr	r2, [r0, #0]
 800f2c6:	6813      	ldr	r3, [r2, #0]
 800f2c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2cc:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ce:	6802      	ldr	r2, [r0, #0]
 800f2d0:	6893      	ldr	r3, [r2, #8]
 800f2d2:	f043 0301 	orr.w	r3, r3, #1
 800f2d6:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2d8:	6802      	ldr	r2, [r0, #0]
 800f2da:	6893      	ldr	r3, [r2, #8]
 800f2dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2e0:	6093      	str	r3, [r2, #8]
 800f2e2:	e7e1      	b.n	800f2a8 <HAL_UART_DMAResume+0x1a>
  __HAL_LOCK(huart);
 800f2e4:	2002      	movs	r0, #2
}
 800f2e6:	4770      	bx	lr

0800f2e8 <HAL_UART_DMAStop>:
{
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f2ec:	6f41      	ldr	r1, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f2ee:	6f85      	ldr	r5, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f2f0:	6803      	ldr	r3, [r0, #0]
 800f2f2:	689a      	ldr	r2, [r3, #8]
 800f2f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f2f8:	d001      	beq.n	800f2fe <HAL_UART_DMAStop+0x16>
 800f2fa:	2921      	cmp	r1, #33	; 0x21
 800f2fc:	d008      	beq.n	800f310 <HAL_UART_DMAStop+0x28>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	689a      	ldr	r2, [r3, #8]
 800f302:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f306:	d034      	beq.n	800f372 <HAL_UART_DMAStop+0x8a>
 800f308:	2d22      	cmp	r5, #34	; 0x22
 800f30a:	d01b      	beq.n	800f344 <HAL_UART_DMAStop+0x5c>
  return HAL_OK;
 800f30c:	2000      	movs	r0, #0
 800f30e:	e031      	b.n	800f374 <HAL_UART_DMAStop+0x8c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f310:	689a      	ldr	r2, [r3, #8]
 800f312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f316:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f318:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f31a:	b110      	cbz	r0, 800f322 <HAL_UART_DMAStop+0x3a>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f31c:	f7f3 fa7c 	bl	8002818 <HAL_DMA_Abort>
 800f320:	b938      	cbnz	r0, 800f332 <HAL_UART_DMAStop+0x4a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f322:	6822      	ldr	r2, [r4, #0]
 800f324:	6813      	ldr	r3, [r2, #0]
 800f326:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f32a:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f32c:	2320      	movs	r3, #32
 800f32e:	6763      	str	r3, [r4, #116]	; 0x74
 800f330:	e7e5      	b.n	800f2fe <HAL_UART_DMAStop+0x16>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f332:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f334:	f7f3 fbe9 	bl	8002b0a <HAL_DMA_GetError>
 800f338:	2820      	cmp	r0, #32
 800f33a:	d1f2      	bne.n	800f322 <HAL_UART_DMAStop+0x3a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f33c:	2310      	movs	r3, #16
 800f33e:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f340:	2003      	movs	r0, #3
 800f342:	e017      	b.n	800f374 <HAL_UART_DMAStop+0x8c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f344:	689a      	ldr	r2, [r3, #8]
 800f346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f34a:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f34c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f34e:	b110      	cbz	r0, 800f356 <HAL_UART_DMAStop+0x6e>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f350:	f7f3 fa62 	bl	8002818 <HAL_DMA_Abort>
 800f354:	b920      	cbnz	r0, 800f360 <HAL_UART_DMAStop+0x78>
    UART_EndRxTransfer(huart);
 800f356:	4620      	mov	r0, r4
 800f358:	f7ff fda8 	bl	800eeac <UART_EndRxTransfer>
  return HAL_OK;
 800f35c:	2000      	movs	r0, #0
 800f35e:	e009      	b.n	800f374 <HAL_UART_DMAStop+0x8c>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f360:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f362:	f7f3 fbd2 	bl	8002b0a <HAL_DMA_GetError>
 800f366:	2820      	cmp	r0, #32
 800f368:	d1f5      	bne.n	800f356 <HAL_UART_DMAStop+0x6e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f36a:	2310      	movs	r3, #16
 800f36c:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f36e:	2003      	movs	r0, #3
 800f370:	e000      	b.n	800f374 <HAL_UART_DMAStop+0x8c>
  return HAL_OK;
 800f372:	2000      	movs	r0, #0
}
 800f374:	bd38      	pop	{r3, r4, r5, pc}

0800f376 <HAL_UART_Abort>:
{
 800f376:	b510      	push	{r4, lr}
 800f378:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f37a:	6802      	ldr	r2, [r0, #0]
 800f37c:	6813      	ldr	r3, [r2, #0]
 800f37e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800f382:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f384:	6802      	ldr	r2, [r0, #0]
 800f386:	6893      	ldr	r3, [r2, #8]
 800f388:	f023 0301 	bic.w	r3, r3, #1
 800f38c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f38e:	6803      	ldr	r3, [r0, #0]
 800f390:	689a      	ldr	r2, [r3, #8]
 800f392:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f396:	d00b      	beq.n	800f3b0 <HAL_UART_Abort+0x3a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f398:	689a      	ldr	r2, [r3, #8]
 800f39a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f39e:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f3a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f3a2:	b12b      	cbz	r3, 800f3b0 <HAL_UART_Abort+0x3a>
      huart->hdmatx->XferAbortCallback = NULL;
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f3a8:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f3aa:	f7f3 fa35 	bl	8002818 <HAL_DMA_Abort>
 800f3ae:	bb10      	cbnz	r0, 800f3f6 <HAL_UART_Abort+0x80>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3b0:	6823      	ldr	r3, [r4, #0]
 800f3b2:	689a      	ldr	r2, [r3, #8]
 800f3b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f3b8:	d00b      	beq.n	800f3d2 <HAL_UART_Abort+0x5c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f3ba:	689a      	ldr	r2, [r3, #8]
 800f3bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f3c0:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f3c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f3c4:	b12b      	cbz	r3, 800f3d2 <HAL_UART_Abort+0x5c>
      huart->hdmarx->XferAbortCallback = NULL;
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f3ca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f3cc:	f7f3 fa24 	bl	8002818 <HAL_DMA_Abort>
 800f3d0:	b9d0      	cbnz	r0, 800f408 <HAL_UART_Abort+0x92>
  huart->TxXferCount = 0U;
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
  huart->RxXferCount = 0U;
 800f3d8:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f3dc:	6823      	ldr	r3, [r4, #0]
 800f3de:	220f      	movs	r2, #15
 800f3e0:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3e2:	6822      	ldr	r2, [r4, #0]
 800f3e4:	8b13      	ldrh	r3, [r2, #24]
 800f3e6:	f043 0308 	orr.w	r3, r3, #8
 800f3ea:	8313      	strh	r3, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800f3ec:	2320      	movs	r3, #32
 800f3ee:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f3f0:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3f2:	67e0      	str	r0, [r4, #124]	; 0x7c
}
 800f3f4:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f3f6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f3f8:	f7f3 fb87 	bl	8002b0a <HAL_DMA_GetError>
 800f3fc:	2820      	cmp	r0, #32
 800f3fe:	d1d7      	bne.n	800f3b0 <HAL_UART_Abort+0x3a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f400:	2310      	movs	r3, #16
 800f402:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f404:	2003      	movs	r0, #3
 800f406:	e7f5      	b.n	800f3f4 <HAL_UART_Abort+0x7e>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f408:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f40a:	f7f3 fb7e 	bl	8002b0a <HAL_DMA_GetError>
 800f40e:	2820      	cmp	r0, #32
 800f410:	d1df      	bne.n	800f3d2 <HAL_UART_Abort+0x5c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f412:	2310      	movs	r3, #16
 800f414:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f416:	2003      	movs	r0, #3
 800f418:	e7ec      	b.n	800f3f4 <HAL_UART_Abort+0x7e>

0800f41a <HAL_UART_AbortTransmit>:
{
 800f41a:	b510      	push	{r4, lr}
 800f41c:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f41e:	6802      	ldr	r2, [r0, #0]
 800f420:	6813      	ldr	r3, [r2, #0]
 800f422:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f426:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f428:	6803      	ldr	r3, [r0, #0]
 800f42a:	689a      	ldr	r2, [r3, #8]
 800f42c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f430:	d00b      	beq.n	800f44a <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f432:	689a      	ldr	r2, [r3, #8]
 800f434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f438:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f43a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f43c:	b12b      	cbz	r3, 800f44a <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 800f43e:	2200      	movs	r2, #0
 800f440:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f442:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f444:	f7f3 f9e8 	bl	8002818 <HAL_DMA_Abort>
 800f448:	b928      	cbnz	r0, 800f456 <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0U;
 800f44a:	2000      	movs	r0, #0
 800f44c:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
  huart->gState = HAL_UART_STATE_READY;
 800f450:	2320      	movs	r3, #32
 800f452:	6763      	str	r3, [r4, #116]	; 0x74
}
 800f454:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f456:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f458:	f7f3 fb57 	bl	8002b0a <HAL_DMA_GetError>
 800f45c:	2820      	cmp	r0, #32
 800f45e:	d1f4      	bne.n	800f44a <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f460:	2310      	movs	r3, #16
 800f462:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f464:	2003      	movs	r0, #3
 800f466:	e7f5      	b.n	800f454 <HAL_UART_AbortTransmit+0x3a>

0800f468 <HAL_UART_AbortReceive>:
{
 800f468:	b510      	push	{r4, lr}
 800f46a:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f46c:	6802      	ldr	r2, [r0, #0]
 800f46e:	6813      	ldr	r3, [r2, #0]
 800f470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f474:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f476:	6802      	ldr	r2, [r0, #0]
 800f478:	6893      	ldr	r3, [r2, #8]
 800f47a:	f023 0301 	bic.w	r3, r3, #1
 800f47e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f480:	6803      	ldr	r3, [r0, #0]
 800f482:	689a      	ldr	r2, [r3, #8]
 800f484:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f488:	d00b      	beq.n	800f4a2 <HAL_UART_AbortReceive+0x3a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f48a:	689a      	ldr	r2, [r3, #8]
 800f48c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f490:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f492:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f494:	b12b      	cbz	r3, 800f4a2 <HAL_UART_AbortReceive+0x3a>
      huart->hdmarx->XferAbortCallback = NULL;
 800f496:	2200      	movs	r2, #0
 800f498:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f49a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f49c:	f7f3 f9bc 	bl	8002818 <HAL_DMA_Abort>
 800f4a0:	b968      	cbnz	r0, 800f4be <HAL_UART_AbortReceive+0x56>
  huart->RxXferCount = 0U;
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f4a8:	6823      	ldr	r3, [r4, #0]
 800f4aa:	220f      	movs	r2, #15
 800f4ac:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f4ae:	6822      	ldr	r2, [r4, #0]
 800f4b0:	8b13      	ldrh	r3, [r2, #24]
 800f4b2:	f043 0308 	orr.w	r3, r3, #8
 800f4b6:	8313      	strh	r3, [r2, #24]
  huart->RxState = HAL_UART_STATE_READY;
 800f4b8:	2320      	movs	r3, #32
 800f4ba:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800f4bc:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f4be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f4c0:	f7f3 fb23 	bl	8002b0a <HAL_DMA_GetError>
 800f4c4:	2820      	cmp	r0, #32
 800f4c6:	d1ec      	bne.n	800f4a2 <HAL_UART_AbortReceive+0x3a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f4c8:	2310      	movs	r3, #16
 800f4ca:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800f4cc:	2003      	movs	r0, #3
 800f4ce:	e7f5      	b.n	800f4bc <HAL_UART_AbortReceive+0x54>

0800f4d0 <HAL_UART_TxCpltCallback>:
}
 800f4d0:	4770      	bx	lr

0800f4d2 <UART_DMATransmitCplt>:
{
 800f4d2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f4d6:	6802      	ldr	r2, [r0, #0]
 800f4d8:	6812      	ldr	r2, [r2, #0]
 800f4da:	f012 0f20 	tst.w	r2, #32
 800f4de:	d10d      	bne.n	800f4fc <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0U;
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f4e6:	6819      	ldr	r1, [r3, #0]
 800f4e8:	688a      	ldr	r2, [r1, #8]
 800f4ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f4ee:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	6813      	ldr	r3, [r2, #0]
 800f4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4f8:	6013      	str	r3, [r2, #0]
}
 800f4fa:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7ff ffe7 	bl	800f4d0 <HAL_UART_TxCpltCallback>
}
 800f502:	e7fa      	b.n	800f4fa <UART_DMATransmitCplt+0x28>

0800f504 <HAL_UART_TxHalfCpltCallback>:
}
 800f504:	4770      	bx	lr

0800f506 <UART_DMATxHalfCplt>:
{
 800f506:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800f508:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f50a:	f7ff fffb 	bl	800f504 <HAL_UART_TxHalfCpltCallback>
}
 800f50e:	bd08      	pop	{r3, pc}
}
 800f510:	4770      	bx	lr

0800f512 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f512:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f514:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800f516:	2b22      	cmp	r3, #34	; 0x22
 800f518:	d005      	beq.n	800f526 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f51a:	6802      	ldr	r2, [r0, #0]
 800f51c:	8b13      	ldrh	r3, [r2, #24]
 800f51e:	f043 0308 	orr.w	r3, r3, #8
 800f522:	8313      	strh	r3, [r2, #24]
  }
}
 800f524:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f526:	6803      	ldr	r3, [r0, #0]
 800f528:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f52a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f52c:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
 800f530:	400b      	ands	r3, r1
 800f532:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800f534:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800f536:	3301      	adds	r3, #1
 800f538:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800f53a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800f53e:	3b01      	subs	r3, #1
 800f540:	b29b      	uxth	r3, r3
 800f542:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800f546:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d1e9      	bne.n	800f524 <UART_RxISR_8BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f550:	6802      	ldr	r2, [r0, #0]
 800f552:	6813      	ldr	r3, [r2, #0]
 800f554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f558:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f55a:	6802      	ldr	r2, [r0, #0]
 800f55c:	6893      	ldr	r3, [r2, #8]
 800f55e:	f023 0301 	bic.w	r3, r3, #1
 800f562:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800f564:	2320      	movs	r3, #32
 800f566:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 800f568:	2300      	movs	r3, #0
 800f56a:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800f56c:	f7f1 f9a0 	bl	80008b0 <HAL_UART_RxCpltCallback>
 800f570:	e7d8      	b.n	800f524 <UART_RxISR_8BIT+0x12>

0800f572 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f572:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f574:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800f576:	2b22      	cmp	r3, #34	; 0x22
 800f578:	d005      	beq.n	800f586 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f57a:	6802      	ldr	r2, [r0, #0]
 800f57c:	8b13      	ldrh	r3, [r2, #24]
 800f57e:	f043 0308 	orr.w	r3, r3, #8
 800f582:	8313      	strh	r3, [r2, #24]
  }
}
 800f584:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f586:	6803      	ldr	r3, [r0, #0]
 800f588:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f58a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 800f58c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800f590:	400b      	ands	r3, r1
 800f592:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 800f594:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800f596:	3302      	adds	r3, #2
 800f598:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800f59a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800f5a6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d1e9      	bne.n	800f584 <UART_RxISR_16BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f5b0:	6802      	ldr	r2, [r0, #0]
 800f5b2:	6813      	ldr	r3, [r2, #0]
 800f5b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5b8:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5ba:	6802      	ldr	r2, [r0, #0]
 800f5bc:	6893      	ldr	r3, [r2, #8]
 800f5be:	f023 0301 	bic.w	r3, r3, #1
 800f5c2:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800f5c4:	2320      	movs	r3, #32
 800f5c6:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800f5cc:	f7f1 f970 	bl	80008b0 <HAL_UART_RxCpltCallback>
 800f5d0:	e7d8      	b.n	800f584 <UART_RxISR_16BIT+0x12>

0800f5d2 <UART_DMAReceiveCplt>:
{
 800f5d2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f5d6:	6802      	ldr	r2, [r0, #0]
 800f5d8:	6812      	ldr	r2, [r2, #0]
 800f5da:	f012 0f20 	tst.w	r2, #32
 800f5de:	d113      	bne.n	800f608 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5e6:	6819      	ldr	r1, [r3, #0]
 800f5e8:	680a      	ldr	r2, [r1, #0]
 800f5ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f5ee:	600a      	str	r2, [r1, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5f0:	6819      	ldr	r1, [r3, #0]
 800f5f2:	688a      	ldr	r2, [r1, #8]
 800f5f4:	f022 0201 	bic.w	r2, r2, #1
 800f5f8:	608a      	str	r2, [r1, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5fa:	6819      	ldr	r1, [r3, #0]
 800f5fc:	688a      	ldr	r2, [r1, #8]
 800f5fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f602:	608a      	str	r2, [r1, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800f604:	2220      	movs	r2, #32
 800f606:	679a      	str	r2, [r3, #120]	; 0x78
  HAL_UART_RxCpltCallback(huart);
 800f608:	4618      	mov	r0, r3
 800f60a:	f7f1 f951 	bl	80008b0 <HAL_UART_RxCpltCallback>
}
 800f60e:	bd08      	pop	{r3, pc}

0800f610 <HAL_UART_RxHalfCpltCallback>:
}
 800f610:	4770      	bx	lr

0800f612 <UART_DMARxHalfCplt>:
{
 800f612:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800f614:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f616:	f7ff fffb 	bl	800f610 <HAL_UART_RxHalfCpltCallback>
}
 800f61a:	bd08      	pop	{r3, pc}

0800f61c <HAL_UART_ErrorCallback>:
}
 800f61c:	4770      	bx	lr

0800f61e <UART_DMAError>:
{
 800f61e:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f620:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f622:	6f60      	ldr	r0, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f624:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	689a      	ldr	r2, [r3, #8]
 800f62a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f62e:	d001      	beq.n	800f634 <UART_DMAError+0x16>
 800f630:	2821      	cmp	r0, #33	; 0x21
 800f632:	d00e      	beq.n	800f652 <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f634:	6823      	ldr	r3, [r4, #0]
 800f636:	689b      	ldr	r3, [r3, #8]
 800f638:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f63c:	d001      	beq.n	800f642 <UART_DMAError+0x24>
 800f63e:	2922      	cmp	r1, #34	; 0x22
 800f640:	d011      	beq.n	800f666 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f642:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f644:	f043 0310 	orr.w	r3, r3, #16
 800f648:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800f64a:	4620      	mov	r0, r4
 800f64c:	f7ff ffe6 	bl	800f61c <HAL_UART_ErrorCallback>
}
 800f650:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800f652:	2200      	movs	r2, #0
 800f654:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f65e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f660:	2320      	movs	r3, #32
 800f662:	6763      	str	r3, [r4, #116]	; 0x74
 800f664:	e7e6      	b.n	800f634 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 800f666:	2300      	movs	r3, #0
 800f668:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f66c:	4620      	mov	r0, r4
 800f66e:	f7ff fc1d 	bl	800eeac <UART_EndRxTransfer>
 800f672:	e7e6      	b.n	800f642 <UART_DMAError+0x24>

0800f674 <HAL_UART_IRQHandler>:
{
 800f674:	b538      	push	{r3, r4, r5, lr}
 800f676:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f678:	6802      	ldr	r2, [r0, #0]
 800f67a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f67c:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f67e:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800f680:	f013 0f0f 	tst.w	r3, #15
 800f684:	d10c      	bne.n	800f6a0 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f686:	f013 0f20 	tst.w	r3, #32
 800f68a:	d07e      	beq.n	800f78a <HAL_UART_IRQHandler+0x116>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f68c:	f011 0f20 	tst.w	r1, #32
 800f690:	d07b      	beq.n	800f78a <HAL_UART_IRQHandler+0x116>
      if (huart->RxISR != NULL)
 800f692:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f694:	2b00      	cmp	r3, #0
 800f696:	f000 8096 	beq.w	800f7c6 <HAL_UART_IRQHandler+0x152>
        huart->RxISR(huart);
 800f69a:	4620      	mov	r0, r4
 800f69c:	4798      	blx	r3
 800f69e:	e092      	b.n	800f7c6 <HAL_UART_IRQHandler+0x152>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f6a0:	f010 0501 	ands.w	r5, r0, #1
 800f6a4:	d102      	bne.n	800f6ac <HAL_UART_IRQHandler+0x38>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800f6a6:	f411 7f90 	tst.w	r1, #288	; 0x120
 800f6aa:	d06e      	beq.n	800f78a <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6ac:	f013 0f01 	tst.w	r3, #1
 800f6b0:	d007      	beq.n	800f6c2 <HAL_UART_IRQHandler+0x4e>
 800f6b2:	f411 7f80 	tst.w	r1, #256	; 0x100
 800f6b6:	d004      	beq.n	800f6c2 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6b8:	2001      	movs	r0, #1
 800f6ba:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6bc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f6be:	4302      	orrs	r2, r0
 800f6c0:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6c2:	f013 0f02 	tst.w	r3, #2
 800f6c6:	d04c      	beq.n	800f762 <HAL_UART_IRQHandler+0xee>
 800f6c8:	b185      	cbz	r5, 800f6ec <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f6ca:	6822      	ldr	r2, [r4, #0]
 800f6cc:	2002      	movs	r0, #2
 800f6ce:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f6d0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f6d2:	f042 0204 	orr.w	r2, r2, #4
 800f6d6:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6d8:	f013 0f04 	tst.w	r3, #4
 800f6dc:	d006      	beq.n	800f6ec <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f6de:	6822      	ldr	r2, [r4, #0]
 800f6e0:	2004      	movs	r0, #4
 800f6e2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f6e4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f6e6:	f042 0202 	orr.w	r2, r2, #2
 800f6ea:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f6ec:	f013 0f08 	tst.w	r3, #8
 800f6f0:	d009      	beq.n	800f706 <HAL_UART_IRQHandler+0x92>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f6f2:	f011 0f20 	tst.w	r1, #32
 800f6f6:	d100      	bne.n	800f6fa <HAL_UART_IRQHandler+0x86>
 800f6f8:	b12d      	cbz	r5, 800f706 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f6fa:	6822      	ldr	r2, [r4, #0]
 800f6fc:	2008      	movs	r0, #8
 800f6fe:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f700:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f702:	4302      	orrs	r2, r0
 800f704:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f706:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f708:	2a00      	cmp	r2, #0
 800f70a:	d05c      	beq.n	800f7c6 <HAL_UART_IRQHandler+0x152>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f70c:	f013 0f20 	tst.w	r3, #32
 800f710:	d006      	beq.n	800f720 <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f712:	f011 0f20 	tst.w	r1, #32
 800f716:	d003      	beq.n	800f720 <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 800f718:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f71a:	b10b      	cbz	r3, 800f720 <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 800f71c:	4620      	mov	r0, r4
 800f71e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800f720:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f72a:	d102      	bne.n	800f732 <HAL_UART_IRQHandler+0xbe>
 800f72c:	f012 0f08 	tst.w	r2, #8
 800f730:	d025      	beq.n	800f77e <HAL_UART_IRQHandler+0x10a>
        UART_EndRxTransfer(huart);
 800f732:	4620      	mov	r0, r4
 800f734:	f7ff fbba 	bl	800eeac <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	689a      	ldr	r2, [r3, #8]
 800f73c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f740:	d019      	beq.n	800f776 <HAL_UART_IRQHandler+0x102>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f742:	689a      	ldr	r2, [r3, #8]
 800f744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f748:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800f74a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f74c:	b17b      	cbz	r3, 800f76e <HAL_UART_IRQHandler+0xfa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f74e:	4a24      	ldr	r2, [pc, #144]	; (800f7e0 <HAL_UART_IRQHandler+0x16c>)
 800f750:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f752:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f754:	f7f3 f885 	bl	8002862 <HAL_DMA_Abort_IT>
 800f758:	b3a8      	cbz	r0, 800f7c6 <HAL_UART_IRQHandler+0x152>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f75a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f75c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f75e:	4798      	blx	r3
 800f760:	e031      	b.n	800f7c6 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f762:	f013 0f04 	tst.w	r3, #4
 800f766:	d0c1      	beq.n	800f6ec <HAL_UART_IRQHandler+0x78>
 800f768:	2d00      	cmp	r5, #0
 800f76a:	d1b8      	bne.n	800f6de <HAL_UART_IRQHandler+0x6a>
 800f76c:	e7be      	b.n	800f6ec <HAL_UART_IRQHandler+0x78>
            HAL_UART_ErrorCallback(huart);
 800f76e:	4620      	mov	r0, r4
 800f770:	f7ff ff54 	bl	800f61c <HAL_UART_ErrorCallback>
 800f774:	e027      	b.n	800f7c6 <HAL_UART_IRQHandler+0x152>
          HAL_UART_ErrorCallback(huart);
 800f776:	4620      	mov	r0, r4
 800f778:	f7ff ff50 	bl	800f61c <HAL_UART_ErrorCallback>
 800f77c:	e023      	b.n	800f7c6 <HAL_UART_IRQHandler+0x152>
        HAL_UART_ErrorCallback(huart);
 800f77e:	4620      	mov	r0, r4
 800f780:	f7ff ff4c 	bl	800f61c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f784:	2300      	movs	r3, #0
 800f786:	67e3      	str	r3, [r4, #124]	; 0x7c
 800f788:	e01d      	b.n	800f7c6 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f78a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800f78e:	d002      	beq.n	800f796 <HAL_UART_IRQHandler+0x122>
 800f790:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800f794:	d10a      	bne.n	800f7ac <HAL_UART_IRQHandler+0x138>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f796:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f79a:	d00e      	beq.n	800f7ba <HAL_UART_IRQHandler+0x146>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f79c:	f011 0f80 	tst.w	r1, #128	; 0x80
 800f7a0:	d00b      	beq.n	800f7ba <HAL_UART_IRQHandler+0x146>
    if (huart->TxISR != NULL)
 800f7a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7a4:	b17b      	cbz	r3, 800f7c6 <HAL_UART_IRQHandler+0x152>
      huart->TxISR(huart);
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	4798      	blx	r3
 800f7aa:	e00c      	b.n	800f7c6 <HAL_UART_IRQHandler+0x152>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f7ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f7b0:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f000 ff04 	bl	80105c0 <HAL_UARTEx_WakeupCallback>
    return;
 800f7b8:	e005      	b.n	800f7c6 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f7ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f7be:	d002      	beq.n	800f7c6 <HAL_UART_IRQHandler+0x152>
 800f7c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800f7c4:	d100      	bne.n	800f7c8 <HAL_UART_IRQHandler+0x154>
}
 800f7c6:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f7c8:	6813      	ldr	r3, [r2, #0]
 800f7ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7ce:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f7d0:	2320      	movs	r3, #32
 800f7d2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f7ff fe79 	bl	800f4d0 <HAL_UART_TxCpltCallback>
 800f7de:	e7f2      	b.n	800f7c6 <HAL_UART_IRQHandler+0x152>
 800f7e0:	0800f7e5 	.word	0x0800f7e5

0800f7e4 <UART_DMAAbortOnError>:
{
 800f7e4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f7ee:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800f7f2:	f7ff ff13 	bl	800f61c <HAL_UART_ErrorCallback>
}
 800f7f6:	bd08      	pop	{r3, pc}

0800f7f8 <HAL_UART_AbortCpltCallback>:
}
 800f7f8:	4770      	bx	lr
	...

0800f7fc <HAL_UART_Abort_IT>:
{
 800f7fc:	b510      	push	{r4, lr}
 800f7fe:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f800:	6802      	ldr	r2, [r0, #0]
 800f802:	6813      	ldr	r3, [r2, #0]
 800f804:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800f808:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f80a:	6802      	ldr	r2, [r0, #0]
 800f80c:	6893      	ldr	r3, [r2, #8]
 800f80e:	f023 0301 	bic.w	r3, r3, #1
 800f812:	6093      	str	r3, [r2, #8]
  if (huart->hdmatx != NULL)
 800f814:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f816:	b13b      	cbz	r3, 800f828 <HAL_UART_Abort_IT+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f818:	6802      	ldr	r2, [r0, #0]
 800f81a:	6892      	ldr	r2, [r2, #8]
 800f81c:	f012 0f80 	tst.w	r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800f820:	bf14      	ite	ne
 800f822:	4a2a      	ldrne	r2, [pc, #168]	; (800f8cc <HAL_UART_Abort_IT+0xd0>)
      huart->hdmatx->XferAbortCallback = NULL;
 800f824:	2200      	moveq	r2, #0
 800f826:	639a      	str	r2, [r3, #56]	; 0x38
  if (huart->hdmarx != NULL)
 800f828:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f82a:	b13b      	cbz	r3, 800f83c <HAL_UART_Abort_IT+0x40>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f82c:	6822      	ldr	r2, [r4, #0]
 800f82e:	6892      	ldr	r2, [r2, #8]
 800f830:	f012 0f40 	tst.w	r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800f834:	bf14      	ite	ne
 800f836:	4a26      	ldrne	r2, [pc, #152]	; (800f8d0 <HAL_UART_Abort_IT+0xd4>)
      huart->hdmarx->XferAbortCallback = NULL;
 800f838:	2200      	moveq	r2, #0
 800f83a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	689a      	ldr	r2, [r3, #8]
 800f840:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f844:	d00b      	beq.n	800f85e <HAL_UART_Abort_IT+0x62>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f846:	689a      	ldr	r2, [r3, #8]
 800f848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f84c:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f84e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f850:	b128      	cbz	r0, 800f85e <HAL_UART_Abort_IT+0x62>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f852:	f7f3 f806 	bl	8002862 <HAL_DMA_Abort_IT>
 800f856:	b358      	cbz	r0, 800f8b0 <HAL_UART_Abort_IT+0xb4>
        huart->hdmatx->XferAbortCallback = NULL;
 800f858:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f85a:	2200      	movs	r2, #0
 800f85c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f85e:	6823      	ldr	r3, [r4, #0]
 800f860:	689a      	ldr	r2, [r3, #8]
 800f862:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f866:	d00b      	beq.n	800f880 <HAL_UART_Abort_IT+0x84>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f868:	689a      	ldr	r2, [r3, #8]
 800f86a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f86e:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f870:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f872:	b128      	cbz	r0, 800f880 <HAL_UART_Abort_IT+0x84>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f874:	f7f2 fff5 	bl	8002862 <HAL_DMA_Abort_IT>
 800f878:	b1c0      	cbz	r0, 800f8ac <HAL_UART_Abort_IT+0xb0>
        huart->hdmarx->XferAbortCallback = NULL;
 800f87a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f87c:	2200      	movs	r2, #0
 800f87e:	639a      	str	r2, [r3, #56]	; 0x38
    huart->TxXferCount = 0U;
 800f880:	2300      	movs	r3, #0
 800f882:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->RxXferCount = 0U;
 800f886:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    huart->RxISR = NULL;
 800f88a:	6623      	str	r3, [r4, #96]	; 0x60
    huart->TxISR = NULL;
 800f88c:	6663      	str	r3, [r4, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f88e:	67e3      	str	r3, [r4, #124]	; 0x7c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	220f      	movs	r2, #15
 800f894:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f896:	6822      	ldr	r2, [r4, #0]
 800f898:	8b13      	ldrh	r3, [r2, #24]
 800f89a:	f043 0308 	orr.w	r3, r3, #8
 800f89e:	8313      	strh	r3, [r2, #24]
    huart->gState  = HAL_UART_STATE_READY;
 800f8a0:	2320      	movs	r3, #32
 800f8a2:	6763      	str	r3, [r4, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_READY;
 800f8a4:	67a3      	str	r3, [r4, #120]	; 0x78
    HAL_UART_AbortCpltCallback(huart);
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f7ff ffa6 	bl	800f7f8 <HAL_UART_AbortCpltCallback>
}
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	689a      	ldr	r2, [r3, #8]
 800f8b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f8b8:	d0f8      	beq.n	800f8ac <HAL_UART_Abort_IT+0xb0>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8ba:	689a      	ldr	r2, [r3, #8]
 800f8bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f8c0:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f8c2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d1d5      	bne.n	800f874 <HAL_UART_Abort_IT+0x78>
 800f8c8:	e7f0      	b.n	800f8ac <HAL_UART_Abort_IT+0xb0>
 800f8ca:	bf00      	nop
 800f8cc:	0800f911 	.word	0x0800f911
 800f8d0:	0800f8d5 	.word	0x0800f8d5

0800f8d4 <UART_DMARxAbortCallback>:
{
 800f8d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->hdmarx->XferAbortCallback = NULL;
 800f8d8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f8da:	2200      	movs	r2, #0
 800f8dc:	639a      	str	r2, [r3, #56]	; 0x38
  if (huart->hdmatx != NULL)
 800f8de:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f8e0:	b113      	cbz	r3, 800f8e8 <UART_DMARxAbortCallback+0x14>
    if (huart->hdmatx->XferAbortCallback != NULL)
 800f8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8e4:	b103      	cbz	r3, 800f8e8 <UART_DMARxAbortCallback+0x14>
}
 800f8e6:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0U;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 800f8ee:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8f2:	67c3      	str	r3, [r0, #124]	; 0x7c
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f8f4:	6803      	ldr	r3, [r0, #0]
 800f8f6:	220f      	movs	r2, #15
 800f8f8:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f8fa:	6802      	ldr	r2, [r0, #0]
 800f8fc:	8b13      	ldrh	r3, [r2, #24]
 800f8fe:	f043 0308 	orr.w	r3, r3, #8
 800f902:	8313      	strh	r3, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800f904:	2320      	movs	r3, #32
 800f906:	6743      	str	r3, [r0, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f908:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_AbortCpltCallback(huart);
 800f90a:	f7ff ff75 	bl	800f7f8 <HAL_UART_AbortCpltCallback>
 800f90e:	e7ea      	b.n	800f8e6 <UART_DMARxAbortCallback+0x12>

0800f910 <UART_DMATxAbortCallback>:
{
 800f910:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f912:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->hdmatx->XferAbortCallback = NULL;
 800f914:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f916:	2200      	movs	r2, #0
 800f918:	639a      	str	r2, [r3, #56]	; 0x38
  if (huart->hdmarx != NULL)
 800f91a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f91c:	b113      	cbz	r3, 800f924 <UART_DMATxAbortCallback+0x14>
    if (huart->hdmarx->XferAbortCallback != NULL)
 800f91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f920:	b103      	cbz	r3, 800f924 <UART_DMATxAbortCallback+0x14>
}
 800f922:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0U;
 800f924:	2300      	movs	r3, #0
 800f926:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 800f92a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f92e:	67c3      	str	r3, [r0, #124]	; 0x7c
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f930:	6803      	ldr	r3, [r0, #0]
 800f932:	220f      	movs	r2, #15
 800f934:	621a      	str	r2, [r3, #32]
  huart->gState  = HAL_UART_STATE_READY;
 800f936:	2320      	movs	r3, #32
 800f938:	6743      	str	r3, [r0, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f93a:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_AbortCpltCallback(huart);
 800f93c:	f7ff ff5c 	bl	800f7f8 <HAL_UART_AbortCpltCallback>
 800f940:	e7ef      	b.n	800f922 <UART_DMATxAbortCallback+0x12>

0800f942 <HAL_UART_AbortTransmitCpltCallback>:
}
 800f942:	4770      	bx	lr

0800f944 <HAL_UART_AbortTransmit_IT>:
{
 800f944:	b510      	push	{r4, lr}
 800f946:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f948:	6802      	ldr	r2, [r0, #0]
 800f94a:	6813      	ldr	r3, [r2, #0]
 800f94c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f950:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f952:	6803      	ldr	r3, [r0, #0]
 800f954:	689a      	ldr	r2, [r3, #8]
 800f956:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f95a:	d019      	beq.n	800f990 <HAL_UART_AbortTransmit_IT+0x4c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f95c:	689a      	ldr	r2, [r3, #8]
 800f95e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f962:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f964:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f966:	b153      	cbz	r3, 800f97e <HAL_UART_AbortTransmit_IT+0x3a>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800f968:	4a0e      	ldr	r2, [pc, #56]	; (800f9a4 <HAL_UART_AbortTransmit_IT+0x60>)
 800f96a:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f96c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f96e:	f7f2 ff78 	bl	8002862 <HAL_DMA_Abort_IT>
 800f972:	b110      	cbz	r0, 800f97a <HAL_UART_AbortTransmit_IT+0x36>
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800f974:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f976:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f978:	4798      	blx	r3
}
 800f97a:	2000      	movs	r0, #0
 800f97c:	bd10      	pop	{r4, pc}
      huart->TxXferCount = 0U;
 800f97e:	2300      	movs	r3, #0
 800f980:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      huart->TxISR = NULL;
 800f984:	6643      	str	r3, [r0, #100]	; 0x64
      huart->gState = HAL_UART_STATE_READY;
 800f986:	2320      	movs	r3, #32
 800f988:	6743      	str	r3, [r0, #116]	; 0x74
      HAL_UART_AbortTransmitCpltCallback(huart);
 800f98a:	f7ff ffda 	bl	800f942 <HAL_UART_AbortTransmitCpltCallback>
 800f98e:	e7f4      	b.n	800f97a <HAL_UART_AbortTransmit_IT+0x36>
    huart->TxXferCount = 0U;
 800f990:	2300      	movs	r3, #0
 800f992:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->TxISR = NULL;
 800f996:	6643      	str	r3, [r0, #100]	; 0x64
    huart->gState = HAL_UART_STATE_READY;
 800f998:	2320      	movs	r3, #32
 800f99a:	6743      	str	r3, [r0, #116]	; 0x74
    HAL_UART_AbortTransmitCpltCallback(huart);
 800f99c:	f7ff ffd1 	bl	800f942 <HAL_UART_AbortTransmitCpltCallback>
 800f9a0:	e7eb      	b.n	800f97a <HAL_UART_AbortTransmit_IT+0x36>
 800f9a2:	bf00      	nop
 800f9a4:	0800f9a9 	.word	0x0800f9a9

0800f9a8 <UART_DMATxOnlyAbortCallback>:
{
 800f9a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->TxXferCount = 0U;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->gState = HAL_UART_STATE_READY;
 800f9b2:	2320      	movs	r3, #32
 800f9b4:	6743      	str	r3, [r0, #116]	; 0x74
  HAL_UART_AbortTransmitCpltCallback(huart);
 800f9b6:	f7ff ffc4 	bl	800f942 <HAL_UART_AbortTransmitCpltCallback>
}
 800f9ba:	bd08      	pop	{r3, pc}

0800f9bc <HAL_UART_AbortReceiveCpltCallback>:
}
 800f9bc:	4770      	bx	lr
	...

0800f9c0 <HAL_UART_AbortReceive_IT>:
{
 800f9c0:	b510      	push	{r4, lr}
 800f9c2:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f9c4:	6802      	ldr	r2, [r0, #0]
 800f9c6:	6813      	ldr	r3, [r2, #0]
 800f9c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9cc:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9ce:	6802      	ldr	r2, [r0, #0]
 800f9d0:	6893      	ldr	r3, [r2, #8]
 800f9d2:	f023 0301 	bic.w	r3, r3, #1
 800f9d6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9d8:	6803      	ldr	r3, [r0, #0]
 800f9da:	689a      	ldr	r2, [r3, #8]
 800f9dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f9e0:	d021      	beq.n	800fa26 <HAL_UART_AbortReceive_IT+0x66>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9e2:	689a      	ldr	r2, [r3, #8]
 800f9e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f9e8:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f9ea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f9ec:	b153      	cbz	r3, 800fa04 <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800f9ee:	4a13      	ldr	r2, [pc, #76]	; (800fa3c <HAL_UART_AbortReceive_IT+0x7c>)
 800f9f0:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9f2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f9f4:	f7f2 ff35 	bl	8002862 <HAL_DMA_Abort_IT>
 800f9f8:	b110      	cbz	r0, 800fa00 <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f9fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f9fe:	4798      	blx	r3
}
 800fa00:	2000      	movs	r0, #0
 800fa02:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0U;
 800fa04:	2300      	movs	r3, #0
 800fa06:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 800fa0a:	6543      	str	r3, [r0, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fa0c:	6803      	ldr	r3, [r0, #0]
 800fa0e:	220f      	movs	r2, #15
 800fa10:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa12:	6802      	ldr	r2, [r0, #0]
 800fa14:	8b13      	ldrh	r3, [r2, #24]
 800fa16:	f043 0308 	orr.w	r3, r3, #8
 800fa1a:	8313      	strh	r3, [r2, #24]
      huart->RxState = HAL_UART_STATE_READY;
 800fa1c:	2320      	movs	r3, #32
 800fa1e:	6783      	str	r3, [r0, #120]	; 0x78
      HAL_UART_AbortReceiveCpltCallback(huart);
 800fa20:	f7ff ffcc 	bl	800f9bc <HAL_UART_AbortReceiveCpltCallback>
 800fa24:	e7ec      	b.n	800fa00 <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0U;
 800fa26:	2200      	movs	r2, #0
 800fa28:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 800fa2c:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fa2e:	220f      	movs	r2, #15
 800fa30:	621a      	str	r2, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 800fa32:	2320      	movs	r3, #32
 800fa34:	6783      	str	r3, [r0, #120]	; 0x78
    HAL_UART_AbortReceiveCpltCallback(huart);
 800fa36:	f7ff ffc1 	bl	800f9bc <HAL_UART_AbortReceiveCpltCallback>
 800fa3a:	e7e1      	b.n	800fa00 <HAL_UART_AbortReceive_IT+0x40>
 800fa3c:	0800fa41 	.word	0x0800fa41

0800fa40 <UART_DMARxOnlyAbortCallback>:
{
 800fa40:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa42:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800fa44:	2300      	movs	r3, #0
 800fa46:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fa4a:	6803      	ldr	r3, [r0, #0]
 800fa4c:	220f      	movs	r2, #15
 800fa4e:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa50:	6802      	ldr	r2, [r0, #0]
 800fa52:	8b13      	ldrh	r3, [r2, #24]
 800fa54:	f043 0308 	orr.w	r3, r3, #8
 800fa58:	8313      	strh	r3, [r2, #24]
  huart->RxState = HAL_UART_STATE_READY;
 800fa5a:	2320      	movs	r3, #32
 800fa5c:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_AbortReceiveCpltCallback(huart);
 800fa5e:	f7ff ffad 	bl	800f9bc <HAL_UART_AbortReceiveCpltCallback>
}
 800fa62:	bd08      	pop	{r3, pc}

0800fa64 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 800fa64:	6802      	ldr	r2, [r0, #0]
 800fa66:	8b13      	ldrh	r3, [r2, #24]
 800fa68:	f043 0304 	orr.w	r3, r3, #4
 800fa6c:	8313      	strh	r3, [r2, #24]
}
 800fa6e:	4770      	bx	lr

0800fa70 <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 800fa70:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d015      	beq.n	800faa4 <HAL_HalfDuplex_EnableTransmitter+0x34>
 800fa78:	2301      	movs	r3, #1
 800fa7a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 800fa7e:	2324      	movs	r3, #36	; 0x24
 800fa80:	6743      	str	r3, [r0, #116]	; 0x74
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800fa82:	6802      	ldr	r2, [r0, #0]
 800fa84:	6813      	ldr	r3, [r2, #0]
 800fa86:	f023 030c 	bic.w	r3, r3, #12
 800fa8a:	6013      	str	r3, [r2, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800fa8c:	6802      	ldr	r2, [r0, #0]
 800fa8e:	6813      	ldr	r3, [r2, #0]
 800fa90:	f043 0308 	orr.w	r3, r3, #8
 800fa94:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800fa96:	2320      	movs	r3, #32
 800fa98:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800faa0:	4618      	mov	r0, r3
 800faa2:	4770      	bx	lr
  __HAL_LOCK(huart);
 800faa4:	2002      	movs	r0, #2
}
 800faa6:	4770      	bx	lr

0800faa8 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 800faa8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800faac:	2b01      	cmp	r3, #1
 800faae:	d015      	beq.n	800fadc <HAL_HalfDuplex_EnableReceiver+0x34>
 800fab0:	2301      	movs	r3, #1
 800fab2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 800fab6:	2324      	movs	r3, #36	; 0x24
 800fab8:	6743      	str	r3, [r0, #116]	; 0x74
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800faba:	6802      	ldr	r2, [r0, #0]
 800fabc:	6813      	ldr	r3, [r2, #0]
 800fabe:	f023 030c 	bic.w	r3, r3, #12
 800fac2:	6013      	str	r3, [r2, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800fac4:	6802      	ldr	r2, [r0, #0]
 800fac6:	6813      	ldr	r3, [r2, #0]
 800fac8:	f043 0304 	orr.w	r3, r3, #4
 800facc:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800face:	2320      	movs	r3, #32
 800fad0:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800fad2:	2300      	movs	r3, #0
 800fad4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800fad8:	4618      	mov	r0, r3
 800fada:	4770      	bx	lr
  __HAL_LOCK(huart);
 800fadc:	2002      	movs	r0, #2
}
 800fade:	4770      	bx	lr

0800fae0 <HAL_LIN_SendBreak>:
  __HAL_LOCK(huart);
 800fae0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d010      	beq.n	800fb0a <HAL_LIN_SendBreak+0x2a>
 800fae8:	2301      	movs	r3, #1
 800faea:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 800faee:	2324      	movs	r3, #36	; 0x24
 800faf0:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 800faf2:	6802      	ldr	r2, [r0, #0]
 800faf4:	8b13      	ldrh	r3, [r2, #24]
 800faf6:	f043 0302 	orr.w	r3, r3, #2
 800fafa:	8313      	strh	r3, [r2, #24]
  huart->gState = HAL_UART_STATE_READY;
 800fafc:	2320      	movs	r3, #32
 800fafe:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800fb00:	2300      	movs	r3, #0
 800fb02:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 800fb06:	4618      	mov	r0, r3
 800fb08:	4770      	bx	lr
  __HAL_LOCK(huart);
 800fb0a:	2002      	movs	r0, #2
}
 800fb0c:	4770      	bx	lr

0800fb0e <HAL_UART_GetState>:
  temp1 = huart->gState;
 800fb0e:	6f42      	ldr	r2, [r0, #116]	; 0x74
  temp2 = huart->RxState;
 800fb10:	6f80      	ldr	r0, [r0, #120]	; 0x78
}
 800fb12:	4310      	orrs	r0, r2
 800fb14:	4770      	bx	lr

0800fb16 <HAL_UART_GetError>:
  return huart->ErrorCode;
 800fb16:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
 800fb18:	4770      	bx	lr
	...

0800fb1c <UART_SetConfig>:
{
 800fb1c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800fb20:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb22:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb24:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fb26:	68a3      	ldr	r3, [r4, #8]
 800fb28:	6922      	ldr	r2, [r4, #16]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	6962      	ldr	r2, [r4, #20]
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	69e2      	ldr	r2, [r4, #28]
 800fb32:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb34:	4aab      	ldr	r2, [pc, #684]	; (800fde4 <UART_SetConfig+0x2c8>)
 800fb36:	4002      	ands	r2, r0
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fb3c:	6822      	ldr	r2, [r4, #0]
 800fb3e:	6853      	ldr	r3, [r2, #4]
 800fb40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800fb44:	68e1      	ldr	r1, [r4, #12]
 800fb46:	430b      	orrs	r3, r1
 800fb48:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb4a:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fb4c:	6822      	ldr	r2, [r4, #0]
 800fb4e:	4ba6      	ldr	r3, [pc, #664]	; (800fde8 <UART_SetConfig+0x2cc>)
 800fb50:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800fb52:	bf1c      	itt	ne
 800fb54:	6a23      	ldrne	r3, [r4, #32]
 800fb56:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb58:	6893      	ldr	r3, [r2, #8]
 800fb5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800fb5e:	430b      	orrs	r3, r1
 800fb60:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	4aa1      	ldr	r2, [pc, #644]	; (800fdec <UART_SetConfig+0x2d0>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d023      	beq.n	800fbb2 <UART_SetConfig+0x96>
 800fb6a:	4aa1      	ldr	r2, [pc, #644]	; (800fdf0 <UART_SetConfig+0x2d4>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d032      	beq.n	800fbd6 <UART_SetConfig+0xba>
 800fb70:	4aa0      	ldr	r2, [pc, #640]	; (800fdf4 <UART_SetConfig+0x2d8>)
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d04c      	beq.n	800fc10 <UART_SetConfig+0xf4>
 800fb76:	4aa0      	ldr	r2, [pc, #640]	; (800fdf8 <UART_SetConfig+0x2dc>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d060      	beq.n	800fc3e <UART_SetConfig+0x122>
 800fb7c:	4a9f      	ldr	r2, [pc, #636]	; (800fdfc <UART_SetConfig+0x2e0>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d074      	beq.n	800fc6c <UART_SetConfig+0x150>
 800fb82:	4a99      	ldr	r2, [pc, #612]	; (800fde8 <UART_SetConfig+0x2cc>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	f000 808b 	beq.w	800fca0 <UART_SetConfig+0x184>
 800fb8a:	2510      	movs	r5, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb8c:	69e3      	ldr	r3, [r4, #28]
 800fb8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb92:	f000 813b 	beq.w	800fe0c <UART_SetConfig+0x2f0>
    switch (clocksource)
 800fb96:	2d08      	cmp	r5, #8
 800fb98:	f200 81c5 	bhi.w	800ff26 <UART_SetConfig+0x40a>
 800fb9c:	e8df f015 	tbh	[pc, r5, lsl #1]
 800fba0:	019b0185 	.word	0x019b0185
 800fba4:	01c301a5 	.word	0x01c301a5
 800fba8:	01c301b0 	.word	0x01c301b0
 800fbac:	01c301c3 	.word	0x01c301c3
 800fbb0:	01ba      	.short	0x01ba
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fbb2:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800fbb6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fbba:	f002 0203 	and.w	r2, r2, #3
 800fbbe:	2a03      	cmp	r2, #3
 800fbc0:	d807      	bhi.n	800fbd2 <UART_SetConfig+0xb6>
 800fbc2:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fbc6:	0087      	.short	0x0087
 800fbc8:	01c30004 	.word	0x01c30004
 800fbcc:	01c5      	.short	0x01c5
 800fbce:	2504      	movs	r5, #4
 800fbd0:	e7dc      	b.n	800fb8c <UART_SetConfig+0x70>
 800fbd2:	2510      	movs	r5, #16
 800fbd4:	e7da      	b.n	800fb8c <UART_SetConfig+0x70>
 800fbd6:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800fbda:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fbde:	f002 020c 	and.w	r2, r2, #12
 800fbe2:	2a0c      	cmp	r2, #12
 800fbe4:	d812      	bhi.n	800fc0c <UART_SetConfig+0xf0>
 800fbe6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fbea:	0088      	.short	0x0088
 800fbec:	00110011 	.word	0x00110011
 800fbf0:	000d0011 	.word	0x000d0011
 800fbf4:	00110011 	.word	0x00110011
 800fbf8:	01b50011 	.word	0x01b50011
 800fbfc:	00110011 	.word	0x00110011
 800fc00:	000f0011 	.word	0x000f0011
 800fc04:	2504      	movs	r5, #4
 800fc06:	e7c1      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc08:	2508      	movs	r5, #8
 800fc0a:	e7bf      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc0c:	2510      	movs	r5, #16
 800fc0e:	e7bd      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc10:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800fc14:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fc18:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800fc1c:	2a10      	cmp	r2, #16
 800fc1e:	d00a      	beq.n	800fc36 <UART_SetConfig+0x11a>
 800fc20:	d906      	bls.n	800fc30 <UART_SetConfig+0x114>
 800fc22:	2a20      	cmp	r2, #32
 800fc24:	f000 8198 	beq.w	800ff58 <UART_SetConfig+0x43c>
 800fc28:	2a30      	cmp	r2, #48	; 0x30
 800fc2a:	d106      	bne.n	800fc3a <UART_SetConfig+0x11e>
 800fc2c:	2508      	movs	r5, #8
 800fc2e:	e7ad      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc30:	b91a      	cbnz	r2, 800fc3a <UART_SetConfig+0x11e>
 800fc32:	2500      	movs	r5, #0
 800fc34:	e04f      	b.n	800fcd6 <UART_SetConfig+0x1ba>
 800fc36:	2504      	movs	r5, #4
 800fc38:	e7a8      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc3a:	2510      	movs	r5, #16
 800fc3c:	e7a6      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc3e:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800fc42:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fc46:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800fc4a:	2a40      	cmp	r2, #64	; 0x40
 800fc4c:	d00a      	beq.n	800fc64 <UART_SetConfig+0x148>
 800fc4e:	d906      	bls.n	800fc5e <UART_SetConfig+0x142>
 800fc50:	2a80      	cmp	r2, #128	; 0x80
 800fc52:	f000 8183 	beq.w	800ff5c <UART_SetConfig+0x440>
 800fc56:	2ac0      	cmp	r2, #192	; 0xc0
 800fc58:	d106      	bne.n	800fc68 <UART_SetConfig+0x14c>
 800fc5a:	2508      	movs	r5, #8
 800fc5c:	e796      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc5e:	b91a      	cbnz	r2, 800fc68 <UART_SetConfig+0x14c>
 800fc60:	2500      	movs	r5, #0
 800fc62:	e038      	b.n	800fcd6 <UART_SetConfig+0x1ba>
 800fc64:	2504      	movs	r5, #4
 800fc66:	e791      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc68:	2510      	movs	r5, #16
 800fc6a:	e78f      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc6c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800fc70:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fc74:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800fc78:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800fc7c:	d00c      	beq.n	800fc98 <UART_SetConfig+0x17c>
 800fc7e:	d908      	bls.n	800fc92 <UART_SetConfig+0x176>
 800fc80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800fc84:	f000 816c 	beq.w	800ff60 <UART_SetConfig+0x444>
 800fc88:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800fc8c:	d106      	bne.n	800fc9c <UART_SetConfig+0x180>
 800fc8e:	2508      	movs	r5, #8
 800fc90:	e77c      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc92:	b91a      	cbnz	r2, 800fc9c <UART_SetConfig+0x180>
 800fc94:	2500      	movs	r5, #0
 800fc96:	e01e      	b.n	800fcd6 <UART_SetConfig+0x1ba>
 800fc98:	2504      	movs	r5, #4
 800fc9a:	e777      	b.n	800fb8c <UART_SetConfig+0x70>
 800fc9c:	2510      	movs	r5, #16
 800fc9e:	e775      	b.n	800fb8c <UART_SetConfig+0x70>
 800fca0:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800fca4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800fca8:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800fcac:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fcb0:	d040      	beq.n	800fd34 <UART_SetConfig+0x218>
 800fcb2:	d90a      	bls.n	800fcca <UART_SetConfig+0x1ae>
 800fcb4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800fcb8:	d040      	beq.n	800fd3c <UART_SetConfig+0x220>
 800fcba:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800fcbe:	f040 8135 	bne.w	800ff2c <UART_SetConfig+0x410>
 800fcc2:	2508      	movs	r5, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800fcc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fcc8:	e021      	b.n	800fd0e <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fcca:	2a00      	cmp	r2, #0
 800fccc:	f040 812e 	bne.w	800ff2c <UART_SetConfig+0x410>
 800fcd0:	2500      	movs	r5, #0
 800fcd2:	e000      	b.n	800fcd6 <UART_SetConfig+0x1ba>
 800fcd4:	2501      	movs	r5, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 800fcd6:	4a44      	ldr	r2, [pc, #272]	; (800fde8 <UART_SetConfig+0x2cc>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	f47f af57 	bne.w	800fb8c <UART_SetConfig+0x70>
    switch (clocksource)
 800fcde:	2d08      	cmp	r5, #8
 800fce0:	f200 8126 	bhi.w	800ff30 <UART_SetConfig+0x414>
 800fce4:	e8df f015 	tbh	[pc, r5, lsl #1]
 800fce8:	0124000e 	.word	0x0124000e
 800fcec:	0124002d 	.word	0x0124002d
 800fcf0:	01240026 	.word	0x01240026
 800fcf4:	01240124 	.word	0x01240124
 800fcf8:	000b      	.short	0x000b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fcfa:	2500      	movs	r5, #0
 800fcfc:	e7eb      	b.n	800fcd6 <UART_SetConfig+0x1ba>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800fcfe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fd02:	e004      	b.n	800fd0e <UART_SetConfig+0x1f2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800fd04:	f7f8 fac6 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	f000 8113 	beq.w	800ff34 <UART_SetConfig+0x418>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd0e:	6862      	ldr	r2, [r4, #4]
 800fd10:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800fd14:	4283      	cmp	r3, r0
 800fd16:	f200 810f 	bhi.w	800ff38 <UART_SetConfig+0x41c>
 800fd1a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800fd1e:	f200 810d 	bhi.w	800ff3c <UART_SetConfig+0x420>
        switch (clocksource)
 800fd22:	2d08      	cmp	r5, #8
 800fd24:	d85b      	bhi.n	800fdde <UART_SetConfig+0x2c2>
 800fd26:	e8df f005 	tbb	[pc, r5]
 800fd2a:	5a0f      	.short	0x5a0f
 800fd2c:	5a3a5a2a 	.word	0x5a3a5a2a
 800fd30:	5a5a      	.short	0x5a5a
 800fd32:	4d          	.byte	0x4d
 800fd33:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800fd34:	f7f7 feb4 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
        break;
 800fd38:	2504      	movs	r5, #4
 800fd3a:	e7e5      	b.n	800fd08 <UART_SetConfig+0x1ec>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fd3c:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800fd3e:	4830      	ldr	r0, [pc, #192]	; (800fe00 <UART_SetConfig+0x2e4>)
 800fd40:	e7e5      	b.n	800fd0e <UART_SetConfig+0x1f2>
    switch (clocksource)
 800fd42:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800fd44:	482e      	ldr	r0, [pc, #184]	; (800fe00 <UART_SetConfig+0x2e4>)
 800fd46:	e7e2      	b.n	800fd0e <UART_SetConfig+0x1f2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800fd48:	f7f8 faa4 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
 800fd4c:	6862      	ldr	r2, [r4, #4]
 800fd4e:	2500      	movs	r5, #0
 800fd50:	0e07      	lsrs	r7, r0, #24
 800fd52:	0206      	lsls	r6, r0, #8
 800fd54:	0850      	lsrs	r0, r2, #1
 800fd56:	462b      	mov	r3, r5
 800fd58:	eb16 0b00 	adds.w	fp, r6, r0
 800fd5c:	f147 0c00 	adc.w	ip, r7, #0
 800fd60:	4658      	mov	r0, fp
 800fd62:	4661      	mov	r1, ip
 800fd64:	f7f0 fb0e 	bl	8000384 <__aeabi_uldivmod>
 800fd68:	4603      	mov	r3, r0
            break;
 800fd6a:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd6c:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 800fd70:	4a24      	ldr	r2, [pc, #144]	; (800fe04 <UART_SetConfig+0x2e8>)
 800fd72:	4291      	cmp	r1, r2
 800fd74:	f200 80e4 	bhi.w	800ff40 <UART_SetConfig+0x424>
          huart->Instance->BRR = usartdiv;
 800fd78:	6822      	ldr	r2, [r4, #0]
 800fd7a:	60d3      	str	r3, [r2, #12]
 800fd7c:	e0a6      	b.n	800fecc <UART_SetConfig+0x3b0>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800fd7e:	0856      	lsrs	r6, r2, #1
 800fd80:	2500      	movs	r5, #0
 800fd82:	462b      	mov	r3, r5
 800fd84:	f8df b080 	ldr.w	fp, [pc, #128]	; 800fe08 <UART_SetConfig+0x2ec>
 800fd88:	f04f 0c00 	mov.w	ip, #0
 800fd8c:	eb1b 0006 	adds.w	r0, fp, r6
 800fd90:	f14c 0100 	adc.w	r1, ip, #0
 800fd94:	f7f0 faf6 	bl	8000384 <__aeabi_uldivmod>
 800fd98:	4603      	mov	r3, r0
            break;
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	e7e6      	b.n	800fd6c <UART_SetConfig+0x250>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800fd9e:	f7f7 fe7f 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
 800fda2:	6862      	ldr	r2, [r4, #4]
 800fda4:	2500      	movs	r5, #0
 800fda6:	0e07      	lsrs	r7, r0, #24
 800fda8:	0206      	lsls	r6, r0, #8
 800fdaa:	0850      	lsrs	r0, r2, #1
 800fdac:	462b      	mov	r3, r5
 800fdae:	eb16 0b00 	adds.w	fp, r6, r0
 800fdb2:	f147 0c00 	adc.w	ip, r7, #0
 800fdb6:	4658      	mov	r0, fp
 800fdb8:	4661      	mov	r1, ip
 800fdba:	f7f0 fae3 	bl	8000384 <__aeabi_uldivmod>
 800fdbe:	4603      	mov	r3, r0
            break;
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	e7d3      	b.n	800fd6c <UART_SetConfig+0x250>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800fdc4:	0850      	lsrs	r0, r2, #1
 800fdc6:	2700      	movs	r7, #0
 800fdc8:	2500      	movs	r5, #0
 800fdca:	462b      	mov	r3, r5
 800fdcc:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800fdd0:	f147 0100 	adc.w	r1, r7, #0
 800fdd4:	f7f0 fad6 	bl	8000384 <__aeabi_uldivmod>
 800fdd8:	4603      	mov	r3, r0
            break;
 800fdda:	4628      	mov	r0, r5
 800fddc:	e7c6      	b.n	800fd6c <UART_SetConfig+0x250>
            ret = HAL_ERROR;
 800fdde:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800fde0:	2300      	movs	r3, #0
 800fde2:	e7c3      	b.n	800fd6c <UART_SetConfig+0x250>
 800fde4:	efff69f3 	.word	0xefff69f3
 800fde8:	40008000 	.word	0x40008000
 800fdec:	40013800 	.word	0x40013800
 800fdf0:	40004400 	.word	0x40004400
 800fdf4:	40004800 	.word	0x40004800
 800fdf8:	40004c00 	.word	0x40004c00
 800fdfc:	40005000 	.word	0x40005000
 800fe00:	00f42400 	.word	0x00f42400
 800fe04:	000ffcff 	.word	0x000ffcff
 800fe08:	f4240000 	.word	0xf4240000
    switch (clocksource)
 800fe0c:	2d08      	cmp	r5, #8
 800fe0e:	d849      	bhi.n	800fea4 <UART_SetConfig+0x388>
 800fe10:	e8df f005 	tbb	[pc, r5]
 800fe14:	48291e05 	.word	0x48291e05
 800fe18:	48484834 	.word	0x48484834
 800fe1c:	3f          	.byte	0x3f
 800fe1d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800fe1e:	f7f8 fa39 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
 800fe22:	6862      	ldr	r2, [r4, #4]
 800fe24:	0853      	lsrs	r3, r2, #1
 800fe26:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800fe2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe2e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe30:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe32:	f1a3 0110 	sub.w	r1, r3, #16
 800fe36:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800fe3a:	4291      	cmp	r1, r2
 800fe3c:	f200 8082 	bhi.w	800ff44 <UART_SetConfig+0x428>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fe40:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 800fe44:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fe46:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	60cb      	str	r3, [r1, #12]
 800fe4e:	e03d      	b.n	800fecc <UART_SetConfig+0x3b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800fe50:	f7f8 fa32 	bl	80082b8 <HAL_RCC_GetPCLK2Freq>
 800fe54:	6862      	ldr	r2, [r4, #4]
 800fe56:	0853      	lsrs	r3, r2, #1
 800fe58:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800fe5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe60:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe62:	2000      	movs	r0, #0
        break;
 800fe64:	e7e5      	b.n	800fe32 <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800fe66:	6862      	ldr	r2, [r4, #4]
 800fe68:	0853      	lsrs	r3, r2, #1
 800fe6a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800fe6e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fe72:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe76:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe78:	2000      	movs	r0, #0
        break;
 800fe7a:	e7da      	b.n	800fe32 <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800fe7c:	f7f7 fe10 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
 800fe80:	6862      	ldr	r2, [r4, #4]
 800fe82:	0853      	lsrs	r3, r2, #1
 800fe84:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800fe88:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe8c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe8e:	2000      	movs	r0, #0
        break;
 800fe90:	e7cf      	b.n	800fe32 <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800fe92:	6862      	ldr	r2, [r4, #4]
 800fe94:	0853      	lsrs	r3, r2, #1
 800fe96:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800fe9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe9e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800fea0:	2000      	movs	r0, #0
        break;
 800fea2:	e7c6      	b.n	800fe32 <UART_SetConfig+0x316>
        ret = HAL_ERROR;
 800fea4:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800fea6:	2300      	movs	r3, #0
 800fea8:	e7c3      	b.n	800fe32 <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800feaa:	f7f8 f9f3 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
 800feae:	6863      	ldr	r3, [r4, #4]
 800feb0:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800feb4:	fbb2 f2f3 	udiv	r2, r2, r3
 800feb8:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800feba:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800febc:	f1a2 0110 	sub.w	r1, r2, #16
 800fec0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800fec4:	4299      	cmp	r1, r3
 800fec6:	d83f      	bhi.n	800ff48 <UART_SetConfig+0x42c>
      huart->Instance->BRR = usartdiv;
 800fec8:	6823      	ldr	r3, [r4, #0]
 800feca:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 800fecc:	2200      	movs	r2, #0
 800fece:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800fed0:	6662      	str	r2, [r4, #100]	; 0x64
}
 800fed2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800fed6:	f7f8 f9ef 	bl	80082b8 <HAL_RCC_GetPCLK2Freq>
 800feda:	6863      	ldr	r3, [r4, #4]
 800fedc:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800fee0:	fbb2 f2f3 	udiv	r2, r2, r3
 800fee4:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800fee6:	2000      	movs	r0, #0
        break;
 800fee8:	e7e8      	b.n	800febc <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800feea:	6863      	ldr	r3, [r4, #4]
 800feec:	085a      	lsrs	r2, r3, #1
 800feee:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 800fef2:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
 800fef6:	fbb2 f2f3 	udiv	r2, r2, r3
 800fefa:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800fefc:	2000      	movs	r0, #0
        break;
 800fefe:	e7dd      	b.n	800febc <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800ff00:	f7f7 fdce 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
 800ff04:	6863      	ldr	r3, [r4, #4]
 800ff06:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800ff0a:	fbb2 f2f3 	udiv	r2, r2, r3
 800ff0e:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800ff10:	2000      	movs	r0, #0
        break;
 800ff12:	e7d3      	b.n	800febc <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ff14:	6863      	ldr	r3, [r4, #4]
 800ff16:	085a      	lsrs	r2, r3, #1
 800ff18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800ff1c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ff20:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800ff22:	2000      	movs	r0, #0
        break;
 800ff24:	e7ca      	b.n	800febc <UART_SetConfig+0x3a0>
        ret = HAL_ERROR;
 800ff26:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800ff28:	2200      	movs	r2, #0
 800ff2a:	e7c7      	b.n	800febc <UART_SetConfig+0x3a0>
        ret = HAL_ERROR;
 800ff2c:	2001      	movs	r0, #1
 800ff2e:	e7cd      	b.n	800fecc <UART_SetConfig+0x3b0>
 800ff30:	2001      	movs	r0, #1
 800ff32:	e7cb      	b.n	800fecc <UART_SetConfig+0x3b0>
 800ff34:	2000      	movs	r0, #0
 800ff36:	e7c9      	b.n	800fecc <UART_SetConfig+0x3b0>
        ret = HAL_ERROR;
 800ff38:	2001      	movs	r0, #1
 800ff3a:	e7c7      	b.n	800fecc <UART_SetConfig+0x3b0>
 800ff3c:	2001      	movs	r0, #1
 800ff3e:	e7c5      	b.n	800fecc <UART_SetConfig+0x3b0>
          ret = HAL_ERROR;
 800ff40:	2001      	movs	r0, #1
 800ff42:	e7c3      	b.n	800fecc <UART_SetConfig+0x3b0>
      ret = HAL_ERROR;
 800ff44:	2001      	movs	r0, #1
 800ff46:	e7c1      	b.n	800fecc <UART_SetConfig+0x3b0>
      ret = HAL_ERROR;
 800ff48:	2001      	movs	r0, #1
 800ff4a:	e7bf      	b.n	800fecc <UART_SetConfig+0x3b0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff4c:	2502      	movs	r5, #2
 800ff4e:	e61d      	b.n	800fb8c <UART_SetConfig+0x70>
 800ff50:	2508      	movs	r5, #8
 800ff52:	e61b      	b.n	800fb8c <UART_SetConfig+0x70>
 800ff54:	2502      	movs	r5, #2
 800ff56:	e619      	b.n	800fb8c <UART_SetConfig+0x70>
 800ff58:	2502      	movs	r5, #2
 800ff5a:	e617      	b.n	800fb8c <UART_SetConfig+0x70>
 800ff5c:	2502      	movs	r5, #2
 800ff5e:	e615      	b.n	800fb8c <UART_SetConfig+0x70>
 800ff60:	2502      	movs	r5, #2
 800ff62:	e613      	b.n	800fb8c <UART_SetConfig+0x70>

0800ff64 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff66:	f013 0f01 	tst.w	r3, #1
 800ff6a:	d006      	beq.n	800ff7a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ff6c:	6802      	ldr	r2, [r0, #0]
 800ff6e:	6853      	ldr	r3, [r2, #4]
 800ff70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ff74:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ff76:	430b      	orrs	r3, r1
 800ff78:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff7c:	f013 0f02 	tst.w	r3, #2
 800ff80:	d006      	beq.n	800ff90 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff82:	6802      	ldr	r2, [r0, #0]
 800ff84:	6853      	ldr	r3, [r2, #4]
 800ff86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff8a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ff8c:	430b      	orrs	r3, r1
 800ff8e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ff92:	f013 0f04 	tst.w	r3, #4
 800ff96:	d006      	beq.n	800ffa6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff98:	6802      	ldr	r2, [r0, #0]
 800ff9a:	6853      	ldr	r3, [r2, #4]
 800ff9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ffa0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800ffa2:	430b      	orrs	r3, r1
 800ffa4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ffa6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ffa8:	f013 0f08 	tst.w	r3, #8
 800ffac:	d006      	beq.n	800ffbc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ffae:	6802      	ldr	r2, [r0, #0]
 800ffb0:	6853      	ldr	r3, [r2, #4]
 800ffb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ffb6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800ffb8:	430b      	orrs	r3, r1
 800ffba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ffbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ffbe:	f013 0f10 	tst.w	r3, #16
 800ffc2:	d006      	beq.n	800ffd2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ffc4:	6802      	ldr	r2, [r0, #0]
 800ffc6:	6893      	ldr	r3, [r2, #8]
 800ffc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffcc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ffce:	430b      	orrs	r3, r1
 800ffd0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ffd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ffd4:	f013 0f20 	tst.w	r3, #32
 800ffd8:	d006      	beq.n	800ffe8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ffda:	6802      	ldr	r2, [r0, #0]
 800ffdc:	6893      	ldr	r3, [r2, #8]
 800ffde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ffe2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800ffe4:	430b      	orrs	r3, r1
 800ffe6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ffe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ffea:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ffee:	d00a      	beq.n	8010006 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fff0:	6802      	ldr	r2, [r0, #0]
 800fff2:	6853      	ldr	r3, [r2, #4]
 800fff4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fff8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800fffa:	430b      	orrs	r3, r1
 800fffc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fffe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010004:	d00b      	beq.n	801001e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010006:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010008:	f013 0f80 	tst.w	r3, #128	; 0x80
 801000c:	d006      	beq.n	801001c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801000e:	6802      	ldr	r2, [r0, #0]
 8010010:	6853      	ldr	r3, [r2, #4]
 8010012:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8010016:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8010018:	430b      	orrs	r3, r1
 801001a:	6053      	str	r3, [r2, #4]
}
 801001c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801001e:	6802      	ldr	r2, [r0, #0]
 8010020:	6853      	ldr	r3, [r2, #4]
 8010022:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8010026:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8010028:	430b      	orrs	r3, r1
 801002a:	6053      	str	r3, [r2, #4]
 801002c:	e7eb      	b.n	8010006 <UART_AdvFeatureConfig+0xa2>

0801002e <UART_WaitOnFlagUntilTimeout>:
{
 801002e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010032:	4607      	mov	r7, r0
 8010034:	460e      	mov	r6, r1
 8010036:	4615      	mov	r5, r2
 8010038:	4698      	mov	r8, r3
 801003a:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801003c:	683a      	ldr	r2, [r7, #0]
 801003e:	69d3      	ldr	r3, [r2, #28]
 8010040:	ea36 0303 	bics.w	r3, r6, r3
 8010044:	bf0c      	ite	eq
 8010046:	2301      	moveq	r3, #1
 8010048:	2300      	movne	r3, #0
 801004a:	42ab      	cmp	r3, r5
 801004c:	d11c      	bne.n	8010088 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 801004e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8010052:	d0f4      	beq.n	801003e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010054:	f7f2 f820 	bl	8002098 <HAL_GetTick>
 8010058:	eba0 0008 	sub.w	r0, r0, r8
 801005c:	42a0      	cmp	r0, r4
 801005e:	d801      	bhi.n	8010064 <UART_WaitOnFlagUntilTimeout+0x36>
 8010060:	2c00      	cmp	r4, #0
 8010062:	d1eb      	bne.n	801003c <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010064:	683a      	ldr	r2, [r7, #0]
 8010066:	6813      	ldr	r3, [r2, #0]
 8010068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801006c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	6893      	ldr	r3, [r2, #8]
 8010072:	f023 0301 	bic.w	r3, r3, #1
 8010076:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8010078:	2320      	movs	r3, #32
 801007a:	677b      	str	r3, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 801007c:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 801007e:	2300      	movs	r3, #0
 8010080:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        return HAL_TIMEOUT;
 8010084:	2003      	movs	r0, #3
 8010086:	e000      	b.n	801008a <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 8010088:	2000      	movs	r0, #0
}
 801008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801008e <HAL_UART_Transmit>:
{
 801008e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8010096:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8010098:	2b20      	cmp	r3, #32
 801009a:	d15d      	bne.n	8010158 <HAL_UART_Transmit+0xca>
 801009c:	4604      	mov	r4, r0
 801009e:	460d      	mov	r5, r1
 80100a0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80100a2:	2900      	cmp	r1, #0
 80100a4:	d05d      	beq.n	8010162 <HAL_UART_Transmit+0xd4>
 80100a6:	2a00      	cmp	r2, #0
 80100a8:	d05d      	beq.n	8010166 <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 80100aa:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d05b      	beq.n	801016a <HAL_UART_Transmit+0xdc>
 80100b2:	2301      	movs	r3, #1
 80100b4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100b8:	2300      	movs	r3, #0
 80100ba:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80100bc:	2321      	movs	r3, #33	; 0x21
 80100be:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80100c0:	f7f1 ffea 	bl	8002098 <HAL_GetTick>
 80100c4:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80100c6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80100ca:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100ce:	68a3      	ldr	r3, [r4, #8]
 80100d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100d4:	d00a      	beq.n	80100ec <HAL_UART_Transmit+0x5e>
      pdata16bits = NULL;
 80100d6:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 80100da:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80100de:	b29b      	uxth	r3, r3
 80100e0:	b35b      	cbz	r3, 801013a <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80100e2:	f04f 0900 	mov.w	r9, #0
 80100e6:	f04f 0880 	mov.w	r8, #128	; 0x80
 80100ea:	e017      	b.n	801011c <HAL_UART_Transmit+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100ec:	6923      	ldr	r3, [r4, #16]
 80100ee:	b913      	cbnz	r3, 80100f6 <HAL_UART_Transmit+0x68>
      pdata16bits = (uint16_t *) pData;
 80100f0:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80100f2:	2500      	movs	r5, #0
 80100f4:	e7f1      	b.n	80100da <HAL_UART_Transmit+0x4c>
      pdata16bits = NULL;
 80100f6:	f04f 0a00 	mov.w	sl, #0
 80100fa:	e7ee      	b.n	80100da <HAL_UART_Transmit+0x4c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80100fc:	6822      	ldr	r2, [r4, #0]
 80100fe:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8010102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010106:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8010108:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801010c:	3b01      	subs	r3, #1
 801010e:	b29b      	uxth	r3, r3
 8010110:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8010114:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8010118:	b29b      	uxth	r3, r3
 801011a:	b173      	cbz	r3, 801013a <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801011c:	9600      	str	r6, [sp, #0]
 801011e:	463b      	mov	r3, r7
 8010120:	464a      	mov	r2, r9
 8010122:	4641      	mov	r1, r8
 8010124:	4620      	mov	r0, r4
 8010126:	f7ff ff82 	bl	801002e <UART_WaitOnFlagUntilTimeout>
 801012a:	bb00      	cbnz	r0, 801016e <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 801012c:	2d00      	cmp	r5, #0
 801012e:	d0e5      	beq.n	80100fc <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010130:	6823      	ldr	r3, [r4, #0]
 8010132:	f815 2b01 	ldrb.w	r2, [r5], #1
 8010136:	851a      	strh	r2, [r3, #40]	; 0x28
 8010138:	e7e6      	b.n	8010108 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801013a:	9600      	str	r6, [sp, #0]
 801013c:	463b      	mov	r3, r7
 801013e:	2200      	movs	r2, #0
 8010140:	2140      	movs	r1, #64	; 0x40
 8010142:	4620      	mov	r0, r4
 8010144:	f7ff ff73 	bl	801002e <UART_WaitOnFlagUntilTimeout>
 8010148:	4603      	mov	r3, r0
 801014a:	b990      	cbnz	r0, 8010172 <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 801014c:	2220      	movs	r2, #32
 801014e:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8010150:	2200      	movs	r2, #0
 8010152:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 8010156:	e000      	b.n	801015a <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 8010158:	2302      	movs	r3, #2
}
 801015a:	4618      	mov	r0, r3
 801015c:	b002      	add	sp, #8
 801015e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8010162:	2301      	movs	r3, #1
 8010164:	e7f9      	b.n	801015a <HAL_UART_Transmit+0xcc>
 8010166:	2301      	movs	r3, #1
 8010168:	e7f7      	b.n	801015a <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 801016a:	2302      	movs	r3, #2
 801016c:	e7f5      	b.n	801015a <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 801016e:	2303      	movs	r3, #3
 8010170:	e7f3      	b.n	801015a <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 8010172:	2303      	movs	r3, #3
 8010174:	e7f1      	b.n	801015a <HAL_UART_Transmit+0xcc>

08010176 <HAL_UART_Receive>:
{
 8010176:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017a:	b083      	sub	sp, #12
 801017c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 801017e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8010180:	2b20      	cmp	r3, #32
 8010182:	d178      	bne.n	8010276 <HAL_UART_Receive+0x100>
 8010184:	4604      	mov	r4, r0
 8010186:	460d      	mov	r5, r1
 8010188:	4617      	mov	r7, r2
    if ((pData == NULL) || (Size == 0U))
 801018a:	2900      	cmp	r1, #0
 801018c:	d077      	beq.n	801027e <HAL_UART_Receive+0x108>
 801018e:	2a00      	cmp	r2, #0
 8010190:	d077      	beq.n	8010282 <HAL_UART_Receive+0x10c>
    __HAL_LOCK(huart);
 8010192:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8010196:	2b01      	cmp	r3, #1
 8010198:	d075      	beq.n	8010286 <HAL_UART_Receive+0x110>
 801019a:	2301      	movs	r3, #1
 801019c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101a0:	2300      	movs	r3, #0
 80101a2:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80101a4:	2322      	movs	r3, #34	; 0x22
 80101a6:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80101a8:	f7f1 ff76 	bl	8002098 <HAL_GetTick>
 80101ac:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 80101ae:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 80101b2:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80101b6:	68a3      	ldr	r3, [r4, #8]
 80101b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101bc:	d006      	beq.n	80101cc <HAL_UART_Receive+0x56>
 80101be:	b9c3      	cbnz	r3, 80101f2 <HAL_UART_Receive+0x7c>
 80101c0:	6923      	ldr	r3, [r4, #16]
 80101c2:	b993      	cbnz	r3, 80101ea <HAL_UART_Receive+0x74>
 80101c4:	23ff      	movs	r3, #255	; 0xff
 80101c6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80101ca:	e018      	b.n	80101fe <HAL_UART_Receive+0x88>
 80101cc:	6923      	ldr	r3, [r4, #16]
 80101ce:	b933      	cbnz	r3, 80101de <HAL_UART_Receive+0x68>
 80101d0:	f240 17ff 	movw	r7, #511	; 0x1ff
 80101d4:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = (uint16_t *) pData;
 80101d8:	46ab      	mov	fp, r5
      pdata8bits  = NULL;
 80101da:	2500      	movs	r5, #0
 80101dc:	e013      	b.n	8010206 <HAL_UART_Receive+0x90>
    UART_MASK_COMPUTATION(huart);
 80101de:	27ff      	movs	r7, #255	; 0xff
 80101e0:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = NULL;
 80101e4:	f04f 0b00 	mov.w	fp, #0
 80101e8:	e00d      	b.n	8010206 <HAL_UART_Receive+0x90>
    UART_MASK_COMPUTATION(huart);
 80101ea:	237f      	movs	r3, #127	; 0x7f
 80101ec:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80101f0:	e005      	b.n	80101fe <HAL_UART_Receive+0x88>
 80101f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101f6:	d00f      	beq.n	8010218 <HAL_UART_Receive+0xa2>
 80101f8:	2300      	movs	r3, #0
 80101fa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80101fe:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = NULL;
 8010202:	f04f 0b00 	mov.w	fp, #0
    while (huart->RxXferCount > 0U)
 8010206:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801020a:	b29b      	uxth	r3, r3
 801020c:	b36b      	cbz	r3, 801026a <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801020e:	f04f 0a00 	mov.w	sl, #0
 8010212:	f04f 0920 	mov.w	r9, #32
 8010216:	e018      	b.n	801024a <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 8010218:	6923      	ldr	r3, [r4, #16]
 801021a:	b91b      	cbnz	r3, 8010224 <HAL_UART_Receive+0xae>
 801021c:	237f      	movs	r3, #127	; 0x7f
 801021e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8010222:	e7ec      	b.n	80101fe <HAL_UART_Receive+0x88>
 8010224:	233f      	movs	r3, #63	; 0x3f
 8010226:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801022a:	e7e8      	b.n	80101fe <HAL_UART_Receive+0x88>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801022c:	6823      	ldr	r3, [r4, #0]
 801022e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010230:	403b      	ands	r3, r7
 8010232:	f82b 3b02 	strh.w	r3, [fp], #2
      huart->RxXferCount--;
 8010236:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801023a:	3b01      	subs	r3, #1
 801023c:	b29b      	uxth	r3, r3
 801023e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8010242:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8010246:	b29b      	uxth	r3, r3
 8010248:	b17b      	cbz	r3, 801026a <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801024a:	9600      	str	r6, [sp, #0]
 801024c:	4643      	mov	r3, r8
 801024e:	4652      	mov	r2, sl
 8010250:	4649      	mov	r1, r9
 8010252:	4620      	mov	r0, r4
 8010254:	f7ff feeb 	bl	801002e <UART_WaitOnFlagUntilTimeout>
 8010258:	b9b8      	cbnz	r0, 801028a <HAL_UART_Receive+0x114>
      if (pdata8bits == NULL)
 801025a:	2d00      	cmp	r5, #0
 801025c:	d0e6      	beq.n	801022c <HAL_UART_Receive+0xb6>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801025e:	6823      	ldr	r3, [r4, #0]
 8010260:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010262:	403b      	ands	r3, r7
 8010264:	f805 3b01 	strb.w	r3, [r5], #1
 8010268:	e7e5      	b.n	8010236 <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 801026a:	2320      	movs	r3, #32
 801026c:	67a3      	str	r3, [r4, #120]	; 0x78
    __HAL_UNLOCK(huart);
 801026e:	2000      	movs	r0, #0
 8010270:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8010274:	e000      	b.n	8010278 <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8010276:	2002      	movs	r0, #2
}
 8010278:	b003      	add	sp, #12
 801027a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 801027e:	2001      	movs	r0, #1
 8010280:	e7fa      	b.n	8010278 <HAL_UART_Receive+0x102>
 8010282:	2001      	movs	r0, #1
 8010284:	e7f8      	b.n	8010278 <HAL_UART_Receive+0x102>
    __HAL_LOCK(huart);
 8010286:	2002      	movs	r0, #2
 8010288:	e7f6      	b.n	8010278 <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 801028a:	2003      	movs	r0, #3
 801028c:	e7f4      	b.n	8010278 <HAL_UART_Receive+0x102>

0801028e <UART_CheckIdleState>:
{
 801028e:	b530      	push	{r4, r5, lr}
 8010290:	b083      	sub	sp, #12
 8010292:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010294:	2300      	movs	r3, #0
 8010296:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8010298:	f7f1 fefe 	bl	8002098 <HAL_GetTick>
 801029c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801029e:	6823      	ldr	r3, [r4, #0]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f013 0f08 	tst.w	r3, #8
 80102a6:	d10c      	bne.n	80102c2 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80102a8:	6823      	ldr	r3, [r4, #0]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f013 0f04 	tst.w	r3, #4
 80102b0:	d115      	bne.n	80102de <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80102b2:	2320      	movs	r3, #32
 80102b4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80102b6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80102b8:	2000      	movs	r0, #0
 80102ba:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80102be:	b003      	add	sp, #12
 80102c0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	4603      	mov	r3, r0
 80102ca:	2200      	movs	r2, #0
 80102cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80102d0:	4620      	mov	r0, r4
 80102d2:	f7ff feac 	bl	801002e <UART_WaitOnFlagUntilTimeout>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d0e6      	beq.n	80102a8 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80102da:	2003      	movs	r0, #3
 80102dc:	e7ef      	b.n	80102be <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	462b      	mov	r3, r5
 80102e6:	2200      	movs	r2, #0
 80102e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80102ec:	4620      	mov	r0, r4
 80102ee:	f7ff fe9e 	bl	801002e <UART_WaitOnFlagUntilTimeout>
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d0dd      	beq.n	80102b2 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80102f6:	2003      	movs	r0, #3
 80102f8:	e7e1      	b.n	80102be <UART_CheckIdleState+0x30>

080102fa <HAL_UART_Init>:
  if (huart == NULL)
 80102fa:	b368      	cbz	r0, 8010358 <HAL_UART_Init+0x5e>
{
 80102fc:	b510      	push	{r4, lr}
 80102fe:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8010300:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8010302:	b303      	cbz	r3, 8010346 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8010304:	2324      	movs	r3, #36	; 0x24
 8010306:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8010308:	6822      	ldr	r2, [r4, #0]
 801030a:	6813      	ldr	r3, [r2, #0]
 801030c:	f023 0301 	bic.w	r3, r3, #1
 8010310:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010312:	4620      	mov	r0, r4
 8010314:	f7ff fc02 	bl	800fb1c <UART_SetConfig>
 8010318:	2801      	cmp	r0, #1
 801031a:	d013      	beq.n	8010344 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801031c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801031e:	b9bb      	cbnz	r3, 8010350 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010320:	6822      	ldr	r2, [r4, #0]
 8010322:	6853      	ldr	r3, [r2, #4]
 8010324:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8010328:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801032a:	6822      	ldr	r2, [r4, #0]
 801032c:	6893      	ldr	r3, [r2, #8]
 801032e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8010332:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8010334:	6822      	ldr	r2, [r4, #0]
 8010336:	6813      	ldr	r3, [r2, #0]
 8010338:	f043 0301 	orr.w	r3, r3, #1
 801033c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801033e:	4620      	mov	r0, r4
 8010340:	f7ff ffa5 	bl	801028e <UART_CheckIdleState>
}
 8010344:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8010346:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 801034a:	f7f1 fc6b 	bl	8001c24 <HAL_UART_MspInit>
 801034e:	e7d9      	b.n	8010304 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8010350:	4620      	mov	r0, r4
 8010352:	f7ff fe07 	bl	800ff64 <UART_AdvFeatureConfig>
 8010356:	e7e3      	b.n	8010320 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8010358:	2001      	movs	r0, #1
}
 801035a:	4770      	bx	lr

0801035c <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 801035c:	2800      	cmp	r0, #0
 801035e:	d032      	beq.n	80103c6 <HAL_HalfDuplex_Init+0x6a>
{
 8010360:	b510      	push	{r4, lr}
 8010362:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8010364:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8010366:	b32b      	cbz	r3, 80103b4 <HAL_HalfDuplex_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 8010368:	2324      	movs	r3, #36	; 0x24
 801036a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 801036c:	6822      	ldr	r2, [r4, #0]
 801036e:	6813      	ldr	r3, [r2, #0]
 8010370:	f023 0301 	bic.w	r3, r3, #1
 8010374:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010376:	4620      	mov	r0, r4
 8010378:	f7ff fbd0 	bl	800fb1c <UART_SetConfig>
 801037c:	2801      	cmp	r0, #1
 801037e:	d018      	beq.n	80103b2 <HAL_HalfDuplex_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010382:	b9e3      	cbnz	r3, 80103be <HAL_HalfDuplex_Init+0x62>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010384:	6822      	ldr	r2, [r4, #0]
 8010386:	6853      	ldr	r3, [r2, #4]
 8010388:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 801038c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 801038e:	6822      	ldr	r2, [r4, #0]
 8010390:	6893      	ldr	r3, [r2, #8]
 8010392:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010396:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8010398:	6822      	ldr	r2, [r4, #0]
 801039a:	6893      	ldr	r3, [r2, #8]
 801039c:	f043 0308 	orr.w	r3, r3, #8
 80103a0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80103a2:	6822      	ldr	r2, [r4, #0]
 80103a4:	6813      	ldr	r3, [r2, #0]
 80103a6:	f043 0301 	orr.w	r3, r3, #1
 80103aa:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80103ac:	4620      	mov	r0, r4
 80103ae:	f7ff ff6e 	bl	801028e <UART_CheckIdleState>
}
 80103b2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80103b4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80103b8:	f7f1 fc34 	bl	8001c24 <HAL_UART_MspInit>
 80103bc:	e7d4      	b.n	8010368 <HAL_HalfDuplex_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80103be:	4620      	mov	r0, r4
 80103c0:	f7ff fdd0 	bl	800ff64 <UART_AdvFeatureConfig>
 80103c4:	e7de      	b.n	8010384 <HAL_HalfDuplex_Init+0x28>
    return HAL_ERROR;
 80103c6:	2001      	movs	r0, #1
}
 80103c8:	4770      	bx	lr

080103ca <HAL_LIN_Init>:
  if (huart == NULL)
 80103ca:	2800      	cmp	r0, #0
 80103cc:	d040      	beq.n	8010450 <HAL_LIN_Init+0x86>
{
 80103ce:	b538      	push	{r3, r4, r5, lr}
 80103d0:	4604      	mov	r4, r0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80103d2:	69c3      	ldr	r3, [r0, #28]
 80103d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103d8:	d03c      	beq.n	8010454 <HAL_LIN_Init+0x8a>
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80103da:	6883      	ldr	r3, [r0, #8]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d13b      	bne.n	8010458 <HAL_LIN_Init+0x8e>
 80103e0:	460d      	mov	r5, r1
  if (huart->gState == HAL_UART_STATE_RESET)
 80103e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80103e4:	b35b      	cbz	r3, 801043e <HAL_LIN_Init+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 80103e6:	2324      	movs	r3, #36	; 0x24
 80103e8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80103ea:	6822      	ldr	r2, [r4, #0]
 80103ec:	6813      	ldr	r3, [r2, #0]
 80103ee:	f023 0301 	bic.w	r3, r3, #1
 80103f2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80103f4:	4620      	mov	r0, r4
 80103f6:	f7ff fb91 	bl	800fb1c <UART_SetConfig>
 80103fa:	2801      	cmp	r0, #1
 80103fc:	d02d      	beq.n	801045a <HAL_LIN_Init+0x90>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80103fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010400:	bb13      	cbnz	r3, 8010448 <HAL_LIN_Init+0x7e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8010402:	6822      	ldr	r2, [r4, #0]
 8010404:	6853      	ldr	r3, [r2, #4]
 8010406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801040a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 801040c:	6822      	ldr	r2, [r4, #0]
 801040e:	6893      	ldr	r3, [r2, #8]
 8010410:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8010414:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8010416:	6822      	ldr	r2, [r4, #0]
 8010418:	6853      	ldr	r3, [r2, #4]
 801041a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801041e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8010420:	6823      	ldr	r3, [r4, #0]
 8010422:	6859      	ldr	r1, [r3, #4]
 8010424:	f021 0120 	bic.w	r1, r1, #32
 8010428:	4329      	orrs	r1, r5
 801042a:	6059      	str	r1, [r3, #4]
  __HAL_UART_ENABLE(huart);
 801042c:	6822      	ldr	r2, [r4, #0]
 801042e:	6813      	ldr	r3, [r2, #0]
 8010430:	f043 0301 	orr.w	r3, r3, #1
 8010434:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8010436:	4620      	mov	r0, r4
 8010438:	f7ff ff29 	bl	801028e <UART_CheckIdleState>
 801043c:	e00d      	b.n	801045a <HAL_LIN_Init+0x90>
    huart->Lock = HAL_UNLOCKED;
 801043e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8010442:	f7f1 fbef 	bl	8001c24 <HAL_UART_MspInit>
 8010446:	e7ce      	b.n	80103e6 <HAL_LIN_Init+0x1c>
    UART_AdvFeatureConfig(huart);
 8010448:	4620      	mov	r0, r4
 801044a:	f7ff fd8b 	bl	800ff64 <UART_AdvFeatureConfig>
 801044e:	e7d8      	b.n	8010402 <HAL_LIN_Init+0x38>
    return HAL_ERROR;
 8010450:	2001      	movs	r0, #1
}
 8010452:	4770      	bx	lr
    return HAL_ERROR;
 8010454:	2001      	movs	r0, #1
 8010456:	e000      	b.n	801045a <HAL_LIN_Init+0x90>
    return HAL_ERROR;
 8010458:	2001      	movs	r0, #1
}
 801045a:	bd38      	pop	{r3, r4, r5, pc}

0801045c <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 801045c:	2800      	cmp	r0, #0
 801045e:	d040      	beq.n	80104e2 <HAL_MultiProcessor_Init+0x86>
{
 8010460:	b570      	push	{r4, r5, r6, lr}
 8010462:	4604      	mov	r4, r0
 8010464:	4615      	mov	r5, r2
 8010466:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_RESET)
 8010468:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801046a:	b34b      	cbz	r3, 80104c0 <HAL_MultiProcessor_Init+0x64>
  huart->gState = HAL_UART_STATE_BUSY;
 801046c:	2324      	movs	r3, #36	; 0x24
 801046e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8010470:	6822      	ldr	r2, [r4, #0]
 8010472:	6813      	ldr	r3, [r2, #0]
 8010474:	f023 0301 	bic.w	r3, r3, #1
 8010478:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801047a:	4620      	mov	r0, r4
 801047c:	f7ff fb4e 	bl	800fb1c <UART_SetConfig>
 8010480:	2801      	cmp	r0, #1
 8010482:	d01c      	beq.n	80104be <HAL_MultiProcessor_Init+0x62>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010486:	bb03      	cbnz	r3, 80104ca <HAL_MultiProcessor_Init+0x6e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010488:	6822      	ldr	r2, [r4, #0]
 801048a:	6853      	ldr	r3, [r2, #4]
 801048c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8010490:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010492:	6822      	ldr	r2, [r4, #0]
 8010494:	6893      	ldr	r3, [r2, #8]
 8010496:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 801049a:	6093      	str	r3, [r2, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 801049c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80104a0:	d017      	beq.n	80104d2 <HAL_MultiProcessor_Init+0x76>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80104a2:	6823      	ldr	r3, [r4, #0]
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80104aa:	4315      	orrs	r5, r2
 80104ac:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80104ae:	6822      	ldr	r2, [r4, #0]
 80104b0:	6813      	ldr	r3, [r2, #0]
 80104b2:	f043 0301 	orr.w	r3, r3, #1
 80104b6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80104b8:	4620      	mov	r0, r4
 80104ba:	f7ff fee8 	bl	801028e <UART_CheckIdleState>
}
 80104be:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80104c0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80104c4:	f7f1 fbae 	bl	8001c24 <HAL_UART_MspInit>
 80104c8:	e7d0      	b.n	801046c <HAL_MultiProcessor_Init+0x10>
    UART_AdvFeatureConfig(huart);
 80104ca:	4620      	mov	r0, r4
 80104cc:	f7ff fd4a 	bl	800ff64 <UART_AdvFeatureConfig>
 80104d0:	e7da      	b.n	8010488 <HAL_MultiProcessor_Init+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	6859      	ldr	r1, [r3, #4]
 80104d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80104da:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 80104de:	605e      	str	r6, [r3, #4]
 80104e0:	e7df      	b.n	80104a2 <HAL_MultiProcessor_Init+0x46>
    return HAL_ERROR;
 80104e2:	2001      	movs	r0, #1
}
 80104e4:	4770      	bx	lr

080104e6 <HAL_MultiProcessor_EnableMuteMode>:
{
 80104e6:	b508      	push	{r3, lr}
  __HAL_LOCK(huart);
 80104e8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d00e      	beq.n	801050e <HAL_MultiProcessor_EnableMuteMode+0x28>
 80104f0:	2301      	movs	r3, #1
 80104f2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 80104f6:	2324      	movs	r3, #36	; 0x24
 80104f8:	6743      	str	r3, [r0, #116]	; 0x74
  SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 80104fa:	6802      	ldr	r2, [r0, #0]
 80104fc:	6813      	ldr	r3, [r2, #0]
 80104fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010502:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8010504:	2320      	movs	r3, #32
 8010506:	6743      	str	r3, [r0, #116]	; 0x74
  return (UART_CheckIdleState(huart));
 8010508:	f7ff fec1 	bl	801028e <UART_CheckIdleState>
}
 801050c:	bd08      	pop	{r3, pc}
  __HAL_LOCK(huart);
 801050e:	2002      	movs	r0, #2
 8010510:	e7fc      	b.n	801050c <HAL_MultiProcessor_EnableMuteMode+0x26>

08010512 <HAL_MultiProcessor_DisableMuteMode>:
{
 8010512:	b508      	push	{r3, lr}
  __HAL_LOCK(huart);
 8010514:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8010518:	2b01      	cmp	r3, #1
 801051a:	d00e      	beq.n	801053a <HAL_MultiProcessor_DisableMuteMode+0x28>
 801051c:	2301      	movs	r3, #1
 801051e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 8010522:	2324      	movs	r3, #36	; 0x24
 8010524:	6743      	str	r3, [r0, #116]	; 0x74
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 8010526:	6802      	ldr	r2, [r0, #0]
 8010528:	6813      	ldr	r3, [r2, #0]
 801052a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801052e:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8010530:	2320      	movs	r3, #32
 8010532:	6743      	str	r3, [r0, #116]	; 0x74
  return (UART_CheckIdleState(huart));
 8010534:	f7ff feab 	bl	801028e <UART_CheckIdleState>
}
 8010538:	bd08      	pop	{r3, pc}
  __HAL_LOCK(huart);
 801053a:	2002      	movs	r0, #2
 801053c:	e7fc      	b.n	8010538 <HAL_MultiProcessor_DisableMuteMode+0x26>

0801053e <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 801053e:	2800      	cmp	r0, #0
 8010540:	d03c      	beq.n	80105bc <HAL_RS485Ex_Init+0x7e>
{
 8010542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010544:	4604      	mov	r4, r0
 8010546:	461d      	mov	r5, r3
 8010548:	4616      	mov	r6, r2
 801054a:	460f      	mov	r7, r1
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 801054c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801054e:	b363      	cbz	r3, 80105aa <HAL_RS485Ex_Init+0x6c>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010550:	2324      	movs	r3, #36	; 0x24
 8010552:	6763      	str	r3, [r4, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010554:	6822      	ldr	r2, [r4, #0]
 8010556:	6813      	ldr	r3, [r2, #0]
 8010558:	f023 0301 	bic.w	r3, r3, #1
 801055c:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801055e:	4620      	mov	r0, r4
 8010560:	f7ff fadc 	bl	800fb1c <UART_SetConfig>
 8010564:	2801      	cmp	r0, #1
 8010566:	d01f      	beq.n	80105a8 <HAL_RS485Ex_Init+0x6a>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801056a:	bb1b      	cbnz	r3, 80105b4 <HAL_RS485Ex_Init+0x76>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801056c:	6822      	ldr	r2, [r4, #0]
 801056e:	6893      	ldr	r3, [r2, #8]
 8010570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010574:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8010576:	6822      	ldr	r2, [r4, #0]
 8010578:	6893      	ldr	r3, [r2, #8]
 801057a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801057e:	433b      	orrs	r3, r7
 8010580:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8010582:	6821      	ldr	r1, [r4, #0]
 8010584:	680b      	ldr	r3, [r1, #0]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8010586:	042d      	lsls	r5, r5, #16
 8010588:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801058c:	f023 757f 	bic.w	r5, r3, #66846720	; 0x3fc0000
 8010590:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
 8010594:	4315      	orrs	r5, r2
 8010596:	600d      	str	r5, [r1, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8010598:	6822      	ldr	r2, [r4, #0]
 801059a:	6813      	ldr	r3, [r2, #0]
 801059c:	f043 0301 	orr.w	r3, r3, #1
 80105a0:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80105a2:	4620      	mov	r0, r4
 80105a4:	f7ff fe73 	bl	801028e <UART_CheckIdleState>
}
 80105a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80105aa:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80105ae:	f7f1 fb39 	bl	8001c24 <HAL_UART_MspInit>
 80105b2:	e7cd      	b.n	8010550 <HAL_RS485Ex_Init+0x12>
    UART_AdvFeatureConfig(huart);
 80105b4:	4620      	mov	r0, r4
 80105b6:	f7ff fcd5 	bl	800ff64 <UART_AdvFeatureConfig>
 80105ba:	e7d7      	b.n	801056c <HAL_RS485Ex_Init+0x2e>
    return HAL_ERROR;
 80105bc:	2001      	movs	r0, #1
}
 80105be:	4770      	bx	lr

080105c0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80105c0:	4770      	bx	lr

080105c2 <HAL_UARTEx_EnableClockStopMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)
{
  /* Process Locked */
  __HAL_LOCK(huart);
 80105c2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d00c      	beq.n	80105e4 <HAL_UARTEx_EnableClockStopMode+0x22>
 80105ca:	2301      	movs	r3, #1
 80105cc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  /* Set UCESM bit */
  SET_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 80105d0:	6802      	ldr	r2, [r0, #0]
 80105d2:	6893      	ldr	r3, [r2, #8]
 80105d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80105d8:	6093      	str	r3, [r2, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105da:	2300      	movs	r3, #0
 80105dc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  return HAL_OK;
 80105e0:	4618      	mov	r0, r3
 80105e2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80105e4:	2002      	movs	r0, #2
}
 80105e6:	4770      	bx	lr

080105e8 <HAL_UARTEx_DisableClockStopMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)
{
  /* Process Locked */
  __HAL_LOCK(huart);
 80105e8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d00c      	beq.n	801060a <HAL_UARTEx_DisableClockStopMode+0x22>
 80105f0:	2301      	movs	r3, #1
 80105f2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  /* Clear UCESM bit */
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 80105f6:	6802      	ldr	r2, [r0, #0]
 80105f8:	6893      	ldr	r3, [r2, #8]
 80105fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80105fe:	6093      	str	r3, [r2, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010600:	2300      	movs	r3, #0
 8010602:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  return HAL_OK;
 8010606:	4618      	mov	r0, r3
 8010608:	4770      	bx	lr
  __HAL_LOCK(huart);
 801060a:	2002      	movs	r0, #2
}
 801060c:	4770      	bx	lr

0801060e <HAL_MultiProcessorEx_AddressLength_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 801060e:	b1a8      	cbz	r0, 801063c <HAL_MultiProcessorEx_AddressLength_Set+0x2e>
{
 8010610:	b508      	push	{r3, lr}
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 8010612:	2324      	movs	r3, #36	; 0x24
 8010614:	6743      	str	r3, [r0, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010616:	6802      	ldr	r2, [r0, #0]
 8010618:	6813      	ldr	r3, [r2, #0]
 801061a:	f023 0301 	bic.w	r3, r3, #1
 801061e:	6013      	str	r3, [r2, #0]

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 8010620:	6802      	ldr	r2, [r0, #0]
 8010622:	6853      	ldr	r3, [r2, #4]
 8010624:	f023 0310 	bic.w	r3, r3, #16
 8010628:	4319      	orrs	r1, r3
 801062a:	6051      	str	r1, [r2, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 801062c:	6802      	ldr	r2, [r0, #0]
 801062e:	6813      	ldr	r3, [r2, #0]
 8010630:	f043 0301 	orr.w	r3, r3, #1
 8010634:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 8010636:	f7ff fe2a 	bl	801028e <UART_CheckIdleState>
}
 801063a:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 801063c:	2001      	movs	r0, #1
}
 801063e:	4770      	bx	lr

08010640 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8010640:	b510      	push	{r4, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	ab04      	add	r3, sp, #16
 8010646:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 801064a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 801064e:	2b01      	cmp	r3, #1
 8010650:	d041      	beq.n	80106d6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x96>
 8010652:	9a02      	ldr	r2, [sp, #8]
 8010654:	2301      	movs	r3, #1
 8010656:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 801065a:	2324      	movs	r3, #36	; 0x24
 801065c:	6743      	str	r3, [r0, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801065e:	6801      	ldr	r1, [r0, #0]
 8010660:	680b      	ldr	r3, [r1, #0]
 8010662:	f023 0301 	bic.w	r3, r3, #1
 8010666:	600b      	str	r3, [r1, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8010668:	6801      	ldr	r1, [r0, #0]
 801066a:	688b      	ldr	r3, [r1, #8]
 801066c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8010670:	4313      	orrs	r3, r2
 8010672:	608b      	str	r3, [r1, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8010674:	b1b2      	cbz	r2, 80106a4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x64>
 8010676:	4604      	mov	r4, r0
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8010678:	6802      	ldr	r2, [r0, #0]
 801067a:	6813      	ldr	r3, [r2, #0]
 801067c:	f043 0301 	orr.w	r3, r3, #1
 8010680:	6013      	str	r3, [r2, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010682:	f7f1 fd09 	bl	8002098 <HAL_GetTick>

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010686:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	4603      	mov	r3, r0
 801068e:	2200      	movs	r2, #0
 8010690:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010694:	4620      	mov	r0, r4
 8010696:	f7ff fcca 	bl	801002e <UART_WaitOnFlagUntilTimeout>
 801069a:	4603      	mov	r3, r0
 801069c:	b9a0      	cbnz	r0, 80106c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>
    status = HAL_TIMEOUT;
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 801069e:	2220      	movs	r2, #32
 80106a0:	6762      	str	r2, [r4, #116]	; 0x74
 80106a2:	e012      	b.n	80106ca <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8a>
 80106a4:	f89d 400e 	ldrb.w	r4, [sp, #14]
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80106a8:	6801      	ldr	r1, [r0, #0]
 80106aa:	684a      	ldr	r2, [r1, #4]
 80106ac:	f022 0210 	bic.w	r2, r2, #16
 80106b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80106b4:	431a      	orrs	r2, r3
 80106b6:	604a      	str	r2, [r1, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80106b8:	6802      	ldr	r2, [r0, #0]
 80106ba:	6853      	ldr	r3, [r2, #4]
 80106bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80106c0:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80106c4:	6053      	str	r3, [r2, #4]
 80106c6:	e7d6      	b.n	8010676 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x36>
    status = HAL_TIMEOUT;
 80106c8:	2303      	movs	r3, #3
  __HAL_UNLOCK(huart);
 80106ca:	2200      	movs	r2, #0
 80106cc:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	b004      	add	sp, #16
 80106d4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80106d6:	2302      	movs	r3, #2
 80106d8:	e7fa      	b.n	80106d0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x90>

080106da <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80106da:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d00c      	beq.n	80106fc <HAL_UARTEx_EnableStopMode+0x22>
 80106e2:	2301      	movs	r3, #1
 80106e4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80106e8:	6802      	ldr	r2, [r0, #0]
 80106ea:	6813      	ldr	r3, [r2, #0]
 80106ec:	f043 0302 	orr.w	r3, r3, #2
 80106f0:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80106f2:	2300      	movs	r3, #0
 80106f4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 80106f8:	4618      	mov	r0, r3
 80106fa:	4770      	bx	lr
  __HAL_LOCK(huart);
 80106fc:	2002      	movs	r0, #2
}
 80106fe:	4770      	bx	lr

08010700 <HAL_UARTEx_DisableStopMode>:
  __HAL_LOCK(huart);
 8010700:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8010704:	2b01      	cmp	r3, #1
 8010706:	d00c      	beq.n	8010722 <HAL_UARTEx_DisableStopMode+0x22>
 8010708:	2301      	movs	r3, #1
 801070a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801070e:	6802      	ldr	r2, [r0, #0]
 8010710:	6813      	ldr	r3, [r2, #0]
 8010712:	f023 0302 	bic.w	r3, r3, #2
 8010716:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8010718:	2300      	movs	r3, #0
 801071a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 801071e:	4618      	mov	r0, r3
 8010720:	4770      	bx	lr
  __HAL_LOCK(huart);
 8010722:	2002      	movs	r0, #2
}
 8010724:	4770      	bx	lr
	...

08010728 <mavlink_sha256_update>:
{
 8010728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801072c:	b0df      	sub	sp, #380	; 0x17c
 801072e:	9004      	str	r0, [sp, #16]
 8010730:	9103      	str	r1, [sp, #12]
 8010732:	9202      	str	r2, [sp, #8]
    uint32_t old_sz = m->sz[0];
 8010734:	6806      	ldr	r6, [r0, #0]
    m->sz[0] += len * 8;
 8010736:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 801073a:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
 801073c:	42b3      	cmp	r3, r6
 801073e:	d202      	bcs.n	8010746 <mavlink_sha256_update+0x1e>
	++m->sz[1];
 8010740:	6843      	ldr	r3, [r0, #4]
 8010742:	3301      	adds	r3, #1
 8010744:	6043      	str	r3, [r0, #4]
    offset = (old_sz / 8) % 64;
 8010746:	f3c6 06c5 	ubfx	r6, r6, #3, #6
    while(len > 0){
 801074a:	9b02      	ldr	r3, [sp, #8]
 801074c:	2b00      	cmp	r3, #0
 801074e:	f000 80c3 	beq.w	80108d8 <mavlink_sha256_update+0x1b0>
 8010752:	ab1d      	add	r3, sp, #116	; 0x74
 8010754:	930d      	str	r3, [sp, #52]	; 0x34
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8010756:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80108e0 <mavlink_sha256_update+0x1b8>
 801075a:	e053      	b.n	8010804 <mavlink_sha256_update+0xdc>
    for (i = 0; i < 64; i++) {
 801075c:	4635      	mov	r5, r6
 801075e:	4606      	mov	r6, r0
	AA = T1 + T2;
 8010760:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 8010762:	4667      	mov	r7, ip
 8010764:	468c      	mov	ip, r1
	EE = DD + T1;
 8010766:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8010768:	ea4f 23f1 	mov.w	r3, r1, ror #11
 801076c:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8010770:	ea83 6a71 	eor.w	sl, r3, r1, ror #25
 8010774:	ea27 0301 	bic.w	r3, r7, r1
 8010778:	ea01 0b0c 	and.w	fp, r1, ip
 801077c:	ea83 030b 	eor.w	r3, r3, fp
 8010780:	4453      	add	r3, sl
 8010782:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8010786:	4413      	add	r3, r2
 8010788:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 801078c:	4413      	add	r3, r2
 801078e:	9a01      	ldr	r2, [sp, #4]
 8010790:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8010792:	ea4f 3270 	mov.w	r2, r0, ror #13
 8010796:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 801079a:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 801079e:	ea86 0a05 	eor.w	sl, r6, r5
 80107a2:	ea0a 0a00 	and.w	sl, sl, r0
 80107a6:	ea06 0b05 	and.w	fp, r6, r5
 80107aa:	ea8a 0a0b 	eor.w	sl, sl, fp
 80107ae:	4452      	add	r2, sl
	EE = DD + T1;
 80107b0:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 80107b4:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 80107b6:	3401      	adds	r4, #1
 80107b8:	9701      	str	r7, [sp, #4]
 80107ba:	46ae      	mov	lr, r5
 80107bc:	2c40      	cmp	r4, #64	; 0x40
 80107be:	d1cd      	bne.n	801075c <mavlink_sha256_update+0x34>
    A += AA;
 80107c0:	9a05      	ldr	r2, [sp, #20]
 80107c2:	441a      	add	r2, r3
 80107c4:	4613      	mov	r3, r2
 80107c6:	9a04      	ldr	r2, [sp, #16]
 80107c8:	6093      	str	r3, [r2, #8]
    B += BB;
 80107ca:	9b06      	ldr	r3, [sp, #24]
 80107cc:	4403      	add	r3, r0
 80107ce:	4618      	mov	r0, r3
 80107d0:	60d0      	str	r0, [r2, #12]
    C += CC;
 80107d2:	9b07      	ldr	r3, [sp, #28]
 80107d4:	4433      	add	r3, r6
 80107d6:	461e      	mov	r6, r3
 80107d8:	6116      	str	r6, [r2, #16]
    D += DD;
 80107da:	9b08      	ldr	r3, [sp, #32]
 80107dc:	442b      	add	r3, r5
 80107de:	461d      	mov	r5, r3
 80107e0:	6155      	str	r5, [r2, #20]
    E += EE;
 80107e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107e4:	445b      	add	r3, fp
 80107e6:	6193      	str	r3, [r2, #24]
    F += FF;
 80107e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ea:	440b      	add	r3, r1
 80107ec:	4619      	mov	r1, r3
 80107ee:	61d1      	str	r1, [r2, #28]
    G += GG;
 80107f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107f2:	4463      	add	r3, ip
 80107f4:	6213      	str	r3, [r2, #32]
    H += HH;
 80107f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80107f8:	443b      	add	r3, r7
 80107fa:	6253      	str	r3, [r2, #36]	; 0x24
	    offset = 0;
 80107fc:	2600      	movs	r6, #0
    while(len > 0){
 80107fe:	9b02      	ldr	r3, [sp, #8]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d069      	beq.n	80108d8 <mavlink_sha256_update+0x1b0>
	uint32_t l = 64 - offset;
 8010804:	f1c6 0540 	rsb	r5, r6, #64	; 0x40
 8010808:	9f02      	ldr	r7, [sp, #8]
 801080a:	42bd      	cmp	r5, r7
 801080c:	bf28      	it	cs
 801080e:	463d      	movcs	r5, r7
	memcpy(m->u.save_bytes + offset, p, l);
 8010810:	9b04      	ldr	r3, [sp, #16]
 8010812:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8010816:	462a      	mov	r2, r5
 8010818:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801081c:	4649      	mov	r1, r9
 801081e:	19a0      	adds	r0, r4, r6
 8010820:	f7ef fd16 	bl	8000250 <memcpy>
	offset += l;
 8010824:	442e      	add	r6, r5
	p += l;
 8010826:	464b      	mov	r3, r9
 8010828:	442b      	add	r3, r5
 801082a:	9303      	str	r3, [sp, #12]
	len -= l;
 801082c:	1b7b      	subs	r3, r7, r5
 801082e:	9302      	str	r3, [sp, #8]
	if(offset == 64){
 8010830:	2e40      	cmp	r6, #64	; 0x40
 8010832:	d1e4      	bne.n	80107fe <mavlink_sha256_update+0xd6>
 8010834:	4622      	mov	r2, r4
 8010836:	a81e      	add	r0, sp, #120	; 0x78
 8010838:	ab0e      	add	r3, sp, #56	; 0x38
                p2[0] = p1[3];
 801083a:	78d1      	ldrb	r1, [r2, #3]
 801083c:	7019      	strb	r1, [r3, #0]
                p2[1] = p1[2];
 801083e:	7891      	ldrb	r1, [r2, #2]
 8010840:	7059      	strb	r1, [r3, #1]
                p2[2] = p1[1];
 8010842:	7851      	ldrb	r1, [r2, #1]
 8010844:	7099      	strb	r1, [r3, #2]
                p2[3] = p1[0];
 8010846:	f812 1b04 	ldrb.w	r1, [r2], #4
 801084a:	70d9      	strb	r1, [r3, #3]
 801084c:	3304      	adds	r3, #4
	    for (i = 0; i < 16; i++){
 801084e:	4283      	cmp	r3, r0
 8010850:	d1f3      	bne.n	801083a <mavlink_sha256_update+0x112>
    AA = A;
 8010852:	9b04      	ldr	r3, [sp, #16]
 8010854:	689a      	ldr	r2, [r3, #8]
 8010856:	9205      	str	r2, [sp, #20]
    BB = B;
 8010858:	68da      	ldr	r2, [r3, #12]
 801085a:	9206      	str	r2, [sp, #24]
    CC = C;
 801085c:	691a      	ldr	r2, [r3, #16]
 801085e:	9207      	str	r2, [sp, #28]
    DD = D;
 8010860:	695a      	ldr	r2, [r3, #20]
 8010862:	9208      	str	r2, [sp, #32]
    EE = E;
 8010864:	699a      	ldr	r2, [r3, #24]
 8010866:	9209      	str	r2, [sp, #36]	; 0x24
    FF = F;
 8010868:	69da      	ldr	r2, [r3, #28]
 801086a:	920a      	str	r2, [sp, #40]	; 0x28
    GG = G;
 801086c:	6a1a      	ldr	r2, [r3, #32]
 801086e:	920b      	str	r2, [sp, #44]	; 0x2c
    HH = H;
 8010870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010872:	930c      	str	r3, [sp, #48]	; 0x30
 8010874:	ab0d      	add	r3, sp, #52	; 0x34
 8010876:	aa1d      	add	r2, sp, #116	; 0x74
 8010878:	980d      	ldr	r0, [sp, #52]	; 0x34
	data[i] = in[i];
 801087a:	f853 1f04 	ldr.w	r1, [r3, #4]!
 801087e:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 8010882:	4298      	cmp	r0, r3
 8010884:	d1f9      	bne.n	801087a <mavlink_sha256_update+0x152>
 8010886:	ac1e      	add	r4, sp, #120	; 0x78
 8010888:	ad4e      	add	r5, sp, #312	; 0x138
 801088a:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 801088c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 801088e:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8010892:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8010896:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 801089a:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 801089e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80108a0:	6800      	ldr	r0, [r0, #0]
 80108a2:	4402      	add	r2, r0
 80108a4:	4413      	add	r3, r2
 80108a6:	ea4f 42b1 	mov.w	r2, r1, ror #18
 80108aa:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 80108ae:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80108b2:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80108b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 80108b6:	42a5      	cmp	r5, r4
 80108b8:	d1e7      	bne.n	801088a <mavlink_sha256_update+0x162>
    DD = D;
 80108ba:	f8dd e020 	ldr.w	lr, [sp, #32]
    CC = C;
 80108be:	9d07      	ldr	r5, [sp, #28]
    BB = B;
 80108c0:	9e06      	ldr	r6, [sp, #24]
    AA = A;
 80108c2:	9805      	ldr	r0, [sp, #20]
    GG = G;
 80108c4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    FF = F;
 80108c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    HH = H;
 80108ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    EE = E;
 80108cc:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (i = 0; i < 64; i++) {
 80108ce:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80108d0:	f10d 0978 	add.w	r9, sp, #120	; 0x78
 80108d4:	9201      	str	r2, [sp, #4]
 80108d6:	e747      	b.n	8010768 <mavlink_sha256_update+0x40>
}
 80108d8:	b05f      	add	sp, #380	; 0x17c
 80108da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108de:	bf00      	nop
 80108e0:	08013bfc 	.word	0x08013bfc

080108e4 <mouseDriver_initSetpoint>:
*/
void mouseDriver_setMode(uint8_t mode);


void mouseDriver_initSetpoint(void){
	actual_speed_setpoint.setpoint_x = 0;
 80108e4:	4b02      	ldr	r3, [pc, #8]	; (80108f0 <mouseDriver_initSetpoint+0xc>)
 80108e6:	2200      	movs	r2, #0
 80108e8:	601a      	str	r2, [r3, #0]
	actual_speed_setpoint.setpoint_y = 0;
 80108ea:	605a      	str	r2, [r3, #4]
}
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop
 80108f0:	200009cc 	.word	0x200009cc

080108f4 <mouseDriver_initMode>:
void mouseDriver_initMode(void){
	actual_mode = MOUSE_MODE_STOP;
 80108f4:	4b01      	ldr	r3, [pc, #4]	; (80108fc <mouseDriver_initMode+0x8>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	701a      	strb	r2, [r3, #0]
}
 80108fa:	4770      	bx	lr
 80108fc:	20000985 	.word	0x20000985

08010900 <mouseDriver_initPoints>:
void mouseDriver_initPoints(void){
 8010900:	b470      	push	{r4, r5, r6}
 8010902:	480d      	ldr	r0, [pc, #52]	; (8010938 <mouseDriver_initPoints+0x38>)
	for(int i=0; i<MAX_POINTS; i++){
 8010904:	2300      	movs	r3, #0
		points[i].duration = 0;
 8010906:	4606      	mov	r6, r0
 8010908:	4619      	mov	r1, r3
		points[i].setpoint_x = 0;
 801090a:	2500      	movs	r5, #0
		points[i].duration = 0;
 801090c:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 8010910:	eb06 0244 	add.w	r2, r6, r4, lsl #1
 8010914:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
 8010918:	8051      	strh	r1, [r2, #2]
		points[i].setpoint_x = 0;
 801091a:	6055      	str	r5, [r2, #4]
		points[i].setpoint_y = 0;
 801091c:	6095      	str	r5, [r2, #8]
		points[i].point_id = 0;
 801091e:	8181      	strh	r1, [r0, #12]
	for(int i=0; i<MAX_POINTS; i++){
 8010920:	3301      	adds	r3, #1
 8010922:	300e      	adds	r0, #14
 8010924:	2bff      	cmp	r3, #255	; 0xff
 8010926:	d1f1      	bne.n	801090c <mouseDriver_initPoints+0xc>
	}
	actual_point = 0;
 8010928:	2300      	movs	r3, #0
 801092a:	4a04      	ldr	r2, [pc, #16]	; (801093c <mouseDriver_initPoints+0x3c>)
 801092c:	7013      	strb	r3, [r2, #0]
	actual_point_start_time = 0;
 801092e:	4a04      	ldr	r2, [pc, #16]	; (8010940 <mouseDriver_initPoints+0x40>)
 8010930:	6013      	str	r3, [r2, #0]
}
 8010932:	bc70      	pop	{r4, r5, r6}
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	20000c2c 	.word	0x20000c2c
 801093c:	20000994 	.word	0x20000994
 8010940:	20000998 	.word	0x20000998

08010944 <mouseDriver_initMotorSignal>:
void mouseDriver_initMotorSignal(void){
    actual_motor_signal.motor_x = 0;
 8010944:	4b02      	ldr	r3, [pc, #8]	; (8010950 <mouseDriver_initMotorSignal+0xc>)
 8010946:	2200      	movs	r2, #0
 8010948:	605a      	str	r2, [r3, #4]
    actual_motor_signal.motor_y = 0;
 801094a:	609a      	str	r2, [r3, #8]
}
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	20000988 	.word	0x20000988

08010954 <mouseDriver_init>:
void mouseDriver_init(void){
 8010954:	b508      	push	{r3, lr}
	actual_mode = MOUSE_MODE_STOP;
 8010956:	4b07      	ldr	r3, [pc, #28]	; (8010974 <mouseDriver_init+0x20>)
 8010958:	2200      	movs	r2, #0
 801095a:	701a      	strb	r2, [r3, #0]
	mouseDriver_initMode();
	mouseDriver_initSetpoint();
 801095c:	f7ff ffc2 	bl	80108e4 <mouseDriver_initSetpoint>
	mouseDriver_initPoints();
 8010960:	f7ff ffce 	bl	8010900 <mouseDriver_initPoints>
	mouseDriver_initMotorSignal();
 8010964:	f7ff ffee 	bl	8010944 <mouseDriver_initMotorSignal>

	/* Init sensor as well */
	sensorDriver_init();
 8010968:	f002 fd80 	bl	801346c <sensorDriver_init>
	main_stop_motors();
 801096c:	f7ef fec2 	bl	80006f4 <main_stop_motors>
}
 8010970:	bd08      	pop	{r3, pc}
 8010972:	bf00      	nop
 8010974:	20000985 	.word	0x20000985

08010978 <mouseDriver_getTime>:
uint32_t mouseDriver_getTime (void){
 8010978:	b508      	push	{r3, lr}
	return (HAL_GetTick());
 801097a:	f7f1 fb8d 	bl	8002098 <HAL_GetTick>
}
 801097e:	bd08      	pop	{r3, pc}

08010980 <mouseDriver_send_status_msg>:
void mouseDriver_send_status_msg(void){
	send_msg = 1;
 8010980:	4b01      	ldr	r3, [pc, #4]	; (8010988 <mouseDriver_send_status_msg+0x8>)
 8010982:	2201      	movs	r2, #1
 8010984:	601a      	str	r2, [r3, #0]
}
 8010986:	4770      	bx	lr
 8010988:	20000034 	.word	0x20000034

0801098c <mouseDriver_sendMsg>:
    }

    if (actual_mode != MOUSE_MODE_AUTO_RUN)
        actual_mode = mode;
}
void mouseDriver_sendMsg(uint32_t msgid){
 801098c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010990:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8010994:	4605      	mov	r5, r0
    static uint8_t outBuffer[MAX_BYTE_BUFFER_SIZE];
    static uint16_t msg_size = 0;

    while (main_get_huart_tx_state() == HAL_BUSY){
        /*Wait for other messages to be sent*/
        HAL_Delay(1);
 8010996:	2401      	movs	r4, #1
    while (main_get_huart_tx_state() == HAL_BUSY){
 8010998:	e002      	b.n	80109a0 <mouseDriver_sendMsg+0x14>
        HAL_Delay(1);
 801099a:	4620      	mov	r0, r4
 801099c:	f7f1 fba6 	bl	80020ec <HAL_Delay>
    while (main_get_huart_tx_state() == HAL_BUSY){
 80109a0:	f7ef fe96 	bl	80006d0 <main_get_huart_tx_state>
 80109a4:	2802      	cmp	r0, #2
 80109a6:	d0f8      	beq.n	801099a <mouseDriver_sendMsg+0xe>
    }

    switch(msgid){
 80109a8:	2d08      	cmp	r5, #8
 80109aa:	f200 811b 	bhi.w	8010be4 <mouseDriver_sendMsg+0x258>
 80109ae:	e8df f015 	tbh	[pc, r5, lsl #1]
 80109b2:	0009      	.short	0x0009
 80109b4:	01f705c8 	.word	0x01f705c8
 80109b8:	03ef0119 	.word	0x03ef0119
 80109bc:	0b9509ad 	.word	0x0b9509ad
 80109c0:	0d7c07c9 	.word	0x0d7c07c9
        case MAVLINK_MSG_ID_HEARTBEAT:
            mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &msg, actual_mode, mouseDriver_getTime());
 80109c4:	4b98      	ldr	r3, [pc, #608]	; (8010c28 <mouseDriver_sendMsg+0x29c>)
 80109c6:	781c      	ldrb	r4, [r3, #0]
	return (HAL_GetTick());
 80109c8:	f7f1 fb66 	bl	8002098 <HAL_GetTick>
 80109cc:	4602      	mov	r2, r0
    _mav_put_uint8_t(buf, 4, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.time = time;
 80109ce:	466b      	mov	r3, sp
 80109d0:	6018      	str	r0, [r3, #0]
    packet.mode = mode;
 80109d2:	711c      	strb	r4, [r3, #4]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80109d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109d8:	923a      	str	r2, [sp, #232]	; 0xe8
 80109da:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80109de:	2300      	movs	r3, #0
 80109e0:	f88d 30e5 	strb.w	r3, [sp, #229]	; 0xe5
 80109e4:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 80109e8:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80109ec:	4b8f      	ldr	r3, [pc, #572]	; (8010c2c <mouseDriver_sendMsg+0x2a0>)
 80109ee:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80109f0:	f013 0602 	ands.w	r6, r3, #2
 80109f4:	d12e      	bne.n	8010a54 <mouseDriver_sendMsg+0xc8>
 80109f6:	4b8d      	ldr	r3, [pc, #564]	; (8010c2c <mouseDriver_sendMsg+0x2a0>)
 80109f8:	691b      	ldr	r3, [r3, #16]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f000 80f6 	beq.w	8010bec <mouseDriver_sendMsg+0x260>
 8010a00:	7818      	ldrb	r0, [r3, #0]
 8010a02:	f000 0001 	and.w	r0, r0, #1
		msg->magic = MAVLINK_STX;
 8010a06:	23fd      	movs	r3, #253	; 0xfd
 8010a08:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8010a0c:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	f040 80ed 	bne.w	8010bf0 <mouseDriver_sendMsg+0x264>
 8010a16:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f040 80ea 	bne.w	8010bf4 <mouseDriver_sendMsg+0x268>
 8010a20:	f89d 30ea 	ldrb.w	r3, [sp, #234]	; 0xea
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f040 80e7 	bne.w	8010bf8 <mouseDriver_sendMsg+0x26c>
 8010a2a:	f89d 30e9 	ldrb.w	r3, [sp, #233]	; 0xe9
		length--;
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	bf0c      	ite	eq
 8010a32:	2301      	moveq	r3, #1
 8010a34:	2302      	movne	r3, #2
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8010a36:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8010a40:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 8010a44:	2800      	cmp	r0, #0
 8010a46:	f000 80d9 	beq.w	8010bfc <mouseDriver_sendMsg+0x270>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 8010a50:	240a      	movs	r4, #10
 8010a52:	e00e      	b.n	8010a72 <mouseDriver_sendMsg+0xe6>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8010a54:	23fe      	movs	r3, #254	; 0xfe
 8010a56:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8010a5a:	2305      	movs	r3, #5
 8010a5c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8010a60:	2000      	movs	r0, #0
 8010a62:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8010a66:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8010a6a:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8010a72:	2200      	movs	r2, #0
 8010a74:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8010a78:	496c      	ldr	r1, [pc, #432]	; (8010c2c <mouseDriver_sendMsg+0x2a0>)
 8010a7a:	798a      	ldrb	r2, [r1, #6]
 8010a7c:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 8010a80:	1c55      	adds	r5, r2, #1
 8010a82:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8010a84:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8010a88:	f88d 1018 	strb.w	r1, [sp, #24]
	buf[1] = msg->len;
 8010a8c:	f88d 3019 	strb.w	r3, [sp, #25]
	if (mavlink1) {
 8010a90:	2e00      	cmp	r6, #0
 8010a92:	f000 80b5 	beq.w	8010c00 <mouseDriver_sendMsg+0x274>
		buf[2] = msg->seq;
 8010a96:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[3] = msg->sysid;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->compid;
 8010aa0:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->msgid & 0xFF;
 8010aa4:	f88d 301d 	strb.w	r3, [sp, #29]
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
 8010aa8:	1ea6      	subs	r6, r4, #2
 8010aaa:	b2b6      	uxth	r6, r6
 8010aac:	ab80      	add	r3, sp, #512	; 0x200
 8010aae:	441e      	add	r6, r3
 8010ab0:	f5a6 76f3 	sub.w	r6, r6, #486	; 0x1e6
        *crcAccum = X25_INIT_CRC;
 8010ab4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8010ab8:	f10d 0519 	add.w	r5, sp, #25
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010abc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8010ac0:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8010ac2:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8010ac6:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010ac8:	0913      	lsrs	r3, r2, #4
 8010aca:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010ace:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ad2:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8010ad6:	42b5      	cmp	r5, r6
 8010ad8:	d1f0      	bne.n	8010abc <mouseDriver_sendMsg+0x130>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8010ada:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8010ade:	b2ba      	uxth	r2, r7
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
 8010ae0:	1e53      	subs	r3, r2, #1
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	b1a2      	cbz	r2, 8010b10 <mouseDriver_sendMsg+0x184>
 8010ae6:	aa80      	add	r2, sp, #512	; 0x200
 8010ae8:	4413      	add	r3, r2
 8010aea:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8010aee:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010af0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010af4:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8010af6:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8010afa:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010afc:	091a      	lsrs	r2, r3, #4
 8010afe:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8010b02:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8010b06:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8010b0a:	b299      	uxth	r1, r3
	while (length--) {
 8010b0c:	42b5      	cmp	r5, r6
 8010b0e:	d1ef      	bne.n	8010af0 <mouseDriver_sendMsg+0x164>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010b10:	f081 0389 	eor.w	r3, r1, #137	; 0x89
        tmp ^= (tmp<<4);
 8010b14:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8010b18:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010b1a:	0913      	lsrs	r3, r2, #4
 8010b1c:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010b20:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8010b24:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8010b28:	b21b      	sxth	r3, r3
 8010b2a:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8010b2c:	a93a      	add	r1, sp, #232	; 0xe8
 8010b2e:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8010b30:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8010b34:	0a15      	lsrs	r5, r2, #8
 8010b36:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8010b3a:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8010b3c:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d177      	bne.n	8010c34 <mouseDriver_sendMsg+0x2a8>
	return msg->len + header_len + 2 + signature_len;
 8010b44:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8010b48:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8010b4c:	29fe      	cmp	r1, #254	; 0xfe
 8010b4e:	f000 810d 	beq.w	8010d6c <mouseDriver_sendMsg+0x3e0>
	while (length > 1 && payload[length-1] == 0) {
 8010b52:	2c01      	cmp	r4, #1
 8010b54:	d911      	bls.n	8010b7a <mouseDriver_sendMsg+0x1ee>
 8010b56:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8010b5a:	5d1b      	ldrb	r3, [r3, r4]
 8010b5c:	b96b      	cbnz	r3, 8010b7a <mouseDriver_sendMsg+0x1ee>
 8010b5e:	1e63      	subs	r3, r4, #1
 8010b60:	aa80      	add	r2, sp, #512	; 0x200
 8010b62:	fa52 f383 	uxtab	r3, r2, r3
 8010b66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8010b6a:	3c01      	subs	r4, #1
 8010b6c:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8010b6e:	2c01      	cmp	r4, #1
 8010b70:	d003      	beq.n	8010b7a <mouseDriver_sendMsg+0x1ee>
 8010b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b76:	2a00      	cmp	r2, #0
 8010b78:	d0f7      	beq.n	8010b6a <mouseDriver_sendMsg+0x1de>
		buf[0] = msg->magic;
 8010b7a:	4d2d      	ldr	r5, [pc, #180]	; (8010c30 <mouseDriver_sendMsg+0x2a4>)
 8010b7c:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8010b7e:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8010b80:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8010b84:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8010b86:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8010b8a:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8010b8c:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8010b90:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8010b92:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8010b96:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8010b98:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8010b9c:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8010b9e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8010ba0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8010ba4:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8010ba6:	121a      	asrs	r2, r3, #8
 8010ba8:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8010baa:	141b      	asrs	r3, r3, #16
 8010bac:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8010bae:	4622      	mov	r2, r4
 8010bb0:	a93a      	add	r1, sp, #232	; 0xe8
 8010bb2:	f105 000a 	add.w	r0, r5, #10
 8010bb6:	f7ef fb4b 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8010bba:	f104 020a 	add.w	r2, r4, #10
 8010bbe:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8010bc0:	f016 0f01 	tst.w	r6, #1
 8010bc4:	f042 806f 	bne.w	8012ca6 <mouseDriver_sendMsg+0x231a>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8010bc8:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8010bca:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8010bce:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8010bd0:	0a12      	lsrs	r2, r2, #8
 8010bd2:	705a      	strb	r2, [r3, #1]
 8010bd4:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8010bd6:	4421      	add	r1, r4
 8010bd8:	3103      	adds	r1, #3
 8010bda:	4419      	add	r1, r3
            msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
            main_transmit_buffer(outBuffer, msg_size);
 8010bdc:	b289      	uxth	r1, r1
 8010bde:	4814      	ldr	r0, [pc, #80]	; (8010c30 <mouseDriver_sendMsg+0x2a4>)
 8010be0:	f7ef fd7e 	bl	80006e0 <main_transmit_buffer>
            main_transmit_buffer(outBuffer, msg_size);
            break;
        default:
            break;
    }
}
 8010be4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8010be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8010bec:	2000      	movs	r0, #0
 8010bee:	e70a      	b.n	8010a06 <mouseDriver_sendMsg+0x7a>
	while (length > 1 && payload[length-1] == 0) {
 8010bf0:	2305      	movs	r3, #5
 8010bf2:	e720      	b.n	8010a36 <mouseDriver_sendMsg+0xaa>
		length--;
 8010bf4:	2304      	movs	r3, #4
 8010bf6:	e71e      	b.n	8010a36 <mouseDriver_sendMsg+0xaa>
 8010bf8:	2303      	movs	r3, #3
 8010bfa:	e71c      	b.n	8010a36 <mouseDriver_sendMsg+0xaa>
	if (signing) {
 8010bfc:	240a      	movs	r4, #10
 8010bfe:	e735      	b.n	8010a6c <mouseDriver_sendMsg+0xe0>
		buf[2] = msg->incompat_flags;
 8010c00:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8010c04:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[3] = msg->compat_flags;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->seq;
 8010c0e:	f88d 201c 	strb.w	r2, [sp, #28]
		buf[5] = msg->sysid;
 8010c12:	f88d 301d 	strb.w	r3, [sp, #29]
		buf[6] = msg->compid;
 8010c16:	f88d 301e 	strb.w	r3, [sp, #30]
		buf[7] = msg->msgid & 0xFF;
 8010c1a:	f88d 301f 	strb.w	r3, [sp, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8010c1e:	f88d 3020 	strb.w	r3, [sp, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8010c22:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8010c26:	e73f      	b.n	8010aa8 <mouseDriver_sendMsg+0x11c>
 8010c28:	20000985 	.word	0x20000985
 8010c2c:	200009d8 	.word	0x200009d8
 8010c30:	20000a38 	.word	0x20000a38
		mavlink_sign_packet(status->signing,
 8010c34:	4b7b      	ldr	r3, [pc, #492]	; (8010e24 <mouseDriver_sendMsg+0x498>)
 8010c36:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8010c38:	2d00      	cmp	r5, #0
 8010c3a:	d083      	beq.n	8010b44 <mouseDriver_sendMsg+0x1b8>
 8010c3c:	782a      	ldrb	r2, [r5, #0]
 8010c3e:	f012 0f01 	tst.w	r2, #1
 8010c42:	f43f af7f 	beq.w	8010b44 <mouseDriver_sendMsg+0x1b8>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8010c46:	f89d 80df 	ldrb.w	r8, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8010c4a:	786a      	ldrb	r2, [r5, #1]
 8010c4c:	f88d 21f2 	strb.w	r2, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8010c50:	68aa      	ldr	r2, [r5, #8]
 8010c52:	68e9      	ldr	r1, [r5, #12]
 8010c54:	9202      	str	r2, [sp, #8]
 8010c56:	9103      	str	r1, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8010c58:	f8cd 21f3 	str.w	r2, [sp, #499]	; 0x1f3
 8010c5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010c60:	f8ad 21f7 	strh.w	r2, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8010c64:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8010c68:	1c42      	adds	r2, r0, #1
 8010c6a:	f141 0300 	adc.w	r3, r1, #0
 8010c6e:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 8010c72:	2700      	movs	r7, #0
 8010c74:	971e      	str	r7, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8010c76:	4a6c      	ldr	r2, [pc, #432]	; (8010e28 <mouseDriver_sendMsg+0x49c>)
 8010c78:	921f      	str	r2, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8010c7a:	4a6c      	ldr	r2, [pc, #432]	; (8010e2c <mouseDriver_sendMsg+0x4a0>)
 8010c7c:	9220      	str	r2, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8010c7e:	4a6c      	ldr	r2, [pc, #432]	; (8010e30 <mouseDriver_sendMsg+0x4a4>)
 8010c80:	9221      	str	r2, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8010c82:	4a6c      	ldr	r2, [pc, #432]	; (8010e34 <mouseDriver_sendMsg+0x4a8>)
 8010c84:	9222      	str	r2, [sp, #136]	; 0x88
    E = 0x510e527f;
 8010c86:	4a6c      	ldr	r2, [pc, #432]	; (8010e38 <mouseDriver_sendMsg+0x4ac>)
 8010c88:	9223      	str	r2, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8010c8a:	4a6c      	ldr	r2, [pc, #432]	; (8010e3c <mouseDriver_sendMsg+0x4b0>)
 8010c8c:	9224      	str	r2, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8010c8e:	4a6c      	ldr	r2, [pc, #432]	; (8010e40 <mouseDriver_sendMsg+0x4b4>)
 8010c90:	9225      	str	r2, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8010c92:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8010c96:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 8010c9a:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 8010c9e:	9226      	str	r2, [sp, #152]	; 0x98
    m->sz[0] += len * 8;
 8010ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ca4:	921d      	str	r2, [sp, #116]	; 0x74
	memcpy(m->u.save_bytes + offset, p, l);
 8010ca6:	ae27      	add	r6, sp, #156	; 0x9c
 8010ca8:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8010cac:	6869      	ldr	r1, [r5, #4]
 8010cae:	68aa      	ldr	r2, [r5, #8]
 8010cb0:	68eb      	ldr	r3, [r5, #12]
 8010cb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010cb4:	6928      	ldr	r0, [r5, #16]
 8010cb6:	6969      	ldr	r1, [r5, #20]
 8010cb8:	69aa      	ldr	r2, [r5, #24]
 8010cba:	69eb      	ldr	r3, [r5, #28]
 8010cbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8010cbe:	4622      	mov	r2, r4
 8010cc0:	a906      	add	r1, sp, #24
 8010cc2:	a81d      	add	r0, sp, #116	; 0x74
 8010cc4:	f7ff fd30 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8010cc8:	4642      	mov	r2, r8
 8010cca:	a93a      	add	r1, sp, #232	; 0xe8
 8010ccc:	a81d      	add	r0, sp, #116	; 0x74
 8010cce:	f7ff fd2b 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8010cd2:	2202      	movs	r2, #2
 8010cd4:	ab3a      	add	r3, sp, #232	; 0xe8
 8010cd6:	eb03 0108 	add.w	r1, r3, r8
 8010cda:	a81d      	add	r0, sp, #116	; 0x74
 8010cdc:	f7ff fd24 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8010ce0:	2207      	movs	r2, #7
 8010ce2:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8010ce6:	a81d      	add	r0, sp, #116	; 0x74
 8010ce8:	f7ff fd1e 	bl	8010728 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8010cec:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8010cee:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8010cf2:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8010cf6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8010cfa:	2380      	movs	r3, #128	; 0x80
 8010cfc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8010d00:	2247      	movs	r2, #71	; 0x47
 8010d02:	4639      	mov	r1, r7
 8010d04:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8010d08:	f002 fd10 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8010d0c:	ab0b      	add	r3, sp, #44	; 0x2c
 8010d0e:	442b      	add	r3, r5
 8010d10:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8010d12:	0a22      	lsrs	r2, r4, #8
 8010d14:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8010d16:	0c22      	lsrs	r2, r4, #16
 8010d18:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8010d1a:	0e24      	lsrs	r4, r4, #24
 8010d1c:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8010d1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010d20:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8010d22:	0a11      	lsrs	r1, r2, #8
 8010d24:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8010d26:	0c11      	lsrs	r1, r2, #16
 8010d28:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8010d2a:	0e12      	lsrs	r2, r2, #24
 8010d2c:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8010d2e:	f105 0209 	add.w	r2, r5, #9
 8010d32:	a90b      	add	r1, sp, #44	; 0x2c
 8010d34:	a81d      	add	r0, sp, #116	; 0x74
 8010d36:	f7ff fcf7 	bl	8010728 <mavlink_sha256_update>
    result[0] = p[3];
 8010d3a:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8010d3e:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 8010d42:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8010d46:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8010d4a:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8010d4e:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8010d52:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8010d56:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8010d5a:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8010d5e:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8010d62:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8010d66:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8010d6a:	e6eb      	b.n	8010b44 <mouseDriver_sendMsg+0x1b8>
		buf[0] = msg->magic;
 8010d6c:	4d35      	ldr	r5, [pc, #212]	; (8010e44 <mouseDriver_sendMsg+0x4b8>)
 8010d6e:	23fe      	movs	r3, #254	; 0xfe
 8010d70:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8010d72:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8010d74:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8010d78:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8010d7a:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8010d7e:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8010d80:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8010d84:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8010d86:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8010d88:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8010d8c:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8010d8e:	4622      	mov	r2, r4
 8010d90:	a93a      	add	r1, sp, #232	; 0xe8
 8010d92:	1da8      	adds	r0, r5, #6
 8010d94:	f7ef fa5c 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8010d98:	1da3      	adds	r3, r4, #6
 8010d9a:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8010d9c:	2105      	movs	r1, #5
 8010d9e:	e714      	b.n	8010bca <mouseDriver_sendMsg+0x23e>
 * @param msg The MAVLink message to compress the data into
 * @param speed_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_setpoint_t* speed_setpoint)
{
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y);
 8010da0:	4a29      	ldr	r2, [pc, #164]	; (8010e48 <mouseDriver_sendMsg+0x4bc>)
 8010da2:	6851      	ldr	r1, [r2, #4]
    packet.setpoint_x = setpoint_x;
 8010da4:	ab02      	add	r3, sp, #8
 8010da6:	6812      	ldr	r2, [r2, #0]
 8010da8:	9202      	str	r2, [sp, #8]
    packet.setpoint_y = setpoint_y;
 8010daa:	9103      	str	r1, [sp, #12]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8010dac:	aa3a      	add	r2, sp, #232	; 0xe8
 8010dae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010db2:	e882 0003 	stmia.w	r2, {r0, r1}
    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 8010db6:	2300      	movs	r3, #0
 8010db8:	2202      	movs	r2, #2
 8010dba:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 8010dbe:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 8010dc2:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8010dc6:	4b17      	ldr	r3, [pc, #92]	; (8010e24 <mouseDriver_sendMsg+0x498>)
 8010dc8:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8010dca:	ea13 0502 	ands.w	r5, r3, r2
 8010dce:	d13d      	bne.n	8010e4c <mouseDriver_sendMsg+0x4c0>
 8010dd0:	4b14      	ldr	r3, [pc, #80]	; (8010e24 <mouseDriver_sendMsg+0x498>)
 8010dd2:	691b      	ldr	r3, [r3, #16]
 8010dd4:	b123      	cbz	r3, 8010de0 <mouseDriver_sendMsg+0x454>
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	f013 0f01 	tst.w	r3, #1
 8010ddc:	f042 803b 	bne.w	8012e56 <mouseDriver_sendMsg+0x24ca>
		msg->magic = MAVLINK_STX;
 8010de0:	23fd      	movs	r3, #253	; 0xfd
 8010de2:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8010de6:	f89d 30ef 	ldrb.w	r3, [sp, #239]	; 0xef
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f040 80f8 	bne.w	8010fe0 <mouseDriver_sendMsg+0x654>
 8010df0:	2000      	movs	r0, #0
 8010df2:	f10d 02ef 	add.w	r2, sp, #239	; 0xef
		length--;
 8010df6:	2307      	movs	r3, #7
	while (length > 1 && payload[length-1] == 0) {
 8010df8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8010dfc:	b919      	cbnz	r1, 8010e06 <mouseDriver_sendMsg+0x47a>
		length--;
 8010dfe:	3b01      	subs	r3, #1
 8010e00:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d1f8      	bne.n	8010df8 <mouseDriver_sendMsg+0x46c>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8010e06:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8010e10:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 8010e14:	2800      	cmp	r0, #0
 8010e16:	f000 80e6 	beq.w	8010fe6 <mouseDriver_sendMsg+0x65a>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 8010e20:	240a      	movs	r4, #10
 8010e22:	e022      	b.n	8010e6a <mouseDriver_sendMsg+0x4de>
 8010e24:	200009d8 	.word	0x200009d8
 8010e28:	6a09e667 	.word	0x6a09e667
 8010e2c:	bb67ae85 	.word	0xbb67ae85
 8010e30:	3c6ef372 	.word	0x3c6ef372
 8010e34:	a54ff53a 	.word	0xa54ff53a
 8010e38:	510e527f 	.word	0x510e527f
 8010e3c:	9b05688c 	.word	0x9b05688c
 8010e40:	1f83d9ab 	.word	0x1f83d9ab
 8010e44:	20000a38 	.word	0x20000a38
 8010e48:	200009cc 	.word	0x200009cc
		msg->magic = MAVLINK_STX_MAVLINK1;
 8010e4c:	23fe      	movs	r3, #254	; 0xfe
 8010e4e:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8010e52:	2308      	movs	r3, #8
 8010e54:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8010e58:	2000      	movs	r0, #0
 8010e5a:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8010e5e:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8010e62:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8010e64:	2200      	movs	r2, #0
 8010e66:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8010e70:	49be      	ldr	r1, [pc, #760]	; (801116c <mouseDriver_sendMsg+0x7e0>)
 8010e72:	798a      	ldrb	r2, [r1, #6]
 8010e74:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 8010e78:	1c56      	adds	r6, r2, #1
 8010e7a:	718e      	strb	r6, [r1, #6]
	buf[0] = msg->magic;
 8010e7c:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8010e80:	f88d 1018 	strb.w	r1, [sp, #24]
	buf[1] = msg->len;
 8010e84:	f88d 3019 	strb.w	r3, [sp, #25]
	if (mavlink1) {
 8010e88:	2d00      	cmp	r5, #0
 8010e8a:	f000 80ae 	beq.w	8010fea <mouseDriver_sendMsg+0x65e>
		buf[2] = msg->seq;
 8010e8e:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[3] = msg->sysid;
 8010e92:	2300      	movs	r3, #0
 8010e94:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->compid;
 8010e98:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->msgid & 0xFF;
 8010e9c:	2302      	movs	r3, #2
 8010e9e:	f88d 301d 	strb.w	r3, [sp, #29]
	while (length--) {
 8010ea2:	1ea6      	subs	r6, r4, #2
 8010ea4:	b2b6      	uxth	r6, r6
 8010ea6:	ab80      	add	r3, sp, #512	; 0x200
 8010ea8:	441e      	add	r6, r3
 8010eaa:	f5a6 76f3 	sub.w	r6, r6, #486	; 0x1e6
        *crcAccum = X25_INIT_CRC;
 8010eae:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8010eb2:	f10d 0519 	add.w	r5, sp, #25
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010eb6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8010eba:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8010ebc:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8010ec0:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010ec2:	0913      	lsrs	r3, r2, #4
 8010ec4:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010ec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ecc:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8010ed0:	42ae      	cmp	r6, r5
 8010ed2:	d1f0      	bne.n	8010eb6 <mouseDriver_sendMsg+0x52a>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8010ed4:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8010ed8:	b2ba      	uxth	r2, r7
	while (length--) {
 8010eda:	1e53      	subs	r3, r2, #1
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	b1a2      	cbz	r2, 8010f0a <mouseDriver_sendMsg+0x57e>
 8010ee0:	aa80      	add	r2, sp, #512	; 0x200
 8010ee2:	4413      	add	r3, r2
 8010ee4:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8010ee8:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010eea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010eee:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8010ef0:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8010ef4:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010ef6:	091a      	lsrs	r2, r3, #4
 8010ef8:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8010efc:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8010f00:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8010f04:	b299      	uxth	r1, r3
	while (length--) {
 8010f06:	42ae      	cmp	r6, r5
 8010f08:	d1ef      	bne.n	8010eea <mouseDriver_sendMsg+0x55e>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8010f0a:	f081 0326 	eor.w	r3, r1, #38	; 0x26
        tmp ^= (tmp<<4);
 8010f0e:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8010f12:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8010f14:	0913      	lsrs	r3, r2, #4
 8010f16:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8010f1a:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8010f1e:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8010f22:	b21b      	sxth	r3, r3
 8010f24:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8010f26:	a93a      	add	r1, sp, #232	; 0xe8
 8010f28:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8010f2a:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8010f2e:	0a15      	lsrs	r5, r2, #8
 8010f30:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8010f34:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8010f36:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d16a      	bne.n	8011014 <mouseDriver_sendMsg+0x688>
	return msg->len + header_len + 2 + signature_len;
 8010f3e:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8010f42:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8010f46:	29fe      	cmp	r1, #254	; 0xfe
 8010f48:	f000 80f5 	beq.w	8011136 <mouseDriver_sendMsg+0x7aa>
	while (length > 1 && payload[length-1] == 0) {
 8010f4c:	2c01      	cmp	r4, #1
 8010f4e:	d911      	bls.n	8010f74 <mouseDriver_sendMsg+0x5e8>
 8010f50:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8010f54:	5d1b      	ldrb	r3, [r3, r4]
 8010f56:	b96b      	cbnz	r3, 8010f74 <mouseDriver_sendMsg+0x5e8>
 8010f58:	1e63      	subs	r3, r4, #1
 8010f5a:	aa80      	add	r2, sp, #512	; 0x200
 8010f5c:	fa52 f383 	uxtab	r3, r2, r3
 8010f60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8010f64:	3c01      	subs	r4, #1
 8010f66:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8010f68:	2c01      	cmp	r4, #1
 8010f6a:	d003      	beq.n	8010f74 <mouseDriver_sendMsg+0x5e8>
 8010f6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f70:	2a00      	cmp	r2, #0
 8010f72:	d0f7      	beq.n	8010f64 <mouseDriver_sendMsg+0x5d8>
		buf[0] = msg->magic;
 8010f74:	4d7e      	ldr	r5, [pc, #504]	; (8011170 <mouseDriver_sendMsg+0x7e4>)
 8010f76:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8010f78:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8010f7a:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8010f7e:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8010f80:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8010f84:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8010f86:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8010f8a:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8010f8c:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8010f90:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8010f92:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8010f96:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8010f98:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8010f9a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8010f9e:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8010fa0:	121a      	asrs	r2, r3, #8
 8010fa2:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8010fa4:	141b      	asrs	r3, r3, #16
 8010fa6:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8010fa8:	4622      	mov	r2, r4
 8010faa:	a93a      	add	r1, sp, #232	; 0xe8
 8010fac:	f105 000a 	add.w	r0, r5, #10
 8010fb0:	f7ef f94e 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8010fb4:	f104 020a 	add.w	r2, r4, #10
 8010fb8:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8010fba:	f016 0f01 	tst.w	r6, #1
 8010fbe:	f041 8689 	bne.w	8012cd4 <mouseDriver_sendMsg+0x2348>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8010fc2:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8010fc4:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8010fc8:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8010fca:	0a12      	lsrs	r2, r2, #8
 8010fcc:	705a      	strb	r2, [r3, #1]
 8010fce:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8010fd0:	4421      	add	r1, r4
 8010fd2:	3103      	adds	r1, #3
 8010fd4:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8010fd6:	b289      	uxth	r1, r1
 8010fd8:	4865      	ldr	r0, [pc, #404]	; (8011170 <mouseDriver_sendMsg+0x7e4>)
 8010fda:	f7ef fb81 	bl	80006e0 <main_transmit_buffer>
            break;
 8010fde:	e601      	b.n	8010be4 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	2308      	movs	r3, #8
 8010fe4:	e70f      	b.n	8010e06 <mouseDriver_sendMsg+0x47a>
	if (signing) {
 8010fe6:	240a      	movs	r4, #10
 8010fe8:	e73c      	b.n	8010e64 <mouseDriver_sendMsg+0x4d8>
		buf[2] = msg->incompat_flags;
 8010fea:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8010fee:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[3] = msg->compat_flags;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->seq;
 8010ff8:	f88d 201c 	strb.w	r2, [sp, #28]
		buf[5] = msg->sysid;
 8010ffc:	f88d 301d 	strb.w	r3, [sp, #29]
		buf[6] = msg->compid;
 8011000:	f88d 301e 	strb.w	r3, [sp, #30]
		buf[7] = msg->msgid & 0xFF;
 8011004:	2202      	movs	r2, #2
 8011006:	f88d 201f 	strb.w	r2, [sp, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 801100a:	f88d 3020 	strb.w	r3, [sp, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 801100e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8011012:	e746      	b.n	8010ea2 <mouseDriver_sendMsg+0x516>
		mavlink_sign_packet(status->signing,
 8011014:	4b55      	ldr	r3, [pc, #340]	; (801116c <mouseDriver_sendMsg+0x7e0>)
 8011016:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8011018:	2900      	cmp	r1, #0
 801101a:	d090      	beq.n	8010f3e <mouseDriver_sendMsg+0x5b2>
 801101c:	780b      	ldrb	r3, [r1, #0]
 801101e:	f013 0f01 	tst.w	r3, #1
 8011022:	d08c      	beq.n	8010f3e <mouseDriver_sendMsg+0x5b2>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8011024:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8011028:	784b      	ldrb	r3, [r1, #1]
 801102a:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 801102e:	688b      	ldr	r3, [r1, #8]
 8011030:	68ca      	ldr	r2, [r1, #12]
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8011036:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 801103a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801103e:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8011042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8011046:	1c56      	adds	r6, r2, #1
 8011048:	f143 0700 	adc.w	r7, r3, #0
 801104c:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8011050:	2600      	movs	r6, #0
 8011052:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8011054:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8011056:	4b47      	ldr	r3, [pc, #284]	; (8011174 <mouseDriver_sendMsg+0x7e8>)
 8011058:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 801105a:	4b47      	ldr	r3, [pc, #284]	; (8011178 <mouseDriver_sendMsg+0x7ec>)
 801105c:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 801105e:	4b47      	ldr	r3, [pc, #284]	; (801117c <mouseDriver_sendMsg+0x7f0>)
 8011060:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8011062:	4b47      	ldr	r3, [pc, #284]	; (8011180 <mouseDriver_sendMsg+0x7f4>)
 8011064:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8011066:	4b47      	ldr	r3, [pc, #284]	; (8011184 <mouseDriver_sendMsg+0x7f8>)
 8011068:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 801106a:	4b47      	ldr	r3, [pc, #284]	; (8011188 <mouseDriver_sendMsg+0x7fc>)
 801106c:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 801106e:	4b47      	ldr	r3, [pc, #284]	; (801118c <mouseDriver_sendMsg+0x800>)
 8011070:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8011072:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8011076:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 801107a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 801107e:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8011080:	2220      	movs	r2, #32
 8011082:	3110      	adds	r1, #16
 8011084:	a81d      	add	r0, sp, #116	; 0x74
 8011086:	f7ff fb4f 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 801108a:	4622      	mov	r2, r4
 801108c:	a906      	add	r1, sp, #24
 801108e:	a81d      	add	r0, sp, #116	; 0x74
 8011090:	f7ff fb4a 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8011094:	462a      	mov	r2, r5
 8011096:	a93a      	add	r1, sp, #232	; 0xe8
 8011098:	a81d      	add	r0, sp, #116	; 0x74
 801109a:	f7ff fb45 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 801109e:	2202      	movs	r2, #2
 80110a0:	ab3a      	add	r3, sp, #232	; 0xe8
 80110a2:	1959      	adds	r1, r3, r5
 80110a4:	a81d      	add	r0, sp, #116	; 0x74
 80110a6:	f7ff fb3f 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80110aa:	2207      	movs	r2, #7
 80110ac:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 80110b0:	a81d      	add	r0, sp, #116	; 0x74
 80110b2:	f7ff fb39 	bl	8010728 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 80110b6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80110b8:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80110bc:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 80110c0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 80110c4:	2380      	movs	r3, #128	; 0x80
 80110c6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80110ca:	2247      	movs	r2, #71	; 0x47
 80110cc:	4631      	mov	r1, r6
 80110ce:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 80110d2:	f002 fb2b 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80110d6:	ab0b      	add	r3, sp, #44	; 0x2c
 80110d8:	442b      	add	r3, r5
 80110da:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80110dc:	0a22      	lsrs	r2, r4, #8
 80110de:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80110e0:	0c22      	lsrs	r2, r4, #16
 80110e2:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80110e4:	0e24      	lsrs	r4, r4, #24
 80110e6:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80110e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80110ea:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80110ec:	0a11      	lsrs	r1, r2, #8
 80110ee:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80110f0:	0c11      	lsrs	r1, r2, #16
 80110f2:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80110f4:	0e12      	lsrs	r2, r2, #24
 80110f6:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80110f8:	f105 0209 	add.w	r2, r5, #9
 80110fc:	a90b      	add	r1, sp, #44	; 0x2c
 80110fe:	a81d      	add	r0, sp, #116	; 0x74
 8011100:	f7ff fb12 	bl	8010728 <mavlink_sha256_update>
    result[0] = p[3];
 8011104:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8011108:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 801110c:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8011110:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8011114:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8011118:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 801111c:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8011120:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8011124:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8011128:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 801112c:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8011130:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8011134:	e703      	b.n	8010f3e <mouseDriver_sendMsg+0x5b2>
		buf[0] = msg->magic;
 8011136:	4d0e      	ldr	r5, [pc, #56]	; (8011170 <mouseDriver_sendMsg+0x7e4>)
 8011138:	23fe      	movs	r3, #254	; 0xfe
 801113a:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 801113c:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 801113e:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011142:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8011144:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011148:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 801114a:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801114e:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8011150:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011152:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011156:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8011158:	4622      	mov	r2, r4
 801115a:	a93a      	add	r1, sp, #232	; 0xe8
 801115c:	1da8      	adds	r0, r5, #6
 801115e:	f7ef f877 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8011162:	1da3      	adds	r3, r4, #6
 8011164:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8011166:	2105      	movs	r1, #5
 8011168:	e72c      	b.n	8010fc4 <mouseDriver_sendMsg+0x638>
 801116a:	bf00      	nop
 801116c:	200009d8 	.word	0x200009d8
 8011170:	20000a38 	.word	0x20000a38
 8011174:	6a09e667 	.word	0x6a09e667
 8011178:	bb67ae85 	.word	0xbb67ae85
 801117c:	3c6ef372 	.word	0x3c6ef372
 8011180:	a54ff53a 	.word	0xa54ff53a
 8011184:	510e527f 	.word	0x510e527f
 8011188:	9b05688c 	.word	0x9b05688c
 801118c:	1f83d9ab 	.word	0x1f83d9ab
 * @param msg The MAVLink message to compress the data into
 * @param motor_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_motor_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_motor_setpoint_t* motor_setpoint)
{
    return mavlink_msg_motor_setpoint_pack(system_id, component_id, msg, motor_setpoint->time, motor_setpoint->motor_x, motor_setpoint->motor_y);
 8011190:	4a93      	ldr	r2, [pc, #588]	; (80113e0 <mouseDriver_sendMsg+0xa54>)
 8011192:	6850      	ldr	r0, [r2, #4]
 8011194:	6891      	ldr	r1, [r2, #8]
    packet.time = time;
 8011196:	ab06      	add	r3, sp, #24
 8011198:	6812      	ldr	r2, [r2, #0]
 801119a:	9206      	str	r2, [sp, #24]
    packet.motor_x = motor_x;
 801119c:	9007      	str	r0, [sp, #28]
    packet.motor_y = motor_y;
 801119e:	9108      	str	r1, [sp, #32]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
 80111a0:	ac3a      	add	r4, sp, #232	; 0xe8
 80111a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80111a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_MOTOR_SETPOINT;
 80111aa:	2300      	movs	r3, #0
 80111ac:	2204      	movs	r2, #4
 80111ae:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 80111b2:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 80111b6:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80111ba:	4b8a      	ldr	r3, [pc, #552]	; (80113e4 <mouseDriver_sendMsg+0xa58>)
 80111bc:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80111be:	f013 0602 	ands.w	r6, r3, #2
 80111c2:	d129      	bne.n	8011218 <mouseDriver_sendMsg+0x88c>
 80111c4:	4b87      	ldr	r3, [pc, #540]	; (80113e4 <mouseDriver_sendMsg+0xa58>)
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	b123      	cbz	r3, 80111d4 <mouseDriver_sendMsg+0x848>
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	f013 0f01 	tst.w	r3, #1
 80111d0:	f041 8656 	bne.w	8012e80 <mouseDriver_sendMsg+0x24f4>
		msg->magic = MAVLINK_STX;
 80111d4:	23fd      	movs	r3, #253	; 0xfd
 80111d6:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 80111da:	f89d 30f3 	ldrb.w	r3, [sp, #243]	; 0xf3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	f040 80e4 	bne.w	80113ac <mouseDriver_sendMsg+0xa20>
 80111e4:	2000      	movs	r0, #0
 80111e6:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
		length--;
 80111ea:	230b      	movs	r3, #11
	while (length > 1 && payload[length-1] == 0) {
 80111ec:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80111f0:	b919      	cbnz	r1, 80111fa <mouseDriver_sendMsg+0x86e>
		length--;
 80111f2:	3b01      	subs	r3, #1
 80111f4:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d1f8      	bne.n	80111ec <mouseDriver_sendMsg+0x860>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80111fa:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 80111fe:	2200      	movs	r2, #0
 8011200:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8011204:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 8011208:	2800      	cmp	r0, #0
 801120a:	f000 80d2 	beq.w	80113b2 <mouseDriver_sendMsg+0xa26>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 801120e:	2201      	movs	r2, #1
 8011210:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 8011214:	240a      	movs	r4, #10
 8011216:	e00e      	b.n	8011236 <mouseDriver_sendMsg+0x8aa>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8011218:	23fe      	movs	r3, #254	; 0xfe
 801121a:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 801121e:	230c      	movs	r3, #12
 8011220:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8011224:	2000      	movs	r0, #0
 8011226:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 801122a:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 801122e:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8011230:	2200      	movs	r2, #0
 8011232:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8011236:	2200      	movs	r2, #0
 8011238:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 801123c:	4969      	ldr	r1, [pc, #420]	; (80113e4 <mouseDriver_sendMsg+0xa58>)
 801123e:	798a      	ldrb	r2, [r1, #6]
 8011240:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 8011244:	1c55      	adds	r5, r2, #1
 8011246:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8011248:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 801124c:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 8011250:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 8011254:	2e00      	cmp	r6, #0
 8011256:	f000 80ae 	beq.w	80113b6 <mouseDriver_sendMsg+0xa2a>
		buf[2] = msg->seq;
 801125a:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 801125e:	2300      	movs	r3, #0
 8011260:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 8011264:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 8011268:	2304      	movs	r3, #4
 801126a:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 801126e:	1ea6      	subs	r6, r4, #2
 8011270:	b2b6      	uxth	r6, r6
 8011272:	ab80      	add	r3, sp, #512	; 0x200
 8011274:	441e      	add	r6, r3
 8011276:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 801127a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 801127e:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011282:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011286:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8011288:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 801128c:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 801128e:	0913      	lsrs	r3, r2, #4
 8011290:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011294:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011298:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 801129c:	42b5      	cmp	r5, r6
 801129e:	d1f0      	bne.n	8011282 <mouseDriver_sendMsg+0x8f6>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80112a0:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 80112a4:	b2ba      	uxth	r2, r7
	while (length--) {
 80112a6:	1e53      	subs	r3, r2, #1
 80112a8:	b29b      	uxth	r3, r3
 80112aa:	b1a2      	cbz	r2, 80112d6 <mouseDriver_sendMsg+0x94a>
 80112ac:	aa80      	add	r2, sp, #512	; 0x200
 80112ae:	4413      	add	r3, r2
 80112b0:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 80112b4:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80112b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80112ba:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80112bc:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80112c0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80112c2:	091a      	lsrs	r2, r3, #4
 80112c4:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80112c8:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 80112cc:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 80112d0:	b299      	uxth	r1, r3
	while (length--) {
 80112d2:	42b5      	cmp	r5, r6
 80112d4:	d1ef      	bne.n	80112b6 <mouseDriver_sendMsg+0x92a>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80112d6:	f081 0370 	eor.w	r3, r1, #112	; 0x70
        tmp ^= (tmp<<4);
 80112da:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80112de:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80112e0:	0913      	lsrs	r3, r2, #4
 80112e2:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80112e6:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80112ea:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80112ee:	b21b      	sxth	r3, r3
 80112f0:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80112f2:	a93a      	add	r1, sp, #232	; 0xe8
 80112f4:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80112f6:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 80112fa:	0a15      	lsrs	r5, r2, #8
 80112fc:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8011300:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8011302:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8011306:	2800      	cmp	r0, #0
 8011308:	d170      	bne.n	80113ec <mouseDriver_sendMsg+0xa60>
	return msg->len + header_len + 2 + signature_len;
 801130a:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 801130e:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011312:	29fe      	cmp	r1, #254	; 0xfe
 8011314:	f000 80fb 	beq.w	801150e <mouseDriver_sendMsg+0xb82>
	while (length > 1 && payload[length-1] == 0) {
 8011318:	2c01      	cmp	r4, #1
 801131a:	d911      	bls.n	8011340 <mouseDriver_sendMsg+0x9b4>
 801131c:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8011320:	5d1b      	ldrb	r3, [r3, r4]
 8011322:	b96b      	cbnz	r3, 8011340 <mouseDriver_sendMsg+0x9b4>
 8011324:	1e63      	subs	r3, r4, #1
 8011326:	aa80      	add	r2, sp, #512	; 0x200
 8011328:	fa52 f383 	uxtab	r3, r2, r3
 801132c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8011330:	3c01      	subs	r4, #1
 8011332:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8011334:	2c01      	cmp	r4, #1
 8011336:	d003      	beq.n	8011340 <mouseDriver_sendMsg+0x9b4>
 8011338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801133c:	2a00      	cmp	r2, #0
 801133e:	d0f7      	beq.n	8011330 <mouseDriver_sendMsg+0x9a4>
		buf[0] = msg->magic;
 8011340:	4d29      	ldr	r5, [pc, #164]	; (80113e8 <mouseDriver_sendMsg+0xa5c>)
 8011342:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8011344:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8011346:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 801134a:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 801134c:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8011350:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8011352:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011356:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8011358:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 801135c:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 801135e:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011362:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8011364:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011366:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801136a:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 801136c:	121a      	asrs	r2, r3, #8
 801136e:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011370:	141b      	asrs	r3, r3, #16
 8011372:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8011374:	4622      	mov	r2, r4
 8011376:	a93a      	add	r1, sp, #232	; 0xe8
 8011378:	f105 000a 	add.w	r0, r5, #10
 801137c:	f7ee ff68 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8011380:	f104 020a 	add.w	r2, r4, #10
 8011384:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8011386:	f016 0f01 	tst.w	r6, #1
 801138a:	f041 84ba 	bne.w	8012d02 <mouseDriver_sendMsg+0x2376>
		header_len = MAVLINK_CORE_HEADER_LEN;
 801138e:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8011390:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8011394:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8011396:	0a12      	lsrs	r2, r2, #8
 8011398:	705a      	strb	r2, [r3, #1]
 801139a:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 801139c:	4421      	add	r1, r4
 801139e:	3103      	adds	r1, #3
 80113a0:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 80113a2:	b289      	uxth	r1, r1
 80113a4:	4810      	ldr	r0, [pc, #64]	; (80113e8 <mouseDriver_sendMsg+0xa5c>)
 80113a6:	f7ef f99b 	bl	80006e0 <main_transmit_buffer>
            break;
 80113aa:	e41b      	b.n	8010be4 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 80113ac:	2000      	movs	r0, #0
 80113ae:	230c      	movs	r3, #12
 80113b0:	e723      	b.n	80111fa <mouseDriver_sendMsg+0x86e>
	if (signing) {
 80113b2:	240a      	movs	r4, #10
 80113b4:	e73c      	b.n	8011230 <mouseDriver_sendMsg+0x8a4>
		buf[2] = msg->incompat_flags;
 80113b6:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 80113ba:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 80113be:	2300      	movs	r3, #0
 80113c0:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 80113c4:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 80113c8:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 80113cc:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 80113d0:	2204      	movs	r2, #4
 80113d2:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80113d6:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80113da:	f88d 3011 	strb.w	r3, [sp, #17]
 80113de:	e746      	b.n	801126e <mouseDriver_sendMsg+0x8e2>
 80113e0:	20000988 	.word	0x20000988
 80113e4:	200009d8 	.word	0x200009d8
 80113e8:	20000a38 	.word	0x20000a38
		mavlink_sign_packet(status->signing,
 80113ec:	4b7a      	ldr	r3, [pc, #488]	; (80115d8 <mouseDriver_sendMsg+0xc4c>)
 80113ee:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80113f0:	2900      	cmp	r1, #0
 80113f2:	d08a      	beq.n	801130a <mouseDriver_sendMsg+0x97e>
 80113f4:	780b      	ldrb	r3, [r1, #0]
 80113f6:	f013 0f01 	tst.w	r3, #1
 80113fa:	d086      	beq.n	801130a <mouseDriver_sendMsg+0x97e>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80113fc:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8011400:	784b      	ldrb	r3, [r1, #1]
 8011402:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8011406:	688b      	ldr	r3, [r1, #8]
 8011408:	68ca      	ldr	r2, [r1, #12]
 801140a:	9300      	str	r3, [sp, #0]
 801140c:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 801140e:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8011412:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011416:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 801141a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801141e:	1c56      	adds	r6, r2, #1
 8011420:	f143 0700 	adc.w	r7, r3, #0
 8011424:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8011428:	2600      	movs	r6, #0
 801142a:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 801142c:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 801142e:	4b6b      	ldr	r3, [pc, #428]	; (80115dc <mouseDriver_sendMsg+0xc50>)
 8011430:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8011432:	4b6b      	ldr	r3, [pc, #428]	; (80115e0 <mouseDriver_sendMsg+0xc54>)
 8011434:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8011436:	4b6b      	ldr	r3, [pc, #428]	; (80115e4 <mouseDriver_sendMsg+0xc58>)
 8011438:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 801143a:	4b6b      	ldr	r3, [pc, #428]	; (80115e8 <mouseDriver_sendMsg+0xc5c>)
 801143c:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 801143e:	4b6b      	ldr	r3, [pc, #428]	; (80115ec <mouseDriver_sendMsg+0xc60>)
 8011440:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8011442:	4b6b      	ldr	r3, [pc, #428]	; (80115f0 <mouseDriver_sendMsg+0xc64>)
 8011444:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8011446:	4b6b      	ldr	r3, [pc, #428]	; (80115f4 <mouseDriver_sendMsg+0xc68>)
 8011448:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 801144a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 801144e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8011452:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8011456:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8011458:	2220      	movs	r2, #32
 801145a:	3110      	adds	r1, #16
 801145c:	a81d      	add	r0, sp, #116	; 0x74
 801145e:	f7ff f963 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8011462:	4622      	mov	r2, r4
 8011464:	a902      	add	r1, sp, #8
 8011466:	a81d      	add	r0, sp, #116	; 0x74
 8011468:	f7ff f95e 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 801146c:	462a      	mov	r2, r5
 801146e:	a93a      	add	r1, sp, #232	; 0xe8
 8011470:	a81d      	add	r0, sp, #116	; 0x74
 8011472:	f7ff f959 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8011476:	2202      	movs	r2, #2
 8011478:	ab3a      	add	r3, sp, #232	; 0xe8
 801147a:	1959      	adds	r1, r3, r5
 801147c:	a81d      	add	r0, sp, #116	; 0x74
 801147e:	f7ff f953 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8011482:	2207      	movs	r2, #7
 8011484:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8011488:	a81d      	add	r0, sp, #116	; 0x74
 801148a:	f7ff f94d 	bl	8010728 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 801148e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8011490:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8011494:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8011498:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 801149c:	2380      	movs	r3, #128	; 0x80
 801149e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80114a2:	2247      	movs	r2, #71	; 0x47
 80114a4:	4631      	mov	r1, r6
 80114a6:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 80114aa:	f002 f93f 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80114ae:	ab0b      	add	r3, sp, #44	; 0x2c
 80114b0:	442b      	add	r3, r5
 80114b2:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80114b4:	0a22      	lsrs	r2, r4, #8
 80114b6:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80114b8:	0c22      	lsrs	r2, r4, #16
 80114ba:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80114bc:	0e24      	lsrs	r4, r4, #24
 80114be:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80114c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80114c2:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80114c4:	0a11      	lsrs	r1, r2, #8
 80114c6:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80114c8:	0c11      	lsrs	r1, r2, #16
 80114ca:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80114cc:	0e12      	lsrs	r2, r2, #24
 80114ce:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80114d0:	f105 0209 	add.w	r2, r5, #9
 80114d4:	a90b      	add	r1, sp, #44	; 0x2c
 80114d6:	a81d      	add	r0, sp, #116	; 0x74
 80114d8:	f7ff f926 	bl	8010728 <mavlink_sha256_update>
    result[0] = p[3];
 80114dc:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80114e0:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 80114e4:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 80114e8:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 80114ec:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 80114f0:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 80114f4:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 80114f8:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 80114fc:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8011500:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8011504:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8011508:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 801150c:	e6fd      	b.n	801130a <mouseDriver_sendMsg+0x97e>
		buf[0] = msg->magic;
 801150e:	4d3a      	ldr	r5, [pc, #232]	; (80115f8 <mouseDriver_sendMsg+0xc6c>)
 8011510:	23fe      	movs	r3, #254	; 0xfe
 8011512:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8011514:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8011516:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 801151a:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 801151c:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011520:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8011522:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011526:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8011528:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801152a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801152e:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8011530:	4622      	mov	r2, r4
 8011532:	a93a      	add	r1, sp, #232	; 0xe8
 8011534:	1da8      	adds	r0, r5, #6
 8011536:	f7ee fe8b 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 801153a:	1da3      	adds	r3, r4, #6
 801153c:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 801153e:	2105      	movs	r1, #5
 8011540:	e726      	b.n	8011390 <mouseDriver_sendMsg+0xa04>
	return (HAL_GetTick());
 8011542:	f7f0 fda9 	bl	8002098 <HAL_GetTick>
                actual_speed_measure.time_x = mouseDriver_getTime();
 8011546:	4b2d      	ldr	r3, [pc, #180]	; (80115fc <mouseDriver_sendMsg+0xc70>)
 8011548:	6018      	str	r0, [r3, #0]
 * @param msg The MAVLink message to compress the data into
 * @param speed_info C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_info_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_info_t* speed_info)
{
    return mavlink_msg_speed_info_pack(system_id, component_id, msg, speed_info->time_x, speed_info->time_y, speed_info->speed_x, speed_info->speed_y, speed_info->valid);
 801154a:	685c      	ldr	r4, [r3, #4]
 801154c:	6899      	ldr	r1, [r3, #8]
 801154e:	68da      	ldr	r2, [r3, #12]
 8011550:	7c1b      	ldrb	r3, [r3, #16]
    packet.time_x = time_x;
 8011552:	9006      	str	r0, [sp, #24]
    packet.time_y = time_y;
 8011554:	9407      	str	r4, [sp, #28]
    packet.speed_x = speed_x;
 8011556:	9108      	str	r1, [sp, #32]
    packet.speed_y = speed_y;
 8011558:	9209      	str	r2, [sp, #36]	; 0x24
    packet.valid = valid;
 801155a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_INFO_LEN);
 801155e:	ad3a      	add	r5, sp, #232	; 0xe8
 8011560:	ac06      	add	r4, sp, #24
 8011562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	702b      	strb	r3, [r5, #0]
    msg->msgid = MAVLINK_MSG_ID_SPEED_INFO;
 801156a:	2300      	movs	r3, #0
 801156c:	2201      	movs	r2, #1
 801156e:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 8011572:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 8011576:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 801157a:	4b17      	ldr	r3, [pc, #92]	; (80115d8 <mouseDriver_sendMsg+0xc4c>)
 801157c:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 801157e:	f013 0502 	ands.w	r5, r3, #2
 8011582:	d13d      	bne.n	8011600 <mouseDriver_sendMsg+0xc74>
 8011584:	4b14      	ldr	r3, [pc, #80]	; (80115d8 <mouseDriver_sendMsg+0xc4c>)
 8011586:	691b      	ldr	r3, [r3, #16]
 8011588:	b123      	cbz	r3, 8011594 <mouseDriver_sendMsg+0xc08>
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	f013 0f01 	tst.w	r3, #1
 8011590:	f041 849e 	bne.w	8012ed0 <mouseDriver_sendMsg+0x2544>
		msg->magic = MAVLINK_STX;
 8011594:	23fd      	movs	r3, #253	; 0xfd
 8011596:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 801159a:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f040 80f9 	bne.w	8011796 <mouseDriver_sendMsg+0xe0a>
 80115a4:	2000      	movs	r0, #0
 80115a6:	aa3e      	add	r2, sp, #248	; 0xf8
		length--;
 80115a8:	2310      	movs	r3, #16
	while (length > 1 && payload[length-1] == 0) {
 80115aa:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80115ae:	b919      	cbnz	r1, 80115b8 <mouseDriver_sendMsg+0xc2c>
		length--;
 80115b0:	3b01      	subs	r3, #1
 80115b2:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d1f8      	bne.n	80115aa <mouseDriver_sendMsg+0xc1e>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80115b8:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 80115bc:	2200      	movs	r2, #0
 80115be:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 80115c2:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 80115c6:	2800      	cmp	r0, #0
 80115c8:	f000 80e8 	beq.w	801179c <mouseDriver_sendMsg+0xe10>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80115cc:	2201      	movs	r2, #1
 80115ce:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 80115d2:	240a      	movs	r4, #10
 80115d4:	e023      	b.n	801161e <mouseDriver_sendMsg+0xc92>
 80115d6:	bf00      	nop
 80115d8:	200009d8 	.word	0x200009d8
 80115dc:	6a09e667 	.word	0x6a09e667
 80115e0:	bb67ae85 	.word	0xbb67ae85
 80115e4:	3c6ef372 	.word	0x3c6ef372
 80115e8:	a54ff53a 	.word	0xa54ff53a
 80115ec:	510e527f 	.word	0x510e527f
 80115f0:	9b05688c 	.word	0x9b05688c
 80115f4:	1f83d9ab 	.word	0x1f83d9ab
 80115f8:	20000a38 	.word	0x20000a38
 80115fc:	200009b8 	.word	0x200009b8
		msg->magic = MAVLINK_STX_MAVLINK1;
 8011600:	23fe      	movs	r3, #254	; 0xfe
 8011602:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8011606:	2311      	movs	r3, #17
 8011608:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 801160c:	2000      	movs	r0, #0
 801160e:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8011612:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8011616:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8011618:	2200      	movs	r2, #0
 801161a:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 801161e:	2200      	movs	r2, #0
 8011620:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8011624:	49be      	ldr	r1, [pc, #760]	; (8011920 <mouseDriver_sendMsg+0xf94>)
 8011626:	798a      	ldrb	r2, [r1, #6]
 8011628:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 801162c:	1c56      	adds	r6, r2, #1
 801162e:	718e      	strb	r6, [r1, #6]
	buf[0] = msg->magic;
 8011630:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011634:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 8011638:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 801163c:	2d00      	cmp	r5, #0
 801163e:	f000 80af 	beq.w	80117a0 <mouseDriver_sendMsg+0xe14>
		buf[2] = msg->seq;
 8011642:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 8011646:	2300      	movs	r3, #0
 8011648:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 801164c:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 8011650:	2301      	movs	r3, #1
 8011652:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 8011656:	1ea6      	subs	r6, r4, #2
 8011658:	b2b6      	uxth	r6, r6
 801165a:	ab80      	add	r3, sp, #512	; 0x200
 801165c:	441e      	add	r6, r3
 801165e:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 8011662:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8011666:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801166a:	f815 2b01 	ldrb.w	r2, [r5], #1
 801166e:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8011670:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8011674:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011676:	0913      	lsrs	r3, r2, #4
 8011678:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 801167c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011680:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8011684:	42ae      	cmp	r6, r5
 8011686:	d1f0      	bne.n	801166a <mouseDriver_sendMsg+0xcde>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8011688:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 801168c:	b2ba      	uxth	r2, r7
	while (length--) {
 801168e:	1e53      	subs	r3, r2, #1
 8011690:	b29b      	uxth	r3, r3
 8011692:	b1a2      	cbz	r2, 80116be <mouseDriver_sendMsg+0xd32>
 8011694:	aa80      	add	r2, sp, #512	; 0x200
 8011696:	4413      	add	r3, r2
 8011698:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 801169c:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801169e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80116a2:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80116a4:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80116a8:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80116aa:	091a      	lsrs	r2, r3, #4
 80116ac:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80116b0:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 80116b4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 80116b8:	b299      	uxth	r1, r3
	while (length--) {
 80116ba:	42b5      	cmp	r5, r6
 80116bc:	d1ef      	bne.n	801169e <mouseDriver_sendMsg+0xd12>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80116be:	f081 03f3 	eor.w	r3, r1, #243	; 0xf3
        tmp ^= (tmp<<4);
 80116c2:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80116c6:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80116c8:	0913      	lsrs	r3, r2, #4
 80116ca:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80116ce:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80116d2:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80116d6:	b21b      	sxth	r3, r3
 80116d8:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80116da:	a93a      	add	r1, sp, #232	; 0xe8
 80116dc:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80116de:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 80116e2:	0a15      	lsrs	r5, r2, #8
 80116e4:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 80116e8:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 80116ea:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 80116ee:	2800      	cmp	r0, #0
 80116f0:	d16b      	bne.n	80117ca <mouseDriver_sendMsg+0xe3e>
	return msg->len + header_len + 2 + signature_len;
 80116f2:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80116f6:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80116fa:	29fe      	cmp	r1, #254	; 0xfe
 80116fc:	f000 80f6 	beq.w	80118ec <mouseDriver_sendMsg+0xf60>
	while (length > 1 && payload[length-1] == 0) {
 8011700:	2c01      	cmp	r4, #1
 8011702:	d911      	bls.n	8011728 <mouseDriver_sendMsg+0xd9c>
 8011704:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8011708:	5d1b      	ldrb	r3, [r3, r4]
 801170a:	b96b      	cbnz	r3, 8011728 <mouseDriver_sendMsg+0xd9c>
 801170c:	1e63      	subs	r3, r4, #1
 801170e:	aa80      	add	r2, sp, #512	; 0x200
 8011710:	fa52 f383 	uxtab	r3, r2, r3
 8011714:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8011718:	3c01      	subs	r4, #1
 801171a:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 801171c:	2c01      	cmp	r4, #1
 801171e:	d003      	beq.n	8011728 <mouseDriver_sendMsg+0xd9c>
 8011720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011724:	2a00      	cmp	r2, #0
 8011726:	d0f7      	beq.n	8011718 <mouseDriver_sendMsg+0xd8c>
		buf[0] = msg->magic;
 8011728:	4d7e      	ldr	r5, [pc, #504]	; (8011924 <mouseDriver_sendMsg+0xf98>)
 801172a:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 801172c:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 801172e:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8011732:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8011734:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8011738:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 801173a:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 801173e:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8011740:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011744:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8011746:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801174a:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 801174c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801174e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011752:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011754:	121a      	asrs	r2, r3, #8
 8011756:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011758:	141b      	asrs	r3, r3, #16
 801175a:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 801175c:	4622      	mov	r2, r4
 801175e:	a93a      	add	r1, sp, #232	; 0xe8
 8011760:	f105 000a 	add.w	r0, r5, #10
 8011764:	f7ee fd74 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8011768:	f104 020a 	add.w	r2, r4, #10
 801176c:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 801176e:	f016 0f01 	tst.w	r6, #1
 8011772:	f041 82dd 	bne.w	8012d30 <mouseDriver_sendMsg+0x23a4>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8011776:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8011778:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 801177c:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 801177e:	0a12      	lsrs	r2, r2, #8
 8011780:	705a      	strb	r2, [r3, #1]
 8011782:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8011784:	4421      	add	r1, r4
 8011786:	3103      	adds	r1, #3
 8011788:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 801178a:	b289      	uxth	r1, r1
 801178c:	4865      	ldr	r0, [pc, #404]	; (8011924 <mouseDriver_sendMsg+0xf98>)
 801178e:	f7ee ffa7 	bl	80006e0 <main_transmit_buffer>
            break;
 8011792:	f7ff ba27 	b.w	8010be4 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 8011796:	2000      	movs	r0, #0
 8011798:	2311      	movs	r3, #17
 801179a:	e70d      	b.n	80115b8 <mouseDriver_sendMsg+0xc2c>
	if (signing) {
 801179c:	240a      	movs	r4, #10
 801179e:	e73b      	b.n	8011618 <mouseDriver_sendMsg+0xc8c>
		buf[2] = msg->incompat_flags;
 80117a0:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 80117a4:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 80117a8:	2300      	movs	r3, #0
 80117aa:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 80117ae:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 80117b2:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 80117b6:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 80117ba:	2201      	movs	r2, #1
 80117bc:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80117c0:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80117c4:	f88d 3011 	strb.w	r3, [sp, #17]
 80117c8:	e745      	b.n	8011656 <mouseDriver_sendMsg+0xcca>
		mavlink_sign_packet(status->signing,
 80117ca:	4b55      	ldr	r3, [pc, #340]	; (8011920 <mouseDriver_sendMsg+0xf94>)
 80117cc:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80117ce:	2900      	cmp	r1, #0
 80117d0:	d08f      	beq.n	80116f2 <mouseDriver_sendMsg+0xd66>
 80117d2:	780b      	ldrb	r3, [r1, #0]
 80117d4:	f013 0f01 	tst.w	r3, #1
 80117d8:	d08b      	beq.n	80116f2 <mouseDriver_sendMsg+0xd66>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80117da:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 80117de:	784b      	ldrb	r3, [r1, #1]
 80117e0:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 80117e4:	688b      	ldr	r3, [r1, #8]
 80117e6:	68ca      	ldr	r2, [r1, #12]
 80117e8:	9300      	str	r3, [sp, #0]
 80117ea:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 80117ec:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 80117f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80117f4:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 80117f8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80117fc:	1c56      	adds	r6, r2, #1
 80117fe:	f143 0700 	adc.w	r7, r3, #0
 8011802:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8011806:	2600      	movs	r6, #0
 8011808:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 801180a:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 801180c:	4b46      	ldr	r3, [pc, #280]	; (8011928 <mouseDriver_sendMsg+0xf9c>)
 801180e:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8011810:	4b46      	ldr	r3, [pc, #280]	; (801192c <mouseDriver_sendMsg+0xfa0>)
 8011812:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8011814:	4b46      	ldr	r3, [pc, #280]	; (8011930 <mouseDriver_sendMsg+0xfa4>)
 8011816:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8011818:	4b46      	ldr	r3, [pc, #280]	; (8011934 <mouseDriver_sendMsg+0xfa8>)
 801181a:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 801181c:	4b46      	ldr	r3, [pc, #280]	; (8011938 <mouseDriver_sendMsg+0xfac>)
 801181e:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8011820:	4b46      	ldr	r3, [pc, #280]	; (801193c <mouseDriver_sendMsg+0xfb0>)
 8011822:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8011824:	4b46      	ldr	r3, [pc, #280]	; (8011940 <mouseDriver_sendMsg+0xfb4>)
 8011826:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8011828:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 801182c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8011830:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8011834:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8011836:	2220      	movs	r2, #32
 8011838:	3110      	adds	r1, #16
 801183a:	a81d      	add	r0, sp, #116	; 0x74
 801183c:	f7fe ff74 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8011840:	4622      	mov	r2, r4
 8011842:	a902      	add	r1, sp, #8
 8011844:	a81d      	add	r0, sp, #116	; 0x74
 8011846:	f7fe ff6f 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 801184a:	462a      	mov	r2, r5
 801184c:	a93a      	add	r1, sp, #232	; 0xe8
 801184e:	a81d      	add	r0, sp, #116	; 0x74
 8011850:	f7fe ff6a 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8011854:	2202      	movs	r2, #2
 8011856:	ab3a      	add	r3, sp, #232	; 0xe8
 8011858:	1959      	adds	r1, r3, r5
 801185a:	a81d      	add	r0, sp, #116	; 0x74
 801185c:	f7fe ff64 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8011860:	2207      	movs	r2, #7
 8011862:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8011866:	a81d      	add	r0, sp, #116	; 0x74
 8011868:	f7fe ff5e 	bl	8010728 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 801186c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801186e:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8011872:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8011876:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 801187a:	2380      	movs	r3, #128	; 0x80
 801187c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8011880:	2247      	movs	r2, #71	; 0x47
 8011882:	4631      	mov	r1, r6
 8011884:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8011888:	f001 ff50 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 801188c:	ab0b      	add	r3, sp, #44	; 0x2c
 801188e:	442b      	add	r3, r5
 8011890:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8011892:	0a22      	lsrs	r2, r4, #8
 8011894:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8011896:	0c22      	lsrs	r2, r4, #16
 8011898:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 801189a:	0e24      	lsrs	r4, r4, #24
 801189c:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 801189e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80118a0:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80118a2:	0a11      	lsrs	r1, r2, #8
 80118a4:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80118a6:	0c11      	lsrs	r1, r2, #16
 80118a8:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80118aa:	0e12      	lsrs	r2, r2, #24
 80118ac:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80118ae:	f105 0209 	add.w	r2, r5, #9
 80118b2:	a90b      	add	r1, sp, #44	; 0x2c
 80118b4:	a81d      	add	r0, sp, #116	; 0x74
 80118b6:	f7fe ff37 	bl	8010728 <mavlink_sha256_update>
    result[0] = p[3];
 80118ba:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80118be:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 80118c2:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 80118c6:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 80118ca:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 80118ce:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 80118d2:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 80118d6:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 80118da:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80118de:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 80118e2:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 80118e6:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 80118ea:	e702      	b.n	80116f2 <mouseDriver_sendMsg+0xd66>
		buf[0] = msg->magic;
 80118ec:	4d0d      	ldr	r5, [pc, #52]	; (8011924 <mouseDriver_sendMsg+0xf98>)
 80118ee:	23fe      	movs	r3, #254	; 0xfe
 80118f0:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 80118f2:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 80118f4:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 80118f8:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 80118fa:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 80118fe:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8011900:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011904:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8011906:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011908:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801190c:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 801190e:	4622      	mov	r2, r4
 8011910:	a93a      	add	r1, sp, #232	; 0xe8
 8011912:	1da8      	adds	r0, r5, #6
 8011914:	f7ee fc9c 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8011918:	1da3      	adds	r3, r4, #6
 801191a:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 801191c:	2105      	movs	r1, #5
 801191e:	e72b      	b.n	8011778 <mouseDriver_sendMsg+0xdec>
 8011920:	200009d8 	.word	0x200009d8
 8011924:	20000a38 	.word	0x20000a38
 8011928:	6a09e667 	.word	0x6a09e667
 801192c:	bb67ae85 	.word	0xbb67ae85
 8011930:	3c6ef372 	.word	0x3c6ef372
 8011934:	a54ff53a 	.word	0xa54ff53a
 8011938:	510e527f 	.word	0x510e527f
 801193c:	9b05688c 	.word	0x9b05688c
 8011940:	1f83d9ab 	.word	0x1f83d9ab
 * @param msg The MAVLink message to compress the data into
 * @param error C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_error_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_error_t* error)
{
    return mavlink_msg_error_pack(system_id, component_id, msg, error->time, error->error);
 8011944:	4a98      	ldr	r2, [pc, #608]	; (8011ba8 <mouseDriver_sendMsg+0x121c>)
 8011946:	7911      	ldrb	r1, [r2, #4]
    packet.time = time;
 8011948:	466b      	mov	r3, sp
 801194a:	6812      	ldr	r2, [r2, #0]
 801194c:	601a      	str	r2, [r3, #0]
    packet.error = error;
 801194e:	7119      	strb	r1, [r3, #4]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ERROR_LEN);
 8011950:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011954:	923a      	str	r2, [sp, #232]	; 0xe8
 8011956:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
    msg->msgid = MAVLINK_MSG_ID_ERROR;
 801195a:	2300      	movs	r3, #0
 801195c:	2207      	movs	r2, #7
 801195e:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 8011962:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 8011966:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 801196a:	4b90      	ldr	r3, [pc, #576]	; (8011bac <mouseDriver_sendMsg+0x1220>)
 801196c:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 801196e:	f013 0602 	ands.w	r6, r3, #2
 8011972:	d12e      	bne.n	80119d2 <mouseDriver_sendMsg+0x1046>
 8011974:	4b8d      	ldr	r3, [pc, #564]	; (8011bac <mouseDriver_sendMsg+0x1220>)
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	f000 80f5 	beq.w	8011b68 <mouseDriver_sendMsg+0x11dc>
 801197e:	7818      	ldrb	r0, [r3, #0]
 8011980:	f000 0001 	and.w	r0, r0, #1
		msg->magic = MAVLINK_STX;
 8011984:	23fd      	movs	r3, #253	; 0xfd
 8011986:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 801198a:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 801198e:	2b00      	cmp	r3, #0
 8011990:	f040 80ec 	bne.w	8011b6c <mouseDriver_sendMsg+0x11e0>
 8011994:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 8011998:	2b00      	cmp	r3, #0
 801199a:	f040 80e9 	bne.w	8011b70 <mouseDriver_sendMsg+0x11e4>
 801199e:	f89d 30ea 	ldrb.w	r3, [sp, #234]	; 0xea
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	f040 80e6 	bne.w	8011b74 <mouseDriver_sendMsg+0x11e8>
 80119a8:	f89d 30e9 	ldrb.w	r3, [sp, #233]	; 0xe9
		length--;
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	bf0c      	ite	eq
 80119b0:	2301      	moveq	r3, #1
 80119b2:	2302      	movne	r3, #2
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80119b4:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 80119b8:	2200      	movs	r2, #0
 80119ba:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 80119be:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 80119c2:	2800      	cmp	r0, #0
 80119c4:	f000 80d8 	beq.w	8011b78 <mouseDriver_sendMsg+0x11ec>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80119c8:	2201      	movs	r2, #1
 80119ca:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 80119ce:	240a      	movs	r4, #10
 80119d0:	e00e      	b.n	80119f0 <mouseDriver_sendMsg+0x1064>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80119d2:	23fe      	movs	r3, #254	; 0xfe
 80119d4:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80119d8:	2305      	movs	r3, #5
 80119da:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 80119de:	2000      	movs	r0, #0
 80119e0:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 80119e4:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80119e8:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 80119ea:	2200      	movs	r2, #0
 80119ec:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 80119f0:	2200      	movs	r2, #0
 80119f2:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 80119f6:	496d      	ldr	r1, [pc, #436]	; (8011bac <mouseDriver_sendMsg+0x1220>)
 80119f8:	798a      	ldrb	r2, [r1, #6]
 80119fa:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 80119fe:	1c55      	adds	r5, r2, #1
 8011a00:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8011a02:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011a06:	f88d 1018 	strb.w	r1, [sp, #24]
	buf[1] = msg->len;
 8011a0a:	f88d 3019 	strb.w	r3, [sp, #25]
	if (mavlink1) {
 8011a0e:	2e00      	cmp	r6, #0
 8011a10:	f000 80b4 	beq.w	8011b7c <mouseDriver_sendMsg+0x11f0>
		buf[2] = msg->seq;
 8011a14:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[3] = msg->sysid;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->compid;
 8011a1e:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->msgid & 0xFF;
 8011a22:	2307      	movs	r3, #7
 8011a24:	f88d 301d 	strb.w	r3, [sp, #29]
	while (length--) {
 8011a28:	1ea6      	subs	r6, r4, #2
 8011a2a:	b2b6      	uxth	r6, r6
 8011a2c:	ab80      	add	r3, sp, #512	; 0x200
 8011a2e:	441e      	add	r6, r3
 8011a30:	f5a6 76f3 	sub.w	r6, r6, #486	; 0x1e6
        *crcAccum = X25_INIT_CRC;
 8011a34:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8011a38:	f10d 0519 	add.w	r5, sp, #25
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011a3c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011a40:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8011a42:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8011a46:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011a48:	0913      	lsrs	r3, r2, #4
 8011a4a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011a4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011a52:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8011a56:	42b5      	cmp	r5, r6
 8011a58:	d1f0      	bne.n	8011a3c <mouseDriver_sendMsg+0x10b0>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8011a5a:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8011a5e:	b2ba      	uxth	r2, r7
	while (length--) {
 8011a60:	1e53      	subs	r3, r2, #1
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	b1a2      	cbz	r2, 8011a90 <mouseDriver_sendMsg+0x1104>
 8011a66:	aa80      	add	r2, sp, #512	; 0x200
 8011a68:	4413      	add	r3, r2
 8011a6a:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8011a6e:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011a70:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011a74:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8011a76:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8011a7a:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011a7c:	091a      	lsrs	r2, r3, #4
 8011a7e:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8011a82:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8011a86:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8011a8a:	b299      	uxth	r1, r3
	while (length--) {
 8011a8c:	42ae      	cmp	r6, r5
 8011a8e:	d1ef      	bne.n	8011a70 <mouseDriver_sendMsg+0x10e4>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011a90:	f081 0316 	eor.w	r3, r1, #22
        tmp ^= (tmp<<4);
 8011a94:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8011a98:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011a9a:	0913      	lsrs	r3, r2, #4
 8011a9c:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011aa0:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8011aa4:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8011aa8:	b21b      	sxth	r3, r3
 8011aaa:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8011aac:	a93a      	add	r1, sp, #232	; 0xe8
 8011aae:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8011ab0:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8011ab4:	0a15      	lsrs	r5, r2, #8
 8011ab6:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8011aba:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8011abc:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	d177      	bne.n	8011bb4 <mouseDriver_sendMsg+0x1228>
	return msg->len + header_len + 2 + signature_len;
 8011ac4:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8011ac8:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011acc:	29fe      	cmp	r1, #254	; 0xfe
 8011ace:	f000 8103 	beq.w	8011cd8 <mouseDriver_sendMsg+0x134c>
	while (length > 1 && payload[length-1] == 0) {
 8011ad2:	2c01      	cmp	r4, #1
 8011ad4:	d911      	bls.n	8011afa <mouseDriver_sendMsg+0x116e>
 8011ad6:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8011ada:	5d1b      	ldrb	r3, [r3, r4]
 8011adc:	b96b      	cbnz	r3, 8011afa <mouseDriver_sendMsg+0x116e>
 8011ade:	1e63      	subs	r3, r4, #1
 8011ae0:	aa80      	add	r2, sp, #512	; 0x200
 8011ae2:	fa52 f383 	uxtab	r3, r2, r3
 8011ae6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8011aea:	3c01      	subs	r4, #1
 8011aec:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8011aee:	2c01      	cmp	r4, #1
 8011af0:	d003      	beq.n	8011afa <mouseDriver_sendMsg+0x116e>
 8011af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011af6:	2a00      	cmp	r2, #0
 8011af8:	d0f7      	beq.n	8011aea <mouseDriver_sendMsg+0x115e>
		buf[0] = msg->magic;
 8011afa:	4d2d      	ldr	r5, [pc, #180]	; (8011bb0 <mouseDriver_sendMsg+0x1224>)
 8011afc:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8011afe:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8011b00:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8011b04:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8011b06:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8011b0a:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8011b0c:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011b10:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8011b12:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011b16:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8011b18:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011b1c:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8011b1e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011b20:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011b24:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011b26:	121a      	asrs	r2, r3, #8
 8011b28:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011b2a:	141b      	asrs	r3, r3, #16
 8011b2c:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8011b2e:	4622      	mov	r2, r4
 8011b30:	a93a      	add	r1, sp, #232	; 0xe8
 8011b32:	f105 000a 	add.w	r0, r5, #10
 8011b36:	f7ee fb8b 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8011b3a:	f104 020a 	add.w	r2, r4, #10
 8011b3e:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8011b40:	f016 0f01 	tst.w	r6, #1
 8011b44:	f041 810b 	bne.w	8012d5e <mouseDriver_sendMsg+0x23d2>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8011b48:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8011b4a:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8011b4e:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8011b50:	0a12      	lsrs	r2, r2, #8
 8011b52:	705a      	strb	r2, [r3, #1]
 8011b54:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8011b56:	4421      	add	r1, r4
 8011b58:	3103      	adds	r1, #3
 8011b5a:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8011b5c:	b289      	uxth	r1, r1
 8011b5e:	4814      	ldr	r0, [pc, #80]	; (8011bb0 <mouseDriver_sendMsg+0x1224>)
 8011b60:	f7ee fdbe 	bl	80006e0 <main_transmit_buffer>
            break;
 8011b64:	f7ff b83e 	b.w	8010be4 <mouseDriver_sendMsg+0x258>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8011b68:	2000      	movs	r0, #0
 8011b6a:	e70b      	b.n	8011984 <mouseDriver_sendMsg+0xff8>
	while (length > 1 && payload[length-1] == 0) {
 8011b6c:	2305      	movs	r3, #5
 8011b6e:	e721      	b.n	80119b4 <mouseDriver_sendMsg+0x1028>
		length--;
 8011b70:	2304      	movs	r3, #4
 8011b72:	e71f      	b.n	80119b4 <mouseDriver_sendMsg+0x1028>
 8011b74:	2303      	movs	r3, #3
 8011b76:	e71d      	b.n	80119b4 <mouseDriver_sendMsg+0x1028>
	if (signing) {
 8011b78:	240a      	movs	r4, #10
 8011b7a:	e736      	b.n	80119ea <mouseDriver_sendMsg+0x105e>
		buf[2] = msg->incompat_flags;
 8011b7c:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8011b80:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[3] = msg->compat_flags;
 8011b84:	2300      	movs	r3, #0
 8011b86:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->seq;
 8011b8a:	f88d 201c 	strb.w	r2, [sp, #28]
		buf[5] = msg->sysid;
 8011b8e:	f88d 301d 	strb.w	r3, [sp, #29]
		buf[6] = msg->compid;
 8011b92:	f88d 301e 	strb.w	r3, [sp, #30]
		buf[7] = msg->msgid & 0xFF;
 8011b96:	2207      	movs	r2, #7
 8011b98:	f88d 201f 	strb.w	r2, [sp, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011b9c:	f88d 3020 	strb.w	r3, [sp, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011ba0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8011ba4:	e740      	b.n	8011a28 <mouseDriver_sendMsg+0x109c>
 8011ba6:	bf00      	nop
 8011ba8:	20000980 	.word	0x20000980
 8011bac:	200009d8 	.word	0x200009d8
 8011bb0:	20000a38 	.word	0x20000a38
		mavlink_sign_packet(status->signing,
 8011bb4:	4b6e      	ldr	r3, [pc, #440]	; (8011d70 <mouseDriver_sendMsg+0x13e4>)
 8011bb6:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8011bb8:	2900      	cmp	r1, #0
 8011bba:	d083      	beq.n	8011ac4 <mouseDriver_sendMsg+0x1138>
 8011bbc:	780b      	ldrb	r3, [r1, #0]
 8011bbe:	f013 0f01 	tst.w	r3, #1
 8011bc2:	f43f af7f 	beq.w	8011ac4 <mouseDriver_sendMsg+0x1138>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8011bc6:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8011bca:	784b      	ldrb	r3, [r1, #1]
 8011bcc:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8011bd0:	688b      	ldr	r3, [r1, #8]
 8011bd2:	68ca      	ldr	r2, [r1, #12]
 8011bd4:	9302      	str	r3, [sp, #8]
 8011bd6:	9203      	str	r2, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8011bd8:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8011bdc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011be0:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8011be4:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8011be8:	1c56      	adds	r6, r2, #1
 8011bea:	f143 0700 	adc.w	r7, r3, #0
 8011bee:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8011bf2:	2600      	movs	r6, #0
 8011bf4:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8011bf6:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8011bf8:	4b5e      	ldr	r3, [pc, #376]	; (8011d74 <mouseDriver_sendMsg+0x13e8>)
 8011bfa:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8011bfc:	4b5e      	ldr	r3, [pc, #376]	; (8011d78 <mouseDriver_sendMsg+0x13ec>)
 8011bfe:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8011c00:	4b5e      	ldr	r3, [pc, #376]	; (8011d7c <mouseDriver_sendMsg+0x13f0>)
 8011c02:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8011c04:	4b5e      	ldr	r3, [pc, #376]	; (8011d80 <mouseDriver_sendMsg+0x13f4>)
 8011c06:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8011c08:	4b5e      	ldr	r3, [pc, #376]	; (8011d84 <mouseDriver_sendMsg+0x13f8>)
 8011c0a:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8011c0c:	4b5e      	ldr	r3, [pc, #376]	; (8011d88 <mouseDriver_sendMsg+0x13fc>)
 8011c0e:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8011c10:	4b5e      	ldr	r3, [pc, #376]	; (8011d8c <mouseDriver_sendMsg+0x1400>)
 8011c12:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8011c14:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8011c18:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8011c1c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8011c20:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8011c22:	2220      	movs	r2, #32
 8011c24:	3110      	adds	r1, #16
 8011c26:	a81d      	add	r0, sp, #116	; 0x74
 8011c28:	f7fe fd7e 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8011c2c:	4622      	mov	r2, r4
 8011c2e:	a906      	add	r1, sp, #24
 8011c30:	a81d      	add	r0, sp, #116	; 0x74
 8011c32:	f7fe fd79 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8011c36:	462a      	mov	r2, r5
 8011c38:	a93a      	add	r1, sp, #232	; 0xe8
 8011c3a:	a81d      	add	r0, sp, #116	; 0x74
 8011c3c:	f7fe fd74 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8011c40:	2202      	movs	r2, #2
 8011c42:	ab3a      	add	r3, sp, #232	; 0xe8
 8011c44:	1959      	adds	r1, r3, r5
 8011c46:	a81d      	add	r0, sp, #116	; 0x74
 8011c48:	f7fe fd6e 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8011c4c:	2207      	movs	r2, #7
 8011c4e:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8011c52:	a81d      	add	r0, sp, #116	; 0x74
 8011c54:	f7fe fd68 	bl	8010728 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8011c58:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8011c5a:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8011c5e:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8011c62:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8011c66:	2380      	movs	r3, #128	; 0x80
 8011c68:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8011c6c:	2247      	movs	r2, #71	; 0x47
 8011c6e:	4631      	mov	r1, r6
 8011c70:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8011c74:	f001 fd5a 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8011c78:	ab0b      	add	r3, sp, #44	; 0x2c
 8011c7a:	442b      	add	r3, r5
 8011c7c:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8011c7e:	0a22      	lsrs	r2, r4, #8
 8011c80:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8011c82:	0c22      	lsrs	r2, r4, #16
 8011c84:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8011c86:	0e24      	lsrs	r4, r4, #24
 8011c88:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8011c8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011c8c:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8011c8e:	0a11      	lsrs	r1, r2, #8
 8011c90:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8011c92:	0c11      	lsrs	r1, r2, #16
 8011c94:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8011c96:	0e12      	lsrs	r2, r2, #24
 8011c98:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8011c9a:	f105 0209 	add.w	r2, r5, #9
 8011c9e:	a90b      	add	r1, sp, #44	; 0x2c
 8011ca0:	a81d      	add	r0, sp, #116	; 0x74
 8011ca2:	f7fe fd41 	bl	8010728 <mavlink_sha256_update>
    result[0] = p[3];
 8011ca6:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8011caa:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 8011cae:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8011cb2:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8011cb6:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8011cba:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8011cbe:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8011cc2:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8011cc6:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8011cca:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8011cce:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8011cd2:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8011cd6:	e6f5      	b.n	8011ac4 <mouseDriver_sendMsg+0x1138>
		buf[0] = msg->magic;
 8011cd8:	4d2d      	ldr	r5, [pc, #180]	; (8011d90 <mouseDriver_sendMsg+0x1404>)
 8011cda:	23fe      	movs	r3, #254	; 0xfe
 8011cdc:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8011cde:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8011ce0:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011ce4:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8011ce6:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011cea:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8011cec:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011cf0:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8011cf2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011cf4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011cf8:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8011cfa:	4622      	mov	r2, r4
 8011cfc:	a93a      	add	r1, sp, #232	; 0xe8
 8011cfe:	1da8      	adds	r0, r5, #6
 8011d00:	f7ee faa6 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8011d04:	1da3      	adds	r3, r4, #6
 8011d06:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8011d08:	2105      	movs	r1, #5
 8011d0a:	e71e      	b.n	8011b4a <mouseDriver_sendMsg+0x11be>
            mavlink_msg_point_loaded_pack(SYS_ID,COMP_ID,&msg,actual_point);
 8011d0c:	4b21      	ldr	r3, [pc, #132]	; (8011d94 <mouseDriver_sendMsg+0x1408>)
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    packet.point_id = point_id;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LOADED_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_POINT_LOADED;
 8011d14:	2300      	movs	r3, #0
 8011d16:	2205      	movs	r2, #5
 8011d18:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 8011d1c:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 8011d20:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8011d24:	4b12      	ldr	r3, [pc, #72]	; (8011d70 <mouseDriver_sendMsg+0x13e4>)
 8011d26:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8011d28:	f013 0602 	ands.w	r6, r3, #2
 8011d2c:	d134      	bne.n	8011d98 <mouseDriver_sendMsg+0x140c>
 8011d2e:	4b10      	ldr	r3, [pc, #64]	; (8011d70 <mouseDriver_sendMsg+0x13e4>)
 8011d30:	691b      	ldr	r3, [r3, #16]
 8011d32:	b123      	cbz	r3, 8011d3e <mouseDriver_sendMsg+0x13b2>
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	f013 0f01 	tst.w	r3, #1
 8011d3a:	f041 80d3 	bne.w	8012ee4 <mouseDriver_sendMsg+0x2558>
		msg->magic = MAVLINK_STX;
 8011d3e:	23fd      	movs	r3, #253	; 0xfd
 8011d40:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8011d44:	f89d 30e9 	ldrb.w	r3, [sp, #233]	; 0xe9
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f040 80f0 	bne.w	8011f2e <mouseDriver_sendMsg+0x15a2>
 8011d4e:	2000      	movs	r0, #0
		length--;
 8011d50:	2201      	movs	r2, #1
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8011d52:	f88d 20df 	strb.w	r2, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8011d56:	2300      	movs	r3, #0
 8011d58:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8011d5c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
	if (signing) {
 8011d60:	2800      	cmp	r0, #0
 8011d62:	f000 80e7 	beq.w	8011f34 <mouseDriver_sendMsg+0x15a8>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8011d66:	2301      	movs	r3, #1
 8011d68:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
 8011d6c:	240a      	movs	r4, #10
 8011d6e:	e022      	b.n	8011db6 <mouseDriver_sendMsg+0x142a>
 8011d70:	200009d8 	.word	0x200009d8
 8011d74:	6a09e667 	.word	0x6a09e667
 8011d78:	bb67ae85 	.word	0xbb67ae85
 8011d7c:	3c6ef372 	.word	0x3c6ef372
 8011d80:	a54ff53a 	.word	0xa54ff53a
 8011d84:	510e527f 	.word	0x510e527f
 8011d88:	9b05688c 	.word	0x9b05688c
 8011d8c:	1f83d9ab 	.word	0x1f83d9ab
 8011d90:	20000a38 	.word	0x20000a38
 8011d94:	20000994 	.word	0x20000994
		msg->magic = MAVLINK_STX_MAVLINK1;
 8011d98:	23fe      	movs	r3, #254	; 0xfe
 8011d9a:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8011d9e:	2202      	movs	r2, #2
 8011da0:	f88d 20df 	strb.w	r2, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8011da4:	2000      	movs	r0, #0
 8011da6:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8011daa:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8011dae:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8011db0:	2300      	movs	r3, #0
 8011db2:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8011db6:	2100      	movs	r1, #0
 8011db8:	f88d 10e1 	strb.w	r1, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 8011dbc:	49be      	ldr	r1, [pc, #760]	; (80120b8 <mouseDriver_sendMsg+0x172c>)
 8011dbe:	798b      	ldrb	r3, [r1, #6]
 8011dc0:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 8011dc4:	1c5d      	adds	r5, r3, #1
 8011dc6:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8011dc8:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011dcc:	f88d 1018 	strb.w	r1, [sp, #24]
	buf[1] = msg->len;
 8011dd0:	f88d 2019 	strb.w	r2, [sp, #25]
	if (mavlink1) {
 8011dd4:	2e00      	cmp	r6, #0
 8011dd6:	f000 80af 	beq.w	8011f38 <mouseDriver_sendMsg+0x15ac>
		buf[2] = msg->seq;
 8011dda:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[3] = msg->sysid;
 8011dde:	2300      	movs	r3, #0
 8011de0:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[4] = msg->compid;
 8011de4:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->msgid & 0xFF;
 8011de8:	2305      	movs	r3, #5
 8011dea:	f88d 301d 	strb.w	r3, [sp, #29]
	while (length--) {
 8011dee:	1ea6      	subs	r6, r4, #2
 8011df0:	b2b6      	uxth	r6, r6
 8011df2:	ab80      	add	r3, sp, #512	; 0x200
 8011df4:	441e      	add	r6, r3
 8011df6:	f5a6 76f3 	sub.w	r6, r6, #486	; 0x1e6
        *crcAccum = X25_INIT_CRC;
 8011dfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8011dfe:	f10d 0519 	add.w	r5, sp, #25
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011e02:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011e06:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8011e08:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8011e0c:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011e0e:	0913      	lsrs	r3, r2, #4
 8011e10:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011e18:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8011e1c:	42ae      	cmp	r6, r5
 8011e1e:	d1f0      	bne.n	8011e02 <mouseDriver_sendMsg+0x1476>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8011e20:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8011e24:	b2ba      	uxth	r2, r7
	while (length--) {
 8011e26:	1e53      	subs	r3, r2, #1
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	b1a2      	cbz	r2, 8011e56 <mouseDriver_sendMsg+0x14ca>
 8011e2c:	aa80      	add	r2, sp, #512	; 0x200
 8011e2e:	4413      	add	r3, r2
 8011e30:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8011e34:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011e36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011e3a:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8011e3c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8011e40:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011e42:	091a      	lsrs	r2, r3, #4
 8011e44:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8011e48:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8011e4c:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8011e50:	b299      	uxth	r1, r3
	while (length--) {
 8011e52:	42ae      	cmp	r6, r5
 8011e54:	d1ef      	bne.n	8011e36 <mouseDriver_sendMsg+0x14aa>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8011e56:	f081 03a7 	eor.w	r3, r1, #167	; 0xa7
        tmp ^= (tmp<<4);
 8011e5a:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8011e5e:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8011e60:	0913      	lsrs	r3, r2, #4
 8011e62:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8011e66:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8011e6a:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8011e6e:	b21b      	sxth	r3, r3
 8011e70:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8011e72:	a93a      	add	r1, sp, #232	; 0xe8
 8011e74:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8011e76:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8011e7a:	0a15      	lsrs	r5, r2, #8
 8011e7c:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8011e80:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8011e82:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8011e86:	2800      	cmp	r0, #0
 8011e88:	d16b      	bne.n	8011f62 <mouseDriver_sendMsg+0x15d6>
	return msg->len + header_len + 2 + signature_len;
 8011e8a:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8011e8e:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8011e92:	29fe      	cmp	r1, #254	; 0xfe
 8011e94:	f000 80f6 	beq.w	8012084 <mouseDriver_sendMsg+0x16f8>
	while (length > 1 && payload[length-1] == 0) {
 8011e98:	2c01      	cmp	r4, #1
 8011e9a:	d911      	bls.n	8011ec0 <mouseDriver_sendMsg+0x1534>
 8011e9c:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8011ea0:	5d1b      	ldrb	r3, [r3, r4]
 8011ea2:	b96b      	cbnz	r3, 8011ec0 <mouseDriver_sendMsg+0x1534>
 8011ea4:	1e63      	subs	r3, r4, #1
 8011ea6:	aa80      	add	r2, sp, #512	; 0x200
 8011ea8:	fa52 f383 	uxtab	r3, r2, r3
 8011eac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8011eb0:	3c01      	subs	r4, #1
 8011eb2:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8011eb4:	2c01      	cmp	r4, #1
 8011eb6:	d003      	beq.n	8011ec0 <mouseDriver_sendMsg+0x1534>
 8011eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ebc:	2a00      	cmp	r2, #0
 8011ebe:	d0f7      	beq.n	8011eb0 <mouseDriver_sendMsg+0x1524>
		buf[0] = msg->magic;
 8011ec0:	4d7e      	ldr	r5, [pc, #504]	; (80120bc <mouseDriver_sendMsg+0x1730>)
 8011ec2:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8011ec4:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8011ec6:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8011eca:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8011ecc:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8011ed0:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8011ed2:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8011ed6:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8011ed8:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8011edc:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8011ede:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8011ee2:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8011ee4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011ee6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011eea:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011eec:	121a      	asrs	r2, r3, #8
 8011eee:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011ef0:	141b      	asrs	r3, r3, #16
 8011ef2:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8011ef4:	4622      	mov	r2, r4
 8011ef6:	a93a      	add	r1, sp, #232	; 0xe8
 8011ef8:	f105 000a 	add.w	r0, r5, #10
 8011efc:	f7ee f9a8 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8011f00:	f104 020a 	add.w	r2, r4, #10
 8011f04:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8011f06:	f016 0f01 	tst.w	r6, #1
 8011f0a:	f040 873f 	bne.w	8012d8c <mouseDriver_sendMsg+0x2400>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8011f0e:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8011f10:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8011f14:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8011f16:	0a12      	lsrs	r2, r2, #8
 8011f18:	705a      	strb	r2, [r3, #1]
 8011f1a:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8011f1c:	4421      	add	r1, r4
 8011f1e:	3103      	adds	r1, #3
 8011f20:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8011f22:	b289      	uxth	r1, r1
 8011f24:	4865      	ldr	r0, [pc, #404]	; (80120bc <mouseDriver_sendMsg+0x1730>)
 8011f26:	f7ee fbdb 	bl	80006e0 <main_transmit_buffer>
            break;
 8011f2a:	f7fe be5b 	b.w	8010be4 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 8011f2e:	2000      	movs	r0, #0
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8011f30:	2202      	movs	r2, #2
 8011f32:	e70e      	b.n	8011d52 <mouseDriver_sendMsg+0x13c6>
	if (signing) {
 8011f34:	240a      	movs	r4, #10
 8011f36:	e73b      	b.n	8011db0 <mouseDriver_sendMsg+0x1424>
		buf[2] = msg->incompat_flags;
 8011f38:	f89d 20e0 	ldrb.w	r2, [sp, #224]	; 0xe0
 8011f3c:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[3] = msg->compat_flags;
 8011f40:	2200      	movs	r2, #0
 8011f42:	f88d 201b 	strb.w	r2, [sp, #27]
		buf[4] = msg->seq;
 8011f46:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[5] = msg->sysid;
 8011f4a:	f88d 201d 	strb.w	r2, [sp, #29]
		buf[6] = msg->compid;
 8011f4e:	f88d 201e 	strb.w	r2, [sp, #30]
		buf[7] = msg->msgid & 0xFF;
 8011f52:	2305      	movs	r3, #5
 8011f54:	f88d 301f 	strb.w	r3, [sp, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8011f58:	f88d 2020 	strb.w	r2, [sp, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8011f5c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8011f60:	e745      	b.n	8011dee <mouseDriver_sendMsg+0x1462>
		mavlink_sign_packet(status->signing,
 8011f62:	4b55      	ldr	r3, [pc, #340]	; (80120b8 <mouseDriver_sendMsg+0x172c>)
 8011f64:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8011f66:	2900      	cmp	r1, #0
 8011f68:	d08f      	beq.n	8011e8a <mouseDriver_sendMsg+0x14fe>
 8011f6a:	780b      	ldrb	r3, [r1, #0]
 8011f6c:	f013 0f01 	tst.w	r3, #1
 8011f70:	d08b      	beq.n	8011e8a <mouseDriver_sendMsg+0x14fe>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8011f72:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8011f76:	784b      	ldrb	r3, [r1, #1]
 8011f78:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8011f7c:	688b      	ldr	r3, [r1, #8]
 8011f7e:	68ca      	ldr	r2, [r1, #12]
 8011f80:	9302      	str	r3, [sp, #8]
 8011f82:	9203      	str	r2, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8011f84:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8011f88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011f8c:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8011f90:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8011f94:	1c56      	adds	r6, r2, #1
 8011f96:	f143 0700 	adc.w	r7, r3, #0
 8011f9a:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8011f9e:	2600      	movs	r6, #0
 8011fa0:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8011fa2:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8011fa4:	4b46      	ldr	r3, [pc, #280]	; (80120c0 <mouseDriver_sendMsg+0x1734>)
 8011fa6:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8011fa8:	4b46      	ldr	r3, [pc, #280]	; (80120c4 <mouseDriver_sendMsg+0x1738>)
 8011faa:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8011fac:	4b46      	ldr	r3, [pc, #280]	; (80120c8 <mouseDriver_sendMsg+0x173c>)
 8011fae:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8011fb0:	4b46      	ldr	r3, [pc, #280]	; (80120cc <mouseDriver_sendMsg+0x1740>)
 8011fb2:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8011fb4:	4b46      	ldr	r3, [pc, #280]	; (80120d0 <mouseDriver_sendMsg+0x1744>)
 8011fb6:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8011fb8:	4b46      	ldr	r3, [pc, #280]	; (80120d4 <mouseDriver_sendMsg+0x1748>)
 8011fba:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8011fbc:	4b46      	ldr	r3, [pc, #280]	; (80120d8 <mouseDriver_sendMsg+0x174c>)
 8011fbe:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8011fc0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8011fc4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8011fc8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8011fcc:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8011fce:	2220      	movs	r2, #32
 8011fd0:	3110      	adds	r1, #16
 8011fd2:	a81d      	add	r0, sp, #116	; 0x74
 8011fd4:	f7fe fba8 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8011fd8:	4622      	mov	r2, r4
 8011fda:	a906      	add	r1, sp, #24
 8011fdc:	a81d      	add	r0, sp, #116	; 0x74
 8011fde:	f7fe fba3 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8011fe2:	462a      	mov	r2, r5
 8011fe4:	a93a      	add	r1, sp, #232	; 0xe8
 8011fe6:	a81d      	add	r0, sp, #116	; 0x74
 8011fe8:	f7fe fb9e 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8011fec:	2202      	movs	r2, #2
 8011fee:	ab3a      	add	r3, sp, #232	; 0xe8
 8011ff0:	1959      	adds	r1, r3, r5
 8011ff2:	a81d      	add	r0, sp, #116	; 0x74
 8011ff4:	f7fe fb98 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8011ff8:	2207      	movs	r2, #7
 8011ffa:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8011ffe:	a81d      	add	r0, sp, #116	; 0x74
 8012000:	f7fe fb92 	bl	8010728 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8012004:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8012006:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 801200a:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 801200e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8012012:	2380      	movs	r3, #128	; 0x80
 8012014:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8012018:	2247      	movs	r2, #71	; 0x47
 801201a:	4631      	mov	r1, r6
 801201c:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8012020:	f001 fb84 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8012024:	ab0b      	add	r3, sp, #44	; 0x2c
 8012026:	442b      	add	r3, r5
 8012028:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 801202a:	0a22      	lsrs	r2, r4, #8
 801202c:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 801202e:	0c22      	lsrs	r2, r4, #16
 8012030:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8012032:	0e24      	lsrs	r4, r4, #24
 8012034:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8012036:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012038:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 801203a:	0a11      	lsrs	r1, r2, #8
 801203c:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 801203e:	0c11      	lsrs	r1, r2, #16
 8012040:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8012042:	0e12      	lsrs	r2, r2, #24
 8012044:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8012046:	f105 0209 	add.w	r2, r5, #9
 801204a:	a90b      	add	r1, sp, #44	; 0x2c
 801204c:	a81d      	add	r0, sp, #116	; 0x74
 801204e:	f7fe fb6b 	bl	8010728 <mavlink_sha256_update>
    result[0] = p[3];
 8012052:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8012056:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 801205a:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 801205e:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8012062:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8012066:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 801206a:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 801206e:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8012072:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8012076:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 801207a:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 801207e:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8012082:	e702      	b.n	8011e8a <mouseDriver_sendMsg+0x14fe>
		buf[0] = msg->magic;
 8012084:	4d0d      	ldr	r5, [pc, #52]	; (80120bc <mouseDriver_sendMsg+0x1730>)
 8012086:	23fe      	movs	r3, #254	; 0xfe
 8012088:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 801208a:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 801208c:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8012090:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8012092:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8012096:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8012098:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801209c:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 801209e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80120a0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80120a4:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80120a6:	4622      	mov	r2, r4
 80120a8:	a93a      	add	r1, sp, #232	; 0xe8
 80120aa:	1da8      	adds	r0, r5, #6
 80120ac:	f7ee f8d0 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80120b0:	1da3      	adds	r3, r4, #6
 80120b2:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80120b4:	2105      	movs	r1, #5
 80120b6:	e72b      	b.n	8011f10 <mouseDriver_sendMsg+0x1584>
 80120b8:	200009d8 	.word	0x200009d8
 80120bc:	20000a38 	.word	0x20000a38
 80120c0:	6a09e667 	.word	0x6a09e667
 80120c4:	bb67ae85 	.word	0xbb67ae85
 80120c8:	3c6ef372 	.word	0x3c6ef372
 80120cc:	a54ff53a 	.word	0xa54ff53a
 80120d0:	510e527f 	.word	0x510e527f
 80120d4:	9b05688c 	.word	0x9b05688c
 80120d8:	1f83d9ab 	.word	0x1f83d9ab
            mavlink_msg_point_encode(SYS_ID,COMP_ID,&msg,&points[actual_point]);
 80120dc:	4b99      	ldr	r3, [pc, #612]	; (8012344 <mouseDriver_sendMsg+0x19b8>)
 80120de:	7819      	ldrb	r1, [r3, #0]
 * @param msg The MAVLink message to compress the data into
 * @param point C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_point_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_point_t* point)
{
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 80120e0:	4899      	ldr	r0, [pc, #612]	; (8012348 <mouseDriver_sendMsg+0x19bc>)
 80120e2:	00ca      	lsls	r2, r1, #3
 80120e4:	1a53      	subs	r3, r2, r1
 80120e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80120ea:	899c      	ldrh	r4, [r3, #12]
 80120ec:	685e      	ldr	r6, [r3, #4]
 80120ee:	689d      	ldr	r5, [r3, #8]
    packet.duration = duration;
 80120f0:	ab06      	add	r3, sp, #24
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 80120f2:	1a52      	subs	r2, r2, r1
 80120f4:	f850 2012 	ldr.w	r2, [r0, r2, lsl #1]
    packet.duration = duration;
 80120f8:	9206      	str	r2, [sp, #24]
    packet.setpoint_x = setpoint_x;
 80120fa:	9607      	str	r6, [sp, #28]
    packet.setpoint_y = setpoint_y;
 80120fc:	9508      	str	r5, [sp, #32]
    packet.point_id = point_id;
 80120fe:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LEN);
 8012102:	ac3a      	add	r4, sp, #232	; 0xe8
 8012104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012106:	c407      	stmia	r4!, {r0, r1, r2}
 8012108:	8023      	strh	r3, [r4, #0]
    msg->msgid = MAVLINK_MSG_ID_POINT;
 801210a:	2300      	movs	r3, #0
 801210c:	2206      	movs	r2, #6
 801210e:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 8012112:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 8012116:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 801211a:	4b8c      	ldr	r3, [pc, #560]	; (801234c <mouseDriver_sendMsg+0x19c0>)
 801211c:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 801211e:	f013 0602 	ands.w	r6, r3, #2
 8012122:	d129      	bne.n	8012178 <mouseDriver_sendMsg+0x17ec>
 8012124:	4b89      	ldr	r3, [pc, #548]	; (801234c <mouseDriver_sendMsg+0x19c0>)
 8012126:	691b      	ldr	r3, [r3, #16]
 8012128:	b123      	cbz	r3, 8012134 <mouseDriver_sendMsg+0x17a8>
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	f013 0f01 	tst.w	r3, #1
 8012130:	f040 86f7 	bne.w	8012f22 <mouseDriver_sendMsg+0x2596>
		msg->magic = MAVLINK_STX;
 8012134:	23fd      	movs	r3, #253	; 0xfd
 8012136:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 801213a:	f89d 30f5 	ldrb.w	r3, [sp, #245]	; 0xf5
 801213e:	2b00      	cmp	r3, #0
 8012140:	f040 80e5 	bne.w	801230e <mouseDriver_sendMsg+0x1982>
 8012144:	2000      	movs	r0, #0
 8012146:	f10d 02f5 	add.w	r2, sp, #245	; 0xf5
		length--;
 801214a:	230d      	movs	r3, #13
	while (length > 1 && payload[length-1] == 0) {
 801214c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8012150:	b919      	cbnz	r1, 801215a <mouseDriver_sendMsg+0x17ce>
		length--;
 8012152:	3b01      	subs	r3, #1
 8012154:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8012156:	2b01      	cmp	r3, #1
 8012158:	d1f8      	bne.n	801214c <mouseDriver_sendMsg+0x17c0>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 801215a:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 801215e:	2200      	movs	r2, #0
 8012160:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012164:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 8012168:	2800      	cmp	r0, #0
 801216a:	f000 80d3 	beq.w	8012314 <mouseDriver_sendMsg+0x1988>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 801216e:	2201      	movs	r2, #1
 8012170:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 8012174:	240a      	movs	r4, #10
 8012176:	e00e      	b.n	8012196 <mouseDriver_sendMsg+0x180a>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8012178:	23fe      	movs	r3, #254	; 0xfe
 801217a:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 801217e:	230e      	movs	r3, #14
 8012180:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012184:	2000      	movs	r0, #0
 8012186:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 801218a:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 801218e:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8012190:	2200      	movs	r2, #0
 8012192:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8012196:	2200      	movs	r2, #0
 8012198:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 801219c:	496b      	ldr	r1, [pc, #428]	; (801234c <mouseDriver_sendMsg+0x19c0>)
 801219e:	798a      	ldrb	r2, [r1, #6]
 80121a0:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 80121a4:	1c55      	adds	r5, r2, #1
 80121a6:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 80121a8:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80121ac:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 80121b0:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 80121b4:	2e00      	cmp	r6, #0
 80121b6:	f000 80af 	beq.w	8012318 <mouseDriver_sendMsg+0x198c>
		buf[2] = msg->seq;
 80121ba:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 80121be:	2300      	movs	r3, #0
 80121c0:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 80121c4:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 80121c8:	2306      	movs	r3, #6
 80121ca:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 80121ce:	1ea6      	subs	r6, r4, #2
 80121d0:	b2b6      	uxth	r6, r6
 80121d2:	ab80      	add	r3, sp, #512	; 0x200
 80121d4:	441e      	add	r6, r3
 80121d6:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 80121da:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 80121de:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80121e2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80121e6:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 80121e8:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80121ec:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80121ee:	0913      	lsrs	r3, r2, #4
 80121f0:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80121f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80121f8:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80121fc:	42ae      	cmp	r6, r5
 80121fe:	d1f0      	bne.n	80121e2 <mouseDriver_sendMsg+0x1856>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8012200:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8012204:	b2ba      	uxth	r2, r7
	while (length--) {
 8012206:	1e53      	subs	r3, r2, #1
 8012208:	b29b      	uxth	r3, r3
 801220a:	b1a2      	cbz	r2, 8012236 <mouseDriver_sendMsg+0x18aa>
 801220c:	aa80      	add	r2, sp, #512	; 0x200
 801220e:	4413      	add	r3, r2
 8012210:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8012214:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012216:	f815 3b01 	ldrb.w	r3, [r5], #1
 801221a:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 801221c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8012220:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012222:	091a      	lsrs	r2, r3, #4
 8012224:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8012228:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 801222c:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8012230:	b299      	uxth	r1, r3
	while (length--) {
 8012232:	42ae      	cmp	r6, r5
 8012234:	d1ef      	bne.n	8012216 <mouseDriver_sendMsg+0x188a>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012236:	f081 0390 	eor.w	r3, r1, #144	; 0x90
        tmp ^= (tmp<<4);
 801223a:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 801223e:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012240:	0913      	lsrs	r3, r2, #4
 8012242:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8012246:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 801224a:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 801224e:	b21b      	sxth	r3, r3
 8012250:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8012252:	a93a      	add	r1, sp, #232	; 0xe8
 8012254:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8012256:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 801225a:	0a15      	lsrs	r5, r2, #8
 801225c:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8012260:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8012262:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8012266:	2800      	cmp	r0, #0
 8012268:	d174      	bne.n	8012354 <mouseDriver_sendMsg+0x19c8>
	return msg->len + header_len + 2 + signature_len;
 801226a:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 801226e:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8012272:	29fe      	cmp	r1, #254	; 0xfe
 8012274:	f000 80ff 	beq.w	8012476 <mouseDriver_sendMsg+0x1aea>
	while (length > 1 && payload[length-1] == 0) {
 8012278:	2c01      	cmp	r4, #1
 801227a:	d911      	bls.n	80122a0 <mouseDriver_sendMsg+0x1914>
 801227c:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8012280:	5d1b      	ldrb	r3, [r3, r4]
 8012282:	b96b      	cbnz	r3, 80122a0 <mouseDriver_sendMsg+0x1914>
 8012284:	1e63      	subs	r3, r4, #1
 8012286:	aa80      	add	r2, sp, #512	; 0x200
 8012288:	fa52 f383 	uxtab	r3, r2, r3
 801228c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8012290:	3c01      	subs	r4, #1
 8012292:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8012294:	2c01      	cmp	r4, #1
 8012296:	d003      	beq.n	80122a0 <mouseDriver_sendMsg+0x1914>
 8012298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801229c:	2a00      	cmp	r2, #0
 801229e:	d0f7      	beq.n	8012290 <mouseDriver_sendMsg+0x1904>
		buf[0] = msg->magic;
 80122a0:	4d2b      	ldr	r5, [pc, #172]	; (8012350 <mouseDriver_sendMsg+0x19c4>)
 80122a2:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 80122a4:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 80122a6:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 80122aa:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 80122ac:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 80122b0:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 80122b2:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 80122b6:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 80122b8:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 80122bc:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 80122be:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80122c2:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 80122c4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80122c6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80122ca:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80122cc:	121a      	asrs	r2, r3, #8
 80122ce:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80122d0:	141b      	asrs	r3, r3, #16
 80122d2:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80122d4:	4622      	mov	r2, r4
 80122d6:	a93a      	add	r1, sp, #232	; 0xe8
 80122d8:	f105 000a 	add.w	r0, r5, #10
 80122dc:	f7ed ffb8 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80122e0:	f104 020a 	add.w	r2, r4, #10
 80122e4:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80122e6:	f016 0f01 	tst.w	r6, #1
 80122ea:	f040 8566 	bne.w	8012dba <mouseDriver_sendMsg+0x242e>
		header_len = MAVLINK_CORE_HEADER_LEN;
 80122ee:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80122f0:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 80122f4:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80122f6:	0a12      	lsrs	r2, r2, #8
 80122f8:	705a      	strb	r2, [r3, #1]
 80122fa:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80122fc:	4421      	add	r1, r4
 80122fe:	3103      	adds	r1, #3
 8012300:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8012302:	b289      	uxth	r1, r1
 8012304:	4812      	ldr	r0, [pc, #72]	; (8012350 <mouseDriver_sendMsg+0x19c4>)
 8012306:	f7ee f9eb 	bl	80006e0 <main_transmit_buffer>
            break;
 801230a:	f7fe bc6b 	b.w	8010be4 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 801230e:	2000      	movs	r0, #0
 8012310:	230e      	movs	r3, #14
 8012312:	e722      	b.n	801215a <mouseDriver_sendMsg+0x17ce>
	if (signing) {
 8012314:	240a      	movs	r4, #10
 8012316:	e73b      	b.n	8012190 <mouseDriver_sendMsg+0x1804>
		buf[2] = msg->incompat_flags;
 8012318:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 801231c:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 8012320:	2300      	movs	r3, #0
 8012322:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 8012326:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 801232a:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 801232e:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 8012332:	2206      	movs	r2, #6
 8012334:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8012338:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 801233c:	f88d 3011 	strb.w	r3, [sp, #17]
 8012340:	e745      	b.n	80121ce <mouseDriver_sendMsg+0x1842>
 8012342:	bf00      	nop
 8012344:	20000994 	.word	0x20000994
 8012348:	20000c2c 	.word	0x20000c2c
 801234c:	200009d8 	.word	0x200009d8
 8012350:	20000a38 	.word	0x20000a38
		mavlink_sign_packet(status->signing,
 8012354:	4b7f      	ldr	r3, [pc, #508]	; (8012554 <mouseDriver_sendMsg+0x1bc8>)
 8012356:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8012358:	2900      	cmp	r1, #0
 801235a:	d086      	beq.n	801226a <mouseDriver_sendMsg+0x18de>
 801235c:	780b      	ldrb	r3, [r1, #0]
 801235e:	f013 0f01 	tst.w	r3, #1
 8012362:	d082      	beq.n	801226a <mouseDriver_sendMsg+0x18de>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8012364:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8012368:	784b      	ldrb	r3, [r1, #1]
 801236a:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 801236e:	688b      	ldr	r3, [r1, #8]
 8012370:	68ca      	ldr	r2, [r1, #12]
 8012372:	9300      	str	r3, [sp, #0]
 8012374:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8012376:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 801237a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801237e:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8012382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012386:	1c56      	adds	r6, r2, #1
 8012388:	f143 0700 	adc.w	r7, r3, #0
 801238c:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8012390:	2600      	movs	r6, #0
 8012392:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8012394:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8012396:	4b70      	ldr	r3, [pc, #448]	; (8012558 <mouseDriver_sendMsg+0x1bcc>)
 8012398:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 801239a:	4b70      	ldr	r3, [pc, #448]	; (801255c <mouseDriver_sendMsg+0x1bd0>)
 801239c:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 801239e:	4b70      	ldr	r3, [pc, #448]	; (8012560 <mouseDriver_sendMsg+0x1bd4>)
 80123a0:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 80123a2:	4b70      	ldr	r3, [pc, #448]	; (8012564 <mouseDriver_sendMsg+0x1bd8>)
 80123a4:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 80123a6:	4b70      	ldr	r3, [pc, #448]	; (8012568 <mouseDriver_sendMsg+0x1bdc>)
 80123a8:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 80123aa:	4b70      	ldr	r3, [pc, #448]	; (801256c <mouseDriver_sendMsg+0x1be0>)
 80123ac:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 80123ae:	4b70      	ldr	r3, [pc, #448]	; (8012570 <mouseDriver_sendMsg+0x1be4>)
 80123b0:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 80123b2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80123b6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80123ba:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80123be:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80123c0:	2220      	movs	r2, #32
 80123c2:	3110      	adds	r1, #16
 80123c4:	a81d      	add	r0, sp, #116	; 0x74
 80123c6:	f7fe f9af 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 80123ca:	4622      	mov	r2, r4
 80123cc:	a902      	add	r1, sp, #8
 80123ce:	a81d      	add	r0, sp, #116	; 0x74
 80123d0:	f7fe f9aa 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80123d4:	462a      	mov	r2, r5
 80123d6:	a93a      	add	r1, sp, #232	; 0xe8
 80123d8:	a81d      	add	r0, sp, #116	; 0x74
 80123da:	f7fe f9a5 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80123de:	2202      	movs	r2, #2
 80123e0:	ab3a      	add	r3, sp, #232	; 0xe8
 80123e2:	1959      	adds	r1, r3, r5
 80123e4:	a81d      	add	r0, sp, #116	; 0x74
 80123e6:	f7fe f99f 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80123ea:	2207      	movs	r2, #7
 80123ec:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 80123f0:	a81d      	add	r0, sp, #116	; 0x74
 80123f2:	f7fe f999 	bl	8010728 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 80123f6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80123f8:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80123fc:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8012400:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8012404:	2380      	movs	r3, #128	; 0x80
 8012406:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 801240a:	2247      	movs	r2, #71	; 0x47
 801240c:	4631      	mov	r1, r6
 801240e:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8012412:	f001 f98b 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8012416:	ab0b      	add	r3, sp, #44	; 0x2c
 8012418:	442b      	add	r3, r5
 801241a:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 801241c:	0a22      	lsrs	r2, r4, #8
 801241e:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8012420:	0c22      	lsrs	r2, r4, #16
 8012422:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8012424:	0e24      	lsrs	r4, r4, #24
 8012426:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8012428:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801242a:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 801242c:	0a11      	lsrs	r1, r2, #8
 801242e:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8012430:	0c11      	lsrs	r1, r2, #16
 8012432:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8012434:	0e12      	lsrs	r2, r2, #24
 8012436:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8012438:	f105 0209 	add.w	r2, r5, #9
 801243c:	a90b      	add	r1, sp, #44	; 0x2c
 801243e:	a81d      	add	r0, sp, #116	; 0x74
 8012440:	f7fe f972 	bl	8010728 <mavlink_sha256_update>
    result[0] = p[3];
 8012444:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8012448:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 801244c:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8012450:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8012454:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8012458:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 801245c:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8012460:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8012464:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8012468:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 801246c:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8012470:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8012474:	e6f9      	b.n	801226a <mouseDriver_sendMsg+0x18de>
		buf[0] = msg->magic;
 8012476:	4d3f      	ldr	r5, [pc, #252]	; (8012574 <mouseDriver_sendMsg+0x1be8>)
 8012478:	23fe      	movs	r3, #254	; 0xfe
 801247a:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 801247c:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 801247e:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8012482:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8012484:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8012488:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 801248a:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801248e:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8012490:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8012492:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8012496:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8012498:	4622      	mov	r2, r4
 801249a:	a93a      	add	r1, sp, #232	; 0xe8
 801249c:	1da8      	adds	r0, r5, #6
 801249e:	f7ed fed7 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80124a2:	1da3      	adds	r3, r4, #6
 80124a4:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80124a6:	2105      	movs	r1, #5
 80124a8:	e722      	b.n	80122f0 <mouseDriver_sendMsg+0x1964>
 * @param msg The MAVLink message to compress the data into
 * @param raw_sensor C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_raw_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_sensor_t* raw_sensor)
{
    return mavlink_msg_raw_sensor_pack(system_id, component_id, msg, raw_sensor->time, raw_sensor->sensor_id, raw_sensor->delta_x, raw_sensor->delta_y, raw_sensor->squal, raw_sensor->lift, raw_sensor->product_id, raw_sensor->srom_id);
 80124aa:	4a33      	ldr	r2, [pc, #204]	; (8012578 <mouseDriver_sendMsg+0x1bec>)
 80124ac:	7a16      	ldrb	r6, [r2, #8]
 80124ae:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80124b2:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80124b6:	7a55      	ldrb	r5, [r2, #9]
 80124b8:	7a94      	ldrb	r4, [r2, #10]
 80124ba:	7ad0      	ldrb	r0, [r2, #11]
 80124bc:	7b11      	ldrb	r1, [r2, #12]
    packet.time = time;
 80124be:	ab06      	add	r3, sp, #24
 80124c0:	6812      	ldr	r2, [r2, #0]
 80124c2:	9206      	str	r2, [sp, #24]
    packet.delta_x = delta_x;
 80124c4:	f8ad c01c 	strh.w	ip, [sp, #28]
    packet.delta_y = delta_y;
 80124c8:	f8ad 701e 	strh.w	r7, [sp, #30]
    packet.sensor_id = sensor_id;
 80124cc:	f88d 6020 	strb.w	r6, [sp, #32]
    packet.squal = squal;
 80124d0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
    packet.lift = lift;
 80124d4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    packet.product_id = product_id;
 80124d8:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    packet.srom_id = srom_id;
 80124dc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RAW_SENSOR_LEN);
 80124e0:	ac3a      	add	r4, sp, #232	; 0xe8
 80124e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80124e4:	c407      	stmia	r4!, {r0, r1, r2}
 80124e6:	7023      	strb	r3, [r4, #0]
    msg->msgid = MAVLINK_MSG_ID_RAW_SENSOR;
 80124e8:	2300      	movs	r3, #0
 80124ea:	2208      	movs	r2, #8
 80124ec:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 80124f0:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 80124f4:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80124f8:	4b16      	ldr	r3, [pc, #88]	; (8012554 <mouseDriver_sendMsg+0x1bc8>)
 80124fa:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80124fc:	f013 0602 	ands.w	r6, r3, #2
 8012500:	d13c      	bne.n	801257c <mouseDriver_sendMsg+0x1bf0>
 8012502:	4b14      	ldr	r3, [pc, #80]	; (8012554 <mouseDriver_sendMsg+0x1bc8>)
 8012504:	691b      	ldr	r3, [r3, #16]
 8012506:	b123      	cbz	r3, 8012512 <mouseDriver_sendMsg+0x1b86>
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	f013 0f01 	tst.w	r3, #1
 801250e:	f040 851d 	bne.w	8012f4c <mouseDriver_sendMsg+0x25c0>
		msg->magic = MAVLINK_STX;
 8012512:	23fd      	movs	r3, #253	; 0xfd
 8012514:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012518:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801251c:	2b00      	cmp	r3, #0
 801251e:	f040 80f8 	bne.w	8012712 <mouseDriver_sendMsg+0x1d86>
 8012522:	2000      	movs	r0, #0
 8012524:	aa3d      	add	r2, sp, #244	; 0xf4
		length--;
 8012526:	230c      	movs	r3, #12
	while (length > 1 && payload[length-1] == 0) {
 8012528:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801252c:	b919      	cbnz	r1, 8012536 <mouseDriver_sendMsg+0x1baa>
		length--;
 801252e:	3b01      	subs	r3, #1
 8012530:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8012532:	2b01      	cmp	r3, #1
 8012534:	d1f8      	bne.n	8012528 <mouseDriver_sendMsg+0x1b9c>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012536:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 801253a:	2200      	movs	r2, #0
 801253c:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012540:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 8012544:	2800      	cmp	r0, #0
 8012546:	f000 80e7 	beq.w	8012718 <mouseDriver_sendMsg+0x1d8c>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 801254a:	2201      	movs	r2, #1
 801254c:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 8012550:	240a      	movs	r4, #10
 8012552:	e022      	b.n	801259a <mouseDriver_sendMsg+0x1c0e>
 8012554:	200009d8 	.word	0x200009d8
 8012558:	6a09e667 	.word	0x6a09e667
 801255c:	bb67ae85 	.word	0xbb67ae85
 8012560:	3c6ef372 	.word	0x3c6ef372
 8012564:	a54ff53a 	.word	0xa54ff53a
 8012568:	510e527f 	.word	0x510e527f
 801256c:	9b05688c 	.word	0x9b05688c
 8012570:	1f83d9ab 	.word	0x1f83d9ab
 8012574:	20000a38 	.word	0x20000a38
 8012578:	2000099c 	.word	0x2000099c
		msg->magic = MAVLINK_STX_MAVLINK1;
 801257c:	23fe      	movs	r3, #254	; 0xfe
 801257e:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012582:	230d      	movs	r3, #13
 8012584:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012588:	2000      	movs	r0, #0
 801258a:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 801258e:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8012592:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8012594:	2200      	movs	r2, #0
 8012596:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 801259a:	2200      	movs	r2, #0
 801259c:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 80125a0:	49be      	ldr	r1, [pc, #760]	; (801289c <mouseDriver_sendMsg+0x1f10>)
 80125a2:	798a      	ldrb	r2, [r1, #6]
 80125a4:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 80125a8:	1c55      	adds	r5, r2, #1
 80125aa:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 80125ac:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80125b0:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 80125b4:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 80125b8:	2e00      	cmp	r6, #0
 80125ba:	f000 80af 	beq.w	801271c <mouseDriver_sendMsg+0x1d90>
		buf[2] = msg->seq;
 80125be:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 80125c2:	2300      	movs	r3, #0
 80125c4:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 80125c8:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 80125cc:	2308      	movs	r3, #8
 80125ce:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 80125d2:	1ea6      	subs	r6, r4, #2
 80125d4:	b2b6      	uxth	r6, r6
 80125d6:	ab80      	add	r3, sp, #512	; 0x200
 80125d8:	441e      	add	r6, r3
 80125da:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 80125de:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 80125e2:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80125e6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80125ea:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 80125ec:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80125f0:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80125f2:	0913      	lsrs	r3, r2, #4
 80125f4:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80125f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80125fc:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8012600:	42b5      	cmp	r5, r6
 8012602:	d1f0      	bne.n	80125e6 <mouseDriver_sendMsg+0x1c5a>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8012604:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8012608:	b2ba      	uxth	r2, r7
	while (length--) {
 801260a:	1e53      	subs	r3, r2, #1
 801260c:	b29b      	uxth	r3, r3
 801260e:	b1a2      	cbz	r2, 801263a <mouseDriver_sendMsg+0x1cae>
 8012610:	aa80      	add	r2, sp, #512	; 0x200
 8012612:	4413      	add	r3, r2
 8012614:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8012618:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801261a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801261e:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8012620:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8012624:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012626:	091a      	lsrs	r2, r3, #4
 8012628:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 801262c:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8012630:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8012634:	b299      	uxth	r1, r3
	while (length--) {
 8012636:	42b5      	cmp	r5, r6
 8012638:	d1ef      	bne.n	801261a <mouseDriver_sendMsg+0x1c8e>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 801263a:	f081 034b 	eor.w	r3, r1, #75	; 0x4b
        tmp ^= (tmp<<4);
 801263e:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8012642:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012644:	0913      	lsrs	r3, r2, #4
 8012646:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 801264a:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 801264e:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8012652:	b21b      	sxth	r3, r3
 8012654:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8012656:	a93a      	add	r1, sp, #232	; 0xe8
 8012658:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 801265a:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 801265e:	0a15      	lsrs	r5, r2, #8
 8012660:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8012664:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8012666:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 801266a:	2800      	cmp	r0, #0
 801266c:	d16b      	bne.n	8012746 <mouseDriver_sendMsg+0x1dba>
	return msg->len + header_len + 2 + signature_len;
 801266e:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8012672:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8012676:	29fe      	cmp	r1, #254	; 0xfe
 8012678:	f000 80f6 	beq.w	8012868 <mouseDriver_sendMsg+0x1edc>
	while (length > 1 && payload[length-1] == 0) {
 801267c:	2c01      	cmp	r4, #1
 801267e:	d911      	bls.n	80126a4 <mouseDriver_sendMsg+0x1d18>
 8012680:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8012684:	5d1b      	ldrb	r3, [r3, r4]
 8012686:	b96b      	cbnz	r3, 80126a4 <mouseDriver_sendMsg+0x1d18>
 8012688:	1e63      	subs	r3, r4, #1
 801268a:	aa80      	add	r2, sp, #512	; 0x200
 801268c:	fa52 f383 	uxtab	r3, r2, r3
 8012690:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8012694:	3c01      	subs	r4, #1
 8012696:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8012698:	2c01      	cmp	r4, #1
 801269a:	d003      	beq.n	80126a4 <mouseDriver_sendMsg+0x1d18>
 801269c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126a0:	2a00      	cmp	r2, #0
 80126a2:	d0f7      	beq.n	8012694 <mouseDriver_sendMsg+0x1d08>
		buf[0] = msg->magic;
 80126a4:	4d7e      	ldr	r5, [pc, #504]	; (80128a0 <mouseDriver_sendMsg+0x1f14>)
 80126a6:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 80126a8:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 80126aa:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 80126ae:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 80126b0:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 80126b4:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 80126b6:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 80126ba:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 80126bc:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 80126c0:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 80126c2:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80126c6:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 80126c8:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80126ca:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80126ce:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80126d0:	121a      	asrs	r2, r3, #8
 80126d2:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80126d4:	141b      	asrs	r3, r3, #16
 80126d6:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80126d8:	4622      	mov	r2, r4
 80126da:	a93a      	add	r1, sp, #232	; 0xe8
 80126dc:	f105 000a 	add.w	r0, r5, #10
 80126e0:	f7ed fdb6 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80126e4:	f104 020a 	add.w	r2, r4, #10
 80126e8:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80126ea:	f016 0f01 	tst.w	r6, #1
 80126ee:	f040 837b 	bne.w	8012de8 <mouseDriver_sendMsg+0x245c>
		header_len = MAVLINK_CORE_HEADER_LEN;
 80126f2:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80126f4:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 80126f8:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80126fa:	0a12      	lsrs	r2, r2, #8
 80126fc:	705a      	strb	r2, [r3, #1]
 80126fe:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8012700:	4421      	add	r1, r4
 8012702:	3103      	adds	r1, #3
 8012704:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8012706:	b289      	uxth	r1, r1
 8012708:	4865      	ldr	r0, [pc, #404]	; (80128a0 <mouseDriver_sendMsg+0x1f14>)
 801270a:	f7ed ffe9 	bl	80006e0 <main_transmit_buffer>
                   HAL_Delay(1);
 801270e:	2401      	movs	r4, #1
            while (main_get_huart_tx_state() == HAL_BUSY){
 8012710:	e0d9      	b.n	80128c6 <mouseDriver_sendMsg+0x1f3a>
	while (length > 1 && payload[length-1] == 0) {
 8012712:	2000      	movs	r0, #0
 8012714:	230d      	movs	r3, #13
 8012716:	e70e      	b.n	8012536 <mouseDriver_sendMsg+0x1baa>
	if (signing) {
 8012718:	240a      	movs	r4, #10
 801271a:	e73b      	b.n	8012594 <mouseDriver_sendMsg+0x1c08>
		buf[2] = msg->incompat_flags;
 801271c:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8012720:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 8012724:	2300      	movs	r3, #0
 8012726:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 801272a:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 801272e:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 8012732:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 8012736:	2208      	movs	r2, #8
 8012738:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 801273c:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8012740:	f88d 3011 	strb.w	r3, [sp, #17]
 8012744:	e745      	b.n	80125d2 <mouseDriver_sendMsg+0x1c46>
		mavlink_sign_packet(status->signing,
 8012746:	4b55      	ldr	r3, [pc, #340]	; (801289c <mouseDriver_sendMsg+0x1f10>)
 8012748:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 801274a:	2900      	cmp	r1, #0
 801274c:	d08f      	beq.n	801266e <mouseDriver_sendMsg+0x1ce2>
 801274e:	780b      	ldrb	r3, [r1, #0]
 8012750:	f013 0f01 	tst.w	r3, #1
 8012754:	d08b      	beq.n	801266e <mouseDriver_sendMsg+0x1ce2>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8012756:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 801275a:	784b      	ldrb	r3, [r1, #1]
 801275c:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8012760:	688b      	ldr	r3, [r1, #8]
 8012762:	68ca      	ldr	r2, [r1, #12]
 8012764:	9300      	str	r3, [sp, #0]
 8012766:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8012768:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 801276c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012770:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8012774:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012778:	1c56      	adds	r6, r2, #1
 801277a:	f143 0700 	adc.w	r7, r3, #0
 801277e:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8012782:	2600      	movs	r6, #0
 8012784:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8012786:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8012788:	4b46      	ldr	r3, [pc, #280]	; (80128a4 <mouseDriver_sendMsg+0x1f18>)
 801278a:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 801278c:	4b46      	ldr	r3, [pc, #280]	; (80128a8 <mouseDriver_sendMsg+0x1f1c>)
 801278e:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8012790:	4b46      	ldr	r3, [pc, #280]	; (80128ac <mouseDriver_sendMsg+0x1f20>)
 8012792:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8012794:	4b46      	ldr	r3, [pc, #280]	; (80128b0 <mouseDriver_sendMsg+0x1f24>)
 8012796:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8012798:	4b46      	ldr	r3, [pc, #280]	; (80128b4 <mouseDriver_sendMsg+0x1f28>)
 801279a:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 801279c:	4b46      	ldr	r3, [pc, #280]	; (80128b8 <mouseDriver_sendMsg+0x1f2c>)
 801279e:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 80127a0:	4b46      	ldr	r3, [pc, #280]	; (80128bc <mouseDriver_sendMsg+0x1f30>)
 80127a2:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 80127a4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80127a8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80127ac:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80127b0:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80127b2:	2220      	movs	r2, #32
 80127b4:	3110      	adds	r1, #16
 80127b6:	a81d      	add	r0, sp, #116	; 0x74
 80127b8:	f7fd ffb6 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 80127bc:	4622      	mov	r2, r4
 80127be:	a902      	add	r1, sp, #8
 80127c0:	a81d      	add	r0, sp, #116	; 0x74
 80127c2:	f7fd ffb1 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80127c6:	462a      	mov	r2, r5
 80127c8:	a93a      	add	r1, sp, #232	; 0xe8
 80127ca:	a81d      	add	r0, sp, #116	; 0x74
 80127cc:	f7fd ffac 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80127d0:	2202      	movs	r2, #2
 80127d2:	ab3a      	add	r3, sp, #232	; 0xe8
 80127d4:	1959      	adds	r1, r3, r5
 80127d6:	a81d      	add	r0, sp, #116	; 0x74
 80127d8:	f7fd ffa6 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80127dc:	2207      	movs	r2, #7
 80127de:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 80127e2:	a81d      	add	r0, sp, #116	; 0x74
 80127e4:	f7fd ffa0 	bl	8010728 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 80127e8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80127ea:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80127ee:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 80127f2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 80127f6:	2380      	movs	r3, #128	; 0x80
 80127f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80127fc:	2247      	movs	r2, #71	; 0x47
 80127fe:	4631      	mov	r1, r6
 8012800:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8012804:	f000 ff92 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8012808:	ab0b      	add	r3, sp, #44	; 0x2c
 801280a:	442b      	add	r3, r5
 801280c:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 801280e:	0a22      	lsrs	r2, r4, #8
 8012810:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8012812:	0c22      	lsrs	r2, r4, #16
 8012814:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8012816:	0e24      	lsrs	r4, r4, #24
 8012818:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 801281a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801281c:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 801281e:	0a11      	lsrs	r1, r2, #8
 8012820:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8012822:	0c11      	lsrs	r1, r2, #16
 8012824:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8012826:	0e12      	lsrs	r2, r2, #24
 8012828:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 801282a:	f105 0209 	add.w	r2, r5, #9
 801282e:	a90b      	add	r1, sp, #44	; 0x2c
 8012830:	a81d      	add	r0, sp, #116	; 0x74
 8012832:	f7fd ff79 	bl	8010728 <mavlink_sha256_update>
    result[0] = p[3];
 8012836:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 801283a:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 801283e:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8012842:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8012846:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 801284a:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 801284e:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8012852:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8012856:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 801285a:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 801285e:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8012862:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8012866:	e702      	b.n	801266e <mouseDriver_sendMsg+0x1ce2>
		buf[0] = msg->magic;
 8012868:	4d0d      	ldr	r5, [pc, #52]	; (80128a0 <mouseDriver_sendMsg+0x1f14>)
 801286a:	23fe      	movs	r3, #254	; 0xfe
 801286c:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 801286e:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8012870:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8012874:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8012876:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 801287a:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 801287c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8012880:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8012882:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8012884:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8012888:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 801288a:	4622      	mov	r2, r4
 801288c:	a93a      	add	r1, sp, #232	; 0xe8
 801288e:	1da8      	adds	r0, r5, #6
 8012890:	f7ed fcde 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8012894:	1da3      	adds	r3, r4, #6
 8012896:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8012898:	2105      	movs	r1, #5
 801289a:	e72b      	b.n	80126f4 <mouseDriver_sendMsg+0x1d68>
 801289c:	200009d8 	.word	0x200009d8
 80128a0:	20000a38 	.word	0x20000a38
 80128a4:	6a09e667 	.word	0x6a09e667
 80128a8:	bb67ae85 	.word	0xbb67ae85
 80128ac:	3c6ef372 	.word	0x3c6ef372
 80128b0:	a54ff53a 	.word	0xa54ff53a
 80128b4:	510e527f 	.word	0x510e527f
 80128b8:	9b05688c 	.word	0x9b05688c
 80128bc:	1f83d9ab 	.word	0x1f83d9ab
                   HAL_Delay(1);
 80128c0:	4620      	mov	r0, r4
 80128c2:	f7ef fc13 	bl	80020ec <HAL_Delay>
            while (main_get_huart_tx_state() == HAL_BUSY){
 80128c6:	f7ed ff03 	bl	80006d0 <main_get_huart_tx_state>
 80128ca:	2802      	cmp	r0, #2
 80128cc:	d0f8      	beq.n	80128c0 <mouseDriver_sendMsg+0x1f34>
    return mavlink_msg_raw_sensor_pack(system_id, component_id, msg, raw_sensor->time, raw_sensor->sensor_id, raw_sensor->delta_x, raw_sensor->delta_y, raw_sensor->squal, raw_sensor->lift, raw_sensor->product_id, raw_sensor->srom_id);
 80128ce:	4a9d      	ldr	r2, [pc, #628]	; (8012b44 <mouseDriver_sendMsg+0x21b8>)
 80128d0:	7d56      	ldrb	r6, [r2, #21]
 80128d2:	f9b2 c011 	ldrsh.w	ip, [r2, #17]
 80128d6:	f9b2 7013 	ldrsh.w	r7, [r2, #19]
 80128da:	7d95      	ldrb	r5, [r2, #22]
 80128dc:	7dd4      	ldrb	r4, [r2, #23]
 80128de:	7e10      	ldrb	r0, [r2, #24]
 80128e0:	7e51      	ldrb	r1, [r2, #25]
    packet.time = time;
 80128e2:	ab06      	add	r3, sp, #24
    return mavlink_msg_raw_sensor_pack(system_id, component_id, msg, raw_sensor->time, raw_sensor->sensor_id, raw_sensor->delta_x, raw_sensor->delta_y, raw_sensor->squal, raw_sensor->lift, raw_sensor->product_id, raw_sensor->srom_id);
 80128e4:	f8d2 200d 	ldr.w	r2, [r2, #13]
    packet.time = time;
 80128e8:	9206      	str	r2, [sp, #24]
    packet.delta_x = delta_x;
 80128ea:	f8ad c01c 	strh.w	ip, [sp, #28]
    packet.delta_y = delta_y;
 80128ee:	f8ad 701e 	strh.w	r7, [sp, #30]
    packet.sensor_id = sensor_id;
 80128f2:	f88d 6020 	strb.w	r6, [sp, #32]
    packet.squal = squal;
 80128f6:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
    packet.lift = lift;
 80128fa:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    packet.product_id = product_id;
 80128fe:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    packet.srom_id = srom_id;
 8012902:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RAW_SENSOR_LEN);
 8012906:	ac3a      	add	r4, sp, #232	; 0xe8
 8012908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801290a:	c407      	stmia	r4!, {r0, r1, r2}
 801290c:	7023      	strb	r3, [r4, #0]
    msg->msgid = MAVLINK_MSG_ID_RAW_SENSOR;
 801290e:	2300      	movs	r3, #0
 8012910:	2208      	movs	r2, #8
 8012912:	f88d 20e5 	strb.w	r2, [sp, #229]	; 0xe5
 8012916:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
 801291a:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 801291e:	4b8a      	ldr	r3, [pc, #552]	; (8012b48 <mouseDriver_sendMsg+0x21bc>)
 8012920:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012922:	f013 0602 	ands.w	r6, r3, #2
 8012926:	d128      	bne.n	801297a <mouseDriver_sendMsg+0x1fee>
 8012928:	4b87      	ldr	r3, [pc, #540]	; (8012b48 <mouseDriver_sendMsg+0x21bc>)
 801292a:	691b      	ldr	r3, [r3, #16]
 801292c:	b123      	cbz	r3, 8012938 <mouseDriver_sendMsg+0x1fac>
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	f013 0f01 	tst.w	r3, #1
 8012934:	f040 831e 	bne.w	8012f74 <mouseDriver_sendMsg+0x25e8>
		msg->magic = MAVLINK_STX;
 8012938:	23fd      	movs	r3, #253	; 0xfd
 801293a:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 801293e:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8012942:	2b00      	cmp	r3, #0
 8012944:	f040 80e4 	bne.w	8012b10 <mouseDriver_sendMsg+0x2184>
 8012948:	2000      	movs	r0, #0
 801294a:	aa3d      	add	r2, sp, #244	; 0xf4
		length--;
 801294c:	230c      	movs	r3, #12
	while (length > 1 && payload[length-1] == 0) {
 801294e:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8012952:	b919      	cbnz	r1, 801295c <mouseDriver_sendMsg+0x1fd0>
		length--;
 8012954:	3b01      	subs	r3, #1
 8012956:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8012958:	2b01      	cmp	r3, #1
 801295a:	d1f8      	bne.n	801294e <mouseDriver_sendMsg+0x1fc2>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 801295c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012960:	2200      	movs	r2, #0
 8012962:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012966:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	if (signing) {
 801296a:	2800      	cmp	r0, #0
 801296c:	f000 80d3 	beq.w	8012b16 <mouseDriver_sendMsg+0x218a>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8012970:	2201      	movs	r2, #1
 8012972:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
 8012976:	240a      	movs	r4, #10
 8012978:	e00e      	b.n	8012998 <mouseDriver_sendMsg+0x200c>
		msg->magic = MAVLINK_STX_MAVLINK1;
 801297a:	23fe      	movs	r3, #254	; 0xfe
 801297c:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012980:	230d      	movs	r3, #13
 8012982:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012986:	2000      	movs	r0, #0
 8012988:	f88d 00e3 	strb.w	r0, [sp, #227]	; 0xe3
	msg->compid = component_id;
 801298c:	f88d 00e4 	strb.w	r0, [sp, #228]	; 0xe4
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8012990:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8012992:	2200      	movs	r2, #0
 8012994:	f88d 20e0 	strb.w	r2, [sp, #224]	; 0xe0
	msg->compat_flags = 0;
 8012998:	2200      	movs	r2, #0
 801299a:	f88d 20e1 	strb.w	r2, [sp, #225]	; 0xe1
	msg->seq = status->current_tx_seq;
 801299e:	496a      	ldr	r1, [pc, #424]	; (8012b48 <mouseDriver_sendMsg+0x21bc>)
 80129a0:	798a      	ldrb	r2, [r1, #6]
 80129a2:	f88d 20e2 	strb.w	r2, [sp, #226]	; 0xe2
	status->current_tx_seq = status->current_tx_seq + 1;
 80129a6:	1c55      	adds	r5, r2, #1
 80129a8:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 80129aa:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 80129ae:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 80129b2:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 80129b6:	2e00      	cmp	r6, #0
 80129b8:	f000 80af 	beq.w	8012b1a <mouseDriver_sendMsg+0x218e>
		buf[2] = msg->seq;
 80129bc:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 80129c0:	2300      	movs	r3, #0
 80129c2:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 80129c6:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 80129ca:	2308      	movs	r3, #8
 80129cc:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 80129d0:	1ea6      	subs	r6, r4, #2
 80129d2:	b2b6      	uxth	r6, r6
 80129d4:	ab80      	add	r3, sp, #512	; 0x200
 80129d6:	441e      	add	r6, r3
 80129d8:	f5a6 76fb 	sub.w	r6, r6, #502	; 0x1f6
        *crcAccum = X25_INIT_CRC;
 80129dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 80129e0:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80129e4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80129e8:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 80129ea:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80129ee:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80129f0:	0913      	lsrs	r3, r2, #4
 80129f2:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80129f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80129fa:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80129fe:	42b5      	cmp	r5, r6
 8012a00:	d1f0      	bne.n	80129e4 <mouseDriver_sendMsg+0x2058>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8012a02:	f89d 70df 	ldrb.w	r7, [sp, #223]	; 0xdf
 8012a06:	b2ba      	uxth	r2, r7
	while (length--) {
 8012a08:	1e53      	subs	r3, r2, #1
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	b1a2      	cbz	r2, 8012a38 <mouseDriver_sendMsg+0x20ac>
 8012a0e:	aa80      	add	r2, sp, #512	; 0x200
 8012a10:	4413      	add	r3, r2
 8012a12:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8012a16:	ad3a      	add	r5, sp, #232	; 0xe8
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012a18:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012a1c:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8012a1e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8012a22:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012a24:	091a      	lsrs	r2, r3, #4
 8012a26:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8012a2a:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8012a2e:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8012a32:	b299      	uxth	r1, r3
	while (length--) {
 8012a34:	42ae      	cmp	r6, r5
 8012a36:	d1ef      	bne.n	8012a18 <mouseDriver_sendMsg+0x208c>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8012a38:	f081 034b 	eor.w	r3, r1, #75	; 0x4b
        tmp ^= (tmp<<4);
 8012a3c:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8012a40:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8012a42:	0913      	lsrs	r3, r2, #4
 8012a44:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8012a48:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8012a4c:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8012a50:	b21b      	sxth	r3, r3
 8012a52:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8012a54:	a93a      	add	r1, sp, #232	; 0xe8
 8012a56:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8012a58:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 8012a5c:	0a15      	lsrs	r5, r2, #8
 8012a5e:	f10d 01e9 	add.w	r1, sp, #233	; 0xe9
 8012a62:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8012a64:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d171      	bne.n	8012b50 <mouseDriver_sendMsg+0x21c4>
	return msg->len + header_len + 2 + signature_len;
 8012a6c:	f89d 40df 	ldrb.w	r4, [sp, #223]	; 0xdf
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8012a70:	f89d 10de 	ldrb.w	r1, [sp, #222]	; 0xde
 8012a74:	29fe      	cmp	r1, #254	; 0xfe
 8012a76:	f000 80fc 	beq.w	8012c72 <mouseDriver_sendMsg+0x22e6>
	while (length > 1 && payload[length-1] == 0) {
 8012a7a:	2c01      	cmp	r4, #1
 8012a7c:	d911      	bls.n	8012aa2 <mouseDriver_sendMsg+0x2116>
 8012a7e:	f10d 03e7 	add.w	r3, sp, #231	; 0xe7
 8012a82:	5d1b      	ldrb	r3, [r3, r4]
 8012a84:	b96b      	cbnz	r3, 8012aa2 <mouseDriver_sendMsg+0x2116>
 8012a86:	1e63      	subs	r3, r4, #1
 8012a88:	aa80      	add	r2, sp, #512	; 0x200
 8012a8a:	fa52 f383 	uxtab	r3, r2, r3
 8012a8e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8012a92:	3c01      	subs	r4, #1
 8012a94:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8012a96:	2c01      	cmp	r4, #1
 8012a98:	d003      	beq.n	8012aa2 <mouseDriver_sendMsg+0x2116>
 8012a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a9e:	2a00      	cmp	r2, #0
 8012aa0:	d0f7      	beq.n	8012a92 <mouseDriver_sendMsg+0x2106>
		buf[0] = msg->magic;
 8012aa2:	4d2a      	ldr	r5, [pc, #168]	; (8012b4c <mouseDriver_sendMsg+0x21c0>)
 8012aa4:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8012aa6:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8012aa8:	f89d 60e0 	ldrb.w	r6, [sp, #224]	; 0xe0
 8012aac:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8012aae:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 8012ab2:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8012ab4:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8012ab8:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8012aba:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8012abe:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8012ac0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8012ac4:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8012ac6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8012ac8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8012acc:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8012ace:	121a      	asrs	r2, r3, #8
 8012ad0:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8012ad2:	141b      	asrs	r3, r3, #16
 8012ad4:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8012ad6:	4622      	mov	r2, r4
 8012ad8:	a93a      	add	r1, sp, #232	; 0xe8
 8012ada:	f105 000a 	add.w	r0, r5, #10
 8012ade:	f7ed fbb7 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8012ae2:	f104 020a 	add.w	r2, r4, #10
 8012ae6:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012ae8:	f016 0f01 	tst.w	r6, #1
 8012aec:	f040 8192 	bne.w	8012e14 <mouseDriver_sendMsg+0x2488>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012af0:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012af2:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 8012af6:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012af8:	0a12      	lsrs	r2, r2, #8
 8012afa:	705a      	strb	r2, [r3, #1]
 8012afc:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8012afe:	4421      	add	r1, r4
 8012b00:	3103      	adds	r1, #3
 8012b02:	4419      	add	r1, r3
            main_transmit_buffer(outBuffer, msg_size);
 8012b04:	b289      	uxth	r1, r1
 8012b06:	4811      	ldr	r0, [pc, #68]	; (8012b4c <mouseDriver_sendMsg+0x21c0>)
 8012b08:	f7ed fdea 	bl	80006e0 <main_transmit_buffer>
}
 8012b0c:	f7fe b86a 	b.w	8010be4 <mouseDriver_sendMsg+0x258>
	while (length > 1 && payload[length-1] == 0) {
 8012b10:	2000      	movs	r0, #0
 8012b12:	230d      	movs	r3, #13
 8012b14:	e722      	b.n	801295c <mouseDriver_sendMsg+0x1fd0>
	if (signing) {
 8012b16:	240a      	movs	r4, #10
 8012b18:	e73b      	b.n	8012992 <mouseDriver_sendMsg+0x2006>
		buf[2] = msg->incompat_flags;
 8012b1a:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8012b1e:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 8012b22:	2300      	movs	r3, #0
 8012b24:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 8012b28:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 8012b2c:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 8012b30:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 8012b34:	2208      	movs	r2, #8
 8012b36:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8012b3a:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8012b3e:	f88d 3011 	strb.w	r3, [sp, #17]
 8012b42:	e745      	b.n	80129d0 <mouseDriver_sendMsg+0x2044>
 8012b44:	2000099c 	.word	0x2000099c
 8012b48:	200009d8 	.word	0x200009d8
 8012b4c:	20000a38 	.word	0x20000a38
		mavlink_sign_packet(status->signing,
 8012b50:	4bd6      	ldr	r3, [pc, #856]	; (8012eac <mouseDriver_sendMsg+0x2520>)
 8012b52:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8012b54:	2900      	cmp	r1, #0
 8012b56:	d089      	beq.n	8012a6c <mouseDriver_sendMsg+0x20e0>
 8012b58:	780b      	ldrb	r3, [r1, #0]
 8012b5a:	f013 0f01 	tst.w	r3, #1
 8012b5e:	d085      	beq.n	8012a6c <mouseDriver_sendMsg+0x20e0>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8012b60:	f89d 50df 	ldrb.w	r5, [sp, #223]	; 0xdf
	signature[0] = signing->link_id;
 8012b64:	784b      	ldrb	r3, [r1, #1]
 8012b66:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
	tstamp.t64 = signing->timestamp;
 8012b6a:	688b      	ldr	r3, [r1, #8]
 8012b6c:	68ca      	ldr	r2, [r1, #12]
 8012b6e:	9300      	str	r3, [sp, #0]
 8012b70:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8012b72:	f8cd 31f3 	str.w	r3, [sp, #499]	; 0x1f3
 8012b76:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012b7a:	f8ad 31f7 	strh.w	r3, [sp, #503]	; 0x1f7
	signing->timestamp++;
 8012b7e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012b82:	1c56      	adds	r6, r2, #1
 8012b84:	f143 0700 	adc.w	r7, r3, #0
 8012b88:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8012b8c:	2600      	movs	r6, #0
 8012b8e:	961d      	str	r6, [sp, #116]	; 0x74
    m->sz[1] = 0;
 8012b90:	961e      	str	r6, [sp, #120]	; 0x78
    A = 0x6a09e667;
 8012b92:	4bc7      	ldr	r3, [pc, #796]	; (8012eb0 <mouseDriver_sendMsg+0x2524>)
 8012b94:	931f      	str	r3, [sp, #124]	; 0x7c
    B = 0xbb67ae85;
 8012b96:	4bc7      	ldr	r3, [pc, #796]	; (8012eb4 <mouseDriver_sendMsg+0x2528>)
 8012b98:	9320      	str	r3, [sp, #128]	; 0x80
    C = 0x3c6ef372;
 8012b9a:	4bc7      	ldr	r3, [pc, #796]	; (8012eb8 <mouseDriver_sendMsg+0x252c>)
 8012b9c:	9321      	str	r3, [sp, #132]	; 0x84
    D = 0xa54ff53a;
 8012b9e:	4bc7      	ldr	r3, [pc, #796]	; (8012ebc <mouseDriver_sendMsg+0x2530>)
 8012ba0:	9322      	str	r3, [sp, #136]	; 0x88
    E = 0x510e527f;
 8012ba2:	4bc7      	ldr	r3, [pc, #796]	; (8012ec0 <mouseDriver_sendMsg+0x2534>)
 8012ba4:	9323      	str	r3, [sp, #140]	; 0x8c
    F = 0x9b05688c;
 8012ba6:	4bc7      	ldr	r3, [pc, #796]	; (8012ec4 <mouseDriver_sendMsg+0x2538>)
 8012ba8:	9324      	str	r3, [sp, #144]	; 0x90
    G = 0x1f83d9ab;
 8012baa:	4bc7      	ldr	r3, [pc, #796]	; (8012ec8 <mouseDriver_sendMsg+0x253c>)
 8012bac:	9325      	str	r3, [sp, #148]	; 0x94
    H = 0x5be0cd19;
 8012bae:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8012bb2:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8012bb6:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8012bba:	9326      	str	r3, [sp, #152]	; 0x98
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8012bbc:	2220      	movs	r2, #32
 8012bbe:	3110      	adds	r1, #16
 8012bc0:	a81d      	add	r0, sp, #116	; 0x74
 8012bc2:	f7fd fdb1 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8012bc6:	4622      	mov	r2, r4
 8012bc8:	a902      	add	r1, sp, #8
 8012bca:	a81d      	add	r0, sp, #116	; 0x74
 8012bcc:	f7fd fdac 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8012bd0:	462a      	mov	r2, r5
 8012bd2:	a93a      	add	r1, sp, #232	; 0xe8
 8012bd4:	a81d      	add	r0, sp, #116	; 0x74
 8012bd6:	f7fd fda7 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8012bda:	2202      	movs	r2, #2
 8012bdc:	ab3a      	add	r3, sp, #232	; 0xe8
 8012bde:	1959      	adds	r1, r3, r5
 8012be0:	a81d      	add	r0, sp, #116	; 0x74
 8012be2:	f7fd fda1 	bl	8010728 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8012be6:	2207      	movs	r2, #7
 8012be8:	f50d 71f9 	add.w	r1, sp, #498	; 0x1f2
 8012bec:	a81d      	add	r0, sp, #116	; 0x74
 8012bee:	f7fd fd9b 	bl	8010728 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8012bf2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8012bf4:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8012bf8:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8012bfc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8012c00:	2380      	movs	r3, #128	; 0x80
 8012c02:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8012c06:	2247      	movs	r2, #71	; 0x47
 8012c08:	4631      	mov	r1, r6
 8012c0a:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8012c0e:	f000 fd8d 	bl	801372c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8012c12:	ab0b      	add	r3, sp, #44	; 0x2c
 8012c14:	442b      	add	r3, r5
 8012c16:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8012c18:	0a22      	lsrs	r2, r4, #8
 8012c1a:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8012c1c:	0c22      	lsrs	r2, r4, #16
 8012c1e:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8012c20:	0e24      	lsrs	r4, r4, #24
 8012c22:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8012c24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012c26:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8012c28:	0a11      	lsrs	r1, r2, #8
 8012c2a:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8012c2c:	0c11      	lsrs	r1, r2, #16
 8012c2e:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8012c30:	0e12      	lsrs	r2, r2, #24
 8012c32:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8012c34:	f105 0209 	add.w	r2, r5, #9
 8012c38:	a90b      	add	r1, sp, #44	; 0x2c
 8012c3a:	a81d      	add	r0, sp, #116	; 0x74
 8012c3c:	f7fd fd74 	bl	8010728 <mavlink_sha256_update>
    result[0] = p[3];
 8012c40:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8012c44:	f88d 31f9 	strb.w	r3, [sp, #505]	; 0x1f9
    result[1] = p[2];
 8012c48:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8012c4c:	f88d 31fa 	strb.w	r3, [sp, #506]	; 0x1fa
    result[2] = p[1];
 8012c50:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8012c54:	f88d 31fb 	strb.w	r3, [sp, #507]	; 0x1fb
    result[3] = p[0];
 8012c58:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8012c5c:	f88d 31fc 	strb.w	r3, [sp, #508]	; 0x1fc
    result[4] = p[7];
 8012c60:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8012c64:	f88d 31fd 	strb.w	r3, [sp, #509]	; 0x1fd
    result[5] = p[6];
 8012c68:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8012c6c:	f88d 31fe 	strb.w	r3, [sp, #510]	; 0x1fe
 8012c70:	e6fc      	b.n	8012a6c <mouseDriver_sendMsg+0x20e0>
		buf[0] = msg->magic;
 8012c72:	4d96      	ldr	r5, [pc, #600]	; (8012ecc <mouseDriver_sendMsg+0x2540>)
 8012c74:	23fe      	movs	r3, #254	; 0xfe
 8012c76:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8012c78:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8012c7a:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8012c7e:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8012c80:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 8012c84:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8012c86:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8012c8a:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8012c8c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8012c8e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8012c92:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8012c94:	4622      	mov	r2, r4
 8012c96:	a93a      	add	r1, sp, #232	; 0xe8
 8012c98:	1da8      	adds	r0, r5, #6
 8012c9a:	f7ed fad9 	bl	8000250 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8012c9e:	1da3      	adds	r3, r4, #6
 8012ca0:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8012ca2:	2105      	movs	r1, #5
 8012ca4:	e725      	b.n	8012af2 <mouseDriver_sendMsg+0x2166>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012ca6:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012caa:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012cac:	0a09      	lsrs	r1, r1, #8
 8012cae:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012cb0:	1c99      	adds	r1, r3, #2
 8012cb2:	aa80      	add	r2, sp, #512	; 0x200
 8012cb4:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012cb8:	6855      	ldr	r5, [r2, #4]
 8012cba:	6890      	ldr	r0, [r2, #8]
 8012cbc:	f8c3 6002 	str.w	r6, [r3, #2]
 8012cc0:	f8c3 5006 	str.w	r5, [r3, #6]
 8012cc4:	f8c3 000a 	str.w	r0, [r3, #10]
 8012cc8:	7b13      	ldrb	r3, [r2, #12]
 8012cca:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012ccc:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012cce:	230d      	movs	r3, #13
 8012cd0:	f7fd bf81 	b.w	8010bd6 <mouseDriver_sendMsg+0x24a>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012cd4:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012cd8:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012cda:	0a09      	lsrs	r1, r1, #8
 8012cdc:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012cde:	1c99      	adds	r1, r3, #2
 8012ce0:	aa80      	add	r2, sp, #512	; 0x200
 8012ce2:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012ce6:	6855      	ldr	r5, [r2, #4]
 8012ce8:	6890      	ldr	r0, [r2, #8]
 8012cea:	f8c3 6002 	str.w	r6, [r3, #2]
 8012cee:	f8c3 5006 	str.w	r5, [r3, #6]
 8012cf2:	f8c3 000a 	str.w	r0, [r3, #10]
 8012cf6:	7b13      	ldrb	r3, [r2, #12]
 8012cf8:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012cfa:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012cfc:	230d      	movs	r3, #13
 8012cfe:	f7fe b967 	b.w	8010fd0 <mouseDriver_sendMsg+0x644>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012d02:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012d06:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012d08:	0a09      	lsrs	r1, r1, #8
 8012d0a:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012d0c:	1c99      	adds	r1, r3, #2
 8012d0e:	aa80      	add	r2, sp, #512	; 0x200
 8012d10:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012d14:	6855      	ldr	r5, [r2, #4]
 8012d16:	6890      	ldr	r0, [r2, #8]
 8012d18:	f8c3 6002 	str.w	r6, [r3, #2]
 8012d1c:	f8c3 5006 	str.w	r5, [r3, #6]
 8012d20:	f8c3 000a 	str.w	r0, [r3, #10]
 8012d24:	7b13      	ldrb	r3, [r2, #12]
 8012d26:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012d28:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012d2a:	230d      	movs	r3, #13
 8012d2c:	f7fe bb36 	b.w	801139c <mouseDriver_sendMsg+0xa10>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012d30:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012d34:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012d36:	0a09      	lsrs	r1, r1, #8
 8012d38:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012d3a:	1c99      	adds	r1, r3, #2
 8012d3c:	aa80      	add	r2, sp, #512	; 0x200
 8012d3e:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012d42:	6855      	ldr	r5, [r2, #4]
 8012d44:	6890      	ldr	r0, [r2, #8]
 8012d46:	f8c3 6002 	str.w	r6, [r3, #2]
 8012d4a:	f8c3 5006 	str.w	r5, [r3, #6]
 8012d4e:	f8c3 000a 	str.w	r0, [r3, #10]
 8012d52:	7b13      	ldrb	r3, [r2, #12]
 8012d54:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012d56:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012d58:	230d      	movs	r3, #13
 8012d5a:	f7fe bd13 	b.w	8011784 <mouseDriver_sendMsg+0xdf8>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012d5e:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012d62:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012d64:	0a09      	lsrs	r1, r1, #8
 8012d66:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012d68:	1c99      	adds	r1, r3, #2
 8012d6a:	aa80      	add	r2, sp, #512	; 0x200
 8012d6c:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012d70:	6855      	ldr	r5, [r2, #4]
 8012d72:	6890      	ldr	r0, [r2, #8]
 8012d74:	f8c3 6002 	str.w	r6, [r3, #2]
 8012d78:	f8c3 5006 	str.w	r5, [r3, #6]
 8012d7c:	f8c3 000a 	str.w	r0, [r3, #10]
 8012d80:	7b13      	ldrb	r3, [r2, #12]
 8012d82:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012d84:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012d86:	230d      	movs	r3, #13
 8012d88:	f7fe bee5 	b.w	8011b56 <mouseDriver_sendMsg+0x11ca>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012d8c:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012d90:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012d92:	0a09      	lsrs	r1, r1, #8
 8012d94:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012d96:	1c99      	adds	r1, r3, #2
 8012d98:	aa80      	add	r2, sp, #512	; 0x200
 8012d9a:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012d9e:	6855      	ldr	r5, [r2, #4]
 8012da0:	6890      	ldr	r0, [r2, #8]
 8012da2:	f8c3 6002 	str.w	r6, [r3, #2]
 8012da6:	f8c3 5006 	str.w	r5, [r3, #6]
 8012daa:	f8c3 000a 	str.w	r0, [r3, #10]
 8012dae:	7b13      	ldrb	r3, [r2, #12]
 8012db0:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012db2:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012db4:	230d      	movs	r3, #13
 8012db6:	f7ff b8b1 	b.w	8011f1c <mouseDriver_sendMsg+0x1590>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012dba:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012dbe:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012dc0:	0a09      	lsrs	r1, r1, #8
 8012dc2:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012dc4:	1c99      	adds	r1, r3, #2
 8012dc6:	aa80      	add	r2, sp, #512	; 0x200
 8012dc8:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012dcc:	6855      	ldr	r5, [r2, #4]
 8012dce:	6890      	ldr	r0, [r2, #8]
 8012dd0:	f8c3 6002 	str.w	r6, [r3, #2]
 8012dd4:	f8c3 5006 	str.w	r5, [r3, #6]
 8012dd8:	f8c3 000a 	str.w	r0, [r3, #10]
 8012ddc:	7b13      	ldrb	r3, [r2, #12]
 8012dde:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012de0:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012de2:	230d      	movs	r3, #13
 8012de4:	f7ff ba8a 	b.w	80122fc <mouseDriver_sendMsg+0x1970>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012de8:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012dec:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012dee:	0a09      	lsrs	r1, r1, #8
 8012df0:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012df2:	1c99      	adds	r1, r3, #2
 8012df4:	aa80      	add	r2, sp, #512	; 0x200
 8012df6:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012dfa:	6855      	ldr	r5, [r2, #4]
 8012dfc:	6890      	ldr	r0, [r2, #8]
 8012dfe:	f8c3 6002 	str.w	r6, [r3, #2]
 8012e02:	f8c3 5006 	str.w	r5, [r3, #6]
 8012e06:	f8c3 000a 	str.w	r0, [r3, #10]
 8012e0a:	7b13      	ldrb	r3, [r2, #12]
 8012e0c:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012e0e:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012e10:	230d      	movs	r3, #13
 8012e12:	e475      	b.n	8012700 <mouseDriver_sendMsg+0x1d74>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8012e14:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 8012e18:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8012e1a:	0a09      	lsrs	r1, r1, #8
 8012e1c:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8012e1e:	1c99      	adds	r1, r3, #2
 8012e20:	aa80      	add	r2, sp, #512	; 0x200
 8012e22:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8012e26:	6855      	ldr	r5, [r2, #4]
 8012e28:	6890      	ldr	r0, [r2, #8]
 8012e2a:	f8c3 6002 	str.w	r6, [r3, #2]
 8012e2e:	f8c3 5006 	str.w	r5, [r3, #6]
 8012e32:	f8c3 000a 	str.w	r0, [r3, #10]
 8012e36:	7b13      	ldrb	r3, [r2, #12]
 8012e38:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8012e3a:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8012e3c:	230d      	movs	r3, #13
 8012e3e:	e65e      	b.n	8012afe <mouseDriver_sendMsg+0x2172>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012e40:	2308      	movs	r3, #8
 8012e42:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012e46:	2200      	movs	r2, #0
 8012e48:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012e4c:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012e50:	2001      	movs	r0, #1
 8012e52:	f7fd bfe2 	b.w	8010e1a <mouseDriver_sendMsg+0x48e>
		msg->magic = MAVLINK_STX;
 8012e56:	23fd      	movs	r3, #253	; 0xfd
 8012e58:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012e5c:	f89d 30ef 	ldrb.w	r3, [sp, #239]	; 0xef
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d1ed      	bne.n	8012e40 <mouseDriver_sendMsg+0x24b4>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012e64:	2001      	movs	r0, #1
 8012e66:	f7fd bfc4 	b.w	8010df2 <mouseDriver_sendMsg+0x466>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012e6a:	230c      	movs	r3, #12
 8012e6c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012e70:	2200      	movs	r2, #0
 8012e72:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012e76:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012e7a:	2001      	movs	r0, #1
 8012e7c:	f7fe b9c7 	b.w	801120e <mouseDriver_sendMsg+0x882>
		msg->magic = MAVLINK_STX;
 8012e80:	23fd      	movs	r3, #253	; 0xfd
 8012e82:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012e86:	f89d 30f3 	ldrb.w	r3, [sp, #243]	; 0xf3
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d1ed      	bne.n	8012e6a <mouseDriver_sendMsg+0x24de>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012e8e:	2001      	movs	r0, #1
 8012e90:	f7fe b9a9 	b.w	80111e6 <mouseDriver_sendMsg+0x85a>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012e94:	2311      	movs	r3, #17
 8012e96:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012ea0:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012ea4:	2001      	movs	r0, #1
 8012ea6:	f7fe bb91 	b.w	80115cc <mouseDriver_sendMsg+0xc40>
 8012eaa:	bf00      	nop
 8012eac:	200009d8 	.word	0x200009d8
 8012eb0:	6a09e667 	.word	0x6a09e667
 8012eb4:	bb67ae85 	.word	0xbb67ae85
 8012eb8:	3c6ef372 	.word	0x3c6ef372
 8012ebc:	a54ff53a 	.word	0xa54ff53a
 8012ec0:	510e527f 	.word	0x510e527f
 8012ec4:	9b05688c 	.word	0x9b05688c
 8012ec8:	1f83d9ab 	.word	0x1f83d9ab
 8012ecc:	20000a38 	.word	0x20000a38
		msg->magic = MAVLINK_STX;
 8012ed0:	23fd      	movs	r3, #253	; 0xfd
 8012ed2:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012ed6:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d1da      	bne.n	8012e94 <mouseDriver_sendMsg+0x2508>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012ede:	2001      	movs	r0, #1
 8012ee0:	f7fe bb61 	b.w	80115a6 <mouseDriver_sendMsg+0xc1a>
		msg->magic = MAVLINK_STX;
 8012ee4:	23fd      	movs	r3, #253	; 0xfd
 8012ee6:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012eea:	f89d 30e9 	ldrb.w	r3, [sp, #233]	; 0xe9
 8012eee:	b953      	cbnz	r3, 8012f06 <mouseDriver_sendMsg+0x257a>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012ef0:	2001      	movs	r0, #1
 8012ef2:	f88d 00df 	strb.w	r0, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012efc:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
		length--;
 8012f00:	4602      	mov	r2, r0
 8012f02:	f7fe bf30 	b.w	8011d66 <mouseDriver_sendMsg+0x13da>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f06:	2001      	movs	r0, #1
 8012f08:	f7ff b812 	b.w	8011f30 <mouseDriver_sendMsg+0x15a4>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012f0c:	230e      	movs	r3, #14
 8012f0e:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012f12:	2200      	movs	r2, #0
 8012f14:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012f18:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f1c:	2001      	movs	r0, #1
 8012f1e:	f7ff b926 	b.w	801216e <mouseDriver_sendMsg+0x17e2>
		msg->magic = MAVLINK_STX;
 8012f22:	23fd      	movs	r3, #253	; 0xfd
 8012f24:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012f28:	f89d 30f5 	ldrb.w	r3, [sp, #245]	; 0xf5
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d1ed      	bne.n	8012f0c <mouseDriver_sendMsg+0x2580>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f30:	2001      	movs	r0, #1
 8012f32:	f7ff b908 	b.w	8012146 <mouseDriver_sendMsg+0x17ba>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012f36:	230d      	movs	r3, #13
 8012f38:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012f42:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f46:	2001      	movs	r0, #1
 8012f48:	f7ff baff 	b.w	801254a <mouseDriver_sendMsg+0x1bbe>
		msg->magic = MAVLINK_STX;
 8012f4c:	23fd      	movs	r3, #253	; 0xfd
 8012f4e:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012f52:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d1ed      	bne.n	8012f36 <mouseDriver_sendMsg+0x25aa>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f5a:	2001      	movs	r0, #1
 8012f5c:	f7ff bae2 	b.w	8012524 <mouseDriver_sendMsg+0x1b98>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8012f60:	230d      	movs	r3, #13
 8012f62:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	msg->sysid = system_id;
 8012f66:	2200      	movs	r2, #0
 8012f68:	f88d 20e3 	strb.w	r2, [sp, #227]	; 0xe3
	msg->compid = component_id;
 8012f6c:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f70:	2001      	movs	r0, #1
 8012f72:	e4fd      	b.n	8012970 <mouseDriver_sendMsg+0x1fe4>
		msg->magic = MAVLINK_STX;
 8012f74:	23fd      	movs	r3, #253	; 0xfd
 8012f76:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
	while (length > 1 && payload[length-1] == 0) {
 8012f7a:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d1ee      	bne.n	8012f60 <mouseDriver_sendMsg+0x25d4>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8012f82:	2001      	movs	r0, #1
 8012f84:	e4e1      	b.n	801294a <mouseDriver_sendMsg+0x1fbe>
 8012f86:	bf00      	nop

08012f88 <mouseDriver_setMode>:
void mouseDriver_setMode(uint8_t mode){
 8012f88:	b538      	push	{r3, r4, r5, lr}
    if (mode == MOUSE_MODE_STOP){
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	b1c0      	cbz	r0, 8012fc0 <mouseDriver_setMode+0x38>
    if (mode == MOUSE_MODE_AUTO_LOAD){
 8012f8e:	2802      	cmp	r0, #2
 8012f90:	d025      	beq.n	8012fde <mouseDriver_setMode+0x56>
    if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 8012f92:	4b18      	ldr	r3, [pc, #96]	; (8012ff4 <mouseDriver_setMode+0x6c>)
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	d11c      	bne.n	8012fd4 <mouseDriver_setMode+0x4c>
 8012f9a:	2803      	cmp	r0, #3
 8012f9c:	d11c      	bne.n	8012fd8 <mouseDriver_setMode+0x50>
        actual_point = 0;
 8012f9e:	4b16      	ldr	r3, [pc, #88]	; (8012ff8 <mouseDriver_setMode+0x70>)
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	701a      	strb	r2, [r3, #0]
	return (HAL_GetTick());
 8012fa4:	f7ef f878 	bl	8002098 <HAL_GetTick>
        actual_point_start_time = mouseDriver_getTime();
 8012fa8:	4b14      	ldr	r3, [pc, #80]	; (8012ffc <mouseDriver_setMode+0x74>)
 8012faa:	6018      	str	r0, [r3, #0]
        actual_speed_setpoint.setpoint_x = points[0].setpoint_x;
 8012fac:	4b14      	ldr	r3, [pc, #80]	; (8013000 <mouseDriver_setMode+0x78>)
 8012fae:	4a15      	ldr	r2, [pc, #84]	; (8013004 <mouseDriver_setMode+0x7c>)
 8012fb0:	6851      	ldr	r1, [r2, #4]
 8012fb2:	6019      	str	r1, [r3, #0]
        actual_speed_setpoint.setpoint_y = points[0].setpoint_y;
 8012fb4:	6892      	ldr	r2, [r2, #8]
 8012fb6:	605a      	str	r2, [r3, #4]
        actual_mode = mode;
 8012fb8:	4b0e      	ldr	r3, [pc, #56]	; (8012ff4 <mouseDriver_setMode+0x6c>)
 8012fba:	2203      	movs	r2, #3
 8012fbc:	701a      	strb	r2, [r3, #0]
 8012fbe:	e00d      	b.n	8012fdc <mouseDriver_setMode+0x54>
        main_stop_motors();
 8012fc0:	f7ed fb98 	bl	80006f4 <main_stop_motors>
        actual_point = 0;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	4a0c      	ldr	r2, [pc, #48]	; (8012ff8 <mouseDriver_setMode+0x70>)
 8012fc8:	7013      	strb	r3, [r2, #0]
        actual_mode = MOUSE_MODE_STOP;
 8012fca:	4d0a      	ldr	r5, [pc, #40]	; (8012ff4 <mouseDriver_setMode+0x6c>)
 8012fcc:	702b      	strb	r3, [r5, #0]
        mouseDriver_initMotorSignal();
 8012fce:	f7fd fcb9 	bl	8010944 <mouseDriver_initMotorSignal>
    if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 8012fd2:	782b      	ldrb	r3, [r5, #0]
    if (actual_mode != MOUSE_MODE_AUTO_RUN)
 8012fd4:	2b03      	cmp	r3, #3
 8012fd6:	d001      	beq.n	8012fdc <mouseDriver_setMode+0x54>
        actual_mode = mode;
 8012fd8:	4b06      	ldr	r3, [pc, #24]	; (8012ff4 <mouseDriver_setMode+0x6c>)
 8012fda:	701c      	strb	r4, [r3, #0]
}
 8012fdc:	bd38      	pop	{r3, r4, r5, pc}
        actual_mode = mode;
 8012fde:	4d05      	ldr	r5, [pc, #20]	; (8012ff4 <mouseDriver_setMode+0x6c>)
 8012fe0:	2302      	movs	r3, #2
 8012fe2:	702b      	strb	r3, [r5, #0]
        mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	f7fd fcd1 	bl	801098c <mouseDriver_sendMsg>
    if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 8012fea:	782b      	ldrb	r3, [r5, #0]
 8012fec:	2b02      	cmp	r3, #2
 8012fee:	d0f3      	beq.n	8012fd8 <mouseDriver_setMode+0x50>
 8012ff0:	e7f0      	b.n	8012fd4 <mouseDriver_setMode+0x4c>
 8012ff2:	bf00      	nop
 8012ff4:	20000985 	.word	0x20000985
 8012ff8:	20000994 	.word	0x20000994
 8012ffc:	20000998 	.word	0x20000998
 8013000:	200009cc 	.word	0x200009cc
 8013004:	20000c2c 	.word	0x20000c2c

08013008 <mouseDriver_control_idle>:
void mouseDriver_control_idle(void){
 8013008:	b508      	push	{r3, lr}
	if (actual_speed_measure.valid == 0){
 801300a:	4b2b      	ldr	r3, [pc, #172]	; (80130b8 <mouseDriver_control_idle+0xb0>)
 801300c:	7c1b      	ldrb	r3, [r3, #16]
 801300e:	b963      	cbnz	r3, 801302a <mouseDriver_control_idle+0x22>
		count ++;
 8013010:	4a2a      	ldr	r2, [pc, #168]	; (80130bc <mouseDriver_control_idle+0xb4>)
 8013012:	6813      	ldr	r3, [r2, #0]
 8013014:	3301      	adds	r3, #1
 8013016:	6013      	str	r3, [r2, #0]
		if(count >= MAX_MISSING_MEASURES){
 8013018:	2b0e      	cmp	r3, #14
 801301a:	dc00      	bgt.n	801301e <mouseDriver_control_idle+0x16>
}
 801301c:	bd08      	pop	{r3, pc}
			main_stop_motors();
 801301e:	f7ed fb69 	bl	80006f4 <main_stop_motors>
			mouseDriver_setMode(MOUSE_MODE_STOP);
 8013022:	2000      	movs	r0, #0
 8013024:	f7ff ffb0 	bl	8012f88 <mouseDriver_setMode>
 8013028:	e7f8      	b.n	801301c <mouseDriver_control_idle+0x14>
	if (actual_mode == MOUSE_MODE_SPEED || actual_mode == MOUSE_MODE_AUTO_RUN){
 801302a:	4b25      	ldr	r3, [pc, #148]	; (80130c0 <mouseDriver_control_idle+0xb8>)
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8013032:	2b01      	cmp	r3, #1
 8013034:	d006      	beq.n	8013044 <mouseDriver_control_idle+0x3c>
		actual_motor_signal.motor_x = 0;
 8013036:	4b23      	ldr	r3, [pc, #140]	; (80130c4 <mouseDriver_control_idle+0xbc>)
 8013038:	2200      	movs	r2, #0
 801303a:	605a      	str	r2, [r3, #4]
		actual_motor_signal.motor_y = 0;
 801303c:	609a      	str	r2, [r3, #8]
		main_stop_motors();
 801303e:	f7ed fb59 	bl	80006f4 <main_stop_motors>
 8013042:	e7eb      	b.n	801301c <mouseDriver_control_idle+0x14>
	return (HAL_GetTick());
 8013044:	f7ef f828 	bl	8002098 <HAL_GetTick>
		actual_motor_signal.time = mouseDriver_getTime();
 8013048:	4b1e      	ldr	r3, [pc, #120]	; (80130c4 <mouseDriver_control_idle+0xbc>)
 801304a:	6018      	str	r0, [r3, #0]
		actual_motor_signal.motor_x = (float)K*(actual_speed_setpoint.setpoint_x-actual_speed_measure.speed_x);
 801304c:	491e      	ldr	r1, [pc, #120]	; (80130c8 <mouseDriver_control_idle+0xc0>)
 801304e:	4a1a      	ldr	r2, [pc, #104]	; (80130b8 <mouseDriver_control_idle+0xb0>)
 8013050:	ed91 7a00 	vldr	s14, [r1]
 8013054:	edd2 7a02 	vldr	s15, [r2, #8]
 8013058:	ee37 7a67 	vsub.f32	s14, s14, s15
 801305c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8013060:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013064:	ed83 7a01 	vstr	s14, [r3, #4]
		actual_motor_signal.motor_y = (float)K*(actual_speed_setpoint.setpoint_y-actual_speed_measure.speed_y);
 8013068:	edd1 7a01 	vldr	s15, [r1, #4]
 801306c:	ed92 6a03 	vldr	s12, [r2, #12]
 8013070:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013074:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013078:	edc3 7a02 	vstr	s15, [r3, #8]
		if (actual_motor_signal.motor_x > MAX_MOTOR_SIGNAL){
 801307c:	eddf 6a13 	vldr	s13, [pc, #76]	; 80130cc <mouseDriver_control_idle+0xc4>
 8013080:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		    actual_motor_signal.motor_x = MAX_MOTOR_SIGNAL;
 8013088:	bfc4      	itt	gt
 801308a:	ee16 2a90 	vmovgt	r2, s13
 801308e:	605a      	strgt	r2, [r3, #4]
		if(actual_motor_signal.motor_y  > MAX_MOTOR_SIGNAL){
 8013090:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80130cc <mouseDriver_control_idle+0xc4>
 8013094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801309c:	dd02      	ble.n	80130a4 <mouseDriver_control_idle+0x9c>
            actual_motor_signal.motor_y = MAX_MOTOR_SIGNAL;
 801309e:	4b09      	ldr	r3, [pc, #36]	; (80130c4 <mouseDriver_control_idle+0xbc>)
 80130a0:	ed83 7a02 	vstr	s14, [r3, #8]
		main_set_motors_speed(actual_motor_signal);
 80130a4:	4b07      	ldr	r3, [pc, #28]	; (80130c4 <mouseDriver_control_idle+0xbc>)
 80130a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80130aa:	f7ed fb31 	bl	8000710 <main_set_motors_speed>
		count = 0;
 80130ae:	4b03      	ldr	r3, [pc, #12]	; (80130bc <mouseDriver_control_idle+0xb4>)
 80130b0:	2200      	movs	r2, #0
 80130b2:	601a      	str	r2, [r3, #0]
 80130b4:	e7b2      	b.n	801301c <mouseDriver_control_idle+0x14>
 80130b6:	bf00      	nop
 80130b8:	200009b8 	.word	0x200009b8
 80130bc:	200009d4 	.word	0x200009d4
 80130c0:	20000985 	.word	0x20000985
 80130c4:	20000988 	.word	0x20000988
 80130c8:	200009cc 	.word	0x200009cc
 80130cc:	42c80000 	.word	0x42c80000

080130d0 <mouseDriver_idle>:
void mouseDriver_idle (void){
 80130d0:	b510      	push	{r4, lr}
    uint64_t difference = 0;
    sensorDriver_motion_read_speed(actual_raw_sensor, &actual_speed_measure);
 80130d2:	4944      	ldr	r1, [pc, #272]	; (80131e4 <mouseDriver_idle+0x114>)
 80130d4:	4844      	ldr	r0, [pc, #272]	; (80131e8 <mouseDriver_idle+0x118>)
 80130d6:	f000 fa41 	bl	801355c <sensorDriver_motion_read_speed>
    switch(actual_mode){
 80130da:	4b44      	ldr	r3, [pc, #272]	; (80131ec <mouseDriver_idle+0x11c>)
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	2b03      	cmp	r3, #3
 80130e0:	d810      	bhi.n	8013104 <mouseDriver_idle+0x34>
 80130e2:	e8df f003 	tbb	[pc, r3]
 80130e6:	1402      	.short	0x1402
 80130e8:	2b1d      	.short	0x2b1d
    case MOUSE_MODE_STOP:
        mouseDriver_initSetpoint();
 80130ea:	f7fd fbfb 	bl	80108e4 <mouseDriver_initSetpoint>
        mouseDriver_initMotorSignal();
 80130ee:	f7fd fc29 	bl	8010944 <mouseDriver_initMotorSignal>
	return (HAL_GetTick());
 80130f2:	f7ee ffd1 	bl	8002098 <HAL_GetTick>
        actual_motor_signal.time = mouseDriver_getTime();
 80130f6:	4b3e      	ldr	r3, [pc, #248]	; (80131f0 <mouseDriver_idle+0x120>)
 80130f8:	6018      	str	r0, [r3, #0]
        main_stop_motors();
 80130fa:	f7ed fafb 	bl	80006f4 <main_stop_motors>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 80130fe:	2001      	movs	r0, #1
 8013100:	f7fd fc44 	bl	801098c <mouseDriver_sendMsg>
        mouseDriver_control_idle();
        break;
    default:
        break;
    }
    if (send_msg == 1){
 8013104:	4b3b      	ldr	r3, [pc, #236]	; (80131f4 <mouseDriver_idle+0x124>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2b01      	cmp	r3, #1
 801310a:	d058      	beq.n	80131be <mouseDriver_idle+0xee>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_RAW_SENSOR);
            mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
        }
    }

}
 801310c:	bd10      	pop	{r4, pc}
        mouseDriver_control_idle();
 801310e:	f7ff ff7b 	bl	8013008 <mouseDriver_control_idle>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 8013112:	2001      	movs	r0, #1
 8013114:	f7fd fc3a 	bl	801098c <mouseDriver_sendMsg>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 8013118:	2004      	movs	r0, #4
 801311a:	f7fd fc37 	bl	801098c <mouseDriver_sendMsg>
        break;
 801311e:	e7f1      	b.n	8013104 <mouseDriver_idle+0x34>
        if (actual_point == 255){
 8013120:	4b35      	ldr	r3, [pc, #212]	; (80131f8 <mouseDriver_idle+0x128>)
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	2bff      	cmp	r3, #255	; 0xff
 8013126:	d1ed      	bne.n	8013104 <mouseDriver_idle+0x34>
            actual_error.error = MOUSE_ROUTINE_TOO_LONG;
 8013128:	4c34      	ldr	r4, [pc, #208]	; (80131fc <mouseDriver_idle+0x12c>)
 801312a:	2303      	movs	r3, #3
 801312c:	7123      	strb	r3, [r4, #4]
	return (HAL_GetTick());
 801312e:	f7ee ffb3 	bl	8002098 <HAL_GetTick>
            actual_error.time = mouseDriver_getTime();
 8013132:	6020      	str	r0, [r4, #0]
            mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 8013134:	2007      	movs	r0, #7
 8013136:	f7fd fc29 	bl	801098c <mouseDriver_sendMsg>
 801313a:	e7e3      	b.n	8013104 <mouseDriver_idle+0x34>
	return (HAL_GetTick());
 801313c:	f7ee ffac 	bl	8002098 <HAL_GetTick>
        if (difference >= points[actual_point].duration){
 8013140:	4b2d      	ldr	r3, [pc, #180]	; (80131f8 <mouseDriver_idle+0x128>)
 8013142:	781b      	ldrb	r3, [r3, #0]
        difference = mouseDriver_getTime()-actual_point_start_time;
 8013144:	4a2e      	ldr	r2, [pc, #184]	; (8013200 <mouseDriver_idle+0x130>)
 8013146:	6812      	ldr	r2, [r2, #0]
 8013148:	1a80      	subs	r0, r0, r2
        if (difference >= points[actual_point].duration){
 801314a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 801314e:	4a2d      	ldr	r2, [pc, #180]	; (8013204 <mouseDriver_idle+0x134>)
 8013150:	f852 2011 	ldr.w	r2, [r2, r1, lsl #1]
 8013154:	4290      	cmp	r0, r2
 8013156:	d321      	bcc.n	801319c <mouseDriver_idle+0xcc>
            if (actual_point < MAX_POINTS-1){
 8013158:	2bfd      	cmp	r3, #253	; 0xfd
 801315a:	d81f      	bhi.n	801319c <mouseDriver_idle+0xcc>
                actual_point++;
 801315c:	3301      	adds	r3, #1
 801315e:	b2db      	uxtb	r3, r3
 8013160:	4a25      	ldr	r2, [pc, #148]	; (80131f8 <mouseDriver_idle+0x128>)
 8013162:	7013      	strb	r3, [r2, #0]
                if(points[actual_point].duration == 0){
 8013164:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013168:	4a26      	ldr	r2, [pc, #152]	; (8013204 <mouseDriver_idle+0x134>)
 801316a:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 801316e:	b913      	cbnz	r3, 8013176 <mouseDriver_idle+0xa6>
                    actual_point = 0;
 8013170:	4b21      	ldr	r3, [pc, #132]	; (80131f8 <mouseDriver_idle+0x128>)
 8013172:	2200      	movs	r2, #0
 8013174:	701a      	strb	r2, [r3, #0]
                actual_speed_setpoint.setpoint_x = points[actual_point].setpoint_x;
 8013176:	4b20      	ldr	r3, [pc, #128]	; (80131f8 <mouseDriver_idle+0x128>)
 8013178:	7819      	ldrb	r1, [r3, #0]
 801317a:	4c23      	ldr	r4, [pc, #140]	; (8013208 <mouseDriver_idle+0x138>)
 801317c:	4b21      	ldr	r3, [pc, #132]	; (8013204 <mouseDriver_idle+0x134>)
 801317e:	00ca      	lsls	r2, r1, #3
 8013180:	1a50      	subs	r0, r2, r1
 8013182:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013186:	6840      	ldr	r0, [r0, #4]
 8013188:	6020      	str	r0, [r4, #0]
                actual_speed_setpoint.setpoint_y = points[actual_point].setpoint_y;
 801318a:	1a52      	subs	r2, r2, r1
 801318c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013190:	689b      	ldr	r3, [r3, #8]
 8013192:	6063      	str	r3, [r4, #4]
	return (HAL_GetTick());
 8013194:	f7ee ff80 	bl	8002098 <HAL_GetTick>
                actual_point_start_time = mouseDriver_getTime();
 8013198:	4b19      	ldr	r3, [pc, #100]	; (8013200 <mouseDriver_idle+0x130>)
 801319a:	6018      	str	r0, [r3, #0]
        if (actual_point == MAX_POINTS){
 801319c:	4b16      	ldr	r3, [pc, #88]	; (80131f8 <mouseDriver_idle+0x128>)
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	2bff      	cmp	r3, #255	; 0xff
 80131a2:	d008      	beq.n	80131b6 <mouseDriver_idle+0xe6>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 80131a4:	2001      	movs	r0, #1
 80131a6:	f7fd fbf1 	bl	801098c <mouseDriver_sendMsg>
        mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 80131aa:	2004      	movs	r0, #4
 80131ac:	f7fd fbee 	bl	801098c <mouseDriver_sendMsg>
        mouseDriver_control_idle();
 80131b0:	f7ff ff2a 	bl	8013008 <mouseDriver_control_idle>
        break;
 80131b4:	e7a6      	b.n	8013104 <mouseDriver_idle+0x34>
            mouseDriver_setMode(MOUSE_MODE_AUTO_LOAD);
 80131b6:	2002      	movs	r0, #2
 80131b8:	f7ff fee6 	bl	8012f88 <mouseDriver_setMode>
 80131bc:	e7f2      	b.n	80131a4 <mouseDriver_idle+0xd4>
        send_msg = 0;
 80131be:	2000      	movs	r0, #0
 80131c0:	4b0c      	ldr	r3, [pc, #48]	; (80131f4 <mouseDriver_idle+0x124>)
 80131c2:	6018      	str	r0, [r3, #0]
        mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 80131c4:	f7fd fbe2 	bl	801098c <mouseDriver_sendMsg>
        if(actual_mode != MOUSE_MODE_AUTO_LOAD){
 80131c8:	4b08      	ldr	r3, [pc, #32]	; (80131ec <mouseDriver_idle+0x11c>)
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	2b02      	cmp	r3, #2
 80131ce:	d09d      	beq.n	801310c <mouseDriver_idle+0x3c>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 80131d0:	2002      	movs	r0, #2
 80131d2:	f7fd fbdb 	bl	801098c <mouseDriver_sendMsg>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_RAW_SENSOR);
 80131d6:	2008      	movs	r0, #8
 80131d8:	f7fd fbd8 	bl	801098c <mouseDriver_sendMsg>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 80131dc:	2004      	movs	r0, #4
 80131de:	f7fd fbd5 	bl	801098c <mouseDriver_sendMsg>
}
 80131e2:	e793      	b.n	801310c <mouseDriver_idle+0x3c>
 80131e4:	200009b8 	.word	0x200009b8
 80131e8:	2000099c 	.word	0x2000099c
 80131ec:	20000985 	.word	0x20000985
 80131f0:	20000988 	.word	0x20000988
 80131f4:	20000034 	.word	0x20000034
 80131f8:	20000994 	.word	0x20000994
 80131fc:	20000980 	.word	0x20000980
 8013200:	20000998 	.word	0x20000998
 8013204:	20000c2c 	.word	0x20000c2c
 8013208:	200009cc 	.word	0x200009cc

0801320c <mouseDriver_readMsg>:
void mouseDriver_readMsg(const mavlink_message_t msg){
 801320c:	b084      	sub	sp, #16
 801320e:	b538      	push	{r3, r4, r5, lr}
 8013210:	ac04      	add	r4, sp, #16
 8013212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    switch(msg.msgid){
 8013216:	9b06      	ldr	r3, [sp, #24]
 8013218:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801321c:	3b02      	subs	r3, #2
 801321e:	2b04      	cmp	r3, #4
 8013220:	d808      	bhi.n	8013234 <mouseDriver_readMsg+0x28>
 8013222:	e8df f003 	tbb	[pc, r3]
 8013226:	030b      	.short	0x030b
 8013228:	071c      	.short	0x071c
 801322a:	2d          	.byte	0x2d
 801322b:	00          	.byte	0x00

    case MAVLINK_MSG_ID_MODE_SELECTION:
        mouseDriver_setMode( mavlink_msg_mode_selection_get_mode(&msg));
 801322c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8013230:	f7ff feaa 	bl	8012f88 <mouseDriver_setMode>
        }
        break;
    default:
        break;
    };
}
 8013234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013238:	b004      	add	sp, #16
 801323a:	4770      	bx	lr
        if (actual_mode == MOUSE_MODE_SPEED)
 801323c:	4b26      	ldr	r3, [pc, #152]	; (80132d8 <mouseDriver_readMsg+0xcc>)
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	2b01      	cmp	r3, #1
 8013242:	d1f7      	bne.n	8013234 <mouseDriver_readMsg+0x28>
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    speed_setpoint->setpoint_x = mavlink_msg_speed_setpoint_get_setpoint_x(msg);
    speed_setpoint->setpoint_y = mavlink_msg_speed_setpoint_get_setpoint_y(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 8013244:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8013248:	4824      	ldr	r0, [pc, #144]	; (80132dc <mouseDriver_readMsg+0xd0>)
 801324a:	2300      	movs	r3, #0
 801324c:	6003      	str	r3, [r0, #0]
 801324e:	6043      	str	r3, [r0, #4]
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 8013250:	2a08      	cmp	r2, #8
 8013252:	bf28      	it	cs
 8013254:	2208      	movcs	r2, #8
 8013256:	a907      	add	r1, sp, #28
 8013258:	f7ec fffa 	bl	8000250 <memcpy>
 801325c:	e7ea      	b.n	8013234 <mouseDriver_readMsg+0x28>
        if (actual_mode == MOUSE_MODE_SPEED)
 801325e:	4b1e      	ldr	r3, [pc, #120]	; (80132d8 <mouseDriver_readMsg+0xcc>)
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d1e6      	bne.n	8013234 <mouseDriver_readMsg+0x28>
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 8013266:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 801326a:	481c      	ldr	r0, [pc, #112]	; (80132dc <mouseDriver_readMsg+0xd0>)
 801326c:	2300      	movs	r3, #0
 801326e:	6003      	str	r3, [r0, #0]
 8013270:	6043      	str	r3, [r0, #4]
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 8013272:	2a08      	cmp	r2, #8
 8013274:	bf28      	it	cs
 8013276:	2208      	movcs	r2, #8
 8013278:	a907      	add	r1, sp, #28
 801327a:	f7ec ffe9 	bl	8000250 <memcpy>
 801327e:	e7d9      	b.n	8013234 <mouseDriver_readMsg+0x28>
        if(actual_mode == MOUSE_MODE_AUTO_LOAD){
 8013280:	4b15      	ldr	r3, [pc, #84]	; (80132d8 <mouseDriver_readMsg+0xcc>)
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	2b02      	cmp	r3, #2
 8013286:	d1d5      	bne.n	8013234 <mouseDriver_readMsg+0x28>
            mavlink_msg_point_decode(&msg, &points[actual_point]);
 8013288:	4b15      	ldr	r3, [pc, #84]	; (80132e0 <mouseDriver_readMsg+0xd4>)
 801328a:	781c      	ldrb	r4, [r3, #0]
 801328c:	4d15      	ldr	r5, [pc, #84]	; (80132e4 <mouseDriver_readMsg+0xd8>)
 801328e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8013292:	0049      	lsls	r1, r1, #1
 8013294:	1868      	adds	r0, r5, r1
    point->duration = mavlink_msg_point_get_duration(msg);
    point->setpoint_x = mavlink_msg_point_get_setpoint_x(msg);
    point->setpoint_y = mavlink_msg_point_get_setpoint_y(msg);
    point->point_id = mavlink_msg_point_get_point_id(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POINT_LEN? msg->len : MAVLINK_MSG_ID_POINT_LEN;
 8013296:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(point, 0, MAVLINK_MSG_ID_POINT_LEN);
 801329a:	2300      	movs	r3, #0
 801329c:	506b      	str	r3, [r5, r1]
 801329e:	6043      	str	r3, [r0, #4]
 80132a0:	6083      	str	r3, [r0, #8]
 80132a2:	8183      	strh	r3, [r0, #12]
    memcpy(point, _MAV_PAYLOAD(msg), len);
 80132a4:	2a0e      	cmp	r2, #14
 80132a6:	bf28      	it	cs
 80132a8:	220e      	movcs	r2, #14
 80132aa:	a907      	add	r1, sp, #28
 80132ac:	f7ec ffd0 	bl	8000250 <memcpy>
            if (actual_point == 255){
 80132b0:	2cff      	cmp	r4, #255	; 0xff
 80132b2:	d007      	beq.n	80132c4 <mouseDriver_readMsg+0xb8>
            mouseDriver_sendMsg(MAVLINK_MSG_ID_POINT_LOADED);
 80132b4:	2005      	movs	r0, #5
 80132b6:	f7fd fb69 	bl	801098c <mouseDriver_sendMsg>
            actual_point ++;
 80132ba:	4a09      	ldr	r2, [pc, #36]	; (80132e0 <mouseDriver_readMsg+0xd4>)
 80132bc:	7813      	ldrb	r3, [r2, #0]
 80132be:	3301      	adds	r3, #1
 80132c0:	7013      	strb	r3, [r2, #0]
}
 80132c2:	e7b7      	b.n	8013234 <mouseDriver_readMsg+0x28>
                actual_error.error = MOUSE_ROUTINE_TOO_LONG;
 80132c4:	4c08      	ldr	r4, [pc, #32]	; (80132e8 <mouseDriver_readMsg+0xdc>)
 80132c6:	2303      	movs	r3, #3
 80132c8:	7123      	strb	r3, [r4, #4]
	return (HAL_GetTick());
 80132ca:	f7ee fee5 	bl	8002098 <HAL_GetTick>
                actual_error.time = mouseDriver_getTime();
 80132ce:	6020      	str	r0, [r4, #0]
                mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 80132d0:	2007      	movs	r0, #7
 80132d2:	f7fd fb5b 	bl	801098c <mouseDriver_sendMsg>
 80132d6:	e7ed      	b.n	80132b4 <mouseDriver_readMsg+0xa8>
 80132d8:	20000985 	.word	0x20000985
 80132dc:	200009cc 	.word	0x200009cc
 80132e0:	20000994 	.word	0x20000994
 80132e4:	20000c2c 	.word	0x20000c2c
 80132e8:	20000980 	.word	0x20000980

080132ec <sensorDriver_powerup>:
 \param sensor_data pointer to a structure for storing the raw sensor value
 \brief This function reads raw data from the sensor given its ID and puts the result in the pointer.
 */
void sensorDriver_motion_read_raw(uint8_t sensor_id, mavlink_raw_sensor_t * sensor_data);

void sensorDriver_powerup(sensor_t sensor){
 80132ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132f0:	b087      	sub	sp, #28
 80132f2:	ac02      	add	r4, sp, #8
 80132f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80132f8:	4606      	mov	r6, r0
 80132fa:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80132fe:	f89d 8014 	ldrb.w	r8, [sp, #20]
	/* Disable the sensor */
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 8013302:	f89d 700c 	ldrb.w	r7, [sp, #12]
 8013306:	2201      	movs	r2, #1
 8013308:	4639      	mov	r1, r7
 801330a:	f7f0 fc8d 	bl	8003c28 <HAL_GPIO_WritePin>

	/* Make sure all sensor is switched off */
	HAL_GPIO_WritePin(sensor.pw_port, sensor.pw_pin, GPIO_PIN_RESET);
 801330e:	fa1f f888 	uxth.w	r8, r8
 8013312:	2200      	movs	r2, #0
 8013314:	4641      	mov	r1, r8
 8013316:	4648      	mov	r0, r9
 8013318:	f7f0 fc86 	bl	8003c28 <HAL_GPIO_WritePin>
	main_write_sensor(sensor, 0x00, 0x00);
 801331c:	2500      	movs	r5, #0
 801331e:	9501      	str	r5, [sp, #4]
 8013320:	9500      	str	r5, [sp, #0]
 8013322:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013326:	f7ed fa61 	bl	80007ec <main_write_sensor>
	HAL_Delay(100);
 801332a:	2064      	movs	r0, #100	; 0x64
 801332c:	f7ee fede 	bl	80020ec <HAL_Delay>

	/* Gives voltage to sensors */
	HAL_GPIO_WritePin(sensor.pw_port, sensor.pw_pin , GPIO_PIN_SET);
 8013330:	2201      	movs	r2, #1
 8013332:	4641      	mov	r1, r8
 8013334:	4648      	mov	r0, r9
 8013336:	f7f0 fc77 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 801333a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801333e:	f7ee fed5 	bl	80020ec <HAL_Delay>

	/* Reset SPI port */
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin,  GPIO_PIN_SET);
 8013342:	2201      	movs	r2, #1
 8013344:	4639      	mov	r1, r7
 8013346:	4630      	mov	r0, r6
 8013348:	f7f0 fc6e 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 801334c:	2005      	movs	r0, #5
 801334e:	f7ee fecd 	bl	80020ec <HAL_Delay>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin,  GPIO_PIN_RESET);
 8013352:	462a      	mov	r2, r5
 8013354:	4639      	mov	r1, r7
 8013356:	4630      	mov	r0, r6
 8013358:	f7f0 fc66 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 801335c:	2005      	movs	r0, #5
 801335e:	f7ee fec5 	bl	80020ec <HAL_Delay>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin,  GPIO_PIN_SET);
 8013362:	2201      	movs	r2, #1
 8013364:	4639      	mov	r1, r7
 8013366:	4630      	mov	r0, r6
 8013368:	f7f0 fc5e 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 801336c:	2005      	movs	r0, #5
 801336e:	f7ee febd 	bl	80020ec <HAL_Delay>

	/* Write to Power_up_Reset register */
	main_write_sensor(sensor, Power_Up_Reset, 0x5A);
 8013372:	235a      	movs	r3, #90	; 0x5a
 8013374:	9301      	str	r3, [sp, #4]
 8013376:	233a      	movs	r3, #58	; 0x3a
 8013378:	9300      	str	r3, [sp, #0]
 801337a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801337e:	f7ed fa35 	bl	80007ec <main_write_sensor>

	/* Wait at least 50 ms */
	HAL_Delay(50);
 8013382:	2032      	movs	r0, #50	; 0x32
 8013384:	f7ee feb2 	bl	80020ec <HAL_Delay>

	/* Read from data registers */
	main_read_sensor(sensor, 0x02);
 8013388:	2302      	movs	r3, #2
 801338a:	9300      	str	r3, [sp, #0]
 801338c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013390:	f7ed f9f6 	bl	8000780 <main_read_sensor>
	main_read_sensor(sensor, 0x03);
 8013394:	2303      	movs	r3, #3
 8013396:	9300      	str	r3, [sp, #0]
 8013398:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801339c:	f7ed f9f0 	bl	8000780 <main_read_sensor>
	main_read_sensor(sensor, 0x04);
 80133a0:	2304      	movs	r3, #4
 80133a2:	9300      	str	r3, [sp, #0]
 80133a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80133a8:	f7ed f9ea 	bl	8000780 <main_read_sensor>
	main_read_sensor(sensor, 0x05);
 80133ac:	2305      	movs	r3, #5
 80133ae:	9300      	str	r3, [sp, #0]
 80133b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80133b4:	f7ed f9e4 	bl	8000780 <main_read_sensor>
	main_read_sensor(sensor, 0x06);
 80133b8:	2306      	movs	r3, #6
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80133c0:	f7ed f9de 	bl	8000780 <main_read_sensor>

	/* Start ROM Download */
	main_write_sensor(sensor, Config2, 0x20);
 80133c4:	2320      	movs	r3, #32
 80133c6:	9301      	str	r3, [sp, #4]
 80133c8:	2310      	movs	r3, #16
 80133ca:	9300      	str	r3, [sp, #0]
 80133cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80133d0:	f7ed fa0c 	bl	80007ec <main_write_sensor>
	main_write_sensor(sensor, SROM_Enable, 0x1d);
 80133d4:	231d      	movs	r3, #29
 80133d6:	9301      	str	r3, [sp, #4]
 80133d8:	f04f 0813 	mov.w	r8, #19
 80133dc:	f8cd 8000 	str.w	r8, [sp]
 80133e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80133e4:	f7ed fa02 	bl	80007ec <main_write_sensor>
	HAL_Delay(10);
 80133e8:	200a      	movs	r0, #10
 80133ea:	f7ee fe7f 	bl	80020ec <HAL_Delay>
	main_write_sensor(sensor,SROM_Enable, 0x18);
 80133ee:	2318      	movs	r3, #24
 80133f0:	9301      	str	r3, [sp, #4]
 80133f2:	f8cd 8000 	str.w	r8, [sp]
 80133f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80133fa:	f7ed f9f7 	bl	80007ec <main_write_sensor>
	main_wait_160us();
 80133fe:	f7ed f941 	bl	8000684 <main_wait_160us>
	main_wait_20us();
 8013402:	f7ed f94c 	bl	800069e <main_wait_20us>

	/* Burst start with adress */
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 8013406:	462a      	mov	r2, r5
 8013408:	4639      	mov	r1, r7
 801340a:	4630      	mov	r0, r6
 801340c:	f7f0 fc0c 	bl	8003c28 <HAL_GPIO_WritePin>
	main_write_sensor_burst(SROM_Load_Burst|0x80);
 8013410:	20e2      	movs	r0, #226	; 0xe2
 8013412:	f7ed fa17 	bl	8000844 <main_write_sensor_burst>
 8013416:	4d14      	ldr	r5, [pc, #80]	; (8013468 <sensorDriver_powerup+0x17c>)
 8013418:	1e6c      	subs	r4, r5, #1
 801341a:	f605 75fd 	addw	r5, r5, #4093	; 0xffd
	for (int i = 0; i < firmware_length; i++ ){
		main_write_sensor_burst(firmware_data[i]);
 801341e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8013422:	f7ed fa0f 	bl	8000844 <main_write_sensor_burst>
	for (int i = 0; i < firmware_length; i++ ){
 8013426:	42ac      	cmp	r4, r5
 8013428:	d1f9      	bne.n	801341e <sensorDriver_powerup+0x132>
	}
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 801342a:	2201      	movs	r2, #1
 801342c:	4639      	mov	r1, r7
 801342e:	4630      	mov	r0, r6
 8013430:	f7f0 fbfa 	bl	8003c28 <HAL_GPIO_WritePin>
	main_wait_160us();
 8013434:	f7ed f926 	bl	8000684 <main_wait_160us>
	main_wait_20us();
 8013438:	f7ed f931 	bl	800069e <main_wait_20us>
	main_wait_20us();
 801343c:	f7ed f92f 	bl	800069e <main_wait_20us>

	/* Read SROM_ID for verification */
	sensor.status = main_read_sensor(sensor, SROM_ID);
 8013440:	232a      	movs	r3, #42	; 0x2a
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	ac02      	add	r4, sp, #8
 8013446:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801344a:	f7ed f999 	bl	8000780 <main_read_sensor>
 801344e:	f88d 0015 	strb.w	r0, [sp, #21]

	/* Write to Config2 for wired mouse */
	main_write_sensor(sensor, Config2, 0x00);
 8013452:	2300      	movs	r3, #0
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	2310      	movs	r3, #16
 8013458:	9300      	str	r3, [sp, #0]
 801345a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801345e:	f7ed f9c5 	bl	80007ec <main_write_sensor>
}
 8013462:	b007      	add	sp, #28
 8013464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013468:	08013cfc 	.word	0x08013cfc

0801346c <sensorDriver_init>:
void sensorDriver_init(void){
 801346c:	b508      	push	{r3, lr}
	sensorDriver_powerup(sensor_x);
 801346e:	4b04      	ldr	r3, [pc, #16]	; (8013480 <sensorDriver_init+0x14>)
 8013470:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013472:	f7ff ff3b 	bl	80132ec <sensorDriver_powerup>
	sensorDriver_powerup(sensor_y);
 8013476:	4b03      	ldr	r3, [pc, #12]	; (8013484 <sensorDriver_init+0x18>)
 8013478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801347a:	f7ff ff37 	bl	80132ec <sensorDriver_powerup>
}
 801347e:	bd08      	pop	{r3, pc}
 8013480:	08014cfc 	.word	0x08014cfc
 8013484:	08014d0c 	.word	0x08014d0c

08013488 <sensorDriver_motion_read_raw>:
void sensorDriver_motion_read_raw(uint8_t sensor_id, mavlink_raw_sensor_t * sensor_data){
 8013488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801348c:	b08b      	sub	sp, #44	; 0x2c
 801348e:	460c      	mov	r4, r1
	uint8_t data[12];
	int16_t temp = 0;
	sensor_t sensor;

	if (sensor_id == SENSOR_X) sensor = sensor_x;
 8013490:	4605      	mov	r5, r0
 8013492:	2800      	cmp	r0, #0
 8013494:	d152      	bne.n	801353c <sensorDriver_motion_read_raw+0xb4>
 8013496:	4b2e      	ldr	r3, [pc, #184]	; (8013550 <sensorDriver_motion_read_raw+0xc8>)
 8013498:	ae03      	add	r6, sp, #12
 801349a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801349c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80134a0:	2701      	movs	r7, #1
	else if (sensor_id == SENSOR_Y) sensor = sensor_y;
	else return;
	sensor_data->sensor_id = sensor_id;
 80134a2:	7225      	strb	r5, [r4, #8]

	/* write to motion burst adress */
	main_write_sensor(sensor, Motion_Burst, 0xbb);
 80134a4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013558 <sensorDriver_motion_read_raw+0xd0>
 80134a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80134ac:	f88d 7010 	strb.w	r7, [sp, #16]
 80134b0:	2600      	movs	r6, #0
 80134b2:	f88d 6019 	strb.w	r6, [sp, #25]
 80134b6:	23bb      	movs	r3, #187	; 0xbb
 80134b8:	9301      	str	r3, [sp, #4]
 80134ba:	f04f 0950 	mov.w	r9, #80	; 0x50
 80134be:	f8cd 9000 	str.w	r9, [sp]
 80134c2:	ad03      	add	r5, sp, #12
 80134c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80134c8:	f7ed f990 	bl	80007ec <main_write_sensor>

	/* Prepare for burst */
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 80134cc:	b2bf      	uxth	r7, r7
 80134ce:	4632      	mov	r2, r6
 80134d0:	4639      	mov	r1, r7
 80134d2:	4640      	mov	r0, r8
 80134d4:	f7f0 fba8 	bl	8003c28 <HAL_GPIO_WritePin>
	sensor_data->time = mouseDriver_getTime();
 80134d8:	f7fd fa4e 	bl	8010978 <mouseDriver_getTime>
 80134dc:	6020      	str	r0, [r4, #0]
	main_write_sensor_burst(Motion_Burst);
 80134de:	4648      	mov	r0, r9
 80134e0:	f7ed f9b0 	bl	8000844 <main_write_sensor_burst>
	/* Start burst */
	main_read_sensor_motion_burst(data);
 80134e4:	a807      	add	r0, sp, #28
 80134e6:	f7ed f9bf 	bl	8000868 <main_read_sensor_motion_burst>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 80134ea:	2201      	movs	r2, #1
 80134ec:	4639      	mov	r1, r7
 80134ee:	4640      	mov	r0, r8
 80134f0:	f7f0 fb9a 	bl	8003c28 <HAL_GPIO_WritePin>
	/* END of burst */
	main_wait_20us();
 80134f4:	f7ed f8d3 	bl	800069e <main_wait_20us>

	/* Read other register for stopping burst mode */
	sensor_data->product_id = main_read_sensor(sensor,  Product_ID);
 80134f8:	9600      	str	r6, [sp, #0]
 80134fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80134fe:	f7ed f93f 	bl	8000780 <main_read_sensor>
 8013502:	72e0      	strb	r0, [r4, #11]

	/* TWO's Complement */
	temp = (data[DELTA_X_H]<<8) | (data[DELTA_X_L]);
 8013504:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013508:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801350c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	temp = ~temp + 1;
	sensor_data->delta_x = temp;
 8013510:	425b      	negs	r3, r3
 8013512:	80a3      	strh	r3, [r4, #4]
	temp = (data[DELTA_Y_H]<<8) | (data[DELTA_Y_L]);
 8013514:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8013518:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801351c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	temp = ~temp +1;
	sensor_data->delta_y = temp;
 8013520:	425b      	negs	r3, r3
 8013522:	80e3      	strh	r3, [r4, #6]

	sensor_data->squal = data[SQUAL_READ];
 8013524:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8013528:	7263      	strb	r3, [r4, #9]
	sensor_data->lift = (data[MOTION] & 0x08) >> 3;
 801352a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801352e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8013532:	72a3      	strb	r3, [r4, #10]
	sensor_data->srom_id = sensor.status;
 8013534:	7326      	strb	r6, [r4, #12]
}
 8013536:	b00b      	add	sp, #44	; 0x2c
 8013538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (sensor_id == SENSOR_Y) sensor = sensor_y;
 801353c:	2801      	cmp	r0, #1
 801353e:	d1fa      	bne.n	8013536 <sensorDriver_motion_read_raw+0xae>
 8013540:	4b04      	ldr	r3, [pc, #16]	; (8013554 <sensorDriver_motion_read_raw+0xcc>)
 8013542:	ae03      	add	r6, sp, #12
 8013544:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013546:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801354a:	2702      	movs	r7, #2
 801354c:	e7a9      	b.n	80134a2 <sensorDriver_motion_read_raw+0x1a>
 801354e:	bf00      	nop
 8013550:	08014cfc 	.word	0x08014cfc
 8013554:	08014d0c 	.word	0x08014d0c
 8013558:	48000800 	.word	0x48000800

0801355c <sensorDriver_motion_read_speed>:
void sensorDriver_motion_read_speed(mavlink_raw_sensor_t sensor_data[2], mavlink_speed_info_t * speed_info){
 801355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801355e:	b089      	sub	sp, #36	; 0x24
 8013560:	4605      	mov	r5, r0
 8013562:	460c      	mov	r4, r1
	mavlink_raw_sensor_t raw_values[2];
    uint32_t old_time[2];

    speed_info->valid = 0;
 8013564:	2000      	movs	r0, #0
 8013566:	7408      	strb	r0, [r1, #16]
    old_time[0] = speed_info->time_x;
 8013568:	680f      	ldr	r7, [r1, #0]
    old_time[1] = speed_info->time_y;
 801356a:	684e      	ldr	r6, [r1, #4]

	sensorDriver_motion_read_raw(SENSOR_X, &raw_values[0]);
 801356c:	a901      	add	r1, sp, #4
 801356e:	f7ff ff8b 	bl	8013488 <sensorDriver_motion_read_raw>
	sensorDriver_motion_read_raw(SENSOR_Y, &raw_values[1]);
 8013572:	f10d 0111 	add.w	r1, sp, #17
 8013576:	2001      	movs	r0, #1
 8013578:	f7ff ff86 	bl	8013488 <sensorDriver_motion_read_raw>

	speed_info->speed_x =  (float)raw_values[0].delta_x*(float)INCH2METER/(float)RESOLUTION;
	speed_info->speed_x /= (float)(raw_values[0].time-old_time[0])/(float)1000;
 801357c:	9b01      	ldr	r3, [sp, #4]
	speed_info->speed_x =  (float)raw_values[0].delta_x*(float)INCH2METER/(float)RESOLUTION;
 801357e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8013582:	ee07 2a10 	vmov	s14, r2
 8013586:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801358a:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8013648 <sensorDriver_motion_read_speed+0xec>
 801358e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8013592:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801364c <sensorDriver_motion_read_speed+0xf0>
 8013596:	ee87 5a06 	vdiv.f32	s10, s14, s12
	speed_info->speed_x /= (float)(raw_values[0].time-old_time[0])/(float)1000;
 801359a:	1bdf      	subs	r7, r3, r7
 801359c:	ee07 7a90 	vmov	s15, r7
 80135a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80135a4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8013650 <sensorDriver_motion_read_speed+0xf4>
 80135a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80135ac:	eec5 7a27 	vdiv.f32	s15, s10, s15
 80135b0:	ee17 2a90 	vmov	r2, s15
 80135b4:	60a2      	str	r2, [r4, #8]
	speed_info->time_x = raw_values[0].time;
 80135b6:	6023      	str	r3, [r4, #0]
	speed_info->speed_y =  (float)raw_values[1].delta_x*(float)INCH2METER/(float)RESOLUTION;
	speed_info->speed_y /= (float)(raw_values[1].time-old_time[1])/(float)1000;
 80135b8:	f8dd 3011 	ldr.w	r3, [sp, #17]
	speed_info->speed_y =  (float)raw_values[1].delta_x*(float)INCH2METER/(float)RESOLUTION;
 80135bc:	f9bd 2015 	ldrsh.w	r2, [sp, #21]
 80135c0:	ee07 2a90 	vmov	s15, r2
 80135c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80135cc:	eec7 5a86 	vdiv.f32	s11, s15, s12
	speed_info->speed_y /= (float)(raw_values[1].time-old_time[1])/(float)1000;
 80135d0:	1b9e      	subs	r6, r3, r6
 80135d2:	ee07 6a90 	vmov	s15, r6
 80135d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80135de:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80135e2:	ee17 2a90 	vmov	r2, s15
 80135e6:	60e2      	str	r2, [r4, #12]
	speed_info->time_y = raw_values[1].time;
 80135e8:	6063      	str	r3, [r4, #4]
	sensor_data[0] = raw_values[0];
 80135ea:	ab01      	add	r3, sp, #4
 80135ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80135ee:	6028      	str	r0, [r5, #0]
 80135f0:	6069      	str	r1, [r5, #4]
 80135f2:	60aa      	str	r2, [r5, #8]
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	732b      	strb	r3, [r5, #12]
	sensor_data[1] = raw_values[1];
 80135f8:	f8dd 0011 	ldr.w	r0, [sp, #17]
 80135fc:	f8dd 1015 	ldr.w	r1, [sp, #21]
 8013600:	f8dd 2019 	ldr.w	r2, [sp, #25]
 8013604:	f8c5 000d 	str.w	r0, [r5, #13]
 8013608:	f8c5 1011 	str.w	r1, [r5, #17]
 801360c:	f8c5 2015 	str.w	r2, [r5, #21]
 8013610:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8013614:	766a      	strb	r2, [r5, #25]

	if((raw_values[0].lift == 0) && (raw_values[1].lift == 0) &&
 8013616:	f89d 300e 	ldrb.w	r3, [sp, #14]
 801361a:	b953      	cbnz	r3, 8013632 <sensorDriver_motion_read_speed+0xd6>
 801361c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8013620:	b93b      	cbnz	r3, 8013632 <sensorDriver_motion_read_speed+0xd6>
 8013622:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8013626:	2b0f      	cmp	r3, #15
 8013628:	d903      	bls.n	8013632 <sensorDriver_motion_read_speed+0xd6>
		(raw_values[0].squal >= SQUAL_THRESH) && (raw_values[0].squal >= SQUAL_THRESH) &&
 801362a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801362e:	2b42      	cmp	r3, #66	; 0x42
 8013630:	d003      	beq.n	801363a <sensorDriver_motion_read_speed+0xde>
		(raw_values[0].product_id == 66) && (raw_values[1].product_id == 66)){
		speed_info->valid = 1;
	}
	else{
		speed_info->valid = 0;
 8013632:	2300      	movs	r3, #0
 8013634:	7423      	strb	r3, [r4, #16]
	}
}
 8013636:	b009      	add	sp, #36	; 0x24
 8013638:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(raw_values[0].product_id == 66) && (raw_values[1].product_id == 66)){
 801363a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801363e:	2b42      	cmp	r3, #66	; 0x42
 8013640:	d1f7      	bne.n	8013632 <sensorDriver_motion_read_speed+0xd6>
		speed_info->valid = 1;
 8013642:	2301      	movs	r3, #1
 8013644:	7423      	strb	r3, [r4, #16]
 8013646:	e7f6      	b.n	8013636 <sensorDriver_motion_read_speed+0xda>
 8013648:	3cd013a9 	.word	0x3cd013a9
 801364c:	459c4000 	.word	0x459c4000
 8013650:	447a0000 	.word	0x447a0000

08013654 <__errno>:
 8013654:	4b01      	ldr	r3, [pc, #4]	; (801365c <__errno+0x8>)
 8013656:	6818      	ldr	r0, [r3, #0]
 8013658:	4770      	bx	lr
 801365a:	bf00      	nop
 801365c:	20000038 	.word	0x20000038

08013660 <exit>:
 8013660:	b508      	push	{r3, lr}
 8013662:	2100      	movs	r1, #0
 8013664:	4604      	mov	r4, r0
 8013666:	f000 f8b5 	bl	80137d4 <__call_exitprocs>
 801366a:	4b04      	ldr	r3, [pc, #16]	; (801367c <exit+0x1c>)
 801366c:	6818      	ldr	r0, [r3, #0]
 801366e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8013670:	b103      	cbz	r3, 8013674 <exit+0x14>
 8013672:	4798      	blx	r3
 8013674:	4620      	mov	r0, r4
 8013676:	f7ee fb76 	bl	8001d66 <_exit>
 801367a:	bf00      	nop
 801367c:	08014d1c 	.word	0x08014d1c

08013680 <__libc_init_array>:
 8013680:	b570      	push	{r4, r5, r6, lr}
 8013682:	4e0d      	ldr	r6, [pc, #52]	; (80136b8 <__libc_init_array+0x38>)
 8013684:	4d0d      	ldr	r5, [pc, #52]	; (80136bc <__libc_init_array+0x3c>)
 8013686:	1b76      	subs	r6, r6, r5
 8013688:	10b6      	asrs	r6, r6, #2
 801368a:	d006      	beq.n	801369a <__libc_init_array+0x1a>
 801368c:	2400      	movs	r4, #0
 801368e:	3401      	adds	r4, #1
 8013690:	f855 3b04 	ldr.w	r3, [r5], #4
 8013694:	4798      	blx	r3
 8013696:	42a6      	cmp	r6, r4
 8013698:	d1f9      	bne.n	801368e <__libc_init_array+0xe>
 801369a:	4e09      	ldr	r6, [pc, #36]	; (80136c0 <__libc_init_array+0x40>)
 801369c:	4d09      	ldr	r5, [pc, #36]	; (80136c4 <__libc_init_array+0x44>)
 801369e:	1b76      	subs	r6, r6, r5
 80136a0:	f000 f9a2 	bl	80139e8 <_init>
 80136a4:	10b6      	asrs	r6, r6, #2
 80136a6:	d006      	beq.n	80136b6 <__libc_init_array+0x36>
 80136a8:	2400      	movs	r4, #0
 80136aa:	3401      	adds	r4, #1
 80136ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80136b0:	4798      	blx	r3
 80136b2:	42a6      	cmp	r6, r4
 80136b4:	d1f9      	bne.n	80136aa <__libc_init_array+0x2a>
 80136b6:	bd70      	pop	{r4, r5, r6, pc}
 80136b8:	08014d28 	.word	0x08014d28
 80136bc:	08014d28 	.word	0x08014d28
 80136c0:	08014d30 	.word	0x08014d30
 80136c4:	08014d28 	.word	0x08014d28

080136c8 <memcmp>:
 80136c8:	2a03      	cmp	r2, #3
 80136ca:	b470      	push	{r4, r5, r6}
 80136cc:	d914      	bls.n	80136f8 <memcmp+0x30>
 80136ce:	ea40 0501 	orr.w	r5, r0, r1
 80136d2:	07ad      	lsls	r5, r5, #30
 80136d4:	4604      	mov	r4, r0
 80136d6:	460b      	mov	r3, r1
 80136d8:	d122      	bne.n	8013720 <memcmp+0x58>
 80136da:	681d      	ldr	r5, [r3, #0]
 80136dc:	6826      	ldr	r6, [r4, #0]
 80136de:	42ae      	cmp	r6, r5
 80136e0:	4619      	mov	r1, r3
 80136e2:	4620      	mov	r0, r4
 80136e4:	f103 0304 	add.w	r3, r3, #4
 80136e8:	f104 0404 	add.w	r4, r4, #4
 80136ec:	d118      	bne.n	8013720 <memcmp+0x58>
 80136ee:	3a04      	subs	r2, #4
 80136f0:	2a03      	cmp	r2, #3
 80136f2:	4620      	mov	r0, r4
 80136f4:	4619      	mov	r1, r3
 80136f6:	d8f0      	bhi.n	80136da <memcmp+0x12>
 80136f8:	1e54      	subs	r4, r2, #1
 80136fa:	b172      	cbz	r2, 801371a <memcmp+0x52>
 80136fc:	7802      	ldrb	r2, [r0, #0]
 80136fe:	780b      	ldrb	r3, [r1, #0]
 8013700:	429a      	cmp	r2, r3
 8013702:	bf08      	it	eq
 8013704:	1864      	addeq	r4, r4, r1
 8013706:	d006      	beq.n	8013716 <memcmp+0x4e>
 8013708:	e00c      	b.n	8013724 <memcmp+0x5c>
 801370a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801370e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013712:	429a      	cmp	r2, r3
 8013714:	d106      	bne.n	8013724 <memcmp+0x5c>
 8013716:	42a1      	cmp	r1, r4
 8013718:	d1f7      	bne.n	801370a <memcmp+0x42>
 801371a:	2000      	movs	r0, #0
 801371c:	bc70      	pop	{r4, r5, r6}
 801371e:	4770      	bx	lr
 8013720:	1e54      	subs	r4, r2, #1
 8013722:	e7eb      	b.n	80136fc <memcmp+0x34>
 8013724:	1ad0      	subs	r0, r2, r3
 8013726:	bc70      	pop	{r4, r5, r6}
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop

0801372c <memset>:
 801372c:	b4f0      	push	{r4, r5, r6, r7}
 801372e:	0786      	lsls	r6, r0, #30
 8013730:	d043      	beq.n	80137ba <memset+0x8e>
 8013732:	1e54      	subs	r4, r2, #1
 8013734:	2a00      	cmp	r2, #0
 8013736:	d03e      	beq.n	80137b6 <memset+0x8a>
 8013738:	b2ca      	uxtb	r2, r1
 801373a:	4603      	mov	r3, r0
 801373c:	e002      	b.n	8013744 <memset+0x18>
 801373e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8013742:	d338      	bcc.n	80137b6 <memset+0x8a>
 8013744:	f803 2b01 	strb.w	r2, [r3], #1
 8013748:	079d      	lsls	r5, r3, #30
 801374a:	d1f8      	bne.n	801373e <memset+0x12>
 801374c:	2c03      	cmp	r4, #3
 801374e:	d92b      	bls.n	80137a8 <memset+0x7c>
 8013750:	b2cd      	uxtb	r5, r1
 8013752:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8013756:	2c0f      	cmp	r4, #15
 8013758:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801375c:	d916      	bls.n	801378c <memset+0x60>
 801375e:	f1a4 0710 	sub.w	r7, r4, #16
 8013762:	093f      	lsrs	r7, r7, #4
 8013764:	f103 0620 	add.w	r6, r3, #32
 8013768:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 801376c:	f103 0210 	add.w	r2, r3, #16
 8013770:	e942 5504 	strd	r5, r5, [r2, #-16]
 8013774:	e942 5502 	strd	r5, r5, [r2, #-8]
 8013778:	3210      	adds	r2, #16
 801377a:	42b2      	cmp	r2, r6
 801377c:	d1f8      	bne.n	8013770 <memset+0x44>
 801377e:	f004 040f 	and.w	r4, r4, #15
 8013782:	3701      	adds	r7, #1
 8013784:	2c03      	cmp	r4, #3
 8013786:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 801378a:	d90d      	bls.n	80137a8 <memset+0x7c>
 801378c:	461e      	mov	r6, r3
 801378e:	4622      	mov	r2, r4
 8013790:	3a04      	subs	r2, #4
 8013792:	2a03      	cmp	r2, #3
 8013794:	f846 5b04 	str.w	r5, [r6], #4
 8013798:	d8fa      	bhi.n	8013790 <memset+0x64>
 801379a:	1f22      	subs	r2, r4, #4
 801379c:	f022 0203 	bic.w	r2, r2, #3
 80137a0:	3204      	adds	r2, #4
 80137a2:	4413      	add	r3, r2
 80137a4:	f004 0403 	and.w	r4, r4, #3
 80137a8:	b12c      	cbz	r4, 80137b6 <memset+0x8a>
 80137aa:	b2c9      	uxtb	r1, r1
 80137ac:	441c      	add	r4, r3
 80137ae:	f803 1b01 	strb.w	r1, [r3], #1
 80137b2:	429c      	cmp	r4, r3
 80137b4:	d1fb      	bne.n	80137ae <memset+0x82>
 80137b6:	bcf0      	pop	{r4, r5, r6, r7}
 80137b8:	4770      	bx	lr
 80137ba:	4614      	mov	r4, r2
 80137bc:	4603      	mov	r3, r0
 80137be:	e7c5      	b.n	801374c <memset+0x20>

080137c0 <register_fini>:
 80137c0:	4b02      	ldr	r3, [pc, #8]	; (80137cc <register_fini+0xc>)
 80137c2:	b113      	cbz	r3, 80137ca <register_fini+0xa>
 80137c4:	4802      	ldr	r0, [pc, #8]	; (80137d0 <register_fini+0x10>)
 80137c6:	f000 b879 	b.w	80138bc <atexit>
 80137ca:	4770      	bx	lr
 80137cc:	00000000 	.word	0x00000000
 80137d0:	080138c9 	.word	0x080138c9

080137d4 <__call_exitprocs>:
 80137d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d8:	4b35      	ldr	r3, [pc, #212]	; (80138b0 <__call_exitprocs+0xdc>)
 80137da:	b085      	sub	sp, #20
 80137dc:	460f      	mov	r7, r1
 80137de:	9003      	str	r0, [sp, #12]
 80137e0:	6818      	ldr	r0, [r3, #0]
 80137e2:	f000 f895 	bl	8013910 <__retarget_lock_acquire_recursive>
 80137e6:	4b33      	ldr	r3, [pc, #204]	; (80138b4 <__call_exitprocs+0xe0>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	9301      	str	r3, [sp, #4]
 80137ec:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80137f0:	9302      	str	r3, [sp, #8]
 80137f2:	46b9      	mov	r9, r7
 80137f4:	9b01      	ldr	r3, [sp, #4]
 80137f6:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 80137fa:	b33e      	cbz	r6, 801384c <__call_exitprocs+0x78>
 80137fc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8013800:	f04f 0801 	mov.w	r8, #1
 8013804:	6874      	ldr	r4, [r6, #4]
 8013806:	1e65      	subs	r5, r4, #1
 8013808:	d40f      	bmi.n	801382a <__call_exitprocs+0x56>
 801380a:	3401      	adds	r4, #1
 801380c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8013810:	2700      	movs	r7, #0
 8013812:	f1b9 0f00 	cmp.w	r9, #0
 8013816:	d020      	beq.n	801385a <__call_exitprocs+0x86>
 8013818:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 801381c:	454b      	cmp	r3, r9
 801381e:	d01c      	beq.n	801385a <__call_exitprocs+0x86>
 8013820:	3d01      	subs	r5, #1
 8013822:	1c6b      	adds	r3, r5, #1
 8013824:	f1a4 0404 	sub.w	r4, r4, #4
 8013828:	d1f3      	bne.n	8013812 <__call_exitprocs+0x3e>
 801382a:	4b23      	ldr	r3, [pc, #140]	; (80138b8 <__call_exitprocs+0xe4>)
 801382c:	b173      	cbz	r3, 801384c <__call_exitprocs+0x78>
 801382e:	e9d6 3200 	ldrd	r3, r2, [r6]
 8013832:	2a00      	cmp	r2, #0
 8013834:	d134      	bne.n	80138a0 <__call_exitprocs+0xcc>
 8013836:	2b00      	cmp	r3, #0
 8013838:	d032      	beq.n	80138a0 <__call_exitprocs+0xcc>
 801383a:	4630      	mov	r0, r6
 801383c:	f8ca 3000 	str.w	r3, [sl]
 8013840:	f3af 8000 	nop.w
 8013844:	f8da 6000 	ldr.w	r6, [sl]
 8013848:	2e00      	cmp	r6, #0
 801384a:	d1db      	bne.n	8013804 <__call_exitprocs+0x30>
 801384c:	4b18      	ldr	r3, [pc, #96]	; (80138b0 <__call_exitprocs+0xdc>)
 801384e:	6818      	ldr	r0, [r3, #0]
 8013850:	b005      	add	sp, #20
 8013852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013856:	f000 b863 	b.w	8013920 <__retarget_lock_release_recursive>
 801385a:	6873      	ldr	r3, [r6, #4]
 801385c:	6822      	ldr	r2, [r4, #0]
 801385e:	3b01      	subs	r3, #1
 8013860:	42ab      	cmp	r3, r5
 8013862:	bf0c      	ite	eq
 8013864:	6075      	streq	r5, [r6, #4]
 8013866:	6027      	strne	r7, [r4, #0]
 8013868:	2a00      	cmp	r2, #0
 801386a:	d0d9      	beq.n	8013820 <__call_exitprocs+0x4c>
 801386c:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
 8013870:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8013874:	fa08 f305 	lsl.w	r3, r8, r5
 8013878:	420b      	tst	r3, r1
 801387a:	d108      	bne.n	801388e <__call_exitprocs+0xba>
 801387c:	4790      	blx	r2
 801387e:	6873      	ldr	r3, [r6, #4]
 8013880:	455b      	cmp	r3, fp
 8013882:	d1b7      	bne.n	80137f4 <__call_exitprocs+0x20>
 8013884:	f8da 3000 	ldr.w	r3, [sl]
 8013888:	42b3      	cmp	r3, r6
 801388a:	d0c9      	beq.n	8013820 <__call_exitprocs+0x4c>
 801388c:	e7b2      	b.n	80137f4 <__call_exitprocs+0x20>
 801388e:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 8013892:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8013896:	4203      	tst	r3, r0
 8013898:	d107      	bne.n	80138aa <__call_exitprocs+0xd6>
 801389a:	9803      	ldr	r0, [sp, #12]
 801389c:	4790      	blx	r2
 801389e:	e7ee      	b.n	801387e <__call_exitprocs+0xaa>
 80138a0:	46b2      	mov	sl, r6
 80138a2:	461e      	mov	r6, r3
 80138a4:	2e00      	cmp	r6, #0
 80138a6:	d1ad      	bne.n	8013804 <__call_exitprocs+0x30>
 80138a8:	e7d0      	b.n	801384c <__call_exitprocs+0x78>
 80138aa:	4608      	mov	r0, r1
 80138ac:	4790      	blx	r2
 80138ae:	e7e6      	b.n	801387e <__call_exitprocs+0xaa>
 80138b0:	20000468 	.word	0x20000468
 80138b4:	08014d1c 	.word	0x08014d1c
 80138b8:	00000000 	.word	0x00000000

080138bc <atexit>:
 80138bc:	2300      	movs	r3, #0
 80138be:	4601      	mov	r1, r0
 80138c0:	461a      	mov	r2, r3
 80138c2:	4618      	mov	r0, r3
 80138c4:	f000 b82e 	b.w	8013924 <__register_exitproc>

080138c8 <__libc_fini_array>:
 80138c8:	b538      	push	{r3, r4, r5, lr}
 80138ca:	4c0a      	ldr	r4, [pc, #40]	; (80138f4 <__libc_fini_array+0x2c>)
 80138cc:	4d0a      	ldr	r5, [pc, #40]	; (80138f8 <__libc_fini_array+0x30>)
 80138ce:	1b64      	subs	r4, r4, r5
 80138d0:	10a4      	asrs	r4, r4, #2
 80138d2:	d00a      	beq.n	80138ea <__libc_fini_array+0x22>
 80138d4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80138d8:	3b01      	subs	r3, #1
 80138da:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80138de:	3c01      	subs	r4, #1
 80138e0:	f855 3904 	ldr.w	r3, [r5], #-4
 80138e4:	4798      	blx	r3
 80138e6:	2c00      	cmp	r4, #0
 80138e8:	d1f9      	bne.n	80138de <__libc_fini_array+0x16>
 80138ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138ee:	f000 b881 	b.w	80139f4 <_fini>
 80138f2:	bf00      	nop
 80138f4:	08014d34 	.word	0x08014d34
 80138f8:	08014d30 	.word	0x08014d30

080138fc <__retarget_lock_init>:
 80138fc:	4770      	bx	lr
 80138fe:	bf00      	nop

08013900 <__retarget_lock_init_recursive>:
 8013900:	4770      	bx	lr
 8013902:	bf00      	nop

08013904 <__retarget_lock_close>:
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop

08013908 <__retarget_lock_close_recursive>:
 8013908:	4770      	bx	lr
 801390a:	bf00      	nop

0801390c <__retarget_lock_acquire>:
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop

08013910 <__retarget_lock_acquire_recursive>:
 8013910:	4770      	bx	lr
 8013912:	bf00      	nop

08013914 <__retarget_lock_try_acquire>:
 8013914:	2001      	movs	r0, #1
 8013916:	4770      	bx	lr

08013918 <__retarget_lock_try_acquire_recursive>:
 8013918:	2001      	movs	r0, #1
 801391a:	4770      	bx	lr

0801391c <__retarget_lock_release>:
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop

08013920 <__retarget_lock_release_recursive>:
 8013920:	4770      	bx	lr
 8013922:	bf00      	nop

08013924 <__register_exitproc>:
 8013924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013928:	4d2b      	ldr	r5, [pc, #172]	; (80139d8 <__register_exitproc+0xb4>)
 801392a:	4606      	mov	r6, r0
 801392c:	6828      	ldr	r0, [r5, #0]
 801392e:	4698      	mov	r8, r3
 8013930:	460f      	mov	r7, r1
 8013932:	4691      	mov	r9, r2
 8013934:	f7ff ffec 	bl	8013910 <__retarget_lock_acquire_recursive>
 8013938:	4b28      	ldr	r3, [pc, #160]	; (80139dc <__register_exitproc+0xb8>)
 801393a:	681c      	ldr	r4, [r3, #0]
 801393c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8013940:	2b00      	cmp	r3, #0
 8013942:	d03d      	beq.n	80139c0 <__register_exitproc+0x9c>
 8013944:	685a      	ldr	r2, [r3, #4]
 8013946:	2a1f      	cmp	r2, #31
 8013948:	dc0d      	bgt.n	8013966 <__register_exitproc+0x42>
 801394a:	f102 0c01 	add.w	ip, r2, #1
 801394e:	bb16      	cbnz	r6, 8013996 <__register_exitproc+0x72>
 8013950:	3202      	adds	r2, #2
 8013952:	f8c3 c004 	str.w	ip, [r3, #4]
 8013956:	6828      	ldr	r0, [r5, #0]
 8013958:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 801395c:	f7ff ffe0 	bl	8013920 <__retarget_lock_release_recursive>
 8013960:	2000      	movs	r0, #0
 8013962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013966:	4b1e      	ldr	r3, [pc, #120]	; (80139e0 <__register_exitproc+0xbc>)
 8013968:	b37b      	cbz	r3, 80139ca <__register_exitproc+0xa6>
 801396a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801396e:	f3af 8000 	nop.w
 8013972:	4603      	mov	r3, r0
 8013974:	b348      	cbz	r0, 80139ca <__register_exitproc+0xa6>
 8013976:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 801397a:	2100      	movs	r1, #0
 801397c:	e9c0 2100 	strd	r2, r1, [r0]
 8013980:	f04f 0c01 	mov.w	ip, #1
 8013984:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 8013988:	460a      	mov	r2, r1
 801398a:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 801398e:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 8013992:	2e00      	cmp	r6, #0
 8013994:	d0dc      	beq.n	8013950 <__register_exitproc+0x2c>
 8013996:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801399a:	2401      	movs	r4, #1
 801399c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80139a0:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 80139a4:	4094      	lsls	r4, r2
 80139a6:	4320      	orrs	r0, r4
 80139a8:	2e02      	cmp	r6, #2
 80139aa:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 80139ae:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80139b2:	d1cd      	bne.n	8013950 <__register_exitproc+0x2c>
 80139b4:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 80139b8:	430c      	orrs	r4, r1
 80139ba:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 80139be:	e7c7      	b.n	8013950 <__register_exitproc+0x2c>
 80139c0:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 80139c4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 80139c8:	e7bc      	b.n	8013944 <__register_exitproc+0x20>
 80139ca:	6828      	ldr	r0, [r5, #0]
 80139cc:	f7ff ffa8 	bl	8013920 <__retarget_lock_release_recursive>
 80139d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139d4:	e7c5      	b.n	8013962 <__register_exitproc+0x3e>
 80139d6:	bf00      	nop
 80139d8:	20000468 	.word	0x20000468
 80139dc:	08014d1c 	.word	0x08014d1c
 80139e0:	00000000 	.word	0x00000000

080139e4 <__EH_FRAME_BEGIN__>:
 80139e4:	00000000                                ....

080139e8 <_init>:
 80139e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ea:	bf00      	nop
 80139ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ee:	bc08      	pop	{r3}
 80139f0:	469e      	mov	lr, r3
 80139f2:	4770      	bx	lr

080139f4 <_fini>:
 80139f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139f6:	bf00      	nop
 80139f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139fa:	bc08      	pop	{r3}
 80139fc:	469e      	mov	lr, r3
 80139fe:	4770      	bx	lr

Disassembly of section .RamFunc:

08013a00 <HAL_FLASHEx_EnableRunPowerDown>:
  * @retval None
  */
__RAM_FUNC HAL_FLASHEx_EnableRunPowerDown(void)
{
  /* Enable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_ENABLE();
 8013a00:	4b05      	ldr	r3, [pc, #20]	; (8013a18 <_etext+0x18>)
 8013a02:	4a06      	ldr	r2, [pc, #24]	; (8013a1c <_etext+0x1c>)
 8013a04:	605a      	str	r2, [r3, #4]
 8013a06:	4a06      	ldr	r2, [pc, #24]	; (8013a20 <_etext+0x20>)
 8013a08:	605a      	str	r2, [r3, #4]
 8013a0a:	681a      	ldr	r2, [r3, #0]
 8013a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013a10:	601a      	str	r2, [r3, #0]

  return HAL_OK;

}
 8013a12:	2000      	movs	r0, #0
 8013a14:	4770      	bx	lr
 8013a16:	bf00      	nop
 8013a18:	40022000 	.word	0x40022000
 8013a1c:	04152637 	.word	0x04152637
 8013a20:	fafbfcfd 	.word	0xfafbfcfd

08013a24 <HAL_FLASHEx_DisableRunPowerDown>:
  * @retval None
  */
__RAM_FUNC HAL_FLASHEx_DisableRunPowerDown(void)
{
  /* Disable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_DISABLE();
 8013a24:	4b05      	ldr	r3, [pc, #20]	; (8013a3c <HAL_FLASHEx_DisableRunPowerDown+0x18>)
 8013a26:	4a06      	ldr	r2, [pc, #24]	; (8013a40 <HAL_FLASHEx_DisableRunPowerDown+0x1c>)
 8013a28:	605a      	str	r2, [r3, #4]
 8013a2a:	4a06      	ldr	r2, [pc, #24]	; (8013a44 <HAL_FLASHEx_DisableRunPowerDown+0x20>)
 8013a2c:	605a      	str	r2, [r3, #4]
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013a34:	601a      	str	r2, [r3, #0]

  return HAL_OK;
}
 8013a36:	2000      	movs	r0, #0
 8013a38:	4770      	bx	lr
 8013a3a:	bf00      	nop
 8013a3c:	40022000 	.word	0x40022000
 8013a40:	04152637 	.word	0x04152637
 8013a44:	fafbfcfd 	.word	0xfafbfcfd
