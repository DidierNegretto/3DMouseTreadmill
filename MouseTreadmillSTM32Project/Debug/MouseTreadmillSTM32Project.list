
MouseTreadmillSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007064  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080071ec  080071ec  000171ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007470  08007470  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007478  08007478  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d34  2000000c  0800748c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d40  0800748c  00020d40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013027  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002438  00000000  00000000  00033063  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  000354a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  00036530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028324  00000000  00000000  000374e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d759  00000000  00000000  0005f80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f521d  00000000  00000000  0006cf65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162182  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  00162200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080071d4 	.word	0x080071d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080071d4 	.word	0x080071d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	4053      	eors	r3, r2
 80004de:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	b25a      	sxtb	r2, r3
 80004e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ea:	4053      	eors	r3, r2
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	b21a      	sxth	r2, r3
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	b21b      	sxth	r3, r3
 8000500:	4053      	eors	r3, r2
 8000502:	b21a      	sxth	r2, r3
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	b21b      	sxth	r3, r3
 800050a:	4053      	eors	r3, r2
 800050c:	b21a      	sxth	r2, r3
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	091b      	lsrs	r3, r3, #4
 8000512:	b2db      	uxtb	r3, r3
 8000514:	b21b      	sxth	r3, r3
 8000516:	4053      	eors	r3, r2
 8000518:	b21b      	sxth	r3, r3
 800051a:	b29a      	uxth	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	801a      	strh	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053a:	801a      	strh	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000554:	f107 030e 	add.w	r3, r7, #14
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffe7 	bl	800052c <crc_init>
	while (length--) {
 800055e:	e009      	b.n	8000574 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f107 020e 	add.w	r2, r7, #14
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ffaa 	bl	80004c8 <crc_accumulate>
	while (length--) {
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	1e5a      	subs	r2, r3, #1
 8000578:	807a      	strh	r2, [r7, #2]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f0      	bne.n	8000560 <crc_calculate+0x18>
        }
        return crcTmp;
 800057e:	89fb      	ldrh	r3, [r7, #14]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	4613      	mov	r3, r2
 8000594:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	617b      	str	r3, [r7, #20]
	while (length--) {
 800059a:	e007      	b.n	80005ac <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	617a      	str	r2, [r7, #20]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	68f9      	ldr	r1, [r7, #12]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff8e 	bl	80004c8 <crc_accumulate>
	while (length--) {
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	80fa      	strh	r2, [r7, #6]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f2      	bne.n	800059c <crc_accumulate_buffer+0x14>
        }
}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <mavlink_sha256_init+0x50>)
 80005d8:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <mavlink_sha256_init+0x54>)
 80005de:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <mavlink_sha256_init+0x58>)
 80005e4:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <mavlink_sha256_init+0x5c>)
 80005ea:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <mavlink_sha256_init+0x60>)
 80005f0:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <mavlink_sha256_init+0x64>)
 80005f6:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <mavlink_sha256_init+0x68>)
 80005fc:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <mavlink_sha256_init+0x6c>)
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	6a09e667 	.word	0x6a09e667
 8000614:	bb67ae85 	.word	0xbb67ae85
 8000618:	3c6ef372 	.word	0x3c6ef372
 800061c:	a54ff53a 	.word	0xa54ff53a
 8000620:	510e527f 	.word	0x510e527f
 8000624:	9b05688c 	.word	0x9b05688c
 8000628:	1f83d9ab 	.word	0x1f83d9ab
 800062c:	5be0cd19 	.word	0x5be0cd19

08000630 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000630:	b480      	push	{r7}
 8000632:	b0cf      	sub	sp, #316	; 0x13c
 8000634:	af00      	add	r7, sp, #0
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	6018      	str	r0, [r3, #0]
 800063a:	463b      	mov	r3, r7
 800063c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000694:	e011      	b.n	80006ba <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 8000696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	463a      	mov	r2, r7
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80006ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80006b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006b4:	3301      	adds	r3, #1
 80006b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	dde9      	ble.n	8000696 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80006c2:	2310      	movs	r3, #16
 80006c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006c8:	e057      	b.n	800077a <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006ce:	1e9a      	subs	r2, r3, #2
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d8:	ea4f 4273 	mov.w	r2, r3, ror #17
 80006dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e0:	1e99      	subs	r1, r3, #2
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006ea:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80006ee:	405a      	eors	r2, r3
 80006f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006f4:	1e99      	subs	r1, r3, #2
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006fe:	0a9b      	lsrs	r3, r3, #10
 8000700:	405a      	eors	r2, r3
 8000702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000706:	1fd9      	subs	r1, r3, #7
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000710:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000716:	f1a3 010f 	sub.w	r1, r3, #15
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000722:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800072a:	f1a3 000f 	sub.w	r0, r3, #15
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000736:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800073a:	4059      	eors	r1, r3
 800073c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000740:	f1a3 000f 	sub.w	r0, r3, #15
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000750:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000756:	f1a3 0110 	sub.w	r1, r3, #16
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000762:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800076c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000774:	3301      	adds	r3, #1
 8000776:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800077a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800077e:	2b3f      	cmp	r3, #63	; 0x3f
 8000780:	dda3      	ble.n	80006ca <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000788:	e076      	b.n	8000878 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800078a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800078e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000792:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000796:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800079a:	405a      	eors	r2, r3
 800079c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007a0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80007a4:	405a      	eors	r2, r3
 80007a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007aa:	441a      	add	r2, r3
 80007ac:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80007b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007b4:	4019      	ands	r1, r3
 80007b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007ba:	43d8      	mvns	r0, r3
 80007bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007c0:	4003      	ands	r3, r0
 80007c2:	404b      	eors	r3, r1
 80007c4:	441a      	add	r2, r3
 80007c6:	4956      	ldr	r1, [pc, #344]	; (8000920 <mavlink_sha256_calc+0x2f0>)
 80007c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d0:	441a      	add	r2, r3
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80007da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007de:	4413      	add	r3, r2
 80007e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80007e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007e8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80007ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007f0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80007f4:	405a      	eors	r2, r3
 80007f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007fa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80007fe:	405a      	eors	r2, r3
 8000800:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000808:	4059      	eors	r1, r3
 800080a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800080e:	4019      	ands	r1, r3
 8000810:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000818:	4003      	ands	r3, r0
 800081a:	404b      	eors	r3, r1
 800081c:	4413      	add	r3, r2
 800081e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8000822:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000826:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 800082a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800082e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000832:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000836:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 800083a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800083e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000842:	4413      	add	r3, r2
 8000844:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800084c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000850:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000854:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000858:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800085c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000860:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000868:	4413      	add	r3, r2
 800086a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 800086e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000872:	3301      	adds	r3, #1
 8000874:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800087c:	2b3f      	cmp	r3, #63	; 0x3f
 800087e:	dd84      	ble.n	800078a <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800088a:	441a      	add	r2, r3
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	609a      	str	r2, [r3, #8]
    B += BB;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800089c:	441a      	add	r2, r3
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	60da      	str	r2, [r3, #12]
    C += CC;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008ae:	441a      	add	r2, r3
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	611a      	str	r2, [r3, #16]
    D += DD;
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80008c0:	441a      	add	r2, r3
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	615a      	str	r2, [r3, #20]
    E += EE;
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008d2:	441a      	add	r2, r3
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	619a      	str	r2, [r3, #24]
    F += FF;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008e4:	441a      	add	r2, r3
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	61da      	str	r2, [r3, #28]
    G += GG;
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6a1a      	ldr	r2, [r3, #32]
 80008f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008f6:	441a      	add	r2, r3
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	621a      	str	r2, [r3, #32]
    H += HH;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000904:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000908:	441a      	add	r2, r3
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000910:	bf00      	nop
 8000912:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	080071ec 	.word	0x080071ec

08000924 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	; 0x70
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	441a      	add	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800094e:	429a      	cmp	r2, r3
 8000950:	d904      	bls.n	800095c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 800095c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000966:	e054      	b.n	8000a12 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8000968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800096a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800096e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000974:	429a      	cmp	r2, r3
 8000976:	d201      	bcs.n	800097c <mavlink_sha256_update+0x58>
            l = len;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000984:	4413      	add	r3, r2
 8000986:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000988:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800098a:	4618      	mov	r0, r3
 800098c:	f006 fc0f 	bl	80071ae <memcpy>
	offset += l;
 8000990:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000994:	4413      	add	r3, r2
 8000996:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800099a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800099c:	4413      	add	r3, r2
 800099e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80009a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009aa:	2b40      	cmp	r3, #64	; 0x40
 80009ac:	d131      	bne.n	8000a12 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3328      	adds	r3, #40	; 0x28
 80009b2:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 80009b4:	2300      	movs	r3, #0
 80009b6:	663b      	str	r3, [r7, #96]	; 0x60
 80009b8:	e020      	b.n	80009fc <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80009ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009c0:	4413      	add	r3, r2
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80009d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009d2:	78da      	ldrb	r2, [r3, #3]
 80009d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d6:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	3301      	adds	r3, #1
 80009dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009de:	7892      	ldrb	r2, [r2, #2]
 80009e0:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80009e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009e4:	3302      	adds	r3, #2
 80009e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009e8:	7852      	ldrb	r2, [r2, #1]
 80009ea:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80009ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ee:	3303      	adds	r3, #3
 80009f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80009f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009f8:	3301      	adds	r3, #1
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
 80009fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	dddb      	ble.n	80009ba <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fe11 	bl	8000630 <mavlink_sha256_calc>
	    offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1a7      	bne.n	8000968 <mavlink_sha256_update+0x44>
	}
    }
}
 8000a18:	bf00      	nop
 8000a1a:	3770      	adds	r7, #112	; 0x70
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b098      	sub	sp, #96	; 0x60
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a38:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a40:	3301      	adds	r3, #1
 8000a42:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3308      	adds	r3, #8
 8000a48:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	3301      	adds	r3, #1
 8000a54:	2247      	movs	r2, #71	; 0x47
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 fbb3 	bl	80071c4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a64:	3307      	adds	r3, #7
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a6c:	440b      	add	r3, r1
 8000a6e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	0a1a      	lsrs	r2, r3, #8
 8000a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a7a:	3306      	adds	r3, #6
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a82:	440b      	add	r3, r1
 8000a84:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	0c1a      	lsrs	r2, r3, #16
 8000a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a90:	3305      	adds	r3, #5
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a98:	440b      	add	r3, r1
 8000a9a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	0e1a      	lsrs	r2, r3, #24
 8000aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aae:	440b      	add	r3, r1
 8000ab0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aba:	3303      	adds	r3, #3
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	0a1a      	lsrs	r2, r3, #8
 8000ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ad8:	440b      	add	r3, r1
 8000ada:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	0c1a      	lsrs	r2, r3, #16
 8000ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aee:	440b      	add	r3, r1
 8000af0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	0e1b      	lsrs	r3, r3, #24
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b0a:	f103 0208 	add.w	r2, r3, #8
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff05 	bl	8000924 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b1c:	78da      	ldrb	r2, [r3, #3]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b28:	7892      	ldrb	r2, [r2, #2]
 8000b2a:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	3302      	adds	r3, #2
 8000b30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b32:	7852      	ldrb	r2, [r2, #1]
 8000b34:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	3304      	adds	r3, #4
 8000b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b46:	79d2      	ldrb	r2, [r2, #7]
 8000b48:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	3305      	adds	r3, #5
 8000b4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b50:	7992      	ldrb	r2, [r2, #6]
 8000b52:	701a      	strb	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3760      	adds	r7, #96	; 0x60
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <mavlink_get_channel_status+0x24>)
 8000b72:	4413      	add	r3, r2
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	200000c0 	.word	0x200000c0

08000b84 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b0a1      	sub	sp, #132	; 0x84
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <mavlink_sign_packet+0x20>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <mavlink_sign_packet+0x24>
	    return 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e04f      	b.n	8000c48 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	785a      	ldrb	r2, [r3, #1]
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000bb6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f107 0110 	add.w	r1, r7, #16
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f006 faf2 	bl	80071ae <memcpy>
	signing->timestamp++;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000bd0:	1c4b      	adds	r3, r1, #1
 8000bd2:	f142 0400 	adc.w	r4, r2, #0
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fced 	bl	80005c0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f103 0110 	add.w	r1, r3, #16
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe96 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000bf8:	78fa      	ldrb	r2, [r7, #3]
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe8f 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000c06:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fe86 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe7e 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe77 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1dda      	adds	r2, r3, #7
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff feed 	bl	8000a20 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000c46:	230d      	movs	r3, #13
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3784      	adds	r7, #132	; 0x84
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd90      	pop	{r4, r7, pc}

08000c50 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c5c:	e002      	b.n	8000c64 <_mav_trim_payload+0x14>
		length--;
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d906      	bls.n	8000c78 <_mav_trim_payload+0x28>
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f2      	beq.n	8000c5e <_mav_trim_payload+0xe>
	}
	return length;
 8000c78:	78fb      	ldrb	r3, [r7, #3]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c88:	b08f      	sub	sp, #60	; 0x3c
 8000c8a:	af04      	add	r7, sp, #16
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	72fb      	strb	r3, [r7, #11]
 8000c94:	4613      	mov	r3, r2
 8000c96:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7b1b      	ldrb	r3, [r3, #12]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf14      	ite	ne
 8000ca4:	2301      	movne	r3, #1
 8000ca6:	2300      	moveq	r3, #0
 8000ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00c      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <mavlink_finalize_message_buffer+0x50>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000cda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8000ce6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <mavlink_finalize_message_buffer+0x6c>
 8000cee:	230d      	movs	r3, #13
 8000cf0:	e000      	b.n	8000cf4 <mavlink_finalize_message_buffer+0x6e>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8000cfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	22fe      	movs	r2, #254	; 0xfe
 8000d0a:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d12:	e002      	b.n	8000d1a <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	22fd      	movs	r2, #253	; 0xfd
 8000d18:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000d1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <mavlink_finalize_message_buffer+0xb2>
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	330c      	adds	r3, #12
 8000d26:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff8f 	bl	8000c50 <_mav_trim_payload>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	e001      	b.n	8000d3c <mavlink_finalize_message_buffer+0xb6>
 8000d38:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	7afa      	ldrb	r2, [r7, #11]
 8000d44:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	7aba      	ldrb	r2, [r7, #10]
 8000d4a:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8000d52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	799a      	ldrb	r2, [r3, #6]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	799b      	ldrb	r3, [r3, #6]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	78db      	ldrb	r3, [r3, #3]
 8000d8c:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8000d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d013      	beq.n	8000dbe <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	799b      	ldrb	r3, [r3, #6]
 8000d9a:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	79db      	ldrb	r3, [r3, #7]
 8000da0:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	7a1b      	ldrb	r3, [r3, #8]
 8000da6:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	7a5a      	ldrb	r2, [r3, #9]
 8000dac:	7a99      	ldrb	r1, [r3, #10]
 8000dae:	0209      	lsls	r1, r1, #8
 8000db0:	430a      	orrs	r2, r1
 8000db2:	7adb      	ldrb	r3, [r3, #11]
 8000db4:	041b      	lsls	r3, r3, #16
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	777b      	strb	r3, [r7, #29]
 8000dbc:	e030      	b.n	8000e20 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	791b      	ldrb	r3, [r3, #4]
 8000dc2:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	795b      	ldrb	r3, [r3, #5]
 8000dc8:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	79db      	ldrb	r3, [r3, #7]
 8000dd4:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	7a1b      	ldrb	r3, [r3, #8]
 8000dda:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	7a5a      	ldrb	r2, [r3, #9]
 8000de0:	7a99      	ldrb	r1, [r3, #10]
 8000de2:	0209      	lsls	r1, r1, #8
 8000de4:	430a      	orrs	r2, r1
 8000de6:	7adb      	ldrb	r3, [r3, #11]
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	7a5a      	ldrb	r2, [r3, #9]
 8000df4:	7a99      	ldrb	r1, [r3, #10]
 8000df6:	0209      	lsls	r1, r1, #8
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	7adb      	ldrb	r3, [r3, #11]
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	121b      	asrs	r3, r3, #8
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	7a5a      	ldrb	r2, [r3, #9]
 8000e0c:	7a99      	ldrb	r1, [r3, #10]
 8000e0e:	0209      	lsls	r1, r1, #8
 8000e10:	430a      	orrs	r2, r1
 8000e12:	7adb      	ldrb	r3, [r3, #11]
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4313      	orrs	r3, r2
 8000e18:	141b      	asrs	r3, r3, #16
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8000e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb88 	bl	8000548 <crc_calculate>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f103 010c 	add.w	r1, r3, #12
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f107 0316 	add.w	r3, r7, #22
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb9b 	bl	8000588 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8000e52:	f107 0216 	add.w	r2, r7, #22
 8000e56:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb33 	bl	80004c8 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000e62:	8af9      	ldrh	r1, [r7, #22]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	330c      	adds	r3, #12
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	78d2      	ldrb	r2, [r2, #3]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b2ca      	uxtb	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000e72:	8afb      	ldrh	r3, [r7, #22]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b299      	uxth	r1, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f103 020c 	add.w	r2, r3, #12
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	78db      	ldrb	r3, [r3, #3]
 8000e82:	3301      	adds	r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8000e8a:	8afa      	ldrh	r2, [r7, #22]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8000e90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01a      	beq.n	8000ece <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000eaa:	68f9      	ldr	r1, [r7, #12]
 8000eac:	310c      	adds	r1, #12
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8000eb2:	4401      	add	r1, r0
 8000eb4:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8000eb8:	f107 0018 	add.w	r0, r7, #24
 8000ebc:	9102      	str	r1, [sp, #8]
 8000ebe:	9201      	str	r2, [sp, #4]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4633      	mov	r3, r6
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f7ff fe5b 	bl	8000b84 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4413      	add	r3, r2
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	b29b      	uxth	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	372c      	adds	r7, #44	; 0x2c
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ef4 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	70fb      	strb	r3, [r7, #3]
 8000f06:	460b      	mov	r3, r1
 8000f08:	70bb      	strb	r3, [r7, #2]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8000f0e:	787b      	ldrb	r3, [r7, #1]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fe23 	bl	8000b5c <mavlink_get_channel_status>
 8000f16:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8000f18:	78ba      	ldrb	r2, [r7, #2]
 8000f1a:	78f9      	ldrb	r1, [r7, #3]
 8000f1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	7f3b      	ldrb	r3, [r7, #28]
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	7e3b      	ldrb	r3, [r7, #24]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff feaa 	bl	8000c86 <mavlink_finalize_message_buffer>
 8000f32:	4603      	mov	r3, r0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	70fb      	strb	r3, [r7, #3]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70bb      	strb	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8000f56:	78ba      	ldrb	r2, [r7, #2]
 8000f58:	78f9      	ldrb	r1, [r7, #3]
 8000f5a:	7d3b      	ldrb	r3, [r7, #20]
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	7c3b      	ldrb	r3, [r7, #16]
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2300      	movs	r3, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffc3 	bl	8000ef4 <mavlink_finalize_message_chan>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000f8e:	d13a      	bne.n	8001006 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000f94:	2305      	movs	r3, #5
 8000f96:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	789a      	ldrb	r2, [r3, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3302      	adds	r3, #2
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	7992      	ldrb	r2, [r2, #6]
 8000fb0:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3303      	adds	r3, #3
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	79d2      	ldrb	r2, [r2, #7]
 8000fba:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	7a12      	ldrb	r2, [r2, #8]
 8000fc4:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	7a5a      	ldrb	r2, [r3, #9]
 8000fca:	7a99      	ldrb	r1, [r3, #10]
 8000fcc:	0209      	lsls	r1, r1, #8
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	7adb      	ldrb	r3, [r3, #11]
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3305      	adds	r3, #5
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	1d98      	adds	r0, r3, #6
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f103 010c 	add.w	r1, r3, #12
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	78db      	ldrb	r3, [r3, #3]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f006 f8dd 	bl	80071ae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8000ff4:	7dbb      	ldrb	r3, [r7, #22]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	78d2      	ldrb	r2, [r2, #3]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e06c      	b.n	80010e0 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	330c      	adds	r3, #12
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe1e 	bl	8000c50 <_mav_trim_payload>
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001018:	2309      	movs	r3, #9
 800101a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	789a      	ldrb	r2, [r3, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3302      	adds	r3, #2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	7912      	ldrb	r2, [r2, #4]
 8001034:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3303      	adds	r3, #3
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	7952      	ldrb	r2, [r2, #5]
 800103e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3304      	adds	r3, #4
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	7992      	ldrb	r2, [r2, #6]
 8001048:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3305      	adds	r3, #5
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	79d2      	ldrb	r2, [r2, #7]
 8001052:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3306      	adds	r3, #6
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	7a12      	ldrb	r2, [r2, #8]
 800105c:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	7a5a      	ldrb	r2, [r3, #9]
 8001062:	7a99      	ldrb	r1, [r3, #10]
 8001064:	0209      	lsls	r1, r1, #8
 8001066:	430a      	orrs	r2, r1
 8001068:	7adb      	ldrb	r3, [r3, #11]
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	4313      	orrs	r3, r2
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3307      	adds	r3, #7
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	7a5a      	ldrb	r2, [r3, #9]
 800107c:	7a99      	ldrb	r1, [r3, #10]
 800107e:	0209      	lsls	r1, r1, #8
 8001080:	430a      	orrs	r2, r1
 8001082:	7adb      	ldrb	r3, [r3, #11]
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	4313      	orrs	r3, r2
 8001088:	121a      	asrs	r2, r3, #8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3308      	adds	r3, #8
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	7a5a      	ldrb	r2, [r3, #9]
 8001096:	7a99      	ldrb	r1, [r3, #10]
 8001098:	0209      	lsls	r1, r1, #8
 800109a:	430a      	orrs	r2, r1
 800109c:	7adb      	ldrb	r3, [r3, #11]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	4313      	orrs	r3, r2
 80010a2:	141a      	asrs	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3309      	adds	r3, #9
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f103 000a 	add.w	r0, r3, #10
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	330c      	adds	r3, #12
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f006 f878 	bl	80071ae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80010be:	7dba      	ldrb	r2, [r7, #22]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4413      	add	r3, r2
 80010c4:	3301      	adds	r3, #1
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <mavlink_msg_to_send_buffer+0x164>
 80010d8:	230d      	movs	r3, #13
 80010da:	e000      	b.n	80010de <mavlink_msg_to_send_buffer+0x166>
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1c98      	adds	r0, r3, #2
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	4619      	mov	r1, r3
 8001112:	f006 f84c 	bl	80071ae <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001116:	7dbb      	ldrb	r3, [r7, #22]
 8001118:	b29a      	uxth	r2, r3
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b29a      	uxth	r2, r3
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	3303      	adds	r3, #3
 800112c:	b29b      	uxth	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <mavlink_msg_heartbeat_pack>:
 * @param time  Time from boot of system
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t mode, uint32_t time)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	603a      	str	r2, [r7, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 4, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.time = time;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	60bb      	str	r3, [r7, #8]
    packet.mode = mode;
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	733b      	strb	r3, [r7, #12]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	330c      	adds	r3, #12
 8001158:	f107 0108 	add.w	r1, r7, #8
 800115c:	2205      	movs	r2, #5
 800115e:	4618      	mov	r0, r3
 8001160:	f006 f825 	bl	80071ae <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	725a      	strb	r2, [r3, #9]
 800116a:	2200      	movs	r2, #0
 800116c:	729a      	strb	r2, [r3, #10]
 800116e:	2200      	movs	r2, #0
 8001170:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8001172:	79ba      	ldrb	r2, [r7, #6]
 8001174:	79f9      	ldrb	r1, [r7, #7]
 8001176:	2389      	movs	r3, #137	; 0x89
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2305      	movs	r3, #5
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2305      	movs	r3, #5
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f7ff fedb 	bl	8000f3c <mavlink_finalize_message>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <mavlink_msg_speed_info_pack>:
 * @param speed_z  Speed in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_speed_info_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time, float speed_x, float speed_y, float speed_z)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af02      	add	r7, sp, #8
 8001196:	613a      	str	r2, [r7, #16]
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	ed87 0a02 	vstr	s0, [r7, #8]
 800119e:	edc7 0a01 	vstr	s1, [r7, #4]
 80011a2:	ed87 1a00 	vstr	s2, [r7]
 80011a6:	4603      	mov	r3, r0
 80011a8:	75fb      	strb	r3, [r7, #23]
 80011aa:	460b      	mov	r3, r1
 80011ac:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 12, speed_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_SPEED_INFO_LEN);
#else
    mavlink_speed_info_t packet;
    packet.time = time;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
    packet.speed_x = speed_x;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	61fb      	str	r3, [r7, #28]
    packet.speed_y = speed_y;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	623b      	str	r3, [r7, #32]
    packet.speed_z = speed_z;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_INFO_LEN);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	330c      	adds	r3, #12
 80011c2:	f107 0118 	add.w	r1, r7, #24
 80011c6:	2210      	movs	r2, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 fff0 	bl	80071ae <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_SPEED_INFO;
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	725a      	strb	r2, [r3, #9]
 80011d8:	2200      	movs	r2, #0
 80011da:	729a      	strb	r2, [r3, #10]
 80011dc:	2200      	movs	r2, #0
 80011de:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_SPEED_INFO_MIN_LEN, MAVLINK_MSG_ID_SPEED_INFO_LEN, MAVLINK_MSG_ID_SPEED_INFO_CRC);
 80011e0:	7dba      	ldrb	r2, [r7, #22]
 80011e2:	7df9      	ldrb	r1, [r7, #23]
 80011e4:	23ca      	movs	r3, #202	; 0xca
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2310      	movs	r3, #16
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2310      	movs	r3, #16
 80011ee:	6938      	ldr	r0, [r7, #16]
 80011f0:	f7ff fea4 	bl	8000f3c <mavlink_finalize_message>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <mavlink_msg_speed_info_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param speed_info C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_info_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_info_t* speed_info)
{
 80011fe:	b5b0      	push	{r4, r5, r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	460b      	mov	r3, r1
 800120e:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_speed_info_pack(system_id, component_id, msg, speed_info->time, speed_info->speed_x, speed_info->speed_y, speed_info->speed_z);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681d      	ldr	r5, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6899      	ldr	r1, [r3, #8]
 8001220:	460b      	mov	r3, r1
 8001222:	4619      	mov	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	7bbc      	ldrb	r4, [r7, #14]
 800122a:	7bf8      	ldrb	r0, [r7, #15]
 800122c:	ee01 3a10 	vmov	s2, r3
 8001230:	ee00 1a90 	vmov	s1, r1
 8001234:	ee00 2a10 	vmov	s0, r2
 8001238:	462b      	mov	r3, r5
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff ffa7 	bl	8001190 <mavlink_msg_speed_info_pack>
 8001242:	4603      	mov	r3, r0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bdb0      	pop	{r4, r5, r7, pc}

0800124c <mavlink_msg_speed_setpoint_pack>:
 * @param setpoint_z  Speed setpoint in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_speed_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float setpoint_x, float setpoint_y, float setpoint_z)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af02      	add	r7, sp, #8
 8001252:	4603      	mov	r3, r0
 8001254:	613a      	str	r2, [r7, #16]
 8001256:	ed87 0a03 	vstr	s0, [r7, #12]
 800125a:	edc7 0a02 	vstr	s1, [r7, #8]
 800125e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001262:	75fb      	strb	r3, [r7, #23]
 8001264:	460b      	mov	r3, r1
 8001266:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 8, setpoint_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
#else
    mavlink_speed_setpoint_t packet;
    packet.setpoint_x = setpoint_x;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	61fb      	str	r3, [r7, #28]
    packet.setpoint_y = setpoint_y;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	623b      	str	r3, [r7, #32]
    packet.setpoint_z = setpoint_z;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	330c      	adds	r3, #12
 8001278:	f107 011c 	add.w	r1, r7, #28
 800127c:	220c      	movs	r2, #12
 800127e:	4618      	mov	r0, r3
 8001280:	f005 ff95 	bl	80071ae <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2200      	movs	r2, #0
 8001288:	f042 0202 	orr.w	r2, r2, #2
 800128c:	725a      	strb	r2, [r3, #9]
 800128e:	2200      	movs	r2, #0
 8001290:	729a      	strb	r2, [r3, #10]
 8001292:	2200      	movs	r2, #0
 8001294:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_SPEED_SETPOINT_MIN_LEN, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN, MAVLINK_MSG_ID_SPEED_SETPOINT_CRC);
 8001296:	7dba      	ldrb	r2, [r7, #22]
 8001298:	7df9      	ldrb	r1, [r7, #23]
 800129a:	2381      	movs	r3, #129	; 0x81
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	230c      	movs	r3, #12
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	230c      	movs	r3, #12
 80012a4:	6938      	ldr	r0, [r7, #16]
 80012a6:	f7ff fe49 	bl	8000f3c <mavlink_finalize_message>
 80012aa:	4603      	mov	r3, r0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <mavlink_msg_speed_setpoint_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param speed_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_setpoint_t* speed_setpoint)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60ba      	str	r2, [r7, #8]
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	460b      	mov	r3, r1
 80012c4:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y, speed_setpoint->setpoint_z);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4613      	mov	r3, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6859      	ldr	r1, [r3, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	4619      	mov	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	7bbc      	ldrb	r4, [r7, #14]
 80012dc:	7bf8      	ldrb	r0, [r7, #15]
 80012de:	ee01 3a10 	vmov	s2, r3
 80012e2:	ee00 1a90 	vmov	s1, r1
 80012e6:	ee00 2a10 	vmov	s0, r2
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4621      	mov	r1, r4
 80012ee:	f7ff ffad 	bl	800124c <mavlink_msg_speed_setpoint_pack>
 80012f2:	4603      	mov	r3, r0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}

080012fc <mavlink_msg_speed_setpoint_decode>:
 *
 * @param msg The message to decode
 * @param speed_setpoint C-struct to decode the message contents into
 */
static inline void mavlink_msg_speed_setpoint_decode(const mavlink_message_t* msg, mavlink_speed_setpoint_t* speed_setpoint)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    speed_setpoint->setpoint_x = mavlink_msg_speed_setpoint_get_setpoint_x(msg);
    speed_setpoint->setpoint_y = mavlink_msg_speed_setpoint_get_setpoint_y(msg);
    speed_setpoint->setpoint_z = mavlink_msg_speed_setpoint_get_setpoint_z(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	bf28      	it	cs
 800130e:	230c      	movcs	r3, #12
 8001310:	73fb      	strb	r3, [r7, #15]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8001312:	220c      	movs	r2, #12
 8001314:	2100      	movs	r1, #0
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f005 ff54 	bl	80071c4 <memset>
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	330c      	adds	r3, #12
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	4619      	mov	r1, r3
 8001324:	6838      	ldr	r0, [r7, #0]
 8001326:	f005 ff42 	bl	80071ae <memcpy>
#endif
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <mavlink_msg_mode_selection_get_mode>:
 * @brief Get field mode from mode_selection message
 *
 * @return  Actual operating mode
 */
static inline uint8_t mavlink_msg_mode_selection_get_mode(const mavlink_message_t* msg)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  0);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	330c      	adds	r3, #12
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <mavlink_msg_motor_setpoint_pack>:
 * @param motor_z  Speed setpoint in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_motor_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time, float motor_x, float motor_y, float motor_z)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af02      	add	r7, sp, #8
 8001352:	613a      	str	r2, [r7, #16]
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	ed87 0a02 	vstr	s0, [r7, #8]
 800135a:	edc7 0a01 	vstr	s1, [r7, #4]
 800135e:	ed87 1a00 	vstr	s2, [r7]
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
 8001366:	460b      	mov	r3, r1
 8001368:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 12, motor_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
#else
    mavlink_motor_setpoint_t packet;
    packet.time = time;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	61bb      	str	r3, [r7, #24]
    packet.motor_x = motor_x;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	61fb      	str	r3, [r7, #28]
    packet.motor_y = motor_y;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	623b      	str	r3, [r7, #32]
    packet.motor_z = motor_z;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	330c      	adds	r3, #12
 800137e:	f107 0118 	add.w	r1, r7, #24
 8001382:	2210      	movs	r2, #16
 8001384:	4618      	mov	r0, r3
 8001386:	f005 ff12 	bl	80071ae <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_MOTOR_SETPOINT;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2200      	movs	r2, #0
 800138e:	f042 0204 	orr.w	r2, r2, #4
 8001392:	725a      	strb	r2, [r3, #9]
 8001394:	2200      	movs	r2, #0
 8001396:	729a      	strb	r2, [r3, #10]
 8001398:	2200      	movs	r2, #0
 800139a:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_MOTOR_SETPOINT_MIN_LEN, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN, MAVLINK_MSG_ID_MOTOR_SETPOINT_CRC);
 800139c:	7dba      	ldrb	r2, [r7, #22]
 800139e:	7df9      	ldrb	r1, [r7, #23]
 80013a0:	23a3      	movs	r3, #163	; 0xa3
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2310      	movs	r3, #16
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2310      	movs	r3, #16
 80013aa:	6938      	ldr	r0, [r7, #16]
 80013ac:	f7ff fdc6 	bl	8000f3c <mavlink_finalize_message>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <mavlink_msg_motor_setpoint_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param motor_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_motor_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_motor_setpoint_t* motor_setpoint)
{
 80013ba:	b5b0      	push	{r4, r5, r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	460b      	mov	r3, r1
 80013ca:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_motor_setpoint_pack(system_id, component_id, msg, motor_setpoint->time, motor_setpoint->motor_x, motor_setpoint->motor_y, motor_setpoint->motor_z);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681d      	ldr	r5, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	460b      	mov	r3, r1
 80013de:	4619      	mov	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	7bbc      	ldrb	r4, [r7, #14]
 80013e6:	7bf8      	ldrb	r0, [r7, #15]
 80013e8:	ee01 3a10 	vmov	s2, r3
 80013ec:	ee00 1a90 	vmov	s1, r1
 80013f0:	ee00 2a10 	vmov	s0, r2
 80013f4:	462b      	mov	r3, r5
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	4621      	mov	r1, r4
 80013fa:	f7ff ffa7 	bl	800134c <mavlink_msg_motor_setpoint_pack>
 80013fe:	4603      	mov	r3, r0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bdb0      	pop	{r4, r5, r7, pc}

08001408 <mouseDriver_initSetpoint>:
static mavlink_speed_setpoint_t actual_speed_setpoint;
static mavlink_motor_setpoint_t actual_motor_signal;

/* Private functions for mouseDriver.c*/
/* Private Init functions */
void mouseDriver_initSetpoint(void){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	actual_speed_setpoint.setpoint_x = 0;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <mouseDriver_initSetpoint+0x28>)
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	actual_speed_setpoint.setpoint_y = 0;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <mouseDriver_initSetpoint+0x28>)
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
	actual_speed_setpoint.setpoint_z = 0;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <mouseDriver_initSetpoint+0x28>)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000040 	.word	0x20000040

08001434 <mouseDriver_initTime>:

void mouseDriver_initTime(void){
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	actual_time = 0;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <mouseDriver_initTime+0x14>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	20000028 	.word	0x20000028

0800144c <mouseDriver_initMode>:

void mouseDriver_initMode(void){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	actual_mode = MOUSE_MODE_STOP;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <mouseDriver_initMode+0x14>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	2000002c 	.word	0x2000002c

08001464 <mouseDriver_getSpeedFromSensors>:

void mouseDriver_getSpeedFromSensors(void){
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	actual_speed_measure.speed_x = 1;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <mouseDriver_getSpeedFromSensors+0x24>)
 800146a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800146e:	605a      	str	r2, [r3, #4]
	actual_speed_measure.speed_y = 2;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <mouseDriver_getSpeedFromSensors+0x24>)
 8001472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001476:	609a      	str	r2, [r3, #8]
	actual_speed_measure.speed_z = 3;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <mouseDriver_getSpeedFromSensors+0x24>)
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <mouseDriver_getSpeedFromSensors+0x28>)
 800147c:	60da      	str	r2, [r3, #12]
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20000030 	.word	0x20000030
 800148c:	40400000 	.word	0x40400000

08001490 <mouseDriver_setMode>:
/* Private set/get functions */
void mouseDriver_setSetpoint(const mavlink_speed_setpoint_t speed){
	actual_speed_setpoint = speed;
}

void mouseDriver_setMode(uint8_t mode){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	actual_mode = mode;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <mouseDriver_setMode+0x1c>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	7013      	strb	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	2000002c 	.word	0x2000002c

080014b0 <mouseDriver_sendMsg>:

/* Private message functions */
void mouseDriver_sendMsg(uint32_t msgid){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0ce      	sub	sp, #312	; 0x138
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	6018      	str	r0, [r3, #0]
	mavlink_message_t msg;
	uint16_t len = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	static uint8_t outbuffer[MAX_BYTE_BUFFER_SIZE];
	switch(msgid){
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d86e      	bhi.n	80015a6 <mouseDriver_sendMsg+0xf6>
 80014c8:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <mouseDriver_sendMsg+0x20>)
 80014ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ce:	bf00      	nop
 80014d0:	080014e5 	.word	0x080014e5
 80014d4:	08001579 	.word	0x08001579
 80014d8:	0800151d 	.word	0x0800151d
 80014dc:	080015a7 	.word	0x080015a7
 80014e0:	0800154b 	.word	0x0800154b
	case MAVLINK_MSG_ID_HEARTBEAT:
		mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &msg, actual_mode, actual_time);
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <mouseDriver_sendMsg+0x104>)
 80014e6:	7819      	ldrb	r1, [r3, #0]
 80014e8:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <mouseDriver_sendMsg+0x108>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f107 0208 	add.w	r2, r7, #8
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	460b      	mov	r3, r1
 80014f4:	2100      	movs	r1, #0
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fe1d 	bl	8001136 <mavlink_msg_heartbeat_pack>
		len = mavlink_msg_to_send_buffer(outbuffer, &msg);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4619      	mov	r1, r3
 8001502:	482e      	ldr	r0, [pc, #184]	; (80015bc <mouseDriver_sendMsg+0x10c>)
 8001504:	f7ff fd38 	bl	8000f78 <mavlink_msg_to_send_buffer>
 8001508:	4603      	mov	r3, r0
 800150a:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
		main_transmit_buffer(outbuffer, len);
 800150e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8001512:	4619      	mov	r1, r3
 8001514:	4829      	ldr	r0, [pc, #164]	; (80015bc <mouseDriver_sendMsg+0x10c>)
 8001516:	f001 f91d 	bl	8002754 <main_transmit_buffer>
		break;
 800151a:	e045      	b.n	80015a8 <mouseDriver_sendMsg+0xf8>
	case MAVLINK_MSG_ID_SPEED_SETPOINT:
		mavlink_msg_speed_setpoint_encode(SYS_ID,COMP_ID, &msg, &actual_speed_setpoint);
 800151c:	f107 0208 	add.w	r2, r7, #8
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <mouseDriver_sendMsg+0x110>)
 8001522:	2100      	movs	r1, #0
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff fec5 	bl	80012b4 <mavlink_msg_speed_setpoint_encode>
		len = mavlink_msg_to_send_buffer(outbuffer, &msg);
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	4619      	mov	r1, r3
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <mouseDriver_sendMsg+0x10c>)
 8001532:	f7ff fd21 	bl	8000f78 <mavlink_msg_to_send_buffer>
 8001536:	4603      	mov	r3, r0
 8001538:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
		main_transmit_buffer(outbuffer, len);
 800153c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8001540:	4619      	mov	r1, r3
 8001542:	481e      	ldr	r0, [pc, #120]	; (80015bc <mouseDriver_sendMsg+0x10c>)
 8001544:	f001 f906 	bl	8002754 <main_transmit_buffer>
		break;
 8001548:	e02e      	b.n	80015a8 <mouseDriver_sendMsg+0xf8>
	case MAVLINK_MSG_ID_MOTOR_SETPOINT:
		mavlink_msg_motor_setpoint_encode(SYS_ID,COMP_ID, &msg, &actual_motor_signal);
 800154a:	f107 0208 	add.w	r2, r7, #8
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <mouseDriver_sendMsg+0x114>)
 8001550:	2100      	movs	r1, #0
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ff31 	bl	80013ba <mavlink_msg_motor_setpoint_encode>
		len = mavlink_msg_to_send_buffer(outbuffer, &msg);
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	4619      	mov	r1, r3
 800155e:	4817      	ldr	r0, [pc, #92]	; (80015bc <mouseDriver_sendMsg+0x10c>)
 8001560:	f7ff fd0a 	bl	8000f78 <mavlink_msg_to_send_buffer>
 8001564:	4603      	mov	r3, r0
 8001566:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
		main_transmit_buffer(outbuffer, len);
 800156a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800156e:	4619      	mov	r1, r3
 8001570:	4812      	ldr	r0, [pc, #72]	; (80015bc <mouseDriver_sendMsg+0x10c>)
 8001572:	f001 f8ef 	bl	8002754 <main_transmit_buffer>
		break;
 8001576:	e017      	b.n	80015a8 <mouseDriver_sendMsg+0xf8>
	case MAVLINK_MSG_ID_SPEED_INFO:
		mavlink_msg_speed_info_encode(SYS_ID,COMP_ID, &msg, &actual_speed_measure);
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <mouseDriver_sendMsg+0x118>)
 800157e:	2100      	movs	r1, #0
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff fe3c 	bl	80011fe <mavlink_msg_speed_info_encode>
		len = mavlink_msg_to_send_buffer(outbuffer, &msg);
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4619      	mov	r1, r3
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <mouseDriver_sendMsg+0x10c>)
 800158e:	f7ff fcf3 	bl	8000f78 <mavlink_msg_to_send_buffer>
 8001592:	4603      	mov	r3, r0
 8001594:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
		main_transmit_buffer(outbuffer, len);
 8001598:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800159c:	4619      	mov	r1, r3
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <mouseDriver_sendMsg+0x10c>)
 80015a0:	f001 f8d8 	bl	8002754 <main_transmit_buffer>
		break;
 80015a4:	e000      	b.n	80015a8 <mouseDriver_sendMsg+0xf8>
	default:
		break;
 80015a6:	bf00      	nop
	}

}
 80015a8:	bf00      	nop
 80015aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000002c 	.word	0x2000002c
 80015b8:	20000028 	.word	0x20000028
 80015bc:	2000005c 	.word	0x2000005c
 80015c0:	20000040 	.word	0x20000040
 80015c4:	2000004c 	.word	0x2000004c
 80015c8:	20000030 	.word	0x20000030

080015cc <mouseDriver_init>:
/* Private Idle functions */

/* END of private functions */

/* Init functions */
void mouseDriver_init(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	mouseDriver_initTime();
 80015d0:	f7ff ff30 	bl	8001434 <mouseDriver_initTime>
	mouseDriver_initMode();
 80015d4:	f7ff ff3a 	bl	800144c <mouseDriver_initMode>
	mouseDriver_getSpeedFromSensors();
 80015d8:	f7ff ff44 	bl	8001464 <mouseDriver_getSpeedFromSensors>
	mouseDriver_initSetpoint();
 80015dc:	f7ff ff14 	bl	8001408 <mouseDriver_initSetpoint>
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <mouseDriver_setTime>:
/* Function set/get */
void mouseDriver_setTime (const uint32_t time){
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	actual_time = time;
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <mouseDriver_setTime+0x1c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000028 	.word	0x20000028

08001604 <mouseDriver_getTime>:

uint32_t mouseDriver_getTime (void){
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
	return actual_time;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <mouseDriver_getTime+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000028 	.word	0x20000028

0800161c <mouseDriver_readMsg>:
/* Message related functions */
void mouseDriver_readMsg(const mavlink_message_t msg){
 800161c:	b084      	sub	sp, #16
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
 8001622:	f107 0c08 	add.w	ip, r7, #8
 8001626:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	switch(msg.msgid){
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001630:	2b03      	cmp	r3, #3
 8001632:	d004      	beq.n	800163e <mouseDriver_readMsg+0x22>
 8001634:	2b04      	cmp	r3, #4
 8001636:	d011      	beq.n	800165c <mouseDriver_readMsg+0x40>
 8001638:	2b02      	cmp	r3, #2
 800163a:	d009      	beq.n	8001650 <mouseDriver_readMsg+0x34>
	case MAVLINK_MSG_ID_MOTOR_SETPOINT:
		mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
		break;

	default:
		break;
 800163c:	e014      	b.n	8001668 <mouseDriver_readMsg+0x4c>
		mouseDriver_setMode( mavlink_msg_mode_selection_get_mode(&msg));
 800163e:	f107 0008 	add.w	r0, r7, #8
 8001642:	f7ff fe76 	bl	8001332 <mavlink_msg_mode_selection_get_mode>
 8001646:	4603      	mov	r3, r0
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff21 	bl	8001490 <mouseDriver_setMode>
		break;
 800164e:	e00b      	b.n	8001668 <mouseDriver_readMsg+0x4c>
		mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
 8001650:	4908      	ldr	r1, [pc, #32]	; (8001674 <mouseDriver_readMsg+0x58>)
 8001652:	f107 0008 	add.w	r0, r7, #8
 8001656:	f7ff fe51 	bl	80012fc <mavlink_msg_speed_setpoint_decode>
		break;
 800165a:	e005      	b.n	8001668 <mouseDriver_readMsg+0x4c>
		mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
 800165c:	4905      	ldr	r1, [pc, #20]	; (8001674 <mouseDriver_readMsg+0x58>)
 800165e:	f107 0008 	add.w	r0, r7, #8
 8001662:	f7ff fe4b 	bl	80012fc <mavlink_msg_speed_setpoint_decode>
		break;
 8001666:	bf00      	nop
	};
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001670:	b004      	add	sp, #16
 8001672:	4770      	bx	lr
 8001674:	20000040 	.word	0x20000040

08001678 <mouseDriver_idle>:

/* Idle functions */
void mouseDriver_idle (void){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	static mavlink_motor_setpoint_t motor;
	motor.time = actual_time;
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <mouseDriver_idle+0x5c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <mouseDriver_idle+0x60>)
 8001682:	6013      	str	r3, [r2, #0]
	motor.motor_x = 10;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <mouseDriver_idle+0x60>)
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <mouseDriver_idle+0x64>)
 8001688:	605a      	str	r2, [r3, #4]
	motor.motor_y = 20;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <mouseDriver_idle+0x60>)
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <mouseDriver_idle+0x68>)
 800168e:	609a      	str	r2, [r3, #8]

	switch(actual_mode){
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <mouseDriver_idle+0x6c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d008      	beq.n	80016aa <mouseDriver_idle+0x32>
 8001698:	2b02      	cmp	r3, #2
 800169a:	d00b      	beq.n	80016b4 <mouseDriver_idle+0x3c>
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10a      	bne.n	80016b6 <mouseDriver_idle+0x3e>
	case MOUSE_MODE_STOP:
		mouseDriver_initSetpoint();
 80016a0:	f7ff feb2 	bl	8001408 <mouseDriver_initSetpoint>
		main_stop_motors();
 80016a4:	f001 f874 	bl	8002790 <main_stop_motors>
		break;
 80016a8:	e005      	b.n	80016b6 <mouseDriver_idle+0x3e>
	case MOUSE_MODE_SPEED:
		main_set_motors_speed(motor);
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <mouseDriver_idle+0x60>)
 80016ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ae:	f001 f87d 	bl	80027ac <main_set_motors_speed>
		break;
 80016b2:	e000      	b.n	80016b6 <mouseDriver_idle+0x3e>
	case MOUSE_MODE_AUTO:
		break;
 80016b4:	bf00      	nop
	}
	mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fefa 	bl	80014b0 <mouseDriver_sendMsg>
	mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 80016bc:	2002      	movs	r0, #2
 80016be:	f7ff fef7 	bl	80014b0 <mouseDriver_sendMsg>
	mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 80016c2:	2004      	movs	r0, #4
 80016c4:	f7ff fef4 	bl	80014b0 <mouseDriver_sendMsg>
	mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff fef1 	bl	80014b0 <mouseDriver_sendMsg>
	/*if (tx_finish == 1){
		tx_finish = 0;
		main_transmit_buffer_IT();
	}*/
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000028 	.word	0x20000028
 80016d8:	20000120 	.word	0x20000120
 80016dc:	41200000 	.word	0x41200000
 80016e0:	41a00000 	.word	0x41a00000
 80016e4:	2000002c 	.word	0x2000002c

080016e8 <mouseDriver_controlISR>:

/* ISR Functions */
void mouseDriver_controlISR(void){
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <crc_accumulate>:
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	6039      	str	r1, [r7, #0]
 8001700:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4053      	eors	r3, r2
 800170c:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	b25a      	sxtb	r2, r3
 8001714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001718:	4053      	eors	r3, r2
 800171a:	b25b      	sxtb	r3, r3
 800171c:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21a      	sxth	r2, r3
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21b      	sxth	r3, r3
 800172e:	4053      	eors	r3, r2
 8001730:	b21a      	sxth	r2, r3
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	b21b      	sxth	r3, r3
 8001738:	4053      	eors	r3, r2
 800173a:	b21a      	sxth	r2, r3
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	b2db      	uxtb	r3, r3
 8001742:	b21b      	sxth	r3, r3
 8001744:	4053      	eors	r3, r2
 8001746:	b21b      	sxth	r3, r3
 8001748:	b29a      	uxth	r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	801a      	strh	r2, [r3, #0]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <crc_init>:
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001768:	801a      	strh	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <mavlink_sha256_init>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <mavlink_sha256_init+0x50>)
 8001790:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <mavlink_sha256_init+0x54>)
 8001796:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <mavlink_sha256_init+0x58>)
 800179c:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <mavlink_sha256_init+0x5c>)
 80017a2:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <mavlink_sha256_init+0x60>)
 80017a8:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <mavlink_sha256_init+0x64>)
 80017ae:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <mavlink_sha256_init+0x68>)
 80017b4:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <mavlink_sha256_init+0x6c>)
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	6a09e667 	.word	0x6a09e667
 80017cc:	bb67ae85 	.word	0xbb67ae85
 80017d0:	3c6ef372 	.word	0x3c6ef372
 80017d4:	a54ff53a 	.word	0xa54ff53a
 80017d8:	510e527f 	.word	0x510e527f
 80017dc:	9b05688c 	.word	0x9b05688c
 80017e0:	1f83d9ab 	.word	0x1f83d9ab
 80017e4:	5be0cd19 	.word	0x5be0cd19

080017e8 <mavlink_sha256_calc>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b0cf      	sub	sp, #316	; 0x13c
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	6018      	str	r0, [r3, #0]
 80017f2:	463b      	mov	r3, r7
 80017f4:	6019      	str	r1, [r3, #0]
    AA = A;
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for (i = 0; i < 16; ++i)
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800184c:	e011      	b.n	8001872 <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 800184e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	463a      	mov	r2, r7
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	4413      	add	r3, r2
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8001868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800186c:	3301      	adds	r3, #1
 800186e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001876:	2b0f      	cmp	r3, #15
 8001878:	dde9      	ble.n	800184e <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 800187a:	2310      	movs	r3, #16
 800187c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001880:	e057      	b.n	8001932 <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001886:	1e9a      	subs	r2, r3, #2
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	ea4f 4273 	mov.w	r2, r3, ror #17
 8001894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001898:	1e99      	subs	r1, r3, #2
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018a2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80018a6:	405a      	eors	r2, r3
 80018a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ac:	1e99      	subs	r1, r3, #2
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018b6:	0a9b      	lsrs	r3, r3, #10
 80018b8:	405a      	eors	r2, r3
 80018ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018be:	1fd9      	subs	r1, r3, #7
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018c8:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80018ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ce:	f1a3 010f 	sub.w	r1, r3, #15
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018da:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80018de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018e2:	f1a3 000f 	sub.w	r0, r3, #15
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80018ee:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80018f2:	4059      	eors	r1, r3
 80018f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018f8:	f1a3 000f 	sub.w	r0, r3, #15
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001908:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800190a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800190e:	f1a3 0110 	sub.w	r1, r3, #16
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800191a:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8001928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800192c:	3301      	adds	r3, #1
 800192e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001936:	2b3f      	cmp	r3, #63	; 0x3f
 8001938:	dda3      	ble.n	8001882 <mavlink_sha256_calc+0x9a>
    for (i = 0; i < 64; i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001940:	e076      	b.n	8001a30 <mavlink_sha256_calc+0x248>
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001942:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001946:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800194a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800194e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001952:	405a      	eors	r2, r3
 8001954:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001958:	ea4f 6373 	mov.w	r3, r3, ror #25
 800195c:	405a      	eors	r2, r3
 800195e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001962:	441a      	add	r2, r3
 8001964:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001968:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800196c:	4019      	ands	r1, r3
 800196e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001972:	43d8      	mvns	r0, r3
 8001974:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001978:	4003      	ands	r3, r0
 800197a:	404b      	eors	r3, r1
 800197c:	441a      	add	r2, r3
 800197e:	4956      	ldr	r1, [pc, #344]	; (8001ad8 <mavlink_sha256_calc+0x2f0>)
 8001980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001988:	441a      	add	r2, r3
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001992:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001996:	4413      	add	r3, r2
 8001998:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800199c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019a0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80019a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019a8:	ea4f 3373 	mov.w	r3, r3, ror #13
 80019ac:	405a      	eors	r2, r3
 80019ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019b2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80019b6:	405a      	eors	r2, r3
 80019b8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80019bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019c0:	4059      	eors	r1, r3
 80019c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019c6:	4019      	ands	r1, r3
 80019c8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80019cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019d0:	4003      	ands	r3, r0
 80019d2:	404b      	eors	r3, r1
 80019d4:	4413      	add	r3, r2
 80019d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	HH = GG;
 80019da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80019de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 80019e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 80019ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 80019f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80019f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019fa:	4413      	add	r3, r2
 80019fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8001a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8001a08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8001a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8001a18:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a20:	4413      	add	r3, r2
 8001a22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8001a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a34:	2b3f      	cmp	r3, #63	; 0x3f
 8001a36:	dd84      	ble.n	8001942 <mavlink_sha256_calc+0x15a>
    A += AA;
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a42:	441a      	add	r2, r3
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	609a      	str	r2, [r3, #8]
    B += BB;
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a54:	441a      	add	r2, r3
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60da      	str	r2, [r3, #12]
    C += CC;
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a66:	441a      	add	r2, r3
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	611a      	str	r2, [r3, #16]
    D += DD;
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a78:	441a      	add	r2, r3
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	615a      	str	r2, [r3, #20]
    E += EE;
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a8a:	441a      	add	r2, r3
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	619a      	str	r2, [r3, #24]
    F += FF;
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	69da      	ldr	r2, [r3, #28]
 8001a98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a9c:	441a      	add	r2, r3
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	61da      	str	r2, [r3, #28]
    G += GG;
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a1a      	ldr	r2, [r3, #32]
 8001aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001aae:	441a      	add	r2, r3
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	621a      	str	r2, [r3, #32]
    H += HH;
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001abc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ac0:	441a      	add	r2, r3
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ac8:	bf00      	nop
 8001aca:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	080072ec 	.word	0x080072ec

08001adc <mavlink_sha256_update>:
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09c      	sub	sp, #112	; 0x70
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	65fb      	str	r3, [r7, #92]	; 0x5c
    m->sz[0] += len * 8;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	441a      	add	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d904      	bls.n	8001b14 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b16:	08db      	lsrs	r3, r3, #3
 8001b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b1c:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001b1e:	e054      	b.n	8001bca <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8001b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b22:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b26:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d201      	bcs.n	8001b34 <mavlink_sha256_update+0x58>
            l = len;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	667b      	str	r3, [r7, #100]	; 0x64
	memcpy(m->u.save_bytes + offset, p, l);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3c:	4413      	add	r3, r2
 8001b3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f005 fb33 	bl	80071ae <memcpy>
	offset += l;
 8001b48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b4c:	4413      	add	r3, r2
 8001b4e:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8001b50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b54:	4413      	add	r3, r2
 8001b56:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d131      	bne.n	8001bca <mavlink_sha256_update+0xee>
	    const uint32_t *u = m->u.save_u32;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3328      	adds	r3, #40	; 0x28
 8001b6a:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8001b70:	e020      	b.n	8001bb4 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b78:	4413      	add	r3, r2
 8001b7a:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001b7c:	f107 0210 	add.w	r2, r7, #16
 8001b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8001b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8a:	78da      	ldrb	r2, [r3, #3]
 8001b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b8e:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b92:	3301      	adds	r3, #1
 8001b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b96:	7892      	ldrb	r2, [r2, #2]
 8001b98:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8001b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ba0:	7852      	ldrb	r2, [r2, #1]
 8001ba2:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8001ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba6:	3303      	adds	r3, #3
 8001ba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8001bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	dddb      	ble.n	8001b72 <mavlink_sha256_update+0x96>
	    mavlink_sha256_calc(m, current);
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff fe11 	bl	80017e8 <mavlink_sha256_calc>
	    offset = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1a7      	bne.n	8001b20 <mavlink_sha256_update+0x44>
}
 8001bd0:	bf00      	nop
 8001bd2:	3770      	adds	r7, #112	; 0x70
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <mavlink_sha256_final_48>:
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b098      	sub	sp, #96	; 0x60
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
    unsigned offset = (m->sz[0] / 8) % 64;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	08db      	lsrs	r3, r3, #3
 8001be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bec:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf0:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8001bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3308      	adds	r3, #8
 8001c00:	657b      	str	r3, [r7, #84]	; 0x54
    *zeros = 0x80;
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	2247      	movs	r2, #71	; 0x47
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 fad7 	bl	80071c4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c1c:	3307      	adds	r3, #7
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c24:	440b      	add	r3, r1
 8001c26:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0a1a      	lsrs	r2, r3, #8
 8001c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c32:	3306      	adds	r3, #6
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0c1a      	lsrs	r2, r3, #16
 8001c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c48:	3305      	adds	r3, #5
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c50:	440b      	add	r3, r1
 8001c52:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0e1a      	lsrs	r2, r3, #24
 8001c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c5e:	3304      	adds	r3, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c66:	440b      	add	r3, r1
 8001c68:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c72:	3303      	adds	r3, #3
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	0a1a      	lsrs	r2, r3, #8
 8001c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c88:	3302      	adds	r3, #2
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c90:	440b      	add	r3, r1
 8001c92:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	0c1a      	lsrs	r2, r3, #16
 8001c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	0e1b      	lsrs	r3, r3, #24
 8001cb2:	b2d9      	uxtb	r1, r3
 8001cb4:	f107 020c 	add.w	r2, r7, #12
 8001cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cba:	4413      	add	r3, r2
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8001cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc2:	f103 0208 	add.w	r2, r3, #8
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff05 	bl	8001adc <mavlink_sha256_update>
    result[0] = p[3];
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd4:	78da      	ldrb	r2, [r3, #3]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ce0:	7892      	ldrb	r2, [r2, #2]
 8001ce2:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cea:	7852      	ldrb	r2, [r2, #1]
 8001cec:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cfe:	79d2      	ldrb	r2, [r2, #7]
 8001d00:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	3305      	adds	r3, #5
 8001d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d08:	7992      	ldrb	r2, [r2, #6]
 8001d0a:	701a      	strb	r2, [r3, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	3760      	adds	r7, #96	; 0x60
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <mavlink_get_channel_status>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 8001d1e:	79fa      	ldrb	r2, [r7, #7]
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <mavlink_get_channel_status+0x24>)
 8001d2a:	4413      	add	r3, r2
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	200005c0 	.word	0x200005c0

08001d3c <mavlink_get_channel_buffer>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_buffer[chan];
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f240 1223 	movw	r2, #291	; 0x123
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <mavlink_get_channel_buffer+0x24>)
 8001d52:	4413      	add	r3, r2
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	20000134 	.word	0x20000134

08001d64 <mavlink_signature_check>:
{
 8001d64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001d68:	b0aa      	sub	sp, #168	; 0xa8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <mavlink_signature_check+0x18>
		return true;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e121      	b.n	8001fc0 <mavlink_signature_check+0x25c>
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d92:	3307      	adds	r3, #7
 8001d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_init(&ctx);
 8001d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fceb 	bl	8001778 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f103 0110 	add.w	r1, r3, #16
 8001da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dac:	2220      	movs	r2, #32
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fe94 	bl	8001adc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	78db      	ldrb	r3, [r3, #3]
 8001db8:	330a      	adds	r3, #10
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fe89 	bl	8001adc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fe80 	bl	8001adc <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8001ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de0:	2207      	movs	r2, #7
 8001de2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fe78 	bl	8001adc <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8001dec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff feee 	bl	8001bd8 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	2206      	movs	r2, #6
 8001e02:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001e06:	4618      	mov	r0, r3
 8001e08:	f005 f9c2 	bl	8007190 <memcmp>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <mavlink_signature_check+0xb2>
		return false;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e0d4      	b.n	8001fc0 <mavlink_signature_check+0x25c>
	uint8_t link_id = psig[0];
 8001e16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	f04f 0400 	mov.w	r4, #0
 8001e28:	e9c7 3406 	strd	r3, r4, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e30:	1c59      	adds	r1, r3, #1
 8001e32:	f107 0318 	add.w	r3, r7, #24
 8001e36:	2206      	movs	r2, #6
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f005 f9b8 	bl	80071ae <memcpy>
	if (signing_streams == NULL) {
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <mavlink_signature_check+0xe4>
		return false;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e0bb      	b.n	8001fc0 <mavlink_signature_check+0x25c>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001e4e:	e02b      	b.n	8001ea8 <mavlink_signature_check+0x144>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	79d9      	ldrb	r1, [r3, #7]
 8001e54:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001e58:	68b8      	ldr	r0, [r7, #8]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	4403      	add	r3, r0
 8001e62:	3303      	adds	r3, #3
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4299      	cmp	r1, r3
 8001e68:	d119      	bne.n	8001e9e <mavlink_signature_check+0x13a>
		    msg->compid == signing_streams->stream[i].compid &&
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7a19      	ldrb	r1, [r3, #8]
 8001e6e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001e72:	68b8      	ldr	r0, [r7, #8]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	4403      	add	r3, r0
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001e80:	4299      	cmp	r1, r3
 8001e82:	d10c      	bne.n	8001e9e <mavlink_signature_check+0x13a>
		    link_id == signing_streams->stream[i].link_id) {
 8001e84:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	3302      	adds	r3, #2
 8001e94:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001e96:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d00b      	beq.n	8001eb6 <mavlink_signature_check+0x152>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001e9e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d3cd      	bcc.n	8001e50 <mavlink_signature_check+0xec>
 8001eb4:	e000      	b.n	8001eb8 <mavlink_signature_check+0x154>
			break;
 8001eb6:	bf00      	nop
	if (i == signing_streams->num_signing_streams) {
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d141      	bne.n	8001f48 <mavlink_signature_check+0x1e4>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	d901      	bls.n	8001ed0 <mavlink_signature_check+0x16c>
			return false;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e077      	b.n	8001fc0 <mavlink_signature_check+0x25c>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001ed0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ed4:	493d      	ldr	r1, [pc, #244]	; (8001fcc <mavlink_signature_check+0x268>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	eb11 0b03 	adds.w	fp, r1, r3
 8001ede:	eb42 0c04 	adc.w	ip, r2, r4
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001ee8:	45a4      	cmp	ip, r4
 8001eea:	bf08      	it	eq
 8001eec:	459b      	cmpeq	fp, r3
 8001eee:	d201      	bcs.n	8001ef4 <mavlink_signature_check+0x190>
			return false;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e065      	b.n	8001fc0 <mavlink_signature_check+0x25c>
		signing_streams->stream[i].sysid = msg->sysid;
 8001ef4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	79d8      	ldrb	r0, [r3, #7]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	3303      	adds	r3, #3
 8001f08:	4602      	mov	r2, r0
 8001f0a:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001f0c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7a18      	ldrb	r0, [r3, #8]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3304      	adds	r3, #4
 8001f20:	4602      	mov	r2, r0
 8001f22:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001f24:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	3302      	adds	r3, #2
 8001f34:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001f38:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	e01d      	b.n	8001f84 <mavlink_signature_check+0x220>
		last_tstamp.t64 = 0;
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	f04f 0400 	mov.w	r4, #0
 8001f50:	e9c7 3404 	strd	r3, r4, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001f54:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	4413      	add	r3, r2
 8001f62:	1d59      	adds	r1, r3, #5
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	2206      	movs	r2, #6
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 f91f 	bl	80071ae <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001f70:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f78:	42a2      	cmp	r2, r4
 8001f7a:	bf08      	it	eq
 8001f7c:	4299      	cmpeq	r1, r3
 8001f7e:	d301      	bcc.n	8001f84 <mavlink_signature_check+0x220>
			return false;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e01d      	b.n	8001fc0 <mavlink_signature_check+0x25c>
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001f84:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	4413      	add	r3, r2
 8001f92:	1d58      	adds	r0, r3, #5
 8001f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f98:	3301      	adds	r3, #1
 8001f9a:	2206      	movs	r2, #6
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f005 f906 	bl	80071ae <memcpy>
	if (tstamp.t64 > signing->timestamp) {
 8001fa2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8001fac:	42a2      	cmp	r2, r4
 8001fae:	bf08      	it	eq
 8001fb0:	4299      	cmpeq	r1, r3
 8001fb2:	d204      	bcs.n	8001fbe <mavlink_signature_check+0x25a>
		signing->timestamp = tstamp.t64;
 8001fb4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	e9c2 3402 	strd	r3, r4, [r2, #8]
	return true;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	37a8      	adds	r7, #168	; 0xa8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001fca:	bf00      	nop
 8001fcc:	005b8d80 	.word	0x005b8d80

08001fd0 <_mav_parse_error>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	789b      	ldrb	r3, [r3, #2]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	709a      	strb	r2, [r3, #2]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001ffc:	f107 030e 	add.w	r3, r7, #14
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fbaa 	bl	800175a <crc_init>
	msg->checksum = crcTmp;
 8002006:	89fa      	ldrh	r2, [r7, #14]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	801a      	strh	r2, [r3, #0]
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8002028:	f107 020e 	add.w	r2, r7, #14
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fb60 	bl	80016f6 <crc_accumulate>
	msg->checksum = checksum;
 8002036:	89fa      	ldrh	r2, [r7, #14]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	801a      	strh	r2, [r3, #0]
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	2304      	movs	r3, #4
 8002052:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8002054:	e025      	b.n	80020a2 <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	3301      	adds	r3, #1
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8002062:	491f      	ldr	r1, [pc, #124]	; (80020e0 <mavlink_get_msg_entry+0x9c>)
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	d203      	bcs.n	8002080 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3b01      	subs	r3, #1
 800207c:	613b      	str	r3, [r7, #16]
                continue;
 800207e:	e010      	b.n	80020a2 <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8002080:	4917      	ldr	r1, [pc, #92]	; (80020e0 <mavlink_get_msg_entry+0x9c>)
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	d902      	bls.n	800209c <mavlink_get_msg_entry+0x58>
                low = mid;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	617b      	str	r3, [r7, #20]
                continue;
 800209a:	e002      	b.n	80020a2 <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	617b      	str	r3, [r7, #20]
            break;
 80020a0:	e003      	b.n	80020aa <mavlink_get_msg_entry+0x66>
        while (low < high) {
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d3d5      	bcc.n	8002056 <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 80020aa:	490d      	ldr	r1, [pc, #52]	; (80020e0 <mavlink_get_msg_entry+0x9c>)
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e006      	b.n	80020d2 <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <mavlink_get_msg_entry+0x9c>)
 80020d0:	4413      	add	r3, r2
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	080073ec 	.word	0x080073ec

080020e4 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	78db      	ldrb	r3, [r3, #3]
 8002102:	2b0f      	cmp	r3, #15
 8002104:	f200 826e 	bhi.w	80025e4 <mavlink_frame_char_buffer+0x500>
 8002108:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <mavlink_frame_char_buffer+0x2c>)
 800210a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210e:	bf00      	nop
 8002110:	08002151 	.word	0x08002151
 8002114:	08002151 	.word	0x08002151
 8002118:	080021af 	.word	0x080021af
 800211c:	08002215 	.word	0x08002215
 8002120:	0800224d 	.word	0x0800224d
 8002124:	08002265 	.word	0x08002265
 8002128:	0800227d 	.word	0x0800227d
 800212c:	08002295 	.word	0x08002295
 8002130:	080022ad 	.word	0x080022ad
 8002134:	08002307 	.word	0x08002307
 8002138:	08002353 	.word	0x08002353
 800213c:	080023af 	.word	0x080023af
 8002140:	080023e7 	.word	0x080023e7
 8002144:	08002473 	.word	0x08002473
 8002148:	08002473 	.word	0x08002473
 800214c:	0800252f 	.word	0x0800252f
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2bfd      	cmp	r3, #253	; 0xfd
 8002154:	d113      	bne.n	800217e <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2202      	movs	r2, #2
 800215a:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	7b1b      	ldrb	r3, [r3, #12]
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff ff3a 	bl	8001ff0 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 800217c:	e229      	b.n	80025d2 <mavlink_frame_char_buffer+0x4ee>
		} else if (c == MAVLINK_STX_MAVLINK1)
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2bfe      	cmp	r3, #254	; 0xfe
 8002182:	f040 8226 	bne.w	80025d2 <mavlink_frame_char_buffer+0x4ee>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2202      	movs	r2, #2
 800218a:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	79fa      	ldrb	r2, [r7, #7]
 8002196:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	7b1b      	ldrb	r3, [r3, #12]
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff ff22 	bl	8001ff0 <mavlink_start_checksum>
		break;
 80021ac:	e211      	b.n	80025d2 <mavlink_frame_char_buffer+0x4ee>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00f      	beq.n	80021d6 <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	785b      	ldrb	r3, [r3, #1]
 80021ba:	3301      	adds	r3, #1
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 80021c2:	68b8      	ldr	r0, [r7, #8]
 80021c4:	f7ff ff04 	bl	8001fd0 <_mav_parse_error>
			status->msg_received = 0;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2201      	movs	r2, #1
 80021d2:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 80021d4:	e206      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
			rxmsg->len = c;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2200      	movs	r2, #0
 80021e0:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	4619      	mov	r1, r3
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff ff14 	bl	8002014 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	7b1b      	ldrb	r3, [r3, #12]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2205      	movs	r2, #5
 8002208:	70da      	strb	r2, [r3, #3]
		break;
 800220a:	e1eb      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2203      	movs	r2, #3
 8002210:	70da      	strb	r2, [r3, #3]
		break;
 8002212:	e1e7      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	79fa      	ldrb	r2, [r7, #7]
 8002218:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	791b      	ldrb	r3, [r3, #4]
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8002226:	68b8      	ldr	r0, [r7, #8]
 8002228:	f7ff fed2 	bl	8001fd0 <_mav_parse_error>
			status->msg_received = 0;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2201      	movs	r2, #1
 8002236:	70da      	strb	r2, [r3, #3]
			break;
 8002238:	e1d4      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
		}
		mavlink_update_checksum(rxmsg, c);
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	4619      	mov	r1, r3
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7ff fee8 	bl	8002014 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2204      	movs	r2, #4
 8002248:	70da      	strb	r2, [r3, #3]
		break;
 800224a:	e1cb      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	79fa      	ldrb	r2, [r7, #7]
 8002250:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4619      	mov	r1, r3
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fedc 	bl	8002014 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2205      	movs	r2, #5
 8002260:	70da      	strb	r2, [r3, #3]
		break;
 8002262:	e1bf      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	79fa      	ldrb	r2, [r7, #7]
 8002268:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	4619      	mov	r1, r3
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7ff fed0 	bl	8002014 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2206      	movs	r2, #6
 8002278:	70da      	strb	r2, [r3, #3]
		break;
 800227a:	e1b3      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	79fa      	ldrb	r2, [r7, #7]
 8002280:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4619      	mov	r1, r3
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7ff fec4 	bl	8002014 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2207      	movs	r2, #7
 8002290:	70da      	strb	r2, [r3, #3]
		break;
 8002292:	e1a7      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4619      	mov	r1, r3
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f7ff feb8 	bl	8002014 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2208      	movs	r2, #8
 80022a8:	70da      	strb	r2, [r3, #3]
		break;
 80022aa:	e19b      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	b2d9      	uxtb	r1, r3
 80022b6:	2000      	movs	r0, #0
 80022b8:	4301      	orrs	r1, r0
 80022ba:	7251      	strb	r1, [r2, #9]
 80022bc:	0a19      	lsrs	r1, r3, #8
 80022be:	b2c9      	uxtb	r1, r1
 80022c0:	2000      	movs	r0, #0
 80022c2:	4301      	orrs	r1, r0
 80022c4:	7291      	strb	r1, [r2, #10]
 80022c6:	0c1b      	lsrs	r3, r3, #16
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2100      	movs	r1, #0
 80022cc:	430b      	orrs	r3, r1
 80022ce:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4619      	mov	r1, r3
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f7ff fe9d 	bl	8002014 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	7b1b      	ldrb	r3, [r3, #12]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	78db      	ldrb	r3, [r3, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	220b      	movs	r2, #11
 80022f2:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 80022f4:	e176      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	220c      	movs	r2, #12
 80022fa:	70da      	strb	r2, [r3, #3]
		break;
 80022fc:	e172      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2209      	movs	r2, #9
 8002302:	70da      	strb	r2, [r3, #3]
		break;
 8002304:	e16e      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	7a5a      	ldrb	r2, [r3, #9]
 800230a:	7a99      	ldrb	r1, [r3, #10]
 800230c:	0209      	lsls	r1, r1, #8
 800230e:	430a      	orrs	r2, r1
 8002310:	7adb      	ldrb	r3, [r3, #11]
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	4313      	orrs	r3, r2
 8002316:	461a      	mov	r2, r3
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4313      	orrs	r3, r2
 800231e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	b2d1      	uxtb	r1, r2
 8002326:	2000      	movs	r0, #0
 8002328:	4301      	orrs	r1, r0
 800232a:	7259      	strb	r1, [r3, #9]
 800232c:	0a11      	lsrs	r1, r2, #8
 800232e:	b2c9      	uxtb	r1, r1
 8002330:	2000      	movs	r0, #0
 8002332:	4301      	orrs	r1, r0
 8002334:	7299      	strb	r1, [r3, #10]
 8002336:	0c12      	lsrs	r2, r2, #16
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	2100      	movs	r1, #0
 800233c:	430a      	orrs	r2, r1
 800233e:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	4619      	mov	r1, r3
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff fe65 	bl	8002014 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	220a      	movs	r2, #10
 800234e:	70da      	strb	r2, [r3, #3]
		break;
 8002350:	e148      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	7a5a      	ldrb	r2, [r3, #9]
 8002356:	7a99      	ldrb	r1, [r3, #10]
 8002358:	0209      	lsls	r1, r1, #8
 800235a:	430a      	orrs	r2, r1
 800235c:	7adb      	ldrb	r3, [r3, #11]
 800235e:	041b      	lsls	r3, r3, #16
 8002360:	4313      	orrs	r3, r2
 8002362:	461a      	mov	r2, r3
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	4313      	orrs	r3, r2
 800236a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	b2d1      	uxtb	r1, r2
 8002372:	2000      	movs	r0, #0
 8002374:	4301      	orrs	r1, r0
 8002376:	7259      	strb	r1, [r3, #9]
 8002378:	0a11      	lsrs	r1, r2, #8
 800237a:	b2c9      	uxtb	r1, r1
 800237c:	2000      	movs	r0, #0
 800237e:	4301      	orrs	r1, r0
 8002380:	7299      	strb	r1, [r3, #10]
 8002382:	0c12      	lsrs	r2, r2, #16
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	2100      	movs	r1, #0
 8002388:	430a      	orrs	r2, r1
 800238a:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	4619      	mov	r1, r3
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff fe3f 	bl	8002014 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	78db      	ldrb	r3, [r3, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	220b      	movs	r2, #11
 80023a2:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 80023a4:	e11e      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	220c      	movs	r2, #12
 80023aa:	70da      	strb	r2, [r3, #3]
		break;
 80023ac:	e11a      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f103 020c 	add.w	r2, r3, #12
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	791b      	ldrb	r3, [r3, #4]
 80023b8:	1c59      	adds	r1, r3, #1
 80023ba:	b2c8      	uxtb	r0, r1
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	7108      	strb	r0, [r1, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	79fa      	ldrb	r2, [r7, #7]
 80023c4:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4619      	mov	r1, r3
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff fe22 	bl	8002014 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	791a      	ldrb	r2, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	78db      	ldrb	r3, [r3, #3]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 80fc 	bne.w	80025d6 <mavlink_frame_char_buffer+0x4f2>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	220c      	movs	r2, #12
 80023e2:	70da      	strb	r2, [r3, #3]
		}
		break;
 80023e4:	e0f7      	b.n	80025d6 <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	7a5a      	ldrb	r2, [r3, #9]
 80023ea:	7a99      	ldrb	r1, [r3, #10]
 80023ec:	0209      	lsls	r1, r1, #8
 80023ee:	430a      	orrs	r2, r1
 80023f0:	7adb      	ldrb	r3, [r3, #11]
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	4313      	orrs	r3, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fe24 	bl	8002044 <mavlink_get_msg_entry>
 80023fc:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <mavlink_frame_char_buffer+0x326>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	e000      	b.n	800240c <mavlink_frame_char_buffer+0x328>
 800240a:	2300      	movs	r3, #0
 800240c:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	4619      	mov	r1, r3
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff fdfe 	bl	8002014 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8002418:	79fa      	ldrb	r2, [r7, #7]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	429a      	cmp	r2, r3
 8002424:	d003      	beq.n	800242e <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	220e      	movs	r2, #14
 800242a:	70da      	strb	r2, [r3, #3]
 800242c:	e002      	b.n	8002434 <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	220d      	movs	r2, #13
 8002432:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	79fa      	ldrb	r2, [r7, #7]
 8002438:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80cb 	beq.w	80025da <mavlink_frame_char_buffer+0x4f6>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	791a      	ldrb	r2, [r3, #4]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	799b      	ldrb	r3, [r3, #6]
 800244c:	429a      	cmp	r2, r3
 800244e:	f080 80c4 	bcs.w	80025da <mavlink_frame_char_buffer+0x4f6>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	330c      	adds	r3, #12
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	7912      	ldrb	r2, [r2, #4]
 800245a:	1898      	adds	r0, r3, r2
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	799b      	ldrb	r3, [r3, #6]
 8002460:	461a      	mov	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	791b      	ldrb	r3, [r3, #4]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	461a      	mov	r2, r3
 800246a:	2100      	movs	r1, #0
 800246c:	f004 feaa 	bl	80071c4 <memset>
		}
		break;
 8002470:	e0b3      	b.n	80025da <mavlink_frame_char_buffer+0x4f6>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	78db      	ldrb	r3, [r3, #3]
 8002476:	2b0e      	cmp	r3, #14
 8002478:	d008      	beq.n	800248c <mavlink_frame_char_buffer+0x3a8>
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	b29b      	uxth	r3, r3
 8002488:	429a      	cmp	r2, r3
 800248a:	d003      	beq.n	8002494 <mavlink_frame_char_buffer+0x3b0>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2202      	movs	r2, #2
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e002      	b.n	800249a <mavlink_frame_char_buffer+0x3b6>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	79fa      	ldrb	r2, [r7, #7]
 800249e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	791b      	ldrb	r3, [r3, #4]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00e      	beq.n	80024cc <mavlink_frame_char_buffer+0x3e8>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	220f      	movs	r2, #15
 80024b2:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	220d      	movs	r2, #13
 80024b8:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	f000 808d 	beq.w	80025de <mavlink_frame_char_buffer+0x4fa>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 80024ca:	e088      	b.n	80025de <mavlink_frame_char_buffer+0x4fa>
			if (status->signing &&
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01f      	beq.n	8002514 <mavlink_frame_char_buffer+0x430>
			   	(status->signing->accept_unsigned_callback == NULL ||
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d013      	beq.n	8002506 <mavlink_frame_char_buffer+0x422>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	7a59      	ldrb	r1, [r3, #9]
 80024e8:	7a98      	ldrb	r0, [r3, #10]
 80024ea:	0200      	lsls	r0, r0, #8
 80024ec:	4301      	orrs	r1, r0
 80024ee:	7adb      	ldrb	r3, [r3, #11]
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	430b      	orrs	r3, r1
 80024f4:	4619      	mov	r1, r3
 80024f6:	68b8      	ldr	r0, [r7, #8]
 80024f8:	4790      	blx	r2
 80024fa:	4603      	mov	r3, r0
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <mavlink_frame_char_buffer+0x430>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d002      	beq.n	8002514 <mavlink_frame_char_buffer+0x430>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2203      	movs	r2, #3
 8002512:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2201      	movs	r2, #1
 8002518:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05e      	beq.n	80025de <mavlink_frame_char_buffer+0x4fa>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002520:	f240 1223 	movw	r2, #291	; 0x123
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	6838      	ldr	r0, [r7, #0]
 8002528:	f004 fe41 	bl	80071ae <memcpy>
		break;
 800252c:	e057      	b.n	80025de <mavlink_frame_char_buffer+0x4fa>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	7b5b      	ldrb	r3, [r3, #13]
 8002532:	f1c3 030d 	rsb	r3, r3, #13
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	79fa      	ldrb	r2, [r7, #7]
 800253c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	7b5b      	ldrb	r3, [r3, #13]
 8002544:	3b01      	subs	r3, #1
 8002546:	b2da      	uxtb	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	7b5b      	ldrb	r3, [r3, #13]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d146      	bne.n	80025e2 <mavlink_frame_char_buffer+0x4fe>
			// we have the whole signature, check it is OK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	6918      	ldr	r0, [r3, #16]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4619      	mov	r1, r3
 8002560:	f7ff fc00 	bl	8001d64 <mavlink_signature_check>
 8002564:	4603      	mov	r3, r0
 8002566:	77fb      	strb	r3, [r7, #31]
			if (!sig_ok &&
 8002568:	7ffb      	ldrb	r3, [r7, #31]
 800256a:	f083 0301 	eor.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d017      	beq.n	80025a4 <mavlink_frame_char_buffer+0x4c0>
			   	(status->signing->accept_unsigned_callback &&
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 800257a:	2b00      	cmp	r3, #0
 800257c:	d012      	beq.n	80025a4 <mavlink_frame_char_buffer+0x4c0>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	7a59      	ldrb	r1, [r3, #9]
 8002588:	7a98      	ldrb	r0, [r3, #10]
 800258a:	0200      	lsls	r0, r0, #8
 800258c:	4301      	orrs	r1, r0
 800258e:	7adb      	ldrb	r3, [r3, #11]
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	430b      	orrs	r3, r1
 8002594:	4619      	mov	r1, r3
 8002596:	68b8      	ldr	r0, [r7, #8]
 8002598:	4790      	blx	r2
 800259a:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <mavlink_frame_char_buffer+0x4c0>
				// accepted via application level override
				sig_ok = true;
 80025a0:	2301      	movs	r3, #1
 80025a2:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 80025a4:	7ffb      	ldrb	r3, [r7, #31]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <mavlink_frame_char_buffer+0x4ce>
				status->msg_received = MAVLINK_FRAMING_OK;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	e002      	b.n	80025b8 <mavlink_frame_char_buffer+0x4d4>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2203      	movs	r2, #3
 80025b6:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2201      	movs	r2, #1
 80025bc:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00e      	beq.n	80025e2 <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80025c4:	f240 1223 	movw	r2, #291	; 0x123
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f004 fdef 	bl	80071ae <memcpy>
			}
		}
		break;
 80025d0:	e007      	b.n	80025e2 <mavlink_frame_char_buffer+0x4fe>
		break;
 80025d2:	bf00      	nop
 80025d4:	e006      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
		break;
 80025d6:	bf00      	nop
 80025d8:	e004      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
		break;
 80025da:	bf00      	nop
 80025dc:	e002      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
		break;
 80025de:	bf00      	nop
 80025e0:	e000      	b.n	80025e4 <mavlink_frame_char_buffer+0x500>
		break;
 80025e2:	bf00      	nop
	}

	bufferIndex++;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d110      	bne.n	8002614 <mavlink_frame_char_buffer+0x530>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	799a      	ldrb	r2, [r3, #6]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	891b      	ldrh	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <mavlink_frame_char_buffer+0x524>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	891b      	ldrh	r3, [r3, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <mavlink_frame_char_buffer+0x53e>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	78da      	ldrb	r2, [r3, #3]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01a      	beq.n	800265e <mavlink_frame_char_buffer+0x57a>
           r_mavlink_status->parse_state = status->parse_state;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	78da      	ldrb	r2, [r3, #3]
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	791a      	ldrb	r2, [r3, #4]
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	795b      	ldrb	r3, [r3, #5]
 800263c:	3301      	adds	r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	891a      	ldrh	r2, [r3, #8]
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	789b      	ldrb	r3, [r3, #2]
 8002650:	b29a      	uxth	r2, r3
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	7b1a      	ldrb	r2, [r3, #12]
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d110      	bne.n	800268e <mavlink_frame_char_buffer+0x5aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <mavlink_frame_char_buffer+0x5aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002678:	b21a      	sxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	b21b      	sxth	r3, r3
 8002684:	4313      	orrs	r3, r2
 8002686:	b21b      	sxth	r3, r3
 8002688:	b29a      	uxth	r2, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop

0800269c <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b087      	sub	sp, #28
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60ba      	str	r2, [r7, #8]
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4603      	mov	r3, r0
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	460b      	mov	r3, r1
 80026ac:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fb43 	bl	8001d3c <mavlink_get_channel_buffer>
 80026b6:	4604      	mov	r4, r0
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fb2a 	bl	8001d14 <mavlink_get_channel_status>
 80026c0:	4601      	mov	r1, r0
 80026c2:	7bba      	ldrb	r2, [r7, #14]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff fd0a 	bl	80020e4 <mavlink_frame_char_buffer>
 80026d0:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}

080026da <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b088      	sub	sp, #32
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60ba      	str	r2, [r7, #8]
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	460b      	mov	r3, r1
 80026ea:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 80026ec:	7bb9      	ldrb	r1, [r7, #14]
 80026ee:	7bf8      	ldrb	r0, [r7, #15]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f7ff ffd2 	bl	800269c <mavlink_frame_char>
 80026f8:	4603      	mov	r3, r0
 80026fa:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 80026fc:	7ffb      	ldrb	r3, [r7, #31]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d002      	beq.n	8002708 <mavlink_parse_char+0x2e>
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d120      	bne.n	800274a <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fb16 	bl	8001d3c <mavlink_get_channel_buffer>
 8002710:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fafd 	bl	8001d14 <mavlink_get_channel_status>
 800271a:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f7ff fc57 	bl	8001fd0 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2201      	movs	r2, #1
 800272c:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 800272e:	7bbb      	ldrb	r3, [r7, #14]
 8002730:	2bfd      	cmp	r3, #253	; 0xfd
 8002732:	d108      	bne.n	8002746 <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2202      	movs	r2, #2
 8002738:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2200      	movs	r2, #0
 800273e:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8002740:	69b8      	ldr	r0, [r7, #24]
 8002742:	f7ff fc55 	bl	8001ff0 <mavlink_start_checksum>
	    }
	    return 0;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <mavlink_parse_char+0x72>
    }
    return msg_received;
 800274a:	7ffb      	ldrb	r3, [r7, #31]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <main_transmit_buffer>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM7_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void main_transmit_buffer(uint8_t* buffer,uint16_t size){
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002760:	2201      	movs	r2, #1
 8002762:	2120      	movs	r1, #32
 8002764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002768:	f001 f828 	bl	80037bc <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, buffer, size, 100);
 800276c:	887a      	ldrh	r2, [r7, #2]
 800276e:	2364      	movs	r3, #100	; 0x64
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4806      	ldr	r0, [pc, #24]	; (800278c <main_transmit_buffer+0x38>)
 8002774:	f003 fcfe 	bl	8006174 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	2120      	movs	r1, #32
 800277c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002780:	f001 f81c 	bl	80037bc <HAL_GPIO_WritePin>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000c78 	.word	0x20000c78

08002790 <main_stop_motors>:

	}
	HAL_UART_Transmit_IT(&huart2, outBuffer, len);
}
void main_stop_motors(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002794:	2100      	movs	r1, #0
 8002796:	4804      	ldr	r0, [pc, #16]	; (80027a8 <main_stop_motors+0x18>)
 8002798:	f002 fbee 	bl	8004f78 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800279c:	2104      	movs	r1, #4
 800279e:	4802      	ldr	r0, [pc, #8]	; (80027a8 <main_stop_motors+0x18>)
 80027a0:	f002 fbea 	bl	8004f78 <HAL_TIM_PWM_Stop>
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000bd4 	.word	0x20000bd4

080027ac <main_set_motors_speed>:
void main_set_motors_speed(mavlink_motor_setpoint_t motor )
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	463c      	mov	r4, r7
 80027b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htim1.Instance->CCR1 = motor.motor_x;
 80027b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <main_set_motors_speed+0x78>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c4:	ee17 2a90 	vmov	r2, s15
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = motor.motor_y;
 80027ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <main_set_motors_speed+0x78>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d6:	ee17 2a90 	vmov	r2, s15
 80027da:	639a      	str	r2, [r3, #56]	; 0x38

	if (motor.motor_x == 0)
 80027dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80027e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e8:	d104      	bne.n	80027f4 <main_set_motors_speed+0x48>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80027ea:	2100      	movs	r1, #0
 80027ec:	480d      	ldr	r0, [pc, #52]	; (8002824 <main_set_motors_speed+0x78>)
 80027ee:	f002 fbc3 	bl	8004f78 <HAL_TIM_PWM_Stop>
 80027f2:	e003      	b.n	80027fc <main_set_motors_speed+0x50>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80027f4:	2100      	movs	r1, #0
 80027f6:	480b      	ldr	r0, [pc, #44]	; (8002824 <main_set_motors_speed+0x78>)
 80027f8:	f002 fb66 	bl	8004ec8 <HAL_TIM_PWM_Start>

	if (motor.motor_y == 0)
 80027fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002800:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002808:	d104      	bne.n	8002814 <main_set_motors_speed+0x68>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800280a:	2104      	movs	r1, #4
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <main_set_motors_speed+0x78>)
 800280e:	f002 fbb3 	bl	8004f78 <HAL_TIM_PWM_Stop>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

}
 8002812:	e003      	b.n	800281c <main_set_motors_speed+0x70>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002814:	2104      	movs	r1, #4
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <main_set_motors_speed+0x78>)
 8002818:	f002 fb56 	bl	8004ec8 <HAL_TIM_PWM_Start>
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bd90      	pop	{r4, r7, pc}
 8002824:	20000bd4 	.word	0x20000bd4

08002828 <HAL_UART_RxCpltCallback>:
void TM7_IRQHandler(void){
	HAL_TIM_IRQHandler(&htim7);
}

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800282e:	af46      	add	r7, sp, #280	; 0x118
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	6018      	str	r0, [r3, #0]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	mavlink_message_t inmsg;
	mavlink_status_t msgStatus;
	if (huart->Instance == USART2){
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <HAL_UART_RxCpltCallback+0x60>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d11e      	bne.n	800287e <HAL_UART_RxCpltCallback+0x56>
		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(&huart2, &inByte, 1);
 8002840:	2201      	movs	r2, #1
 8002842:	4912      	ldr	r1, [pc, #72]	; (800288c <HAL_UART_RxCpltCallback+0x64>)
 8002844:	4812      	ldr	r0, [pc, #72]	; (8002890 <HAL_UART_RxCpltCallback+0x68>)
 8002846:	f003 fd29 	bl	800629c <HAL_UART_Receive_IT>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_UART_RxCpltCallback+0x64>)
 800284c:	7819      	ldrb	r1, [r3, #0]
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002856:	2000      	movs	r0, #0
 8002858:	f7ff ff3f 	bl	80026da <mavlink_parse_char>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <HAL_UART_RxCpltCallback+0x56>
			mouseDriver_readMsg(inmsg);
 8002862:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002866:	4668      	mov	r0, sp
 8002868:	f104 0310 	add.w	r3, r4, #16
 800286c:	f240 1213 	movw	r2, #275	; 0x113
 8002870:	4619      	mov	r1, r3
 8002872:	f004 fc9c 	bl	80071ae <memcpy>
 8002876:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800287a:	f7fe fecf 	bl	800161c <mouseDriver_readMsg>
		}
	}
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 800287e:	bf00      	nop
 8002880:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	40004400 	.word	0x40004400
 800288c:	20000130 	.word	0x20000130
 8002890:	20000c78 	.word	0x20000c78

08002894 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	tx_finish = 1;
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_UART_TxCpltCallback+0x20>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80028a2:	2120      	movs	r1, #32
 80028a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a8:	f000 ffa0 	bl	80037ec <HAL_GPIO_TogglePin>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000620 	.word	0x20000620

080028b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM7){
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d108      	bne.n	80028dc <HAL_TIM_PeriodElapsedCallback+0x24>
    	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    	mouseDriver_setTime(mouseDriver_getTime()+DT_HEART);
 80028ca:	f7fe fe9b 	bl	8001604 <mouseDriver_getTime>
 80028ce:	4603      	mov	r3, r0
 80028d0:	3305      	adds	r3, #5
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fe86 	bl	80015e4 <mouseDriver_setTime>
    	mouseDriver_controlISR();
 80028d8:	f7fe ff06 	bl	80016e8 <mouseDriver_controlISR>
    }
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40001400 	.word	0x40001400

080028e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ec:	f000 fbd2 	bl	8003094 <HAL_Init>

  /* USER CODE BEGIN Init */
	mouseDriver_init();
 80028f0:	f7fe fe6c 	bl	80015cc <mouseDriver_init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2120      	movs	r1, #32
 80028f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028fc:	f000 ff5e 	bl	80037bc <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002900:	f000 f830 	bl	8002964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002904:	f000 f9d4 	bl	8002cb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002908:	f000 f996 	bl	8002c38 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800290c:	f000 f958 	bl	8002bc0 <MX_TIM7_Init>
  MX_TIM1_Init();
 8002910:	f000 f89e 	bl	8002a50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &inByte, 1);
 8002914:	2201      	movs	r2, #1
 8002916:	490f      	ldr	r1, [pc, #60]	; (8002954 <main+0x6c>)
 8002918:	480f      	ldr	r0, [pc, #60]	; (8002958 <main+0x70>)
 800291a:	f003 fcbf 	bl	800629c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800291e:	480f      	ldr	r0, [pc, #60]	; (800295c <main+0x74>)
 8002920:	f002 fa72 	bl	8004e08 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  outBuffer[0] = 'H';
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <main+0x78>)
 8002926:	2248      	movs	r2, #72	; 0x48
 8002928:	701a      	strb	r2, [r3, #0]
  outBuffer[1] = 'E';
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <main+0x78>)
 800292c:	2245      	movs	r2, #69	; 0x45
 800292e:	705a      	strb	r2, [r3, #1]
  outBuffer[2] = 'L';
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <main+0x78>)
 8002932:	224c      	movs	r2, #76	; 0x4c
 8002934:	709a      	strb	r2, [r3, #2]
  outBuffer[3] = 'L';
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <main+0x78>)
 8002938:	224c      	movs	r2, #76	; 0x4c
 800293a:	70da      	strb	r2, [r3, #3]
  outBuffer[4] = 'O';
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <main+0x78>)
 800293e:	224f      	movs	r2, #79	; 0x4f
 8002940:	711a      	strb	r2, [r3, #4]
  outBuffer[5] = '\n';
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <main+0x78>)
 8002944:	220a      	movs	r2, #10
 8002946:	715a      	strb	r2, [r3, #5]
  while (1)
  {

	 mouseDriver_idle();
 8002948:	f7fe fe96 	bl	8001678 <mouseDriver_idle>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 800294c:	2064      	movs	r0, #100	; 0x64
 800294e:	f000 fc19 	bl	8003184 <HAL_Delay>
	 mouseDriver_idle();
 8002952:	e7f9      	b.n	8002948 <main+0x60>
 8002954:	20000130 	.word	0x20000130
 8002958:	20000c78 	.word	0x20000c78
 800295c:	20000cf8 	.word	0x20000cf8
 8002960:	20000c14 	.word	0x20000c14

08002964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0b8      	sub	sp, #224	; 0xe0
 8002968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800296a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800296e:	2244      	movs	r2, #68	; 0x44
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f004 fc26 	bl	80071c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002978:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002988:	463b      	mov	r3, r7
 800298a:	2288      	movs	r2, #136	; 0x88
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f004 fc18 	bl	80071c4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002994:	2302      	movs	r3, #2
 8002996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800299a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800299e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029a2:	2310      	movs	r3, #16
 80029a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80029ba:	230a      	movs	r3, #10
 80029bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029c0:	2307      	movs	r3, #7
 80029c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029cc:	2302      	movs	r3, #2
 80029ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 ff86 	bl	80038e8 <HAL_RCC_OscConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80029e2:	f000 f9cd 	bl	8002d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e6:	230f      	movs	r3, #15
 80029e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ec:	2303      	movs	r3, #3
 80029ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 fb1c 	bl	8004048 <HAL_RCC_ClockConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002a16:	f000 f9b3 	bl	8002d80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a22:	463b      	mov	r3, r7
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 fd13 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002a30:	f000 f9a6 	bl	8002d80 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a38:	f000 ff00 	bl	800383c <HAL_PWREx_ControlVoltageScaling>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002a42:	f000 f99d 	bl	8002d80 <Error_Handler>
  }
}
 8002a46:	bf00      	nop
 8002a48:	37e0      	adds	r7, #224	; 0xe0
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b09a      	sub	sp, #104	; 0x68
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
 8002a80:	615a      	str	r2, [r3, #20]
 8002a82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	222c      	movs	r2, #44	; 0x2c
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 fb9a 	bl	80071c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a90:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002a92:	4a4a      	ldr	r2, [pc, #296]	; (8002bbc <MX_TIM1_Init+0x16c>)
 8002a94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PRESCALER_PWM;
 8002a96:	4b48      	ldr	r3, [pc, #288]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002a98:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002a9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a9e:	4b46      	ldr	r3, [pc, #280]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = COUNTER_PERIOD_PWM;
 8002aa4:	4b44      	ldr	r3, [pc, #272]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002aa6:	22c8      	movs	r2, #200	; 0xc8
 8002aa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aaa:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ab0:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab6:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002abc:	483e      	ldr	r0, [pc, #248]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002abe:	f002 f977 	bl	8004db0 <HAL_TIM_Base_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002ac8:	f000 f95a 	bl	8002d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4837      	ldr	r0, [pc, #220]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002ada:	f002 fcf3 	bl	80054c4 <HAL_TIM_ConfigClockSource>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002ae4:	f000 f94c 	bl	8002d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ae8:	4833      	ldr	r0, [pc, #204]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002aea:	f002 f9b7 	bl	8004e5c <HAL_TIM_PWM_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002af4:	f000 f944 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af8:	2300      	movs	r3, #0
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b08:	4619      	mov	r1, r3
 8002b0a:	482b      	ldr	r0, [pc, #172]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002b0c:	f003 f9ec 	bl	8005ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002b16:	f000 f933 	bl	8002d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b1a:	2360      	movs	r3, #96	; 0x60
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = PULSE_PWM;
 8002b1e:	230a      	movs	r3, #10
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b22:	2300      	movs	r3, #0
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b26:	2300      	movs	r3, #0
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481e      	ldr	r0, [pc, #120]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002b40:	f002 fba8 	bl	8005294 <HAL_TIM_PWM_ConfigChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002b4a:	f000 f919 	bl	8002d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b52:	2204      	movs	r2, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4818      	ldr	r0, [pc, #96]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002b58:	f002 fb9c 	bl	8005294 <HAL_TIM_PWM_ConfigChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002b62:	f000 f90d 	bl	8002d80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002b9c:	f003 fa00 	bl	8005fa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002ba6:	f000 f8eb 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002baa:	4803      	ldr	r0, [pc, #12]	; (8002bb8 <MX_TIM1_Init+0x168>)
 8002bac:	f000 f94e 	bl	8002e4c <HAL_TIM_MspPostInit>

}
 8002bb0:	bf00      	nop
 8002bb2:	3768      	adds	r7, #104	; 0x68
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000bd4 	.word	0x20000bd4
 8002bbc:	40012c00 	.word	0x40012c00

08002bc0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <MX_TIM7_Init+0x70>)
 8002bd2:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <MX_TIM7_Init+0x74>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PRESCALER_HEART;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <MX_TIM7_Init+0x70>)
 8002bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bdc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <MX_TIM7_Init+0x70>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = COUNTER_PERIOD_HEART;
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <MX_TIM7_Init+0x70>)
 8002be6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002bea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <MX_TIM7_Init+0x70>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bf2:	480f      	ldr	r0, [pc, #60]	; (8002c30 <MX_TIM7_Init+0x70>)
 8002bf4:	f002 f8dc 	bl	8004db0 <HAL_TIM_Base_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002bfe:	f000 f8bf 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4808      	ldr	r0, [pc, #32]	; (8002c30 <MX_TIM7_Init+0x70>)
 8002c10:	f003 f96a 	bl	8005ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002c1a:	f000 f8b1 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_NVIC_SetPriority(TIM7_IRQn,1,1);
 8002c1e:	2201      	movs	r2, #1
 8002c20:	2101      	movs	r1, #1
 8002c22:	2037      	movs	r0, #55	; 0x37
 8002c24:	f000 fbab 	bl	800337e <HAL_NVIC_SetPriority>
  /* USER CODE END TIM7_Init 2 */

}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000cf8 	.word	0x20000cf8
 8002c34:	40001400 	.word	0x40001400

08002c38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ca8 <MX_USART2_UART_Init+0x70>)
 8002c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c44:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4a:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c5e:	220c      	movs	r2, #12
 8002c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c7a:	480a      	ldr	r0, [pc, #40]	; (8002ca4 <MX_USART2_UART_Init+0x6c>)
 8002c7c:	f003 fa2c 	bl	80060d8 <HAL_UART_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c86:	f000 f87b 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* Peripheral interrupt init*/
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	2026      	movs	r0, #38	; 0x26
 8002c90:	f000 fb75 	bl	800337e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c94:	2026      	movs	r0, #38	; 0x26
 8002c96:	f000 fb8e 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  tx_finish = 1;
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <MX_USART2_UART_Init+0x74>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART2_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000c78 	.word	0x20000c78
 8002ca8:	40004400 	.word	0x40004400
 8002cac:	20000620 	.word	0x20000620

08002cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
 8002cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d12:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d1a:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2120      	movs	r1, #32
 8002d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d2e:	f000 fd45 	bl	80037bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <MX_GPIO_Init+0xc8>)
 8002d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4619      	mov	r1, r3
 8002d46:	480d      	ldr	r0, [pc, #52]	; (8002d7c <MX_GPIO_Init+0xcc>)
 8002d48:	f000 fb90 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d50:	2301      	movs	r3, #1
 8002d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d66:	f000 fb81 	bl	800346c <HAL_GPIO_Init>

}
 8002d6a:	bf00      	nop
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
 8002d78:	10210000 	.word	0x10210000
 8002d7c:	48000800 	.word	0x48000800

08002d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_MspInit+0x44>)
 8002d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <HAL_MspInit+0x44>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6613      	str	r3, [r2, #96]	; 0x60
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <HAL_MspInit+0x44>)
 8002da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_MspInit+0x44>)
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	4a08      	ldr	r2, [pc, #32]	; (8002dd4 <HAL_MspInit+0x44>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_MspInit+0x44>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_TIM_Base_MspInit+0x68>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10c      	bne.n	8002e04 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_TIM_Base_MspInit+0x6c>)
 8002dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <HAL_TIM_Base_MspInit+0x6c>)
 8002df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002df4:	6613      	str	r3, [r2, #96]	; 0x60
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_TIM_Base_MspInit+0x6c>)
 8002df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e02:	e018      	b.n	8002e36 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <HAL_TIM_Base_MspInit+0x70>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d113      	bne.n	8002e36 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <HAL_TIM_Base_MspInit+0x6c>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a0c      	ldr	r2, [pc, #48]	; (8002e44 <HAL_TIM_Base_MspInit+0x6c>)
 8002e14:	f043 0320 	orr.w	r3, r3, #32
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_TIM_Base_MspInit+0x6c>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2037      	movs	r0, #55	; 0x37
 8002e2c:	f000 faa7 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e30:	2037      	movs	r0, #55	; 0x37
 8002e32:	f000 fac0 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40001400 	.word	0x40001400

08002e4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <HAL_TIM_MspPostInit+0x68>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d11d      	bne.n	8002eaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_TIM_MspPostInit+0x6c>)
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <HAL_TIM_MspPostInit+0x6c>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_TIM_MspPostInit+0x6c>)
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9c:	f107 030c 	add.w	r3, r7, #12
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea6:	f000 fae1 	bl	800346c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002eaa:	bf00      	nop
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40021000 	.word	0x40021000

08002ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1b      	ldr	r2, [pc, #108]	; (8002f48 <HAL_UART_MspInit+0x8c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d130      	bne.n	8002f40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_UART_MspInit+0x90>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_UART_MspInit+0x90>)
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_UART_MspInit+0x90>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_UART_MspInit+0x90>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <HAL_UART_MspInit+0x90>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_UART_MspInit+0x90>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f0e:	230c      	movs	r3, #12
 8002f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f1e:	2307      	movs	r3, #7
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2c:	f000 fa9e 	bl	800346c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f30:	2200      	movs	r2, #0
 8002f32:	2100      	movs	r1, #0
 8002f34:	2026      	movs	r0, #38	; 0x26
 8002f36:	f000 fa22 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f3a:	2026      	movs	r0, #38	; 0x26
 8002f3c:	f000 fa3b 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f40:	bf00      	nop
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40004400 	.word	0x40004400
 8002f4c:	40021000 	.word	0x40021000

08002f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f62:	e7fe      	b.n	8002f62 <HardFault_Handler+0x4>

08002f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <MemManage_Handler+0x4>

08002f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <BusFault_Handler+0x4>

08002f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <UsageFault_Handler+0x4>

08002f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa4:	f000 f8d0 	bl	8003148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}

08002fac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <USART2_IRQHandler+0x10>)
 8002fb2:	f003 fa15 	bl	80063e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000c78 	.word	0x20000c78

08002fc0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <TIM7_IRQHandler+0x10>)
 8002fc6:	f002 f845 	bl	8005054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000cf8 	.word	0x20000cf8

08002fd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <SystemInit+0x64>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	4a16      	ldr	r2, [pc, #88]	; (8003038 <SystemInit+0x64>)
 8002fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <SystemInit+0x68>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <SystemInit+0x68>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <SystemInit+0x68>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <SystemInit+0x68>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a0f      	ldr	r2, [pc, #60]	; (800303c <SystemInit+0x68>)
 8003000:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003004:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003008:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <SystemInit+0x68>)
 800300c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003010:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <SystemInit+0x68>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <SystemInit+0x68>)
 8003018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <SystemInit+0x68>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <SystemInit+0x64>)
 8003026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800302a:	609a      	str	r2, [r3, #8]
#endif
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00
 800303c:	40021000 	.word	0x40021000

08003040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003078 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003044:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003046:	e003      	b.n	8003050 <LoopCopyDataInit>

08003048 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800304a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800304c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800304e:	3104      	adds	r1, #4

08003050 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003050:	480b      	ldr	r0, [pc, #44]	; (8003080 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003054:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003056:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003058:	d3f6      	bcc.n	8003048 <CopyDataInit>
	ldr	r2, =_sbss
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <LoopForever+0x12>)
	b	LoopFillZerobss
 800305c:	e002      	b.n	8003064 <LoopFillZerobss>

0800305e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800305e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003060:	f842 3b04 	str.w	r3, [r2], #4

08003064 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <LoopForever+0x16>)
	cmp	r2, r3
 8003066:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003068:	d3f9      	bcc.n	800305e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800306a:	f7ff ffb3 	bl	8002fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800306e:	f004 f86b 	bl	8007148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003072:	f7ff fc39 	bl	80028e8 <main>

08003076 <LoopForever>:

LoopForever:
    b LoopForever
 8003076:	e7fe      	b.n	8003076 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003078:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800307c:	08007480 	.word	0x08007480
	ldr	r0, =_sdata
 8003080:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003084:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003088:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800308c:	20000d40 	.word	0x20000d40

08003090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003090:	e7fe      	b.n	8003090 <ADC1_2_IRQHandler>
	...

08003094 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <HAL_Init+0x3c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <HAL_Init+0x3c>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030aa:	2003      	movs	r0, #3
 80030ac:	f000 f95c 	bl	8003368 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030b0:	2000      	movs	r0, #0
 80030b2:	f000 f80f 	bl	80030d4 <HAL_InitTick>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	71fb      	strb	r3, [r7, #7]
 80030c0:	e001      	b.n	80030c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030c2:	f7ff fe65 	bl	8002d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030c6:	79fb      	ldrb	r3, [r7, #7]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40022000 	.word	0x40022000

080030d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80030e0:	4b16      	ldr	r3, [pc, #88]	; (800313c <HAL_InitTick+0x68>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d022      	beq.n	800312e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_InitTick+0x6c>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <HAL_InitTick+0x68>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f968 	bl	80033d2 <HAL_SYSTICK_Config>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10f      	bne.n	8003128 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b0f      	cmp	r3, #15
 800310c:	d809      	bhi.n	8003122 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800310e:	2200      	movs	r2, #0
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003116:	f000 f932 	bl	800337e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <HAL_InitTick+0x70>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e007      	b.n	8003132 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e004      	b.n	8003132 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e001      	b.n	8003132 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000008 	.word	0x20000008
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_IncTick+0x1c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_IncTick+0x20>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4413      	add	r3, r2
 8003156:	4a03      	ldr	r2, [pc, #12]	; (8003164 <HAL_IncTick+0x1c>)
 8003158:	6013      	str	r3, [r2, #0]
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	20000d3c 	.word	0x20000d3c
 8003168:	20000008 	.word	0x20000008

0800316c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return uwTick;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_GetTick+0x14>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000d3c 	.word	0x20000d3c

08003184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7ff ffee 	bl	800316c <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800319c:	d004      	beq.n	80031a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_Delay+0x40>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031a8:	bf00      	nop
 80031aa:	f7ff ffdf 	bl	800316c <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d8f7      	bhi.n	80031aa <HAL_Delay+0x26>
  {
  }
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000008 	.word	0x20000008

080031c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e4:	4013      	ands	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031fa:	4a04      	ldr	r2, [pc, #16]	; (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	60d3      	str	r3, [r2, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <__NVIC_GetPriorityGrouping+0x18>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	f003 0307 	and.w	r3, r3, #7
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	2b00      	cmp	r3, #0
 800323c:	db0b      	blt.n	8003256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	f003 021f 	and.w	r2, r3, #31
 8003244:	4907      	ldr	r1, [pc, #28]	; (8003264 <__NVIC_EnableIRQ+0x38>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2001      	movs	r0, #1
 800324e:	fa00 f202 	lsl.w	r2, r0, r2
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000e100 	.word	0xe000e100

08003268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	6039      	str	r1, [r7, #0]
 8003272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	2b00      	cmp	r3, #0
 800327a:	db0a      	blt.n	8003292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	490c      	ldr	r1, [pc, #48]	; (80032b4 <__NVIC_SetPriority+0x4c>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	440b      	add	r3, r1
 800328c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003290:	e00a      	b.n	80032a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4908      	ldr	r1, [pc, #32]	; (80032b8 <__NVIC_SetPriority+0x50>)
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	3b04      	subs	r3, #4
 80032a0:	0112      	lsls	r2, r2, #4
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	440b      	add	r3, r1
 80032a6:	761a      	strb	r2, [r3, #24]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000e100 	.word	0xe000e100
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f1c3 0307 	rsb	r3, r3, #7
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	bf28      	it	cs
 80032da:	2304      	movcs	r3, #4
 80032dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d902      	bls.n	80032ec <NVIC_EncodePriority+0x30>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3b03      	subs	r3, #3
 80032ea:	e000      	b.n	80032ee <NVIC_EncodePriority+0x32>
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003304:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43d9      	mvns	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	4313      	orrs	r3, r2
         );
}
 8003316:	4618      	mov	r0, r3
 8003318:	3724      	adds	r7, #36	; 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003334:	d301      	bcc.n	800333a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003336:	2301      	movs	r3, #1
 8003338:	e00f      	b.n	800335a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <SysTick_Config+0x40>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003342:	210f      	movs	r1, #15
 8003344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003348:	f7ff ff8e 	bl	8003268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <SysTick_Config+0x40>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <SysTick_Config+0x40>)
 8003354:	2207      	movs	r2, #7
 8003356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	e000e010 	.word	0xe000e010

08003368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff29 	bl	80031c8 <__NVIC_SetPriorityGrouping>
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	4603      	mov	r3, r0
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003390:	f7ff ff3e 	bl	8003210 <__NVIC_GetPriorityGrouping>
 8003394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	6978      	ldr	r0, [r7, #20]
 800339c:	f7ff ff8e 	bl	80032bc <NVIC_EncodePriority>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff5d 	bl	8003268 <__NVIC_SetPriority>
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff31 	bl	800322c <__NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ffa2 	bl	8003324 <SysTick_Config>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d005      	beq.n	800340e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2204      	movs	r2, #4
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
 800340c:	e029      	b.n	8003462 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 020e 	bic.w	r2, r2, #14
 800341c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f003 021c 	and.w	r2, r3, #28
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f202 	lsl.w	r2, r1, r2
 8003440:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
    }
  }
  return status;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347a:	e17f      	b.n	800377c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	4013      	ands	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8171 	beq.w	8003776 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x38>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b12      	cmp	r3, #18
 80034a2:	d123      	bne.n	80034ec <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	08da      	lsrs	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3208      	adds	r2, #8
 80034ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	220f      	movs	r2, #15
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	6939      	ldr	r1, [r7, #16]
 80034e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	2203      	movs	r2, #3
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0203 	and.w	r2, r3, #3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d00b      	beq.n	8003540 <HAL_GPIO_Init+0xd4>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d007      	beq.n	8003540 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003534:	2b11      	cmp	r3, #17
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b12      	cmp	r3, #18
 800353e:	d130      	bne.n	80035a2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2203      	movs	r2, #3
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003576:	2201      	movs	r2, #1
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 0201 	and.w	r2, r3, #1
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d118      	bne.n	80035e0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035b4:	2201      	movs	r2, #1
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f003 0201 	and.w	r2, r3, #1
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80ac 	beq.w	8003776 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800361e:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <HAL_GPIO_Init+0x32c>)
 8003620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003622:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <HAL_GPIO_Init+0x32c>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6613      	str	r3, [r2, #96]	; 0x60
 800362a:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_GPIO_Init+0x32c>)
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003636:	4a59      	ldr	r2, [pc, #356]	; (800379c <HAL_GPIO_Init+0x330>)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	3302      	adds	r3, #2
 800363e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003642:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	220f      	movs	r2, #15
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003660:	d025      	beq.n	80036ae <HAL_GPIO_Init+0x242>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4e      	ldr	r2, [pc, #312]	; (80037a0 <HAL_GPIO_Init+0x334>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01f      	beq.n	80036aa <HAL_GPIO_Init+0x23e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <HAL_GPIO_Init+0x338>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d019      	beq.n	80036a6 <HAL_GPIO_Init+0x23a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4c      	ldr	r2, [pc, #304]	; (80037a8 <HAL_GPIO_Init+0x33c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_GPIO_Init+0x236>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4b      	ldr	r2, [pc, #300]	; (80037ac <HAL_GPIO_Init+0x340>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00d      	beq.n	800369e <HAL_GPIO_Init+0x232>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4a      	ldr	r2, [pc, #296]	; (80037b0 <HAL_GPIO_Init+0x344>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <HAL_GPIO_Init+0x22e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a49      	ldr	r2, [pc, #292]	; (80037b4 <HAL_GPIO_Init+0x348>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_GPIO_Init+0x22a>
 8003692:	2306      	movs	r3, #6
 8003694:	e00c      	b.n	80036b0 <HAL_GPIO_Init+0x244>
 8003696:	2307      	movs	r3, #7
 8003698:	e00a      	b.n	80036b0 <HAL_GPIO_Init+0x244>
 800369a:	2305      	movs	r3, #5
 800369c:	e008      	b.n	80036b0 <HAL_GPIO_Init+0x244>
 800369e:	2304      	movs	r3, #4
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x244>
 80036a2:	2303      	movs	r3, #3
 80036a4:	e004      	b.n	80036b0 <HAL_GPIO_Init+0x244>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_Init+0x244>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x244>
 80036ae:	2300      	movs	r3, #0
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	f002 0203 	and.w	r2, r2, #3
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	4093      	lsls	r3, r2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036c0:	4936      	ldr	r1, [pc, #216]	; (800379c <HAL_GPIO_Init+0x330>)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036ce:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <HAL_GPIO_Init+0x34c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036f2:	4a31      	ldr	r2, [pc, #196]	; (80037b8 <HAL_GPIO_Init+0x34c>)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80036f8:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_GPIO_Init+0x34c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43db      	mvns	r3, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800371c:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <HAL_GPIO_Init+0x34c>)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003722:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <HAL_GPIO_Init+0x34c>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_GPIO_Init+0x34c>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <HAL_GPIO_Init+0x34c>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <HAL_GPIO_Init+0x34c>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	3301      	adds	r3, #1
 800377a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fa22 f303 	lsr.w	r3, r2, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	f47f ae78 	bne.w	800347c <HAL_GPIO_Init+0x10>
  }
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40021000 	.word	0x40021000
 800379c:	40010000 	.word	0x40010000
 80037a0:	48000400 	.word	0x48000400
 80037a4:	48000800 	.word	0x48000800
 80037a8:	48000c00 	.word	0x48000c00
 80037ac:	48001000 	.word	0x48001000
 80037b0:	48001400 	.word	0x48001400
 80037b4:	48001800 	.word	0x48001800
 80037b8:	40010400 	.word	0x40010400

080037bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	807b      	strh	r3, [r7, #2]
 80037c8:	4613      	mov	r3, r2
 80037ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037cc:	787b      	ldrb	r3, [r7, #1]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037d2:	887a      	ldrh	r2, [r7, #2]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037d8:	e002      	b.n	80037e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003804:	887a      	ldrh	r2, [r7, #2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800380a:	e002      	b.n	8003812 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800380c:	887a      	ldrh	r2, [r7, #2]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	619a      	str	r2, [r3, #24]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <HAL_PWREx_GetVoltageRange+0x18>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40007000 	.word	0x40007000

0800383c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384a:	d130      	bne.n	80038ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003858:	d038      	beq.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003862:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2232      	movs	r2, #50	; 0x32
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	0c9b      	lsrs	r3, r3, #18
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003880:	e002      	b.n	8003888 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3b01      	subs	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003888:	4b14      	ldr	r3, [pc, #80]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003894:	d102      	bne.n	800389c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f2      	bne.n	8003882 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d110      	bne.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e00f      	b.n	80038ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ba:	d007      	beq.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038bc:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038c4:	4a05      	ldr	r2, [pc, #20]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40007000 	.word	0x40007000
 80038e0:	20000000 	.word	0x20000000
 80038e4:	431bde83 	.word	0x431bde83

080038e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e39d      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038fa:	4ba4      	ldr	r3, [pc, #656]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003904:	4ba1      	ldr	r3, [pc, #644]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80e1 	beq.w	8003ade <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_RCC_OscConfig+0x4a>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b0c      	cmp	r3, #12
 8003926:	f040 8088 	bne.w	8003a3a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b01      	cmp	r3, #1
 800392e:	f040 8084 	bne.w	8003a3a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003932:	4b96      	ldr	r3, [pc, #600]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_RCC_OscConfig+0x62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e375      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1a      	ldr	r2, [r3, #32]
 800394e:	4b8f      	ldr	r3, [pc, #572]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_RCC_OscConfig+0x7c>
 800395a:	4b8c      	ldr	r3, [pc, #560]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003962:	e005      	b.n	8003970 <HAL_RCC_OscConfig+0x88>
 8003964:	4b89      	ldr	r3, [pc, #548]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003970:	4293      	cmp	r3, r2
 8003972:	d223      	bcs.n	80039bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fd09 	bl	8004390 <RCC_SetFlashLatencyFromMSIRange>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e356      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003988:	4b80      	ldr	r3, [pc, #512]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a7f      	ldr	r2, [pc, #508]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 800398e:	f043 0308 	orr.w	r3, r3, #8
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b7d      	ldr	r3, [pc, #500]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	497a      	ldr	r1, [pc, #488]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a6:	4b79      	ldr	r3, [pc, #484]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	4975      	ldr	r1, [pc, #468]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
 80039ba:	e022      	b.n	8003a02 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039bc:	4b73      	ldr	r3, [pc, #460]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a72      	ldr	r2, [pc, #456]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80039c2:	f043 0308 	orr.w	r3, r3, #8
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	4b70      	ldr	r3, [pc, #448]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	496d      	ldr	r1, [pc, #436]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039da:	4b6c      	ldr	r3, [pc, #432]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	4968      	ldr	r1, [pc, #416]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fccc 	bl	8004390 <RCC_SetFlashLatencyFromMSIRange>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e319      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a02:	f000 fc03 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8003a06:	4601      	mov	r1, r0
 8003a08:	4b60      	ldr	r3, [pc, #384]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a5f      	ldr	r2, [pc, #380]	; (8003b90 <HAL_RCC_OscConfig+0x2a8>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a1e:	4a5d      	ldr	r2, [pc, #372]	; (8003b94 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a22:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_RCC_OscConfig+0x2b0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fb54 	bl	80030d4 <HAL_InitTick>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d052      	beq.n	8003adc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	e2fd      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d032      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a42:	4b52      	ldr	r3, [pc, #328]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a51      	ldr	r2, [pc, #324]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a4e:	f7ff fb8d 	bl	800316c <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a56:	f7ff fb89 	bl	800316c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e2e6      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a68:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a74:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a44      	ldr	r2, [pc, #272]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003a7a:	f043 0308 	orr.w	r3, r3, #8
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b42      	ldr	r3, [pc, #264]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	493f      	ldr	r1, [pc, #252]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a92:	4b3e      	ldr	r3, [pc, #248]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	493a      	ldr	r1, [pc, #232]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
 8003aa6:	e01a      	b.n	8003ade <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aa8:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a37      	ldr	r2, [pc, #220]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ab4:	f7ff fb5a 	bl	800316c <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003abc:	f7ff fb56 	bl	800316c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e2b3      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ace:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x1d4>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d074      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_OscConfig+0x214>
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b0c      	cmp	r3, #12
 8003af4:	d10e      	bne.n	8003b14 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d10b      	bne.n	8003b14 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afc:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d064      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2ea>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d160      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e290      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d106      	bne.n	8003b2c <HAL_RCC_OscConfig+0x244>
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e01d      	b.n	8003b68 <HAL_RCC_OscConfig+0x280>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x268>
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0x280>
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <HAL_RCC_OscConfig+0x2a4>)
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01c      	beq.n	8003baa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7ff fafc 	bl	800316c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b76:	e011      	b.n	8003b9c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b78:	f7ff faf8 	bl	800316c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d90a      	bls.n	8003b9c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e255      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	08007428 	.word	0x08007428
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9c:	4bae      	ldr	r3, [pc, #696]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0e7      	beq.n	8003b78 <HAL_RCC_OscConfig+0x290>
 8003ba8:	e014      	b.n	8003bd4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7ff fadf 	bl	800316c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb2:	f7ff fadb 	bl	800316c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b64      	cmp	r3, #100	; 0x64
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e238      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc4:	4ba4      	ldr	r3, [pc, #656]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x2ca>
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d060      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x30a>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b0c      	cmp	r3, #12
 8003bea:	d119      	bne.n	8003c20 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d116      	bne.n	8003c20 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf2:	4b99      	ldr	r3, [pc, #612]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x322>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e215      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b93      	ldr	r3, [pc, #588]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	061b      	lsls	r3, r3, #24
 8003c18:	498f      	ldr	r1, [pc, #572]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1e:	e040      	b.n	8003ca2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d023      	beq.n	8003c70 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c28:	4b8b      	ldr	r3, [pc, #556]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a8a      	ldr	r2, [pc, #552]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7ff fa9a 	bl	800316c <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3c:	f7ff fa96 	bl	800316c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1f3      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4e:	4b82      	ldr	r3, [pc, #520]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	061b      	lsls	r3, r3, #24
 8003c68:	497b      	ldr	r1, [pc, #492]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c70:	4b79      	ldr	r3, [pc, #484]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a78      	ldr	r2, [pc, #480]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7ff fa76 	bl	800316c <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c84:	f7ff fa72 	bl	800316c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1cf      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c96:	4b70      	ldr	r3, [pc, #448]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d03c      	beq.n	8003d28 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01c      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b68      	ldr	r3, [pc, #416]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbc:	4a66      	ldr	r2, [pc, #408]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7ff fa51 	bl	800316c <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cce:	f7ff fa4d 	bl	800316c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e1aa      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce0:	4b5d      	ldr	r3, [pc, #372]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ef      	beq.n	8003cce <HAL_RCC_OscConfig+0x3e6>
 8003cee:	e01b      	b.n	8003d28 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf6:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7ff fa34 	bl	800316c <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d08:	f7ff fa30 	bl	800316c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e18d      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d1a:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ef      	bne.n	8003d08 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a5 	beq.w	8003e80 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	4a43      	ldr	r2, [pc, #268]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
 8003d52:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d62:	4b3e      	ldr	r3, [pc, #248]	; (8003e5c <HAL_RCC_OscConfig+0x574>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d118      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	; (8003e5c <HAL_RCC_OscConfig+0x574>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a3a      	ldr	r2, [pc, #232]	; (8003e5c <HAL_RCC_OscConfig+0x574>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7ff f9f7 	bl	800316c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7ff f9f3 	bl	800316c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e150      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d94:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_RCC_OscConfig+0x574>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d108      	bne.n	8003dba <HAL_RCC_OscConfig+0x4d2>
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db8:	e024      	b.n	8003e04 <HAL_RCC_OscConfig+0x51c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d110      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4fc>
 8003dc2:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003dca:	f043 0304 	orr.w	r3, r3, #4
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de2:	e00f      	b.n	8003e04 <HAL_RCC_OscConfig+0x51c>
 8003de4:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7ff f9ae 	bl	800316c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7ff f9aa 	bl	800316c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e105      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_OscConfig+0x570>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ed      	beq.n	8003e14 <HAL_RCC_OscConfig+0x52c>
 8003e38:	e019      	b.n	8003e6e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7ff f997 	bl	800316c <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	e00e      	b.n	8003e60 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7ff f993 	bl	800316c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d905      	bls.n	8003e60 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0ee      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e60:	4b77      	ldr	r3, [pc, #476]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e9      	bne.n	8003e42 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e6e:	7ffb      	ldrb	r3, [r7, #31]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d105      	bne.n	8003e80 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e74:	4b72      	ldr	r3, [pc, #456]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	4a71      	ldr	r2, [pc, #452]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80d5 	beq.w	8004034 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	f000 808e 	beq.w	8003fae <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d15b      	bne.n	8003f52 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9a:	4b69      	ldr	r3, [pc, #420]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a68      	ldr	r2, [pc, #416]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003ea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7ff f961 	bl	800316c <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eae:	f7ff f95d 	bl	800316c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e0ba      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec0:	4b5f      	ldr	r3, [pc, #380]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ecc:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <HAL_RCC_OscConfig+0x75c>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003edc:	3a01      	subs	r2, #1
 8003ede:	0112      	lsls	r2, r2, #4
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ee6:	0212      	lsls	r2, r2, #8
 8003ee8:	4311      	orrs	r1, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003eee:	0852      	lsrs	r2, r2, #1
 8003ef0:	3a01      	subs	r2, #1
 8003ef2:	0552      	lsls	r2, r2, #21
 8003ef4:	4311      	orrs	r1, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003efa:	0852      	lsrs	r2, r2, #1
 8003efc:	3a01      	subs	r2, #1
 8003efe:	0652      	lsls	r2, r2, #25
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f06:	0912      	lsrs	r2, r2, #4
 8003f08:	0452      	lsls	r2, r2, #17
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	494c      	ldr	r1, [pc, #304]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f12:	4b4b      	ldr	r3, [pc, #300]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4a      	ldr	r2, [pc, #296]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f1e:	4b48      	ldr	r3, [pc, #288]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	4a47      	ldr	r2, [pc, #284]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f28:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7ff f91f 	bl	800316c <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f32:	f7ff f91b 	bl	800316c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e078      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f44:	4b3e      	ldr	r3, [pc, #248]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x64a>
 8003f50:	e070      	b.n	8004034 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f52:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f5e:	4b38      	ldr	r3, [pc, #224]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f6a:	4b35      	ldr	r3, [pc, #212]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4a34      	ldr	r2, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f70:	f023 0303 	bic.w	r3, r3, #3
 8003f74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f76:	4b32      	ldr	r3, [pc, #200]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	4a31      	ldr	r2, [pc, #196]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003f7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7ff f8f1 	bl	800316c <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7ff f8ed 	bl	800316c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e04a      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa0:	4b27      	ldr	r3, [pc, #156]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f0      	bne.n	8003f8e <HAL_RCC_OscConfig+0x6a6>
 8003fac:	e042      	b.n	8004034 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e03d      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003fba:	4b21      	ldr	r3, [pc, #132]	; (8004040 <HAL_RCC_OscConfig+0x758>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f003 0203 	and.w	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d130      	bne.n	8004030 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d127      	bne.n	8004030 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d11f      	bne.n	8004030 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ffa:	2a07      	cmp	r2, #7
 8003ffc:	bf14      	ite	ne
 8003ffe:	2201      	movne	r2, #1
 8004000:	2200      	moveq	r2, #0
 8004002:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004004:	4293      	cmp	r3, r2
 8004006:	d113      	bne.n	8004030 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	3b01      	subs	r3, #1
 8004016:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d109      	bne.n	8004030 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	3b01      	subs	r3, #1
 800402a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
 8004044:	f99d808c 	.word	0xf99d808c

08004048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0c8      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800405c:	4b66      	ldr	r3, [pc, #408]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d910      	bls.n	800408c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b63      	ldr	r3, [pc, #396]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	4961      	ldr	r1, [pc, #388]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b5f      	ldr	r3, [pc, #380]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0b0      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d04c      	beq.n	8004132 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a0:	4b56      	ldr	r3, [pc, #344]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d121      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e09e      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b8:	4b50      	ldr	r3, [pc, #320]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d115      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e092      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d0:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e086      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e07e      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040f0:	4b42      	ldr	r3, [pc, #264]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 0203 	bic.w	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	493f      	ldr	r1, [pc, #252]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004102:	f7ff f833 	bl	800316c <HAL_GetTick>
 8004106:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004108:	e00a      	b.n	8004120 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410a:	f7ff f82f 	bl	800316c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e066      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 020c 	and.w	r2, r3, #12
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	429a      	cmp	r2, r3
 8004130:	d1eb      	bne.n	800410a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413e:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	492c      	ldr	r1, [pc, #176]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d210      	bcs.n	8004180 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 0207 	bic.w	r2, r3, #7
 8004166:	4924      	ldr	r1, [pc, #144]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e036      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4918      	ldr	r1, [pc, #96]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4910      	ldr	r1, [pc, #64]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041be:	f000 f825 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041c2:	4601      	mov	r1, r0
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	5cd3      	ldrb	r3, [r2, r3]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	fa21 f303 	lsr.w	r3, r1, r3
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe ff76 	bl	80030d4 <HAL_InitTick>
 80041e8:	4603      	mov	r3, r0
 80041ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80041ec:	7afb      	ldrb	r3, [r7, #11]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40021000 	.word	0x40021000
 8004200:	08007428 	.word	0x08007428
 8004204:	20000000 	.word	0x20000000
 8004208:	20000004 	.word	0x20000004

0800420c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421a:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <HAL_RCC_GetSysClockFreq+0x104>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004224:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <HAL_RCC_GetSysClockFreq+0x104>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x34>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d121      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d11e      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004240:	4b33      	ldr	r3, [pc, #204]	; (8004310 <HAL_RCC_GetSysClockFreq+0x104>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800424c:	4b30      	ldr	r3, [pc, #192]	; (8004310 <HAL_RCC_GetSysClockFreq+0x104>)
 800424e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e005      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800425c:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <HAL_RCC_GetSysClockFreq+0x104>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004268:	4a2a      	ldr	r2, [pc, #168]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004270:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10d      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800427c:	e00a      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d102      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e004      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d101      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004290:	4b22      	ldr	r3, [pc, #136]	; (800431c <HAL_RCC_GetSysClockFreq+0x110>)
 8004292:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d133      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCC_GetSysClockFreq+0x104>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d002      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80042ae:	e005      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042b0:	4b19      	ldr	r3, [pc, #100]	; (8004318 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042b2:	617b      	str	r3, [r7, #20]
      break;
 80042b4:	e005      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042b6:	4b19      	ldr	r3, [pc, #100]	; (800431c <HAL_RCC_GetSysClockFreq+0x110>)
 80042b8:	617b      	str	r3, [r7, #20]
      break;
 80042ba:	e002      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	617b      	str	r3, [r7, #20]
      break;
 80042c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <HAL_RCC_GetSysClockFreq+0x104>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	3301      	adds	r3, #1
 80042ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_RCC_GetSysClockFreq+0x104>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	fb02 f203 	mul.w	r2, r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_RCC_GetSysClockFreq+0x104>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	0e5b      	lsrs	r3, r3, #25
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	3301      	adds	r3, #1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004302:	69bb      	ldr	r3, [r7, #24]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3724      	adds	r7, #36	; 0x24
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40021000 	.word	0x40021000
 8004314:	08007440 	.word	0x08007440
 8004318:	00f42400 	.word	0x00f42400
 800431c:	007a1200 	.word	0x007a1200

08004320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <HAL_RCC_GetHCLKFreq+0x14>)
 8004326:	681b      	ldr	r3, [r3, #0]
}
 8004328:	4618      	mov	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000000 	.word	0x20000000

08004338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800433c:	f7ff fff0 	bl	8004320 <HAL_RCC_GetHCLKFreq>
 8004340:	4601      	mov	r1, r0
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800434e:	5cd3      	ldrb	r3, [r2, r3]
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021000 	.word	0x40021000
 8004360:	08007438 	.word	0x08007438

08004364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004368:	f7ff ffda 	bl	8004320 <HAL_RCC_GetHCLKFreq>
 800436c:	4601      	mov	r1, r0
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	0adb      	lsrs	r3, r3, #11
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	4a04      	ldr	r2, [pc, #16]	; (800438c <HAL_RCC_GetPCLK2Freq+0x28>)
 800437a:	5cd3      	ldrb	r3, [r2, r3]
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40021000 	.word	0x40021000
 800438c:	08007438 	.word	0x08007438

08004390 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800439c:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043a8:	f7ff fa3a 	bl	8003820 <HAL_PWREx_GetVoltageRange>
 80043ac:	6178      	str	r0, [r7, #20]
 80043ae:	e014      	b.n	80043da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	4a24      	ldr	r2, [pc, #144]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ba:	6593      	str	r3, [r2, #88]	; 0x58
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043c8:	f7ff fa2a 	bl	8003820 <HAL_PWREx_GetVoltageRange>
 80043cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ce:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	4a1d      	ldr	r2, [pc, #116]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d10b      	bne.n	80043fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b80      	cmp	r3, #128	; 0x80
 80043e6:	d919      	bls.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2ba0      	cmp	r3, #160	; 0xa0
 80043ec:	d902      	bls.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ee:	2302      	movs	r3, #2
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e013      	b.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043f4:	2301      	movs	r3, #1
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	e010      	b.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d902      	bls.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004400:	2303      	movs	r3, #3
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e00a      	b.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d102      	bne.n	8004412 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800440c:	2302      	movs	r3, #2
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	e004      	b.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b70      	cmp	r3, #112	; 0x70
 8004416:	d101      	bne.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004418:	2301      	movs	r3, #1
 800441a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f023 0207 	bic.w	r2, r3, #7
 8004424:	4909      	ldr	r1, [pc, #36]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800442c:	4b07      	ldr	r3, [pc, #28]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	d001      	beq.n	800443e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000
 800444c:	40022000 	.word	0x40022000

08004450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004458:	2300      	movs	r3, #0
 800445a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800445c:	2300      	movs	r3, #0
 800445e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004468:	2b00      	cmp	r3, #0
 800446a:	d03f      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004474:	d01c      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447a:	d802      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00e      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004480:	e01f      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004486:	d003      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004488:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800448c:	d01c      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800448e:	e018      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004490:	4b85      	ldr	r3, [pc, #532]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a84      	ldr	r2, [pc, #528]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800449c:	e015      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3304      	adds	r3, #4
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fab9 	bl	8004a1c <RCCEx_PLLSAI1_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ae:	e00c      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3320      	adds	r3, #32
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fba0 	bl	8004bfc <RCCEx_PLLSAI2_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044c0:	e003      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	74fb      	strb	r3, [r7, #19]
      break;
 80044c6:	e000      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80044c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ca:	7cfb      	ldrb	r3, [r7, #19]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d0:	4b75      	ldr	r3, [pc, #468]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044de:	4972      	ldr	r1, [pc, #456]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044e6:	e001      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d03f      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004500:	d01c      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004502:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004506:	d802      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00e      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800450c:	e01f      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800450e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004512:	d003      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004514:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004518:	d01c      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800451a:	e018      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800451c:	4b62      	ldr	r3, [pc, #392]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a61      	ldr	r2, [pc, #388]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004526:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004528:	e015      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fa73 	bl	8004a1c <RCCEx_PLLSAI1_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800453a:	e00c      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3320      	adds	r3, #32
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fb5a 	bl	8004bfc <RCCEx_PLLSAI2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	74fb      	strb	r3, [r7, #19]
      break;
 8004552:	e000      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800455c:	4b52      	ldr	r3, [pc, #328]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456a:	494f      	ldr	r1, [pc, #316]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004572:	e001      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a0 	beq.w	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800458a:	4b47      	ldr	r3, [pc, #284]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800459a:	2300      	movs	r3, #0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00d      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a0:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	4a40      	ldr	r2, [pc, #256]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6593      	str	r3, [r2, #88]	; 0x58
 80045ac:	4b3e      	ldr	r3, [pc, #248]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b8:	2301      	movs	r3, #1
 80045ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045bc:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a3a      	ldr	r2, [pc, #232]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045c8:	f7fe fdd0 	bl	800316c <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045ce:	e009      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d0:	f7fe fdcc 	bl	800316c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d902      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	74fb      	strb	r3, [r7, #19]
        break;
 80045e2:	e005      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045e4:	4b31      	ldr	r3, [pc, #196]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0ef      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d15c      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045f6:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004600:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01f      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	d019      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004614:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004620:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004630:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004640:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fe fd8b 	bl	800316c <HAL_GetTick>
 8004656:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004658:	e00b      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fe fd87 	bl	800316c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d902      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	74fb      	strb	r3, [r7, #19]
            break;
 8004670:	e006      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ec      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10c      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004696:	4904      	ldr	r1, [pc, #16]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800469e:	e009      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
 80046a4:	e006      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b4:	7c7b      	ldrb	r3, [r7, #17]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ba:	4b9e      	ldr	r3, [pc, #632]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	4a9d      	ldr	r2, [pc, #628]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046d2:	4b98      	ldr	r3, [pc, #608]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f023 0203 	bic.w	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	4994      	ldr	r1, [pc, #592]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f4:	4b8f      	ldr	r3, [pc, #572]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fa:	f023 020c 	bic.w	r2, r3, #12
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	498c      	ldr	r1, [pc, #560]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004716:	4b87      	ldr	r3, [pc, #540]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	4983      	ldr	r1, [pc, #524]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004738:	4b7e      	ldr	r3, [pc, #504]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	497b      	ldr	r1, [pc, #492]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800475a:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004768:	4972      	ldr	r1, [pc, #456]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800477c:	4b6d      	ldr	r3, [pc, #436]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	496a      	ldr	r1, [pc, #424]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800479e:	4b65      	ldr	r3, [pc, #404]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	4961      	ldr	r1, [pc, #388]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047c0:	4b5c      	ldr	r3, [pc, #368]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ce:	4959      	ldr	r1, [pc, #356]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047e2:	4b54      	ldr	r3, [pc, #336]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f0:	4950      	ldr	r1, [pc, #320]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004804:	4b4b      	ldr	r3, [pc, #300]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004812:	4948      	ldr	r1, [pc, #288]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004826:	4b43      	ldr	r3, [pc, #268]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	493f      	ldr	r1, [pc, #252]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d028      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004848:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004856:	4937      	ldr	r1, [pc, #220]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004866:	d106      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004868:	4b32      	ldr	r3, [pc, #200]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a31      	ldr	r2, [pc, #196]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800486e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004872:	60d3      	str	r3, [r2, #12]
 8004874:	e011      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800487e:	d10c      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	2101      	movs	r1, #1
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f8c8 	bl	8004a1c <RCCEx_PLLSAI1_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d028      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048a6:	4b23      	ldr	r3, [pc, #140]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	491f      	ldr	r1, [pc, #124]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c4:	d106      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	4a1a      	ldr	r2, [pc, #104]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d0:	60d3      	str	r3, [r2, #12]
 80048d2:	e011      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2101      	movs	r1, #1
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f899 	bl	8004a1c <RCCEx_PLLSAI1_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d02b      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004912:	4908      	ldr	r1, [pc, #32]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004922:	d109      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a02      	ldr	r2, [pc, #8]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800492a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800492e:	60d3      	str	r3, [r2, #12]
 8004930:	e014      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004940:	d10c      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	2101      	movs	r1, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f867 	bl	8004a1c <RCCEx_PLLSAI1_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02f      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004976:	4928      	ldr	r1, [pc, #160]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004986:	d10d      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f844 	bl	8004a1c <RCCEx_PLLSAI1_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d014      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	74bb      	strb	r3, [r7, #18]
 80049a2:	e011      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3320      	adds	r3, #32
 80049b2:	2102      	movs	r1, #2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f921 	bl	8004bfc <RCCEx_PLLSAI2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80049c4:	7cfb      	ldrb	r3, [r7, #19]
 80049c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049d4:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e2:	490d      	ldr	r1, [pc, #52]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a06:	4904      	ldr	r1, [pc, #16]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000

08004a1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a2a:	4b73      	ldr	r3, [pc, #460]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d018      	beq.n	8004a68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a36:	4b70      	ldr	r3, [pc, #448]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0203 	and.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d10d      	bne.n	8004a62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
       ||
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a4e:	4b6a      	ldr	r3, [pc, #424]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d044      	beq.n	8004aec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	e041      	b.n	8004aec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d00c      	beq.n	8004a8a <RCCEx_PLLSAI1_Config+0x6e>
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d013      	beq.n	8004a9c <RCCEx_PLLSAI1_Config+0x80>
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d120      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a78:	4b5f      	ldr	r3, [pc, #380]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d11d      	bne.n	8004ac0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a88:	e01a      	b.n	8004ac0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a8a:	4b5b      	ldr	r3, [pc, #364]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d116      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9a:	e013      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a9c:	4b56      	ldr	r3, [pc, #344]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10f      	bne.n	8004ac8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aa8:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ab8:	e006      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
      break;
 8004abe:	e004      	b.n	8004aca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ac0:	bf00      	nop
 8004ac2:	e002      	b.n	8004aca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ac8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10d      	bne.n	8004aec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ad0:	4b49      	ldr	r3, [pc, #292]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6819      	ldr	r1, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	4944      	ldr	r1, [pc, #272]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d17d      	bne.n	8004bee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a40      	ldr	r2, [pc, #256]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004af8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afe:	f7fe fb35 	bl	800316c <HAL_GetTick>
 8004b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b04:	e009      	b.n	8004b1a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b06:	f7fe fb31 	bl	800316c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d902      	bls.n	8004b1a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	73fb      	strb	r3, [r7, #15]
        break;
 8004b18:	e005      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b1a:	4b37      	ldr	r3, [pc, #220]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ef      	bne.n	8004b06 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d160      	bne.n	8004bee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d111      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b32:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6892      	ldr	r2, [r2, #8]
 8004b42:	0211      	lsls	r1, r2, #8
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68d2      	ldr	r2, [r2, #12]
 8004b48:	0912      	lsrs	r2, r2, #4
 8004b4a:	0452      	lsls	r2, r2, #17
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	492a      	ldr	r1, [pc, #168]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	610b      	str	r3, [r1, #16]
 8004b54:	e027      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d112      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b5c:	4b26      	ldr	r3, [pc, #152]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6892      	ldr	r2, [r2, #8]
 8004b6c:	0211      	lsls	r1, r2, #8
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6912      	ldr	r2, [r2, #16]
 8004b72:	0852      	lsrs	r2, r2, #1
 8004b74:	3a01      	subs	r2, #1
 8004b76:	0552      	lsls	r2, r2, #21
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	491f      	ldr	r1, [pc, #124]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	610b      	str	r3, [r1, #16]
 8004b80:	e011      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6892      	ldr	r2, [r2, #8]
 8004b92:	0211      	lsls	r1, r2, #8
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6952      	ldr	r2, [r2, #20]
 8004b98:	0852      	lsrs	r2, r2, #1
 8004b9a:	3a01      	subs	r2, #1
 8004b9c:	0652      	lsls	r2, r2, #25
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	4915      	ldr	r1, [pc, #84]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb2:	f7fe fadb 	bl	800316c <HAL_GetTick>
 8004bb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bb8:	e009      	b.n	8004bce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bba:	f7fe fad7 	bl	800316c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d902      	bls.n	8004bce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	73fb      	strb	r3, [r7, #15]
          break;
 8004bcc:	e005      	b.n	8004bda <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bce:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0ef      	beq.n	8004bba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	4903      	ldr	r1, [pc, #12]	; (8004bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000

08004bfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c0a:	4b68      	ldr	r3, [pc, #416]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d018      	beq.n	8004c48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c16:	4b65      	ldr	r3, [pc, #404]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0203 	and.w	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d10d      	bne.n	8004c42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
       ||
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c2e:	4b5f      	ldr	r3, [pc, #380]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d044      	beq.n	8004ccc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
 8004c46:	e041      	b.n	8004ccc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d00c      	beq.n	8004c6a <RCCEx_PLLSAI2_Config+0x6e>
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d013      	beq.n	8004c7c <RCCEx_PLLSAI2_Config+0x80>
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d120      	bne.n	8004c9a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c58:	4b54      	ldr	r3, [pc, #336]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11d      	bne.n	8004ca0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c68:	e01a      	b.n	8004ca0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c6a:	4b50      	ldr	r3, [pc, #320]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d116      	bne.n	8004ca4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7a:	e013      	b.n	8004ca4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c7c:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10f      	bne.n	8004ca8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c88:	4b48      	ldr	r3, [pc, #288]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c98:	e006      	b.n	8004ca8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9e:	e004      	b.n	8004caa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ca0:	bf00      	nop
 8004ca2:	e002      	b.n	8004caa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ca4:	bf00      	nop
 8004ca6:	e000      	b.n	8004caa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ca8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10d      	bne.n	8004ccc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cb0:	4b3e      	ldr	r3, [pc, #248]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	4939      	ldr	r1, [pc, #228]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d167      	bne.n	8004da2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cd2:	4b36      	ldr	r3, [pc, #216]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a35      	ldr	r2, [pc, #212]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cde:	f7fe fa45 	bl	800316c <HAL_GetTick>
 8004ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ce4:	e009      	b.n	8004cfa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ce6:	f7fe fa41 	bl	800316c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d902      	bls.n	8004cfa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	73fb      	strb	r3, [r7, #15]
        break;
 8004cf8:	e005      	b.n	8004d06 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ef      	bne.n	8004ce6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d14a      	bne.n	8004da2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d111      	bne.n	8004d36 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d12:	4b26      	ldr	r3, [pc, #152]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6892      	ldr	r2, [r2, #8]
 8004d22:	0211      	lsls	r1, r2, #8
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68d2      	ldr	r2, [r2, #12]
 8004d28:	0912      	lsrs	r2, r2, #4
 8004d2a:	0452      	lsls	r2, r2, #17
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	491f      	ldr	r1, [pc, #124]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	614b      	str	r3, [r1, #20]
 8004d34:	e011      	b.n	8004d5a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d36:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6892      	ldr	r2, [r2, #8]
 8004d46:	0211      	lsls	r1, r2, #8
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6912      	ldr	r2, [r2, #16]
 8004d4c:	0852      	lsrs	r2, r2, #1
 8004d4e:	3a01      	subs	r2, #1
 8004d50:	0652      	lsls	r2, r2, #25
 8004d52:	430a      	orrs	r2, r1
 8004d54:	4915      	ldr	r1, [pc, #84]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a13      	ldr	r2, [pc, #76]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d66:	f7fe fa01 	bl	800316c <HAL_GetTick>
 8004d6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d6c:	e009      	b.n	8004d82 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d6e:	f7fe f9fd 	bl	800316c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d902      	bls.n	8004d82 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8004d80:	e005      	b.n	8004d8e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ef      	beq.n	8004d6e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d106      	bne.n	8004da2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000

08004db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e01d      	b.n	8004dfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fd fffe 	bl	8002dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f000 fc4a 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <HAL_TIM_Base_Start_IT+0x50>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	d00b      	beq.n	8004e4a <HAL_TIM_Base_Start_IT+0x42>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d007      	beq.n	8004e4a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	00010007 	.word	0x00010007

08004e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e01d      	b.n	8004eaa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f815 	bl	8004eb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3304      	adds	r3, #4
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f000 fbf4 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 ffde 	bl	8005e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1e      	ldr	r2, [pc, #120]	; (8004f60 <HAL_TIM_PWM_Start+0x98>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x4a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <HAL_TIM_PWM_Start+0x9c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x4a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <HAL_TIM_PWM_Start+0xa0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x4a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <HAL_TIM_PWM_Start+0xa4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x4a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <HAL_TIM_PWM_Start+0xa8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_PWM_Start+0x4e>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <HAL_TIM_PWM_Start+0x50>
 8004f16:	2300      	movs	r3, #0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <HAL_TIM_PWM_Start+0xac>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d00b      	beq.n	8004f56 <HAL_TIM_PWM_Start+0x8e>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f44:	d007      	beq.n	8004f56 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40013400 	.word	0x40013400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800
 8004f74:	00010007 	.word	0x00010007

08004f78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ff86 	bl	8005e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2a      	ldr	r2, [pc, #168]	; (8005040 <HAL_TIM_PWM_Stop+0xc8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_TIM_PWM_Stop+0x4a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a29      	ldr	r2, [pc, #164]	; (8005044 <HAL_TIM_PWM_Stop+0xcc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_TIM_PWM_Stop+0x4a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a27      	ldr	r2, [pc, #156]	; (8005048 <HAL_TIM_PWM_Stop+0xd0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_TIM_PWM_Stop+0x4a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a26      	ldr	r2, [pc, #152]	; (800504c <HAL_TIM_PWM_Stop+0xd4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_TIM_PWM_Stop+0x4a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a24      	ldr	r2, [pc, #144]	; (8005050 <HAL_TIM_PWM_Stop+0xd8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_PWM_Stop+0x4e>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_TIM_PWM_Stop+0x50>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d017      	beq.n	8004ffc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10f      	bne.n	8004ffc <HAL_TIM_PWM_Stop+0x84>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	f240 4344 	movw	r3, #1092	; 0x444
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d107      	bne.n	8004ffc <HAL_TIM_PWM_Stop+0x84>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ffa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6a1a      	ldr	r2, [r3, #32]
 8005002:	f241 1311 	movw	r3, #4369	; 0x1111
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10f      	bne.n	800502c <HAL_TIM_PWM_Stop+0xb4>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	f240 4344 	movw	r3, #1092	; 0x444
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d107      	bne.n	800502c <HAL_TIM_PWM_Stop+0xb4>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b02      	cmp	r3, #2
 8005068:	d122      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b02      	cmp	r3, #2
 8005076:	d11b      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0202 	mvn.w	r2, #2
 8005080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fad7 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fac9 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fada 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d122      	bne.n	8005104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d11b      	bne.n	8005104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0204 	mvn.w	r2, #4
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 faad 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fa9f 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fab0 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b08      	cmp	r3, #8
 8005110:	d122      	bne.n	8005158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b08      	cmp	r3, #8
 800511e:	d11b      	bne.n	8005158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0208 	mvn.w	r2, #8
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2204      	movs	r2, #4
 800512e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa83 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fa75 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fa86 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b10      	cmp	r3, #16
 8005164:	d122      	bne.n	80051ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b10      	cmp	r3, #16
 8005172:	d11b      	bne.n	80051ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0210 	mvn.w	r2, #16
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2208      	movs	r2, #8
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa59 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fa4b 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fa5c 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d10e      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0201 	mvn.w	r2, #1
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fd fb70 	bl	80028b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	d10e      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b80      	cmp	r3, #128	; 0x80
 80051f2:	d107      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 ff56 	bl	80060b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005212:	d10e      	bne.n	8005232 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b80      	cmp	r3, #128	; 0x80
 8005220:	d107      	bne.n	8005232 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800522a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 ff49 	bl	80060c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d10e      	bne.n	800525e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d107      	bne.n	800525e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fa0a 	bl	8005672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b20      	cmp	r3, #32
 800526a:	d10e      	bne.n	800528a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b20      	cmp	r3, #32
 8005278:	d107      	bne.n	800528a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f06f 0220 	mvn.w	r2, #32
 8005282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 ff09 	bl	800609c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e105      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x226>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b14      	cmp	r3, #20
 80052c2:	f200 80f0 	bhi.w	80054a6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	08005321 	.word	0x08005321
 80052d0:	080054a7 	.word	0x080054a7
 80052d4:	080054a7 	.word	0x080054a7
 80052d8:	080054a7 	.word	0x080054a7
 80052dc:	08005361 	.word	0x08005361
 80052e0:	080054a7 	.word	0x080054a7
 80052e4:	080054a7 	.word	0x080054a7
 80052e8:	080054a7 	.word	0x080054a7
 80052ec:	080053a3 	.word	0x080053a3
 80052f0:	080054a7 	.word	0x080054a7
 80052f4:	080054a7 	.word	0x080054a7
 80052f8:	080054a7 	.word	0x080054a7
 80052fc:	080053e3 	.word	0x080053e3
 8005300:	080054a7 	.word	0x080054a7
 8005304:	080054a7 	.word	0x080054a7
 8005308:	080054a7 	.word	0x080054a7
 800530c:	08005425 	.word	0x08005425
 8005310:	080054a7 	.word	0x080054a7
 8005314:	080054a7 	.word	0x080054a7
 8005318:	080054a7 	.word	0x080054a7
 800531c:	08005465 	.word	0x08005465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fa48 	bl	80057bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0208 	orr.w	r2, r2, #8
 800533a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0204 	bic.w	r2, r2, #4
 800534a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6999      	ldr	r1, [r3, #24]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	619a      	str	r2, [r3, #24]
      break;
 800535e:	e0a3      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fab8 	bl	80058dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	021a      	lsls	r2, r3, #8
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	619a      	str	r2, [r3, #24]
      break;
 80053a0:	e082      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fb21 	bl	80059f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0208 	orr.w	r2, r2, #8
 80053bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0204 	bic.w	r2, r2, #4
 80053cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69d9      	ldr	r1, [r3, #28]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	61da      	str	r2, [r3, #28]
      break;
 80053e0:	e062      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fb89 	bl	8005b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69d9      	ldr	r1, [r3, #28]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	021a      	lsls	r2, r3, #8
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	61da      	str	r2, [r3, #28]
      break;
 8005422:	e041      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fbd2 	bl	8005bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0208 	orr.w	r2, r2, #8
 800543e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0204 	bic.w	r2, r2, #4
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005462:	e021      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fc16 	bl	8005c9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800547e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80054a6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop

080054c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_ConfigClockSource+0x18>
 80054d8:	2302      	movs	r3, #2
 80054da:	e0a8      	b.n	800562e <HAL_TIM_ConfigClockSource+0x16a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005506:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d067      	beq.n	80055e8 <HAL_TIM_ConfigClockSource+0x124>
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d80b      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x70>
 800551c:	2b10      	cmp	r3, #16
 800551e:	d073      	beq.n	8005608 <HAL_TIM_ConfigClockSource+0x144>
 8005520:	2b10      	cmp	r3, #16
 8005522:	d802      	bhi.n	800552a <HAL_TIM_ConfigClockSource+0x66>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d06f      	beq.n	8005608 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005528:	e078      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800552a:	2b20      	cmp	r3, #32
 800552c:	d06c      	beq.n	8005608 <HAL_TIM_ConfigClockSource+0x144>
 800552e:	2b30      	cmp	r3, #48	; 0x30
 8005530:	d06a      	beq.n	8005608 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005532:	e073      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005534:	2b70      	cmp	r3, #112	; 0x70
 8005536:	d00d      	beq.n	8005554 <HAL_TIM_ConfigClockSource+0x90>
 8005538:	2b70      	cmp	r3, #112	; 0x70
 800553a:	d804      	bhi.n	8005546 <HAL_TIM_ConfigClockSource+0x82>
 800553c:	2b50      	cmp	r3, #80	; 0x50
 800553e:	d033      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0xe4>
 8005540:	2b60      	cmp	r3, #96	; 0x60
 8005542:	d041      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005544:	e06a      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554a:	d066      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x156>
 800554c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005550:	d017      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005552:	e063      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	6899      	ldr	r1, [r3, #8]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f000 fc7a 	bl	8005e5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005576:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	609a      	str	r2, [r3, #8]
      break;
 8005580:	e04c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6899      	ldr	r1, [r3, #8]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f000 fc63 	bl	8005e5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a4:	609a      	str	r2, [r3, #8]
      break;
 80055a6:	e039      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f000 fbd7 	bl	8005d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2150      	movs	r1, #80	; 0x50
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fc30 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 80055c6:	e029      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6859      	ldr	r1, [r3, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	461a      	mov	r2, r3
 80055d6:	f000 fbf6 	bl	8005dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2160      	movs	r1, #96	; 0x60
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fc20 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 80055e6:	e019      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	6859      	ldr	r1, [r3, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	461a      	mov	r2, r3
 80055f6:	f000 fbb7 	bl	8005d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2140      	movs	r1, #64	; 0x40
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fc10 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 8005606:	e009      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f000 fc07 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 8005618:	e000      	b.n	800561c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800561a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a40      	ldr	r2, [pc, #256]	; (800579c <TIM_Base_SetConfig+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a6:	d00f      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <TIM_Base_SetConfig+0x118>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <TIM_Base_SetConfig+0x11c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3b      	ldr	r2, [pc, #236]	; (80057a8 <TIM_Base_SetConfig+0x120>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3a      	ldr	r2, [pc, #232]	; (80057ac <TIM_Base_SetConfig+0x124>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d108      	bne.n	80056da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2f      	ldr	r2, [pc, #188]	; (800579c <TIM_Base_SetConfig+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d01f      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d01b      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <TIM_Base_SetConfig+0x118>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d017      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2b      	ldr	r2, [pc, #172]	; (80057a4 <TIM_Base_SetConfig+0x11c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2a      	ldr	r2, [pc, #168]	; (80057a8 <TIM_Base_SetConfig+0x120>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00f      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a29      	ldr	r2, [pc, #164]	; (80057ac <TIM_Base_SetConfig+0x124>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00b      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a28      	ldr	r2, [pc, #160]	; (80057b0 <TIM_Base_SetConfig+0x128>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d007      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <TIM_Base_SetConfig+0x12c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d003      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <TIM_Base_SetConfig+0x130>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d108      	bne.n	8005734 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a10      	ldr	r2, [pc, #64]	; (800579c <TIM_Base_SetConfig+0x114>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00f      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a12      	ldr	r2, [pc, #72]	; (80057ac <TIM_Base_SetConfig+0x124>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00b      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <TIM_Base_SetConfig+0x128>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <TIM_Base_SetConfig+0x12c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <TIM_Base_SetConfig+0x130>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	615a      	str	r2, [r3, #20]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40013400 	.word	0x40013400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800

080057bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 0302 	bic.w	r3, r3, #2
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <TIM_OC1_SetConfig+0x10c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00f      	beq.n	800583c <TIM_OC1_SetConfig+0x80>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a2b      	ldr	r2, [pc, #172]	; (80058cc <TIM_OC1_SetConfig+0x110>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <TIM_OC1_SetConfig+0x80>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2a      	ldr	r2, [pc, #168]	; (80058d0 <TIM_OC1_SetConfig+0x114>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_OC1_SetConfig+0x80>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <TIM_OC1_SetConfig+0x118>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC1_SetConfig+0x80>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <TIM_OC1_SetConfig+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10c      	bne.n	8005856 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0308 	bic.w	r3, r3, #8
 8005842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <TIM_OC1_SetConfig+0x10c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00f      	beq.n	800587e <TIM_OC1_SetConfig+0xc2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <TIM_OC1_SetConfig+0x110>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00b      	beq.n	800587e <TIM_OC1_SetConfig+0xc2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <TIM_OC1_SetConfig+0x114>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d007      	beq.n	800587e <TIM_OC1_SetConfig+0xc2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <TIM_OC1_SetConfig+0x118>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_OC1_SetConfig+0xc2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <TIM_OC1_SetConfig+0x11c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d111      	bne.n	80058a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800588c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800

080058dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f023 0210 	bic.w	r2, r3, #16
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0320 	bic.w	r3, r3, #32
 800592a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a28      	ldr	r2, [pc, #160]	; (80059dc <TIM_OC2_SetConfig+0x100>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_OC2_SetConfig+0x6c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a27      	ldr	r2, [pc, #156]	; (80059e0 <TIM_OC2_SetConfig+0x104>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d10d      	bne.n	8005964 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <TIM_OC2_SetConfig+0x100>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00f      	beq.n	800598c <TIM_OC2_SetConfig+0xb0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <TIM_OC2_SetConfig+0x104>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_OC2_SetConfig+0xb0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <TIM_OC2_SetConfig+0x108>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_OC2_SetConfig+0xb0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a1a      	ldr	r2, [pc, #104]	; (80059e8 <TIM_OC2_SetConfig+0x10c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC2_SetConfig+0xb0>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a19      	ldr	r2, [pc, #100]	; (80059ec <TIM_OC2_SetConfig+0x110>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d113      	bne.n	80059b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800599a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40013400 	.word	0x40013400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800

080059f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a27      	ldr	r2, [pc, #156]	; (8005aec <TIM_OC3_SetConfig+0xfc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <TIM_OC3_SetConfig+0x6a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <TIM_OC3_SetConfig+0x100>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d10d      	bne.n	8005a76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <TIM_OC3_SetConfig+0xfc>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00f      	beq.n	8005a9e <TIM_OC3_SetConfig+0xae>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <TIM_OC3_SetConfig+0x100>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_OC3_SetConfig+0xae>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <TIM_OC3_SetConfig+0x104>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_OC3_SetConfig+0xae>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <TIM_OC3_SetConfig+0x108>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC3_SetConfig+0xae>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a18      	ldr	r2, [pc, #96]	; (8005afc <TIM_OC3_SetConfig+0x10c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d113      	bne.n	8005ac6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40013400 	.word	0x40013400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	40014800 	.word	0x40014800

08005b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	031b      	lsls	r3, r3, #12
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <TIM_OC4_SetConfig+0xc0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00f      	beq.n	8005b84 <TIM_OC4_SetConfig+0x84>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <TIM_OC4_SetConfig+0xc4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_OC4_SetConfig+0x84>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <TIM_OC4_SetConfig+0xc8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_OC4_SetConfig+0x84>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <TIM_OC4_SetConfig+0xcc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_OC4_SetConfig+0x84>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <TIM_OC4_SetConfig+0xd0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d109      	bne.n	8005b98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	019b      	lsls	r3, r3, #6
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40013400 	.word	0x40013400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400
 8005bd0:	40014800 	.word	0x40014800

08005bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_OC5_SetConfig+0xb4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00f      	beq.n	8005c4e <TIM_OC5_SetConfig+0x7a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC5_SetConfig+0xb8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <TIM_OC5_SetConfig+0x7a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC5_SetConfig+0xbc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_OC5_SetConfig+0x7a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <TIM_OC5_SetConfig+0xc0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_OC5_SetConfig+0x7a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <TIM_OC5_SetConfig+0xc4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d109      	bne.n	8005c62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	621a      	str	r2, [r3, #32]
}
 8005c7c:	bf00      	nop
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40013400 	.word	0x40013400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800

08005c9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	051b      	lsls	r3, r3, #20
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <TIM_OC6_SetConfig+0xb8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00f      	beq.n	8005d18 <TIM_OC6_SetConfig+0x7c>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <TIM_OC6_SetConfig+0xbc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00b      	beq.n	8005d18 <TIM_OC6_SetConfig+0x7c>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <TIM_OC6_SetConfig+0xc0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d007      	beq.n	8005d18 <TIM_OC6_SetConfig+0x7c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <TIM_OC6_SetConfig+0xc4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_OC6_SetConfig+0x7c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <TIM_OC6_SetConfig+0xc8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d109      	bne.n	8005d2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40013400 	.word	0x40013400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400
 8005d64:	40014800 	.word	0x40014800

08005d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f023 0201 	bic.w	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 030a 	bic.w	r3, r3, #10
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b087      	sub	sp, #28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f023 0210 	bic.w	r2, r3, #16
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	031b      	lsls	r3, r3, #12
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f043 0307 	orr.w	r3, r3, #7
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	609a      	str	r2, [r3, #8]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	021a      	lsls	r2, r3, #8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	609a      	str	r2, [r3, #8]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2201      	movs	r2, #1
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1a      	ldr	r2, [r3, #32]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	401a      	ands	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1a      	ldr	r2, [r3, #32]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e045      	b.n	8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1c      	ldr	r2, [pc, #112]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d108      	bne.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f5e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40013400 	.word	0x40013400

08005fa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e065      	b.n	8006088 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a16      	ldr	r2, [pc, #88]	; (8006094 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a14      	ldr	r2, [pc, #80]	; (8006098 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d115      	bne.n	8006076 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	051b      	lsls	r3, r3, #20
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40013400 	.word	0x40013400

0800609c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e040      	b.n	800616c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fc fede 	bl	8002ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2224      	movs	r2, #36	; 0x24
 8006104:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fa9c 	bl	8006654 <UART_SetConfig>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e022      	b.n	800616c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fdd8 	bl	8006ce4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fe5f 	bl	8006e28 <UART_CheckIdleState>
 800616a:	4603      	mov	r3, r0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af02      	add	r7, sp, #8
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006188:	2b20      	cmp	r3, #32
 800618a:	f040 8081 	bne.w	8006290 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <HAL_UART_Transmit+0x26>
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e079      	b.n	8006292 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_UART_Transmit+0x38>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e072      	b.n	8006292 <HAL_UART_Transmit+0x11e>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2221      	movs	r2, #33	; 0x21
 80061be:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80061c0:	f7fc ffd4 	bl	800316c <HAL_GetTick>
 80061c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	88fa      	ldrh	r2, [r7, #6]
 80061d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061de:	d108      	bne.n	80061f2 <HAL_UART_Transmit+0x7e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e003      	b.n	80061fa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061fa:	e02d      	b.n	8006258 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2200      	movs	r2, #0
 8006204:	2180      	movs	r1, #128	; 0x80
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 fe53 	bl	8006eb2 <UART_WaitOnFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e03d      	b.n	8006292 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	881a      	ldrh	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006228:	b292      	uxth	r2, r2
 800622a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	3302      	adds	r3, #2
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	e008      	b.n	8006246 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	b292      	uxth	r2, r2
 800623e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1cb      	bne.n	80061fc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2200      	movs	r2, #0
 800626c:	2140      	movs	r1, #64	; 0x40
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fe1f 	bl	8006eb2 <UART_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e009      	b.n	8006292 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e000      	b.n	8006292 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006290:	2302      	movs	r3, #2
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	f040 808a 	bne.w	80063c8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <HAL_UART_Receive_IT+0x24>
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e082      	b.n	80063ca <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Receive_IT+0x36>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e07b      	b.n	80063ca <HAL_UART_Receive_IT+0x12e>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	88fa      	ldrh	r2, [r7, #6]
 80062e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fe:	d10e      	bne.n	800631e <HAL_UART_Receive_IT+0x82>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d105      	bne.n	8006314 <HAL_UART_Receive_IT+0x78>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800630e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006312:	e02d      	b.n	8006370 <HAL_UART_Receive_IT+0xd4>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	22ff      	movs	r2, #255	; 0xff
 8006318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800631c:	e028      	b.n	8006370 <HAL_UART_Receive_IT+0xd4>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10d      	bne.n	8006342 <HAL_UART_Receive_IT+0xa6>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <HAL_UART_Receive_IT+0x9c>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	22ff      	movs	r2, #255	; 0xff
 8006332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006336:	e01b      	b.n	8006370 <HAL_UART_Receive_IT+0xd4>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	227f      	movs	r2, #127	; 0x7f
 800633c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006340:	e016      	b.n	8006370 <HAL_UART_Receive_IT+0xd4>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800634a:	d10d      	bne.n	8006368 <HAL_UART_Receive_IT+0xcc>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_UART_Receive_IT+0xc2>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	227f      	movs	r2, #127	; 0x7f
 8006358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800635c:	e008      	b.n	8006370 <HAL_UART_Receive_IT+0xd4>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	223f      	movs	r2, #63	; 0x3f
 8006362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006366:	e003      	b.n	8006370 <HAL_UART_Receive_IT+0xd4>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2222      	movs	r2, #34	; 0x22
 800637a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006394:	d107      	bne.n	80063a6 <HAL_UART_Receive_IT+0x10a>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4a0d      	ldr	r2, [pc, #52]	; (80063d8 <HAL_UART_Receive_IT+0x13c>)
 80063a2:	661a      	str	r2, [r3, #96]	; 0x60
 80063a4:	e002      	b.n	80063ac <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a0c      	ldr	r2, [pc, #48]	; (80063dc <HAL_UART_Receive_IT+0x140>)
 80063aa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80063c2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	0800708b 	.word	0x0800708b
 80063dc:	08006fe1 	.word	0x08006fe1

080063e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d113      	bne.n	8006436 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00e      	beq.n	8006436 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 80ff 	beq.w	800662a <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
      }
      return;
 8006434:	e0f9      	b.n	800662a <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 80c1 	beq.w	80065c0 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 80b6 	beq.w	80065c0 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00e      	beq.n	800647c <HAL_UART_IRQHandler+0x9c>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2201      	movs	r2, #1
 800646e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006474:	f043 0201 	orr.w	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <HAL_UART_IRQHandler+0xc4>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2202      	movs	r2, #2
 8006496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649c:	f043 0204 	orr.w	r2, r3, #4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <HAL_UART_IRQHandler+0xec>
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d009      	beq.n	80064cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2204      	movs	r2, #4
 80064be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c4:	f043 0202 	orr.w	r2, r3, #2
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d013      	beq.n	80064fe <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d009      	beq.n	80064fe <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2208      	movs	r2, #8
 80064f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f6:	f043 0208 	orr.w	r2, r3, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8093 	beq.w	800662e <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00c      	beq.n	800652c <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	d007      	beq.n	800652c <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006530:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d004      	beq.n	800654a <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006546:	2b00      	cmp	r3, #0
 8006548:	d031      	beq.n	80065ae <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fcf9 	bl	8006f42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d123      	bne.n	80065a6 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d013      	beq.n	800659e <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657a:	4a30      	ldr	r2, [pc, #192]	; (800663c <HAL_UART_IRQHandler+0x25c>)
 800657c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006582:	4618      	mov	r0, r3
 8006584:	f7fc ff31 	bl	80033ea <HAL_DMA_Abort_IT>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d016      	beq.n	80065bc <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006598:	4610      	mov	r0, r2
 800659a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	e00e      	b.n	80065bc <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f84e 	bl	8006640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a4:	e00a      	b.n	80065bc <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f84a 	bl	8006640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	e006      	b.n	80065bc <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f846 	bl	8006640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80065ba:	e038      	b.n	800662e <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	bf00      	nop
    return;
 80065be:	e036      	b.n	800662e <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00d      	beq.n	80065e6 <HAL_UART_IRQHandler+0x206>
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fda8 	bl	8007134 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065e4:	e026      	b.n	8006634 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00d      	beq.n	800660c <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d008      	beq.n	800660c <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d017      	beq.n	8006632 <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
    }
    return;
 800660a:	e012      	b.n	8006632 <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00e      	beq.n	8006634 <HAL_UART_IRQHandler+0x254>
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fcc4 	bl	8006fae <UART_EndTransmit_IT>
    return;
 8006626:	bf00      	nop
 8006628:	e004      	b.n	8006634 <HAL_UART_IRQHandler+0x254>
      return;
 800662a:	bf00      	nop
 800662c:	e002      	b.n	8006634 <HAL_UART_IRQHandler+0x254>
    return;
 800662e:	bf00      	nop
 8006630:	e000      	b.n	8006634 <HAL_UART_IRQHandler+0x254>
    return;
 8006632:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006634:	3720      	adds	r7, #32
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	08006f83 	.word	0x08006f83

08006640 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006654:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006658:	b088      	sub	sp, #32
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	4313      	orrs	r3, r2
 8006680:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	4bac      	ldr	r3, [pc, #688]	; (800693c <UART_SetConfig+0x2e8>)
 800668a:	4013      	ands	r3, r2
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6812      	ldr	r2, [r2, #0]
 8006690:	69f9      	ldr	r1, [r7, #28]
 8006692:	430b      	orrs	r3, r1
 8006694:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4aa2      	ldr	r2, [pc, #648]	; (8006940 <UART_SetConfig+0x2ec>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d004      	beq.n	80066c6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a99      	ldr	r2, [pc, #612]	; (8006944 <UART_SetConfig+0x2f0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d121      	bne.n	8006728 <UART_SetConfig+0xd4>
 80066e4:	4b98      	ldr	r3, [pc, #608]	; (8006948 <UART_SetConfig+0x2f4>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d816      	bhi.n	8006720 <UART_SetConfig+0xcc>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0xa4>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006709 	.word	0x08006709
 80066fc:	08006715 	.word	0x08006715
 8006700:	0800670f 	.word	0x0800670f
 8006704:	0800671b 	.word	0x0800671b
 8006708:	2301      	movs	r3, #1
 800670a:	76fb      	strb	r3, [r7, #27]
 800670c:	e0e8      	b.n	80068e0 <UART_SetConfig+0x28c>
 800670e:	2302      	movs	r3, #2
 8006710:	76fb      	strb	r3, [r7, #27]
 8006712:	e0e5      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006714:	2304      	movs	r3, #4
 8006716:	76fb      	strb	r3, [r7, #27]
 8006718:	e0e2      	b.n	80068e0 <UART_SetConfig+0x28c>
 800671a:	2308      	movs	r3, #8
 800671c:	76fb      	strb	r3, [r7, #27]
 800671e:	e0df      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006720:	2310      	movs	r3, #16
 8006722:	76fb      	strb	r3, [r7, #27]
 8006724:	bf00      	nop
 8006726:	e0db      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a87      	ldr	r2, [pc, #540]	; (800694c <UART_SetConfig+0x2f8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d134      	bne.n	800679c <UART_SetConfig+0x148>
 8006732:	4b85      	ldr	r3, [pc, #532]	; (8006948 <UART_SetConfig+0x2f4>)
 8006734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006738:	f003 030c 	and.w	r3, r3, #12
 800673c:	2b0c      	cmp	r3, #12
 800673e:	d829      	bhi.n	8006794 <UART_SetConfig+0x140>
 8006740:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <UART_SetConfig+0xf4>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	0800677d 	.word	0x0800677d
 800674c:	08006795 	.word	0x08006795
 8006750:	08006795 	.word	0x08006795
 8006754:	08006795 	.word	0x08006795
 8006758:	08006789 	.word	0x08006789
 800675c:	08006795 	.word	0x08006795
 8006760:	08006795 	.word	0x08006795
 8006764:	08006795 	.word	0x08006795
 8006768:	08006783 	.word	0x08006783
 800676c:	08006795 	.word	0x08006795
 8006770:	08006795 	.word	0x08006795
 8006774:	08006795 	.word	0x08006795
 8006778:	0800678f 	.word	0x0800678f
 800677c:	2300      	movs	r3, #0
 800677e:	76fb      	strb	r3, [r7, #27]
 8006780:	e0ae      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006782:	2302      	movs	r3, #2
 8006784:	76fb      	strb	r3, [r7, #27]
 8006786:	e0ab      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006788:	2304      	movs	r3, #4
 800678a:	76fb      	strb	r3, [r7, #27]
 800678c:	e0a8      	b.n	80068e0 <UART_SetConfig+0x28c>
 800678e:	2308      	movs	r3, #8
 8006790:	76fb      	strb	r3, [r7, #27]
 8006792:	e0a5      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006794:	2310      	movs	r3, #16
 8006796:	76fb      	strb	r3, [r7, #27]
 8006798:	bf00      	nop
 800679a:	e0a1      	b.n	80068e0 <UART_SetConfig+0x28c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a6b      	ldr	r2, [pc, #428]	; (8006950 <UART_SetConfig+0x2fc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d120      	bne.n	80067e8 <UART_SetConfig+0x194>
 80067a6:	4b68      	ldr	r3, [pc, #416]	; (8006948 <UART_SetConfig+0x2f4>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d00f      	beq.n	80067d4 <UART_SetConfig+0x180>
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d802      	bhi.n	80067be <UART_SetConfig+0x16a>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <UART_SetConfig+0x174>
 80067bc:	e010      	b.n	80067e0 <UART_SetConfig+0x18c>
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d005      	beq.n	80067ce <UART_SetConfig+0x17a>
 80067c2:	2b30      	cmp	r3, #48	; 0x30
 80067c4:	d009      	beq.n	80067da <UART_SetConfig+0x186>
 80067c6:	e00b      	b.n	80067e0 <UART_SetConfig+0x18c>
 80067c8:	2300      	movs	r3, #0
 80067ca:	76fb      	strb	r3, [r7, #27]
 80067cc:	e088      	b.n	80068e0 <UART_SetConfig+0x28c>
 80067ce:	2302      	movs	r3, #2
 80067d0:	76fb      	strb	r3, [r7, #27]
 80067d2:	e085      	b.n	80068e0 <UART_SetConfig+0x28c>
 80067d4:	2304      	movs	r3, #4
 80067d6:	76fb      	strb	r3, [r7, #27]
 80067d8:	e082      	b.n	80068e0 <UART_SetConfig+0x28c>
 80067da:	2308      	movs	r3, #8
 80067dc:	76fb      	strb	r3, [r7, #27]
 80067de:	e07f      	b.n	80068e0 <UART_SetConfig+0x28c>
 80067e0:	2310      	movs	r3, #16
 80067e2:	76fb      	strb	r3, [r7, #27]
 80067e4:	bf00      	nop
 80067e6:	e07b      	b.n	80068e0 <UART_SetConfig+0x28c>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a59      	ldr	r2, [pc, #356]	; (8006954 <UART_SetConfig+0x300>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d120      	bne.n	8006834 <UART_SetConfig+0x1e0>
 80067f2:	4b55      	ldr	r3, [pc, #340]	; (8006948 <UART_SetConfig+0x2f4>)
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067fc:	2b40      	cmp	r3, #64	; 0x40
 80067fe:	d00f      	beq.n	8006820 <UART_SetConfig+0x1cc>
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d802      	bhi.n	800680a <UART_SetConfig+0x1b6>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <UART_SetConfig+0x1c0>
 8006808:	e010      	b.n	800682c <UART_SetConfig+0x1d8>
 800680a:	2b80      	cmp	r3, #128	; 0x80
 800680c:	d005      	beq.n	800681a <UART_SetConfig+0x1c6>
 800680e:	2bc0      	cmp	r3, #192	; 0xc0
 8006810:	d009      	beq.n	8006826 <UART_SetConfig+0x1d2>
 8006812:	e00b      	b.n	800682c <UART_SetConfig+0x1d8>
 8006814:	2300      	movs	r3, #0
 8006816:	76fb      	strb	r3, [r7, #27]
 8006818:	e062      	b.n	80068e0 <UART_SetConfig+0x28c>
 800681a:	2302      	movs	r3, #2
 800681c:	76fb      	strb	r3, [r7, #27]
 800681e:	e05f      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006820:	2304      	movs	r3, #4
 8006822:	76fb      	strb	r3, [r7, #27]
 8006824:	e05c      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006826:	2308      	movs	r3, #8
 8006828:	76fb      	strb	r3, [r7, #27]
 800682a:	e059      	b.n	80068e0 <UART_SetConfig+0x28c>
 800682c:	2310      	movs	r3, #16
 800682e:	76fb      	strb	r3, [r7, #27]
 8006830:	bf00      	nop
 8006832:	e055      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a47      	ldr	r2, [pc, #284]	; (8006958 <UART_SetConfig+0x304>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d124      	bne.n	8006888 <UART_SetConfig+0x234>
 800683e:	4b42      	ldr	r3, [pc, #264]	; (8006948 <UART_SetConfig+0x2f4>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800684c:	d012      	beq.n	8006874 <UART_SetConfig+0x220>
 800684e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006852:	d802      	bhi.n	800685a <UART_SetConfig+0x206>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <UART_SetConfig+0x214>
 8006858:	e012      	b.n	8006880 <UART_SetConfig+0x22c>
 800685a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685e:	d006      	beq.n	800686e <UART_SetConfig+0x21a>
 8006860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006864:	d009      	beq.n	800687a <UART_SetConfig+0x226>
 8006866:	e00b      	b.n	8006880 <UART_SetConfig+0x22c>
 8006868:	2300      	movs	r3, #0
 800686a:	76fb      	strb	r3, [r7, #27]
 800686c:	e038      	b.n	80068e0 <UART_SetConfig+0x28c>
 800686e:	2302      	movs	r3, #2
 8006870:	76fb      	strb	r3, [r7, #27]
 8006872:	e035      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006874:	2304      	movs	r3, #4
 8006876:	76fb      	strb	r3, [r7, #27]
 8006878:	e032      	b.n	80068e0 <UART_SetConfig+0x28c>
 800687a:	2308      	movs	r3, #8
 800687c:	76fb      	strb	r3, [r7, #27]
 800687e:	e02f      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006880:	2310      	movs	r3, #16
 8006882:	76fb      	strb	r3, [r7, #27]
 8006884:	bf00      	nop
 8006886:	e02b      	b.n	80068e0 <UART_SetConfig+0x28c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a2c      	ldr	r2, [pc, #176]	; (8006940 <UART_SetConfig+0x2ec>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d124      	bne.n	80068dc <UART_SetConfig+0x288>
 8006892:	4b2d      	ldr	r3, [pc, #180]	; (8006948 <UART_SetConfig+0x2f4>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800689c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a0:	d012      	beq.n	80068c8 <UART_SetConfig+0x274>
 80068a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a6:	d802      	bhi.n	80068ae <UART_SetConfig+0x25a>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <UART_SetConfig+0x268>
 80068ac:	e012      	b.n	80068d4 <UART_SetConfig+0x280>
 80068ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b2:	d006      	beq.n	80068c2 <UART_SetConfig+0x26e>
 80068b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068b8:	d009      	beq.n	80068ce <UART_SetConfig+0x27a>
 80068ba:	e00b      	b.n	80068d4 <UART_SetConfig+0x280>
 80068bc:	2300      	movs	r3, #0
 80068be:	76fb      	strb	r3, [r7, #27]
 80068c0:	e00e      	b.n	80068e0 <UART_SetConfig+0x28c>
 80068c2:	2302      	movs	r3, #2
 80068c4:	76fb      	strb	r3, [r7, #27]
 80068c6:	e00b      	b.n	80068e0 <UART_SetConfig+0x28c>
 80068c8:	2304      	movs	r3, #4
 80068ca:	76fb      	strb	r3, [r7, #27]
 80068cc:	e008      	b.n	80068e0 <UART_SetConfig+0x28c>
 80068ce:	2308      	movs	r3, #8
 80068d0:	76fb      	strb	r3, [r7, #27]
 80068d2:	e005      	b.n	80068e0 <UART_SetConfig+0x28c>
 80068d4:	2310      	movs	r3, #16
 80068d6:	76fb      	strb	r3, [r7, #27]
 80068d8:	bf00      	nop
 80068da:	e001      	b.n	80068e0 <UART_SetConfig+0x28c>
 80068dc:	2310      	movs	r3, #16
 80068de:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a16      	ldr	r2, [pc, #88]	; (8006940 <UART_SetConfig+0x2ec>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	f040 80fa 	bne.w	8006ae0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068ec:	7efb      	ldrb	r3, [r7, #27]
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d836      	bhi.n	8006960 <UART_SetConfig+0x30c>
 80068f2:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <UART_SetConfig+0x2a4>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006961 	.word	0x08006961
 8006900:	08006925 	.word	0x08006925
 8006904:	08006961 	.word	0x08006961
 8006908:	0800692b 	.word	0x0800692b
 800690c:	08006961 	.word	0x08006961
 8006910:	08006961 	.word	0x08006961
 8006914:	08006961 	.word	0x08006961
 8006918:	08006933 	.word	0x08006933
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800691c:	f7fd fd0c 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8006920:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006922:	e020      	b.n	8006966 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006924:	4b0d      	ldr	r3, [pc, #52]	; (800695c <UART_SetConfig+0x308>)
 8006926:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006928:	e01d      	b.n	8006966 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800692a:	f7fd fc6f 	bl	800420c <HAL_RCC_GetSysClockFreq>
 800692e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006930:	e019      	b.n	8006966 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006936:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006938:	e015      	b.n	8006966 <UART_SetConfig+0x312>
 800693a:	bf00      	nop
 800693c:	efff69f3 	.word	0xefff69f3
 8006940:	40008000 	.word	0x40008000
 8006944:	40013800 	.word	0x40013800
 8006948:	40021000 	.word	0x40021000
 800694c:	40004400 	.word	0x40004400
 8006950:	40004800 	.word	0x40004800
 8006954:	40004c00 	.word	0x40004c00
 8006958:	40005000 	.word	0x40005000
 800695c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	74fb      	strb	r3, [r7, #19]
        break;
 8006964:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 81ac 	beq.w	8006cc6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4413      	add	r3, r2
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	429a      	cmp	r2, r3
 800697c:	d305      	bcc.n	800698a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	429a      	cmp	r2, r3
 8006988:	d902      	bls.n	8006990 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	74fb      	strb	r3, [r7, #19]
 800698e:	e19a      	b.n	8006cc6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8006990:	7efb      	ldrb	r3, [r7, #27]
 8006992:	2b08      	cmp	r3, #8
 8006994:	f200 8091 	bhi.w	8006aba <UART_SetConfig+0x466>
 8006998:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <UART_SetConfig+0x34c>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069c5 	.word	0x080069c5
 80069a4:	08006abb 	.word	0x08006abb
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	08006abb 	.word	0x08006abb
 80069b0:	08006a45 	.word	0x08006a45
 80069b4:	08006abb 	.word	0x08006abb
 80069b8:	08006abb 	.word	0x08006abb
 80069bc:	08006abb 	.word	0x08006abb
 80069c0:	08006a91 	.word	0x08006a91
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80069c4:	f7fd fcb8 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 80069c8:	4603      	mov	r3, r0
 80069ca:	4619      	mov	r1, r3
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	f04f 0400 	mov.w	r4, #0
 80069d8:	0214      	lsls	r4, r2, #8
 80069da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80069de:	020b      	lsls	r3, r1, #8
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6852      	ldr	r2, [r2, #4]
 80069e4:	0852      	lsrs	r2, r2, #1
 80069e6:	4611      	mov	r1, r2
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	eb13 0b01 	adds.w	fp, r3, r1
 80069f0:	eb44 0c02 	adc.w	ip, r4, r2
 80069f4:	4658      	mov	r0, fp
 80069f6:	4661      	mov	r1, ip
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f04f 0400 	mov.w	r4, #0
 8006a00:	461a      	mov	r2, r3
 8006a02:	4623      	mov	r3, r4
 8006a04:	f7f9 fbe0 	bl	80001c8 <__aeabi_uldivmod>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a0e:	e057      	b.n	8006ac0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	085b      	lsrs	r3, r3, #1
 8006a16:	f04f 0400 	mov.w	r4, #0
 8006a1a:	49b1      	ldr	r1, [pc, #708]	; (8006ce0 <UART_SetConfig+0x68c>)
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	eb13 0b01 	adds.w	fp, r3, r1
 8006a24:	eb44 0c02 	adc.w	ip, r4, r2
 8006a28:	4658      	mov	r0, fp
 8006a2a:	4661      	mov	r1, ip
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f04f 0400 	mov.w	r4, #0
 8006a34:	461a      	mov	r2, r3
 8006a36:	4623      	mov	r3, r4
 8006a38:	f7f9 fbc6 	bl	80001c8 <__aeabi_uldivmod>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a42:	e03d      	b.n	8006ac0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006a44:	f7fd fbe2 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	f04f 0400 	mov.w	r4, #0
 8006a58:	0214      	lsls	r4, r2, #8
 8006a5a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006a5e:	020b      	lsls	r3, r1, #8
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6852      	ldr	r2, [r2, #4]
 8006a64:	0852      	lsrs	r2, r2, #1
 8006a66:	4611      	mov	r1, r2
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	eb13 0b01 	adds.w	fp, r3, r1
 8006a70:	eb44 0c02 	adc.w	ip, r4, r2
 8006a74:	4658      	mov	r0, fp
 8006a76:	4661      	mov	r1, ip
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f04f 0400 	mov.w	r4, #0
 8006a80:	461a      	mov	r2, r3
 8006a82:	4623      	mov	r3, r4
 8006a84:	f7f9 fba0 	bl	80001c8 <__aeabi_uldivmod>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a8e:	e017      	b.n	8006ac0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	f04f 0400 	mov.w	r4, #0
 8006a9a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006a9e:	f144 0100 	adc.w	r1, r4, #0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f04f 0400 	mov.w	r4, #0
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4623      	mov	r3, r4
 8006aae:	f7f9 fb8b 	bl	80001c8 <__aeabi_uldivmod>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ab8:	e002      	b.n	8006ac0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	74fb      	strb	r3, [r7, #19]
            break;
 8006abe:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac6:	d308      	bcc.n	8006ada <UART_SetConfig+0x486>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ace:	d204      	bcs.n	8006ada <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	60da      	str	r2, [r3, #12]
 8006ad8:	e0f5      	b.n	8006cc6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	74fb      	strb	r3, [r7, #19]
 8006ade:	e0f2      	b.n	8006cc6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae8:	d17f      	bne.n	8006bea <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8006aea:	7efb      	ldrb	r3, [r7, #27]
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d85c      	bhi.n	8006baa <UART_SetConfig+0x556>
 8006af0:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0x4a4>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b3b 	.word	0x08006b3b
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006bab 	.word	0x08006bab
 8006b08:	08006b75 	.word	0x08006b75
 8006b0c:	08006bab 	.word	0x08006bab
 8006b10:	08006bab 	.word	0x08006bab
 8006b14:	08006bab 	.word	0x08006bab
 8006b18:	08006b93 	.word	0x08006b93
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006b1c:	f7fd fc0c 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8006b20:	4603      	mov	r3, r0
 8006b22:	005a      	lsls	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	441a      	add	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b38:	e03a      	b.n	8006bb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006b3a:	f7fd fc13 	bl	8004364 <HAL_RCC_GetPCLK2Freq>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	005a      	lsls	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	441a      	add	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b56:	e02b      	b.n	8006bb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	085b      	lsrs	r3, r3, #1
 8006b5e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006b62:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6852      	ldr	r2, [r2, #4]
 8006b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b72:	e01d      	b.n	8006bb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006b74:	f7fd fb4a 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	005a      	lsls	r2, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	085b      	lsrs	r3, r3, #1
 8006b82:	441a      	add	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b90:	e00e      	b.n	8006bb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ba8:	e002      	b.n	8006bb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	74fb      	strb	r3, [r7, #19]
        break;
 8006bae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	2b0f      	cmp	r3, #15
 8006bb4:	d916      	bls.n	8006be4 <UART_SetConfig+0x590>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bbc:	d212      	bcs.n	8006be4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f023 030f 	bic.w	r3, r3, #15
 8006bc6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	897b      	ldrh	r3, [r7, #10]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	897a      	ldrh	r2, [r7, #10]
 8006be0:	60da      	str	r2, [r3, #12]
 8006be2:	e070      	b.n	8006cc6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	74fb      	strb	r3, [r7, #19]
 8006be8:	e06d      	b.n	8006cc6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8006bea:	7efb      	ldrb	r3, [r7, #27]
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d859      	bhi.n	8006ca4 <UART_SetConfig+0x650>
 8006bf0:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <UART_SetConfig+0x5a4>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c39 	.word	0x08006c39
 8006c00:	08006c55 	.word	0x08006c55
 8006c04:	08006ca5 	.word	0x08006ca5
 8006c08:	08006c71 	.word	0x08006c71
 8006c0c:	08006ca5 	.word	0x08006ca5
 8006c10:	08006ca5 	.word	0x08006ca5
 8006c14:	08006ca5 	.word	0x08006ca5
 8006c18:	08006c8d 	.word	0x08006c8d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006c1c:	f7fd fb8c 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8006c20:	4602      	mov	r2, r0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	441a      	add	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c36:	e038      	b.n	8006caa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006c38:	f7fd fb94 	bl	8004364 <HAL_RCC_GetPCLK2Freq>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c52:	e02a      	b.n	8006caa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006c5e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6852      	ldr	r2, [r2, #4]
 8006c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c6e:	e01c      	b.n	8006caa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006c70:	f7fd facc 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8006c74:	4602      	mov	r2, r0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	441a      	add	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c8a:	e00e      	b.n	8006caa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ca2:	e002      	b.n	8006caa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	74fb      	strb	r3, [r7, #19]
        break;
 8006ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b0f      	cmp	r3, #15
 8006cae:	d908      	bls.n	8006cc2 <UART_SetConfig+0x66e>
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb6:	d204      	bcs.n	8006cc2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	60da      	str	r2, [r3, #12]
 8006cc0:	e001      	b.n	8006cc6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006cd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006cde:	bf00      	nop
 8006ce0:	f4240000 	.word	0xf4240000

08006ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de2:	d10a      	bne.n	8006dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e36:	f7fc f999 	bl	800316c <HAL_GetTick>
 8006e3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d10e      	bne.n	8006e68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f82a 	bl	8006eb2 <UART_WaitOnFlagUntilTimeout>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e020      	b.n	8006eaa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d10e      	bne.n	8006e94 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f814 	bl	8006eb2 <UART_WaitOnFlagUntilTimeout>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e00a      	b.n	8006eaa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2220      	movs	r2, #32
 8006e98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec2:	e02a      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eca:	d026      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ecc:	f7fc f94e 	bl	800316c <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d302      	bcc.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d11b      	bne.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ef0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0201 	bic.w	r2, r2, #1
 8006f00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e00f      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69da      	ldr	r2, [r3, #28]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	bf0c      	ite	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	2300      	movne	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d0c5      	beq.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f58:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0201 	bic.w	r2, r2, #1
 8006f68:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f7ff fb4d 	bl	8006640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fb fc5e 	bl	8002894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ff4:	2b22      	cmp	r3, #34	; 0x22
 8006ff6:	d13a      	bne.n	800706e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ffe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007000:	89bb      	ldrh	r3, [r7, #12]
 8007002:	b2d9      	uxtb	r1, r3
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	b2da      	uxtb	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700c:	400a      	ands	r2, r1
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d123      	bne.n	8007082 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007048:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fb fbde 	bl	8002828 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800706c:	e009      	b.n	8007082 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	8b1b      	ldrh	r3, [r3, #24]
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0208 	orr.w	r2, r2, #8
 800707e:	b292      	uxth	r2, r2
 8007080:	831a      	strh	r2, [r3, #24]
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007098:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800709e:	2b22      	cmp	r3, #34	; 0x22
 80070a0:	d13a      	bne.n	8007118 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80070a8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80070b0:	89ba      	ldrh	r2, [r7, #12]
 80070b2:	89fb      	ldrh	r3, [r7, #14]
 80070b4:	4013      	ands	r3, r2
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c0:	1c9a      	adds	r2, r3, #2
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d123      	bne.n	800712c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070f2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0201 	bic.w	r2, r2, #1
 8007102:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7fb fb89 	bl	8002828 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007116:	e009      	b.n	800712c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	8b1b      	ldrh	r3, [r3, #24]
 800711e:	b29a      	uxth	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0208 	orr.w	r2, r2, #8
 8007128:	b292      	uxth	r2, r2
 800712a:	831a      	strh	r2, [r3, #24]
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <__libc_init_array>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4e0d      	ldr	r6, [pc, #52]	; (8007180 <__libc_init_array+0x38>)
 800714c:	4c0d      	ldr	r4, [pc, #52]	; (8007184 <__libc_init_array+0x3c>)
 800714e:	1ba4      	subs	r4, r4, r6
 8007150:	10a4      	asrs	r4, r4, #2
 8007152:	2500      	movs	r5, #0
 8007154:	42a5      	cmp	r5, r4
 8007156:	d109      	bne.n	800716c <__libc_init_array+0x24>
 8007158:	4e0b      	ldr	r6, [pc, #44]	; (8007188 <__libc_init_array+0x40>)
 800715a:	4c0c      	ldr	r4, [pc, #48]	; (800718c <__libc_init_array+0x44>)
 800715c:	f000 f83a 	bl	80071d4 <_init>
 8007160:	1ba4      	subs	r4, r4, r6
 8007162:	10a4      	asrs	r4, r4, #2
 8007164:	2500      	movs	r5, #0
 8007166:	42a5      	cmp	r5, r4
 8007168:	d105      	bne.n	8007176 <__libc_init_array+0x2e>
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007170:	4798      	blx	r3
 8007172:	3501      	adds	r5, #1
 8007174:	e7ee      	b.n	8007154 <__libc_init_array+0xc>
 8007176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800717a:	4798      	blx	r3
 800717c:	3501      	adds	r5, #1
 800717e:	e7f2      	b.n	8007166 <__libc_init_array+0x1e>
 8007180:	08007478 	.word	0x08007478
 8007184:	08007478 	.word	0x08007478
 8007188:	08007478 	.word	0x08007478
 800718c:	0800747c 	.word	0x0800747c

08007190 <memcmp>:
 8007190:	b530      	push	{r4, r5, lr}
 8007192:	2400      	movs	r4, #0
 8007194:	42a2      	cmp	r2, r4
 8007196:	d101      	bne.n	800719c <memcmp+0xc>
 8007198:	2000      	movs	r0, #0
 800719a:	e007      	b.n	80071ac <memcmp+0x1c>
 800719c:	5d03      	ldrb	r3, [r0, r4]
 800719e:	3401      	adds	r4, #1
 80071a0:	190d      	adds	r5, r1, r4
 80071a2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80071a6:	42ab      	cmp	r3, r5
 80071a8:	d0f4      	beq.n	8007194 <memcmp+0x4>
 80071aa:	1b58      	subs	r0, r3, r5
 80071ac:	bd30      	pop	{r4, r5, pc}

080071ae <memcpy>:
 80071ae:	b510      	push	{r4, lr}
 80071b0:	1e43      	subs	r3, r0, #1
 80071b2:	440a      	add	r2, r1
 80071b4:	4291      	cmp	r1, r2
 80071b6:	d100      	bne.n	80071ba <memcpy+0xc>
 80071b8:	bd10      	pop	{r4, pc}
 80071ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071c2:	e7f7      	b.n	80071b4 <memcpy+0x6>

080071c4 <memset>:
 80071c4:	4402      	add	r2, r0
 80071c6:	4603      	mov	r3, r0
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d100      	bne.n	80071ce <memset+0xa>
 80071cc:	4770      	bx	lr
 80071ce:	f803 1b01 	strb.w	r1, [r3], #1
 80071d2:	e7f9      	b.n	80071c8 <memset+0x4>

080071d4 <_init>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	bf00      	nop
 80071d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071da:	bc08      	pop	{r3}
 80071dc:	469e      	mov	lr, r3
 80071de:	4770      	bx	lr

080071e0 <_fini>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	bf00      	nop
 80071e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e6:	bc08      	pop	{r3}
 80071e8:	469e      	mov	lr, r3
 80071ea:	4770      	bx	lr
