
MouseTreadmillSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a8c  08007a8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a94  08007a94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  2000000c  08007aa8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08007aa8  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f2d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023e0  00000000  00000000  00032f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00035350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  000363d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002831e  00000000  00000000  00037370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d70d  00000000  00000000  0005f68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5226  00000000  00000000  0006cd9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161fc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000460c  00000000  00000000  0016203c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080077f0 	.word	0x080077f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080077f0 	.word	0x080077f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	4053      	eors	r3, r2
 80004de:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	b25a      	sxtb	r2, r3
 80004e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ea:	4053      	eors	r3, r2
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	b21a      	sxth	r2, r3
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	b21b      	sxth	r3, r3
 8000500:	4053      	eors	r3, r2
 8000502:	b21a      	sxth	r2, r3
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	b21b      	sxth	r3, r3
 800050a:	4053      	eors	r3, r2
 800050c:	b21a      	sxth	r2, r3
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	091b      	lsrs	r3, r3, #4
 8000512:	b2db      	uxtb	r3, r3
 8000514:	b21b      	sxth	r3, r3
 8000516:	4053      	eors	r3, r2
 8000518:	b21b      	sxth	r3, r3
 800051a:	b29a      	uxth	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	801a      	strh	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053a:	801a      	strh	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000554:	f107 030e 	add.w	r3, r7, #14
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffe7 	bl	800052c <crc_init>
	while (length--) {
 800055e:	e009      	b.n	8000574 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f107 020e 	add.w	r2, r7, #14
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ffaa 	bl	80004c8 <crc_accumulate>
	while (length--) {
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	1e5a      	subs	r2, r3, #1
 8000578:	807a      	strh	r2, [r7, #2]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f0      	bne.n	8000560 <crc_calculate+0x18>
        }
        return crcTmp;
 800057e:	89fb      	ldrh	r3, [r7, #14]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	4613      	mov	r3, r2
 8000594:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	617b      	str	r3, [r7, #20]
	while (length--) {
 800059a:	e007      	b.n	80005ac <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	617a      	str	r2, [r7, #20]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	68f9      	ldr	r1, [r7, #12]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff8e 	bl	80004c8 <crc_accumulate>
	while (length--) {
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	80fa      	strh	r2, [r7, #6]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f2      	bne.n	800059c <crc_accumulate_buffer+0x14>
        }
}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <mavlink_sha256_init+0x50>)
 80005d8:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <mavlink_sha256_init+0x54>)
 80005de:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <mavlink_sha256_init+0x58>)
 80005e4:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <mavlink_sha256_init+0x5c>)
 80005ea:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <mavlink_sha256_init+0x60>)
 80005f0:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <mavlink_sha256_init+0x64>)
 80005f6:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <mavlink_sha256_init+0x68>)
 80005fc:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <mavlink_sha256_init+0x6c>)
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	6a09e667 	.word	0x6a09e667
 8000614:	bb67ae85 	.word	0xbb67ae85
 8000618:	3c6ef372 	.word	0x3c6ef372
 800061c:	a54ff53a 	.word	0xa54ff53a
 8000620:	510e527f 	.word	0x510e527f
 8000624:	9b05688c 	.word	0x9b05688c
 8000628:	1f83d9ab 	.word	0x1f83d9ab
 800062c:	5be0cd19 	.word	0x5be0cd19

08000630 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000630:	b480      	push	{r7}
 8000632:	b0cf      	sub	sp, #316	; 0x13c
 8000634:	af00      	add	r7, sp, #0
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	6018      	str	r0, [r3, #0]
 800063a:	463b      	mov	r3, r7
 800063c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000694:	e011      	b.n	80006ba <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 8000696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	463a      	mov	r2, r7
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80006ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80006b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006b4:	3301      	adds	r3, #1
 80006b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	dde9      	ble.n	8000696 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80006c2:	2310      	movs	r3, #16
 80006c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006c8:	e057      	b.n	800077a <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006ce:	1e9a      	subs	r2, r3, #2
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d8:	ea4f 4273 	mov.w	r2, r3, ror #17
 80006dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e0:	1e99      	subs	r1, r3, #2
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006ea:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80006ee:	405a      	eors	r2, r3
 80006f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006f4:	1e99      	subs	r1, r3, #2
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006fe:	0a9b      	lsrs	r3, r3, #10
 8000700:	405a      	eors	r2, r3
 8000702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000706:	1fd9      	subs	r1, r3, #7
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000710:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000716:	f1a3 010f 	sub.w	r1, r3, #15
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000722:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800072a:	f1a3 000f 	sub.w	r0, r3, #15
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000736:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800073a:	4059      	eors	r1, r3
 800073c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000740:	f1a3 000f 	sub.w	r0, r3, #15
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000750:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000756:	f1a3 0110 	sub.w	r1, r3, #16
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000762:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800076c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000774:	3301      	adds	r3, #1
 8000776:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800077a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800077e:	2b3f      	cmp	r3, #63	; 0x3f
 8000780:	dda3      	ble.n	80006ca <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000788:	e076      	b.n	8000878 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800078a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800078e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000792:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000796:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800079a:	405a      	eors	r2, r3
 800079c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007a0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80007a4:	405a      	eors	r2, r3
 80007a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007aa:	441a      	add	r2, r3
 80007ac:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80007b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007b4:	4019      	ands	r1, r3
 80007b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007ba:	43d8      	mvns	r0, r3
 80007bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007c0:	4003      	ands	r3, r0
 80007c2:	404b      	eors	r3, r1
 80007c4:	441a      	add	r2, r3
 80007c6:	4956      	ldr	r1, [pc, #344]	; (8000920 <mavlink_sha256_calc+0x2f0>)
 80007c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d0:	441a      	add	r2, r3
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80007da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007de:	4413      	add	r3, r2
 80007e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80007e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007e8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80007ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007f0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80007f4:	405a      	eors	r2, r3
 80007f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007fa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80007fe:	405a      	eors	r2, r3
 8000800:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000808:	4059      	eors	r1, r3
 800080a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800080e:	4019      	ands	r1, r3
 8000810:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000818:	4003      	ands	r3, r0
 800081a:	404b      	eors	r3, r1
 800081c:	4413      	add	r3, r2
 800081e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8000822:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000826:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 800082a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800082e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000832:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000836:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 800083a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800083e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000842:	4413      	add	r3, r2
 8000844:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800084c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000850:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000854:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000858:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800085c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000860:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000868:	4413      	add	r3, r2
 800086a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 800086e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000872:	3301      	adds	r3, #1
 8000874:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800087c:	2b3f      	cmp	r3, #63	; 0x3f
 800087e:	dd84      	ble.n	800078a <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800088a:	441a      	add	r2, r3
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	609a      	str	r2, [r3, #8]
    B += BB;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800089c:	441a      	add	r2, r3
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	60da      	str	r2, [r3, #12]
    C += CC;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008ae:	441a      	add	r2, r3
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	611a      	str	r2, [r3, #16]
    D += DD;
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80008c0:	441a      	add	r2, r3
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	615a      	str	r2, [r3, #20]
    E += EE;
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008d2:	441a      	add	r2, r3
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	619a      	str	r2, [r3, #24]
    F += FF;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008e4:	441a      	add	r2, r3
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	61da      	str	r2, [r3, #28]
    G += GG;
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6a1a      	ldr	r2, [r3, #32]
 80008f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008f6:	441a      	add	r2, r3
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	621a      	str	r2, [r3, #32]
    H += HH;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000904:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000908:	441a      	add	r2, r3
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000910:	bf00      	nop
 8000912:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	08007808 	.word	0x08007808

08000924 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	; 0x70
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	441a      	add	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800094e:	429a      	cmp	r2, r3
 8000950:	d904      	bls.n	800095c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 800095c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000966:	e054      	b.n	8000a12 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8000968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800096a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800096e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000974:	429a      	cmp	r2, r3
 8000976:	d201      	bcs.n	800097c <mavlink_sha256_update+0x58>
            l = len;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000984:	4413      	add	r3, r2
 8000986:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000988:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800098a:	4618      	mov	r0, r3
 800098c:	f006 ff1d 	bl	80077ca <memcpy>
	offset += l;
 8000990:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000994:	4413      	add	r3, r2
 8000996:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800099a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800099c:	4413      	add	r3, r2
 800099e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80009a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009aa:	2b40      	cmp	r3, #64	; 0x40
 80009ac:	d131      	bne.n	8000a12 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3328      	adds	r3, #40	; 0x28
 80009b2:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 80009b4:	2300      	movs	r3, #0
 80009b6:	663b      	str	r3, [r7, #96]	; 0x60
 80009b8:	e020      	b.n	80009fc <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80009ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009c0:	4413      	add	r3, r2
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80009d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009d2:	78da      	ldrb	r2, [r3, #3]
 80009d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d6:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	3301      	adds	r3, #1
 80009dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009de:	7892      	ldrb	r2, [r2, #2]
 80009e0:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80009e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009e4:	3302      	adds	r3, #2
 80009e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009e8:	7852      	ldrb	r2, [r2, #1]
 80009ea:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80009ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ee:	3303      	adds	r3, #3
 80009f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80009f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009f8:	3301      	adds	r3, #1
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
 80009fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	dddb      	ble.n	80009ba <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fe11 	bl	8000630 <mavlink_sha256_calc>
	    offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1a7      	bne.n	8000968 <mavlink_sha256_update+0x44>
	}
    }
}
 8000a18:	bf00      	nop
 8000a1a:	3770      	adds	r7, #112	; 0x70
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b098      	sub	sp, #96	; 0x60
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a38:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a40:	3301      	adds	r3, #1
 8000a42:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3308      	adds	r3, #8
 8000a48:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	3301      	adds	r3, #1
 8000a54:	2247      	movs	r2, #71	; 0x47
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 fec1 	bl	80077e0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a64:	3307      	adds	r3, #7
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a6c:	440b      	add	r3, r1
 8000a6e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	0a1a      	lsrs	r2, r3, #8
 8000a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a7a:	3306      	adds	r3, #6
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a82:	440b      	add	r3, r1
 8000a84:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	0c1a      	lsrs	r2, r3, #16
 8000a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a90:	3305      	adds	r3, #5
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a98:	440b      	add	r3, r1
 8000a9a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	0e1a      	lsrs	r2, r3, #24
 8000aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aae:	440b      	add	r3, r1
 8000ab0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aba:	3303      	adds	r3, #3
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	0a1a      	lsrs	r2, r3, #8
 8000ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ad8:	440b      	add	r3, r1
 8000ada:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	0c1a      	lsrs	r2, r3, #16
 8000ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aee:	440b      	add	r3, r1
 8000af0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	0e1b      	lsrs	r3, r3, #24
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b0a:	f103 0208 	add.w	r2, r3, #8
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff05 	bl	8000924 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b1c:	78da      	ldrb	r2, [r3, #3]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b28:	7892      	ldrb	r2, [r2, #2]
 8000b2a:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	3302      	adds	r3, #2
 8000b30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b32:	7852      	ldrb	r2, [r2, #1]
 8000b34:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	3304      	adds	r3, #4
 8000b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b46:	79d2      	ldrb	r2, [r2, #7]
 8000b48:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	3305      	adds	r3, #5
 8000b4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b50:	7992      	ldrb	r2, [r2, #6]
 8000b52:	701a      	strb	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3760      	adds	r7, #96	; 0x60
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <mavlink_get_channel_status+0x24>)
 8000b72:	4413      	add	r3, r2
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000254 	.word	0x20000254

08000b84 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b0a1      	sub	sp, #132	; 0x84
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <mavlink_sign_packet+0x20>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <mavlink_sign_packet+0x24>
	    return 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e04f      	b.n	8000c48 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	785a      	ldrb	r2, [r3, #1]
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000bb6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f107 0110 	add.w	r1, r7, #16
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f006 fe00 	bl	80077ca <memcpy>
	signing->timestamp++;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000bd0:	1c4b      	adds	r3, r1, #1
 8000bd2:	f142 0400 	adc.w	r4, r2, #0
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fced 	bl	80005c0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f103 0110 	add.w	r1, r3, #16
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe96 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000bf8:	78fa      	ldrb	r2, [r7, #3]
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe8f 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000c06:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fe86 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe7e 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe77 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1dda      	adds	r2, r3, #7
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff feed 	bl	8000a20 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000c46:	230d      	movs	r3, #13
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3784      	adds	r7, #132	; 0x84
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd90      	pop	{r4, r7, pc}

08000c50 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c5c:	e002      	b.n	8000c64 <_mav_trim_payload+0x14>
		length--;
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d906      	bls.n	8000c78 <_mav_trim_payload+0x28>
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f2      	beq.n	8000c5e <_mav_trim_payload+0xe>
	}
	return length;
 8000c78:	78fb      	ldrb	r3, [r7, #3]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c88:	b08f      	sub	sp, #60	; 0x3c
 8000c8a:	af04      	add	r7, sp, #16
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	72fb      	strb	r3, [r7, #11]
 8000c94:	4613      	mov	r3, r2
 8000c96:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7b1b      	ldrb	r3, [r3, #12]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf14      	ite	ne
 8000ca4:	2301      	movne	r3, #1
 8000ca6:	2300      	moveq	r3, #0
 8000ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00c      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <mavlink_finalize_message_buffer+0x50>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000cda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8000ce6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <mavlink_finalize_message_buffer+0x6c>
 8000cee:	230d      	movs	r3, #13
 8000cf0:	e000      	b.n	8000cf4 <mavlink_finalize_message_buffer+0x6e>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8000cfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	22fe      	movs	r2, #254	; 0xfe
 8000d0a:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d12:	e002      	b.n	8000d1a <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	22fd      	movs	r2, #253	; 0xfd
 8000d18:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000d1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <mavlink_finalize_message_buffer+0xb2>
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	330c      	adds	r3, #12
 8000d26:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff8f 	bl	8000c50 <_mav_trim_payload>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	e001      	b.n	8000d3c <mavlink_finalize_message_buffer+0xb6>
 8000d38:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	7afa      	ldrb	r2, [r7, #11]
 8000d44:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	7aba      	ldrb	r2, [r7, #10]
 8000d4a:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8000d52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	799a      	ldrb	r2, [r3, #6]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	799b      	ldrb	r3, [r3, #6]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	78db      	ldrb	r3, [r3, #3]
 8000d8c:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8000d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d013      	beq.n	8000dbe <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	799b      	ldrb	r3, [r3, #6]
 8000d9a:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	79db      	ldrb	r3, [r3, #7]
 8000da0:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	7a1b      	ldrb	r3, [r3, #8]
 8000da6:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	7a5a      	ldrb	r2, [r3, #9]
 8000dac:	7a99      	ldrb	r1, [r3, #10]
 8000dae:	0209      	lsls	r1, r1, #8
 8000db0:	430a      	orrs	r2, r1
 8000db2:	7adb      	ldrb	r3, [r3, #11]
 8000db4:	041b      	lsls	r3, r3, #16
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	777b      	strb	r3, [r7, #29]
 8000dbc:	e030      	b.n	8000e20 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	791b      	ldrb	r3, [r3, #4]
 8000dc2:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	795b      	ldrb	r3, [r3, #5]
 8000dc8:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	79db      	ldrb	r3, [r3, #7]
 8000dd4:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	7a1b      	ldrb	r3, [r3, #8]
 8000dda:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	7a5a      	ldrb	r2, [r3, #9]
 8000de0:	7a99      	ldrb	r1, [r3, #10]
 8000de2:	0209      	lsls	r1, r1, #8
 8000de4:	430a      	orrs	r2, r1
 8000de6:	7adb      	ldrb	r3, [r3, #11]
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	7a5a      	ldrb	r2, [r3, #9]
 8000df4:	7a99      	ldrb	r1, [r3, #10]
 8000df6:	0209      	lsls	r1, r1, #8
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	7adb      	ldrb	r3, [r3, #11]
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	121b      	asrs	r3, r3, #8
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	7a5a      	ldrb	r2, [r3, #9]
 8000e0c:	7a99      	ldrb	r1, [r3, #10]
 8000e0e:	0209      	lsls	r1, r1, #8
 8000e10:	430a      	orrs	r2, r1
 8000e12:	7adb      	ldrb	r3, [r3, #11]
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4313      	orrs	r3, r2
 8000e18:	141b      	asrs	r3, r3, #16
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8000e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb88 	bl	8000548 <crc_calculate>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f103 010c 	add.w	r1, r3, #12
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f107 0316 	add.w	r3, r7, #22
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb9b 	bl	8000588 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8000e52:	f107 0216 	add.w	r2, r7, #22
 8000e56:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb33 	bl	80004c8 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000e62:	8af9      	ldrh	r1, [r7, #22]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	330c      	adds	r3, #12
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	78d2      	ldrb	r2, [r2, #3]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b2ca      	uxtb	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000e72:	8afb      	ldrh	r3, [r7, #22]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b299      	uxth	r1, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f103 020c 	add.w	r2, r3, #12
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	78db      	ldrb	r3, [r3, #3]
 8000e82:	3301      	adds	r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8000e8a:	8afa      	ldrh	r2, [r7, #22]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8000e90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01a      	beq.n	8000ece <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000eaa:	68f9      	ldr	r1, [r7, #12]
 8000eac:	310c      	adds	r1, #12
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8000eb2:	4401      	add	r1, r0
 8000eb4:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8000eb8:	f107 0018 	add.w	r0, r7, #24
 8000ebc:	9102      	str	r1, [sp, #8]
 8000ebe:	9201      	str	r2, [sp, #4]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4633      	mov	r3, r6
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f7ff fe5b 	bl	8000b84 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4413      	add	r3, r2
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	b29b      	uxth	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	372c      	adds	r7, #44	; 0x2c
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ef4 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	70fb      	strb	r3, [r7, #3]
 8000f06:	460b      	mov	r3, r1
 8000f08:	70bb      	strb	r3, [r7, #2]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8000f0e:	787b      	ldrb	r3, [r7, #1]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fe23 	bl	8000b5c <mavlink_get_channel_status>
 8000f16:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8000f18:	78ba      	ldrb	r2, [r7, #2]
 8000f1a:	78f9      	ldrb	r1, [r7, #3]
 8000f1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	7f3b      	ldrb	r3, [r7, #28]
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	7e3b      	ldrb	r3, [r7, #24]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff feaa 	bl	8000c86 <mavlink_finalize_message_buffer>
 8000f32:	4603      	mov	r3, r0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	70fb      	strb	r3, [r7, #3]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70bb      	strb	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8000f56:	78ba      	ldrb	r2, [r7, #2]
 8000f58:	78f9      	ldrb	r1, [r7, #3]
 8000f5a:	7d3b      	ldrb	r3, [r7, #20]
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	7c3b      	ldrb	r3, [r7, #16]
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2300      	movs	r3, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffc3 	bl	8000ef4 <mavlink_finalize_message_chan>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000f8e:	d13a      	bne.n	8001006 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000f94:	2305      	movs	r3, #5
 8000f96:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	789a      	ldrb	r2, [r3, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3302      	adds	r3, #2
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	7992      	ldrb	r2, [r2, #6]
 8000fb0:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3303      	adds	r3, #3
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	79d2      	ldrb	r2, [r2, #7]
 8000fba:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	7a12      	ldrb	r2, [r2, #8]
 8000fc4:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	7a5a      	ldrb	r2, [r3, #9]
 8000fca:	7a99      	ldrb	r1, [r3, #10]
 8000fcc:	0209      	lsls	r1, r1, #8
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	7adb      	ldrb	r3, [r3, #11]
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3305      	adds	r3, #5
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	1d98      	adds	r0, r3, #6
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f103 010c 	add.w	r1, r3, #12
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	78db      	ldrb	r3, [r3, #3]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f006 fbeb 	bl	80077ca <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8000ff4:	7dbb      	ldrb	r3, [r7, #22]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	78d2      	ldrb	r2, [r2, #3]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e06c      	b.n	80010e0 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	330c      	adds	r3, #12
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe1e 	bl	8000c50 <_mav_trim_payload>
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001018:	2309      	movs	r3, #9
 800101a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	789a      	ldrb	r2, [r3, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3302      	adds	r3, #2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	7912      	ldrb	r2, [r2, #4]
 8001034:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3303      	adds	r3, #3
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	7952      	ldrb	r2, [r2, #5]
 800103e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3304      	adds	r3, #4
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	7992      	ldrb	r2, [r2, #6]
 8001048:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3305      	adds	r3, #5
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	79d2      	ldrb	r2, [r2, #7]
 8001052:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3306      	adds	r3, #6
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	7a12      	ldrb	r2, [r2, #8]
 800105c:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	7a5a      	ldrb	r2, [r3, #9]
 8001062:	7a99      	ldrb	r1, [r3, #10]
 8001064:	0209      	lsls	r1, r1, #8
 8001066:	430a      	orrs	r2, r1
 8001068:	7adb      	ldrb	r3, [r3, #11]
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	4313      	orrs	r3, r2
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3307      	adds	r3, #7
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	7a5a      	ldrb	r2, [r3, #9]
 800107c:	7a99      	ldrb	r1, [r3, #10]
 800107e:	0209      	lsls	r1, r1, #8
 8001080:	430a      	orrs	r2, r1
 8001082:	7adb      	ldrb	r3, [r3, #11]
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	4313      	orrs	r3, r2
 8001088:	121a      	asrs	r2, r3, #8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3308      	adds	r3, #8
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	7a5a      	ldrb	r2, [r3, #9]
 8001096:	7a99      	ldrb	r1, [r3, #10]
 8001098:	0209      	lsls	r1, r1, #8
 800109a:	430a      	orrs	r2, r1
 800109c:	7adb      	ldrb	r3, [r3, #11]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	4313      	orrs	r3, r2
 80010a2:	141a      	asrs	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3309      	adds	r3, #9
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f103 000a 	add.w	r0, r3, #10
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	330c      	adds	r3, #12
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f006 fb86 	bl	80077ca <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80010be:	7dba      	ldrb	r2, [r7, #22]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4413      	add	r3, r2
 80010c4:	3301      	adds	r3, #1
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <mavlink_msg_to_send_buffer+0x164>
 80010d8:	230d      	movs	r3, #13
 80010da:	e000      	b.n	80010de <mavlink_msg_to_send_buffer+0x166>
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1c98      	adds	r0, r3, #2
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	4619      	mov	r1, r3
 8001112:	f006 fb5a 	bl	80077ca <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001116:	7dbb      	ldrb	r3, [r7, #22]
 8001118:	b29a      	uxth	r2, r3
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b29a      	uxth	r2, r3
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	3303      	adds	r3, #3
 800112c:	b29b      	uxth	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <mavlink_msg_heartbeat_pack>:
 * @param time  Time from boot of system
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t mode, uint32_t time)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	603a      	str	r2, [r7, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 4, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.time = time;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	60bb      	str	r3, [r7, #8]
    packet.mode = mode;
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	733b      	strb	r3, [r7, #12]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	330c      	adds	r3, #12
 8001158:	f107 0108 	add.w	r1, r7, #8
 800115c:	2205      	movs	r2, #5
 800115e:	4618      	mov	r0, r3
 8001160:	f006 fb33 	bl	80077ca <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	725a      	strb	r2, [r3, #9]
 800116a:	2200      	movs	r2, #0
 800116c:	729a      	strb	r2, [r3, #10]
 800116e:	2200      	movs	r2, #0
 8001170:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8001172:	79ba      	ldrb	r2, [r7, #6]
 8001174:	79f9      	ldrb	r1, [r7, #7]
 8001176:	2389      	movs	r3, #137	; 0x89
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2305      	movs	r3, #5
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2305      	movs	r3, #5
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f7ff fedb 	bl	8000f3c <mavlink_finalize_message>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <mavlink_msg_speed_info_pack>:
 * @param speed_z  Speed in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_speed_info_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time, float speed_x, float speed_y, float speed_z)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af02      	add	r7, sp, #8
 8001196:	613a      	str	r2, [r7, #16]
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	ed87 0a02 	vstr	s0, [r7, #8]
 800119e:	edc7 0a01 	vstr	s1, [r7, #4]
 80011a2:	ed87 1a00 	vstr	s2, [r7]
 80011a6:	4603      	mov	r3, r0
 80011a8:	75fb      	strb	r3, [r7, #23]
 80011aa:	460b      	mov	r3, r1
 80011ac:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 12, speed_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_SPEED_INFO_LEN);
#else
    mavlink_speed_info_t packet;
    packet.time = time;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
    packet.speed_x = speed_x;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	61fb      	str	r3, [r7, #28]
    packet.speed_y = speed_y;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	623b      	str	r3, [r7, #32]
    packet.speed_z = speed_z;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_INFO_LEN);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	330c      	adds	r3, #12
 80011c2:	f107 0118 	add.w	r1, r7, #24
 80011c6:	2210      	movs	r2, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f006 fafe 	bl	80077ca <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_SPEED_INFO;
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	725a      	strb	r2, [r3, #9]
 80011d8:	2200      	movs	r2, #0
 80011da:	729a      	strb	r2, [r3, #10]
 80011dc:	2200      	movs	r2, #0
 80011de:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_SPEED_INFO_MIN_LEN, MAVLINK_MSG_ID_SPEED_INFO_LEN, MAVLINK_MSG_ID_SPEED_INFO_CRC);
 80011e0:	7dba      	ldrb	r2, [r7, #22]
 80011e2:	7df9      	ldrb	r1, [r7, #23]
 80011e4:	23ca      	movs	r3, #202	; 0xca
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2310      	movs	r3, #16
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2310      	movs	r3, #16
 80011ee:	6938      	ldr	r0, [r7, #16]
 80011f0:	f7ff fea4 	bl	8000f3c <mavlink_finalize_message>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <mavlink_msg_speed_info_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param speed_info C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_info_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_info_t* speed_info)
{
 80011fe:	b5b0      	push	{r4, r5, r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	460b      	mov	r3, r1
 800120e:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_speed_info_pack(system_id, component_id, msg, speed_info->time, speed_info->speed_x, speed_info->speed_y, speed_info->speed_z);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681d      	ldr	r5, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6899      	ldr	r1, [r3, #8]
 8001220:	460b      	mov	r3, r1
 8001222:	4619      	mov	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	7bbc      	ldrb	r4, [r7, #14]
 800122a:	7bf8      	ldrb	r0, [r7, #15]
 800122c:	ee01 3a10 	vmov	s2, r3
 8001230:	ee00 1a90 	vmov	s1, r1
 8001234:	ee00 2a10 	vmov	s0, r2
 8001238:	462b      	mov	r3, r5
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff ffa7 	bl	8001190 <mavlink_msg_speed_info_pack>
 8001242:	4603      	mov	r3, r0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bdb0      	pop	{r4, r5, r7, pc}

0800124c <mavlink_msg_speed_setpoint_pack>:
 * @param setpoint_z  Speed setpoint in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_speed_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float setpoint_x, float setpoint_y, float setpoint_z)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af02      	add	r7, sp, #8
 8001252:	4603      	mov	r3, r0
 8001254:	613a      	str	r2, [r7, #16]
 8001256:	ed87 0a03 	vstr	s0, [r7, #12]
 800125a:	edc7 0a02 	vstr	s1, [r7, #8]
 800125e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001262:	75fb      	strb	r3, [r7, #23]
 8001264:	460b      	mov	r3, r1
 8001266:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 8, setpoint_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
#else
    mavlink_speed_setpoint_t packet;
    packet.setpoint_x = setpoint_x;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	61fb      	str	r3, [r7, #28]
    packet.setpoint_y = setpoint_y;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	623b      	str	r3, [r7, #32]
    packet.setpoint_z = setpoint_z;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	330c      	adds	r3, #12
 8001278:	f107 011c 	add.w	r1, r7, #28
 800127c:	220c      	movs	r2, #12
 800127e:	4618      	mov	r0, r3
 8001280:	f006 faa3 	bl	80077ca <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2200      	movs	r2, #0
 8001288:	f042 0202 	orr.w	r2, r2, #2
 800128c:	725a      	strb	r2, [r3, #9]
 800128e:	2200      	movs	r2, #0
 8001290:	729a      	strb	r2, [r3, #10]
 8001292:	2200      	movs	r2, #0
 8001294:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_SPEED_SETPOINT_MIN_LEN, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN, MAVLINK_MSG_ID_SPEED_SETPOINT_CRC);
 8001296:	7dba      	ldrb	r2, [r7, #22]
 8001298:	7df9      	ldrb	r1, [r7, #23]
 800129a:	2381      	movs	r3, #129	; 0x81
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	230c      	movs	r3, #12
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	230c      	movs	r3, #12
 80012a4:	6938      	ldr	r0, [r7, #16]
 80012a6:	f7ff fe49 	bl	8000f3c <mavlink_finalize_message>
 80012aa:	4603      	mov	r3, r0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <mavlink_msg_speed_setpoint_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param speed_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_setpoint_t* speed_setpoint)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60ba      	str	r2, [r7, #8]
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	460b      	mov	r3, r1
 80012c4:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y, speed_setpoint->setpoint_z);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4613      	mov	r3, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6859      	ldr	r1, [r3, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	4619      	mov	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	7bbc      	ldrb	r4, [r7, #14]
 80012dc:	7bf8      	ldrb	r0, [r7, #15]
 80012de:	ee01 3a10 	vmov	s2, r3
 80012e2:	ee00 1a90 	vmov	s1, r1
 80012e6:	ee00 2a10 	vmov	s0, r2
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4621      	mov	r1, r4
 80012ee:	f7ff ffad 	bl	800124c <mavlink_msg_speed_setpoint_pack>
 80012f2:	4603      	mov	r3, r0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}

080012fc <mavlink_msg_speed_setpoint_decode>:
 *
 * @param msg The message to decode
 * @param speed_setpoint C-struct to decode the message contents into
 */
static inline void mavlink_msg_speed_setpoint_decode(const mavlink_message_t* msg, mavlink_speed_setpoint_t* speed_setpoint)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    speed_setpoint->setpoint_x = mavlink_msg_speed_setpoint_get_setpoint_x(msg);
    speed_setpoint->setpoint_y = mavlink_msg_speed_setpoint_get_setpoint_y(msg);
    speed_setpoint->setpoint_z = mavlink_msg_speed_setpoint_get_setpoint_z(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	bf28      	it	cs
 800130e:	230c      	movcs	r3, #12
 8001310:	73fb      	strb	r3, [r7, #15]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8001312:	220c      	movs	r2, #12
 8001314:	2100      	movs	r1, #0
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f006 fa62 	bl	80077e0 <memset>
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	330c      	adds	r3, #12
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	4619      	mov	r1, r3
 8001324:	6838      	ldr	r0, [r7, #0]
 8001326:	f006 fa50 	bl	80077ca <memcpy>
#endif
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <mavlink_msg_mode_selection_get_mode>:
 * @brief Get field mode from mode_selection message
 *
 * @return  Actual operating mode
 */
static inline uint8_t mavlink_msg_mode_selection_get_mode(const mavlink_message_t* msg)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  0);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	330c      	adds	r3, #12
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <mavlink_msg_motor_setpoint_pack>:
 * @param motor_z  Speed setpoint in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_motor_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time, float motor_x, float motor_y, float motor_z)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af02      	add	r7, sp, #8
 8001352:	613a      	str	r2, [r7, #16]
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	ed87 0a02 	vstr	s0, [r7, #8]
 800135a:	edc7 0a01 	vstr	s1, [r7, #4]
 800135e:	ed87 1a00 	vstr	s2, [r7]
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
 8001366:	460b      	mov	r3, r1
 8001368:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 12, motor_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
#else
    mavlink_motor_setpoint_t packet;
    packet.time = time;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	61bb      	str	r3, [r7, #24]
    packet.motor_x = motor_x;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	61fb      	str	r3, [r7, #28]
    packet.motor_y = motor_y;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	623b      	str	r3, [r7, #32]
    packet.motor_z = motor_z;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	330c      	adds	r3, #12
 800137e:	f107 0118 	add.w	r1, r7, #24
 8001382:	2210      	movs	r2, #16
 8001384:	4618      	mov	r0, r3
 8001386:	f006 fa20 	bl	80077ca <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_MOTOR_SETPOINT;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2200      	movs	r2, #0
 800138e:	f042 0204 	orr.w	r2, r2, #4
 8001392:	725a      	strb	r2, [r3, #9]
 8001394:	2200      	movs	r2, #0
 8001396:	729a      	strb	r2, [r3, #10]
 8001398:	2200      	movs	r2, #0
 800139a:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_MOTOR_SETPOINT_MIN_LEN, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN, MAVLINK_MSG_ID_MOTOR_SETPOINT_CRC);
 800139c:	7dba      	ldrb	r2, [r7, #22]
 800139e:	7df9      	ldrb	r1, [r7, #23]
 80013a0:	23a3      	movs	r3, #163	; 0xa3
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2310      	movs	r3, #16
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2310      	movs	r3, #16
 80013aa:	6938      	ldr	r0, [r7, #16]
 80013ac:	f7ff fdc6 	bl	8000f3c <mavlink_finalize_message>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <mavlink_msg_motor_setpoint_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param motor_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_motor_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_motor_setpoint_t* motor_setpoint)
{
 80013ba:	b5b0      	push	{r4, r5, r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	460b      	mov	r3, r1
 80013ca:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_motor_setpoint_pack(system_id, component_id, msg, motor_setpoint->time, motor_setpoint->motor_x, motor_setpoint->motor_y, motor_setpoint->motor_z);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681d      	ldr	r5, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	460b      	mov	r3, r1
 80013de:	4619      	mov	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	7bbc      	ldrb	r4, [r7, #14]
 80013e6:	7bf8      	ldrb	r0, [r7, #15]
 80013e8:	ee01 3a10 	vmov	s2, r3
 80013ec:	ee00 1a90 	vmov	s1, r1
 80013f0:	ee00 2a10 	vmov	s0, r2
 80013f4:	462b      	mov	r3, r5
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	4621      	mov	r1, r4
 80013fa:	f7ff ffa7 	bl	800134c <mavlink_msg_motor_setpoint_pack>
 80013fe:	4603      	mov	r3, r0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bdb0      	pop	{r4, r5, r7, pc}

08001408 <mouseDriver_initSetpoint>:
static mavlink_speed_setpoint_t actual_speed_setpoint;
static mavlink_motor_setpoint_t actual_motor_signal;

/* Private functions for mouseDriver.c*/
/* Private Init functions */
void mouseDriver_initSetpoint(void){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	actual_speed_setpoint.setpoint_x = 0;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <mouseDriver_initSetpoint+0x28>)
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	actual_speed_setpoint.setpoint_y = 0;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <mouseDriver_initSetpoint+0x28>)
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
	actual_speed_setpoint.setpoint_z = 0;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <mouseDriver_initSetpoint+0x28>)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000040 	.word	0x20000040

08001434 <mouseDriver_initTime>:

void mouseDriver_initTime(void){
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	actual_time = 0;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <mouseDriver_initTime+0x14>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	20000028 	.word	0x20000028

0800144c <mouseDriver_initMode>:

void mouseDriver_initMode(void){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	actual_mode = MOUSE_MODE_STOP;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <mouseDriver_initMode+0x14>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	2000002c 	.word	0x2000002c

08001464 <mouseDriver_getSpeedFromSensors>:

void mouseDriver_getSpeedFromSensors(void){
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	actual_speed_measure.speed_x = 1;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <mouseDriver_getSpeedFromSensors+0x24>)
 800146a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800146e:	605a      	str	r2, [r3, #4]
	actual_speed_measure.speed_y = 2;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <mouseDriver_getSpeedFromSensors+0x24>)
 8001472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001476:	609a      	str	r2, [r3, #8]
	actual_speed_measure.speed_z = 3;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <mouseDriver_getSpeedFromSensors+0x24>)
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <mouseDriver_getSpeedFromSensors+0x28>)
 800147c:	60da      	str	r2, [r3, #12]
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20000030 	.word	0x20000030
 800148c:	40400000 	.word	0x40400000

08001490 <mouseDriver_setMode>:
/* Private set/get functions */
void mouseDriver_setSetpoint(const mavlink_speed_setpoint_t speed){
	actual_speed_setpoint = speed;
}

void mouseDriver_setMode(uint8_t mode){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	actual_mode = mode;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <mouseDriver_setMode+0x1c>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	7013      	strb	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	2000002c 	.word	0x2000002c

080014b0 <mouseDriver_sendMsg>:

/* Private message functions */
void mouseDriver_sendMsg(uint32_t msgid){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0ce      	sub	sp, #312	; 0x138
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	6018      	str	r0, [r3, #0]
	mavlink_message_t msg;
	static uint8_t outBuffer[MAX_BYTE_BUFFER_SIZE];
	static uint16_t msg_size = 0;

	while (main_get_huart_tx_state() == HAL_BUSY){
 80014ba:	e002      	b.n	80014c2 <mouseDriver_sendMsg+0x12>
		/*Wait for other messages to be sent*/
		HAL_Delay(1);
 80014bc:	2001      	movs	r0, #1
 80014be:	f001 fee3 	bl	8003288 <HAL_Delay>
	while (main_get_huart_tx_state() == HAL_BUSY){
 80014c2:	f001 f967 	bl	8002794 <main_get_huart_tx_state>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d0f7      	beq.n	80014bc <mouseDriver_sendMsg+0xc>
	}

	switch(msgid){
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d876      	bhi.n	80015c2 <mouseDriver_sendMsg+0x112>
 80014d4:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <mouseDriver_sendMsg+0x2c>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	080014f1 	.word	0x080014f1
 80014e0:	0800158b 	.word	0x0800158b
 80014e4:	0800152b 	.word	0x0800152b
 80014e8:	080015c3 	.word	0x080015c3
 80014ec:	0800155b 	.word	0x0800155b
		case MAVLINK_MSG_ID_HEARTBEAT:
			mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &msg, actual_mode, actual_time);
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <mouseDriver_sendMsg+0x120>)
 80014f2:	7819      	ldrb	r1, [r3, #0]
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f107 020c 	add.w	r2, r7, #12
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	460b      	mov	r3, r1
 8001500:	2100      	movs	r1, #0
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff fe17 	bl	8001136 <mavlink_msg_heartbeat_pack>
			msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	4832      	ldr	r0, [pc, #200]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001510:	f7ff fd32 	bl	8000f78 <mavlink_msg_to_send_buffer>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <mouseDriver_sendMsg+0x12c>)
 800151a:	801a      	strh	r2, [r3, #0]
			main_transmit_buffer(outBuffer, msg_size);
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <mouseDriver_sendMsg+0x12c>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	482d      	ldr	r0, [pc, #180]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001524:	f001 f940 	bl	80027a8 <main_transmit_buffer>
			break;
 8001528:	e04c      	b.n	80015c4 <mouseDriver_sendMsg+0x114>
		case MAVLINK_MSG_ID_SPEED_SETPOINT:
			mavlink_msg_speed_setpoint_encode(SYS_ID,COMP_ID, &msg, &actual_speed_setpoint);
 800152a:	f107 020c 	add.w	r2, r7, #12
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <mouseDriver_sendMsg+0x130>)
 8001530:	2100      	movs	r1, #0
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff febe 	bl	80012b4 <mavlink_msg_speed_setpoint_encode>
			msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	4619      	mov	r1, r3
 800153e:	4826      	ldr	r0, [pc, #152]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001540:	f7ff fd1a 	bl	8000f78 <mavlink_msg_to_send_buffer>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <mouseDriver_sendMsg+0x12c>)
 800154a:	801a      	strh	r2, [r3, #0]
			main_transmit_buffer(outBuffer, msg_size);
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <mouseDriver_sendMsg+0x12c>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	4821      	ldr	r0, [pc, #132]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001554:	f001 f928 	bl	80027a8 <main_transmit_buffer>
			break;
 8001558:	e034      	b.n	80015c4 <mouseDriver_sendMsg+0x114>
		case MAVLINK_MSG_ID_MOTOR_SETPOINT:
			mavlink_msg_motor_setpoint_encode(SYS_ID,COMP_ID, &msg, &actual_motor_signal);
 800155a:	f107 020c 	add.w	r2, r7, #12
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <mouseDriver_sendMsg+0x134>)
 8001560:	2100      	movs	r1, #0
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff ff29 	bl	80013ba <mavlink_msg_motor_setpoint_encode>
			msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	481a      	ldr	r0, [pc, #104]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001570:	f7ff fd02 	bl	8000f78 <mavlink_msg_to_send_buffer>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <mouseDriver_sendMsg+0x12c>)
 800157a:	801a      	strh	r2, [r3, #0]
			main_transmit_buffer(outBuffer, msg_size);
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <mouseDriver_sendMsg+0x12c>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	4815      	ldr	r0, [pc, #84]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001584:	f001 f910 	bl	80027a8 <main_transmit_buffer>
			break;
 8001588:	e01c      	b.n	80015c4 <mouseDriver_sendMsg+0x114>
		case MAVLINK_MSG_ID_SPEED_INFO:
			/* DEMO CODE INIT*/
				actual_speed_measure.time = actual_time;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <mouseDriver_sendMsg+0x138>)
 8001590:	6013      	str	r3, [r2, #0]
			/* DEMO CODE END*/
			mavlink_msg_speed_info_encode(SYS_ID,COMP_ID, &msg, &actual_speed_measure);
 8001592:	f107 020c 	add.w	r2, r7, #12
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <mouseDriver_sendMsg+0x138>)
 8001598:	2100      	movs	r1, #0
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fe2f 	bl	80011fe <mavlink_msg_speed_info_encode>
			msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	480c      	ldr	r0, [pc, #48]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 80015a8:	f7ff fce6 	bl	8000f78 <mavlink_msg_to_send_buffer>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <mouseDriver_sendMsg+0x12c>)
 80015b2:	801a      	strh	r2, [r3, #0]
			main_transmit_buffer(outBuffer, msg_size);
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <mouseDriver_sendMsg+0x12c>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 80015bc:	f001 f8f4 	bl	80027a8 <main_transmit_buffer>
			break;
 80015c0:	e000      	b.n	80015c4 <mouseDriver_sendMsg+0x114>
		default:
			break;
 80015c2:	bf00      	nop
	}
}
 80015c4:	bf00      	nop
 80015c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000002c 	.word	0x2000002c
 80015d4:	20000028 	.word	0x20000028
 80015d8:	2000005c 	.word	0x2000005c
 80015dc:	20000250 	.word	0x20000250
 80015e0:	20000040 	.word	0x20000040
 80015e4:	2000004c 	.word	0x2000004c
 80015e8:	20000030 	.word	0x20000030

080015ec <mouseDriver_init>:
/* Private Idle functions */

/* END of private functions */

/* Init functions */
void mouseDriver_init(void){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	mouseDriver_initTime();
 80015f0:	f7ff ff20 	bl	8001434 <mouseDriver_initTime>
	mouseDriver_initMode();
 80015f4:	f7ff ff2a 	bl	800144c <mouseDriver_initMode>
	mouseDriver_getSpeedFromSensors();
 80015f8:	f7ff ff34 	bl	8001464 <mouseDriver_getSpeedFromSensors>
	mouseDriver_initSetpoint();
 80015fc:	f7ff ff04 	bl	8001408 <mouseDriver_initSetpoint>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <mouseDriver_setTime>:
/* Function set/get */
void mouseDriver_setTime (const uint32_t time){
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	actual_time = time;
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <mouseDriver_setTime+0x1c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000028 	.word	0x20000028

08001624 <mouseDriver_getTime>:

uint32_t mouseDriver_getTime (void){
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	return actual_time;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <mouseDriver_getTime+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000028 	.word	0x20000028

0800163c <mouseDriver_readMsg>:
/* Message related functions */
void mouseDriver_readMsg(const mavlink_message_t msg){
 800163c:	b084      	sub	sp, #16
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
 8001642:	f107 0c08 	add.w	ip, r7, #8
 8001646:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	switch(msg.msgid){
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001650:	2b03      	cmp	r3, #3
 8001652:	d004      	beq.n	800165e <mouseDriver_readMsg+0x22>
 8001654:	2b04      	cmp	r3, #4
 8001656:	d015      	beq.n	8001684 <mouseDriver_readMsg+0x48>
 8001658:	2b02      	cmp	r3, #2
 800165a:	d009      	beq.n	8001670 <mouseDriver_readMsg+0x34>
	case MAVLINK_MSG_ID_MOTOR_SETPOINT:
		mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
		break;

	default:
		break;
 800165c:	e019      	b.n	8001692 <mouseDriver_readMsg+0x56>
		mouseDriver_setMode( mavlink_msg_mode_selection_get_mode(&msg));
 800165e:	f107 0008 	add.w	r0, r7, #8
 8001662:	f7ff fe66 	bl	8001332 <mavlink_msg_mode_selection_get_mode>
 8001666:	4603      	mov	r3, r0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff11 	bl	8001490 <mouseDriver_setMode>
		break;
 800166e:	e010      	b.n	8001692 <mouseDriver_readMsg+0x56>
		if (actual_mode == MOUSE_MODE_SPEED)
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <mouseDriver_readMsg+0x64>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10b      	bne.n	8001690 <mouseDriver_readMsg+0x54>
			mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
 8001678:	490a      	ldr	r1, [pc, #40]	; (80016a4 <mouseDriver_readMsg+0x68>)
 800167a:	f107 0008 	add.w	r0, r7, #8
 800167e:	f7ff fe3d 	bl	80012fc <mavlink_msg_speed_setpoint_decode>
		break;
 8001682:	e005      	b.n	8001690 <mouseDriver_readMsg+0x54>
		mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <mouseDriver_readMsg+0x68>)
 8001686:	f107 0008 	add.w	r0, r7, #8
 800168a:	f7ff fe37 	bl	80012fc <mavlink_msg_speed_setpoint_decode>
		break;
 800168e:	e000      	b.n	8001692 <mouseDriver_readMsg+0x56>
		break;
 8001690:	bf00      	nop
	};
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800169a:	b004      	add	sp, #16
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000002c 	.word	0x2000002c
 80016a4:	20000040 	.word	0x20000040

080016a8 <mouseDriver_idle>:

/* Idle functions */
void mouseDriver_idle (void){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	actual_motor_signal.time = actual_time;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <mouseDriver_idle+0x70>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <mouseDriver_idle+0x74>)
 80016b2:	6013      	str	r3, [r2, #0]

	switch(actual_mode){
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <mouseDriver_idle+0x78>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d010      	beq.n	80016de <mouseDriver_idle+0x36>
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d01b      	beq.n	80016f8 <mouseDriver_idle+0x50>
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11a      	bne.n	80016fa <mouseDriver_idle+0x52>
	case MOUSE_MODE_STOP:
		mouseDriver_initSetpoint();
 80016c4:	f7ff fea0 	bl	8001408 <mouseDriver_initSetpoint>
		actual_motor_signal.motor_x = 0;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <mouseDriver_idle+0x74>)
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
		actual_motor_signal.motor_y = 0;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <mouseDriver_idle+0x74>)
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
		main_stop_motors();
 80016d8:	f001 f878 	bl	80027cc <main_stop_motors>
		break;
 80016dc:	e00d      	b.n	80016fa <mouseDriver_idle+0x52>
	case MOUSE_MODE_SPEED:
		/* BEGIN Code for DEMO */
			actual_motor_signal.motor_x = actual_speed_setpoint.setpoint_x;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <mouseDriver_idle+0x7c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <mouseDriver_idle+0x74>)
 80016e4:	6053      	str	r3, [r2, #4]
			actual_motor_signal.motor_y = actual_speed_setpoint.setpoint_y;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <mouseDriver_idle+0x7c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4a0c      	ldr	r2, [pc, #48]	; (800171c <mouseDriver_idle+0x74>)
 80016ec:	6093      	str	r3, [r2, #8]
		/* END Code for DEMO */
		main_set_motors_speed(actual_motor_signal);
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <mouseDriver_idle+0x74>)
 80016f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f2:	f001 f879 	bl	80027e8 <main_set_motors_speed>
		break;
 80016f6:	e000      	b.n	80016fa <mouseDriver_idle+0x52>
	case MOUSE_MODE_AUTO:
		break;
 80016f8:	bf00      	nop
	}
	/* Note: Delay needed between messages otherwise PC not able to follow */
	mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff fed8 	bl	80014b0 <mouseDriver_sendMsg>
	mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 8001700:	2002      	movs	r0, #2
 8001702:	f7ff fed5 	bl	80014b0 <mouseDriver_sendMsg>
	mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 8001706:	2004      	movs	r0, #4
 8001708:	f7ff fed2 	bl	80014b0 <mouseDriver_sendMsg>
	mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fecf 	bl	80014b0 <mouseDriver_sendMsg>

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000028 	.word	0x20000028
 800171c:	2000004c 	.word	0x2000004c
 8001720:	2000002c 	.word	0x2000002c
 8001724:	20000040 	.word	0x20000040

08001728 <mouseDriver_controlISR>:

/* ISR Functions */
void mouseDriver_controlISR(void){
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <crc_accumulate>:
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	6039      	str	r1, [r7, #0]
 8001740:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4053      	eors	r3, r2
 800174c:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	b25a      	sxtb	r2, r3
 8001754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001758:	4053      	eors	r3, r2
 800175a:	b25b      	sxtb	r3, r3
 800175c:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b21a      	sxth	r2, r3
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21b      	sxth	r3, r3
 800176e:	4053      	eors	r3, r2
 8001770:	b21a      	sxth	r2, r3
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	b21b      	sxth	r3, r3
 8001778:	4053      	eors	r3, r2
 800177a:	b21a      	sxth	r2, r3
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	b2db      	uxtb	r3, r3
 8001782:	b21b      	sxth	r3, r3
 8001784:	4053      	eors	r3, r2
 8001786:	b21b      	sxth	r3, r3
 8001788:	b29a      	uxth	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	801a      	strh	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <crc_init>:
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a8:	801a      	strh	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <mavlink_sha256_init>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <mavlink_sha256_init+0x50>)
 80017d0:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <mavlink_sha256_init+0x54>)
 80017d6:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <mavlink_sha256_init+0x58>)
 80017dc:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <mavlink_sha256_init+0x5c>)
 80017e2:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <mavlink_sha256_init+0x60>)
 80017e8:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <mavlink_sha256_init+0x64>)
 80017ee:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <mavlink_sha256_init+0x68>)
 80017f4:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <mavlink_sha256_init+0x6c>)
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	6a09e667 	.word	0x6a09e667
 800180c:	bb67ae85 	.word	0xbb67ae85
 8001810:	3c6ef372 	.word	0x3c6ef372
 8001814:	a54ff53a 	.word	0xa54ff53a
 8001818:	510e527f 	.word	0x510e527f
 800181c:	9b05688c 	.word	0x9b05688c
 8001820:	1f83d9ab 	.word	0x1f83d9ab
 8001824:	5be0cd19 	.word	0x5be0cd19

08001828 <mavlink_sha256_calc>:
{
 8001828:	b480      	push	{r7}
 800182a:	b0cf      	sub	sp, #316	; 0x13c
 800182c:	af00      	add	r7, sp, #0
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	6018      	str	r0, [r3, #0]
 8001832:	463b      	mov	r3, r7
 8001834:	6019      	str	r1, [r3, #0]
    AA = A;
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for (i = 0; i < 16; ++i)
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800188c:	e011      	b.n	80018b2 <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 800188e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	463a      	mov	r2, r7
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	4413      	add	r3, r2
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80018a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ac:	3301      	adds	r3, #1
 80018ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	dde9      	ble.n	800188e <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80018ba:	2310      	movs	r3, #16
 80018bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018c0:	e057      	b.n	8001972 <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80018c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018c6:	1e9a      	subs	r2, r3, #2
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	ea4f 4273 	mov.w	r2, r3, ror #17
 80018d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018d8:	1e99      	subs	r1, r3, #2
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018e2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80018e6:	405a      	eors	r2, r3
 80018e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ec:	1e99      	subs	r1, r3, #2
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	405a      	eors	r2, r3
 80018fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018fe:	1fd9      	subs	r1, r3, #7
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001908:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800190a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800190e:	f1a3 010f 	sub.w	r1, r3, #15
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800191a:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800191e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001922:	f1a3 000f 	sub.w	r0, r3, #15
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800192e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001932:	4059      	eors	r1, r3
 8001934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001938:	f1a3 000f 	sub.w	r0, r3, #15
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001948:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800194a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800194e:	f1a3 0110 	sub.w	r1, r3, #16
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800195a:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8001968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800196c:	3301      	adds	r3, #1
 800196e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001976:	2b3f      	cmp	r3, #63	; 0x3f
 8001978:	dda3      	ble.n	80018c2 <mavlink_sha256_calc+0x9a>
    for (i = 0; i < 64; i++) {
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001980:	e076      	b.n	8001a70 <mavlink_sha256_calc+0x248>
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001982:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001986:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800198a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800198e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001992:	405a      	eors	r2, r3
 8001994:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001998:	ea4f 6373 	mov.w	r3, r3, ror #25
 800199c:	405a      	eors	r2, r3
 800199e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019a2:	441a      	add	r2, r3
 80019a4:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80019a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019ac:	4019      	ands	r1, r3
 80019ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019b2:	43d8      	mvns	r0, r3
 80019b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80019b8:	4003      	ands	r3, r0
 80019ba:	404b      	eors	r3, r1
 80019bc:	441a      	add	r2, r3
 80019be:	4956      	ldr	r1, [pc, #344]	; (8001b18 <mavlink_sha256_calc+0x2f0>)
 80019c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019c8:	441a      	add	r2, r3
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80019d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019d6:	4413      	add	r3, r2
 80019d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80019dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019e0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80019e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019e8:	ea4f 3373 	mov.w	r3, r3, ror #13
 80019ec:	405a      	eors	r2, r3
 80019ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019f2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80019f6:	405a      	eors	r2, r3
 80019f8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80019fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a00:	4059      	eors	r1, r3
 8001a02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a06:	4019      	ands	r1, r3
 8001a08:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a10:	4003      	ands	r3, r0
 8001a12:	404b      	eors	r3, r1
 8001a14:	4413      	add	r3, r2
 8001a16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	HH = GG;
 8001a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8001a22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8001a2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8001a32:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001a36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8001a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8001a48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8001a50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8001a58:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a60:	4413      	add	r3, r2
 8001a62:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8001a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a74:	2b3f      	cmp	r3, #63	; 0x3f
 8001a76:	dd84      	ble.n	8001982 <mavlink_sha256_calc+0x15a>
    A += AA;
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a82:	441a      	add	r2, r3
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	609a      	str	r2, [r3, #8]
    B += BB;
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a94:	441a      	add	r2, r3
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60da      	str	r2, [r3, #12]
    C += CC;
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001aa6:	441a      	add	r2, r3
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	611a      	str	r2, [r3, #16]
    D += DD;
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ab8:	441a      	add	r2, r3
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	615a      	str	r2, [r3, #20]
    E += EE;
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001aca:	441a      	add	r2, r3
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	619a      	str	r2, [r3, #24]
    F += FF;
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001adc:	441a      	add	r2, r3
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	61da      	str	r2, [r3, #28]
    G += GG;
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a1a      	ldr	r2, [r3, #32]
 8001aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001aee:	441a      	add	r2, r3
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	621a      	str	r2, [r3, #32]
    H += HH;
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b00:	441a      	add	r2, r3
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b08:	bf00      	nop
 8001b0a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	08007908 	.word	0x08007908

08001b1c <mavlink_sha256_update>:
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b09c      	sub	sp, #112	; 0x70
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	65fb      	str	r3, [r7, #92]	; 0x5c
    m->sz[0] += len * 8;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	441a      	add	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d904      	bls.n	8001b54 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b5c:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001b5e:	e054      	b.n	8001c0a <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8001b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b62:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b66:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d201      	bcs.n	8001b74 <mavlink_sha256_update+0x58>
            l = len;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	667b      	str	r3, [r7, #100]	; 0x64
	memcpy(m->u.save_bytes + offset, p, l);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b7c:	4413      	add	r3, r2
 8001b7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b80:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001b82:	4618      	mov	r0, r3
 8001b84:	f005 fe21 	bl	80077ca <memcpy>
	offset += l;
 8001b88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b8c:	4413      	add	r3, r2
 8001b8e:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8001b90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b94:	4413      	add	r3, r2
 8001b96:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba2:	2b40      	cmp	r3, #64	; 0x40
 8001ba4:	d131      	bne.n	8001c0a <mavlink_sha256_update+0xee>
	    const uint32_t *u = m->u.save_u32;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3328      	adds	r3, #40	; 0x28
 8001baa:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001bac:	2300      	movs	r3, #0
 8001bae:	663b      	str	r3, [r7, #96]	; 0x60
 8001bb0:	e020      	b.n	8001bf4 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bb8:	4413      	add	r3, r2
 8001bba:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001bbc:	f107 0210 	add.w	r2, r7, #16
 8001bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8001bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bca:	78da      	ldrb	r2, [r3, #3]
 8001bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bce:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bd6:	7892      	ldrb	r2, [r2, #2]
 8001bd8:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8001bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bdc:	3302      	adds	r3, #2
 8001bde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001be0:	7852      	ldrb	r2, [r2, #1]
 8001be2:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8001be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be6:	3303      	adds	r3, #3
 8001be8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bea:	7812      	ldrb	r2, [r2, #0]
 8001bec:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8001bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	dddb      	ble.n	8001bb2 <mavlink_sha256_update+0x96>
	    mavlink_sha256_calc(m, current);
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fe11 	bl	8001828 <mavlink_sha256_calc>
	    offset = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1a7      	bne.n	8001b60 <mavlink_sha256_update+0x44>
}
 8001c10:	bf00      	nop
 8001c12:	3770      	adds	r7, #112	; 0x70
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <mavlink_sha256_final_48>:
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b098      	sub	sp, #96	; 0x60
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    unsigned offset = (m->sz[0] / 8) % 64;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	08db      	lsrs	r3, r3, #3
 8001c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c30:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8001c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c38:	3301      	adds	r3, #1
 8001c3a:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3308      	adds	r3, #8
 8001c40:	657b      	str	r3, [r7, #84]	; 0x54
    *zeros = 0x80;
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	2247      	movs	r2, #71	; 0x47
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f005 fdc5 	bl	80077e0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c5c:	3307      	adds	r3, #7
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c64:	440b      	add	r3, r1
 8001c66:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	0a1a      	lsrs	r2, r3, #8
 8001c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c72:	3306      	adds	r3, #6
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0c1a      	lsrs	r2, r3, #16
 8001c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c88:	3305      	adds	r3, #5
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c90:	440b      	add	r3, r1
 8001c92:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	0e1a      	lsrs	r2, r3, #24
 8001c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cb2:	3303      	adds	r3, #3
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001cba:	440b      	add	r3, r1
 8001cbc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0a1a      	lsrs	r2, r3, #8
 8001cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc8:	3302      	adds	r3, #2
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001cd0:	440b      	add	r3, r1
 8001cd2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0c1a      	lsrs	r2, r3, #16
 8001cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	0e1b      	lsrs	r3, r3, #24
 8001cf2:	b2d9      	uxtb	r1, r3
 8001cf4:	f107 020c 	add.w	r2, r7, #12
 8001cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cfa:	4413      	add	r3, r2
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	701a      	strb	r2, [r3, #0]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8001d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d02:	f103 0208 	add.w	r2, r3, #8
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff05 	bl	8001b1c <mavlink_sha256_update>
    result[0] = p[3];
 8001d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d14:	78da      	ldrb	r2, [r3, #3]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d20:	7892      	ldrb	r2, [r2, #2]
 8001d22:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	3302      	adds	r3, #2
 8001d28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d2a:	7852      	ldrb	r2, [r2, #1]
 8001d2c:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3303      	adds	r3, #3
 8001d32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d3e:	79d2      	ldrb	r2, [r2, #7]
 8001d40:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	3305      	adds	r3, #5
 8001d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d48:	7992      	ldrb	r2, [r2, #6]
 8001d4a:	701a      	strb	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3760      	adds	r7, #96	; 0x60
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <mavlink_get_channel_status>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <mavlink_get_channel_status+0x24>)
 8001d6a:	4413      	add	r3, r2
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000744 	.word	0x20000744

08001d7c <mavlink_get_channel_buffer>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_buffer[chan];
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f240 1223 	movw	r2, #291	; 0x123
 8001d8c:	fb02 f303 	mul.w	r3, r2, r3
 8001d90:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <mavlink_get_channel_buffer+0x24>)
 8001d92:	4413      	add	r3, r2
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	200002b8 	.word	0x200002b8

08001da4 <mavlink_signature_check>:
{
 8001da4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001da8:	b0aa      	sub	sp, #168	; 0xa8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <mavlink_signature_check+0x18>
		return true;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e121      	b.n	8002000 <mavlink_signature_check+0x25c>
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dd2:	3307      	adds	r3, #7
 8001dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_init(&ctx);
 8001dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fceb 	bl	80017b8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f103 0110 	add.w	r1, r3, #16
 8001de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dec:	2220      	movs	r2, #32
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fe94 	bl	8001b1c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	78db      	ldrb	r3, [r3, #3]
 8001df8:	330a      	adds	r3, #10
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e00:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fe89 	bl	8001b1c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8001e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e14:	2202      	movs	r2, #2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fe80 	bl	8001b1c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8001e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e20:	2207      	movs	r2, #7
 8001e22:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fe78 	bl	8001b1c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8001e2c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff feee 	bl	8001c18 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8001e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e40:	2206      	movs	r2, #6
 8001e42:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 fcb0 	bl	80077ac <memcmp>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <mavlink_signature_check+0xb2>
		return false;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e0d4      	b.n	8002000 <mavlink_signature_check+0x25c>
	uint8_t link_id = psig[0];
 8001e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	f04f 0400 	mov.w	r4, #0
 8001e68:	e9c7 3406 	strd	r3, r4, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e70:	1c59      	adds	r1, r3, #1
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	2206      	movs	r2, #6
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f005 fca6 	bl	80077ca <memcpy>
	if (signing_streams == NULL) {
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <mavlink_signature_check+0xe4>
		return false;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e0bb      	b.n	8002000 <mavlink_signature_check+0x25c>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001e8e:	e02b      	b.n	8001ee8 <mavlink_signature_check+0x144>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	79d9      	ldrb	r1, [r3, #7]
 8001e94:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001e98:	68b8      	ldr	r0, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4403      	add	r3, r0
 8001ea2:	3303      	adds	r3, #3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4299      	cmp	r1, r3
 8001ea8:	d119      	bne.n	8001ede <mavlink_signature_check+0x13a>
		    msg->compid == signing_streams->stream[i].compid &&
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7a19      	ldrb	r1, [r3, #8]
 8001eae:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001eb2:	68b8      	ldr	r0, [r7, #8]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	4403      	add	r3, r0
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001ec0:	4299      	cmp	r1, r3
 8001ec2:	d10c      	bne.n	8001ede <mavlink_signature_check+0x13a>
		    link_id == signing_streams->stream[i].link_id) {
 8001ec4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001ed6:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d00b      	beq.n	8001ef6 <mavlink_signature_check+0x152>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001ede:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d3cd      	bcc.n	8001e90 <mavlink_signature_check+0xec>
 8001ef4:	e000      	b.n	8001ef8 <mavlink_signature_check+0x154>
			break;
 8001ef6:	bf00      	nop
	if (i == signing_streams->num_signing_streams) {
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d141      	bne.n	8001f88 <mavlink_signature_check+0x1e4>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d901      	bls.n	8001f10 <mavlink_signature_check+0x16c>
			return false;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e077      	b.n	8002000 <mavlink_signature_check+0x25c>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001f10:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f14:	493d      	ldr	r1, [pc, #244]	; (800200c <mavlink_signature_check+0x268>)
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	eb11 0b03 	adds.w	fp, r1, r3
 8001f1e:	eb42 0c04 	adc.w	ip, r2, r4
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001f28:	45a4      	cmp	ip, r4
 8001f2a:	bf08      	it	eq
 8001f2c:	459b      	cmpeq	fp, r3
 8001f2e:	d201      	bcs.n	8001f34 <mavlink_signature_check+0x190>
			return false;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e065      	b.n	8002000 <mavlink_signature_check+0x25c>
		signing_streams->stream[i].sysid = msg->sysid;
 8001f34:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	79d8      	ldrb	r0, [r3, #7]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	440b      	add	r3, r1
 8001f46:	3303      	adds	r3, #3
 8001f48:	4602      	mov	r2, r0
 8001f4a:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001f4c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7a18      	ldrb	r0, [r3, #8]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3304      	adds	r3, #4
 8001f60:	4602      	mov	r2, r0
 8001f62:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001f64:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	3302      	adds	r3, #2
 8001f74:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001f78:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	801a      	strh	r2, [r3, #0]
 8001f86:	e01d      	b.n	8001fc4 <mavlink_signature_check+0x220>
		last_tstamp.t64 = 0;
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	f04f 0400 	mov.w	r4, #0
 8001f90:	e9c7 3404 	strd	r3, r4, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001f94:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	1d59      	adds	r1, r3, #5
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	2206      	movs	r2, #6
 8001faa:	4618      	mov	r0, r3
 8001fac:	f005 fc0d 	bl	80077ca <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001fb0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001fb8:	42a2      	cmp	r2, r4
 8001fba:	bf08      	it	eq
 8001fbc:	4299      	cmpeq	r1, r3
 8001fbe:	d301      	bcc.n	8001fc4 <mavlink_signature_check+0x220>
			return false;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e01d      	b.n	8002000 <mavlink_signature_check+0x25c>
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001fc4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	1d58      	adds	r0, r3, #5
 8001fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fd8:	3301      	adds	r3, #1
 8001fda:	2206      	movs	r2, #6
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f005 fbf4 	bl	80077ca <memcpy>
	if (tstamp.t64 > signing->timestamp) {
 8001fe2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	bf08      	it	eq
 8001ff0:	4299      	cmpeq	r1, r3
 8001ff2:	d204      	bcs.n	8001ffe <mavlink_signature_check+0x25a>
		signing->timestamp = tstamp.t64;
 8001ff4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	return true;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	37a8      	adds	r7, #168	; 0xa8
 8002004:	46bd      	mov	sp, r7
 8002006:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800200a:	bf00      	nop
 800200c:	005b8d80 	.word	0x005b8d80

08002010 <_mav_parse_error>:
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	789b      	ldrb	r3, [r3, #2]
 800201c:	3301      	adds	r3, #1
 800201e:	b2da      	uxtb	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	709a      	strb	r2, [r3, #2]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 800203c:	f107 030e 	add.w	r3, r7, #14
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fbaa 	bl	800179a <crc_init>
	msg->checksum = crcTmp;
 8002046:	89fa      	ldrh	r2, [r7, #14]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	801a      	strh	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8002068:	f107 020e 	add.w	r2, r7, #14
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fb60 	bl	8001736 <crc_accumulate>
	msg->checksum = checksum;
 8002076:	89fa      	ldrh	r2, [r7, #14]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	801a      	strh	r2, [r3, #0]
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	2304      	movs	r3, #4
 8002092:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8002094:	e025      	b.n	80020e2 <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	3301      	adds	r3, #1
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80020a2:	491f      	ldr	r1, [pc, #124]	; (8002120 <mavlink_get_msg_entry+0x9c>)
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d203      	bcs.n	80020c0 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
                continue;
 80020be:	e010      	b.n	80020e2 <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80020c0:	4917      	ldr	r1, [pc, #92]	; (8002120 <mavlink_get_msg_entry+0x9c>)
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d902      	bls.n	80020dc <mavlink_get_msg_entry+0x58>
                low = mid;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	617b      	str	r3, [r7, #20]
                continue;
 80020da:	e002      	b.n	80020e2 <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	617b      	str	r3, [r7, #20]
            break;
 80020e0:	e003      	b.n	80020ea <mavlink_get_msg_entry+0x66>
        while (low < high) {
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d3d5      	bcc.n	8002096 <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 80020ea:	490d      	ldr	r1, [pc, #52]	; (8002120 <mavlink_get_msg_entry+0x9c>)
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8002100:	2300      	movs	r3, #0
 8002102:	e006      	b.n	8002112 <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <mavlink_get_msg_entry+0x9c>)
 8002110:	4413      	add	r3, r2
}
 8002112:	4618      	mov	r0, r3
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	08007a08 	.word	0x08007a08

08002124 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f200 826e 	bhi.w	8002624 <mavlink_frame_char_buffer+0x500>
 8002148:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <mavlink_frame_char_buffer+0x2c>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002191 	.word	0x08002191
 8002154:	08002191 	.word	0x08002191
 8002158:	080021ef 	.word	0x080021ef
 800215c:	08002255 	.word	0x08002255
 8002160:	0800228d 	.word	0x0800228d
 8002164:	080022a5 	.word	0x080022a5
 8002168:	080022bd 	.word	0x080022bd
 800216c:	080022d5 	.word	0x080022d5
 8002170:	080022ed 	.word	0x080022ed
 8002174:	08002347 	.word	0x08002347
 8002178:	08002393 	.word	0x08002393
 800217c:	080023ef 	.word	0x080023ef
 8002180:	08002427 	.word	0x08002427
 8002184:	080024b3 	.word	0x080024b3
 8002188:	080024b3 	.word	0x080024b3
 800218c:	0800256f 	.word	0x0800256f
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2bfd      	cmp	r3, #253	; 0xfd
 8002194:	d113      	bne.n	80021be <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2202      	movs	r2, #2
 800219a:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	79fa      	ldrb	r2, [r7, #7]
 80021a6:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	7b1b      	ldrb	r3, [r3, #12]
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f7ff ff3a 	bl	8002030 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 80021bc:	e229      	b.n	8002612 <mavlink_frame_char_buffer+0x4ee>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2bfe      	cmp	r3, #254	; 0xfe
 80021c2:	f040 8226 	bne.w	8002612 <mavlink_frame_char_buffer+0x4ee>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2202      	movs	r2, #2
 80021ca:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	79fa      	ldrb	r2, [r7, #7]
 80021d6:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	7b1b      	ldrb	r3, [r3, #12]
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff ff22 	bl	8002030 <mavlink_start_checksum>
		break;
 80021ec:	e211      	b.n	8002612 <mavlink_frame_char_buffer+0x4ee>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00f      	beq.n	8002216 <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	785b      	ldrb	r3, [r3, #1]
 80021fa:	3301      	adds	r3, #1
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8002202:	68b8      	ldr	r0, [r7, #8]
 8002204:	f7ff ff04 	bl	8002010 <_mav_parse_error>
			status->msg_received = 0;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2201      	movs	r2, #1
 8002212:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8002214:	e206      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
			rxmsg->len = c;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	79fa      	ldrb	r2, [r7, #7]
 800221a:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	4619      	mov	r1, r3
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7ff ff14 	bl	8002054 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	7b1b      	ldrb	r3, [r3, #12]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2205      	movs	r2, #5
 8002248:	70da      	strb	r2, [r3, #3]
		break;
 800224a:	e1eb      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2203      	movs	r2, #3
 8002250:	70da      	strb	r2, [r3, #3]
		break;
 8002252:	e1e7      	b.n	8002624 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	79fa      	ldrb	r2, [r7, #7]
 8002258:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	791b      	ldrb	r3, [r3, #4]
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8002266:	68b8      	ldr	r0, [r7, #8]
 8002268:	f7ff fed2 	bl	8002010 <_mav_parse_error>
			status->msg_received = 0;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2201      	movs	r2, #1
 8002276:	70da      	strb	r2, [r3, #3]
			break;
 8002278:	e1d4      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
		}
		mavlink_update_checksum(rxmsg, c);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	4619      	mov	r1, r3
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7ff fee8 	bl	8002054 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2204      	movs	r2, #4
 8002288:	70da      	strb	r2, [r3, #3]
		break;
 800228a:	e1cb      	b.n	8002624 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	79fa      	ldrb	r2, [r7, #7]
 8002290:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4619      	mov	r1, r3
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f7ff fedc 	bl	8002054 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2205      	movs	r2, #5
 80022a0:	70da      	strb	r2, [r3, #3]
		break;
 80022a2:	e1bf      	b.n	8002624 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	79fa      	ldrb	r2, [r7, #7]
 80022a8:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	4619      	mov	r1, r3
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff fed0 	bl	8002054 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2206      	movs	r2, #6
 80022b8:	70da      	strb	r2, [r3, #3]
		break;
 80022ba:	e1b3      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	79fa      	ldrb	r2, [r7, #7]
 80022c0:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4619      	mov	r1, r3
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff fec4 	bl	8002054 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2207      	movs	r2, #7
 80022d0:	70da      	strb	r2, [r3, #3]
		break;
 80022d2:	e1a7      	b.n	8002624 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	79fa      	ldrb	r2, [r7, #7]
 80022d8:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4619      	mov	r1, r3
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff feb8 	bl	8002054 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2208      	movs	r2, #8
 80022e8:	70da      	strb	r2, [r3, #3]
		break;
 80022ea:	e19b      	b.n	8002624 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	b2d9      	uxtb	r1, r3
 80022f6:	2000      	movs	r0, #0
 80022f8:	4301      	orrs	r1, r0
 80022fa:	7251      	strb	r1, [r2, #9]
 80022fc:	0a19      	lsrs	r1, r3, #8
 80022fe:	b2c9      	uxtb	r1, r1
 8002300:	2000      	movs	r0, #0
 8002302:	4301      	orrs	r1, r0
 8002304:	7291      	strb	r1, [r2, #10]
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2100      	movs	r1, #0
 800230c:	430b      	orrs	r3, r1
 800230e:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	4619      	mov	r1, r3
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff fe9d 	bl	8002054 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	7b1b      	ldrb	r3, [r3, #12]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	220b      	movs	r2, #11
 8002332:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8002334:	e176      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	220c      	movs	r2, #12
 800233a:	70da      	strb	r2, [r3, #3]
		break;
 800233c:	e172      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2209      	movs	r2, #9
 8002342:	70da      	strb	r2, [r3, #3]
		break;
 8002344:	e16e      	b.n	8002624 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	7a5a      	ldrb	r2, [r3, #9]
 800234a:	7a99      	ldrb	r1, [r3, #10]
 800234c:	0209      	lsls	r1, r1, #8
 800234e:	430a      	orrs	r2, r1
 8002350:	7adb      	ldrb	r3, [r3, #11]
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	4313      	orrs	r3, r2
 8002356:	461a      	mov	r2, r3
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	4313      	orrs	r3, r2
 800235e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	b2d1      	uxtb	r1, r2
 8002366:	2000      	movs	r0, #0
 8002368:	4301      	orrs	r1, r0
 800236a:	7259      	strb	r1, [r3, #9]
 800236c:	0a11      	lsrs	r1, r2, #8
 800236e:	b2c9      	uxtb	r1, r1
 8002370:	2000      	movs	r0, #0
 8002372:	4301      	orrs	r1, r0
 8002374:	7299      	strb	r1, [r3, #10]
 8002376:	0c12      	lsrs	r2, r2, #16
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	2100      	movs	r1, #0
 800237c:	430a      	orrs	r2, r1
 800237e:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	4619      	mov	r1, r3
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff fe65 	bl	8002054 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	220a      	movs	r2, #10
 800238e:	70da      	strb	r2, [r3, #3]
		break;
 8002390:	e148      	b.n	8002624 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	7a5a      	ldrb	r2, [r3, #9]
 8002396:	7a99      	ldrb	r1, [r3, #10]
 8002398:	0209      	lsls	r1, r1, #8
 800239a:	430a      	orrs	r2, r1
 800239c:	7adb      	ldrb	r3, [r3, #11]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	4313      	orrs	r3, r2
 80023a2:	461a      	mov	r2, r3
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	b2d1      	uxtb	r1, r2
 80023b2:	2000      	movs	r0, #0
 80023b4:	4301      	orrs	r1, r0
 80023b6:	7259      	strb	r1, [r3, #9]
 80023b8:	0a11      	lsrs	r1, r2, #8
 80023ba:	b2c9      	uxtb	r1, r1
 80023bc:	2000      	movs	r0, #0
 80023be:	4301      	orrs	r1, r0
 80023c0:	7299      	strb	r1, [r3, #10]
 80023c2:	0c12      	lsrs	r2, r2, #16
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	2100      	movs	r1, #0
 80023c8:	430a      	orrs	r2, r1
 80023ca:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	4619      	mov	r1, r3
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff fe3f 	bl	8002054 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	78db      	ldrb	r3, [r3, #3]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	220b      	movs	r2, #11
 80023e2:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 80023e4:	e11e      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	220c      	movs	r2, #12
 80023ea:	70da      	strb	r2, [r3, #3]
		break;
 80023ec:	e11a      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f103 020c 	add.w	r2, r3, #12
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	791b      	ldrb	r3, [r3, #4]
 80023f8:	1c59      	adds	r1, r3, #1
 80023fa:	b2c8      	uxtb	r0, r1
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	7108      	strb	r0, [r1, #4]
 8002400:	4413      	add	r3, r2
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	4619      	mov	r1, r3
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7ff fe22 	bl	8002054 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	791a      	ldrb	r2, [r3, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	78db      	ldrb	r3, [r3, #3]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 80fc 	bne.w	8002616 <mavlink_frame_char_buffer+0x4f2>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	220c      	movs	r2, #12
 8002422:	70da      	strb	r2, [r3, #3]
		}
		break;
 8002424:	e0f7      	b.n	8002616 <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	7a5a      	ldrb	r2, [r3, #9]
 800242a:	7a99      	ldrb	r1, [r3, #10]
 800242c:	0209      	lsls	r1, r1, #8
 800242e:	430a      	orrs	r2, r1
 8002430:	7adb      	ldrb	r3, [r3, #11]
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	4313      	orrs	r3, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fe24 	bl	8002084 <mavlink_get_msg_entry>
 800243c:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <mavlink_frame_char_buffer+0x326>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	791b      	ldrb	r3, [r3, #4]
 8002448:	e000      	b.n	800244c <mavlink_frame_char_buffer+0x328>
 800244a:	2300      	movs	r3, #0
 800244c:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	4619      	mov	r1, r3
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7ff fdfe 	bl	8002054 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	429a      	cmp	r2, r3
 8002464:	d003      	beq.n	800246e <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	220e      	movs	r2, #14
 800246a:	70da      	strb	r2, [r3, #3]
 800246c:	e002      	b.n	8002474 <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	220d      	movs	r2, #13
 8002472:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	79fa      	ldrb	r2, [r7, #7]
 8002478:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80cb 	beq.w	800261a <mavlink_frame_char_buffer+0x4f6>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	791a      	ldrb	r2, [r3, #4]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	799b      	ldrb	r3, [r3, #6]
 800248c:	429a      	cmp	r2, r3
 800248e:	f080 80c4 	bcs.w	800261a <mavlink_frame_char_buffer+0x4f6>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	330c      	adds	r3, #12
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	7912      	ldrb	r2, [r2, #4]
 800249a:	1898      	adds	r0, r3, r2
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	799b      	ldrb	r3, [r3, #6]
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	791b      	ldrb	r3, [r3, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	2100      	movs	r1, #0
 80024ac:	f005 f998 	bl	80077e0 <memset>
		}
		break;
 80024b0:	e0b3      	b.n	800261a <mavlink_frame_char_buffer+0x4f6>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	78db      	ldrb	r3, [r3, #3]
 80024b6:	2b0e      	cmp	r3, #14
 80024b8:	d008      	beq.n	80024cc <mavlink_frame_char_buffer+0x3a8>
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d003      	beq.n	80024d4 <mavlink_frame_char_buffer+0x3b0>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2202      	movs	r2, #2
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e002      	b.n	80024da <mavlink_frame_char_buffer+0x3b6>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	79fa      	ldrb	r2, [r7, #7]
 80024de:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00e      	beq.n	800250c <mavlink_frame_char_buffer+0x3e8>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	220f      	movs	r2, #15
 80024f2:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	220d      	movs	r2, #13
 80024f8:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	f000 808d 	beq.w	800261e <mavlink_frame_char_buffer+0x4fa>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 800250a:	e088      	b.n	800261e <mavlink_frame_char_buffer+0x4fa>
			if (status->signing &&
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01f      	beq.n	8002554 <mavlink_frame_char_buffer+0x430>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	d013      	beq.n	8002546 <mavlink_frame_char_buffer+0x422>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	7a59      	ldrb	r1, [r3, #9]
 8002528:	7a98      	ldrb	r0, [r3, #10]
 800252a:	0200      	lsls	r0, r0, #8
 800252c:	4301      	orrs	r1, r0
 800252e:	7adb      	ldrb	r3, [r3, #11]
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	430b      	orrs	r3, r1
 8002534:	4619      	mov	r1, r3
 8002536:	68b8      	ldr	r0, [r7, #8]
 8002538:	4790      	blx	r2
 800253a:	4603      	mov	r3, r0
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <mavlink_frame_char_buffer+0x430>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d002      	beq.n	8002554 <mavlink_frame_char_buffer+0x430>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2203      	movs	r2, #3
 8002552:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2201      	movs	r2, #1
 8002558:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05e      	beq.n	800261e <mavlink_frame_char_buffer+0x4fa>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002560:	f240 1223 	movw	r2, #291	; 0x123
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	f005 f92f 	bl	80077ca <memcpy>
		break;
 800256c:	e057      	b.n	800261e <mavlink_frame_char_buffer+0x4fa>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	7b5b      	ldrb	r3, [r3, #13]
 8002572:	f1c3 030d 	rsb	r3, r3, #13
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	7b5b      	ldrb	r3, [r3, #13]
 8002584:	3b01      	subs	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	7b5b      	ldrb	r3, [r3, #13]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d146      	bne.n	8002622 <mavlink_frame_char_buffer+0x4fe>
			// we have the whole signature, check it is OK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6918      	ldr	r0, [r3, #16]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4619      	mov	r1, r3
 80025a0:	f7ff fc00 	bl	8001da4 <mavlink_signature_check>
 80025a4:	4603      	mov	r3, r0
 80025a6:	77fb      	strb	r3, [r7, #31]
			if (!sig_ok &&
 80025a8:	7ffb      	ldrb	r3, [r7, #31]
 80025aa:	f083 0301 	eor.w	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d017      	beq.n	80025e4 <mavlink_frame_char_buffer+0x4c0>
			   	(status->signing->accept_unsigned_callback &&
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d012      	beq.n	80025e4 <mavlink_frame_char_buffer+0x4c0>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	7a59      	ldrb	r1, [r3, #9]
 80025c8:	7a98      	ldrb	r0, [r3, #10]
 80025ca:	0200      	lsls	r0, r0, #8
 80025cc:	4301      	orrs	r1, r0
 80025ce:	7adb      	ldrb	r3, [r3, #11]
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	430b      	orrs	r3, r1
 80025d4:	4619      	mov	r1, r3
 80025d6:	68b8      	ldr	r0, [r7, #8]
 80025d8:	4790      	blx	r2
 80025da:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <mavlink_frame_char_buffer+0x4c0>
				// accepted via application level override
				sig_ok = true;
 80025e0:	2301      	movs	r3, #1
 80025e2:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 80025e4:	7ffb      	ldrb	r3, [r7, #31]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <mavlink_frame_char_buffer+0x4ce>
				status->msg_received = MAVLINK_FRAMING_OK;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e002      	b.n	80025f8 <mavlink_frame_char_buffer+0x4d4>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2203      	movs	r2, #3
 80025f6:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2201      	movs	r2, #1
 80025fc:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00e      	beq.n	8002622 <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002604:	f240 1223 	movw	r2, #291	; 0x123
 8002608:	68f9      	ldr	r1, [r7, #12]
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	f005 f8dd 	bl	80077ca <memcpy>
			}
		}
		break;
 8002610:	e007      	b.n	8002622 <mavlink_frame_char_buffer+0x4fe>
		break;
 8002612:	bf00      	nop
 8002614:	e006      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
		break;
 8002616:	bf00      	nop
 8002618:	e004      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
		break;
 800261a:	bf00      	nop
 800261c:	e002      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
		break;
 800261e:	bf00      	nop
 8002620:	e000      	b.n	8002624 <mavlink_frame_char_buffer+0x500>
		break;
 8002622:	bf00      	nop
	}

	bufferIndex++;
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	3301      	adds	r3, #1
 8002628:	61bb      	str	r3, [r7, #24]
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d110      	bne.n	8002654 <mavlink_frame_char_buffer+0x530>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	799a      	ldrb	r2, [r3, #6]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	891b      	ldrh	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <mavlink_frame_char_buffer+0x524>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	891b      	ldrh	r3, [r3, #8]
 800264c:	3301      	adds	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <mavlink_frame_char_buffer+0x53e>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	78da      	ldrb	r2, [r3, #3]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01a      	beq.n	800269e <mavlink_frame_char_buffer+0x57a>
           r_mavlink_status->parse_state = status->parse_state;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	78da      	ldrb	r2, [r3, #3]
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	791a      	ldrb	r2, [r3, #4]
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	795b      	ldrb	r3, [r3, #5]
 800267c:	3301      	adds	r3, #1
 800267e:	b2da      	uxtb	r2, r3
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	891a      	ldrh	r2, [r3, #8]
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	789b      	ldrb	r3, [r3, #2]
 8002690:	b29a      	uxth	r2, r3
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	7b1a      	ldrb	r2, [r3, #12]
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d110      	bne.n	80026ce <mavlink_frame_char_buffer+0x5aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <mavlink_frame_char_buffer+0x5aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop

080026dc <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b087      	sub	sp, #28
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	60ba      	str	r2, [r7, #8]
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	460b      	mov	r3, r1
 80026ec:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fb43 	bl	8001d7c <mavlink_get_channel_buffer>
 80026f6:	4604      	mov	r4, r0
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fb2a 	bl	8001d54 <mavlink_get_channel_status>
 8002700:	4601      	mov	r1, r0
 8002702:	7bba      	ldrb	r2, [r7, #14]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4620      	mov	r0, r4
 800270c:	f7ff fd0a 	bl	8002124 <mavlink_frame_char_buffer>
 8002710:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}

0800271a <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b088      	sub	sp, #32
 800271e:	af00      	add	r7, sp, #0
 8002720:	60ba      	str	r2, [r7, #8]
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	4603      	mov	r3, r0
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	460b      	mov	r3, r1
 800272a:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 800272c:	7bb9      	ldrb	r1, [r7, #14]
 800272e:	7bf8      	ldrb	r0, [r7, #15]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f7ff ffd2 	bl	80026dc <mavlink_frame_char>
 8002738:	4603      	mov	r3, r0
 800273a:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 800273c:	7ffb      	ldrb	r3, [r7, #31]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d002      	beq.n	8002748 <mavlink_parse_char+0x2e>
 8002742:	7ffb      	ldrb	r3, [r7, #31]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d120      	bne.n	800278a <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fb16 	bl	8001d7c <mavlink_get_channel_buffer>
 8002750:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fafd 	bl	8001d54 <mavlink_get_channel_status>
 800275a:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 800275c:	6978      	ldr	r0, [r7, #20]
 800275e:	f7ff fc57 	bl	8002010 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2201      	movs	r2, #1
 800276c:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 800276e:	7bbb      	ldrb	r3, [r7, #14]
 8002770:	2bfd      	cmp	r3, #253	; 0xfd
 8002772:	d108      	bne.n	8002786 <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2202      	movs	r2, #2
 8002778:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2200      	movs	r2, #0
 800277e:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8002780:	69b8      	ldr	r0, [r7, #24]
 8002782:	f7ff fc55 	bl	8002030 <mavlink_start_checksum>
	    }
	    return 0;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <mavlink_parse_char+0x72>
    }
    return msg_received;
 800278a:	7ffb      	ldrb	r3, [r7, #31]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <main_get_huart_tx_state>:
static void MX_USART2_UART_Init(void);
static void MX_TIM7_Init(void);
static void MX_TIM1_Init(void);
static void MX_DMA_Init(void);
/* USER CODE BEGIN PFP */
int main_get_huart_tx_state(void){
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return HAL_DMA_GetState(&hdma_usart2_tx);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <main_get_huart_tx_state+0x10>)
 800279a:	f001 f8b1 	bl	8003900 <HAL_DMA_GetState>
 800279e:	4603      	mov	r3, r0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	200007a4 	.word	0x200007a4

080027a8 <main_transmit_buffer>:
void main_transmit_buffer(uint8_t *outBuffer, uint16_t msg_size){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart2, outBuffer,msg_size);
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	461a      	mov	r2, r3
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <main_transmit_buffer+0x20>)
 80027bc:	f004 f804 	bl	80067c8 <HAL_UART_Transmit_DMA>
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000082c 	.word	0x2000082c

080027cc <main_stop_motors>:
void main_stop_motors(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80027d0:	2100      	movs	r1, #0
 80027d2:	4804      	ldr	r0, [pc, #16]	; (80027e4 <main_stop_motors+0x18>)
 80027d4:	f002 fe58 	bl	8005488 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80027d8:	2104      	movs	r1, #4
 80027da:	4802      	ldr	r0, [pc, #8]	; (80027e4 <main_stop_motors+0x18>)
 80027dc:	f002 fe54 	bl	8005488 <HAL_TIM_PWM_Stop>
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200007ec 	.word	0x200007ec

080027e8 <main_set_motors_speed>:
void main_set_motors_speed(mavlink_motor_setpoint_t motor )
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	463c      	mov	r4, r7
 80027f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htim1.Instance->CCR1 = motor.motor_x;
 80027f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <main_set_motors_speed+0x78>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002800:	ee17 2a90 	vmov	r2, s15
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = motor.motor_y;
 8002806:	edd7 7a02 	vldr	s15, [r7, #8]
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <main_set_motors_speed+0x78>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002812:	ee17 2a90 	vmov	r2, s15
 8002816:	639a      	str	r2, [r3, #56]	; 0x38

	if (motor.motor_x == 0)
 8002818:	edd7 7a01 	vldr	s15, [r7, #4]
 800281c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002824:	d104      	bne.n	8002830 <main_set_motors_speed+0x48>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002826:	2100      	movs	r1, #0
 8002828:	480d      	ldr	r0, [pc, #52]	; (8002860 <main_set_motors_speed+0x78>)
 800282a:	f002 fe2d 	bl	8005488 <HAL_TIM_PWM_Stop>
 800282e:	e003      	b.n	8002838 <main_set_motors_speed+0x50>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002830:	2100      	movs	r1, #0
 8002832:	480b      	ldr	r0, [pc, #44]	; (8002860 <main_set_motors_speed+0x78>)
 8002834:	f002 fdd0 	bl	80053d8 <HAL_TIM_PWM_Start>

	if (motor.motor_y == 0)
 8002838:	edd7 7a02 	vldr	s15, [r7, #8]
 800283c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	d104      	bne.n	8002850 <main_set_motors_speed+0x68>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002846:	2104      	movs	r1, #4
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <main_set_motors_speed+0x78>)
 800284a:	f002 fe1d 	bl	8005488 <HAL_TIM_PWM_Stop>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

}
 800284e:	e003      	b.n	8002858 <main_set_motors_speed+0x70>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002850:	2104      	movs	r1, #4
 8002852:	4803      	ldr	r0, [pc, #12]	; (8002860 <main_set_motors_speed+0x78>)
 8002854:	f002 fdc0 	bl	80053d8 <HAL_TIM_PWM_Start>
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}
 8002860:	200007ec 	.word	0x200007ec

08002864 <HAL_UART_RxCpltCallback>:
void TM7_IRQHandler(void){
	HAL_TIM_IRQHandler(&htim7);
}

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800286a:	af46      	add	r7, sp, #280	; 0x118
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	6018      	str	r0, [r3, #0]
	mavlink_message_t inmsg;
	mavlink_status_t msgStatus;
	if (huart->Instance == USART2){
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <HAL_UART_RxCpltCallback+0x60>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d11e      	bne.n	80028ba <HAL_UART_RxCpltCallback+0x56>
		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(&huart2, &inByte, 1);
 800287c:	2201      	movs	r2, #1
 800287e:	4912      	ldr	r1, [pc, #72]	; (80028c8 <HAL_UART_RxCpltCallback+0x64>)
 8002880:	4812      	ldr	r0, [pc, #72]	; (80028cc <HAL_UART_RxCpltCallback+0x68>)
 8002882:	f003 feff 	bl	8006684 <HAL_UART_Receive_IT>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_UART_RxCpltCallback+0x64>)
 8002888:	7819      	ldrb	r1, [r3, #0]
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002892:	2000      	movs	r0, #0
 8002894:	f7ff ff41 	bl	800271a <mavlink_parse_char>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <HAL_UART_RxCpltCallback+0x56>

			mouseDriver_readMsg(inmsg);
 800289e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80028a2:	4668      	mov	r0, sp
 80028a4:	f104 0310 	add.w	r3, r4, #16
 80028a8:	f240 1213 	movw	r2, #275	; 0x113
 80028ac:	4619      	mov	r1, r3
 80028ae:	f004 ff8c 	bl	80077ca <memcpy>
 80028b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028b6:	f7fe fec1 	bl	800163c <mouseDriver_readMsg>
		}
	}
}
 80028ba:	bf00      	nop
 80028bc:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	40004400 	.word	0x40004400
 80028c8:	200002b4 	.word	0x200002b4
 80028cc:	2000082c 	.word	0x2000082c

080028d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM7){
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <HAL_TIM_PeriodElapsedCallback+0x2e>
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80028e2:	2120      	movs	r1, #32
 80028e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e8:	f001 fa08 	bl	8003cfc <HAL_GPIO_TogglePin>
    	mouseDriver_setTime(mouseDriver_getTime()+DT_HEART);
 80028ec:	f7fe fe9a 	bl	8001624 <mouseDriver_getTime>
 80028f0:	4603      	mov	r3, r0
 80028f2:	3308      	adds	r3, #8
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fe85 	bl	8001604 <mouseDriver_setTime>
    	mouseDriver_controlISR();
 80028fa:	f7fe ff15 	bl	8001728 <mouseDriver_controlISR>
    }
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40001400 	.word	0x40001400

0800290c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8002910:	f000 fc42 	bl	8003198 <HAL_Init>

  /* USER CODE BEGIN Init */
	mouseDriver_init();
 8002914:	f7fe fe6a 	bl	80015ec <mouseDriver_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002918:	f000 f82e 	bl	8002978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800291c:	f000 fa12 	bl	8002d44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002920:	f000 f992 	bl	8002c48 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8002924:	f000 f958 	bl	8002bd8 <MX_TIM7_Init>
  MX_TIM1_Init();
 8002928:	f000 f89c 	bl	8002a64 <MX_TIM1_Init>
  MX_DMA_Init();
 800292c:	f000 f9ec 	bl	8002d08 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 8002930:	2200      	movs	r2, #0
 8002932:	2100      	movs	r1, #0
 8002934:	2026      	movs	r0, #38	; 0x26
 8002936:	f000 fda4 	bl	8003482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800293a:	2026      	movs	r0, #38	; 0x26
 800293c:	f000 fdbd 	bl	80034ba <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM7_IRQn,2,2);
 8002940:	2202      	movs	r2, #2
 8002942:	2102      	movs	r1, #2
 8002944:	2037      	movs	r0, #55	; 0x37
 8002946:	f000 fd9c 	bl	8003482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800294a:	2037      	movs	r0, #55	; 0x37
 800294c:	f000 fdb5 	bl	80034ba <HAL_NVIC_EnableIRQ>

  HAL_UART_Receive_IT(&huart2, &inByte, 1);
 8002950:	2201      	movs	r2, #1
 8002952:	4906      	ldr	r1, [pc, #24]	; (800296c <main+0x60>)
 8002954:	4806      	ldr	r0, [pc, #24]	; (8002970 <main+0x64>)
 8002956:	f003 fe95 	bl	8006684 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800295a:	4806      	ldr	r0, [pc, #24]	; (8002974 <main+0x68>)
 800295c:	f002 fcdc 	bl	8005318 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 mouseDriver_idle();
 8002960:	f7fe fea2 	bl	80016a8 <mouseDriver_idle>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8002964:	2064      	movs	r0, #100	; 0x64
 8002966:	f000 fc8f 	bl	8003288 <HAL_Delay>
	 mouseDriver_idle();
 800296a:	e7f9      	b.n	8002960 <main+0x54>
 800296c:	200002b4 	.word	0x200002b4
 8002970:	2000082c 	.word	0x2000082c
 8002974:	200008ac 	.word	0x200008ac

08002978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b0b8      	sub	sp, #224	; 0xe0
 800297c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002982:	2244      	movs	r2, #68	; 0x44
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f004 ff2a 	bl	80077e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800299c:	463b      	mov	r3, r7
 800299e:	2288      	movs	r2, #136	; 0x88
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 ff1c 	bl	80077e0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029b6:	2310      	movs	r3, #16
 80029b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029bc:	2302      	movs	r3, #2
 80029be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80029ce:	230a      	movs	r3, #10
 80029d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029d4:	2307      	movs	r3, #7
 80029d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029e0:	2302      	movs	r3, #2
 80029e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 fa04 	bl	8003df8 <HAL_RCC_OscConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80029f6:	f000 fa0d 	bl	8002e14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029fa:	230f      	movs	r3, #15
 80029fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 fd9a 	bl	8004558 <HAL_RCC_ClockConfig>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002a2a:	f000 f9f3 	bl	8002e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a32:	2300      	movs	r3, #0
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a36:	463b      	mov	r3, r7
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 ff91 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002a44:	f000 f9e6 	bl	8002e14 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a4c:	f001 f97e 	bl	8003d4c <HAL_PWREx_ControlVoltageScaling>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002a56:	f000 f9dd 	bl	8002e14 <Error_Handler>
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	37e0      	adds	r7, #224	; 0xe0
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b09a      	sub	sp, #104	; 0x68
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
 8002a94:	615a      	str	r2, [r3, #20]
 8002a96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	222c      	movs	r2, #44	; 0x2c
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 fe9e 	bl	80077e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002aa6:	4a4b      	ldr	r2, [pc, #300]	; (8002bd4 <MX_TIM1_Init+0x170>)
 8002aa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PRESCALER_PWM;
 8002aaa:	4b49      	ldr	r3, [pc, #292]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002aac:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002ab0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = COUNTER_PERIOD_PWM;
 8002ab8:	4b45      	ldr	r3, [pc, #276]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002aba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002abe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ac6:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002acc:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ad2:	483f      	ldr	r0, [pc, #252]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002ad4:	f002 fbf4 	bl	80052c0 <HAL_TIM_Base_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002ade:	f000 f999 	bl	8002e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ae8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002aec:	4619      	mov	r1, r3
 8002aee:	4838      	ldr	r0, [pc, #224]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002af0:	f002 ff70 	bl	80059d4 <HAL_TIM_ConfigClockSource>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002afa:	f000 f98b 	bl	8002e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002afe:	4834      	ldr	r0, [pc, #208]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002b00:	f002 fc34 	bl	800536c <HAL_TIM_PWM_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002b0a:	f000 f983 	bl	8002e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	482b      	ldr	r0, [pc, #172]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002b22:	f003 fc69 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002b2c:	f000 f972 	bl	8002e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b30:	2360      	movs	r3, #96	; 0x60
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = PULSE_PWM;
 8002b34:	2364      	movs	r3, #100	; 0x64
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b50:	2200      	movs	r2, #0
 8002b52:	4619      	mov	r1, r3
 8002b54:	481e      	ldr	r0, [pc, #120]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002b56:	f002 fe25 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002b60:	f000 f958 	bl	8002e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b68:	2204      	movs	r2, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4818      	ldr	r0, [pc, #96]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002b6e:	f002 fe19 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002b78:	f000 f94c 	bl	8002e14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4807      	ldr	r0, [pc, #28]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002bb2:	f003 fc7d 	bl	80064b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8002bbc:	f000 f92a 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002bc0:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <MX_TIM1_Init+0x16c>)
 8002bc2:	f000 f98d 	bl	8002ee0 <HAL_TIM_MspPostInit>

}
 8002bc6:	bf00      	nop
 8002bc8:	3768      	adds	r7, #104	; 0x68
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200007ec 	.word	0x200007ec
 8002bd4:	40012c00 	.word	0x40012c00

08002bd8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <MX_TIM7_Init+0x68>)
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <MX_TIM7_Init+0x6c>)
 8002bec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PRESCALER_HEART;
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <MX_TIM7_Init+0x68>)
 8002bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bf4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <MX_TIM7_Init+0x68>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = COUNTER_PERIOD_HEART;
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <MX_TIM7_Init+0x68>)
 8002bfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002c02:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MX_TIM7_Init+0x68>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c0a:	480d      	ldr	r0, [pc, #52]	; (8002c40 <MX_TIM7_Init+0x68>)
 8002c0c:	f002 fb58 	bl	80052c0 <HAL_TIM_Base_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002c16:	f000 f8fd 	bl	8002e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4806      	ldr	r0, [pc, #24]	; (8002c40 <MX_TIM7_Init+0x68>)
 8002c28:	f003 fbe6 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002c32:	f000 f8ef 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200008ac 	.word	0x200008ac
 8002c44:	40001400 	.word	0x40001400

08002c48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <MX_USART2_UART_Init+0xb0>)
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	4a29      	ldr	r2, [pc, #164]	; (8002cf8 <MX_USART2_UART_Init+0xb0>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6493      	str	r3, [r2, #72]	; 0x48
 8002c5a:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <MX_USART2_UART_Init+0xb0>)
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]

  /* Peripheral DMA init*/
  hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c66:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c68:	2210      	movs	r2, #16
 8002c6a:	609a      	str	r2, [r3, #8]
  hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6c:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c74:	2280      	movs	r2, #128	; 0x80
 8002c76:	611a      	str	r2, [r3, #16]
  hdma_usart2_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c78:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
  hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c7e:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
  HAL_DMA_Init(&hdma_usart2_tx);
 8002c90:	481a      	ldr	r0, [pc, #104]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c92:	f000 fc2d 	bl	80034f0 <HAL_DMA_Init>

  __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 8002c96:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c9a:	669a      	str	r2, [r3, #104]	; 0x68
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <MX_USART2_UART_Init+0xb4>)
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002ca0:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002ca4:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <MX_USART2_UART_Init+0xbc>)
 8002ca6:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002caa:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002cae:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002cc4:	220c      	movs	r2, #12
 8002cc6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce0:	4807      	ldr	r0, [pc, #28]	; (8002d00 <MX_USART2_UART_Init+0xb8>)
 8002ce2:	f003 fc81 	bl	80065e8 <HAL_UART_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_USART2_UART_Init+0xa8>
  {
    Error_Handler();
 8002cec:	f000 f892 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	200007a4 	.word	0x200007a4
 8002d00:	2000082c 	.word	0x2000082c
 8002d04:	40004400 	.word	0x40004400

08002d08 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <MX_DMA_Init+0x38>)
 8002d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d12:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <MX_DMA_Init+0x38>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6493      	str	r3, [r2, #72]	; 0x48
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <MX_DMA_Init+0x38>)
 8002d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2011      	movs	r0, #17
 8002d2c:	f000 fba9 	bl	8003482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002d30:	2011      	movs	r0, #17
 8002d32:	f000 fbc2 	bl	80034ba <HAL_NVIC_EnableIRQ>

}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000

08002d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5a:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d66:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <MX_GPIO_Init+0xc4>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2120      	movs	r1, #32
 8002dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc2:	f000 ff83 	bl	8003ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <MX_GPIO_Init+0xc8>)
 8002dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4619      	mov	r1, r3
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <MX_GPIO_Init+0xcc>)
 8002ddc:	f000 fdce 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002de0:	2320      	movs	r3, #32
 8002de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4619      	mov	r1, r3
 8002df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dfa:	f000 fdbf 	bl	800397c <HAL_GPIO_Init>

}
 8002dfe:	bf00      	nop
 8002e00:	3728      	adds	r7, #40	; 0x28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	10210000 	.word	0x10210000
 8002e10:	48000800 	.word	0x48000800

08002e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_MspInit+0x44>)
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <HAL_MspInit+0x44>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6613      	str	r3, [r2, #96]	; 0x60
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_MspInit+0x44>)
 8002e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_MspInit+0x44>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <HAL_MspInit+0x44>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_MspInit+0x44>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <HAL_TIM_Base_MspInit+0x68>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d10c      	bne.n	8002e98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <HAL_TIM_Base_MspInit+0x6c>)
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <HAL_TIM_Base_MspInit+0x6c>)
 8002e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e88:	6613      	str	r3, [r2, #96]	; 0x60
 8002e8a:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <HAL_TIM_Base_MspInit+0x6c>)
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e96:	e018      	b.n	8002eca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <HAL_TIM_Base_MspInit+0x70>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d113      	bne.n	8002eca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <HAL_TIM_Base_MspInit+0x6c>)
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <HAL_TIM_Base_MspInit+0x6c>)
 8002ea8:	f043 0320 	orr.w	r3, r3, #32
 8002eac:	6593      	str	r3, [r2, #88]	; 0x58
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_TIM_Base_MspInit+0x6c>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2037      	movs	r0, #55	; 0x37
 8002ec0:	f000 fadf 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ec4:	2037      	movs	r0, #55	; 0x37
 8002ec6:	f000 faf8 	bl	80034ba <HAL_NVIC_EnableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40001400 	.word	0x40001400

08002ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 030c 	add.w	r3, r7, #12
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <HAL_TIM_MspPostInit+0x68>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d11d      	bne.n	8002f3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_TIM_MspPostInit+0x6c>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_TIM_MspPostInit+0x6c>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_TIM_MspPostInit+0x6c>)
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	2302      	movs	r3, #2
 8002f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	4619      	mov	r1, r3
 8002f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f3a:	f000 fd1f 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f3e:	bf00      	nop
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a30      	ldr	r2, [pc, #192]	; (8003030 <HAL_UART_MspInit+0xe0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d159      	bne.n	8003026 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f72:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_UART_MspInit+0xe4>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	4a2f      	ldr	r2, [pc, #188]	; (8003034 <HAL_UART_MspInit+0xe4>)
 8002f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_UART_MspInit+0xe4>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <HAL_UART_MspInit+0xe4>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	4a29      	ldr	r2, [pc, #164]	; (8003034 <HAL_UART_MspInit+0xe4>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f96:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_UART_MspInit+0xe4>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fb2:	2307      	movs	r3, #7
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc0:	f000 fcdc 	bl	800397c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_UART_MspInit+0xec>)
 8002fc8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002fcc:	2202      	movs	r2, #2
 8002fce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ffa:	480f      	ldr	r0, [pc, #60]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8002ffc:	f000 fa78 	bl	80034f0 <HAL_DMA_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8003006:	f7ff ff05 	bl	8002e14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <HAL_UART_MspInit+0xe8>)
 800300e:	669a      	str	r2, [r3, #104]	; 0x68
 8003010:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_UART_MspInit+0xe8>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	2026      	movs	r0, #38	; 0x26
 800301c:	f000 fa31 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003020:	2026      	movs	r0, #38	; 0x26
 8003022:	f000 fa4a 	bl	80034ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003026:	bf00      	nop
 8003028:	3728      	adds	r7, #40	; 0x28
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40004400 	.word	0x40004400
 8003034:	40021000 	.word	0x40021000
 8003038:	200007a4 	.word	0x200007a4
 800303c:	40020080 	.word	0x40020080

08003040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003052:	e7fe      	b.n	8003052 <HardFault_Handler+0x4>

08003054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <MemManage_Handler+0x4>

0800305a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800305e:	e7fe      	b.n	800305e <BusFault_Handler+0x4>

08003060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <UsageFault_Handler+0x4>

08003066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003094:	f000 f8da 	bl	800324c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}

0800309c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <DMA1_Channel7_IRQHandler+0x10>)
 80030a2:	f000 fb7e 	bl	80037a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200007a4 	.word	0x200007a4

080030b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <USART2_IRQHandler+0x10>)
 80030b6:	f003 fc03 	bl	80068c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	2000082c 	.word	0x2000082c

080030c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030c8:	4802      	ldr	r0, [pc, #8]	; (80030d4 <TIM7_IRQHandler+0x10>)
 80030ca:	f002 fa4b 	bl	8005564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	200008ac 	.word	0x200008ac

080030d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <SystemInit+0x64>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <SystemInit+0x64>)
 80030e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <SystemInit+0x68>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <SystemInit+0x68>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <SystemInit+0x68>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <SystemInit+0x68>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a0f      	ldr	r2, [pc, #60]	; (8003140 <SystemInit+0x68>)
 8003104:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003108:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800310c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <SystemInit+0x68>)
 8003110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003114:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <SystemInit+0x68>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <SystemInit+0x68>)
 800311c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <SystemInit+0x68>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <SystemInit+0x64>)
 800312a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800312e:	609a      	str	r2, [r3, #8]
#endif
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000ed00 	.word	0xe000ed00
 8003140:	40021000 	.word	0x40021000

08003144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800317c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003148:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800314a:	e003      	b.n	8003154 <LoopCopyDataInit>

0800314c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800314e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003150:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003152:	3104      	adds	r1, #4

08003154 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003154:	480b      	ldr	r0, [pc, #44]	; (8003184 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003158:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800315a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800315c:	d3f6      	bcc.n	800314c <CopyDataInit>
	ldr	r2, =_sbss
 800315e:	4a0b      	ldr	r2, [pc, #44]	; (800318c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003160:	e002      	b.n	8003168 <LoopFillZerobss>

08003162 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003162:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003164:	f842 3b04 	str.w	r3, [r2], #4

08003168 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <LoopForever+0x16>)
	cmp	r2, r3
 800316a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800316c:	d3f9      	bcc.n	8003162 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800316e:	f7ff ffb3 	bl	80030d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003172:	f004 faf7 	bl	8007764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003176:	f7ff fbc9 	bl	800290c <main>

0800317a <LoopForever>:

LoopForever:
    b LoopForever
 800317a:	e7fe      	b.n	800317a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800317c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003180:	08007a9c 	.word	0x08007a9c
	ldr	r0, =_sdata
 8003184:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003188:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800318c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003190:	200008f0 	.word	0x200008f0

08003194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003194:	e7fe      	b.n	8003194 <ADC1_2_IRQHandler>
	...

08003198 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_Init+0x3c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <HAL_Init+0x3c>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ae:	2003      	movs	r0, #3
 80031b0:	f000 f95c 	bl	800346c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031b4:	2000      	movs	r0, #0
 80031b6:	f000 f80f 	bl	80031d8 <HAL_InitTick>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	71fb      	strb	r3, [r7, #7]
 80031c4:	e001      	b.n	80031ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031c6:	f7ff fe2d 	bl	8002e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031ca:	79fb      	ldrb	r3, [r7, #7]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40022000 	.word	0x40022000

080031d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80031e4:	4b16      	ldr	r3, [pc, #88]	; (8003240 <HAL_InitTick+0x68>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d022      	beq.n	8003232 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_InitTick+0x6c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b13      	ldr	r3, [pc, #76]	; (8003240 <HAL_InitTick+0x68>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f968 	bl	80034d6 <HAL_SYSTICK_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10f      	bne.n	800322c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	d809      	bhi.n	8003226 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003212:	2200      	movs	r2, #0
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800321a:	f000 f932 	bl	8003482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <HAL_InitTick+0x70>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e007      	b.n	8003236 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e004      	b.n	8003236 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e001      	b.n	8003236 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000008 	.word	0x20000008
 8003244:	20000000 	.word	0x20000000
 8003248:	20000004 	.word	0x20000004

0800324c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_IncTick+0x1c>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_IncTick+0x20>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4413      	add	r3, r2
 800325a:	4a03      	ldr	r2, [pc, #12]	; (8003268 <HAL_IncTick+0x1c>)
 800325c:	6013      	str	r3, [r2, #0]
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	200008ec 	.word	0x200008ec
 800326c:	20000008 	.word	0x20000008

08003270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTick+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	200008ec 	.word	0x200008ec

08003288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff ffee 	bl	8003270 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a0:	d004      	beq.n	80032ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_Delay+0x40>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ac:	bf00      	nop
 80032ae:	f7ff ffdf 	bl	8003270 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d8f7      	bhi.n	80032ae <HAL_Delay+0x26>
  {
  }
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000008 	.word	0x20000008

080032cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e8:	4013      	ands	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fe:	4a04      	ldr	r2, [pc, #16]	; (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	60d3      	str	r3, [r2, #12]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <__NVIC_GetPriorityGrouping+0x18>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 0307 	and.w	r3, r3, #7
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	2b00      	cmp	r3, #0
 8003340:	db0b      	blt.n	800335a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4907      	ldr	r1, [pc, #28]	; (8003368 <__NVIC_EnableIRQ+0x38>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2001      	movs	r0, #1
 8003352:	fa00 f202 	lsl.w	r2, r0, r2
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e100 	.word	0xe000e100

0800336c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db0a      	blt.n	8003396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	490c      	ldr	r1, [pc, #48]	; (80033b8 <__NVIC_SetPriority+0x4c>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	440b      	add	r3, r1
 8003390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003394:	e00a      	b.n	80033ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <__NVIC_SetPriority+0x50>)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3b04      	subs	r3, #4
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	761a      	strb	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f1c3 0307 	rsb	r3, r3, #7
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf28      	it	cs
 80033de:	2304      	movcs	r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d902      	bls.n	80033f0 <NVIC_EncodePriority+0x30>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3b03      	subs	r3, #3
 80033ee:	e000      	b.n	80033f2 <NVIC_EncodePriority+0x32>
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	401a      	ands	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003408:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43d9      	mvns	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	4313      	orrs	r3, r2
         );
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	; 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003438:	d301      	bcc.n	800343e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343a:	2301      	movs	r3, #1
 800343c:	e00f      	b.n	800345e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343e:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <SysTick_Config+0x40>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003446:	210f      	movs	r1, #15
 8003448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800344c:	f7ff ff8e 	bl	800336c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <SysTick_Config+0x40>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003456:	4b04      	ldr	r3, [pc, #16]	; (8003468 <SysTick_Config+0x40>)
 8003458:	2207      	movs	r2, #7
 800345a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	e000e010 	.word	0xe000e010

0800346c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff29 	bl	80032cc <__NVIC_SetPriorityGrouping>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003494:	f7ff ff3e 	bl	8003314 <__NVIC_GetPriorityGrouping>
 8003498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	6978      	ldr	r0, [r7, #20]
 80034a0:	f7ff ff8e 	bl	80033c0 <NVIC_EncodePriority>
 80034a4:	4602      	mov	r2, r0
 80034a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff5d 	bl	800336c <__NVIC_SetPriority>
}
 80034b2:	bf00      	nop
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff31 	bl	8003330 <__NVIC_EnableIRQ>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff ffa2 	bl	8003428 <SysTick_Config>
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e098      	b.n	8003634 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	4b4d      	ldr	r3, [pc, #308]	; (8003640 <HAL_DMA_Init+0x150>)
 800350a:	429a      	cmp	r2, r3
 800350c:	d80f      	bhi.n	800352e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <HAL_DMA_Init+0x154>)
 8003516:	4413      	add	r3, r2
 8003518:	4a4b      	ldr	r2, [pc, #300]	; (8003648 <HAL_DMA_Init+0x158>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	009a      	lsls	r2, r3, #2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a48      	ldr	r2, [pc, #288]	; (800364c <HAL_DMA_Init+0x15c>)
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
 800352c:	e00e      	b.n	800354c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	4b46      	ldr	r3, [pc, #280]	; (8003650 <HAL_DMA_Init+0x160>)
 8003536:	4413      	add	r3, r2
 8003538:	4a43      	ldr	r2, [pc, #268]	; (8003648 <HAL_DMA_Init+0x158>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	009a      	lsls	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a42      	ldr	r2, [pc, #264]	; (8003654 <HAL_DMA_Init+0x164>)
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a6:	d039      	beq.n	800361c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	4a27      	ldr	r2, [pc, #156]	; (800364c <HAL_DMA_Init+0x15c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d11a      	bne.n	80035e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035b2:	4b29      	ldr	r3, [pc, #164]	; (8003658 <HAL_DMA_Init+0x168>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f003 031c 	and.w	r3, r3, #28
 80035be:	210f      	movs	r1, #15
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	4924      	ldr	r1, [pc, #144]	; (8003658 <HAL_DMA_Init+0x168>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035cc:	4b22      	ldr	r3, [pc, #136]	; (8003658 <HAL_DMA_Init+0x168>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	f003 031c 	and.w	r3, r3, #28
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	491d      	ldr	r1, [pc, #116]	; (8003658 <HAL_DMA_Init+0x168>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
 80035e6:	e019      	b.n	800361c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <HAL_DMA_Init+0x16c>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	f003 031c 	and.w	r3, r3, #28
 80035f4:	210f      	movs	r1, #15
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	4917      	ldr	r1, [pc, #92]	; (800365c <HAL_DMA_Init+0x16c>)
 80035fe:	4013      	ands	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <HAL_DMA_Init+0x16c>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f003 031c 	and.w	r3, r3, #28
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	4911      	ldr	r1, [pc, #68]	; (800365c <HAL_DMA_Init+0x16c>)
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40020407 	.word	0x40020407
 8003644:	bffdfff8 	.word	0xbffdfff8
 8003648:	cccccccd 	.word	0xcccccccd
 800364c:	40020000 	.word	0x40020000
 8003650:	bffdfbf8 	.word	0xbffdfbf8
 8003654:	40020400 	.word	0x40020400
 8003658:	400200a8 	.word	0x400200a8
 800365c:	400204a8 	.word	0x400204a8

08003660 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_DMA_Start_IT+0x20>
 800367c:	2302      	movs	r3, #2
 800367e:	e04b      	b.n	8003718 <HAL_DMA_Start_IT+0xb8>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d13a      	bne.n	800370a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f92f 	bl	800391c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 020e 	orr.w	r2, r2, #14
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e00f      	b.n	80036f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0204 	bic.w	r2, r2, #4
 80036e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 020a 	orr.w	r2, r2, #10
 80036f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e005      	b.n	8003716 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003712:	2302      	movs	r3, #2
 8003714:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003716:	7dfb      	ldrb	r3, [r7, #23]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d005      	beq.n	8003744 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2204      	movs	r2, #4
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
 8003742:	e029      	b.n	8003798 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 020e 	bic.w	r2, r2, #14
 8003752:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	f003 021c 	and.w	r2, r3, #28
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f202 	lsl.w	r2, r1, r2
 8003776:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
    }
  }
  return status;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f003 031c 	and.w	r3, r3, #28
 80037c2:	2204      	movs	r2, #4
 80037c4:	409a      	lsls	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d026      	beq.n	800381c <HAL_DMA_IRQHandler+0x7a>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d021      	beq.n	800381c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0204 	bic.w	r2, r2, #4
 80037f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	f003 021c 	and.w	r2, r3, #28
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2104      	movs	r1, #4
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	2b00      	cmp	r3, #0
 8003810:	d071      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800381a:	e06c      	b.n	80038f6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	f003 031c 	and.w	r3, r3, #28
 8003824:	2202      	movs	r2, #2
 8003826:	409a      	lsls	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d02e      	beq.n	800388e <HAL_DMA_IRQHandler+0xec>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d029      	beq.n	800388e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 020a 	bic.w	r2, r2, #10
 8003856:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f003 021c 	and.w	r2, r3, #28
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	2102      	movs	r1, #2
 800386e:	fa01 f202 	lsl.w	r2, r1, r2
 8003872:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d038      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800388c:	e033      	b.n	80038f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f003 031c 	and.w	r3, r3, #28
 8003896:	2208      	movs	r2, #8
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d02a      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x156>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d025      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 020e 	bic.w	r2, r2, #14
 80038ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	f003 021c 	and.w	r2, r3, #28
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
}
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800390e:	b2db      	uxtb	r3, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f003 021c 	and.w	r2, r3, #28
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f202 	lsl.w	r2, r1, r2
 800393c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b10      	cmp	r3, #16
 800394c:	d108      	bne.n	8003960 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800395e:	e007      	b.n	8003970 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	60da      	str	r2, [r3, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398a:	e17f      	b.n	8003c8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8171 	beq.w	8003c86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x38>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b12      	cmp	r3, #18
 80039b2:	d123      	bne.n	80039fc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	08da      	lsrs	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3208      	adds	r2, #8
 80039bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	220f      	movs	r2, #15
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	08da      	lsrs	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3208      	adds	r2, #8
 80039f6:	6939      	ldr	r1, [r7, #16]
 80039f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0203 	and.w	r2, r3, #3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d00b      	beq.n	8003a50 <HAL_GPIO_Init+0xd4>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d007      	beq.n	8003a50 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a44:	2b11      	cmp	r3, #17
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b12      	cmp	r3, #18
 8003a4e:	d130      	bne.n	8003ab2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a86:	2201      	movs	r2, #1
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0201 	and.w	r2, r3, #1
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d118      	bne.n	8003af0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	f003 0201 	and.w	r2, r3, #1
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80ac 	beq.w	8003c86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2e:	4b5e      	ldr	r3, [pc, #376]	; (8003ca8 <HAL_GPIO_Init+0x32c>)
 8003b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b32:	4a5d      	ldr	r2, [pc, #372]	; (8003ca8 <HAL_GPIO_Init+0x32c>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6613      	str	r3, [r2, #96]	; 0x60
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_GPIO_Init+0x32c>)
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b46:	4a59      	ldr	r2, [pc, #356]	; (8003cac <HAL_GPIO_Init+0x330>)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b70:	d025      	beq.n	8003bbe <HAL_GPIO_Init+0x242>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4e      	ldr	r2, [pc, #312]	; (8003cb0 <HAL_GPIO_Init+0x334>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01f      	beq.n	8003bba <HAL_GPIO_Init+0x23e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4d      	ldr	r2, [pc, #308]	; (8003cb4 <HAL_GPIO_Init+0x338>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d019      	beq.n	8003bb6 <HAL_GPIO_Init+0x23a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4c      	ldr	r2, [pc, #304]	; (8003cb8 <HAL_GPIO_Init+0x33c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_GPIO_Init+0x236>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4b      	ldr	r2, [pc, #300]	; (8003cbc <HAL_GPIO_Init+0x340>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00d      	beq.n	8003bae <HAL_GPIO_Init+0x232>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4a      	ldr	r2, [pc, #296]	; (8003cc0 <HAL_GPIO_Init+0x344>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <HAL_GPIO_Init+0x22e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a49      	ldr	r2, [pc, #292]	; (8003cc4 <HAL_GPIO_Init+0x348>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_GPIO_Init+0x22a>
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	e00c      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003ba6:	2307      	movs	r3, #7
 8003ba8:	e00a      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003baa:	2305      	movs	r3, #5
 8003bac:	e008      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bae:	2304      	movs	r3, #4
 8003bb0:	e006      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e004      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e002      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	f002 0203 	and.w	r2, r2, #3
 8003bc6:	0092      	lsls	r2, r2, #2
 8003bc8:	4093      	lsls	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd0:	4936      	ldr	r1, [pc, #216]	; (8003cac <HAL_GPIO_Init+0x330>)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bde:	4b3a      	ldr	r3, [pc, #232]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c02:	4a31      	ldr	r2, [pc, #196]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c08:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c2c:	4a26      	ldr	r2, [pc, #152]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c32:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c80:	4a11      	ldr	r2, [pc, #68]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f47f ae78 	bne.w	800398c <HAL_GPIO_Init+0x10>
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	48000400 	.word	0x48000400
 8003cb4:	48000800 	.word	0x48000800
 8003cb8:	48000c00 	.word	0x48000c00
 8003cbc:	48001000 	.word	0x48001000
 8003cc0:	48001400 	.word	0x48001400
 8003cc4:	48001800 	.word	0x48001800
 8003cc8:	40010400 	.word	0x40010400

08003ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cdc:	787b      	ldrb	r3, [r7, #1]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d14:	887a      	ldrh	r2, [r7, #2]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003d1a:	e002      	b.n	8003d22 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d1c:	887a      	ldrh	r2, [r7, #2]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40007000 	.word	0x40007000

08003d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5a:	d130      	bne.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d68:	d038      	beq.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d6a:	4b20      	ldr	r3, [pc, #128]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d72:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d7a:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2232      	movs	r2, #50	; 0x32
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0c9b      	lsrs	r3, r3, #18
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d90:	e002      	b.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da4:	d102      	bne.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x60>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f2      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db8:	d110      	bne.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e00f      	b.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dca:	d007      	beq.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dcc:	4b07      	ldr	r3, [pc, #28]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dd4:	4a05      	ldr	r2, [pc, #20]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40007000 	.word	0x40007000
 8003df0:	20000000 	.word	0x20000000
 8003df4:	431bde83 	.word	0x431bde83

08003df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e39d      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0a:	4ba4      	ldr	r3, [pc, #656]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e14:	4ba1      	ldr	r3, [pc, #644]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80e1 	beq.w	8003fee <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <HAL_RCC_OscConfig+0x4a>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	f040 8088 	bne.w	8003f4a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	f040 8084 	bne.w	8003f4a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e42:	4b96      	ldr	r3, [pc, #600]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x62>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e375      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1a      	ldr	r2, [r3, #32]
 8003e5e:	4b8f      	ldr	r3, [pc, #572]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_RCC_OscConfig+0x7c>
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e72:	e005      	b.n	8003e80 <HAL_RCC_OscConfig+0x88>
 8003e74:	4b89      	ldr	r3, [pc, #548]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d223      	bcs.n	8003ecc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fd09 	bl	80048a0 <RCC_SetFlashLatencyFromMSIRange>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e356      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e98:	4b80      	ldr	r3, [pc, #512]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a7f      	ldr	r2, [pc, #508]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003e9e:	f043 0308 	orr.w	r3, r3, #8
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b7d      	ldr	r3, [pc, #500]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	497a      	ldr	r1, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eb6:	4b79      	ldr	r3, [pc, #484]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	4975      	ldr	r1, [pc, #468]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
 8003eca:	e022      	b.n	8003f12 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ecc:	4b73      	ldr	r3, [pc, #460]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a72      	ldr	r2, [pc, #456]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003ed2:	f043 0308 	orr.w	r3, r3, #8
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	4b70      	ldr	r3, [pc, #448]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	496d      	ldr	r1, [pc, #436]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eea:	4b6c      	ldr	r3, [pc, #432]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	4968      	ldr	r1, [pc, #416]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fccc 	bl	80048a0 <RCC_SetFlashLatencyFromMSIRange>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e319      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f12:	f000 fc03 	bl	800471c <HAL_RCC_GetSysClockFreq>
 8003f16:	4601      	mov	r1, r0
 8003f18:	4b60      	ldr	r3, [pc, #384]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	4a5f      	ldr	r2, [pc, #380]	; (80040a0 <HAL_RCC_OscConfig+0x2a8>)
 8003f24:	5cd3      	ldrb	r3, [r2, r3]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f2e:	4a5d      	ldr	r2, [pc, #372]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_RCC_OscConfig+0x2b0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff f94e 	bl	80031d8 <HAL_InitTick>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d052      	beq.n	8003fec <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	e2fd      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d032      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f52:	4b52      	ldr	r3, [pc, #328]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a51      	ldr	r2, [pc, #324]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f5e:	f7ff f987 	bl	8003270 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f66:	f7ff f983 	bl	8003270 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e2e6      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f78:	4b48      	ldr	r3, [pc, #288]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f84:	4b45      	ldr	r3, [pc, #276]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a44      	ldr	r2, [pc, #272]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003f8a:	f043 0308 	orr.w	r3, r3, #8
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b42      	ldr	r3, [pc, #264]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	493f      	ldr	r1, [pc, #252]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa2:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	493a      	ldr	r1, [pc, #232]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
 8003fb6:	e01a      	b.n	8003fee <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fb8:	4b38      	ldr	r3, [pc, #224]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a37      	ldr	r2, [pc, #220]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fc4:	f7ff f954 	bl	8003270 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fcc:	f7ff f950 	bl	8003270 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e2b3      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fde:	4b2f      	ldr	r3, [pc, #188]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1d4>
 8003fea:	e000      	b.n	8003fee <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d074      	beq.n	80040e4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_OscConfig+0x214>
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d10e      	bne.n	8004024 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d10b      	bne.n	8004024 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	4b23      	ldr	r3, [pc, #140]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d064      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2ea>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d160      	bne.n	80040e2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e290      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d106      	bne.n	800403c <HAL_RCC_OscConfig+0x244>
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1a      	ldr	r2, [pc, #104]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e01d      	b.n	8004078 <HAL_RCC_OscConfig+0x280>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x268>
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a14      	ldr	r2, [pc, #80]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 800404c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a11      	ldr	r2, [pc, #68]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0x280>
 8004060:	4b0e      	ldr	r3, [pc, #56]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8004066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <HAL_RCC_OscConfig+0x2a4>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01c      	beq.n	80040ba <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7ff f8f6 	bl	8003270 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004086:	e011      	b.n	80040ac <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7ff f8f2 	bl	8003270 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d90a      	bls.n	80040ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e255      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000
 80040a0:	08007a44 	.word	0x08007a44
 80040a4:	20000000 	.word	0x20000000
 80040a8:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ac:	4bae      	ldr	r3, [pc, #696]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0e7      	beq.n	8004088 <HAL_RCC_OscConfig+0x290>
 80040b8:	e014      	b.n	80040e4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7ff f8d9 	bl	8003270 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c2:	f7ff f8d5 	bl	8003270 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b64      	cmp	r3, #100	; 0x64
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e238      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040d4:	4ba4      	ldr	r3, [pc, #656]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x2ca>
 80040e0:	e000      	b.n	80040e4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d060      	beq.n	80041b2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d005      	beq.n	8004102 <HAL_RCC_OscConfig+0x30a>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d119      	bne.n	8004130 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d116      	bne.n	8004130 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004102:	4b99      	ldr	r3, [pc, #612]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x322>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e215      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411a:	4b93      	ldr	r3, [pc, #588]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	498f      	ldr	r1, [pc, #572]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800412a:	4313      	orrs	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800412e:	e040      	b.n	80041b2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d023      	beq.n	8004180 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004138:	4b8b      	ldr	r3, [pc, #556]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a8a      	ldr	r2, [pc, #552]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800413e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7ff f894 	bl	8003270 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414c:	f7ff f890 	bl	8003270 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1f3      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800415e:	4b82      	ldr	r3, [pc, #520]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416a:	4b7f      	ldr	r3, [pc, #508]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	497b      	ldr	r1, [pc, #492]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
 800417e:	e018      	b.n	80041b2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004180:	4b79      	ldr	r3, [pc, #484]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a78      	ldr	r2, [pc, #480]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 8004186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800418a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7ff f870 	bl	8003270 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004194:	f7ff f86c 	bl	8003270 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e1cf      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a6:	4b70      	ldr	r3, [pc, #448]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d03c      	beq.n	8004238 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01c      	beq.n	8004200 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4b68      	ldr	r3, [pc, #416]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80041c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041cc:	4a66      	ldr	r2, [pc, #408]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d6:	f7ff f84b 	bl	8003270 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041de:	f7ff f847 	bl	8003270 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1aa      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041f0:	4b5d      	ldr	r3, [pc, #372]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0ef      	beq.n	80041de <HAL_RCC_OscConfig+0x3e6>
 80041fe:	e01b      	b.n	8004238 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004200:	4b59      	ldr	r3, [pc, #356]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004206:	4a58      	ldr	r2, [pc, #352]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7ff f82e 	bl	8003270 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004218:	f7ff f82a 	bl	8003270 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e18d      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800422a:	4b4f      	ldr	r3, [pc, #316]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800422c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1ef      	bne.n	8004218 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80a5 	beq.w	8004390 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b44      	ldr	r3, [pc, #272]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	4a43      	ldr	r2, [pc, #268]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6593      	str	r3, [r2, #88]	; 0x58
 8004262:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004272:	4b3e      	ldr	r3, [pc, #248]	; (800436c <HAL_RCC_OscConfig+0x574>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d118      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800427e:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_RCC_OscConfig+0x574>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a3a      	ldr	r2, [pc, #232]	; (800436c <HAL_RCC_OscConfig+0x574>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428a:	f7fe fff1 	bl	8003270 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004292:	f7fe ffed 	bl	8003270 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e150      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_RCC_OscConfig+0x574>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d108      	bne.n	80042ca <HAL_RCC_OscConfig+0x4d2>
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	4a2a      	ldr	r2, [pc, #168]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c8:	e024      	b.n	8004314 <HAL_RCC_OscConfig+0x51c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d110      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4fc>
 80042d2:	4b25      	ldr	r3, [pc, #148]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	4a23      	ldr	r2, [pc, #140]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e2:	4b21      	ldr	r3, [pc, #132]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f2:	e00f      	b.n	8004314 <HAL_RCC_OscConfig+0x51c>
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	4a17      	ldr	r2, [pc, #92]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d016      	beq.n	800434a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fe ffa8 	bl	8003270 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004322:	e00a      	b.n	800433a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004324:	f7fe ffa4 	bl	8003270 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e105      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCC_OscConfig+0x570>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0ed      	beq.n	8004324 <HAL_RCC_OscConfig+0x52c>
 8004348:	e019      	b.n	800437e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7fe ff91 	bl	8003270 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004350:	e00e      	b.n	8004370 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004352:	f7fe ff8d 	bl	8003270 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	d905      	bls.n	8004370 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e0ee      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
 8004368:	40021000 	.word	0x40021000
 800436c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004370:	4b77      	ldr	r3, [pc, #476]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e9      	bne.n	8004352 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800437e:	7ffb      	ldrb	r3, [r7, #31]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d105      	bne.n	8004390 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004384:	4b72      	ldr	r3, [pc, #456]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	4a71      	ldr	r2, [pc, #452]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 800438a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80d5 	beq.w	8004544 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	f000 808e 	beq.w	80044be <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d15b      	bne.n	8004462 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	4b69      	ldr	r3, [pc, #420]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a68      	ldr	r2, [pc, #416]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 80043b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b6:	f7fe ff5b 	bl	8003270 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043be:	f7fe ff57 	bl	8003270 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e0ba      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d0:	4b5f      	ldr	r3, [pc, #380]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043dc:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	4b5c      	ldr	r3, [pc, #368]	; (8004554 <HAL_RCC_OscConfig+0x75c>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043ec:	3a01      	subs	r2, #1
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	4311      	orrs	r1, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043f6:	0212      	lsls	r2, r2, #8
 80043f8:	4311      	orrs	r1, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043fe:	0852      	lsrs	r2, r2, #1
 8004400:	3a01      	subs	r2, #1
 8004402:	0552      	lsls	r2, r2, #21
 8004404:	4311      	orrs	r1, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800440a:	0852      	lsrs	r2, r2, #1
 800440c:	3a01      	subs	r2, #1
 800440e:	0652      	lsls	r2, r2, #25
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004416:	0912      	lsrs	r2, r2, #4
 8004418:	0452      	lsls	r2, r2, #17
 800441a:	430a      	orrs	r2, r1
 800441c:	494c      	ldr	r1, [pc, #304]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 800441e:	4313      	orrs	r3, r2
 8004420:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004422:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a4a      	ldr	r2, [pc, #296]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800442e:	4b48      	ldr	r3, [pc, #288]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	4a47      	ldr	r2, [pc, #284]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004438:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fe ff19 	bl	8003270 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe ff15 	bl	8003270 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e078      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004454:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x64a>
 8004460:	e070      	b.n	8004544 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a3a      	ldr	r2, [pc, #232]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800446c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800446e:	4b38      	ldr	r3, [pc, #224]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800447a:	4b35      	ldr	r3, [pc, #212]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004480:	f023 0303 	bic.w	r3, r3, #3
 8004484:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004486:	4b32      	ldr	r3, [pc, #200]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	4a31      	ldr	r2, [pc, #196]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 800448c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004494:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fe feeb 	bl	8003270 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449e:	f7fe fee7 	bl	8003270 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e04a      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x6a6>
 80044bc:	e042      	b.n	8004544 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e03d      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80044ca:	4b21      	ldr	r3, [pc, #132]	; (8004550 <HAL_RCC_OscConfig+0x758>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f003 0203 	and.w	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	429a      	cmp	r2, r3
 80044dc:	d130      	bne.n	8004540 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	3b01      	subs	r3, #1
 80044ea:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d127      	bne.n	8004540 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d11f      	bne.n	8004540 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800450a:	2a07      	cmp	r2, #7
 800450c:	bf14      	ite	ne
 800450e:	2201      	movne	r2, #1
 8004510:	2200      	moveq	r2, #0
 8004512:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004514:	4293      	cmp	r3, r2
 8004516:	d113      	bne.n	8004540 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	3b01      	subs	r3, #1
 8004526:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d109      	bne.n	8004540 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	3b01      	subs	r3, #1
 800453a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	f99d808c 	.word	0xf99d808c

08004558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0c8      	b.n	80046fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b66      	ldr	r3, [pc, #408]	; (8004708 <HAL_RCC_ClockConfig+0x1b0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d910      	bls.n	800459c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b63      	ldr	r3, [pc, #396]	; (8004708 <HAL_RCC_ClockConfig+0x1b0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 0207 	bic.w	r2, r3, #7
 8004582:	4961      	ldr	r1, [pc, #388]	; (8004708 <HAL_RCC_ClockConfig+0x1b0>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b5f      	ldr	r3, [pc, #380]	; (8004708 <HAL_RCC_ClockConfig+0x1b0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0b0      	b.n	80046fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d04c      	beq.n	8004642 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d107      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b0:	4b56      	ldr	r3, [pc, #344]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d121      	bne.n	8004600 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e09e      	b.n	80046fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d107      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c8:	4b50      	ldr	r3, [pc, #320]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d115      	bne.n	8004600 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e092      	b.n	80046fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e0:	4b4a      	ldr	r3, [pc, #296]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e086      	b.n	80046fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f0:	4b46      	ldr	r3, [pc, #280]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e07e      	b.n	80046fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004600:	4b42      	ldr	r3, [pc, #264]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f023 0203 	bic.w	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	493f      	ldr	r1, [pc, #252]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004612:	f7fe fe2d 	bl	8003270 <HAL_GetTick>
 8004616:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004618:	e00a      	b.n	8004630 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461a:	f7fe fe29 	bl	8003270 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e066      	b.n	80046fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004630:	4b36      	ldr	r3, [pc, #216]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 020c 	and.w	r2, r3, #12
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	429a      	cmp	r2, r3
 8004640:	d1eb      	bne.n	800461a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800464e:	4b2f      	ldr	r3, [pc, #188]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	492c      	ldr	r1, [pc, #176]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004660:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_RCC_ClockConfig+0x1b0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d210      	bcs.n	8004690 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b26      	ldr	r3, [pc, #152]	; (8004708 <HAL_RCC_ClockConfig+0x1b0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	4924      	ldr	r1, [pc, #144]	; (8004708 <HAL_RCC_ClockConfig+0x1b0>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b22      	ldr	r3, [pc, #136]	; (8004708 <HAL_RCC_ClockConfig+0x1b0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e036      	b.n	80046fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4918      	ldr	r1, [pc, #96]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ba:	4b14      	ldr	r3, [pc, #80]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4910      	ldr	r1, [pc, #64]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ce:	f000 f825 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80046d2:	4601      	mov	r1, r0
 80046d4:	4b0d      	ldr	r3, [pc, #52]	; (800470c <HAL_RCC_ClockConfig+0x1b4>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	4a0c      	ldr	r2, [pc, #48]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	5cd3      	ldrb	r3, [r2, r3]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	fa21 f303 	lsr.w	r3, r1, r3
 80046ea:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fd70 	bl	80031d8 <HAL_InitTick>
 80046f8:	4603      	mov	r3, r0
 80046fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80046fc:	7afb      	ldrb	r3, [r7, #11]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40022000 	.word	0x40022000
 800470c:	40021000 	.word	0x40021000
 8004710:	08007a44 	.word	0x08007a44
 8004714:	20000000 	.word	0x20000000
 8004718:	20000004 	.word	0x20000004

0800471c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	; 0x24
 8004720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800472a:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004734:	4b3a      	ldr	r3, [pc, #232]	; (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0x34>
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b0c      	cmp	r3, #12
 8004748:	d121      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d11e      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004750:	4b33      	ldr	r3, [pc, #204]	; (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800475c:	4b30      	ldr	r3, [pc, #192]	; (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 800475e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	e005      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800476c:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004778:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <HAL_RCC_GetSysClockFreq+0x108>)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004780:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10d      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d102      	bne.n	800479a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004794:	4b24      	ldr	r3, [pc, #144]	; (8004828 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	e004      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047a0:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_RCC_GetSysClockFreq+0x110>)
 80047a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d133      	bne.n	8004812 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047aa:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d002      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0xa4>
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0xaa>
 80047be:	e005      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047c2:	617b      	str	r3, [r7, #20]
      break;
 80047c4:	e005      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047c6:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_RCC_GetSysClockFreq+0x110>)
 80047c8:	617b      	str	r3, [r7, #20]
      break;
 80047ca:	e002      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	617b      	str	r3, [r7, #20]
      break;
 80047d0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	091b      	lsrs	r3, r3, #4
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	3301      	adds	r3, #1
 80047de:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	0a1b      	lsrs	r3, r3, #8
 80047e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	fb02 f203 	mul.w	r2, r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	0e5b      	lsrs	r3, r3, #25
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	3301      	adds	r3, #1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004812:	69bb      	ldr	r3, [r7, #24]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3724      	adds	r7, #36	; 0x24
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	40021000 	.word	0x40021000
 8004824:	08007a5c 	.word	0x08007a5c
 8004828:	00f42400 	.word	0x00f42400
 800482c:	007a1200 	.word	0x007a1200

08004830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004834:	4b03      	ldr	r3, [pc, #12]	; (8004844 <HAL_RCC_GetHCLKFreq+0x14>)
 8004836:	681b      	ldr	r3, [r3, #0]
}
 8004838:	4618      	mov	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000000 	.word	0x20000000

08004848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800484c:	f7ff fff0 	bl	8004830 <HAL_RCC_GetHCLKFreq>
 8004850:	4601      	mov	r1, r0
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4a04      	ldr	r2, [pc, #16]	; (8004870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800485e:	5cd3      	ldrb	r3, [r2, r3]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	08007a54 	.word	0x08007a54

08004874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004878:	f7ff ffda 	bl	8004830 <HAL_RCC_GetHCLKFreq>
 800487c:	4601      	mov	r1, r0
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	0adb      	lsrs	r3, r3, #11
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4a04      	ldr	r2, [pc, #16]	; (800489c <HAL_RCC_GetPCLK2Freq+0x28>)
 800488a:	5cd3      	ldrb	r3, [r2, r3]
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40021000 	.word	0x40021000
 800489c:	08007a54 	.word	0x08007a54

080048a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048ac:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048b8:	f7ff fa3a 	bl	8003d30 <HAL_PWREx_GetVoltageRange>
 80048bc:	6178      	str	r0, [r7, #20]
 80048be:	e014      	b.n	80048ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	4a24      	ldr	r2, [pc, #144]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6593      	str	r3, [r2, #88]	; 0x58
 80048cc:	4b22      	ldr	r3, [pc, #136]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048d8:	f7ff fa2a 	bl	8003d30 <HAL_PWREx_GetVoltageRange>
 80048dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048de:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f0:	d10b      	bne.n	800490a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b80      	cmp	r3, #128	; 0x80
 80048f6:	d919      	bls.n	800492c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2ba0      	cmp	r3, #160	; 0xa0
 80048fc:	d902      	bls.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048fe:	2302      	movs	r3, #2
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	e013      	b.n	800492c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004904:	2301      	movs	r3, #1
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e010      	b.n	800492c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d902      	bls.n	8004916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004910:	2303      	movs	r3, #3
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	e00a      	b.n	800492c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b80      	cmp	r3, #128	; 0x80
 800491a:	d102      	bne.n	8004922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800491c:	2302      	movs	r3, #2
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	e004      	b.n	800492c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b70      	cmp	r3, #112	; 0x70
 8004926:	d101      	bne.n	800492c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004928:	2301      	movs	r3, #1
 800492a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 0207 	bic.w	r2, r3, #7
 8004934:	4909      	ldr	r1, [pc, #36]	; (800495c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800493c:	4b07      	ldr	r3, [pc, #28]	; (800495c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40021000 	.word	0x40021000
 800495c:	40022000 	.word	0x40022000

08004960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004968:	2300      	movs	r3, #0
 800496a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800496c:	2300      	movs	r3, #0
 800496e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004978:	2b00      	cmp	r3, #0
 800497a:	d03f      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004984:	d01c      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800498a:	d802      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004990:	e01f      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004996:	d003      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004998:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800499c:	d01c      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800499e:	e018      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049a0:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4a84      	ldr	r2, [pc, #528]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ac:	e015      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fab9 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049be:	e00c      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3320      	adds	r3, #32
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fba0 	bl	800510c <RCCEx_PLLSAI2_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d0:	e003      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	74fb      	strb	r3, [r7, #19]
      break;
 80049d6:	e000      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80049d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049e0:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ee:	4972      	ldr	r1, [pc, #456]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049f6:	e001      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d03f      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a10:	d01c      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a16:	d802      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004a1c:	e01f      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a22:	d003      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004a24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a28:	d01c      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004a2a:	e018      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a2c:	4b62      	ldr	r3, [pc, #392]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4a61      	ldr	r2, [pc, #388]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a38:	e015      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fa73 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a4a:	e00c      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3320      	adds	r3, #32
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fb5a 	bl	800510c <RCCEx_PLLSAI2_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a5c:	e003      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	74fb      	strb	r3, [r7, #19]
      break;
 8004a62:	e000      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10b      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a6c:	4b52      	ldr	r3, [pc, #328]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a7a:	494f      	ldr	r1, [pc, #316]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a82:	e001      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a84:	7cfb      	ldrb	r3, [r7, #19]
 8004a86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80a0 	beq.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a96:	2300      	movs	r3, #0
 8004a98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a9a:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab0:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aba:	6593      	str	r3, [r2, #88]	; 0x58
 8004abc:	4b3e      	ldr	r3, [pc, #248]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004acc:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a3a      	ldr	r2, [pc, #232]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad8:	f7fe fbca 	bl	8003270 <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ade:	e009      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae0:	f7fe fbc6 	bl	8003270 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d902      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	74fb      	strb	r3, [r7, #19]
        break;
 8004af2:	e005      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004af4:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0ef      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d15c      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b06:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d019      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b24:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b40:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fe fb85 	bl	8003270 <HAL_GetTick>
 8004b66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b68:	e00b      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fe fb81 	bl	8003270 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d902      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b80:	e006      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ec      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba6:	4904      	ldr	r1, [pc, #16]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bae:	e009      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	74bb      	strb	r3, [r7, #18]
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bc4:	7c7b      	ldrb	r3, [r7, #17]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d105      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bca:	4b9e      	ldr	r3, [pc, #632]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	4a9d      	ldr	r2, [pc, #628]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004be2:	4b98      	ldr	r3, [pc, #608]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f023 0203 	bic.w	r2, r3, #3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	4994      	ldr	r1, [pc, #592]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c04:	4b8f      	ldr	r3, [pc, #572]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0a:	f023 020c 	bic.w	r2, r3, #12
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	498c      	ldr	r1, [pc, #560]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c26:	4b87      	ldr	r3, [pc, #540]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	4983      	ldr	r1, [pc, #524]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c48:	4b7e      	ldr	r3, [pc, #504]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	497b      	ldr	r1, [pc, #492]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c6a:	4b76      	ldr	r3, [pc, #472]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c78:	4972      	ldr	r1, [pc, #456]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c8c:	4b6d      	ldr	r3, [pc, #436]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9a:	496a      	ldr	r1, [pc, #424]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cae:	4b65      	ldr	r3, [pc, #404]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbc:	4961      	ldr	r1, [pc, #388]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cd0:	4b5c      	ldr	r3, [pc, #368]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	4959      	ldr	r1, [pc, #356]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf2:	4b54      	ldr	r3, [pc, #336]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d00:	4950      	ldr	r1, [pc, #320]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d14:	4b4b      	ldr	r3, [pc, #300]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	4948      	ldr	r1, [pc, #288]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d36:	4b43      	ldr	r3, [pc, #268]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	493f      	ldr	r1, [pc, #252]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d028      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d58:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d66:	4937      	ldr	r1, [pc, #220]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d76:	d106      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d78:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a31      	ldr	r2, [pc, #196]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d82:	60d3      	str	r3, [r2, #12]
 8004d84:	e011      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8e:	d10c      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3304      	adds	r3, #4
 8004d94:	2101      	movs	r1, #1
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f8c8 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d028      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004db6:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	491f      	ldr	r1, [pc, #124]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de0:	60d3      	str	r3, [r2, #12]
 8004de2:	e011      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2101      	movs	r1, #1
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f899 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d02b      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e22:	4908      	ldr	r1, [pc, #32]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e32:	d109      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a02      	ldr	r2, [pc, #8]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3e:	60d3      	str	r3, [r2, #12]
 8004e40:	e014      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2101      	movs	r1, #1
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f867 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02f      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e78:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e86:	4928      	ldr	r1, [pc, #160]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e96:	d10d      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f844 	bl	8004f2c <RCCEx_PLLSAI1_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d014      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004eae:	7cfb      	ldrb	r3, [r7, #19]
 8004eb0:	74bb      	strb	r3, [r7, #18]
 8004eb2:	e011      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3320      	adds	r3, #32
 8004ec2:	2102      	movs	r1, #2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f921 	bl	800510c <RCCEx_PLLSAI2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ece:	7cfb      	ldrb	r3, [r7, #19]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef2:	490d      	ldr	r1, [pc, #52]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f16:	4904      	ldr	r1, [pc, #16]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000

08004f2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f3a:	4b73      	ldr	r3, [pc, #460]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d018      	beq.n	8004f78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f46:	4b70      	ldr	r3, [pc, #448]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0203 	and.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d10d      	bne.n	8004f72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
       ||
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f5e:	4b6a      	ldr	r3, [pc, #424]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	091b      	lsrs	r3, r3, #4
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d044      	beq.n	8004ffc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
 8004f76:	e041      	b.n	8004ffc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d00c      	beq.n	8004f9a <RCCEx_PLLSAI1_Config+0x6e>
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d013      	beq.n	8004fac <RCCEx_PLLSAI1_Config+0x80>
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d120      	bne.n	8004fca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f88:	4b5f      	ldr	r3, [pc, #380]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11d      	bne.n	8004fd0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f98:	e01a      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f9a:	4b5b      	ldr	r3, [pc, #364]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d116      	bne.n	8004fd4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004faa:	e013      	b.n	8004fd4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fac:	4b56      	ldr	r3, [pc, #344]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10f      	bne.n	8004fd8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fb8:	4b53      	ldr	r3, [pc, #332]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fc8:	e006      	b.n	8004fd8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fce:	e004      	b.n	8004fda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004fd0:	bf00      	nop
 8004fd2:	e002      	b.n	8004fda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004fd4:	bf00      	nop
 8004fd6:	e000      	b.n	8004fda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004fd8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fe0:	4b49      	ldr	r3, [pc, #292]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6819      	ldr	r1, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	4944      	ldr	r1, [pc, #272]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d17d      	bne.n	80050fe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005002:	4b41      	ldr	r3, [pc, #260]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a40      	ldr	r2, [pc, #256]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005008:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800500c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500e:	f7fe f92f 	bl	8003270 <HAL_GetTick>
 8005012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005014:	e009      	b.n	800502a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005016:	f7fe f92b 	bl	8003270 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d902      	bls.n	800502a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	73fb      	strb	r3, [r7, #15]
        break;
 8005028:	e005      	b.n	8005036 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800502a:	4b37      	ldr	r3, [pc, #220]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1ef      	bne.n	8005016 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d160      	bne.n	80050fe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d111      	bne.n	8005066 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005042:	4b31      	ldr	r3, [pc, #196]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800504a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6892      	ldr	r2, [r2, #8]
 8005052:	0211      	lsls	r1, r2, #8
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	68d2      	ldr	r2, [r2, #12]
 8005058:	0912      	lsrs	r2, r2, #4
 800505a:	0452      	lsls	r2, r2, #17
 800505c:	430a      	orrs	r2, r1
 800505e:	492a      	ldr	r1, [pc, #168]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	610b      	str	r3, [r1, #16]
 8005064:	e027      	b.n	80050b6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d112      	bne.n	8005092 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800506c:	4b26      	ldr	r3, [pc, #152]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005074:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6892      	ldr	r2, [r2, #8]
 800507c:	0211      	lsls	r1, r2, #8
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6912      	ldr	r2, [r2, #16]
 8005082:	0852      	lsrs	r2, r2, #1
 8005084:	3a01      	subs	r2, #1
 8005086:	0552      	lsls	r2, r2, #21
 8005088:	430a      	orrs	r2, r1
 800508a:	491f      	ldr	r1, [pc, #124]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	610b      	str	r3, [r1, #16]
 8005090:	e011      	b.n	80050b6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005092:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800509a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6892      	ldr	r2, [r2, #8]
 80050a2:	0211      	lsls	r1, r2, #8
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6952      	ldr	r2, [r2, #20]
 80050a8:	0852      	lsrs	r2, r2, #1
 80050aa:	3a01      	subs	r2, #1
 80050ac:	0652      	lsls	r2, r2, #25
 80050ae:	430a      	orrs	r2, r1
 80050b0:	4915      	ldr	r1, [pc, #84]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a13      	ldr	r2, [pc, #76]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fe f8d5 	bl	8003270 <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050c8:	e009      	b.n	80050de <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ca:	f7fe f8d1 	bl	8003270 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d902      	bls.n	80050de <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	73fb      	strb	r3, [r7, #15]
          break;
 80050dc:	e005      	b.n	80050ea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0ef      	beq.n	80050ca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	4903      	ldr	r1, [pc, #12]	; (8005108 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000

0800510c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800511a:	4b68      	ldr	r3, [pc, #416]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005126:	4b65      	ldr	r3, [pc, #404]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0203 	and.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d10d      	bne.n	8005152 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
       ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800513e:	4b5f      	ldr	r3, [pc, #380]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
       ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d044      	beq.n	80051dc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
 8005156:	e041      	b.n	80051dc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d00c      	beq.n	800517a <RCCEx_PLLSAI2_Config+0x6e>
 8005160:	2b03      	cmp	r3, #3
 8005162:	d013      	beq.n	800518c <RCCEx_PLLSAI2_Config+0x80>
 8005164:	2b01      	cmp	r3, #1
 8005166:	d120      	bne.n	80051aa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005168:	4b54      	ldr	r3, [pc, #336]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11d      	bne.n	80051b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005178:	e01a      	b.n	80051b0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800517a:	4b50      	ldr	r3, [pc, #320]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005182:	2b00      	cmp	r3, #0
 8005184:	d116      	bne.n	80051b4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800518a:	e013      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800518c:	4b4b      	ldr	r3, [pc, #300]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10f      	bne.n	80051b8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005198:	4b48      	ldr	r3, [pc, #288]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051a8:	e006      	b.n	80051b8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
      break;
 80051ae:	e004      	b.n	80051ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051b0:	bf00      	nop
 80051b2:	e002      	b.n	80051ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051b4:	bf00      	nop
 80051b6:	e000      	b.n	80051ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10d      	bne.n	80051dc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051c0:	4b3e      	ldr	r3, [pc, #248]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6819      	ldr	r1, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	430b      	orrs	r3, r1
 80051d6:	4939      	ldr	r1, [pc, #228]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d167      	bne.n	80052b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051e2:	4b36      	ldr	r3, [pc, #216]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a35      	ldr	r2, [pc, #212]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80051e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ee:	f7fe f83f 	bl	8003270 <HAL_GetTick>
 80051f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051f4:	e009      	b.n	800520a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051f6:	f7fe f83b 	bl	8003270 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d902      	bls.n	800520a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	73fb      	strb	r3, [r7, #15]
        break;
 8005208:	e005      	b.n	8005216 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800520a:	4b2c      	ldr	r3, [pc, #176]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ef      	bne.n	80051f6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d14a      	bne.n	80052b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d111      	bne.n	8005246 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005222:	4b26      	ldr	r3, [pc, #152]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800522a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6892      	ldr	r2, [r2, #8]
 8005232:	0211      	lsls	r1, r2, #8
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68d2      	ldr	r2, [r2, #12]
 8005238:	0912      	lsrs	r2, r2, #4
 800523a:	0452      	lsls	r2, r2, #17
 800523c:	430a      	orrs	r2, r1
 800523e:	491f      	ldr	r1, [pc, #124]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005240:	4313      	orrs	r3, r2
 8005242:	614b      	str	r3, [r1, #20]
 8005244:	e011      	b.n	800526a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800524e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6892      	ldr	r2, [r2, #8]
 8005256:	0211      	lsls	r1, r2, #8
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6912      	ldr	r2, [r2, #16]
 800525c:	0852      	lsrs	r2, r2, #1
 800525e:	3a01      	subs	r2, #1
 8005260:	0652      	lsls	r2, r2, #25
 8005262:	430a      	orrs	r2, r1
 8005264:	4915      	ldr	r1, [pc, #84]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005266:	4313      	orrs	r3, r2
 8005268:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800526a:	4b14      	ldr	r3, [pc, #80]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005274:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005276:	f7fd fffb 	bl	8003270 <HAL_GetTick>
 800527a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800527c:	e009      	b.n	8005292 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800527e:	f7fd fff7 	bl	8003270 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d902      	bls.n	8005292 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	73fb      	strb	r3, [r7, #15]
          break;
 8005290:	e005      	b.n	800529e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0ef      	beq.n	800527e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	4903      	ldr	r1, [pc, #12]	; (80052bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40021000 	.word	0x40021000

080052c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e01d      	b.n	800530e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fd fdc0 	bl	8002e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 fc4a 	bl	8005b98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <HAL_TIM_Base_Start_IT+0x50>)
 8005338:	4013      	ands	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b06      	cmp	r3, #6
 8005340:	d00b      	beq.n	800535a <HAL_TIM_Base_Start_IT+0x42>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005348:	d007      	beq.n	800535a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0201 	orr.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	00010007 	.word	0x00010007

0800536c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e01d      	b.n	80053ba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f815 	bl	80053c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 fbf4 	bl	8005b98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 ffde 	bl	80063ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <HAL_TIM_PWM_Start+0x98>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_TIM_PWM_Start+0x4a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <HAL_TIM_PWM_Start+0x9c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00e      	beq.n	8005422 <HAL_TIM_PWM_Start+0x4a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HAL_TIM_PWM_Start+0xa0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_TIM_PWM_Start+0x4a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1a      	ldr	r2, [pc, #104]	; (800547c <HAL_TIM_PWM_Start+0xa4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIM_PWM_Start+0x4a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a18      	ldr	r2, [pc, #96]	; (8005480 <HAL_TIM_PWM_Start+0xa8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Start+0x4e>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <HAL_TIM_PWM_Start+0x50>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800543a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	4b10      	ldr	r3, [pc, #64]	; (8005484 <HAL_TIM_PWM_Start+0xac>)
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b06      	cmp	r3, #6
 800544c:	d00b      	beq.n	8005466 <HAL_TIM_PWM_Start+0x8e>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005454:	d007      	beq.n	8005466 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0201 	orr.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40013400 	.word	0x40013400
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800
 8005484:	00010007 	.word	0x00010007

08005488 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 ff86 	bl	80063ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2a      	ldr	r2, [pc, #168]	; (8005550 <HAL_TIM_PWM_Stop+0xc8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d013      	beq.n	80054d2 <HAL_TIM_PWM_Stop+0x4a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a29      	ldr	r2, [pc, #164]	; (8005554 <HAL_TIM_PWM_Stop+0xcc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00e      	beq.n	80054d2 <HAL_TIM_PWM_Stop+0x4a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a27      	ldr	r2, [pc, #156]	; (8005558 <HAL_TIM_PWM_Stop+0xd0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d009      	beq.n	80054d2 <HAL_TIM_PWM_Stop+0x4a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a26      	ldr	r2, [pc, #152]	; (800555c <HAL_TIM_PWM_Stop+0xd4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d004      	beq.n	80054d2 <HAL_TIM_PWM_Stop+0x4a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a24      	ldr	r2, [pc, #144]	; (8005560 <HAL_TIM_PWM_Stop+0xd8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d101      	bne.n	80054d6 <HAL_TIM_PWM_Stop+0x4e>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_TIM_PWM_Stop+0x50>
 80054d6:	2300      	movs	r3, #0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d017      	beq.n	800550c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6a1a      	ldr	r2, [r3, #32]
 80054e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10f      	bne.n	800550c <HAL_TIM_PWM_Stop+0x84>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	f240 4344 	movw	r3, #1092	; 0x444
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d107      	bne.n	800550c <HAL_TIM_PWM_Stop+0x84>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800550a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	f241 1311 	movw	r3, #4369	; 0x1111
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10f      	bne.n	800553c <HAL_TIM_PWM_Stop+0xb4>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	f240 4344 	movw	r3, #1092	; 0x444
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d107      	bne.n	800553c <HAL_TIM_PWM_Stop+0xb4>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40012c00 	.word	0x40012c00
 8005554:	40013400 	.word	0x40013400
 8005558:	40014000 	.word	0x40014000
 800555c:	40014400 	.word	0x40014400
 8005560:	40014800 	.word	0x40014800

08005564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b02      	cmp	r3, #2
 8005578:	d122      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b02      	cmp	r3, #2
 8005586:	d11b      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0202 	mvn.w	r2, #2
 8005590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fad7 	bl	8005b5a <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fac9 	bl	8005b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fada 	bl	8005b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d122      	bne.n	8005614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d11b      	bne.n	8005614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0204 	mvn.w	r2, #4
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 faad 	bl	8005b5a <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa9f 	bl	8005b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fab0 	bl	8005b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b08      	cmp	r3, #8
 8005620:	d122      	bne.n	8005668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b08      	cmp	r3, #8
 800562e:	d11b      	bne.n	8005668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0208 	mvn.w	r2, #8
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2204      	movs	r2, #4
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa83 	bl	8005b5a <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa75 	bl	8005b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fa86 	bl	8005b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b10      	cmp	r3, #16
 8005674:	d122      	bne.n	80056bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b10      	cmp	r3, #16
 8005682:	d11b      	bne.n	80056bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0210 	mvn.w	r2, #16
 800568c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2208      	movs	r2, #8
 8005692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa59 	bl	8005b5a <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa4b 	bl	8005b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fa5c 	bl	8005b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d10e      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d107      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0201 	mvn.w	r2, #1
 80056e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fd f8f4 	bl	80028d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d10e      	bne.n	8005714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005700:	2b80      	cmp	r3, #128	; 0x80
 8005702:	d107      	bne.n	8005714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800570c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 ff56 	bl	80065c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005722:	d10e      	bne.n	8005742 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	2b80      	cmp	r3, #128	; 0x80
 8005730:	d107      	bne.n	8005742 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 ff49 	bl	80065d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d10e      	bne.n	800576e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575a:	2b40      	cmp	r3, #64	; 0x40
 800575c:	d107      	bne.n	800576e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa0a 	bl	8005b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b20      	cmp	r3, #32
 800577a:	d10e      	bne.n	800579a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b20      	cmp	r3, #32
 8005788:	d107      	bne.n	800579a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f06f 0220 	mvn.w	r2, #32
 8005792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 ff09 	bl	80065ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e105      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x226>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b14      	cmp	r3, #20
 80057d2:	f200 80f0 	bhi.w	80059b6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80057d6:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	08005831 	.word	0x08005831
 80057e0:	080059b7 	.word	0x080059b7
 80057e4:	080059b7 	.word	0x080059b7
 80057e8:	080059b7 	.word	0x080059b7
 80057ec:	08005871 	.word	0x08005871
 80057f0:	080059b7 	.word	0x080059b7
 80057f4:	080059b7 	.word	0x080059b7
 80057f8:	080059b7 	.word	0x080059b7
 80057fc:	080058b3 	.word	0x080058b3
 8005800:	080059b7 	.word	0x080059b7
 8005804:	080059b7 	.word	0x080059b7
 8005808:	080059b7 	.word	0x080059b7
 800580c:	080058f3 	.word	0x080058f3
 8005810:	080059b7 	.word	0x080059b7
 8005814:	080059b7 	.word	0x080059b7
 8005818:	080059b7 	.word	0x080059b7
 800581c:	08005935 	.word	0x08005935
 8005820:	080059b7 	.word	0x080059b7
 8005824:	080059b7 	.word	0x080059b7
 8005828:	080059b7 	.word	0x080059b7
 800582c:	08005975 	.word	0x08005975
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fa48 	bl	8005ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0208 	orr.w	r2, r2, #8
 800584a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0204 	bic.w	r2, r2, #4
 800585a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6999      	ldr	r1, [r3, #24]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	619a      	str	r2, [r3, #24]
      break;
 800586e:	e0a3      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fab8 	bl	8005dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800588a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6999      	ldr	r1, [r3, #24]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	021a      	lsls	r2, r3, #8
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	619a      	str	r2, [r3, #24]
      break;
 80058b0:	e082      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fb21 	bl	8005f00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0208 	orr.w	r2, r2, #8
 80058cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0204 	bic.w	r2, r2, #4
 80058dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69d9      	ldr	r1, [r3, #28]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	61da      	str	r2, [r3, #28]
      break;
 80058f0:	e062      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fb89 	bl	8006010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800590c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69d9      	ldr	r1, [r3, #28]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	021a      	lsls	r2, r3, #8
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	61da      	str	r2, [r3, #28]
      break;
 8005932:	e041      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fbd2 	bl	80060e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0208 	orr.w	r2, r2, #8
 800594e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0204 	bic.w	r2, r2, #4
 800595e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005972:	e021      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fc16 	bl	80061ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059b4:	e000      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80059b6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop

080059d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_TIM_ConfigClockSource+0x18>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e0a8      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x16a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d067      	beq.n	8005af8 <HAL_TIM_ConfigClockSource+0x124>
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d80b      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x70>
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d073      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0x144>
 8005a30:	2b10      	cmp	r3, #16
 8005a32:	d802      	bhi.n	8005a3a <HAL_TIM_ConfigClockSource+0x66>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d06f      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005a38:	e078      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d06c      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0x144>
 8005a3e:	2b30      	cmp	r3, #48	; 0x30
 8005a40:	d06a      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005a42:	e073      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d00d      	beq.n	8005a64 <HAL_TIM_ConfigClockSource+0x90>
 8005a48:	2b70      	cmp	r3, #112	; 0x70
 8005a4a:	d804      	bhi.n	8005a56 <HAL_TIM_ConfigClockSource+0x82>
 8005a4c:	2b50      	cmp	r3, #80	; 0x50
 8005a4e:	d033      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0xe4>
 8005a50:	2b60      	cmp	r3, #96	; 0x60
 8005a52:	d041      	beq.n	8005ad8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005a54:	e06a      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5a:	d066      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x156>
 8005a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a60:	d017      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005a62:	e063      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6899      	ldr	r1, [r3, #8]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f000 fc7a 	bl	800636c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	609a      	str	r2, [r3, #8]
      break;
 8005a90:	e04c      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6899      	ldr	r1, [r3, #8]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f000 fc63 	bl	800636c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ab4:	609a      	str	r2, [r3, #8]
      break;
 8005ab6:	e039      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	6859      	ldr	r1, [r3, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f000 fbd7 	bl	8006278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2150      	movs	r1, #80	; 0x50
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fc30 	bl	8006336 <TIM_ITRx_SetConfig>
      break;
 8005ad6:	e029      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f000 fbf6 	bl	80062d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2160      	movs	r1, #96	; 0x60
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fc20 	bl	8006336 <TIM_ITRx_SetConfig>
      break;
 8005af6:	e019      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	461a      	mov	r2, r3
 8005b06:	f000 fbb7 	bl	8006278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2140      	movs	r1, #64	; 0x40
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fc10 	bl	8006336 <TIM_ITRx_SetConfig>
      break;
 8005b16:	e009      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f000 fc07 	bl	8006336 <TIM_ITRx_SetConfig>
      break;
 8005b28:	e000      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
	...

08005b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a40      	ldr	r2, [pc, #256]	; (8005cac <TIM_Base_SetConfig+0x114>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d013      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb6:	d00f      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3d      	ldr	r2, [pc, #244]	; (8005cb0 <TIM_Base_SetConfig+0x118>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a3c      	ldr	r2, [pc, #240]	; (8005cb4 <TIM_Base_SetConfig+0x11c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d007      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a3b      	ldr	r2, [pc, #236]	; (8005cb8 <TIM_Base_SetConfig+0x120>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a3a      	ldr	r2, [pc, #232]	; (8005cbc <TIM_Base_SetConfig+0x124>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d108      	bne.n	8005bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2f      	ldr	r2, [pc, #188]	; (8005cac <TIM_Base_SetConfig+0x114>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01f      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf8:	d01b      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2c      	ldr	r2, [pc, #176]	; (8005cb0 <TIM_Base_SetConfig+0x118>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d017      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2b      	ldr	r2, [pc, #172]	; (8005cb4 <TIM_Base_SetConfig+0x11c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a2a      	ldr	r2, [pc, #168]	; (8005cb8 <TIM_Base_SetConfig+0x120>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00f      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <TIM_Base_SetConfig+0x124>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00b      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <TIM_Base_SetConfig+0x128>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d007      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a27      	ldr	r2, [pc, #156]	; (8005cc4 <TIM_Base_SetConfig+0x12c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a26      	ldr	r2, [pc, #152]	; (8005cc8 <TIM_Base_SetConfig+0x130>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d108      	bne.n	8005c44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a10      	ldr	r2, [pc, #64]	; (8005cac <TIM_Base_SetConfig+0x114>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00f      	beq.n	8005c90 <TIM_Base_SetConfig+0xf8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a12      	ldr	r2, [pc, #72]	; (8005cbc <TIM_Base_SetConfig+0x124>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <TIM_Base_SetConfig+0xf8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a11      	ldr	r2, [pc, #68]	; (8005cc0 <TIM_Base_SetConfig+0x128>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0xf8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <TIM_Base_SetConfig+0x12c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0xf8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a0f      	ldr	r2, [pc, #60]	; (8005cc8 <TIM_Base_SetConfig+0x130>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d103      	bne.n	8005c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	615a      	str	r2, [r3, #20]
}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40000400 	.word	0x40000400
 8005cb4:	40000800 	.word	0x40000800
 8005cb8:	40000c00 	.word	0x40000c00
 8005cbc:	40013400 	.word	0x40013400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	40014400 	.word	0x40014400
 8005cc8:	40014800 	.word	0x40014800

08005ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f023 0201 	bic.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 0302 	bic.w	r3, r3, #2
 8005d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a2c      	ldr	r2, [pc, #176]	; (8005dd8 <TIM_OC1_SetConfig+0x10c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00f      	beq.n	8005d4c <TIM_OC1_SetConfig+0x80>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a2b      	ldr	r2, [pc, #172]	; (8005ddc <TIM_OC1_SetConfig+0x110>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00b      	beq.n	8005d4c <TIM_OC1_SetConfig+0x80>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a2a      	ldr	r2, [pc, #168]	; (8005de0 <TIM_OC1_SetConfig+0x114>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d007      	beq.n	8005d4c <TIM_OC1_SetConfig+0x80>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a29      	ldr	r2, [pc, #164]	; (8005de4 <TIM_OC1_SetConfig+0x118>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC1_SetConfig+0x80>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a28      	ldr	r2, [pc, #160]	; (8005de8 <TIM_OC1_SetConfig+0x11c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10c      	bne.n	8005d66 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0308 	bic.w	r3, r3, #8
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f023 0304 	bic.w	r3, r3, #4
 8005d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <TIM_OC1_SetConfig+0x10c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00f      	beq.n	8005d8e <TIM_OC1_SetConfig+0xc2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1a      	ldr	r2, [pc, #104]	; (8005ddc <TIM_OC1_SetConfig+0x110>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <TIM_OC1_SetConfig+0xc2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <TIM_OC1_SetConfig+0x114>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d007      	beq.n	8005d8e <TIM_OC1_SetConfig+0xc2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <TIM_OC1_SetConfig+0x118>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC1_SetConfig+0xc2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <TIM_OC1_SetConfig+0x11c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d111      	bne.n	8005db2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	621a      	str	r2, [r3, #32]
}
 8005dcc:	bf00      	nop
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800

08005dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f023 0210 	bic.w	r2, r3, #16
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 0320 	bic.w	r3, r3, #32
 8005e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a28      	ldr	r2, [pc, #160]	; (8005eec <TIM_OC2_SetConfig+0x100>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC2_SetConfig+0x6c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <TIM_OC2_SetConfig+0x104>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10d      	bne.n	8005e74 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <TIM_OC2_SetConfig+0x100>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00f      	beq.n	8005e9c <TIM_OC2_SetConfig+0xb0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <TIM_OC2_SetConfig+0x104>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00b      	beq.n	8005e9c <TIM_OC2_SetConfig+0xb0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a1b      	ldr	r2, [pc, #108]	; (8005ef4 <TIM_OC2_SetConfig+0x108>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <TIM_OC2_SetConfig+0xb0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a1a      	ldr	r2, [pc, #104]	; (8005ef8 <TIM_OC2_SetConfig+0x10c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_OC2_SetConfig+0xb0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a19      	ldr	r2, [pc, #100]	; (8005efc <TIM_OC2_SetConfig+0x110>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d113      	bne.n	8005ec4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40013400 	.word	0x40013400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800

08005f00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a27      	ldr	r2, [pc, #156]	; (8005ffc <TIM_OC3_SetConfig+0xfc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_OC3_SetConfig+0x6a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a26      	ldr	r2, [pc, #152]	; (8006000 <TIM_OC3_SetConfig+0x100>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d10d      	bne.n	8005f86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a1c      	ldr	r2, [pc, #112]	; (8005ffc <TIM_OC3_SetConfig+0xfc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00f      	beq.n	8005fae <TIM_OC3_SetConfig+0xae>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a1b      	ldr	r2, [pc, #108]	; (8006000 <TIM_OC3_SetConfig+0x100>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00b      	beq.n	8005fae <TIM_OC3_SetConfig+0xae>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <TIM_OC3_SetConfig+0x104>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <TIM_OC3_SetConfig+0xae>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <TIM_OC3_SetConfig+0x108>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d003      	beq.n	8005fae <TIM_OC3_SetConfig+0xae>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a18      	ldr	r2, [pc, #96]	; (800600c <TIM_OC3_SetConfig+0x10c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d113      	bne.n	8005fd6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	621a      	str	r2, [r3, #32]
}
 8005ff0:	bf00      	nop
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40013400 	.word	0x40013400
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800

08006010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800605e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	031b      	lsls	r3, r3, #12
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <TIM_OC4_SetConfig+0xc0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00f      	beq.n	8006094 <TIM_OC4_SetConfig+0x84>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <TIM_OC4_SetConfig+0xc4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00b      	beq.n	8006094 <TIM_OC4_SetConfig+0x84>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <TIM_OC4_SetConfig+0xc8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <TIM_OC4_SetConfig+0x84>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a15      	ldr	r2, [pc, #84]	; (80060dc <TIM_OC4_SetConfig+0xcc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC4_SetConfig+0x84>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a14      	ldr	r2, [pc, #80]	; (80060e0 <TIM_OC4_SetConfig+0xd0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d109      	bne.n	80060a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800609a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	019b      	lsls	r3, r3, #6
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40013400 	.word	0x40013400
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800

080060e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006128:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a17      	ldr	r2, [pc, #92]	; (8006198 <TIM_OC5_SetConfig+0xb4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00f      	beq.n	800615e <TIM_OC5_SetConfig+0x7a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a16      	ldr	r2, [pc, #88]	; (800619c <TIM_OC5_SetConfig+0xb8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00b      	beq.n	800615e <TIM_OC5_SetConfig+0x7a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a15      	ldr	r2, [pc, #84]	; (80061a0 <TIM_OC5_SetConfig+0xbc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d007      	beq.n	800615e <TIM_OC5_SetConfig+0x7a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a14      	ldr	r2, [pc, #80]	; (80061a4 <TIM_OC5_SetConfig+0xc0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d003      	beq.n	800615e <TIM_OC5_SetConfig+0x7a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a13      	ldr	r2, [pc, #76]	; (80061a8 <TIM_OC5_SetConfig+0xc4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d109      	bne.n	8006172 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006164:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40013400 	.word	0x40013400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800

080061ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	051b      	lsls	r3, r3, #20
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a18      	ldr	r2, [pc, #96]	; (8006264 <TIM_OC6_SetConfig+0xb8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00f      	beq.n	8006228 <TIM_OC6_SetConfig+0x7c>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a17      	ldr	r2, [pc, #92]	; (8006268 <TIM_OC6_SetConfig+0xbc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_OC6_SetConfig+0x7c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a16      	ldr	r2, [pc, #88]	; (800626c <TIM_OC6_SetConfig+0xc0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_OC6_SetConfig+0x7c>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a15      	ldr	r2, [pc, #84]	; (8006270 <TIM_OC6_SetConfig+0xc4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC6_SetConfig+0x7c>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a14      	ldr	r2, [pc, #80]	; (8006274 <TIM_OC6_SetConfig+0xc8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d109      	bne.n	800623c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	029b      	lsls	r3, r3, #10
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40012c00 	.word	0x40012c00
 8006268:	40013400 	.word	0x40013400
 800626c:	40014000 	.word	0x40014000
 8006270:	40014400 	.word	0x40014400
 8006274:	40014800 	.word	0x40014800

08006278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f023 030a 	bic.w	r3, r3, #10
 80062b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b087      	sub	sp, #28
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f023 0210 	bic.w	r2, r3, #16
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	031b      	lsls	r3, r3, #12
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	f043 0307 	orr.w	r3, r3, #7
 8006358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	609a      	str	r2, [r3, #8]
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	021a      	lsls	r2, r3, #8
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	431a      	orrs	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4313      	orrs	r3, r2
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2201      	movs	r2, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1a      	ldr	r2, [r3, #32]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	401a      	ands	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800640c:	2302      	movs	r3, #2
 800640e:	e045      	b.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d004      	beq.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1b      	ldr	r2, [pc, #108]	; (80064ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d108      	bne.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800644a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800646e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	4313      	orrs	r3, r2
 8006478:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40012c00 	.word	0x40012c00
 80064ac:	40013400 	.word	0x40013400

080064b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e065      	b.n	8006598 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	041b      	lsls	r3, r3, #16
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a16      	ldr	r2, [pc, #88]	; (80065a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d115      	bne.n	8006586 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	051b      	lsls	r3, r3, #20
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	40013400 	.word	0x40013400

080065ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e040      	b.n	800667c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fc fca0 	bl	8002f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2224      	movs	r2, #36	; 0x24
 8006614:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0201 	bic.w	r2, r2, #1
 8006624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa98 	bl	8006b5c <UART_SetConfig>
 800662c:	4603      	mov	r3, r0
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e022      	b.n	800667c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fdd4 	bl	80071ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fe5b 	bl	8007330 <UART_CheckIdleState>
 800667a:	4603      	mov	r3, r0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006696:	2b20      	cmp	r3, #32
 8006698:	f040 808a 	bne.w	80067b0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <HAL_UART_Receive_IT+0x24>
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e082      	b.n	80067b2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_UART_Receive_IT+0x36>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e07b      	b.n	80067b2 <HAL_UART_Receive_IT+0x12e>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	88fa      	ldrh	r2, [r7, #6]
 80066cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	88fa      	ldrh	r2, [r7, #6]
 80066d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e6:	d10e      	bne.n	8006706 <HAL_UART_Receive_IT+0x82>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d105      	bne.n	80066fc <HAL_UART_Receive_IT+0x78>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066fa:	e02d      	b.n	8006758 <HAL_UART_Receive_IT+0xd4>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	22ff      	movs	r2, #255	; 0xff
 8006700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006704:	e028      	b.n	8006758 <HAL_UART_Receive_IT+0xd4>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10d      	bne.n	800672a <HAL_UART_Receive_IT+0xa6>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <HAL_UART_Receive_IT+0x9c>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	22ff      	movs	r2, #255	; 0xff
 800671a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800671e:	e01b      	b.n	8006758 <HAL_UART_Receive_IT+0xd4>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	227f      	movs	r2, #127	; 0x7f
 8006724:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006728:	e016      	b.n	8006758 <HAL_UART_Receive_IT+0xd4>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006732:	d10d      	bne.n	8006750 <HAL_UART_Receive_IT+0xcc>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <HAL_UART_Receive_IT+0xc2>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	227f      	movs	r2, #127	; 0x7f
 8006740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006744:	e008      	b.n	8006758 <HAL_UART_Receive_IT+0xd4>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	223f      	movs	r2, #63	; 0x3f
 800674a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800674e:	e003      	b.n	8006758 <HAL_UART_Receive_IT+0xd4>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2222      	movs	r2, #34	; 0x22
 8006762:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	d107      	bne.n	800678e <HAL_UART_Receive_IT+0x10a>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d103      	bne.n	800678e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4a0d      	ldr	r2, [pc, #52]	; (80067c0 <HAL_UART_Receive_IT+0x13c>)
 800678a:	661a      	str	r2, [r3, #96]	; 0x60
 800678c:	e002      	b.n	8006794 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <HAL_UART_Receive_IT+0x140>)
 8006792:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80067aa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e000      	b.n	80067b2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80067b0:	2302      	movs	r3, #2
  }
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	080076a5 	.word	0x080076a5
 80067c4:	080075fb 	.word	0x080075fb

080067c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d164      	bne.n	80068a8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_UART_Transmit_DMA+0x22>
 80067e4:	88fb      	ldrh	r3, [r7, #6]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e05d      	b.n	80068aa <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_UART_Transmit_DMA+0x34>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e056      	b.n	80068aa <HAL_UART_Transmit_DMA+0xe2>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	88fa      	ldrh	r2, [r7, #6]
 800680e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	88fa      	ldrh	r2, [r7, #6]
 8006816:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2221      	movs	r2, #33	; 0x21
 8006824:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800682a:	2b00      	cmp	r3, #0
 800682c:	d02a      	beq.n	8006884 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006832:	4a20      	ldr	r2, [pc, #128]	; (80068b4 <HAL_UART_Transmit_DMA+0xec>)
 8006834:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683a:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <HAL_UART_Transmit_DMA+0xf0>)
 800683c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <HAL_UART_Transmit_DMA+0xf4>)
 8006844:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800684a:	2200      	movs	r2, #0
 800684c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006856:	4619      	mov	r1, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3328      	adds	r3, #40	; 0x28
 800685e:	461a      	mov	r2, r3
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	f7fc fefd 	bl	8003660 <HAL_DMA_Start_IT>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00b      	beq.n	8006884 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2210      	movs	r2, #16
 8006870:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e012      	b.n	80068aa <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2240      	movs	r2, #64	; 0x40
 800688a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068a2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	e000      	b.n	80068aa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80068a8:	2302      	movs	r3, #2
  }
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	080074b5 	.word	0x080074b5
 80068b8:	08007509 	.word	0x08007509
 80068bc:	08007525 	.word	0x08007525

080068c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d113      	bne.n	8006916 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00e      	beq.n	8006916 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d009      	beq.n	8006916 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 80ff 	beq.w	8006b0a <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4798      	blx	r3
      }
      return;
 8006914:	e0f9      	b.n	8006b0a <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 80c1 	beq.w	8006aa0 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d105      	bne.n	8006934 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80b6 	beq.w	8006aa0 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00e      	beq.n	800695c <HAL_UART_IRQHandler+0x9c>
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d009      	beq.n	800695c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006954:	f043 0201 	orr.w	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <HAL_UART_IRQHandler+0xc4>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2202      	movs	r2, #2
 8006976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800697c:	f043 0204 	orr.w	r2, r3, #4
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <HAL_UART_IRQHandler+0xec>
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2204      	movs	r2, #4
 800699e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069a4:	f043 0202 	orr.w	r2, r3, #2
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d013      	beq.n	80069de <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2208      	movs	r2, #8
 80069d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d6:	f043 0208 	orr.w	r2, r3, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8093 	beq.w	8006b0e <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00c      	beq.n	8006a0c <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a10:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	d004      	beq.n	8006a2a <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d031      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fd22 	bl	8007474 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b40      	cmp	r3, #64	; 0x40
 8006a3c:	d123      	bne.n	8006a86 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a4c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d013      	beq.n	8006a7e <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a5a:	4a30      	ldr	r2, [pc, #192]	; (8006b1c <HAL_UART_IRQHandler+0x25c>)
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fc fe5c 	bl	8003720 <HAL_DMA_Abort_IT>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d016      	beq.n	8006a9c <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	e00e      	b.n	8006a9c <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f862 	bl	8006b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	e00a      	b.n	8006a9c <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f85e 	bl	8006b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	e006      	b.n	8006a9c <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f85a 	bl	8006b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006a9a:	e038      	b.n	8006b0e <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9c:	bf00      	nop
    return;
 8006a9e:	e036      	b.n	8006b0e <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00d      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x206>
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006abc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fe45 	bl	800774e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac4:	e026      	b.n	8006b14 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00d      	beq.n	8006aec <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d017      	beq.n	8006b12 <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	4798      	blx	r3
    }
    return;
 8006aea:	e012      	b.n	8006b12 <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <HAL_UART_IRQHandler+0x254>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fd61 	bl	80075c8 <UART_EndTransmit_IT>
    return;
 8006b06:	bf00      	nop
 8006b08:	e004      	b.n	8006b14 <HAL_UART_IRQHandler+0x254>
      return;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <HAL_UART_IRQHandler+0x254>
    return;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <HAL_UART_IRQHandler+0x254>
    return;
 8006b12:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	0800759d 	.word	0x0800759d

08006b20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b5c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006b60:	b088      	sub	sp, #32
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	4bac      	ldr	r3, [pc, #688]	; (8006e44 <UART_SetConfig+0x2e8>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	69f9      	ldr	r1, [r7, #28]
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4aa2      	ldr	r2, [pc, #648]	; (8006e48 <UART_SetConfig+0x2ec>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a99      	ldr	r2, [pc, #612]	; (8006e4c <UART_SetConfig+0x2f0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d121      	bne.n	8006c30 <UART_SetConfig+0xd4>
 8006bec:	4b98      	ldr	r3, [pc, #608]	; (8006e50 <UART_SetConfig+0x2f4>)
 8006bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d816      	bhi.n	8006c28 <UART_SetConfig+0xcc>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <UART_SetConfig+0xa4>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c11 	.word	0x08006c11
 8006c04:	08006c1d 	.word	0x08006c1d
 8006c08:	08006c17 	.word	0x08006c17
 8006c0c:	08006c23 	.word	0x08006c23
 8006c10:	2301      	movs	r3, #1
 8006c12:	76fb      	strb	r3, [r7, #27]
 8006c14:	e0e8      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006c16:	2302      	movs	r3, #2
 8006c18:	76fb      	strb	r3, [r7, #27]
 8006c1a:	e0e5      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	76fb      	strb	r3, [r7, #27]
 8006c20:	e0e2      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006c22:	2308      	movs	r3, #8
 8006c24:	76fb      	strb	r3, [r7, #27]
 8006c26:	e0df      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006c28:	2310      	movs	r3, #16
 8006c2a:	76fb      	strb	r3, [r7, #27]
 8006c2c:	bf00      	nop
 8006c2e:	e0db      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a87      	ldr	r2, [pc, #540]	; (8006e54 <UART_SetConfig+0x2f8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d134      	bne.n	8006ca4 <UART_SetConfig+0x148>
 8006c3a:	4b85      	ldr	r3, [pc, #532]	; (8006e50 <UART_SetConfig+0x2f4>)
 8006c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c40:	f003 030c 	and.w	r3, r3, #12
 8006c44:	2b0c      	cmp	r3, #12
 8006c46:	d829      	bhi.n	8006c9c <UART_SetConfig+0x140>
 8006c48:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <UART_SetConfig+0xf4>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006c85 	.word	0x08006c85
 8006c54:	08006c9d 	.word	0x08006c9d
 8006c58:	08006c9d 	.word	0x08006c9d
 8006c5c:	08006c9d 	.word	0x08006c9d
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006c9d 	.word	0x08006c9d
 8006c68:	08006c9d 	.word	0x08006c9d
 8006c6c:	08006c9d 	.word	0x08006c9d
 8006c70:	08006c8b 	.word	0x08006c8b
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006c9d 	.word	0x08006c9d
 8006c7c:	08006c9d 	.word	0x08006c9d
 8006c80:	08006c97 	.word	0x08006c97
 8006c84:	2300      	movs	r3, #0
 8006c86:	76fb      	strb	r3, [r7, #27]
 8006c88:	e0ae      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	76fb      	strb	r3, [r7, #27]
 8006c8e:	e0ab      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006c90:	2304      	movs	r3, #4
 8006c92:	76fb      	strb	r3, [r7, #27]
 8006c94:	e0a8      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006c96:	2308      	movs	r3, #8
 8006c98:	76fb      	strb	r3, [r7, #27]
 8006c9a:	e0a5      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	76fb      	strb	r3, [r7, #27]
 8006ca0:	bf00      	nop
 8006ca2:	e0a1      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a6b      	ldr	r2, [pc, #428]	; (8006e58 <UART_SetConfig+0x2fc>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d120      	bne.n	8006cf0 <UART_SetConfig+0x194>
 8006cae:	4b68      	ldr	r3, [pc, #416]	; (8006e50 <UART_SetConfig+0x2f4>)
 8006cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cb8:	2b10      	cmp	r3, #16
 8006cba:	d00f      	beq.n	8006cdc <UART_SetConfig+0x180>
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d802      	bhi.n	8006cc6 <UART_SetConfig+0x16a>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <UART_SetConfig+0x174>
 8006cc4:	e010      	b.n	8006ce8 <UART_SetConfig+0x18c>
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d005      	beq.n	8006cd6 <UART_SetConfig+0x17a>
 8006cca:	2b30      	cmp	r3, #48	; 0x30
 8006ccc:	d009      	beq.n	8006ce2 <UART_SetConfig+0x186>
 8006cce:	e00b      	b.n	8006ce8 <UART_SetConfig+0x18c>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	76fb      	strb	r3, [r7, #27]
 8006cd4:	e088      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	76fb      	strb	r3, [r7, #27]
 8006cda:	e085      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006cdc:	2304      	movs	r3, #4
 8006cde:	76fb      	strb	r3, [r7, #27]
 8006ce0:	e082      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006ce2:	2308      	movs	r3, #8
 8006ce4:	76fb      	strb	r3, [r7, #27]
 8006ce6:	e07f      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	76fb      	strb	r3, [r7, #27]
 8006cec:	bf00      	nop
 8006cee:	e07b      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a59      	ldr	r2, [pc, #356]	; (8006e5c <UART_SetConfig+0x300>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d120      	bne.n	8006d3c <UART_SetConfig+0x1e0>
 8006cfa:	4b55      	ldr	r3, [pc, #340]	; (8006e50 <UART_SetConfig+0x2f4>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	d00f      	beq.n	8006d28 <UART_SetConfig+0x1cc>
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	d802      	bhi.n	8006d12 <UART_SetConfig+0x1b6>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <UART_SetConfig+0x1c0>
 8006d10:	e010      	b.n	8006d34 <UART_SetConfig+0x1d8>
 8006d12:	2b80      	cmp	r3, #128	; 0x80
 8006d14:	d005      	beq.n	8006d22 <UART_SetConfig+0x1c6>
 8006d16:	2bc0      	cmp	r3, #192	; 0xc0
 8006d18:	d009      	beq.n	8006d2e <UART_SetConfig+0x1d2>
 8006d1a:	e00b      	b.n	8006d34 <UART_SetConfig+0x1d8>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	76fb      	strb	r3, [r7, #27]
 8006d20:	e062      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d22:	2302      	movs	r3, #2
 8006d24:	76fb      	strb	r3, [r7, #27]
 8006d26:	e05f      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	76fb      	strb	r3, [r7, #27]
 8006d2c:	e05c      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d2e:	2308      	movs	r3, #8
 8006d30:	76fb      	strb	r3, [r7, #27]
 8006d32:	e059      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d34:	2310      	movs	r3, #16
 8006d36:	76fb      	strb	r3, [r7, #27]
 8006d38:	bf00      	nop
 8006d3a:	e055      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a47      	ldr	r2, [pc, #284]	; (8006e60 <UART_SetConfig+0x304>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d124      	bne.n	8006d90 <UART_SetConfig+0x234>
 8006d46:	4b42      	ldr	r3, [pc, #264]	; (8006e50 <UART_SetConfig+0x2f4>)
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d54:	d012      	beq.n	8006d7c <UART_SetConfig+0x220>
 8006d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5a:	d802      	bhi.n	8006d62 <UART_SetConfig+0x206>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <UART_SetConfig+0x214>
 8006d60:	e012      	b.n	8006d88 <UART_SetConfig+0x22c>
 8006d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d66:	d006      	beq.n	8006d76 <UART_SetConfig+0x21a>
 8006d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d6c:	d009      	beq.n	8006d82 <UART_SetConfig+0x226>
 8006d6e:	e00b      	b.n	8006d88 <UART_SetConfig+0x22c>
 8006d70:	2300      	movs	r3, #0
 8006d72:	76fb      	strb	r3, [r7, #27]
 8006d74:	e038      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d76:	2302      	movs	r3, #2
 8006d78:	76fb      	strb	r3, [r7, #27]
 8006d7a:	e035      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	76fb      	strb	r3, [r7, #27]
 8006d80:	e032      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d82:	2308      	movs	r3, #8
 8006d84:	76fb      	strb	r3, [r7, #27]
 8006d86:	e02f      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	76fb      	strb	r3, [r7, #27]
 8006d8c:	bf00      	nop
 8006d8e:	e02b      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a2c      	ldr	r2, [pc, #176]	; (8006e48 <UART_SetConfig+0x2ec>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d124      	bne.n	8006de4 <UART_SetConfig+0x288>
 8006d9a:	4b2d      	ldr	r3, [pc, #180]	; (8006e50 <UART_SetConfig+0x2f4>)
 8006d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da8:	d012      	beq.n	8006dd0 <UART_SetConfig+0x274>
 8006daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dae:	d802      	bhi.n	8006db6 <UART_SetConfig+0x25a>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <UART_SetConfig+0x268>
 8006db4:	e012      	b.n	8006ddc <UART_SetConfig+0x280>
 8006db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dba:	d006      	beq.n	8006dca <UART_SetConfig+0x26e>
 8006dbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc0:	d009      	beq.n	8006dd6 <UART_SetConfig+0x27a>
 8006dc2:	e00b      	b.n	8006ddc <UART_SetConfig+0x280>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	76fb      	strb	r3, [r7, #27]
 8006dc8:	e00e      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	76fb      	strb	r3, [r7, #27]
 8006dce:	e00b      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	76fb      	strb	r3, [r7, #27]
 8006dd4:	e008      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	76fb      	strb	r3, [r7, #27]
 8006dda:	e005      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	76fb      	strb	r3, [r7, #27]
 8006de0:	bf00      	nop
 8006de2:	e001      	b.n	8006de8 <UART_SetConfig+0x28c>
 8006de4:	2310      	movs	r3, #16
 8006de6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <UART_SetConfig+0x2ec>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	f040 80fa 	bne.w	8006fe8 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006df4:	7efb      	ldrb	r3, [r7, #27]
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d836      	bhi.n	8006e68 <UART_SetConfig+0x30c>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <UART_SetConfig+0x2a4>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e69 	.word	0x08006e69
 8006e08:	08006e2d 	.word	0x08006e2d
 8006e0c:	08006e69 	.word	0x08006e69
 8006e10:	08006e33 	.word	0x08006e33
 8006e14:	08006e69 	.word	0x08006e69
 8006e18:	08006e69 	.word	0x08006e69
 8006e1c:	08006e69 	.word	0x08006e69
 8006e20:	08006e3b 	.word	0x08006e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006e24:	f7fd fd10 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8006e28:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e2a:	e020      	b.n	8006e6e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <UART_SetConfig+0x308>)
 8006e2e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e30:	e01d      	b.n	8006e6e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006e32:	f7fd fc73 	bl	800471c <HAL_RCC_GetSysClockFreq>
 8006e36:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e38:	e019      	b.n	8006e6e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e40:	e015      	b.n	8006e6e <UART_SetConfig+0x312>
 8006e42:	bf00      	nop
 8006e44:	efff69f3 	.word	0xefff69f3
 8006e48:	40008000 	.word	0x40008000
 8006e4c:	40013800 	.word	0x40013800
 8006e50:	40021000 	.word	0x40021000
 8006e54:	40004400 	.word	0x40004400
 8006e58:	40004800 	.word	0x40004800
 8006e5c:	40004c00 	.word	0x40004c00
 8006e60:	40005000 	.word	0x40005000
 8006e64:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8006e6c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 81ac 	beq.w	80071ce <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	4413      	add	r3, r2
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d305      	bcc.n	8006e92 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d902      	bls.n	8006e98 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	74fb      	strb	r3, [r7, #19]
 8006e96:	e19a      	b.n	80071ce <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8006e98:	7efb      	ldrb	r3, [r7, #27]
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	f200 8091 	bhi.w	8006fc2 <UART_SetConfig+0x466>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x34c>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006fc3 	.word	0x08006fc3
 8006eb0:	08006f19 	.word	0x08006f19
 8006eb4:	08006fc3 	.word	0x08006fc3
 8006eb8:	08006f4d 	.word	0x08006f4d
 8006ebc:	08006fc3 	.word	0x08006fc3
 8006ec0:	08006fc3 	.word	0x08006fc3
 8006ec4:	08006fc3 	.word	0x08006fc3
 8006ec8:	08006f99 	.word	0x08006f99
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006ecc:	f7fd fcbc 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	f04f 0400 	mov.w	r4, #0
 8006ee0:	0214      	lsls	r4, r2, #8
 8006ee2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006ee6:	020b      	lsls	r3, r1, #8
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6852      	ldr	r2, [r2, #4]
 8006eec:	0852      	lsrs	r2, r2, #1
 8006eee:	4611      	mov	r1, r2
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	eb13 0b01 	adds.w	fp, r3, r1
 8006ef8:	eb44 0c02 	adc.w	ip, r4, r2
 8006efc:	4658      	mov	r0, fp
 8006efe:	4661      	mov	r1, ip
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f04f 0400 	mov.w	r4, #0
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4623      	mov	r3, r4
 8006f0c:	f7f9 f95c 	bl	80001c8 <__aeabi_uldivmod>
 8006f10:	4603      	mov	r3, r0
 8006f12:	460c      	mov	r4, r1
 8006f14:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f16:	e057      	b.n	8006fc8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	f04f 0400 	mov.w	r4, #0
 8006f22:	49b1      	ldr	r1, [pc, #708]	; (80071e8 <UART_SetConfig+0x68c>)
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	eb13 0b01 	adds.w	fp, r3, r1
 8006f2c:	eb44 0c02 	adc.w	ip, r4, r2
 8006f30:	4658      	mov	r0, fp
 8006f32:	4661      	mov	r1, ip
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f04f 0400 	mov.w	r4, #0
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4623      	mov	r3, r4
 8006f40:	f7f9 f942 	bl	80001c8 <__aeabi_uldivmod>
 8006f44:	4603      	mov	r3, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f4a:	e03d      	b.n	8006fc8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006f4c:	f7fd fbe6 	bl	800471c <HAL_RCC_GetSysClockFreq>
 8006f50:	4603      	mov	r3, r0
 8006f52:	4619      	mov	r1, r3
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	f04f 0400 	mov.w	r4, #0
 8006f60:	0214      	lsls	r4, r2, #8
 8006f62:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006f66:	020b      	lsls	r3, r1, #8
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6852      	ldr	r2, [r2, #4]
 8006f6c:	0852      	lsrs	r2, r2, #1
 8006f6e:	4611      	mov	r1, r2
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	eb13 0b01 	adds.w	fp, r3, r1
 8006f78:	eb44 0c02 	adc.w	ip, r4, r2
 8006f7c:	4658      	mov	r0, fp
 8006f7e:	4661      	mov	r1, ip
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f04f 0400 	mov.w	r4, #0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	f7f9 f91c 	bl	80001c8 <__aeabi_uldivmod>
 8006f90:	4603      	mov	r3, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f96:	e017      	b.n	8006fc8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	f04f 0400 	mov.w	r4, #0
 8006fa2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006fa6:	f144 0100 	adc.w	r1, r4, #0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f04f 0400 	mov.w	r4, #0
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4623      	mov	r3, r4
 8006fb6:	f7f9 f907 	bl	80001c8 <__aeabi_uldivmod>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006fc0:	e002      	b.n	8006fc8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	74fb      	strb	r3, [r7, #19]
            break;
 8006fc6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fce:	d308      	bcc.n	8006fe2 <UART_SetConfig+0x486>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd6:	d204      	bcs.n	8006fe2 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	60da      	str	r2, [r3, #12]
 8006fe0:	e0f5      	b.n	80071ce <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	74fb      	strb	r3, [r7, #19]
 8006fe6:	e0f2      	b.n	80071ce <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff0:	d17f      	bne.n	80070f2 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8006ff2:	7efb      	ldrb	r3, [r7, #27]
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d85c      	bhi.n	80070b2 <UART_SetConfig+0x556>
 8006ff8:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0x4a4>)
 8006ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007025 	.word	0x08007025
 8007004:	08007043 	.word	0x08007043
 8007008:	08007061 	.word	0x08007061
 800700c:	080070b3 	.word	0x080070b3
 8007010:	0800707d 	.word	0x0800707d
 8007014:	080070b3 	.word	0x080070b3
 8007018:	080070b3 	.word	0x080070b3
 800701c:	080070b3 	.word	0x080070b3
 8007020:	0800709b 	.word	0x0800709b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007024:	f7fd fc10 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8007028:	4603      	mov	r3, r0
 800702a:	005a      	lsls	r2, r3, #1
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	441a      	add	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	fbb2 f3f3 	udiv	r3, r2, r3
 800703c:	b29b      	uxth	r3, r3
 800703e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007040:	e03a      	b.n	80070b8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007042:	f7fd fc17 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 8007046:	4603      	mov	r3, r0
 8007048:	005a      	lsls	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	085b      	lsrs	r3, r3, #1
 8007050:	441a      	add	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	fbb2 f3f3 	udiv	r3, r2, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800705e:	e02b      	b.n	80070b8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	085b      	lsrs	r3, r3, #1
 8007066:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800706a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6852      	ldr	r2, [r2, #4]
 8007072:	fbb3 f3f2 	udiv	r3, r3, r2
 8007076:	b29b      	uxth	r3, r3
 8007078:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800707a:	e01d      	b.n	80070b8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800707c:	f7fd fb4e 	bl	800471c <HAL_RCC_GetSysClockFreq>
 8007080:	4603      	mov	r3, r0
 8007082:	005a      	lsls	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	085b      	lsrs	r3, r3, #1
 800708a:	441a      	add	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	fbb2 f3f3 	udiv	r3, r2, r3
 8007094:	b29b      	uxth	r3, r3
 8007096:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007098:	e00e      	b.n	80070b8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80070b0:	e002      	b.n	80070b8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	74fb      	strb	r3, [r7, #19]
        break;
 80070b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b0f      	cmp	r3, #15
 80070bc:	d916      	bls.n	80070ec <UART_SetConfig+0x590>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c4:	d212      	bcs.n	80070ec <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f023 030f 	bic.w	r3, r3, #15
 80070ce:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	085b      	lsrs	r3, r3, #1
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	b29a      	uxth	r2, r3
 80070dc:	897b      	ldrh	r3, [r7, #10]
 80070de:	4313      	orrs	r3, r2
 80070e0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	897a      	ldrh	r2, [r7, #10]
 80070e8:	60da      	str	r2, [r3, #12]
 80070ea:	e070      	b.n	80071ce <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	74fb      	strb	r3, [r7, #19]
 80070f0:	e06d      	b.n	80071ce <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80070f2:	7efb      	ldrb	r3, [r7, #27]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d859      	bhi.n	80071ac <UART_SetConfig+0x650>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <UART_SetConfig+0x5a4>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007125 	.word	0x08007125
 8007104:	08007141 	.word	0x08007141
 8007108:	0800715d 	.word	0x0800715d
 800710c:	080071ad 	.word	0x080071ad
 8007110:	08007179 	.word	0x08007179
 8007114:	080071ad 	.word	0x080071ad
 8007118:	080071ad 	.word	0x080071ad
 800711c:	080071ad 	.word	0x080071ad
 8007120:	08007195 	.word	0x08007195
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007124:	f7fd fb90 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8007128:	4602      	mov	r2, r0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	441a      	add	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	fbb2 f3f3 	udiv	r3, r2, r3
 800713a:	b29b      	uxth	r3, r3
 800713c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800713e:	e038      	b.n	80071b2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007140:	f7fd fb98 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 8007144:	4602      	mov	r2, r0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	085b      	lsrs	r3, r3, #1
 800714c:	441a      	add	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	fbb2 f3f3 	udiv	r3, r2, r3
 8007156:	b29b      	uxth	r3, r3
 8007158:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800715a:	e02a      	b.n	80071b2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007166:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6852      	ldr	r2, [r2, #4]
 800716e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007172:	b29b      	uxth	r3, r3
 8007174:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007176:	e01c      	b.n	80071b2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007178:	f7fd fad0 	bl	800471c <HAL_RCC_GetSysClockFreq>
 800717c:	4602      	mov	r2, r0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	085b      	lsrs	r3, r3, #1
 8007184:	441a      	add	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	fbb2 f3f3 	udiv	r3, r2, r3
 800718e:	b29b      	uxth	r3, r3
 8007190:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007192:	e00e      	b.n	80071b2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	085b      	lsrs	r3, r3, #1
 800719a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80071aa:	e002      	b.n	80071b2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	74fb      	strb	r3, [r7, #19]
        break;
 80071b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b0f      	cmp	r3, #15
 80071b6:	d908      	bls.n	80071ca <UART_SetConfig+0x66e>
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071be:	d204      	bcs.n	80071ca <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	60da      	str	r2, [r3, #12]
 80071c8:	e001      	b.n	80071ce <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80071da:	7cfb      	ldrb	r3, [r7, #19]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80071e6:	bf00      	nop
 80071e8:	f4240000 	.word	0xf4240000

080071ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01a      	beq.n	8007302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ea:	d10a      	bne.n	8007302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	605a      	str	r2, [r3, #4]
  }
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af02      	add	r7, sp, #8
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800733e:	f7fb ff97 	bl	8003270 <HAL_GetTick>
 8007342:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b08      	cmp	r3, #8
 8007350:	d10e      	bne.n	8007370 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007352:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f82a 	bl	80073ba <UART_WaitOnFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e020      	b.n	80073b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b04      	cmp	r3, #4
 800737c:	d10e      	bne.n	800739c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800737e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f814 	bl	80073ba <UART_WaitOnFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e00a      	b.n	80073b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	603b      	str	r3, [r7, #0]
 80073c6:	4613      	mov	r3, r2
 80073c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ca:	e02a      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073d2:	d026      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073d4:	f7fb ff4c 	bl	8003270 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d302      	bcc.n	80073ea <UART_WaitOnFlagUntilTimeout+0x30>
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d11b      	bne.n	8007422 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e00f      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69da      	ldr	r2, [r3, #28]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	4013      	ands	r3, r2
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	429a      	cmp	r2, r3
 8007430:	bf0c      	ite	eq
 8007432:	2301      	moveq	r3, #1
 8007434:	2300      	movne	r3, #0
 8007436:	b2db      	uxtb	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	429a      	cmp	r2, r3
 800743e:	d0c5      	beq.n	80073cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007460:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2220      	movs	r2, #32
 8007466:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800748a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0201 	bic.w	r2, r2, #1
 800749a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d114      	bne.n	80074fa <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074e6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074f8:	e002      	b.n	8007500 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff fb10 	bl	8006b20 <HAL_UART_TxCpltCallback>
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fb0c 	bl	8006b34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800751c:	bf00      	nop
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007536:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800753c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007548:	2b80      	cmp	r3, #128	; 0x80
 800754a:	d109      	bne.n	8007560 <UART_DMAError+0x3c>
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b21      	cmp	r3, #33	; 0x21
 8007550:	d106      	bne.n	8007560 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2200      	movs	r2, #0
 8007556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800755a:	6978      	ldr	r0, [r7, #20]
 800755c:	f7ff ff75 	bl	800744a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d109      	bne.n	8007582 <UART_DMAError+0x5e>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b22      	cmp	r3, #34	; 0x22
 8007572:	d106      	bne.n	8007582 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2200      	movs	r2, #0
 8007578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800757c:	6978      	ldr	r0, [r7, #20]
 800757e:	f7ff ff79 	bl	8007474 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007586:	f043 0210 	orr.w	r2, r3, #16
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800758e:	6978      	ldr	r0, [r7, #20]
 8007590:	f7ff fada 	bl	8006b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007594:	bf00      	nop
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7ff fac4 	bl	8006b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c0:	bf00      	nop
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff fa97 	bl	8006b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007608:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800760e:	2b22      	cmp	r3, #34	; 0x22
 8007610:	d13a      	bne.n	8007688 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007618:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800761a:	89bb      	ldrh	r3, [r7, #12]
 800761c:	b2d9      	uxtb	r1, r3
 800761e:	89fb      	ldrh	r3, [r7, #14]
 8007620:	b2da      	uxtb	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	400a      	ands	r2, r1
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d123      	bne.n	800769c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007662:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0201 	bic.w	r2, r2, #1
 8007672:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7fb f8ef 	bl	8002864 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007686:	e009      	b.n	800769c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	8b1b      	ldrh	r3, [r3, #24]
 800768e:	b29a      	uxth	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0208 	orr.w	r2, r2, #8
 8007698:	b292      	uxth	r2, r2
 800769a:	831a      	strh	r2, [r3, #24]
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076b2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b8:	2b22      	cmp	r3, #34	; 0x22
 80076ba:	d13a      	bne.n	8007732 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076c2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80076ca:	89ba      	ldrh	r2, [r7, #12]
 80076cc:	89fb      	ldrh	r3, [r7, #14]
 80076ce:	4013      	ands	r3, r2
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	1c9a      	adds	r2, r3, #2
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d123      	bne.n	8007746 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800770c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0201 	bic.w	r2, r2, #1
 800771c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fb f89a 	bl	8002864 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007730:	e009      	b.n	8007746 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	8b1b      	ldrh	r3, [r3, #24]
 8007738:	b29a      	uxth	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0208 	orr.w	r2, r2, #8
 8007742:	b292      	uxth	r2, r2
 8007744:	831a      	strh	r2, [r3, #24]
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <__libc_init_array>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	4e0d      	ldr	r6, [pc, #52]	; (800779c <__libc_init_array+0x38>)
 8007768:	4c0d      	ldr	r4, [pc, #52]	; (80077a0 <__libc_init_array+0x3c>)
 800776a:	1ba4      	subs	r4, r4, r6
 800776c:	10a4      	asrs	r4, r4, #2
 800776e:	2500      	movs	r5, #0
 8007770:	42a5      	cmp	r5, r4
 8007772:	d109      	bne.n	8007788 <__libc_init_array+0x24>
 8007774:	4e0b      	ldr	r6, [pc, #44]	; (80077a4 <__libc_init_array+0x40>)
 8007776:	4c0c      	ldr	r4, [pc, #48]	; (80077a8 <__libc_init_array+0x44>)
 8007778:	f000 f83a 	bl	80077f0 <_init>
 800777c:	1ba4      	subs	r4, r4, r6
 800777e:	10a4      	asrs	r4, r4, #2
 8007780:	2500      	movs	r5, #0
 8007782:	42a5      	cmp	r5, r4
 8007784:	d105      	bne.n	8007792 <__libc_init_array+0x2e>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800778c:	4798      	blx	r3
 800778e:	3501      	adds	r5, #1
 8007790:	e7ee      	b.n	8007770 <__libc_init_array+0xc>
 8007792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007796:	4798      	blx	r3
 8007798:	3501      	adds	r5, #1
 800779a:	e7f2      	b.n	8007782 <__libc_init_array+0x1e>
 800779c:	08007a94 	.word	0x08007a94
 80077a0:	08007a94 	.word	0x08007a94
 80077a4:	08007a94 	.word	0x08007a94
 80077a8:	08007a98 	.word	0x08007a98

080077ac <memcmp>:
 80077ac:	b530      	push	{r4, r5, lr}
 80077ae:	2400      	movs	r4, #0
 80077b0:	42a2      	cmp	r2, r4
 80077b2:	d101      	bne.n	80077b8 <memcmp+0xc>
 80077b4:	2000      	movs	r0, #0
 80077b6:	e007      	b.n	80077c8 <memcmp+0x1c>
 80077b8:	5d03      	ldrb	r3, [r0, r4]
 80077ba:	3401      	adds	r4, #1
 80077bc:	190d      	adds	r5, r1, r4
 80077be:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80077c2:	42ab      	cmp	r3, r5
 80077c4:	d0f4      	beq.n	80077b0 <memcmp+0x4>
 80077c6:	1b58      	subs	r0, r3, r5
 80077c8:	bd30      	pop	{r4, r5, pc}

080077ca <memcpy>:
 80077ca:	b510      	push	{r4, lr}
 80077cc:	1e43      	subs	r3, r0, #1
 80077ce:	440a      	add	r2, r1
 80077d0:	4291      	cmp	r1, r2
 80077d2:	d100      	bne.n	80077d6 <memcpy+0xc>
 80077d4:	bd10      	pop	{r4, pc}
 80077d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077de:	e7f7      	b.n	80077d0 <memcpy+0x6>

080077e0 <memset>:
 80077e0:	4402      	add	r2, r0
 80077e2:	4603      	mov	r3, r0
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d100      	bne.n	80077ea <memset+0xa>
 80077e8:	4770      	bx	lr
 80077ea:	f803 1b01 	strb.w	r1, [r3], #1
 80077ee:	e7f9      	b.n	80077e4 <memset+0x4>

080077f0 <_init>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	bf00      	nop
 80077f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f6:	bc08      	pop	{r3}
 80077f8:	469e      	mov	lr, r3
 80077fa:	4770      	bx	lr

080077fc <_fini>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr
