
MouseTreadmillSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08005248  08005248  00015248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c0  080054c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054c8  080054c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080054d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  2000000c  080054dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  080054dc  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7f0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a18  00000000  00000000  0002b82c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c0  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000910  00000000  00000000  0002dc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000269cd  00000000  00000000  0002e518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b14  00000000  00000000  00054ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb340  00000000  00000000  0005d9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  00148db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005230 	.word	0x08005230

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005230 	.word	0x08005230

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	4053      	eors	r3, r2
 80004de:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	b25a      	sxtb	r2, r3
 80004e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ea:	4053      	eors	r3, r2
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	b21a      	sxth	r2, r3
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	b21b      	sxth	r3, r3
 8000500:	4053      	eors	r3, r2
 8000502:	b21a      	sxth	r2, r3
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	b21b      	sxth	r3, r3
 800050a:	4053      	eors	r3, r2
 800050c:	b21a      	sxth	r2, r3
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	091b      	lsrs	r3, r3, #4
 8000512:	b2db      	uxtb	r3, r3
 8000514:	b21b      	sxth	r3, r3
 8000516:	4053      	eors	r3, r2
 8000518:	b21b      	sxth	r3, r3
 800051a:	b29a      	uxth	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	801a      	strh	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053a:	801a      	strh	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000554:	f107 030e 	add.w	r3, r7, #14
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffe7 	bl	800052c <crc_init>
	while (length--) {
 800055e:	e009      	b.n	8000574 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f107 020e 	add.w	r2, r7, #14
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ffaa 	bl	80004c8 <crc_accumulate>
	while (length--) {
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	1e5a      	subs	r2, r3, #1
 8000578:	807a      	strh	r2, [r7, #2]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f0      	bne.n	8000560 <crc_calculate+0x18>
        }
        return crcTmp;
 800057e:	89fb      	ldrh	r3, [r7, #14]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	4613      	mov	r3, r2
 8000594:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	617b      	str	r3, [r7, #20]
	while (length--) {
 800059a:	e007      	b.n	80005ac <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	617a      	str	r2, [r7, #20]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	68f9      	ldr	r1, [r7, #12]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff8e 	bl	80004c8 <crc_accumulate>
	while (length--) {
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	80fa      	strh	r2, [r7, #6]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f2      	bne.n	800059c <crc_accumulate_buffer+0x14>
        }
}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <mavlink_sha256_init+0x50>)
 80005d8:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <mavlink_sha256_init+0x54>)
 80005de:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <mavlink_sha256_init+0x58>)
 80005e4:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <mavlink_sha256_init+0x5c>)
 80005ea:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <mavlink_sha256_init+0x60>)
 80005f0:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <mavlink_sha256_init+0x64>)
 80005f6:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <mavlink_sha256_init+0x68>)
 80005fc:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <mavlink_sha256_init+0x6c>)
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	6a09e667 	.word	0x6a09e667
 8000614:	bb67ae85 	.word	0xbb67ae85
 8000618:	3c6ef372 	.word	0x3c6ef372
 800061c:	a54ff53a 	.word	0xa54ff53a
 8000620:	510e527f 	.word	0x510e527f
 8000624:	9b05688c 	.word	0x9b05688c
 8000628:	1f83d9ab 	.word	0x1f83d9ab
 800062c:	5be0cd19 	.word	0x5be0cd19

08000630 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000630:	b480      	push	{r7}
 8000632:	b0cf      	sub	sp, #316	; 0x13c
 8000634:	af00      	add	r7, sp, #0
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	6018      	str	r0, [r3, #0]
 800063a:	463b      	mov	r3, r7
 800063c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000694:	e011      	b.n	80006ba <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 8000696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	463a      	mov	r2, r7
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80006ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80006b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006b4:	3301      	adds	r3, #1
 80006b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	dde9      	ble.n	8000696 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80006c2:	2310      	movs	r3, #16
 80006c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006c8:	e057      	b.n	800077a <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006ce:	1e9a      	subs	r2, r3, #2
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d8:	ea4f 4273 	mov.w	r2, r3, ror #17
 80006dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e0:	1e99      	subs	r1, r3, #2
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006ea:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80006ee:	405a      	eors	r2, r3
 80006f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006f4:	1e99      	subs	r1, r3, #2
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006fe:	0a9b      	lsrs	r3, r3, #10
 8000700:	405a      	eors	r2, r3
 8000702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000706:	1fd9      	subs	r1, r3, #7
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000710:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000716:	f1a3 010f 	sub.w	r1, r3, #15
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000722:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800072a:	f1a3 000f 	sub.w	r0, r3, #15
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000736:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800073a:	4059      	eors	r1, r3
 800073c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000740:	f1a3 000f 	sub.w	r0, r3, #15
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000750:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000756:	f1a3 0110 	sub.w	r1, r3, #16
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000762:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800076c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000774:	3301      	adds	r3, #1
 8000776:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800077a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800077e:	2b3f      	cmp	r3, #63	; 0x3f
 8000780:	dda3      	ble.n	80006ca <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000788:	e076      	b.n	8000878 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800078a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800078e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000792:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000796:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800079a:	405a      	eors	r2, r3
 800079c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007a0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80007a4:	405a      	eors	r2, r3
 80007a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007aa:	441a      	add	r2, r3
 80007ac:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80007b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007b4:	4019      	ands	r1, r3
 80007b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007ba:	43d8      	mvns	r0, r3
 80007bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007c0:	4003      	ands	r3, r0
 80007c2:	404b      	eors	r3, r1
 80007c4:	441a      	add	r2, r3
 80007c6:	4956      	ldr	r1, [pc, #344]	; (8000920 <mavlink_sha256_calc+0x2f0>)
 80007c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d0:	441a      	add	r2, r3
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80007da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007de:	4413      	add	r3, r2
 80007e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80007e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007e8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80007ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007f0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80007f4:	405a      	eors	r2, r3
 80007f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007fa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80007fe:	405a      	eors	r2, r3
 8000800:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000808:	4059      	eors	r1, r3
 800080a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800080e:	4019      	ands	r1, r3
 8000810:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000818:	4003      	ands	r3, r0
 800081a:	404b      	eors	r3, r1
 800081c:	4413      	add	r3, r2
 800081e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8000822:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000826:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 800082a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800082e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000832:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000836:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 800083a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800083e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000842:	4413      	add	r3, r2
 8000844:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800084c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000850:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000854:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000858:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800085c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000860:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000868:	4413      	add	r3, r2
 800086a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 800086e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000872:	3301      	adds	r3, #1
 8000874:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800087c:	2b3f      	cmp	r3, #63	; 0x3f
 800087e:	dd84      	ble.n	800078a <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800088a:	441a      	add	r2, r3
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	609a      	str	r2, [r3, #8]
    B += BB;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800089c:	441a      	add	r2, r3
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	60da      	str	r2, [r3, #12]
    C += CC;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008ae:	441a      	add	r2, r3
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	611a      	str	r2, [r3, #16]
    D += DD;
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80008c0:	441a      	add	r2, r3
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	615a      	str	r2, [r3, #20]
    E += EE;
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008d2:	441a      	add	r2, r3
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	619a      	str	r2, [r3, #24]
    F += FF;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008e4:	441a      	add	r2, r3
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	61da      	str	r2, [r3, #28]
    G += GG;
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6a1a      	ldr	r2, [r3, #32]
 80008f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008f6:	441a      	add	r2, r3
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	621a      	str	r2, [r3, #32]
    H += HH;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000904:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000908:	441a      	add	r2, r3
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000910:	bf00      	nop
 8000912:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	08005248 	.word	0x08005248

08000924 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	; 0x70
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	441a      	add	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800094e:	429a      	cmp	r2, r3
 8000950:	d904      	bls.n	800095c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 800095c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000966:	e054      	b.n	8000a12 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8000968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800096a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800096e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000974:	429a      	cmp	r2, r3
 8000976:	d201      	bcs.n	800097c <mavlink_sha256_update+0x58>
            l = len;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000984:	4413      	add	r3, r2
 8000986:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000988:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fc3d 	bl	800520a <memcpy>
	offset += l;
 8000990:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000994:	4413      	add	r3, r2
 8000996:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800099a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800099c:	4413      	add	r3, r2
 800099e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80009a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009aa:	2b40      	cmp	r3, #64	; 0x40
 80009ac:	d131      	bne.n	8000a12 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3328      	adds	r3, #40	; 0x28
 80009b2:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 80009b4:	2300      	movs	r3, #0
 80009b6:	663b      	str	r3, [r7, #96]	; 0x60
 80009b8:	e020      	b.n	80009fc <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80009ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009c0:	4413      	add	r3, r2
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80009d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009d2:	78da      	ldrb	r2, [r3, #3]
 80009d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d6:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	3301      	adds	r3, #1
 80009dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009de:	7892      	ldrb	r2, [r2, #2]
 80009e0:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80009e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009e4:	3302      	adds	r3, #2
 80009e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009e8:	7852      	ldrb	r2, [r2, #1]
 80009ea:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80009ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ee:	3303      	adds	r3, #3
 80009f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80009f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009f8:	3301      	adds	r3, #1
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
 80009fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	dddb      	ble.n	80009ba <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fe11 	bl	8000630 <mavlink_sha256_calc>
	    offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1a7      	bne.n	8000968 <mavlink_sha256_update+0x44>
	}
    }
}
 8000a18:	bf00      	nop
 8000a1a:	3770      	adds	r7, #112	; 0x70
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b098      	sub	sp, #96	; 0x60
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a38:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a40:	3301      	adds	r3, #1
 8000a42:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3308      	adds	r3, #8
 8000a48:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	3301      	adds	r3, #1
 8000a54:	2247      	movs	r2, #71	; 0x47
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fbe1 	bl	8005220 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a64:	3307      	adds	r3, #7
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a6c:	440b      	add	r3, r1
 8000a6e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	0a1a      	lsrs	r2, r3, #8
 8000a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a7a:	3306      	adds	r3, #6
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a82:	440b      	add	r3, r1
 8000a84:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	0c1a      	lsrs	r2, r3, #16
 8000a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a90:	3305      	adds	r3, #5
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a98:	440b      	add	r3, r1
 8000a9a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	0e1a      	lsrs	r2, r3, #24
 8000aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aae:	440b      	add	r3, r1
 8000ab0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aba:	3303      	adds	r3, #3
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	0a1a      	lsrs	r2, r3, #8
 8000ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ad8:	440b      	add	r3, r1
 8000ada:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	0c1a      	lsrs	r2, r3, #16
 8000ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aee:	440b      	add	r3, r1
 8000af0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	0e1b      	lsrs	r3, r3, #24
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b0a:	f103 0208 	add.w	r2, r3, #8
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff05 	bl	8000924 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b1c:	78da      	ldrb	r2, [r3, #3]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b28:	7892      	ldrb	r2, [r2, #2]
 8000b2a:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	3302      	adds	r3, #2
 8000b30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b32:	7852      	ldrb	r2, [r2, #1]
 8000b34:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	3304      	adds	r3, #4
 8000b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b46:	79d2      	ldrb	r2, [r2, #7]
 8000b48:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	3305      	adds	r3, #5
 8000b4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b50:	7992      	ldrb	r2, [r2, #6]
 8000b52:	701a      	strb	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3760      	adds	r7, #96	; 0x60
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <mavlink_get_channel_status+0x24>)
 8000b72:	4413      	add	r3, r2
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000050 	.word	0x20000050

08000b84 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b0a1      	sub	sp, #132	; 0x84
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <mavlink_sign_packet+0x20>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <mavlink_sign_packet+0x24>
	    return 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e04f      	b.n	8000c48 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	785a      	ldrb	r2, [r3, #1]
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000bb6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f107 0110 	add.w	r1, r7, #16
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fb20 	bl	800520a <memcpy>
	signing->timestamp++;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000bd0:	1c4b      	adds	r3, r1, #1
 8000bd2:	f142 0400 	adc.w	r4, r2, #0
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fced 	bl	80005c0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f103 0110 	add.w	r1, r3, #16
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe96 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000bf8:	78fa      	ldrb	r2, [r7, #3]
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe8f 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000c06:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fe86 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe7e 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe77 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1dda      	adds	r2, r3, #7
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff feed 	bl	8000a20 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000c46:	230d      	movs	r3, #13
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3784      	adds	r7, #132	; 0x84
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd90      	pop	{r4, r7, pc}

08000c50 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c5c:	e002      	b.n	8000c64 <_mav_trim_payload+0x14>
		length--;
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d906      	bls.n	8000c78 <_mav_trim_payload+0x28>
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f2      	beq.n	8000c5e <_mav_trim_payload+0xe>
	}
	return length;
 8000c78:	78fb      	ldrb	r3, [r7, #3]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c88:	b08f      	sub	sp, #60	; 0x3c
 8000c8a:	af04      	add	r7, sp, #16
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	72fb      	strb	r3, [r7, #11]
 8000c94:	4613      	mov	r3, r2
 8000c96:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7b1b      	ldrb	r3, [r3, #12]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf14      	ite	ne
 8000ca4:	2301      	movne	r3, #1
 8000ca6:	2300      	moveq	r3, #0
 8000ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00c      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <mavlink_finalize_message_buffer+0x50>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000cda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8000ce6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <mavlink_finalize_message_buffer+0x6c>
 8000cee:	230d      	movs	r3, #13
 8000cf0:	e000      	b.n	8000cf4 <mavlink_finalize_message_buffer+0x6e>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8000cfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	22fe      	movs	r2, #254	; 0xfe
 8000d0a:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d12:	e002      	b.n	8000d1a <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	22fd      	movs	r2, #253	; 0xfd
 8000d18:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000d1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <mavlink_finalize_message_buffer+0xb2>
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	330c      	adds	r3, #12
 8000d26:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff8f 	bl	8000c50 <_mav_trim_payload>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	e001      	b.n	8000d3c <mavlink_finalize_message_buffer+0xb6>
 8000d38:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	7afa      	ldrb	r2, [r7, #11]
 8000d44:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	7aba      	ldrb	r2, [r7, #10]
 8000d4a:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8000d52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	799a      	ldrb	r2, [r3, #6]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	799b      	ldrb	r3, [r3, #6]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	78db      	ldrb	r3, [r3, #3]
 8000d8c:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8000d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d013      	beq.n	8000dbe <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	799b      	ldrb	r3, [r3, #6]
 8000d9a:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	79db      	ldrb	r3, [r3, #7]
 8000da0:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	7a1b      	ldrb	r3, [r3, #8]
 8000da6:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	7a5a      	ldrb	r2, [r3, #9]
 8000dac:	7a99      	ldrb	r1, [r3, #10]
 8000dae:	0209      	lsls	r1, r1, #8
 8000db0:	430a      	orrs	r2, r1
 8000db2:	7adb      	ldrb	r3, [r3, #11]
 8000db4:	041b      	lsls	r3, r3, #16
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	777b      	strb	r3, [r7, #29]
 8000dbc:	e030      	b.n	8000e20 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	791b      	ldrb	r3, [r3, #4]
 8000dc2:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	795b      	ldrb	r3, [r3, #5]
 8000dc8:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	79db      	ldrb	r3, [r3, #7]
 8000dd4:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	7a1b      	ldrb	r3, [r3, #8]
 8000dda:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	7a5a      	ldrb	r2, [r3, #9]
 8000de0:	7a99      	ldrb	r1, [r3, #10]
 8000de2:	0209      	lsls	r1, r1, #8
 8000de4:	430a      	orrs	r2, r1
 8000de6:	7adb      	ldrb	r3, [r3, #11]
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	7a5a      	ldrb	r2, [r3, #9]
 8000df4:	7a99      	ldrb	r1, [r3, #10]
 8000df6:	0209      	lsls	r1, r1, #8
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	7adb      	ldrb	r3, [r3, #11]
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	121b      	asrs	r3, r3, #8
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	7a5a      	ldrb	r2, [r3, #9]
 8000e0c:	7a99      	ldrb	r1, [r3, #10]
 8000e0e:	0209      	lsls	r1, r1, #8
 8000e10:	430a      	orrs	r2, r1
 8000e12:	7adb      	ldrb	r3, [r3, #11]
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4313      	orrs	r3, r2
 8000e18:	141b      	asrs	r3, r3, #16
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8000e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb88 	bl	8000548 <crc_calculate>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f103 010c 	add.w	r1, r3, #12
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f107 0316 	add.w	r3, r7, #22
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb9b 	bl	8000588 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8000e52:	f107 0216 	add.w	r2, r7, #22
 8000e56:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb33 	bl	80004c8 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000e62:	8af9      	ldrh	r1, [r7, #22]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	330c      	adds	r3, #12
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	78d2      	ldrb	r2, [r2, #3]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b2ca      	uxtb	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000e72:	8afb      	ldrh	r3, [r7, #22]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b299      	uxth	r1, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f103 020c 	add.w	r2, r3, #12
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	78db      	ldrb	r3, [r3, #3]
 8000e82:	3301      	adds	r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8000e8a:	8afa      	ldrh	r2, [r7, #22]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8000e90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01a      	beq.n	8000ece <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000eaa:	68f9      	ldr	r1, [r7, #12]
 8000eac:	310c      	adds	r1, #12
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8000eb2:	4401      	add	r1, r0
 8000eb4:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8000eb8:	f107 0018 	add.w	r0, r7, #24
 8000ebc:	9102      	str	r1, [sp, #8]
 8000ebe:	9201      	str	r2, [sp, #4]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4633      	mov	r3, r6
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f7ff fe5b 	bl	8000b84 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4413      	add	r3, r2
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	b29b      	uxth	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	372c      	adds	r7, #44	; 0x2c
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ef4 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	70fb      	strb	r3, [r7, #3]
 8000f06:	460b      	mov	r3, r1
 8000f08:	70bb      	strb	r3, [r7, #2]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8000f0e:	787b      	ldrb	r3, [r7, #1]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fe23 	bl	8000b5c <mavlink_get_channel_status>
 8000f16:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8000f18:	78ba      	ldrb	r2, [r7, #2]
 8000f1a:	78f9      	ldrb	r1, [r7, #3]
 8000f1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	7f3b      	ldrb	r3, [r7, #28]
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	7e3b      	ldrb	r3, [r7, #24]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff feaa 	bl	8000c86 <mavlink_finalize_message_buffer>
 8000f32:	4603      	mov	r3, r0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	70fb      	strb	r3, [r7, #3]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70bb      	strb	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8000f56:	78ba      	ldrb	r2, [r7, #2]
 8000f58:	78f9      	ldrb	r1, [r7, #3]
 8000f5a:	7d3b      	ldrb	r3, [r7, #20]
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	7c3b      	ldrb	r3, [r7, #16]
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2300      	movs	r3, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffc3 	bl	8000ef4 <mavlink_finalize_message_chan>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000f8e:	d13a      	bne.n	8001006 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000f94:	2305      	movs	r3, #5
 8000f96:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	789a      	ldrb	r2, [r3, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3302      	adds	r3, #2
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	7992      	ldrb	r2, [r2, #6]
 8000fb0:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3303      	adds	r3, #3
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	79d2      	ldrb	r2, [r2, #7]
 8000fba:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	7a12      	ldrb	r2, [r2, #8]
 8000fc4:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	7a5a      	ldrb	r2, [r3, #9]
 8000fca:	7a99      	ldrb	r1, [r3, #10]
 8000fcc:	0209      	lsls	r1, r1, #8
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	7adb      	ldrb	r3, [r3, #11]
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3305      	adds	r3, #5
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	1d98      	adds	r0, r3, #6
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f103 010c 	add.w	r1, r3, #12
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	78db      	ldrb	r3, [r3, #3]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f004 f90b 	bl	800520a <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8000ff4:	7dbb      	ldrb	r3, [r7, #22]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	78d2      	ldrb	r2, [r2, #3]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e06c      	b.n	80010e0 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	330c      	adds	r3, #12
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe1e 	bl	8000c50 <_mav_trim_payload>
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001018:	2309      	movs	r3, #9
 800101a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	789a      	ldrb	r2, [r3, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3302      	adds	r3, #2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	7912      	ldrb	r2, [r2, #4]
 8001034:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3303      	adds	r3, #3
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	7952      	ldrb	r2, [r2, #5]
 800103e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3304      	adds	r3, #4
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	7992      	ldrb	r2, [r2, #6]
 8001048:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3305      	adds	r3, #5
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	79d2      	ldrb	r2, [r2, #7]
 8001052:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3306      	adds	r3, #6
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	7a12      	ldrb	r2, [r2, #8]
 800105c:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	7a5a      	ldrb	r2, [r3, #9]
 8001062:	7a99      	ldrb	r1, [r3, #10]
 8001064:	0209      	lsls	r1, r1, #8
 8001066:	430a      	orrs	r2, r1
 8001068:	7adb      	ldrb	r3, [r3, #11]
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	4313      	orrs	r3, r2
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3307      	adds	r3, #7
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	7a5a      	ldrb	r2, [r3, #9]
 800107c:	7a99      	ldrb	r1, [r3, #10]
 800107e:	0209      	lsls	r1, r1, #8
 8001080:	430a      	orrs	r2, r1
 8001082:	7adb      	ldrb	r3, [r3, #11]
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	4313      	orrs	r3, r2
 8001088:	121a      	asrs	r2, r3, #8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3308      	adds	r3, #8
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	7a5a      	ldrb	r2, [r3, #9]
 8001096:	7a99      	ldrb	r1, [r3, #10]
 8001098:	0209      	lsls	r1, r1, #8
 800109a:	430a      	orrs	r2, r1
 800109c:	7adb      	ldrb	r3, [r3, #11]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	4313      	orrs	r3, r2
 80010a2:	141a      	asrs	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3309      	adds	r3, #9
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f103 000a 	add.w	r0, r3, #10
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	330c      	adds	r3, #12
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f004 f8a6 	bl	800520a <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80010be:	7dba      	ldrb	r2, [r7, #22]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4413      	add	r3, r2
 80010c4:	3301      	adds	r3, #1
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <mavlink_msg_to_send_buffer+0x164>
 80010d8:	230d      	movs	r3, #13
 80010da:	e000      	b.n	80010de <mavlink_msg_to_send_buffer+0x166>
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1c98      	adds	r0, r3, #2
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	4619      	mov	r1, r3
 8001112:	f004 f87a 	bl	800520a <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001116:	7dbb      	ldrb	r3, [r7, #22]
 8001118:	b29a      	uxth	r2, r3
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b29a      	uxth	r2, r3
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	3303      	adds	r3, #3
 800112c:	b29b      	uxth	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <mavlink_msg_heartbeat_pack>:
 * @param time  Time from boot of system
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t mode, uint32_t time)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	603a      	str	r2, [r7, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 4, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.time = time;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	60bb      	str	r3, [r7, #8]
    packet.mode = mode;
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	733b      	strb	r3, [r7, #12]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	330c      	adds	r3, #12
 8001158:	f107 0108 	add.w	r1, r7, #8
 800115c:	2205      	movs	r2, #5
 800115e:	4618      	mov	r0, r3
 8001160:	f004 f853 	bl	800520a <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	725a      	strb	r2, [r3, #9]
 800116a:	2200      	movs	r2, #0
 800116c:	729a      	strb	r2, [r3, #10]
 800116e:	2200      	movs	r2, #0
 8001170:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8001172:	79ba      	ldrb	r2, [r7, #6]
 8001174:	79f9      	ldrb	r1, [r7, #7]
 8001176:	2389      	movs	r3, #137	; 0x89
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2305      	movs	r3, #5
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2305      	movs	r3, #5
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f7ff fedb 	bl	8000f3c <mavlink_finalize_message>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <mavlink_msg_speed_setpoint_pack>:
 * @param setpoint_z  Speed setpoint in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_speed_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t mode, float setpoint_x, float setpoint_y, float setpoint_z)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af02      	add	r7, sp, #8
 8001196:	613a      	str	r2, [r7, #16]
 8001198:	461a      	mov	r2, r3
 800119a:	ed87 0a03 	vstr	s0, [r7, #12]
 800119e:	edc7 0a02 	vstr	s1, [r7, #8]
 80011a2:	ed87 1a01 	vstr	s2, [r7, #4]
 80011a6:	4603      	mov	r3, r0
 80011a8:	75fb      	strb	r3, [r7, #23]
 80011aa:	460b      	mov	r3, r1
 80011ac:	75bb      	strb	r3, [r7, #22]
 80011ae:	4613      	mov	r3, r2
 80011b0:	757b      	strb	r3, [r7, #21]
    _mav_put_uint8_t(buf, 12, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
#else
    mavlink_speed_setpoint_t packet;
    packet.setpoint_x = setpoint_x;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
    packet.setpoint_y = setpoint_y;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	61fb      	str	r3, [r7, #28]
    packet.setpoint_z = setpoint_z;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	623b      	str	r3, [r7, #32]
    packet.mode = mode;
 80011be:	7d7b      	ldrb	r3, [r7, #21]
 80011c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	330c      	adds	r3, #12
 80011c8:	f107 0118 	add.w	r1, r7, #24
 80011cc:	220d      	movs	r2, #13
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 f81b 	bl	800520a <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f042 0202 	orr.w	r2, r2, #2
 80011dc:	725a      	strb	r2, [r3, #9]
 80011de:	2200      	movs	r2, #0
 80011e0:	729a      	strb	r2, [r3, #10]
 80011e2:	2200      	movs	r2, #0
 80011e4:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_SPEED_SETPOINT_MIN_LEN, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN, MAVLINK_MSG_ID_SPEED_SETPOINT_CRC);
 80011e6:	7dba      	ldrb	r2, [r7, #22]
 80011e8:	7df9      	ldrb	r1, [r7, #23]
 80011ea:	23ef      	movs	r3, #239	; 0xef
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	230d      	movs	r3, #13
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	230d      	movs	r3, #13
 80011f4:	6938      	ldr	r0, [r7, #16]
 80011f6:	f7ff fea1 	bl	8000f3c <mavlink_finalize_message>
 80011fa:	4603      	mov	r3, r0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <mavlink_msg_speed_setpoint_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param speed_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_setpoint_t* speed_setpoint)
{
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	460b      	mov	r3, r1
 8001214:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->mode, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y, speed_setpoint->setpoint_z);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7b1d      	ldrb	r5, [r3, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6859      	ldr	r1, [r3, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	4619      	mov	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	7bbc      	ldrb	r4, [r7, #14]
 8001230:	7bf8      	ldrb	r0, [r7, #15]
 8001232:	ee01 3a10 	vmov	s2, r3
 8001236:	ee00 1a90 	vmov	s1, r1
 800123a:	ee00 2a10 	vmov	s0, r2
 800123e:	462b      	mov	r3, r5
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	4621      	mov	r1, r4
 8001244:	f7ff ffa4 	bl	8001190 <mavlink_msg_speed_setpoint_pack>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bdb0      	pop	{r4, r5, r7, pc}

08001252 <mavlink_msg_speed_setpoint_decode>:
 *
 * @param msg The message to decode
 * @param speed_setpoint C-struct to decode the message contents into
 */
static inline void mavlink_msg_speed_setpoint_decode(const mavlink_message_t* msg, mavlink_speed_setpoint_t* speed_setpoint)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
    speed_setpoint->setpoint_x = mavlink_msg_speed_setpoint_get_setpoint_x(msg);
    speed_setpoint->setpoint_y = mavlink_msg_speed_setpoint_get_setpoint_y(msg);
    speed_setpoint->setpoint_z = mavlink_msg_speed_setpoint_get_setpoint_z(msg);
    speed_setpoint->mode = mavlink_msg_speed_setpoint_get_mode(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	78db      	ldrb	r3, [r3, #3]
 8001260:	2b0d      	cmp	r3, #13
 8001262:	bf28      	it	cs
 8001264:	230d      	movcs	r3, #13
 8001266:	73fb      	strb	r3, [r7, #15]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8001268:	220d      	movs	r2, #13
 800126a:	2100      	movs	r1, #0
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f003 ffd7 	bl	8005220 <memset>
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	330c      	adds	r3, #12
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	4619      	mov	r1, r3
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f003 ffc5 	bl	800520a <memcpy>
#endif
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <mavlink_msg_mode_selection_get_mode>:
 * @brief Get field mode from mode_selection message
 *
 * @return  Actual operating mode
 */
static inline uint8_t mavlink_msg_mode_selection_get_mode(const mavlink_message_t* msg)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  0);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	330c      	adds	r3, #12
 8001294:	781b      	ldrb	r3, [r3, #0]
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <mouseDriver_init>:
static uint32_t actualTime = 0;
static mavlink_speed_info_t actualSpeed;
static mavlink_speed_setpoint_t actualSpeedSetpoint;


void mouseDriver_init(void){
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	actualTime = 0;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <mouseDriver_init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
	actualSpeed.mode = MOUSE_MODE_STOP;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <mouseDriver_init+0x54>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	741a      	strb	r2, [r3, #16]
	actualSpeed.speed_x = 0;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <mouseDriver_init+0x54>)
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
	actualSpeed.speed_y = 0;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <mouseDriver_init+0x54>)
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
	actualSpeed.speed_z = 0;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <mouseDriver_init+0x54>)
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
	actualSpeedSetpoint.mode = MOUSE_MODE_STOP;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <mouseDriver_init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	731a      	strb	r2, [r3, #12]
	actualSpeedSetpoint.setpoint_x = 0;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <mouseDriver_init+0x58>)
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
	actualSpeedSetpoint.setpoint_y = 0;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <mouseDriver_init+0x58>)
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
	actualSpeedSetpoint.setpoint_z = 0;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <mouseDriver_init+0x58>)
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000028 	.word	0x20000028
 80012f8:	2000002c 	.word	0x2000002c
 80012fc:	20000040 	.word	0x20000040

08001300 <mouseDriver_readMsg>:

mavlink_speed_info_t mouseDriver_getActualSpeed(void){
	return actualSpeed;
}

void mouseDriver_readMsg(const mavlink_message_t msg){
 8001300:	b084      	sub	sp, #16
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
 8001306:	f107 0c08 	add.w	ip, r7, #8
 800130a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	switch(msg.msgid){
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001314:	2b02      	cmp	r3, #2
 8001316:	d012      	beq.n	800133e <mouseDriver_readMsg+0x3e>
 8001318:	2b03      	cmp	r3, #3
 800131a:	d000      	beq.n	800131e <mouseDriver_readMsg+0x1e>
		actualSpeed.mode = actualSpeedSetpoint.mode;
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
		break;

	default:
		break;
 800131c:	e01c      	b.n	8001358 <mouseDriver_readMsg+0x58>
		actualSpeedSetpoint.mode = mavlink_msg_mode_selection_get_mode(&msg);
 800131e:	f107 0008 	add.w	r0, r7, #8
 8001322:	f7ff ffb1 	bl	8001288 <mavlink_msg_mode_selection_get_mode>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <mouseDriver_readMsg+0x64>)
 800132c:	731a      	strb	r2, [r3, #12]
		actualSpeed.mode = actualSpeedSetpoint.mode;
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <mouseDriver_readMsg+0x64>)
 8001330:	7b1a      	ldrb	r2, [r3, #12]
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <mouseDriver_readMsg+0x68>)
 8001334:	741a      	strb	r2, [r3, #16]
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f818 	bl	800136c <mouseDriver_sendMsg>
		break;
 800133c:	e00c      	b.n	8001358 <mouseDriver_readMsg+0x58>
		mavlink_msg_speed_setpoint_decode(&msg, &actualSpeedSetpoint);
 800133e:	4909      	ldr	r1, [pc, #36]	; (8001364 <mouseDriver_readMsg+0x64>)
 8001340:	f107 0008 	add.w	r0, r7, #8
 8001344:	f7ff ff85 	bl	8001252 <mavlink_msg_speed_setpoint_decode>
		actualSpeed.mode = actualSpeedSetpoint.mode;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <mouseDriver_readMsg+0x64>)
 800134a:	7b1a      	ldrb	r2, [r3, #12]
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <mouseDriver_readMsg+0x68>)
 800134e:	741a      	strb	r2, [r3, #16]
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 8001350:	2002      	movs	r0, #2
 8001352:	f000 f80b 	bl	800136c <mouseDriver_sendMsg>
		break;
 8001356:	bf00      	nop
	};
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001360:	b004      	add	sp, #16
 8001362:	4770      	bx	lr
 8001364:	20000040 	.word	0x20000040
 8001368:	2000002c 	.word	0x2000002c

0800136c <mouseDriver_sendMsg>:

void mouseDriver_sendMsg(uint32_t msgid){
 800136c:	b580      	push	{r7, lr}
 800136e:	b0d8      	sub	sp, #352	; 0x160
 8001370:	af02      	add	r7, sp, #8
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	6018      	str	r0, [r3, #0]
	uint8_t outBuffer[BUFFER_SIZE];
	mavlink_message_t outmsg;
	uint32_t len;
	outmsg.msgid = -1;
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800137e:	725a      	strb	r2, [r3, #9]
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001384:	729a      	strb	r2, [r3, #10]
 8001386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800138a:	72da      	strb	r2, [r3, #11]

	switch(msgid){
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <mouseDriver_sendMsg+0x2e>
 8001394:	2b02      	cmp	r3, #2
 8001396:	d01f      	beq.n	80013d8 <mouseDriver_sendMsg+0x6c>
		mavlink_msg_speed_setpoint_encode(SYS_ID,COMP_ID, &outmsg, &actualSpeedSetpoint);
		len = mavlink_msg_to_send_buffer(outBuffer, &outmsg);
		main_transmitBuffer(outBuffer, (uint32_t)len);
		break;
	default:
		break;
 8001398:	e038      	b.n	800140c <mouseDriver_sendMsg+0xa0>
		mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &outmsg, actualSpeedSetpoint.mode, actualTime);
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <mouseDriver_sendMsg+0xac>)
 800139c:	7b19      	ldrb	r1, [r3, #12]
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <mouseDriver_sendMsg+0xb0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f107 0208 	add.w	r2, r7, #8
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	460b      	mov	r3, r1
 80013aa:	2100      	movs	r1, #0
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff fec2 	bl	8001136 <mavlink_msg_heartbeat_pack>
		len = mavlink_msg_to_send_buffer(outBuffer, &outmsg);
 80013b2:	f107 0208 	add.w	r2, r7, #8
 80013b6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fddb 	bl	8000f78 <mavlink_msg_to_send_buffer>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		main_transmitBuffer(outBuffer, (uint32_t)len);
 80013c8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80013cc:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 f853 	bl	800247c <main_transmitBuffer>
		break;
 80013d6:	e019      	b.n	800140c <mouseDriver_sendMsg+0xa0>
		mavlink_msg_speed_setpoint_encode(SYS_ID,COMP_ID, &outmsg, &actualSpeedSetpoint);
 80013d8:	f107 0208 	add.w	r2, r7, #8
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <mouseDriver_sendMsg+0xac>)
 80013de:	2100      	movs	r1, #0
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff ff0f 	bl	8001204 <mavlink_msg_speed_setpoint_encode>
		len = mavlink_msg_to_send_buffer(outBuffer, &outmsg);
 80013e6:	f107 0208 	add.w	r2, r7, #8
 80013ea:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fdc1 	bl	8000f78 <mavlink_msg_to_send_buffer>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		main_transmitBuffer(outBuffer, (uint32_t)len);
 80013fc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001400:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8001404:	4618      	mov	r0, r3
 8001406:	f001 f839 	bl	800247c <main_transmitBuffer>
		break;
 800140a:	bf00      	nop
	}
}
 800140c:	bf00      	nop
 800140e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000040 	.word	0x20000040
 800141c:	20000028 	.word	0x20000028

08001420 <crc_accumulate>:
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4053      	eors	r3, r2
 8001436:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	b25a      	sxtb	r2, r3
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4053      	eors	r3, r2
 8001444:	b25b      	sxtb	r3, r3
 8001446:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	b29b      	uxth	r3, r3
 8001450:	b21a      	sxth	r2, r3
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21b      	sxth	r3, r3
 8001458:	4053      	eors	r3, r2
 800145a:	b21a      	sxth	r2, r3
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	b21b      	sxth	r3, r3
 8001462:	4053      	eors	r3, r2
 8001464:	b21a      	sxth	r2, r3
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	b2db      	uxtb	r3, r3
 800146c:	b21b      	sxth	r3, r3
 800146e:	4053      	eors	r3, r2
 8001470:	b21b      	sxth	r3, r3
 8001472:	b29a      	uxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	801a      	strh	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <crc_init>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001492:	801a      	strh	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <mavlink_sha256_init>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <mavlink_sha256_init+0x50>)
 80014b8:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <mavlink_sha256_init+0x54>)
 80014be:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <mavlink_sha256_init+0x58>)
 80014c4:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <mavlink_sha256_init+0x5c>)
 80014ca:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <mavlink_sha256_init+0x60>)
 80014d0:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <mavlink_sha256_init+0x64>)
 80014d6:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <mavlink_sha256_init+0x68>)
 80014dc:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <mavlink_sha256_init+0x6c>)
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	6a09e667 	.word	0x6a09e667
 80014f4:	bb67ae85 	.word	0xbb67ae85
 80014f8:	3c6ef372 	.word	0x3c6ef372
 80014fc:	a54ff53a 	.word	0xa54ff53a
 8001500:	510e527f 	.word	0x510e527f
 8001504:	9b05688c 	.word	0x9b05688c
 8001508:	1f83d9ab 	.word	0x1f83d9ab
 800150c:	5be0cd19 	.word	0x5be0cd19

08001510 <mavlink_sha256_calc>:
{
 8001510:	b480      	push	{r7}
 8001512:	b0cf      	sub	sp, #316	; 0x13c
 8001514:	af00      	add	r7, sp, #0
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	6018      	str	r0, [r3, #0]
 800151a:	463b      	mov	r3, r7
 800151c:	6019      	str	r1, [r3, #0]
    AA = A;
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for (i = 0; i < 16; ++i)
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001574:	e011      	b.n	800159a <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 8001576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	463a      	mov	r2, r7
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	4413      	add	r3, r2
 8001582:	6819      	ldr	r1, [r3, #0]
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8001590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001594:	3301      	adds	r3, #1
 8001596:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800159a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	dde9      	ble.n	8001576 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80015a2:	2310      	movs	r3, #16
 80015a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015a8:	e057      	b.n	800165a <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80015aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015ae:	1e9a      	subs	r2, r3, #2
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	ea4f 4273 	mov.w	r2, r3, ror #17
 80015bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015c0:	1e99      	subs	r1, r3, #2
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015ca:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80015ce:	405a      	eors	r2, r3
 80015d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015d4:	1e99      	subs	r1, r3, #2
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015de:	0a9b      	lsrs	r3, r3, #10
 80015e0:	405a      	eors	r2, r3
 80015e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015e6:	1fd9      	subs	r1, r3, #7
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015f0:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80015f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015f6:	f1a3 010f 	sub.w	r1, r3, #15
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001602:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8001606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800160a:	f1a3 000f 	sub.w	r0, r3, #15
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001616:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800161a:	4059      	eors	r1, r3
 800161c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001620:	f1a3 000f 	sub.w	r0, r3, #15
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800162c:	08db      	lsrs	r3, r3, #3
 800162e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001630:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8001632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001636:	f1a3 0110 	sub.w	r1, r3, #16
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001642:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800164c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8001650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001654:	3301      	adds	r3, #1
 8001656:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800165a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800165e:	2b3f      	cmp	r3, #63	; 0x3f
 8001660:	dda3      	ble.n	80015aa <mavlink_sha256_calc+0x9a>
    for (i = 0; i < 64; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001668:	e076      	b.n	8001758 <mavlink_sha256_calc+0x248>
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800166a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800166e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001672:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001676:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800167a:	405a      	eors	r2, r3
 800167c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001680:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001684:	405a      	eors	r2, r3
 8001686:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800168a:	441a      	add	r2, r3
 800168c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001690:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001694:	4019      	ands	r1, r3
 8001696:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800169a:	43d8      	mvns	r0, r3
 800169c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016a0:	4003      	ands	r3, r0
 80016a2:	404b      	eors	r3, r1
 80016a4:	441a      	add	r2, r3
 80016a6:	4956      	ldr	r1, [pc, #344]	; (8001800 <mavlink_sha256_calc+0x2f0>)
 80016a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016b0:	441a      	add	r2, r3
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80016ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016be:	4413      	add	r3, r2
 80016c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80016c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016c8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80016cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016d0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80016d4:	405a      	eors	r2, r3
 80016d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016da:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80016de:	405a      	eors	r2, r3
 80016e0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80016e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016e8:	4059      	eors	r1, r3
 80016ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016ee:	4019      	ands	r1, r3
 80016f0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80016f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016f8:	4003      	ands	r3, r0
 80016fa:	404b      	eors	r3, r1
 80016fc:	4413      	add	r3, r2
 80016fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	HH = GG;
 8001702:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001706:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 800170a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800170e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8001712:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001716:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 800171a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800171e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001722:	4413      	add	r3, r2
 8001724:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8001728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800172c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8001730:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001734:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8001738:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800173c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8001740:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001748:	4413      	add	r3, r2
 800174a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 800174e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001752:	3301      	adds	r3, #1
 8001754:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800175c:	2b3f      	cmp	r3, #63	; 0x3f
 800175e:	dd84      	ble.n	800166a <mavlink_sha256_calc+0x15a>
    A += AA;
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800176a:	441a      	add	r2, r3
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	609a      	str	r2, [r3, #8]
    B += BB;
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800177c:	441a      	add	r2, r3
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60da      	str	r2, [r3, #12]
    C += CC;
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800178e:	441a      	add	r2, r3
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	611a      	str	r2, [r3, #16]
    D += DD;
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017a0:	441a      	add	r2, r3
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	615a      	str	r2, [r3, #20]
    E += EE;
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017b2:	441a      	add	r2, r3
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	619a      	str	r2, [r3, #24]
    F += FF;
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	69da      	ldr	r2, [r3, #28]
 80017c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017c4:	441a      	add	r2, r3
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	61da      	str	r2, [r3, #28]
    G += GG;
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a1a      	ldr	r2, [r3, #32]
 80017d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80017d6:	441a      	add	r2, r3
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	621a      	str	r2, [r3, #32]
    H += HH;
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80017e8:	441a      	add	r2, r3
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017f0:	bf00      	nop
 80017f2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	08005348 	.word	0x08005348

08001804 <mavlink_sha256_update>:
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b09c      	sub	sp, #112	; 0x70
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	65fb      	str	r3, [r7, #92]	; 0x5c
    m->sz[0] += len * 8;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	441a      	add	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800182e:	429a      	cmp	r2, r3
 8001830:	d904      	bls.n	800183c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 800183c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183e:	08db      	lsrs	r3, r3, #3
 8001840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001844:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001846:	e054      	b.n	80018f2 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8001848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800184a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800184e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001854:	429a      	cmp	r2, r3
 8001856:	d201      	bcs.n	800185c <mavlink_sha256_update+0x58>
            l = len;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	667b      	str	r3, [r7, #100]	; 0x64
	memcpy(m->u.save_bytes + offset, p, l);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001864:	4413      	add	r3, r2
 8001866:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001868:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fccd 	bl	800520a <memcpy>
	offset += l;
 8001870:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001874:	4413      	add	r3, r2
 8001876:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8001878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800187a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800187c:	4413      	add	r3, r2
 800187e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800188a:	2b40      	cmp	r3, #64	; 0x40
 800188c:	d131      	bne.n	80018f2 <mavlink_sha256_update+0xee>
	    const uint32_t *u = m->u.save_u32;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3328      	adds	r3, #40	; 0x28
 8001892:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001894:	2300      	movs	r3, #0
 8001896:	663b      	str	r3, [r7, #96]	; 0x60
 8001898:	e020      	b.n	80018dc <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 800189a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018a0:	4413      	add	r3, r2
 80018a2:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80018a4:	f107 0210 	add.w	r2, r7, #16
 80018a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80018b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b2:	78da      	ldrb	r2, [r3, #3]
 80018b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018b6:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80018b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ba:	3301      	adds	r3, #1
 80018bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018be:	7892      	ldrb	r2, [r2, #2]
 80018c0:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80018c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c4:	3302      	adds	r3, #2
 80018c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018c8:	7852      	ldrb	r2, [r2, #1]
 80018ca:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80018cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ce:	3303      	adds	r3, #3
 80018d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80018d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018d8:	3301      	adds	r3, #1
 80018da:	663b      	str	r3, [r7, #96]	; 0x60
 80018dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	dddb      	ble.n	800189a <mavlink_sha256_update+0x96>
	    mavlink_sha256_calc(m, current);
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4619      	mov	r1, r3
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff fe11 	bl	8001510 <mavlink_sha256_calc>
	    offset = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1a7      	bne.n	8001848 <mavlink_sha256_update+0x44>
}
 80018f8:	bf00      	nop
 80018fa:	3770      	adds	r7, #112	; 0x70
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <mavlink_sha256_final_48>:
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b098      	sub	sp, #96	; 0x60
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
    unsigned offset = (m->sz[0] / 8) % 64;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001914:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001918:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 800191c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001920:	3301      	adds	r3, #1
 8001922:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3308      	adds	r3, #8
 8001928:	657b      	str	r3, [r7, #84]	; 0x54
    *zeros = 0x80;
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	3301      	adds	r3, #1
 8001934:	2247      	movs	r2, #71	; 0x47
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f003 fc71 	bl	8005220 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001944:	3307      	adds	r3, #7
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800194c:	440b      	add	r3, r1
 800194e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0a1a      	lsrs	r2, r3, #8
 8001958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800195a:	3306      	adds	r3, #6
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001962:	440b      	add	r3, r1
 8001964:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0c1a      	lsrs	r2, r3, #16
 800196e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001970:	3305      	adds	r3, #5
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001978:	440b      	add	r3, r1
 800197a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	0e1a      	lsrs	r2, r3, #24
 8001984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001986:	3304      	adds	r3, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800198e:	440b      	add	r3, r1
 8001990:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800199a:	3303      	adds	r3, #3
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80019a2:	440b      	add	r3, r1
 80019a4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	0a1a      	lsrs	r2, r3, #8
 80019ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b0:	3302      	adds	r3, #2
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80019b8:	440b      	add	r3, r1
 80019ba:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0c1a      	lsrs	r2, r3, #16
 80019c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80019ce:	440b      	add	r3, r1
 80019d0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	0e1b      	lsrs	r3, r3, #24
 80019da:	b2d9      	uxtb	r1, r3
 80019dc:	f107 020c 	add.w	r2, r7, #12
 80019e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019e2:	4413      	add	r3, r2
 80019e4:	460a      	mov	r2, r1
 80019e6:	701a      	strb	r2, [r3, #0]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80019e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ea:	f103 0208 	add.w	r2, r3, #8
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff05 	bl	8001804 <mavlink_sha256_update>
    result[0] = p[3];
 80019fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fc:	78da      	ldrb	r2, [r3, #3]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a08:	7892      	ldrb	r2, [r2, #2]
 8001a0a:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a12:	7852      	ldrb	r2, [r2, #1]
 8001a14:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3303      	adds	r3, #3
 8001a1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	3304      	adds	r3, #4
 8001a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a26:	79d2      	ldrb	r2, [r2, #7]
 8001a28:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	3305      	adds	r3, #5
 8001a2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a30:	7992      	ldrb	r2, [r2, #6]
 8001a32:	701a      	strb	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	3760      	adds	r7, #96	; 0x60
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <mavlink_get_channel_status>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <mavlink_get_channel_status+0x24>)
 8001a52:	4413      	add	r3, r2
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	2000053c 	.word	0x2000053c

08001a64 <mavlink_get_channel_buffer>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_buffer[chan];
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f240 1223 	movw	r2, #291	; 0x123
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <mavlink_get_channel_buffer+0x24>)
 8001a7a:	4413      	add	r3, r2
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	200000b0 	.word	0x200000b0

08001a8c <mavlink_signature_check>:
{
 8001a8c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001a90:	b0aa      	sub	sp, #168	; 0xa8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <mavlink_signature_check+0x18>
		return true;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e121      	b.n	8001ce8 <mavlink_signature_check+0x25c>
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001ab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aba:	3307      	adds	r3, #7
 8001abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_init(&ctx);
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fceb 	bl	80014a0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f103 0110 	add.w	r1, r3, #16
 8001ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fe94 	bl	8001804 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	78db      	ldrb	r3, [r3, #3]
 8001ae0:	330a      	adds	r3, #10
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fe89 	bl	8001804 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8001af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afc:	2202      	movs	r2, #2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe80 	bl	8001804 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8001b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b08:	2207      	movs	r2, #7
 8001b0a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fe78 	bl	8001804 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8001b14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff feee 	bl	8001900 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	2206      	movs	r2, #6
 8001b2a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fb5c 	bl	80051ec <memcmp>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <mavlink_signature_check+0xb2>
		return false;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e0d4      	b.n	8001ce8 <mavlink_signature_check+0x25c>
	uint8_t link_id = psig[0];
 8001b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	f04f 0400 	mov.w	r4, #0
 8001b50:	e9c7 3406 	strd	r3, r4, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b58:	1c59      	adds	r1, r3, #1
 8001b5a:	f107 0318 	add.w	r3, r7, #24
 8001b5e:	2206      	movs	r2, #6
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fb52 	bl	800520a <memcpy>
	if (signing_streams == NULL) {
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <mavlink_signature_check+0xe4>
		return false;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e0bb      	b.n	8001ce8 <mavlink_signature_check+0x25c>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001b76:	e02b      	b.n	8001bd0 <mavlink_signature_check+0x144>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	79d9      	ldrb	r1, [r3, #7]
 8001b7c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b80:	68b8      	ldr	r0, [r7, #8]
 8001b82:	4613      	mov	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	4403      	add	r3, r0
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	4299      	cmp	r1, r3
 8001b90:	d119      	bne.n	8001bc6 <mavlink_signature_check+0x13a>
		    msg->compid == signing_streams->stream[i].compid &&
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7a19      	ldrb	r1, [r3, #8]
 8001b96:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001b9a:	68b8      	ldr	r0, [r7, #8]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4403      	add	r3, r0
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001ba8:	4299      	cmp	r1, r3
 8001baa:	d10c      	bne.n	8001bc6 <mavlink_signature_check+0x13a>
		    link_id == signing_streams->stream[i].link_id) {
 8001bac:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3302      	adds	r3, #2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001bbe:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d00b      	beq.n	8001bde <mavlink_signature_check+0x152>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001bc6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d3cd      	bcc.n	8001b78 <mavlink_signature_check+0xec>
 8001bdc:	e000      	b.n	8001be0 <mavlink_signature_check+0x154>
			break;
 8001bde:	bf00      	nop
	if (i == signing_streams->num_signing_streams) {
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d141      	bne.n	8001c70 <mavlink_signature_check+0x1e4>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d901      	bls.n	8001bf8 <mavlink_signature_check+0x16c>
			return false;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e077      	b.n	8001ce8 <mavlink_signature_check+0x25c>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001bf8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001bfc:	493d      	ldr	r1, [pc, #244]	; (8001cf4 <mavlink_signature_check+0x268>)
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	eb11 0b03 	adds.w	fp, r1, r3
 8001c06:	eb42 0c04 	adc.w	ip, r2, r4
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c10:	45a4      	cmp	ip, r4
 8001c12:	bf08      	it	eq
 8001c14:	459b      	cmpeq	fp, r3
 8001c16:	d201      	bcs.n	8001c1c <mavlink_signature_check+0x190>
			return false;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e065      	b.n	8001ce8 <mavlink_signature_check+0x25c>
		signing_streams->stream[i].sysid = msg->sysid;
 8001c1c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	79d8      	ldrb	r0, [r3, #7]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3303      	adds	r3, #3
 8001c30:	4602      	mov	r2, r0
 8001c32:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001c34:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7a18      	ldrb	r0, [r3, #8]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	3304      	adds	r3, #4
 8001c48:	4602      	mov	r2, r0
 8001c4a:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001c4c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001c60:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	e01d      	b.n	8001cac <mavlink_signature_check+0x220>
		last_tstamp.t64 = 0;
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	f04f 0400 	mov.w	r4, #0
 8001c78:	e9c7 3404 	strd	r3, r4, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001c7c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4413      	add	r3, r2
 8001c8a:	1d59      	adds	r1, r3, #5
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	2206      	movs	r2, #6
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fab9 	bl	800520a <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001c98:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001c9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ca0:	42a2      	cmp	r2, r4
 8001ca2:	bf08      	it	eq
 8001ca4:	4299      	cmpeq	r1, r3
 8001ca6:	d301      	bcc.n	8001cac <mavlink_signature_check+0x220>
			return false;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e01d      	b.n	8001ce8 <mavlink_signature_check+0x25c>
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001cac:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	1d58      	adds	r0, r3, #5
 8001cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	2206      	movs	r2, #6
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f003 faa0 	bl	800520a <memcpy>
	if (tstamp.t64 > signing->timestamp) {
 8001cca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8001cd4:	42a2      	cmp	r2, r4
 8001cd6:	bf08      	it	eq
 8001cd8:	4299      	cmpeq	r1, r3
 8001cda:	d204      	bcs.n	8001ce6 <mavlink_signature_check+0x25a>
		signing->timestamp = tstamp.t64;
 8001cdc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	return true;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	37a8      	adds	r7, #168	; 0xa8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001cf2:	bf00      	nop
 8001cf4:	005b8d80 	.word	0x005b8d80

08001cf8 <_mav_parse_error>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	789b      	ldrb	r3, [r3, #2]
 8001d04:	3301      	adds	r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	709a      	strb	r2, [r3, #2]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001d24:	f107 030e 	add.w	r3, r7, #14
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fbab 	bl	8001484 <crc_init>
	msg->checksum = crcTmp;
 8001d2e:	89fa      	ldrh	r2, [r7, #14]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	801a      	strh	r2, [r3, #0]
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001d50:	f107 020e 	add.w	r2, r7, #14
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fb61 	bl	8001420 <crc_accumulate>
	msg->checksum = checksum;
 8001d5e:	89fa      	ldrh	r2, [r7, #14]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	801a      	strh	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	2303      	movs	r3, #3
 8001d7a:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001d7c:	e025      	b.n	8001dca <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	3301      	adds	r3, #1
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001d8a:	491f      	ldr	r1, [pc, #124]	; (8001e08 <mavlink_get_msg_entry+0x9c>)
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d203      	bcs.n	8001da8 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
                continue;
 8001da6:	e010      	b.n	8001dca <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001da8:	4917      	ldr	r1, [pc, #92]	; (8001e08 <mavlink_get_msg_entry+0x9c>)
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d902      	bls.n	8001dc4 <mavlink_get_msg_entry+0x58>
                low = mid;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	617b      	str	r3, [r7, #20]
                continue;
 8001dc2:	e002      	b.n	8001dca <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	617b      	str	r3, [r7, #20]
            break;
 8001dc8:	e003      	b.n	8001dd2 <mavlink_get_msg_entry+0x66>
        while (low < high) {
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d3d5      	bcc.n	8001d7e <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001dd2:	490d      	ldr	r1, [pc, #52]	; (8001e08 <mavlink_get_msg_entry+0x9c>)
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e006      	b.n	8001dfa <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <mavlink_get_msg_entry+0x9c>)
 8001df8:	4413      	add	r3, r2
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	08005448 	.word	0x08005448

08001e0c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	78db      	ldrb	r3, [r3, #3]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	f200 826e 	bhi.w	800230c <mavlink_frame_char_buffer+0x500>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <mavlink_frame_char_buffer+0x2c>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e79 	.word	0x08001e79
 8001e3c:	08001e79 	.word	0x08001e79
 8001e40:	08001ed7 	.word	0x08001ed7
 8001e44:	08001f3d 	.word	0x08001f3d
 8001e48:	08001f75 	.word	0x08001f75
 8001e4c:	08001f8d 	.word	0x08001f8d
 8001e50:	08001fa5 	.word	0x08001fa5
 8001e54:	08001fbd 	.word	0x08001fbd
 8001e58:	08001fd5 	.word	0x08001fd5
 8001e5c:	0800202f 	.word	0x0800202f
 8001e60:	0800207b 	.word	0x0800207b
 8001e64:	080020d7 	.word	0x080020d7
 8001e68:	0800210f 	.word	0x0800210f
 8001e6c:	0800219b 	.word	0x0800219b
 8001e70:	0800219b 	.word	0x0800219b
 8001e74:	08002257 	.word	0x08002257
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2bfd      	cmp	r3, #253	; 0xfd
 8001e7c:	d113      	bne.n	8001ea6 <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2202      	movs	r2, #2
 8001e82:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	79fa      	ldrb	r2, [r7, #7]
 8001e8e:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	7b1b      	ldrb	r3, [r3, #12]
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff3a 	bl	8001d18 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001ea4:	e229      	b.n	80022fa <mavlink_frame_char_buffer+0x4ee>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2bfe      	cmp	r3, #254	; 0xfe
 8001eaa:	f040 8226 	bne.w	80022fa <mavlink_frame_char_buffer+0x4ee>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	79fa      	ldrb	r2, [r7, #7]
 8001ebe:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	7b1b      	ldrb	r3, [r3, #12]
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff ff22 	bl	8001d18 <mavlink_start_checksum>
		break;
 8001ed4:	e211      	b.n	80022fa <mavlink_frame_char_buffer+0x4ee>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00f      	beq.n	8001efe <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7ff ff04 	bl	8001cf8 <_mav_parse_error>
			status->msg_received = 0;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001efc:	e206      	b.n	800230c <mavlink_frame_char_buffer+0x500>
			rxmsg->len = c;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2200      	movs	r2, #0
 8001f08:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff ff14 	bl	8001d3c <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	7b1b      	ldrb	r3, [r3, #12]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2205      	movs	r2, #5
 8001f30:	70da      	strb	r2, [r3, #3]
		break;
 8001f32:	e1eb      	b.n	800230c <mavlink_frame_char_buffer+0x500>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2203      	movs	r2, #3
 8001f38:	70da      	strb	r2, [r3, #3]
		break;
 8001f3a:	e1e7      	b.n	800230c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	791b      	ldrb	r3, [r3, #4]
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001f4e:	68b8      	ldr	r0, [r7, #8]
 8001f50:	f7ff fed2 	bl	8001cf8 <_mav_parse_error>
			status->msg_received = 0;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	70da      	strb	r2, [r3, #3]
			break;
 8001f60:	e1d4      	b.n	800230c <mavlink_frame_char_buffer+0x500>
		}
		mavlink_update_checksum(rxmsg, c);
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4619      	mov	r1, r3
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff fee8 	bl	8001d3c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	70da      	strb	r2, [r3, #3]
		break;
 8001f72:	e1cb      	b.n	800230c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	79fa      	ldrb	r2, [r7, #7]
 8001f78:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff fedc 	bl	8001d3c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2205      	movs	r2, #5
 8001f88:	70da      	strb	r2, [r3, #3]
		break;
 8001f8a:	e1bf      	b.n	800230c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	79fa      	ldrb	r2, [r7, #7]
 8001f90:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	4619      	mov	r1, r3
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7ff fed0 	bl	8001d3c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2206      	movs	r2, #6
 8001fa0:	70da      	strb	r2, [r3, #3]
		break;
 8001fa2:	e1b3      	b.n	800230c <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	79fa      	ldrb	r2, [r7, #7]
 8001fa8:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4619      	mov	r1, r3
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff fec4 	bl	8001d3c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	70da      	strb	r2, [r3, #3]
		break;
 8001fba:	e1a7      	b.n	800230c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff feb8 	bl	8001d3c <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2208      	movs	r2, #8
 8001fd0:	70da      	strb	r2, [r3, #3]
		break;
 8001fd2:	e19b      	b.n	800230c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	b2d9      	uxtb	r1, r3
 8001fde:	2000      	movs	r0, #0
 8001fe0:	4301      	orrs	r1, r0
 8001fe2:	7251      	strb	r1, [r2, #9]
 8001fe4:	0a19      	lsrs	r1, r3, #8
 8001fe6:	b2c9      	uxtb	r1, r1
 8001fe8:	2000      	movs	r0, #0
 8001fea:	4301      	orrs	r1, r0
 8001fec:	7291      	strb	r1, [r2, #10]
 8001fee:	0c1b      	lsrs	r3, r3, #16
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7ff fe9d 	bl	8001d3c <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	7b1b      	ldrb	r3, [r3, #12]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	78db      	ldrb	r3, [r3, #3]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	220b      	movs	r2, #11
 800201a:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 800201c:	e176      	b.n	800230c <mavlink_frame_char_buffer+0x500>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	220c      	movs	r2, #12
 8002022:	70da      	strb	r2, [r3, #3]
		break;
 8002024:	e172      	b.n	800230c <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2209      	movs	r2, #9
 800202a:	70da      	strb	r2, [r3, #3]
		break;
 800202c:	e16e      	b.n	800230c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	7a5a      	ldrb	r2, [r3, #9]
 8002032:	7a99      	ldrb	r1, [r3, #10]
 8002034:	0209      	lsls	r1, r1, #8
 8002036:	430a      	orrs	r2, r1
 8002038:	7adb      	ldrb	r3, [r3, #11]
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	4313      	orrs	r3, r2
 800203e:	461a      	mov	r2, r3
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4313      	orrs	r3, r2
 8002046:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	b2d1      	uxtb	r1, r2
 800204e:	2000      	movs	r0, #0
 8002050:	4301      	orrs	r1, r0
 8002052:	7259      	strb	r1, [r3, #9]
 8002054:	0a11      	lsrs	r1, r2, #8
 8002056:	b2c9      	uxtb	r1, r1
 8002058:	2000      	movs	r0, #0
 800205a:	4301      	orrs	r1, r0
 800205c:	7299      	strb	r1, [r3, #10]
 800205e:	0c12      	lsrs	r2, r2, #16
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	2100      	movs	r1, #0
 8002064:	430a      	orrs	r2, r1
 8002066:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	4619      	mov	r1, r3
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff fe65 	bl	8001d3c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	220a      	movs	r2, #10
 8002076:	70da      	strb	r2, [r3, #3]
		break;
 8002078:	e148      	b.n	800230c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	7a5a      	ldrb	r2, [r3, #9]
 800207e:	7a99      	ldrb	r1, [r3, #10]
 8002080:	0209      	lsls	r1, r1, #8
 8002082:	430a      	orrs	r2, r1
 8002084:	7adb      	ldrb	r3, [r3, #11]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	4313      	orrs	r3, r2
 800208a:	461a      	mov	r2, r3
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	4313      	orrs	r3, r2
 8002092:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	b2d1      	uxtb	r1, r2
 800209a:	2000      	movs	r0, #0
 800209c:	4301      	orrs	r1, r0
 800209e:	7259      	strb	r1, [r3, #9]
 80020a0:	0a11      	lsrs	r1, r2, #8
 80020a2:	b2c9      	uxtb	r1, r1
 80020a4:	2000      	movs	r0, #0
 80020a6:	4301      	orrs	r1, r0
 80020a8:	7299      	strb	r1, [r3, #10]
 80020aa:	0c12      	lsrs	r2, r2, #16
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	2100      	movs	r1, #0
 80020b0:	430a      	orrs	r2, r1
 80020b2:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	4619      	mov	r1, r3
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff fe3f 	bl	8001d3c <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	78db      	ldrb	r3, [r3, #3]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	220b      	movs	r2, #11
 80020ca:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 80020cc:	e11e      	b.n	800230c <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	220c      	movs	r2, #12
 80020d2:	70da      	strb	r2, [r3, #3]
		break;
 80020d4:	e11a      	b.n	800230c <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f103 020c 	add.w	r2, r3, #12
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	791b      	ldrb	r3, [r3, #4]
 80020e0:	1c59      	adds	r1, r3, #1
 80020e2:	b2c8      	uxtb	r0, r1
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	7108      	strb	r0, [r1, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	79fa      	ldrb	r2, [r7, #7]
 80020ec:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	4619      	mov	r1, r3
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff fe22 	bl	8001d3c <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	791a      	ldrb	r2, [r3, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	78db      	ldrb	r3, [r3, #3]
 8002100:	429a      	cmp	r2, r3
 8002102:	f040 80fc 	bne.w	80022fe <mavlink_frame_char_buffer+0x4f2>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	220c      	movs	r2, #12
 800210a:	70da      	strb	r2, [r3, #3]
		}
		break;
 800210c:	e0f7      	b.n	80022fe <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	7a5a      	ldrb	r2, [r3, #9]
 8002112:	7a99      	ldrb	r1, [r3, #10]
 8002114:	0209      	lsls	r1, r1, #8
 8002116:	430a      	orrs	r2, r1
 8002118:	7adb      	ldrb	r3, [r3, #11]
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	4313      	orrs	r3, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fe24 	bl	8001d6c <mavlink_get_msg_entry>
 8002124:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <mavlink_frame_char_buffer+0x326>
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	791b      	ldrb	r3, [r3, #4]
 8002130:	e000      	b.n	8002134 <mavlink_frame_char_buffer+0x328>
 8002132:	2300      	movs	r3, #0
 8002134:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	4619      	mov	r1, r3
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f7ff fdfe 	bl	8001d3c <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8002140:	79fa      	ldrb	r2, [r7, #7]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	429a      	cmp	r2, r3
 800214c:	d003      	beq.n	8002156 <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	220e      	movs	r2, #14
 8002152:	70da      	strb	r2, [r3, #3]
 8002154:	e002      	b.n	800215c <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	220d      	movs	r2, #13
 800215a:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	79fa      	ldrb	r2, [r7, #7]
 8002160:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80cb 	beq.w	8002302 <mavlink_frame_char_buffer+0x4f6>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	791a      	ldrb	r2, [r3, #4]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	799b      	ldrb	r3, [r3, #6]
 8002174:	429a      	cmp	r2, r3
 8002176:	f080 80c4 	bcs.w	8002302 <mavlink_frame_char_buffer+0x4f6>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	330c      	adds	r3, #12
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	7912      	ldrb	r2, [r2, #4]
 8002182:	1898      	adds	r0, r3, r2
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	799b      	ldrb	r3, [r3, #6]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	791b      	ldrb	r3, [r3, #4]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	461a      	mov	r2, r3
 8002192:	2100      	movs	r1, #0
 8002194:	f003 f844 	bl	8005220 <memset>
		}
		break;
 8002198:	e0b3      	b.n	8002302 <mavlink_frame_char_buffer+0x4f6>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	78db      	ldrb	r3, [r3, #3]
 800219e:	2b0e      	cmp	r3, #14
 80021a0:	d008      	beq.n	80021b4 <mavlink_frame_char_buffer+0x3a8>
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d003      	beq.n	80021bc <mavlink_frame_char_buffer+0x3b0>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2202      	movs	r2, #2
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e002      	b.n	80021c2 <mavlink_frame_char_buffer+0x3b6>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	79fa      	ldrb	r2, [r7, #7]
 80021c6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	791b      	ldrb	r3, [r3, #4]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00e      	beq.n	80021f4 <mavlink_frame_char_buffer+0x3e8>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	220f      	movs	r2, #15
 80021da:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	220d      	movs	r2, #13
 80021e0:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	f000 808d 	beq.w	8002306 <mavlink_frame_char_buffer+0x4fa>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 80021f2:	e088      	b.n	8002306 <mavlink_frame_char_buffer+0x4fa>
			if (status->signing &&
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01f      	beq.n	800223c <mavlink_frame_char_buffer+0x430>
			   	(status->signing->accept_unsigned_callback == NULL ||
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d013      	beq.n	800222e <mavlink_frame_char_buffer+0x422>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	7a59      	ldrb	r1, [r3, #9]
 8002210:	7a98      	ldrb	r0, [r3, #10]
 8002212:	0200      	lsls	r0, r0, #8
 8002214:	4301      	orrs	r1, r0
 8002216:	7adb      	ldrb	r3, [r3, #11]
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	430b      	orrs	r3, r1
 800221c:	4619      	mov	r1, r3
 800221e:	68b8      	ldr	r0, [r7, #8]
 8002220:	4790      	blx	r2
 8002222:	4603      	mov	r3, r0
 8002224:	f083 0301 	eor.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 800222a:	2b00      	cmp	r3, #0
 800222c:	d006      	beq.n	800223c <mavlink_frame_char_buffer+0x430>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d002      	beq.n	800223c <mavlink_frame_char_buffer+0x430>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2203      	movs	r2, #3
 800223a:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2201      	movs	r2, #1
 8002240:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d05e      	beq.n	8002306 <mavlink_frame_char_buffer+0x4fa>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002248:	f240 1223 	movw	r2, #291	; 0x123
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	6838      	ldr	r0, [r7, #0]
 8002250:	f002 ffdb 	bl	800520a <memcpy>
		break;
 8002254:	e057      	b.n	8002306 <mavlink_frame_char_buffer+0x4fa>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	7b5b      	ldrb	r3, [r3, #13]
 800225a:	f1c3 030d 	rsb	r3, r3, #13
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4413      	add	r3, r2
 8002262:	79fa      	ldrb	r2, [r7, #7]
 8002264:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	7b5b      	ldrb	r3, [r3, #13]
 800226c:	3b01      	subs	r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	7b5b      	ldrb	r3, [r3, #13]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d146      	bne.n	800230a <mavlink_frame_char_buffer+0x4fe>
			// we have the whole signature, check it is OK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	6918      	ldr	r0, [r3, #16]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4619      	mov	r1, r3
 8002288:	f7ff fc00 	bl	8001a8c <mavlink_signature_check>
 800228c:	4603      	mov	r3, r0
 800228e:	77fb      	strb	r3, [r7, #31]
			if (!sig_ok &&
 8002290:	7ffb      	ldrb	r3, [r7, #31]
 8002292:	f083 0301 	eor.w	r3, r3, #1
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <mavlink_frame_char_buffer+0x4c0>
			   	(status->signing->accept_unsigned_callback &&
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <mavlink_frame_char_buffer+0x4c0>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	7a59      	ldrb	r1, [r3, #9]
 80022b0:	7a98      	ldrb	r0, [r3, #10]
 80022b2:	0200      	lsls	r0, r0, #8
 80022b4:	4301      	orrs	r1, r0
 80022b6:	7adb      	ldrb	r3, [r3, #11]
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	430b      	orrs	r3, r1
 80022bc:	4619      	mov	r1, r3
 80022be:	68b8      	ldr	r0, [r7, #8]
 80022c0:	4790      	blx	r2
 80022c2:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <mavlink_frame_char_buffer+0x4c0>
				// accepted via application level override
				sig_ok = true;
 80022c8:	2301      	movs	r3, #1
 80022ca:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 80022cc:	7ffb      	ldrb	r3, [r7, #31]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <mavlink_frame_char_buffer+0x4ce>
				status->msg_received = MAVLINK_FRAMING_OK;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e002      	b.n	80022e0 <mavlink_frame_char_buffer+0x4d4>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2203      	movs	r2, #3
 80022de:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2201      	movs	r2, #1
 80022e4:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80022ec:	f240 1223 	movw	r2, #291	; 0x123
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	6838      	ldr	r0, [r7, #0]
 80022f4:	f002 ff89 	bl	800520a <memcpy>
			}
		}
		break;
 80022f8:	e007      	b.n	800230a <mavlink_frame_char_buffer+0x4fe>
		break;
 80022fa:	bf00      	nop
 80022fc:	e006      	b.n	800230c <mavlink_frame_char_buffer+0x500>
		break;
 80022fe:	bf00      	nop
 8002300:	e004      	b.n	800230c <mavlink_frame_char_buffer+0x500>
		break;
 8002302:	bf00      	nop
 8002304:	e002      	b.n	800230c <mavlink_frame_char_buffer+0x500>
		break;
 8002306:	bf00      	nop
 8002308:	e000      	b.n	800230c <mavlink_frame_char_buffer+0x500>
		break;
 800230a:	bf00      	nop
	}

	bufferIndex++;
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	3301      	adds	r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d110      	bne.n	800233c <mavlink_frame_char_buffer+0x530>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	799a      	ldrb	r2, [r3, #6]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	891b      	ldrh	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <mavlink_frame_char_buffer+0x524>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	891b      	ldrh	r3, [r3, #8]
 8002334:	3301      	adds	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <mavlink_frame_char_buffer+0x53e>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	78da      	ldrb	r2, [r3, #3]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01a      	beq.n	8002386 <mavlink_frame_char_buffer+0x57a>
           r_mavlink_status->parse_state = status->parse_state;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	78da      	ldrb	r2, [r3, #3]
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	791a      	ldrb	r2, [r3, #4]
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	795b      	ldrb	r3, [r3, #5]
 8002364:	3301      	adds	r3, #1
 8002366:	b2da      	uxtb	r2, r3
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	891a      	ldrh	r2, [r3, #8]
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	789b      	ldrb	r3, [r3, #2]
 8002378:	b29a      	uxth	r2, r3
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	7b1a      	ldrb	r2, [r3, #12]
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2200      	movs	r2, #0
 800238a:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d110      	bne.n	80023b6 <mavlink_frame_char_buffer+0x5aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <mavlink_frame_char_buffer+0x5aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop

080023c4 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60ba      	str	r2, [r7, #8]
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	4603      	mov	r3, r0
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	460b      	mov	r3, r1
 80023d4:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fb43 	bl	8001a64 <mavlink_get_channel_buffer>
 80023de:	4604      	mov	r4, r0
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fb2a 	bl	8001a3c <mavlink_get_channel_status>
 80023e8:	4601      	mov	r1, r0
 80023ea:	7bba      	ldrb	r2, [r7, #14]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff fd0a 	bl	8001e0c <mavlink_frame_char_buffer>
 80023f8:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}

08002402 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b088      	sub	sp, #32
 8002406:	af00      	add	r7, sp, #0
 8002408:	60ba      	str	r2, [r7, #8]
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	4603      	mov	r3, r0
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	460b      	mov	r3, r1
 8002412:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8002414:	7bb9      	ldrb	r1, [r7, #14]
 8002416:	7bf8      	ldrb	r0, [r7, #15]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f7ff ffd2 	bl	80023c4 <mavlink_frame_char>
 8002420:	4603      	mov	r3, r0
 8002422:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8002424:	7ffb      	ldrb	r3, [r7, #31]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d002      	beq.n	8002430 <mavlink_parse_char+0x2e>
 800242a:	7ffb      	ldrb	r3, [r7, #31]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d120      	bne.n	8002472 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fb16 	bl	8001a64 <mavlink_get_channel_buffer>
 8002438:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fafd 	bl	8001a3c <mavlink_get_channel_status>
 8002442:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f7ff fc57 	bl	8001cf8 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2201      	movs	r2, #1
 8002454:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8002456:	7bbb      	ldrb	r3, [r7, #14]
 8002458:	2bfd      	cmp	r3, #253	; 0xfd
 800245a:	d108      	bne.n	800246e <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2202      	movs	r2, #2
 8002460:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2200      	movs	r2, #0
 8002466:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8002468:	69b8      	ldr	r0, [r7, #24]
 800246a:	f7ff fc55 	bl	8001d18 <mavlink_start_checksum>
	    }
	    return 0;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8002472:	7ffb      	ldrb	r3, [r7, #31]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <main_transmitBuffer>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void main_transmitBuffer(uint8_t* outBuffer, const uint32_t size){
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, outBuffer, size, TIMEOUT);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b29a      	uxth	r2, r3
 800248a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <main_transmitBuffer+0x24>)
 8002492:	f002 f8af 	bl	80045f4 <HAL_UART_Transmit>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000059c 	.word	0x2000059c

080024a4 <main_receiveMsg>:
void main_receiveMsg (void){
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80024aa:	af46      	add	r7, sp, #280	; 0x118
	uint8_t c;
	mavlink_message_t inmsg;	//Not re-initializing them is NOT the problem
	mavlink_status_t msgStatus; //Not re-initializing them is NOT the problem
	while(1){
		if(HAL_UART_Receive(&huart2, &c, sizeof(c), TIMEOUT)==HAL_OK){
 80024ac:	f207 113f 	addw	r1, r7, #319	; 0x13f
 80024b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024b4:	2201      	movs	r2, #1
 80024b6:	4812      	ldr	r0, [pc, #72]	; (8002500 <main_receiveMsg+0x5c>)
 80024b8:	f002 f92f 	bl	800471a <HAL_UART_Receive>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f4      	bne.n	80024ac <main_receiveMsg+0x8>
			if(mavlink_parse_char(0, c, &inmsg, &msgStatus)){
 80024c2:	f897 113f 	ldrb.w	r1, [r7, #319]	; 0x13f
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	f107 021c 	add.w	r2, r7, #28
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7ff ff98 	bl	8002402 <mavlink_parse_char>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0e9      	beq.n	80024ac <main_receiveMsg+0x8>
				mouseDriver_readMsg(inmsg);
 80024d8:	f107 041c 	add.w	r4, r7, #28
 80024dc:	4668      	mov	r0, sp
 80024de:	f104 0310 	add.w	r3, r4, #16
 80024e2:	f240 1213 	movw	r2, #275	; 0x113
 80024e6:	4619      	mov	r1, r3
 80024e8:	f002 fe8f 	bl	800520a <memcpy>
 80024ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024f0:	f7fe ff06 	bl	8001300 <mouseDriver_readMsg>

				return;
 80024f4:	bf00      	nop
			}
		}
	}

}
 80024f6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd90      	pop	{r4, r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000059c 	.word	0x2000059c

08002504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002508:	f000 fa1e 	bl	8002948 <HAL_Init>

  /* USER CODE BEGIN Init */
	mouseDriver_init();
 800250c:	f7fe feca 	bl	80012a4 <mouseDriver_init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	2120      	movs	r1, #32
 8002514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002518:	f000 fd3e 	bl	8002f98 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800251c:	f000 f80a 	bl	8002534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002520:	f000 f8ae 	bl	8002680 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002524:	f000 f87c 	bl	8002620 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_receiveMsg();
 8002528:	f7ff ffbc 	bl	80024a4 <main_receiveMsg>
	  /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 800252c:	2064      	movs	r0, #100	; 0x64
 800252e:	f000 fa83 	bl	8002a38 <HAL_Delay>
	  main_receiveMsg();
 8002532:	e7f9      	b.n	8002528 <main+0x24>

08002534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b0b8      	sub	sp, #224	; 0xe0
 8002538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800253a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800253e:	2244      	movs	r2, #68	; 0x44
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f002 fe6c 	bl	8005220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002548:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002558:	463b      	mov	r3, r7
 800255a:	2288      	movs	r2, #136	; 0x88
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fe5e 	bl	8005220 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800256a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800256e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002572:	2310      	movs	r3, #16
 8002574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002578:	2302      	movs	r3, #2
 800257a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002584:	2301      	movs	r3, #1
 8002586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800258a:	230a      	movs	r3, #10
 800258c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002590:	2307      	movs	r3, #7
 8002592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002596:	2302      	movs	r3, #2
 8002598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800259c:	2302      	movs	r3, #2
 800259e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fd72 	bl	8003090 <HAL_RCC_OscConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80025b2:	f000 f8cd 	bl	8002750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b6:	230f      	movs	r3, #15
 80025b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025bc:	2303      	movs	r3, #3
 80025be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80025d8:	2104      	movs	r1, #4
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 f908 	bl	80037f0 <HAL_RCC_ClockConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80025e6:	f000 f8b3 	bl	8002750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025ea:	2302      	movs	r3, #2
 80025ec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025ee:	2300      	movs	r3, #0
 80025f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 faff 	bl	8003bf8 <HAL_RCCEx_PeriphCLKConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002600:	f000 f8a6 	bl	8002750 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002604:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002608:	f000 fcec 	bl	8002fe4 <HAL_PWREx_ControlVoltageScaling>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002612:	f000 f89d 	bl	8002750 <Error_Handler>
  }
}
 8002616:	bf00      	nop
 8002618:	37e0      	adds	r7, #224	; 0xe0
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <MX_USART2_UART_Init+0x58>)
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <MX_USART2_UART_Init+0x5c>)
 8002628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <MX_USART2_UART_Init+0x58>)
 800262c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_USART2_UART_Init+0x58>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <MX_USART2_UART_Init+0x58>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_USART2_UART_Init+0x58>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_USART2_UART_Init+0x58>)
 8002646:	220c      	movs	r2, #12
 8002648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <MX_USART2_UART_Init+0x58>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_USART2_UART_Init+0x58>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <MX_USART2_UART_Init+0x58>)
 8002658:	2200      	movs	r2, #0
 800265a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_USART2_UART_Init+0x58>)
 800265e:	2200      	movs	r2, #0
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_USART2_UART_Init+0x58>)
 8002664:	f001 ff78 	bl	8004558 <HAL_UART_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800266e:	f000 f86f 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000059c 	.word	0x2000059c
 800267c:	40004400 	.word	0x40004400

08002680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002696:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <MX_GPIO_Init+0xc4>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <MX_GPIO_Init+0xc4>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ae:	4b25      	ldr	r3, [pc, #148]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4a24      	ldr	r2, [pc, #144]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <MX_GPIO_Init+0xc4>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2120      	movs	r1, #32
 80026fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fe:	f000 fc4b 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <MX_GPIO_Init+0xc8>)
 800270a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4619      	mov	r1, r3
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <MX_GPIO_Init+0xcc>)
 8002718:	f000 fa96 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800271c:	2320      	movs	r3, #32
 800271e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002720:	2301      	movs	r3, #1
 8002722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002736:	f000 fa87 	bl	8002c48 <HAL_GPIO_Init>

}
 800273a:	bf00      	nop
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	10210000 	.word	0x10210000
 800274c:	48000800 	.word	0x48000800

08002750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <HAL_MspInit+0x44>)
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_MspInit+0x44>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6613      	str	r3, [r2, #96]	; 0x60
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_MspInit+0x44>)
 8002774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_MspInit+0x44>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_MspInit+0x44>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6593      	str	r3, [r2, #88]	; 0x58
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_MspInit+0x44>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000

080027a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_UART_MspInit+0x7c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d128      	bne.n	800281c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_UART_MspInit+0x80>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_UART_MspInit+0x80>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_UART_MspInit+0x80>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_UART_MspInit+0x80>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	4a10      	ldr	r2, [pc, #64]	; (8002828 <HAL_UART_MspInit+0x80>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_UART_MspInit+0x80>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027fa:	230c      	movs	r3, #12
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800280a:	2307      	movs	r3, #7
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002818:	f000 fa16 	bl	8002c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800281c:	bf00      	nop
 800281e:	3728      	adds	r7, #40	; 0x28
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40004400 	.word	0x40004400
 8002828:	40021000 	.word	0x40021000

0800282c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800283e:	e7fe      	b.n	800283e <HardFault_Handler+0x4>

08002840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <MemManage_Handler+0x4>

08002846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284a:	e7fe      	b.n	800284a <BusFault_Handler+0x4>

0800284c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <UsageFault_Handler+0x4>

08002852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002880:	f000 f8bc 	bl	80029fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}

08002888 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <SystemInit+0x64>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	4a16      	ldr	r2, [pc, #88]	; (80028ec <SystemInit+0x64>)
 8002894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <SystemInit+0x68>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <SystemInit+0x68>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <SystemInit+0x68>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <SystemInit+0x68>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <SystemInit+0x68>)
 80028b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80028b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80028bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <SystemInit+0x68>)
 80028c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <SystemInit+0x68>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <SystemInit+0x68>)
 80028cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <SystemInit+0x68>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <SystemInit+0x64>)
 80028da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028de:	609a      	str	r2, [r3, #8]
#endif
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00
 80028f0:	40021000 	.word	0x40021000

080028f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800292c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80028f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80028fa:	e003      	b.n	8002904 <LoopCopyDataInit>

080028fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80028fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002900:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002902:	3104      	adds	r1, #4

08002904 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002908:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800290a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800290c:	d3f6      	bcc.n	80028fc <CopyDataInit>
	ldr	r2, =_sbss
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002910:	e002      	b.n	8002918 <LoopFillZerobss>

08002912 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002912:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002914:	f842 3b04 	str.w	r3, [r2], #4

08002918 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <LoopForever+0x16>)
	cmp	r2, r3
 800291a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800291c:	d3f9      	bcc.n	8002912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800291e:	f7ff ffb3 	bl	8002888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002922:	f002 fc3f 	bl	80051a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002926:	f7ff fded 	bl	8002504 <main>

0800292a <LoopForever>:

LoopForever:
    b LoopForever
 800292a:	e7fe      	b.n	800292a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800292c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002930:	080054d0 	.word	0x080054d0
	ldr	r0, =_sdata
 8002934:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002938:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800293c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002940:	20000620 	.word	0x20000620

08002944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002944:	e7fe      	b.n	8002944 <ADC1_2_IRQHandler>
	...

08002948 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_Init+0x3c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <HAL_Init+0x3c>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295e:	2003      	movs	r0, #3
 8002960:	f000 f93e 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002964:	2000      	movs	r0, #0
 8002966:	f000 f80f 	bl	8002988 <HAL_InitTick>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	71fb      	strb	r3, [r7, #7]
 8002974:	e001      	b.n	800297a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002976:	f7ff fef3 	bl	8002760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800297a:	79fb      	ldrb	r3, [r7, #7]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40022000 	.word	0x40022000

08002988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002994:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <HAL_InitTick+0x68>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d022      	beq.n	80029e2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800299c:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_InitTick+0x6c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_InitTick+0x68>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f93c 	bl	8002c2e <HAL_SYSTICK_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10f      	bne.n	80029dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	d809      	bhi.n	80029d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c2:	2200      	movs	r2, #0
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029ca:	f000 f914 	bl	8002bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_InitTick+0x70>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e007      	b.n	80029e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e004      	b.n	80029e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e001      	b.n	80029e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000008 	.word	0x20000008
 80029f4:	20000000 	.word	0x20000000
 80029f8:	20000004 	.word	0x20000004

080029fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_IncTick+0x1c>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_IncTick+0x20>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_IncTick+0x1c>)
 8002a0c:	6013      	str	r3, [r2, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	2000061c 	.word	0x2000061c
 8002a1c:	20000008 	.word	0x20000008

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	2000061c 	.word	0x2000061c

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a50:	d004      	beq.n	8002a5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_Delay+0x40>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a5c:	bf00      	nop
 8002a5e:	f7ff ffdf 	bl	8002a20 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d8f7      	bhi.n	8002a5e <HAL_Delay+0x26>
  {
  }
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000008 	.word	0x20000008

08002a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff47 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff5c 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff8e 	bl	8002b34 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5d 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ffb0 	bl	8002b9c <SysTick_Config>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c56:	e17f      	b.n	8002f58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8171 	beq.w	8002f52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x38>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b12      	cmp	r3, #18
 8002c7e:	d123      	bne.n	8002cc8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	220f      	movs	r2, #15
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	08da      	lsrs	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3208      	adds	r2, #8
 8002cc2:	6939      	ldr	r1, [r7, #16]
 8002cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0203 	and.w	r2, r3, #3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d00b      	beq.n	8002d1c <HAL_GPIO_Init+0xd4>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d007      	beq.n	8002d1c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d10:	2b11      	cmp	r3, #17
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b12      	cmp	r3, #18
 8002d1a:	d130      	bne.n	8002d7e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d52:	2201      	movs	r2, #1
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 0201 	and.w	r2, r3, #1
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d118      	bne.n	8002dbc <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d90:	2201      	movs	r2, #1
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	08db      	lsrs	r3, r3, #3
 8002da6:	f003 0201 	and.w	r2, r3, #1
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80ac 	beq.w	8002f52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfa:	4b5e      	ldr	r3, [pc, #376]	; (8002f74 <HAL_GPIO_Init+0x32c>)
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfe:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <HAL_GPIO_Init+0x32c>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6613      	str	r3, [r2, #96]	; 0x60
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <HAL_GPIO_Init+0x32c>)
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e12:	4a59      	ldr	r2, [pc, #356]	; (8002f78 <HAL_GPIO_Init+0x330>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_Init+0x242>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4e      	ldr	r2, [pc, #312]	; (8002f7c <HAL_GPIO_Init+0x334>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_Init+0x23e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4d      	ldr	r2, [pc, #308]	; (8002f80 <HAL_GPIO_Init+0x338>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x23a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4c      	ldr	r2, [pc, #304]	; (8002f84 <HAL_GPIO_Init+0x33c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x236>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4b      	ldr	r2, [pc, #300]	; (8002f88 <HAL_GPIO_Init+0x340>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x232>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4a      	ldr	r2, [pc, #296]	; (8002f8c <HAL_GPIO_Init+0x344>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x22e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a49      	ldr	r2, [pc, #292]	; (8002f90 <HAL_GPIO_Init+0x348>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x22a>
 8002e6e:	2306      	movs	r3, #6
 8002e70:	e00c      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e72:	2307      	movs	r3, #7
 8002e74:	e00a      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e76:	2305      	movs	r3, #5
 8002e78:	e008      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e004      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e002      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_GPIO_Init+0x244>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	f002 0203 	and.w	r2, r2, #3
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4093      	lsls	r3, r2
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9c:	4936      	ldr	r1, [pc, #216]	; (8002f78 <HAL_GPIO_Init+0x330>)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eaa:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_GPIO_Init+0x34c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ece:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <HAL_GPIO_Init+0x34c>)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ed4:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <HAL_GPIO_Init+0x34c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ef8:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <HAL_GPIO_Init+0x34c>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002efe:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_GPIO_Init+0x34c>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f22:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <HAL_GPIO_Init+0x34c>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_GPIO_Init+0x34c>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f4c:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <HAL_GPIO_Init+0x34c>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f47f ae78 	bne.w	8002c58 <HAL_GPIO_Init+0x10>
  }
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	48000800 	.word	0x48000800
 8002f84:	48000c00 	.word	0x48000c00
 8002f88:	48001000 	.word	0x48001000
 8002f8c:	48001400 	.word	0x48001400
 8002f90:	48001800 	.word	0x48001800
 8002f94:	40010400 	.word	0x40010400

08002f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa8:	787b      	ldrb	r3, [r7, #1]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fae:	887a      	ldrh	r2, [r7, #2]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40007000 	.word	0x40007000

08002fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff2:	d130      	bne.n	8003056 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d038      	beq.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003010:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2232      	movs	r2, #50	; 0x32
 8003018:	fb02 f303 	mul.w	r3, r2, r3
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0c9b      	lsrs	r3, r3, #18
 8003024:	3301      	adds	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003028:	e002      	b.n	8003030 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3b01      	subs	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303c:	d102      	bne.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x60>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f2      	bne.n	800302a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003050:	d110      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e00f      	b.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003062:	d007      	beq.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800306c:	4a05      	ldr	r2, [pc, #20]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003072:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40007000 	.word	0x40007000
 8003088:	20000000 	.word	0x20000000
 800308c:	431bde83 	.word	0x431bde83

08003090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e39d      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a2:	4ba4      	ldr	r3, [pc, #656]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ac:	4ba1      	ldr	r3, [pc, #644]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80e1 	beq.w	8003286 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <HAL_RCC_OscConfig+0x4a>
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	f040 8088 	bne.w	80031e2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f040 8084 	bne.w	80031e2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030da:	4b96      	ldr	r3, [pc, #600]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_RCC_OscConfig+0x62>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e375      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1a      	ldr	r2, [r3, #32]
 80030f6:	4b8f      	ldr	r3, [pc, #572]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_RCC_OscConfig+0x7c>
 8003102:	4b8c      	ldr	r3, [pc, #560]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800310a:	e005      	b.n	8003118 <HAL_RCC_OscConfig+0x88>
 800310c:	4b89      	ldr	r3, [pc, #548]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800310e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003118:	4293      	cmp	r3, r2
 800311a:	d223      	bcs.n	8003164 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fd09 	bl	8003b38 <RCC_SetFlashLatencyFromMSIRange>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e356      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003130:	4b80      	ldr	r3, [pc, #512]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a7f      	ldr	r2, [pc, #508]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003136:	f043 0308 	orr.w	r3, r3, #8
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b7d      	ldr	r3, [pc, #500]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	497a      	ldr	r1, [pc, #488]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314e:	4b79      	ldr	r3, [pc, #484]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	4975      	ldr	r1, [pc, #468]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
 8003162:	e022      	b.n	80031aa <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003164:	4b73      	ldr	r3, [pc, #460]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a72      	ldr	r2, [pc, #456]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800316a:	f043 0308 	orr.w	r3, r3, #8
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b70      	ldr	r3, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	496d      	ldr	r1, [pc, #436]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003182:	4b6c      	ldr	r3, [pc, #432]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	4968      	ldr	r1, [pc, #416]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fccc 	bl	8003b38 <RCC_SetFlashLatencyFromMSIRange>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e319      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031aa:	f000 fc03 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 80031ae:	4601      	mov	r1, r0
 80031b0:	4b60      	ldr	r3, [pc, #384]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	4a5f      	ldr	r2, [pc, #380]	; (8003338 <HAL_RCC_OscConfig+0x2a8>)
 80031bc:	5cd3      	ldrb	r3, [r2, r3]
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	fa21 f303 	lsr.w	r3, r1, r3
 80031c6:	4a5d      	ldr	r2, [pc, #372]	; (800333c <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031ca:	4b5d      	ldr	r3, [pc, #372]	; (8003340 <HAL_RCC_OscConfig+0x2b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fbda 	bl	8002988 <HAL_InitTick>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d052      	beq.n	8003284 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	e2fd      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d032      	beq.n	8003250 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031ea:	4b52      	ldr	r3, [pc, #328]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a51      	ldr	r2, [pc, #324]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f6:	f7ff fc13 	bl	8002a20 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031fe:	f7ff fc0f 	bl	8002a20 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e2e6      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003210:	4b48      	ldr	r3, [pc, #288]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321c:	4b45      	ldr	r3, [pc, #276]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a44      	ldr	r2, [pc, #272]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003222:	f043 0308 	orr.w	r3, r3, #8
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b42      	ldr	r3, [pc, #264]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	493f      	ldr	r1, [pc, #252]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800323a:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	493a      	ldr	r1, [pc, #232]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
 800324e:	e01a      	b.n	8003286 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003250:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a37      	ldr	r2, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800325c:	f7ff fbe0 	bl	8002a20 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003264:	f7ff fbdc 	bl	8002a20 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e2b3      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003276:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1d4>
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003284:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d074      	beq.n	800337c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_OscConfig+0x214>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b0c      	cmp	r3, #12
 800329c:	d10e      	bne.n	80032bc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d10b      	bne.n	80032bc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d064      	beq.n	800337a <HAL_RCC_OscConfig+0x2ea>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d160      	bne.n	800337a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e290      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c4:	d106      	bne.n	80032d4 <HAL_RCC_OscConfig+0x244>
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e01d      	b.n	8003310 <HAL_RCC_OscConfig+0x280>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x268>
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a14      	ldr	r2, [pc, #80]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80032e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a11      	ldr	r2, [pc, #68]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0x280>
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HAL_RCC_OscConfig+0x2a4>)
 800330a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01c      	beq.n	8003352 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7ff fb82 	bl	8002a20 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331e:	e011      	b.n	8003344 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003320:	f7ff fb7e 	bl	8002a20 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d90a      	bls.n	8003344 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e255      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	08005478 	.word	0x08005478
 800333c:	20000000 	.word	0x20000000
 8003340:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003344:	4bae      	ldr	r3, [pc, #696]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0e7      	beq.n	8003320 <HAL_RCC_OscConfig+0x290>
 8003350:	e014      	b.n	800337c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7ff fb65 	bl	8002a20 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335a:	f7ff fb61 	bl	8002a20 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	; 0x64
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e238      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336c:	4ba4      	ldr	r3, [pc, #656]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x2ca>
 8003378:	e000      	b.n	800337c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d060      	beq.n	800344a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b04      	cmp	r3, #4
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x30a>
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d119      	bne.n	80033c8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d116      	bne.n	80033c8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339a:	4b99      	ldr	r3, [pc, #612]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_RCC_OscConfig+0x322>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e215      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b2:	4b93      	ldr	r3, [pc, #588]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	061b      	lsls	r3, r3, #24
 80033c0:	498f      	ldr	r1, [pc, #572]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c6:	e040      	b.n	800344a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d023      	beq.n	8003418 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d0:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a8a      	ldr	r2, [pc, #552]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80033d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7ff fb20 	bl	8002a20 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e4:	f7ff fb1c 	bl	8002a20 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1f3      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f6:	4b82      	ldr	r3, [pc, #520]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b7f      	ldr	r3, [pc, #508]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	061b      	lsls	r3, r3, #24
 8003410:	497b      	ldr	r1, [pc, #492]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003412:	4313      	orrs	r3, r2
 8003414:	604b      	str	r3, [r1, #4]
 8003416:	e018      	b.n	800344a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003418:	4b79      	ldr	r3, [pc, #484]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a78      	ldr	r2, [pc, #480]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800341e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7ff fafc 	bl	8002a20 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342c:	f7ff faf8 	bl	8002a20 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1cf      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800343e:	4b70      	ldr	r3, [pc, #448]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d03c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01c      	beq.n	8003498 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345e:	4b68      	ldr	r3, [pc, #416]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003464:	4a66      	ldr	r2, [pc, #408]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346e:	f7ff fad7 	bl	8002a20 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003476:	f7ff fad3 	bl	8002a20 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1aa      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003488:	4b5d      	ldr	r3, [pc, #372]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800348a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ef      	beq.n	8003476 <HAL_RCC_OscConfig+0x3e6>
 8003496:	e01b      	b.n	80034d0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003498:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349e:	4a58      	ldr	r2, [pc, #352]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7ff faba 	bl	8002a20 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b0:	f7ff fab6 	bl	8002a20 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e18d      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c2:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80034c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ef      	bne.n	80034b0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a5 	beq.w	8003628 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10d      	bne.n	800350a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	4b44      	ldr	r3, [pc, #272]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	4a43      	ldr	r2, [pc, #268]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6593      	str	r3, [r2, #88]	; 0x58
 80034fa:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003506:	2301      	movs	r3, #1
 8003508:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350a:	4b3e      	ldr	r3, [pc, #248]	; (8003604 <HAL_RCC_OscConfig+0x574>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d118      	bne.n	8003548 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_OscConfig+0x574>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3a      	ldr	r2, [pc, #232]	; (8003604 <HAL_RCC_OscConfig+0x574>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003522:	f7ff fa7d 	bl	8002a20 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352a:	f7ff fa79 	bl	8002a20 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e150      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353c:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_OscConfig+0x574>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d108      	bne.n	8003562 <HAL_RCC_OscConfig+0x4d2>
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	4a2a      	ldr	r2, [pc, #168]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003560:	e024      	b.n	80035ac <HAL_RCC_OscConfig+0x51c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b05      	cmp	r3, #5
 8003568:	d110      	bne.n	800358c <HAL_RCC_OscConfig+0x4fc>
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800358a:	e00f      	b.n	80035ac <HAL_RCC_OscConfig+0x51c>
 800358c:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800359c:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80035a4:	f023 0304 	bic.w	r3, r3, #4
 80035a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d016      	beq.n	80035e2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7ff fa34 	bl	8002a20 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7ff fa30 	bl	8002a20 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e105      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x570>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ed      	beq.n	80035bc <HAL_RCC_OscConfig+0x52c>
 80035e0:	e019      	b.n	8003616 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e2:	f7ff fa1d 	bl	8002a20 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e8:	e00e      	b.n	8003608 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7ff fa19 	bl	8002a20 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d905      	bls.n	8003608 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0ee      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
 8003600:	40021000 	.word	0x40021000
 8003604:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003608:	4b77      	ldr	r3, [pc, #476]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e9      	bne.n	80035ea <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003616:	7ffb      	ldrb	r3, [r7, #31]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d105      	bne.n	8003628 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361c:	4b72      	ldr	r3, [pc, #456]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	4a71      	ldr	r2, [pc, #452]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003626:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80d5 	beq.w	80037dc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	f000 808e 	beq.w	8003756 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	2b02      	cmp	r3, #2
 8003640:	d15b      	bne.n	80036fa <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b69      	ldr	r3, [pc, #420]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a68      	ldr	r2, [pc, #416]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800364c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7ff f9e7 	bl	8002a20 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003656:	f7ff f9e3 	bl	8002a20 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0ba      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003668:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003674:	4b5c      	ldr	r3, [pc, #368]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	4b5c      	ldr	r3, [pc, #368]	; (80037ec <HAL_RCC_OscConfig+0x75c>)
 800367a:	4013      	ands	r3, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003684:	3a01      	subs	r2, #1
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	4311      	orrs	r1, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800368e:	0212      	lsls	r2, r2, #8
 8003690:	4311      	orrs	r1, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003696:	0852      	lsrs	r2, r2, #1
 8003698:	3a01      	subs	r2, #1
 800369a:	0552      	lsls	r2, r2, #21
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036a2:	0852      	lsrs	r2, r2, #1
 80036a4:	3a01      	subs	r2, #1
 80036a6:	0652      	lsls	r2, r2, #25
 80036a8:	4311      	orrs	r1, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036ae:	0912      	lsrs	r2, r2, #4
 80036b0:	0452      	lsls	r2, r2, #17
 80036b2:	430a      	orrs	r2, r1
 80036b4:	494c      	ldr	r1, [pc, #304]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ba:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a4a      	ldr	r2, [pc, #296]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 80036c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c6:	4b48      	ldr	r3, [pc, #288]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4a47      	ldr	r2, [pc, #284]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 80036cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7ff f9a5 	bl	8002a20 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7ff f9a1 	bl	8002a20 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e078      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ec:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x64a>
 80036f8:	e070      	b.n	80037dc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a3a      	ldr	r2, [pc, #232]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003704:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003706:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d105      	bne.n	800371e <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003712:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	4a34      	ldr	r2, [pc, #208]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003718:	f023 0303 	bic.w	r3, r3, #3
 800371c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800371e:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4a31      	ldr	r2, [pc, #196]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003724:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7ff f977 	bl	8002a20 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003736:	f7ff f973 	bl	8002a20 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e04a      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x6a6>
 8003754:	e042      	b.n	80037dc <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e03d      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003762:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <HAL_RCC_OscConfig+0x758>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0203 	and.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	429a      	cmp	r2, r3
 8003774:	d130      	bne.n	80037d8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	3b01      	subs	r3, #1
 8003782:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d127      	bne.n	80037d8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003792:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d11f      	bne.n	80037d8 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a2:	2a07      	cmp	r2, #7
 80037a4:	bf14      	ite	ne
 80037a6:	2201      	movne	r2, #1
 80037a8:	2200      	moveq	r2, #0
 80037aa:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d113      	bne.n	80037d8 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	3b01      	subs	r3, #1
 80037be:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d109      	bne.n	80037d8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	3b01      	subs	r3, #1
 80037d2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
 80037ec:	f99d808c 	.word	0xf99d808c

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0c8      	b.n	8003996 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d910      	bls.n	8003834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 0207 	bic.w	r2, r3, #7
 800381a:	4961      	ldr	r1, [pc, #388]	; (80039a0 <HAL_RCC_ClockConfig+0x1b0>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b5f      	ldr	r3, [pc, #380]	; (80039a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b0      	b.n	8003996 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d04c      	beq.n	80038da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d107      	bne.n	8003858 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003848:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d121      	bne.n	8003898 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e09e      	b.n	8003996 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d107      	bne.n	8003870 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d115      	bne.n	8003898 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e092      	b.n	8003996 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d107      	bne.n	8003888 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003878:	4b4a      	ldr	r3, [pc, #296]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e086      	b.n	8003996 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003888:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e07e      	b.n	8003996 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003898:	4b42      	ldr	r3, [pc, #264]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 0203 	bic.w	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	493f      	ldr	r1, [pc, #252]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038aa:	f7ff f8b9 	bl	8002a20 <HAL_GetTick>
 80038ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b2:	f7ff f8b5 	bl	8002a20 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e066      	b.n	8003996 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 020c 	and.w	r2, r3, #12
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d1eb      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e6:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	492c      	ldr	r1, [pc, #176]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f8:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <HAL_RCC_ClockConfig+0x1b0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d210      	bcs.n	8003928 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 0207 	bic.w	r2, r3, #7
 800390e:	4924      	ldr	r1, [pc, #144]	; (80039a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e036      	b.n	8003996 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4918      	ldr	r1, [pc, #96]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4910      	ldr	r1, [pc, #64]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003966:	f000 f825 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 800396a:	4601      	mov	r1, r0
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <HAL_RCC_ClockConfig+0x1b4>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	5cd3      	ldrb	r3, [r2, r3]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	fa21 f303 	lsr.w	r3, r1, r3
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fffc 	bl	8002988 <HAL_InitTick>
 8003990:	4603      	mov	r3, r0
 8003992:	72fb      	strb	r3, [r7, #11]

  return status;
 8003994:	7afb      	ldrb	r3, [r7, #11]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40022000 	.word	0x40022000
 80039a4:	40021000 	.word	0x40021000
 80039a8:	08005478 	.word	0x08005478
 80039ac:	20000000 	.word	0x20000000
 80039b0:	20000004 	.word	0x20000004

080039b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	; 0x24
 80039b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c2:	4b3d      	ldr	r3, [pc, #244]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039cc:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x34>
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d121      	bne.n	8003a26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d11e      	bne.n	8003a26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039e8:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e005      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a04:	4b2c      	ldr	r3, [pc, #176]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a10:	4a2a      	ldr	r2, [pc, #168]	; (8003abc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10d      	bne.n	8003a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d102      	bne.n	8003a32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a2c:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e004      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a38:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d133      	bne.n	8003aaa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0xa4>
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0xaa>
 8003a56:	e005      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a58:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a5a:	617b      	str	r3, [r7, #20]
      break;
 8003a5c:	e005      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a60:	617b      	str	r3, [r7, #20]
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	617b      	str	r3, [r7, #20]
      break;
 8003a68:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	3301      	adds	r3, #1
 8003a76:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	fb02 f203 	mul.w	r2, r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	0e5b      	lsrs	r3, r3, #25
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3724      	adds	r7, #36	; 0x24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08005490 	.word	0x08005490
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	007a1200 	.word	0x007a1200

08003ac8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000000 	.word	0x20000000

08003ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ae4:	f7ff fff0 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4601      	mov	r1, r0
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003af6:	5cd3      	ldrb	r3, [r2, r3]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	08005488 	.word	0x08005488

08003b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b10:	f7ff ffda 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003b14:	4601      	mov	r1, r0
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0adb      	lsrs	r3, r3, #11
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08005488 	.word	0x08005488

08003b38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b44:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b50:	f7ff fa3a 	bl	8002fc8 <HAL_PWREx_GetVoltageRange>
 8003b54:	6178      	str	r0, [r7, #20]
 8003b56:	e014      	b.n	8003b82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b62:	6593      	str	r3, [r2, #88]	; 0x58
 8003b64:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b70:	f7ff fa2a 	bl	8002fc8 <HAL_PWREx_GetVoltageRange>
 8003b74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b88:	d10b      	bne.n	8003ba2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b80      	cmp	r3, #128	; 0x80
 8003b8e:	d919      	bls.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2ba0      	cmp	r3, #160	; 0xa0
 8003b94:	d902      	bls.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b96:	2302      	movs	r3, #2
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	e013      	b.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	e010      	b.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d902      	bls.n	8003bae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ba8:	2303      	movs	r3, #3
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	e00a      	b.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d102      	bne.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	e004      	b.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b70      	cmp	r3, #112	; 0x70
 8003bbe:	d101      	bne.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 0207 	bic.w	r2, r3, #7
 8003bcc:	4909      	ldr	r1, [pc, #36]	; (8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d001      	beq.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40022000 	.word	0x40022000

08003bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c00:	2300      	movs	r3, #0
 8003c02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c04:	2300      	movs	r3, #0
 8003c06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d03f      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1c:	d01c      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c22:	d802      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00e      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c28:	e01f      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c2e:	d003      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c34:	d01c      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c36:	e018      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c38:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a84      	ldr	r2, [pc, #528]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c44:	e015      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fab9 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c56:	e00c      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3320      	adds	r3, #32
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fba0 	bl	80043a4 <RCCEx_PLLSAI2_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c68:	e003      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10b      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c78:	4b75      	ldr	r3, [pc, #468]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c86:	4972      	ldr	r1, [pc, #456]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c8e:	e001      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d03f      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca8:	d01c      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003caa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cae:	d802      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003cb4:	e01f      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cba:	d003      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003cbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cc0:	d01c      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003cc2:	e018      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cc4:	4b62      	ldr	r3, [pc, #392]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a61      	ldr	r2, [pc, #388]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cd0:	e015      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fa73 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ce2:	e00c      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3320      	adds	r3, #32
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fb5a 	bl	80043a4 <RCCEx_PLLSAI2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cf4:	e003      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cfa:	e000      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d04:	4b52      	ldr	r3, [pc, #328]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d12:	494f      	ldr	r1, [pc, #316]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d1a:	e001      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a0 	beq.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d32:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	4a40      	ldr	r2, [pc, #256]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6593      	str	r3, [r2, #88]	; 0x58
 8003d54:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d60:	2301      	movs	r3, #1
 8003d62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d70:	f7fe fe56 	bl	8002a20 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d76:	e009      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fe fe52 	bl	8002a20 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d902      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	74fb      	strb	r3, [r7, #19]
        break;
 8003d8a:	e005      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d8c:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d15c      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01f      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d019      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dbc:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc8:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fe11 	bl	8002a20 <HAL_GetTick>
 8003dfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e00:	e00b      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fe fe0d 	bl	8002a20 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d902      	bls.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	74fb      	strb	r3, [r7, #19]
            break;
 8003e18:	e006      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ec      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e3e:	4904      	ldr	r1, [pc, #16]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e46:	e009      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	74bb      	strb	r3, [r7, #18]
 8003e4c:	e006      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e5c:	7c7b      	ldrb	r3, [r7, #17]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4b9e      	ldr	r3, [pc, #632]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	4a9d      	ldr	r2, [pc, #628]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e7a:	4b98      	ldr	r3, [pc, #608]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f023 0203 	bic.w	r2, r3, #3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	4994      	ldr	r1, [pc, #592]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e9c:	4b8f      	ldr	r3, [pc, #572]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f023 020c 	bic.w	r2, r3, #12
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	498c      	ldr	r1, [pc, #560]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ebe:	4b87      	ldr	r3, [pc, #540]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	4983      	ldr	r1, [pc, #524]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee0:	4b7e      	ldr	r3, [pc, #504]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	497b      	ldr	r1, [pc, #492]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f02:	4b76      	ldr	r3, [pc, #472]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f10:	4972      	ldr	r1, [pc, #456]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f24:	4b6d      	ldr	r3, [pc, #436]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f32:	496a      	ldr	r1, [pc, #424]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f46:	4b65      	ldr	r3, [pc, #404]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	4961      	ldr	r1, [pc, #388]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f68:	4b5c      	ldr	r3, [pc, #368]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	4959      	ldr	r1, [pc, #356]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f8a:	4b54      	ldr	r3, [pc, #336]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f98:	4950      	ldr	r1, [pc, #320]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fac:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	4948      	ldr	r1, [pc, #288]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fce:	4b43      	ldr	r3, [pc, #268]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	493f      	ldr	r1, [pc, #252]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d028      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffe:	4937      	ldr	r1, [pc, #220]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400e:	d106      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004010:	4b32      	ldr	r3, [pc, #200]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a31      	ldr	r2, [pc, #196]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401a:	60d3      	str	r3, [r2, #12]
 800401c:	e011      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004026:	d10c      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f8c8 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d028      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800404e:	4b23      	ldr	r3, [pc, #140]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	491f      	ldr	r1, [pc, #124]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406c:	d106      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406e:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4a1a      	ldr	r2, [pc, #104]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004078:	60d3      	str	r3, [r2, #12]
 800407a:	e011      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004084:	d10c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	2101      	movs	r1, #1
 800408c:	4618      	mov	r0, r3
 800408e:	f000 f899 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8004092:	4603      	mov	r3, r0
 8004094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d02b      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ba:	4908      	ldr	r1, [pc, #32]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ca:	d109      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a02      	ldr	r2, [pc, #8]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d6:	60d3      	str	r3, [r2, #12]
 80040d8:	e014      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2101      	movs	r1, #1
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 f867 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d02f      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411e:	4928      	ldr	r1, [pc, #160]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800412e:	d10d      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f844 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d014      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	74bb      	strb	r3, [r7, #18]
 800414a:	e011      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004154:	d10c      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3320      	adds	r3, #32
 800415a:	2102      	movs	r1, #2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f921 	bl	80043a4 <RCCEx_PLLSAI2_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800418a:	490d      	ldr	r1, [pc, #52]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ae:	4904      	ldr	r1, [pc, #16]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000

080041c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041d2:	4b73      	ldr	r3, [pc, #460]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d018      	beq.n	8004210 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041de:	4b70      	ldr	r3, [pc, #448]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0203 	and.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d10d      	bne.n	800420a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
       ||
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041f6:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
       ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d044      	beq.n	8004294 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
 800420e:	e041      	b.n	8004294 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d00c      	beq.n	8004232 <RCCEx_PLLSAI1_Config+0x6e>
 8004218:	2b03      	cmp	r3, #3
 800421a:	d013      	beq.n	8004244 <RCCEx_PLLSAI1_Config+0x80>
 800421c:	2b01      	cmp	r3, #1
 800421e:	d120      	bne.n	8004262 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004220:	4b5f      	ldr	r3, [pc, #380]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d11d      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004230:	e01a      	b.n	8004268 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004232:	4b5b      	ldr	r3, [pc, #364]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004242:	e013      	b.n	800426c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004244:	4b56      	ldr	r3, [pc, #344]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10f      	bne.n	8004270 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004250:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004260:	e006      	b.n	8004270 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      break;
 8004266:	e004      	b.n	8004272 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004268:	bf00      	nop
 800426a:	e002      	b.n	8004272 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800426c:	bf00      	nop
 800426e:	e000      	b.n	8004272 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004270:	bf00      	nop
    }

    if(status == HAL_OK)
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10d      	bne.n	8004294 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004278:	4b49      	ldr	r3, [pc, #292]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	3b01      	subs	r3, #1
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	430b      	orrs	r3, r1
 800428e:	4944      	ldr	r1, [pc, #272]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d17d      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800429a:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a40      	ldr	r2, [pc, #256]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a6:	f7fe fbbb 	bl	8002a20 <HAL_GetTick>
 80042aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042ac:	e009      	b.n	80042c2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042ae:	f7fe fbb7 	bl	8002a20 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d902      	bls.n	80042c2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	73fb      	strb	r3, [r7, #15]
        break;
 80042c0:	e005      	b.n	80042ce <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042c2:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ef      	bne.n	80042ae <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d160      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d111      	bne.n	80042fe <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042da:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6892      	ldr	r2, [r2, #8]
 80042ea:	0211      	lsls	r1, r2, #8
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68d2      	ldr	r2, [r2, #12]
 80042f0:	0912      	lsrs	r2, r2, #4
 80042f2:	0452      	lsls	r2, r2, #17
 80042f4:	430a      	orrs	r2, r1
 80042f6:	492a      	ldr	r1, [pc, #168]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
 80042fc:	e027      	b.n	800434e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d112      	bne.n	800432a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004304:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800430c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	0211      	lsls	r1, r2, #8
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6912      	ldr	r2, [r2, #16]
 800431a:	0852      	lsrs	r2, r2, #1
 800431c:	3a01      	subs	r2, #1
 800431e:	0552      	lsls	r2, r2, #21
 8004320:	430a      	orrs	r2, r1
 8004322:	491f      	ldr	r1, [pc, #124]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
 8004328:	e011      	b.n	800434e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004332:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6892      	ldr	r2, [r2, #8]
 800433a:	0211      	lsls	r1, r2, #8
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6952      	ldr	r2, [r2, #20]
 8004340:	0852      	lsrs	r2, r2, #1
 8004342:	3a01      	subs	r2, #1
 8004344:	0652      	lsls	r2, r2, #25
 8004346:	430a      	orrs	r2, r1
 8004348:	4915      	ldr	r1, [pc, #84]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800434a:	4313      	orrs	r3, r2
 800434c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004354:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004358:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435a:	f7fe fb61 	bl	8002a20 <HAL_GetTick>
 800435e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004360:	e009      	b.n	8004376 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004362:	f7fe fb5d 	bl	8002a20 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d902      	bls.n	8004376 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	73fb      	strb	r3, [r7, #15]
          break;
 8004374:	e005      	b.n	8004382 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0ef      	beq.n	8004362 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	4903      	ldr	r1, [pc, #12]	; (80043a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40021000 	.word	0x40021000

080043a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043b2:	4b68      	ldr	r3, [pc, #416]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043be:	4b65      	ldr	r3, [pc, #404]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0203 	and.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d10d      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
       ||
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043d6:	4b5f      	ldr	r3, [pc, #380]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
       ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d044      	beq.n	8004474 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e041      	b.n	8004474 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d00c      	beq.n	8004412 <RCCEx_PLLSAI2_Config+0x6e>
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d013      	beq.n	8004424 <RCCEx_PLLSAI2_Config+0x80>
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d120      	bne.n	8004442 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004400:	4b54      	ldr	r3, [pc, #336]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d11d      	bne.n	8004448 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004410:	e01a      	b.n	8004448 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004412:	4b50      	ldr	r3, [pc, #320]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441a:	2b00      	cmp	r3, #0
 800441c:	d116      	bne.n	800444c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004422:	e013      	b.n	800444c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004424:	4b4b      	ldr	r3, [pc, #300]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10f      	bne.n	8004450 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004430:	4b48      	ldr	r3, [pc, #288]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d109      	bne.n	8004450 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004440:	e006      	b.n	8004450 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
      break;
 8004446:	e004      	b.n	8004452 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004448:	bf00      	nop
 800444a:	e002      	b.n	8004452 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004450:	bf00      	nop
    }

    if(status == HAL_OK)
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10d      	bne.n	8004474 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004458:	4b3e      	ldr	r3, [pc, #248]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	3b01      	subs	r3, #1
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	430b      	orrs	r3, r1
 800446e:	4939      	ldr	r1, [pc, #228]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004470:	4313      	orrs	r3, r2
 8004472:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d167      	bne.n	800454a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800447a:	4b36      	ldr	r3, [pc, #216]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a35      	ldr	r2, [pc, #212]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004486:	f7fe facb 	bl	8002a20 <HAL_GetTick>
 800448a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800448c:	e009      	b.n	80044a2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800448e:	f7fe fac7 	bl	8002a20 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d902      	bls.n	80044a2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	73fb      	strb	r3, [r7, #15]
        break;
 80044a0:	e005      	b.n	80044ae <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044a2:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1ef      	bne.n	800448e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d14a      	bne.n	800454a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d111      	bne.n	80044de <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6892      	ldr	r2, [r2, #8]
 80044ca:	0211      	lsls	r1, r2, #8
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68d2      	ldr	r2, [r2, #12]
 80044d0:	0912      	lsrs	r2, r2, #4
 80044d2:	0452      	lsls	r2, r2, #17
 80044d4:	430a      	orrs	r2, r1
 80044d6:	491f      	ldr	r1, [pc, #124]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	614b      	str	r3, [r1, #20]
 80044dc:	e011      	b.n	8004502 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044de:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6892      	ldr	r2, [r2, #8]
 80044ee:	0211      	lsls	r1, r2, #8
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6912      	ldr	r2, [r2, #16]
 80044f4:	0852      	lsrs	r2, r2, #1
 80044f6:	3a01      	subs	r2, #1
 80044f8:	0652      	lsls	r2, r2, #25
 80044fa:	430a      	orrs	r2, r1
 80044fc:	4915      	ldr	r1, [pc, #84]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004502:	4b14      	ldr	r3, [pc, #80]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a13      	ldr	r2, [pc, #76]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fe fa87 	bl	8002a20 <HAL_GetTick>
 8004512:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004514:	e009      	b.n	800452a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004516:	f7fe fa83 	bl	8002a20 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d902      	bls.n	800452a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	73fb      	strb	r3, [r7, #15]
          break;
 8004528:	e005      	b.n	8004536 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ef      	beq.n	8004516 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	4903      	ldr	r1, [pc, #12]	; (8004554 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800454a:	7bfb      	ldrb	r3, [r7, #15]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000

08004558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e040      	b.n	80045ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fe f914 	bl	80027a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2224      	movs	r2, #36	; 0x24
 8004584:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f98c 	bl	80048b4 <UART_SetConfig>
 800459c:	4603      	mov	r3, r0
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e022      	b.n	80045ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fcc8 	bl	8004f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fd4f 	bl	8005088 <UART_CheckIdleState>
 80045ea:	4603      	mov	r3, r0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	4613      	mov	r3, r2
 8004602:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004608:	2b20      	cmp	r3, #32
 800460a:	f040 8081 	bne.w	8004710 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_UART_Transmit+0x26>
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e079      	b.n	8004712 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_UART_Transmit+0x38>
 8004628:	2302      	movs	r3, #2
 800462a:	e072      	b.n	8004712 <HAL_UART_Transmit+0x11e>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2221      	movs	r2, #33	; 0x21
 800463e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004640:	f7fe f9ee 	bl	8002a20 <HAL_GetTick>
 8004644:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465e:	d108      	bne.n	8004672 <HAL_UART_Transmit+0x7e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	e003      	b.n	800467a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800467a:	e02d      	b.n	80046d8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fd43 	bl	8005112 <UART_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e03d      	b.n	8004712 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	881a      	ldrh	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a8:	b292      	uxth	r2, r2
 80046aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	3302      	adds	r3, #2
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e008      	b.n	80046c6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	b292      	uxth	r2, r2
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1cb      	bne.n	800467c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2200      	movs	r2, #0
 80046ec:	2140      	movs	r1, #64	; 0x40
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fd0f 	bl	8005112 <UART_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e009      	b.n	8004712 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	e000      	b.n	8004712 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b08a      	sub	sp, #40	; 0x28
 800471e:	af02      	add	r7, sp, #8
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	603b      	str	r3, [r7, #0]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472e:	2b20      	cmp	r3, #32
 8004730:	f040 80bb 	bne.w	80048aa <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_UART_Receive+0x26>
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0b3      	b.n	80048ac <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_UART_Receive+0x38>
 800474e:	2302      	movs	r3, #2
 8004750:	e0ac      	b.n	80048ac <HAL_UART_Receive+0x192>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2222      	movs	r2, #34	; 0x22
 8004764:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004766:	f7fe f95b 	bl	8002a20 <HAL_GetTick>
 800476a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004784:	d10e      	bne.n	80047a4 <HAL_UART_Receive+0x8a>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <HAL_UART_Receive+0x80>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004798:	e02d      	b.n	80047f6 <HAL_UART_Receive+0xdc>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	22ff      	movs	r2, #255	; 0xff
 800479e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047a2:	e028      	b.n	80047f6 <HAL_UART_Receive+0xdc>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10d      	bne.n	80047c8 <HAL_UART_Receive+0xae>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <HAL_UART_Receive+0xa4>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	22ff      	movs	r2, #255	; 0xff
 80047b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047bc:	e01b      	b.n	80047f6 <HAL_UART_Receive+0xdc>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	227f      	movs	r2, #127	; 0x7f
 80047c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047c6:	e016      	b.n	80047f6 <HAL_UART_Receive+0xdc>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047d0:	d10d      	bne.n	80047ee <HAL_UART_Receive+0xd4>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d104      	bne.n	80047e4 <HAL_UART_Receive+0xca>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	227f      	movs	r2, #127	; 0x7f
 80047de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047e2:	e008      	b.n	80047f6 <HAL_UART_Receive+0xdc>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	223f      	movs	r2, #63	; 0x3f
 80047e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ec:	e003      	b.n	80047f6 <HAL_UART_Receive+0xdc>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004806:	d108      	bne.n	800481a <HAL_UART_Receive+0x100>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	e003      	b.n	8004822 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004822:	e033      	b.n	800488c <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2200      	movs	r2, #0
 800482c:	2120      	movs	r1, #32
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fc6f 	bl	8005112 <UART_WaitOnFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e036      	b.n	80048ac <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10c      	bne.n	800485e <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800484a:	b29a      	uxth	r2, r3
 800484c:	8a7b      	ldrh	r3, [r7, #18]
 800484e:	4013      	ands	r3, r2
 8004850:	b29a      	uxth	r2, r3
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3302      	adds	r3, #2
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	e00d      	b.n	800487a <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004864:	b29b      	uxth	r3, r3
 8004866:	b2da      	uxtb	r2, r3
 8004868:	8a7b      	ldrh	r3, [r7, #18]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	4013      	ands	r3, r2
 800486e:	b2da      	uxtb	r2, r3
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3301      	adds	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1c5      	bne.n	8004824 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80048b8:	b088      	sub	sp, #32
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4bac      	ldr	r3, [pc, #688]	; (8004b9c <UART_SetConfig+0x2e8>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	69f9      	ldr	r1, [r7, #28]
 80048f2:	430b      	orrs	r3, r1
 80048f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4aa2      	ldr	r2, [pc, #648]	; (8004ba0 <UART_SetConfig+0x2ec>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	4313      	orrs	r3, r2
 8004924:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	430a      	orrs	r2, r1
 8004938:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a99      	ldr	r2, [pc, #612]	; (8004ba4 <UART_SetConfig+0x2f0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d121      	bne.n	8004988 <UART_SetConfig+0xd4>
 8004944:	4b98      	ldr	r3, [pc, #608]	; (8004ba8 <UART_SetConfig+0x2f4>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b03      	cmp	r3, #3
 8004950:	d816      	bhi.n	8004980 <UART_SetConfig+0xcc>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0xa4>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004969 	.word	0x08004969
 800495c:	08004975 	.word	0x08004975
 8004960:	0800496f 	.word	0x0800496f
 8004964:	0800497b 	.word	0x0800497b
 8004968:	2301      	movs	r3, #1
 800496a:	76fb      	strb	r3, [r7, #27]
 800496c:	e0e8      	b.n	8004b40 <UART_SetConfig+0x28c>
 800496e:	2302      	movs	r3, #2
 8004970:	76fb      	strb	r3, [r7, #27]
 8004972:	e0e5      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004974:	2304      	movs	r3, #4
 8004976:	76fb      	strb	r3, [r7, #27]
 8004978:	e0e2      	b.n	8004b40 <UART_SetConfig+0x28c>
 800497a:	2308      	movs	r3, #8
 800497c:	76fb      	strb	r3, [r7, #27]
 800497e:	e0df      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004980:	2310      	movs	r3, #16
 8004982:	76fb      	strb	r3, [r7, #27]
 8004984:	bf00      	nop
 8004986:	e0db      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a87      	ldr	r2, [pc, #540]	; (8004bac <UART_SetConfig+0x2f8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d134      	bne.n	80049fc <UART_SetConfig+0x148>
 8004992:	4b85      	ldr	r3, [pc, #532]	; (8004ba8 <UART_SetConfig+0x2f4>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d829      	bhi.n	80049f4 <UART_SetConfig+0x140>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0xf4>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	080049f5 	.word	0x080049f5
 80049b0:	080049f5 	.word	0x080049f5
 80049b4:	080049f5 	.word	0x080049f5
 80049b8:	080049e9 	.word	0x080049e9
 80049bc:	080049f5 	.word	0x080049f5
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	080049f5 	.word	0x080049f5
 80049c8:	080049e3 	.word	0x080049e3
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049f5 	.word	0x080049f5
 80049d8:	080049ef 	.word	0x080049ef
 80049dc:	2300      	movs	r3, #0
 80049de:	76fb      	strb	r3, [r7, #27]
 80049e0:	e0ae      	b.n	8004b40 <UART_SetConfig+0x28c>
 80049e2:	2302      	movs	r3, #2
 80049e4:	76fb      	strb	r3, [r7, #27]
 80049e6:	e0ab      	b.n	8004b40 <UART_SetConfig+0x28c>
 80049e8:	2304      	movs	r3, #4
 80049ea:	76fb      	strb	r3, [r7, #27]
 80049ec:	e0a8      	b.n	8004b40 <UART_SetConfig+0x28c>
 80049ee:	2308      	movs	r3, #8
 80049f0:	76fb      	strb	r3, [r7, #27]
 80049f2:	e0a5      	b.n	8004b40 <UART_SetConfig+0x28c>
 80049f4:	2310      	movs	r3, #16
 80049f6:	76fb      	strb	r3, [r7, #27]
 80049f8:	bf00      	nop
 80049fa:	e0a1      	b.n	8004b40 <UART_SetConfig+0x28c>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a6b      	ldr	r2, [pc, #428]	; (8004bb0 <UART_SetConfig+0x2fc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d120      	bne.n	8004a48 <UART_SetConfig+0x194>
 8004a06:	4b68      	ldr	r3, [pc, #416]	; (8004ba8 <UART_SetConfig+0x2f4>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d00f      	beq.n	8004a34 <UART_SetConfig+0x180>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d802      	bhi.n	8004a1e <UART_SetConfig+0x16a>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <UART_SetConfig+0x174>
 8004a1c:	e010      	b.n	8004a40 <UART_SetConfig+0x18c>
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d005      	beq.n	8004a2e <UART_SetConfig+0x17a>
 8004a22:	2b30      	cmp	r3, #48	; 0x30
 8004a24:	d009      	beq.n	8004a3a <UART_SetConfig+0x186>
 8004a26:	e00b      	b.n	8004a40 <UART_SetConfig+0x18c>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	76fb      	strb	r3, [r7, #27]
 8004a2c:	e088      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	76fb      	strb	r3, [r7, #27]
 8004a32:	e085      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a34:	2304      	movs	r3, #4
 8004a36:	76fb      	strb	r3, [r7, #27]
 8004a38:	e082      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	76fb      	strb	r3, [r7, #27]
 8004a3e:	e07f      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a40:	2310      	movs	r3, #16
 8004a42:	76fb      	strb	r3, [r7, #27]
 8004a44:	bf00      	nop
 8004a46:	e07b      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a59      	ldr	r2, [pc, #356]	; (8004bb4 <UART_SetConfig+0x300>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d120      	bne.n	8004a94 <UART_SetConfig+0x1e0>
 8004a52:	4b55      	ldr	r3, [pc, #340]	; (8004ba8 <UART_SetConfig+0x2f4>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d00f      	beq.n	8004a80 <UART_SetConfig+0x1cc>
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d802      	bhi.n	8004a6a <UART_SetConfig+0x1b6>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <UART_SetConfig+0x1c0>
 8004a68:	e010      	b.n	8004a8c <UART_SetConfig+0x1d8>
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	d005      	beq.n	8004a7a <UART_SetConfig+0x1c6>
 8004a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a70:	d009      	beq.n	8004a86 <UART_SetConfig+0x1d2>
 8004a72:	e00b      	b.n	8004a8c <UART_SetConfig+0x1d8>
 8004a74:	2300      	movs	r3, #0
 8004a76:	76fb      	strb	r3, [r7, #27]
 8004a78:	e062      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	76fb      	strb	r3, [r7, #27]
 8004a7e:	e05f      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a80:	2304      	movs	r3, #4
 8004a82:	76fb      	strb	r3, [r7, #27]
 8004a84:	e05c      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a86:	2308      	movs	r3, #8
 8004a88:	76fb      	strb	r3, [r7, #27]
 8004a8a:	e059      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	76fb      	strb	r3, [r7, #27]
 8004a90:	bf00      	nop
 8004a92:	e055      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a47      	ldr	r2, [pc, #284]	; (8004bb8 <UART_SetConfig+0x304>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d124      	bne.n	8004ae8 <UART_SetConfig+0x234>
 8004a9e:	4b42      	ldr	r3, [pc, #264]	; (8004ba8 <UART_SetConfig+0x2f4>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aac:	d012      	beq.n	8004ad4 <UART_SetConfig+0x220>
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab2:	d802      	bhi.n	8004aba <UART_SetConfig+0x206>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <UART_SetConfig+0x214>
 8004ab8:	e012      	b.n	8004ae0 <UART_SetConfig+0x22c>
 8004aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abe:	d006      	beq.n	8004ace <UART_SetConfig+0x21a>
 8004ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac4:	d009      	beq.n	8004ada <UART_SetConfig+0x226>
 8004ac6:	e00b      	b.n	8004ae0 <UART_SetConfig+0x22c>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	76fb      	strb	r3, [r7, #27]
 8004acc:	e038      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	76fb      	strb	r3, [r7, #27]
 8004ad2:	e035      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	76fb      	strb	r3, [r7, #27]
 8004ad8:	e032      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004ada:	2308      	movs	r3, #8
 8004adc:	76fb      	strb	r3, [r7, #27]
 8004ade:	e02f      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	76fb      	strb	r3, [r7, #27]
 8004ae4:	bf00      	nop
 8004ae6:	e02b      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <UART_SetConfig+0x2ec>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d124      	bne.n	8004b3c <UART_SetConfig+0x288>
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <UART_SetConfig+0x2f4>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b00:	d012      	beq.n	8004b28 <UART_SetConfig+0x274>
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d802      	bhi.n	8004b0e <UART_SetConfig+0x25a>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <UART_SetConfig+0x268>
 8004b0c:	e012      	b.n	8004b34 <UART_SetConfig+0x280>
 8004b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b12:	d006      	beq.n	8004b22 <UART_SetConfig+0x26e>
 8004b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b18:	d009      	beq.n	8004b2e <UART_SetConfig+0x27a>
 8004b1a:	e00b      	b.n	8004b34 <UART_SetConfig+0x280>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	76fb      	strb	r3, [r7, #27]
 8004b20:	e00e      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004b22:	2302      	movs	r3, #2
 8004b24:	76fb      	strb	r3, [r7, #27]
 8004b26:	e00b      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	76fb      	strb	r3, [r7, #27]
 8004b2c:	e008      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004b2e:	2308      	movs	r3, #8
 8004b30:	76fb      	strb	r3, [r7, #27]
 8004b32:	e005      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004b34:	2310      	movs	r3, #16
 8004b36:	76fb      	strb	r3, [r7, #27]
 8004b38:	bf00      	nop
 8004b3a:	e001      	b.n	8004b40 <UART_SetConfig+0x28c>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <UART_SetConfig+0x2ec>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	f040 80fa 	bne.w	8004d40 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b4c:	7efb      	ldrb	r3, [r7, #27]
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d836      	bhi.n	8004bc0 <UART_SetConfig+0x30c>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x2a4>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004bc1 	.word	0x08004bc1
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004bc1 	.word	0x08004bc1
 8004b68:	08004b8b 	.word	0x08004b8b
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004bc1 	.word	0x08004bc1
 8004b78:	08004b93 	.word	0x08004b93
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f7fe ffb0 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8004b80:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b82:	e020      	b.n	8004bc6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <UART_SetConfig+0x308>)
 8004b86:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b88:	e01d      	b.n	8004bc6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004b8a:	f7fe ff13 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8004b8e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b90:	e019      	b.n	8004bc6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b96:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b98:	e015      	b.n	8004bc6 <UART_SetConfig+0x312>
 8004b9a:	bf00      	nop
 8004b9c:	efff69f3 	.word	0xefff69f3
 8004ba0:	40008000 	.word	0x40008000
 8004ba4:	40013800 	.word	0x40013800
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40004400 	.word	0x40004400
 8004bb0:	40004800 	.word	0x40004800
 8004bb4:	40004c00 	.word	0x40004c00
 8004bb8:	40005000 	.word	0x40005000
 8004bbc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	74fb      	strb	r3, [r7, #19]
        break;
 8004bc4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 81ac 	beq.w	8004f26 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	4413      	add	r3, r2
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d305      	bcc.n	8004bea <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d902      	bls.n	8004bf0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	74fb      	strb	r3, [r7, #19]
 8004bee:	e19a      	b.n	8004f26 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004bf0:	7efb      	ldrb	r3, [r7, #27]
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	f200 8091 	bhi.w	8004d1a <UART_SetConfig+0x466>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0x34c>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004d1b 	.word	0x08004d1b
 8004c08:	08004c71 	.word	0x08004c71
 8004c0c:	08004d1b 	.word	0x08004d1b
 8004c10:	08004ca5 	.word	0x08004ca5
 8004c14:	08004d1b 	.word	0x08004d1b
 8004c18:	08004d1b 	.word	0x08004d1b
 8004c1c:	08004d1b 	.word	0x08004d1b
 8004c20:	08004cf1 	.word	0x08004cf1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004c24:	f7fe ff5c 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	f04f 0400 	mov.w	r4, #0
 8004c38:	0214      	lsls	r4, r2, #8
 8004c3a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c3e:	020b      	lsls	r3, r1, #8
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6852      	ldr	r2, [r2, #4]
 8004c44:	0852      	lsrs	r2, r2, #1
 8004c46:	4611      	mov	r1, r2
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	eb13 0b01 	adds.w	fp, r3, r1
 8004c50:	eb44 0c02 	adc.w	ip, r4, r2
 8004c54:	4658      	mov	r0, fp
 8004c56:	4661      	mov	r1, ip
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f04f 0400 	mov.w	r4, #0
 8004c60:	461a      	mov	r2, r3
 8004c62:	4623      	mov	r3, r4
 8004c64:	f7fb fab0 	bl	80001c8 <__aeabi_uldivmod>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c6e:	e057      	b.n	8004d20 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	f04f 0400 	mov.w	r4, #0
 8004c7a:	49b1      	ldr	r1, [pc, #708]	; (8004f40 <UART_SetConfig+0x68c>)
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	eb13 0b01 	adds.w	fp, r3, r1
 8004c84:	eb44 0c02 	adc.w	ip, r4, r2
 8004c88:	4658      	mov	r0, fp
 8004c8a:	4661      	mov	r1, ip
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f04f 0400 	mov.w	r4, #0
 8004c94:	461a      	mov	r2, r3
 8004c96:	4623      	mov	r3, r4
 8004c98:	f7fb fa96 	bl	80001c8 <__aeabi_uldivmod>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004ca2:	e03d      	b.n	8004d20 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ca4:	f7fe fe86 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4619      	mov	r1, r3
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	f04f 0400 	mov.w	r4, #0
 8004cb8:	0214      	lsls	r4, r2, #8
 8004cba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004cbe:	020b      	lsls	r3, r1, #8
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6852      	ldr	r2, [r2, #4]
 8004cc4:	0852      	lsrs	r2, r2, #1
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	eb13 0b01 	adds.w	fp, r3, r1
 8004cd0:	eb44 0c02 	adc.w	ip, r4, r2
 8004cd4:	4658      	mov	r0, fp
 8004cd6:	4661      	mov	r1, ip
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f04f 0400 	mov.w	r4, #0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	f7fb fa70 	bl	80001c8 <__aeabi_uldivmod>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004cee:	e017      	b.n	8004d20 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	085b      	lsrs	r3, r3, #1
 8004cf6:	f04f 0400 	mov.w	r4, #0
 8004cfa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004cfe:	f144 0100 	adc.w	r1, r4, #0
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f04f 0400 	mov.w	r4, #0
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	f7fb fa5b 	bl	80001c8 <__aeabi_uldivmod>
 8004d12:	4603      	mov	r3, r0
 8004d14:	460c      	mov	r4, r1
 8004d16:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d18:	e002      	b.n	8004d20 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	74fb      	strb	r3, [r7, #19]
            break;
 8004d1e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d26:	d308      	bcc.n	8004d3a <UART_SetConfig+0x486>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2e:	d204      	bcs.n	8004d3a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	e0f5      	b.n	8004f26 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	74fb      	strb	r3, [r7, #19]
 8004d3e:	e0f2      	b.n	8004f26 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d48:	d17f      	bne.n	8004e4a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004d4a:	7efb      	ldrb	r3, [r7, #27]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d85c      	bhi.n	8004e0a <UART_SetConfig+0x556>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x4a4>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d9b 	.word	0x08004d9b
 8004d60:	08004db9 	.word	0x08004db9
 8004d64:	08004e0b 	.word	0x08004e0b
 8004d68:	08004dd5 	.word	0x08004dd5
 8004d6c:	08004e0b 	.word	0x08004e0b
 8004d70:	08004e0b 	.word	0x08004e0b
 8004d74:	08004e0b 	.word	0x08004e0b
 8004d78:	08004df3 	.word	0x08004df3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d7c:	f7fe feb0 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8004d80:	4603      	mov	r3, r0
 8004d82:	005a      	lsls	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d98:	e03a      	b.n	8004e10 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d9a:	f7fe feb7 	bl	8003b0c <HAL_RCC_GetPCLK2Freq>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	005a      	lsls	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004db6:	e02b      	b.n	8004e10 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004dc2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6852      	ldr	r2, [r2, #4]
 8004dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dd2:	e01d      	b.n	8004e10 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004dd4:	f7fe fdee 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	005a      	lsls	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004df0:	e00e      	b.n	8004e10 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e08:	e002      	b.n	8004e10 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b0f      	cmp	r3, #15
 8004e14:	d916      	bls.n	8004e44 <UART_SetConfig+0x590>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1c:	d212      	bcs.n	8004e44 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f023 030f 	bic.w	r3, r3, #15
 8004e26:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	897b      	ldrh	r3, [r7, #10]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	897a      	ldrh	r2, [r7, #10]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	e070      	b.n	8004f26 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	74fb      	strb	r3, [r7, #19]
 8004e48:	e06d      	b.n	8004f26 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004e4a:	7efb      	ldrb	r3, [r7, #27]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d859      	bhi.n	8004f04 <UART_SetConfig+0x650>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x5a4>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e99 	.word	0x08004e99
 8004e60:	08004eb5 	.word	0x08004eb5
 8004e64:	08004f05 	.word	0x08004f05
 8004e68:	08004ed1 	.word	0x08004ed1
 8004e6c:	08004f05 	.word	0x08004f05
 8004e70:	08004f05 	.word	0x08004f05
 8004e74:	08004f05 	.word	0x08004f05
 8004e78:	08004eed 	.word	0x08004eed
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e7c:	f7fe fe30 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e96:	e038      	b.n	8004f0a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e98:	f7fe fe38 	bl	8003b0c <HAL_RCC_GetPCLK2Freq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	441a      	add	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eb2:	e02a      	b.n	8004f0a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004ebe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6852      	ldr	r2, [r2, #4]
 8004ec6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ece:	e01c      	b.n	8004f0a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ed0:	f7fe fd70 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	441a      	add	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eea:	e00e      	b.n	8004f0a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f02:	e002      	b.n	8004f0a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	74fb      	strb	r3, [r7, #19]
        break;
 8004f08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b0f      	cmp	r3, #15
 8004f0e:	d908      	bls.n	8004f22 <UART_SetConfig+0x66e>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f16:	d204      	bcs.n	8004f22 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	60da      	str	r2, [r3, #12]
 8004f20:	e001      	b.n	8004f26 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f32:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004f3e:	bf00      	nop
 8004f40:	f4240000 	.word	0xf4240000

08004f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01a      	beq.n	800505a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005042:	d10a      	bne.n	800505a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	605a      	str	r2, [r3, #4]
  }
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af02      	add	r7, sp, #8
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005096:	f7fd fcc3 	bl	8002a20 <HAL_GetTick>
 800509a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d10e      	bne.n	80050c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f82a 	bl	8005112 <UART_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e020      	b.n	800510a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d10e      	bne.n	80050f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f814 	bl	8005112 <UART_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e00a      	b.n	800510a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005122:	e02a      	b.n	800517a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800512a:	d026      	beq.n	800517a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512c:	f7fd fc78 	bl	8002a20 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	429a      	cmp	r2, r3
 800513a:	d302      	bcc.n	8005142 <UART_WaitOnFlagUntilTimeout+0x30>
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d11b      	bne.n	800517a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005150:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e00f      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4013      	ands	r3, r2
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	429a      	cmp	r2, r3
 8005196:	d0c5      	beq.n	8005124 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <__libc_init_array>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	4e0d      	ldr	r6, [pc, #52]	; (80051dc <__libc_init_array+0x38>)
 80051a8:	4c0d      	ldr	r4, [pc, #52]	; (80051e0 <__libc_init_array+0x3c>)
 80051aa:	1ba4      	subs	r4, r4, r6
 80051ac:	10a4      	asrs	r4, r4, #2
 80051ae:	2500      	movs	r5, #0
 80051b0:	42a5      	cmp	r5, r4
 80051b2:	d109      	bne.n	80051c8 <__libc_init_array+0x24>
 80051b4:	4e0b      	ldr	r6, [pc, #44]	; (80051e4 <__libc_init_array+0x40>)
 80051b6:	4c0c      	ldr	r4, [pc, #48]	; (80051e8 <__libc_init_array+0x44>)
 80051b8:	f000 f83a 	bl	8005230 <_init>
 80051bc:	1ba4      	subs	r4, r4, r6
 80051be:	10a4      	asrs	r4, r4, #2
 80051c0:	2500      	movs	r5, #0
 80051c2:	42a5      	cmp	r5, r4
 80051c4:	d105      	bne.n	80051d2 <__libc_init_array+0x2e>
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051cc:	4798      	blx	r3
 80051ce:	3501      	adds	r5, #1
 80051d0:	e7ee      	b.n	80051b0 <__libc_init_array+0xc>
 80051d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051d6:	4798      	blx	r3
 80051d8:	3501      	adds	r5, #1
 80051da:	e7f2      	b.n	80051c2 <__libc_init_array+0x1e>
 80051dc:	080054c8 	.word	0x080054c8
 80051e0:	080054c8 	.word	0x080054c8
 80051e4:	080054c8 	.word	0x080054c8
 80051e8:	080054cc 	.word	0x080054cc

080051ec <memcmp>:
 80051ec:	b530      	push	{r4, r5, lr}
 80051ee:	2400      	movs	r4, #0
 80051f0:	42a2      	cmp	r2, r4
 80051f2:	d101      	bne.n	80051f8 <memcmp+0xc>
 80051f4:	2000      	movs	r0, #0
 80051f6:	e007      	b.n	8005208 <memcmp+0x1c>
 80051f8:	5d03      	ldrb	r3, [r0, r4]
 80051fa:	3401      	adds	r4, #1
 80051fc:	190d      	adds	r5, r1, r4
 80051fe:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005202:	42ab      	cmp	r3, r5
 8005204:	d0f4      	beq.n	80051f0 <memcmp+0x4>
 8005206:	1b58      	subs	r0, r3, r5
 8005208:	bd30      	pop	{r4, r5, pc}

0800520a <memcpy>:
 800520a:	b510      	push	{r4, lr}
 800520c:	1e43      	subs	r3, r0, #1
 800520e:	440a      	add	r2, r1
 8005210:	4291      	cmp	r1, r2
 8005212:	d100      	bne.n	8005216 <memcpy+0xc>
 8005214:	bd10      	pop	{r4, pc}
 8005216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521e:	e7f7      	b.n	8005210 <memcpy+0x6>

08005220 <memset>:
 8005220:	4402      	add	r2, r0
 8005222:	4603      	mov	r3, r0
 8005224:	4293      	cmp	r3, r2
 8005226:	d100      	bne.n	800522a <memset+0xa>
 8005228:	4770      	bx	lr
 800522a:	f803 1b01 	strb.w	r1, [r3], #1
 800522e:	e7f9      	b.n	8005224 <memset+0x4>

08005230 <_init>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	bf00      	nop
 8005234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005236:	bc08      	pop	{r3}
 8005238:	469e      	mov	lr, r3
 800523a:	4770      	bx	lr

0800523c <_fini>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	bf00      	nop
 8005240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005242:	bc08      	pop	{r3}
 8005244:	469e      	mov	lr, r3
 8005246:	4770      	bx	lr
