
MouseTreadmillSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013044  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .RamFunc      00000048  080131cc  080131cc  000231cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000012d8  08013214  08013214  00023214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080144ec  080144ec  000244ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  080144ec  080144ec  000244ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080144f4  080144f4  00030464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  080144f4  080144f4  000244f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080144fc  080144fc  000244fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000464  20000000  08014500  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000165c  20000464  08014964  00030464  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ac0  08014964  00031ac0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b203  00000000  00000000  00030494  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000442e  00000000  00000000  0005b697  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b758  00000000  00000000  0005fac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001678  00000000  00000000  0007b220  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001df0  00000000  00000000  0007c898  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002b169  00000000  00000000  0007e688  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00016ece  00000000  00000000  000a97f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000faf7e  00000000  00000000  000c06bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001bb63d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003ee4  00000000  00000000  001bb6b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000464 	.word	0x20000464
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080131b0 	.word	0x080131b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000468 	.word	0x20000468
 80001c4:	080131b0 	.word	0x080131b0

080001c8 <_mainCRTStartup>:
 80001c8:	4b15      	ldr	r3, [pc, #84]	; (8000220 <_mainCRTStartup+0x58>)
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	bf08      	it	eq
 80001ce:	4b13      	ldreq	r3, [pc, #76]	; (800021c <_mainCRTStartup+0x54>)
 80001d0:	469d      	mov	sp, r3
 80001d2:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001d6:	2100      	movs	r1, #0
 80001d8:	468b      	mov	fp, r1
 80001da:	460f      	mov	r7, r1
 80001dc:	4813      	ldr	r0, [pc, #76]	; (800022c <_mainCRTStartup+0x64>)
 80001de:	4a14      	ldr	r2, [pc, #80]	; (8000230 <_mainCRTStartup+0x68>)
 80001e0:	1a12      	subs	r2, r2, r0
 80001e2:	f012 feef 	bl	8012fc4 <memset>
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <_mainCRTStartup+0x5c>)
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d000      	beq.n	80001ee <_mainCRTStartup+0x26>
 80001ec:	4798      	blx	r3
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <_mainCRTStartup+0x60>)
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d000      	beq.n	80001f6 <_mainCRTStartup+0x2e>
 80001f4:	4798      	blx	r3
 80001f6:	2000      	movs	r0, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	0004      	movs	r4, r0
 80001fc:	000d      	movs	r5, r1
 80001fe:	480d      	ldr	r0, [pc, #52]	; (8000234 <_mainCRTStartup+0x6c>)
 8000200:	2800      	cmp	r0, #0
 8000202:	d002      	beq.n	800020a <_mainCRTStartup+0x42>
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <_mainCRTStartup+0x70>)
 8000206:	f012 ff57 	bl	80130b8 <atexit>
 800020a:	f012 fe9d 	bl	8012f48 <__libc_init_array>
 800020e:	0020      	movs	r0, r4
 8000210:	0029      	movs	r1, r5
 8000212:	f003 fe69 	bl	8003ee8 <main>
 8000216:	f012 fe87 	bl	8012f28 <exit>
 800021a:	bf00      	nop
 800021c:	00080000 	.word	0x00080000
	...
 800022c:	20000464 	.word	0x20000464
 8000230:	20001ac0 	.word	0x20001ac0
 8000234:	080130b9 	.word	0x080130b9
 8000238:	080130c5 	.word	0x080130c5
 800023c:	08014500 	.word	0x08014500
 8000240:	20000000 	.word	0x20000000
 8000244:	20000464 	.word	0x20000464
 8000248:	20000464 	.word	0x20000464
 800024c:	20001ac0 	.word	0x20001ac0

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000260:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000264:	f000 b972 	b.w	800054c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9e08      	ldr	r6, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	4688      	mov	r8, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14b      	bne.n	8000326 <__udivmoddi4+0xa6>
 800028e:	428a      	cmp	r2, r1
 8000290:	4615      	mov	r5, r2
 8000292:	d967      	bls.n	8000364 <__udivmoddi4+0xe4>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0720 	rsb	r7, r2, #32
 800029e:	fa01 f302 	lsl.w	r3, r1, r2
 80002a2:	fa20 f707 	lsr.w	r7, r0, r7
 80002a6:	4095      	lsls	r5, r2
 80002a8:	ea47 0803 	orr.w	r8, r7, r3
 80002ac:	4094      	lsls	r4, r2
 80002ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b8:	fa1f fc85 	uxth.w	ip, r5
 80002bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c4:	fb07 f10c 	mul.w	r1, r7, ip
 80002c8:	4299      	cmp	r1, r3
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x60>
 80002cc:	18eb      	adds	r3, r5, r3
 80002ce:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002d2:	f080 811b 	bcs.w	800050c <__udivmoddi4+0x28c>
 80002d6:	4299      	cmp	r1, r3
 80002d8:	f240 8118 	bls.w	800050c <__udivmoddi4+0x28c>
 80002dc:	3f02      	subs	r7, #2
 80002de:	442b      	add	r3, r5
 80002e0:	1a5b      	subs	r3, r3, r1
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f4:	45a4      	cmp	ip, r4
 80002f6:	d909      	bls.n	800030c <__udivmoddi4+0x8c>
 80002f8:	192c      	adds	r4, r5, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	f080 8107 	bcs.w	8000510 <__udivmoddi4+0x290>
 8000302:	45a4      	cmp	ip, r4
 8000304:	f240 8104 	bls.w	8000510 <__udivmoddi4+0x290>
 8000308:	3802      	subs	r0, #2
 800030a:	442c      	add	r4, r5
 800030c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000310:	eba4 040c 	sub.w	r4, r4, ip
 8000314:	2700      	movs	r7, #0
 8000316:	b11e      	cbz	r6, 8000320 <__udivmoddi4+0xa0>
 8000318:	40d4      	lsrs	r4, r2
 800031a:	2300      	movs	r3, #0
 800031c:	e9c6 4300 	strd	r4, r3, [r6]
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0xbe>
 800032a:	2e00      	cmp	r6, #0
 800032c:	f000 80eb 	beq.w	8000506 <__udivmoddi4+0x286>
 8000330:	2700      	movs	r7, #0
 8000332:	e9c6 0100 	strd	r0, r1, [r6]
 8000336:	4638      	mov	r0, r7
 8000338:	4639      	mov	r1, r7
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f783 	clz	r7, r3
 8000342:	2f00      	cmp	r7, #0
 8000344:	d147      	bne.n	80003d6 <__udivmoddi4+0x156>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0xd0>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80fa 	bhi.w	8000544 <__udivmoddi4+0x2c4>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0303 	sbc.w	r3, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	4698      	mov	r8, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d0e0      	beq.n	8000320 <__udivmoddi4+0xa0>
 800035e:	e9c6 4800 	strd	r4, r8, [r6]
 8000362:	e7dd      	b.n	8000320 <__udivmoddi4+0xa0>
 8000364:	b902      	cbnz	r2, 8000368 <__udivmoddi4+0xe8>
 8000366:	deff      	udf	#255	; 0xff
 8000368:	fab2 f282 	clz	r2, r2
 800036c:	2a00      	cmp	r2, #0
 800036e:	f040 808f 	bne.w	8000490 <__udivmoddi4+0x210>
 8000372:	1b49      	subs	r1, r1, r5
 8000374:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000378:	fa1f f885 	uxth.w	r8, r5
 800037c:	2701      	movs	r7, #1
 800037e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fb0e 111c 	mls	r1, lr, ip, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb08 f10c 	mul.w	r1, r8, ip
 8000390:	4299      	cmp	r1, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000394:	18eb      	adds	r3, r5, r3
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x122>
 800039c:	4299      	cmp	r1, r3
 800039e:	f200 80cd 	bhi.w	800053c <__udivmoddi4+0x2bc>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80003b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x14c>
 80003bc:	192c      	adds	r4, r5, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x14a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80b6 	bhi.w	8000536 <__udivmoddi4+0x2b6>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e79f      	b.n	8000316 <__udivmoddi4+0x96>
 80003d6:	f1c7 0c20 	rsb	ip, r7, #32
 80003da:	40bb      	lsls	r3, r7
 80003dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003e4:	fa01 f407 	lsl.w	r4, r1, r7
 80003e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80003f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003f4:	4325      	orrs	r5, r4
 80003f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003fa:	0c2c      	lsrs	r4, r5, #16
 80003fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000400:	fa1f fa8e 	uxth.w	sl, lr
 8000404:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000408:	fb09 f40a 	mul.w	r4, r9, sl
 800040c:	429c      	cmp	r4, r3
 800040e:	fa02 f207 	lsl.w	r2, r2, r7
 8000412:	fa00 f107 	lsl.w	r1, r0, r7
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000418:	eb1e 0303 	adds.w	r3, lr, r3
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000420:	f080 8087 	bcs.w	8000532 <__udivmoddi4+0x2b2>
 8000424:	429c      	cmp	r4, r3
 8000426:	f240 8084 	bls.w	8000532 <__udivmoddi4+0x2b2>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4473      	add	r3, lr
 8000430:	1b1b      	subs	r3, r3, r4
 8000432:	b2ad      	uxth	r5, r5
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000440:	fb00 fa0a 	mul.w	sl, r0, sl
 8000444:	45a2      	cmp	sl, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1da>
 8000448:	eb1e 0404 	adds.w	r4, lr, r4
 800044c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000450:	d26b      	bcs.n	800052a <__udivmoddi4+0x2aa>
 8000452:	45a2      	cmp	sl, r4
 8000454:	d969      	bls.n	800052a <__udivmoddi4+0x2aa>
 8000456:	3802      	subs	r0, #2
 8000458:	4474      	add	r4, lr
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	eba4 040a 	sub.w	r4, r4, sl
 8000466:	454c      	cmp	r4, r9
 8000468:	46c2      	mov	sl, r8
 800046a:	464b      	mov	r3, r9
 800046c:	d354      	bcc.n	8000518 <__udivmoddi4+0x298>
 800046e:	d051      	beq.n	8000514 <__udivmoddi4+0x294>
 8000470:	2e00      	cmp	r6, #0
 8000472:	d069      	beq.n	8000548 <__udivmoddi4+0x2c8>
 8000474:	ebb1 050a 	subs.w	r5, r1, sl
 8000478:	eb64 0403 	sbc.w	r4, r4, r3
 800047c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000480:	40fd      	lsrs	r5, r7
 8000482:	40fc      	lsrs	r4, r7
 8000484:	ea4c 0505 	orr.w	r5, ip, r5
 8000488:	e9c6 5400 	strd	r5, r4, [r6]
 800048c:	2700      	movs	r7, #0
 800048e:	e747      	b.n	8000320 <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f703 	lsr.w	r7, r0, r3
 8000498:	4095      	lsls	r5, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	fa21 f303 	lsr.w	r3, r1, r3
 80004a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a6:	4338      	orrs	r0, r7
 80004a8:	0c01      	lsrs	r1, r0, #16
 80004aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ae:	fa1f f885 	uxth.w	r8, r5
 80004b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb07 f308 	mul.w	r3, r7, r8
 80004be:	428b      	cmp	r3, r1
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x256>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004cc:	d22f      	bcs.n	800052e <__udivmoddi4+0x2ae>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d92d      	bls.n	800052e <__udivmoddi4+0x2ae>
 80004d2:	3f02      	subs	r7, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1acb      	subs	r3, r1, r3
 80004d8:	b281      	uxth	r1, r0
 80004da:	fbb3 f0fe 	udiv	r0, r3, lr
 80004de:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e6:	fb00 f308 	mul.w	r3, r0, r8
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x27e>
 80004ee:	1869      	adds	r1, r5, r1
 80004f0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004f4:	d217      	bcs.n	8000526 <__udivmoddi4+0x2a6>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d915      	bls.n	8000526 <__udivmoddi4+0x2a6>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4429      	add	r1, r5
 80004fe:	1ac9      	subs	r1, r1, r3
 8000500:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000504:	e73b      	b.n	800037e <__udivmoddi4+0xfe>
 8000506:	4637      	mov	r7, r6
 8000508:	4630      	mov	r0, r6
 800050a:	e709      	b.n	8000320 <__udivmoddi4+0xa0>
 800050c:	4607      	mov	r7, r0
 800050e:	e6e7      	b.n	80002e0 <__udivmoddi4+0x60>
 8000510:	4618      	mov	r0, r3
 8000512:	e6fb      	b.n	800030c <__udivmoddi4+0x8c>
 8000514:	4541      	cmp	r1, r8
 8000516:	d2ab      	bcs.n	8000470 <__udivmoddi4+0x1f0>
 8000518:	ebb8 0a02 	subs.w	sl, r8, r2
 800051c:	eb69 020e 	sbc.w	r2, r9, lr
 8000520:	3801      	subs	r0, #1
 8000522:	4613      	mov	r3, r2
 8000524:	e7a4      	b.n	8000470 <__udivmoddi4+0x1f0>
 8000526:	4660      	mov	r0, ip
 8000528:	e7e9      	b.n	80004fe <__udivmoddi4+0x27e>
 800052a:	4618      	mov	r0, r3
 800052c:	e795      	b.n	800045a <__udivmoddi4+0x1da>
 800052e:	4667      	mov	r7, ip
 8000530:	e7d1      	b.n	80004d6 <__udivmoddi4+0x256>
 8000532:	4681      	mov	r9, r0
 8000534:	e77c      	b.n	8000430 <__udivmoddi4+0x1b0>
 8000536:	3802      	subs	r0, #2
 8000538:	442c      	add	r4, r5
 800053a:	e747      	b.n	80003cc <__udivmoddi4+0x14c>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	442b      	add	r3, r5
 8000542:	e72f      	b.n	80003a4 <__udivmoddi4+0x124>
 8000544:	4638      	mov	r0, r7
 8000546:	e708      	b.n	800035a <__udivmoddi4+0xda>
 8000548:	4637      	mov	r7, r6
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0xa0>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <mavlink_sha256_update>:
    G += GG;
    H += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000554:	b0df      	sub	sp, #380	; 0x17c
 8000556:	9004      	str	r0, [sp, #16]
 8000558:	9103      	str	r1, [sp, #12]
 800055a:	9202      	str	r2, [sp, #8]
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
 800055c:	6806      	ldr	r6, [r0, #0]
    uint32_t offset;

    m->sz[0] += len * 8;
 800055e:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 8000562:	6003      	str	r3, [r0, #0]
    if (m->sz[0] < old_sz)
 8000564:	42b3      	cmp	r3, r6
 8000566:	d202      	bcs.n	800056e <mavlink_sha256_update+0x1e>
	++m->sz[1];
 8000568:	6843      	ldr	r3, [r0, #4]
 800056a:	3301      	adds	r3, #1
 800056c:	6043      	str	r3, [r0, #4]
    offset = (old_sz / 8) % 64;
 800056e:	f3c6 06c5 	ubfx	r6, r6, #3, #6
    while(len > 0){
 8000572:	9b02      	ldr	r3, [sp, #8]
 8000574:	2b00      	cmp	r3, #0
 8000576:	f000 80c3 	beq.w	8000700 <mavlink_sha256_update+0x1b0>
 800057a:	ab1d      	add	r3, sp, #116	; 0x74
 800057c:	930d      	str	r3, [sp, #52]	; 0x34
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800057e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8000708 <mavlink_sha256_update+0x1b8>
 8000582:	e053      	b.n	800062c <mavlink_sha256_update+0xdc>
    for (i = 0; i < 64; i++) {
 8000584:	4635      	mov	r5, r6
 8000586:	4606      	mov	r6, r0
	AA = T1 + T2;
 8000588:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 800058a:	4667      	mov	r7, ip
 800058c:	468c      	mov	ip, r1
	EE = DD + T1;
 800058e:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000590:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8000594:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8000598:	ea83 6a71 	eor.w	sl, r3, r1, ror #25
 800059c:	ea27 0301 	bic.w	r3, r7, r1
 80005a0:	ea01 0b0c 	and.w	fp, r1, ip
 80005a4:	ea83 030b 	eor.w	r3, r3, fp
 80005a8:	4453      	add	r3, sl
 80005aa:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 80005ae:	4413      	add	r3, r2
 80005b0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80005b4:	4413      	add	r3, r2
 80005b6:	9a01      	ldr	r2, [sp, #4]
 80005b8:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80005ba:	ea4f 3270 	mov.w	r2, r0, ror #13
 80005be:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 80005c2:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 80005c6:	ea86 0a05 	eor.w	sl, r6, r5
 80005ca:	ea0a 0a00 	and.w	sl, sl, r0
 80005ce:	ea06 0b05 	and.w	fp, r6, r5
 80005d2:	ea8a 0a0b 	eor.w	sl, sl, fp
 80005d6:	4452      	add	r2, sl
	EE = DD + T1;
 80005d8:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 80005dc:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 80005de:	3401      	adds	r4, #1
 80005e0:	9701      	str	r7, [sp, #4]
 80005e2:	46ae      	mov	lr, r5
 80005e4:	2c40      	cmp	r4, #64	; 0x40
 80005e6:	d1cd      	bne.n	8000584 <mavlink_sha256_update+0x34>
    A += AA;
 80005e8:	9a05      	ldr	r2, [sp, #20]
 80005ea:	441a      	add	r2, r3
 80005ec:	4613      	mov	r3, r2
 80005ee:	9a04      	ldr	r2, [sp, #16]
 80005f0:	6093      	str	r3, [r2, #8]
    B += BB;
 80005f2:	9b06      	ldr	r3, [sp, #24]
 80005f4:	4403      	add	r3, r0
 80005f6:	4618      	mov	r0, r3
 80005f8:	60d0      	str	r0, [r2, #12]
    C += CC;
 80005fa:	9b07      	ldr	r3, [sp, #28]
 80005fc:	4433      	add	r3, r6
 80005fe:	461e      	mov	r6, r3
 8000600:	6116      	str	r6, [r2, #16]
    D += DD;
 8000602:	9b08      	ldr	r3, [sp, #32]
 8000604:	442b      	add	r3, r5
 8000606:	461d      	mov	r5, r3
 8000608:	6155      	str	r5, [r2, #20]
    E += EE;
 800060a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800060c:	445b      	add	r3, fp
 800060e:	6193      	str	r3, [r2, #24]
    F += FF;
 8000610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000612:	440b      	add	r3, r1
 8000614:	4619      	mov	r1, r3
 8000616:	61d1      	str	r1, [r2, #28]
    G += GG;
 8000618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800061a:	4463      	add	r3, ip
 800061c:	6213      	str	r3, [r2, #32]
    H += HH;
 800061e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000620:	443b      	add	r3, r7
 8000622:	6253      	str	r3, [r2, #36]	; 0x24
                p2[1] = p1[2];
                p2[2] = p1[1];
                p2[3] = p1[0];
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
 8000624:	2600      	movs	r6, #0
    while(len > 0){
 8000626:	9b02      	ldr	r3, [sp, #8]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d069      	beq.n	8000700 <mavlink_sha256_update+0x1b0>
	uint32_t l = 64 - offset;
 800062c:	f1c6 0540 	rsb	r5, r6, #64	; 0x40
 8000630:	9f02      	ldr	r7, [sp, #8]
 8000632:	42bd      	cmp	r5, r7
 8000634:	bf28      	it	cs
 8000636:	463d      	movcs	r5, r7
	memcpy(m->u.save_bytes + offset, p, l);
 8000638:	9b04      	ldr	r3, [sp, #16]
 800063a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800063e:	462a      	mov	r2, r5
 8000640:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8000644:	4649      	mov	r1, r9
 8000646:	19a0      	adds	r0, r4, r6
 8000648:	f012 fcb1 	bl	8012fae <memcpy>
	offset += l;
 800064c:	442e      	add	r6, r5
	p += l;
 800064e:	464b      	mov	r3, r9
 8000650:	442b      	add	r3, r5
 8000652:	9303      	str	r3, [sp, #12]
	len -= l;
 8000654:	1b7b      	subs	r3, r7, r5
 8000656:	9302      	str	r3, [sp, #8]
	if(offset == 64){
 8000658:	2e40      	cmp	r6, #64	; 0x40
 800065a:	d1e4      	bne.n	8000626 <mavlink_sha256_update+0xd6>
 800065c:	4622      	mov	r2, r4
 800065e:	a81e      	add	r0, sp, #120	; 0x78
 8000660:	ab0e      	add	r3, sp, #56	; 0x38
                p2[0] = p1[3];
 8000662:	78d1      	ldrb	r1, [r2, #3]
 8000664:	7019      	strb	r1, [r3, #0]
                p2[1] = p1[2];
 8000666:	7891      	ldrb	r1, [r2, #2]
 8000668:	7059      	strb	r1, [r3, #1]
                p2[2] = p1[1];
 800066a:	7851      	ldrb	r1, [r2, #1]
 800066c:	7099      	strb	r1, [r3, #2]
                p2[3] = p1[0];
 800066e:	f812 1b04 	ldrb.w	r1, [r2], #4
 8000672:	70d9      	strb	r1, [r3, #3]
 8000674:	3304      	adds	r3, #4
	    for (i = 0; i < 16; i++){
 8000676:	4283      	cmp	r3, r0
 8000678:	d1f3      	bne.n	8000662 <mavlink_sha256_update+0x112>
    AA = A;
 800067a:	9b04      	ldr	r3, [sp, #16]
 800067c:	689a      	ldr	r2, [r3, #8]
 800067e:	9205      	str	r2, [sp, #20]
    BB = B;
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	9206      	str	r2, [sp, #24]
    CC = C;
 8000684:	691a      	ldr	r2, [r3, #16]
 8000686:	9207      	str	r2, [sp, #28]
    DD = D;
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	9208      	str	r2, [sp, #32]
    EE = E;
 800068c:	699a      	ldr	r2, [r3, #24]
 800068e:	9209      	str	r2, [sp, #36]	; 0x24
    FF = F;
 8000690:	69da      	ldr	r2, [r3, #28]
 8000692:	920a      	str	r2, [sp, #40]	; 0x28
    GG = G;
 8000694:	6a1a      	ldr	r2, [r3, #32]
 8000696:	920b      	str	r2, [sp, #44]	; 0x2c
    HH = H;
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	930c      	str	r3, [sp, #48]	; 0x30
 800069c:	ab0d      	add	r3, sp, #52	; 0x34
 800069e:	aa1d      	add	r2, sp, #116	; 0x74
 80006a0:	980d      	ldr	r0, [sp, #52]	; 0x34
	data[i] = in[i];
 80006a2:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80006a6:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 80006aa:	4298      	cmp	r0, r3
 80006ac:	d1f9      	bne.n	80006a2 <mavlink_sha256_update+0x152>
 80006ae:	ac1e      	add	r4, sp, #120	; 0x78
 80006b0:	ad4e      	add	r5, sp, #312	; 0x138
 80006b2:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 80006b6:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006ba:	ea4f 43f2 	mov.w	r3, r2, ror #19
 80006be:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 80006c2:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80006c6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80006c8:	6800      	ldr	r0, [r0, #0]
 80006ca:	4402      	add	r2, r0
 80006cc:	4413      	add	r3, r2
 80006ce:	ea4f 42b1 	mov.w	r2, r1, ror #18
 80006d2:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 80006d6:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80006da:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 80006de:	42a5      	cmp	r5, r4
 80006e0:	d1e7      	bne.n	80006b2 <mavlink_sha256_update+0x162>
    DD = D;
 80006e2:	f8dd e020 	ldr.w	lr, [sp, #32]
    CC = C;
 80006e6:	9d07      	ldr	r5, [sp, #28]
    BB = B;
 80006e8:	9e06      	ldr	r6, [sp, #24]
    AA = A;
 80006ea:	9805      	ldr	r0, [sp, #20]
    GG = G;
 80006ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    FF = F;
 80006ee:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    HH = H;
 80006f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    EE = E;
 80006f4:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (i = 0; i < 64; i++) {
 80006f6:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80006f8:	f10d 0978 	add.w	r9, sp, #120	; 0x78
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	e747      	b.n	8000590 <mavlink_sha256_update+0x40>
	}
    }
}
 8000700:	b05f      	add	sp, #380	; 0x17c
 8000702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000706:	bf00      	nop
 8000708:	08013214 	.word	0x08013214

0800070c <mouseDriver_initSetpoint>:

/* Private functions for mouseDriver.c*/
/* Private Init functions */

void mouseDriver_initSetpoint(void){
	actual_speed_setpoint.setpoint_x = 0;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <mouseDriver_initSetpoint+0xc>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	actual_speed_setpoint.setpoint_y = 0;
 8000712:	605a      	str	r2, [r3, #4]
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	200004c0 	.word	0x200004c0

0800071c <mouseDriver_initMode>:


void mouseDriver_initMode(void){
	actual_mode = MOUSE_MODE_STOP;
 800071c:	4b01      	ldr	r3, [pc, #4]	; (8000724 <mouseDriver_initMode+0x8>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
}
 8000722:	4770      	bx	lr
 8000724:	20000485 	.word	0x20000485

08000728 <mouseDriver_getSpeedFromSensors>:

void mouseDriver_getSpeedFromSensors(void){
	actual_speed_measure.speed_x = 1;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <mouseDriver_getSpeedFromSensors+0x10>)
 800072a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800072e:	605a      	str	r2, [r3, #4]
	actual_speed_measure.speed_y = 2;
 8000730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000734:	609a      	str	r2, [r3, #8]
}
 8000736:	4770      	bx	lr
 8000738:	200004b4 	.word	0x200004b4

0800073c <mouseDriver_initPoints>:
void mouseDriver_initPoints(void){
 800073c:	b470      	push	{r4, r5, r6}
 800073e:	4c0e      	ldr	r4, [pc, #56]	; (8000778 <mouseDriver_initPoints+0x3c>)
	for(int i=0; i<MAX_POINTS; i++){
 8000740:	2300      	movs	r3, #0
		points[i].duration = 0;
 8000742:	4626      	mov	r6, r4
 8000744:	4619      	mov	r1, r3
		points[i].setpoint_x = 0;
 8000746:	2500      	movs	r5, #0
		points[i].duration = 0;
 8000748:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800074c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000750:	1832      	adds	r2, r6, r0
 8000752:	5431      	strb	r1, [r6, r0]
 8000754:	7051      	strb	r1, [r2, #1]
 8000756:	7091      	strb	r1, [r2, #2]
 8000758:	70d1      	strb	r1, [r2, #3]
		points[i].setpoint_x = 0;
 800075a:	6055      	str	r5, [r2, #4]
		points[i].setpoint_y = 0;
 800075c:	6095      	str	r5, [r2, #8]
		points[i].point_id = 0;
 800075e:	7321      	strb	r1, [r4, #12]
	for(int i=0; i<MAX_POINTS; i++){
 8000760:	3301      	adds	r3, #1
 8000762:	340d      	adds	r4, #13
 8000764:	2bff      	cmp	r3, #255	; 0xff
 8000766:	d1ef      	bne.n	8000748 <mouseDriver_initPoints+0xc>
	}
	actual_point = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <mouseDriver_initPoints+0x40>)
 800076c:	7013      	strb	r3, [r2, #0]
	actual_point_start_time = 0;
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <mouseDriver_initPoints+0x44>)
 8000770:	6013      	str	r3, [r2, #0]
}
 8000772:	bc70      	pop	{r4, r5, r6}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	2000071c 	.word	0x2000071c
 800077c:	20000494 	.word	0x20000494
 8000780:	20000498 	.word	0x20000498

08000784 <mouseDriver_setSetpoint>:
/* Private set/get functions */
void mouseDriver_setSetpoint(const mavlink_speed_setpoint_t speed){
 8000784:	b082      	sub	sp, #8
 8000786:	ed8d 0a00 	vstr	s0, [sp]
 800078a:	edcd 0a01 	vstr	s1, [sp, #4]
	actual_speed_setpoint = speed;
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <mouseDriver_setSetpoint+0x1c>)
 8000790:	aa02      	add	r2, sp, #8
 8000792:	e912 0003 	ldmdb	r2, {r0, r1}
 8000796:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800079a:	b002      	add	sp, #8
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	200004c0 	.word	0x200004c0

080007a4 <mouseDriver_sendMsg>:


/* Private message functions */
void mouseDriver_sendMsg(uint32_t msgid){
 80007a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007a8:	b0fe      	sub	sp, #504	; 0x1f8
 80007aa:	4604      	mov	r4, r0
	mavlink_message_t msg;
	static uint8_t outBuffer[MAX_BYTE_BUFFER_SIZE];
	static uint16_t msg_size = 0;

	while (main_get_huart_tx_state() == HAL_BUSY){
 80007ac:	e001      	b.n	80007b2 <mouseDriver_sendMsg+0xe>
		/*Wait for other messages to be sent*/
		main_wait_160us();
 80007ae:	f002 fb67 	bl	8002e80 <main_wait_160us>
	while (main_get_huart_tx_state() == HAL_BUSY){
 80007b2:	f002 fb8b 	bl	8002ecc <main_get_huart_tx_state>
 80007b6:	2802      	cmp	r0, #2
 80007b8:	d0f9      	beq.n	80007ae <mouseDriver_sendMsg+0xa>
	}

	switch(msgid){
 80007ba:	2c08      	cmp	r4, #8
 80007bc:	f200 811b 	bhi.w	80009f6 <mouseDriver_sendMsg+0x252>
 80007c0:	e8df f014 	tbh	[pc, r4, lsl #1]
 80007c4:	05c70009 	.word	0x05c70009
 80007c8:	011901eb 	.word	0x011901eb
 80007cc:	09b203ee 	.word	0x09b203ee
 80007d0:	07c40b94 	.word	0x07c40b94
 80007d4:	0d83      	.short	0x0d83
		case MAVLINK_MSG_ID_HEARTBEAT:
			mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &msg, actual_mode, mouseDriver_getTime());
 80007d6:	4b98      	ldr	r3, [pc, #608]	; (8000a38 <mouseDriver_sendMsg+0x294>)
 80007d8:	781c      	ldrb	r4, [r3, #0]

	/* Init sensor as well */
	sensorDriver_init();
}
uint32_t mouseDriver_getTime (void){
	return (HAL_GetTick());
 80007da:	f004 f857 	bl	800488c <HAL_GetTick>
 80007de:	4602      	mov	r2, r0
    _mav_put_uint8_t(buf, 4, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.time = time;
 80007e0:	466b      	mov	r3, sp
 80007e2:	6018      	str	r0, [r3, #0]
    packet.mode = mode;
 80007e4:	711c      	strb	r4, [r3, #4]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80007e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007ea:	9238      	str	r2, [sp, #224]	; 0xe0
 80007ec:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f88d 30dd 	strb.w	r3, [sp, #221]	; 0xdd
 80007f6:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 80007fa:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80007fe:	4b8f      	ldr	r3, [pc, #572]	; (8000a3c <mouseDriver_sendMsg+0x298>)
 8000800:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000802:	f013 0602 	ands.w	r6, r3, #2
 8000806:	d12e      	bne.n	8000866 <mouseDriver_sendMsg+0xc2>
 8000808:	4b8c      	ldr	r3, [pc, #560]	; (8000a3c <mouseDriver_sendMsg+0x298>)
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	2b00      	cmp	r3, #0
 800080e:	f000 80f5 	beq.w	80009fc <mouseDriver_sendMsg+0x258>
 8000812:	7818      	ldrb	r0, [r3, #0]
 8000814:	f000 0001 	and.w	r0, r0, #1
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
		msg->magic = MAVLINK_STX_MAVLINK1;
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
	} else {
		msg->magic = MAVLINK_STX;
 8000818:	23fd      	movs	r3, #253	; 0xfd
 800081a:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 800081e:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 80ec 	bne.w	8000a00 <mouseDriver_sendMsg+0x25c>
 8000828:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 800082c:	2b00      	cmp	r3, #0
 800082e:	f040 80e9 	bne.w	8000a04 <mouseDriver_sendMsg+0x260>
 8000832:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 8000836:	2b00      	cmp	r3, #0
 8000838:	f040 80e6 	bne.w	8000a08 <mouseDriver_sendMsg+0x264>
 800083c:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
		length--;
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2302      	movne	r3, #2
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000848:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 800084c:	2200      	movs	r2, #0
 800084e:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8000852:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	msg->incompat_flags = 0;
	if (signing) {
 8000856:	2800      	cmp	r0, #0
 8000858:	f000 80d8 	beq.w	8000a0c <mouseDriver_sendMsg+0x268>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 800085c:	2201      	movs	r2, #1
 800085e:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 8000862:	240a      	movs	r4, #10
 8000864:	e00e      	b.n	8000884 <mouseDriver_sendMsg+0xe0>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000866:	23fe      	movs	r3, #254	; 0xfe
 8000868:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800086c:	2305      	movs	r3, #5
 800086e:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8000872:	2000      	movs	r0, #0
 8000874:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8000878:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800087c:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 800087e:	2200      	movs	r2, #0
 8000880:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	}
	msg->compat_flags = 0;
 8000884:	2200      	movs	r2, #0
 8000886:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 800088a:	496c      	ldr	r1, [pc, #432]	; (8000a3c <mouseDriver_sendMsg+0x298>)
 800088c:	798a      	ldrb	r2, [r1, #6]
 800088e:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8000892:	1c55      	adds	r5, r2, #1
 8000894:	718d      	strb	r5, [r1, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8000896:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 800089a:	f88d 1014 	strb.w	r1, [sp, #20]
	buf[1] = msg->len;
 800089e:	f88d 3015 	strb.w	r3, [sp, #21]
	if (mavlink1) {
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80b4 	beq.w	8000a10 <mouseDriver_sendMsg+0x26c>
		buf[2] = msg->seq;
 80008a8:	f88d 2016 	strb.w	r2, [sp, #22]
		buf[3] = msg->sysid;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->compid;
 80008b2:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 80008b6:	f88d 3019 	strb.w	r3, [sp, #25]
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
 80008ba:	1ea6      	subs	r6, r4, #2
 80008bc:	b2b6      	uxth	r6, r6
 80008be:	ab7e      	add	r3, sp, #504	; 0x1f8
 80008c0:	441e      	add	r6, r3
 80008c2:	f5a6 76f1 	sub.w	r6, r6, #482	; 0x1e2
        *crcAccum = X25_INIT_CRC;
 80008c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 80008ca:	f10d 0515 	add.w	r5, sp, #21
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80008ce:	f815 2b01 	ldrb.w	r2, [r5], #1
 80008d2:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 80008d4:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 80008d8:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80008da:	0913      	lsrs	r3, r2, #4
 80008dc:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80008e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80008e4:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80008e8:	42b5      	cmp	r5, r6
 80008ea:	d1f0      	bne.n	80008ce <mouseDriver_sendMsg+0x12a>
		buf[8] = (msg->msgid >> 8) & 0xFF;
		buf[9] = (msg->msgid >> 16) & 0xFF;
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80008ec:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 80008f0:	b2ba      	uxth	r2, r7
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
 80008f2:	1e53      	subs	r3, r2, #1
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	b1a2      	cbz	r2, 8000922 <mouseDriver_sendMsg+0x17e>
 80008f8:	aa7e      	add	r2, sp, #504	; 0x1f8
 80008fa:	4413      	add	r3, r2
 80008fc:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000900:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000902:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000906:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8000908:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800090c:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800090e:	091a      	lsrs	r2, r3, #4
 8000910:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000914:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8000918:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 800091c:	b299      	uxth	r1, r3
	while (length--) {
 800091e:	42b5      	cmp	r5, r6
 8000920:	d1ef      	bne.n	8000902 <mouseDriver_sendMsg+0x15e>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000922:	f081 0389 	eor.w	r3, r1, #137	; 0x89
        tmp ^= (tmp<<4);
 8000926:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 800092a:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800092c:	0913      	lsrs	r3, r2, #4
 800092e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000932:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8000936:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 800093a:	b21b      	sxth	r3, r3
 800093c:	b29a      	uxth	r2, r3
	crc_accumulate(crc_extra, &checksum);
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800093e:	a938      	add	r1, sp, #224	; 0xe0
 8000940:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000942:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 8000946:	0a15      	lsrs	r5, r2, #8
 8000948:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 800094c:	54cd      	strb	r5, [r1, r3]

	msg->checksum = checksum;
 800094e:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4

	if (signing) {
 8000952:	2800      	cmp	r0, #0
 8000954:	d176      	bne.n	8000a44 <mouseDriver_sendMsg+0x2a0>
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
	}
	
	return msg->len + header_len + 2 + signature_len;
 8000956:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
{
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800095a:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 800095e:	29fe      	cmp	r1, #254	; 0xfe
 8000960:	f000 8101 	beq.w	8000b66 <mouseDriver_sendMsg+0x3c2>
	while (length > 1 && payload[length-1] == 0) {
 8000964:	2c01      	cmp	r4, #1
 8000966:	d911      	bls.n	800098c <mouseDriver_sendMsg+0x1e8>
 8000968:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 800096c:	5d1b      	ldrb	r3, [r3, r4]
 800096e:	b96b      	cbnz	r3, 800098c <mouseDriver_sendMsg+0x1e8>
 8000970:	1e63      	subs	r3, r4, #1
 8000972:	aa7e      	add	r2, sp, #504	; 0x1f8
 8000974:	fa52 f383 	uxtab	r3, r2, r3
 8000978:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 800097c:	3c01      	subs	r4, #1
 800097e:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8000980:	2c01      	cmp	r4, #1
 8000982:	d003      	beq.n	800098c <mouseDriver_sendMsg+0x1e8>
 8000984:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8000988:	2a00      	cmp	r2, #0
 800098a:	d0f7      	beq.n	800097c <mouseDriver_sendMsg+0x1d8>
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
		ck = buf + header_len + 1 + (uint16_t)msg->len;
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
		header_len = MAVLINK_CORE_HEADER_LEN;
		buf[0] = msg->magic;
 800098c:	4d2c      	ldr	r5, [pc, #176]	; (8000a40 <mouseDriver_sendMsg+0x29c>)
 800098e:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8000990:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8000992:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 8000996:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8000998:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 800099c:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 800099e:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 80009a2:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 80009a4:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 80009a8:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 80009aa:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80009ae:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 80009b0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80009b2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80009b6:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80009b8:	121a      	asrs	r2, r3, #8
 80009ba:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80009bc:	141b      	asrs	r3, r3, #16
 80009be:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80009c0:	4622      	mov	r2, r4
 80009c2:	a938      	add	r1, sp, #224	; 0xe0
 80009c4:	f105 000a 	add.w	r0, r5, #10
 80009c8:	f012 faf1 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80009cc:	f104 020a 	add.w	r2, r4, #10
 80009d0:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80009d2:	f016 0f01 	tst.w	r6, #1
 80009d6:	f041 868d 	bne.w	80026f4 <mouseDriver_sendMsg+0x1f50>
		header_len = MAVLINK_CORE_HEADER_LEN;
 80009da:	2109      	movs	r1, #9
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80009dc:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 80009e0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80009e2:	0a12      	lsrs	r2, r2, #8
 80009e4:	705a      	strb	r2, [r3, #1]
 80009e6:	2300      	movs	r3, #0
	if (signature_len > 0) {
		memcpy(&ck[2], msg->signature, signature_len);
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80009e8:	4421      	add	r1, r4
 80009ea:	3103      	adds	r1, #3
 80009ec:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 80009ee:	b289      	uxth	r1, r1
 80009f0:	4813      	ldr	r0, [pc, #76]	; (8000a40 <mouseDriver_sendMsg+0x29c>)
 80009f2:	f002 fa73 	bl	8002edc <main_transmit_buffer>
}
 80009f6:	b07e      	add	sp, #504	; 0x1f8
 80009f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80009fc:	2000      	movs	r0, #0
 80009fe:	e70b      	b.n	8000818 <mouseDriver_sendMsg+0x74>
	while (length > 1 && payload[length-1] == 0) {
 8000a00:	2305      	movs	r3, #5
 8000a02:	e721      	b.n	8000848 <mouseDriver_sendMsg+0xa4>
		length--;
 8000a04:	2304      	movs	r3, #4
 8000a06:	e71f      	b.n	8000848 <mouseDriver_sendMsg+0xa4>
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e71d      	b.n	8000848 <mouseDriver_sendMsg+0xa4>
	if (signing) {
 8000a0c:	240a      	movs	r4, #10
 8000a0e:	e736      	b.n	800087e <mouseDriver_sendMsg+0xda>
		buf[2] = msg->incompat_flags;
 8000a10:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 8000a14:	f88d 3016 	strb.w	r3, [sp, #22]
		buf[3] = msg->compat_flags;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->seq;
 8000a1e:	f88d 2018 	strb.w	r2, [sp, #24]
		buf[5] = msg->sysid;
 8000a22:	f88d 3019 	strb.w	r3, [sp, #25]
		buf[6] = msg->compid;
 8000a26:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[7] = msg->msgid & 0xFF;
 8000a2a:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000a2e:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000a32:	f88d 301d 	strb.w	r3, [sp, #29]
 8000a36:	e740      	b.n	80008ba <mouseDriver_sendMsg+0x116>
 8000a38:	20000485 	.word	0x20000485
 8000a3c:	200004c8 	.word	0x200004c8
 8000a40:	20000528 	.word	0x20000528
		mavlink_sign_packet(status->signing,
 8000a44:	4b76      	ldr	r3, [pc, #472]	; (8000c20 <mouseDriver_sendMsg+0x47c>)
 8000a46:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d084      	beq.n	8000956 <mouseDriver_sendMsg+0x1b2>
 8000a4c:	780b      	ldrb	r3, [r1, #0]
 8000a4e:	f013 0f01 	tst.w	r3, #1
 8000a52:	d080      	beq.n	8000956 <mouseDriver_sendMsg+0x1b2>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000a54:	f89d 50d7 	ldrb.w	r5, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8000a58:	784b      	ldrb	r3, [r1, #1]
 8000a5a:	f88d 31ea 	strb.w	r3, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8000a5e:	688b      	ldr	r3, [r1, #8]
 8000a60:	68ca      	ldr	r2, [r1, #12]
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	9203      	str	r2, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8000a66:	f8cd 31eb 	str.w	r3, [sp, #491]	; 0x1eb
 8000a6a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8000a6e:	f8ad 31ef 	strh.w	r3, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8000a72:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000a76:	1c56      	adds	r6, r2, #1
 8000a78:	f143 0700 	adc.w	r7, r3, #0
 8000a7c:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8000a80:	2600      	movs	r6, #0
 8000a82:	961b      	str	r6, [sp, #108]	; 0x6c
    m->sz[1] = 0;
 8000a84:	961c      	str	r6, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8000a86:	4b67      	ldr	r3, [pc, #412]	; (8000c24 <mouseDriver_sendMsg+0x480>)
 8000a88:	931d      	str	r3, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8000a8a:	4b67      	ldr	r3, [pc, #412]	; (8000c28 <mouseDriver_sendMsg+0x484>)
 8000a8c:	931e      	str	r3, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8000a8e:	4b67      	ldr	r3, [pc, #412]	; (8000c2c <mouseDriver_sendMsg+0x488>)
 8000a90:	931f      	str	r3, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8000a92:	4b67      	ldr	r3, [pc, #412]	; (8000c30 <mouseDriver_sendMsg+0x48c>)
 8000a94:	9320      	str	r3, [sp, #128]	; 0x80
    E = 0x510e527f;
 8000a96:	4b67      	ldr	r3, [pc, #412]	; (8000c34 <mouseDriver_sendMsg+0x490>)
 8000a98:	9321      	str	r3, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8000a9a:	4b67      	ldr	r3, [pc, #412]	; (8000c38 <mouseDriver_sendMsg+0x494>)
 8000a9c:	9322      	str	r3, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8000a9e:	4b67      	ldr	r3, [pc, #412]	; (8000c3c <mouseDriver_sendMsg+0x498>)
 8000aa0:	9323      	str	r3, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8000aa2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8000aa6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8000aaa:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8000aae:	9324      	str	r3, [sp, #144]	; 0x90
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	3110      	adds	r1, #16
 8000ab4:	a81b      	add	r0, sp, #108	; 0x6c
 8000ab6:	f7ff fd4b 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000aba:	4622      	mov	r2, r4
 8000abc:	a905      	add	r1, sp, #20
 8000abe:	a81b      	add	r0, sp, #108	; 0x6c
 8000ac0:	f7ff fd46 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000ac4:	462a      	mov	r2, r5
 8000ac6:	a938      	add	r1, sp, #224	; 0xe0
 8000ac8:	a81b      	add	r0, sp, #108	; 0x6c
 8000aca:	f7ff fd41 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000ace:	2202      	movs	r2, #2
 8000ad0:	ab38      	add	r3, sp, #224	; 0xe0
 8000ad2:	1959      	adds	r1, r3, r5
 8000ad4:	a81b      	add	r0, sp, #108	; 0x6c
 8000ad6:	f7ff fd3b 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000ada:	2207      	movs	r2, #7
 8000adc:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8000ae0:	a81b      	add	r0, sp, #108	; 0x6c
 8000ae2:	f7ff fd35 	bl	8000550 <mavlink_sha256_update>
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000ae6:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000ae8:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000aec:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8000af0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000afa:	2247      	movs	r2, #71	; 0x47
 8000afc:	4631      	mov	r1, r6
 8000afe:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8000b02:	f012 fa5f 	bl	8012fc4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000b06:	ab09      	add	r3, sp, #36	; 0x24
 8000b08:	442b      	add	r3, r5
 8000b0a:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000b0c:	0a22      	lsrs	r2, r4, #8
 8000b0e:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000b10:	0c22      	lsrs	r2, r4, #16
 8000b12:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000b14:	0e24      	lsrs	r4, r4, #24
 8000b16:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000b18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8000b1a:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000b1c:	0a11      	lsrs	r1, r2, #8
 8000b1e:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000b24:	0e12      	lsrs	r2, r2, #24
 8000b26:	705a      	strb	r2, [r3, #1]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000b28:	f105 0209 	add.w	r2, r5, #9
 8000b2c:	a909      	add	r1, sp, #36	; 0x24
 8000b2e:	a81b      	add	r0, sp, #108	; 0x6c
 8000b30:	f7ff fd0e 	bl	8000550 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000b34:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8000b38:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8000b3c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8000b40:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8000b44:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8000b48:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8000b4c:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8000b50:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8000b54:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8000b58:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8000b5c:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8000b60:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8000b64:	e6f7      	b.n	8000956 <mouseDriver_sendMsg+0x1b2>
		buf[0] = msg->magic;
 8000b66:	4d36      	ldr	r5, [pc, #216]	; (8000c40 <mouseDriver_sendMsg+0x49c>)
 8000b68:	23fe      	movs	r3, #254	; 0xfe
 8000b6a:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8000b6c:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8000b6e:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8000b72:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8000b74:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8000b78:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8000b7a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8000b7e:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8000b80:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8000b82:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000b86:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8000b88:	4622      	mov	r2, r4
 8000b8a:	a938      	add	r1, sp, #224	; 0xe0
 8000b8c:	1da8      	adds	r0, r5, #6
 8000b8e:	f012 fa0e 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8000b92:	1da3      	adds	r3, r4, #6
 8000b94:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000b96:	2105      	movs	r1, #5
 8000b98:	e720      	b.n	80009dc <mouseDriver_sendMsg+0x238>
 * @param msg The MAVLink message to compress the data into
 * @param speed_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_setpoint_t* speed_setpoint)
{
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y);
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <mouseDriver_sendMsg+0x4a0>)
 8000b9c:	6851      	ldr	r1, [r2, #4]
    packet.setpoint_x = setpoint_x;
 8000b9e:	ab02      	add	r3, sp, #8
 8000ba0:	6812      	ldr	r2, [r2, #0]
 8000ba2:	9202      	str	r2, [sp, #8]
    packet.setpoint_y = setpoint_y;
 8000ba4:	9103      	str	r1, [sp, #12]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8000ba6:	aa38      	add	r2, sp, #224	; 0xe0
 8000ba8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bac:	e882 0003 	stmia.w	r2, {r0, r1}
    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8000bb8:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 8000bbc:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <mouseDriver_sendMsg+0x47c>)
 8000bc2:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000bc4:	ea13 0602 	ands.w	r6, r3, r2
 8000bc8:	d13e      	bne.n	8000c48 <mouseDriver_sendMsg+0x4a4>
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <mouseDriver_sendMsg+0x47c>)
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	b123      	cbz	r3, 8000bda <mouseDriver_sendMsg+0x436>
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	f013 0f01 	tst.w	r3, #1
 8000bd6:	f041 864e 	bne.w	8002876 <mouseDriver_sendMsg+0x20d2>
		msg->magic = MAVLINK_STX;
 8000bda:	23fd      	movs	r3, #253	; 0xfd
 8000bdc:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8000be0:	f89d 30e7 	ldrb.w	r3, [sp, #231]	; 0xe7
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f040 80f9 	bne.w	8000ddc <mouseDriver_sendMsg+0x638>
 8000bea:	2000      	movs	r0, #0
 8000bec:	f10d 02e7 	add.w	r2, sp, #231	; 0xe7
		length--;
 8000bf0:	2307      	movs	r3, #7
	while (length > 1 && payload[length-1] == 0) {
 8000bf2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8000bf6:	b919      	cbnz	r1, 8000c00 <mouseDriver_sendMsg+0x45c>
		length--;
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d1f8      	bne.n	8000bf2 <mouseDriver_sendMsg+0x44e>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000c00:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8000c04:	2200      	movs	r2, #0
 8000c06:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8000c0a:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	f000 80e7 	beq.w	8000de2 <mouseDriver_sendMsg+0x63e>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000c14:	2201      	movs	r2, #1
 8000c16:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 8000c1a:	240a      	movs	r4, #10
 8000c1c:	e023      	b.n	8000c66 <mouseDriver_sendMsg+0x4c2>
 8000c1e:	bf00      	nop
 8000c20:	200004c8 	.word	0x200004c8
 8000c24:	6a09e667 	.word	0x6a09e667
 8000c28:	bb67ae85 	.word	0xbb67ae85
 8000c2c:	3c6ef372 	.word	0x3c6ef372
 8000c30:	a54ff53a 	.word	0xa54ff53a
 8000c34:	510e527f 	.word	0x510e527f
 8000c38:	9b05688c 	.word	0x9b05688c
 8000c3c:	1f83d9ab 	.word	0x1f83d9ab
 8000c40:	20000528 	.word	0x20000528
 8000c44:	200004c0 	.word	0x200004c0
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000c48:	23fe      	movs	r3, #254	; 0xfe
 8000c4a:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000c4e:	2308      	movs	r3, #8
 8000c50:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8000c54:	2000      	movs	r0, #0
 8000c56:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8000c5a:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000c5e:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8000c60:	2200      	movs	r2, #0
 8000c62:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8000c66:	2200      	movs	r2, #0
 8000c68:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 8000c6c:	49c3      	ldr	r1, [pc, #780]	; (8000f7c <mouseDriver_sendMsg+0x7d8>)
 8000c6e:	798a      	ldrb	r2, [r1, #6]
 8000c70:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8000c74:	1c55      	adds	r5, r2, #1
 8000c76:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8000c78:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8000c7c:	f88d 1014 	strb.w	r1, [sp, #20]
	buf[1] = msg->len;
 8000c80:	f88d 3015 	strb.w	r3, [sp, #21]
	if (mavlink1) {
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	f000 80ae 	beq.w	8000de6 <mouseDriver_sendMsg+0x642>
		buf[2] = msg->seq;
 8000c8a:	f88d 2016 	strb.w	r2, [sp, #22]
		buf[3] = msg->sysid;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->compid;
 8000c94:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f88d 3019 	strb.w	r3, [sp, #25]
	while (length--) {
 8000c9e:	1ea6      	subs	r6, r4, #2
 8000ca0:	b2b6      	uxth	r6, r6
 8000ca2:	ab7e      	add	r3, sp, #504	; 0x1f8
 8000ca4:	441e      	add	r6, r3
 8000ca6:	f5a6 76f1 	sub.w	r6, r6, #482	; 0x1e2
        *crcAccum = X25_INIT_CRC;
 8000caa:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8000cae:	f10d 0515 	add.w	r5, sp, #21
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000cb2:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000cb6:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8000cb8:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8000cbc:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000cbe:	0913      	lsrs	r3, r2, #4
 8000cc0:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000cc8:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8000ccc:	42b5      	cmp	r5, r6
 8000cce:	d1f0      	bne.n	8000cb2 <mouseDriver_sendMsg+0x50e>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8000cd0:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 8000cd4:	b2ba      	uxth	r2, r7
	while (length--) {
 8000cd6:	1e53      	subs	r3, r2, #1
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	b1a2      	cbz	r2, 8000d06 <mouseDriver_sendMsg+0x562>
 8000cdc:	aa7e      	add	r2, sp, #504	; 0x1f8
 8000cde:	4413      	add	r3, r2
 8000ce0:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000ce4:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000ce6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000cea:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8000cec:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8000cf0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000cf2:	091a      	lsrs	r2, r3, #4
 8000cf4:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000cf8:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8000cfc:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8000d00:	b299      	uxth	r1, r3
	while (length--) {
 8000d02:	42b5      	cmp	r5, r6
 8000d04:	d1ef      	bne.n	8000ce6 <mouseDriver_sendMsg+0x542>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000d06:	f081 0326 	eor.w	r3, r1, #38	; 0x26
        tmp ^= (tmp<<4);
 8000d0a:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8000d0e:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000d10:	0913      	lsrs	r3, r2, #4
 8000d12:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000d16:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8000d1a:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000d22:	a938      	add	r1, sp, #224	; 0xe0
 8000d24:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000d26:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 8000d2a:	0a15      	lsrs	r5, r2, #8
 8000d2c:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 8000d30:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8000d32:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d16a      	bne.n	8000e10 <mouseDriver_sendMsg+0x66c>
	return msg->len + header_len + 2 + signature_len;
 8000d3a:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000d3e:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8000d42:	29fe      	cmp	r1, #254	; 0xfe
 8000d44:	f000 80ff 	beq.w	8000f46 <mouseDriver_sendMsg+0x7a2>
	while (length > 1 && payload[length-1] == 0) {
 8000d48:	2c01      	cmp	r4, #1
 8000d4a:	d911      	bls.n	8000d70 <mouseDriver_sendMsg+0x5cc>
 8000d4c:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8000d50:	5d1b      	ldrb	r3, [r3, r4]
 8000d52:	b96b      	cbnz	r3, 8000d70 <mouseDriver_sendMsg+0x5cc>
 8000d54:	1e63      	subs	r3, r4, #1
 8000d56:	aa7e      	add	r2, sp, #504	; 0x1f8
 8000d58:	fa52 f383 	uxtab	r3, r2, r3
 8000d5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8000d60:	3c01      	subs	r4, #1
 8000d62:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8000d64:	2c01      	cmp	r4, #1
 8000d66:	d003      	beq.n	8000d70 <mouseDriver_sendMsg+0x5cc>
 8000d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d0f7      	beq.n	8000d60 <mouseDriver_sendMsg+0x5bc>
		buf[0] = msg->magic;
 8000d70:	4d83      	ldr	r5, [pc, #524]	; (8000f80 <mouseDriver_sendMsg+0x7dc>)
 8000d72:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8000d74:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8000d76:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 8000d7a:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8000d7c:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8000d80:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8000d82:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8000d86:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8000d88:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8000d8c:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8000d8e:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8000d92:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8000d94:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8000d96:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000d9a:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000d9c:	121a      	asrs	r2, r3, #8
 8000d9e:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000da0:	141b      	asrs	r3, r3, #16
 8000da2:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8000da4:	4622      	mov	r2, r4
 8000da6:	a938      	add	r1, sp, #224	; 0xe0
 8000da8:	f105 000a 	add.w	r0, r5, #10
 8000dac:	f012 f8ff 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8000db0:	f104 020a 	add.w	r2, r4, #10
 8000db4:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8000db6:	f016 0f01 	tst.w	r6, #1
 8000dba:	f041 84b2 	bne.w	8002722 <mouseDriver_sendMsg+0x1f7e>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8000dbe:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8000dc0:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8000dc4:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8000dc6:	0a12      	lsrs	r2, r2, #8
 8000dc8:	705a      	strb	r2, [r3, #1]
 8000dca:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8000dcc:	4421      	add	r1, r4
 8000dce:	3103      	adds	r1, #3
 8000dd0:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 8000dd2:	b289      	uxth	r1, r1
 8000dd4:	486a      	ldr	r0, [pc, #424]	; (8000f80 <mouseDriver_sendMsg+0x7dc>)
 8000dd6:	f002 f881 	bl	8002edc <main_transmit_buffer>
			break;
 8000dda:	e60c      	b.n	80009f6 <mouseDriver_sendMsg+0x252>
	while (length > 1 && payload[length-1] == 0) {
 8000ddc:	2000      	movs	r0, #0
 8000dde:	2308      	movs	r3, #8
 8000de0:	e70e      	b.n	8000c00 <mouseDriver_sendMsg+0x45c>
	if (signing) {
 8000de2:	240a      	movs	r4, #10
 8000de4:	e73c      	b.n	8000c60 <mouseDriver_sendMsg+0x4bc>
		buf[2] = msg->incompat_flags;
 8000de6:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 8000dea:	f88d 3016 	strb.w	r3, [sp, #22]
		buf[3] = msg->compat_flags;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->seq;
 8000df4:	f88d 2018 	strb.w	r2, [sp, #24]
		buf[5] = msg->sysid;
 8000df8:	f88d 3019 	strb.w	r3, [sp, #25]
		buf[6] = msg->compid;
 8000dfc:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[7] = msg->msgid & 0xFF;
 8000e00:	2202      	movs	r2, #2
 8000e02:	f88d 201b 	strb.w	r2, [sp, #27]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000e06:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000e0a:	f88d 301d 	strb.w	r3, [sp, #29]
 8000e0e:	e746      	b.n	8000c9e <mouseDriver_sendMsg+0x4fa>
		mavlink_sign_packet(status->signing,
 8000e10:	4b5a      	ldr	r3, [pc, #360]	; (8000f7c <mouseDriver_sendMsg+0x7d8>)
 8000e12:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000e14:	2d00      	cmp	r5, #0
 8000e16:	d090      	beq.n	8000d3a <mouseDriver_sendMsg+0x596>
 8000e18:	782a      	ldrb	r2, [r5, #0]
 8000e1a:	f012 0f01 	tst.w	r2, #1
 8000e1e:	d08c      	beq.n	8000d3a <mouseDriver_sendMsg+0x596>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000e20:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8000e24:	786a      	ldrb	r2, [r5, #1]
 8000e26:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8000e2a:	68aa      	ldr	r2, [r5, #8]
 8000e2c:	68e9      	ldr	r1, [r5, #12]
 8000e2e:	9200      	str	r2, [sp, #0]
 8000e30:	9101      	str	r1, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8000e32:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 8000e36:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8000e3a:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8000e3e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8000e42:	1c42      	adds	r2, r0, #1
 8000e44:	f141 0300 	adc.w	r3, r1, #0
 8000e48:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 8000e4c:	2700      	movs	r7, #0
 8000e4e:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8000e50:	4a4c      	ldr	r2, [pc, #304]	; (8000f84 <mouseDriver_sendMsg+0x7e0>)
 8000e52:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8000e54:	4a4c      	ldr	r2, [pc, #304]	; (8000f88 <mouseDriver_sendMsg+0x7e4>)
 8000e56:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8000e58:	4a4c      	ldr	r2, [pc, #304]	; (8000f8c <mouseDriver_sendMsg+0x7e8>)
 8000e5a:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <mouseDriver_sendMsg+0x7ec>)
 8000e5e:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 8000e60:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <mouseDriver_sendMsg+0x7f0>)
 8000e62:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8000e64:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <mouseDriver_sendMsg+0x7f4>)
 8000e66:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8000e68:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <mouseDriver_sendMsg+0x7f8>)
 8000e6a:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8000e6c:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8000e70:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 8000e74:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 8000e78:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 8000e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7e:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 8000e80:	ae25      	add	r6, sp, #148	; 0x94
 8000e82:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8000e86:	6869      	ldr	r1, [r5, #4]
 8000e88:	68aa      	ldr	r2, [r5, #8]
 8000e8a:	68eb      	ldr	r3, [r5, #12]
 8000e8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e8e:	6928      	ldr	r0, [r5, #16]
 8000e90:	6969      	ldr	r1, [r5, #20]
 8000e92:	69aa      	ldr	r2, [r5, #24]
 8000e94:	69eb      	ldr	r3, [r5, #28]
 8000e96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8000e98:	4622      	mov	r2, r4
 8000e9a:	a905      	add	r1, sp, #20
 8000e9c:	a81b      	add	r0, sp, #108	; 0x6c
 8000e9e:	f7ff fb57 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000ea2:	4642      	mov	r2, r8
 8000ea4:	a938      	add	r1, sp, #224	; 0xe0
 8000ea6:	a81b      	add	r0, sp, #108	; 0x6c
 8000ea8:	f7ff fb52 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000eac:	2202      	movs	r2, #2
 8000eae:	ab38      	add	r3, sp, #224	; 0xe0
 8000eb0:	eb03 0108 	add.w	r1, r3, r8
 8000eb4:	a81b      	add	r0, sp, #108	; 0x6c
 8000eb6:	f7ff fb4b 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000eba:	2207      	movs	r2, #7
 8000ebc:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8000ec0:	a81b      	add	r0, sp, #108	; 0x6c
 8000ec2:	f7ff fb45 	bl	8000550 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8000ec6:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000ec8:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000ecc:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8000ed0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000eda:	2247      	movs	r2, #71	; 0x47
 8000edc:	4639      	mov	r1, r7
 8000ede:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8000ee2:	f012 f86f 	bl	8012fc4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000ee6:	ab09      	add	r3, sp, #36	; 0x24
 8000ee8:	442b      	add	r3, r5
 8000eea:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000eec:	0a22      	lsrs	r2, r4, #8
 8000eee:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000ef0:	0c22      	lsrs	r2, r4, #16
 8000ef2:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000ef4:	0e24      	lsrs	r4, r4, #24
 8000ef6:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000ef8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8000efa:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000efc:	0a11      	lsrs	r1, r2, #8
 8000efe:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000f00:	0c11      	lsrs	r1, r2, #16
 8000f02:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000f04:	0e12      	lsrs	r2, r2, #24
 8000f06:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8000f08:	f105 0209 	add.w	r2, r5, #9
 8000f0c:	a909      	add	r1, sp, #36	; 0x24
 8000f0e:	a81b      	add	r0, sp, #108	; 0x6c
 8000f10:	f7ff fb1e 	bl	8000550 <mavlink_sha256_update>
    result[0] = p[3];
 8000f14:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8000f18:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8000f1c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8000f20:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8000f24:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8000f28:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8000f2c:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8000f30:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8000f34:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8000f38:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8000f3c:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8000f40:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8000f44:	e6f9      	b.n	8000d3a <mouseDriver_sendMsg+0x596>
		buf[0] = msg->magic;
 8000f46:	4d0e      	ldr	r5, [pc, #56]	; (8000f80 <mouseDriver_sendMsg+0x7dc>)
 8000f48:	23fe      	movs	r3, #254	; 0xfe
 8000f4a:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8000f4c:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8000f4e:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8000f52:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8000f54:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8000f58:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8000f5a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8000f5e:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8000f60:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8000f62:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000f66:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8000f68:	4622      	mov	r2, r4
 8000f6a:	a938      	add	r1, sp, #224	; 0xe0
 8000f6c:	1da8      	adds	r0, r5, #6
 8000f6e:	f012 f81e 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8000f72:	1da3      	adds	r3, r4, #6
 8000f74:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000f76:	2105      	movs	r1, #5
 8000f78:	e722      	b.n	8000dc0 <mouseDriver_sendMsg+0x61c>
 8000f7a:	bf00      	nop
 8000f7c:	200004c8 	.word	0x200004c8
 8000f80:	20000528 	.word	0x20000528
 8000f84:	6a09e667 	.word	0x6a09e667
 8000f88:	bb67ae85 	.word	0xbb67ae85
 8000f8c:	3c6ef372 	.word	0x3c6ef372
 8000f90:	a54ff53a 	.word	0xa54ff53a
 8000f94:	510e527f 	.word	0x510e527f
 8000f98:	9b05688c 	.word	0x9b05688c
 8000f9c:	1f83d9ab 	.word	0x1f83d9ab
 * @param msg The MAVLink message to compress the data into
 * @param motor_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_motor_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_motor_setpoint_t* motor_setpoint)
{
    return mavlink_msg_motor_setpoint_pack(system_id, component_id, msg, motor_setpoint->time, motor_setpoint->motor_x, motor_setpoint->motor_y);
 8000fa0:	4a93      	ldr	r2, [pc, #588]	; (80011f0 <mouseDriver_sendMsg+0xa4c>)
 8000fa2:	6850      	ldr	r0, [r2, #4]
 8000fa4:	6891      	ldr	r1, [r2, #8]
    packet.time = time;
 8000fa6:	ab05      	add	r3, sp, #20
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	9205      	str	r2, [sp, #20]
    packet.motor_x = motor_x;
 8000fac:	9006      	str	r0, [sp, #24]
    packet.motor_y = motor_y;
 8000fae:	9107      	str	r1, [sp, #28]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
 8000fb0:	ac38      	add	r4, sp, #224	; 0xe0
 8000fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_MOTOR_SETPOINT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8000fc2:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 8000fc6:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000fca:	4b8a      	ldr	r3, [pc, #552]	; (80011f4 <mouseDriver_sendMsg+0xa50>)
 8000fcc:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000fce:	f013 0602 	ands.w	r6, r3, #2
 8000fd2:	d129      	bne.n	8001028 <mouseDriver_sendMsg+0x884>
 8000fd4:	4b87      	ldr	r3, [pc, #540]	; (80011f4 <mouseDriver_sendMsg+0xa50>)
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	b123      	cbz	r3, 8000fe4 <mouseDriver_sendMsg+0x840>
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f013 0f01 	tst.w	r3, #1
 8000fe0:	f041 845e 	bne.w	80028a0 <mouseDriver_sendMsg+0x20fc>
		msg->magic = MAVLINK_STX;
 8000fe4:	23fd      	movs	r3, #253	; 0xfd
 8000fe6:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8000fea:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 80e4 	bne.w	80011bc <mouseDriver_sendMsg+0xa18>
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f10d 02eb 	add.w	r2, sp, #235	; 0xeb
		length--;
 8000ffa:	230b      	movs	r3, #11
	while (length > 1 && payload[length-1] == 0) {
 8000ffc:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8001000:	b919      	cbnz	r1, 800100a <mouseDriver_sendMsg+0x866>
		length--;
 8001002:	3b01      	subs	r3, #1
 8001004:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8001006:	2b01      	cmp	r3, #1
 8001008:	d1f8      	bne.n	8000ffc <mouseDriver_sendMsg+0x858>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800100a:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 800100e:	2200      	movs	r2, #0
 8001010:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001014:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8001018:	2800      	cmp	r0, #0
 800101a:	f000 80d2 	beq.w	80011c2 <mouseDriver_sendMsg+0xa1e>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 800101e:	2201      	movs	r2, #1
 8001020:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 8001024:	240a      	movs	r4, #10
 8001026:	e00e      	b.n	8001046 <mouseDriver_sendMsg+0x8a2>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001028:	23fe      	movs	r3, #254	; 0xfe
 800102a:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800102e:	230c      	movs	r3, #12
 8001030:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001034:	2000      	movs	r0, #0
 8001036:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 800103a:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800103e:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8001040:	2200      	movs	r2, #0
 8001042:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8001046:	2200      	movs	r2, #0
 8001048:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 800104c:	4969      	ldr	r1, [pc, #420]	; (80011f4 <mouseDriver_sendMsg+0xa50>)
 800104e:	798a      	ldrb	r2, [r1, #6]
 8001050:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8001054:	1c55      	adds	r5, r2, #1
 8001056:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8001058:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 800105c:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 8001060:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 8001064:	2e00      	cmp	r6, #0
 8001066:	f000 80ae 	beq.w	80011c6 <mouseDriver_sendMsg+0xa22>
		buf[2] = msg->seq;
 800106a:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 800106e:	2300      	movs	r3, #0
 8001070:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 8001074:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 8001078:	2304      	movs	r3, #4
 800107a:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 800107e:	1ea6      	subs	r6, r4, #2
 8001080:	b2b6      	uxth	r6, r6
 8001082:	ab7e      	add	r3, sp, #504	; 0x1f8
 8001084:	441e      	add	r6, r3
 8001086:	f5a6 76f7 	sub.w	r6, r6, #494	; 0x1ee
        *crcAccum = X25_INIT_CRC;
 800108a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 800108e:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001092:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001096:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8001098:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 800109c:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800109e:	0913      	lsrs	r3, r2, #4
 80010a0:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80010a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80010a8:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 80010ac:	42b5      	cmp	r5, r6
 80010ae:	d1f0      	bne.n	8001092 <mouseDriver_sendMsg+0x8ee>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80010b0:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 80010b4:	b2ba      	uxth	r2, r7
	while (length--) {
 80010b6:	1e53      	subs	r3, r2, #1
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b1a2      	cbz	r2, 80010e6 <mouseDriver_sendMsg+0x942>
 80010bc:	aa7e      	add	r2, sp, #504	; 0x1f8
 80010be:	4413      	add	r3, r2
 80010c0:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 80010c4:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80010c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80010ca:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80010cc:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80010d0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80010d2:	091a      	lsrs	r2, r3, #4
 80010d4:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80010d8:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 80010dc:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 80010e0:	b299      	uxth	r1, r3
	while (length--) {
 80010e2:	42b5      	cmp	r5, r6
 80010e4:	d1ef      	bne.n	80010c6 <mouseDriver_sendMsg+0x922>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80010e6:	f081 0370 	eor.w	r3, r1, #112	; 0x70
        tmp ^= (tmp<<4);
 80010ea:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80010ee:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80010f0:	0913      	lsrs	r3, r2, #4
 80010f2:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80010f6:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80010fa:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80010fe:	b21b      	sxth	r3, r3
 8001100:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001102:	a938      	add	r1, sp, #224	; 0xe0
 8001104:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001106:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 800110a:	0a15      	lsrs	r5, r2, #8
 800110c:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 8001110:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8001112:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 8001116:	2800      	cmp	r0, #0
 8001118:	d170      	bne.n	80011fc <mouseDriver_sendMsg+0xa58>
	return msg->len + header_len + 2 + signature_len;
 800111a:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800111e:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8001122:	29fe      	cmp	r1, #254	; 0xfe
 8001124:	f000 80fb 	beq.w	800131e <mouseDriver_sendMsg+0xb7a>
	while (length > 1 && payload[length-1] == 0) {
 8001128:	2c01      	cmp	r4, #1
 800112a:	d911      	bls.n	8001150 <mouseDriver_sendMsg+0x9ac>
 800112c:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8001130:	5d1b      	ldrb	r3, [r3, r4]
 8001132:	b96b      	cbnz	r3, 8001150 <mouseDriver_sendMsg+0x9ac>
 8001134:	1e63      	subs	r3, r4, #1
 8001136:	aa7e      	add	r2, sp, #504	; 0x1f8
 8001138:	fa52 f383 	uxtab	r3, r2, r3
 800113c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8001140:	3c01      	subs	r4, #1
 8001142:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8001144:	2c01      	cmp	r4, #1
 8001146:	d003      	beq.n	8001150 <mouseDriver_sendMsg+0x9ac>
 8001148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800114c:	2a00      	cmp	r2, #0
 800114e:	d0f7      	beq.n	8001140 <mouseDriver_sendMsg+0x99c>
		buf[0] = msg->magic;
 8001150:	4d29      	ldr	r5, [pc, #164]	; (80011f8 <mouseDriver_sendMsg+0xa54>)
 8001152:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8001154:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8001156:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 800115a:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 800115c:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8001160:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8001162:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001166:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8001168:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 800116c:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 800116e:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001172:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8001174:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001176:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800117a:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800117c:	121a      	asrs	r2, r3, #8
 800117e:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001180:	141b      	asrs	r3, r3, #16
 8001182:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001184:	4622      	mov	r2, r4
 8001186:	a938      	add	r1, sp, #224	; 0xe0
 8001188:	f105 000a 	add.w	r0, r5, #10
 800118c:	f011 ff0f 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001190:	f104 020a 	add.w	r2, r4, #10
 8001194:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001196:	f016 0f01 	tst.w	r6, #1
 800119a:	f041 82d9 	bne.w	8002750 <mouseDriver_sendMsg+0x1fac>
		header_len = MAVLINK_CORE_HEADER_LEN;
 800119e:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80011a0:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 80011a4:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80011a6:	0a12      	lsrs	r2, r2, #8
 80011a8:	705a      	strb	r2, [r3, #1]
 80011aa:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80011ac:	4421      	add	r1, r4
 80011ae:	3103      	adds	r1, #3
 80011b0:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 80011b2:	b289      	uxth	r1, r1
 80011b4:	4810      	ldr	r0, [pc, #64]	; (80011f8 <mouseDriver_sendMsg+0xa54>)
 80011b6:	f001 fe91 	bl	8002edc <main_transmit_buffer>
			break;
 80011ba:	e41c      	b.n	80009f6 <mouseDriver_sendMsg+0x252>
	while (length > 1 && payload[length-1] == 0) {
 80011bc:	2000      	movs	r0, #0
 80011be:	230c      	movs	r3, #12
 80011c0:	e723      	b.n	800100a <mouseDriver_sendMsg+0x866>
	if (signing) {
 80011c2:	240a      	movs	r4, #10
 80011c4:	e73c      	b.n	8001040 <mouseDriver_sendMsg+0x89c>
		buf[2] = msg->incompat_flags;
 80011c6:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 80011ca:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 80011d4:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 80011d8:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 80011dc:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 80011e0:	2204      	movs	r2, #4
 80011e2:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80011e6:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80011ea:	f88d 3011 	strb.w	r3, [sp, #17]
 80011ee:	e746      	b.n	800107e <mouseDriver_sendMsg+0x8da>
 80011f0:	20000488 	.word	0x20000488
 80011f4:	200004c8 	.word	0x200004c8
 80011f8:	20000528 	.word	0x20000528
		mavlink_sign_packet(status->signing,
 80011fc:	4b78      	ldr	r3, [pc, #480]	; (80013e0 <mouseDriver_sendMsg+0xc3c>)
 80011fe:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001200:	2900      	cmp	r1, #0
 8001202:	d08a      	beq.n	800111a <mouseDriver_sendMsg+0x976>
 8001204:	780b      	ldrb	r3, [r1, #0]
 8001206:	f013 0f01 	tst.w	r3, #1
 800120a:	d086      	beq.n	800111a <mouseDriver_sendMsg+0x976>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 800120c:	f89d 50d7 	ldrb.w	r5, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8001210:	784b      	ldrb	r3, [r1, #1]
 8001212:	f88d 31ea 	strb.w	r3, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8001216:	688b      	ldr	r3, [r1, #8]
 8001218:	68ca      	ldr	r2, [r1, #12]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 800121e:	f8cd 31eb 	str.w	r3, [sp, #491]	; 0x1eb
 8001222:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001226:	f8ad 31ef 	strh.w	r3, [sp, #495]	; 0x1ef
	signing->timestamp++;
 800122a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800122e:	1c56      	adds	r6, r2, #1
 8001230:	f143 0700 	adc.w	r7, r3, #0
 8001234:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8001238:	2600      	movs	r6, #0
 800123a:	961b      	str	r6, [sp, #108]	; 0x6c
    m->sz[1] = 0;
 800123c:	961c      	str	r6, [sp, #112]	; 0x70
    A = 0x6a09e667;
 800123e:	4b69      	ldr	r3, [pc, #420]	; (80013e4 <mouseDriver_sendMsg+0xc40>)
 8001240:	931d      	str	r3, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8001242:	4b69      	ldr	r3, [pc, #420]	; (80013e8 <mouseDriver_sendMsg+0xc44>)
 8001244:	931e      	str	r3, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8001246:	4b69      	ldr	r3, [pc, #420]	; (80013ec <mouseDriver_sendMsg+0xc48>)
 8001248:	931f      	str	r3, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 800124a:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <mouseDriver_sendMsg+0xc4c>)
 800124c:	9320      	str	r3, [sp, #128]	; 0x80
    E = 0x510e527f;
 800124e:	4b69      	ldr	r3, [pc, #420]	; (80013f4 <mouseDriver_sendMsg+0xc50>)
 8001250:	9321      	str	r3, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8001252:	4b69      	ldr	r3, [pc, #420]	; (80013f8 <mouseDriver_sendMsg+0xc54>)
 8001254:	9322      	str	r3, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8001256:	4b69      	ldr	r3, [pc, #420]	; (80013fc <mouseDriver_sendMsg+0xc58>)
 8001258:	9323      	str	r3, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 800125a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800125e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8001262:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8001266:	9324      	str	r3, [sp, #144]	; 0x90
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001268:	2220      	movs	r2, #32
 800126a:	3110      	adds	r1, #16
 800126c:	a81b      	add	r0, sp, #108	; 0x6c
 800126e:	f7ff f96f 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001272:	4622      	mov	r2, r4
 8001274:	a902      	add	r1, sp, #8
 8001276:	a81b      	add	r0, sp, #108	; 0x6c
 8001278:	f7ff f96a 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 800127c:	462a      	mov	r2, r5
 800127e:	a938      	add	r1, sp, #224	; 0xe0
 8001280:	a81b      	add	r0, sp, #108	; 0x6c
 8001282:	f7ff f965 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001286:	2202      	movs	r2, #2
 8001288:	ab38      	add	r3, sp, #224	; 0xe0
 800128a:	1959      	adds	r1, r3, r5
 800128c:	a81b      	add	r0, sp, #108	; 0x6c
 800128e:	f7ff f95f 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001292:	2207      	movs	r2, #7
 8001294:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8001298:	a81b      	add	r0, sp, #108	; 0x6c
 800129a:	f7ff f959 	bl	8000550 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 800129e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80012a0:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80012a4:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 80012a8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80012b2:	2247      	movs	r2, #71	; 0x47
 80012b4:	4631      	mov	r1, r6
 80012b6:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 80012ba:	f011 fe83 	bl	8012fc4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80012be:	ab09      	add	r3, sp, #36	; 0x24
 80012c0:	442b      	add	r3, r5
 80012c2:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80012c4:	0a22      	lsrs	r2, r4, #8
 80012c6:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80012c8:	0c22      	lsrs	r2, r4, #16
 80012ca:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80012cc:	0e24      	lsrs	r4, r4, #24
 80012ce:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80012d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80012d2:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80012d4:	0a11      	lsrs	r1, r2, #8
 80012d6:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80012d8:	0c11      	lsrs	r1, r2, #16
 80012da:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80012dc:	0e12      	lsrs	r2, r2, #24
 80012de:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80012e0:	f105 0209 	add.w	r2, r5, #9
 80012e4:	a909      	add	r1, sp, #36	; 0x24
 80012e6:	a81b      	add	r0, sp, #108	; 0x6c
 80012e8:	f7ff f932 	bl	8000550 <mavlink_sha256_update>
    result[0] = p[3];
 80012ec:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 80012f0:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 80012f4:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 80012f8:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 80012fc:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8001300:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8001304:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8001308:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 800130c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8001310:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8001314:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8001318:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 800131c:	e6fd      	b.n	800111a <mouseDriver_sendMsg+0x976>
		buf[0] = msg->magic;
 800131e:	4d38      	ldr	r5, [pc, #224]	; (8001400 <mouseDriver_sendMsg+0xc5c>)
 8001320:	23fe      	movs	r3, #254	; 0xfe
 8001322:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8001324:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8001326:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 800132a:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 800132c:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001330:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8001332:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001336:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8001338:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800133a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800133e:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001340:	4622      	mov	r2, r4
 8001342:	a938      	add	r1, sp, #224	; 0xe0
 8001344:	1da8      	adds	r0, r5, #6
 8001346:	f011 fe32 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800134a:	1da3      	adds	r3, r4, #6
 800134c:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800134e:	2105      	movs	r1, #5
 8001350:	e726      	b.n	80011a0 <mouseDriver_sendMsg+0x9fc>
	return (HAL_GetTick());
 8001352:	f003 fa9b 	bl	800488c <HAL_GetTick>
				actual_speed_measure.time = mouseDriver_getTime();
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <mouseDriver_sendMsg+0xc60>)
 8001358:	6018      	str	r0, [r3, #0]
 * @param msg The MAVLink message to compress the data into
 * @param speed_info C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_info_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_info_t* speed_info)
{
    return mavlink_msg_speed_info_pack(system_id, component_id, msg, speed_info->time, speed_info->speed_x, speed_info->speed_y);
 800135a:	6859      	ldr	r1, [r3, #4]
 800135c:	689a      	ldr	r2, [r3, #8]
    packet.time = time;
 800135e:	ab05      	add	r3, sp, #20
 8001360:	9005      	str	r0, [sp, #20]
    packet.speed_x = speed_x;
 8001362:	9106      	str	r1, [sp, #24]
    packet.speed_y = speed_y;
 8001364:	9207      	str	r2, [sp, #28]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_INFO_LEN);
 8001366:	ac38      	add	r4, sp, #224	; 0xe0
 8001368:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800136c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_SPEED_INFO;
 8001370:	2300      	movs	r3, #0
 8001372:	2201      	movs	r2, #1
 8001374:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8001378:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 800137c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <mouseDriver_sendMsg+0xc3c>)
 8001382:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001384:	f013 0602 	ands.w	r6, r3, #2
 8001388:	d13e      	bne.n	8001408 <mouseDriver_sendMsg+0xc64>
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <mouseDriver_sendMsg+0xc3c>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	b123      	cbz	r3, 800139a <mouseDriver_sendMsg+0xbf6>
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f013 0f01 	tst.w	r3, #1
 8001396:	f041 8298 	bne.w	80028ca <mouseDriver_sendMsg+0x2126>
		msg->magic = MAVLINK_STX;
 800139a:	23fd      	movs	r3, #253	; 0xfd
 800139c:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 80013a0:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 80fa 	bne.w	800159e <mouseDriver_sendMsg+0xdfa>
 80013aa:	2000      	movs	r0, #0
 80013ac:	f10d 02eb 	add.w	r2, sp, #235	; 0xeb
		length--;
 80013b0:	230b      	movs	r3, #11
	while (length > 1 && payload[length-1] == 0) {
 80013b2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80013b6:	b919      	cbnz	r1, 80013c0 <mouseDriver_sendMsg+0xc1c>
		length--;
 80013b8:	3b01      	subs	r3, #1
 80013ba:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d1f8      	bne.n	80013b2 <mouseDriver_sendMsg+0xc0e>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80013c0:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80013c4:	2200      	movs	r2, #0
 80013c6:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80013ca:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 80013ce:	2800      	cmp	r0, #0
 80013d0:	f000 80e8 	beq.w	80015a4 <mouseDriver_sendMsg+0xe00>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80013d4:	2201      	movs	r2, #1
 80013d6:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 80013da:	240a      	movs	r4, #10
 80013dc:	e023      	b.n	8001426 <mouseDriver_sendMsg+0xc82>
 80013de:	bf00      	nop
 80013e0:	200004c8 	.word	0x200004c8
 80013e4:	6a09e667 	.word	0x6a09e667
 80013e8:	bb67ae85 	.word	0xbb67ae85
 80013ec:	3c6ef372 	.word	0x3c6ef372
 80013f0:	a54ff53a 	.word	0xa54ff53a
 80013f4:	510e527f 	.word	0x510e527f
 80013f8:	9b05688c 	.word	0x9b05688c
 80013fc:	1f83d9ab 	.word	0x1f83d9ab
 8001400:	20000528 	.word	0x20000528
 8001404:	200004b4 	.word	0x200004b4
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001408:	23fe      	movs	r3, #254	; 0xfe
 800140a:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800140e:	230c      	movs	r3, #12
 8001410:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001414:	2000      	movs	r0, #0
 8001416:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 800141a:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800141e:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8001420:	2200      	movs	r2, #0
 8001422:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8001426:	2200      	movs	r2, #0
 8001428:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 800142c:	49be      	ldr	r1, [pc, #760]	; (8001728 <mouseDriver_sendMsg+0xf84>)
 800142e:	798a      	ldrb	r2, [r1, #6]
 8001430:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8001434:	1c55      	adds	r5, r2, #1
 8001436:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 8001438:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 800143c:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 8001440:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 8001444:	2e00      	cmp	r6, #0
 8001446:	f000 80af 	beq.w	80015a8 <mouseDriver_sendMsg+0xe04>
		buf[2] = msg->seq;
 800144a:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 800144e:	2300      	movs	r3, #0
 8001450:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 8001454:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 8001458:	2301      	movs	r3, #1
 800145a:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 800145e:	1ea6      	subs	r6, r4, #2
 8001460:	b2b6      	uxth	r6, r6
 8001462:	ab7e      	add	r3, sp, #504	; 0x1f8
 8001464:	441e      	add	r6, r3
 8001466:	f5a6 76f7 	sub.w	r6, r6, #494	; 0x1ee
        *crcAccum = X25_INIT_CRC;
 800146a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 800146e:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001472:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001476:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8001478:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 800147c:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800147e:	0913      	lsrs	r3, r2, #4
 8001480:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001484:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001488:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 800148c:	42b5      	cmp	r5, r6
 800148e:	d1f0      	bne.n	8001472 <mouseDriver_sendMsg+0xcce>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001490:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 8001494:	b2ba      	uxth	r2, r7
	while (length--) {
 8001496:	1e53      	subs	r3, r2, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	b1a2      	cbz	r2, 80014c6 <mouseDriver_sendMsg+0xd22>
 800149c:	aa7e      	add	r2, sp, #504	; 0x1f8
 800149e:	4413      	add	r3, r2
 80014a0:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 80014a4:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80014a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80014aa:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 80014ac:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80014b0:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80014b2:	091a      	lsrs	r2, r3, #4
 80014b4:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80014b8:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 80014bc:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 80014c0:	b299      	uxth	r1, r3
	while (length--) {
 80014c2:	42b5      	cmp	r5, r6
 80014c4:	d1ef      	bne.n	80014a6 <mouseDriver_sendMsg+0xd02>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80014c6:	f081 034c 	eor.w	r3, r1, #76	; 0x4c
        tmp ^= (tmp<<4);
 80014ca:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80014ce:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80014d0:	0913      	lsrs	r3, r2, #4
 80014d2:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80014d6:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80014da:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80014e2:	a938      	add	r1, sp, #224	; 0xe0
 80014e4:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80014e6:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 80014ea:	0a15      	lsrs	r5, r2, #8
 80014ec:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 80014f0:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 80014f2:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 80014f6:	2800      	cmp	r0, #0
 80014f8:	d16b      	bne.n	80015d2 <mouseDriver_sendMsg+0xe2e>
	return msg->len + header_len + 2 + signature_len;
 80014fa:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80014fe:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8001502:	29fe      	cmp	r1, #254	; 0xfe
 8001504:	f000 80f6 	beq.w	80016f4 <mouseDriver_sendMsg+0xf50>
	while (length > 1 && payload[length-1] == 0) {
 8001508:	2c01      	cmp	r4, #1
 800150a:	d911      	bls.n	8001530 <mouseDriver_sendMsg+0xd8c>
 800150c:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8001510:	5d1b      	ldrb	r3, [r3, r4]
 8001512:	b96b      	cbnz	r3, 8001530 <mouseDriver_sendMsg+0xd8c>
 8001514:	1e63      	subs	r3, r4, #1
 8001516:	aa7e      	add	r2, sp, #504	; 0x1f8
 8001518:	fa52 f383 	uxtab	r3, r2, r3
 800151c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8001520:	3c01      	subs	r4, #1
 8001522:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8001524:	2c01      	cmp	r4, #1
 8001526:	d003      	beq.n	8001530 <mouseDriver_sendMsg+0xd8c>
 8001528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800152c:	2a00      	cmp	r2, #0
 800152e:	d0f7      	beq.n	8001520 <mouseDriver_sendMsg+0xd7c>
		buf[0] = msg->magic;
 8001530:	4d7e      	ldr	r5, [pc, #504]	; (800172c <mouseDriver_sendMsg+0xf88>)
 8001532:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8001534:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8001536:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 800153a:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 800153c:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8001540:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8001542:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001546:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8001548:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 800154c:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 800154e:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001552:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8001554:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001556:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800155a:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800155c:	121a      	asrs	r2, r3, #8
 800155e:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001560:	141b      	asrs	r3, r3, #16
 8001562:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001564:	4622      	mov	r2, r4
 8001566:	a938      	add	r1, sp, #224	; 0xe0
 8001568:	f105 000a 	add.w	r0, r5, #10
 800156c:	f011 fd1f 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001570:	f104 020a 	add.w	r2, r4, #10
 8001574:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001576:	f016 0f01 	tst.w	r6, #1
 800157a:	f041 8100 	bne.w	800277e <mouseDriver_sendMsg+0x1fda>
		header_len = MAVLINK_CORE_HEADER_LEN;
 800157e:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001580:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8001584:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001586:	0a12      	lsrs	r2, r2, #8
 8001588:	705a      	strb	r2, [r3, #1]
 800158a:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800158c:	4421      	add	r1, r4
 800158e:	3103      	adds	r1, #3
 8001590:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 8001592:	b289      	uxth	r1, r1
 8001594:	4865      	ldr	r0, [pc, #404]	; (800172c <mouseDriver_sendMsg+0xf88>)
 8001596:	f001 fca1 	bl	8002edc <main_transmit_buffer>
			break;
 800159a:	f7ff ba2c 	b.w	80009f6 <mouseDriver_sendMsg+0x252>
	while (length > 1 && payload[length-1] == 0) {
 800159e:	2000      	movs	r0, #0
 80015a0:	230c      	movs	r3, #12
 80015a2:	e70d      	b.n	80013c0 <mouseDriver_sendMsg+0xc1c>
	if (signing) {
 80015a4:	240a      	movs	r4, #10
 80015a6:	e73b      	b.n	8001420 <mouseDriver_sendMsg+0xc7c>
		buf[2] = msg->incompat_flags;
 80015a8:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 80015ac:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 80015b6:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 80015ba:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 80015be:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 80015c2:	2201      	movs	r2, #1
 80015c4:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80015c8:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80015cc:	f88d 3011 	strb.w	r3, [sp, #17]
 80015d0:	e745      	b.n	800145e <mouseDriver_sendMsg+0xcba>
		mavlink_sign_packet(status->signing,
 80015d2:	4b55      	ldr	r3, [pc, #340]	; (8001728 <mouseDriver_sendMsg+0xf84>)
 80015d4:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d08f      	beq.n	80014fa <mouseDriver_sendMsg+0xd56>
 80015da:	780b      	ldrb	r3, [r1, #0]
 80015dc:	f013 0f01 	tst.w	r3, #1
 80015e0:	d08b      	beq.n	80014fa <mouseDriver_sendMsg+0xd56>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80015e2:	f89d 50d7 	ldrb.w	r5, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 80015e6:	784b      	ldrb	r3, [r1, #1]
 80015e8:	f88d 31ea 	strb.w	r3, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 80015ec:	688b      	ldr	r3, [r1, #8]
 80015ee:	68ca      	ldr	r2, [r1, #12]
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	9201      	str	r2, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 80015f4:	f8cd 31eb 	str.w	r3, [sp, #491]	; 0x1eb
 80015f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80015fc:	f8ad 31ef 	strh.w	r3, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8001600:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001604:	1c56      	adds	r6, r2, #1
 8001606:	f143 0700 	adc.w	r7, r3, #0
 800160a:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 800160e:	2600      	movs	r6, #0
 8001610:	961b      	str	r6, [sp, #108]	; 0x6c
    m->sz[1] = 0;
 8001612:	961c      	str	r6, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8001614:	4b46      	ldr	r3, [pc, #280]	; (8001730 <mouseDriver_sendMsg+0xf8c>)
 8001616:	931d      	str	r3, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8001618:	4b46      	ldr	r3, [pc, #280]	; (8001734 <mouseDriver_sendMsg+0xf90>)
 800161a:	931e      	str	r3, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 800161c:	4b46      	ldr	r3, [pc, #280]	; (8001738 <mouseDriver_sendMsg+0xf94>)
 800161e:	931f      	str	r3, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8001620:	4b46      	ldr	r3, [pc, #280]	; (800173c <mouseDriver_sendMsg+0xf98>)
 8001622:	9320      	str	r3, [sp, #128]	; 0x80
    E = 0x510e527f;
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <mouseDriver_sendMsg+0xf9c>)
 8001626:	9321      	str	r3, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8001628:	4b46      	ldr	r3, [pc, #280]	; (8001744 <mouseDriver_sendMsg+0xfa0>)
 800162a:	9322      	str	r3, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <mouseDriver_sendMsg+0xfa4>)
 800162e:	9323      	str	r3, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8001630:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8001634:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8001638:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 800163c:	9324      	str	r3, [sp, #144]	; 0x90
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 800163e:	2220      	movs	r2, #32
 8001640:	3110      	adds	r1, #16
 8001642:	a81b      	add	r0, sp, #108	; 0x6c
 8001644:	f7fe ff84 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001648:	4622      	mov	r2, r4
 800164a:	a902      	add	r1, sp, #8
 800164c:	a81b      	add	r0, sp, #108	; 0x6c
 800164e:	f7fe ff7f 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001652:	462a      	mov	r2, r5
 8001654:	a938      	add	r1, sp, #224	; 0xe0
 8001656:	a81b      	add	r0, sp, #108	; 0x6c
 8001658:	f7fe ff7a 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 800165c:	2202      	movs	r2, #2
 800165e:	ab38      	add	r3, sp, #224	; 0xe0
 8001660:	1959      	adds	r1, r3, r5
 8001662:	a81b      	add	r0, sp, #108	; 0x6c
 8001664:	f7fe ff74 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001668:	2207      	movs	r2, #7
 800166a:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 800166e:	a81b      	add	r0, sp, #108	; 0x6c
 8001670:	f7fe ff6e 	bl	8000550 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8001674:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8001676:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800167a:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 800167e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001688:	2247      	movs	r2, #71	; 0x47
 800168a:	4631      	mov	r1, r6
 800168c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8001690:	f011 fc98 	bl	8012fc4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001694:	ab09      	add	r3, sp, #36	; 0x24
 8001696:	442b      	add	r3, r5
 8001698:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800169a:	0a22      	lsrs	r2, r4, #8
 800169c:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800169e:	0c22      	lsrs	r2, r4, #16
 80016a0:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80016a2:	0e24      	lsrs	r4, r4, #24
 80016a4:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80016a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80016a8:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80016aa:	0a11      	lsrs	r1, r2, #8
 80016ac:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80016ae:	0c11      	lsrs	r1, r2, #16
 80016b0:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80016b2:	0e12      	lsrs	r2, r2, #24
 80016b4:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 80016b6:	f105 0209 	add.w	r2, r5, #9
 80016ba:	a909      	add	r1, sp, #36	; 0x24
 80016bc:	a81b      	add	r0, sp, #108	; 0x6c
 80016be:	f7fe ff47 	bl	8000550 <mavlink_sha256_update>
    result[0] = p[3];
 80016c2:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 80016c6:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 80016ca:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 80016ce:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 80016d2:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 80016d6:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 80016da:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 80016de:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 80016e2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80016e6:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 80016ea:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 80016ee:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 80016f2:	e702      	b.n	80014fa <mouseDriver_sendMsg+0xd56>
		buf[0] = msg->magic;
 80016f4:	4d0d      	ldr	r5, [pc, #52]	; (800172c <mouseDriver_sendMsg+0xf88>)
 80016f6:	23fe      	movs	r3, #254	; 0xfe
 80016f8:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 80016fa:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 80016fc:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001700:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8001702:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001706:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8001708:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800170c:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 800170e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001710:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001714:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001716:	4622      	mov	r2, r4
 8001718:	a938      	add	r1, sp, #224	; 0xe0
 800171a:	1da8      	adds	r0, r5, #6
 800171c:	f011 fc47 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001720:	1da3      	adds	r3, r4, #6
 8001722:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001724:	2105      	movs	r1, #5
 8001726:	e72b      	b.n	8001580 <mouseDriver_sendMsg+0xddc>
 8001728:	200004c8 	.word	0x200004c8
 800172c:	20000528 	.word	0x20000528
 8001730:	6a09e667 	.word	0x6a09e667
 8001734:	bb67ae85 	.word	0xbb67ae85
 8001738:	3c6ef372 	.word	0x3c6ef372
 800173c:	a54ff53a 	.word	0xa54ff53a
 8001740:	510e527f 	.word	0x510e527f
 8001744:	9b05688c 	.word	0x9b05688c
 8001748:	1f83d9ab 	.word	0x1f83d9ab
 * @param msg The MAVLink message to compress the data into
 * @param error C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_error_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_error_t* error)
{
    return mavlink_msg_error_pack(system_id, component_id, msg, error->time, error->error);
 800174c:	4a98      	ldr	r2, [pc, #608]	; (80019b0 <mouseDriver_sendMsg+0x120c>)
 800174e:	7911      	ldrb	r1, [r2, #4]
    packet.time = time;
 8001750:	466b      	mov	r3, sp
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	601a      	str	r2, [r3, #0]
    packet.error = error;
 8001756:	7119      	strb	r1, [r3, #4]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ERROR_LEN);
 8001758:	e893 0003 	ldmia.w	r3, {r0, r1}
 800175c:	9238      	str	r2, [sp, #224]	; 0xe0
 800175e:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4
    msg->msgid = MAVLINK_MSG_ID_ERROR;
 8001762:	2300      	movs	r3, #0
 8001764:	2207      	movs	r2, #7
 8001766:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 800176a:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 800176e:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001772:	4b90      	ldr	r3, [pc, #576]	; (80019b4 <mouseDriver_sendMsg+0x1210>)
 8001774:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001776:	f013 0602 	ands.w	r6, r3, #2
 800177a:	d12e      	bne.n	80017da <mouseDriver_sendMsg+0x1036>
 800177c:	4b8d      	ldr	r3, [pc, #564]	; (80019b4 <mouseDriver_sendMsg+0x1210>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80f5 	beq.w	8001970 <mouseDriver_sendMsg+0x11cc>
 8001786:	7818      	ldrb	r0, [r3, #0]
 8001788:	f000 0001 	and.w	r0, r0, #1
		msg->magic = MAVLINK_STX;
 800178c:	23fd      	movs	r3, #253	; 0xfd
 800178e:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8001792:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 80ec 	bne.w	8001974 <mouseDriver_sendMsg+0x11d0>
 800179c:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 80e9 	bne.w	8001978 <mouseDriver_sendMsg+0x11d4>
 80017a6:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80e6 	bne.w	800197c <mouseDriver_sendMsg+0x11d8>
 80017b0:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
		length--;
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bf0c      	ite	eq
 80017b8:	2301      	moveq	r3, #1
 80017ba:	2302      	movne	r3, #2
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80017bc:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80017c0:	2200      	movs	r2, #0
 80017c2:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80017c6:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 80017ca:	2800      	cmp	r0, #0
 80017cc:	f000 80d8 	beq.w	8001980 <mouseDriver_sendMsg+0x11dc>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80017d0:	2201      	movs	r2, #1
 80017d2:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 80017d6:	240a      	movs	r4, #10
 80017d8:	e00e      	b.n	80017f8 <mouseDriver_sendMsg+0x1054>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80017da:	23fe      	movs	r3, #254	; 0xfe
 80017dc:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80017e0:	2305      	movs	r3, #5
 80017e2:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80017e6:	2000      	movs	r0, #0
 80017e8:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80017ec:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80017f0:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 80017f2:	2200      	movs	r2, #0
 80017f4:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 80017f8:	2200      	movs	r2, #0
 80017fa:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 80017fe:	496d      	ldr	r1, [pc, #436]	; (80019b4 <mouseDriver_sendMsg+0x1210>)
 8001800:	798a      	ldrb	r2, [r1, #6]
 8001802:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8001806:	1c55      	adds	r5, r2, #1
 8001808:	718d      	strb	r5, [r1, #6]
	buf[0] = msg->magic;
 800180a:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 800180e:	f88d 1014 	strb.w	r1, [sp, #20]
	buf[1] = msg->len;
 8001812:	f88d 3015 	strb.w	r3, [sp, #21]
	if (mavlink1) {
 8001816:	2e00      	cmp	r6, #0
 8001818:	f000 80b4 	beq.w	8001984 <mouseDriver_sendMsg+0x11e0>
		buf[2] = msg->seq;
 800181c:	f88d 2016 	strb.w	r2, [sp, #22]
		buf[3] = msg->sysid;
 8001820:	2300      	movs	r3, #0
 8001822:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->compid;
 8001826:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 800182a:	2307      	movs	r3, #7
 800182c:	f88d 3019 	strb.w	r3, [sp, #25]
	while (length--) {
 8001830:	1ea6      	subs	r6, r4, #2
 8001832:	b2b6      	uxth	r6, r6
 8001834:	ab7e      	add	r3, sp, #504	; 0x1f8
 8001836:	441e      	add	r6, r3
 8001838:	f5a6 76f1 	sub.w	r6, r6, #482	; 0x1e2
        *crcAccum = X25_INIT_CRC;
 800183c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8001840:	f10d 0515 	add.w	r5, sp, #21
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001844:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001848:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 800184a:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 800184e:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001850:	0913      	lsrs	r3, r2, #4
 8001852:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001856:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800185a:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 800185e:	42b5      	cmp	r5, r6
 8001860:	d1f0      	bne.n	8001844 <mouseDriver_sendMsg+0x10a0>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001862:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 8001866:	b2ba      	uxth	r2, r7
	while (length--) {
 8001868:	1e53      	subs	r3, r2, #1
 800186a:	b29b      	uxth	r3, r3
 800186c:	b1a2      	cbz	r2, 8001898 <mouseDriver_sendMsg+0x10f4>
 800186e:	aa7e      	add	r2, sp, #504	; 0x1f8
 8001870:	4413      	add	r3, r2
 8001872:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8001876:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001878:	f815 3b01 	ldrb.w	r3, [r5], #1
 800187c:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 800187e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8001882:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001884:	091a      	lsrs	r2, r3, #4
 8001886:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800188a:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 800188e:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8001892:	b299      	uxth	r1, r3
	while (length--) {
 8001894:	42b5      	cmp	r5, r6
 8001896:	d1ef      	bne.n	8001878 <mouseDriver_sendMsg+0x10d4>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001898:	f081 0316 	eor.w	r3, r1, #22
        tmp ^= (tmp<<4);
 800189c:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 80018a0:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80018a2:	0913      	lsrs	r3, r2, #4
 80018a4:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80018a8:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 80018ac:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80018b4:	a938      	add	r1, sp, #224	; 0xe0
 80018b6:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80018b8:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 80018bc:	0a15      	lsrs	r5, r2, #8
 80018be:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 80018c2:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 80018c4:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 80018c8:	2800      	cmp	r0, #0
 80018ca:	d177      	bne.n	80019bc <mouseDriver_sendMsg+0x1218>
	return msg->len + header_len + 2 + signature_len;
 80018cc:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80018d0:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 80018d4:	29fe      	cmp	r1, #254	; 0xfe
 80018d6:	f000 810d 	beq.w	8001af4 <mouseDriver_sendMsg+0x1350>
	while (length > 1 && payload[length-1] == 0) {
 80018da:	2c01      	cmp	r4, #1
 80018dc:	d911      	bls.n	8001902 <mouseDriver_sendMsg+0x115e>
 80018de:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 80018e2:	5d1b      	ldrb	r3, [r3, r4]
 80018e4:	b96b      	cbnz	r3, 8001902 <mouseDriver_sendMsg+0x115e>
 80018e6:	1e63      	subs	r3, r4, #1
 80018e8:	aa7e      	add	r2, sp, #504	; 0x1f8
 80018ea:	fa52 f383 	uxtab	r3, r2, r3
 80018ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 80018f2:	3c01      	subs	r4, #1
 80018f4:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 80018f6:	2c01      	cmp	r4, #1
 80018f8:	d003      	beq.n	8001902 <mouseDriver_sendMsg+0x115e>
 80018fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80018fe:	2a00      	cmp	r2, #0
 8001900:	d0f7      	beq.n	80018f2 <mouseDriver_sendMsg+0x114e>
		buf[0] = msg->magic;
 8001902:	4d2d      	ldr	r5, [pc, #180]	; (80019b8 <mouseDriver_sendMsg+0x1214>)
 8001904:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8001906:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8001908:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 800190c:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 800190e:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8001912:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8001914:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001918:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 800191a:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 800191e:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8001920:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001924:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8001926:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001928:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800192c:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800192e:	121a      	asrs	r2, r3, #8
 8001930:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001932:	141b      	asrs	r3, r3, #16
 8001934:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001936:	4622      	mov	r2, r4
 8001938:	a938      	add	r1, sp, #224	; 0xe0
 800193a:	f105 000a 	add.w	r0, r5, #10
 800193e:	f011 fb36 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001942:	f104 020a 	add.w	r2, r4, #10
 8001946:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001948:	f016 0f01 	tst.w	r6, #1
 800194c:	f040 872e 	bne.w	80027ac <mouseDriver_sendMsg+0x2008>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001950:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001952:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8001956:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001958:	0a12      	lsrs	r2, r2, #8
 800195a:	705a      	strb	r2, [r3, #1]
 800195c:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800195e:	4421      	add	r1, r4
 8001960:	3103      	adds	r1, #3
 8001962:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 8001964:	b289      	uxth	r1, r1
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <mouseDriver_sendMsg+0x1214>)
 8001968:	f001 fab8 	bl	8002edc <main_transmit_buffer>
			break;
 800196c:	f7ff b843 	b.w	80009f6 <mouseDriver_sendMsg+0x252>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001970:	2000      	movs	r0, #0
 8001972:	e70b      	b.n	800178c <mouseDriver_sendMsg+0xfe8>
	while (length > 1 && payload[length-1] == 0) {
 8001974:	2305      	movs	r3, #5
 8001976:	e721      	b.n	80017bc <mouseDriver_sendMsg+0x1018>
		length--;
 8001978:	2304      	movs	r3, #4
 800197a:	e71f      	b.n	80017bc <mouseDriver_sendMsg+0x1018>
 800197c:	2303      	movs	r3, #3
 800197e:	e71d      	b.n	80017bc <mouseDriver_sendMsg+0x1018>
	if (signing) {
 8001980:	240a      	movs	r4, #10
 8001982:	e736      	b.n	80017f2 <mouseDriver_sendMsg+0x104e>
		buf[2] = msg->incompat_flags;
 8001984:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 8001988:	f88d 3016 	strb.w	r3, [sp, #22]
		buf[3] = msg->compat_flags;
 800198c:	2300      	movs	r3, #0
 800198e:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->seq;
 8001992:	f88d 2018 	strb.w	r2, [sp, #24]
		buf[5] = msg->sysid;
 8001996:	f88d 3019 	strb.w	r3, [sp, #25]
		buf[6] = msg->compid;
 800199a:	f88d 301a 	strb.w	r3, [sp, #26]
		buf[7] = msg->msgid & 0xFF;
 800199e:	2207      	movs	r2, #7
 80019a0:	f88d 201b 	strb.w	r2, [sp, #27]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80019a4:	f88d 301c 	strb.w	r3, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80019a8:	f88d 301d 	strb.w	r3, [sp, #29]
 80019ac:	e740      	b.n	8001830 <mouseDriver_sendMsg+0x108c>
 80019ae:	bf00      	nop
 80019b0:	20000480 	.word	0x20000480
 80019b4:	200004c8 	.word	0x200004c8
 80019b8:	20000528 	.word	0x20000528
		mavlink_sign_packet(status->signing,
 80019bc:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <mouseDriver_sendMsg+0x13dc>)
 80019be:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80019c0:	2d00      	cmp	r5, #0
 80019c2:	d083      	beq.n	80018cc <mouseDriver_sendMsg+0x1128>
 80019c4:	782a      	ldrb	r2, [r5, #0]
 80019c6:	f012 0f01 	tst.w	r2, #1
 80019ca:	f43f af7f 	beq.w	80018cc <mouseDriver_sendMsg+0x1128>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80019ce:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 80019d2:	786a      	ldrb	r2, [r5, #1]
 80019d4:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 80019d8:	68aa      	ldr	r2, [r5, #8]
 80019da:	68e9      	ldr	r1, [r5, #12]
 80019dc:	9202      	str	r2, [sp, #8]
 80019de:	9103      	str	r1, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 80019e0:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 80019e4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80019e8:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 80019ec:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80019f0:	1c42      	adds	r2, r0, #1
 80019f2:	f141 0300 	adc.w	r3, r1, #0
 80019f6:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 80019fa:	2700      	movs	r7, #0
 80019fc:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 80019fe:	4a61      	ldr	r2, [pc, #388]	; (8001b84 <mouseDriver_sendMsg+0x13e0>)
 8001a00:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8001a02:	4a61      	ldr	r2, [pc, #388]	; (8001b88 <mouseDriver_sendMsg+0x13e4>)
 8001a04:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8001a06:	4a61      	ldr	r2, [pc, #388]	; (8001b8c <mouseDriver_sendMsg+0x13e8>)
 8001a08:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8001a0a:	4a61      	ldr	r2, [pc, #388]	; (8001b90 <mouseDriver_sendMsg+0x13ec>)
 8001a0c:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 8001a0e:	4a61      	ldr	r2, [pc, #388]	; (8001b94 <mouseDriver_sendMsg+0x13f0>)
 8001a10:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8001a12:	4a61      	ldr	r2, [pc, #388]	; (8001b98 <mouseDriver_sendMsg+0x13f4>)
 8001a14:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8001a16:	4a61      	ldr	r2, [pc, #388]	; (8001b9c <mouseDriver_sendMsg+0x13f8>)
 8001a18:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8001a1a:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 8001a1e:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 8001a22:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 8001a26:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 8001a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2c:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 8001a2e:	ae25      	add	r6, sp, #148	; 0x94
 8001a30:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8001a34:	6869      	ldr	r1, [r5, #4]
 8001a36:	68aa      	ldr	r2, [r5, #8]
 8001a38:	68eb      	ldr	r3, [r5, #12]
 8001a3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a3c:	6928      	ldr	r0, [r5, #16]
 8001a3e:	6969      	ldr	r1, [r5, #20]
 8001a40:	69aa      	ldr	r2, [r5, #24]
 8001a42:	69eb      	ldr	r3, [r5, #28]
 8001a44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 8001a46:	4622      	mov	r2, r4
 8001a48:	a905      	add	r1, sp, #20
 8001a4a:	a81b      	add	r0, sp, #108	; 0x6c
 8001a4c:	f7fe fd80 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001a50:	4642      	mov	r2, r8
 8001a52:	a938      	add	r1, sp, #224	; 0xe0
 8001a54:	a81b      	add	r0, sp, #108	; 0x6c
 8001a56:	f7fe fd7b 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	ab38      	add	r3, sp, #224	; 0xe0
 8001a5e:	eb03 0108 	add.w	r1, r3, r8
 8001a62:	a81b      	add	r0, sp, #108	; 0x6c
 8001a64:	f7fe fd74 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001a68:	2207      	movs	r2, #7
 8001a6a:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8001a6e:	a81b      	add	r0, sp, #108	; 0x6c
 8001a70:	f7fe fd6e 	bl	8000550 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8001a74:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8001a76:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001a7a:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8001a7e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001a88:	2247      	movs	r2, #71	; 0x47
 8001a8a:	4639      	mov	r1, r7
 8001a8c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8001a90:	f011 fa98 	bl	8012fc4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001a94:	ab09      	add	r3, sp, #36	; 0x24
 8001a96:	442b      	add	r3, r5
 8001a98:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001a9a:	0a22      	lsrs	r2, r4, #8
 8001a9c:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001a9e:	0c22      	lsrs	r2, r4, #16
 8001aa0:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001aa2:	0e24      	lsrs	r4, r4, #24
 8001aa4:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001aa6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001aa8:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001aaa:	0a11      	lsrs	r1, r2, #8
 8001aac:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001aae:	0c11      	lsrs	r1, r2, #16
 8001ab0:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001ab2:	0e12      	lsrs	r2, r2, #24
 8001ab4:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8001ab6:	f105 0209 	add.w	r2, r5, #9
 8001aba:	a909      	add	r1, sp, #36	; 0x24
 8001abc:	a81b      	add	r0, sp, #108	; 0x6c
 8001abe:	f7fe fd47 	bl	8000550 <mavlink_sha256_update>
    result[0] = p[3];
 8001ac2:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8001ac6:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8001aca:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8001ace:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8001ad2:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8001ad6:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8001ada:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8001ade:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8001ae2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8001ae6:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8001aea:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8001aee:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8001af2:	e6eb      	b.n	80018cc <mouseDriver_sendMsg+0x1128>
		buf[0] = msg->magic;
 8001af4:	4d2a      	ldr	r5, [pc, #168]	; (8001ba0 <mouseDriver_sendMsg+0x13fc>)
 8001af6:	23fe      	movs	r3, #254	; 0xfe
 8001af8:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8001afa:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8001afc:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001b00:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8001b02:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001b06:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8001b08:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001b0c:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8001b0e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001b10:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001b14:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001b16:	4622      	mov	r2, r4
 8001b18:	a938      	add	r1, sp, #224	; 0xe0
 8001b1a:	1da8      	adds	r0, r5, #6
 8001b1c:	f011 fa47 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001b20:	1da3      	adds	r3, r4, #6
 8001b22:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001b24:	2105      	movs	r1, #5
 8001b26:	e714      	b.n	8001952 <mouseDriver_sendMsg+0x11ae>
			mavlink_msg_point_loaded_pack(SYS_ID,COMP_ID,&msg,actual_point);
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <mouseDriver_sendMsg+0x1400>)
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_POINT_LOADED_LEN);
#else
    mavlink_point_loaded_t packet;
    packet.point_id = point_id;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LOADED_LEN);
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
#endif

    msg->msgid = MAVLINK_MSG_ID_POINT_LOADED;
 8001b30:	2300      	movs	r3, #0
 8001b32:	2205      	movs	r2, #5
 8001b34:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8001b38:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 8001b3c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <mouseDriver_sendMsg+0x13dc>)
 8001b42:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001b44:	f013 0502 	ands.w	r5, r3, #2
 8001b48:	d12e      	bne.n	8001ba8 <mouseDriver_sendMsg+0x1404>
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <mouseDriver_sendMsg+0x13dc>)
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80f6 	beq.w	8001d40 <mouseDriver_sendMsg+0x159c>
 8001b54:	7818      	ldrb	r0, [r3, #0]
 8001b56:	f000 0001 	and.w	r0, r0, #1
		msg->magic = MAVLINK_STX;
 8001b5a:	23fd      	movs	r3, #253	; 0xfd
 8001b5c:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001b60:	2301      	movs	r3, #1
 8001b62:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001b66:	2200      	movs	r2, #0
 8001b68:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001b6c:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8001b70:	2800      	cmp	r0, #0
 8001b72:	f000 80e7 	beq.w	8001d44 <mouseDriver_sendMsg+0x15a0>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001b7c:	240a      	movs	r4, #10
 8001b7e:	e022      	b.n	8001bc6 <mouseDriver_sendMsg+0x1422>
 8001b80:	200004c8 	.word	0x200004c8
 8001b84:	6a09e667 	.word	0x6a09e667
 8001b88:	bb67ae85 	.word	0xbb67ae85
 8001b8c:	3c6ef372 	.word	0x3c6ef372
 8001b90:	a54ff53a 	.word	0xa54ff53a
 8001b94:	510e527f 	.word	0x510e527f
 8001b98:	9b05688c 	.word	0x9b05688c
 8001b9c:	1f83d9ab 	.word	0x1f83d9ab
 8001ba0:	20000528 	.word	0x20000528
 8001ba4:	20000494 	.word	0x20000494
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001ba8:	23fe      	movs	r3, #254	; 0xfe
 8001baa:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001bba:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001bbe:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 8001bcc:	4abe      	ldr	r2, [pc, #760]	; (8001ec8 <mouseDriver_sendMsg+0x1724>)
 8001bce:	7993      	ldrb	r3, [r2, #6]
 8001bd0:	f88d 30da 	strb.w	r3, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8001bd4:	1c59      	adds	r1, r3, #1
 8001bd6:	7191      	strb	r1, [r2, #6]
	buf[0] = msg->magic;
 8001bd8:	f89d 20d6 	ldrb.w	r2, [sp, #214]	; 0xd6
 8001bdc:	f88d 2014 	strb.w	r2, [sp, #20]
	buf[1] = msg->len;
 8001be0:	2201      	movs	r2, #1
 8001be2:	f88d 2015 	strb.w	r2, [sp, #21]
	if (mavlink1) {
 8001be6:	2d00      	cmp	r5, #0
 8001be8:	f000 80ae 	beq.w	8001d48 <mouseDriver_sendMsg+0x15a4>
		buf[2] = msg->seq;
 8001bec:	f88d 3016 	strb.w	r3, [sp, #22]
		buf[3] = msg->sysid;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f88d 3017 	strb.w	r3, [sp, #23]
		buf[4] = msg->compid;
 8001bf6:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->msgid & 0xFF;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	f88d 3019 	strb.w	r3, [sp, #25]
	while (length--) {
 8001c00:	1ea6      	subs	r6, r4, #2
 8001c02:	b2b6      	uxth	r6, r6
 8001c04:	ab7e      	add	r3, sp, #504	; 0x1f8
 8001c06:	441e      	add	r6, r3
 8001c08:	f5a6 76f1 	sub.w	r6, r6, #482	; 0x1e2
        *crcAccum = X25_INIT_CRC;
 8001c0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8001c10:	f10d 0515 	add.w	r5, sp, #21
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001c14:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001c18:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8001c1a:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8001c1e:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001c20:	0913      	lsrs	r3, r2, #4
 8001c22:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001c26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c2a:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8001c2e:	42b5      	cmp	r5, r6
 8001c30:	d1f0      	bne.n	8001c14 <mouseDriver_sendMsg+0x1470>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001c32:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 8001c36:	b2ba      	uxth	r2, r7
	while (length--) {
 8001c38:	1e53      	subs	r3, r2, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b1a2      	cbz	r2, 8001c68 <mouseDriver_sendMsg+0x14c4>
 8001c3e:	aa7e      	add	r2, sp, #504	; 0x1f8
 8001c40:	4413      	add	r3, r2
 8001c42:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8001c46:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001c48:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c4c:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8001c4e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8001c52:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001c54:	091a      	lsrs	r2, r3, #4
 8001c56:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8001c5a:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8001c5e:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8001c62:	b299      	uxth	r1, r3
	while (length--) {
 8001c64:	42b5      	cmp	r5, r6
 8001c66:	d1ef      	bne.n	8001c48 <mouseDriver_sendMsg+0x14a4>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001c68:	f081 039b 	eor.w	r3, r1, #155	; 0x9b
        tmp ^= (tmp<<4);
 8001c6c:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8001c70:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001c72:	0913      	lsrs	r3, r2, #4
 8001c74:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001c78:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8001c7c:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001c84:	a938      	add	r1, sp, #224	; 0xe0
 8001c86:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001c88:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 8001c8c:	0a15      	lsrs	r5, r2, #8
 8001c8e:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 8001c92:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8001c94:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d16a      	bne.n	8001d72 <mouseDriver_sendMsg+0x15ce>
	return msg->len + header_len + 2 + signature_len;
 8001c9c:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001ca0:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8001ca4:	29fe      	cmp	r1, #254	; 0xfe
 8001ca6:	f000 80f5 	beq.w	8001e94 <mouseDriver_sendMsg+0x16f0>
	while (length > 1 && payload[length-1] == 0) {
 8001caa:	2c01      	cmp	r4, #1
 8001cac:	d911      	bls.n	8001cd2 <mouseDriver_sendMsg+0x152e>
 8001cae:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8001cb2:	5d1b      	ldrb	r3, [r3, r4]
 8001cb4:	b96b      	cbnz	r3, 8001cd2 <mouseDriver_sendMsg+0x152e>
 8001cb6:	1e63      	subs	r3, r4, #1
 8001cb8:	aa7e      	add	r2, sp, #504	; 0x1f8
 8001cba:	fa52 f383 	uxtab	r3, r2, r3
 8001cbe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 8001cc2:	3c01      	subs	r4, #1
 8001cc4:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 8001cc6:	2c01      	cmp	r4, #1
 8001cc8:	d003      	beq.n	8001cd2 <mouseDriver_sendMsg+0x152e>
 8001cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d0f7      	beq.n	8001cc2 <mouseDriver_sendMsg+0x151e>
		buf[0] = msg->magic;
 8001cd2:	4d7e      	ldr	r5, [pc, #504]	; (8001ecc <mouseDriver_sendMsg+0x1728>)
 8001cd4:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 8001cd6:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 8001cd8:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 8001cdc:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 8001cde:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 8001ce2:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 8001ce4:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001ce8:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 8001cea:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001cee:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 8001cf0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001cf4:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 8001cf6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001cf8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001cfc:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001cfe:	121a      	asrs	r2, r3, #8
 8001d00:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001d02:	141b      	asrs	r3, r3, #16
 8001d04:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001d06:	4622      	mov	r2, r4
 8001d08:	a938      	add	r1, sp, #224	; 0xe0
 8001d0a:	f105 000a 	add.w	r0, r5, #10
 8001d0e:	f011 f94e 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001d12:	f104 020a 	add.w	r2, r4, #10
 8001d16:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001d18:	f016 0f01 	tst.w	r6, #1
 8001d1c:	f040 855d 	bne.w	80027da <mouseDriver_sendMsg+0x2036>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001d20:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001d22:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8001d26:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001d28:	0a12      	lsrs	r2, r2, #8
 8001d2a:	705a      	strb	r2, [r3, #1]
 8001d2c:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001d2e:	4421      	add	r1, r4
 8001d30:	3103      	adds	r1, #3
 8001d32:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 8001d34:	b289      	uxth	r1, r1
 8001d36:	4865      	ldr	r0, [pc, #404]	; (8001ecc <mouseDriver_sendMsg+0x1728>)
 8001d38:	f001 f8d0 	bl	8002edc <main_transmit_buffer>
			break;
 8001d3c:	f7fe be5b 	b.w	80009f6 <mouseDriver_sendMsg+0x252>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001d40:	2000      	movs	r0, #0
 8001d42:	e70a      	b.n	8001b5a <mouseDriver_sendMsg+0x13b6>
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001d44:	240a      	movs	r4, #10
 8001d46:	e73b      	b.n	8001bc0 <mouseDriver_sendMsg+0x141c>
		buf[2] = msg->incompat_flags;
 8001d48:	f89d 20d8 	ldrb.w	r2, [sp, #216]	; 0xd8
 8001d4c:	f88d 2016 	strb.w	r2, [sp, #22]
		buf[3] = msg->compat_flags;
 8001d50:	2200      	movs	r2, #0
 8001d52:	f88d 2017 	strb.w	r2, [sp, #23]
		buf[4] = msg->seq;
 8001d56:	f88d 3018 	strb.w	r3, [sp, #24]
		buf[5] = msg->sysid;
 8001d5a:	f88d 2019 	strb.w	r2, [sp, #25]
		buf[6] = msg->compid;
 8001d5e:	f88d 201a 	strb.w	r2, [sp, #26]
		buf[7] = msg->msgid & 0xFF;
 8001d62:	2305      	movs	r3, #5
 8001d64:	f88d 301b 	strb.w	r3, [sp, #27]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001d68:	f88d 201c 	strb.w	r2, [sp, #28]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001d6c:	f88d 201d 	strb.w	r2, [sp, #29]
 8001d70:	e746      	b.n	8001c00 <mouseDriver_sendMsg+0x145c>
		mavlink_sign_packet(status->signing,
 8001d72:	4b55      	ldr	r3, [pc, #340]	; (8001ec8 <mouseDriver_sendMsg+0x1724>)
 8001d74:	6919      	ldr	r1, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001d76:	2900      	cmp	r1, #0
 8001d78:	d090      	beq.n	8001c9c <mouseDriver_sendMsg+0x14f8>
 8001d7a:	780b      	ldrb	r3, [r1, #0]
 8001d7c:	f013 0f01 	tst.w	r3, #1
 8001d80:	d08c      	beq.n	8001c9c <mouseDriver_sendMsg+0x14f8>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001d82:	f89d 50d7 	ldrb.w	r5, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8001d86:	784b      	ldrb	r3, [r1, #1]
 8001d88:	f88d 31ea 	strb.w	r3, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8001d8c:	688b      	ldr	r3, [r1, #8]
 8001d8e:	68ca      	ldr	r2, [r1, #12]
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	9203      	str	r2, [sp, #12]
	memcpy(&signature[1], tstamp.t8, 6);
 8001d94:	f8cd 31eb 	str.w	r3, [sp, #491]	; 0x1eb
 8001d98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001d9c:	f8ad 31ef 	strh.w	r3, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8001da0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001da4:	1c56      	adds	r6, r2, #1
 8001da6:	f143 0700 	adc.w	r7, r3, #0
 8001daa:	e9c1 6702 	strd	r6, r7, [r1, #8]
    m->sz[0] = 0;
 8001dae:	2600      	movs	r6, #0
 8001db0:	961b      	str	r6, [sp, #108]	; 0x6c
    m->sz[1] = 0;
 8001db2:	961c      	str	r6, [sp, #112]	; 0x70
    A = 0x6a09e667;
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <mouseDriver_sendMsg+0x172c>)
 8001db6:	931d      	str	r3, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <mouseDriver_sendMsg+0x1730>)
 8001dba:	931e      	str	r3, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 8001dbc:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <mouseDriver_sendMsg+0x1734>)
 8001dbe:	931f      	str	r3, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <mouseDriver_sendMsg+0x1738>)
 8001dc2:	9320      	str	r3, [sp, #128]	; 0x80
    E = 0x510e527f;
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <mouseDriver_sendMsg+0x173c>)
 8001dc6:	9321      	str	r3, [sp, #132]	; 0x84
    F = 0x9b05688c;
 8001dc8:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <mouseDriver_sendMsg+0x1740>)
 8001dca:	9322      	str	r3, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 8001dcc:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <mouseDriver_sendMsg+0x1744>)
 8001dce:	9323      	str	r3, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 8001dd0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8001dd4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8001dd8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8001ddc:	9324      	str	r3, [sp, #144]	; 0x90
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001dde:	2220      	movs	r2, #32
 8001de0:	3110      	adds	r1, #16
 8001de2:	a81b      	add	r0, sp, #108	; 0x6c
 8001de4:	f7fe fbb4 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001de8:	4622      	mov	r2, r4
 8001dea:	a905      	add	r1, sp, #20
 8001dec:	a81b      	add	r0, sp, #108	; 0x6c
 8001dee:	f7fe fbaf 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001df2:	462a      	mov	r2, r5
 8001df4:	a938      	add	r1, sp, #224	; 0xe0
 8001df6:	a81b      	add	r0, sp, #108	; 0x6c
 8001df8:	f7fe fbaa 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	ab38      	add	r3, sp, #224	; 0xe0
 8001e00:	1959      	adds	r1, r3, r5
 8001e02:	a81b      	add	r0, sp, #108	; 0x6c
 8001e04:	f7fe fba4 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001e08:	2207      	movs	r2, #7
 8001e0a:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8001e0e:	a81b      	add	r0, sp, #108	; 0x6c
 8001e10:	f7fe fb9e 	bl	8000550 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8001e14:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8001e16:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001e1a:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8001e1e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001e28:	2247      	movs	r2, #71	; 0x47
 8001e2a:	4631      	mov	r1, r6
 8001e2c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8001e30:	f011 f8c8 	bl	8012fc4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001e34:	ab09      	add	r3, sp, #36	; 0x24
 8001e36:	442b      	add	r3, r5
 8001e38:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001e3a:	0a22      	lsrs	r2, r4, #8
 8001e3c:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001e3e:	0c22      	lsrs	r2, r4, #16
 8001e40:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001e42:	0e24      	lsrs	r4, r4, #24
 8001e44:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001e46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001e48:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001e4a:	0a11      	lsrs	r1, r2, #8
 8001e4c:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001e4e:	0c11      	lsrs	r1, r2, #16
 8001e50:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001e52:	0e12      	lsrs	r2, r2, #24
 8001e54:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8001e56:	f105 0209 	add.w	r2, r5, #9
 8001e5a:	a909      	add	r1, sp, #36	; 0x24
 8001e5c:	a81b      	add	r0, sp, #108	; 0x6c
 8001e5e:	f7fe fb77 	bl	8000550 <mavlink_sha256_update>
    result[0] = p[3];
 8001e62:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8001e66:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8001e6a:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8001e6e:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8001e72:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8001e76:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8001e7a:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8001e7e:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8001e82:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8001e86:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8001e8a:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8001e8e:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8001e92:	e703      	b.n	8001c9c <mouseDriver_sendMsg+0x14f8>
		buf[0] = msg->magic;
 8001e94:	4d0d      	ldr	r5, [pc, #52]	; (8001ecc <mouseDriver_sendMsg+0x1728>)
 8001e96:	23fe      	movs	r3, #254	; 0xfe
 8001e98:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 8001e9a:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 8001e9c:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 8001ea0:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 8001ea2:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8001ea6:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 8001ea8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8001eac:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 8001eae:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001eb0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001eb4:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	a938      	add	r1, sp, #224	; 0xe0
 8001eba:	1da8      	adds	r0, r5, #6
 8001ebc:	f011 f877 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001ec0:	1da3      	adds	r3, r4, #6
 8001ec2:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	e72c      	b.n	8001d22 <mouseDriver_sendMsg+0x157e>
 8001ec8:	200004c8 	.word	0x200004c8
 8001ecc:	20000528 	.word	0x20000528
 8001ed0:	6a09e667 	.word	0x6a09e667
 8001ed4:	bb67ae85 	.word	0xbb67ae85
 8001ed8:	3c6ef372 	.word	0x3c6ef372
 8001edc:	a54ff53a 	.word	0xa54ff53a
 8001ee0:	510e527f 	.word	0x510e527f
 8001ee4:	9b05688c 	.word	0x9b05688c
 8001ee8:	1f83d9ab 	.word	0x1f83d9ab
			mavlink_msg_point_encode(SYS_ID,COMP_ID,&msg,&points[actual_point]);
 8001eec:	4b98      	ldr	r3, [pc, #608]	; (8002150 <mouseDriver_sendMsg+0x19ac>)
 8001eee:	781a      	ldrb	r2, [r3, #0]
 * @param msg The MAVLink message to compress the data into
 * @param point C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_point_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_point_t* point)
{
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 8001ef0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001ef4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001ef8:	4a96      	ldr	r2, [pc, #600]	; (8002154 <mouseDriver_sendMsg+0x19b0>)
 8001efa:	441a      	add	r2, r3
 8001efc:	7b11      	ldrb	r1, [r2, #12]
 8001efe:	6854      	ldr	r4, [r2, #4]
 8001f00:	6890      	ldr	r0, [r2, #8]
    packet.duration = duration;
 8001f02:	ab05      	add	r3, sp, #20
    return mavlink_msg_point_pack(system_id, component_id, msg, point->duration, point->point_id, point->setpoint_x, point->setpoint_y);
 8001f04:	6812      	ldr	r2, [r2, #0]
    packet.duration = duration;
 8001f06:	9205      	str	r2, [sp, #20]
    packet.setpoint_x = setpoint_x;
 8001f08:	9406      	str	r4, [sp, #24]
    packet.setpoint_y = setpoint_y;
 8001f0a:	9007      	str	r0, [sp, #28]
    packet.point_id = point_id;
 8001f0c:	f88d 1020 	strb.w	r1, [sp, #32]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_POINT_LEN);
 8001f10:	ac38      	add	r4, sp, #224	; 0xe0
 8001f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f14:	c407      	stmia	r4!, {r0, r1, r2}
 8001f16:	7023      	strb	r3, [r4, #0]
    msg->msgid = MAVLINK_MSG_ID_POINT;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2206      	movs	r2, #6
 8001f1c:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 8001f20:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 8001f24:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001f28:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <mouseDriver_sendMsg+0x19b4>)
 8001f2a:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001f2c:	f013 0502 	ands.w	r5, r3, #2
 8001f30:	d128      	bne.n	8001f84 <mouseDriver_sendMsg+0x17e0>
 8001f32:	4b89      	ldr	r3, [pc, #548]	; (8002158 <mouseDriver_sendMsg+0x19b4>)
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	b123      	cbz	r3, 8001f42 <mouseDriver_sendMsg+0x179e>
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f013 0f01 	tst.w	r3, #1
 8001f3e:	f040 84d9 	bne.w	80028f4 <mouseDriver_sendMsg+0x2150>
		msg->magic = MAVLINK_STX;
 8001f42:	23fd      	movs	r3, #253	; 0xfd
 8001f44:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8001f48:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f040 80e4 	bne.w	800211a <mouseDriver_sendMsg+0x1976>
 8001f52:	2000      	movs	r0, #0
 8001f54:	aa3b      	add	r2, sp, #236	; 0xec
		length--;
 8001f56:	230c      	movs	r3, #12
	while (length > 1 && payload[length-1] == 0) {
 8001f58:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8001f5c:	b919      	cbnz	r1, 8001f66 <mouseDriver_sendMsg+0x17c2>
		length--;
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d1f8      	bne.n	8001f58 <mouseDriver_sendMsg+0x17b4>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001f66:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001f70:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8001f74:	2800      	cmp	r0, #0
 8001f76:	f000 80d3 	beq.w	8002120 <mouseDriver_sendMsg+0x197c>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 8001f80:	240a      	movs	r4, #10
 8001f82:	e00e      	b.n	8001fa2 <mouseDriver_sendMsg+0x17fe>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001f84:	23fe      	movs	r3, #254	; 0xfe
 8001f86:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001f8a:	230d      	movs	r3, #13
 8001f8c:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8001f90:	2000      	movs	r0, #0
 8001f92:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8001f96:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001f9a:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 8001fa8:	496b      	ldr	r1, [pc, #428]	; (8002158 <mouseDriver_sendMsg+0x19b4>)
 8001faa:	798a      	ldrb	r2, [r1, #6]
 8001fac:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 8001fb0:	1c56      	adds	r6, r2, #1
 8001fb2:	718e      	strb	r6, [r1, #6]
	buf[0] = msg->magic;
 8001fb4:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8001fb8:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 8001fbc:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 8001fc0:	2d00      	cmp	r5, #0
 8001fc2:	f000 80af 	beq.w	8002124 <mouseDriver_sendMsg+0x1980>
		buf[2] = msg->seq;
 8001fc6:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 8001fd0:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 8001fd4:	2306      	movs	r3, #6
 8001fd6:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 8001fda:	1ea6      	subs	r6, r4, #2
 8001fdc:	b2b6      	uxth	r6, r6
 8001fde:	ab7e      	add	r3, sp, #504	; 0x1f8
 8001fe0:	441e      	add	r6, r3
 8001fe2:	f5a6 76f7 	sub.w	r6, r6, #494	; 0x1ee
        *crcAccum = X25_INIT_CRC;
 8001fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8001fea:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001fee:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001ff2:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 8001ff4:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8001ff8:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001ffa:	0913      	lsrs	r3, r2, #4
 8001ffc:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8002000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002004:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8002008:	42ae      	cmp	r6, r5
 800200a:	d1f0      	bne.n	8001fee <mouseDriver_sendMsg+0x184a>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800200c:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 8002010:	b2ba      	uxth	r2, r7
	while (length--) {
 8002012:	1e53      	subs	r3, r2, #1
 8002014:	b29b      	uxth	r3, r3
 8002016:	b1a2      	cbz	r2, 8002042 <mouseDriver_sendMsg+0x189e>
 8002018:	aa7e      	add	r2, sp, #504	; 0x1f8
 800201a:	4413      	add	r3, r2
 800201c:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002020:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002022:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002026:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8002028:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800202c:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800202e:	091a      	lsrs	r2, r3, #4
 8002030:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8002034:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8002038:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 800203c:	b299      	uxth	r1, r3
	while (length--) {
 800203e:	42b5      	cmp	r5, r6
 8002040:	d1ef      	bne.n	8002022 <mouseDriver_sendMsg+0x187e>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002042:	f081 034b 	eor.w	r3, r1, #75	; 0x4b
        tmp ^= (tmp<<4);
 8002046:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 800204a:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800204c:	0913      	lsrs	r3, r2, #4
 800204e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8002052:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 8002056:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 800205a:	b21b      	sxth	r3, r3
 800205c:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800205e:	a938      	add	r1, sp, #224	; 0xe0
 8002060:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8002062:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 8002066:	0a15      	lsrs	r5, r2, #8
 8002068:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 800206c:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 800206e:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 8002072:	2800      	cmp	r0, #0
 8002074:	d174      	bne.n	8002160 <mouseDriver_sendMsg+0x19bc>
	return msg->len + header_len + 2 + signature_len;
 8002076:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800207a:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 800207e:	29fe      	cmp	r1, #254	; 0xfe
 8002080:	f000 8109 	beq.w	8002296 <mouseDriver_sendMsg+0x1af2>
	while (length > 1 && payload[length-1] == 0) {
 8002084:	2c01      	cmp	r4, #1
 8002086:	d911      	bls.n	80020ac <mouseDriver_sendMsg+0x1908>
 8002088:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 800208c:	5d1b      	ldrb	r3, [r3, r4]
 800208e:	b96b      	cbnz	r3, 80020ac <mouseDriver_sendMsg+0x1908>
 8002090:	1e63      	subs	r3, r4, #1
 8002092:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002094:	fa52 f383 	uxtab	r3, r2, r3
 8002098:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 800209c:	3c01      	subs	r4, #1
 800209e:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 80020a0:	2c01      	cmp	r4, #1
 80020a2:	d003      	beq.n	80020ac <mouseDriver_sendMsg+0x1908>
 80020a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	d0f7      	beq.n	800209c <mouseDriver_sendMsg+0x18f8>
		buf[0] = msg->magic;
 80020ac:	4d2b      	ldr	r5, [pc, #172]	; (800215c <mouseDriver_sendMsg+0x19b8>)
 80020ae:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 80020b0:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 80020b2:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 80020b6:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 80020b8:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 80020bc:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 80020be:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 80020c2:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 80020c4:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 80020c8:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 80020ca:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80020ce:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 80020d0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80020d2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80020d6:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80020d8:	121a      	asrs	r2, r3, #8
 80020da:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80020dc:	141b      	asrs	r3, r3, #16
 80020de:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80020e0:	4622      	mov	r2, r4
 80020e2:	a938      	add	r1, sp, #224	; 0xe0
 80020e4:	f105 000a 	add.w	r0, r5, #10
 80020e8:	f010 ff61 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80020ec:	f104 020a 	add.w	r2, r4, #10
 80020f0:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80020f2:	f016 0f01 	tst.w	r6, #1
 80020f6:	f040 8387 	bne.w	8002808 <mouseDriver_sendMsg+0x2064>
		header_len = MAVLINK_CORE_HEADER_LEN;
 80020fa:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80020fc:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8002100:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002102:	0a12      	lsrs	r2, r2, #8
 8002104:	705a      	strb	r2, [r3, #1]
 8002106:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8002108:	4421      	add	r1, r4
 800210a:	3103      	adds	r1, #3
 800210c:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);
 800210e:	b289      	uxth	r1, r1
 8002110:	4812      	ldr	r0, [pc, #72]	; (800215c <mouseDriver_sendMsg+0x19b8>)
 8002112:	f000 fee3 	bl	8002edc <main_transmit_buffer>
			break;
 8002116:	f7fe bc6e 	b.w	80009f6 <mouseDriver_sendMsg+0x252>
	while (length > 1 && payload[length-1] == 0) {
 800211a:	2000      	movs	r0, #0
 800211c:	230d      	movs	r3, #13
 800211e:	e722      	b.n	8001f66 <mouseDriver_sendMsg+0x17c2>
	if (signing) {
 8002120:	240a      	movs	r4, #10
 8002122:	e73b      	b.n	8001f9c <mouseDriver_sendMsg+0x17f8>
		buf[2] = msg->incompat_flags;
 8002124:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 8002128:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 800212c:	2300      	movs	r3, #0
 800212e:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 8002132:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 8002136:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 800213a:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 800213e:	2206      	movs	r2, #6
 8002140:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8002144:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8002148:	f88d 3011 	strb.w	r3, [sp, #17]
 800214c:	e745      	b.n	8001fda <mouseDriver_sendMsg+0x1836>
 800214e:	bf00      	nop
 8002150:	20000494 	.word	0x20000494
 8002154:	2000071c 	.word	0x2000071c
 8002158:	200004c8 	.word	0x200004c8
 800215c:	20000528 	.word	0x20000528
		mavlink_sign_packet(status->signing,
 8002160:	4b84      	ldr	r3, [pc, #528]	; (8002374 <mouseDriver_sendMsg+0x1bd0>)
 8002162:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8002164:	2d00      	cmp	r5, #0
 8002166:	d086      	beq.n	8002076 <mouseDriver_sendMsg+0x18d2>
 8002168:	782a      	ldrb	r2, [r5, #0]
 800216a:	f012 0f01 	tst.w	r2, #1
 800216e:	d082      	beq.n	8002076 <mouseDriver_sendMsg+0x18d2>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8002170:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 8002174:	786a      	ldrb	r2, [r5, #1]
 8002176:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 800217a:	68aa      	ldr	r2, [r5, #8]
 800217c:	68e9      	ldr	r1, [r5, #12]
 800217e:	9200      	str	r2, [sp, #0]
 8002180:	9101      	str	r1, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8002182:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 8002186:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800218a:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 800218e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8002192:	1c42      	adds	r2, r0, #1
 8002194:	f141 0300 	adc.w	r3, r1, #0
 8002198:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 800219c:	2700      	movs	r7, #0
 800219e:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 80021a0:	4a75      	ldr	r2, [pc, #468]	; (8002378 <mouseDriver_sendMsg+0x1bd4>)
 80021a2:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 80021a4:	4a75      	ldr	r2, [pc, #468]	; (800237c <mouseDriver_sendMsg+0x1bd8>)
 80021a6:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 80021a8:	4a75      	ldr	r2, [pc, #468]	; (8002380 <mouseDriver_sendMsg+0x1bdc>)
 80021aa:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 80021ac:	4a75      	ldr	r2, [pc, #468]	; (8002384 <mouseDriver_sendMsg+0x1be0>)
 80021ae:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 80021b0:	4a75      	ldr	r2, [pc, #468]	; (8002388 <mouseDriver_sendMsg+0x1be4>)
 80021b2:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 80021b4:	4a75      	ldr	r2, [pc, #468]	; (800238c <mouseDriver_sendMsg+0x1be8>)
 80021b6:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 80021b8:	4a75      	ldr	r2, [pc, #468]	; (8002390 <mouseDriver_sendMsg+0x1bec>)
 80021ba:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 80021bc:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 80021c0:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 80021c4:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 80021c8:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 80021ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ce:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 80021d0:	ae25      	add	r6, sp, #148	; 0x94
 80021d2:	f855 0f10 	ldr.w	r0, [r5, #16]!
 80021d6:	6869      	ldr	r1, [r5, #4]
 80021d8:	68aa      	ldr	r2, [r5, #8]
 80021da:	68eb      	ldr	r3, [r5, #12]
 80021dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80021de:	6928      	ldr	r0, [r5, #16]
 80021e0:	6969      	ldr	r1, [r5, #20]
 80021e2:	69aa      	ldr	r2, [r5, #24]
 80021e4:	69eb      	ldr	r3, [r5, #28]
 80021e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 80021e8:	4622      	mov	r2, r4
 80021ea:	a902      	add	r1, sp, #8
 80021ec:	a81b      	add	r0, sp, #108	; 0x6c
 80021ee:	f7fe f9af 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80021f2:	4642      	mov	r2, r8
 80021f4:	a938      	add	r1, sp, #224	; 0xe0
 80021f6:	a81b      	add	r0, sp, #108	; 0x6c
 80021f8:	f7fe f9aa 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80021fc:	2202      	movs	r2, #2
 80021fe:	ab38      	add	r3, sp, #224	; 0xe0
 8002200:	eb03 0108 	add.w	r1, r3, r8
 8002204:	a81b      	add	r0, sp, #108	; 0x6c
 8002206:	f7fe f9a3 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 800220a:	2207      	movs	r2, #7
 800220c:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8002210:	a81b      	add	r0, sp, #108	; 0x6c
 8002212:	f7fe f99d 	bl	8000550 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 8002216:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8002218:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800221c:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8002220:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800222a:	2247      	movs	r2, #71	; 0x47
 800222c:	4639      	mov	r1, r7
 800222e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8002232:	f010 fec7 	bl	8012fc4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8002236:	ab09      	add	r3, sp, #36	; 0x24
 8002238:	442b      	add	r3, r5
 800223a:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800223c:	0a22      	lsrs	r2, r4, #8
 800223e:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002240:	0c22      	lsrs	r2, r4, #16
 8002242:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8002244:	0e24      	lsrs	r4, r4, #24
 8002246:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8002248:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800224a:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800224c:	0a11      	lsrs	r1, r2, #8
 800224e:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002250:	0c11      	lsrs	r1, r2, #16
 8002252:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8002254:	0e12      	lsrs	r2, r2, #24
 8002256:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8002258:	f105 0209 	add.w	r2, r5, #9
 800225c:	a909      	add	r1, sp, #36	; 0x24
 800225e:	a81b      	add	r0, sp, #108	; 0x6c
 8002260:	f7fe f976 	bl	8000550 <mavlink_sha256_update>
    result[0] = p[3];
 8002264:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8002268:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 800226c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8002270:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 8002274:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8002278:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 800227c:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8002280:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 8002284:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8002288:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 800228c:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8002290:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 8002294:	e6ef      	b.n	8002076 <mouseDriver_sendMsg+0x18d2>
		buf[0] = msg->magic;
 8002296:	4d3f      	ldr	r5, [pc, #252]	; (8002394 <mouseDriver_sendMsg+0x1bf0>)
 8002298:	23fe      	movs	r3, #254	; 0xfe
 800229a:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 800229c:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 800229e:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 80022a2:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 80022a4:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 80022a8:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 80022aa:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80022ae:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 80022b0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80022b2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80022b6:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80022b8:	4622      	mov	r2, r4
 80022ba:	a938      	add	r1, sp, #224	; 0xe0
 80022bc:	1da8      	adds	r0, r5, #6
 80022be:	f010 fe76 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80022c2:	1da3      	adds	r3, r4, #6
 80022c4:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80022c6:	2105      	movs	r1, #5
 80022c8:	e718      	b.n	80020fc <mouseDriver_sendMsg+0x1958>
 * @param msg The MAVLink message to compress the data into
 * @param raw_sensor C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_raw_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_sensor_t* raw_sensor)
{
    return mavlink_msg_raw_sensor_pack(system_id, component_id, msg, raw_sensor->time, raw_sensor->sensor_id, raw_sensor->delta_x, raw_sensor->delta_y, raw_sensor->squal, raw_sensor->lift, raw_sensor->product_id);
 80022ca:	4a33      	ldr	r2, [pc, #204]	; (8002398 <mouseDriver_sendMsg+0x1bf4>)
 80022cc:	7a15      	ldrb	r5, [r2, #8]
 80022ce:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80022d2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80022d6:	7a54      	ldrb	r4, [r2, #9]
 80022d8:	7a90      	ldrb	r0, [r2, #10]
 80022da:	7ad1      	ldrb	r1, [r2, #11]
    packet.time = time;
 80022dc:	ab05      	add	r3, sp, #20
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	9205      	str	r2, [sp, #20]
    packet.delta_x = delta_x;
 80022e2:	f8ad 7018 	strh.w	r7, [sp, #24]
    packet.delta_y = delta_y;
 80022e6:	f8ad 601a 	strh.w	r6, [sp, #26]
    packet.sensor_id = sensor_id;
 80022ea:	f88d 501c 	strb.w	r5, [sp, #28]
    packet.squal = squal;
 80022ee:	f88d 401d 	strb.w	r4, [sp, #29]
    packet.lift = lift;
 80022f2:	f88d 001e 	strb.w	r0, [sp, #30]
    packet.product_id = product_id;
 80022f6:	f88d 101f 	strb.w	r1, [sp, #31]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RAW_SENSOR_LEN);
 80022fa:	ac38      	add	r4, sp, #224	; 0xe0
 80022fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    msg->msgid = MAVLINK_MSG_ID_RAW_SENSOR;
 8002304:	2300      	movs	r3, #0
 8002306:	2208      	movs	r2, #8
 8002308:	f88d 20dd 	strb.w	r2, [sp, #221]	; 0xdd
 800230c:	f88d 30de 	strb.w	r3, [sp, #222]	; 0xde
 8002310:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <mouseDriver_sendMsg+0x1bd0>)
 8002316:	7b1b      	ldrb	r3, [r3, #12]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002318:	f013 0502 	ands.w	r5, r3, #2
 800231c:	d13e      	bne.n	800239c <mouseDriver_sendMsg+0x1bf8>
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <mouseDriver_sendMsg+0x1bd0>)
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	b123      	cbz	r3, 800232e <mouseDriver_sendMsg+0x1b8a>
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	f013 0f01 	tst.w	r3, #1
 800232a:	f040 82f7 	bne.w	800291c <mouseDriver_sendMsg+0x2178>
		msg->magic = MAVLINK_STX;
 800232e:	23fd      	movs	r3, #253	; 0xfd
 8002330:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8002334:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 80fa 	bne.w	8002532 <mouseDriver_sendMsg+0x1d8e>
 800233e:	2000      	movs	r0, #0
 8002340:	f10d 02eb 	add.w	r2, sp, #235	; 0xeb
		length--;
 8002344:	230b      	movs	r3, #11
	while (length > 1 && payload[length-1] == 0) {
 8002346:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 800234a:	b919      	cbnz	r1, 8002354 <mouseDriver_sendMsg+0x1bb0>
		length--;
 800234c:	3b01      	subs	r3, #1
 800234e:	b2db      	uxtb	r3, r3
	while (length > 1 && payload[length-1] == 0) {
 8002350:	2b01      	cmp	r3, #1
 8002352:	d1f8      	bne.n	8002346 <mouseDriver_sendMsg+0x1ba2>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8002354:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8002358:	2200      	movs	r2, #0
 800235a:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 800235e:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	if (signing) {
 8002362:	2800      	cmp	r0, #0
 8002364:	f000 80e8 	beq.w	8002538 <mouseDriver_sendMsg+0x1d94>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8002368:	2201      	movs	r2, #1
 800236a:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
 800236e:	240a      	movs	r4, #10
 8002370:	e023      	b.n	80023ba <mouseDriver_sendMsg+0x1c16>
 8002372:	bf00      	nop
 8002374:	200004c8 	.word	0x200004c8
 8002378:	6a09e667 	.word	0x6a09e667
 800237c:	bb67ae85 	.word	0xbb67ae85
 8002380:	3c6ef372 	.word	0x3c6ef372
 8002384:	a54ff53a 	.word	0xa54ff53a
 8002388:	510e527f 	.word	0x510e527f
 800238c:	9b05688c 	.word	0x9b05688c
 8002390:	1f83d9ab 	.word	0x1f83d9ab
 8002394:	20000528 	.word	0x20000528
 8002398:	2000049c 	.word	0x2000049c
		msg->magic = MAVLINK_STX_MAVLINK1;
 800239c:	23fe      	movs	r3, #254	; 0xfe
 800239e:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80023a2:	230c      	movs	r3, #12
 80023a4:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80023a8:	2000      	movs	r0, #0
 80023aa:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80023ae:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80023b2:	2406      	movs	r4, #6
	msg->incompat_flags = 0;
 80023b4:	2200      	movs	r2, #0
 80023b6:	f88d 20d8 	strb.w	r2, [sp, #216]	; 0xd8
	msg->compat_flags = 0;
 80023ba:	2200      	movs	r2, #0
 80023bc:	f88d 20d9 	strb.w	r2, [sp, #217]	; 0xd9
	msg->seq = status->current_tx_seq;
 80023c0:	49c3      	ldr	r1, [pc, #780]	; (80026d0 <mouseDriver_sendMsg+0x1f2c>)
 80023c2:	798a      	ldrb	r2, [r1, #6]
 80023c4:	f88d 20da 	strb.w	r2, [sp, #218]	; 0xda
	status->current_tx_seq = status->current_tx_seq + 1;
 80023c8:	1c56      	adds	r6, r2, #1
 80023ca:	718e      	strb	r6, [r1, #6]
	buf[0] = msg->magic;
 80023cc:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 80023d0:	f88d 1008 	strb.w	r1, [sp, #8]
	buf[1] = msg->len;
 80023d4:	f88d 3009 	strb.w	r3, [sp, #9]
	if (mavlink1) {
 80023d8:	2d00      	cmp	r5, #0
 80023da:	f000 80af 	beq.w	800253c <mouseDriver_sendMsg+0x1d98>
		buf[2] = msg->seq;
 80023de:	f88d 200a 	strb.w	r2, [sp, #10]
		buf[3] = msg->sysid;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->compid;
 80023e8:	f88d 300c 	strb.w	r3, [sp, #12]
		buf[5] = msg->msgid & 0xFF;
 80023ec:	2308      	movs	r3, #8
 80023ee:	f88d 300d 	strb.w	r3, [sp, #13]
	while (length--) {
 80023f2:	1ea6      	subs	r6, r4, #2
 80023f4:	b2b6      	uxth	r6, r6
 80023f6:	ab7e      	add	r3, sp, #504	; 0x1f8
 80023f8:	441e      	add	r6, r3
 80023fa:	f5a6 76f7 	sub.w	r6, r6, #494	; 0x1ee
        *crcAccum = X25_INIT_CRC;
 80023fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
	while (length--) {
 8002402:	f10d 0509 	add.w	r5, sp, #9
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002406:	f815 2b01 	ldrb.w	r2, [r5], #1
 800240a:	404a      	eors	r2, r1
        tmp ^= (tmp<<4);
 800240c:	ea82 1202 	eor.w	r2, r2, r2, lsl #4
 8002410:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002412:	0913      	lsrs	r3, r2, #4
 8002414:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8002418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800241c:	ea83 01c2 	eor.w	r1, r3, r2, lsl #3
	while (length--) {
 8002420:	42b5      	cmp	r5, r6
 8002422:	d1f0      	bne.n	8002406 <mouseDriver_sendMsg+0x1c62>
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8002424:	f89d 70d7 	ldrb.w	r7, [sp, #215]	; 0xd7
 8002428:	b2ba      	uxth	r2, r7
	while (length--) {
 800242a:	1e53      	subs	r3, r2, #1
 800242c:	b29b      	uxth	r3, r3
 800242e:	b1a2      	cbz	r2, 800245a <mouseDriver_sendMsg+0x1cb6>
 8002430:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002432:	4413      	add	r3, r2
 8002434:	f2a3 1617 	subw	r6, r3, #279	; 0x117
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002438:	ad38      	add	r5, sp, #224	; 0xe0
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800243a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800243e:	404b      	eors	r3, r1
        tmp ^= (tmp<<4);
 8002440:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8002444:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002446:	091a      	lsrs	r2, r3, #4
 8002448:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800244c:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8002450:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
 8002454:	b299      	uxth	r1, r3
	while (length--) {
 8002456:	42ae      	cmp	r6, r5
 8002458:	d1ef      	bne.n	800243a <mouseDriver_sendMsg+0x1c96>
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800245a:	f081 03f6 	eor.w	r3, r1, #246	; 0xf6
        tmp ^= (tmp<<4);
 800245e:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8002462:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002464:	0913      	lsrs	r3, r2, #4
 8002466:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800246a:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 800246e:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
 8002472:	b21b      	sxth	r3, r3
 8002474:	b29a      	uxth	r2, r3
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8002476:	a938      	add	r1, sp, #224	; 0xe0
 8002478:	55cb      	strb	r3, [r1, r7]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800247a:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 800247e:	0a15      	lsrs	r5, r2, #8
 8002480:	f10d 01e1 	add.w	r1, sp, #225	; 0xe1
 8002484:	54cd      	strb	r5, [r1, r3]
	msg->checksum = checksum;
 8002486:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	if (signing) {
 800248a:	2800      	cmp	r0, #0
 800248c:	d16b      	bne.n	8002566 <mouseDriver_sendMsg+0x1dc2>
	return msg->len + header_len + 2 + signature_len;
 800248e:	f89d 40d7 	ldrb.w	r4, [sp, #215]	; 0xd7
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8002492:	f89d 10d6 	ldrb.w	r1, [sp, #214]	; 0xd6
 8002496:	29fe      	cmp	r1, #254	; 0xfe
 8002498:	f000 8100 	beq.w	800269c <mouseDriver_sendMsg+0x1ef8>
	while (length > 1 && payload[length-1] == 0) {
 800249c:	2c01      	cmp	r4, #1
 800249e:	d911      	bls.n	80024c4 <mouseDriver_sendMsg+0x1d20>
 80024a0:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 80024a4:	5d1b      	ldrb	r3, [r3, r4]
 80024a6:	b96b      	cbnz	r3, 80024c4 <mouseDriver_sendMsg+0x1d20>
 80024a8:	1e63      	subs	r3, r4, #1
 80024aa:	aa7e      	add	r2, sp, #504	; 0x1f8
 80024ac:	fa52 f383 	uxtab	r3, r2, r3
 80024b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
		length--;
 80024b4:	3c01      	subs	r4, #1
 80024b6:	b2e4      	uxtb	r4, r4
	while (length > 1 && payload[length-1] == 0) {
 80024b8:	2c01      	cmp	r4, #1
 80024ba:	d003      	beq.n	80024c4 <mouseDriver_sendMsg+0x1d20>
 80024bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d0f7      	beq.n	80024b4 <mouseDriver_sendMsg+0x1d10>
		buf[0] = msg->magic;
 80024c4:	4d83      	ldr	r5, [pc, #524]	; (80026d4 <mouseDriver_sendMsg+0x1f30>)
 80024c6:	7029      	strb	r1, [r5, #0]
		buf[1] = length;
 80024c8:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->incompat_flags;
 80024ca:	f89d 60d8 	ldrb.w	r6, [sp, #216]	; 0xd8
 80024ce:	70ae      	strb	r6, [r5, #2]
		buf[3] = msg->compat_flags;
 80024d0:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
 80024d4:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->seq;
 80024d6:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 80024da:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->sysid;
 80024dc:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 80024e0:	716b      	strb	r3, [r5, #5]
		buf[6] = msg->compid;
 80024e2:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80024e6:	71ab      	strb	r3, [r5, #6]
		buf[7] = msg->msgid & 0xFF;
 80024e8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80024ea:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80024ee:	71eb      	strb	r3, [r5, #7]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80024f0:	121a      	asrs	r2, r3, #8
 80024f2:	722a      	strb	r2, [r5, #8]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80024f4:	141b      	asrs	r3, r3, #16
 80024f6:	726b      	strb	r3, [r5, #9]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80024f8:	4622      	mov	r2, r4
 80024fa:	a938      	add	r1, sp, #224	; 0xe0
 80024fc:	f105 000a 	add.w	r0, r5, #10
 8002500:	f010 fd55 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8002504:	f104 020a 	add.w	r2, r4, #10
 8002508:	18ab      	adds	r3, r5, r2
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800250a:	f016 0f01 	tst.w	r6, #1
 800250e:	f040 8191 	bne.w	8002834 <mouseDriver_sendMsg+0x2090>
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002512:	2109      	movs	r1, #9
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002514:	f8bd 20d4 	ldrh.w	r2, [sp, #212]	; 0xd4
 8002518:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800251a:	0a12      	lsrs	r2, r2, #8
 800251c:	705a      	strb	r2, [r3, #1]
 800251e:	2300      	movs	r3, #0
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8002520:	4421      	add	r1, r4
 8002522:	3103      	adds	r1, #3
 8002524:	4419      	add	r1, r3
			main_transmit_buffer(outBuffer, msg_size);/*
 8002526:	b289      	uxth	r1, r1
 8002528:	486a      	ldr	r0, [pc, #424]	; (80026d4 <mouseDriver_sendMsg+0x1f30>)
 800252a:	f000 fcd7 	bl	8002edc <main_transmit_buffer>
}
 800252e:	f7fe ba62 	b.w	80009f6 <mouseDriver_sendMsg+0x252>
	while (length > 1 && payload[length-1] == 0) {
 8002532:	2000      	movs	r0, #0
 8002534:	230c      	movs	r3, #12
 8002536:	e70d      	b.n	8002354 <mouseDriver_sendMsg+0x1bb0>
	if (signing) {
 8002538:	240a      	movs	r4, #10
 800253a:	e73b      	b.n	80023b4 <mouseDriver_sendMsg+0x1c10>
		buf[2] = msg->incompat_flags;
 800253c:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 8002540:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = msg->compat_flags;
 8002544:	2300      	movs	r3, #0
 8002546:	f88d 300b 	strb.w	r3, [sp, #11]
		buf[4] = msg->seq;
 800254a:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[5] = msg->sysid;
 800254e:	f88d 300d 	strb.w	r3, [sp, #13]
		buf[6] = msg->compid;
 8002552:	f88d 300e 	strb.w	r3, [sp, #14]
		buf[7] = msg->msgid & 0xFF;
 8002556:	2208      	movs	r2, #8
 8002558:	f88d 200f 	strb.w	r2, [sp, #15]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800255c:	f88d 3010 	strb.w	r3, [sp, #16]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8002560:	f88d 3011 	strb.w	r3, [sp, #17]
 8002564:	e745      	b.n	80023f2 <mouseDriver_sendMsg+0x1c4e>
		mavlink_sign_packet(status->signing,
 8002566:	4b5a      	ldr	r3, [pc, #360]	; (80026d0 <mouseDriver_sendMsg+0x1f2c>)
 8002568:	691d      	ldr	r5, [r3, #16]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 800256a:	2d00      	cmp	r5, #0
 800256c:	d08f      	beq.n	800248e <mouseDriver_sendMsg+0x1cea>
 800256e:	782a      	ldrb	r2, [r5, #0]
 8002570:	f012 0f01 	tst.w	r2, #1
 8002574:	d08b      	beq.n	800248e <mouseDriver_sendMsg+0x1cea>
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8002576:	f89d 80d7 	ldrb.w	r8, [sp, #215]	; 0xd7
	signature[0] = signing->link_id;
 800257a:	786a      	ldrb	r2, [r5, #1]
 800257c:	f88d 21ea 	strb.w	r2, [sp, #490]	; 0x1ea
	tstamp.t64 = signing->timestamp;
 8002580:	68aa      	ldr	r2, [r5, #8]
 8002582:	68e9      	ldr	r1, [r5, #12]
 8002584:	9200      	str	r2, [sp, #0]
 8002586:	9101      	str	r1, [sp, #4]
	memcpy(&signature[1], tstamp.t8, 6);
 8002588:	f8cd 21eb 	str.w	r2, [sp, #491]	; 0x1eb
 800258c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8002590:	f8ad 21ef 	strh.w	r2, [sp, #495]	; 0x1ef
	signing->timestamp++;
 8002594:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8002598:	1c42      	adds	r2, r0, #1
 800259a:	f141 0300 	adc.w	r3, r1, #0
 800259e:	e9c5 2302 	strd	r2, r3, [r5, #8]
    m->sz[1] = 0;
 80025a2:	2700      	movs	r7, #0
 80025a4:	971c      	str	r7, [sp, #112]	; 0x70
    A = 0x6a09e667;
 80025a6:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <mouseDriver_sendMsg+0x1f34>)
 80025a8:	921d      	str	r2, [sp, #116]	; 0x74
    B = 0xbb67ae85;
 80025aa:	4a4c      	ldr	r2, [pc, #304]	; (80026dc <mouseDriver_sendMsg+0x1f38>)
 80025ac:	921e      	str	r2, [sp, #120]	; 0x78
    C = 0x3c6ef372;
 80025ae:	4a4c      	ldr	r2, [pc, #304]	; (80026e0 <mouseDriver_sendMsg+0x1f3c>)
 80025b0:	921f      	str	r2, [sp, #124]	; 0x7c
    D = 0xa54ff53a;
 80025b2:	4a4c      	ldr	r2, [pc, #304]	; (80026e4 <mouseDriver_sendMsg+0x1f40>)
 80025b4:	9220      	str	r2, [sp, #128]	; 0x80
    E = 0x510e527f;
 80025b6:	4a4c      	ldr	r2, [pc, #304]	; (80026e8 <mouseDriver_sendMsg+0x1f44>)
 80025b8:	9221      	str	r2, [sp, #132]	; 0x84
    F = 0x9b05688c;
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <mouseDriver_sendMsg+0x1f48>)
 80025bc:	9222      	str	r2, [sp, #136]	; 0x88
    G = 0x1f83d9ab;
 80025be:	4a4c      	ldr	r2, [pc, #304]	; (80026f0 <mouseDriver_sendMsg+0x1f4c>)
 80025c0:	9223      	str	r2, [sp, #140]	; 0x8c
    H = 0x5be0cd19;
 80025c2:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 80025c6:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 80025ca:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 80025ce:	9224      	str	r2, [sp, #144]	; 0x90
    m->sz[0] += len * 8;
 80025d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d4:	921b      	str	r2, [sp, #108]	; 0x6c
	memcpy(m->u.save_bytes + offset, p, l);
 80025d6:	ae25      	add	r6, sp, #148	; 0x94
 80025d8:	f855 0f10 	ldr.w	r0, [r5, #16]!
 80025dc:	6869      	ldr	r1, [r5, #4]
 80025de:	68aa      	ldr	r2, [r5, #8]
 80025e0:	68eb      	ldr	r3, [r5, #12]
 80025e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80025e4:	6928      	ldr	r0, [r5, #16]
 80025e6:	6969      	ldr	r1, [r5, #20]
 80025e8:	69aa      	ldr	r2, [r5, #24]
 80025ea:	69eb      	ldr	r3, [r5, #28]
 80025ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, header, header_len);
 80025ee:	4622      	mov	r2, r4
 80025f0:	a902      	add	r1, sp, #8
 80025f2:	a81b      	add	r0, sp, #108	; 0x6c
 80025f4:	f7fd ffac 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80025f8:	4642      	mov	r2, r8
 80025fa:	a938      	add	r1, sp, #224	; 0xe0
 80025fc:	a81b      	add	r0, sp, #108	; 0x6c
 80025fe:	f7fd ffa7 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8002602:	2202      	movs	r2, #2
 8002604:	ab38      	add	r3, sp, #224	; 0xe0
 8002606:	eb03 0108 	add.w	r1, r3, r8
 800260a:	a81b      	add	r0, sp, #108	; 0x6c
 800260c:	f7fd ffa0 	bl	8000550 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8002610:	2207      	movs	r2, #7
 8002612:	f50d 71f5 	add.w	r1, sp, #490	; 0x1ea
 8002616:	a81b      	add	r0, sp, #108	; 0x6c
 8002618:	f7fd ff9a 	bl	8000550 <mavlink_sha256_update>
    unsigned offset = (m->sz[0] / 8) % 64;
 800261c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800261e:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002622:	f1c5 0577 	rsb	r5, r5, #119	; 0x77
 8002626:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    *zeros = 0x80;
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002630:	2247      	movs	r2, #71	; 0x47
 8002632:	4639      	mov	r1, r7
 8002634:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8002638:	f010 fcc4 	bl	8012fc4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800263c:	ab09      	add	r3, sp, #36	; 0x24
 800263e:	442b      	add	r3, r5
 8002640:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002642:	0a22      	lsrs	r2, r4, #8
 8002644:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002646:	0c22      	lsrs	r2, r4, #16
 8002648:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800264a:	0e24      	lsrs	r4, r4, #24
 800264c:	715c      	strb	r4, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800264e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002650:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8002652:	0a11      	lsrs	r1, r2, #8
 8002654:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002656:	0c11      	lsrs	r1, r2, #16
 8002658:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800265a:	0e12      	lsrs	r2, r2, #24
 800265c:	705a      	strb	r2, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 800265e:	f105 0209 	add.w	r2, r5, #9
 8002662:	a909      	add	r1, sp, #36	; 0x24
 8002664:	a81b      	add	r0, sp, #108	; 0x6c
 8002666:	f7fd ff73 	bl	8000550 <mavlink_sha256_update>
    result[0] = p[3];
 800266a:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 800266e:	f88d 31f1 	strb.w	r3, [sp, #497]	; 0x1f1
    result[1] = p[2];
 8002672:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8002676:	f88d 31f2 	strb.w	r3, [sp, #498]	; 0x1f2
    result[2] = p[1];
 800267a:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 800267e:	f88d 31f3 	strb.w	r3, [sp, #499]	; 0x1f3
    result[3] = p[0];
 8002682:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8002686:	f88d 31f4 	strb.w	r3, [sp, #500]	; 0x1f4
    result[4] = p[7];
 800268a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800268e:	f88d 31f5 	strb.w	r3, [sp, #501]	; 0x1f5
    result[5] = p[6];
 8002692:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8002696:	f88d 31f6 	strb.w	r3, [sp, #502]	; 0x1f6
 800269a:	e6f8      	b.n	800248e <mouseDriver_sendMsg+0x1cea>
		buf[0] = msg->magic;
 800269c:	4d0d      	ldr	r5, [pc, #52]	; (80026d4 <mouseDriver_sendMsg+0x1f30>)
 800269e:	23fe      	movs	r3, #254	; 0xfe
 80026a0:	702b      	strb	r3, [r5, #0]
		buf[1] = length;
 80026a2:	706c      	strb	r4, [r5, #1]
		buf[2] = msg->seq;
 80026a4:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
 80026a8:	70ab      	strb	r3, [r5, #2]
		buf[3] = msg->sysid;
 80026aa:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 80026ae:	70eb      	strb	r3, [r5, #3]
		buf[4] = msg->compid;
 80026b0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80026b4:	712b      	strb	r3, [r5, #4]
		buf[5] = msg->msgid & 0xFF;
 80026b6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80026b8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80026bc:	716b      	strb	r3, [r5, #5]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80026be:	4622      	mov	r2, r4
 80026c0:	a938      	add	r1, sp, #224	; 0xe0
 80026c2:	1da8      	adds	r0, r5, #6
 80026c4:	f010 fc73 	bl	8012fae <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80026c8:	1da3      	adds	r3, r4, #6
 80026ca:	442b      	add	r3, r5
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80026cc:	2105      	movs	r1, #5
 80026ce:	e721      	b.n	8002514 <mouseDriver_sendMsg+0x1d70>
 80026d0:	200004c8 	.word	0x200004c8
 80026d4:	20000528 	.word	0x20000528
 80026d8:	6a09e667 	.word	0x6a09e667
 80026dc:	bb67ae85 	.word	0xbb67ae85
 80026e0:	3c6ef372 	.word	0x3c6ef372
 80026e4:	a54ff53a 	.word	0xa54ff53a
 80026e8:	510e527f 	.word	0x510e527f
 80026ec:	9b05688c 	.word	0x9b05688c
 80026f0:	1f83d9ab 	.word	0x1f83d9ab
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80026f4:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 80026f8:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80026fa:	0a09      	lsrs	r1, r1, #8
 80026fc:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 80026fe:	1c99      	adds	r1, r3, #2
 8002700:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002702:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8002706:	6855      	ldr	r5, [r2, #4]
 8002708:	6890      	ldr	r0, [r2, #8]
 800270a:	f8c3 6002 	str.w	r6, [r3, #2]
 800270e:	f8c3 5006 	str.w	r5, [r3, #6]
 8002712:	f8c3 000a 	str.w	r0, [r3, #10]
 8002716:	7b13      	ldrb	r3, [r2, #12]
 8002718:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800271a:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800271c:	230d      	movs	r3, #13
 800271e:	f7fe b963 	b.w	80009e8 <mouseDriver_sendMsg+0x244>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002722:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 8002726:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002728:	0a09      	lsrs	r1, r1, #8
 800272a:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 800272c:	1c99      	adds	r1, r3, #2
 800272e:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002730:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8002734:	6855      	ldr	r5, [r2, #4]
 8002736:	6890      	ldr	r0, [r2, #8]
 8002738:	f8c3 6002 	str.w	r6, [r3, #2]
 800273c:	f8c3 5006 	str.w	r5, [r3, #6]
 8002740:	f8c3 000a 	str.w	r0, [r3, #10]
 8002744:	7b13      	ldrb	r3, [r2, #12]
 8002746:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002748:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800274a:	230d      	movs	r3, #13
 800274c:	f7fe bb3e 	b.w	8000dcc <mouseDriver_sendMsg+0x628>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002750:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 8002754:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002756:	0a09      	lsrs	r1, r1, #8
 8002758:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 800275a:	1c99      	adds	r1, r3, #2
 800275c:	aa7e      	add	r2, sp, #504	; 0x1f8
 800275e:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8002762:	6855      	ldr	r5, [r2, #4]
 8002764:	6890      	ldr	r0, [r2, #8]
 8002766:	f8c3 6002 	str.w	r6, [r3, #2]
 800276a:	f8c3 5006 	str.w	r5, [r3, #6]
 800276e:	f8c3 000a 	str.w	r0, [r3, #10]
 8002772:	7b13      	ldrb	r3, [r2, #12]
 8002774:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002776:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002778:	230d      	movs	r3, #13
 800277a:	f7fe bd17 	b.w	80011ac <mouseDriver_sendMsg+0xa08>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800277e:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 8002782:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002784:	0a09      	lsrs	r1, r1, #8
 8002786:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8002788:	1c99      	adds	r1, r3, #2
 800278a:	aa7e      	add	r2, sp, #504	; 0x1f8
 800278c:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8002790:	6855      	ldr	r5, [r2, #4]
 8002792:	6890      	ldr	r0, [r2, #8]
 8002794:	f8c3 6002 	str.w	r6, [r3, #2]
 8002798:	f8c3 5006 	str.w	r5, [r3, #6]
 800279c:	f8c3 000a 	str.w	r0, [r3, #10]
 80027a0:	7b13      	ldrb	r3, [r2, #12]
 80027a2:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80027a4:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80027a6:	230d      	movs	r3, #13
 80027a8:	f7fe bef0 	b.w	800158c <mouseDriver_sendMsg+0xde8>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80027ac:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 80027b0:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80027b2:	0a09      	lsrs	r1, r1, #8
 80027b4:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 80027b6:	1c99      	adds	r1, r3, #2
 80027b8:	aa7e      	add	r2, sp, #504	; 0x1f8
 80027ba:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 80027be:	6855      	ldr	r5, [r2, #4]
 80027c0:	6890      	ldr	r0, [r2, #8]
 80027c2:	f8c3 6002 	str.w	r6, [r3, #2]
 80027c6:	f8c3 5006 	str.w	r5, [r3, #6]
 80027ca:	f8c3 000a 	str.w	r0, [r3, #10]
 80027ce:	7b13      	ldrb	r3, [r2, #12]
 80027d0:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80027d2:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80027d4:	230d      	movs	r3, #13
 80027d6:	f7ff b8c2 	b.w	800195e <mouseDriver_sendMsg+0x11ba>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80027da:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 80027de:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80027e0:	0a09      	lsrs	r1, r1, #8
 80027e2:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 80027e4:	1c99      	adds	r1, r3, #2
 80027e6:	aa7e      	add	r2, sp, #504	; 0x1f8
 80027e8:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 80027ec:	6855      	ldr	r5, [r2, #4]
 80027ee:	6890      	ldr	r0, [r2, #8]
 80027f0:	f8c3 6002 	str.w	r6, [r3, #2]
 80027f4:	f8c3 5006 	str.w	r5, [r3, #6]
 80027f8:	f8c3 000a 	str.w	r0, [r3, #10]
 80027fc:	7b13      	ldrb	r3, [r2, #12]
 80027fe:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002800:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002802:	230d      	movs	r3, #13
 8002804:	f7ff ba93 	b.w	8001d2e <mouseDriver_sendMsg+0x158a>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002808:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 800280c:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800280e:	0a09      	lsrs	r1, r1, #8
 8002810:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 8002812:	1c99      	adds	r1, r3, #2
 8002814:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002816:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 800281a:	6855      	ldr	r5, [r2, #4]
 800281c:	6890      	ldr	r0, [r2, #8]
 800281e:	f8c3 6002 	str.w	r6, [r3, #2]
 8002822:	f8c3 5006 	str.w	r5, [r3, #6]
 8002826:	f8c3 000a 	str.w	r0, [r3, #10]
 800282a:	7b13      	ldrb	r3, [r2, #12]
 800282c:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800282e:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002830:	230d      	movs	r3, #13
 8002832:	e469      	b.n	8002108 <mouseDriver_sendMsg+0x1964>
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002834:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
 8002838:	54a9      	strb	r1, [r5, r2]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800283a:	0a09      	lsrs	r1, r1, #8
 800283c:	7059      	strb	r1, [r3, #1]
		memcpy(&ck[2], msg->signature, signature_len);
 800283e:	1c99      	adds	r1, r3, #2
 8002840:	aa7e      	add	r2, sp, #504	; 0x1f8
 8002842:	f852 6d0e 	ldr.w	r6, [r2, #-14]!
 8002846:	6855      	ldr	r5, [r2, #4]
 8002848:	6890      	ldr	r0, [r2, #8]
 800284a:	f8c3 6002 	str.w	r6, [r3, #2]
 800284e:	f8c3 5006 	str.w	r5, [r3, #6]
 8002852:	f8c3 000a 	str.w	r0, [r3, #10]
 8002856:	7b13      	ldrb	r3, [r2, #12]
 8002858:	730b      	strb	r3, [r1, #12]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800285a:	2109      	movs	r1, #9
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800285c:	230d      	movs	r3, #13
 800285e:	e65f      	b.n	8002520 <mouseDriver_sendMsg+0x1d7c>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8002860:	2308      	movs	r3, #8
 8002862:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8002866:	2200      	movs	r2, #0
 8002868:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 800286c:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002870:	2001      	movs	r0, #1
 8002872:	f7fe b9cf 	b.w	8000c14 <mouseDriver_sendMsg+0x470>
		msg->magic = MAVLINK_STX;
 8002876:	23fd      	movs	r3, #253	; 0xfd
 8002878:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 800287c:	f89d 30e7 	ldrb.w	r3, [sp, #231]	; 0xe7
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ed      	bne.n	8002860 <mouseDriver_sendMsg+0x20bc>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002884:	2001      	movs	r0, #1
 8002886:	f7fe b9b1 	b.w	8000bec <mouseDriver_sendMsg+0x448>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800288a:	230c      	movs	r3, #12
 800288c:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 8002890:	2200      	movs	r2, #0
 8002892:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8002896:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800289a:	2001      	movs	r0, #1
 800289c:	f7fe bbbf 	b.w	800101e <mouseDriver_sendMsg+0x87a>
		msg->magic = MAVLINK_STX;
 80028a0:	23fd      	movs	r3, #253	; 0xfd
 80028a2:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 80028a6:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ed      	bne.n	800288a <mouseDriver_sendMsg+0x20e6>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80028ae:	2001      	movs	r0, #1
 80028b0:	f7fe bba1 	b.w	8000ff6 <mouseDriver_sendMsg+0x852>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80028b4:	230c      	movs	r3, #12
 80028b6:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80028ba:	2200      	movs	r2, #0
 80028bc:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80028c0:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7fe bd85 	b.w	80013d4 <mouseDriver_sendMsg+0xc30>
		msg->magic = MAVLINK_STX;
 80028ca:	23fd      	movs	r3, #253	; 0xfd
 80028cc:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 80028d0:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ed      	bne.n	80028b4 <mouseDriver_sendMsg+0x2110>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80028d8:	2001      	movs	r0, #1
 80028da:	f7fe bd67 	b.w	80013ac <mouseDriver_sendMsg+0xc08>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80028de:	230d      	movs	r3, #13
 80028e0:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 80028e4:	2200      	movs	r2, #0
 80028e6:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 80028ea:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80028ee:	2001      	movs	r0, #1
 80028f0:	f7ff bb43 	b.w	8001f7a <mouseDriver_sendMsg+0x17d6>
		msg->magic = MAVLINK_STX;
 80028f4:	23fd      	movs	r3, #253	; 0xfd
 80028f6:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 80028fa:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ed      	bne.n	80028de <mouseDriver_sendMsg+0x213a>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002902:	2001      	movs	r0, #1
 8002904:	f7ff bb26 	b.w	8001f54 <mouseDriver_sendMsg+0x17b0>
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8002908:	230c      	movs	r3, #12
 800290a:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
	msg->sysid = system_id;
 800290e:	2200      	movs	r2, #0
 8002910:	f88d 20db 	strb.w	r2, [sp, #219]	; 0xdb
	msg->compid = component_id;
 8002914:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8002918:	2001      	movs	r0, #1
 800291a:	e525      	b.n	8002368 <mouseDriver_sendMsg+0x1bc4>
		msg->magic = MAVLINK_STX;
 800291c:	23fd      	movs	r3, #253	; 0xfd
 800291e:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
	while (length > 1 && payload[length-1] == 0) {
 8002922:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1ee      	bne.n	8002908 <mouseDriver_sendMsg+0x2164>
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800292a:	2001      	movs	r0, #1
 800292c:	e508      	b.n	8002340 <mouseDriver_sendMsg+0x1b9c>
 800292e:	bf00      	nop

08002930 <mouseDriver_setMode>:
void mouseDriver_setMode(uint8_t mode){
 8002930:	b538      	push	{r3, r4, r5, lr}
	if (mode == MOUSE_MODE_STOP){
 8002932:	4604      	mov	r4, r0
 8002934:	b1c0      	cbz	r0, 8002968 <mouseDriver_setMode+0x38>
	if (mode == MOUSE_MODE_AUTO_LOAD){
 8002936:	2802      	cmp	r0, #2
 8002938:	d022      	beq.n	8002980 <mouseDriver_setMode+0x50>
	if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <mouseDriver_setMode+0x64>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d119      	bne.n	8002976 <mouseDriver_setMode+0x46>
 8002942:	2803      	cmp	r0, #3
 8002944:	d119      	bne.n	800297a <mouseDriver_setMode+0x4a>
		actual_point = 0;
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <mouseDriver_setMode+0x68>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
	return (HAL_GetTick());
 800294c:	f001 ff9e 	bl	800488c <HAL_GetTick>
		actual_point_start_time = mouseDriver_getTime();
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <mouseDriver_setMode+0x6c>)
 8002952:	6018      	str	r0, [r3, #0]
		actual_speed_setpoint.setpoint_x = points[0].setpoint_x;
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <mouseDriver_setMode+0x70>)
 8002956:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <mouseDriver_setMode+0x74>)
 8002958:	6851      	ldr	r1, [r2, #4]
 800295a:	6019      	str	r1, [r3, #0]
		actual_speed_setpoint.setpoint_y = points[0].setpoint_y;
 800295c:	6892      	ldr	r2, [r2, #8]
 800295e:	605a      	str	r2, [r3, #4]
		actual_mode = mode;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <mouseDriver_setMode+0x64>)
 8002962:	2203      	movs	r2, #3
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e00a      	b.n	800297e <mouseDriver_setMode+0x4e>
		main_stop_motors();
 8002968:	f000 fac2 	bl	8002ef0 <main_stop_motors>
		actual_point = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <mouseDriver_setMode+0x68>)
 8002970:	7013      	strb	r3, [r2, #0]
		actual_mode = MOUSE_MODE_STOP;
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <mouseDriver_setMode+0x64>)
 8002974:	7013      	strb	r3, [r2, #0]
	if (actual_mode != MOUSE_MODE_AUTO_RUN)
 8002976:	2b03      	cmp	r3, #3
 8002978:	d001      	beq.n	800297e <mouseDriver_setMode+0x4e>
		actual_mode = mode;
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <mouseDriver_setMode+0x64>)
 800297c:	701c      	strb	r4, [r3, #0]
}
 800297e:	bd38      	pop	{r3, r4, r5, pc}
		actual_mode = mode;
 8002980:	4d04      	ldr	r5, [pc, #16]	; (8002994 <mouseDriver_setMode+0x64>)
 8002982:	2302      	movs	r3, #2
 8002984:	702b      	strb	r3, [r5, #0]
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 8002986:	2000      	movs	r0, #0
 8002988:	f7fd ff0c 	bl	80007a4 <mouseDriver_sendMsg>
	if (actual_mode == MOUSE_MODE_AUTO_LOAD && mode == MOUSE_MODE_AUTO_RUN ){
 800298c:	782b      	ldrb	r3, [r5, #0]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d0f3      	beq.n	800297a <mouseDriver_setMode+0x4a>
 8002992:	e7f0      	b.n	8002976 <mouseDriver_setMode+0x46>
 8002994:	20000485 	.word	0x20000485
 8002998:	20000494 	.word	0x20000494
 800299c:	20000498 	.word	0x20000498
 80029a0:	200004c0 	.word	0x200004c0
 80029a4:	2000071c 	.word	0x2000071c

080029a8 <mouseDriver_init>:
void mouseDriver_init(void){
 80029a8:	b508      	push	{r3, lr}
	actual_mode = MOUSE_MODE_STOP;
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <mouseDriver_init+0x1c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
	mouseDriver_getSpeedFromSensors();
 80029b0:	f7fd feba 	bl	8000728 <mouseDriver_getSpeedFromSensors>
	mouseDriver_initSetpoint();
 80029b4:	f7fd feaa 	bl	800070c <mouseDriver_initSetpoint>
	mouseDriver_initPoints();
 80029b8:	f7fd fec0 	bl	800073c <mouseDriver_initPoints>
	sensorDriver_init();
 80029bc:	f000 f9ee 	bl	8002d9c <sensorDriver_init>
}
 80029c0:	bd08      	pop	{r3, pc}
 80029c2:	bf00      	nop
 80029c4:	20000485 	.word	0x20000485

080029c8 <mouseDriver_getTime>:
uint32_t mouseDriver_getTime (void){
 80029c8:	b508      	push	{r3, lr}
	return (HAL_GetTick());
 80029ca:	f001 ff5f 	bl	800488c <HAL_GetTick>
}
 80029ce:	bd08      	pop	{r3, pc}

080029d0 <mouseDriver_readMsg>:
/* Message related functions */
void mouseDriver_readMsg(const mavlink_message_t msg){
 80029d0:	b084      	sub	sp, #16
 80029d2:	b538      	push	{r3, r4, r5, lr}
 80029d4:	ac04      	add	r4, sp, #16
 80029d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch(msg.msgid){
 80029da:	9b06      	ldr	r3, [sp, #24]
 80029dc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80029e0:	3b02      	subs	r3, #2
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d808      	bhi.n	80029f8 <mouseDriver_readMsg+0x28>
 80029e6:	e8df f003 	tbb	[pc, r3]
 80029ea:	030b      	.short	0x030b
 80029ec:	071c      	.short	0x071c
 80029ee:	2d          	.byte	0x2d
 80029ef:	00          	.byte	0x00

	case MAVLINK_MSG_ID_MODE_SELECTION:
		mouseDriver_setMode( mavlink_msg_mode_selection_get_mode(&msg));
 80029f0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80029f4:	f7ff ff9c 	bl	8002930 <mouseDriver_setMode>
		}
		break;
	default:
		break;
	};
}
 80029f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029fc:	b004      	add	sp, #16
 80029fe:	4770      	bx	lr
		if (actual_mode == MOUSE_MODE_SPEED)
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <mouseDriver_readMsg+0xd0>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d1f7      	bne.n	80029f8 <mouseDriver_readMsg+0x28>
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    speed_setpoint->setpoint_x = mavlink_msg_speed_setpoint_get_setpoint_x(msg);
    speed_setpoint->setpoint_y = mavlink_msg_speed_setpoint_get_setpoint_y(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 8002a08:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8002a0c:	4825      	ldr	r0, [pc, #148]	; (8002aa4 <mouseDriver_readMsg+0xd4>)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	6003      	str	r3, [r0, #0]
 8002a12:	6043      	str	r3, [r0, #4]
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 8002a14:	2a08      	cmp	r2, #8
 8002a16:	bf28      	it	cs
 8002a18:	2208      	movcs	r2, #8
 8002a1a:	a907      	add	r1, sp, #28
 8002a1c:	f010 fac7 	bl	8012fae <memcpy>
 8002a20:	e7ea      	b.n	80029f8 <mouseDriver_readMsg+0x28>
		if (actual_mode == MOUSE_MODE_SPEED)
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <mouseDriver_readMsg+0xd0>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d1e6      	bne.n	80029f8 <mouseDriver_readMsg+0x28>
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 8002a2a:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8002a2e:	481d      	ldr	r0, [pc, #116]	; (8002aa4 <mouseDriver_readMsg+0xd4>)
 8002a30:	2300      	movs	r3, #0
 8002a32:	6003      	str	r3, [r0, #0]
 8002a34:	6043      	str	r3, [r0, #4]
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 8002a36:	2a08      	cmp	r2, #8
 8002a38:	bf28      	it	cs
 8002a3a:	2208      	movcs	r2, #8
 8002a3c:	a907      	add	r1, sp, #28
 8002a3e:	f010 fab6 	bl	8012fae <memcpy>
 8002a42:	e7d9      	b.n	80029f8 <mouseDriver_readMsg+0x28>
		if(actual_mode == MOUSE_MODE_AUTO_LOAD){
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <mouseDriver_readMsg+0xd0>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d1d5      	bne.n	80029f8 <mouseDriver_readMsg+0x28>
			mavlink_msg_point_decode(&msg, &points[actual_point]);
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <mouseDriver_readMsg+0xd8>)
 8002a4e:	781c      	ldrb	r4, [r3, #0]
 8002a50:	4d16      	ldr	r5, [pc, #88]	; (8002aac <mouseDriver_readMsg+0xdc>)
 8002a52:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002a56:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002a5a:	1868      	adds	r0, r5, r1
    point->duration = mavlink_msg_point_get_duration(msg);
    point->setpoint_x = mavlink_msg_point_get_setpoint_x(msg);
    point->setpoint_y = mavlink_msg_point_get_setpoint_y(msg);
    point->point_id = mavlink_msg_point_get_point_id(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POINT_LEN? msg->len : MAVLINK_MSG_ID_POINT_LEN;
 8002a5c:	f89d 2013 	ldrb.w	r2, [sp, #19]
        memset(point, 0, MAVLINK_MSG_ID_POINT_LEN);
 8002a60:	2300      	movs	r3, #0
 8002a62:	506b      	str	r3, [r5, r1]
 8002a64:	6043      	str	r3, [r0, #4]
 8002a66:	6083      	str	r3, [r0, #8]
 8002a68:	7303      	strb	r3, [r0, #12]
    memcpy(point, _MAV_PAYLOAD(msg), len);
 8002a6a:	2a0d      	cmp	r2, #13
 8002a6c:	bf28      	it	cs
 8002a6e:	220d      	movcs	r2, #13
 8002a70:	a907      	add	r1, sp, #28
 8002a72:	f010 fa9c 	bl	8012fae <memcpy>
			if (actual_point == 255){
 8002a76:	2cff      	cmp	r4, #255	; 0xff
 8002a78:	d007      	beq.n	8002a8a <mouseDriver_readMsg+0xba>
			mouseDriver_sendMsg(MAVLINK_MSG_ID_POINT_LOADED);
 8002a7a:	2005      	movs	r0, #5
 8002a7c:	f7fd fe92 	bl	80007a4 <mouseDriver_sendMsg>
			actual_point ++;
 8002a80:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <mouseDriver_readMsg+0xd8>)
 8002a82:	7813      	ldrb	r3, [r2, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	7013      	strb	r3, [r2, #0]
}
 8002a88:	e7b6      	b.n	80029f8 <mouseDriver_readMsg+0x28>
				actual_error.error = MOUSE_ROUTINE_TOO_LONG;
 8002a8a:	4c09      	ldr	r4, [pc, #36]	; (8002ab0 <mouseDriver_readMsg+0xe0>)
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	7123      	strb	r3, [r4, #4]
	return (HAL_GetTick());
 8002a90:	f001 fefc 	bl	800488c <HAL_GetTick>
				actual_error.time = mouseDriver_getTime();
 8002a94:	6020      	str	r0, [r4, #0]
				mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 8002a96:	2007      	movs	r0, #7
 8002a98:	f7fd fe84 	bl	80007a4 <mouseDriver_sendMsg>
 8002a9c:	e7ed      	b.n	8002a7a <mouseDriver_readMsg+0xaa>
 8002a9e:	bf00      	nop
 8002aa0:	20000485 	.word	0x20000485
 8002aa4:	200004c0 	.word	0x200004c0
 8002aa8:	20000494 	.word	0x20000494
 8002aac:	2000071c 	.word	0x2000071c
 8002ab0:	20000480 	.word	0x20000480

08002ab4 <mouseDriver_idle>:

/* Idle functions */
void mouseDriver_idle (void){
 8002ab4:	b510      	push	{r4, lr}
	return (HAL_GetTick());
 8002ab6:	f001 fee9 	bl	800488c <HAL_GetTick>
	uint64_t difference = 0;
	/* DEMO CODE INIT*/
		actual_motor_signal.time = mouseDriver_getTime();
 8002aba:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <mouseDriver_idle+0x144>)
 8002abc:	6018      	str	r0, [r3, #0]
	/* DEMO CODE END*/
	sensorDrive_motion_read(SENSOR_X,&actual_raw_sensor[SENSOR_X]);
 8002abe:	4c4f      	ldr	r4, [pc, #316]	; (8002bfc <mouseDriver_idle+0x148>)
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f000 f978 	bl	8002db8 <sensorDrive_motion_read>
	sensorDrive_motion_read(SENSOR_Y,&actual_raw_sensor[SENSOR_Y]);
 8002ac8:	f104 010c 	add.w	r1, r4, #12
 8002acc:	2001      	movs	r0, #1
 8002ace:	f000 f973 	bl	8002db8 <sensorDrive_motion_read>
	switch(actual_mode){
 8002ad2:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <mouseDriver_idle+0x14c>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d81a      	bhi.n	8002b10 <mouseDriver_idle+0x5c>
 8002ada:	e8df f003 	tbb	[pc, r3]
 8002ade:	1a02      	.short	0x1a02
 8002ae0:	4234      	.short	0x4234
	case MOUSE_MODE_STOP:
		mouseDriver_initSetpoint();
 8002ae2:	f7fd fe13 	bl	800070c <mouseDriver_initSetpoint>
		actual_motor_signal.motor_x = 0;
 8002ae6:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <mouseDriver_idle+0x144>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	605a      	str	r2, [r3, #4]
		actual_motor_signal.motor_y = 0;
 8002aec:	609a      	str	r2, [r3, #8]
		main_stop_motors();
 8002aee:	f000 f9ff 	bl	8002ef0 <main_stop_motors>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 8002af2:	2002      	movs	r0, #2
 8002af4:	f7fd fe56 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 8002af8:	2004      	movs	r0, #4
 8002afa:	f7fd fe53 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 8002afe:	2001      	movs	r0, #1
 8002b00:	f7fd fe50 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fd fe4d 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_RAW_SENSOR);
 8002b0a:	2008      	movs	r0, #8
 8002b0c:	f7fd fe4a 	bl	80007a4 <mouseDriver_sendMsg>
	default:
		break;
	}


}
 8002b10:	bd10      	pop	{r4, pc}
			actual_motor_signal.motor_x = actual_speed_setpoint.setpoint_x;
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <mouseDriver_idle+0x144>)
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <mouseDriver_idle+0x150>)
 8002b16:	6811      	ldr	r1, [r2, #0]
 8002b18:	6059      	str	r1, [r3, #4]
			actual_motor_signal.motor_y = actual_speed_setpoint.setpoint_y;
 8002b1a:	6852      	ldr	r2, [r2, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
		main_set_motors_speed(actual_motor_signal);
 8002b1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b22:	f000 f9f3 	bl	8002f0c <main_set_motors_speed>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 8002b26:	2002      	movs	r0, #2
 8002b28:	f7fd fe3c 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 8002b2c:	2004      	movs	r0, #4
 8002b2e:	f7fd fe39 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f7fd fe36 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fd fe33 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_RAW_SENSOR);
 8002b3e:	2008      	movs	r0, #8
 8002b40:	f7fd fe30 	bl	80007a4 <mouseDriver_sendMsg>
		break;
 8002b44:	e7e4      	b.n	8002b10 <mouseDriver_idle+0x5c>
		if (actual_point == 255){
 8002b46:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <mouseDriver_idle+0x154>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2bff      	cmp	r3, #255	; 0xff
 8002b4c:	d1e0      	bne.n	8002b10 <mouseDriver_idle+0x5c>
			actual_error.error = MOUSE_ROUTINE_TOO_LONG;
 8002b4e:	4c2f      	ldr	r4, [pc, #188]	; (8002c0c <mouseDriver_idle+0x158>)
 8002b50:	2303      	movs	r3, #3
 8002b52:	7123      	strb	r3, [r4, #4]
	return (HAL_GetTick());
 8002b54:	f001 fe9a 	bl	800488c <HAL_GetTick>
			actual_error.time = mouseDriver_getTime();
 8002b58:	6020      	str	r0, [r4, #0]
			mouseDriver_sendMsg(MAVLINK_MSG_ID_ERROR);
 8002b5a:	2007      	movs	r0, #7
 8002b5c:	f7fd fe22 	bl	80007a4 <mouseDriver_sendMsg>
 8002b60:	e7d6      	b.n	8002b10 <mouseDriver_idle+0x5c>
	return (HAL_GetTick());
 8002b62:	f001 fe93 	bl	800488c <HAL_GetTick>
		if (difference >= points[actual_point].duration){
 8002b66:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <mouseDriver_idle+0x154>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
		difference = mouseDriver_getTime()-actual_point_start_time;
 8002b6a:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <mouseDriver_idle+0x15c>)
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	1a80      	subs	r0, r0, r2
		if (difference >= points[actual_point].duration){
 8002b70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002b74:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002b78:	4926      	ldr	r1, [pc, #152]	; (8002c14 <mouseDriver_idle+0x160>)
 8002b7a:	588a      	ldr	r2, [r1, r2]
 8002b7c:	4290      	cmp	r0, r2
 8002b7e:	d31c      	bcc.n	8002bba <mouseDriver_idle+0x106>
			if (actual_point < 255){
 8002b80:	2bff      	cmp	r3, #255	; 0xff
 8002b82:	d034      	beq.n	8002bee <mouseDriver_idle+0x13a>
				actual_point++;
 8002b84:	3301      	adds	r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <mouseDriver_idle+0x154>)
 8002b8a:	7013      	strb	r3, [r2, #0]
				if(points[actual_point].duration == 0){
 8002b8c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002b90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002b94:	58cb      	ldr	r3, [r1, r3]
 8002b96:	b323      	cbz	r3, 8002be2 <mouseDriver_idle+0x12e>
				actual_speed_setpoint.setpoint_x = points[actual_point].setpoint_x;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <mouseDriver_idle+0x154>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4919      	ldr	r1, [pc, #100]	; (8002c04 <mouseDriver_idle+0x150>)
 8002b9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002ba2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002ba6:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <mouseDriver_idle+0x160>)
 8002ba8:	4413      	add	r3, r2
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	600a      	str	r2, [r1, #0]
				actual_speed_setpoint.setpoint_y = points[actual_point].setpoint_y;
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	604b      	str	r3, [r1, #4]
	return (HAL_GetTick());
 8002bb2:	f001 fe6b 	bl	800488c <HAL_GetTick>
				actual_point_start_time = mouseDriver_getTime();
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <mouseDriver_idle+0x15c>)
 8002bb8:	6018      	str	r0, [r3, #0]
		if (actual_point == 255){
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <mouseDriver_idle+0x154>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2bff      	cmp	r3, #255	; 0xff
 8002bc0:	d015      	beq.n	8002bee <mouseDriver_idle+0x13a>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 8002bc2:	2002      	movs	r0, #2
 8002bc4:	f7fd fdee 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 8002bc8:	2004      	movs	r0, #4
 8002bca:	f7fd fdeb 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7fd fde8 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fd fde5 	bl	80007a4 <mouseDriver_sendMsg>
		mouseDriver_sendMsg(MAVLINK_MSG_ID_RAW_SENSOR);
 8002bda:	2008      	movs	r0, #8
 8002bdc:	f7fd fde2 	bl	80007a4 <mouseDriver_sendMsg>
}
 8002be0:	e796      	b.n	8002b10 <mouseDriver_idle+0x5c>
					main_stop_motors();
 8002be2:	f000 f985 	bl	8002ef0 <main_stop_motors>
					mouseDriver_setMode(MOUSE_MODE_AUTO_LOAD);
 8002be6:	2002      	movs	r0, #2
 8002be8:	f7ff fea2 	bl	8002930 <mouseDriver_setMode>
 8002bec:	e7d4      	b.n	8002b98 <mouseDriver_idle+0xe4>
			mouseDriver_setMode(MOUSE_MODE_AUTO_LOAD);
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f7ff fe9e 	bl	8002930 <mouseDriver_setMode>
 8002bf4:	e7e5      	b.n	8002bc2 <mouseDriver_idle+0x10e>
 8002bf6:	bf00      	nop
 8002bf8:	20000488 	.word	0x20000488
 8002bfc:	2000049c 	.word	0x2000049c
 8002c00:	20000485 	.word	0x20000485
 8002c04:	200004c0 	.word	0x200004c0
 8002c08:	20000494 	.word	0x20000494
 8002c0c:	20000480 	.word	0x20000480
 8002c10:	20000498 	.word	0x20000498
 8002c14:	2000071c 	.word	0x2000071c

08002c18 <mouseDriver_controlISR>:

/* ISR Functions */
void mouseDriver_controlISR(void){

}
 8002c18:	4770      	bx	lr
	...

08002c1c <sensorDriver_powerup>:
/* Define sensors */
static sensor_t sensor_x = {CS_0_GPIO_Port,CS_0_Pin,PW_0_GPIO_Port,PW_0_Pin,0};
static sensor_t sensor_y = {CS_1_GPIO_Port,CS_1_Pin,PW_1_GPIO_Port,PW_1_Pin,0};

/* PRIVATE functions */
void sensorDriver_powerup(sensor_t sensor){
 8002c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c20:	b087      	sub	sp, #28
 8002c22:	ac02      	add	r4, sp, #8
 8002c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c28:	4606      	mov	r6, r0
 8002c2a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002c2e:	f89d 8014 	ldrb.w	r8, [sp, #20]
	/* Disable the sensor */
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 8002c32:	f89d 700c 	ldrb.w	r7, [sp, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	4639      	mov	r1, r7
 8002c3a:	f003 fbef 	bl	800641c <HAL_GPIO_WritePin>

	/* Make sure all sensor is switched off */
	HAL_GPIO_WritePin(sensor.pw_port, sensor.pw_pin, GPIO_PIN_RESET);
 8002c3e:	fa1f f888 	uxth.w	r8, r8
 8002c42:	2200      	movs	r2, #0
 8002c44:	4641      	mov	r1, r8
 8002c46:	4648      	mov	r0, r9
 8002c48:	f003 fbe8 	bl	800641c <HAL_GPIO_WritePin>
	main_write_sensor(sensor, 0x00, 0x00);
 8002c4c:	2500      	movs	r5, #0
 8002c4e:	9501      	str	r5, [sp, #4]
 8002c50:	9500      	str	r5, [sp, #0]
 8002c52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c56:	f000 f9c7 	bl	8002fe8 <main_write_sensor>
	HAL_Delay(100);
 8002c5a:	2064      	movs	r0, #100	; 0x64
 8002c5c:	f001 fe40 	bl	80048e0 <HAL_Delay>

	/* Gives voltage to sensors */
	HAL_GPIO_WritePin(sensor.pw_port, sensor.pw_pin , GPIO_PIN_SET);
 8002c60:	2201      	movs	r2, #1
 8002c62:	4641      	mov	r1, r8
 8002c64:	4648      	mov	r0, r9
 8002c66:	f003 fbd9 	bl	800641c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8002c6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c6e:	f001 fe37 	bl	80048e0 <HAL_Delay>

	/* Reset SPI port */
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin,  GPIO_PIN_SET);
 8002c72:	2201      	movs	r2, #1
 8002c74:	4639      	mov	r1, r7
 8002c76:	4630      	mov	r0, r6
 8002c78:	f003 fbd0 	bl	800641c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002c7c:	2005      	movs	r0, #5
 8002c7e:	f001 fe2f 	bl	80048e0 <HAL_Delay>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin,  GPIO_PIN_RESET);
 8002c82:	462a      	mov	r2, r5
 8002c84:	4639      	mov	r1, r7
 8002c86:	4630      	mov	r0, r6
 8002c88:	f003 fbc8 	bl	800641c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002c8c:	2005      	movs	r0, #5
 8002c8e:	f001 fe27 	bl	80048e0 <HAL_Delay>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin,  GPIO_PIN_SET);
 8002c92:	2201      	movs	r2, #1
 8002c94:	4639      	mov	r1, r7
 8002c96:	4630      	mov	r0, r6
 8002c98:	f003 fbc0 	bl	800641c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002c9c:	2005      	movs	r0, #5
 8002c9e:	f001 fe1f 	bl	80048e0 <HAL_Delay>

	/* Write to Power_up_Reset register */
	main_write_sensor(sensor, Power_Up_Reset, 0x5A);
 8002ca2:	235a      	movs	r3, #90	; 0x5a
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	233a      	movs	r3, #58	; 0x3a
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cae:	f000 f99b 	bl	8002fe8 <main_write_sensor>

	/* Wait at least 50 ms */
	HAL_Delay(50);
 8002cb2:	2032      	movs	r0, #50	; 0x32
 8002cb4:	f001 fe14 	bl	80048e0 <HAL_Delay>

	/* Read from data registers */
	main_read_sensor(sensor, 0x02);
 8002cb8:	2302      	movs	r3, #2
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cc0:	f000 f95c 	bl	8002f7c <main_read_sensor>
	main_read_sensor(sensor, 0x03);
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ccc:	f000 f956 	bl	8002f7c <main_read_sensor>
	main_read_sensor(sensor, 0x04);
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cd8:	f000 f950 	bl	8002f7c <main_read_sensor>
	main_read_sensor(sensor, 0x05);
 8002cdc:	2305      	movs	r3, #5
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ce4:	f000 f94a 	bl	8002f7c <main_read_sensor>
	main_read_sensor(sensor, 0x06);
 8002ce8:	2306      	movs	r3, #6
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cf0:	f000 f944 	bl	8002f7c <main_read_sensor>

	/* Start ROM Download */
	main_write_sensor(sensor, Config2, 0x20);
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d00:	f000 f972 	bl	8002fe8 <main_write_sensor>
	main_write_sensor(sensor, SROM_Enable, 0x1d);
 8002d04:	231d      	movs	r3, #29
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	f04f 0813 	mov.w	r8, #19
 8002d0c:	f8cd 8000 	str.w	r8, [sp]
 8002d10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d14:	f000 f968 	bl	8002fe8 <main_write_sensor>
	HAL_Delay(10);
 8002d18:	200a      	movs	r0, #10
 8002d1a:	f001 fde1 	bl	80048e0 <HAL_Delay>
	main_write_sensor(sensor,SROM_Enable, 0x18);
 8002d1e:	2318      	movs	r3, #24
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	f8cd 8000 	str.w	r8, [sp]
 8002d26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d2a:	f000 f95d 	bl	8002fe8 <main_write_sensor>
	main_wait_160us();
 8002d2e:	f000 f8a7 	bl	8002e80 <main_wait_160us>
	main_wait_20us();
 8002d32:	f000 f8b2 	bl	8002e9a <main_wait_20us>

	/* Burst start with adress */
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 8002d36:	462a      	mov	r2, r5
 8002d38:	4639      	mov	r1, r7
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f003 fb6e 	bl	800641c <HAL_GPIO_WritePin>
	main_write_sensor_burst(SROM_Load_Burst|0x80);
 8002d40:	20e2      	movs	r0, #226	; 0xe2
 8002d42:	f000 f97d 	bl	8003040 <main_write_sensor_burst>
 8002d46:	4d14      	ldr	r5, [pc, #80]	; (8002d98 <sensorDriver_powerup+0x17c>)
 8002d48:	1e6c      	subs	r4, r5, #1
 8002d4a:	f605 75fd 	addw	r5, r5, #4093	; 0xffd
	for (int i = 0; i < firmware_length; i++ ){
		main_write_sensor_burst(firmware_data[i]);
 8002d4e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002d52:	f000 f975 	bl	8003040 <main_write_sensor_burst>
	for (int i = 0; i < firmware_length; i++ ){
 8002d56:	42ac      	cmp	r4, r5
 8002d58:	d1f9      	bne.n	8002d4e <sensorDriver_powerup+0x132>
	}
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	4630      	mov	r0, r6
 8002d60:	f003 fb5c 	bl	800641c <HAL_GPIO_WritePin>
	main_wait_160us();
 8002d64:	f000 f88c 	bl	8002e80 <main_wait_160us>
	main_wait_20us();
 8002d68:	f000 f897 	bl	8002e9a <main_wait_20us>
	main_wait_20us();
 8002d6c:	f000 f895 	bl	8002e9a <main_wait_20us>

	/* Read SROM_ID for verification */
	sensor.status = main_read_sensor(sensor, SROM_ID);
 8002d70:	232a      	movs	r3, #42	; 0x2a
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	ac02      	add	r4, sp, #8
 8002d76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d7a:	f000 f8ff 	bl	8002f7c <main_read_sensor>
 8002d7e:	f88d 0015 	strb.w	r0, [sp, #21]

	/* Write to Config2 for wired mouse */
	main_write_sensor(sensor, Config2, 0x00);
 8002d82:	2300      	movs	r3, #0
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	2310      	movs	r3, #16
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d8e:	f000 f92b 	bl	8002fe8 <main_write_sensor>
}
 8002d92:	b007      	add	sp, #28
 8002d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d98:	08013314 	.word	0x08013314

08002d9c <sensorDriver_init>:

/* Public functions */
void sensorDriver_init(void){
 8002d9c:	b508      	push	{r3, lr}
	sensorDriver_powerup(sensor_x);
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <sensorDriver_init+0x14>)
 8002da0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da2:	f7ff ff3b 	bl	8002c1c <sensorDriver_powerup>
	sensorDriver_powerup(sensor_y);
 8002da6:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <sensorDriver_init+0x18>)
 8002da8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002daa:	f7ff ff37 	bl	8002c1c <sensorDriver_powerup>
}
 8002dae:	bd08      	pop	{r3, pc}
 8002db0:	08014314 	.word	0x08014314
 8002db4:	08014324 	.word	0x08014324

08002db8 <sensorDrive_motion_read>:

void sensorDrive_motion_read(uint8_t sensor_id, mavlink_raw_sensor_t * sensor_data){
 8002db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dbc:	b08a      	sub	sp, #40	; 0x28
 8002dbe:	460c      	mov	r4, r1
	uint8_t data[12];
	int16_t temp = 0;
	sensor_t sensor;

	if (sensor_id == SENSOR_X) sensor = sensor_x;
 8002dc0:	4605      	mov	r5, r0
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d14d      	bne.n	8002e62 <sensorDrive_motion_read+0xaa>
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <sensorDrive_motion_read+0xbc>)
 8002dc8:	ae03      	add	r6, sp, #12
 8002dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dcc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002dd0:	2601      	movs	r6, #1
	else if (sensor_id == SENSOR_Y) sensor = sensor_y;
	else return;
	sensor_data->sensor_id = sensor_id;
 8002dd2:	7225      	strb	r5, [r4, #8]

	/* write to motion burst adress */
	main_write_sensor(sensor, Motion_Burst, 0xbb);
 8002dd4:	4f28      	ldr	r7, [pc, #160]	; (8002e78 <sensorDrive_motion_read+0xc0>)
 8002dd6:	9703      	str	r7, [sp, #12]
 8002dd8:	f88d 6010 	strb.w	r6, [sp, #16]
 8002ddc:	23bb      	movs	r3, #187	; 0xbb
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	f04f 0850 	mov.w	r8, #80	; 0x50
 8002de4:	f8cd 8000 	str.w	r8, [sp]
 8002de8:	ad03      	add	r5, sp, #12
 8002dea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002dee:	f000 f8fb 	bl	8002fe8 <main_write_sensor>

	/* Prepare for burst */
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 8002df2:	b2b6      	uxth	r6, r6
 8002df4:	2200      	movs	r2, #0
 8002df6:	4631      	mov	r1, r6
 8002df8:	4638      	mov	r0, r7
 8002dfa:	f003 fb0f 	bl	800641c <HAL_GPIO_WritePin>
	sensor_data->time = mouseDriver_getTime();
 8002dfe:	f7ff fde3 	bl	80029c8 <mouseDriver_getTime>
 8002e02:	6020      	str	r0, [r4, #0]
	main_write_sensor_burst(Motion_Burst);
 8002e04:	4640      	mov	r0, r8
 8002e06:	f000 f91b 	bl	8003040 <main_write_sensor_burst>
	/* Start burst */
	main_read_sensor_motion_burst(data);
 8002e0a:	a807      	add	r0, sp, #28
 8002e0c:	f000 f92a 	bl	8003064 <main_read_sensor_motion_burst>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 8002e10:	2201      	movs	r2, #1
 8002e12:	4631      	mov	r1, r6
 8002e14:	4638      	mov	r0, r7
 8002e16:	f003 fb01 	bl	800641c <HAL_GPIO_WritePin>
	/* END of burst */
	main_wait_20us();
 8002e1a:	f000 f83e 	bl	8002e9a <main_wait_20us>

	/* Read other register for stopping burst mode */
	sensor_data->product_id = main_read_sensor(sensor,  Product_ID);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e26:	f000 f8a9 	bl	8002f7c <main_read_sensor>
 8002e2a:	72e0      	strb	r0, [r4, #11]

	/* TWO's Complement */
	temp = (data[DELTA_X_H]<<8) | (data[DELTA_X_L]);
 8002e2c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8002e30:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	temp = ~temp + 1;
	sensor_data->delta_x = temp;
 8002e38:	425b      	negs	r3, r3
 8002e3a:	80a3      	strh	r3, [r4, #4]
	temp = (data[DELTA_Y_H]<<8) | (data[DELTA_Y_L]);
 8002e3c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8002e40:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	temp = ~temp +1;
	sensor_data->delta_y = temp;
 8002e48:	425b      	negs	r3, r3
 8002e4a:	80e3      	strh	r3, [r4, #6]

	sensor_data->squal = data[SQUAL_READ];
 8002e4c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8002e50:	7263      	strb	r3, [r4, #9]
	sensor_data->lift = (data[MOTION] & 0x08) >> 3;
 8002e52:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002e56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e5a:	72a3      	strb	r3, [r4, #10]
}
 8002e5c:	b00a      	add	sp, #40	; 0x28
 8002e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if (sensor_id == SENSOR_Y) sensor = sensor_y;
 8002e62:	2801      	cmp	r0, #1
 8002e64:	d1fa      	bne.n	8002e5c <sensorDrive_motion_read+0xa4>
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <sensorDrive_motion_read+0xc4>)
 8002e68:	ae03      	add	r6, sp, #12
 8002e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e6c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8002e70:	2602      	movs	r6, #2
 8002e72:	e7ae      	b.n	8002dd2 <sensorDrive_motion_read+0x1a>
 8002e74:	08014314 	.word	0x08014314
 8002e78:	48000800 	.word	0x48000800
 8002e7c:	08014324 	.word	0x08014324

08002e80 <main_wait_160us>:
static void MX_TIM7_Init(void);
static void MX_TIM1_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
void main_wait_160us(void){
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	f44f 7461 	mov.w	r4, #900	; 0x384
	int i = 0;
	i = 0;
	while(i<900){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002e86:	2620      	movs	r6, #32
 8002e88:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8002e8c:	4631      	mov	r1, r6
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f003 fac9 	bl	8006426 <HAL_GPIO_TogglePin>
	while(i<900){
 8002e94:	3c01      	subs	r4, #1
 8002e96:	d1f9      	bne.n	8002e8c <main_wait_160us+0xc>
		i++;
	}
}
 8002e98:	bd70      	pop	{r4, r5, r6, pc}

08002e9a <main_wait_20us>:
void main_wait_20us(void){
 8002e9a:	b570      	push	{r4, r5, r6, lr}
 8002e9c:	24b9      	movs	r4, #185	; 0xb9
	int i = 0;
	i = 0;
	while(i<185){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002e9e:	2620      	movs	r6, #32
 8002ea0:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8002ea4:	4631      	mov	r1, r6
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f003 fabd 	bl	8006426 <HAL_GPIO_TogglePin>
	while(i<185){
 8002eac:	3c01      	subs	r4, #1
 8002eae:	d1f9      	bne.n	8002ea4 <main_wait_20us+0xa>
		i++;
	}
}
 8002eb0:	bd70      	pop	{r4, r5, r6, pc}

08002eb2 <main_wait_1us>:
void main_wait_1us(void){
 8002eb2:	b570      	push	{r4, r5, r6, lr}
 8002eb4:	2419      	movs	r4, #25
	int i = 0;
	i = 0;
	while(i<25){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002eb6:	2620      	movs	r6, #32
 8002eb8:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8002ebc:	4631      	mov	r1, r6
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f003 fab1 	bl	8006426 <HAL_GPIO_TogglePin>
	while(i<25){
 8002ec4:	3c01      	subs	r4, #1
 8002ec6:	d1f9      	bne.n	8002ebc <main_wait_1us+0xa>
		i++;
	}
}
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ecc <main_get_huart_tx_state>:
int main_get_huart_tx_state(void){
 8002ecc:	b508      	push	{r3, lr}
	return (HAL_DMA_GetState(&hdma_usart2_tx));
 8002ece:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <main_get_huart_tx_state+0xc>)
 8002ed0:	f002 fa12 	bl	80052f8 <HAL_DMA_GetState>
}
 8002ed4:	bd08      	pop	{r3, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20001968 	.word	0x20001968

08002edc <main_transmit_buffer>:
void main_transmit_buffer(uint8_t *outBuffer, uint16_t msg_size){
 8002edc:	b508      	push	{r3, lr}
	HAL_UART_Transmit_DMA(&huart2, outBuffer,msg_size);
 8002ede:	460a      	mov	r2, r1
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	4802      	ldr	r0, [pc, #8]	; (8002eec <main_transmit_buffer+0x10>)
 8002ee4:	f00e fcf0 	bl	80118c8 <HAL_UART_Transmit_DMA>
}
 8002ee8:	bd08      	pop	{r3, pc}
 8002eea:	bf00      	nop
 8002eec:	200019f0 	.word	0x200019f0

08002ef0 <main_stop_motors>:
void main_stop_motors(void)
{
 8002ef0:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002ef2:	4c05      	ldr	r4, [pc, #20]	; (8002f08 <main_stop_motors+0x18>)
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f00c fe52 	bl	800fba0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002efc:	2104      	movs	r1, #4
 8002efe:	4620      	mov	r0, r4
 8002f00:	f00c fe4e 	bl	800fba0 <HAL_TIM_PWM_Stop>
}
 8002f04:	bd10      	pop	{r4, pc}
 8002f06:	bf00      	nop
 8002f08:	200019b0 	.word	0x200019b0

08002f0c <main_set_motors_speed>:
void main_set_motors_speed(mavlink_motor_setpoint_t motor )
{
 8002f0c:	b500      	push	{lr}
 8002f0e:	ed2d 8b02 	vpush	{d8}
 8002f12:	b085      	sub	sp, #20
 8002f14:	ab04      	add	r3, sp, #16
 8002f16:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8002f1a:	eddd 7a02 	vldr	s15, [sp, #8]
 8002f1e:	ed9d 8a03 	vldr	s16, [sp, #12]

	htim1.Instance->CCR1 = motor.motor_x;
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <main_set_motors_speed+0x6c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8002f2a:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = motor.motor_y;
 8002f2e:	eebc 7ac8 	vcvt.u32.f32	s14, s16
 8002f32:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38

	if (motor.motor_x == 0)
 8002f36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3e:	d111      	bne.n	8002f64 <main_set_motors_speed+0x58>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002f40:	2100      	movs	r1, #0
 8002f42:	480d      	ldr	r0, [pc, #52]	; (8002f78 <main_set_motors_speed+0x6c>)
 8002f44:	f00c fe2c 	bl	800fba0 <HAL_TIM_PWM_Stop>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	if (motor.motor_y == 0)
 8002f48:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f50:	d00d      	beq.n	8002f6e <main_set_motors_speed+0x62>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002f52:	2104      	movs	r1, #4
 8002f54:	4808      	ldr	r0, [pc, #32]	; (8002f78 <main_set_motors_speed+0x6c>)
 8002f56:	f00c fdf1 	bl	800fb3c <HAL_TIM_PWM_Start>

}
 8002f5a:	b005      	add	sp, #20
 8002f5c:	ecbd 8b02 	vpop	{d8}
 8002f60:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f64:	2100      	movs	r1, #0
 8002f66:	4804      	ldr	r0, [pc, #16]	; (8002f78 <main_set_motors_speed+0x6c>)
 8002f68:	f00c fde8 	bl	800fb3c <HAL_TIM_PWM_Start>
 8002f6c:	e7ec      	b.n	8002f48 <main_set_motors_speed+0x3c>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002f6e:	2104      	movs	r1, #4
 8002f70:	4801      	ldr	r0, [pc, #4]	; (8002f78 <main_set_motors_speed+0x6c>)
 8002f72:	f00c fe15 	bl	800fba0 <HAL_TIM_PWM_Stop>
 8002f76:	e7f0      	b.n	8002f5a <main_set_motors_speed+0x4e>
 8002f78:	200019b0 	.word	0x200019b0

08002f7c <main_read_sensor>:
uint8_t main_read_sensor (const sensor_t sensor, uint8_t adress ){
 8002f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	466c      	mov	r4, sp
 8002f82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f86:	4606      	mov	r6, r0
 8002f88:	f89d 4004 	ldrb.w	r4, [sp, #4]
	uint8_t value = 0;
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f88d 2017 	strb.w	r2, [sp, #23]
	uint8_t adress_read = adress & 0x7F;
 8002f92:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f9a:	ad06      	add	r5, sp, #24
 8002f9c:	f805 3d02 	strb.w	r3, [r5, #-2]!

	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 8002fa0:	b2a4      	uxth	r4, r4
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	f003 fa3a 	bl	800641c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &adress_read, 1, 100);
 8002fa8:	4f0e      	ldr	r7, [pc, #56]	; (8002fe4 <main_read_sensor+0x68>)
 8002faa:	2364      	movs	r3, #100	; 0x64
 8002fac:	2201      	movs	r2, #1
 8002fae:	4629      	mov	r1, r5
 8002fb0:	4638      	mov	r0, r7
 8002fb2:	f009 faa2 	bl	800c4fa <HAL_SPI_Transmit>
	main_wait_160us();
 8002fb6:	f7ff ff63 	bl	8002e80 <main_wait_160us>
	HAL_SPI_Receive(&hspi2, &value, 1, 100);
 8002fba:	2364      	movs	r3, #100	; 0x64
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f10d 0117 	add.w	r1, sp, #23
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	f009 fcf2 	bl	800c9ac <HAL_SPI_Receive>
	main_wait_1us();
 8002fc8:	f7ff ff73 	bl	8002eb2 <main_wait_1us>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4621      	mov	r1, r4
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	f003 fa23 	bl	800641c <HAL_GPIO_WritePin>
	main_wait_20us();
 8002fd6:	f7ff ff60 	bl	8002e9a <main_wait_20us>
	return (value);
}
 8002fda:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002fde:	b007      	add	sp, #28
 8002fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20001904 	.word	0x20001904

08002fe8 <main_write_sensor>:

void main_write_sensor (const sensor_t sensor, uint8_t adress, uint8_t data){
 8002fe8:	b530      	push	{r4, r5, lr}
 8002fea:	b087      	sub	sp, #28
 8002fec:	466c      	mov	r4, sp
 8002fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	f89d 4004 	ldrb.w	r4, [sp, #4]
	uint8_t value = data;
	uint8_t adress_write = adress | 0x80;
 8002ff8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8002ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
	uint8_t pack[2];
	pack[0] = adress_write;
 8003000:	f88d 3014 	strb.w	r3, [sp, #20]
	pack[1] = value;
 8003004:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8003008:	f88d 3015 	strb.w	r3, [sp, #21]

	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_RESET);
 800300c:	b2a4      	uxth	r4, r4
 800300e:	2200      	movs	r2, #0
 8003010:	4621      	mov	r1, r4
 8003012:	f003 fa03 	bl	800641c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, pack, 2, 10);
 8003016:	230a      	movs	r3, #10
 8003018:	2202      	movs	r2, #2
 800301a:	a905      	add	r1, sp, #20
 800301c:	4807      	ldr	r0, [pc, #28]	; (800303c <main_write_sensor+0x54>)
 800301e:	f009 fa6c 	bl	800c4fa <HAL_SPI_Transmit>
	main_wait_20us();
 8003022:	f7ff ff3a 	bl	8002e9a <main_wait_20us>
	HAL_GPIO_WritePin(sensor.cs_port, sensor.cs_pin, GPIO_PIN_SET);
 8003026:	2201      	movs	r2, #1
 8003028:	4621      	mov	r1, r4
 800302a:	4628      	mov	r0, r5
 800302c:	f003 f9f6 	bl	800641c <HAL_GPIO_WritePin>
	main_wait_160us();
 8003030:	f7ff ff26 	bl	8002e80 <main_wait_160us>
	main_wait_20us();
 8003034:	f7ff ff31 	bl	8002e9a <main_wait_20us>
}
 8003038:	b007      	add	sp, #28
 800303a:	bd30      	pop	{r4, r5, pc}
 800303c:	20001904 	.word	0x20001904

08003040 <main_write_sensor_burst>:
void main_write_sensor_burst(uint8_t data){
 8003040:	b500      	push	{lr}
 8003042:	b083      	sub	sp, #12
 8003044:	a902      	add	r1, sp, #8
 8003046:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi2, &data, 1, 10);
 800304a:	230a      	movs	r3, #10
 800304c:	2201      	movs	r2, #1
 800304e:	4804      	ldr	r0, [pc, #16]	; (8003060 <main_write_sensor_burst+0x20>)
 8003050:	f009 fa53 	bl	800c4fa <HAL_SPI_Transmit>
	main_wait_20us();
 8003054:	f7ff ff21 	bl	8002e9a <main_wait_20us>
}
 8003058:	b003      	add	sp, #12
 800305a:	f85d fb04 	ldr.w	pc, [sp], #4
 800305e:	bf00      	nop
 8003060:	20001904 	.word	0x20001904

08003064 <main_read_sensor_motion_burst>:
void main_read_sensor_motion_burst(uint8_t *data ){
 8003064:	b508      	push	{r3, lr}
	HAL_SPI_Receive(&hspi2,data,12,100);
 8003066:	2364      	movs	r3, #100	; 0x64
 8003068:	220c      	movs	r2, #12
 800306a:	4601      	mov	r1, r0
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <main_read_sensor_motion_burst+0x14>)
 800306e:	f009 fc9d 	bl	800c9ac <HAL_SPI_Receive>
	main_wait_1us();
 8003072:	f7ff ff1e 	bl	8002eb2 <main_wait_1us>
}
 8003076:	bd08      	pop	{r3, pc}
 8003078:	20001904 	.word	0x20001904

0800307c <main_transmit_spi>:
void main_transmit_spi(uint8_t data){
 800307c:	b500      	push	{lr}
 800307e:	b083      	sub	sp, #12
	uint8_t data_out = data;
 8003080:	a902      	add	r1, sp, #8
 8003082:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi2, &data_out, 1, 10);
 8003086:	230a      	movs	r3, #10
 8003088:	2201      	movs	r2, #1
 800308a:	4803      	ldr	r0, [pc, #12]	; (8003098 <main_transmit_spi+0x1c>)
 800308c:	f009 fa35 	bl	800c4fa <HAL_SPI_Transmit>
}
 8003090:	b003      	add	sp, #12
 8003092:	f85d fb04 	ldr.w	pc, [sp], #4
 8003096:	bf00      	nop
 8003098:	20001904 	.word	0x20001904

0800309c <TM7_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TM7_IRQHandler(void){
 800309c:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim7);
 800309e:	4802      	ldr	r0, [pc, #8]	; (80030a8 <TM7_IRQHandler+0xc>)
 80030a0:	f00b fbea 	bl	800e878 <HAL_TIM_IRQHandler>

}
 80030a4:	bd08      	pop	{r3, pc}
 80030a6:	bf00      	nop
 80030a8:	20001a70 	.word	0x20001a70

080030ac <HAL_UART_RxCpltCallback>:

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80030ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b0:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 80030b4:	4604      	mov	r4, r0
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80030b6:	2026      	movs	r0, #38	; 0x26
 80030b8:	f001 fd46 	bl	8004b48 <HAL_NVIC_DisableIRQ>
	mavlink_message_t inmsg;
	mavlink_status_t msgStatus;
	if (huart->Instance == USART2){
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	4bb1      	ldr	r3, [pc, #708]	; (8003384 <HAL_UART_RxCpltCallback+0x2d8>)
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d006      	beq.n	80030d2 <HAL_UART_RxCpltCallback+0x26>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){

			mouseDriver_readMsg(inmsg);
		}
	}
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030c4:	2026      	movs	r0, #38	; 0x26
 80030c6:	f001 fd31 	bl	8004b2c <HAL_NVIC_EnableIRQ>
}
 80030ca:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 80030ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_UART_Receive_IT(&huart2, &inByte, 1);
 80030d2:	4cad      	ldr	r4, [pc, #692]	; (8003388 <HAL_UART_RxCpltCallback+0x2dc>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	4621      	mov	r1, r4
 80030d8:	48ac      	ldr	r0, [pc, #688]	; (800338c <HAL_UART_RxCpltCallback+0x2e0>)
 80030da:	f00e fb8b 	bl	80117f4 <HAL_UART_Receive_IT>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 80030de:	7823      	ldrb	r3, [r4, #0]
 80030e0:	9346      	str	r3, [sp, #280]	; 0x118
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
	int bufferIndex = 0;

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80030e2:	4bab      	ldr	r3, [pc, #684]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80030e8:	78db      	ldrb	r3, [r3, #3]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	f200 8205 	bhi.w	80034fa <HAL_UART_RxCpltCallback+0x44e>
 80030f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80030f4:	00100010 	.word	0x00100010
 80030f8:	00580036 	.word	0x00580036
 80030fc:	00a10075 	.word	0x00a10075
 8003100:	00c900b5 	.word	0x00c900b5
 8003104:	010600dd 	.word	0x010600dd
 8003108:	01520124 	.word	0x01520124
 800310c:	01c40171 	.word	0x01c40171
 8003110:	022601c4 	.word	0x022601c4
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8003114:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8003116:	2bfd      	cmp	r3, #253	; 0xfd
 8003118:	d012      	beq.n	8003140 <HAL_UART_RxCpltCallback+0x94>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		} else if (c == MAVLINK_STX_MAVLINK1)
 800311a:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800311c:	2bfe      	cmp	r3, #254	; 0xfe
 800311e:	d171      	bne.n	8003204 <HAL_UART_RxCpltCallback+0x158>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8003120:	4a9b      	ldr	r2, [pc, #620]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003122:	2302      	movs	r3, #2
 8003124:	70d3      	strb	r3, [r2, #3]
			rxmsg->len = 0;
 8003126:	4b9b      	ldr	r3, [pc, #620]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 8003128:	2100      	movs	r1, #0
 800312a:	70d9      	strb	r1, [r3, #3]
			rxmsg->magic = c;
 800312c:	21fe      	movs	r1, #254	; 0xfe
 800312e:	7099      	strb	r1, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8003130:	7b11      	ldrb	r1, [r2, #12]
 8003132:	f041 0101 	orr.w	r1, r1, #1
 8003136:	7311      	strb	r1, [r2, #12]
	msg->checksum = crcTmp;
 8003138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800313c:	801a      	strh	r2, [r3, #0]
 800313e:	e061      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8003140:	4a93      	ldr	r2, [pc, #588]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003142:	2302      	movs	r3, #2
 8003144:	70d3      	strb	r3, [r2, #3]
			rxmsg->len = 0;
 8003146:	4b93      	ldr	r3, [pc, #588]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 8003148:	2100      	movs	r1, #0
 800314a:	70d9      	strb	r1, [r3, #3]
			rxmsg->magic = c;
 800314c:	21fd      	movs	r1, #253	; 0xfd
 800314e:	7099      	strb	r1, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8003150:	7b11      	ldrb	r1, [r2, #12]
 8003152:	f021 0101 	bic.w	r1, r1, #1
 8003156:	7311      	strb	r1, [r2, #12]
	msg->checksum = crcTmp;
 8003158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	e051      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
 8003160:	498c      	ldr	r1, [pc, #560]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 8003162:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8003164:	70ca      	strb	r2, [r1, #3]
			status->packet_idx = 0;
 8003166:	488a      	ldr	r0, [pc, #552]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003168:	2300      	movs	r3, #0
 800316a:	7103      	strb	r3, [r0, #4]
	uint16_t checksum = msg->checksum;
 800316c:	880c      	ldrh	r4, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800316e:	ea82 0304 	eor.w	r3, r2, r4
        tmp ^= (tmp<<4);
 8003172:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8003176:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003178:	091a      	lsrs	r2, r3, #4
 800317a:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 800317e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003182:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8003186:	800b      	strh	r3, [r1, #0]
			mavlink_update_checksum(rxmsg, c);
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8003188:	7b03      	ldrb	r3, [r0, #12]
 800318a:	f013 0f01 	tst.w	r3, #1
 800318e:	d005      	beq.n	800319c <HAL_UART_RxCpltCallback+0xf0>
                            rxmsg->incompat_flags = 0;
 8003190:	2200      	movs	r2, #0
 8003192:	710a      	strb	r2, [r1, #4]
                            rxmsg->compat_flags = 0;
 8003194:	714a      	strb	r2, [r1, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8003196:	2205      	movs	r2, #5
 8003198:	70c2      	strb	r2, [r0, #3]
 800319a:	e033      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 800319c:	4b7c      	ldr	r3, [pc, #496]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 800319e:	2203      	movs	r2, #3
 80031a0:	70da      	strb	r2, [r3, #3]
 80031a2:	e02f      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
                        }
		}
		break;

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 80031a4:	4b7b      	ldr	r3, [pc, #492]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 80031a6:	9a46      	ldr	r2, [sp, #280]	; 0x118
 80031a8:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80031aa:	f032 0301 	bics.w	r3, r2, #1
 80031ae:	d003      	beq.n	80031b8 <HAL_UART_RxCpltCallback+0x10c>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
			status->msg_received = 0;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80031b0:	4b77      	ldr	r3, [pc, #476]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	70da      	strb	r2, [r3, #3]
 80031b6:	e025      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
	uint16_t checksum = msg->checksum;
 80031b8:	4976      	ldr	r1, [pc, #472]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 80031ba:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80031bc:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80031be:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 80031c0:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80031c4:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80031c6:	091a      	lsrs	r2, r3, #4
 80031c8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80031cc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80031d0:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 80031d4:	800b      	strh	r3, [r1, #0]
			break;
		}
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 80031d6:	4b6e      	ldr	r3, [pc, #440]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 80031d8:	2204      	movs	r2, #4
 80031da:	70da      	strb	r2, [r3, #3]
 80031dc:	e012      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
		break;

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 80031de:	496d      	ldr	r1, [pc, #436]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 80031e0:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80031e2:	714b      	strb	r3, [r1, #5]
	uint16_t checksum = msg->checksum;
 80031e4:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80031e6:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 80031e8:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80031ec:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80031ee:	091a      	lsrs	r2, r3, #4
 80031f0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80031f4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80031f8:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 80031fc:	800b      	strh	r3, [r1, #0]
		mavlink_update_checksum(rxmsg, c);
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80031fe:	4b64      	ldr	r3, [pc, #400]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003200:	2205      	movs	r2, #5
 8003202:	70da      	strb	r2, [r3, #3]
		break;
	}

	bufferIndex++;
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8003204:	4b62      	ldr	r3, [pc, #392]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003206:	781b      	ldrb	r3, [r3, #0]
		// Count this packet as received
		status->packet_rx_success_count++;
	}

       if (r_message != NULL) {
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8003208:	4a62      	ldr	r2, [pc, #392]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 800320a:	78d2      	ldrb	r2, [r2, #3]
 800320c:	f88d 234f 	strb.w	r2, [sp, #847]	; 0x34f
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
           r_mavlink_status->flags = status->flags;
       }
       status->parse_error = 0;
 8003210:	4a5f      	ldr	r2, [pc, #380]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003212:	2100      	movs	r1, #0
 8003214:	7091      	strb	r1, [r2, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8003216:	2b02      	cmp	r3, #2
 8003218:	f040 85f9 	bne.w	8003e0e <HAL_UART_RxCpltCallback+0xd62>
    status->parse_error++;
 800321c:	4b5c      	ldr	r3, [pc, #368]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 800321e:	2201      	movs	r2, #1
 8003220:	709a      	strb	r2, [r3, #2]
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
	    _mav_parse_error(status);
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
	    if (c == MAVLINK_STX)
 8003226:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8003228:	2bfd      	cmp	r3, #253	; 0xfd
 800322a:	f000 85fa 	beq.w	8003e22 <HAL_UART_RxCpltCallback+0xd76>
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800322e:	4b58      	ldr	r3, [pc, #352]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003230:	2201      	movs	r2, #1
 8003232:	70da      	strb	r2, [r3, #3]
 8003234:	e746      	b.n	80030c4 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->seq = c;
 8003236:	4957      	ldr	r1, [pc, #348]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 8003238:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800323a:	718b      	strb	r3, [r1, #6]
	uint16_t checksum = msg->checksum;
 800323c:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800323e:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8003240:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8003244:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003246:	091a      	lsrs	r2, r3, #4
 8003248:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800324c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003250:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8003254:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8003256:	4b4e      	ldr	r3, [pc, #312]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003258:	2206      	movs	r2, #6
 800325a:	70da      	strb	r2, [r3, #3]
 800325c:	e7d2      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->sysid = c;
 800325e:	494d      	ldr	r1, [pc, #308]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 8003260:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8003262:	71cb      	strb	r3, [r1, #7]
	uint16_t checksum = msg->checksum;
 8003264:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8003266:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8003268:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800326c:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800326e:	091a      	lsrs	r2, r3, #4
 8003270:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8003274:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003278:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 800327c:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 800327e:	4b44      	ldr	r3, [pc, #272]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003280:	2207      	movs	r2, #7
 8003282:	70da      	strb	r2, [r3, #3]
 8003284:	e7be      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->compid = c;
 8003286:	4943      	ldr	r1, [pc, #268]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 8003288:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800328a:	720b      	strb	r3, [r1, #8]
	uint16_t checksum = msg->checksum;
 800328c:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800328e:	4043      	eors	r3, r0
        tmp ^= (tmp<<4);
 8003290:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8003294:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003296:	091a      	lsrs	r2, r3, #4
 8003298:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800329c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80032a0:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 80032a4:	800b      	strh	r3, [r1, #0]
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 80032a8:	2208      	movs	r2, #8
 80032aa:	70da      	strb	r2, [r3, #3]
 80032ac:	e7aa      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid = c;
 80032ae:	4939      	ldr	r1, [pc, #228]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 80032b0:	9a46      	ldr	r2, [sp, #280]	; 0x118
 80032b2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 80032b6:	724b      	strb	r3, [r1, #9]
 80032b8:	2300      	movs	r3, #0
 80032ba:	728b      	strb	r3, [r1, #10]
 80032bc:	72cb      	strb	r3, [r1, #11]
	uint16_t checksum = msg->checksum;
 80032be:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80032c0:	ea82 0300 	eor.w	r3, r2, r0
        tmp ^= (tmp<<4);
 80032c4:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80032c8:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80032ca:	091a      	lsrs	r2, r3, #4
 80032cc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80032d0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80032d4:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 80032d8:	800b      	strh	r3, [r1, #0]
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 80032dc:	7b1b      	ldrb	r3, [r3, #12]
 80032de:	f013 0f01 	tst.w	r3, #1
 80032e2:	d009      	beq.n	80032f8 <HAL_UART_RxCpltCallback+0x24c>
			if(rxmsg->len > 0) {
 80032e4:	78cb      	ldrb	r3, [r1, #3]
 80032e6:	b11b      	cbz	r3, 80032f0 <HAL_UART_RxCpltCallback+0x244>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 80032ea:	220b      	movs	r2, #11
 80032ec:	70da      	strb	r2, [r3, #3]
 80032ee:	e789      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 80032f2:	220c      	movs	r2, #12
 80032f4:	70da      	strb	r2, [r3, #3]
 80032f6:	e785      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 80032fa:	2209      	movs	r2, #9
 80032fc:	70da      	strb	r2, [r3, #3]
 80032fe:	e781      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid |= c<<8;
 8003300:	4924      	ldr	r1, [pc, #144]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 8003302:	688a      	ldr	r2, [r1, #8]
 8003304:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8003306:	0223      	lsls	r3, r4, #8
 8003308:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800330c:	724b      	strb	r3, [r1, #9]
 800330e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003312:	728a      	strb	r2, [r1, #10]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	72cb      	strb	r3, [r1, #11]
	uint16_t checksum = msg->checksum;
 8003318:	8808      	ldrh	r0, [r1, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800331a:	ea84 0300 	eor.w	r3, r4, r0
        tmp ^= (tmp<<4);
 800331e:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 8003322:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003324:	091a      	lsrs	r2, r3, #4
 8003326:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800332a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800332e:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 8003332:	800b      	strh	r3, [r1, #0]
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003336:	220a      	movs	r2, #10
 8003338:	70da      	strb	r2, [r3, #3]
 800333a:	e763      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
		rxmsg->msgid |= ((uint32_t)c)<<16;
 800333c:	4a15      	ldr	r2, [pc, #84]	; (8003394 <HAL_UART_RxCpltCallback+0x2e8>)
 800333e:	6891      	ldr	r1, [r2, #8]
 8003340:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8003342:	0423      	lsls	r3, r4, #16
 8003344:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 8003348:	7253      	strb	r3, [r2, #9]
 800334a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800334e:	7291      	strb	r1, [r2, #10]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	72d3      	strb	r3, [r2, #11]
	uint16_t checksum = msg->checksum;
 8003354:	8810      	ldrh	r0, [r2, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8003356:	ea84 0300 	eor.w	r3, r4, r0
        tmp ^= (tmp<<4);
 800335a:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 800335e:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003360:	0919      	lsrs	r1, r3, #4
 8003362:	ea81 2110 	eor.w	r1, r1, r0, lsr #8
 8003366:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800336a:	ea81 03c3 	eor.w	r3, r1, r3, lsl #3
	msg->checksum = checksum;
 800336e:	8013      	strh	r3, [r2, #0]
		if(rxmsg->len > 0){
 8003370:	78d3      	ldrb	r3, [r2, #3]
 8003372:	b11b      	cbz	r3, 800337c <HAL_UART_RxCpltCallback+0x2d0>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 8003376:	220b      	movs	r2, #11
 8003378:	70da      	strb	r2, [r3, #3]
 800337a:	e743      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <HAL_UART_RxCpltCallback+0x2e4>)
 800337e:	220c      	movs	r2, #12
 8003380:	70da      	strb	r2, [r3, #3]
 8003382:	e73f      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
 8003384:	40004400 	.word	0x40004400
 8003388:	2000140f 	.word	0x2000140f
 800338c:	200019f0 	.word	0x200019f0
 8003390:	2000189c 	.word	0x2000189c
 8003394:	20001410 	.word	0x20001410
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8003398:	4a91      	ldr	r2, [pc, #580]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 800339a:	7913      	ldrb	r3, [r2, #4]
 800339c:	1c59      	adds	r1, r3, #1
 800339e:	b2c9      	uxtb	r1, r1
 80033a0:	7111      	strb	r1, [r2, #4]
 80033a2:	4890      	ldr	r0, [pc, #576]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 80033a4:	4403      	add	r3, r0
 80033a6:	9a46      	ldr	r2, [sp, #280]	; 0x118
 80033a8:	731a      	strb	r2, [r3, #12]
	uint16_t checksum = msg->checksum;
 80033aa:	8804      	ldrh	r4, [r0, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80033ac:	ea82 0304 	eor.w	r3, r2, r4
        tmp ^= (tmp<<4);
 80033b0:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
 80033b4:	b2db      	uxtb	r3, r3
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80033b6:	091a      	lsrs	r2, r3, #4
 80033b8:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 80033bc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80033c0:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
	msg->checksum = checksum;
 80033c4:	8003      	strh	r3, [r0, #0]
		if (status->packet_idx == rxmsg->len)
 80033c6:	78c3      	ldrb	r3, [r0, #3]
 80033c8:	428b      	cmp	r3, r1
 80033ca:	f47f af1b 	bne.w	8003204 <HAL_UART_RxCpltCallback+0x158>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80033ce:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80033d0:	220c      	movs	r2, #12
 80033d2:	70da      	strb	r2, [r3, #3]
 80033d4:	e716      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80033d6:	4b83      	ldr	r3, [pc, #524]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	f3c2 2217 	ubfx	r2, r2, #8, #24
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80033de:	2008      	movs	r0, #8
 80033e0:	2400      	movs	r4, #0
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80033e2:	4d81      	ldr	r5, [pc, #516]	; (80035e8 <HAL_UART_RxCpltCallback+0x53c>)
            uint32_t mid = (low+1+high)/2;
 80033e4:	1823      	adds	r3, r4, r0
 80033e6:	3301      	adds	r3, #1
 80033e8:	085b      	lsrs	r3, r3, #1
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80033ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80033ee:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80033f2:	428a      	cmp	r2, r1
 80033f4:	d334      	bcc.n	8003460 <HAL_UART_RxCpltCallback+0x3b4>
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80033f6:	428a      	cmp	r2, r1
 80033f8:	d837      	bhi.n	800346a <HAL_UART_RxCpltCallback+0x3be>
        if (mavlink_message_crcs[low].msgid != msgid) {
 80033fa:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80033fe:	487a      	ldr	r0, [pc, #488]	; (80035e8 <HAL_UART_RxCpltCallback+0x53c>)
 8003400:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003404:	428a      	cmp	r2, r1
 8003406:	d032      	beq.n	800346e <HAL_UART_RxCpltCallback+0x3c2>
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8003408:	2100      	movs	r1, #0
		uint8_t crc_extra = e?e->crc_extra:0;
 800340a:	460b      	mov	r3, r1
	uint16_t checksum = msg->checksum;
 800340c:	4875      	ldr	r0, [pc, #468]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 800340e:	8804      	ldrh	r4, [r0, #0]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8003410:	4063      	eors	r3, r4
        tmp ^= (tmp<<4);
 8003412:	ea83 1203 	eor.w	r2, r3, r3, lsl #4
 8003416:	b2d2      	uxtb	r2, r2
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003418:	0913      	lsrs	r3, r2, #4
 800341a:	ea83 2314 	eor.w	r3, r3, r4, lsr #8
 800341e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003422:	ea83 03c2 	eor.w	r3, r3, r2, lsl #3
	msg->checksum = checksum;
 8003426:	8003      	strh	r3, [r0, #0]
		if (c != (rxmsg->checksum & 0xFF)) {
 8003428:	b2db      	uxtb	r3, r3
 800342a:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800342c:	429a      	cmp	r2, r3
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 800342e:	4b6c      	ldr	r3, [pc, #432]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 8003430:	bf14      	ite	ne
 8003432:	220e      	movne	r2, #14
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8003434:	220d      	moveq	r2, #13
 8003436:	70da      	strb	r2, [r3, #3]
                rxmsg->ck[0] = c;
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 800343a:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800343c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                if (e && status->packet_idx < e->max_msg_len) {
 8003440:	2900      	cmp	r1, #0
 8003442:	f43f aedf 	beq.w	8003204 <HAL_UART_RxCpltCallback+0x158>
 8003446:	4b66      	ldr	r3, [pc, #408]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 8003448:	791b      	ldrb	r3, [r3, #4]
 800344a:	798a      	ldrb	r2, [r1, #6]
 800344c:	4293      	cmp	r3, r2
 800344e:	f4bf aed9 	bcs.w	8003204 <HAL_UART_RxCpltCallback+0x158>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8003452:	1ad2      	subs	r2, r2, r3
 8003454:	2100      	movs	r1, #0
 8003456:	4865      	ldr	r0, [pc, #404]	; (80035ec <HAL_UART_RxCpltCallback+0x540>)
 8003458:	4418      	add	r0, r3
 800345a:	f00f fdb3 	bl	8012fc4 <memset>
 800345e:	e6d1      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
                high = mid-1;
 8003460:	1e58      	subs	r0, r3, #1
        while (low < high) {
 8003462:	42a0      	cmp	r0, r4
 8003464:	d8be      	bhi.n	80033e4 <HAL_UART_RxCpltCallback+0x338>
 8003466:	4623      	mov	r3, r4
 8003468:	e7c7      	b.n	80033fa <HAL_UART_RxCpltCallback+0x34e>
                low = mid;
 800346a:	461c      	mov	r4, r3
 800346c:	e7f9      	b.n	8003462 <HAL_UART_RxCpltCallback+0x3b6>
        return &mavlink_message_crcs[low];
 800346e:	4602      	mov	r2, r0
 8003470:	0058      	lsls	r0, r3, #1
 8003472:	18c1      	adds	r1, r0, r3
 8003474:	eb02 0181 	add.w	r1, r2, r1, lsl #2
		uint8_t crc_extra = e?e->crc_extra:0;
 8003478:	790b      	ldrb	r3, [r1, #4]
 800347a:	e7c7      	b.n	800340c <HAL_UART_RxCpltCallback+0x360>
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800347c:	2b0e      	cmp	r3, #14
 800347e:	d005      	beq.n	800348c <HAL_UART_RxCpltCallback+0x3e0>
 8003480:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8003486:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 800348a:	d017      	beq.n	80034bc <HAL_UART_RxCpltCallback+0x410>
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 800348c:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 800348e:	2202      	movs	r2, #2
 8003490:	701a      	strb	r2, [r3, #0]
		rxmsg->ck[1] = c;
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 8003494:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8003496:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 800349a:	791b      	ldrb	r3, [r3, #4]
 800349c:	f013 0f01 	tst.w	r3, #1
 80034a0:	d010      	beq.n	80034c4 <HAL_UART_RxCpltCallback+0x418>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80034a2:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80034a4:	220f      	movs	r2, #15
 80034a6:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80034a8:	220d      	movs	r2, #13
 80034aa:	735a      	strb	r2, [r3, #13]
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	f43f aea8 	beq.w	8003204 <HAL_UART_RxCpltCallback+0x158>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80034b4:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	e6a3      	b.n	8003204 <HAL_UART_RxCpltCallback+0x158>
			status->msg_received = MAVLINK_FRAMING_OK;
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e7e6      	b.n	8003492 <HAL_UART_RxCpltCallback+0x3e6>
			if (status->signing &&
 80034c4:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	b173      	cbz	r3, 80034e8 <HAL_UART_RxCpltCallback+0x43c>
			   	(status->signing->accept_unsigned_callback == NULL ||
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 80034cc:	b12b      	cbz	r3, 80034da <HAL_UART_RxCpltCallback+0x42e>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80034ce:	4a45      	ldr	r2, [pc, #276]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 80034d0:	6891      	ldr	r1, [r2, #8]
 80034d2:	0a09      	lsrs	r1, r1, #8
 80034d4:	4842      	ldr	r0, [pc, #264]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80034d6:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 80034d8:	b930      	cbnz	r0, 80034e8 <HAL_UART_RxCpltCallback+0x43c>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d002      	beq.n	80034e8 <HAL_UART_RxCpltCallback+0x43c>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80034e2:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80034e4:	2203      	movs	r2, #3
 80034e6:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80034e8:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	70da      	strb	r2, [r3, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80034ee:	f240 1223 	movw	r2, #291	; 0x123
 80034f2:	493c      	ldr	r1, [pc, #240]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 80034f4:	a8d3      	add	r0, sp, #844	; 0x34c
 80034f6:	f00f fd5a 	bl	8012fae <memcpy>
	if (status->msg_received == MAVLINK_FRAMING_OK)
 80034fa:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	f47f ae82 	bne.w	8003208 <HAL_UART_RxCpltCallback+0x15c>
		status->current_rx_seq = rxmsg->seq;
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 8003506:	4a37      	ldr	r2, [pc, #220]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 8003508:	7992      	ldrb	r2, [r2, #6]
 800350a:	715a      	strb	r2, [r3, #5]
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800350c:	891b      	ldrh	r3, [r3, #8]
 800350e:	b913      	cbnz	r3, 8003516 <HAL_UART_RxCpltCallback+0x46a>
 8003510:	4a33      	ldr	r2, [pc, #204]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 8003512:	2100      	movs	r1, #0
 8003514:	8151      	strh	r1, [r2, #10]
		status->packet_rx_success_count++;
 8003516:	4a32      	ldr	r2, [pc, #200]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 8003518:	3301      	adds	r3, #1
 800351a:	8113      	strh	r3, [r2, #8]
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 800351e:	78db      	ldrb	r3, [r3, #3]
 8003520:	f88d 334f 	strb.w	r3, [sp, #847]	; 0x34f
       status->parse_error = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	7093      	strb	r3, [r2, #2]
			mouseDriver_readMsg(inmsg);
 8003528:	acd3      	add	r4, sp, #844	; 0x34c
 800352a:	f240 1213 	movw	r2, #275	; 0x113
 800352e:	a9d7      	add	r1, sp, #860	; 0x35c
 8003530:	4668      	mov	r0, sp
 8003532:	f00f fd3c 	bl	8012fae <memcpy>
 8003536:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800353a:	f7ff fa49 	bl	80029d0 <mouseDriver_readMsg>
 800353e:	e5c1      	b.n	80030c4 <HAL_UART_RxCpltCallback+0x18>
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8003540:	4927      	ldr	r1, [pc, #156]	; (80035e0 <HAL_UART_RxCpltCallback+0x534>)
 8003542:	7b4b      	ldrb	r3, [r1, #13]
 8003544:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <HAL_UART_RxCpltCallback+0x544>)
 8003546:	1ad2      	subs	r2, r2, r3
 8003548:	9846      	ldr	r0, [sp, #280]	; 0x118
 800354a:	f882 0116 	strb.w	r0, [r2, #278]	; 0x116
		status->signature_wait--;
 800354e:	3b01      	subs	r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	734b      	strb	r3, [r1, #13]
		if (status->signature_wait == 0) {
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f ae55 	bne.w	8003204 <HAL_UART_RxCpltCallback+0x158>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 800355a:	690d      	ldr	r5, [r1, #16]
 800355c:	954b      	str	r5, [sp, #300]	; 0x12c
	if (signing == NULL) {
 800355e:	2d00      	cmp	r5, #0
 8003560:	f000 83c9 	beq.w	8003cf6 <HAL_UART_RxCpltCallback+0xc4a>
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8003564:	694b      	ldr	r3, [r1, #20]
 8003566:	9354      	str	r3, [sp, #336]	; 0x150
    m->sz[1] = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	9379      	str	r3, [sp, #484]	; 0x1e4
    A = 0x6a09e667;
 800356c:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <HAL_UART_RxCpltCallback+0x548>)
 800356e:	937a      	str	r3, [sp, #488]	; 0x1e8
    B = 0xbb67ae85;
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_UART_RxCpltCallback+0x54c>)
 8003572:	937b      	str	r3, [sp, #492]	; 0x1ec
    C = 0x3c6ef372;
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HAL_UART_RxCpltCallback+0x550>)
 8003576:	937c      	str	r3, [sp, #496]	; 0x1f0
    D = 0xa54ff53a;
 8003578:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_UART_RxCpltCallback+0x554>)
 800357a:	937d      	str	r3, [sp, #500]	; 0x1f4
    E = 0x510e527f;
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_UART_RxCpltCallback+0x558>)
 800357e:	937e      	str	r3, [sp, #504]	; 0x1f8
    F = 0x9b05688c;
 8003580:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_UART_RxCpltCallback+0x55c>)
 8003582:	937f      	str	r3, [sp, #508]	; 0x1fc
    G = 0x1f83d9ab;
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_UART_RxCpltCallback+0x560>)
 8003586:	9380      	str	r3, [sp, #512]	; 0x200
    H = 0x5be0cd19;
 8003588:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800358c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8003590:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8003594:	9381      	str	r3, [sp, #516]	; 0x204
	memcpy(m->u.save_bytes + offset, p, l);
 8003596:	ac82      	add	r4, sp, #520	; 0x208
 8003598:	f855 0f10 	ldr.w	r0, [r5, #16]!
 800359c:	6869      	ldr	r1, [r5, #4]
 800359e:	68aa      	ldr	r2, [r5, #8]
 80035a0:	68eb      	ldr	r3, [r5, #12]
 80035a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a4:	6928      	ldr	r0, [r5, #16]
 80035a6:	6969      	ldr	r1, [r5, #20]
 80035a8:	69aa      	ldr	r2, [r5, #24]
 80035aa:	69eb      	ldr	r3, [r5, #28]
 80035ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <HAL_UART_RxCpltCallback+0x538>)
 80035b0:	78db      	ldrb	r3, [r3, #3]
 80035b2:	330a      	adds	r3, #10
 80035b4:	9348      	str	r3, [sp, #288]	; 0x120
    m->sz[0] += len * 8;
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80035bc:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 80035be:	2bff      	cmp	r3, #255	; 0xff
	++m->sz[1];
 80035c0:	bf9c      	itt	ls
 80035c2:	2301      	movls	r3, #1
 80035c4:	9379      	strls	r3, [sp, #484]	; 0x1e4
    while(len > 0){
 80035c6:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80dd 	beq.w	8003788 <HAL_UART_RxCpltCallback+0x6dc>
    const unsigned char *p = (const unsigned char *)v;
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_UART_RxCpltCallback+0x564>)
 80035d0:	9349      	str	r3, [sp, #292]	; 0x124
    offset = (old_sz / 8) % 64;
 80035d2:	2520      	movs	r5, #32
 80035d4:	ab75      	add	r3, sp, #468	; 0x1d4
 80035d6:	9353      	str	r3, [sp, #332]	; 0x14c
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80035d8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8003614 <HAL_UART_RxCpltCallback+0x568>
 80035dc:	e06a      	b.n	80036b4 <HAL_UART_RxCpltCallback+0x608>
 80035de:	bf00      	nop
 80035e0:	2000189c 	.word	0x2000189c
 80035e4:	20001410 	.word	0x20001410
 80035e8:	08014334 	.word	0x08014334
 80035ec:	2000141c 	.word	0x2000141c
 80035f0:	2000141d 	.word	0x2000141d
 80035f4:	6a09e667 	.word	0x6a09e667
 80035f8:	bb67ae85 	.word	0xbb67ae85
 80035fc:	3c6ef372 	.word	0x3c6ef372
 8003600:	a54ff53a 	.word	0xa54ff53a
 8003604:	510e527f 	.word	0x510e527f
 8003608:	9b05688c 	.word	0x9b05688c
 800360c:	1f83d9ab 	.word	0x1f83d9ab
 8003610:	20001412 	.word	0x20001412
 8003614:	080143a0 	.word	0x080143a0
    for (i = 0; i < 64; i++) {
 8003618:	4635      	mov	r5, r6
 800361a:	4606      	mov	r6, r0
	AA = T1 + T2;
 800361c:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 800361e:	4667      	mov	r7, ip
 8003620:	468c      	mov	ip, r1
	EE = DD + T1;
 8003622:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003624:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8003628:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 800362c:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8003630:	ea27 0a01 	bic.w	sl, r7, r1
 8003634:	ea01 0b0c 	and.w	fp, r1, ip
 8003638:	ea8a 0a0b 	eor.w	sl, sl, fp
 800363c:	4453      	add	r3, sl
 800363e:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8003642:	4413      	add	r3, r2
 8003644:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8003648:	4413      	add	r3, r2
 800364a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800364c:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800364e:	ea4f 3270 	mov.w	r2, r0, ror #13
 8003652:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8003656:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 800365a:	ea86 0a05 	eor.w	sl, r6, r5
 800365e:	ea0a 0a00 	and.w	sl, sl, r0
 8003662:	ea06 0b05 	and.w	fp, r6, r5
 8003666:	ea8a 0a0b 	eor.w	sl, sl, fp
 800366a:	4452      	add	r2, sl
	EE = DD + T1;
 800366c:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 8003670:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 8003672:	3401      	adds	r4, #1
 8003674:	9747      	str	r7, [sp, #284]	; 0x11c
 8003676:	46ae      	mov	lr, r5
 8003678:	2c40      	cmp	r4, #64	; 0x40
 800367a:	d1cd      	bne.n	8003618 <HAL_UART_RxCpltCallback+0x56c>
    A += AA;
 800367c:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 800367e:	441a      	add	r2, r3
 8003680:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 8003682:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8003684:	4403      	add	r3, r0
 8003686:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 8003688:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800368a:	4433      	add	r3, r6
 800368c:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 800368e:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8003690:	442b      	add	r3, r5
 8003692:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 8003694:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8003696:	445b      	add	r3, fp
 8003698:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 800369a:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800369c:	440b      	add	r3, r1
 800369e:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 80036a0:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80036a2:	4463      	add	r3, ip
 80036a4:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 80036a6:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80036a8:	443b      	add	r3, r7
 80036aa:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 80036ac:	2500      	movs	r5, #0
    while(len > 0){
 80036ae:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d069      	beq.n	8003788 <HAL_UART_RxCpltCallback+0x6dc>
	uint32_t l = 64 - offset;
 80036b4:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 80036b8:	9e48      	ldr	r6, [sp, #288]	; 0x120
 80036ba:	42b4      	cmp	r4, r6
 80036bc:	bf28      	it	cs
 80036be:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 80036c0:	4622      	mov	r2, r4
 80036c2:	9f49      	ldr	r7, [sp, #292]	; 0x124
 80036c4:	4639      	mov	r1, r7
 80036c6:	ab82      	add	r3, sp, #520	; 0x208
 80036c8:	1958      	adds	r0, r3, r5
 80036ca:	f00f fc70 	bl	8012fae <memcpy>
	offset += l;
 80036ce:	4425      	add	r5, r4
	p += l;
 80036d0:	463b      	mov	r3, r7
 80036d2:	4423      	add	r3, r4
 80036d4:	9349      	str	r3, [sp, #292]	; 0x124
	len -= l;
 80036d6:	1b33      	subs	r3, r6, r4
 80036d8:	9348      	str	r3, [sp, #288]	; 0x120
	if(offset == 64){
 80036da:	2d40      	cmp	r5, #64	; 0x40
 80036dc:	d1e7      	bne.n	80036ae <HAL_UART_RxCpltCallback+0x602>
 80036de:	ab78      	add	r3, sp, #480	; 0x1e0
 80036e0:	a888      	add	r0, sp, #544	; 0x220
 80036e2:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 80036e4:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 80036e8:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 80036ea:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 80036ee:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 80036f0:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 80036f4:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 80036f6:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80036fa:	70d1      	strb	r1, [r2, #3]
 80036fc:	3304      	adds	r3, #4
 80036fe:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 8003700:	4298      	cmp	r0, r3
 8003702:	d1ef      	bne.n	80036e4 <HAL_UART_RxCpltCallback+0x638>
    AA = A;
 8003704:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8003706:	934a      	str	r3, [sp, #296]	; 0x128
    BB = B;
 8003708:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 800370a:	934c      	str	r3, [sp, #304]	; 0x130
    CC = C;
 800370c:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 800370e:	934d      	str	r3, [sp, #308]	; 0x134
    DD = D;
 8003710:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 8003712:	934e      	str	r3, [sp, #312]	; 0x138
    EE = E;
 8003714:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8003716:	934f      	str	r3, [sp, #316]	; 0x13c
    FF = F;
 8003718:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 800371a:	9350      	str	r3, [sp, #320]	; 0x140
    GG = G;
 800371c:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800371e:	9351      	str	r3, [sp, #324]	; 0x144
    HH = H;
 8003720:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8003722:	9352      	str	r3, [sp, #328]	; 0x148
 8003724:	ab65      	add	r3, sp, #404	; 0x194
 8003726:	aa91      	add	r2, sp, #580	; 0x244
 8003728:	9853      	ldr	r0, [sp, #332]	; 0x14c
	data[i] = in[i];
 800372a:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800372e:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 8003732:	4298      	cmp	r0, r3
 8003734:	d1f9      	bne.n	800372a <HAL_UART_RxCpltCallback+0x67e>
 8003736:	ac92      	add	r4, sp, #584	; 0x248
 8003738:	adc2      	add	r5, sp, #776	; 0x308
 800373a:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800373c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 800373e:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003742:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8003746:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 800374a:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 800374e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003750:	6800      	ldr	r0, [r0, #0]
 8003752:	4402      	add	r2, r0
 8003754:	4413      	add	r3, r2
 8003756:	ea4f 42b1 	mov.w	r2, r1, ror #18
 800375a:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 800375e:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 8003762:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003764:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8003766:	42ac      	cmp	r4, r5
 8003768:	d1e7      	bne.n	800373a <HAL_UART_RxCpltCallback+0x68e>
    DD = D;
 800376a:	f8dd e138 	ldr.w	lr, [sp, #312]	; 0x138
    CC = C;
 800376e:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    BB = B;
 8003770:	9e4c      	ldr	r6, [sp, #304]	; 0x130
    AA = A;
 8003772:	984a      	ldr	r0, [sp, #296]	; 0x128
    GG = G;
 8003774:	9f51      	ldr	r7, [sp, #324]	; 0x144
    FF = F;
 8003776:	f8dd c140 	ldr.w	ip, [sp, #320]	; 0x140
    HH = H;
 800377a:	9a52      	ldr	r2, [sp, #328]	; 0x148
    EE = E;
 800377c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    for (i = 0; i < 64; i++) {
 800377e:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003780:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8003784:	9247      	str	r2, [sp, #284]	; 0x11c
 8003786:	e74d      	b.n	8003624 <HAL_UART_RxCpltCallback+0x578>
    uint32_t old_sz = m->sz[0];
 8003788:	9d78      	ldr	r5, [sp, #480]	; 0x1e0
    m->sz[0] += len * 8;
 800378a:	f105 0310 	add.w	r3, r5, #16
 800378e:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8003790:	429d      	cmp	r5, r3
 8003792:	d902      	bls.n	800379a <HAL_UART_RxCpltCallback+0x6ee>
	++m->sz[1];
 8003794:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 8003796:	3301      	adds	r3, #1
 8003798:	9379      	str	r3, [sp, #484]	; 0x1e4
    offset = (old_sz / 8) % 64;
 800379a:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    const unsigned char *p = (const unsigned char *)v;
 800379e:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <HAL_UART_RxCpltCallback+0x89c>)
 80037a0:	9348      	str	r3, [sp, #288]	; 0x120
    offset = (old_sz / 8) % 64;
 80037a2:	2302      	movs	r3, #2
 80037a4:	9349      	str	r3, [sp, #292]	; 0x124
 80037a6:	ab75      	add	r3, sp, #468	; 0x1d4
 80037a8:	9353      	str	r3, [sp, #332]	; 0x14c
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80037aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003950 <HAL_UART_RxCpltCallback+0x8a4>
 80037ae:	e04d      	b.n	800384c <HAL_UART_RxCpltCallback+0x7a0>
    for (i = 0; i < 64; i++) {
 80037b0:	4635      	mov	r5, r6
 80037b2:	4606      	mov	r6, r0
	AA = T1 + T2;
 80037b4:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 80037b6:	4667      	mov	r7, ip
 80037b8:	468c      	mov	ip, r1
	EE = DD + T1;
 80037ba:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80037bc:	ea4f 23f1 	mov.w	r3, r1, ror #11
 80037c0:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 80037c4:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 80037c8:	ea27 0a01 	bic.w	sl, r7, r1
 80037cc:	ea01 0b0c 	and.w	fp, r1, ip
 80037d0:	ea8a 0a0b 	eor.w	sl, sl, fp
 80037d4:	4453      	add	r3, sl
 80037d6:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 80037da:	4413      	add	r3, r2
 80037dc:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80037e0:	4413      	add	r3, r2
 80037e2:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80037e4:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80037e6:	ea4f 3270 	mov.w	r2, r0, ror #13
 80037ea:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 80037ee:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 80037f2:	ea86 0a05 	eor.w	sl, r6, r5
 80037f6:	ea0a 0a00 	and.w	sl, sl, r0
 80037fa:	ea06 0b05 	and.w	fp, r6, r5
 80037fe:	ea8a 0a0b 	eor.w	sl, sl, fp
 8003802:	4452      	add	r2, sl
	EE = DD + T1;
 8003804:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 8003808:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 800380a:	3401      	adds	r4, #1
 800380c:	9747      	str	r7, [sp, #284]	; 0x11c
 800380e:	46ae      	mov	lr, r5
 8003810:	2c40      	cmp	r4, #64	; 0x40
 8003812:	d1cd      	bne.n	80037b0 <HAL_UART_RxCpltCallback+0x704>
    A += AA;
 8003814:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8003816:	441a      	add	r2, r3
 8003818:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 800381a:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800381c:	4403      	add	r3, r0
 800381e:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 8003820:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8003822:	4433      	add	r3, r6
 8003824:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 8003826:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8003828:	442b      	add	r3, r5
 800382a:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 800382c:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800382e:	445b      	add	r3, fp
 8003830:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 8003832:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8003834:	440b      	add	r3, r1
 8003836:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 8003838:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800383a:	4463      	add	r3, ip
 800383c:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 800383e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8003840:	443b      	add	r3, r7
 8003842:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 8003844:	2500      	movs	r5, #0
    while(len > 0){
 8003846:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003848:	2b00      	cmp	r3, #0
 800384a:	d069      	beq.n	8003920 <HAL_UART_RxCpltCallback+0x874>
	uint32_t l = 64 - offset;
 800384c:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 8003850:	9e49      	ldr	r6, [sp, #292]	; 0x124
 8003852:	42b4      	cmp	r4, r6
 8003854:	bf28      	it	cs
 8003856:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8003858:	4622      	mov	r2, r4
 800385a:	9f48      	ldr	r7, [sp, #288]	; 0x120
 800385c:	4639      	mov	r1, r7
 800385e:	ab82      	add	r3, sp, #520	; 0x208
 8003860:	1958      	adds	r0, r3, r5
 8003862:	f00f fba4 	bl	8012fae <memcpy>
	offset += l;
 8003866:	4425      	add	r5, r4
	p += l;
 8003868:	463b      	mov	r3, r7
 800386a:	4423      	add	r3, r4
 800386c:	9348      	str	r3, [sp, #288]	; 0x120
	len -= l;
 800386e:	1b33      	subs	r3, r6, r4
 8003870:	9349      	str	r3, [sp, #292]	; 0x124
	if(offset == 64){
 8003872:	2d40      	cmp	r5, #64	; 0x40
 8003874:	d1e7      	bne.n	8003846 <HAL_UART_RxCpltCallback+0x79a>
 8003876:	ab78      	add	r3, sp, #480	; 0x1e0
 8003878:	a888      	add	r0, sp, #544	; 0x220
 800387a:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 800387c:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8003880:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8003882:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8003886:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 8003888:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800388c:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 800388e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003892:	70d1      	strb	r1, [r2, #3]
 8003894:	3304      	adds	r3, #4
 8003896:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 8003898:	4283      	cmp	r3, r0
 800389a:	d1ef      	bne.n	800387c <HAL_UART_RxCpltCallback+0x7d0>
    AA = A;
 800389c:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 800389e:	934a      	str	r3, [sp, #296]	; 0x128
    BB = B;
 80038a0:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 80038a2:	934c      	str	r3, [sp, #304]	; 0x130
    CC = C;
 80038a4:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 80038a6:	934d      	str	r3, [sp, #308]	; 0x134
    DD = D;
 80038a8:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 80038aa:	934e      	str	r3, [sp, #312]	; 0x138
    EE = E;
 80038ac:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 80038ae:	934f      	str	r3, [sp, #316]	; 0x13c
    FF = F;
 80038b0:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 80038b2:	9350      	str	r3, [sp, #320]	; 0x140
    GG = G;
 80038b4:	9b80      	ldr	r3, [sp, #512]	; 0x200
 80038b6:	9351      	str	r3, [sp, #324]	; 0x144
    HH = H;
 80038b8:	9b81      	ldr	r3, [sp, #516]	; 0x204
 80038ba:	9352      	str	r3, [sp, #328]	; 0x148
 80038bc:	ab65      	add	r3, sp, #404	; 0x194
 80038be:	aa91      	add	r2, sp, #580	; 0x244
 80038c0:	9853      	ldr	r0, [sp, #332]	; 0x14c
	data[i] = in[i];
 80038c2:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80038c6:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 80038ca:	4283      	cmp	r3, r0
 80038cc:	d1f9      	bne.n	80038c2 <HAL_UART_RxCpltCallback+0x816>
 80038ce:	ac92      	add	r4, sp, #584	; 0x248
 80038d0:	adc2      	add	r5, sp, #776	; 0x308
 80038d2:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80038d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 80038d6:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80038da:	ea4f 43f2 	mov.w	r3, r2, ror #19
 80038de:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 80038e2:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 80038e6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80038e8:	6800      	ldr	r0, [r0, #0]
 80038ea:	4402      	add	r2, r0
 80038ec:	4413      	add	r3, r2
 80038ee:	ea4f 42b1 	mov.w	r2, r1, ror #18
 80038f2:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 80038f6:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 80038fa:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80038fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 80038fe:	42ac      	cmp	r4, r5
 8003900:	d1e7      	bne.n	80038d2 <HAL_UART_RxCpltCallback+0x826>
    DD = D;
 8003902:	f8dd e138 	ldr.w	lr, [sp, #312]	; 0x138
    CC = C;
 8003906:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    BB = B;
 8003908:	9e4c      	ldr	r6, [sp, #304]	; 0x130
    AA = A;
 800390a:	984a      	ldr	r0, [sp, #296]	; 0x128
    GG = G;
 800390c:	9f51      	ldr	r7, [sp, #324]	; 0x144
    FF = F;
 800390e:	f8dd c140 	ldr.w	ip, [sp, #320]	; 0x140
    HH = H;
 8003912:	9a52      	ldr	r2, [sp, #328]	; 0x148
    EE = E;
 8003914:	994f      	ldr	r1, [sp, #316]	; 0x13c
    for (i = 0; i < 64; i++) {
 8003916:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003918:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 800391c:	9247      	str	r2, [sp, #284]	; 0x11c
 800391e:	e74d      	b.n	80037bc <HAL_UART_RxCpltCallback+0x710>
    uint32_t old_sz = m->sz[0];
 8003920:	9d78      	ldr	r5, [sp, #480]	; 0x1e0
    m->sz[0] += len * 8;
 8003922:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8003926:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8003928:	429d      	cmp	r5, r3
 800392a:	d902      	bls.n	8003932 <HAL_UART_RxCpltCallback+0x886>
	++m->sz[1];
 800392c:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 800392e:	3301      	adds	r3, #1
 8003930:	9379      	str	r3, [sp, #484]	; 0x1e4
    offset = (old_sz / 8) % 64;
 8003932:	f3c5 05c5 	ubfx	r5, r5, #3, #6
    const unsigned char *p = (const unsigned char *)v;
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_UART_RxCpltCallback+0x8a0>)
 8003938:	934a      	str	r3, [sp, #296]	; 0x128
    offset = (old_sz / 8) % 64;
 800393a:	2307      	movs	r3, #7
 800393c:	9348      	str	r3, [sp, #288]	; 0x120
 800393e:	ab75      	add	r3, sp, #468	; 0x1d4
 8003940:	9355      	str	r3, [sp, #340]	; 0x154
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003942:	f8df 800c 	ldr.w	r8, [pc, #12]	; 8003950 <HAL_UART_RxCpltCallback+0x8a4>
 8003946:	e053      	b.n	80039f0 <HAL_UART_RxCpltCallback+0x944>
 8003948:	20001524 	.word	0x20001524
 800394c:	20001526 	.word	0x20001526
 8003950:	080143a0 	.word	0x080143a0
    for (i = 0; i < 64; i++) {
 8003954:	4635      	mov	r5, r6
 8003956:	4606      	mov	r6, r0
	AA = T1 + T2;
 8003958:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 800395a:	4667      	mov	r7, ip
 800395c:	468c      	mov	ip, r1
	EE = DD + T1;
 800395e:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003960:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8003964:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8003968:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 800396c:	ea27 0a01 	bic.w	sl, r7, r1
 8003970:	ea01 0b0c 	and.w	fp, r1, ip
 8003974:	ea8a 0a0b 	eor.w	sl, sl, fp
 8003978:	4453      	add	r3, sl
 800397a:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 800397e:	4413      	add	r3, r2
 8003980:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8003984:	4413      	add	r3, r2
 8003986:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8003988:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800398a:	ea4f 3270 	mov.w	r2, r0, ror #13
 800398e:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8003992:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8003996:	ea86 0a05 	eor.w	sl, r6, r5
 800399a:	ea0a 0a00 	and.w	sl, sl, r0
 800399e:	ea06 0b05 	and.w	fp, r6, r5
 80039a2:	ea8a 0a0b 	eor.w	sl, sl, fp
 80039a6:	4452      	add	r2, sl
	EE = DD + T1;
 80039a8:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 80039ac:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 80039ae:	3401      	adds	r4, #1
 80039b0:	9747      	str	r7, [sp, #284]	; 0x11c
 80039b2:	46ae      	mov	lr, r5
 80039b4:	2c40      	cmp	r4, #64	; 0x40
 80039b6:	d1cd      	bne.n	8003954 <HAL_UART_RxCpltCallback+0x8a8>
    A += AA;
 80039b8:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 80039ba:	441a      	add	r2, r3
 80039bc:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 80039be:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80039c0:	4403      	add	r3, r0
 80039c2:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 80039c4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80039c6:	4433      	add	r3, r6
 80039c8:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 80039ca:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80039cc:	442b      	add	r3, r5
 80039ce:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 80039d0:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80039d2:	445b      	add	r3, fp
 80039d4:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 80039d6:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80039d8:	440b      	add	r3, r1
 80039da:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 80039dc:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80039de:	4463      	add	r3, ip
 80039e0:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 80039e2:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 80039e4:	443b      	add	r3, r7
 80039e6:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 80039e8:	9d49      	ldr	r5, [sp, #292]	; 0x124
    while(len > 0){
 80039ea:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d069      	beq.n	8003ac4 <HAL_UART_RxCpltCallback+0xa18>
	uint32_t l = 64 - offset;
 80039f0:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 80039f4:	9e48      	ldr	r6, [sp, #288]	; 0x120
 80039f6:	42b4      	cmp	r4, r6
 80039f8:	bf28      	it	cs
 80039fa:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 80039fc:	4622      	mov	r2, r4
 80039fe:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8003a00:	4639      	mov	r1, r7
 8003a02:	ab82      	add	r3, sp, #520	; 0x208
 8003a04:	1958      	adds	r0, r3, r5
 8003a06:	f00f fad2 	bl	8012fae <memcpy>
	offset += l;
 8003a0a:	4425      	add	r5, r4
	p += l;
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	4423      	add	r3, r4
 8003a10:	934a      	str	r3, [sp, #296]	; 0x128
	len -= l;
 8003a12:	1b33      	subs	r3, r6, r4
 8003a14:	9348      	str	r3, [sp, #288]	; 0x120
	if(offset == 64){
 8003a16:	2d40      	cmp	r5, #64	; 0x40
 8003a18:	d1e7      	bne.n	80039ea <HAL_UART_RxCpltCallback+0x93e>
 8003a1a:	ab78      	add	r3, sp, #480	; 0x1e0
 8003a1c:	a888      	add	r0, sp, #544	; 0x220
 8003a1e:	aa66      	add	r2, sp, #408	; 0x198
                p2[0] = p1[3];
 8003a20:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8003a24:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8003a26:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8003a2a:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 8003a2c:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8003a30:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8003a32:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003a36:	70d1      	strb	r1, [r2, #3]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 8003a3c:	4298      	cmp	r0, r3
 8003a3e:	d1ef      	bne.n	8003a20 <HAL_UART_RxCpltCallback+0x974>
    AA = A;
 8003a40:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8003a42:	934c      	str	r3, [sp, #304]	; 0x130
    BB = B;
 8003a44:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 8003a46:	934d      	str	r3, [sp, #308]	; 0x134
    CC = C;
 8003a48:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 8003a4a:	934e      	str	r3, [sp, #312]	; 0x138
    DD = D;
 8003a4c:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 8003a4e:	934f      	str	r3, [sp, #316]	; 0x13c
    EE = E;
 8003a50:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8003a52:	9350      	str	r3, [sp, #320]	; 0x140
    FF = F;
 8003a54:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 8003a56:	9351      	str	r3, [sp, #324]	; 0x144
    GG = G;
 8003a58:	9b80      	ldr	r3, [sp, #512]	; 0x200
 8003a5a:	9352      	str	r3, [sp, #328]	; 0x148
    HH = H;
 8003a5c:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8003a5e:	9353      	str	r3, [sp, #332]	; 0x14c
 8003a60:	ab65      	add	r3, sp, #404	; 0x194
 8003a62:	aa91      	add	r2, sp, #580	; 0x244
 8003a64:	9855      	ldr	r0, [sp, #340]	; 0x154
	data[i] = in[i];
 8003a66:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8003a6a:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 8003a6e:	4283      	cmp	r3, r0
 8003a70:	d1f9      	bne.n	8003a66 <HAL_UART_RxCpltCallback+0x9ba>
 8003a72:	ac92      	add	r4, sp, #584	; 0x248
 8003a74:	adc2      	add	r5, sp, #776	; 0x308
 8003a76:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003a78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 8003a7a:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003a7e:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8003a82:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 8003a86:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8003a8a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003a8c:	6800      	ldr	r0, [r0, #0]
 8003a8e:	4402      	add	r2, r0
 8003a90:	4413      	add	r3, r2
 8003a92:	ea4f 42b1 	mov.w	r2, r1, ror #18
 8003a96:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 8003a9a:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 8003a9e:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003aa0:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8003aa2:	42ac      	cmp	r4, r5
 8003aa4:	d1e7      	bne.n	8003a76 <HAL_UART_RxCpltCallback+0x9ca>
    DD = D;
 8003aa6:	f8dd e13c 	ldr.w	lr, [sp, #316]	; 0x13c
    CC = C;
 8003aaa:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    BB = B;
 8003aac:	9e4d      	ldr	r6, [sp, #308]	; 0x134
    AA = A;
 8003aae:	984c      	ldr	r0, [sp, #304]	; 0x130
    GG = G;
 8003ab0:	9f52      	ldr	r7, [sp, #328]	; 0x148
    FF = F;
 8003ab2:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    HH = H;
 8003ab6:	9a53      	ldr	r2, [sp, #332]	; 0x14c
    EE = E;
 8003ab8:	9950      	ldr	r1, [sp, #320]	; 0x140
    for (i = 0; i < 64; i++) {
 8003aba:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003abc:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8003ac0:	9247      	str	r2, [sp, #284]	; 0x11c
 8003ac2:	e74d      	b.n	8003960 <HAL_UART_RxCpltCallback+0x8b4>
    unsigned offset = (m->sz[0] / 8) % 64;
 8003ac4:	9c78      	ldr	r4, [sp, #480]	; 0x1e0
 8003ac6:	f3c4 05c5 	ubfx	r5, r4, #3, #6
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8003aca:	f1c5 0677 	rsb	r6, r5, #119	; 0x77
 8003ace:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    *zeros = 0x80;
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	f88d 3198 	strb.w	r3, [sp, #408]	; 0x198
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8003ad8:	2247      	movs	r2, #71	; 0x47
 8003ada:	2100      	movs	r1, #0
 8003adc:	f20d 1099 	addw	r0, sp, #409	; 0x199
 8003ae0:	f00f fa70 	bl	8012fc4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8003ae4:	ab66      	add	r3, sp, #408	; 0x198
 8003ae6:	4433      	add	r3, r6
 8003ae8:	721c      	strb	r4, [r3, #8]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8003aea:	0a22      	lsrs	r2, r4, #8
 8003aec:	71da      	strb	r2, [r3, #7]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8003aee:	0c22      	lsrs	r2, r4, #16
 8003af0:	719a      	strb	r2, [r3, #6]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8003af2:	0e22      	lsrs	r2, r4, #24
 8003af4:	715a      	strb	r2, [r3, #5]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8003af6:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 8003af8:	711a      	strb	r2, [r3, #4]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8003afa:	0a11      	lsrs	r1, r2, #8
 8003afc:	70d9      	strb	r1, [r3, #3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8003afe:	0c11      	lsrs	r1, r2, #16
 8003b00:	7099      	strb	r1, [r3, #2]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8003b02:	0e11      	lsrs	r1, r2, #24
 8003b04:	7059      	strb	r1, [r3, #1]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8003b06:	f106 0309 	add.w	r3, r6, #9
 8003b0a:	9349      	str	r3, [sp, #292]	; 0x124
    m->sz[0] += len * 8;
 8003b0c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003b10:	9378      	str	r3, [sp, #480]	; 0x1e0
    if (m->sz[0] < old_sz)
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d901      	bls.n	8003b1a <HAL_UART_RxCpltCallback+0xa6e>
	++m->sz[1];
 8003b16:	3201      	adds	r2, #1
 8003b18:	9279      	str	r2, [sp, #484]	; 0x1e4
    while(len > 0){
 8003b1a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80bf 	beq.w	8003ca0 <HAL_UART_RxCpltCallback+0xbf4>
 8003b22:	ab66      	add	r3, sp, #408	; 0x198
 8003b24:	934a      	str	r3, [sp, #296]	; 0x128
 8003b26:	ab65      	add	r3, sp, #404	; 0x194
 8003b28:	9355      	str	r3, [sp, #340]	; 0x154
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003b2a:	f8df 8328 	ldr.w	r8, [pc, #808]	; 8003e54 <HAL_UART_RxCpltCallback+0xda8>
 8003b2e:	e04d      	b.n	8003bcc <HAL_UART_RxCpltCallback+0xb20>
    for (i = 0; i < 64; i++) {
 8003b30:	4635      	mov	r5, r6
 8003b32:	4606      	mov	r6, r0
	AA = T1 + T2;
 8003b34:	4618      	mov	r0, r3
    for (i = 0; i < 64; i++) {
 8003b36:	4667      	mov	r7, ip
 8003b38:	468c      	mov	ip, r1
	EE = DD + T1;
 8003b3a:	4659      	mov	r1, fp
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003b3c:	ea4f 23f1 	mov.w	r3, r1, ror #11
 8003b40:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 8003b44:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 8003b48:	ea27 0a01 	bic.w	sl, r7, r1
 8003b4c:	ea01 0b0c 	and.w	fp, r1, ip
 8003b50:	ea8a 0a0b 	eor.w	sl, sl, fp
 8003b54:	4453      	add	r3, sl
 8003b56:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8003b60:	4413      	add	r3, r2
 8003b62:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8003b64:	4413      	add	r3, r2
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8003b66:	ea4f 3270 	mov.w	r2, r0, ror #13
 8003b6a:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8003b6e:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8003b72:	ea86 0a05 	eor.w	sl, r6, r5
 8003b76:	ea0a 0a00 	and.w	sl, sl, r0
 8003b7a:	ea06 0b05 	and.w	fp, r6, r5
 8003b7e:	ea8a 0a0b 	eor.w	sl, sl, fp
 8003b82:	4452      	add	r2, sl
	EE = DD + T1;
 8003b84:	eb03 0b0e 	add.w	fp, r3, lr
	AA = T1 + T2;
 8003b88:	4413      	add	r3, r2
    for (i = 0; i < 64; i++) {
 8003b8a:	3401      	adds	r4, #1
 8003b8c:	9747      	str	r7, [sp, #284]	; 0x11c
 8003b8e:	46ae      	mov	lr, r5
 8003b90:	2c40      	cmp	r4, #64	; 0x40
 8003b92:	d1cd      	bne.n	8003b30 <HAL_UART_RxCpltCallback+0xa84>
    A += AA;
 8003b94:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 8003b96:	441a      	add	r2, r3
 8003b98:	927a      	str	r2, [sp, #488]	; 0x1e8
    B += BB;
 8003b9a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8003b9c:	4403      	add	r3, r0
 8003b9e:	937b      	str	r3, [sp, #492]	; 0x1ec
    C += CC;
 8003ba0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8003ba2:	4433      	add	r3, r6
 8003ba4:	937c      	str	r3, [sp, #496]	; 0x1f0
    D += DD;
 8003ba6:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8003ba8:	442b      	add	r3, r5
 8003baa:	937d      	str	r3, [sp, #500]	; 0x1f4
    E += EE;
 8003bac:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8003bae:	445b      	add	r3, fp
 8003bb0:	937e      	str	r3, [sp, #504]	; 0x1f8
    F += FF;
 8003bb2:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8003bb4:	440b      	add	r3, r1
 8003bb6:	937f      	str	r3, [sp, #508]	; 0x1fc
    G += GG;
 8003bb8:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8003bba:	4463      	add	r3, ip
 8003bbc:	9380      	str	r3, [sp, #512]	; 0x200
    H += HH;
 8003bbe:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8003bc0:	443b      	add	r3, r7
 8003bc2:	9381      	str	r3, [sp, #516]	; 0x204
	    offset = 0;
 8003bc4:	9d48      	ldr	r5, [sp, #288]	; 0x120
    while(len > 0){
 8003bc6:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d069      	beq.n	8003ca0 <HAL_UART_RxCpltCallback+0xbf4>
	uint32_t l = 64 - offset;
 8003bcc:	f1c5 0440 	rsb	r4, r5, #64	; 0x40
 8003bd0:	9e49      	ldr	r6, [sp, #292]	; 0x124
 8003bd2:	42b4      	cmp	r4, r6
 8003bd4:	bf28      	it	cs
 8003bd6:	4634      	movcs	r4, r6
	memcpy(m->u.save_bytes + offset, p, l);
 8003bd8:	4622      	mov	r2, r4
 8003bda:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8003bdc:	4639      	mov	r1, r7
 8003bde:	ab82      	add	r3, sp, #520	; 0x208
 8003be0:	1958      	adds	r0, r3, r5
 8003be2:	f00f f9e4 	bl	8012fae <memcpy>
	offset += l;
 8003be6:	4425      	add	r5, r4
	p += l;
 8003be8:	463b      	mov	r3, r7
 8003bea:	4423      	add	r3, r4
 8003bec:	934a      	str	r3, [sp, #296]	; 0x128
	len -= l;
 8003bee:	1b33      	subs	r3, r6, r4
 8003bf0:	9349      	str	r3, [sp, #292]	; 0x124
	if(offset == 64){
 8003bf2:	2d40      	cmp	r5, #64	; 0x40
 8003bf4:	d1e7      	bne.n	8003bc6 <HAL_UART_RxCpltCallback+0xb1a>
 8003bf6:	ab78      	add	r3, sp, #480	; 0x1e0
 8003bf8:	a888      	add	r0, sp, #544	; 0x220
 8003bfa:	aa56      	add	r2, sp, #344	; 0x158
                p2[0] = p1[3];
 8003bfc:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8003c00:	7011      	strb	r1, [r2, #0]
                p2[1] = p1[2];
 8003c02:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8003c06:	7051      	strb	r1, [r2, #1]
                p2[2] = p1[1];
 8003c08:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8003c0c:	7091      	strb	r1, [r2, #2]
                p2[3] = p1[0];
 8003c0e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003c12:	70d1      	strb	r1, [r2, #3]
 8003c14:	3304      	adds	r3, #4
 8003c16:	3204      	adds	r2, #4
	    for (i = 0; i < 16; i++){
 8003c18:	4298      	cmp	r0, r3
 8003c1a:	d1ef      	bne.n	8003bfc <HAL_UART_RxCpltCallback+0xb50>
    AA = A;
 8003c1c:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8003c1e:	934c      	str	r3, [sp, #304]	; 0x130
    BB = B;
 8003c20:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 8003c22:	934d      	str	r3, [sp, #308]	; 0x134
    CC = C;
 8003c24:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 8003c26:	934e      	str	r3, [sp, #312]	; 0x138
    DD = D;
 8003c28:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 8003c2a:	934f      	str	r3, [sp, #316]	; 0x13c
    EE = E;
 8003c2c:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 8003c2e:	9350      	str	r3, [sp, #320]	; 0x140
    FF = F;
 8003c30:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 8003c32:	9351      	str	r3, [sp, #324]	; 0x144
    GG = G;
 8003c34:	9b80      	ldr	r3, [sp, #512]	; 0x200
 8003c36:	9352      	str	r3, [sp, #328]	; 0x148
    HH = H;
 8003c38:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8003c3a:	9353      	str	r3, [sp, #332]	; 0x14c
 8003c3c:	ab55      	add	r3, sp, #340	; 0x154
 8003c3e:	aa91      	add	r2, sp, #580	; 0x244
 8003c40:	9855      	ldr	r0, [sp, #340]	; 0x154
	data[i] = in[i];
 8003c42:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8003c46:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i = 0; i < 16; ++i)
 8003c4a:	4283      	cmp	r3, r0
 8003c4c:	d1f9      	bne.n	8003c42 <HAL_UART_RxCpltCallback+0xb96>
 8003c4e:	ac92      	add	r4, sp, #584	; 0x248
 8003c50:	adc2      	add	r5, sp, #776	; 0x308
 8003c52:	4620      	mov	r0, r4
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003c54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	    sigma0(data[i-15]) + data[i - 16];
 8003c56:	f854 1f04 	ldr.w	r1, [r4, #4]!
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003c5a:	ea4f 43f2 	mov.w	r3, r2, ror #19
 8003c5e:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 8003c62:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
	    sigma0(data[i-15]) + data[i - 16];
 8003c66:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003c68:	6800      	ldr	r0, [r0, #0]
 8003c6a:	4402      	add	r2, r0
 8003c6c:	4413      	add	r3, r2
 8003c6e:	ea4f 42b1 	mov.w	r2, r1, ror #18
 8003c72:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
 8003c76:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 8003c7a:	4413      	add	r3, r2
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8003c7c:	63e3      	str	r3, [r4, #60]	; 0x3c
    for (i = 16; i < 64; ++i)
 8003c7e:	42ac      	cmp	r4, r5
 8003c80:	d1e7      	bne.n	8003c52 <HAL_UART_RxCpltCallback+0xba6>
    DD = D;
 8003c82:	f8dd e13c 	ldr.w	lr, [sp, #316]	; 0x13c
    CC = C;
 8003c86:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    BB = B;
 8003c88:	9e4d      	ldr	r6, [sp, #308]	; 0x134
    AA = A;
 8003c8a:	984c      	ldr	r0, [sp, #304]	; 0x130
    GG = G;
 8003c8c:	9f52      	ldr	r7, [sp, #328]	; 0x148
    FF = F;
 8003c8e:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    HH = H;
 8003c92:	9a53      	ldr	r2, [sp, #332]	; 0x14c
    EE = E;
 8003c94:	9950      	ldr	r1, [sp, #320]	; 0x140
    for (i = 0; i < 64; i++) {
 8003c96:	2400      	movs	r4, #0
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8003c98:	f50d 7912 	add.w	r9, sp, #584	; 0x248
 8003c9c:	9247      	str	r2, [sp, #284]	; 0x11c
 8003c9e:	e74d      	b.n	8003b3c <HAL_UART_RxCpltCallback+0xa90>
    result[0] = p[3];
 8003ca0:	f89d 31eb 	ldrb.w	r3, [sp, #491]	; 0x1eb
 8003ca4:	f88d 3158 	strb.w	r3, [sp, #344]	; 0x158
    result[1] = p[2];
 8003ca8:	f89d 31ea 	ldrb.w	r3, [sp, #490]	; 0x1ea
 8003cac:	f88d 3159 	strb.w	r3, [sp, #345]	; 0x159
    result[2] = p[1];
 8003cb0:	f89d 31e9 	ldrb.w	r3, [sp, #489]	; 0x1e9
 8003cb4:	f88d 315a 	strb.w	r3, [sp, #346]	; 0x15a
    result[3] = p[0];
 8003cb8:	f89d 31e8 	ldrb.w	r3, [sp, #488]	; 0x1e8
 8003cbc:	f88d 315b 	strb.w	r3, [sp, #347]	; 0x15b
    result[4] = p[7];
 8003cc0:	f89d 31ef 	ldrb.w	r3, [sp, #495]	; 0x1ef
 8003cc4:	f88d 315c 	strb.w	r3, [sp, #348]	; 0x15c
    result[5] = p[6];
 8003cc8:	f89d 31ee 	ldrb.w	r3, [sp, #494]	; 0x1ee
 8003ccc:	f88d 315d 	strb.w	r3, [sp, #349]	; 0x15d
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8003cd0:	2206      	movs	r2, #6
 8003cd2:	495b      	ldr	r1, [pc, #364]	; (8003e40 <HAL_UART_RxCpltCallback+0xd94>)
 8003cd4:	a856      	add	r0, sp, #344	; 0x158
 8003cd6:	f00f f95b 	bl	8012f90 <memcmp>
 8003cda:	b1d0      	cbz	r0, 8003d12 <HAL_UART_RxCpltCallback+0xc66>
			   	(status->signing->accept_unsigned_callback &&
 8003cdc:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a9 	beq.w	8003e38 <HAL_UART_RxCpltCallback+0xd8c>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8003ce6:	4a57      	ldr	r2, [pc, #348]	; (8003e44 <HAL_UART_RxCpltCallback+0xd98>)
 8003ce8:	6891      	ldr	r1, [r2, #8]
 8003cea:	0a09      	lsrs	r1, r1, #8
 8003cec:	4856      	ldr	r0, [pc, #344]	; (8003e48 <HAL_UART_RxCpltCallback+0xd9c>)
 8003cee:	4798      	blx	r3
			   	(status->signing->accept_unsigned_callback &&
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	f000 80a1 	beq.w	8003e38 <HAL_UART_RxCpltCallback+0xd8c>
				status->msg_received = MAVLINK_FRAMING_OK;
 8003cf6:	4b54      	ldr	r3, [pc, #336]	; (8003e48 <HAL_UART_RxCpltCallback+0xd9c>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8003cfc:	4b52      	ldr	r3, [pc, #328]	; (8003e48 <HAL_UART_RxCpltCallback+0xd9c>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	70da      	strb	r2, [r3, #3]
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8003d02:	f240 1223 	movw	r2, #291	; 0x123
 8003d06:	494f      	ldr	r1, [pc, #316]	; (8003e44 <HAL_UART_RxCpltCallback+0xd98>)
 8003d08:	a8d3      	add	r0, sp, #844	; 0x34c
 8003d0a:	f00f f950 	bl	8012fae <memcpy>
 8003d0e:	f7ff bbf4 	b.w	80034fa <HAL_UART_RxCpltCallback+0x44e>
	uint8_t link_id = psig[0];
 8003d12:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <HAL_UART_RxCpltCallback+0xd98>)
 8003d14:	f893 6116 	ldrb.w	r6, [r3, #278]	; 0x116
	tstamp.t64 = 0;
 8003d18:	aa66      	add	r2, sp, #408	; 0x198
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	e9c2 0100 	strd	r0, r1, [r2]
	memcpy(tstamp.t8, psig+1, 6);
 8003d22:	f8d3 0117 	ldr.w	r0, [r3, #279]	; 0x117
 8003d26:	f203 1317 	addw	r3, r3, #279	; 0x117
 8003d2a:	9066      	str	r0, [sp, #408]	; 0x198
 8003d2c:	889b      	ldrh	r3, [r3, #4]
 8003d2e:	f8ad 319c 	strh.w	r3, [sp, #412]	; 0x19c
	if (signing_streams == NULL) {
 8003d32:	9a54      	ldr	r2, [sp, #336]	; 0x150
 8003d34:	2a00      	cmp	r2, #0
 8003d36:	d0d1      	beq.n	8003cdc <HAL_UART_RxCpltCallback+0xc30>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8003d38:	8810      	ldrh	r0, [r2, #0]
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d065      	beq.n	8003e0a <HAL_UART_RxCpltCallback+0xd5e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_UART_RxCpltCallback+0xd98>)
 8003d40:	79dc      	ldrb	r4, [r3, #7]
		    msg->compid == signing_streams->stream[i].compid &&
 8003d42:	7a1f      	ldrb	r7, [r3, #8]
 8003d44:	1c93      	adds	r3, r2, #2
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8003d46:	2100      	movs	r1, #0
 8003d48:	e004      	b.n	8003d54 <HAL_UART_RxCpltCallback+0xca8>
 8003d4a:	3101      	adds	r1, #1
 8003d4c:	b289      	uxth	r1, r1
 8003d4e:	3309      	adds	r3, #9
 8003d50:	4288      	cmp	r0, r1
 8003d52:	d03a      	beq.n	8003dca <HAL_UART_RxCpltCallback+0xd1e>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8003d54:	785a      	ldrb	r2, [r3, #1]
 8003d56:	42a2      	cmp	r2, r4
 8003d58:	d1f7      	bne.n	8003d4a <HAL_UART_RxCpltCallback+0xc9e>
 8003d5a:	789a      	ldrb	r2, [r3, #2]
 8003d5c:	42ba      	cmp	r2, r7
 8003d5e:	d1f4      	bne.n	8003d4a <HAL_UART_RxCpltCallback+0xc9e>
		    msg->compid == signing_streams->stream[i].compid &&
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	42b2      	cmp	r2, r6
 8003d64:	d1f1      	bne.n	8003d4a <HAL_UART_RxCpltCallback+0xc9e>
	if (i == signing_streams->num_signing_streams) {
 8003d66:	4288      	cmp	r0, r1
 8003d68:	d030      	beq.n	8003dcc <HAL_UART_RxCpltCallback+0xd20>
		last_tstamp.t64 = 0;
 8003d6a:	aa92      	add	r2, sp, #584	; 0x248
 8003d6c:	2400      	movs	r4, #0
 8003d6e:	2500      	movs	r5, #0
 8003d70:	e9c2 4500 	strd	r4, r5, [r2]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8003d74:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8003d78:	3305      	adds	r3, #5
 8003d7a:	9854      	ldr	r0, [sp, #336]	; 0x150
 8003d7c:	4403      	add	r3, r0
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	9092      	str	r0, [sp, #584]	; 0x248
 8003d82:	889b      	ldrh	r3, [r3, #4]
 8003d84:	f8ad 324c 	strh.w	r3, [sp, #588]	; 0x24c
		if (tstamp.t64 <= last_tstamp.t64) {
 8003d88:	ab66      	add	r3, sp, #408	; 0x198
 8003d8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d8e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003d92:	42ab      	cmp	r3, r5
 8003d94:	bf08      	it	eq
 8003d96:	42a2      	cmpeq	r2, r4
 8003d98:	d2a0      	bcs.n	8003cdc <HAL_UART_RxCpltCallback+0xc30>
 8003d9a:	4608      	mov	r0, r1
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8003d9c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003da0:	1d43      	adds	r3, r0, #5
 8003da2:	9c54      	ldr	r4, [sp, #336]	; 0x150
 8003da4:	18e1      	adds	r1, r4, r3
 8003da6:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <HAL_UART_RxCpltCallback+0xda0>)
 8003da8:	6810      	ldr	r0, [r2, #0]
 8003daa:	50e0      	str	r0, [r4, r3]
 8003dac:	8893      	ldrh	r3, [r2, #4]
 8003dae:	808b      	strh	r3, [r1, #4]
	if (tstamp.t64 > signing->timestamp) {
 8003db0:	ab66      	add	r3, sp, #408	; 0x198
 8003db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003db6:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 8003db8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003dbc:	428b      	cmp	r3, r1
 8003dbe:	bf08      	it	eq
 8003dc0:	4282      	cmpeq	r2, r0
 8003dc2:	d298      	bcs.n	8003cf6 <HAL_UART_RxCpltCallback+0xc4a>
		signing->timestamp = tstamp.t64;
 8003dc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003dc8:	e795      	b.n	8003cf6 <HAL_UART_RxCpltCallback+0xc4a>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8003dca:	4601      	mov	r1, r0
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8003dcc:	280f      	cmp	r0, #15
 8003dce:	d885      	bhi.n	8003cdc <HAL_UART_RxCpltCallback+0xc30>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8003dd0:	ab66      	add	r3, sp, #408	; 0x198
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	4c1e      	ldr	r4, [pc, #120]	; (8003e50 <HAL_UART_RxCpltCallback+0xda4>)
 8003dd8:	2500      	movs	r5, #0
 8003dda:	18a7      	adds	r7, r4, r2
 8003ddc:	eb45 0803 	adc.w	r8, r5, r3
 8003de0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8003de2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003de6:	4598      	cmp	r8, r3
 8003de8:	bf08      	it	eq
 8003dea:	4297      	cmpeq	r7, r2
 8003dec:	f4ff af76 	bcc.w	8003cdc <HAL_UART_RxCpltCallback+0xc30>
		signing_streams->stream[i].sysid = msg->sysid;
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_UART_RxCpltCallback+0xd98>)
 8003df2:	79d4      	ldrb	r4, [r2, #7]
 8003df4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003df8:	9d54      	ldr	r5, [sp, #336]	; 0x150
 8003dfa:	186b      	adds	r3, r5, r1
 8003dfc:	70dc      	strb	r4, [r3, #3]
		signing_streams->stream[i].compid = msg->compid;
 8003dfe:	7a12      	ldrb	r2, [r2, #8]
 8003e00:	711a      	strb	r2, [r3, #4]
		signing_streams->stream[i].link_id = link_id;
 8003e02:	709e      	strb	r6, [r3, #2]
		signing_streams->num_signing_streams++;
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	802b      	strh	r3, [r5, #0]
 8003e08:	e7c8      	b.n	8003d9c <HAL_UART_RxCpltCallback+0xcf0>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	e7e0      	b.n	8003dd0 <HAL_UART_RxCpltCallback+0xd24>
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8003e0e:	1e9a      	subs	r2, r3, #2
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	2a01      	cmp	r2, #1
 8003e14:	f67f aa02 	bls.w	800321c <HAL_UART_RxCpltCallback+0x170>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f43f a953 	beq.w	80030c4 <HAL_UART_RxCpltCallback+0x18>
 8003e1e:	f7ff bb83 	b.w	8003528 <HAL_UART_RxCpltCallback+0x47c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_UART_RxCpltCallback+0xd9c>)
 8003e24:	2202      	movs	r2, #2
 8003e26:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_UART_RxCpltCallback+0xd98>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	70da      	strb	r2, [r3, #3]
	msg->checksum = crcTmp;
 8003e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	f7ff b946 	b.w	80030c4 <HAL_UART_RxCpltCallback+0x18>
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_UART_RxCpltCallback+0xd9c>)
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e75d      	b.n	8003cfc <HAL_UART_RxCpltCallback+0xc50>
 8003e40:	2000152d 	.word	0x2000152d
 8003e44:	20001410 	.word	0x20001410
 8003e48:	2000189c 	.word	0x2000189c
 8003e4c:	20001527 	.word	0x20001527
 8003e50:	005b8d80 	.word	0x005b8d80
 8003e54:	080143a0 	.word	0x080143a0

08003e58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003e58:	b508      	push	{r3, lr}
    if (htim->Instance==TIM7){
 8003e5a:	6802      	ldr	r2, [r0, #0]
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d000      	beq.n	8003e64 <HAL_TIM_PeriodElapsedCallback+0xc>
    	/*HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);*/
    	mouseDriver_controlISR();
    }
}
 8003e62:	bd08      	pop	{r3, pc}
    	mouseDriver_controlISR();
 8003e64:	f7fe fed8 	bl	8002c18 <mouseDriver_controlISR>
}
 8003e68:	e7fb      	b.n	8003e62 <HAL_TIM_PeriodElapsedCallback+0xa>
 8003e6a:	bf00      	nop
 8003e6c:	40001400 	.word	0x40001400

08003e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e70:	b530      	push	{r4, r5, lr}
 8003e72:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e74:	2224      	movs	r2, #36	; 0x24
 8003e76:	2100      	movs	r1, #0
 8003e78:	a828      	add	r0, sp, #160	; 0xa0
 8003e7a:	f00f f8a3 	bl	8012fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e7e:	2400      	movs	r4, #0
 8003e80:	9422      	str	r4, [sp, #136]	; 0x88
 8003e82:	9423      	str	r4, [sp, #140]	; 0x8c
 8003e84:	9424      	str	r4, [sp, #144]	; 0x90
 8003e86:	9425      	str	r4, [sp, #148]	; 0x94
 8003e88:	9426      	str	r4, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e8a:	2288      	movs	r2, #136	; 0x88
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4668      	mov	r0, sp
 8003e90:	f00f f898 	bl	8012fc4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e94:	2502      	movs	r5, #2
 8003e96:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e9c:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e9e:	2310      	movs	r3, #16
 8003ea0:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ea2:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ea4:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003eaa:	230a      	movs	r3, #10
 8003eac:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003eae:	2307      	movs	r3, #7
 8003eb0:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003eb2:	9536      	str	r5, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003eb4:	9537      	str	r5, [sp, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eb6:	a827      	add	r0, sp, #156	; 0x9c
 8003eb8:	f006 fa40 	bl	800a33c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ebc:	230f      	movs	r3, #15
 8003ebe:	9322      	str	r3, [sp, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ec4:	9424      	str	r4, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ec6:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ec8:	9426      	str	r4, [sp, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003eca:	2104      	movs	r1, #4
 8003ecc:	a822      	add	r0, sp, #136	; 0x88
 8003ece:	f006 fd25 	bl	800a91c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ed2:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ed4:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ed6:	4668      	mov	r0, sp
 8003ed8:	f007 f884 	bl	800afe4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003edc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ee0:	f005 fcd4 	bl	800988c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8003ee4:	b039      	add	sp, #228	; 0xe4
 8003ee6:	bd30      	pop	{r4, r5, pc}

08003ee8 <main>:
{
 8003ee8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003eec:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8003eee:	f000 fcab 	bl	8004848 <HAL_Init>
  SystemClock_Config();
 8003ef2:	f7ff ffbd 	bl	8003e70 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef6:	2400      	movs	r4, #0
 8003ef8:	9413      	str	r4, [sp, #76]	; 0x4c
 8003efa:	9414      	str	r4, [sp, #80]	; 0x50
 8003efc:	9415      	str	r4, [sp, #84]	; 0x54
 8003efe:	9416      	str	r4, [sp, #88]	; 0x58
 8003f00:	9417      	str	r4, [sp, #92]	; 0x5c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f02:	4daf      	ldr	r5, [pc, #700]	; (80041c0 <main+0x2d8>)
 8003f04:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f06:	f043 0304 	orr.w	r3, r3, #4
 8003f0a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003f0c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f16:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1c:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003f1e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f24:	9302      	str	r3, [sp, #8]
 8003f26:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f28:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003f30:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	9303      	str	r3, [sp, #12]
 8003f38:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f3a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f3c:	f043 0302 	orr.w	r3, r3, #2
 8003f40:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003f42:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	9304      	str	r3, [sp, #16]
 8003f4a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_0_Pin|CS_1_Pin, GPIO_PIN_RESET);
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	2103      	movs	r1, #3
 8003f50:	489c      	ldr	r0, [pc, #624]	; (80041c4 <main+0x2dc>)
 8003f52:	f002 fa63 	bl	800641c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PW_1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003f56:	4622      	mov	r2, r4
 8003f58:	2130      	movs	r1, #48	; 0x30
 8003f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f5e:	f002 fa5d 	bl	800641c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PW_0_GPIO_Port, PW_0_Pin, GPIO_PIN_RESET);
 8003f62:	4e99      	ldr	r6, [pc, #612]	; (80041c8 <main+0x2e0>)
 8003f64:	4622      	mov	r2, r4
 8003f66:	2101      	movs	r1, #1
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f002 fa57 	bl	800641c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f6e:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8003f72:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f76:	4b95      	ldr	r3, [pc, #596]	; (80041cc <main+0x2e4>)
 8003f78:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7a:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f7c:	a913      	add	r1, sp, #76	; 0x4c
 8003f7e:	4891      	ldr	r0, [pc, #580]	; (80041c4 <main+0x2dc>)
 8003f80:	f002 f8b0 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_0_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_0_Pin|CS_1_Pin;
 8003f84:	f04f 0a03 	mov.w	sl, #3
 8003f88:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f8c:	f04f 0801 	mov.w	r8, #1
 8003f90:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f96:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f98:	a913      	add	r1, sp, #76	; 0x4c
 8003f9a:	488a      	ldr	r0, [pc, #552]	; (80041c4 <main+0x2dc>)
 8003f9c:	f002 f8a2 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PW_1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = PW_1_Pin|LD2_Pin;
 8003fa0:	2330      	movs	r3, #48	; 0x30
 8003fa2:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fac:	a913      	add	r1, sp, #76	; 0x4c
 8003fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fb2:	f002 f897 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_0_Pin */
  GPIO_InitStruct.Pin = PW_0_Pin;
 8003fb6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fba:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(PW_0_GPIO_Port, &GPIO_InitStruct);
 8003fc2:	a913      	add	r1, sp, #76	; 0x4c
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f002 f88d 	bl	80060e4 <HAL_GPIO_Init>
  __DMA1_CLK_ENABLE();
 8003fca:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003fcc:	ea43 0308 	orr.w	r3, r3, r8
 8003fd0:	64ab      	str	r3, [r5, #72]	; 0x48
 8003fd2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003fd4:	ea03 0308 	and.w	r3, r3, r8
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	9b00      	ldr	r3, [sp, #0]
  hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fdc:	4e7c      	ldr	r6, [pc, #496]	; (80041d0 <main+0x2e8>)
 8003fde:	2310      	movs	r3, #16
 8003fe0:	60b3      	str	r3, [r6, #8]
  hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fe2:	60f4      	str	r4, [r6, #12]
  hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	6133      	str	r3, [r6, #16]
  hdma_usart2_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fe8:	6174      	str	r4, [r6, #20]
  hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fea:	61b4      	str	r4, [r6, #24]
  hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003fec:	61f4      	str	r4, [r6, #28]
  hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fee:	6234      	str	r4, [r6, #32]
  HAL_DMA_Init(&hdma_usart2_tx);
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	f000 febd 	bl	8004d70 <HAL_DMA_Init>
  __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 8003ff6:	4f77      	ldr	r7, [pc, #476]	; (80041d4 <main+0x2ec>)
 8003ff8:	66be      	str	r6, [r7, #104]	; 0x68
 8003ffa:	62b7      	str	r7, [r6, #40]	; 0x28
  huart2.Instance = USART2;
 8003ffc:	4b76      	ldr	r3, [pc, #472]	; (80041d8 <main+0x2f0>)
 8003ffe:	603b      	str	r3, [r7, #0]
  huart2.Init.BaudRate = 230400;
 8004000:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8004004:	607b      	str	r3, [r7, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004006:	60bc      	str	r4, [r7, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004008:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800400a:	613c      	str	r4, [r7, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800400c:	230c      	movs	r3, #12
 800400e:	617b      	str	r3, [r7, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004010:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004012:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004014:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004016:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004018:	4638      	mov	r0, r7
 800401a:	f00e fd68 	bl	8012aee <HAL_UART_Init>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800401e:	9413      	str	r4, [sp, #76]	; 0x4c
 8004020:	9414      	str	r4, [sp, #80]	; 0x50
 8004022:	9415      	str	r4, [sp, #84]	; 0x54
  htim7.Instance = TIM7;
 8004024:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80041f0 <main+0x308>
 8004028:	4b6c      	ldr	r3, [pc, #432]	; (80041dc <main+0x2f4>)
 800402a:	f8c9 3000 	str.w	r3, [r9]
  htim7.Init.Prescaler = PRESCALER_HEART;
 800402e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004032:	f8c9 3004 	str.w	r3, [r9, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004036:	f8c9 4008 	str.w	r4, [r9, #8]
  htim7.Init.Period = COUNTER_PERIOD_HEART;
 800403a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800403e:	f8c9 300c 	str.w	r3, [r9, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004042:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004046:	4648      	mov	r0, r9
 8004048:	f00a fdac 	bl	800eba4 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800404c:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800404e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004050:	a913      	add	r1, sp, #76	; 0x4c
 8004052:	4648      	mov	r0, r9
 8004054:	f00d f9d0 	bl	80113f8 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004058:	9408      	str	r4, [sp, #32]
 800405a:	9409      	str	r4, [sp, #36]	; 0x24
 800405c:	940a      	str	r4, [sp, #40]	; 0x28
 800405e:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004060:	9405      	str	r4, [sp, #20]
 8004062:	9406      	str	r4, [sp, #24]
 8004064:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004066:	940c      	str	r4, [sp, #48]	; 0x30
 8004068:	940d      	str	r4, [sp, #52]	; 0x34
 800406a:	940e      	str	r4, [sp, #56]	; 0x38
 800406c:	940f      	str	r4, [sp, #60]	; 0x3c
 800406e:	9410      	str	r4, [sp, #64]	; 0x40
 8004070:	9411      	str	r4, [sp, #68]	; 0x44
 8004072:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004074:	222c      	movs	r2, #44	; 0x2c
 8004076:	4621      	mov	r1, r4
 8004078:	a813      	add	r0, sp, #76	; 0x4c
 800407a:	f00e ffa3 	bl	8012fc4 <memset>
  htim1.Instance = TIM1;
 800407e:	4e58      	ldr	r6, [pc, #352]	; (80041e0 <main+0x2f8>)
 8004080:	4b58      	ldr	r3, [pc, #352]	; (80041e4 <main+0x2fc>)
 8004082:	6033      	str	r3, [r6, #0]
  htim1.Init.Prescaler = PRESCALER_PWM;
 8004084:	2309      	movs	r3, #9
 8004086:	6073      	str	r3, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004088:	60b4      	str	r4, [r6, #8]
  htim1.Init.Period = COUNTER_PERIOD_PWM;
 800408a:	23ff      	movs	r3, #255	; 0xff
 800408c:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800408e:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8004090:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004092:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004094:	4630      	mov	r0, r6
 8004096:	f00a fd85 	bl	800eba4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800409a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800409e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040a0:	a908      	add	r1, sp, #32
 80040a2:	4630      	mov	r0, r6
 80040a4:	f00b f98e 	bl	800f3c4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80040a8:	4630      	mov	r0, r6
 80040aa:	f00a fdad 	bl	800ec08 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ae:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040b0:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040b2:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040b4:	a905      	add	r1, sp, #20
 80040b6:	4630      	mov	r0, r6
 80040b8:	f00d f99e 	bl	80113f8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040bc:	2360      	movs	r3, #96	; 0x60
 80040be:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = PULSE_PWM;
 80040c0:	230a      	movs	r3, #10
 80040c2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040c4:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040c6:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040c8:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040ca:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040cc:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040ce:	4622      	mov	r2, r4
 80040d0:	a90c      	add	r1, sp, #48	; 0x30
 80040d2:	4630      	mov	r0, r6
 80040d4:	f00a febf 	bl	800ee56 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040d8:	2204      	movs	r2, #4
 80040da:	a90c      	add	r1, sp, #48	; 0x30
 80040dc:	4630      	mov	r0, r6
 80040de:	f00a feba 	bl	800ee56 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040e2:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040e4:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040e6:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 80040e8:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040ea:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040ec:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakFilter = 0;
 80040f0:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80040f2:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80040f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040f8:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2Filter = 0;
 80040fa:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040fc:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040fe:	a913      	add	r1, sp, #76	; 0x4c
 8004100:	4630      	mov	r0, r6
 8004102:	f00d f9ab 	bl	801145c <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8004106:	4630      	mov	r0, r6
 8004108:	f000 f93e 	bl	8004388 <HAL_TIM_MspPostInit>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800410c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800410e:	ea43 0308 	orr.w	r3, r3, r8
 8004112:	64ab      	str	r3, [r5, #72]	; 0x48
 8004114:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004116:	ea03 0308 	and.w	r3, r3, r8
 800411a:	9313      	str	r3, [sp, #76]	; 0x4c
 800411c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800411e:	4622      	mov	r2, r4
 8004120:	4621      	mov	r1, r4
 8004122:	2011      	movs	r0, #17
 8004124:	f000 fcd0 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004128:	2011      	movs	r0, #17
 800412a:	f000 fcff 	bl	8004b2c <HAL_NVIC_EnableIRQ>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 800412e:	2108      	movs	r1, #8
 8004130:	4824      	ldr	r0, [pc, #144]	; (80041c4 <main+0x2dc>)
 8004132:	f002 f8cd 	bl	80062d0 <HAL_GPIO_DeInit>
  __HAL_RCC_SPI2_CLK_ENABLE();
 8004136:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800413c:	65ab      	str	r3, [r5, #88]	; 0x58
 800413e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004144:	9308      	str	r3, [sp, #32]
 8004146:	9b08      	ldr	r3, [sp, #32]
  __SPI2_CLK_ENABLE();
 8004148:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800414a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800414e:	65ab      	str	r3, [r5, #88]	; 0x58
 8004150:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004156:	930c      	str	r3, [sp, #48]	; 0x30
 8004158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  hspi2.Instance = SPI2;
 800415a:	4823      	ldr	r0, [pc, #140]	; (80041e8 <main+0x300>)
 800415c:	4b23      	ldr	r3, [pc, #140]	; (80041ec <main+0x304>)
 800415e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004160:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004164:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004166:	6084      	str	r4, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004168:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800416c:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800416e:	2502      	movs	r5, #2
 8004170:	6105      	str	r5, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004172:	f8c0 8014 	str.w	r8, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800417a:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800417c:	2338      	movs	r3, #56	; 0x38
 800417e:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004180:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004182:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004184:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004186:	2307      	movs	r3, #7
 8004188:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800418a:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800418c:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800418e:	f008 f92c 	bl	800c3ea <HAL_SPI_Init>
  HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 8004192:	4622      	mov	r2, r4
 8004194:	4621      	mov	r1, r4
 8004196:	2026      	movs	r0, #38	; 0x26
 8004198:	f000 fc96 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800419c:	2026      	movs	r0, #38	; 0x26
 800419e:	f000 fcc5 	bl	8004b2c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM7_IRQn,2,2);
 80041a2:	462a      	mov	r2, r5
 80041a4:	4629      	mov	r1, r5
 80041a6:	2037      	movs	r0, #55	; 0x37
 80041a8:	f000 fc8e 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80041ac:	2037      	movs	r0, #55	; 0x37
 80041ae:	f000 fcbd 	bl	8004b2c <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, CS_0_Pin|CS_1_Pin, GPIO_PIN_SET);
 80041b2:	4642      	mov	r2, r8
 80041b4:	4651      	mov	r1, sl
 80041b6:	4803      	ldr	r0, [pc, #12]	; (80041c4 <main+0x2dc>)
 80041b8:	f002 f930 	bl	800641c <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, &inByte, 1);
 80041bc:	4642      	mov	r2, r8
 80041be:	e019      	b.n	80041f4 <main+0x30c>
 80041c0:	40021000 	.word	0x40021000
 80041c4:	48000800 	.word	0x48000800
 80041c8:	48000400 	.word	0x48000400
 80041cc:	10210000 	.word	0x10210000
 80041d0:	20001968 	.word	0x20001968
 80041d4:	200019f0 	.word	0x200019f0
 80041d8:	40004400 	.word	0x40004400
 80041dc:	40001400 	.word	0x40001400
 80041e0:	200019b0 	.word	0x200019b0
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	20001904 	.word	0x20001904
 80041ec:	40003800 	.word	0x40003800
 80041f0:	20001a70 	.word	0x20001a70
 80041f4:	4908      	ldr	r1, [pc, #32]	; (8004218 <main+0x330>)
 80041f6:	4638      	mov	r0, r7
 80041f8:	f00d fafc 	bl	80117f4 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80041fc:	4648      	mov	r0, r9
 80041fe:	f009 feef 	bl	800dfe0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8004202:	4642      	mov	r2, r8
 8004204:	4641      	mov	r1, r8
 8004206:	4805      	ldr	r0, [pc, #20]	; (800421c <main+0x334>)
 8004208:	f002 f908 	bl	800641c <HAL_GPIO_WritePin>
  mouseDriver_init();
 800420c:	f7fe fbcc 	bl	80029a8 <mouseDriver_init>
	 mouseDriver_idle();
 8004210:	f7fe fc50 	bl	8002ab4 <mouseDriver_idle>
 8004214:	e7fc      	b.n	8004210 <main+0x328>
 8004216:	bf00      	nop
 8004218:	2000140f 	.word	0x2000140f
 800421c:	48000800 	.word	0x48000800

08004220 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004220:	4770      	bx	lr
	...

08004224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004224:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004226:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_MspInit+0x2c>)
 8004228:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
 8004230:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004232:	f002 0201 	and.w	r2, r2, #1
 8004236:	9200      	str	r2, [sp, #0]
 8004238:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800423c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004240:	659a      	str	r2, [r3, #88]	; 0x58
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800424c:	b002      	add	sp, #8
 800424e:	4770      	bx	lr
 8004250:	40021000 	.word	0x40021000

08004254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	2300      	movs	r3, #0
 800425a:	9303      	str	r3, [sp, #12]
 800425c:	9304      	str	r3, [sp, #16]
 800425e:	9305      	str	r3, [sp, #20]
 8004260:	9306      	str	r3, [sp, #24]
 8004262:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8004264:	6802      	ldr	r2, [r0, #0]
 8004266:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <HAL_SPI_MspInit+0x8c>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800426c:	b008      	add	sp, #32
 800426e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004270:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8004274:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427a:	659a      	str	r2, [r3, #88]	; 0x58
 800427c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800427e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004282:	9200      	str	r2, [sp, #0]
 8004284:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004288:	f042 0204 	orr.w	r2, r2, #4
 800428c:	64da      	str	r2, [r3, #76]	; 0x4c
 800428e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004290:	f002 0204 	and.w	r2, r2, #4
 8004294:	9201      	str	r2, [sp, #4]
 8004296:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800429a:	f042 0202 	orr.w	r2, r2, #2
 800429e:	64da      	str	r2, [r3, #76]	; 0x4c
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	9302      	str	r3, [sp, #8]
 80042a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042aa:	230c      	movs	r3, #12
 80042ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2602      	movs	r6, #2
 80042b0:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b2:	2503      	movs	r5, #3
 80042b4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042b6:	2405      	movs	r4, #5
 80042b8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ba:	eb0d 0103 	add.w	r1, sp, r3
 80042be:	4809      	ldr	r0, [pc, #36]	; (80042e4 <HAL_SPI_MspInit+0x90>)
 80042c0:	f001 ff10 	bl	80060e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ca:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042d2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d4:	a903      	add	r1, sp, #12
 80042d6:	4804      	ldr	r0, [pc, #16]	; (80042e8 <HAL_SPI_MspInit+0x94>)
 80042d8:	f001 ff04 	bl	80060e4 <HAL_GPIO_Init>
}
 80042dc:	e7c6      	b.n	800426c <HAL_SPI_MspInit+0x18>
 80042de:	bf00      	nop
 80042e0:	40003800 	.word	0x40003800
 80042e4:	48000800 	.word	0x48000800
 80042e8:	48000400 	.word	0x48000400

080042ec <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80042ec:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 80042ee:	6802      	ldr	r2, [r0, #0]
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_SPI_MspDeInit+0x2c>)
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d000      	beq.n	80042f8 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80042f6:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 80042f8:	4a08      	ldr	r2, [pc, #32]	; (800431c <HAL_SPI_MspDeInit+0x30>)
 80042fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80042fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004300:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8004302:	210c      	movs	r1, #12
 8004304:	4806      	ldr	r0, [pc, #24]	; (8004320 <HAL_SPI_MspDeInit+0x34>)
 8004306:	f001 ffe3 	bl	80062d0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800430a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800430e:	4805      	ldr	r0, [pc, #20]	; (8004324 <HAL_SPI_MspDeInit+0x38>)
 8004310:	f001 ffde 	bl	80062d0 <HAL_GPIO_DeInit>
}
 8004314:	e7ef      	b.n	80042f6 <HAL_SPI_MspDeInit+0xa>
 8004316:	bf00      	nop
 8004318:	40003800 	.word	0x40003800
 800431c:	40021000 	.word	0x40021000
 8004320:	48000800 	.word	0x48000800
 8004324:	48000400 	.word	0x48000400

08004328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004328:	b500      	push	{lr}
 800432a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 800432c:	6803      	ldr	r3, [r0, #0]
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <HAL_TIM_Base_MspInit+0x54>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d005      	beq.n	8004340 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8004334:	4a12      	ldr	r2, [pc, #72]	; (8004380 <HAL_TIM_Base_MspInit+0x58>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00d      	beq.n	8004356 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800433a:	b003      	add	sp, #12
 800433c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004340:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_TIM_Base_MspInit+0x5c>)
 8004342:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004348:	661a      	str	r2, [r3, #96]	; 0x60
 800434a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	e7f1      	b.n	800433a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_TIM_Base_MspInit+0x5c>)
 8004358:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800435a:	f042 0220 	orr.w	r2, r2, #32
 800435e:	659a      	str	r2, [r3, #88]	; 0x58
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	4611      	mov	r1, r2
 800436e:	2037      	movs	r0, #55	; 0x37
 8004370:	f000 fbaa 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004374:	2037      	movs	r0, #55	; 0x37
 8004376:	f000 fbd9 	bl	8004b2c <HAL_NVIC_EnableIRQ>
}
 800437a:	e7de      	b.n	800433a <HAL_TIM_Base_MspInit+0x12>
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40001400 	.word	0x40001400
 8004384:	40021000 	.word	0x40021000

08004388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004388:	b500      	push	{lr}
 800438a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800438c:	2300      	movs	r3, #0
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	9302      	str	r3, [sp, #8]
 8004392:	9303      	str	r3, [sp, #12]
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8004398:	6802      	ldr	r2, [r0, #0]
 800439a:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <HAL_TIM_MspPostInit+0x50>)
 800439c:	429a      	cmp	r2, r3
 800439e:	d002      	beq.n	80043a6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043a0:	b007      	add	sp, #28
 80043a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80043aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80043b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80043bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	2302      	movs	r3, #2
 80043c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ca:	a901      	add	r1, sp, #4
 80043cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043d0:	f001 fe88 	bl	80060e4 <HAL_GPIO_Init>
}
 80043d4:	e7e4      	b.n	80043a0 <HAL_TIM_MspPostInit+0x18>
 80043d6:	bf00      	nop
 80043d8:	40012c00 	.word	0x40012c00

080043dc <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80043dc:	b508      	push	{r3, lr}
  if(htim_base->Instance==TIM1)
 80043de:	6803      	ldr	r3, [r0, #0]
 80043e0:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <HAL_TIM_Base_MspDeInit+0x34>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_Base_MspDeInit+0x12>
    __HAL_RCC_TIM1_CLK_DISABLE();
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 80043e6:	4a0b      	ldr	r2, [pc, #44]	; (8004414 <HAL_TIM_Base_MspDeInit+0x38>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d007      	beq.n	80043fc <HAL_TIM_Base_MspDeInit+0x20>
  /* USER CODE BEGIN TIM7_MspDeInit 1 */

  /* USER CODE END TIM7_MspDeInit 1 */
  }

}
 80043ec:	bd08      	pop	{r3, pc}
    __HAL_RCC_TIM1_CLK_DISABLE();
 80043ee:	f502 4264 	add.w	r2, r2, #58368	; 0xe400
 80043f2:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80043f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043f8:	6613      	str	r3, [r2, #96]	; 0x60
 80043fa:	e7f7      	b.n	80043ec <HAL_TIM_Base_MspDeInit+0x10>
    __HAL_RCC_TIM7_CLK_DISABLE();
 80043fc:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 8004400:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004402:	f023 0320 	bic.w	r3, r3, #32
 8004406:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8004408:	2037      	movs	r0, #55	; 0x37
 800440a:	f000 fb9d 	bl	8004b48 <HAL_NVIC_DisableIRQ>
}
 800440e:	e7ed      	b.n	80043ec <HAL_TIM_Base_MspDeInit+0x10>
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40001400 	.word	0x40001400

08004418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004418:	b530      	push	{r4, r5, lr}
 800441a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	2300      	movs	r3, #0
 800441e:	9303      	str	r3, [sp, #12]
 8004420:	9304      	str	r3, [sp, #16]
 8004422:	9305      	str	r3, [sp, #20]
 8004424:	9306      	str	r3, [sp, #24]
 8004426:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8004428:	6802      	ldr	r2, [r0, #0]
 800442a:	4b23      	ldr	r3, [pc, #140]	; (80044b8 <HAL_UART_MspInit+0xa0>)
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004430:	b009      	add	sp, #36	; 0x24
 8004432:	bd30      	pop	{r4, r5, pc}
 8004434:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8004436:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800443a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800443c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004440:	659a      	str	r2, [r3, #88]	; 0x58
 8004442:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004444:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004448:	9201      	str	r2, [sp, #4]
 800444a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	64da      	str	r2, [r3, #76]	; 0x4c
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800445e:	230c      	movs	r3, #12
 8004460:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004462:	2502      	movs	r5, #2
 8004464:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004466:	2303      	movs	r3, #3
 8004468:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800446a:	2307      	movs	r3, #7
 800446c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446e:	a903      	add	r1, sp, #12
 8004470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004474:	f001 fe36 	bl	80060e4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004478:	4810      	ldr	r0, [pc, #64]	; (80044bc <HAL_UART_MspInit+0xa4>)
 800447a:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <HAL_UART_MspInit+0xa8>)
 800447c:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800447e:	6045      	str	r5, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004480:	2310      	movs	r3, #16
 8004482:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004484:	2300      	movs	r3, #0
 8004486:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004488:	2280      	movs	r2, #128	; 0x80
 800448a:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800448c:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800448e:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004490:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004492:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004494:	f000 fc6c 	bl	8004d70 <HAL_DMA_Init>
 8004498:	b958      	cbnz	r0, 80044b2 <HAL_UART_MspInit+0x9a>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_UART_MspInit+0xa4>)
 800449c:	66a3      	str	r3, [r4, #104]	; 0x68
 800449e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80044a0:	2200      	movs	r2, #0
 80044a2:	4611      	mov	r1, r2
 80044a4:	2026      	movs	r0, #38	; 0x26
 80044a6:	f000 fb0f 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044aa:	2026      	movs	r0, #38	; 0x26
 80044ac:	f000 fb3e 	bl	8004b2c <HAL_NVIC_EnableIRQ>
}
 80044b0:	e7be      	b.n	8004430 <HAL_UART_MspInit+0x18>
      Error_Handler();
 80044b2:	f7ff feb5 	bl	8004220 <Error_Handler>
 80044b6:	e7f0      	b.n	800449a <HAL_UART_MspInit+0x82>
 80044b8:	40004400 	.word	0x40004400
 80044bc:	20001968 	.word	0x20001968
 80044c0:	40020080 	.word	0x40020080

080044c4 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 80044c4:	6802      	ldr	r2, [r0, #0]
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_UART_MspDeInit+0x30>)
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d000      	beq.n	80044ce <HAL_UART_MspDeInit+0xa>
 80044cc:	4770      	bx	lr
{
 80044ce:	b510      	push	{r4, lr}
 80044d0:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80044d2:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <HAL_UART_MspDeInit+0x34>)
 80044d4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80044d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044da:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 80044dc:	210c      	movs	r1, #12
 80044de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044e2:	f001 fef5 	bl	80062d0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80044e6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80044e8:	f000 fcae 	bl	8004e48 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80044ec:	2026      	movs	r0, #38	; 0x26
 80044ee:	f000 fb2b 	bl	8004b48 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80044f2:	bd10      	pop	{r4, pc}
 80044f4:	40004400 	.word	0x40004400
 80044f8:	40021000 	.word	0x40021000

080044fc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80044fc:	4770      	bx	lr

080044fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044fe:	e7fe      	b.n	80044fe <HardFault_Handler>

08004500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004500:	e7fe      	b.n	8004500 <MemManage_Handler>

08004502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004502:	e7fe      	b.n	8004502 <BusFault_Handler>

08004504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004504:	e7fe      	b.n	8004504 <UsageFault_Handler>

08004506 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004506:	4770      	bx	lr

08004508 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004508:	4770      	bx	lr

0800450a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800450a:	4770      	bx	lr

0800450c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800450c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800450e:	f000 f9b1 	bl	8004874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004512:	bd08      	pop	{r3, pc}

08004514 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004514:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004516:	4802      	ldr	r0, [pc, #8]	; (8004520 <DMA1_Channel7_IRQHandler+0xc>)
 8004518:	f000 fe35 	bl	8005186 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800451c:	bd08      	pop	{r3, pc}
 800451e:	bf00      	nop
 8004520:	20001968 	.word	0x20001968

08004524 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004524:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004526:	4802      	ldr	r0, [pc, #8]	; (8004530 <USART2_IRQHandler+0xc>)
 8004528:	f00d fc9e 	bl	8011e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800452c:	bd08      	pop	{r3, pc}
 800452e:	bf00      	nop
 8004530:	200019f0 	.word	0x200019f0

08004534 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004534:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004536:	4802      	ldr	r0, [pc, #8]	; (8004540 <TIM7_IRQHandler+0xc>)
 8004538:	f00a f99e 	bl	800e878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800453c:	bd08      	pop	{r3, pc}
 800453e:	bf00      	nop
 8004540:	20001a70 	.word	0x20001a70

08004544 <initialise_monitor_handles>:


/* Functions */
void initialise_monitor_handles()
{
}
 8004544:	4770      	bx	lr

08004546 <_getpid>:

int _getpid(void)
{
	return 1;
}
 8004546:	2001      	movs	r0, #1
 8004548:	4770      	bx	lr

0800454a <_kill>:

int _kill(int pid, int sig)
{
 800454a:	b508      	push	{r3, lr}
	errno = EINVAL;
 800454c:	f00e fce6 	bl	8012f1c <__errno>
 8004550:	2316      	movs	r3, #22
 8004552:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004558:	bd08      	pop	{r3, pc}

0800455a <_exit>:

void _exit (int status)
{
 800455a:	b508      	push	{r3, lr}
	errno = EINVAL;
 800455c:	f00e fcde 	bl	8012f1c <__errno>
 8004560:	2316      	movs	r3, #22
 8004562:	6003      	str	r3, [r0, #0]
 8004564:	e7fe      	b.n	8004564 <_exit+0xa>

08004566 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004566:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004568:	1e16      	subs	r6, r2, #0
 800456a:	dd07      	ble.n	800457c <_read+0x16>
 800456c:	460c      	mov	r4, r1
 800456e:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004570:	f3af 8000 	nop.w
 8004574:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004578:	42a5      	cmp	r5, r4
 800457a:	d1f9      	bne.n	8004570 <_read+0xa>
	}

return len;
}
 800457c:	4630      	mov	r0, r6
 800457e:	bd70      	pop	{r4, r5, r6, pc}

08004580 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004580:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004582:	1e16      	subs	r6, r2, #0
 8004584:	dd07      	ble.n	8004596 <_write+0x16>
 8004586:	460c      	mov	r4, r1
 8004588:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800458a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800458e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004592:	42a5      	cmp	r5, r4
 8004594:	d1f9      	bne.n	800458a <_write+0xa>
	}
	return len;
}
 8004596:	4630      	mov	r0, r6
 8004598:	bd70      	pop	{r4, r5, r6, pc}

0800459a <_close>:

int _close(int file)
{
	return -1;
}
 800459a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800459e:	4770      	bx	lr

080045a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80045a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045a4:	604b      	str	r3, [r1, #4]
	return 0;
}
 80045a6:	2000      	movs	r0, #0
 80045a8:	4770      	bx	lr

080045aa <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80045aa:	2001      	movs	r0, #1
 80045ac:	4770      	bx	lr

080045ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80045ae:	2000      	movs	r0, #0
 80045b0:	4770      	bx	lr

080045b2 <_open>:

int _open(char *path, int flags, ...)
{
 80045b2:	b40e      	push	{r1, r2, r3}
	/* Pretend like we always fail */
	return -1;
}
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b8:	b003      	add	sp, #12
 80045ba:	4770      	bx	lr

080045bc <_wait>:

int _wait(int *status)
{
 80045bc:	b508      	push	{r3, lr}
	errno = ECHILD;
 80045be:	f00e fcad 	bl	8012f1c <__errno>
 80045c2:	230a      	movs	r3, #10
 80045c4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80045c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ca:	bd08      	pop	{r3, pc}

080045cc <_unlink>:

int _unlink(char *name)
{
 80045cc:	b508      	push	{r3, lr}
	errno = ENOENT;
 80045ce:	f00e fca5 	bl	8012f1c <__errno>
 80045d2:	2302      	movs	r3, #2
 80045d4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045da:	bd08      	pop	{r3, pc}

080045dc <_times>:

int _times(struct tms *buf)
{
	return -1;
}
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e0:	4770      	bx	lr

080045e2 <_stat>:

int _stat(char *file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80045e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045e6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80045e8:	2000      	movs	r0, #0
 80045ea:	4770      	bx	lr

080045ec <_link>:

int _link(char *old, char *new)
{
 80045ec:	b508      	push	{r3, lr}
	errno = EMLINK;
 80045ee:	f00e fc95 	bl	8012f1c <__errno>
 80045f2:	231f      	movs	r3, #31
 80045f4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80045f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045fa:	bd08      	pop	{r3, pc}

080045fc <_fork>:

int _fork(void)
{
 80045fc:	b508      	push	{r3, lr}
	errno = EAGAIN;
 80045fe:	f00e fc8d 	bl	8012f1c <__errno>
 8004602:	230b      	movs	r3, #11
 8004604:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800460a:	bd08      	pop	{r3, pc}

0800460c <_execve>:

int _execve(char *name, char **argv, char **env)
{
 800460c:	b508      	push	{r3, lr}
	errno = ENOMEM;
 800460e:	f00e fc85 	bl	8012f1c <__errno>
 8004612:	230c      	movs	r3, #12
 8004614:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800461a:	bd08      	pop	{r3, pc}

0800461c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800461c:	b508      	push	{r3, lr}
 800461e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004620:	4a0b      	ldr	r2, [pc, #44]	; (8004650 <_sbrk+0x34>)
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	b142      	cbz	r2, 8004638 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004626:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <_sbrk+0x34>)
 8004628:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800462a:	4403      	add	r3, r0
 800462c:	466a      	mov	r2, sp
 800462e:	4293      	cmp	r3, r2
 8004630:	d806      	bhi.n	8004640 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004632:	4a07      	ldr	r2, [pc, #28]	; (8004650 <_sbrk+0x34>)
 8004634:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004636:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004638:	4a05      	ldr	r2, [pc, #20]	; (8004650 <_sbrk+0x34>)
 800463a:	4906      	ldr	r1, [pc, #24]	; (8004654 <_sbrk+0x38>)
 800463c:	6011      	str	r1, [r2, #0]
 800463e:	e7f2      	b.n	8004626 <_sbrk+0xa>
		errno = ENOMEM;
 8004640:	f00e fc6c 	bl	8012f1c <__errno>
 8004644:	230c      	movs	r3, #12
 8004646:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800464c:	e7f3      	b.n	8004636 <_sbrk+0x1a>
 800464e:	bf00      	nop
 8004650:	20001900 	.word	0x20001900
 8004654:	20001ac0 	.word	0x20001ac0

08004658 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004658:	490f      	ldr	r1, [pc, #60]	; (8004698 <SystemInit+0x40>)
 800465a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800465e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <SystemInit+0x44>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004670:	2000      	movs	r0, #0
 8004672:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800467a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800467e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004684:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800468c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800468e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004690:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004694:	608b      	str	r3, [r1, #8]
#endif
}
 8004696:	4770      	bx	lr
 8004698:	e000ed00 	.word	0xe000ed00
 800469c:	40021000 	.word	0x40021000

080046a0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 80046a0:	4b2e      	ldr	r3, [pc, #184]	; (800475c <SystemCoreClockUpdate+0xbc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f013 0f08 	tst.w	r3, #8
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80046a8:	4b2c      	ldr	r3, [pc, #176]	; (800475c <SystemCoreClockUpdate+0xbc>)
 80046aa:	bf07      	ittee	eq
 80046ac:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 80046b0:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80046b4:	681b      	ldrne	r3, [r3, #0]
 80046b6:	f3c3 1303 	ubfxne	r3, r3, #4, #4
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80046ba:	4a29      	ldr	r2, [pc, #164]	; (8004760 <SystemCoreClockUpdate+0xc0>)
 80046bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c0:	4a26      	ldr	r2, [pc, #152]	; (800475c <SystemCoreClockUpdate+0xbc>)
 80046c2:	6893      	ldr	r3, [r2, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d843      	bhi.n	8004754 <SystemCoreClockUpdate+0xb4>
 80046cc:	e8df f003 	tbb	[pc, r3]
 80046d0:	42424207 	.word	0x42424207
 80046d4:	42424214 	.word	0x42424214
 80046d8:	42424218 	.word	0x42424218
 80046dc:	1c          	.byte	0x1c
 80046dd:	00          	.byte	0x00
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80046de:	4b21      	ldr	r3, [pc, #132]	; (8004764 <SystemCoreClockUpdate+0xc4>)
 80046e0:	6019      	str	r1, [r3, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80046e2:	4b1e      	ldr	r3, [pc, #120]	; (800475c <SystemCoreClockUpdate+0xbc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80046e6:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <SystemCoreClockUpdate+0xc4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80046e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80046ec:	491e      	ldr	r1, [pc, #120]	; (8004768 <SystemCoreClockUpdate+0xc8>)
 80046ee:	5cc9      	ldrb	r1, [r1, r3]
  SystemCoreClock >>= tmp;
 80046f0:	6813      	ldr	r3, [r2, #0]
 80046f2:	40cb      	lsrs	r3, r1
 80046f4:	6013      	str	r3, [r2, #0]
}
 80046f6:	4770      	bx	lr
      SystemCoreClock = HSI_VALUE;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <SystemCoreClockUpdate+0xc4>)
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <SystemCoreClockUpdate+0xcc>)
 80046fc:	601a      	str	r2, [r3, #0]
      break;
 80046fe:	e7f0      	b.n	80046e2 <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSE_VALUE;
 8004700:	4b18      	ldr	r3, [pc, #96]	; (8004764 <SystemCoreClockUpdate+0xc4>)
 8004702:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <SystemCoreClockUpdate+0xd0>)
 8004704:	601a      	str	r2, [r3, #0]
      break;
 8004706:	e7ec      	b.n	80046e2 <SystemCoreClockUpdate+0x42>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <SystemCoreClockUpdate+0xbc>)
 800470a:	68da      	ldr	r2, [r3, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004712:	3301      	adds	r3, #1
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004714:	f002 0203 	and.w	r2, r2, #3
      switch (pllsource)
 8004718:	2a02      	cmp	r2, #2
 800471a:	d004      	beq.n	8004726 <SystemCoreClockUpdate+0x86>
 800471c:	2a03      	cmp	r2, #3
 800471e:	d015      	beq.n	800474c <SystemCoreClockUpdate+0xac>
          pllvco = (msirange / pllm);
 8004720:	fbb1 f3f3 	udiv	r3, r1, r3
          break;
 8004724:	e002      	b.n	800472c <SystemCoreClockUpdate+0x8c>
          pllvco = (HSI_VALUE / pllm);
 8004726:	4a11      	ldr	r2, [pc, #68]	; (800476c <SystemCoreClockUpdate+0xcc>)
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800472c:	4a0b      	ldr	r2, [pc, #44]	; (800475c <SystemCoreClockUpdate+0xbc>)
 800472e:	68d1      	ldr	r1, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8004730:	68d2      	ldr	r2, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8004732:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8004736:	fb03 f301 	mul.w	r3, r3, r1
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800473a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800473e:	3201      	adds	r2, #1
 8004740:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8004742:	fbb3 f3f2 	udiv	r3, r3, r2
 8004746:	4a07      	ldr	r2, [pc, #28]	; (8004764 <SystemCoreClockUpdate+0xc4>)
 8004748:	6013      	str	r3, [r2, #0]
      break;
 800474a:	e7ca      	b.n	80046e2 <SystemCoreClockUpdate+0x42>
          pllvco = (HSE_VALUE / pllm);
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <SystemCoreClockUpdate+0xd0>)
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
          break;
 8004752:	e7eb      	b.n	800472c <SystemCoreClockUpdate+0x8c>
      SystemCoreClock = msirange;
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <SystemCoreClockUpdate+0xc4>)
 8004756:	6019      	str	r1, [r3, #0]
      break;
 8004758:	e7c3      	b.n	80046e2 <SystemCoreClockUpdate+0x42>
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	080144b8 	.word	0x080144b8
 8004764:	20000008 	.word	0x20000008
 8004768:	080144a0 	.word	0x080144a0
 800476c:	00f42400 	.word	0x00f42400
 8004770:	007a1200 	.word	0x007a1200

08004774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004778:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800477a:	e003      	b.n	8004784 <LoopCopyDataInit>

0800477c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800477e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004780:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004782:	3104      	adds	r1, #4

08004784 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004784:	480b      	ldr	r0, [pc, #44]	; (80047b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004788:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800478a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800478c:	d3f6      	bcc.n	800477c <CopyDataInit>
	ldr	r2, =_sbss
 800478e:	4a0b      	ldr	r2, [pc, #44]	; (80047bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8004790:	e002      	b.n	8004798 <LoopFillZerobss>

08004792 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004792:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004794:	f842 3b04 	str.w	r3, [r2], #4

08004798 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <LoopForever+0x16>)
	cmp	r2, r3
 800479a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800479c:	d3f9      	bcc.n	8004792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800479e:	f7ff ff5b 	bl	8004658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047a2:	f00e fbd1 	bl	8012f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80047a6:	f7ff fb9f 	bl	8003ee8 <main>

080047aa <LoopForever>:

LoopForever:
    b LoopForever
 80047aa:	e7fe      	b.n	80047aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80047ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80047b0:	08014500 	.word	0x08014500
	ldr	r0, =_sdata
 80047b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80047b8:	20000464 	.word	0x20000464
	ldr	r2, =_sbss
 80047bc:	20000464 	.word	0x20000464
	ldr	r3, = _ebss
 80047c0:	20001ac0 	.word	0x20001ac0

080047c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047c4:	e7fe      	b.n	80047c4 <ADC1_2_IRQHandler>
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80047c6:	4770      	bx	lr

080047c8 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_DeInit>:
{
 80047cc:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_DeInit+0x28>)
 80047d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 80047d6:	2400      	movs	r4, #0
 80047d8:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_RCC_APB2_FORCE_RESET();
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 80047dc:	641c      	str	r4, [r3, #64]	; 0x40
  __HAL_RCC_AHB1_FORCE_RESET();
 80047de:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 80047e0:	629c      	str	r4, [r3, #40]	; 0x28
  __HAL_RCC_AHB2_FORCE_RESET();
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 80047e4:	62dc      	str	r4, [r3, #44]	; 0x2c
  __HAL_RCC_AHB3_FORCE_RESET();
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 80047e8:	631c      	str	r4, [r3, #48]	; 0x30
  HAL_MspDeInit();
 80047ea:	f7ff ffed 	bl	80047c8 <HAL_MspDeInit>
}
 80047ee:	4620      	mov	r0, r4
 80047f0:	bd10      	pop	{r4, pc}
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000

080047f8 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <HAL_InitTick+0x44>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	b90b      	cbnz	r3, 8004802 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80047fe:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004800:	4770      	bx	lr
{
 8004802:	b510      	push	{r4, lr}
 8004804:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800480a:	fbb0 f3f3 	udiv	r3, r0, r3
 800480e:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <HAL_InitTick+0x48>)
 8004810:	6810      	ldr	r0, [r2, #0]
 8004812:	fbb0 f0f3 	udiv	r0, r0, r3
 8004816:	f000 f9bd 	bl	8004b94 <HAL_SYSTICK_Config>
 800481a:	b968      	cbnz	r0, 8004838 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800481c:	2c0f      	cmp	r4, #15
 800481e:	d901      	bls.n	8004824 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8004820:	2001      	movs	r0, #1
 8004822:	e00a      	b.n	800483a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004824:	2200      	movs	r2, #0
 8004826:	4621      	mov	r1, r4
 8004828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800482c:	f000 f94c 	bl	8004ac8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <HAL_InitTick+0x4c>)
 8004832:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8004834:	2000      	movs	r0, #0
 8004836:	e000      	b.n	800483a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8004838:	2001      	movs	r0, #1
}
 800483a:	bd10      	pop	{r4, pc}
 800483c:	2000000c 	.word	0x2000000c
 8004840:	20000008 	.word	0x20000008
 8004844:	20000010 	.word	0x20000010

08004848 <HAL_Init>:
{
 8004848:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_Init+0x28>)
 800484c:	6813      	ldr	r3, [r2, #0]
 800484e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004852:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004854:	2003      	movs	r0, #3
 8004856:	f000 f925 	bl	8004aa4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800485a:	2000      	movs	r0, #0
 800485c:	f7ff ffcc 	bl	80047f8 <HAL_InitTick>
 8004860:	b110      	cbz	r0, 8004868 <HAL_Init+0x20>
    status = HAL_ERROR;
 8004862:	2401      	movs	r4, #1
}
 8004864:	4620      	mov	r0, r4
 8004866:	bd10      	pop	{r4, pc}
 8004868:	4604      	mov	r4, r0
    HAL_MspInit();
 800486a:	f7ff fcdb 	bl	8004224 <HAL_MspInit>
 800486e:	e7f9      	b.n	8004864 <HAL_Init+0x1c>
 8004870:	40022000 	.word	0x40022000

08004874 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004874:	4a03      	ldr	r2, [pc, #12]	; (8004884 <HAL_IncTick+0x10>)
 8004876:	6813      	ldr	r3, [r2, #0]
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <HAL_IncTick+0x14>)
 800487a:	6809      	ldr	r1, [r1, #0]
 800487c:	440b      	add	r3, r1
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20001ab0 	.word	0x20001ab0
 8004888:	2000000c 	.word	0x2000000c

0800488c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800488c:	4b01      	ldr	r3, [pc, #4]	; (8004894 <HAL_GetTick+0x8>)
 800488e:	6818      	ldr	r0, [r3, #0]
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20001ab0 	.word	0x20001ab0

08004898 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8004898:	4b01      	ldr	r3, [pc, #4]	; (80048a0 <HAL_GetTickPrio+0x8>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000010 	.word	0x20000010

080048a4 <HAL_SetTickFreq>:
HAL_StatusTypeDef HAL_SetTickFreq(uint32_t Freq)
{
  HAL_StatusTypeDef status  = HAL_OK;
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_SetTickFreq+0x28>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4283      	cmp	r3, r0
 80048aa:	d00b      	beq.n	80048c4 <HAL_SetTickFreq+0x20>
{
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
  {
    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <HAL_SetTickFreq+0x2c>)
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	f7ff ffa0 	bl	80047f8 <HAL_InitTick>
    if (status == HAL_OK)
 80048b8:	4603      	mov	r3, r0
 80048ba:	b908      	cbnz	r0, 80048c0 <HAL_SetTickFreq+0x1c>
    {
      uwTickFreq = Freq;
 80048bc:	4a03      	ldr	r2, [pc, #12]	; (80048cc <HAL_SetTickFreq+0x28>)
 80048be:	6014      	str	r4, [r2, #0]
    }
  }

  return status;
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	2000000c 	.word	0x2000000c
 80048d0:	20000010 	.word	0x20000010

080048d4 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
uint32_t HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 80048d4:	4b01      	ldr	r3, [pc, #4]	; (80048dc <HAL_GetTickFreq+0x8>)
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	2000000c 	.word	0x2000000c

080048e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80048e4:	f7ff ffd2 	bl	800488c <HAL_GetTick>
 80048e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ea:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80048ee:	d002      	beq.n	80048f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <HAL_Delay+0x24>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048f6:	f7ff ffc9 	bl	800488c <HAL_GetTick>
 80048fa:	1b40      	subs	r0, r0, r5
 80048fc:	42a0      	cmp	r0, r4
 80048fe:	d3fa      	bcc.n	80048f6 <HAL_Delay+0x16>
  {
  }
}
 8004900:	bd38      	pop	{r3, r4, r5, pc}
 8004902:	bf00      	nop
 8004904:	2000000c 	.word	0x2000000c

08004908 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004908:	4a02      	ldr	r2, [pc, #8]	; (8004914 <HAL_SuspendTick+0xc>)
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	f023 0302 	bic.w	r3, r3, #2
 8004910:	6013      	str	r3, [r2, #0]
}
 8004912:	4770      	bx	lr
 8004914:	e000e010 	.word	0xe000e010

08004918 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004918:	4a02      	ldr	r2, [pc, #8]	; (8004924 <HAL_ResumeTick+0xc>)
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	6013      	str	r3, [r2, #0]
}
 8004922:	4770      	bx	lr
 8004924:	e000e010 	.word	0xe000e010

08004928 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8004928:	f04f 7085 	mov.w	r0, #17432576	; 0x10a0000
 800492c:	4770      	bx	lr
	...

08004930 <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8004930:	4b01      	ldr	r3, [pc, #4]	; (8004938 <HAL_GetREVID+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
}
 8004934:	0c00      	lsrs	r0, r0, #16
 8004936:	4770      	bx	lr
 8004938:	e0042000 	.word	0xe0042000

0800493c <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 800493c:	4b02      	ldr	r3, [pc, #8]	; (8004948 <HAL_GetDEVID+0xc>)
 800493e:	6818      	ldr	r0, [r3, #0]
}
 8004940:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	e0042000 	.word	0xe0042000

0800494c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
}
 800494c:	4b01      	ldr	r3, [pc, #4]	; (8004954 <HAL_GetUIDw0+0x8>)
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	1fff7590 	.word	0x1fff7590

08004958 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8004958:	4b01      	ldr	r3, [pc, #4]	; (8004960 <HAL_GetUIDw1+0x8>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	1fff7594 	.word	0x1fff7594

08004964 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8004964:	4b01      	ldr	r3, [pc, #4]	; (800496c <HAL_GetUIDw2+0x8>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	1fff7598 	.word	0x1fff7598

08004970 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004970:	4a02      	ldr	r2, [pc, #8]	; (800497c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8004972:	6853      	ldr	r3, [r2, #4]
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	6053      	str	r3, [r2, #4]
}
 800497a:	4770      	bx	lr
 800497c:	e0042000 	.word	0xe0042000

08004980 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004980:	4a02      	ldr	r2, [pc, #8]	; (800498c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8004982:	6853      	ldr	r3, [r2, #4]
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	6053      	str	r3, [r2, #4]
}
 800498a:	4770      	bx	lr
 800498c:	e0042000 	.word	0xe0042000

08004990 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004990:	4a02      	ldr	r2, [pc, #8]	; (800499c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8004992:	6853      	ldr	r3, [r2, #4]
 8004994:	f043 0302 	orr.w	r3, r3, #2
 8004998:	6053      	str	r3, [r2, #4]
}
 800499a:	4770      	bx	lr
 800499c:	e0042000 	.word	0xe0042000

080049a0 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80049a0:	4a02      	ldr	r2, [pc, #8]	; (80049ac <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80049a2:	6853      	ldr	r3, [r2, #4]
 80049a4:	f023 0302 	bic.w	r3, r3, #2
 80049a8:	6053      	str	r3, [r2, #4]
}
 80049aa:	4770      	bx	lr
 80049ac:	e0042000 	.word	0xe0042000

080049b0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80049b0:	4a02      	ldr	r2, [pc, #8]	; (80049bc <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80049b2:	6853      	ldr	r3, [r2, #4]
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	6053      	str	r3, [r2, #4]
}
 80049ba:	4770      	bx	lr
 80049bc:	e0042000 	.word	0xe0042000

080049c0 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80049c0:	4a02      	ldr	r2, [pc, #8]	; (80049cc <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80049c2:	6853      	ldr	r3, [r2, #4]
 80049c4:	f023 0304 	bic.w	r3, r3, #4
 80049c8:	6053      	str	r3, [r2, #4]
}
 80049ca:	4770      	bx	lr
 80049cc:	e0042000 	.word	0xe0042000

080049d0 <HAL_SYSCFG_SRAM2Erase>:
  * @retval None
  */
void HAL_SYSCFG_SRAM2Erase(void)
{
  /* unlock the write protection of the SRAM2ER bit */
  SYSCFG->SKR = 0xCA;
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_SYSCFG_SRAM2Erase+0x18>)
 80049d2:	22ca      	movs	r2, #202	; 0xca
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
  SYSCFG->SKR = 0x53;
 80049d6:	2253      	movs	r2, #83	; 0x53
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Starts a hardware SRAM2 erase operation*/
  *(__IO uint32_t *) SCSR_SRAM2ER_BB = 0x00000001UL;
 80049da:	f1a3 23fd 	sub.w	r3, r3, #4244700416	; 0xfd00fd00
 80049de:	f5a3 0360 	sub.w	r3, r3, #14680064	; 0xe00000
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
}
 80049e6:	4770      	bx	lr
 80049e8:	40010000 	.word	0x40010000

080049ec <HAL_SYSCFG_EnableMemorySwappingBank>:
  *
  * @retval None
  */
void HAL_SYSCFG_EnableMemorySwappingBank(void)
{
  *(__IO uint32_t *)FB_MODE_BB = 0x00000001UL;
 80049ec:	4b01      	ldr	r3, [pc, #4]	; (80049f4 <HAL_SYSCFG_EnableMemorySwappingBank+0x8>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	4770      	bx	lr
 80049f4:	42200020 	.word	0x42200020

080049f8 <HAL_SYSCFG_DisableMemorySwappingBank>:
  * @retval None
  */
void HAL_SYSCFG_DisableMemorySwappingBank(void)
{

  *(__IO uint32_t *)FB_MODE_BB = 0x00000000UL;
 80049f8:	4b01      	ldr	r3, [pc, #4]	; (8004a00 <HAL_SYSCFG_DisableMemorySwappingBank+0x8>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	4770      	bx	lr
 8004a00:	42200020 	.word	0x42200020

08004a04 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8004a04:	4a03      	ldr	r2, [pc, #12]	; (8004a14 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8004a06:	6813      	ldr	r3, [r2, #0]
 8004a08:	f023 0304 	bic.w	r3, r3, #4
 8004a0c:	4318      	orrs	r0, r3
 8004a0e:	6010      	str	r0, [r2, #0]
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010030 	.word	0x40010030

08004a18 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004a18:	4a03      	ldr	r2, [pc, #12]	; (8004a28 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	f023 0302 	bic.w	r3, r3, #2
 8004a20:	4318      	orrs	r0, r3
 8004a22:	6010      	str	r0, [r2, #0]
}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010030 	.word	0x40010030

08004a2c <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8004a2c:	4a03      	ldr	r2, [pc, #12]	; (8004a3c <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x10>)
 8004a2e:	6853      	ldr	r3, [r2, #4]
 8004a30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a34:	4318      	orrs	r0, r3
 8004a36:	6050      	str	r0, [r2, #4]
}
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010030 	.word	0x40010030

08004a40 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8004a40:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004a42:	4a0b      	ldr	r2, [pc, #44]	; (8004a70 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 8004a44:	6813      	ldr	r3, [r2, #0]
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a4c:	f7ff ff1e 	bl	800488c <HAL_GetTick>
 8004a50:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 8004a52:	4c07      	ldr	r4, [pc, #28]	; (8004a70 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	f013 0f08 	tst.w	r3, #8
 8004a5a:	d106      	bne.n	8004a6a <HAL_SYSCFG_EnableVREFBUF+0x2a>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8004a5c:	f7ff ff16 	bl	800488c <HAL_GetTick>
 8004a60:	1b40      	subs	r0, r0, r5
 8004a62:	280a      	cmp	r0, #10
 8004a64:	d9f6      	bls.n	8004a54 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
 8004a66:	2003      	movs	r0, #3
 8004a68:	e000      	b.n	8004a6c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    }
  }

  return HAL_OK;
 8004a6a:	2000      	movs	r0, #0
}
 8004a6c:	bd38      	pop	{r3, r4, r5, pc}
 8004a6e:	bf00      	nop
 8004a70:	40010030 	.word	0x40010030

08004a74 <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004a74:	4a02      	ldr	r2, [pc, #8]	; (8004a80 <HAL_SYSCFG_DisableVREFBUF+0xc>)
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]
}
 8004a7e:	4770      	bx	lr
 8004a80:	40010030 	.word	0x40010030

08004a84 <HAL_SYSCFG_EnableIOAnalogSwitchBooster>:
  *
  * @retval None
  */
void HAL_SYSCFG_EnableIOAnalogSwitchBooster(void)
{
  SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 8004a84:	4a02      	ldr	r2, [pc, #8]	; (8004a90 <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0xc>)
 8004a86:	6853      	ldr	r3, [r2, #4]
 8004a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8c:	6053      	str	r3, [r2, #4]
}
 8004a8e:	4770      	bx	lr
 8004a90:	40010000 	.word	0x40010000

08004a94 <HAL_SYSCFG_DisableIOAnalogSwitchBooster>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableIOAnalogSwitchBooster(void)
{
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 8004a94:	4a02      	ldr	r2, [pc, #8]	; (8004aa0 <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0xc>)
 8004a96:	6853      	ldr	r3, [r2, #4]
 8004a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a9c:	6053      	str	r3, [r2, #4]
}
 8004a9e:	4770      	bx	lr
 8004aa0:	40010000 	.word	0x40010000

08004aa4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa4:	4a07      	ldr	r2, [pc, #28]	; (8004ac4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004aa6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aa8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	0c1b      	lsrs	r3, r3, #16
 8004ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab8:	0200      	lsls	r0, r0, #8
 8004aba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004abe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004ac0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004ac2:	4770      	bx	lr
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ac8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <HAL_NVIC_SetPriority+0x5c>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad2:	f1c3 0407 	rsb	r4, r3, #7
 8004ad6:	2c04      	cmp	r4, #4
 8004ad8:	bf28      	it	cs
 8004ada:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004adc:	1d1d      	adds	r5, r3, #4
 8004ade:	2d06      	cmp	r5, #6
 8004ae0:	bf8c      	ite	hi
 8004ae2:	3b03      	subhi	r3, #3
 8004ae4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004aea:	fa05 f404 	lsl.w	r4, r5, r4
 8004aee:	ea21 0104 	bic.w	r1, r1, r4
 8004af2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004af4:	fa05 f303 	lsl.w	r3, r5, r3
 8004af8:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004afc:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004afe:	2800      	cmp	r0, #0
 8004b00:	db09      	blt.n	8004b16 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	0109      	lsls	r1, r1, #4
 8004b04:	b2c9      	uxtb	r1, r1
 8004b06:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004b0a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004b0e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004b12:	bc30      	pop	{r4, r5}
 8004b14:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b16:	f000 000f 	and.w	r0, r0, #15
 8004b1a:	0109      	lsls	r1, r1, #4
 8004b1c:	b2c9      	uxtb	r1, r1
 8004b1e:	4b02      	ldr	r3, [pc, #8]	; (8004b28 <HAL_NVIC_SetPriority+0x60>)
 8004b20:	5419      	strb	r1, [r3, r0]
 8004b22:	e7f6      	b.n	8004b12 <HAL_NVIC_SetPriority+0x4a>
 8004b24:	e000ed00 	.word	0xe000ed00
 8004b28:	e000ed14 	.word	0xe000ed14

08004b2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	db08      	blt.n	8004b42 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b30:	0942      	lsrs	r2, r0, #5
 8004b32:	f000 001f 	and.w	r0, r0, #31
 8004b36:	2301      	movs	r3, #1
 8004b38:	fa03 f000 	lsl.w	r0, r3, r0
 8004b3c:	4b01      	ldr	r3, [pc, #4]	; (8004b44 <HAL_NVIC_EnableIRQ+0x18>)
 8004b3e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b42:	4770      	bx	lr
 8004b44:	e000e100 	.word	0xe000e100

08004b48 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	db0d      	blt.n	8004b68 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b4c:	0943      	lsrs	r3, r0, #5
 8004b4e:	f000 001f 	and.w	r0, r0, #31
 8004b52:	2201      	movs	r2, #1
 8004b54:	fa02 f000 	lsl.w	r0, r2, r0
 8004b58:	3320      	adds	r3, #32
 8004b5a:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_NVIC_DisableIRQ+0x24>)
 8004b5c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b64:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	e000e100 	.word	0xe000e100

08004b70 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8004b70:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004b74:	4905      	ldr	r1, [pc, #20]	; (8004b8c <HAL_NVIC_SystemReset+0x1c>)
 8004b76:	68ca      	ldr	r2, [r1, #12]
 8004b78:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <HAL_NVIC_SystemReset+0x20>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60cb      	str	r3, [r1, #12]
 8004b82:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004b86:	bf00      	nop
 8004b88:	e7fd      	b.n	8004b86 <HAL_NVIC_SystemReset+0x16>
 8004b8a:	bf00      	nop
 8004b8c:	e000ed00 	.word	0xe000ed00
 8004b90:	05fa0004 	.word	0x05fa0004

08004b94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b94:	3801      	subs	r0, #1
 8004b96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004b9a:	d20a      	bcs.n	8004bb2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_SYSTICK_Config+0x24>)
 8004b9e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba0:	4a06      	ldr	r2, [pc, #24]	; (8004bbc <HAL_SYSTICK_Config+0x28>)
 8004ba2:	21f0      	movs	r1, #240	; 0xf0
 8004ba4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba8:	2000      	movs	r0, #0
 8004baa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bac:	2207      	movs	r2, #7
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004bb2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	e000e010 	.word	0xe000e010
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc0:	4b02      	ldr	r3, [pc, #8]	; (8004bcc <HAL_NVIC_GetPriorityGrouping+0xc>)
 8004bc2:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 8004bc4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8004bd0:	b470      	push	{r4, r5, r6}
  if ((int32_t)(IRQn) >= 0)
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	db22      	blt.n	8004c1c <HAL_NVIC_GetPriority+0x4c>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8004bd6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004bda:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004bde:	f890 0300 	ldrb.w	r0, [r0, #768]	; 0x300
 8004be2:	0900      	lsrs	r0, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004be4:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004be8:	f1c1 0407 	rsb	r4, r1, #7
 8004bec:	2c04      	cmp	r4, #4
 8004bee:	bf28      	it	cs
 8004bf0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bf2:	1d0d      	adds	r5, r1, #4
 8004bf4:	2d06      	cmp	r5, #6
 8004bf6:	bf8c      	ite	hi
 8004bf8:	3903      	subhi	r1, #3
 8004bfa:	2100      	movls	r1, #0
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8004bfc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c00:	fa05 f404 	lsl.w	r4, r5, r4
 8004c04:	fa20 f601 	lsr.w	r6, r0, r1
 8004c08:	ea26 0404 	bic.w	r4, r6, r4
 8004c0c:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8004c0e:	fa05 f101 	lsl.w	r1, r5, r1
 8004c12:	ea20 0001 	bic.w	r0, r0, r1
 8004c16:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 8004c18:	bc70      	pop	{r4, r5, r6}
 8004c1a:	4770      	bx	lr
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8004c1c:	f000 000f 	and.w	r0, r0, #15
 8004c20:	4c01      	ldr	r4, [pc, #4]	; (8004c28 <HAL_NVIC_GetPriority+0x58>)
 8004c22:	5c20      	ldrb	r0, [r4, r0]
 8004c24:	0900      	lsrs	r0, r0, #4
 8004c26:	e7dd      	b.n	8004be4 <HAL_NVIC_GetPriority+0x14>
 8004c28:	e000ed14 	.word	0xe000ed14

08004c2c <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	db09      	blt.n	8004c44 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c30:	0943      	lsrs	r3, r0, #5
 8004c32:	f000 001f 	and.w	r0, r0, #31
 8004c36:	2201      	movs	r2, #1
 8004c38:	fa02 f000 	lsl.w	r0, r2, r0
 8004c3c:	3340      	adds	r3, #64	; 0x40
 8004c3e:	4a02      	ldr	r2, [pc, #8]	; (8004c48 <HAL_NVIC_SetPendingIRQ+0x1c>)
 8004c40:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	e000e100 	.word	0xe000e100

08004c4c <HAL_NVIC_GetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	db0b      	blt.n	8004c68 <HAL_NVIC_GetPendingIRQ+0x1c>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8004c50:	0943      	lsrs	r3, r0, #5
 8004c52:	3340      	adds	r3, #64	; 0x40
 8004c54:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <HAL_NVIC_GetPendingIRQ+0x20>)
 8004c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5a:	f000 001f 	and.w	r0, r0, #31
 8004c5e:	fa23 f000 	lsr.w	r0, r3, r0
 8004c62:	f000 0001 	and.w	r0, r0, #1
 8004c66:	4770      	bx	lr
    return(0U);
 8004c68:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8004c6a:	4770      	bx	lr
 8004c6c:	e000e100 	.word	0xe000e100

08004c70 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c70:	2800      	cmp	r0, #0
 8004c72:	db09      	blt.n	8004c88 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c74:	0943      	lsrs	r3, r0, #5
 8004c76:	f000 001f 	and.w	r0, r0, #31
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	fa02 f000 	lsl.w	r0, r2, r0
 8004c80:	3360      	adds	r3, #96	; 0x60
 8004c82:	4a02      	ldr	r2, [pc, #8]	; (8004c8c <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8004c84:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	e000e100 	.word	0xe000e100

08004c90 <HAL_NVIC_GetActive>:
  if ((int32_t)(IRQn) >= 0)
 8004c90:	2800      	cmp	r0, #0
 8004c92:	db0b      	blt.n	8004cac <HAL_NVIC_GetActive+0x1c>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8004c94:	0943      	lsrs	r3, r0, #5
 8004c96:	3380      	adds	r3, #128	; 0x80
 8004c98:	4a05      	ldr	r2, [pc, #20]	; (8004cb0 <HAL_NVIC_GetActive+0x20>)
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	f000 001f 	and.w	r0, r0, #31
 8004ca2:	fa23 f000 	lsr.w	r0, r3, r0
 8004ca6:	f000 0001 	and.w	r0, r0, #1
 8004caa:	4770      	bx	lr
    return(0U);
 8004cac:	2000      	movs	r0, #0
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 8004cae:	4770      	bx	lr
 8004cb0:	e000e100 	.word	0xe000e100

08004cb4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004cb4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004cb6:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004cb8:	6813      	ldr	r3, [r2, #0]
 8004cba:	bf0c      	ite	eq
 8004cbc:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004cc0:	f023 0304 	bicne.w	r3, r3, #4
 8004cc4:	6013      	str	r3, [r2, #0]
  }
}
 8004cc6:	4770      	bx	lr
 8004cc8:	e000e010 	.word	0xe000e010

08004ccc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004ccc:	4770      	bx	lr

08004cce <HAL_SYSTICK_IRQHandler>:
{
 8004cce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004cd0:	f7ff fffc 	bl	8004ccc <HAL_SYSTICK_Callback>
}
 8004cd4:	bd08      	pop	{r3, pc}
	...

08004cd8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004cd8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004cdc:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <HAL_MPU_Disable+0x18>)
 8004cde:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8004ce6:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_MPU_Disable+0x1c>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]
}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	e000ed00 	.word	0xe000ed00
 8004cf4:	e000ed90 	.word	0xe000ed90

08004cf8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004cf8:	f040 0001 	orr.w	r0, r0, #1
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_MPU_Enable+0x1c>)
 8004cfe:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004d00:	4a05      	ldr	r2, [pc, #20]	; (8004d18 <HAL_MPU_Enable+0x20>)
 8004d02:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d08:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004d0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004d0e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU settings take effects */
  __DSB();
  __ISB();
}
 8004d12:	4770      	bx	lr
 8004d14:	e000ed90 	.word	0xe000ed90
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004d1c:	7842      	ldrb	r2, [r0, #1]
 8004d1e:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_MPU_ConfigRegion+0x50>)
 8004d20:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8004d22:	7803      	ldrb	r3, [r0, #0]
 8004d24:	b923      	cbnz	r3, 8004d30 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8004d26:	4b11      	ldr	r3, [pc, #68]	; (8004d6c <HAL_MPU_ConfigRegion+0x50>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004d2c:	611a      	str	r2, [r3, #16]
  }
}
 8004d2e:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8004d30:	6843      	ldr	r3, [r0, #4]
 8004d32:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <HAL_MPU_ConfigRegion+0x50>)
 8004d34:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8004d36:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8004d38:	7ac3      	ldrb	r3, [r0, #11]
 8004d3a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8004d3c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
 8004d40:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8004d42:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8004d44:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8004d46:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8004d4a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8004d4c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8004d50:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8004d52:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 8004d56:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8004d58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8004d5c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8004d5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d62:	7a01      	ldrb	r1, [r0, #8]
 8004d64:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8004d68:	6113      	str	r3, [r2, #16]
 8004d6a:	4770      	bx	lr
 8004d6c:	e000ed90 	.word	0xe000ed90

08004d70 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d057      	beq.n	8004e24 <HAL_DMA_Init+0xb4>
{
 8004d74:	b410      	push	{r4}
 8004d76:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d78:	6801      	ldr	r1, [r0, #0]
 8004d7a:	4a2b      	ldr	r2, [pc, #172]	; (8004e28 <HAL_DMA_Init+0xb8>)
 8004d7c:	4291      	cmp	r1, r2
 8004d7e:	d846      	bhi.n	8004e0e <HAL_DMA_Init+0x9e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d80:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <HAL_DMA_Init+0xbc>)
 8004d82:	440a      	add	r2, r1
 8004d84:	492a      	ldr	r1, [pc, #168]	; (8004e30 <HAL_DMA_Init+0xc0>)
 8004d86:	fba1 1202 	umull	r1, r2, r1, r2
 8004d8a:	0912      	lsrs	r2, r2, #4
 8004d8c:	0092      	lsls	r2, r2, #2
 8004d8e:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d90:	4a28      	ldr	r2, [pc, #160]	; (8004e34 <HAL_DMA_Init+0xc4>)
 8004d92:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d9e:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8004da2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	68dc      	ldr	r4, [r3, #12]
 8004daa:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dac:	691c      	ldr	r4, [r3, #16]
 8004dae:	4322      	orrs	r2, r4
 8004db0:	695c      	ldr	r4, [r3, #20]
 8004db2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004db4:	699c      	ldr	r4, [r3, #24]
 8004db6:	4322      	orrs	r2, r4
 8004db8:	69dc      	ldr	r4, [r3, #28]
 8004dba:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dbc:	6a1c      	ldr	r4, [r3, #32]
 8004dbe:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8004dc0:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004dc2:	6002      	str	r2, [r0, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004dca:	d016      	beq.n	8004dfa <HAL_DMA_Init+0x8a>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004dcc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004dce:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_DMA_Init+0xc4>)
 8004dd0:	4291      	cmp	r1, r2
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004dd2:	bf0c      	ite	eq
 8004dd4:	4918      	ldreq	r1, [pc, #96]	; (8004e38 <HAL_DMA_Init+0xc8>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004dd6:	4919      	ldrne	r1, [pc, #100]	; (8004e3c <HAL_DMA_Init+0xcc>)
 8004dd8:	680a      	ldr	r2, [r1, #0]
 8004dda:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004ddc:	f000 041c 	and.w	r4, r0, #28
 8004de0:	200f      	movs	r0, #15
 8004de2:	40a0      	lsls	r0, r4
 8004de4:	ea22 0200 	bic.w	r2, r2, r0
 8004de8:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004dea:	680c      	ldr	r4, [r1, #0]
 8004dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dee:	f002 001c 	and.w	r0, r2, #28
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	4082      	lsls	r2, r0
 8004df6:	4322      	orrs	r2, r4
 8004df8:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e04:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 8004e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e0c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <HAL_DMA_Init+0xd0>)
 8004e10:	440a      	add	r2, r1
 8004e12:	4907      	ldr	r1, [pc, #28]	; (8004e30 <HAL_DMA_Init+0xc0>)
 8004e14:	fba1 1202 	umull	r1, r2, r1, r2
 8004e18:	0912      	lsrs	r2, r2, #4
 8004e1a:	0092      	lsls	r2, r2, #2
 8004e1c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <HAL_DMA_Init+0xd4>)
 8004e20:	6402      	str	r2, [r0, #64]	; 0x40
 8004e22:	e7b7      	b.n	8004d94 <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 8004e24:	2001      	movs	r0, #1
}
 8004e26:	4770      	bx	lr
 8004e28:	40020407 	.word	0x40020407
 8004e2c:	bffdfff8 	.word	0xbffdfff8
 8004e30:	cccccccd 	.word	0xcccccccd
 8004e34:	40020000 	.word	0x40020000
 8004e38:	400200a8 	.word	0x400200a8
 8004e3c:	400204a8 	.word	0x400204a8
 8004e40:	bffdfbf8 	.word	0xbffdfbf8
 8004e44:	40020400 	.word	0x40020400

08004e48 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d045      	beq.n	8004ed8 <HAL_DMA_DeInit+0x90>
{
 8004e4c:	b410      	push	{r4}
 8004e4e:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004e50:	6801      	ldr	r1, [r0, #0]
 8004e52:	680a      	ldr	r2, [r1, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	600a      	str	r2, [r1, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e5a:	6801      	ldr	r1, [r0, #0]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	; (8004edc <HAL_DMA_DeInit+0x94>)
 8004e5e:	4291      	cmp	r1, r2
 8004e60:	d82f      	bhi.n	8004ec2 <HAL_DMA_DeInit+0x7a>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e62:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <HAL_DMA_DeInit+0x98>)
 8004e64:	440a      	add	r2, r1
 8004e66:	491f      	ldr	r1, [pc, #124]	; (8004ee4 <HAL_DMA_DeInit+0x9c>)
 8004e68:	fba1 1202 	umull	r1, r2, r1, r2
 8004e6c:	0912      	lsrs	r2, r2, #4
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e72:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <HAL_DMA_DeInit+0xa0>)
 8004e74:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	2100      	movs	r1, #0
 8004e7a:	6011      	str	r1, [r2, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e7c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e80:	f002 011c 	and.w	r1, r2, #28
 8004e84:	2201      	movs	r2, #1
 8004e86:	408a      	lsls	r2, r1
 8004e88:	6042      	str	r2, [r0, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8004e8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e8c:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <HAL_DMA_DeInit+0xa0>)
 8004e8e:	4291      	cmp	r1, r2
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e90:	bf0c      	ite	eq
 8004e92:	4c16      	ldreq	r4, [pc, #88]	; (8004eec <HAL_DMA_DeInit+0xa4>)
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e94:	4c16      	ldrne	r4, [pc, #88]	; (8004ef0 <HAL_DMA_DeInit+0xa8>)
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004e9a:	f001 001c 	and.w	r0, r1, #28
 8004e9e:	210f      	movs	r1, #15
 8004ea0:	4081      	lsls	r1, r0
 8004ea2:	ea22 0201 	bic.w	r2, r2, r1
 8004ea6:	6022      	str	r2, [r4, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004eac:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004eae:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004eb0:	6398      	str	r0, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb2:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004eb4:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004eb8:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 8004ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ec0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ec2:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <HAL_DMA_DeInit+0xac>)
 8004ec4:	440a      	add	r2, r1
 8004ec6:	4907      	ldr	r1, [pc, #28]	; (8004ee4 <HAL_DMA_DeInit+0x9c>)
 8004ec8:	fba1 1202 	umull	r1, r2, r1, r2
 8004ecc:	0912      	lsrs	r2, r2, #4
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <HAL_DMA_DeInit+0xb0>)
 8004ed4:	6402      	str	r2, [r0, #64]	; 0x40
 8004ed6:	e7ce      	b.n	8004e76 <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 8004ed8:	2001      	movs	r0, #1
}
 8004eda:	4770      	bx	lr
 8004edc:	40020407 	.word	0x40020407
 8004ee0:	bffdfff8 	.word	0xbffdfff8
 8004ee4:	cccccccd 	.word	0xcccccccd
 8004ee8:	40020000 	.word	0x40020000
 8004eec:	400200a8 	.word	0x400200a8
 8004ef0:	400204a8 	.word	0x400204a8
 8004ef4:	bffdfbf8 	.word	0xbffdfbf8
 8004ef8:	40020400 	.word	0x40020400

08004efc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004efc:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004efe:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8004f02:	2c01      	cmp	r4, #1
 8004f04:	d033      	beq.n	8004f6e <HAL_DMA_Start+0x72>
 8004f06:	2401      	movs	r4, #1
 8004f08:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f0c:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8004f10:	b2e4      	uxtb	r4, r4
 8004f12:	2c01      	cmp	r4, #1
 8004f14:	d005      	beq.n	8004f22 <HAL_DMA_Start+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f16:	2300      	movs	r3, #0
 8004f18:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8004f1c:	2002      	movs	r0, #2
  }
  return status;
}
 8004f1e:	bc70      	pop	{r4, r5, r6}
 8004f20:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f22:	2402      	movs	r4, #2
 8004f24:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f28:	2400      	movs	r4, #0
 8004f2a:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004f2c:	6805      	ldr	r5, [r0, #0]
 8004f2e:	682c      	ldr	r4, [r5, #0]
 8004f30:	f024 0401 	bic.w	r4, r4, #1
 8004f34:	602c      	str	r4, [r5, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f36:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004f38:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004f3a:	f004 061c 	and.w	r6, r4, #28
 8004f3e:	2401      	movs	r4, #1
 8004f40:	40b4      	lsls	r4, r6
 8004f42:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f44:	6804      	ldr	r4, [r0, #0]
 8004f46:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f48:	6883      	ldr	r3, [r0, #8]
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d00a      	beq.n	8004f64 <HAL_DMA_Start+0x68>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004f4e:	6803      	ldr	r3, [r0, #0]
 8004f50:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004f52:	6803      	ldr	r3, [r0, #0]
 8004f54:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE(hdma);
 8004f56:	6802      	ldr	r2, [r0, #0]
 8004f58:	6813      	ldr	r3, [r2, #0]
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f60:	2000      	movs	r0, #0
 8004f62:	e7dc      	b.n	8004f1e <HAL_DMA_Start+0x22>
    hdma->Instance->CPAR = DstAddress;
 8004f64:	6803      	ldr	r3, [r0, #0]
 8004f66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004f68:	6803      	ldr	r3, [r0, #0]
 8004f6a:	60d9      	str	r1, [r3, #12]
 8004f6c:	e7f3      	b.n	8004f56 <HAL_DMA_Start+0x5a>
  __HAL_LOCK(hdma);
 8004f6e:	2002      	movs	r0, #2
 8004f70:	e7d5      	b.n	8004f1e <HAL_DMA_Start+0x22>

08004f72 <HAL_DMA_Start_IT>:
{
 8004f72:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8004f74:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8004f78:	2c01      	cmp	r4, #1
 8004f7a:	d045      	beq.n	8005008 <HAL_DMA_Start_IT+0x96>
 8004f7c:	2401      	movs	r4, #1
 8004f7e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f82:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8004f86:	b2e4      	uxtb	r4, r4
 8004f88:	2c01      	cmp	r4, #1
 8004f8a:	d005      	beq.n	8004f98 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8004f92:	2002      	movs	r0, #2
}
 8004f94:	bc70      	pop	{r4, r5, r6}
 8004f96:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f98:	2402      	movs	r4, #2
 8004f9a:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f9e:	2400      	movs	r4, #0
 8004fa0:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004fa2:	6805      	ldr	r5, [r0, #0]
 8004fa4:	682c      	ldr	r4, [r5, #0]
 8004fa6:	f024 0401 	bic.w	r4, r4, #1
 8004faa:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fac:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004fae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004fb0:	f004 061c 	and.w	r6, r4, #28
 8004fb4:	2401      	movs	r4, #1
 8004fb6:	40b4      	lsls	r4, r6
 8004fb8:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8004fba:	6804      	ldr	r4, [r0, #0]
 8004fbc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fbe:	6883      	ldr	r3, [r0, #8]
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d011      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x76>
    hdma->Instance->CPAR = SrcAddress;
 8004fc4:	6803      	ldr	r3, [r0, #0]
 8004fc6:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004fc8:	6803      	ldr	r3, [r0, #0]
 8004fca:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004fcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004fce:	b183      	cbz	r3, 8004ff2 <HAL_DMA_Start_IT+0x80>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fd0:	6802      	ldr	r2, [r0, #0]
 8004fd2:	6813      	ldr	r3, [r2, #0]
 8004fd4:	f043 030e 	orr.w	r3, r3, #14
 8004fd8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004fda:	6802      	ldr	r2, [r0, #0]
 8004fdc:	6813      	ldr	r3, [r2, #0]
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	e7d5      	b.n	8004f94 <HAL_DMA_Start_IT+0x22>
    hdma->Instance->CPAR = DstAddress;
 8004fe8:	6803      	ldr	r3, [r0, #0]
 8004fea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004fec:	6803      	ldr	r3, [r0, #0]
 8004fee:	60d9      	str	r1, [r3, #12]
 8004ff0:	e7ec      	b.n	8004fcc <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ff2:	6802      	ldr	r2, [r0, #0]
 8004ff4:	6813      	ldr	r3, [r2, #0]
 8004ff6:	f023 0304 	bic.w	r3, r3, #4
 8004ffa:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ffc:	6802      	ldr	r2, [r0, #0]
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	f043 030a 	orr.w	r3, r3, #10
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e7e8      	b.n	8004fda <HAL_DMA_Start_IT+0x68>
  __HAL_LOCK(hdma);
 8005008:	2002      	movs	r0, #2
 800500a:	e7c3      	b.n	8004f94 <HAL_DMA_Start_IT+0x22>

0800500c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800500c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d006      	beq.n	8005024 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005016:	2304      	movs	r3, #4
 8005018:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800501a:	2300      	movs	r3, #0
 800501c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8005020:	2001      	movs	r0, #1
 8005022:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005024:	6802      	ldr	r2, [r0, #0]
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	f023 030e 	bic.w	r3, r3, #14
 800502c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800502e:	6802      	ldr	r2, [r0, #0]
 8005030:	6813      	ldr	r3, [r2, #0]
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005038:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800503a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800503c:	f003 031c 	and.w	r3, r3, #28
 8005040:	2201      	movs	r2, #1
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005048:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800504c:	2300      	movs	r3, #0
 800504e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8005052:	4618      	mov	r0, r3
}
 8005054:	4770      	bx	lr

08005056 <HAL_DMA_Abort_IT>:
{
 8005056:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005058:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d003      	beq.n	800506a <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005062:	2304      	movs	r3, #4
 8005064:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8005066:	2001      	movs	r0, #1
}
 8005068:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800506a:	6802      	ldr	r2, [r0, #0]
 800506c:	6813      	ldr	r3, [r2, #0]
 800506e:	f023 030e 	bic.w	r3, r3, #14
 8005072:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005074:	6802      	ldr	r2, [r0, #0]
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800507e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005080:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005082:	f003 031c 	and.w	r3, r3, #28
 8005086:	2201      	movs	r2, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800508e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005092:	2300      	movs	r3, #0
 8005094:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8005098:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800509a:	b113      	cbz	r3, 80050a2 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 800509c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800509e:	2000      	movs	r0, #0
 80050a0:	e7e2      	b.n	8005068 <HAL_DMA_Abort_IT+0x12>
 80050a2:	2000      	movs	r0, #0
 80050a4:	e7e0      	b.n	8005068 <HAL_DMA_Abort_IT+0x12>

080050a6 <HAL_DMA_PollForTransfer>:
{
 80050a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80050aa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d007      	beq.n	80050c4 <HAL_DMA_PollForTransfer+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b4:	2304      	movs	r3, #4
 80050b6:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80050b8:	2300      	movs	r3, #0
 80050ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80050be:	2001      	movs	r0, #1
}
 80050c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 80050c4:	6803      	ldr	r3, [r0, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f013 0f20 	tst.w	r3, #32
 80050cc:	d12d      	bne.n	800512a <HAL_DMA_PollForTransfer+0x84>
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80050ce:	bb89      	cbnz	r1, 8005134 <HAL_DMA_PollForTransfer+0x8e>
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 80050d0:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80050d2:	f006 061c 	and.w	r6, r6, #28
 80050d6:	2302      	movs	r3, #2
 80050d8:	fa03 f606 	lsl.w	r6, r3, r6
 80050dc:	4615      	mov	r5, r2
 80050de:	4688      	mov	r8, r1
 80050e0:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80050e2:	f7ff fbd3 	bl	800488c <HAL_GetTick>
 80050e6:	4681      	mov	r9, r0
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 80050e8:	2708      	movs	r7, #8
  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80050ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	4233      	tst	r3, r6
 80050f0:	d132      	bne.n	8005158 <HAL_DMA_PollForTransfer+0xb2>
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 80050f2:	6811      	ldr	r1, [r2, #0]
 80050f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80050f6:	f003 031c 	and.w	r3, r3, #28
 80050fa:	fa07 f003 	lsl.w	r0, r7, r3
 80050fe:	4208      	tst	r0, r1
 8005100:	d11f      	bne.n	8005142 <HAL_DMA_PollForTransfer+0x9c>
    if(Timeout != HAL_MAX_DELAY)
 8005102:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005106:	d0f1      	beq.n	80050ec <HAL_DMA_PollForTransfer+0x46>
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 8005108:	f7ff fbc0 	bl	800488c <HAL_GetTick>
 800510c:	eba0 0009 	sub.w	r0, r0, r9
 8005110:	42a8      	cmp	r0, r5
 8005112:	d801      	bhi.n	8005118 <HAL_DMA_PollForTransfer+0x72>
 8005114:	2d00      	cmp	r5, #0
 8005116:	d1e8      	bne.n	80050ea <HAL_DMA_PollForTransfer+0x44>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005118:	2320      	movs	r3, #32
 800511a:	63e3      	str	r3, [r4, #60]	; 0x3c
        hdma->State = HAL_DMA_STATE_READY;
 800511c:	2001      	movs	r0, #1
 800511e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
        __HAL_UNLOCK(hdma);
 8005122:	2300      	movs	r3, #0
 8005124:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8005128:	e7ca      	b.n	80050c0 <HAL_DMA_PollForTransfer+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800512a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800512e:	63c3      	str	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8005130:	2001      	movs	r0, #1
 8005132:	e7c5      	b.n	80050c0 <HAL_DMA_PollForTransfer+0x1a>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 8005134:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8005136:	f006 061c 	and.w	r6, r6, #28
 800513a:	2304      	movs	r3, #4
 800513c:	fa03 f606 	lsl.w	r6, r3, r6
 8005140:	e7cc      	b.n	80050dc <HAL_DMA_PollForTransfer+0x36>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005142:	2001      	movs	r0, #1
 8005144:	fa00 f303 	lsl.w	r3, r0, r3
 8005148:	6053      	str	r3, [r2, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800514a:	63e0      	str	r0, [r4, #60]	; 0x3c
      hdma->State= HAL_DMA_STATE_READY;
 800514c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
      __HAL_UNLOCK(hdma);
 8005150:	2300      	movs	r3, #0
 8005152:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8005156:	e7b3      	b.n	80050c0 <HAL_DMA_PollForTransfer+0x1a>
  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8005158:	f1b8 0f00 	cmp.w	r8, #0
 800515c:	d10c      	bne.n	8005178 <HAL_DMA_PollForTransfer+0xd2>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1CU));
 800515e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005160:	f003 011c 	and.w	r1, r3, #28
 8005164:	2302      	movs	r3, #2
 8005166:	408b      	lsls	r3, r1
 8005168:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800516a:	2301      	movs	r3, #1
 800516c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005170:	2000      	movs	r0, #0
 8005172:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return HAL_OK;
 8005176:	e7a3      	b.n	80050c0 <HAL_DMA_PollForTransfer+0x1a>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 8005178:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800517a:	f003 011c 	and.w	r1, r3, #28
 800517e:	2304      	movs	r3, #4
 8005180:	408b      	lsls	r3, r1
 8005182:	6053      	str	r3, [r2, #4]
 8005184:	e7f4      	b.n	8005170 <HAL_DMA_PollForTransfer+0xca>

08005186 <HAL_DMA_IRQHandler>:
{
 8005186:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005188:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800518a:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800518c:	6804      	ldr	r4, [r0, #0]
 800518e:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005190:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005192:	f003 031c 	and.w	r3, r3, #28
 8005196:	2204      	movs	r2, #4
 8005198:	409a      	lsls	r2, r3
 800519a:	420a      	tst	r2, r1
 800519c:	d015      	beq.n	80051ca <HAL_DMA_IRQHandler+0x44>
 800519e:	f015 0f04 	tst.w	r5, #4
 80051a2:	d012      	beq.n	80051ca <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	f013 0f20 	tst.w	r3, #32
 80051aa:	d103      	bne.n	80051b4 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	f023 0304 	bic.w	r3, r3, #4
 80051b2:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80051b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80051b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80051b8:	f003 021c 	and.w	r2, r3, #28
 80051bc:	2304      	movs	r3, #4
 80051be:	4093      	lsls	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80051c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80051c4:	b103      	cbz	r3, 80051c8 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80051c6:	4798      	blx	r3
}
 80051c8:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80051ca:	2202      	movs	r2, #2
 80051cc:	409a      	lsls	r2, r3
 80051ce:	420a      	tst	r2, r1
 80051d0:	d01c      	beq.n	800520c <HAL_DMA_IRQHandler+0x86>
 80051d2:	f015 0f02 	tst.w	r5, #2
 80051d6:	d019      	beq.n	800520c <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	f013 0f20 	tst.w	r3, #32
 80051de:	d106      	bne.n	80051ee <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	f023 030a 	bic.w	r3, r3, #10
 80051e6:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80051ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80051f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80051f2:	f003 021c 	and.w	r2, r3, #28
 80051f6:	2302      	movs	r3, #2
 80051f8:	4093      	lsls	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80051fc:	2300      	movs	r3, #0
 80051fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8005202:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0df      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8005208:	4798      	blx	r3
 800520a:	e7dd      	b.n	80051c8 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800520c:	2208      	movs	r2, #8
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	420b      	tst	r3, r1
 8005214:	d0d8      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x42>
 8005216:	f015 0f08 	tst.w	r5, #8
 800521a:	d0d5      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	f023 030e 	bic.w	r3, r3, #14
 8005222:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005224:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005226:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005228:	f003 031c 	and.w	r3, r3, #28
 800522c:	2201      	movs	r2, #1
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005234:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005236:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800523a:	2300      	movs	r3, #0
 800523c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8005240:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0c0      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8005246:	4798      	blx	r3
  return;
 8005248:	e7be      	b.n	80051c8 <HAL_DMA_IRQHandler+0x42>

0800524a <HAL_DMA_RegisterCallback>:
{
 800524a:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 800524c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8005250:	2801      	cmp	r0, #1
 8005252:	d020      	beq.n	8005296 <HAL_DMA_RegisterCallback+0x4c>
 8005254:	2001      	movs	r0, #1
 8005256:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 800525a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800525e:	b2c0      	uxtb	r0, r0
 8005260:	2801      	cmp	r0, #1
 8005262:	d004      	beq.n	800526e <HAL_DMA_RegisterCallback+0x24>
    status = HAL_ERROR;
 8005264:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return status;
 800526c:	4770      	bx	lr
    switch (CallbackID)
 800526e:	2903      	cmp	r1, #3
 8005270:	d80f      	bhi.n	8005292 <HAL_DMA_RegisterCallback+0x48>
 8005272:	e8df f001 	tbb	[pc, r1]
 8005276:	0502      	.short	0x0502
 8005278:	0b08      	.short	0x0b08
           hdma->XferCpltCallback = pCallback;
 800527a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 800527c:	2000      	movs	r0, #0
           break;
 800527e:	e7f2      	b.n	8005266 <HAL_DMA_RegisterCallback+0x1c>
           hdma->XferHalfCpltCallback = pCallback;
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8005282:	2000      	movs	r0, #0
           break;
 8005284:	e7ef      	b.n	8005266 <HAL_DMA_RegisterCallback+0x1c>
           hdma->XferErrorCallback = pCallback;
 8005286:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8005288:	2000      	movs	r0, #0
           break;
 800528a:	e7ec      	b.n	8005266 <HAL_DMA_RegisterCallback+0x1c>
           hdma->XferAbortCallback = pCallback;
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2000      	movs	r0, #0
           break;
 8005290:	e7e9      	b.n	8005266 <HAL_DMA_RegisterCallback+0x1c>
           status = HAL_ERROR;
 8005292:	2001      	movs	r0, #1
 8005294:	e7e7      	b.n	8005266 <HAL_DMA_RegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 8005296:	2002      	movs	r0, #2
}
 8005298:	4770      	bx	lr

0800529a <HAL_DMA_UnRegisterCallback>:
{
 800529a:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 800529c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80052a0:	2a01      	cmp	r2, #1
 80052a2:	d027      	beq.n	80052f4 <HAL_DMA_UnRegisterCallback+0x5a>
 80052a4:	2201      	movs	r2, #1
 80052a6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 80052aa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	2a01      	cmp	r2, #1
 80052b2:	d004      	beq.n	80052be <HAL_DMA_UnRegisterCallback+0x24>
    status = HAL_ERROR;
 80052b4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return status;
 80052bc:	4770      	bx	lr
    switch (CallbackID)
 80052be:	2904      	cmp	r1, #4
 80052c0:	d816      	bhi.n	80052f0 <HAL_DMA_UnRegisterCallback+0x56>
 80052c2:	e8df f001 	tbb	[pc, r1]
 80052c6:	0603      	.short	0x0603
 80052c8:	0c09      	.short	0x0c09
 80052ca:	0f          	.byte	0x0f
 80052cb:	00          	.byte	0x00
           hdma->XferCpltCallback = NULL;
 80052cc:	2000      	movs	r0, #0
 80052ce:	62d8      	str	r0, [r3, #44]	; 0x2c
           break;
 80052d0:	e7f1      	b.n	80052b6 <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferHalfCpltCallback = NULL;
 80052d2:	2000      	movs	r0, #0
 80052d4:	6318      	str	r0, [r3, #48]	; 0x30
           break;
 80052d6:	e7ee      	b.n	80052b6 <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferErrorCallback = NULL;
 80052d8:	2000      	movs	r0, #0
 80052da:	6358      	str	r0, [r3, #52]	; 0x34
           break;
 80052dc:	e7eb      	b.n	80052b6 <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferAbortCallback = NULL;
 80052de:	2000      	movs	r0, #0
 80052e0:	6398      	str	r0, [r3, #56]	; 0x38
           break;
 80052e2:	e7e8      	b.n	80052b6 <HAL_DMA_UnRegisterCallback+0x1c>
           hdma->XferCpltCallback = NULL;
 80052e4:	2000      	movs	r0, #0
 80052e6:	62d8      	str	r0, [r3, #44]	; 0x2c
           hdma->XferHalfCpltCallback = NULL;
 80052e8:	6318      	str	r0, [r3, #48]	; 0x30
           hdma->XferErrorCallback = NULL;
 80052ea:	6358      	str	r0, [r3, #52]	; 0x34
           hdma->XferAbortCallback = NULL;
 80052ec:	6398      	str	r0, [r3, #56]	; 0x38
           break;
 80052ee:	e7e2      	b.n	80052b6 <HAL_DMA_UnRegisterCallback+0x1c>
           status = HAL_ERROR;
 80052f0:	2001      	movs	r0, #1
 80052f2:	e7e0      	b.n	80052b6 <HAL_DMA_UnRegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 80052f4:	2002      	movs	r0, #2
}
 80052f6:	4770      	bx	lr

080052f8 <HAL_DMA_GetState>:
  return hdma->State;
 80052f8:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 80052fc:	4770      	bx	lr

080052fe <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80052fe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8005300:	4770      	bx	lr
	...

08005304 <HAL_EXTI_SetConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8005304:	2800      	cmp	r0, #0
 8005306:	d05b      	beq.n	80053c0 <HAL_EXTI_SetConfigLine+0xbc>
 8005308:	2900      	cmp	r1, #0
 800530a:	d05b      	beq.n	80053c4 <HAL_EXTI_SetConfigLine+0xc0>
{
 800530c:	b4f0      	push	{r4, r5, r6, r7}
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 800530e:	680a      	ldr	r2, [r1, #0]
 8005310:	6002      	str	r2, [r0, #0]

  /* Compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005312:	6808      	ldr	r0, [r1, #0]
 8005314:	f3c0 4300 	ubfx	r3, r0, #16, #1
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8005318:	f000 041f 	and.w	r4, r0, #31
  maskline = (1uL << linepos);
 800531c:	2201      	movs	r2, #1
 800531e:	40a2      	lsls	r2, r4

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8005320:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005324:	d01e      	beq.n	8005364 <HAL_EXTI_SetConfigLine+0x60>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8005326:	015d      	lsls	r5, r3, #5
 8005328:	4f27      	ldr	r7, [pc, #156]	; (80053c8 <HAL_EXTI_SetConfigLine+0xc4>)
    regval = *regaddr;
 800532a:	f855 c007 	ldr.w	ip, [r5, r7]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 800532e:	688e      	ldr	r6, [r1, #8]
 8005330:	f016 0f01 	tst.w	r6, #1
    {
      regval |= maskline;
 8005334:	bf14      	ite	ne
 8005336:	ea4c 0602 	orrne.w	r6, ip, r2
    }
    else
    {
      regval &= ~maskline;
 800533a:	ea2c 0602 	biceq.w	r6, ip, r2
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 800533e:	51ee      	str	r6, [r5, r7]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8005340:	4f22      	ldr	r7, [pc, #136]	; (80053cc <HAL_EXTI_SetConfigLine+0xc8>)
    regval = *regaddr;
 8005342:	f855 c007 	ldr.w	ip, [r5, r7]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8005346:	688e      	ldr	r6, [r1, #8]
 8005348:	f016 0f02 	tst.w	r6, #2
    {
      regval |= maskline;
 800534c:	bf14      	ite	ne
 800534e:	ea4c 0602 	orrne.w	r6, ip, r2
    }
    else
    {
      regval &= ~maskline;
 8005352:	ea2c 0602 	biceq.w	r6, ip, r2
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 8005356:	51ee      	str	r6, [r5, r7]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8005358:	680d      	ldr	r5, [r1, #0]
 800535a:	f005 65c0 	and.w	r5, r5, #100663296	; 0x6000000
 800535e:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8005362:	d019      	beq.n	8005398 <HAL_EXTI_SetConfigLine+0x94>
      SYSCFG->EXTICR[linepos >> 2u] = regval;
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8005364:	015b      	lsls	r3, r3, #5
 8005366:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800536a:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
  regval = *regaddr;
 800536e:	6804      	ldr	r4, [r0, #0]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8005370:	684d      	ldr	r5, [r1, #4]
 8005372:	f015 0f01 	tst.w	r5, #1
  {
    regval |= maskline;
 8005376:	bf14      	ite	ne
 8005378:	4314      	orrne	r4, r2
  }
  else
  {
    regval &= ~maskline;
 800537a:	4394      	biceq	r4, r2
  }

  /* Store interrupt mode */
  *regaddr = regval;
 800537c:	6004      	str	r4, [r0, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 800537e:	4c14      	ldr	r4, [pc, #80]	; (80053d0 <HAL_EXTI_SetConfigLine+0xcc>)
  regval = *regaddr;
 8005380:	5918      	ldr	r0, [r3, r4]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8005382:	6849      	ldr	r1, [r1, #4]
 8005384:	f011 0f02 	tst.w	r1, #2
  {
    regval |= maskline;
 8005388:	bf14      	ite	ne
 800538a:	4302      	orrne	r2, r0
  }
  else
  {
    regval &= ~maskline;
 800538c:	ea20 0202 	biceq.w	r2, r0, r2
  }

  /* Store event mode */
  *regaddr = regval;
 8005390:	511a      	str	r2, [r3, r4]

  return HAL_OK;
 8005392:	2000      	movs	r0, #0
}
 8005394:	bcf0      	pop	{r4, r5, r6, r7}
 8005396:	4770      	bx	lr
 8005398:	f004 041c 	and.w	r4, r4, #28
 800539c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80053a0:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      regval = SYSCFG->EXTICR[linepos >> 2u];
 80053a4:	68a6      	ldr	r6, [r4, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80053a6:	f000 0003 	and.w	r0, r0, #3
 80053aa:	0080      	lsls	r0, r0, #2
 80053ac:	2507      	movs	r5, #7
 80053ae:	4085      	lsls	r5, r0
 80053b0:	ea26 0605 	bic.w	r6, r6, r5
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80053b4:	68cd      	ldr	r5, [r1, #12]
 80053b6:	fa05 f000 	lsl.w	r0, r5, r0
 80053ba:	4330      	orrs	r0, r6
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 80053bc:	60a0      	str	r0, [r4, #8]
 80053be:	e7d1      	b.n	8005364 <HAL_EXTI_SetConfigLine+0x60>
    return HAL_ERROR;
 80053c0:	2001      	movs	r0, #1
 80053c2:	4770      	bx	lr
 80053c4:	2001      	movs	r0, #1
}
 80053c6:	4770      	bx	lr
 80053c8:	40010408 	.word	0x40010408
 80053cc:	4001040c 	.word	0x4001040c
 80053d0:	40010404 	.word	0x40010404

080053d4 <HAL_EXTI_GetConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d04b      	beq.n	8005470 <HAL_EXTI_GetConfigLine+0x9c>
 80053d8:	2900      	cmp	r1, #0
 80053da:	d04b      	beq.n	8005474 <HAL_EXTI_GetConfigLine+0xa0>
{
 80053dc:	b430      	push	{r4, r5}

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 80053de:	6803      	ldr	r3, [r0, #0]
 80053e0:	600b      	str	r3, [r1, #0]

  /* Compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 80053e2:	f003 051f 	and.w	r5, r3, #31
  maskline = (1uL << linepos);
 80053e6:	2201      	movs	r2, #1
 80053e8:	40aa      	lsls	r2, r5
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80053ea:	f3c3 4000 	ubfx	r0, r3, #16, #1

  /* 1] Get core mode : interrupt */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 80053ee:	0140      	lsls	r0, r0, #5
 80053f0:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
 80053f4:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
  regval = *regaddr;
 80053f8:	6824      	ldr	r4, [r4, #0]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00u)
 80053fa:	4222      	tst	r2, r4
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 80053fc:	bf14      	ite	ne
 80053fe:	2401      	movne	r4, #1
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8005400:	2400      	moveq	r4, #0
 8005402:	604c      	str	r4, [r1, #4]
  }

  /* Get event mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8005404:	4c1c      	ldr	r4, [pc, #112]	; (8005478 <HAL_EXTI_GetConfigLine+0xa4>)
  regval = *regaddr;
 8005406:	5904      	ldr	r4, [r0, r4]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00u)
 8005408:	4222      	tst	r2, r4
 800540a:	d003      	beq.n	8005414 <HAL_EXTI_GetConfigLine+0x40>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 800540c:	684c      	ldr	r4, [r1, #4]
 800540e:	f044 0402 	orr.w	r4, r4, #2
 8005412:	604c      	str	r4, [r1, #4]
  }

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8005414:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005418:	d025      	beq.n	8005466 <HAL_EXTI_GetConfigLine+0x92>
  {
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 800541a:	4c18      	ldr	r4, [pc, #96]	; (800547c <HAL_EXTI_GetConfigLine+0xa8>)
    regval = *regaddr;
 800541c:	5904      	ldr	r4, [r0, r4]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00u)
 800541e:	4222      	tst	r2, r4
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8005420:	bf14      	ite	ne
 8005422:	2401      	movne	r4, #1
    }
    else
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8005424:	2400      	moveq	r4, #0
 8005426:	608c      	str	r4, [r1, #8]
    }

    /* Get falling configuration */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8005428:	4c15      	ldr	r4, [pc, #84]	; (8005480 <HAL_EXTI_GetConfigLine+0xac>)
    regval = *regaddr;
 800542a:	5900      	ldr	r0, [r0, r4]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00u)
 800542c:	4202      	tst	r2, r0
 800542e:	d003      	beq.n	8005438 <HAL_EXTI_GetConfigLine+0x64>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8005430:	688a      	ldr	r2, [r1, #8]
 8005432:	f042 0202 	orr.w	r2, r2, #2
 8005436:	608a      	str	r2, [r1, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8005438:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800543c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005440:	d002      	beq.n	8005448 <HAL_EXTI_GetConfigLine+0x74>
      regval = SYSCFG->EXTICR[linepos >> 2u];
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
    }
    else
    {
      pExtiConfig->GPIOSel = 0x00u;
 8005442:	2000      	movs	r0, #0
 8005444:	60c8      	str	r0, [r1, #12]
 8005446:	e011      	b.n	800546c <HAL_EXTI_GetConfigLine+0x98>
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8005448:	08ab      	lsrs	r3, r5, #2
 800544a:	3302      	adds	r3, #2
 800544c:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <HAL_EXTI_GetConfigLine+0xb0>)
 800544e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8005452:	43eb      	mvns	r3, r5
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	0e1b      	lsrs	r3, r3, #24
 8005460:	60cb      	str	r3, [r1, #12]
  {
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
    pExtiConfig->GPIOSel = 0x00u;
  }

  return HAL_OK;
 8005462:	2000      	movs	r0, #0
 8005464:	e002      	b.n	800546c <HAL_EXTI_GetConfigLine+0x98>
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8005466:	2000      	movs	r0, #0
 8005468:	6088      	str	r0, [r1, #8]
    pExtiConfig->GPIOSel = 0x00u;
 800546a:	60c8      	str	r0, [r1, #12]
}
 800546c:	bc30      	pop	{r4, r5}
 800546e:	4770      	bx	lr
    return HAL_ERROR;
 8005470:	2001      	movs	r0, #1
 8005472:	4770      	bx	lr
 8005474:	2001      	movs	r0, #1
}
 8005476:	4770      	bx	lr
 8005478:	40010404 	.word	0x40010404
 800547c:	40010408 	.word	0x40010408
 8005480:	4001040c 	.word	0x4001040c
 8005484:	40010000 	.word	0x40010000

08005488 <HAL_EXTI_ClearConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if (hexti == NULL)
 8005488:	2800      	cmp	r0, #0
 800548a:	d03b      	beq.n	8005504 <HAL_EXTI_ClearConfigLine+0x7c>
{
 800548c:	b470      	push	{r4, r5, r6}
 800548e:	4605      	mov	r5, r0

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005490:	6804      	ldr	r4, [r0, #0]
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8005492:	f004 061f 	and.w	r6, r4, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005496:	f3c4 4000 	ubfx	r0, r4, #16, #1
  maskline = (1uL << linepos);

  /* 1] Clear interrupt mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 800549a:	0140      	lsls	r0, r0, #5
 800549c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80054a0:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
  regval = (*regaddr & ~maskline);
 80054a4:	6811      	ldr	r1, [r2, #0]
  maskline = (1uL << linepos);
 80054a6:	2301      	movs	r3, #1
 80054a8:	40b3      	lsls	r3, r6
  regval = (*regaddr & ~maskline);
 80054aa:	43db      	mvns	r3, r3
 80054ac:	4019      	ands	r1, r3
  *regaddr = regval;
 80054ae:	6011      	str	r1, [r2, #0]

  /* 2] Clear event mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 80054b0:	4917      	ldr	r1, [pc, #92]	; (8005510 <HAL_EXTI_ClearConfigLine+0x88>)
  regval = (*regaddr & ~maskline);
 80054b2:	5842      	ldr	r2, [r0, r1]
 80054b4:	401a      	ands	r2, r3
  *regaddr = regval;
 80054b6:	5042      	str	r2, [r0, r1]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 80054b8:	682a      	ldr	r2, [r5, #0]
 80054ba:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80054be:	d023      	beq.n	8005508 <HAL_EXTI_ClearConfigLine+0x80>
  {
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 80054c0:	3104      	adds	r1, #4
    regval = (*regaddr & ~maskline);
 80054c2:	5842      	ldr	r2, [r0, r1]
 80054c4:	401a      	ands	r2, r3
    *regaddr = regval;
 80054c6:	5042      	str	r2, [r0, r1]

    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 80054c8:	4a12      	ldr	r2, [pc, #72]	; (8005514 <HAL_EXTI_ClearConfigLine+0x8c>)
    regval = (*regaddr & ~maskline);
 80054ca:	5881      	ldr	r1, [r0, r2]
 80054cc:	400b      	ands	r3, r1
    *regaddr = regval;
 80054ce:	5083      	str	r3, [r0, r2]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80054d6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80054da:	d001      	beq.n	80054e0 <HAL_EXTI_ClearConfigLine+0x58>
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
      SYSCFG->EXTICR[linepos >> 2u] = regval;
    }
  }

  return HAL_OK;
 80054dc:	2000      	movs	r0, #0
 80054de:	e014      	b.n	800550a <HAL_EXTI_ClearConfigLine+0x82>
 80054e0:	f006 061c 	and.w	r6, r6, #28
 80054e4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80054e8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      regval = SYSCFG->EXTICR[linepos >> 2u];
 80054ec:	68b2      	ldr	r2, [r6, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80054ee:	f004 0303 	and.w	r3, r4, #3
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	2107      	movs	r1, #7
 80054f6:	fa01 f303 	lsl.w	r3, r1, r3
 80054fa:	ea22 0303 	bic.w	r3, r2, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 80054fe:	60b3      	str	r3, [r6, #8]
  return HAL_OK;
 8005500:	2000      	movs	r0, #0
 8005502:	e002      	b.n	800550a <HAL_EXTI_ClearConfigLine+0x82>
    return HAL_ERROR;
 8005504:	2001      	movs	r0, #1
}
 8005506:	4770      	bx	lr
  return HAL_OK;
 8005508:	2000      	movs	r0, #0
}
 800550a:	bc70      	pop	{r4, r5, r6}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40010404 	.word	0x40010404
 8005514:	4001040c 	.word	0x4001040c

08005518 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8005518:	b911      	cbnz	r1, 8005520 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800551a:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800551c:	2000      	movs	r0, #0
      break;
 800551e:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8005520:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8005522:	4770      	bx	lr

08005524 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005524:	b110      	cbz	r0, 800552c <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005526:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8005528:	2000      	movs	r0, #0
 800552a:	4770      	bx	lr
    return HAL_ERROR;
 800552c:	2001      	movs	r0, #1
  }
}
 800552e:	4770      	bx	lr

08005530 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005530:	b510      	push	{r4, lr}
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005532:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005534:	f003 011f 	and.w	r1, r3, #31
 8005538:	2201      	movs	r2, #1
 800553a:	408a      	lsls	r2, r1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800553c:	f3c3 4300 	ubfx	r3, r3, #16, #1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005540:	015b      	lsls	r3, r3, #5
 8005542:	4904      	ldr	r1, [pc, #16]	; (8005554 <HAL_EXTI_IRQHandler+0x24>)
  regval = (*regaddr & maskline);
 8005544:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8005546:	4214      	tst	r4, r2
 8005548:	d003      	beq.n	8005552 <HAL_EXTI_IRQHandler+0x22>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800554a:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800554c:	6843      	ldr	r3, [r0, #4]
 800554e:	b103      	cbz	r3, 8005552 <HAL_EXTI_IRQHandler+0x22>
    {
      hexti->PendingCallback();
 8005550:	4798      	blx	r3
    }
  }
}
 8005552:	bd10      	pop	{r4, pc}
 8005554:	40010414 	.word	0x40010414

08005558 <HAL_EXTI_GetPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005558:	6803      	ldr	r3, [r0, #0]
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800555a:	f003 001f 	and.w	r0, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800555e:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << linepos);

  /* Get pending bit */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005562:	015b      	lsls	r3, r3, #5
 8005564:	4a03      	ldr	r2, [pc, #12]	; (8005574 <HAL_EXTI_GetPending+0x1c>)

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
 8005566:	589a      	ldr	r2, [r3, r2]
  maskline = (1uL << linepos);
 8005568:	2301      	movs	r3, #1
 800556a:	4083      	lsls	r3, r0
  regval = ((*regaddr & maskline) >> linepos);
 800556c:	4013      	ands	r3, r2
  return regval;
}
 800556e:	fa23 f000 	lsr.w	r0, r3, r0
 8005572:	4770      	bx	lr
 8005574:	40010414 	.word	0x40010414

08005578 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005578:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800557a:	f003 011f 	and.w	r1, r3, #31
 800557e:	2201      	movs	r2, #1
 8005580:	408a      	lsls	r2, r1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005582:	f3c3 4300 	ubfx	r3, r3, #16, #1

  /* Get pending register address */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005586:	015b      	lsls	r3, r3, #5
 8005588:	4901      	ldr	r1, [pc, #4]	; (8005590 <HAL_EXTI_ClearPending+0x18>)

  /* Clear Pending bit */
  *regaddr =  maskline;
 800558a:	505a      	str	r2, [r3, r1]
}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010414 	.word	0x40010414

08005594 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005594:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005596:	f003 011f 	and.w	r1, r3, #31
 800559a:	2201      	movs	r2, #1
 800559c:	408a      	lsls	r2, r1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800559e:	f3c3 4300 	ubfx	r3, r3, #16, #1

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80055a2:	015b      	lsls	r3, r3, #5
 80055a4:	4901      	ldr	r1, [pc, #4]	; (80055ac <HAL_EXTI_GenerateSWI+0x18>)
  *regaddr = maskline;
 80055a6:	505a      	str	r2, [r3, r1]
}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010410 	.word	0x40010410

080055b0 <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80055b0:	b430      	push	{r4, r5}
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80055b2:	460b      	mov	r3, r1

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80055b4:	4c09      	ldr	r4, [pc, #36]	; (80055dc <FLASH_Program_Fast+0x2c>)
 80055b6:	6962      	ldr	r2, [r4, #20]
 80055b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80055bc:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055be:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80055c2:	b672      	cpsid	i
 80055c4:	f501 7480 	add.w	r4, r1, #256	; 0x100
 80055c8:	1a41      	subs	r1, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 80055ce:	3304      	adds	r3, #4
    row_index--;
  } while (row_index != 0U);
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	d1fa      	bne.n	80055ca <FLASH_Program_Fast+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d4:	f385 8810 	msr	PRIMASK, r5

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80055d8:	bc30      	pop	{r4, r5}
 80055da:	4770      	bx	lr
 80055dc:	40022000 	.word	0x40022000

080055e0 <HAL_FLASH_Program_IT>:
{
 80055e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 80055e2:	4c23      	ldr	r4, [pc, #140]	; (8005670 <HAL_FLASH_Program_IT+0x90>)
 80055e4:	7824      	ldrb	r4, [r4, #0]
 80055e6:	2c01      	cmp	r4, #1
 80055e8:	d040      	beq.n	800566c <HAL_FLASH_Program_IT+0x8c>
 80055ea:	4c21      	ldr	r4, [pc, #132]	; (8005670 <HAL_FLASH_Program_IT+0x90>)
 80055ec:	2501      	movs	r5, #1
 80055ee:	7025      	strb	r5, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80055f0:	2500      	movs	r5, #0
 80055f2:	6065      	str	r5, [r4, #4]
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80055f4:	4c1f      	ldr	r4, [pc, #124]	; (8005674 <HAL_FLASH_Program_IT+0x94>)
 80055f6:	6824      	ldr	r4, [r4, #0]
 80055f8:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80055fc:	d019      	beq.n	8005632 <HAL_FLASH_Program_IT+0x52>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80055fe:	4d1d      	ldr	r5, [pc, #116]	; (8005674 <HAL_FLASH_Program_IT+0x94>)
 8005600:	682c      	ldr	r4, [r5, #0]
 8005602:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005606:	602c      	str	r4, [r5, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005608:	4c19      	ldr	r4, [pc, #100]	; (8005670 <HAL_FLASH_Program_IT+0x90>)
 800560a:	2502      	movs	r5, #2
 800560c:	7725      	strb	r5, [r4, #28]
  if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800560e:	2802      	cmp	r0, #2
 8005610:	d013      	beq.n	800563a <HAL_FLASH_Program_IT+0x5a>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8005612:	4c17      	ldr	r4, [pc, #92]	; (8005670 <HAL_FLASH_Program_IT+0x90>)
 8005614:	2503      	movs	r5, #3
 8005616:	7225      	strb	r5, [r4, #8]
  pFlash.Address = Address;
 8005618:	60e1      	str	r1, [r4, #12]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800561a:	4d16      	ldr	r5, [pc, #88]	; (8005674 <HAL_FLASH_Program_IT+0x94>)
 800561c:	696c      	ldr	r4, [r5, #20]
 800561e:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 8005622:	616c      	str	r4, [r5, #20]
  if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005624:	b1c0      	cbz	r0, 8005658 <HAL_FLASH_Program_IT+0x78>
  else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005626:	3801      	subs	r0, #1
 8005628:	2801      	cmp	r0, #1
  return status;
 800562a:	bf88      	it	hi
 800562c:	2000      	movhi	r0, #0
  else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800562e:	d90d      	bls.n	800564c <HAL_FLASH_Program_IT+0x6c>
}
 8005630:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005632:	4c0f      	ldr	r4, [pc, #60]	; (8005670 <HAL_FLASH_Program_IT+0x90>)
 8005634:	2500      	movs	r5, #0
 8005636:	7725      	strb	r5, [r4, #28]
 8005638:	e7e9      	b.n	800560e <HAL_FLASH_Program_IT+0x2e>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_LAST;
 800563a:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <HAL_FLASH_Program_IT+0x90>)
 800563c:	2004      	movs	r0, #4
 800563e:	7218      	strb	r0, [r3, #8]
  pFlash.Address = Address;
 8005640:	60d9      	str	r1, [r3, #12]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005642:	480c      	ldr	r0, [pc, #48]	; (8005674 <HAL_FLASH_Program_IT+0x94>)
 8005644:	6943      	ldr	r3, [r0, #20]
 8005646:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800564a:	6143      	str	r3, [r0, #20]
 800564c:	4608      	mov	r0, r1
    FLASH_Program_Fast(Address, (uint32_t)Data);
 800564e:	4611      	mov	r1, r2
 8005650:	f7ff ffae 	bl	80055b0 <FLASH_Program_Fast>
  return status;
 8005654:	2000      	movs	r0, #0
 8005656:	e7eb      	b.n	8005630 <HAL_FLASH_Program_IT+0x50>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005658:	6968      	ldr	r0, [r5, #20]
 800565a:	f040 0001 	orr.w	r0, r0, #1
 800565e:	6168      	str	r0, [r5, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005660:	600a      	str	r2, [r1, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005662:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005666:	604b      	str	r3, [r1, #4]
  return status;
 8005668:	2000      	movs	r0, #0
 800566a:	e7e1      	b.n	8005630 <HAL_FLASH_Program_IT+0x50>
  __HAL_LOCK(&pFlash);
 800566c:	2002      	movs	r0, #2
 800566e:	e7df      	b.n	8005630 <HAL_FLASH_Program_IT+0x50>
 8005670:	20000014 	.word	0x20000014
 8005674:	40022000 	.word	0x40022000

08005678 <HAL_FLASH_EndOfOperationCallback>:
}
 8005678:	4770      	bx	lr

0800567a <HAL_FLASH_OperationErrorCallback>:
}
 800567a:	4770      	bx	lr

0800567c <HAL_FLASH_IRQHandler>:
{
 800567c:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 800567e:	4a50      	ldr	r2, [pc, #320]	; (80057c0 <HAL_FLASH_IRQHandler+0x144>)
 8005680:	6953      	ldr	r3, [r2, #20]
 8005682:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005686:	f023 0307 	bic.w	r3, r3, #7
 800568a:	6153      	str	r3, [r2, #20]
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 800568c:	6953      	ldr	r3, [r2, #20]
 800568e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005692:	6153      	str	r3, [r2, #20]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8005694:	4b4b      	ldr	r3, [pc, #300]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 8005696:	7a1b      	ldrb	r3, [r3, #8]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b04      	cmp	r3, #4
 800569c:	d050      	beq.n	8005740 <HAL_FLASH_IRQHandler+0xc4>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800569e:	4948      	ldr	r1, [pc, #288]	; (80057c0 <HAL_FLASH_IRQHandler+0x144>)
 80056a0:	690a      	ldr	r2, [r1, #16]
 80056a2:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80056a6:	f022 0205 	bic.w	r2, r2, #5
 80056aa:	0412      	lsls	r2, r2, #16
 80056ac:	0c12      	lsrs	r2, r2, #16
  error |= (FLASH->ECCR & FLASH_FLAG_ECCC);
 80056ae:	698b      	ldr	r3, [r1, #24]
 80056b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  if (error !=0U)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	d024      	beq.n	8005702 <HAL_FLASH_IRQHandler+0x86>
    pFlash.ErrorCode |= error;
 80056b8:	4942      	ldr	r1, [pc, #264]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 80056ba:	684a      	ldr	r2, [r1, #4]
 80056bc:	431a      	orrs	r2, r3
 80056be:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 80056c0:	f013 4240 	ands.w	r2, r3, #3221225472	; 0xc0000000
 80056c4:	d003      	beq.n	80056ce <HAL_FLASH_IRQHandler+0x52>
 80056c6:	493e      	ldr	r1, [pc, #248]	; (80057c0 <HAL_FLASH_IRQHandler+0x144>)
 80056c8:	6988      	ldr	r0, [r1, #24]
 80056ca:	4302      	orrs	r2, r0
 80056cc:	618a      	str	r2, [r1, #24]
 80056ce:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 80056d2:	bf1c      	itt	ne
 80056d4:	4a3a      	ldrne	r2, [pc, #232]	; (80057c0 <HAL_FLASH_IRQHandler+0x144>)
 80056d6:	6113      	strne	r3, [r2, #16]
    FLASH_FlushCaches() ;
 80056d8:	f000 fc4e 	bl	8005f78 <FLASH_FlushCaches>
    procedure = pFlash.ProcedureOnGoing;
 80056dc:	4b39      	ldr	r3, [pc, #228]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 80056de:	7a1b      	ldrb	r3, [r3, #8]
 80056e0:	b2db      	uxtb	r3, r3
    if(procedure == FLASH_PROC_PAGE_ERASE)
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d031      	beq.n	800574a <HAL_FLASH_IRQHandler+0xce>
    else if(procedure == FLASH_PROC_MASS_ERASE)
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d034      	beq.n	8005754 <HAL_FLASH_IRQHandler+0xd8>
    else if((procedure == FLASH_PROC_PROGRAM) ||
 80056ea:	3b03      	subs	r3, #3
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 80056f0:	bf9a      	itte	ls
 80056f2:	4b34      	ldrls	r3, [pc, #208]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 80056f4:	68d8      	ldrls	r0, [r3, #12]
       HAL_FLASH_OperationErrorCallback(0U);
 80056f6:	2000      	movhi	r0, #0
 80056f8:	f7ff ffbf 	bl	800567a <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 80056fe:	2200      	movs	r2, #0
 8005700:	721a      	strb	r2, [r3, #8]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8005702:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <HAL_FLASH_IRQHandler+0x144>)
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f013 0f01 	tst.w	r3, #1
 800570a:	d042      	beq.n	8005792 <HAL_FLASH_IRQHandler+0x116>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800570c:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <HAL_FLASH_IRQHandler+0x144>)
 800570e:	2201      	movs	r2, #1
 8005710:	611a      	str	r2, [r3, #16]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8005712:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 8005714:	7a1b      	ldrb	r3, [r3, #8]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	4293      	cmp	r3, r2
 800571a:	d12c      	bne.n	8005776 <HAL_FLASH_IRQHandler+0xfa>
      pFlash.NbPagesToErase--;
 800571c:	4b29      	ldr	r3, [pc, #164]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 800571e:	699a      	ldr	r2, [r3, #24]
 8005720:	3a01      	subs	r2, #1
 8005722:	619a      	str	r2, [r3, #24]
      if(pFlash.NbPagesToErase != 0U)
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	b1d3      	cbz	r3, 800575e <HAL_FLASH_IRQHandler+0xe2>
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8005728:	4c26      	ldr	r4, [pc, #152]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 800572a:	6960      	ldr	r0, [r4, #20]
 800572c:	f7ff ffa4 	bl	8005678 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Page++;
 8005730:	6963      	ldr	r3, [r4, #20]
 8005732:	3301      	adds	r3, #1
 8005734:	6163      	str	r3, [r4, #20]
        tmp_page = pFlash.Page;
 8005736:	6960      	ldr	r0, [r4, #20]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8005738:	6921      	ldr	r1, [r4, #16]
 800573a:	f000 fba3 	bl	8005e84 <FLASH_PageErase>
 800573e:	e028      	b.n	8005792 <HAL_FLASH_IRQHandler+0x116>
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005740:	6953      	ldr	r3, [r2, #20]
 8005742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005746:	6153      	str	r3, [r2, #20]
 8005748:	e7a9      	b.n	800569e <HAL_FLASH_IRQHandler+0x22>
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 800574a:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 800574c:	6958      	ldr	r0, [r3, #20]
 800574e:	f7ff ff94 	bl	800567a <HAL_FLASH_OperationErrorCallback>
 8005752:	e7d3      	b.n	80056fc <HAL_FLASH_IRQHandler+0x80>
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8005754:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 8005756:	6918      	ldr	r0, [r3, #16]
 8005758:	f7ff ff8f 	bl	800567a <HAL_FLASH_OperationErrorCallback>
 800575c:	e7ce      	b.n	80056fc <HAL_FLASH_IRQHandler+0x80>
        pFlash.Page = 0xFFFFFFFFU;
 800575e:	4c19      	ldr	r4, [pc, #100]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 8005760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005764:	6163      	str	r3, [r4, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005766:	2300      	movs	r3, #0
 8005768:	7223      	strb	r3, [r4, #8]
        FLASH_FlushCaches() ;
 800576a:	f000 fc05 	bl	8005f78 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 800576e:	6960      	ldr	r0, [r4, #20]
 8005770:	f7ff ff82 	bl	8005678 <HAL_FLASH_EndOfOperationCallback>
 8005774:	e00d      	b.n	8005792 <HAL_FLASH_IRQHandler+0x116>
      FLASH_FlushCaches() ;
 8005776:	f000 fbff 	bl	8005f78 <FLASH_FlushCaches>
      procedure = pFlash.ProcedureOnGoing;
 800577a:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 800577c:	7a1b      	ldrb	r3, [r3, #8]
 800577e:	b2db      	uxtb	r3, r3
      if(procedure == FLASH_PROC_MASS_ERASE)
 8005780:	2b02      	cmp	r3, #2
 8005782:	d012      	beq.n	80057aa <HAL_FLASH_IRQHandler+0x12e>
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8005784:	3b03      	subs	r3, #3
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d913      	bls.n	80057b4 <HAL_FLASH_IRQHandler+0x138>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800578c:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 800578e:	2200      	movs	r2, #0
 8005790:	721a      	strb	r2, [r3, #8]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005792:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 8005794:	7a1b      	ldrb	r3, [r3, #8]
 8005796:	b93b      	cbnz	r3, 80057a8 <HAL_FLASH_IRQHandler+0x12c>
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <HAL_FLASH_IRQHandler+0x144>)
 800579a:	6953      	ldr	r3, [r2, #20]
 800579c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80057a0:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(&pFlash);
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
}
 80057a8:	bd10      	pop	{r4, pc}
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 80057ac:	6918      	ldr	r0, [r3, #16]
 80057ae:	f7ff ff63 	bl	8005678 <HAL_FLASH_EndOfOperationCallback>
 80057b2:	e7eb      	b.n	800578c <HAL_FLASH_IRQHandler+0x110>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <HAL_FLASH_IRQHandler+0x148>)
 80057b6:	68d8      	ldr	r0, [r3, #12]
 80057b8:	f7ff ff5e 	bl	8005678 <HAL_FLASH_EndOfOperationCallback>
 80057bc:	e7e6      	b.n	800578c <HAL_FLASH_IRQHandler+0x110>
 80057be:	bf00      	nop
 80057c0:	40022000 	.word	0x40022000
 80057c4:	20000014 	.word	0x20000014

080057c8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80057c8:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <HAL_FLASH_Unlock+0x20>)
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	db01      	blt.n	80057d4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80057d0:	2000      	movs	r0, #0
}
 80057d2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_FLASH_Unlock+0x20>)
 80057d6:	4a05      	ldr	r2, [pc, #20]	; (80057ec <HAL_FLASH_Unlock+0x24>)
 80057d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80057da:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80057de:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80057e0:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	0fc0      	lsrs	r0, r0, #31
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40022000 	.word	0x40022000
 80057ec:	45670123 	.word	0x45670123

080057f0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80057f0:	4a03      	ldr	r2, [pc, #12]	; (8005800 <HAL_FLASH_Lock+0x10>)
 80057f2:	6953      	ldr	r3, [r2, #20]
 80057f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057f8:	6153      	str	r3, [r2, #20]
}
 80057fa:	2000      	movs	r0, #0
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40022000 	.word	0x40022000

08005804 <HAL_FLASH_OB_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8005804:	4b07      	ldr	r3, [pc, #28]	; (8005824 <HAL_FLASH_OB_Unlock+0x20>)
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800580c:	d007      	beq.n	800581e <HAL_FLASH_OB_Unlock+0x1a>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800580e:	4b05      	ldr	r3, [pc, #20]	; (8005824 <HAL_FLASH_OB_Unlock+0x20>)
 8005810:	4a05      	ldr	r2, [pc, #20]	; (8005828 <HAL_FLASH_OB_Unlock+0x24>)
 8005812:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8005814:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 8005818:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800581a:	2000      	movs	r0, #0
 800581c:	4770      	bx	lr
    return HAL_ERROR;
 800581e:	2001      	movs	r0, #1
}
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40022000 	.word	0x40022000
 8005828:	08192a3b 	.word	0x08192a3b

0800582c <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800582c:	4a03      	ldr	r2, [pc, #12]	; (800583c <HAL_FLASH_OB_Lock+0x10>)
 800582e:	6953      	ldr	r3, [r2, #20]
 8005830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005834:	6153      	str	r3, [r2, #20]
}
 8005836:	2000      	movs	r0, #0
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40022000 	.word	0x40022000

08005840 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8005840:	4b01      	ldr	r3, [pc, #4]	; (8005848 <HAL_FLASH_GetError+0x8>)
 8005842:	6858      	ldr	r0, [r3, #4]
}
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20000014 	.word	0x20000014

0800584c <FLASH_WaitForLastOperation>:
{
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8005850:	f7ff f81c 	bl	800488c <HAL_GetTick>
 8005854:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005856:	4c1e      	ldr	r4, [pc, #120]	; (80058d0 <FLASH_WaitForLastOperation+0x84>)
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800585e:	d009      	beq.n	8005874 <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 8005860:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005864:	d0f8      	beq.n	8005858 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005866:	f7ff f811 	bl	800488c <HAL_GetTick>
 800586a:	1b80      	subs	r0, r0, r6
 800586c:	42a8      	cmp	r0, r5
 800586e:	d3f3      	bcc.n	8005858 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8005870:	2003      	movs	r0, #3
 8005872:	e027      	b.n	80058c4 <FLASH_WaitForLastOperation+0x78>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005874:	4916      	ldr	r1, [pc, #88]	; (80058d0 <FLASH_WaitForLastOperation+0x84>)
 8005876:	690a      	ldr	r2, [r1, #16]
 8005878:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800587c:	f022 0205 	bic.w	r2, r2, #5
 8005880:	0412      	lsls	r2, r2, #16
 8005882:	0c12      	lsrs	r2, r2, #16
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8005884:	698b      	ldr	r3, [r1, #24]
 8005886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  if(error != 0u)
 800588a:	4313      	orrs	r3, r2
 800588c:	d011      	beq.n	80058b2 <FLASH_WaitForLastOperation+0x66>
    pFlash.ErrorCode |= error;
 800588e:	4911      	ldr	r1, [pc, #68]	; (80058d4 <FLASH_WaitForLastOperation+0x88>)
 8005890:	684a      	ldr	r2, [r1, #4]
 8005892:	431a      	orrs	r2, r3
 8005894:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8005896:	f013 4240 	ands.w	r2, r3, #3221225472	; 0xc0000000
 800589a:	d003      	beq.n	80058a4 <FLASH_WaitForLastOperation+0x58>
 800589c:	490c      	ldr	r1, [pc, #48]	; (80058d0 <FLASH_WaitForLastOperation+0x84>)
 800589e:	6988      	ldr	r0, [r1, #24]
 80058a0:	4302      	orrs	r2, r0
 80058a2:	618a      	str	r2, [r1, #24]
 80058a4:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 80058a8:	d00d      	beq.n	80058c6 <FLASH_WaitForLastOperation+0x7a>
 80058aa:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <FLASH_WaitForLastOperation+0x84>)
 80058ac:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 80058ae:	2001      	movs	r0, #1
 80058b0:	e008      	b.n	80058c4 <FLASH_WaitForLastOperation+0x78>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <FLASH_WaitForLastOperation+0x84>)
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f013 0f01 	tst.w	r3, #1
 80058ba:	d006      	beq.n	80058ca <FLASH_WaitForLastOperation+0x7e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <FLASH_WaitForLastOperation+0x84>)
 80058be:	2201      	movs	r2, #1
 80058c0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80058c2:	2000      	movs	r0, #0
}
 80058c4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80058c6:	2001      	movs	r0, #1
 80058c8:	e7fc      	b.n	80058c4 <FLASH_WaitForLastOperation+0x78>
  return HAL_OK;
 80058ca:	2000      	movs	r0, #0
 80058cc:	e7fa      	b.n	80058c4 <FLASH_WaitForLastOperation+0x78>
 80058ce:	bf00      	nop
 80058d0:	40022000 	.word	0x40022000
 80058d4:	20000014 	.word	0x20000014

080058d8 <HAL_FLASH_Program>:
{
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80058dc:	4c2b      	ldr	r4, [pc, #172]	; (800598c <HAL_FLASH_Program+0xb4>)
 80058de:	7824      	ldrb	r4, [r4, #0]
 80058e0:	2c01      	cmp	r4, #1
 80058e2:	d050      	beq.n	8005986 <HAL_FLASH_Program+0xae>
 80058e4:	4698      	mov	r8, r3
 80058e6:	4617      	mov	r7, r2
 80058e8:	460d      	mov	r5, r1
 80058ea:	4604      	mov	r4, r0
 80058ec:	4b27      	ldr	r3, [pc, #156]	; (800598c <HAL_FLASH_Program+0xb4>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058f6:	f7ff ffa9 	bl	800584c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80058fa:	4606      	mov	r6, r0
 80058fc:	b9d0      	cbnz	r0, 8005934 <HAL_FLASH_Program+0x5c>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80058fe:	4b23      	ldr	r3, [pc, #140]	; (800598c <HAL_FLASH_Program+0xb4>)
 8005900:	2200      	movs	r2, #0
 8005902:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005904:	4b22      	ldr	r3, [pc, #136]	; (8005990 <HAL_FLASH_Program+0xb8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800590c:	d018      	beq.n	8005940 <HAL_FLASH_Program+0x68>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800590e:	4a20      	ldr	r2, [pc, #128]	; (8005990 <HAL_FLASH_Program+0xb8>)
 8005910:	6813      	ldr	r3, [r2, #0]
 8005912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005916:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005918:	4b1c      	ldr	r3, [pc, #112]	; (800598c <HAL_FLASH_Program+0xb4>)
 800591a:	2202      	movs	r2, #2
 800591c:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800591e:	b19c      	cbz	r4, 8005948 <HAL_FLASH_Program+0x70>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005920:	1e63      	subs	r3, r4, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d926      	bls.n	8005974 <HAL_FLASH_Program+0x9c>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005926:	f24c 3050 	movw	r0, #50000	; 0xc350
 800592a:	f7ff ff8f 	bl	800584c <FLASH_WaitForLastOperation>
 800592e:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 8005930:	f000 fb22 	bl	8005f78 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8005934:	4b15      	ldr	r3, [pc, #84]	; (800598c <HAL_FLASH_Program+0xb4>)
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
}
 800593a:	4630      	mov	r0, r6
 800593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005940:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_FLASH_Program+0xb4>)
 8005942:	2200      	movs	r2, #0
 8005944:	771a      	strb	r2, [r3, #28]
 8005946:	e7ea      	b.n	800591e <HAL_FLASH_Program+0x46>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005948:	4a11      	ldr	r2, [pc, #68]	; (8005990 <HAL_FLASH_Program+0xb8>)
 800594a:	6953      	ldr	r3, [r2, #20]
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	6153      	str	r3, [r2, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005952:	602f      	str	r7, [r5, #0]
 8005954:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005958:	f8c5 8004 	str.w	r8, [r5, #4]
      prog_bit = FLASH_CR_PG;
 800595c:	2401      	movs	r4, #1
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800595e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005962:	f7ff ff73 	bl	800584c <FLASH_WaitForLastOperation>
 8005966:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005968:	4a09      	ldr	r2, [pc, #36]	; (8005990 <HAL_FLASH_Program+0xb8>)
 800596a:	6953      	ldr	r3, [r2, #20]
 800596c:	ea23 0304 	bic.w	r3, r3, r4
 8005970:	6153      	str	r3, [r2, #20]
 8005972:	e7dd      	b.n	8005930 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005974:	4639      	mov	r1, r7
 8005976:	4628      	mov	r0, r5
 8005978:	f7ff fe1a 	bl	80055b0 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800597c:	2c02      	cmp	r4, #2
 800597e:	d1d2      	bne.n	8005926 <HAL_FLASH_Program+0x4e>
        prog_bit = FLASH_CR_FSTPG;
 8005980:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8005984:	e7eb      	b.n	800595e <HAL_FLASH_Program+0x86>
  __HAL_LOCK(&pFlash);
 8005986:	2602      	movs	r6, #2
 8005988:	e7d7      	b.n	800593a <HAL_FLASH_Program+0x62>
 800598a:	bf00      	nop
 800598c:	20000014 	.word	0x20000014
 8005990:	40022000 	.word	0x40022000

08005994 <HAL_FLASH_OB_Launch>:
{
 8005994:	b508      	push	{r3, lr}
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8005996:	4a05      	ldr	r2, [pc, #20]	; (80059ac <HAL_FLASH_OB_Launch+0x18>)
 8005998:	6953      	ldr	r3, [r2, #20]
 800599a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800599e:	6153      	str	r3, [r2, #20]
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80059a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059a4:	f7ff ff52 	bl	800584c <FLASH_WaitForLastOperation>
}
 80059a8:	bd08      	pop	{r3, pc}
 80059aa:	bf00      	nop
 80059ac:	40022000 	.word	0x40022000

080059b0 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80059b0:	f010 0f01 	tst.w	r0, #1
 80059b4:	d004      	beq.n	80059c0 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80059b6:	4a09      	ldr	r2, [pc, #36]	; (80059dc <FLASH_MassErase+0x2c>)
 80059b8:	6953      	ldr	r3, [r2, #20]
 80059ba:	f043 0304 	orr.w	r3, r3, #4
 80059be:	6153      	str	r3, [r2, #20]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80059c0:	f010 0f02 	tst.w	r0, #2
 80059c4:	d004      	beq.n	80059d0 <FLASH_MassErase+0x20>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80059c6:	4a05      	ldr	r2, [pc, #20]	; (80059dc <FLASH_MassErase+0x2c>)
 80059c8:	6953      	ldr	r3, [r2, #20]
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80059d0:	4a02      	ldr	r2, [pc, #8]	; (80059dc <FLASH_MassErase+0x2c>)
 80059d2:	6953      	ldr	r3, [r2, #20]
 80059d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d8:	6153      	str	r3, [r2, #20]
}
 80059da:	4770      	bx	lr
 80059dc:	40022000 	.word	0x40022000

080059e0 <HAL_FLASHEx_OBProgram>:
{
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80059e4:	4bb4      	ldr	r3, [pc, #720]	; (8005cb8 <HAL_FLASHEx_OBProgram+0x2d8>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	f000 8193 	beq.w	8005d14 <HAL_FLASHEx_OBProgram+0x334>
 80059ee:	4604      	mov	r4, r0
 80059f0:	4bb1      	ldr	r3, [pc, #708]	; (8005cb8 <HAL_FLASHEx_OBProgram+0x2d8>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80059f6:	2200      	movs	r2, #0
 80059f8:	605a      	str	r2, [r3, #4]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 80059fa:	6803      	ldr	r3, [r0, #0]
 80059fc:	f013 0f01 	tst.w	r3, #1
 8005a00:	d117      	bne.n	8005a32 <HAL_FLASHEx_OBProgram+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8005a02:	2600      	movs	r6, #0
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	f013 0f02 	tst.w	r3, #2
 8005a0a:	d15c      	bne.n	8005ac6 <HAL_FLASHEx_OBProgram+0xe6>
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	f013 0f04 	tst.w	r3, #4
 8005a12:	d176      	bne.n	8005b02 <HAL_FLASHEx_OBProgram+0x122>
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	f013 0f08 	tst.w	r3, #8
 8005a1a:	d004      	beq.n	8005a26 <HAL_FLASHEx_OBProgram+0x46>
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8005a1c:	6a25      	ldr	r5, [r4, #32]
 8005a1e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005a20:	42bd      	cmp	r5, r7
 8005a22:	f040 80f7 	bne.w	8005c14 <HAL_FLASHEx_OBProgram+0x234>
  __HAL_UNLOCK(&pFlash);
 8005a26:	4ba4      	ldr	r3, [pc, #656]	; (8005cb8 <HAL_FLASHEx_OBProgram+0x2d8>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
}
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 8005a32:	6845      	ldr	r5, [r0, #4]
 8005a34:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8005a38:	68c7      	ldr	r7, [r0, #12]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a3e:	f7ff ff05 	bl	800584c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8005a42:	4606      	mov	r6, r0
 8005a44:	b9b8      	cbnz	r0, 8005a76 <HAL_FLASHEx_OBProgram+0x96>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8005a46:	b9d5      	cbnz	r5, 8005a7e <HAL_FLASHEx_OBProgram+0x9e>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8005a48:	4a9c      	ldr	r2, [pc, #624]	; (8005cbc <HAL_FLASHEx_OBProgram+0x2dc>)
 8005a4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005a4c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005a50:	ea43 0308 	orr.w	r3, r3, r8
 8005a54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a58:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005a5a:	4d98      	ldr	r5, [pc, #608]	; (8005cbc <HAL_FLASHEx_OBProgram+0x2dc>)
 8005a5c:	696b      	ldr	r3, [r5, #20]
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a62:	616b      	str	r3, [r5, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a68:	f7ff fef0 	bl	800584c <FLASH_WaitForLastOperation>
 8005a6c:	4606      	mov	r6, r0

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005a6e:	696b      	ldr	r3, [r5, #20]
 8005a70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a74:	616b      	str	r3, [r5, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8005a76:	3600      	adds	r6, #0
 8005a78:	bf18      	it	ne
 8005a7a:	2601      	movne	r6, #1
 8005a7c:	e7c2      	b.n	8005a04 <HAL_FLASHEx_OBProgram+0x24>
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8005a7e:	2d01      	cmp	r5, #1
 8005a80:	d00d      	beq.n	8005a9e <HAL_FLASHEx_OBProgram+0xbe>
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8005a82:	2d02      	cmp	r5, #2
 8005a84:	d015      	beq.n	8005ab2 <HAL_FLASHEx_OBProgram+0xd2>
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8005a86:	2d04      	cmp	r5, #4
 8005a88:	d1e7      	bne.n	8005a5a <HAL_FLASHEx_OBProgram+0x7a>
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 8005a8a:	4a8c      	ldr	r2, [pc, #560]	; (8005cbc <HAL_FLASHEx_OBProgram+0x2dc>)
 8005a8c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005a8e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005a92:	ea43 0308 	orr.w	r3, r3, r8
 8005a96:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a9a:	6513      	str	r3, [r2, #80]	; 0x50
 8005a9c:	e7dd      	b.n	8005a5a <HAL_FLASHEx_OBProgram+0x7a>
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 8005a9e:	4a87      	ldr	r2, [pc, #540]	; (8005cbc <HAL_FLASHEx_OBProgram+0x2dc>)
 8005aa0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005aa2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005aa6:	ea43 0308 	orr.w	r3, r3, r8
 8005aaa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005aae:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab0:	e7d3      	b.n	8005a5a <HAL_FLASHEx_OBProgram+0x7a>
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 8005ab2:	4a82      	ldr	r2, [pc, #520]	; (8005cbc <HAL_FLASHEx_OBProgram+0x2dc>)
 8005ab4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005ab6:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005aba:	ea43 0308 	orr.w	r3, r3, r8
 8005abe:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ac4:	e7c9      	b.n	8005a5a <HAL_FLASHEx_OBProgram+0x7a>
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8005ac6:	6927      	ldr	r7, [r4, #16]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ac8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005acc:	f7ff febe 	bl	800584c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8005ad0:	b108      	cbz	r0, 8005ad6 <HAL_FLASHEx_OBProgram+0xf6>
      status = HAL_ERROR;
 8005ad2:	2601      	movs	r6, #1
 8005ad4:	e79a      	b.n	8005a0c <HAL_FLASHEx_OBProgram+0x2c>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 8005ad6:	4d79      	ldr	r5, [pc, #484]	; (8005cbc <HAL_FLASHEx_OBProgram+0x2dc>)
 8005ad8:	6a2b      	ldr	r3, [r5, #32]
 8005ada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ade:	433b      	orrs	r3, r7
 8005ae0:	622b      	str	r3, [r5, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005ae2:	696b      	ldr	r3, [r5, #20]
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	616b      	str	r3, [r5, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005aea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005aee:	f7ff fead 	bl	800584c <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005af2:	696b      	ldr	r3, [r5, #20]
 8005af4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005af8:	616b      	str	r3, [r5, #20]
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8005afa:	2800      	cmp	r0, #0
      status = HAL_ERROR;
 8005afc:	bf18      	it	ne
 8005afe:	2601      	movne	r6, #1
 8005b00:	e784      	b.n	8005a0c <HAL_FLASHEx_OBProgram+0x2c>
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8005b02:	6965      	ldr	r5, [r4, #20]
 8005b04:	69a7      	ldr	r7, [r4, #24]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b0a:	f7ff fe9f 	bl	800584c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d17e      	bne.n	8005c10 <HAL_FLASHEx_OBProgram+0x230>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 8005b12:	f015 0f01 	tst.w	r5, #1
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8005b16:	bf19      	ittee	ne
 8005b18:	f407 62e0 	andne.w	r2, r7, #1792	; 0x700
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8005b1c:	f44f 63e0 	movne.w	r3, #1792	; 0x700
  uint32_t optr_reg_mask = 0;
 8005b20:	2300      	moveq	r3, #0
  uint32_t optr_reg_val = 0;
 8005b22:	461a      	moveq	r2, r3
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8005b24:	f015 0f02 	tst.w	r5, #2
 8005b28:	d004      	beq.n	8005b34 <HAL_FLASHEx_OBProgram+0x154>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8005b2a:	f407 5180 	and.w	r1, r7, #4096	; 0x1000
 8005b2e:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8005b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8005b34:	f015 0f04 	tst.w	r5, #4
 8005b38:	d004      	beq.n	8005b44 <HAL_FLASHEx_OBProgram+0x164>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8005b3a:	f407 5100 	and.w	r1, r7, #8192	; 0x2000
 8005b3e:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8005b40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 8005b44:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8005b48:	d004      	beq.n	8005b54 <HAL_FLASHEx_OBProgram+0x174>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8005b4a:	f407 4180 	and.w	r1, r7, #16384	; 0x4000
 8005b4e:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8005b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 8005b54:	f015 0f08 	tst.w	r5, #8
 8005b58:	d004      	beq.n	8005b64 <HAL_FLASHEx_OBProgram+0x184>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8005b5a:	f407 3180 	and.w	r1, r7, #65536	; 0x10000
 8005b5e:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8005b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 8005b64:	f015 0f10 	tst.w	r5, #16
 8005b68:	d004      	beq.n	8005b74 <HAL_FLASHEx_OBProgram+0x194>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8005b6a:	f407 3100 	and.w	r1, r7, #131072	; 0x20000
 8005b6e:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8005b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8005b74:	f015 0f20 	tst.w	r5, #32
 8005b78:	d004      	beq.n	8005b84 <HAL_FLASHEx_OBProgram+0x1a4>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8005b7a:	f407 2180 	and.w	r1, r7, #262144	; 0x40000
 8005b7e:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8005b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8005b84:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b88:	d004      	beq.n	8005b94 <HAL_FLASHEx_OBProgram+0x1b4>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8005b8a:	f407 2100 	and.w	r1, r7, #524288	; 0x80000
 8005b8e:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8005b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    }

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 8005b94:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005b98:	d004      	beq.n	8005ba4 <HAL_FLASHEx_OBProgram+0x1c4>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8005b9a:	f407 1180 	and.w	r1, r7, #1048576	; 0x100000
 8005b9e:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8005ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 8005ba4:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005ba8:	d004      	beq.n	8005bb4 <HAL_FLASHEx_OBProgram+0x1d4>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 8005baa:	f407 1100 	and.w	r1, r7, #2097152	; 0x200000
 8005bae:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 8005bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 8005bb4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005bb8:	d004      	beq.n	8005bc4 <HAL_FLASHEx_OBProgram+0x1e4>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8005bba:	f407 0100 	and.w	r1, r7, #8388608	; 0x800000
 8005bbe:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8005bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 8005bc4:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8005bc8:	d004      	beq.n	8005bd4 <HAL_FLASHEx_OBProgram+0x1f4>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 8005bca:	f007 7180 	and.w	r1, r7, #16777216	; 0x1000000
 8005bce:	430a      	orrs	r2, r1
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 8005bd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 8005bd4:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005bd8:	d004      	beq.n	8005be4 <HAL_FLASHEx_OBProgram+0x204>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8005bda:	f007 7700 	and.w	r7, r7, #33554432	; 0x2000000
 8005bde:	433a      	orrs	r2, r7
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 8005be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8005be4:	4d35      	ldr	r5, [pc, #212]	; (8005cbc <HAL_FLASHEx_OBProgram+0x2dc>)
 8005be6:	6a29      	ldr	r1, [r5, #32]
 8005be8:	ea21 0303 	bic.w	r3, r1, r3
 8005bec:	431a      	orrs	r2, r3
 8005bee:	622a      	str	r2, [r5, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005bf0:	696b      	ldr	r3, [r5, #20]
 8005bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf6:	616b      	str	r3, [r5, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bfc:	f7ff fe26 	bl	800584c <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005c00:	696b      	ldr	r3, [r5, #20]
 8005c02:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c06:	616b      	str	r3, [r5, #20]
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8005c08:	2800      	cmp	r0, #0
      status = HAL_ERROR;
 8005c0a:	bf18      	it	ne
 8005c0c:	2601      	movne	r6, #1
 8005c0e:	e701      	b.n	8005a14 <HAL_FLASHEx_OBProgram+0x34>
 8005c10:	2601      	movs	r6, #1
 8005c12:	e6ff      	b.n	8005a14 <HAL_FLASHEx_OBProgram+0x34>
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8005c14:	f8d4 801c 	ldr.w	r8, [r4, #28]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c1c:	f7ff fe16 	bl	800584c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d175      	bne.n	8005d10 <HAL_FLASHEx_OBProgram+0x330>
  {
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8005c24:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <HAL_FLASHEx_OBProgram+0x2e0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005c2c:	d12c      	bne.n	8005c88 <HAL_FLASHEx_OBProgram+0x2a8>
    {
      bank1_addr = FLASH_BASE;
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8005c2e:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <HAL_FLASHEx_OBProgram+0x2e4>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	b291      	uxth	r1, r2
 8005c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c38:	4299      	cmp	r1, r3
 8005c3a:	d034      	beq.n	8005ca6 <HAL_FLASHEx_OBProgram+0x2c6>
 8005c3c:	4b22      	ldr	r3, [pc, #136]	; (8005cc8 <HAL_FLASHEx_OBProgram+0x2e8>)
 8005c3e:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 8005c42:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
      bank1_addr = FLASH_BASE;
 8005c46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8005c4a:	f008 0103 	and.w	r1, r8, #3
 8005c4e:	2901      	cmp	r1, #1
 8005c50:	d03e      	beq.n	8005cd0 <HAL_FLASHEx_OBProgram+0x2f0>
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8005c52:	2902      	cmp	r1, #2
 8005c54:	d04c      	beq.n	8005cf0 <HAL_FLASHEx_OBProgram+0x310>
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8005c56:	4c19      	ldr	r4, [pc, #100]	; (8005cbc <HAL_FLASHEx_OBProgram+0x2dc>)
 8005c58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c5e:	f008 4800 	and.w	r8, r8, #2147483648	; 0x80000000
 8005c62:	ea43 0308 	orr.w	r3, r3, r8
 8005c66:	62a3      	str	r3, [r4, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005c68:	6963      	ldr	r3, [r4, #20]
 8005c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6e:	6163      	str	r3, [r4, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c74:	f7ff fdea 	bl	800584c <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005c78:	6963      	ldr	r3, [r4, #20]
 8005c7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c7e:	6163      	str	r3, [r4, #20]
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8005c80:	2800      	cmp	r0, #0
        status = HAL_ERROR;
 8005c82:	bf18      	it	ne
 8005c84:	2601      	movne	r6, #1
 8005c86:	e6ce      	b.n	8005a26 <HAL_FLASHEx_OBProgram+0x46>
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <HAL_FLASHEx_OBProgram+0x2e4>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	b291      	uxth	r1, r2
 8005c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c92:	4299      	cmp	r1, r3
 8005c94:	d00b      	beq.n	8005cae <HAL_FLASHEx_OBProgram+0x2ce>
 8005c96:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <HAL_FLASHEx_OBProgram+0x2e8>)
 8005c98:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 8005c9c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
      bank2_addr = FLASH_BASE;
 8005ca0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ca4:	e7d1      	b.n	8005c4a <HAL_FLASHEx_OBProgram+0x26a>
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8005ca6:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <HAL_FLASHEx_OBProgram+0x2ec>)
      bank1_addr = FLASH_BASE;
 8005ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cac:	e7cd      	b.n	8005c4a <HAL_FLASHEx_OBProgram+0x26a>
      bank2_addr = FLASH_BASE;
 8005cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <HAL_FLASHEx_OBProgram+0x2ec>)
 8005cb4:	e7c9      	b.n	8005c4a <HAL_FLASHEx_OBProgram+0x26a>
 8005cb6:	bf00      	nop
 8005cb8:	20000014 	.word	0x20000014
 8005cbc:	40022000 	.word	0x40022000
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	1fff75e0 	.word	0x1fff75e0
 8005cc8:	01fffe00 	.word	0x01fffe00
 8005ccc:	08080000 	.word	0x08080000
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8005cd0:	4911      	ldr	r1, [pc, #68]	; (8005d18 <HAL_FLASHEx_OBProgram+0x338>)
 8005cd2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8005cd4:	1aed      	subs	r5, r5, r3
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8005cd6:	0c12      	lsrs	r2, r2, #16
 8005cd8:	0412      	lsls	r2, r2, #16
 8005cda:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8005cde:	624a      	str	r2, [r1, #36]	; 0x24
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8005ce0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8005ce2:	1afb      	subs	r3, r7, r3
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8005ce4:	0c12      	lsrs	r2, r2, #16
 8005ce6:	0412      	lsls	r2, r2, #16
 8005ce8:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8005cec:	628b      	str	r3, [r1, #40]	; 0x28
 8005cee:	e7b2      	b.n	8005c56 <HAL_FLASHEx_OBProgram+0x276>
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8005cf0:	4809      	ldr	r0, [pc, #36]	; (8005d18 <HAL_FLASHEx_OBProgram+0x338>)
 8005cf2:	6c43      	ldr	r3, [r0, #68]	; 0x44
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8005cf4:	1aad      	subs	r5, r5, r2
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8005cf6:	0c1b      	lsrs	r3, r3, #16
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 8005cfe:	6445      	str	r5, [r0, #68]	; 0x44
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8005d00:	6c81      	ldr	r1, [r0, #72]	; 0x48
        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8005d02:	1abb      	subs	r3, r7, r2
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8005d04:	0c0a      	lsrs	r2, r1, #16
 8005d06:	0412      	lsls	r2, r2, #16
 8005d08:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8005d0c:	6483      	str	r3, [r0, #72]	; 0x48
 8005d0e:	e7a2      	b.n	8005c56 <HAL_FLASHEx_OBProgram+0x276>
        status = HAL_ERROR;
 8005d10:	2601      	movs	r6, #1
 8005d12:	e688      	b.n	8005a26 <HAL_FLASHEx_OBProgram+0x46>
  __HAL_LOCK(&pFlash);
 8005d14:	2602      	movs	r6, #2
 8005d16:	e689      	b.n	8005a2c <HAL_FLASHEx_OBProgram+0x4c>
 8005d18:	40022000 	.word	0x40022000

08005d1c <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8005d1c:	2306      	movs	r3, #6
 8005d1e:	6003      	str	r3, [r0, #0]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8005d20:	6843      	ldr	r3, [r0, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d917      	bls.n	8005d56 <HAL_FLASHEx_OBGetConfig+0x3a>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	f000 8095 	beq.w	8005e56 <HAL_FLASHEx_OBGetConfig+0x13a>
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8005d2c:	4b4f      	ldr	r3, [pc, #316]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	b2db      	uxtb	r3, r3

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8005d32:	2baa      	cmp	r3, #170	; 0xaa
 8005d34:	d001      	beq.n	8005d3a <HAL_FLASHEx_OBGetConfig+0x1e>
 8005d36:	2bcc      	cmp	r3, #204	; 0xcc
 8005d38:	d132      	bne.n	8005da0 <HAL_FLASHEx_OBGetConfig+0x84>
  {
    return (OB_RDP_LEVEL_1);
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8005d3a:	4b4c      	ldr	r3, [pc, #304]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	b2db      	uxtb	r3, r3
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8005d40:	6103      	str	r3, [r0, #16]
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8005d42:	4b4a      	ldr	r3, [pc, #296]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8005d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8005d4a:	6183      	str	r3, [r0, #24]
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 8005d4c:	69c3      	ldr	r3, [r0, #28]
 8005d4e:	1e5a      	subs	r2, r3, #1
 8005d50:	2a01      	cmp	r2, #1
 8005d52:	d927      	bls.n	8005da4 <HAL_FLASHEx_OBGetConfig+0x88>
 8005d54:	4770      	bx	lr
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8005d56:	2207      	movs	r2, #7
 8005d58:	6002      	str	r2, [r0, #0]
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8005d5a:	b943      	cbnz	r3, 8005d6e <HAL_FLASHEx_OBGetConfig+0x52>
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8005d5c:	4a43      	ldr	r2, [pc, #268]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005d5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8005d64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005d66:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005d6a:	60c3      	str	r3, [r0, #12]
 8005d6c:	e7de      	b.n	8005d2c <HAL_FLASHEx_OBGetConfig+0x10>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d00a      	beq.n	8005d88 <HAL_FLASHEx_OBGetConfig+0x6c>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d111      	bne.n	8005d9a <HAL_FLASHEx_OBGetConfig+0x7e>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8005d76:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005d78:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 8005d7e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005d80:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005d84:	60c3      	str	r3, [r0, #12]
 8005d86:	e7d1      	b.n	8005d2c <HAL_FLASHEx_OBGetConfig+0x10>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8005d88:	4a38      	ldr	r2, [pc, #224]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005d8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 8005d90:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d92:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005d96:	60c3      	str	r3, [r0, #12]
 8005d98:	e7c8      	b.n	8005d2c <HAL_FLASHEx_OBGetConfig+0x10>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d1c6      	bne.n	8005d2c <HAL_FLASHEx_OBGetConfig+0x10>
 8005d9e:	e05c      	b.n	8005e5a <HAL_FLASHEx_OBGetConfig+0x13e>
    return (OB_RDP_LEVEL_1);
 8005da0:	23bb      	movs	r3, #187	; 0xbb
 8005da2:	e7cd      	b.n	8005d40 <HAL_FLASHEx_OBGetConfig+0x24>
{
 8005da4:	b430      	push	{r4, r5}
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 8005da6:	6802      	ldr	r2, [r0, #0]
 8005da8:	f042 0208 	orr.w	r2, r2, #8
 8005dac:	6002      	str	r2, [r0, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8005dae:	4a30      	ldr	r2, [pc, #192]	; (8005e70 <HAL_FLASHEx_OBGetConfig+0x154>)
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005db6:	d11b      	bne.n	8005df0 <HAL_FLASHEx_OBGetConfig+0xd4>
  {
    bank1_addr = FLASH_BASE;
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8005db8:	4a2e      	ldr	r2, [pc, #184]	; (8005e74 <HAL_FLASHEx_OBGetConfig+0x158>)
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	b294      	uxth	r4, r2
 8005dbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005dc2:	428c      	cmp	r4, r1
 8005dc4:	d023      	beq.n	8005e0e <HAL_FLASHEx_OBGetConfig+0xf2>
 8005dc6:	492c      	ldr	r1, [pc, #176]	; (8005e78 <HAL_FLASHEx_OBGetConfig+0x15c>)
 8005dc8:	ea01 2142 	and.w	r1, r1, r2, lsl #9
 8005dcc:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
    bank1_addr = FLASH_BASE;
 8005dd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8005dd4:	f003 0403 	and.w	r4, r3, #3
 8005dd8:	2c01      	cmp	r4, #1
 8005dda:	d020      	beq.n	8005e1e <HAL_FLASHEx_OBGetConfig+0x102>
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8005ddc:	2c02      	cmp	r4, #2
 8005dde:	d02c      	beq.n	8005e3a <HAL_FLASHEx_OBGetConfig+0x11e>
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8005de0:	4a22      	ldr	r2, [pc, #136]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005de2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005de4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005de8:	4313      	orrs	r3, r2
 8005dea:	61c3      	str	r3, [r0, #28]
}
 8005dec:	bc30      	pop	{r4, r5}
 8005dee:	4770      	bx	lr
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8005df0:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <HAL_FLASHEx_OBGetConfig+0x158>)
 8005df2:	6811      	ldr	r1, [r2, #0]
 8005df4:	b28c      	uxth	r4, r1
 8005df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dfa:	4294      	cmp	r4, r2
 8005dfc:	d00b      	beq.n	8005e16 <HAL_FLASHEx_OBGetConfig+0xfa>
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <HAL_FLASHEx_OBGetConfig+0x15c>)
 8005e00:	ea02 2241 	and.w	r2, r2, r1, lsl #9
 8005e04:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
    bank2_addr = FLASH_BASE;
 8005e08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005e0c:	e7e2      	b.n	8005dd4 <HAL_FLASHEx_OBGetConfig+0xb8>
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8005e0e:	491b      	ldr	r1, [pc, #108]	; (8005e7c <HAL_FLASHEx_OBGetConfig+0x160>)
    bank1_addr = FLASH_BASE;
 8005e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e14:	e7de      	b.n	8005dd4 <HAL_FLASHEx_OBGetConfig+0xb8>
    bank2_addr = FLASH_BASE;
 8005e16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8005e1a:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <HAL_FLASHEx_OBGetConfig+0x160>)
 8005e1c:	e7da      	b.n	8005dd4 <HAL_FLASHEx_OBGetConfig+0xb8>
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8005e1e:	4d13      	ldr	r5, [pc, #76]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005e20:	6a6c      	ldr	r4, [r5, #36]	; 0x24
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8005e22:	4917      	ldr	r1, [pc, #92]	; (8005e80 <HAL_FLASHEx_OBGetConfig+0x164>)
 8005e24:	ea01 04c4 	and.w	r4, r1, r4, lsl #3
 8005e28:	4414      	add	r4, r2
 8005e2a:	6204      	str	r4, [r0, #32]
      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8005e2c:	6aac      	ldr	r4, [r5, #40]	; 0x28
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 8005e2e:	ea01 01c4 	and.w	r1, r1, r4, lsl #3
 8005e32:	3107      	adds	r1, #7
 8005e34:	440a      	add	r2, r1
 8005e36:	6242      	str	r2, [r0, #36]	; 0x24
 8005e38:	e7d2      	b.n	8005de0 <HAL_FLASHEx_OBGetConfig+0xc4>
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8005e3a:	4d0c      	ldr	r5, [pc, #48]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005e3c:	6c6c      	ldr	r4, [r5, #68]	; 0x44
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8005e3e:	4a10      	ldr	r2, [pc, #64]	; (8005e80 <HAL_FLASHEx_OBGetConfig+0x164>)
 8005e40:	ea02 04c4 	and.w	r4, r2, r4, lsl #3
 8005e44:	440c      	add	r4, r1
 8005e46:	6204      	str	r4, [r0, #32]
      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8005e48:	6cac      	ldr	r4, [r5, #72]	; 0x48
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 8005e4a:	ea02 02c4 	and.w	r2, r2, r4, lsl #3
 8005e4e:	3207      	adds	r2, #7
 8005e50:	4411      	add	r1, r2
 8005e52:	6241      	str	r1, [r0, #36]	; 0x24
 8005e54:	e7c4      	b.n	8005de0 <HAL_FLASHEx_OBGetConfig+0xc4>
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8005e56:	2307      	movs	r3, #7
 8005e58:	6003      	str	r3, [r0, #0]
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8005e5a:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <HAL_FLASHEx_OBGetConfig+0x150>)
 8005e5c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	6083      	str	r3, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 8005e62:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005e64:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005e68:	60c3      	str	r3, [r0, #12]
 8005e6a:	e75f      	b.n	8005d2c <HAL_FLASHEx_OBGetConfig+0x10>
 8005e6c:	40022000 	.word	0x40022000
 8005e70:	40010000 	.word	0x40010000
 8005e74:	1fff75e0 	.word	0x1fff75e0
 8005e78:	01fffe00 	.word	0x01fffe00
 8005e7c:	08080000 	.word	0x08080000
 8005e80:	0007fff8 	.word	0x0007fff8

08005e84 <FLASH_PageErase>:
    if((Banks & FLASH_BANK_1) != 0U)
 8005e84:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005e88:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <FLASH_PageErase+0x38>)
 8005e8a:	6953      	ldr	r3, [r2, #20]
 8005e8c:	bf14      	ite	ne
 8005e8e:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8005e92:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 8005e96:	6153      	str	r3, [r2, #20]
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <FLASH_PageErase+0x38>)
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	00c0      	lsls	r0, r0, #3
 8005e9e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8005ea2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8005ea6:	4310      	orrs	r0, r2
 8005ea8:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	f042 0202 	orr.w	r2, r2, #2
 8005eb0:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005eb8:	615a      	str	r2, [r3, #20]
}
 8005eba:	4770      	bx	lr
 8005ebc:	40022000 	.word	0x40022000

08005ec0 <HAL_FLASHEx_Erase_IT>:
{
 8005ec0:	b508      	push	{r3, lr}
  __HAL_LOCK(&pFlash);
 8005ec2:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <HAL_FLASHEx_Erase_IT+0xb0>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d050      	beq.n	8005f6c <HAL_FLASHEx_Erase_IT+0xac>
 8005eca:	4b29      	ldr	r3, [pc, #164]	; (8005f70 <HAL_FLASHEx_Erase_IT+0xb0>)
 8005ecc:	2201      	movs	r2, #1
 8005ece:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	605a      	str	r2, [r3, #4]
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005ed4:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <HAL_FLASHEx_Erase_IT+0xb4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005edc:	d02c      	beq.n	8005f38 <HAL_FLASHEx_Erase_IT+0x78>
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <HAL_FLASHEx_Erase_IT+0xb4>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ee6:	601a      	str	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005eee:	d01f      	beq.n	8005f30 <HAL_FLASHEx_Erase_IT+0x70>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ef0:	4a20      	ldr	r2, [pc, #128]	; (8005f74 <HAL_FLASHEx_Erase_IT+0xb4>)
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ef8:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005efa:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <HAL_FLASHEx_Erase_IT+0xb0>)
 8005efc:	2203      	movs	r2, #3
 8005efe:	771a      	strb	r2, [r3, #28]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005f00:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <HAL_FLASHEx_Erase_IT+0xb4>)
 8005f02:	6953      	ldr	r3, [r2, #20]
 8005f04:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8005f08:	6153      	str	r3, [r2, #20]
  pFlash.Bank = pEraseInit->Banks;
 8005f0a:	6842      	ldr	r2, [r0, #4]
 8005f0c:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <HAL_FLASHEx_Erase_IT+0xb0>)
 8005f0e:	611a      	str	r2, [r3, #16]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005f10:	6803      	ldr	r3, [r0, #0]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d022      	beq.n	8005f5c <HAL_FLASHEx_Erase_IT+0x9c>
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
 8005f16:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <HAL_FLASHEx_Erase_IT+0xb0>)
 8005f18:	2201      	movs	r2, #1
 8005f1a:	721a      	strb	r2, [r3, #8]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005f1c:	68c2      	ldr	r2, [r0, #12]
 8005f1e:	619a      	str	r2, [r3, #24]
    pFlash.Page = pEraseInit->Page;
 8005f20:	6882      	ldr	r2, [r0, #8]
 8005f22:	615a      	str	r2, [r3, #20]
    FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
 8005f24:	6841      	ldr	r1, [r0, #4]
 8005f26:	6880      	ldr	r0, [r0, #8]
 8005f28:	f7ff ffac 	bl	8005e84 <FLASH_PageErase>
  return status;
 8005f2c:	2000      	movs	r0, #0
}
 8005f2e:	bd08      	pop	{r3, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005f30:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <HAL_FLASHEx_Erase_IT+0xb0>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	771a      	strb	r2, [r3, #28]
 8005f36:	e7e3      	b.n	8005f00 <HAL_FLASHEx_Erase_IT+0x40>
  else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <HAL_FLASHEx_Erase_IT+0xb4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005f40:	d008      	beq.n	8005f54 <HAL_FLASHEx_Erase_IT+0x94>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f42:	4a0c      	ldr	r2, [pc, #48]	; (8005f74 <HAL_FLASHEx_Erase_IT+0xb4>)
 8005f44:	6813      	ldr	r3, [r2, #0]
 8005f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f4a:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005f4c:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <HAL_FLASHEx_Erase_IT+0xb0>)
 8005f4e:	2202      	movs	r2, #2
 8005f50:	771a      	strb	r2, [r3, #28]
 8005f52:	e7d5      	b.n	8005f00 <HAL_FLASHEx_Erase_IT+0x40>
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005f54:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <HAL_FLASHEx_Erase_IT+0xb0>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	771a      	strb	r2, [r3, #28]
 8005f5a:	e7d1      	b.n	8005f00 <HAL_FLASHEx_Erase_IT+0x40>
    pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
 8005f5c:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <HAL_FLASHEx_Erase_IT+0xb0>)
 8005f5e:	2202      	movs	r2, #2
 8005f60:	721a      	strb	r2, [r3, #8]
    FLASH_MassErase(pEraseInit->Banks);
 8005f62:	6840      	ldr	r0, [r0, #4]
 8005f64:	f7ff fd24 	bl	80059b0 <FLASH_MassErase>
  return status;
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e7e0      	b.n	8005f2e <HAL_FLASHEx_Erase_IT+0x6e>
  __HAL_LOCK(&pFlash);
 8005f6c:	2002      	movs	r0, #2
 8005f6e:	e7de      	b.n	8005f2e <HAL_FLASHEx_Erase_IT+0x6e>
 8005f70:	20000014 	.word	0x20000014
 8005f74:	40022000 	.word	0x40022000

08005f78 <FLASH_FlushCaches>:
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005f78:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <FLASH_FlushCaches+0x58>)
 8005f7a:	7f1b      	ldrb	r3, [r3, #28]
 8005f7c:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005f7e:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8005f82:	2a01      	cmp	r2, #1
 8005f84:	d007      	beq.n	8005f96 <FLASH_FlushCaches+0x1e>
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005f86:	3b02      	subs	r3, #2
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d911      	bls.n	8005fb2 <FLASH_FlushCaches+0x3a>
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005f8e:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <FLASH_FlushCaches+0x58>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
}
 8005f94:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005f96:	4a0f      	ldr	r2, [pc, #60]	; (8005fd4 <FLASH_FlushCaches+0x5c>)
 8005f98:	6811      	ldr	r1, [r2, #0]
 8005f9a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005f9e:	6011      	str	r1, [r2, #0]
 8005fa0:	6811      	ldr	r1, [r2, #0]
 8005fa2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005fa6:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fa8:	6811      	ldr	r1, [r2, #0]
 8005faa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005fae:	6011      	str	r1, [r2, #0]
 8005fb0:	e7e9      	b.n	8005f86 <FLASH_FlushCaches+0xe>
    __HAL_FLASH_DATA_CACHE_RESET();
 8005fb2:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <FLASH_FlushCaches+0x5c>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fc2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	e7df      	b.n	8005f8e <FLASH_FlushCaches+0x16>
 8005fce:	bf00      	nop
 8005fd0:	20000014 	.word	0x20000014
 8005fd4:	40022000 	.word	0x40022000

08005fd8 <HAL_FLASHEx_Erase>:
{
 8005fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8005fdc:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <HAL_FLASHEx_Erase+0x104>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d077      	beq.n	80060d4 <HAL_FLASHEx_Erase+0xfc>
 8005fe4:	460f      	mov	r7, r1
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4b3c      	ldr	r3, [pc, #240]	; (80060dc <HAL_FLASHEx_Erase+0x104>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ff2:	f7ff fc2b 	bl	800584c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8005ff6:	4681      	mov	r9, r0
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d165      	bne.n	80060c8 <HAL_FLASHEx_Erase+0xf0>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ffc:	4b37      	ldr	r3, [pc, #220]	; (80060dc <HAL_FLASHEx_Erase+0x104>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006002:	4b37      	ldr	r3, [pc, #220]	; (80060e0 <HAL_FLASHEx_Erase+0x108>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f413 7f00 	tst.w	r3, #512	; 0x200
 800600a:	d038      	beq.n	800607e <HAL_FLASHEx_Erase+0xa6>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800600c:	4b34      	ldr	r3, [pc, #208]	; (80060e0 <HAL_FLASHEx_Erase+0x108>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006014:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800601c:	d02b      	beq.n	8006076 <HAL_FLASHEx_Erase+0x9e>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800601e:	4a30      	ldr	r2, [pc, #192]	; (80060e0 <HAL_FLASHEx_Erase+0x108>)
 8006020:	6813      	ldr	r3, [r2, #0]
 8006022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006026:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006028:	4b2c      	ldr	r3, [pc, #176]	; (80060dc <HAL_FLASHEx_Erase+0x104>)
 800602a:	2203      	movs	r2, #3
 800602c:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d036      	beq.n	80060a2 <HAL_FLASHEx_Erase+0xca>
      *PageError = 0xFFFFFFFFU;
 8006034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006038:	603b      	str	r3, [r7, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800603a:	68a5      	ldr	r5, [r4, #8]
 800603c:	68e3      	ldr	r3, [r4, #12]
 800603e:	442b      	add	r3, r5
 8006040:	429d      	cmp	r5, r3
 8006042:	d23f      	bcs.n	80060c4 <HAL_FLASHEx_Erase+0xec>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006044:	f24c 3850 	movw	r8, #50000	; 0xc350
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006048:	4e25      	ldr	r6, [pc, #148]	; (80060e0 <HAL_FLASHEx_Erase+0x108>)
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800604a:	6861      	ldr	r1, [r4, #4]
 800604c:	4628      	mov	r0, r5
 800604e:	f7ff ff19 	bl	8005e84 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006052:	4640      	mov	r0, r8
 8006054:	f7ff fbfa 	bl	800584c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006058:	6973      	ldr	r3, [r6, #20]
 800605a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800605e:	f023 0302 	bic.w	r3, r3, #2
 8006062:	6173      	str	r3, [r6, #20]
        if (status != HAL_OK)
 8006064:	4681      	mov	r9, r0
 8006066:	bb60      	cbnz	r0, 80060c2 <HAL_FLASHEx_Erase+0xea>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006068:	3501      	adds	r5, #1
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	68e2      	ldr	r2, [r4, #12]
 800606e:	4413      	add	r3, r2
 8006070:	42ab      	cmp	r3, r5
 8006072:	d8ea      	bhi.n	800604a <HAL_FLASHEx_Erase+0x72>
 8006074:	e026      	b.n	80060c4 <HAL_FLASHEx_Erase+0xec>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006076:	4b19      	ldr	r3, [pc, #100]	; (80060dc <HAL_FLASHEx_Erase+0x104>)
 8006078:	2201      	movs	r2, #1
 800607a:	771a      	strb	r2, [r3, #28]
 800607c:	e7d7      	b.n	800602e <HAL_FLASHEx_Erase+0x56>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800607e:	4b18      	ldr	r3, [pc, #96]	; (80060e0 <HAL_FLASHEx_Erase+0x108>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006086:	d008      	beq.n	800609a <HAL_FLASHEx_Erase+0xc2>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006088:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <HAL_FLASHEx_Erase+0x108>)
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006090:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006092:	4b12      	ldr	r3, [pc, #72]	; (80060dc <HAL_FLASHEx_Erase+0x104>)
 8006094:	2202      	movs	r2, #2
 8006096:	771a      	strb	r2, [r3, #28]
 8006098:	e7c9      	b.n	800602e <HAL_FLASHEx_Erase+0x56>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <HAL_FLASHEx_Erase+0x104>)
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
 80060a0:	e7c5      	b.n	800602e <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase(pEraseInit->Banks);
 80060a2:	6860      	ldr	r0, [r4, #4]
 80060a4:	f7ff fc84 	bl	80059b0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060ac:	f7ff fbce 	bl	800584c <FLASH_WaitForLastOperation>
 80060b0:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80060b2:	4a0b      	ldr	r2, [pc, #44]	; (80060e0 <HAL_FLASHEx_Erase+0x108>)
 80060b4:	6953      	ldr	r3, [r2, #20]
 80060b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060ba:	f023 0304 	bic.w	r3, r3, #4
 80060be:	6153      	str	r3, [r2, #20]
 80060c0:	e000      	b.n	80060c4 <HAL_FLASHEx_Erase+0xec>
          *PageError = page_index;
 80060c2:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();
 80060c4:	f7ff ff58 	bl	8005f78 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80060c8:	4b04      	ldr	r3, [pc, #16]	; (80060dc <HAL_FLASHEx_Erase+0x104>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	701a      	strb	r2, [r3, #0]
}
 80060ce:	4648      	mov	r0, r9
 80060d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 80060d4:	f04f 0902 	mov.w	r9, #2
 80060d8:	e7f9      	b.n	80060ce <HAL_FLASHEx_Erase+0xf6>
 80060da:	bf00      	nop
 80060dc:	20000014 	.word	0x20000014
 80060e0:	40022000 	.word	0x40022000

080060e4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060e4:	680a      	ldr	r2, [r1, #0]
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	f000 80e7 	beq.w	80062ba <HAL_GPIO_Init+0x1d6>
{
 80060ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f0:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80060f2:	2400      	movs	r4, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060f4:	2701      	movs	r7, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060f6:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 80062c4 <HAL_GPIO_Init+0x1e0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80060fa:	4e70      	ldr	r6, [pc, #448]	; (80062bc <HAL_GPIO_Init+0x1d8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060fc:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80062c8 <HAL_GPIO_Init+0x1e4>
 8006100:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 80062cc <HAL_GPIO_Init+0x1e8>
 8006104:	4686      	mov	lr, r0
 8006106:	e04e      	b.n	80061a6 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->AFR[position >> 3u];
 8006108:	08e2      	lsrs	r2, r4, #3
 800610a:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 800610e:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006110:	f004 0307 	and.w	r3, r4, #7
 8006114:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8006118:	230f      	movs	r3, #15
 800611a:	fa03 f30b 	lsl.w	r3, r3, fp
 800611e:	ea25 0503 	bic.w	r5, r5, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006122:	690b      	ldr	r3, [r1, #16]
 8006124:	fa03 f30b 	lsl.w	r3, r3, fp
 8006128:	432b      	orrs	r3, r5
        GPIOx->AFR[position >> 3u] = temp;
 800612a:	6213      	str	r3, [r2, #32]
 800612c:	e045      	b.n	80061ba <HAL_GPIO_Init+0xd6>
        temp = GPIOx->ASCR;
 800612e:	f8de b02c 	ldr.w	fp, [lr, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006132:	ea2b 0b00 	bic.w	fp, fp, r0
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006136:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 800613a:	40a0      	lsls	r0, r4
 800613c:	ea40 000b 	orr.w	r0, r0, fp
        GPIOx->ASCR = temp;
 8006140:	f8ce 002c 	str.w	r0, [lr, #44]	; 0x2c
 8006144:	e06b      	b.n	800621e <HAL_GPIO_Init+0x13a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006146:	2200      	movs	r2, #0
 8006148:	4082      	lsls	r2, r0
 800614a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800614c:	609a      	str	r2, [r3, #8]
        temp = EXTI->IMR1;
 800614e:	6833      	ldr	r3, [r6, #0]
        temp &= ~(iocurrent);
 8006150:	ea6f 0008 	mvn.w	r0, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006154:	684a      	ldr	r2, [r1, #4]
 8006156:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~(iocurrent);
 800615a:	bf0c      	ite	eq
 800615c:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 800615e:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR1 = temp;
 8006162:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR1;
 8006164:	6873      	ldr	r3, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006166:	684a      	ldr	r2, [r1, #4]
 8006168:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~(iocurrent);
 800616c:	bf0c      	ite	eq
 800616e:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 8006170:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->EMR1 = temp;
 8006174:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006176:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006178:	684b      	ldr	r3, [r1, #4]
 800617a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800617e:	bf0c      	ite	eq
 8006180:	4002      	andeq	r2, r0
        {
          temp |= iocurrent;
 8006182:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR1 = temp;
 8006186:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8006188:	68f3      	ldr	r3, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800618a:	684a      	ldr	r2, [r1, #4]
 800618c:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8006190:	bf0c      	ite	eq
 8006192:	4003      	andeq	r3, r0
        {
          temp |= iocurrent;
 8006194:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR1 = temp;
 8006198:	60f3      	str	r3, [r6, #12]
      }
    }

    position++;
 800619a:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800619c:	680a      	ldr	r2, [r1, #0]
 800619e:	fa32 f304 	lsrs.w	r3, r2, r4
 80061a2:	f000 8087 	beq.w	80062b4 <HAL_GPIO_Init+0x1d0>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80061a6:	fa07 f004 	lsl.w	r0, r7, r4
    if (iocurrent != 0x00u)
 80061aa:	ea10 0802 	ands.w	r8, r0, r2
 80061ae:	d0f4      	beq.n	800619a <HAL_GPIO_Init+0xb6>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061b0:	684b      	ldr	r3, [r1, #4]
 80061b2:	f023 0310 	bic.w	r3, r3, #16
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d0a6      	beq.n	8006108 <HAL_GPIO_Init+0x24>
      temp = GPIOx->MODER;
 80061ba:	f8de 2000 	ldr.w	r2, [lr]
 80061be:	0065      	lsls	r5, r4, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061c0:	2303      	movs	r3, #3
 80061c2:	40ab      	lsls	r3, r5
 80061c4:	43db      	mvns	r3, r3
 80061c6:	ea03 0b02 	and.w	fp, r3, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061ca:	684a      	ldr	r2, [r1, #4]
 80061cc:	f002 0203 	and.w	r2, r2, #3
 80061d0:	40aa      	lsls	r2, r5
 80061d2:	ea42 020b 	orr.w	r2, r2, fp
      GPIOx->MODER = temp;
 80061d6:	f8ce 2000 	str.w	r2, [lr]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061da:	684a      	ldr	r2, [r1, #4]
 80061dc:	f022 0210 	bic.w	r2, r2, #16
 80061e0:	3a01      	subs	r2, #1
 80061e2:	2a01      	cmp	r2, #1
 80061e4:	d815      	bhi.n	8006212 <HAL_GPIO_Init+0x12e>
        temp = GPIOx->OSPEEDR;
 80061e6:	f8de 2008 	ldr.w	r2, [lr, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061ea:	ea03 0b02 	and.w	fp, r3, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 80061ee:	68ca      	ldr	r2, [r1, #12]
 80061f0:	40aa      	lsls	r2, r5
 80061f2:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OSPEEDR = temp;
 80061f6:	f8ce 2008 	str.w	r2, [lr, #8]
        temp = GPIOx->OTYPER;
 80061fa:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061fe:	ea22 0b00 	bic.w	fp, r2, r0
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006202:	684a      	ldr	r2, [r1, #4]
 8006204:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8006208:	40a2      	lsls	r2, r4
 800620a:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OTYPER = temp;
 800620e:	f8ce 2004 	str.w	r2, [lr, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006212:	684a      	ldr	r2, [r1, #4]
 8006214:	f002 0b03 	and.w	fp, r2, #3
 8006218:	f1bb 0f03 	cmp.w	fp, #3
 800621c:	d087      	beq.n	800612e <HAL_GPIO_Init+0x4a>
      temp = GPIOx->PUPDR;
 800621e:	f8de 200c 	ldr.w	r2, [lr, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006222:	4013      	ands	r3, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006224:	688a      	ldr	r2, [r1, #8]
 8006226:	fa02 f505 	lsl.w	r5, r2, r5
 800622a:	431d      	orrs	r5, r3
      GPIOx->PUPDR = temp;
 800622c:	f8ce 500c 	str.w	r5, [lr, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006230:	684b      	ldr	r3, [r1, #4]
 8006232:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006236:	d0b0      	beq.n	800619a <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006238:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	f8cc 3060 	str.w	r3, [ip, #96]	; 0x60
 8006244:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	9b01      	ldr	r3, [sp, #4]
 8006250:	f024 0303 	bic.w	r3, r4, #3
 8006254:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006258:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2u];
 800625c:	689d      	ldr	r5, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800625e:	f004 0203 	and.w	r2, r4, #3
 8006262:	0090      	lsls	r0, r2, #2
 8006264:	220f      	movs	r2, #15
 8006266:	4082      	lsls	r2, r0
 8006268:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800626c:	f1be 4f90 	cmp.w	lr, #1207959552	; 0x48000000
 8006270:	f43f af69 	beq.w	8006146 <HAL_GPIO_Init+0x62>
 8006274:	45ce      	cmp	lr, r9
 8006276:	d013      	beq.n	80062a0 <HAL_GPIO_Init+0x1bc>
 8006278:	45d6      	cmp	lr, sl
 800627a:	d013      	beq.n	80062a4 <HAL_GPIO_Init+0x1c0>
 800627c:	4a10      	ldr	r2, [pc, #64]	; (80062c0 <HAL_GPIO_Init+0x1dc>)
 800627e:	4596      	cmp	lr, r2
 8006280:	d012      	beq.n	80062a8 <HAL_GPIO_Init+0x1c4>
 8006282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006286:	4596      	cmp	lr, r2
 8006288:	d010      	beq.n	80062ac <HAL_GPIO_Init+0x1c8>
 800628a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800628e:	4596      	cmp	lr, r2
 8006290:	d00e      	beq.n	80062b0 <HAL_GPIO_Init+0x1cc>
 8006292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006296:	4596      	cmp	lr, r2
 8006298:	bf0c      	ite	eq
 800629a:	2206      	moveq	r2, #6
 800629c:	2207      	movne	r2, #7
 800629e:	e753      	b.n	8006148 <HAL_GPIO_Init+0x64>
 80062a0:	463a      	mov	r2, r7
 80062a2:	e751      	b.n	8006148 <HAL_GPIO_Init+0x64>
 80062a4:	2202      	movs	r2, #2
 80062a6:	e74f      	b.n	8006148 <HAL_GPIO_Init+0x64>
 80062a8:	2203      	movs	r2, #3
 80062aa:	e74d      	b.n	8006148 <HAL_GPIO_Init+0x64>
 80062ac:	2204      	movs	r2, #4
 80062ae:	e74b      	b.n	8006148 <HAL_GPIO_Init+0x64>
 80062b0:	2205      	movs	r2, #5
 80062b2:	e749      	b.n	8006148 <HAL_GPIO_Init+0x64>
  }
}
 80062b4:	b003      	add	sp, #12
 80062b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ba:	4770      	bx	lr
 80062bc:	40010400 	.word	0x40010400
 80062c0:	48000c00 	.word	0x48000c00
 80062c4:	40021000 	.word	0x40021000
 80062c8:	48000400 	.word	0x48000400
 80062cc:	48000800 	.word	0x48000800

080062d0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80062d0:	2900      	cmp	r1, #0
 80062d2:	f000 8095 	beq.w	8006400 <HAL_GPIO_DeInit+0x130>
{
 80062d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	b083      	sub	sp, #12
 80062dc:	460e      	mov	r6, r1
  uint32_t position = 0x00u;
 80062de:	2200      	movs	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80062e0:	f04f 0901 	mov.w	r9, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80062e4:	f04f 0a0f 	mov.w	sl, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80062e8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8006408 <HAL_GPIO_DeInit+0x138>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80062ec:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800640c <HAL_GPIO_DeInit+0x13c>
 80062f0:	e02a      	b.n	8006348 <HAL_GPIO_DeInit+0x78>
 80062f2:	f04f 0e00 	mov.w	lr, #0
 80062f6:	fa0e f404 	lsl.w	r4, lr, r4
 80062fa:	9f01      	ldr	r7, [sp, #4]
 80062fc:	42bc      	cmp	r4, r7
 80062fe:	d062      	beq.n	80063c6 <HAL_GPIO_DeInit+0xf6>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006300:	6805      	ldr	r5, [r0, #0]
 8006302:	0051      	lsls	r1, r2, #1
 8006304:	2403      	movs	r4, #3
 8006306:	408c      	lsls	r4, r1
 8006308:	4325      	orrs	r5, r4
 800630a:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800630c:	08d5      	lsrs	r5, r2, #3
 800630e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006312:	6a2f      	ldr	r7, [r5, #32]
 8006314:	f002 0107 	and.w	r1, r2, #7
 8006318:	0089      	lsls	r1, r1, #2
 800631a:	fa0a f101 	lsl.w	r1, sl, r1
 800631e:	ea27 0101 	bic.w	r1, r7, r1
 8006322:	6229      	str	r1, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006324:	6885      	ldr	r5, [r0, #8]
 8006326:	43e1      	mvns	r1, r4
 8006328:	400d      	ands	r5, r1
 800632a:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800632c:	6844      	ldr	r4, [r0, #4]
 800632e:	43db      	mvns	r3, r3
 8006330:	401c      	ands	r4, r3
 8006332:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006334:	68c4      	ldr	r4, [r0, #12]
 8006336:	4021      	ands	r1, r4
 8006338:	60c1      	str	r1, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800633a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800633c:	400b      	ands	r3, r1
 800633e:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006340:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8006342:	fa36 f302 	lsrs.w	r3, r6, r2
 8006346:	d058      	beq.n	80063fa <HAL_GPIO_DeInit+0x12a>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006348:	fa09 f302 	lsl.w	r3, r9, r2
    if (iocurrent != 0x00u)
 800634c:	ea13 0506 	ands.w	r5, r3, r6
 8006350:	d0f6      	beq.n	8006340 <HAL_GPIO_DeInit+0x70>
 8006352:	f022 0103 	bic.w	r1, r2, #3
 8006356:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800635a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
      tmp = SYSCFG->EXTICR[position >> 2u];
 800635e:	688f      	ldr	r7, [r1, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006360:	f002 0403 	and.w	r4, r2, #3
 8006364:	00a4      	lsls	r4, r4, #2
 8006366:	fa0a fc04 	lsl.w	ip, sl, r4
 800636a:	ea0c 0707 	and.w	r7, ip, r7
 800636e:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006370:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8006374:	d0bd      	beq.n	80062f2 <HAL_GPIO_DeInit+0x22>
 8006376:	4558      	cmp	r0, fp
 8006378:	d017      	beq.n	80063aa <HAL_GPIO_DeInit+0xda>
 800637a:	4f22      	ldr	r7, [pc, #136]	; (8006404 <HAL_GPIO_DeInit+0x134>)
 800637c:	42b8      	cmp	r0, r7
 800637e:	d016      	beq.n	80063ae <HAL_GPIO_DeInit+0xde>
 8006380:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006384:	42b8      	cmp	r0, r7
 8006386:	d015      	beq.n	80063b4 <HAL_GPIO_DeInit+0xe4>
 8006388:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800638c:	42b8      	cmp	r0, r7
 800638e:	d014      	beq.n	80063ba <HAL_GPIO_DeInit+0xea>
 8006390:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006394:	42b8      	cmp	r0, r7
 8006396:	d013      	beq.n	80063c0 <HAL_GPIO_DeInit+0xf0>
 8006398:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800639c:	42b8      	cmp	r0, r7
 800639e:	bf0c      	ite	eq
 80063a0:	f04f 0e06 	moveq.w	lr, #6
 80063a4:	f04f 0e07 	movne.w	lr, #7
 80063a8:	e7a5      	b.n	80062f6 <HAL_GPIO_DeInit+0x26>
 80063aa:	46ce      	mov	lr, r9
 80063ac:	e7a3      	b.n	80062f6 <HAL_GPIO_DeInit+0x26>
 80063ae:	f04f 0e02 	mov.w	lr, #2
 80063b2:	e7a0      	b.n	80062f6 <HAL_GPIO_DeInit+0x26>
 80063b4:	f04f 0e03 	mov.w	lr, #3
 80063b8:	e79d      	b.n	80062f6 <HAL_GPIO_DeInit+0x26>
 80063ba:	f04f 0e04 	mov.w	lr, #4
 80063be:	e79a      	b.n	80062f6 <HAL_GPIO_DeInit+0x26>
 80063c0:	f04f 0e05 	mov.w	lr, #5
 80063c4:	e797      	b.n	80062f6 <HAL_GPIO_DeInit+0x26>
        EXTI->IMR1 &= ~(iocurrent);
 80063c6:	f8d8 4000 	ldr.w	r4, [r8]
 80063ca:	43ed      	mvns	r5, r5
 80063cc:	402c      	ands	r4, r5
 80063ce:	f8c8 4000 	str.w	r4, [r8]
        EXTI->EMR1 &= ~(iocurrent);
 80063d2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80063d6:	402c      	ands	r4, r5
 80063d8:	f8c8 4004 	str.w	r4, [r8, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80063dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063e0:	402c      	ands	r4, r5
 80063e2:	f8c8 4008 	str.w	r4, [r8, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80063e6:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80063ea:	4025      	ands	r5, r4
 80063ec:	f8c8 500c 	str.w	r5, [r8, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80063f0:	688c      	ldr	r4, [r1, #8]
 80063f2:	ea24 040c 	bic.w	r4, r4, ip
 80063f6:	608c      	str	r4, [r1, #8]
 80063f8:	e782      	b.n	8006300 <HAL_GPIO_DeInit+0x30>
  }
}
 80063fa:	b003      	add	sp, #12
 80063fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	48000800 	.word	0x48000800
 8006408:	40010400 	.word	0x40010400
 800640c:	48000400 	.word	0x48000400

08006410 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006410:	6903      	ldr	r3, [r0, #16]
 8006412:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006414:	bf14      	ite	ne
 8006416:	2001      	movne	r0, #1
 8006418:	2000      	moveq	r0, #0
 800641a:	4770      	bx	lr

0800641c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800641c:	b90a      	cbnz	r2, 8006422 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800641e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006420:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006422:	6181      	str	r1, [r0, #24]
 8006424:	4770      	bx	lr

08006426 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8006426:	6943      	ldr	r3, [r0, #20]
 8006428:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800642a:	bf14      	ite	ne
 800642c:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800642e:	6181      	streq	r1, [r0, #24]
  }
}
 8006430:	4770      	bx	lr

08006432 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006432:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8006434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006438:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	430b      	orrs	r3, r1
 800643e:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8006440:	9b01      	ldr	r3, [sp, #4]
 8006442:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8006444:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	61c3      	str	r3, [r0, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800644a:	69c3      	ldr	r3, [r0, #28]
 800644c:	9301      	str	r3, [sp, #4]

  /* Read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 800644e:	69c0      	ldr	r0, [r0, #28]
 8006450:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 8006454:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8006458:	b002      	add	sp, #8
 800645a:	4770      	bx	lr

0800645c <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800645c:	4770      	bx	lr
	...

08006460 <HAL_GPIO_EXTI_IRQHandler>:
{
 8006460:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	4203      	tst	r3, r0
 8006468:	d100      	bne.n	800646c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800646a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800646c:	4b02      	ldr	r3, [pc, #8]	; (8006478 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800646e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006470:	f7ff fff4 	bl	800645c <HAL_GPIO_EXTI_Callback>
}
 8006474:	e7f9      	b.n	800646a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8006476:	bf00      	nop
 8006478:	40010400 	.word	0x40010400

0800647c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800647c:	6803      	ldr	r3, [r0, #0]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	f012 0f02 	tst.w	r2, #2
  {
    hi2c->Instance->TXDR = 0x00U;
 8006484:	bf1c      	itt	ne
 8006486:	2200      	movne	r2, #0
 8006488:	629a      	strne	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800648a:	6803      	ldr	r3, [r0, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	f012 0f01 	tst.w	r2, #1
 8006492:	d103      	bne.n	800649c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	619a      	str	r2, [r3, #24]
  }
}
 800649c:	4770      	bx	lr

0800649e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800649e:	b470      	push	{r4, r5, r6}
 80064a0:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80064a2:	6806      	ldr	r6, [r0, #0]
 80064a4:	6870      	ldr	r0, [r6, #4]
 80064a6:	0d65      	lsrs	r5, r4, #21
 80064a8:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 80064ac:	f045 757f 	orr.w	r5, r5, #66846720	; 0x3fc0000
 80064b0:	f445 3558 	orr.w	r5, r5, #221184	; 0x36000
 80064b4:	f445 757f 	orr.w	r5, r5, #1020	; 0x3fc
 80064b8:	f045 0503 	orr.w	r5, r5, #3
 80064bc:	ea20 0005 	bic.w	r0, r0, r5
 80064c0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80064c4:	431a      	orrs	r2, r3
 80064c6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80064ca:	430a      	orrs	r2, r1
 80064cc:	4302      	orrs	r2, r0
 80064ce:	6072      	str	r2, [r6, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80064d0:	bc70      	pop	{r4, r5, r6}
 80064d2:	4770      	bx	lr

080064d4 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80064d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80064d6:	4a1a      	ldr	r2, [pc, #104]	; (8006540 <I2C_Enable_IRQ+0x6c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d01d      	beq.n	8006518 <I2C_Enable_IRQ+0x44>
 80064dc:	4a19      	ldr	r2, [pc, #100]	; (8006544 <I2C_Enable_IRQ+0x70>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01a      	beq.n	8006518 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80064e2:	f001 0304 	and.w	r3, r1, #4
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bf0c      	ite	eq
 80064ea:	2300      	moveq	r3, #0
 80064ec:	23b8      	movne	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064ee:	f011 0f01 	tst.w	r1, #1
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80064f2:	bf18      	it	ne
 80064f4:	f043 03f2 	orrne.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80064f8:	f011 0f02 	tst.w	r1, #2
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80064fc:	bf18      	it	ne
 80064fe:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8006502:	f001 0112 	and.w	r1, r1, #18
 8006506:	2912      	cmp	r1, #18
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006508:	bf08      	it	eq
 800650a:	f043 0320 	orreq.w	r3, r3, #32
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800650e:	6801      	ldr	r1, [r0, #0]
 8006510:	680a      	ldr	r2, [r1, #0]
 8006512:	4313      	orrs	r3, r2
 8006514:	600b      	str	r3, [r1, #0]
}
 8006516:	4770      	bx	lr
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006518:	f001 0304 	and.w	r3, r1, #4
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf0c      	ite	eq
 8006520:	2300      	moveq	r3, #0
 8006522:	23b8      	movne	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8006524:	f001 0211 	and.w	r2, r1, #17
 8006528:	2a11      	cmp	r2, #17
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800652a:	bf08      	it	eq
 800652c:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8006530:	f001 0112 	and.w	r1, r1, #18
 8006534:	2912      	cmp	r1, #18
 8006536:	d1ea      	bne.n	800650e <I2C_Enable_IRQ+0x3a>
      tmpisr |= I2C_IT_TCI;
 8006538:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800653c:	e7e7      	b.n	800650e <I2C_Enable_IRQ+0x3a>
 800653e:	bf00      	nop
 8006540:	08009235 	.word	0x08009235
 8006544:	08009131 	.word	0x08009131

08006548 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006548:	f011 0f01 	tst.w	r1, #1
 800654c:	d02b      	beq.n	80065a6 <I2C_Disable_IRQ+0x5e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800654e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006552:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006556:	2b28      	cmp	r3, #40	; 0x28
 8006558:	bf0c      	ite	eq
 800655a:	2342      	moveq	r3, #66	; 0x42
 800655c:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800655e:	f011 0f02 	tst.w	r1, #2
 8006562:	d009      	beq.n	8006578 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006564:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006568:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800656c:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800656e:	bf0c      	ite	eq
 8006570:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006574:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006578:	f011 0f04 	tst.w	r1, #4
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800657c:	bf18      	it	ne
 800657e:	f043 03b8 	orrne.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8006582:	f001 0211 	and.w	r2, r1, #17
 8006586:	2a11      	cmp	r2, #17
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006588:	bf08      	it	eq
 800658a:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800658e:	f001 0112 	and.w	r1, r1, #18
 8006592:	2912      	cmp	r1, #18
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006594:	bf08      	it	eq
 8006596:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800659a:	6801      	ldr	r1, [r0, #0]
 800659c:	680a      	ldr	r2, [r1, #0]
 800659e:	ea22 0303 	bic.w	r3, r2, r3
 80065a2:	600b      	str	r3, [r1, #0]
}
 80065a4:	4770      	bx	lr
  uint32_t tmpisr = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	e7d9      	b.n	800655e <I2C_Disable_IRQ+0x16>

080065aa <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80065aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80065ac:	2baa      	cmp	r3, #170	; 0xaa
 80065ae:	d007      	beq.n	80065c0 <I2C_ConvertOtherXferOptions+0x16>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80065b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80065b2:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80065b6:	bf04      	itt	eq
 80065b8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80065bc:	62c3      	streq	r3, [r0, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80065be:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80065c0:	2300      	movs	r3, #0
 80065c2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80065c4:	4770      	bx	lr

080065c6 <I2C_IsAcknowledgeFailed>:
{
 80065c6:	b570      	push	{r4, r5, r6, lr}
 80065c8:	4605      	mov	r5, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065ce:	6803      	ldr	r3, [r0, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f013 0f10 	tst.w	r3, #16
 80065d6:	d01c      	beq.n	8006612 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065d8:	682a      	ldr	r2, [r5, #0]
 80065da:	6993      	ldr	r3, [r2, #24]
 80065dc:	f013 0f20 	tst.w	r3, #32
 80065e0:	d119      	bne.n	8006616 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80065e2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80065e6:	d0f8      	beq.n	80065da <I2C_IsAcknowledgeFailed+0x14>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e8:	f7fe f950 	bl	800488c <HAL_GetTick>
 80065ec:	1b80      	subs	r0, r0, r6
 80065ee:	42a0      	cmp	r0, r4
 80065f0:	d801      	bhi.n	80065f6 <I2C_IsAcknowledgeFailed+0x30>
 80065f2:	2c00      	cmp	r4, #0
 80065f4:	d1f0      	bne.n	80065d8 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80065f8:	f043 0320 	orr.w	r3, r3, #32
 80065fc:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	2320      	movs	r3, #32
 8006600:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006604:	2300      	movs	r3, #0
 8006606:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800660a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 800660e:	2001      	movs	r0, #1
 8006610:	e020      	b.n	8006654 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8006612:	2000      	movs	r0, #0
 8006614:	e01e      	b.n	8006654 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006616:	2310      	movs	r3, #16
 8006618:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800661a:	682b      	ldr	r3, [r5, #0]
 800661c:	2420      	movs	r4, #32
 800661e:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8006620:	4628      	mov	r0, r5
 8006622:	f7ff ff2b 	bl	800647c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006626:	682a      	ldr	r2, [r5, #0]
 8006628:	6853      	ldr	r3, [r2, #4]
 800662a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800662e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006632:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800663c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800663e:	f043 0304 	orr.w	r3, r3, #4
 8006642:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006644:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006648:	2300      	movs	r3, #0
 800664a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800664e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8006652:	2001      	movs	r0, #1
}
 8006654:	bd70      	pop	{r4, r5, r6, pc}

08006656 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006656:	b570      	push	{r4, r5, r6, lr}
 8006658:	4604      	mov	r4, r0
 800665a:	460d      	mov	r5, r1
 800665c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f013 0f02 	tst.w	r3, #2
 8006666:	d11d      	bne.n	80066a4 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006668:	4632      	mov	r2, r6
 800666a:	4629      	mov	r1, r5
 800666c:	4620      	mov	r0, r4
 800666e:	f7ff ffaa 	bl	80065c6 <I2C_IsAcknowledgeFailed>
 8006672:	b9c8      	cbnz	r0, 80066a8 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8006674:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006678:	d0f1      	beq.n	800665e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667a:	f7fe f907 	bl	800488c <HAL_GetTick>
 800667e:	1b80      	subs	r0, r0, r6
 8006680:	42a8      	cmp	r0, r5
 8006682:	d801      	bhi.n	8006688 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006684:	2d00      	cmp	r5, #0
 8006686:	d1ea      	bne.n	800665e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006688:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800668a:	f043 0320 	orr.w	r3, r3, #32
 800668e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006690:	2320      	movs	r3, #32
 8006692:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006696:	2300      	movs	r3, #0
 8006698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800669c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80066a0:	2001      	movs	r0, #1
 80066a2:	e000      	b.n	80066a6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80066a4:	2000      	movs	r0, #0
}
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80066a8:	2001      	movs	r0, #1
 80066aa:	e7fc      	b.n	80066a6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080066ac <I2C_WaitOnFlagUntilTimeout>:
{
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	4607      	mov	r7, r0
 80066b0:	460e      	mov	r6, r1
 80066b2:	4615      	mov	r5, r2
 80066b4:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	6993      	ldr	r3, [r2, #24]
 80066ba:	ea36 0303 	bics.w	r3, r6, r3
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	d118      	bne.n	80066fa <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80066c8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80066cc:	d0f4      	beq.n	80066b8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ce:	f7fe f8dd 	bl	800488c <HAL_GetTick>
 80066d2:	9b06      	ldr	r3, [sp, #24]
 80066d4:	1ac0      	subs	r0, r0, r3
 80066d6:	42a0      	cmp	r0, r4
 80066d8:	d801      	bhi.n	80066de <I2C_WaitOnFlagUntilTimeout+0x32>
 80066da:	2c00      	cmp	r4, #0
 80066dc:	d1eb      	bne.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066e0:	f043 0320 	orr.w	r3, r3, #32
 80066e4:	647b      	str	r3, [r7, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066e6:	2320      	movs	r3, #32
 80066e8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80066f2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        return HAL_ERROR;
 80066f6:	2001      	movs	r0, #1
 80066f8:	e000      	b.n	80066fc <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80066fa:	2000      	movs	r0, #0
}
 80066fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006700 <I2C_RequestMemoryWrite>:
{
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	4604      	mov	r4, r0
 8006706:	4616      	mov	r6, r2
 8006708:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800670a:	4b18      	ldr	r3, [pc, #96]	; (800676c <I2C_RequestMemoryWrite+0x6c>)
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006712:	b2ea      	uxtb	r2, r5
 8006714:	f7ff fec3 	bl	800649e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006718:	9a07      	ldr	r2, [sp, #28]
 800671a:	9906      	ldr	r1, [sp, #24]
 800671c:	4620      	mov	r0, r4
 800671e:	f7ff ff9a 	bl	8006656 <I2C_WaitOnTXISFlagUntilTimeout>
 8006722:	b9e8      	cbnz	r0, 8006760 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006724:	2d01      	cmp	r5, #1
 8006726:	d10e      	bne.n	8006746 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	b2f6      	uxtb	r6, r6
 800672c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800672e:	9b07      	ldr	r3, [sp, #28]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	9b06      	ldr	r3, [sp, #24]
 8006734:	2200      	movs	r2, #0
 8006736:	2180      	movs	r1, #128	; 0x80
 8006738:	4620      	mov	r0, r4
 800673a:	f7ff ffb7 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800673e:	3000      	adds	r0, #0
 8006740:	bf18      	it	ne
 8006742:	2001      	movne	r0, #1
 8006744:	e00d      	b.n	8006762 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	0a32      	lsrs	r2, r6, #8
 800674a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800674c:	9a07      	ldr	r2, [sp, #28]
 800674e:	9906      	ldr	r1, [sp, #24]
 8006750:	4620      	mov	r0, r4
 8006752:	f7ff ff80 	bl	8006656 <I2C_WaitOnTXISFlagUntilTimeout>
 8006756:	b930      	cbnz	r0, 8006766 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	b2f6      	uxtb	r6, r6
 800675c:	629e      	str	r6, [r3, #40]	; 0x28
 800675e:	e7e6      	b.n	800672e <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8006760:	2001      	movs	r0, #1
}
 8006762:	b002      	add	sp, #8
 8006764:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006766:	2001      	movs	r0, #1
 8006768:	e7fb      	b.n	8006762 <I2C_RequestMemoryWrite+0x62>
 800676a:	bf00      	nop
 800676c:	80002000 	.word	0x80002000

08006770 <I2C_RequestMemoryRead>:
{
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	4604      	mov	r4, r0
 8006776:	4616      	mov	r6, r2
 8006778:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800677a:	4b17      	ldr	r3, [pc, #92]	; (80067d8 <I2C_RequestMemoryRead+0x68>)
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	2300      	movs	r3, #0
 8006780:	b2ea      	uxtb	r2, r5
 8006782:	f7ff fe8c 	bl	800649e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006786:	9a07      	ldr	r2, [sp, #28]
 8006788:	9906      	ldr	r1, [sp, #24]
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff ff63 	bl	8006656 <I2C_WaitOnTXISFlagUntilTimeout>
 8006790:	b9e8      	cbnz	r0, 80067ce <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006792:	2d01      	cmp	r5, #1
 8006794:	d10e      	bne.n	80067b4 <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	b2f6      	uxtb	r6, r6
 800679a:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800679c:	9b07      	ldr	r3, [sp, #28]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	9b06      	ldr	r3, [sp, #24]
 80067a2:	2200      	movs	r2, #0
 80067a4:	2140      	movs	r1, #64	; 0x40
 80067a6:	4620      	mov	r0, r4
 80067a8:	f7ff ff80 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80067ac:	3000      	adds	r0, #0
 80067ae:	bf18      	it	ne
 80067b0:	2001      	movne	r0, #1
 80067b2:	e00d      	b.n	80067d0 <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	0a32      	lsrs	r2, r6, #8
 80067b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ba:	9a07      	ldr	r2, [sp, #28]
 80067bc:	9906      	ldr	r1, [sp, #24]
 80067be:	4620      	mov	r0, r4
 80067c0:	f7ff ff49 	bl	8006656 <I2C_WaitOnTXISFlagUntilTimeout>
 80067c4:	b930      	cbnz	r0, 80067d4 <I2C_RequestMemoryRead+0x64>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	b2f6      	uxtb	r6, r6
 80067ca:	629e      	str	r6, [r3, #40]	; 0x28
 80067cc:	e7e6      	b.n	800679c <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 80067ce:	2001      	movs	r0, #1
}
 80067d0:	b002      	add	sp, #8
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80067d4:	2001      	movs	r0, #1
 80067d6:	e7fb      	b.n	80067d0 <I2C_RequestMemoryRead+0x60>
 80067d8:	80002000 	.word	0x80002000

080067dc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4605      	mov	r5, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f013 0f20 	tst.w	r3, #32
 80067ec:	d11a      	bne.n	8006824 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ee:	4632      	mov	r2, r6
 80067f0:	4621      	mov	r1, r4
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7ff fee7 	bl	80065c6 <I2C_IsAcknowledgeFailed>
 80067f8:	b9b0      	cbnz	r0, 8006828 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fe f847 	bl	800488c <HAL_GetTick>
 80067fe:	1b80      	subs	r0, r0, r6
 8006800:	42a0      	cmp	r0, r4
 8006802:	d801      	bhi.n	8006808 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8006804:	2c00      	cmp	r4, #0
 8006806:	d1ed      	bne.n	80067e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006808:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800680a:	f043 0320 	orr.w	r3, r3, #32
 800680e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006810:	2320      	movs	r3, #32
 8006812:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006816:	2300      	movs	r3, #0
 8006818:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800681c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8006820:	2001      	movs	r0, #1
}
 8006822:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006824:	2000      	movs	r0, #0
 8006826:	e7fc      	b.n	8006822 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8006828:	2001      	movs	r0, #1
 800682a:	e7fa      	b.n	8006822 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800682c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4604      	mov	r4, r0
 8006830:	460d      	mov	r5, r1
 8006832:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f013 0f04 	tst.w	r3, #4
 800683c:	d13e      	bne.n	80068bc <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800683e:	4632      	mov	r2, r6
 8006840:	4629      	mov	r1, r5
 8006842:	4620      	mov	r0, r4
 8006844:	f7ff febf 	bl	80065c6 <I2C_IsAcknowledgeFailed>
 8006848:	4601      	mov	r1, r0
 800684a:	2800      	cmp	r0, #0
 800684c:	d138      	bne.n	80068c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	f012 0f20 	tst.w	r2, #32
 8006856:	d113      	bne.n	8006880 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006858:	f7fe f818 	bl	800488c <HAL_GetTick>
 800685c:	1b80      	subs	r0, r0, r6
 800685e:	42a8      	cmp	r0, r5
 8006860:	d801      	bhi.n	8006866 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8006862:	2d00      	cmp	r5, #0
 8006864:	d1e6      	bne.n	8006834 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006866:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006868:	f043 0320 	orr.w	r3, r3, #32
 800686c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800686e:	2320      	movs	r3, #32
 8006870:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8006874:	2300      	movs	r3, #0
 8006876:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800687a:	2101      	movs	r1, #1
}
 800687c:	4608      	mov	r0, r1
 800687e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	f012 0f04 	tst.w	r2, #4
 8006886:	d002      	beq.n	800688e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8006888:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800688a:	2a00      	cmp	r2, #0
 800688c:	d1f6      	bne.n	800687c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800688e:	2220      	movs	r2, #32
 8006890:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8006892:	6821      	ldr	r1, [r4, #0]
 8006894:	684b      	ldr	r3, [r1, #4]
 8006896:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800689a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800689e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80068b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80068b8:	2101      	movs	r1, #1
 80068ba:	e7df      	b.n	800687c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 80068bc:	2100      	movs	r1, #0
 80068be:	e7dd      	b.n	800687c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 80068c0:	2101      	movs	r1, #1
 80068c2:	e7db      	b.n	800687c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

080068c4 <HAL_I2C_MspInit>:
}
 80068c4:	4770      	bx	lr

080068c6 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d055      	beq.n	8006976 <HAL_I2C_Init+0xb0>
{
 80068ca:	b510      	push	{r4, lr}
 80068cc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d045      	beq.n	8006962 <HAL_I2C_Init+0x9c>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80068d6:	2324      	movs	r3, #36	; 0x24
 80068d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	6863      	ldr	r3, [r4, #4]
 80068ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80068ee:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068f0:	6822      	ldr	r2, [r4, #0]
 80068f2:	6893      	ldr	r3, [r2, #8]
 80068f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068f8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068fe:	6822      	ldr	r2, [r4, #0]
 8006900:	68a3      	ldr	r3, [r4, #8]
 8006902:	bf0c      	ite	eq
 8006904:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006908:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800690c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800690e:	68e3      	ldr	r3, [r4, #12]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d02b      	beq.n	800696c <HAL_I2C_Init+0xa6>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006914:	6822      	ldr	r2, [r4, #0]
 8006916:	6853      	ldr	r3, [r2, #4]
 8006918:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800691c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006920:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	68d3      	ldr	r3, [r2, #12]
 8006926:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800692a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800692c:	6822      	ldr	r2, [r4, #0]
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	6961      	ldr	r1, [r4, #20]
 8006932:	430b      	orrs	r3, r1
 8006934:	69a1      	ldr	r1, [r4, #24]
 8006936:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800693a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	69e3      	ldr	r3, [r4, #28]
 8006940:	6a21      	ldr	r1, [r4, #32]
 8006942:	430b      	orrs	r3, r1
 8006944:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006946:	6822      	ldr	r2, [r4, #0]
 8006948:	6813      	ldr	r3, [r2, #0]
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006950:	2000      	movs	r0, #0
 8006952:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006954:	2320      	movs	r3, #32
 8006956:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800695a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800695c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006960:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006962:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006966:	f7ff ffad 	bl	80068c4 <HAL_I2C_MspInit>
 800696a:	e7b4      	b.n	80068d6 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006972:	605a      	str	r2, [r3, #4]
 8006974:	e7ce      	b.n	8006914 <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8006976:	2001      	movs	r0, #1
}
 8006978:	4770      	bx	lr

0800697a <HAL_I2C_MspDeInit>:
}
 800697a:	4770      	bx	lr

0800697c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800697c:	b1a8      	cbz	r0, 80069aa <HAL_I2C_DeInit+0x2e>
{
 800697e:	b510      	push	{r4, lr}
 8006980:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006982:	2324      	movs	r3, #36	; 0x24
 8006984:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006988:	6802      	ldr	r2, [r0, #0]
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006992:	f7ff fff2 	bl	800697a <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006996:	2000      	movs	r0, #0
 8006998:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800699a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800699e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80069a4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80069a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80069aa:	2001      	movs	r0, #1
}
 80069ac:	4770      	bx	lr
	...

080069b0 <HAL_I2C_Master_Transmit>:
{
 80069b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069b4:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80069b6:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80069ba:	b2ed      	uxtb	r5, r5
 80069bc:	2d20      	cmp	r5, #32
 80069be:	f040 80a6 	bne.w	8006b0e <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 80069c2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80069c6:	2c01      	cmp	r4, #1
 80069c8:	f000 80a6 	beq.w	8006b18 <HAL_I2C_Master_Transmit+0x168>
 80069cc:	4698      	mov	r8, r3
 80069ce:	4617      	mov	r7, r2
 80069d0:	460e      	mov	r6, r1
 80069d2:	4604      	mov	r4, r0
 80069d4:	f04f 0901 	mov.w	r9, #1
 80069d8:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80069dc:	f7fd ff56 	bl	800488c <HAL_GetTick>
 80069e0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069e2:	9000      	str	r0, [sp, #0]
 80069e4:	2319      	movs	r3, #25
 80069e6:	464a      	mov	r2, r9
 80069e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069ec:	4620      	mov	r0, r4
 80069ee:	f7ff fe5d 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f040 8092 	bne.w	8006b1c <HAL_I2C_Master_Transmit+0x16c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069f8:	2321      	movs	r3, #33	; 0x21
 80069fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80069fe:	2310      	movs	r3, #16
 8006a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006a08:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a0a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a0e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2bff      	cmp	r3, #255	; 0xff
 8006a16:	d945      	bls.n	8006aa4 <HAL_I2C_Master_Transmit+0xf4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a18:	22ff      	movs	r2, #255	; 0xff
 8006a1a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a1c:	4b43      	ldr	r3, [pc, #268]	; (8006b2c <HAL_I2C_Master_Transmit+0x17c>)
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a24:	4631      	mov	r1, r6
 8006a26:	4620      	mov	r0, r4
 8006a28:	f7ff fd39 	bl	800649e <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a2c:	2700      	movs	r7, #0
 8006a2e:	f04f 0880 	mov.w	r8, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a32:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 8006a36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d04a      	beq.n	8006ad4 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a3e:	462a      	mov	r2, r5
 8006a40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a42:	4620      	mov	r0, r4
 8006a44:	f7ff fe07 	bl	8006656 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d169      	bne.n	8006b20 <HAL_I2C_Master_Transmit+0x170>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006a50:	7812      	ldrb	r2, [r2, #0]
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a56:	3301      	adds	r3, #1
 8006a58:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006a5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006a62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006a6c:	b292      	uxth	r2, r2
 8006a6e:	2a00      	cmp	r2, #0
 8006a70:	d0e1      	beq.n	8006a36 <HAL_I2C_Master_Transmit+0x86>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1df      	bne.n	8006a36 <HAL_I2C_Master_Transmit+0x86>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a76:	9500      	str	r5, [sp, #0]
 8006a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff fe14 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d14d      	bne.n	8006b24 <HAL_I2C_Master_Transmit+0x174>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2bff      	cmp	r3, #255	; 0xff
 8006a8e:	d916      	bls.n	8006abe <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a94:	9700      	str	r7, [sp, #0]
 8006a96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f7ff fcfe 	bl	800649e <I2C_TransferConfig>
 8006aa2:	e7c8      	b.n	8006a36 <HAL_I2C_Master_Transmit+0x86>
      hi2c->XferSize = hi2c->XferCount;
 8006aa4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006aa6:	b292      	uxth	r2, r2
 8006aa8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006aaa:	4b20      	ldr	r3, [pc, #128]	; (8006b2c <HAL_I2C_Master_Transmit+0x17c>)
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7ff fcf1 	bl	800649e <I2C_TransferConfig>
 8006abc:	e7b6      	b.n	8006a2c <HAL_I2C_Master_Transmit+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 8006abe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006ac0:	b292      	uxth	r2, r2
 8006ac2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ac4:	9700      	str	r7, [sp, #0]
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	4631      	mov	r1, r6
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7ff fce6 	bl	800649e <I2C_TransferConfig>
 8006ad2:	e7b0      	b.n	8006a36 <HAL_I2C_Master_Transmit+0x86>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad4:	462a      	mov	r2, r5
 8006ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f7ff fe7f 	bl	80067dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	bb10      	cbnz	r0, 8006b28 <HAL_I2C_Master_Transmit+0x178>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	2120      	movs	r1, #32
 8006ae6:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	6842      	ldr	r2, [r0, #4]
 8006aec:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006af0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8006af4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8006af8:	f022 0201 	bic.w	r2, r2, #1
 8006afc:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006afe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b02:	2200      	movs	r2, #0
 8006b04:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006b08:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8006b0c:	e000      	b.n	8006b10 <HAL_I2C_Master_Transmit+0x160>
    return HAL_BUSY;
 8006b0e:	2302      	movs	r3, #2
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	b003      	add	sp, #12
 8006b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e7f9      	b.n	8006b10 <HAL_I2C_Master_Transmit+0x160>
      return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e7f7      	b.n	8006b10 <HAL_I2C_Master_Transmit+0x160>
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e7f5      	b.n	8006b10 <HAL_I2C_Master_Transmit+0x160>
          return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e7f3      	b.n	8006b10 <HAL_I2C_Master_Transmit+0x160>
      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e7f1      	b.n	8006b10 <HAL_I2C_Master_Transmit+0x160>
 8006b2c:	80002000 	.word	0x80002000

08006b30 <HAL_I2C_Master_Receive>:
{
 8006b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b34:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b36:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8006b3a:	b2ed      	uxtb	r5, r5
 8006b3c:	2d20      	cmp	r5, #32
 8006b3e:	f040 80a6 	bne.w	8006c8e <HAL_I2C_Master_Receive+0x15e>
    __HAL_LOCK(hi2c);
 8006b42:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8006b46:	2c01      	cmp	r4, #1
 8006b48:	f000 80a6 	beq.w	8006c98 <HAL_I2C_Master_Receive+0x168>
 8006b4c:	4698      	mov	r8, r3
 8006b4e:	4617      	mov	r7, r2
 8006b50:	460e      	mov	r6, r1
 8006b52:	4604      	mov	r4, r0
 8006b54:	f04f 0901 	mov.w	r9, #1
 8006b58:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006b5c:	f7fd fe96 	bl	800488c <HAL_GetTick>
 8006b60:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b62:	9000      	str	r0, [sp, #0]
 8006b64:	2319      	movs	r3, #25
 8006b66:	464a      	mov	r2, r9
 8006b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7ff fd9d 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	f040 8092 	bne.w	8006c9c <HAL_I2C_Master_Receive+0x16c>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b78:	2322      	movs	r3, #34	; 0x22
 8006b7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b7e:	2310      	movs	r3, #16
 8006b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006b88:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b8a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b8e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2bff      	cmp	r3, #255	; 0xff
 8006b96:	d945      	bls.n	8006c24 <HAL_I2C_Master_Receive+0xf4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b98:	22ff      	movs	r2, #255	; 0xff
 8006b9a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006b9c:	4b43      	ldr	r3, [pc, #268]	; (8006cac <HAL_I2C_Master_Receive+0x17c>)
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f7ff fc79 	bl	800649e <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bac:	2700      	movs	r7, #0
 8006bae:	f04f 0880 	mov.w	r8, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bb2:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 8006bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d04a      	beq.n	8006c54 <HAL_I2C_Master_Receive+0x124>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7ff fe32 	bl	800682c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d169      	bne.n	8006ca0 <HAL_I2C_Master_Receive+0x170>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006bda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006be2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006be4:	3a01      	subs	r2, #1
 8006be6:	b292      	uxth	r2, r2
 8006be8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006bec:	b292      	uxth	r2, r2
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	d0e1      	beq.n	8006bb6 <HAL_I2C_Master_Receive+0x86>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1df      	bne.n	8006bb6 <HAL_I2C_Master_Receive+0x86>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bf6:	9500      	str	r5, [sp, #0]
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfa:	463a      	mov	r2, r7
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff fd54 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d14d      	bne.n	8006ca4 <HAL_I2C_Master_Receive+0x174>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2bff      	cmp	r3, #255	; 0xff
 8006c0e:	d916      	bls.n	8006c3e <HAL_I2C_Master_Receive+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c10:	22ff      	movs	r2, #255	; 0xff
 8006c12:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c14:	9700      	str	r7, [sp, #0]
 8006c16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f7ff fc3e 	bl	800649e <I2C_TransferConfig>
 8006c22:	e7c8      	b.n	8006bb6 <HAL_I2C_Master_Receive+0x86>
      hi2c->XferSize = hi2c->XferCount;
 8006c24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006c26:	b292      	uxth	r2, r2
 8006c28:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006c2a:	4b20      	ldr	r3, [pc, #128]	; (8006cac <HAL_I2C_Master_Receive+0x17c>)
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	4631      	mov	r1, r6
 8006c36:	4620      	mov	r0, r4
 8006c38:	f7ff fc31 	bl	800649e <I2C_TransferConfig>
 8006c3c:	e7b6      	b.n	8006bac <HAL_I2C_Master_Receive+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 8006c3e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006c40:	b292      	uxth	r2, r2
 8006c42:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c44:	9700      	str	r7, [sp, #0]
 8006c46:	464b      	mov	r3, r9
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f7ff fc26 	bl	800649e <I2C_TransferConfig>
 8006c52:	e7b0      	b.n	8006bb6 <HAL_I2C_Master_Receive+0x86>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c54:	462a      	mov	r2, r5
 8006c56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f7ff fdbf 	bl	80067dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	bb10      	cbnz	r0, 8006ca8 <HAL_I2C_Master_Receive+0x178>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	2120      	movs	r1, #32
 8006c66:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8006c68:	6820      	ldr	r0, [r4, #0]
 8006c6a:	6842      	ldr	r2, [r0, #4]
 8006c6c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006c70:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8006c74:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006c7e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c82:	2200      	movs	r2, #0
 8006c84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006c88:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8006c8c:	e000      	b.n	8006c90 <HAL_I2C_Master_Receive+0x160>
    return HAL_BUSY;
 8006c8e:	2302      	movs	r3, #2
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	b003      	add	sp, #12
 8006c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e7f9      	b.n	8006c90 <HAL_I2C_Master_Receive+0x160>
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e7f7      	b.n	8006c90 <HAL_I2C_Master_Receive+0x160>
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e7f5      	b.n	8006c90 <HAL_I2C_Master_Receive+0x160>
          return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e7f3      	b.n	8006c90 <HAL_I2C_Master_Receive+0x160>
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e7f1      	b.n	8006c90 <HAL_I2C_Master_Receive+0x160>
 8006cac:	80002400 	.word	0x80002400

08006cb0 <HAL_I2C_Slave_Transmit>:
{
 8006cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb4:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb6:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8006cba:	b2ed      	uxtb	r5, r5
 8006cbc:	2d20      	cmp	r5, #32
 8006cbe:	f040 80b9 	bne.w	8006e34 <HAL_I2C_Slave_Transmit+0x184>
    if ((pData == NULL) || (Size == 0U))
 8006cc2:	2900      	cmp	r1, #0
 8006cc4:	d063      	beq.n	8006d8e <HAL_I2C_Slave_Transmit+0xde>
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	d061      	beq.n	8006d8e <HAL_I2C_Slave_Transmit+0xde>
    __HAL_LOCK(hi2c);
 8006cca:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8006cce:	2c01      	cmp	r4, #1
 8006cd0:	f000 80b5 	beq.w	8006e3e <HAL_I2C_Slave_Transmit+0x18e>
 8006cd4:	461f      	mov	r7, r3
 8006cd6:	4616      	mov	r6, r2
 8006cd8:	460d      	mov	r5, r1
 8006cda:	4604      	mov	r4, r0
 8006cdc:	2301      	movs	r3, #1
 8006cde:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006ce2:	f7fd fdd3 	bl	800488c <HAL_GetTick>
 8006ce6:	4680      	mov	r8, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ce8:	2321      	movs	r3, #33	; 0x21
 8006cea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006cee:	2320      	movs	r3, #32
 8006cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006cf8:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cfa:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006cfc:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006cfe:	6821      	ldr	r1, [r4, #0]
 8006d00:	684b      	ldr	r3, [r1, #4]
 8006d02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d06:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8006d08:	9000      	str	r0, [sp, #0]
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	2108      	movs	r1, #8
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff fccc 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d13f      	bne.n	8006d98 <HAL_I2C_Slave_Transmit+0xe8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	61da      	str	r2, [r3, #28]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d1e:	68e3      	ldr	r3, [r4, #12]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d040      	beq.n	8006da6 <HAL_I2C_Slave_Transmit+0xf6>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8006d24:	f8cd 8000 	str.w	r8, [sp]
 8006d28:	463b      	mov	r3, r7
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7ff fcbb 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d149      	bne.n	8006dce <HAL_I2C_Slave_Transmit+0x11e>
    while (hi2c->XferCount > 0U)
 8006d3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	b1ab      	cbz	r3, 8006d6c <HAL_I2C_Slave_Transmit+0xbc>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d40:	4642      	mov	r2, r8
 8006d42:	4639      	mov	r1, r7
 8006d44:	4620      	mov	r0, r4
 8006d46:	f7ff fc86 	bl	8006656 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d146      	bne.n	8006ddc <HAL_I2C_Slave_Transmit+0x12c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d58:	3301      	adds	r3, #1
 8006d5a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006d5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8006d64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e9      	bne.n	8006d40 <HAL_I2C_Slave_Transmit+0x90>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	4639      	mov	r1, r7
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7ff fd33 	bl	80067dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d039      	beq.n	8006dee <HAL_I2C_Slave_Transmit+0x13e>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d7a:	6822      	ldr	r2, [r4, #0]
 8006d7c:	6853      	ldr	r3, [r2, #4]
 8006d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d82:	6053      	str	r3, [r2, #4]
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d02f      	beq.n	8006dea <HAL_I2C_Slave_Transmit+0x13a>
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e053      	b.n	8006e36 <HAL_I2C_Slave_Transmit+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d92:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e04e      	b.n	8006e36 <HAL_I2C_Slave_Transmit+0x186>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d98:	6822      	ldr	r2, [r4, #0]
 8006d9a:	6853      	ldr	r3, [r2, #4]
 8006d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da0:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e047      	b.n	8006e36 <HAL_I2C_Slave_Transmit+0x186>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8006da6:	f8cd 8000 	str.w	r8, [sp]
 8006daa:	463b      	mov	r3, r7
 8006dac:	2200      	movs	r2, #0
 8006dae:	2108      	movs	r1, #8
 8006db0:	4620      	mov	r0, r4
 8006db2:	f7ff fc7b 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006db6:	b918      	cbnz	r0, 8006dc0 <HAL_I2C_Slave_Transmit+0x110>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	2208      	movs	r2, #8
 8006dbc:	61da      	str	r2, [r3, #28]
 8006dbe:	e7b1      	b.n	8006d24 <HAL_I2C_Slave_Transmit+0x74>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006dc0:	6822      	ldr	r2, [r4, #0]
 8006dc2:	6853      	ldr	r3, [r2, #4]
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc8:	6053      	str	r3, [r2, #4]
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e033      	b.n	8006e36 <HAL_I2C_Slave_Transmit+0x186>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	6853      	ldr	r3, [r2, #4]
 8006dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd6:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e02c      	b.n	8006e36 <HAL_I2C_Slave_Transmit+0x186>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	6853      	ldr	r3, [r2, #4]
 8006de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de4:	6053      	str	r3, [r2, #4]
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e025      	b.n	8006e36 <HAL_I2C_Slave_Transmit+0x186>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	2220      	movs	r2, #32
 8006df2:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8006df4:	f8cd 8000 	str.w	r8, [sp]
 8006df8:	463b      	mov	r3, r7
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7ff fc53 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	b968      	cbnz	r0, 8006e26 <HAL_I2C_Slave_Transmit+0x176>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006e0a:	6821      	ldr	r1, [r4, #0]
 8006e0c:	684a      	ldr	r2, [r1, #4]
 8006e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e12:	604a      	str	r2, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006e14:	2220      	movs	r2, #32
 8006e16:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006e20:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8006e24:	e007      	b.n	8006e36 <HAL_I2C_Slave_Transmit+0x186>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006e26:	6822      	ldr	r2, [r4, #0]
 8006e28:	6853      	ldr	r3, [r2, #4]
 8006e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e2e:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <HAL_I2C_Slave_Transmit+0x186>
    return HAL_BUSY;
 8006e34:	2302      	movs	r3, #2
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	b002      	add	sp, #8
 8006e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e7f9      	b.n	8006e36 <HAL_I2C_Slave_Transmit+0x186>

08006e42 <HAL_I2C_Slave_Receive>:
{
 8006e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e48:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8006e4c:	b2ed      	uxtb	r5, r5
 8006e4e:	2d20      	cmp	r5, #32
 8006e50:	f040 80a6 	bne.w	8006fa0 <HAL_I2C_Slave_Receive+0x15e>
    if ((pData == NULL) || (Size == 0U))
 8006e54:	b369      	cbz	r1, 8006eb2 <HAL_I2C_Slave_Receive+0x70>
 8006e56:	b362      	cbz	r2, 8006eb2 <HAL_I2C_Slave_Receive+0x70>
    __HAL_LOCK(hi2c);
 8006e58:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8006e5c:	2c01      	cmp	r4, #1
 8006e5e:	f000 80a4 	beq.w	8006faa <HAL_I2C_Slave_Receive+0x168>
 8006e62:	461f      	mov	r7, r3
 8006e64:	4616      	mov	r6, r2
 8006e66:	460d      	mov	r5, r1
 8006e68:	4604      	mov	r4, r0
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006e70:	f7fd fd0c 	bl	800488c <HAL_GetTick>
 8006e74:	4680      	mov	r8, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e76:	2322      	movs	r3, #34	; 0x22
 8006e78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006e7c:	2320      	movs	r3, #32
 8006e7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e82:	2200      	movs	r2, #0
 8006e84:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006e86:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e88:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e8a:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006e8c:	6821      	ldr	r1, [r4, #0]
 8006e8e:	684b      	ldr	r3, [r1, #4]
 8006e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e94:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8006e96:	9000      	str	r0, [sp, #0]
 8006e98:	463b      	mov	r3, r7
 8006e9a:	2108      	movs	r1, #8
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7ff fc05 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006ea2:	b158      	cbz	r0, 8006ebc <HAL_I2C_Slave_Receive+0x7a>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ea4:	6822      	ldr	r2, [r4, #0]
 8006ea6:	6853      	ldr	r3, [r2, #4]
 8006ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eac:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e077      	b.n	8006fa2 <HAL_I2C_Slave_Receive+0x160>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eb6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e072      	b.n	8006fa2 <HAL_I2C_Slave_Receive+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8006ec2:	f8cd 8000 	str.w	r8, [sp]
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff fbec 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006ed4:	bb20      	cbnz	r0, 8006f20 <HAL_I2C_Slave_Receive+0xde>
    while (hi2c->XferCount > 0U)
 8006ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	b1a3      	cbz	r3, 8006f06 <HAL_I2C_Slave_Receive+0xc4>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006edc:	4642      	mov	r2, r8
 8006ede:	4639      	mov	r1, r7
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f7ff fca3 	bl	800682c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ee6:	bb10      	cbnz	r0, 8006f2e <HAL_I2C_Slave_Receive+0xec>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eee:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006ef6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8006efe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1ea      	bne.n	8006edc <HAL_I2C_Slave_Receive+0x9a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f06:	4642      	mov	r2, r8
 8006f08:	4639      	mov	r1, r7
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7ff fc66 	bl	80067dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f10:	b318      	cbz	r0, 8006f5a <HAL_I2C_Slave_Receive+0x118>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f12:	6822      	ldr	r2, [r4, #0]
 8006f14:	6853      	ldr	r3, [r2, #4]
 8006f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1a:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e040      	b.n	8006fa2 <HAL_I2C_Slave_Receive+0x160>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f20:	6822      	ldr	r2, [r4, #0]
 8006f22:	6853      	ldr	r3, [r2, #4]
 8006f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f28:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e039      	b.n	8006fa2 <HAL_I2C_Slave_Receive+0x160>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f2e:	6822      	ldr	r2, [r4, #0]
 8006f30:	6853      	ldr	r3, [r2, #4]
 8006f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f36:	6053      	str	r3, [r2, #4]
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	f012 0f04 	tst.w	r2, #4
 8006f40:	d035      	beq.n	8006fae <HAL_I2C_Slave_Receive+0x16c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f46:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8006f4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	8563      	strh	r3, [r4, #42]	; 0x2a
        return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e023      	b.n	8006fa2 <HAL_I2C_Slave_Receive+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8006f60:	f8cd 8000 	str.w	r8, [sp]
 8006f64:	463b      	mov	r3, r7
 8006f66:	2201      	movs	r2, #1
 8006f68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f7ff fb9d 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	b968      	cbnz	r0, 8006f92 <HAL_I2C_Slave_Receive+0x150>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f76:	6821      	ldr	r1, [r4, #0]
 8006f78:	684a      	ldr	r2, [r1, #4]
 8006f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f7e:	604a      	str	r2, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006f80:	2220      	movs	r2, #32
 8006f82:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f86:	2200      	movs	r2, #0
 8006f88:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006f8c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8006f90:	e007      	b.n	8006fa2 <HAL_I2C_Slave_Receive+0x160>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	6853      	ldr	r3, [r2, #4]
 8006f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9a:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <HAL_I2C_Slave_Receive+0x160>
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	b002      	add	sp, #8
 8006fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8006faa:	2302      	movs	r3, #2
 8006fac:	e7f9      	b.n	8006fa2 <HAL_I2C_Slave_Receive+0x160>
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e7f7      	b.n	8006fa2 <HAL_I2C_Slave_Receive+0x160>
	...

08006fb4 <HAL_I2C_Master_Transmit_IT>:
{
 8006fb4:	b530      	push	{r4, r5, lr}
 8006fb6:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fb8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8006fbc:	b2e4      	uxtb	r4, r4
 8006fbe:	2c20      	cmp	r4, #32
 8006fc0:	d137      	bne.n	8007032 <HAL_I2C_Master_Transmit_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006fc2:	6804      	ldr	r4, [r0, #0]
 8006fc4:	69a4      	ldr	r4, [r4, #24]
 8006fc6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8006fca:	d135      	bne.n	8007038 <HAL_I2C_Master_Transmit_IT+0x84>
    __HAL_LOCK(hi2c);
 8006fcc:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8006fd0:	2c01      	cmp	r4, #1
 8006fd2:	d033      	beq.n	800703c <HAL_I2C_Master_Transmit_IT+0x88>
 8006fd4:	2401      	movs	r4, #1
 8006fd6:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006fda:	2421      	movs	r4, #33	; 0x21
 8006fdc:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006fe0:	2410      	movs	r4, #16
 8006fe2:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006fe6:	2400      	movs	r4, #0
 8006fe8:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8006fea:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006fec:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fee:	4b14      	ldr	r3, [pc, #80]	; (8007040 <HAL_I2C_Master_Transmit_IT+0x8c>)
 8006ff0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <HAL_I2C_Master_Transmit_IT+0x90>)
 8006ff4:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ff6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2bff      	cmp	r3, #255	; 0xff
 8006ffc:	d914      	bls.n	8007028 <HAL_I2C_Master_Transmit_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ffe:	23ff      	movs	r3, #255	; 0xff
 8007000:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007006:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8007008:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800700c:	480e      	ldr	r0, [pc, #56]	; (8007048 <HAL_I2C_Master_Transmit_IT+0x94>)
 800700e:	9000      	str	r0, [sp, #0]
 8007010:	4620      	mov	r0, r4
 8007012:	f7ff fa44 	bl	800649e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8007016:	2500      	movs	r5, #0
 8007018:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800701c:	2101      	movs	r1, #1
 800701e:	4620      	mov	r0, r4
 8007020:	f7ff fa58 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 8007024:	4628      	mov	r0, r5
 8007026:	e005      	b.n	8007034 <HAL_I2C_Master_Transmit_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 8007028:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800702a:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800702c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007030:	e7e9      	b.n	8007006 <HAL_I2C_Master_Transmit_IT+0x52>
    return HAL_BUSY;
 8007032:	2002      	movs	r0, #2
}
 8007034:	b003      	add	sp, #12
 8007036:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 8007038:	2002      	movs	r0, #2
 800703a:	e7fb      	b.n	8007034 <HAL_I2C_Master_Transmit_IT+0x80>
    __HAL_LOCK(hi2c);
 800703c:	2002      	movs	r0, #2
 800703e:	e7f9      	b.n	8007034 <HAL_I2C_Master_Transmit_IT+0x80>
 8007040:	ffff0000 	.word	0xffff0000
 8007044:	08008fb5 	.word	0x08008fb5
 8007048:	80002000 	.word	0x80002000

0800704c <HAL_I2C_Master_Receive_IT>:
{
 800704c:	b530      	push	{r4, r5, lr}
 800704e:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007050:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8007054:	b2e4      	uxtb	r4, r4
 8007056:	2c20      	cmp	r4, #32
 8007058:	d137      	bne.n	80070ca <HAL_I2C_Master_Receive_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800705a:	6804      	ldr	r4, [r0, #0]
 800705c:	69a4      	ldr	r4, [r4, #24]
 800705e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007062:	d135      	bne.n	80070d0 <HAL_I2C_Master_Receive_IT+0x84>
    __HAL_LOCK(hi2c);
 8007064:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8007068:	2c01      	cmp	r4, #1
 800706a:	d033      	beq.n	80070d4 <HAL_I2C_Master_Receive_IT+0x88>
 800706c:	2401      	movs	r4, #1
 800706e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007072:	2422      	movs	r4, #34	; 0x22
 8007074:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007078:	2410      	movs	r4, #16
 800707a:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800707e:	2400      	movs	r4, #0
 8007080:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8007082:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007084:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007086:	4b14      	ldr	r3, [pc, #80]	; (80070d8 <HAL_I2C_Master_Receive_IT+0x8c>)
 8007088:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800708a:	4b14      	ldr	r3, [pc, #80]	; (80070dc <HAL_I2C_Master_Receive_IT+0x90>)
 800708c:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800708e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007090:	b29b      	uxth	r3, r3
 8007092:	2bff      	cmp	r3, #255	; 0xff
 8007094:	d914      	bls.n	80070c0 <HAL_I2C_Master_Receive_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007096:	23ff      	movs	r3, #255	; 0xff
 8007098:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800709a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800709e:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80070a0:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80070a4:	480e      	ldr	r0, [pc, #56]	; (80070e0 <HAL_I2C_Master_Receive_IT+0x94>)
 80070a6:	9000      	str	r0, [sp, #0]
 80070a8:	4620      	mov	r0, r4
 80070aa:	f7ff f9f8 	bl	800649e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 80070ae:	2500      	movs	r5, #0
 80070b0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070b4:	2102      	movs	r1, #2
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7ff fa0c 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 80070bc:	4628      	mov	r0, r5
 80070be:	e005      	b.n	80070cc <HAL_I2C_Master_Receive_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 80070c0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80070c2:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80070c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070c8:	e7e9      	b.n	800709e <HAL_I2C_Master_Receive_IT+0x52>
    return HAL_BUSY;
 80070ca:	2002      	movs	r0, #2
}
 80070cc:	b003      	add	sp, #12
 80070ce:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 80070d0:	2002      	movs	r0, #2
 80070d2:	e7fb      	b.n	80070cc <HAL_I2C_Master_Receive_IT+0x80>
    __HAL_LOCK(hi2c);
 80070d4:	2002      	movs	r0, #2
 80070d6:	e7f9      	b.n	80070cc <HAL_I2C_Master_Receive_IT+0x80>
 80070d8:	ffff0000 	.word	0xffff0000
 80070dc:	08008fb5 	.word	0x08008fb5
 80070e0:	80002400 	.word	0x80002400

080070e4 <HAL_I2C_Slave_Transmit_IT>:
{
 80070e4:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d122      	bne.n	8007136 <HAL_I2C_Slave_Transmit_IT+0x52>
    __HAL_LOCK(hi2c);
 80070f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d020      	beq.n	800713a <HAL_I2C_Slave_Transmit_IT+0x56>
 80070f8:	2301      	movs	r3, #1
 80070fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80070fe:	2321      	movs	r3, #33	; 0x21
 8007100:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8007104:	2320      	movs	r3, #32
 8007106:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800710a:	2400      	movs	r4, #0
 800710c:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800710e:	6805      	ldr	r5, [r0, #0]
 8007110:	686b      	ldr	r3, [r5, #4]
 8007112:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007116:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 8007118:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800711a:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800711c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800711e:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007120:	4b07      	ldr	r3, [pc, #28]	; (8007140 <HAL_I2C_Slave_Transmit_IT+0x5c>)
 8007122:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8007124:	4b07      	ldr	r3, [pc, #28]	; (8007144 <HAL_I2C_Slave_Transmit_IT+0x60>)
 8007126:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8007128:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800712c:	2105      	movs	r1, #5
 800712e:	f7ff f9d1 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 8007132:	4620      	mov	r0, r4
 8007134:	e000      	b.n	8007138 <HAL_I2C_Slave_Transmit_IT+0x54>
    return HAL_BUSY;
 8007136:	2002      	movs	r0, #2
}
 8007138:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 800713a:	2002      	movs	r0, #2
 800713c:	e7fc      	b.n	8007138 <HAL_I2C_Slave_Transmit_IT+0x54>
 800713e:	bf00      	nop
 8007140:	ffff0000 	.word	0xffff0000
 8007144:	08008d8d 	.word	0x08008d8d

08007148 <HAL_I2C_Slave_Receive_IT>:
{
 8007148:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800714a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b20      	cmp	r3, #32
 8007152:	d122      	bne.n	800719a <HAL_I2C_Slave_Receive_IT+0x52>
    __HAL_LOCK(hi2c);
 8007154:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007158:	2b01      	cmp	r3, #1
 800715a:	d020      	beq.n	800719e <HAL_I2C_Slave_Receive_IT+0x56>
 800715c:	2301      	movs	r3, #1
 800715e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007162:	2322      	movs	r3, #34	; 0x22
 8007164:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8007168:	2320      	movs	r3, #32
 800716a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800716e:	2400      	movs	r4, #0
 8007170:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8007172:	6805      	ldr	r5, [r0, #0]
 8007174:	686b      	ldr	r3, [r5, #4]
 8007176:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800717a:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 800717c:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800717e:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007180:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007182:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007184:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <HAL_I2C_Slave_Receive_IT+0x5c>)
 8007186:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8007188:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <HAL_I2C_Slave_Receive_IT+0x60>)
 800718a:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 800718c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8007190:	2106      	movs	r1, #6
 8007192:	f7ff f99f 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 8007196:	4620      	mov	r0, r4
 8007198:	e000      	b.n	800719c <HAL_I2C_Slave_Receive_IT+0x54>
    return HAL_BUSY;
 800719a:	2002      	movs	r0, #2
}
 800719c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 800719e:	2002      	movs	r0, #2
 80071a0:	e7fc      	b.n	800719c <HAL_I2C_Slave_Receive_IT+0x54>
 80071a2:	bf00      	nop
 80071a4:	ffff0000 	.word	0xffff0000
 80071a8:	08008d8d 	.word	0x08008d8d

080071ac <HAL_I2C_Master_Transmit_DMA>:
{
 80071ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ae:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80071b0:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80071b4:	b2ed      	uxtb	r5, r5
 80071b6:	2d20      	cmp	r5, #32
 80071b8:	f040 808c 	bne.w	80072d4 <HAL_I2C_Master_Transmit_DMA+0x128>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80071bc:	6804      	ldr	r4, [r0, #0]
 80071be:	69a4      	ldr	r4, [r4, #24]
 80071c0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80071c4:	f040 808a 	bne.w	80072dc <HAL_I2C_Master_Transmit_DMA+0x130>
    __HAL_LOCK(hi2c);
 80071c8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80071cc:	2c01      	cmp	r4, #1
 80071ce:	f000 8087 	beq.w	80072e0 <HAL_I2C_Master_Transmit_DMA+0x134>
 80071d2:	4615      	mov	r5, r2
 80071d4:	460e      	mov	r6, r1
 80071d6:	4604      	mov	r4, r0
 80071d8:	2201      	movs	r2, #1
 80071da:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80071de:	2221      	movs	r2, #33	; 0x21
 80071e0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80071e4:	2210      	movs	r2, #16
 80071e6:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071ea:	2200      	movs	r2, #0
 80071ec:	6442      	str	r2, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80071ee:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071f0:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071f2:	4b3c      	ldr	r3, [pc, #240]	; (80072e4 <HAL_I2C_Master_Transmit_DMA+0x138>)
 80071f4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80071f6:	4b3c      	ldr	r3, [pc, #240]	; (80072e8 <HAL_I2C_Master_Transmit_DMA+0x13c>)
 80071f8:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2bff      	cmp	r3, #255	; 0xff
 8007200:	d927      	bls.n	8007252 <HAL_I2C_Master_Transmit_DMA+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007202:	23ff      	movs	r3, #255	; 0xff
 8007204:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007206:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
      if (hi2c->hdmatx != NULL)
 800720a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800720c:	2b00      	cmp	r3, #0
 800720e:	d038      	beq.n	8007282 <HAL_I2C_Master_Transmit_DMA+0xd6>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007210:	4a36      	ldr	r2, [pc, #216]	; (80072ec <HAL_I2C_Master_Transmit_DMA+0x140>)
 8007212:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007214:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007216:	4a36      	ldr	r2, [pc, #216]	; (80072f0 <HAL_I2C_Master_Transmit_DMA+0x144>)
 8007218:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800721a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800721c:	2300      	movs	r3, #0
 800721e:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007220:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007222:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007224:	6822      	ldr	r2, [r4, #0]
 8007226:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007228:	3228      	adds	r2, #40	; 0x28
 800722a:	4629      	mov	r1, r5
 800722c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800722e:	f7fd fea0 	bl	8004f72 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8007232:	4605      	mov	r5, r0
 8007234:	b398      	cbz	r0, 800729e <HAL_I2C_Master_Transmit_DMA+0xf2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007236:	2320      	movs	r3, #32
 8007238:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800723c:	2200      	movs	r2, #0
 800723e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007242:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007244:	f043 0310 	orr.w	r3, r3, #16
 8007248:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800724a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 800724e:	2501      	movs	r5, #1
 8007250:	e041      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x12a>
      hi2c->XferSize = hi2c->XferCount;
 8007252:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007254:	b29b      	uxth	r3, r3
 8007256:	8503      	strh	r3, [r0, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 8007258:	b983      	cbnz	r3, 800727c <HAL_I2C_Master_Transmit_DMA+0xd0>
      hi2c->XferISR = I2C_Master_ISR_IT;
 800725a:	4b26      	ldr	r3, [pc, #152]	; (80072f4 <HAL_I2C_Master_Transmit_DMA+0x148>)
 800725c:	6343      	str	r3, [r0, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800725e:	4b26      	ldr	r3, [pc, #152]	; (80072f8 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007266:	2200      	movs	r2, #0
 8007268:	f7ff f919 	bl	800649e <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 800726c:	2500      	movs	r5, #0
 800726e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007272:	2101      	movs	r1, #1
 8007274:	4620      	mov	r0, r4
 8007276:	f7ff f92d 	bl	80064d4 <I2C_Enable_IRQ>
 800727a:	e02c      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x12a>
      xfermode = I2C_AUTOEND_MODE;
 800727c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8007280:	e7c3      	b.n	800720a <HAL_I2C_Master_Transmit_DMA+0x5e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007282:	2320      	movs	r3, #32
 8007284:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007288:	2200      	movs	r2, #0
 800728a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800728e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007294:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007296:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 800729a:	2501      	movs	r5, #1
 800729c:	e01b      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x12a>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800729e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	463b      	mov	r3, r7
 80072a8:	4631      	mov	r1, r6
 80072aa:	4620      	mov	r0, r4
 80072ac:	f7ff f8f7 	bl	800649e <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 80072b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80072b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 80072ba:	2300      	movs	r3, #0
 80072bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80072c0:	2111      	movs	r1, #17
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7ff f906 	bl	80064d4 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80072c8:	6822      	ldr	r2, [r4, #0]
 80072ca:	6813      	ldr	r3, [r2, #0]
 80072cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e000      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x12a>
    return HAL_BUSY;
 80072d4:	2502      	movs	r5, #2
}
 80072d6:	4628      	mov	r0, r5
 80072d8:	b003      	add	sp, #12
 80072da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 80072dc:	2502      	movs	r5, #2
 80072de:	e7fa      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x12a>
    __HAL_LOCK(hi2c);
 80072e0:	2502      	movs	r5, #2
 80072e2:	e7f8      	b.n	80072d6 <HAL_I2C_Master_Transmit_DMA+0x12a>
 80072e4:	ffff0000 	.word	0xffff0000
 80072e8:	08009235 	.word	0x08009235
 80072ec:	08009381 	.word	0x08009381
 80072f0:	0800936b 	.word	0x0800936b
 80072f4:	08008fb5 	.word	0x08008fb5
 80072f8:	80002000 	.word	0x80002000

080072fc <HAL_I2C_Master_Receive_DMA>:
{
 80072fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072fe:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007300:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8007304:	b2ed      	uxtb	r5, r5
 8007306:	2d20      	cmp	r5, #32
 8007308:	f040 808b 	bne.w	8007422 <HAL_I2C_Master_Receive_DMA+0x126>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800730c:	6804      	ldr	r4, [r0, #0]
 800730e:	69a4      	ldr	r4, [r4, #24]
 8007310:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007314:	f040 8089 	bne.w	800742a <HAL_I2C_Master_Receive_DMA+0x12e>
    __HAL_LOCK(hi2c);
 8007318:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800731c:	2c01      	cmp	r4, #1
 800731e:	f000 8086 	beq.w	800742e <HAL_I2C_Master_Receive_DMA+0x132>
 8007322:	460e      	mov	r6, r1
 8007324:	4604      	mov	r4, r0
 8007326:	2101      	movs	r1, #1
 8007328:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800732c:	2122      	movs	r1, #34	; 0x22
 800732e:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007332:	2110      	movs	r1, #16
 8007334:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007338:	2100      	movs	r1, #0
 800733a:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800733c:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800733e:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007340:	4b3c      	ldr	r3, [pc, #240]	; (8007434 <HAL_I2C_Master_Receive_DMA+0x138>)
 8007342:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007344:	4b3c      	ldr	r3, [pc, #240]	; (8007438 <HAL_I2C_Master_Receive_DMA+0x13c>)
 8007346:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007348:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800734a:	b29b      	uxth	r3, r3
 800734c:	2bff      	cmp	r3, #255	; 0xff
 800734e:	d926      	bls.n	800739e <HAL_I2C_Master_Receive_DMA+0xa2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007350:	23ff      	movs	r3, #255	; 0xff
 8007352:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007354:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
      if (hi2c->hdmarx != NULL)
 8007358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d038      	beq.n	80073d0 <HAL_I2C_Master_Receive_DMA+0xd4>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800735e:	4937      	ldr	r1, [pc, #220]	; (800743c <HAL_I2C_Master_Receive_DMA+0x140>)
 8007360:	62d9      	str	r1, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007362:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007364:	4936      	ldr	r1, [pc, #216]	; (8007440 <HAL_I2C_Master_Receive_DMA+0x144>)
 8007366:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007368:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800736a:	2300      	movs	r3, #0
 800736c:	630b      	str	r3, [r1, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800736e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007370:	638b      	str	r3, [r1, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8007372:	6821      	ldr	r1, [r4, #0]
 8007374:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007376:	3124      	adds	r1, #36	; 0x24
 8007378:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800737a:	f7fd fdfa 	bl	8004f72 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800737e:	4605      	mov	r5, r0
 8007380:	b3a0      	cbz	r0, 80073ec <HAL_I2C_Master_Receive_DMA+0xf0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007382:	2320      	movs	r3, #32
 8007384:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007388:	2200      	movs	r2, #0
 800738a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800738e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007390:	f043 0310 	orr.w	r3, r3, #16
 8007394:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007396:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 800739a:	2501      	movs	r5, #1
 800739c:	e042      	b.n	8007424 <HAL_I2C_Master_Receive_DMA+0x128>
      hi2c->XferSize = hi2c->XferCount;
 800739e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	8503      	strh	r3, [r0, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 80073a4:	b98b      	cbnz	r3, 80073ca <HAL_I2C_Master_Receive_DMA+0xce>
      hi2c->XferISR = I2C_Master_ISR_IT;
 80073a6:	4b27      	ldr	r3, [pc, #156]	; (8007444 <HAL_I2C_Master_Receive_DMA+0x148>)
 80073a8:	6343      	str	r3, [r0, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80073aa:	4b27      	ldr	r3, [pc, #156]	; (8007448 <HAL_I2C_Master_Receive_DMA+0x14c>)
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073b2:	2200      	movs	r2, #0
 80073b4:	4631      	mov	r1, r6
 80073b6:	f7ff f872 	bl	800649e <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 80073ba:	2500      	movs	r5, #0
 80073bc:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80073c0:	2101      	movs	r1, #1
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7ff f886 	bl	80064d4 <I2C_Enable_IRQ>
 80073c8:	e02c      	b.n	8007424 <HAL_I2C_Master_Receive_DMA+0x128>
      xfermode = I2C_AUTOEND_MODE;
 80073ca:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80073ce:	e7c3      	b.n	8007358 <HAL_I2C_Master_Receive_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80073d0:	2320      	movs	r3, #32
 80073d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80073d6:	2200      	movs	r2, #0
 80073d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80073dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80073de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e2:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80073e4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 80073e8:	2501      	movs	r5, #1
 80073ea:	e01b      	b.n	8007424 <HAL_I2C_Master_Receive_DMA+0x128>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80073ec:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80073f0:	4b15      	ldr	r3, [pc, #84]	; (8007448 <HAL_I2C_Master_Receive_DMA+0x14c>)
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	463b      	mov	r3, r7
 80073f6:	4631      	mov	r1, r6
 80073f8:	4620      	mov	r0, r4
 80073fa:	f7ff f850 	bl	800649e <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 80073fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007400:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007402:	1a9b      	subs	r3, r3, r2
 8007404:	b29b      	uxth	r3, r3
 8007406:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8007408:	2300      	movs	r3, #0
 800740a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800740e:	2111      	movs	r1, #17
 8007410:	4620      	mov	r0, r4
 8007412:	f7ff f85f 	bl	80064d4 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	6813      	ldr	r3, [r2, #0]
 800741a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	e000      	b.n	8007424 <HAL_I2C_Master_Receive_DMA+0x128>
    return HAL_BUSY;
 8007422:	2502      	movs	r5, #2
}
 8007424:	4628      	mov	r0, r5
 8007426:	b003      	add	sp, #12
 8007428:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 800742a:	2502      	movs	r5, #2
 800742c:	e7fa      	b.n	8007424 <HAL_I2C_Master_Receive_DMA+0x128>
    __HAL_LOCK(hi2c);
 800742e:	2502      	movs	r5, #2
 8007430:	e7f8      	b.n	8007424 <HAL_I2C_Master_Receive_DMA+0x128>
 8007432:	bf00      	nop
 8007434:	ffff0000 	.word	0xffff0000
 8007438:	08009235 	.word	0x08009235
 800743c:	080093d7 	.word	0x080093d7
 8007440:	0800936b 	.word	0x0800936b
 8007444:	08008fb5 	.word	0x08008fb5
 8007448:	80002400 	.word	0x80002400

0800744c <HAL_I2C_Slave_Transmit_DMA>:
{
 800744c:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800744e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b20      	cmp	r3, #32
 8007456:	d162      	bne.n	800751e <HAL_I2C_Slave_Transmit_DMA+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8007458:	2900      	cmp	r1, #0
 800745a:	d03b      	beq.n	80074d4 <HAL_I2C_Slave_Transmit_DMA+0x88>
 800745c:	2a00      	cmp	r2, #0
 800745e:	d039      	beq.n	80074d4 <HAL_I2C_Slave_Transmit_DMA+0x88>
    __HAL_LOCK(hi2c);
 8007460:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007464:	2b01      	cmp	r3, #1
 8007466:	d05d      	beq.n	8007524 <HAL_I2C_Slave_Transmit_DMA+0xd8>
 8007468:	2301      	movs	r3, #1
 800746a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800746e:	2321      	movs	r3, #33	; 0x21
 8007470:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8007474:	2320      	movs	r3, #32
 8007476:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800747a:	2300      	movs	r3, #0
 800747c:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800747e:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007480:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007482:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007484:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007486:	4b28      	ldr	r3, [pc, #160]	; (8007528 <HAL_I2C_Slave_Transmit_DMA+0xdc>)
 8007488:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800748a:	4b28      	ldr	r3, [pc, #160]	; (800752c <HAL_I2C_Slave_Transmit_DMA+0xe0>)
 800748c:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->hdmatx != NULL)
 800748e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007490:	b32b      	cbz	r3, 80074de <HAL_I2C_Slave_Transmit_DMA+0x92>
 8007492:	4605      	mov	r5, r0
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8007494:	4a26      	ldr	r2, [pc, #152]	; (8007530 <HAL_I2C_Slave_Transmit_DMA+0xe4>)
 8007496:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007498:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800749a:	4a26      	ldr	r2, [pc, #152]	; (8007534 <HAL_I2C_Slave_Transmit_DMA+0xe8>)
 800749c:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800749e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80074a0:	2300      	movs	r3, #0
 80074a2:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80074a4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80074a6:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80074a8:	6802      	ldr	r2, [r0, #0]
 80074aa:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80074ac:	3228      	adds	r2, #40	; 0x28
 80074ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80074b0:	f7fd fd5f 	bl	8004f72 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 80074b4:	4604      	mov	r4, r0
 80074b6:	b300      	cbz	r0, 80074fa <HAL_I2C_Slave_Transmit_DMA+0xae>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80074b8:	2328      	movs	r3, #40	; 0x28
 80074ba:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80074be:	2200      	movs	r2, #0
 80074c0:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80074c4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80074c6:	f043 0310 	orr.w	r3, r3, #16
 80074ca:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80074cc:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 80074d0:	2401      	movs	r4, #1
 80074d2:	e025      	b.n	8007520 <HAL_I2C_Slave_Transmit_DMA+0xd4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074d8:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80074da:	2401      	movs	r4, #1
 80074dc:	e020      	b.n	8007520 <HAL_I2C_Slave_Transmit_DMA+0xd4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80074de:	2328      	movs	r3, #40	; 0x28
 80074e0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80074e4:	2200      	movs	r2, #0
 80074e6:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80074ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80074ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f0:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80074f2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
      return HAL_ERROR;
 80074f6:	2401      	movs	r4, #1
 80074f8:	e012      	b.n	8007520 <HAL_I2C_Slave_Transmit_DMA+0xd4>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80074fa:	682a      	ldr	r2, [r5, #0]
 80074fc:	6853      	ldr	r3, [r2, #4]
 80074fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007502:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hi2c);
 8007504:	2300      	movs	r3, #0
 8007506:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800750a:	2104      	movs	r1, #4
 800750c:	4628      	mov	r0, r5
 800750e:	f7fe ffe1 	bl	80064d4 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007512:	682a      	ldr	r2, [r5, #0]
 8007514:	6813      	ldr	r3, [r2, #0]
 8007516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800751a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800751c:	e000      	b.n	8007520 <HAL_I2C_Slave_Transmit_DMA+0xd4>
    return HAL_BUSY;
 800751e:	2402      	movs	r4, #2
}
 8007520:	4620      	mov	r0, r4
 8007522:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8007524:	2402      	movs	r4, #2
 8007526:	e7fb      	b.n	8007520 <HAL_I2C_Slave_Transmit_DMA+0xd4>
 8007528:	ffff0000 	.word	0xffff0000
 800752c:	08009131 	.word	0x08009131
 8007530:	08008a2d 	.word	0x08008a2d
 8007534:	0800936b 	.word	0x0800936b

08007538 <HAL_I2C_Slave_Receive_DMA>:
{
 8007538:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800753a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b20      	cmp	r3, #32
 8007542:	d163      	bne.n	800760c <HAL_I2C_Slave_Receive_DMA+0xd4>
    if ((pData == NULL) || (Size == 0U))
 8007544:	2900      	cmp	r1, #0
 8007546:	d03c      	beq.n	80075c2 <HAL_I2C_Slave_Receive_DMA+0x8a>
 8007548:	2a00      	cmp	r2, #0
 800754a:	d03a      	beq.n	80075c2 <HAL_I2C_Slave_Receive_DMA+0x8a>
    __HAL_LOCK(hi2c);
 800754c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007550:	2b01      	cmp	r3, #1
 8007552:	d05e      	beq.n	8007612 <HAL_I2C_Slave_Receive_DMA+0xda>
 8007554:	2301      	movs	r3, #1
 8007556:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800755a:	2322      	movs	r3, #34	; 0x22
 800755c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8007560:	2320      	movs	r3, #32
 8007562:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007566:	2300      	movs	r3, #0
 8007568:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800756a:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800756c:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800756e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007570:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007572:	4b29      	ldr	r3, [pc, #164]	; (8007618 <HAL_I2C_Slave_Receive_DMA+0xe0>)
 8007574:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8007576:	4b29      	ldr	r3, [pc, #164]	; (800761c <HAL_I2C_Slave_Receive_DMA+0xe4>)
 8007578:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->hdmarx != NULL)
 800757a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800757c:	b333      	cbz	r3, 80075cc <HAL_I2C_Slave_Receive_DMA+0x94>
 800757e:	460a      	mov	r2, r1
 8007580:	4605      	mov	r5, r0
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8007582:	4927      	ldr	r1, [pc, #156]	; (8007620 <HAL_I2C_Slave_Receive_DMA+0xe8>)
 8007584:	62d9      	str	r1, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007586:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007588:	4926      	ldr	r1, [pc, #152]	; (8007624 <HAL_I2C_Slave_Receive_DMA+0xec>)
 800758a:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800758c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800758e:	2300      	movs	r3, #0
 8007590:	630b      	str	r3, [r1, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007592:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007594:	638b      	str	r3, [r1, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8007596:	6801      	ldr	r1, [r0, #0]
 8007598:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800759a:	3124      	adds	r1, #36	; 0x24
 800759c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800759e:	f7fd fce8 	bl	8004f72 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 80075a2:	4604      	mov	r4, r0
 80075a4:	b300      	cbz	r0, 80075e8 <HAL_I2C_Slave_Receive_DMA+0xb0>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80075a6:	2328      	movs	r3, #40	; 0x28
 80075a8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80075ac:	2200      	movs	r2, #0
 80075ae:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80075b2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80075b4:	f043 0310 	orr.w	r3, r3, #16
 80075b8:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80075ba:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 80075be:	2401      	movs	r4, #1
 80075c0:	e025      	b.n	800760e <HAL_I2C_Slave_Receive_DMA+0xd6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80075c8:	2401      	movs	r4, #1
 80075ca:	e020      	b.n	800760e <HAL_I2C_Slave_Receive_DMA+0xd6>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80075cc:	2328      	movs	r3, #40	; 0x28
 80075ce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80075d2:	2200      	movs	r2, #0
 80075d4:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80075d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80075da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075de:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80075e0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
      return HAL_ERROR;
 80075e4:	2401      	movs	r4, #1
 80075e6:	e012      	b.n	800760e <HAL_I2C_Slave_Receive_DMA+0xd6>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80075e8:	682a      	ldr	r2, [r5, #0]
 80075ea:	6853      	ldr	r3, [r2, #4]
 80075ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075f0:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hi2c);
 80075f2:	2300      	movs	r3, #0
 80075f4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80075f8:	2104      	movs	r1, #4
 80075fa:	4628      	mov	r0, r5
 80075fc:	f7fe ff6a 	bl	80064d4 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007600:	682a      	ldr	r2, [r5, #0]
 8007602:	6813      	ldr	r3, [r2, #0]
 8007604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007608:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800760a:	e000      	b.n	800760e <HAL_I2C_Slave_Receive_DMA+0xd6>
    return HAL_BUSY;
 800760c:	2402      	movs	r4, #2
}
 800760e:	4620      	mov	r0, r4
 8007610:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8007612:	2402      	movs	r4, #2
 8007614:	e7fb      	b.n	800760e <HAL_I2C_Slave_Receive_DMA+0xd6>
 8007616:	bf00      	nop
 8007618:	ffff0000 	.word	0xffff0000
 800761c:	08009131 	.word	0x08009131
 8007620:	08008a49 	.word	0x08008a49
 8007624:	0800936b 	.word	0x0800936b

08007628 <HAL_I2C_Mem_Write>:
{
 8007628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007632:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8007636:	b2ed      	uxtb	r5, r5
 8007638:	2d20      	cmp	r5, #32
 800763a:	f040 80bc 	bne.w	80077b6 <HAL_I2C_Mem_Write+0x18e>
    if ((pData == NULL) || (Size == 0U))
 800763e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007640:	b1dc      	cbz	r4, 800767a <HAL_I2C_Mem_Write+0x52>
 8007642:	b1d7      	cbz	r7, 800767a <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8007644:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8007648:	2c01      	cmp	r4, #1
 800764a:	f000 80b9 	beq.w	80077c0 <HAL_I2C_Mem_Write+0x198>
 800764e:	4698      	mov	r8, r3
 8007650:	4691      	mov	r9, r2
 8007652:	460d      	mov	r5, r1
 8007654:	4604      	mov	r4, r0
 8007656:	f04f 0a01 	mov.w	sl, #1
 800765a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800765e:	f7fd f915 	bl	800488c <HAL_GetTick>
 8007662:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007664:	9000      	str	r0, [sp, #0]
 8007666:	2319      	movs	r3, #25
 8007668:	4652      	mov	r2, sl
 800766a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800766e:	4620      	mov	r0, r4
 8007670:	f7ff f81c 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8007674:	b130      	cbz	r0, 8007684 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e09e      	b.n	80077b8 <HAL_I2C_Mem_Write+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800767a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800767e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e099      	b.n	80077b8 <HAL_I2C_Mem_Write+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007684:	2321      	movs	r3, #33	; 0x21
 8007686:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800768a:	2340      	movs	r3, #64	; 0x40
 800768c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007690:	2300      	movs	r3, #0
 8007692:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8007694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007696:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007698:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800769a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800769c:	9601      	str	r6, [sp, #4]
 800769e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	4643      	mov	r3, r8
 80076a4:	464a      	mov	r2, r9
 80076a6:	4629      	mov	r1, r5
 80076a8:	4620      	mov	r0, r4
 80076aa:	f7ff f829 	bl	8006700 <I2C_RequestMemoryWrite>
 80076ae:	b998      	cbnz	r0, 80076d8 <HAL_I2C_Mem_Write+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2bff      	cmp	r3, #255	; 0xff
 80076b6:	d914      	bls.n	80076e2 <HAL_I2C_Mem_Write+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076b8:	22ff      	movs	r2, #255	; 0xff
 80076ba:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80076bc:	2300      	movs	r3, #0
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076c4:	4629      	mov	r1, r5
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7fe fee9 	bl	800649e <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076cc:	2700      	movs	r7, #0
 80076ce:	f04f 0880 	mov.w	r8, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076d2:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 80076d6:	e01f      	b.n	8007718 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 80076d8:	2300      	movs	r3, #0
 80076da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80076de:	4653      	mov	r3, sl
 80076e0:	e06a      	b.n	80077b8 <HAL_I2C_Mem_Write+0x190>
      hi2c->XferSize = hi2c->XferCount;
 80076e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80076e4:	b292      	uxth	r2, r2
 80076e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076e8:	2300      	movs	r3, #0
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	4629      	mov	r1, r5
 80076f4:	4620      	mov	r0, r4
 80076f6:	f7fe fed2 	bl	800649e <I2C_TransferConfig>
 80076fa:	e7e7      	b.n	80076cc <HAL_I2C_Mem_Write+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 80076fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80076fe:	b292      	uxth	r2, r2
 8007700:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007702:	9700      	str	r7, [sp, #0]
 8007704:	464b      	mov	r3, r9
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	4629      	mov	r1, r5
 800770a:	4620      	mov	r0, r4
 800770c:	f7fe fec7 	bl	800649e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8007710:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d031      	beq.n	800777c <HAL_I2C_Mem_Write+0x154>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007718:	4632      	mov	r2, r6
 800771a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800771c:	4620      	mov	r0, r4
 800771e:	f7fe ff9a 	bl	8006656 <I2C_WaitOnTXISFlagUntilTimeout>
 8007722:	2800      	cmp	r0, #0
 8007724:	d14e      	bne.n	80077c4 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800772e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007730:	3301      	adds	r3, #1
 8007732:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007734:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007736:	3b01      	subs	r3, #1
 8007738:	b29b      	uxth	r3, r3
 800773a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800773c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800773e:	3b01      	subs	r3, #1
 8007740:	b29b      	uxth	r3, r3
 8007742:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007744:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007746:	b292      	uxth	r2, r2
 8007748:	2a00      	cmp	r2, #0
 800774a:	d0e1      	beq.n	8007710 <HAL_I2C_Mem_Write+0xe8>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1df      	bne.n	8007710 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007750:	9600      	str	r6, [sp, #0]
 8007752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007754:	463a      	mov	r2, r7
 8007756:	4641      	mov	r1, r8
 8007758:	4620      	mov	r0, r4
 800775a:	f7fe ffa7 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 800775e:	bb98      	cbnz	r0, 80077c8 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007760:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007762:	b29b      	uxth	r3, r3
 8007764:	2bff      	cmp	r3, #255	; 0xff
 8007766:	d9c9      	bls.n	80076fc <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007768:	22ff      	movs	r2, #255	; 0xff
 800776a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800776c:	9700      	str	r7, [sp, #0]
 800776e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007772:	4629      	mov	r1, r5
 8007774:	4620      	mov	r0, r4
 8007776:	f7fe fe92 	bl	800649e <I2C_TransferConfig>
 800777a:	e7c9      	b.n	8007710 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800777c:	4632      	mov	r2, r6
 800777e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007780:	4620      	mov	r0, r4
 8007782:	f7ff f82b 	bl	80067dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	bb00      	cbnz	r0, 80077cc <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	2120      	movs	r1, #32
 800778e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	6842      	ldr	r2, [r0, #4]
 8007794:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8007798:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800779c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80077a6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077aa:	2200      	movs	r2, #0
 80077ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80077b0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80077b4:	e000      	b.n	80077b8 <HAL_I2C_Mem_Write+0x190>
    return HAL_BUSY;
 80077b6:	2302      	movs	r3, #2
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	b002      	add	sp, #8
 80077bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80077c0:	2302      	movs	r3, #2
 80077c2:	e7f9      	b.n	80077b8 <HAL_I2C_Mem_Write+0x190>
        return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e7f7      	b.n	80077b8 <HAL_I2C_Mem_Write+0x190>
          return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e7f5      	b.n	80077b8 <HAL_I2C_Mem_Write+0x190>
      return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e7f3      	b.n	80077b8 <HAL_I2C_Mem_Write+0x190>

080077d0 <HAL_I2C_Mem_Read>:
{
 80077d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80077da:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80077de:	b2ed      	uxtb	r5, r5
 80077e0:	2d20      	cmp	r5, #32
 80077e2:	f040 80bf 	bne.w	8007964 <HAL_I2C_Mem_Read+0x194>
    if ((pData == NULL) || (Size == 0U))
 80077e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077e8:	b1dc      	cbz	r4, 8007822 <HAL_I2C_Mem_Read+0x52>
 80077ea:	b1d7      	cbz	r7, 8007822 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 80077ec:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80077f0:	2c01      	cmp	r4, #1
 80077f2:	f000 80bc 	beq.w	800796e <HAL_I2C_Mem_Read+0x19e>
 80077f6:	4698      	mov	r8, r3
 80077f8:	4691      	mov	r9, r2
 80077fa:	460d      	mov	r5, r1
 80077fc:	4604      	mov	r4, r0
 80077fe:	f04f 0a01 	mov.w	sl, #1
 8007802:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007806:	f7fd f841 	bl	800488c <HAL_GetTick>
 800780a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800780c:	9000      	str	r0, [sp, #0]
 800780e:	2319      	movs	r3, #25
 8007810:	4652      	mov	r2, sl
 8007812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007816:	4620      	mov	r0, r4
 8007818:	f7fe ff48 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 800781c:	b130      	cbz	r0, 800782c <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e0a1      	b.n	8007966 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007826:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e09c      	b.n	8007966 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800782c:	2322      	movs	r3, #34	; 0x22
 800782e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007838:	2300      	movs	r3, #0
 800783a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800783c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800783e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007840:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007842:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007844:	9601      	str	r6, [sp, #4]
 8007846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	4643      	mov	r3, r8
 800784c:	464a      	mov	r2, r9
 800784e:	4629      	mov	r1, r5
 8007850:	4620      	mov	r0, r4
 8007852:	f7fe ff8d 	bl	8006770 <I2C_RequestMemoryRead>
 8007856:	b998      	cbnz	r0, 8007880 <HAL_I2C_Mem_Read+0xb0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007858:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	2bff      	cmp	r3, #255	; 0xff
 800785e:	d914      	bls.n	800788a <HAL_I2C_Mem_Read+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007860:	22ff      	movs	r2, #255	; 0xff
 8007862:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007864:	4b46      	ldr	r3, [pc, #280]	; (8007980 <HAL_I2C_Mem_Read+0x1b0>)
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800786c:	4629      	mov	r1, r5
 800786e:	4620      	mov	r0, r4
 8007870:	f7fe fe15 	bl	800649e <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007874:	2700      	movs	r7, #0
 8007876:	f04f 0804 	mov.w	r8, #4
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800787a:	f04f 0980 	mov.w	r9, #128	; 0x80
 800787e:	e020      	b.n	80078c2 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8007880:	2300      	movs	r3, #0
 8007882:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007886:	4653      	mov	r3, sl
 8007888:	e06d      	b.n	8007966 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800788a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800788c:	b292      	uxth	r2, r2
 800788e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007890:	4b3b      	ldr	r3, [pc, #236]	; (8007980 <HAL_I2C_Mem_Read+0x1b0>)
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007898:	b2d2      	uxtb	r2, r2
 800789a:	4629      	mov	r1, r5
 800789c:	4620      	mov	r0, r4
 800789e:	f7fe fdfe 	bl	800649e <I2C_TransferConfig>
 80078a2:	e7e7      	b.n	8007874 <HAL_I2C_Mem_Read+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 80078a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80078a6:	b292      	uxth	r2, r2
 80078a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078aa:	9700      	str	r7, [sp, #0]
 80078ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	4629      	mov	r1, r5
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7fe fdf2 	bl	800649e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80078ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d033      	beq.n	800792a <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80078c2:	9600      	str	r6, [sp, #0]
 80078c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078c6:	463a      	mov	r2, r7
 80078c8:	4641      	mov	r1, r8
 80078ca:	4620      	mov	r0, r4
 80078cc:	f7fe feee 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d14e      	bne.n	8007972 <HAL_I2C_Mem_Read+0x1a2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078da:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80078dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078de:	3301      	adds	r3, #1
 80078e0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80078e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80078ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80078ec:	3a01      	subs	r2, #1
 80078ee:	b292      	uxth	r2, r2
 80078f0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80078f4:	b292      	uxth	r2, r2
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	d0df      	beq.n	80078ba <HAL_I2C_Mem_Read+0xea>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1dd      	bne.n	80078ba <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078fe:	9600      	str	r6, [sp, #0]
 8007900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007902:	463a      	mov	r2, r7
 8007904:	4649      	mov	r1, r9
 8007906:	4620      	mov	r0, r4
 8007908:	f7fe fed0 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 800790c:	bb98      	cbnz	r0, 8007976 <HAL_I2C_Mem_Read+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800790e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007910:	b29b      	uxth	r3, r3
 8007912:	2bff      	cmp	r3, #255	; 0xff
 8007914:	d9c6      	bls.n	80078a4 <HAL_I2C_Mem_Read+0xd4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007916:	22ff      	movs	r2, #255	; 0xff
 8007918:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800791a:	9700      	str	r7, [sp, #0]
 800791c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007920:	4629      	mov	r1, r5
 8007922:	4620      	mov	r0, r4
 8007924:	f7fe fdbb 	bl	800649e <I2C_TransferConfig>
 8007928:	e7c7      	b.n	80078ba <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800792a:	4632      	mov	r2, r6
 800792c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800792e:	4620      	mov	r0, r4
 8007930:	f7fe ff54 	bl	80067dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	bb00      	cbnz	r0, 800797a <HAL_I2C_Mem_Read+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007938:	6822      	ldr	r2, [r4, #0]
 800793a:	2120      	movs	r1, #32
 800793c:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800793e:	6820      	ldr	r0, [r4, #0]
 8007940:	6842      	ldr	r2, [r0, #4]
 8007942:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8007946:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800794a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007954:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007958:	2200      	movs	r2, #0
 800795a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800795e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8007962:	e000      	b.n	8007966 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8007964:	2302      	movs	r3, #2
}
 8007966:	4618      	mov	r0, r3
 8007968:	b002      	add	sp, #8
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800796e:	2302      	movs	r3, #2
 8007970:	e7f9      	b.n	8007966 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e7f7      	b.n	8007966 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e7f5      	b.n	8007966 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e7f3      	b.n	8007966 <HAL_I2C_Mem_Read+0x196>
 800797e:	bf00      	nop
 8007980:	80002400 	.word	0x80002400

08007984 <HAL_I2C_Mem_Write_IT>:
{
 8007984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800798e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8007992:	b2e4      	uxtb	r4, r4
 8007994:	2c20      	cmp	r4, #32
 8007996:	d159      	bne.n	8007a4c <HAL_I2C_Mem_Write_IT+0xc8>
    if ((pData == NULL) || (Size == 0U))
 8007998:	9c08      	ldr	r4, [sp, #32]
 800799a:	2c00      	cmp	r4, #0
 800799c:	d03a      	beq.n	8007a14 <HAL_I2C_Mem_Write_IT+0x90>
 800799e:	2e00      	cmp	r6, #0
 80079a0:	d038      	beq.n	8007a14 <HAL_I2C_Mem_Write_IT+0x90>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80079a2:	6804      	ldr	r4, [r0, #0]
 80079a4:	69a4      	ldr	r4, [r4, #24]
 80079a6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80079aa:	d154      	bne.n	8007a56 <HAL_I2C_Mem_Write_IT+0xd2>
    __HAL_LOCK(hi2c);
 80079ac:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80079b0:	2c01      	cmp	r4, #1
 80079b2:	d052      	beq.n	8007a5a <HAL_I2C_Mem_Write_IT+0xd6>
 80079b4:	4698      	mov	r8, r3
 80079b6:	4614      	mov	r4, r2
 80079b8:	460f      	mov	r7, r1
 80079ba:	4605      	mov	r5, r0
 80079bc:	2301      	movs	r3, #1
 80079be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80079c2:	f7fc ff63 	bl	800488c <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80079c6:	2321      	movs	r3, #33	; 0x21
 80079c8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80079d6:	9b08      	ldr	r3, [sp, #32]
 80079d8:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80079da:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079dc:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <HAL_I2C_Mem_Write_IT+0xdc>)
 80079de:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80079e0:	4b20      	ldr	r3, [pc, #128]	; (8007a64 <HAL_I2C_Mem_Write_IT+0xe0>)
 80079e2:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079e4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2bff      	cmp	r3, #255	; 0xff
 80079ea:	d918      	bls.n	8007a1e <HAL_I2C_Mem_Write_IT+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079ec:	23ff      	movs	r3, #255	; 0xff
 80079ee:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80079f0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80079f4:	9001      	str	r0, [sp, #4]
 80079f6:	2319      	movs	r3, #25
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	4643      	mov	r3, r8
 80079fc:	4622      	mov	r2, r4
 80079fe:	4639      	mov	r1, r7
 8007a00:	4628      	mov	r0, r5
 8007a02:	f7fe fe7d 	bl	8006700 <I2C_RequestMemoryWrite>
 8007a06:	4604      	mov	r4, r0
 8007a08:	b170      	cbz	r0, 8007a28 <HAL_I2C_Mem_Write_IT+0xa4>
      __HAL_UNLOCK(hi2c);
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007a10:	2401      	movs	r4, #1
 8007a12:	e01c      	b.n	8007a4e <HAL_I2C_Mem_Write_IT+0xca>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a18:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007a1a:	2401      	movs	r4, #1
 8007a1c:	e017      	b.n	8007a4e <HAL_I2C_Mem_Write_IT+0xca>
      hi2c->XferSize = hi2c->XferCount;
 8007a1e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007a20:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007a22:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8007a26:	e7e5      	b.n	80079f4 <HAL_I2C_Mem_Write_IT+0x70>
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007a28:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8007a2c:	f04f 0800 	mov.w	r8, #0
 8007a30:	f8cd 8000 	str.w	r8, [sp]
 8007a34:	4633      	mov	r3, r6
 8007a36:	4639      	mov	r1, r7
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f7fe fd30 	bl	800649e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8007a3e:	f885 8040 	strb.w	r8, [r5, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007a42:	2101      	movs	r1, #1
 8007a44:	4628      	mov	r0, r5
 8007a46:	f7fe fd45 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 8007a4a:	e000      	b.n	8007a4e <HAL_I2C_Mem_Write_IT+0xca>
    return HAL_BUSY;
 8007a4c:	2402      	movs	r4, #2
}
 8007a4e:	4620      	mov	r0, r4
 8007a50:	b002      	add	sp, #8
 8007a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 8007a56:	2402      	movs	r4, #2
 8007a58:	e7f9      	b.n	8007a4e <HAL_I2C_Mem_Write_IT+0xca>
    __HAL_LOCK(hi2c);
 8007a5a:	2402      	movs	r4, #2
 8007a5c:	e7f7      	b.n	8007a4e <HAL_I2C_Mem_Write_IT+0xca>
 8007a5e:	bf00      	nop
 8007a60:	ffff0000 	.word	0xffff0000
 8007a64:	08008fb5 	.word	0x08008fb5

08007a68 <HAL_I2C_Mem_Read_IT>:
{
 8007a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a72:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8007a76:	b2e4      	uxtb	r4, r4
 8007a78:	2c20      	cmp	r4, #32
 8007a7a:	d158      	bne.n	8007b2e <HAL_I2C_Mem_Read_IT+0xc6>
    if ((pData == NULL) || (Size == 0U))
 8007a7c:	9c08      	ldr	r4, [sp, #32]
 8007a7e:	2c00      	cmp	r4, #0
 8007a80:	d03a      	beq.n	8007af8 <HAL_I2C_Mem_Read_IT+0x90>
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d038      	beq.n	8007af8 <HAL_I2C_Mem_Read_IT+0x90>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007a86:	6804      	ldr	r4, [r0, #0]
 8007a88:	69a4      	ldr	r4, [r4, #24]
 8007a8a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007a8e:	d153      	bne.n	8007b38 <HAL_I2C_Mem_Read_IT+0xd0>
    __HAL_LOCK(hi2c);
 8007a90:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8007a94:	2c01      	cmp	r4, #1
 8007a96:	d051      	beq.n	8007b3c <HAL_I2C_Mem_Read_IT+0xd4>
 8007a98:	4698      	mov	r8, r3
 8007a9a:	4614      	mov	r4, r2
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007aa6:	f7fc fef1 	bl	800488c <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007aaa:	2322      	movs	r3, #34	; 0x22
 8007aac:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007ab0:	2340      	movs	r3, #64	; 0x40
 8007ab2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007abe:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ac0:	4b1f      	ldr	r3, [pc, #124]	; (8007b40 <HAL_I2C_Mem_Read_IT+0xd8>)
 8007ac2:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8007ac4:	4b1f      	ldr	r3, [pc, #124]	; (8007b44 <HAL_I2C_Mem_Read_IT+0xdc>)
 8007ac6:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ac8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2bff      	cmp	r3, #255	; 0xff
 8007ace:	d918      	bls.n	8007b02 <HAL_I2C_Mem_Read_IT+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ad0:	23ff      	movs	r3, #255	; 0xff
 8007ad2:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007ad4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007ad8:	9001      	str	r0, [sp, #4]
 8007ada:	2319      	movs	r3, #25
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	4643      	mov	r3, r8
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f7fe fe43 	bl	8006770 <I2C_RequestMemoryRead>
 8007aea:	4604      	mov	r4, r0
 8007aec:	b170      	cbz	r0, 8007b0c <HAL_I2C_Mem_Read_IT+0xa4>
      __HAL_UNLOCK(hi2c);
 8007aee:	2300      	movs	r3, #0
 8007af0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007af4:	2401      	movs	r4, #1
 8007af6:	e01b      	b.n	8007b30 <HAL_I2C_Mem_Read_IT+0xc8>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007afc:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007afe:	2401      	movs	r4, #1
 8007b00:	e016      	b.n	8007b30 <HAL_I2C_Mem_Read_IT+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 8007b02:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007b04:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007b06:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8007b0a:	e7e5      	b.n	8007ad8 <HAL_I2C_Mem_Read_IT+0x70>
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007b0c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <HAL_I2C_Mem_Read_IT+0xe0>)
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	4633      	mov	r3, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f7fe fcc0 	bl	800649e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007b24:	2102      	movs	r1, #2
 8007b26:	4628      	mov	r0, r5
 8007b28:	f7fe fcd4 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 8007b2c:	e000      	b.n	8007b30 <HAL_I2C_Mem_Read_IT+0xc8>
    return HAL_BUSY;
 8007b2e:	2402      	movs	r4, #2
}
 8007b30:	4620      	mov	r0, r4
 8007b32:	b002      	add	sp, #8
 8007b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 8007b38:	2402      	movs	r4, #2
 8007b3a:	e7f9      	b.n	8007b30 <HAL_I2C_Mem_Read_IT+0xc8>
    __HAL_LOCK(hi2c);
 8007b3c:	2402      	movs	r4, #2
 8007b3e:	e7f7      	b.n	8007b30 <HAL_I2C_Mem_Read_IT+0xc8>
 8007b40:	ffff0000 	.word	0xffff0000
 8007b44:	08008fb5 	.word	0x08008fb5
 8007b48:	80002400 	.word	0x80002400

08007b4c <HAL_I2C_Mem_Write_DMA>:
{
 8007b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b56:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8007b5a:	b2e4      	uxtb	r4, r4
 8007b5c:	2c20      	cmp	r4, #32
 8007b5e:	f040 8098 	bne.w	8007c92 <HAL_I2C_Mem_Write_DMA+0x146>
    if ((pData == NULL) || (Size == 0U))
 8007b62:	9c08      	ldr	r4, [sp, #32]
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	d05b      	beq.n	8007c20 <HAL_I2C_Mem_Write_DMA+0xd4>
 8007b68:	2e00      	cmp	r6, #0
 8007b6a:	d059      	beq.n	8007c20 <HAL_I2C_Mem_Write_DMA+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007b6c:	6804      	ldr	r4, [r0, #0]
 8007b6e:	69a4      	ldr	r4, [r4, #24]
 8007b70:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007b74:	f040 8092 	bne.w	8007c9c <HAL_I2C_Mem_Write_DMA+0x150>
    __HAL_LOCK(hi2c);
 8007b78:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8007b7c:	2c01      	cmp	r4, #1
 8007b7e:	f000 808f 	beq.w	8007ca0 <HAL_I2C_Mem_Write_DMA+0x154>
 8007b82:	4698      	mov	r8, r3
 8007b84:	4614      	mov	r4, r2
 8007b86:	460f      	mov	r7, r1
 8007b88:	4605      	mov	r5, r0
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007b90:	f7fc fe7c 	bl	800488c <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007b94:	2321      	movs	r3, #33	; 0x21
 8007b96:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007b9a:	2340      	movs	r3, #64	; 0x40
 8007b9c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8007ba4:	9b08      	ldr	r3, [sp, #32]
 8007ba6:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ba8:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007baa:	4b3e      	ldr	r3, [pc, #248]	; (8007ca4 <HAL_I2C_Mem_Write_DMA+0x158>)
 8007bac:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007bae:	4b3e      	ldr	r3, [pc, #248]	; (8007ca8 <HAL_I2C_Mem_Write_DMA+0x15c>)
 8007bb0:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bb2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2bff      	cmp	r3, #255	; 0xff
 8007bb8:	d937      	bls.n	8007c2a <HAL_I2C_Mem_Write_DMA+0xde>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bba:	23ff      	movs	r3, #255	; 0xff
 8007bbc:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007bbe:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007bc2:	9001      	str	r0, [sp, #4]
 8007bc4:	2319      	movs	r3, #25
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	4643      	mov	r3, r8
 8007bca:	4622      	mov	r2, r4
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f7fe fd96 	bl	8006700 <I2C_RequestMemoryWrite>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d12d      	bne.n	8007c34 <HAL_I2C_Mem_Write_DMA+0xe8>
    if (hi2c->hdmatx != NULL)
 8007bd8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d02f      	beq.n	8007c3e <HAL_I2C_Mem_Write_DMA+0xf2>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007bde:	4a33      	ldr	r2, [pc, #204]	; (8007cac <HAL_I2C_Mem_Write_DMA+0x160>)
 8007be0:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007be2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007be4:	4a32      	ldr	r2, [pc, #200]	; (8007cb0 <HAL_I2C_Mem_Write_DMA+0x164>)
 8007be6:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007be8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8007bea:	2300      	movs	r3, #0
 8007bec:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8007bee:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8007bf0:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007bf2:	682a      	ldr	r2, [r5, #0]
 8007bf4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8007bf6:	3228      	adds	r2, #40	; 0x28
 8007bf8:	9908      	ldr	r1, [sp, #32]
 8007bfa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007bfc:	f7fd f9b9 	bl	8004f72 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8007c00:	4604      	mov	r4, r0
 8007c02:	b350      	cbz	r0, 8007c5a <HAL_I2C_Mem_Write_DMA+0x10e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007c04:	2320      	movs	r3, #32
 8007c06:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007c10:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007c12:	f043 0310 	orr.w	r3, r3, #16
 8007c16:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007c18:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007c1c:	2401      	movs	r4, #1
 8007c1e:	e039      	b.n	8007c94 <HAL_I2C_Mem_Write_DMA+0x148>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c24:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007c26:	2401      	movs	r4, #1
 8007c28:	e034      	b.n	8007c94 <HAL_I2C_Mem_Write_DMA+0x148>
      hi2c->XferSize = hi2c->XferCount;
 8007c2a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007c2c:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007c2e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8007c32:	e7c6      	b.n	8007bc2 <HAL_I2C_Mem_Write_DMA+0x76>
      __HAL_UNLOCK(hi2c);
 8007c34:	2300      	movs	r3, #0
 8007c36:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007c3a:	2401      	movs	r4, #1
 8007c3c:	e02a      	b.n	8007c94 <HAL_I2C_Mem_Write_DMA+0x148>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007c3e:	2320      	movs	r3, #32
 8007c40:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007c44:	2200      	movs	r2, #0
 8007c46:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007c4a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c50:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007c52:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007c56:	2401      	movs	r4, #1
 8007c58:	e01c      	b.n	8007c94 <HAL_I2C_Mem_Write_DMA+0x148>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007c5a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8007c5e:	f04f 0800 	mov.w	r8, #0
 8007c62:	f8cd 8000 	str.w	r8, [sp]
 8007c66:	4633      	mov	r3, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f7fe fc17 	bl	800649e <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8007c70:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007c72:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	856b      	strh	r3, [r5, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 8007c7a:	f885 8040 	strb.w	r8, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007c7e:	2111      	movs	r1, #17
 8007c80:	4628      	mov	r0, r5
 8007c82:	f7fe fc27 	bl	80064d4 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007c86:	682a      	ldr	r2, [r5, #0]
 8007c88:	6813      	ldr	r3, [r2, #0]
 8007c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c8e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8007c90:	e000      	b.n	8007c94 <HAL_I2C_Mem_Write_DMA+0x148>
    return HAL_BUSY;
 8007c92:	2402      	movs	r4, #2
}
 8007c94:	4620      	mov	r0, r4
 8007c96:	b002      	add	sp, #8
 8007c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 8007c9c:	2402      	movs	r4, #2
 8007c9e:	e7f9      	b.n	8007c94 <HAL_I2C_Mem_Write_DMA+0x148>
    __HAL_LOCK(hi2c);
 8007ca0:	2402      	movs	r4, #2
 8007ca2:	e7f7      	b.n	8007c94 <HAL_I2C_Mem_Write_DMA+0x148>
 8007ca4:	ffff0000 	.word	0xffff0000
 8007ca8:	08009235 	.word	0x08009235
 8007cac:	08009381 	.word	0x08009381
 8007cb0:	0800936b 	.word	0x0800936b

08007cb4 <HAL_I2C_Mem_Read_DMA>:
{
 8007cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cbe:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8007cc2:	b2e4      	uxtb	r4, r4
 8007cc4:	2c20      	cmp	r4, #32
 8007cc6:	f040 8097 	bne.w	8007df8 <HAL_I2C_Mem_Read_DMA+0x144>
    if ((pData == NULL) || (Size == 0U))
 8007cca:	9c08      	ldr	r4, [sp, #32]
 8007ccc:	2c00      	cmp	r4, #0
 8007cce:	d05b      	beq.n	8007d88 <HAL_I2C_Mem_Read_DMA+0xd4>
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	d059      	beq.n	8007d88 <HAL_I2C_Mem_Read_DMA+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007cd4:	6804      	ldr	r4, [r0, #0]
 8007cd6:	69a4      	ldr	r4, [r4, #24]
 8007cd8:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007cdc:	f040 8091 	bne.w	8007e02 <HAL_I2C_Mem_Read_DMA+0x14e>
    __HAL_LOCK(hi2c);
 8007ce0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8007ce4:	2c01      	cmp	r4, #1
 8007ce6:	f000 808e 	beq.w	8007e06 <HAL_I2C_Mem_Read_DMA+0x152>
 8007cea:	4698      	mov	r8, r3
 8007cec:	4614      	mov	r4, r2
 8007cee:	460f      	mov	r7, r1
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007cf8:	f7fc fdc8 	bl	800488c <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007cfc:	2322      	movs	r3, #34	; 0x22
 8007cfe:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007d02:	2340      	movs	r3, #64	; 0x40
 8007d04:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8007d0c:	9b08      	ldr	r3, [sp, #32]
 8007d0e:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d10:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d12:	4b3e      	ldr	r3, [pc, #248]	; (8007e0c <HAL_I2C_Mem_Read_DMA+0x158>)
 8007d14:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007d16:	4b3e      	ldr	r3, [pc, #248]	; (8007e10 <HAL_I2C_Mem_Read_DMA+0x15c>)
 8007d18:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d1a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2bff      	cmp	r3, #255	; 0xff
 8007d20:	d937      	bls.n	8007d92 <HAL_I2C_Mem_Read_DMA+0xde>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d22:	23ff      	movs	r3, #255	; 0xff
 8007d24:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007d26:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007d2a:	9001      	str	r0, [sp, #4]
 8007d2c:	2319      	movs	r3, #25
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	4643      	mov	r3, r8
 8007d32:	4622      	mov	r2, r4
 8007d34:	4639      	mov	r1, r7
 8007d36:	4628      	mov	r0, r5
 8007d38:	f7fe fd1a 	bl	8006770 <I2C_RequestMemoryRead>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d12d      	bne.n	8007d9c <HAL_I2C_Mem_Read_DMA+0xe8>
    if (hi2c->hdmarx != NULL)
 8007d40:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d02f      	beq.n	8007da6 <HAL_I2C_Mem_Read_DMA+0xf2>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007d46:	4a33      	ldr	r2, [pc, #204]	; (8007e14 <HAL_I2C_Mem_Read_DMA+0x160>)
 8007d48:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007d4a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007d4c:	4a32      	ldr	r2, [pc, #200]	; (8007e18 <HAL_I2C_Mem_Read_DMA+0x164>)
 8007d4e:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007d50:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8007d52:	2300      	movs	r3, #0
 8007d54:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007d56:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8007d58:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8007d5a:	6829      	ldr	r1, [r5, #0]
 8007d5c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8007d5e:	9a08      	ldr	r2, [sp, #32]
 8007d60:	3124      	adds	r1, #36	; 0x24
 8007d62:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8007d64:	f7fd f905 	bl	8004f72 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8007d68:	4604      	mov	r4, r0
 8007d6a:	b350      	cbz	r0, 8007dc2 <HAL_I2C_Mem_Read_DMA+0x10e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007d6c:	2320      	movs	r3, #32
 8007d6e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007d72:	2200      	movs	r2, #0
 8007d74:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007d78:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007d7a:	f043 0310 	orr.w	r3, r3, #16
 8007d7e:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007d80:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007d84:	2401      	movs	r4, #1
 8007d86:	e038      	b.n	8007dfa <HAL_I2C_Mem_Read_DMA+0x146>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d8c:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007d8e:	2401      	movs	r4, #1
 8007d90:	e033      	b.n	8007dfa <HAL_I2C_Mem_Read_DMA+0x146>
      hi2c->XferSize = hi2c->XferCount;
 8007d92:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007d94:	852b      	strh	r3, [r5, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d96:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8007d9a:	e7c6      	b.n	8007d2a <HAL_I2C_Mem_Read_DMA+0x76>
      __HAL_UNLOCK(hi2c);
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007da2:	2401      	movs	r4, #1
 8007da4:	e029      	b.n	8007dfa <HAL_I2C_Mem_Read_DMA+0x146>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007da6:	2320      	movs	r3, #32
 8007da8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007dac:	2200      	movs	r2, #0
 8007dae:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007db2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db8:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007dba:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007dbe:	2401      	movs	r4, #1
 8007dc0:	e01b      	b.n	8007dfa <HAL_I2C_Mem_Read_DMA+0x146>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007dc2:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <HAL_I2C_Mem_Read_DMA+0x168>)
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4633      	mov	r3, r6
 8007dcc:	4639      	mov	r1, r7
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f7fe fb65 	bl	800649e <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8007dd4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8007dd6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8007dd8:	1a9b      	subs	r3, r3, r2
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	856b      	strh	r3, [r5, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 8007dde:	2300      	movs	r3, #0
 8007de0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007de4:	2111      	movs	r1, #17
 8007de6:	4628      	mov	r0, r5
 8007de8:	f7fe fb74 	bl	80064d4 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007dec:	682a      	ldr	r2, [r5, #0]
 8007dee:	6813      	ldr	r3, [r2, #0]
 8007df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df4:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8007df6:	e000      	b.n	8007dfa <HAL_I2C_Mem_Read_DMA+0x146>
    return HAL_BUSY;
 8007df8:	2402      	movs	r4, #2
}
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	b002      	add	sp, #8
 8007dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_BUSY;
 8007e02:	2402      	movs	r4, #2
 8007e04:	e7f9      	b.n	8007dfa <HAL_I2C_Mem_Read_DMA+0x146>
    __HAL_LOCK(hi2c);
 8007e06:	2402      	movs	r4, #2
 8007e08:	e7f7      	b.n	8007dfa <HAL_I2C_Mem_Read_DMA+0x146>
 8007e0a:	bf00      	nop
 8007e0c:	ffff0000 	.word	0xffff0000
 8007e10:	08009235 	.word	0x08009235
 8007e14:	080093d7 	.word	0x080093d7
 8007e18:	0800936b 	.word	0x0800936b
 8007e1c:	80002400 	.word	0x80002400

08007e20 <HAL_I2C_IsDeviceReady>:
{
 8007e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e24:	b085      	sub	sp, #20
  __IO uint32_t I2C_Trials = 0UL;
 8007e26:	2400      	movs	r4, #0
 8007e28:	9403      	str	r4, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e2a:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 8007e2e:	b2f6      	uxtb	r6, r6
 8007e30:	2e20      	cmp	r6, #32
 8007e32:	f040 809e 	bne.w	8007f72 <HAL_I2C_IsDeviceReady+0x152>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007e36:	6804      	ldr	r4, [r0, #0]
 8007e38:	69a4      	ldr	r4, [r4, #24]
 8007e3a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007e3e:	f040 809d 	bne.w	8007f7c <HAL_I2C_IsDeviceReady+0x15c>
    __HAL_LOCK(hi2c);
 8007e42:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8007e46:	2c01      	cmp	r4, #1
 8007e48:	f000 809a 	beq.w	8007f80 <HAL_I2C_IsDeviceReady+0x160>
 8007e4c:	461d      	mov	r5, r3
 8007e4e:	4690      	mov	r8, r2
 8007e50:	4604      	mov	r4, r0
 8007e52:	2301      	movs	r3, #1
 8007e54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e58:	2324      	movs	r3, #36	; 0x24
 8007e5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007e62:	f3c1 0709 	ubfx	r7, r1, #0, #10
 8007e66:	f447 5920 	orr.w	r9, r7, #10240	; 0x2800
 8007e6a:	e03b      	b.n	8007ee4 <HAL_I2C_IsDeviceReady+0xc4>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007e70:	6999      	ldr	r1, [r3, #24]
 8007e72:	f001 0110 	and.w	r1, r1, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007e76:	f012 0f20 	tst.w	r2, #32
 8007e7a:	d116      	bne.n	8007eaa <HAL_I2C_IsDeviceReady+0x8a>
 8007e7c:	b9a9      	cbnz	r1, 8007eaa <HAL_I2C_IsDeviceReady+0x8a>
        if (Timeout != HAL_MAX_DELAY)
 8007e7e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007e82:	d0f3      	beq.n	8007e6c <HAL_I2C_IsDeviceReady+0x4c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e84:	f7fc fd02 	bl	800488c <HAL_GetTick>
 8007e88:	1b80      	subs	r0, r0, r6
 8007e8a:	42a8      	cmp	r0, r5
 8007e8c:	d801      	bhi.n	8007e92 <HAL_I2C_IsDeviceReady+0x72>
 8007e8e:	2d00      	cmp	r5, #0
 8007e90:	d1ec      	bne.n	8007e6c <HAL_I2C_IsDeviceReady+0x4c>
            hi2c->State = HAL_I2C_STATE_READY;
 8007e92:	2320      	movs	r3, #32
 8007e94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e9a:	f043 0320 	orr.w	r3, r3, #32
 8007e9e:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e064      	b.n	8007f74 <HAL_I2C_IsDeviceReady+0x154>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	f013 0f10 	tst.w	r3, #16
 8007eb2:	d02f      	beq.n	8007f14 <HAL_I2C_IsDeviceReady+0xf4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007eb4:	9600      	str	r6, [sp, #0]
 8007eb6:	462b      	mov	r3, r5
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2120      	movs	r1, #32
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f7fe fbf5 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d160      	bne.n	8007f88 <HAL_I2C_IsDeviceReady+0x168>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	2210      	movs	r2, #16
 8007eca:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	4543      	cmp	r3, r8
 8007ed6:	d02f      	beq.n	8007f38 <HAL_I2C_IsDeviceReady+0x118>
      I2C_Trials++;
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	3301      	adds	r3, #1
 8007edc:	9303      	str	r3, [sp, #12]
    while (I2C_Trials < Trials);
 8007ede:	9b03      	ldr	r3, [sp, #12]
 8007ee0:	4543      	cmp	r3, r8
 8007ee2:	d23a      	bcs.n	8007f5a <HAL_I2C_IsDeviceReady+0x13a>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007ee4:	68e3      	ldr	r3, [r4, #12]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	bf06      	itte	eq
 8007eea:	f047 7300 	orreq.w	r3, r7, #33554432	; 0x2000000
 8007eee:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8007ef2:	464b      	movne	r3, r9
 8007ef4:	6822      	ldr	r2, [r4, #0]
 8007ef6:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8007ef8:	f7fc fcc8 	bl	800488c <HAL_GetTick>
 8007efc:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	699a      	ldr	r2, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007f08:	f012 0f20 	tst.w	r2, #32
 8007f0c:	d1cd      	bne.n	8007eaa <HAL_I2C_IsDeviceReady+0x8a>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0b5      	beq.n	8007e7e <HAL_I2C_IsDeviceReady+0x5e>
 8007f12:	e7ca      	b.n	8007eaa <HAL_I2C_IsDeviceReady+0x8a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007f14:	9600      	str	r6, [sp, #0]
 8007f16:	462b      	mov	r3, r5
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2120      	movs	r1, #32
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f7fe fbc5 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	bb70      	cbnz	r0, 8007f84 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f26:	6821      	ldr	r1, [r4, #0]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	61ca      	str	r2, [r1, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8007f2c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8007f30:	2200      	movs	r2, #0
 8007f32:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_OK;
 8007f36:	e01d      	b.n	8007f74 <HAL_I2C_IsDeviceReady+0x154>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f38:	6822      	ldr	r2, [r4, #0]
 8007f3a:	6853      	ldr	r3, [r2, #4]
 8007f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f40:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007f42:	9600      	str	r6, [sp, #0]
 8007f44:	462b      	mov	r3, r5
 8007f46:	2200      	movs	r2, #0
 8007f48:	2120      	movs	r1, #32
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7fe fbae 	bl	80066ac <I2C_WaitOnFlagUntilTimeout>
 8007f50:	b9e0      	cbnz	r0, 8007f8c <HAL_I2C_IsDeviceReady+0x16c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	2220      	movs	r2, #32
 8007f56:	61da      	str	r2, [r3, #28]
 8007f58:	e7be      	b.n	8007ed8 <HAL_I2C_IsDeviceReady+0xb8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007f5a:	2320      	movs	r3, #32
 8007f5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007f62:	f043 0320 	orr.w	r3, r3, #32
 8007f66:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e000      	b.n	8007f74 <HAL_I2C_IsDeviceReady+0x154>
    return HAL_BUSY;
 8007f72:	2302      	movs	r3, #2
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	b005      	add	sp, #20
 8007f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e7f9      	b.n	8007f74 <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 8007f80:	2302      	movs	r3, #2
 8007f82:	e7f7      	b.n	8007f74 <HAL_I2C_IsDeviceReady+0x154>
          return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e7f5      	b.n	8007f74 <HAL_I2C_IsDeviceReady+0x154>
          return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e7f3      	b.n	8007f74 <HAL_I2C_IsDeviceReady+0x154>
          return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e7f1      	b.n	8007f74 <HAL_I2C_IsDeviceReady+0x154>

08007f90 <HAL_I2C_Master_Seq_Transmit_IT>:
{
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f94:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8007f98:	b2e4      	uxtb	r4, r4
 8007f9a:	2c20      	cmp	r4, #32
 8007f9c:	d149      	bne.n	8008032 <HAL_I2C_Master_Seq_Transmit_IT+0xa2>
    __HAL_LOCK(hi2c);
 8007f9e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8007fa2:	2c01      	cmp	r4, #1
 8007fa4:	d048      	beq.n	8008038 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
 8007fa6:	2401      	movs	r4, #1
 8007fa8:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fac:	2421      	movs	r4, #33	; 0x21
 8007fae:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007fb2:	2410      	movs	r4, #16
 8007fb4:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fb8:	2400      	movs	r4, #0
 8007fba:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8007fbc:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fbe:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8007fc0:	9b06      	ldr	r3, [sp, #24]
 8007fc2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8007fc4:	4b1d      	ldr	r3, [pc, #116]	; (800803c <HAL_I2C_Master_Seq_Transmit_IT+0xac>)
 8007fc6:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fc8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2bff      	cmp	r3, #255	; 0xff
 8007fce:	d910      	bls.n	8007ff2 <HAL_I2C_Master_Seq_Transmit_IT+0x62>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fd0:	23ff      	movs	r3, #255	; 0xff
 8007fd2:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007fd4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8007fd8:	460d      	mov	r5, r1
 8007fda:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8007fdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007fde:	2b11      	cmp	r3, #17
 8007fe0:	d10b      	bne.n	8007ffa <HAL_I2C_Master_Seq_Transmit_IT+0x6a>
 8007fe2:	9b06      	ldr	r3, [sp, #24]
 8007fe4:	2baa      	cmp	r3, #170	; 0xaa
 8007fe6:	d008      	beq.n	8007ffa <HAL_I2C_Master_Seq_Transmit_IT+0x6a>
 8007fe8:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8007fec:	d005      	beq.n	8007ffa <HAL_I2C_Master_Seq_Transmit_IT+0x6a>
      xferrequest = I2C_NO_STARTSTOP;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e00c      	b.n	800800c <HAL_I2C_Master_Seq_Transmit_IT+0x7c>
      hi2c->XferSize = hi2c->XferCount;
 8007ff2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007ff4:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8007ff6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8007ff8:	e7ee      	b.n	8007fd8 <HAL_I2C_Master_Seq_Transmit_IT+0x48>
      I2C_ConvertOtherXferOptions(hi2c);
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f7fe fad5 	bl	80065aa <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 8008000:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008002:	b29b      	uxth	r3, r3
 8008004:	2bfe      	cmp	r3, #254	; 0xfe
 8008006:	d812      	bhi.n	800802e <HAL_I2C_Master_Seq_Transmit_IT+0x9e>
        xfermode = hi2c->XferOptions;
 8008008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800800a:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <HAL_I2C_Master_Seq_Transmit_IT+0xb0>)
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800800c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	4633      	mov	r3, r6
 8008014:	4629      	mov	r1, r5
 8008016:	4620      	mov	r0, r4
 8008018:	f7fe fa41 	bl	800649e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 800801c:	2500      	movs	r5, #0
 800801e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008022:	2101      	movs	r1, #1
 8008024:	4620      	mov	r0, r4
 8008026:	f7fe fa55 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 800802a:	4628      	mov	r0, r5
 800802c:	e002      	b.n	8008034 <HAL_I2C_Master_Seq_Transmit_IT+0xa4>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800802e:	4b04      	ldr	r3, [pc, #16]	; (8008040 <HAL_I2C_Master_Seq_Transmit_IT+0xb0>)
 8008030:	e7ec      	b.n	800800c <HAL_I2C_Master_Seq_Transmit_IT+0x7c>
    return HAL_BUSY;
 8008032:	2002      	movs	r0, #2
}
 8008034:	b002      	add	sp, #8
 8008036:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 8008038:	2002      	movs	r0, #2
 800803a:	e7fb      	b.n	8008034 <HAL_I2C_Master_Seq_Transmit_IT+0xa4>
 800803c:	08008fb5 	.word	0x08008fb5
 8008040:	80002000 	.word	0x80002000

08008044 <HAL_I2C_Master_Seq_Transmit_DMA>:
{
 8008044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008048:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 800804a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800804e:	b2e4      	uxtb	r4, r4
 8008050:	2c20      	cmp	r4, #32
 8008052:	f040 809c 	bne.w	800818e <HAL_I2C_Master_Seq_Transmit_DMA+0x14a>
    __HAL_LOCK(hi2c);
 8008056:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800805a:	2c01      	cmp	r4, #1
 800805c:	f000 809c 	beq.w	8008198 <HAL_I2C_Master_Seq_Transmit_DMA+0x154>
 8008060:	2401      	movs	r4, #1
 8008062:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008066:	2421      	movs	r4, #33	; 0x21
 8008068:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800806c:	2410      	movs	r4, #16
 800806e:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008072:	2400      	movs	r4, #0
 8008074:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8008076:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008078:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800807e:	4b47      	ldr	r3, [pc, #284]	; (800819c <HAL_I2C_Master_Seq_Transmit_DMA+0x158>)
 8008080:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008082:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008084:	b29b      	uxth	r3, r3
 8008086:	2bff      	cmp	r3, #255	; 0xff
 8008088:	d911      	bls.n	80080ae <HAL_I2C_Master_Seq_Transmit_DMA+0x6a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800808a:	23ff      	movs	r3, #255	; 0xff
 800808c:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800808e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8008092:	4615      	mov	r5, r2
 8008094:	4688      	mov	r8, r1
 8008096:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8008098:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800809a:	2b11      	cmp	r3, #17
 800809c:	d10b      	bne.n	80080b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x72>
 800809e:	9b08      	ldr	r3, [sp, #32]
 80080a0:	2baa      	cmp	r3, #170	; 0xaa
 80080a2:	d008      	beq.n	80080b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x72>
 80080a4:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80080a8:	d005      	beq.n	80080b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x72>
      xferrequest = I2C_NO_STARTSTOP;
 80080aa:	2600      	movs	r6, #0
 80080ac:	e00c      	b.n	80080c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x84>
      hi2c->XferSize = hi2c->XferCount;
 80080ae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80080b0:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 80080b2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80080b4:	e7ed      	b.n	8008092 <HAL_I2C_Master_Seq_Transmit_DMA+0x4e>
      I2C_ConvertOtherXferOptions(hi2c);
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7fe fa77 	bl	80065aa <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 80080bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2bfe      	cmp	r3, #254	; 0xfe
 80080c2:	d827      	bhi.n	8008114 <HAL_I2C_Master_Seq_Transmit_DMA+0xd0>
        xfermode = hi2c->XferOptions;
 80080c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 80080c6:	4e36      	ldr	r6, [pc, #216]	; (80081a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x15c>)
    if (hi2c->XferSize > 0U)
 80080c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d04c      	beq.n	8008168 <HAL_I2C_Master_Seq_Transmit_DMA+0x124>
      if (hi2c->hdmatx != NULL)
 80080ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080d0:	b313      	cbz	r3, 8008118 <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80080d2:	4a34      	ldr	r2, [pc, #208]	; (80081a4 <HAL_I2C_Master_Seq_Transmit_DMA+0x160>)
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80080d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080d8:	4a33      	ldr	r2, [pc, #204]	; (80081a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x164>)
 80080da:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80080dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080de:	2300      	movs	r3, #0
 80080e0:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80080e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080e4:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80080e6:	6822      	ldr	r2, [r4, #0]
 80080e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80080ea:	3228      	adds	r2, #40	; 0x28
 80080ec:	4629      	mov	r1, r5
 80080ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80080f0:	f7fc ff3f 	bl	8004f72 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80080f4:	4605      	mov	r5, r0
 80080f6:	b1e8      	cbz	r0, 8008134 <HAL_I2C_Master_Seq_Transmit_DMA+0xf0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80080f8:	2320      	movs	r3, #32
 80080fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80080fe:	2200      	movs	r2, #0
 8008100:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008104:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008106:	f043 0310 	orr.w	r3, r3, #16
 800810a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800810c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8008110:	2501      	movs	r5, #1
 8008112:	e03d      	b.n	8008190 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8008114:	4e22      	ldr	r6, [pc, #136]	; (80081a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x15c>)
 8008116:	e7d7      	b.n	80080c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x84>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008118:	2320      	movs	r3, #32
 800811a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800811e:	2200      	movs	r2, #0
 8008120:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008124:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800812c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8008130:	2501      	movs	r5, #1
 8008132:	e02d      	b.n	8008190 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8008134:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008138:	9600      	str	r6, [sp, #0]
 800813a:	463b      	mov	r3, r7
 800813c:	4641      	mov	r1, r8
 800813e:	4620      	mov	r0, r4
 8008140:	f7fe f9ad 	bl	800649e <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8008144:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008146:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	b29b      	uxth	r3, r3
 800814c:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 800814e:	2300      	movs	r3, #0
 8008150:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008154:	2111      	movs	r1, #17
 8008156:	4620      	mov	r0, r4
 8008158:	f7fe f9bc 	bl	80064d4 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800815c:	6822      	ldr	r2, [r4, #0]
 800815e:	6813      	ldr	r3, [r2, #0]
 8008160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	e013      	b.n	8008190 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8008168:	4b10      	ldr	r3, [pc, #64]	; (80081ac <HAL_I2C_Master_Seq_Transmit_DMA+0x168>)
 800816a:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800816c:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x15c>)
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008174:	2200      	movs	r2, #0
 8008176:	4641      	mov	r1, r8
 8008178:	4620      	mov	r0, r4
 800817a:	f7fe f990 	bl	800649e <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 800817e:	2500      	movs	r5, #0
 8008180:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008184:	2101      	movs	r1, #1
 8008186:	4620      	mov	r0, r4
 8008188:	f7fe f9a4 	bl	80064d4 <I2C_Enable_IRQ>
 800818c:	e000      	b.n	8008190 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
    return HAL_BUSY;
 800818e:	2502      	movs	r5, #2
}
 8008190:	4628      	mov	r0, r5
 8008192:	b002      	add	sp, #8
 8008194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8008198:	2502      	movs	r5, #2
 800819a:	e7f9      	b.n	8008190 <HAL_I2C_Master_Seq_Transmit_DMA+0x14c>
 800819c:	08009235 	.word	0x08009235
 80081a0:	80002000 	.word	0x80002000
 80081a4:	08009381 	.word	0x08009381
 80081a8:	0800936b 	.word	0x0800936b
 80081ac:	08008fb5 	.word	0x08008fb5

080081b0 <HAL_I2C_Master_Seq_Receive_IT>:
{
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80081b4:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80081b8:	b2e4      	uxtb	r4, r4
 80081ba:	2c20      	cmp	r4, #32
 80081bc:	d149      	bne.n	8008252 <HAL_I2C_Master_Seq_Receive_IT+0xa2>
    __HAL_LOCK(hi2c);
 80081be:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80081c2:	2c01      	cmp	r4, #1
 80081c4:	d048      	beq.n	8008258 <HAL_I2C_Master_Seq_Receive_IT+0xa8>
 80081c6:	2401      	movs	r4, #1
 80081c8:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80081cc:	2422      	movs	r4, #34	; 0x22
 80081ce:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80081d2:	2410      	movs	r4, #16
 80081d4:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081d8:	2400      	movs	r4, #0
 80081da:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80081dc:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80081de:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80081e4:	4b1d      	ldr	r3, [pc, #116]	; (800825c <HAL_I2C_Master_Seq_Receive_IT+0xac>)
 80081e6:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	2bff      	cmp	r3, #255	; 0xff
 80081ee:	d910      	bls.n	8008212 <HAL_I2C_Master_Seq_Receive_IT+0x62>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081f0:	23ff      	movs	r3, #255	; 0xff
 80081f2:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80081f4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80081f8:	460d      	mov	r5, r1
 80081fa:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 80081fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80081fe:	2b12      	cmp	r3, #18
 8008200:	d10b      	bne.n	800821a <HAL_I2C_Master_Seq_Receive_IT+0x6a>
 8008202:	9b06      	ldr	r3, [sp, #24]
 8008204:	2baa      	cmp	r3, #170	; 0xaa
 8008206:	d008      	beq.n	800821a <HAL_I2C_Master_Seq_Receive_IT+0x6a>
 8008208:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800820c:	d005      	beq.n	800821a <HAL_I2C_Master_Seq_Receive_IT+0x6a>
      xferrequest = I2C_NO_STARTSTOP;
 800820e:	2300      	movs	r3, #0
 8008210:	e00c      	b.n	800822c <HAL_I2C_Master_Seq_Receive_IT+0x7c>
      hi2c->XferSize = hi2c->XferCount;
 8008212:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008214:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8008216:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8008218:	e7ee      	b.n	80081f8 <HAL_I2C_Master_Seq_Receive_IT+0x48>
      I2C_ConvertOtherXferOptions(hi2c);
 800821a:	4620      	mov	r0, r4
 800821c:	f7fe f9c5 	bl	80065aa <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 8008220:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008222:	b29b      	uxth	r3, r3
 8008224:	2bfe      	cmp	r3, #254	; 0xfe
 8008226:	d812      	bhi.n	800824e <HAL_I2C_Master_Seq_Receive_IT+0x9e>
        xfermode = hi2c->XferOptions;
 8008228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800822a:	4b0d      	ldr	r3, [pc, #52]	; (8008260 <HAL_I2C_Master_Seq_Receive_IT+0xb0>)
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800822c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4633      	mov	r3, r6
 8008234:	4629      	mov	r1, r5
 8008236:	4620      	mov	r0, r4
 8008238:	f7fe f931 	bl	800649e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 800823c:	2500      	movs	r5, #0
 800823e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008242:	2102      	movs	r1, #2
 8008244:	4620      	mov	r0, r4
 8008246:	f7fe f945 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 800824a:	4628      	mov	r0, r5
 800824c:	e002      	b.n	8008254 <HAL_I2C_Master_Seq_Receive_IT+0xa4>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800824e:	4b04      	ldr	r3, [pc, #16]	; (8008260 <HAL_I2C_Master_Seq_Receive_IT+0xb0>)
 8008250:	e7ec      	b.n	800822c <HAL_I2C_Master_Seq_Receive_IT+0x7c>
    return HAL_BUSY;
 8008252:	2002      	movs	r0, #2
}
 8008254:	b002      	add	sp, #8
 8008256:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 8008258:	2002      	movs	r0, #2
 800825a:	e7fb      	b.n	8008254 <HAL_I2C_Master_Seq_Receive_IT+0xa4>
 800825c:	08008fb5 	.word	0x08008fb5
 8008260:	80002400 	.word	0x80002400

08008264 <HAL_I2C_Master_Seq_Receive_DMA>:
{
 8008264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008268:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 800826a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800826e:	b2e4      	uxtb	r4, r4
 8008270:	2c20      	cmp	r4, #32
 8008272:	f040 809c 	bne.w	80083ae <HAL_I2C_Master_Seq_Receive_DMA+0x14a>
    __HAL_LOCK(hi2c);
 8008276:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800827a:	2c01      	cmp	r4, #1
 800827c:	f000 809c 	beq.w	80083b8 <HAL_I2C_Master_Seq_Receive_DMA+0x154>
 8008280:	2401      	movs	r4, #1
 8008282:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008286:	2422      	movs	r4, #34	; 0x22
 8008288:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800828c:	2410      	movs	r4, #16
 800828e:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008292:	2400      	movs	r4, #0
 8008294:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8008296:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008298:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800829e:	4b47      	ldr	r3, [pc, #284]	; (80083bc <HAL_I2C_Master_Seq_Receive_DMA+0x158>)
 80082a0:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2bff      	cmp	r3, #255	; 0xff
 80082a8:	d911      	bls.n	80082ce <HAL_I2C_Master_Seq_Receive_DMA+0x6a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082aa:	23ff      	movs	r3, #255	; 0xff
 80082ac:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80082ae:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 80082b2:	4615      	mov	r5, r2
 80082b4:	4688      	mov	r8, r1
 80082b6:	4604      	mov	r4, r0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 80082b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80082ba:	2b12      	cmp	r3, #18
 80082bc:	d10b      	bne.n	80082d6 <HAL_I2C_Master_Seq_Receive_DMA+0x72>
 80082be:	9b08      	ldr	r3, [sp, #32]
 80082c0:	2baa      	cmp	r3, #170	; 0xaa
 80082c2:	d008      	beq.n	80082d6 <HAL_I2C_Master_Seq_Receive_DMA+0x72>
 80082c4:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80082c8:	d005      	beq.n	80082d6 <HAL_I2C_Master_Seq_Receive_DMA+0x72>
      xferrequest = I2C_NO_STARTSTOP;
 80082ca:	2600      	movs	r6, #0
 80082cc:	e00c      	b.n	80082e8 <HAL_I2C_Master_Seq_Receive_DMA+0x84>
      hi2c->XferSize = hi2c->XferCount;
 80082ce:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80082d0:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 80082d2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80082d4:	e7ed      	b.n	80082b2 <HAL_I2C_Master_Seq_Receive_DMA+0x4e>
      I2C_ConvertOtherXferOptions(hi2c);
 80082d6:	4620      	mov	r0, r4
 80082d8:	f7fe f967 	bl	80065aa <I2C_ConvertOtherXferOptions>
      if (hi2c->XferCount < MAX_NBYTE_SIZE)
 80082dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2bfe      	cmp	r3, #254	; 0xfe
 80082e2:	d827      	bhi.n	8008334 <HAL_I2C_Master_Seq_Receive_DMA+0xd0>
        xfermode = hi2c->XferOptions;
 80082e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 80082e6:	4e36      	ldr	r6, [pc, #216]	; (80083c0 <HAL_I2C_Master_Seq_Receive_DMA+0x15c>)
    if (hi2c->XferSize > 0U)
 80082e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d04c      	beq.n	8008388 <HAL_I2C_Master_Seq_Receive_DMA+0x124>
      if (hi2c->hdmarx != NULL)
 80082ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082f0:	b313      	cbz	r3, 8008338 <HAL_I2C_Master_Seq_Receive_DMA+0xd4>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80082f2:	4a34      	ldr	r2, [pc, #208]	; (80083c4 <HAL_I2C_Master_Seq_Receive_DMA+0x160>)
 80082f4:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80082f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082f8:	4a33      	ldr	r2, [pc, #204]	; (80083c8 <HAL_I2C_Master_Seq_Receive_DMA+0x164>)
 80082fa:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80082fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80082fe:	2300      	movs	r3, #0
 8008300:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8008302:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008304:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8008306:	6821      	ldr	r1, [r4, #0]
 8008308:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800830a:	462a      	mov	r2, r5
 800830c:	3124      	adds	r1, #36	; 0x24
 800830e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008310:	f7fc fe2f 	bl	8004f72 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8008314:	4605      	mov	r5, r0
 8008316:	b1e8      	cbz	r0, 8008354 <HAL_I2C_Master_Seq_Receive_DMA+0xf0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008318:	2320      	movs	r3, #32
 800831a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800831e:	2200      	movs	r2, #0
 8008320:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008324:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008326:	f043 0310 	orr.w	r3, r3, #16
 800832a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800832c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8008330:	2501      	movs	r5, #1
 8008332:	e03d      	b.n	80083b0 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8008334:	4e22      	ldr	r6, [pc, #136]	; (80083c0 <HAL_I2C_Master_Seq_Receive_DMA+0x15c>)
 8008336:	e7d7      	b.n	80082e8 <HAL_I2C_Master_Seq_Receive_DMA+0x84>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008338:	2320      	movs	r3, #32
 800833a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800833e:	2200      	movs	r2, #0
 8008340:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008344:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800834a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800834c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8008350:	2501      	movs	r5, #1
 8008352:	e02d      	b.n	80083b0 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8008354:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008358:	9600      	str	r6, [sp, #0]
 800835a:	463b      	mov	r3, r7
 800835c:	4641      	mov	r1, r8
 800835e:	4620      	mov	r0, r4
 8008360:	f7fe f89d 	bl	800649e <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8008364:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008366:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	b29b      	uxth	r3, r3
 800836c:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 800836e:	2300      	movs	r3, #0
 8008370:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008374:	2111      	movs	r1, #17
 8008376:	4620      	mov	r0, r4
 8008378:	f7fe f8ac 	bl	80064d4 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	e013      	b.n	80083b0 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8008388:	4b10      	ldr	r3, [pc, #64]	; (80083cc <HAL_I2C_Master_Seq_Receive_DMA+0x168>)
 800838a:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800838c:	4b0c      	ldr	r3, [pc, #48]	; (80083c0 <HAL_I2C_Master_Seq_Receive_DMA+0x15c>)
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008394:	2200      	movs	r2, #0
 8008396:	4641      	mov	r1, r8
 8008398:	4620      	mov	r0, r4
 800839a:	f7fe f880 	bl	800649e <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 800839e:	2500      	movs	r5, #0
 80083a0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80083a4:	2101      	movs	r1, #1
 80083a6:	4620      	mov	r0, r4
 80083a8:	f7fe f894 	bl	80064d4 <I2C_Enable_IRQ>
 80083ac:	e000      	b.n	80083b0 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
    return HAL_BUSY;
 80083ae:	2502      	movs	r5, #2
}
 80083b0:	4628      	mov	r0, r5
 80083b2:	b002      	add	sp, #8
 80083b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 80083b8:	2502      	movs	r5, #2
 80083ba:	e7f9      	b.n	80083b0 <HAL_I2C_Master_Seq_Receive_DMA+0x14c>
 80083bc:	08009235 	.word	0x08009235
 80083c0:	80002400 	.word	0x80002400
 80083c4:	080093d7 	.word	0x080093d7
 80083c8:	0800936b 	.word	0x0800936b
 80083cc:	08008fb5 	.word	0x08008fb5

080083d0 <HAL_I2C_Slave_Seq_Transmit_IT>:
{
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083d2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80083d6:	f004 0428 	and.w	r4, r4, #40	; 0x28
 80083da:	2c28      	cmp	r4, #40	; 0x28
 80083dc:	d001      	beq.n	80083e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x12>
    return HAL_ERROR;
 80083de:	2001      	movs	r0, #1
}
 80083e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 80083e2:	b101      	cbz	r1, 80083e6 <HAL_I2C_Slave_Seq_Transmit_IT+0x16>
 80083e4:	b922      	cbnz	r2, 80083f0 <HAL_I2C_Slave_Seq_Transmit_IT+0x20>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80083e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083ea:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80083ec:	2001      	movs	r0, #1
 80083ee:	e7f7      	b.n	80083e0 <HAL_I2C_Slave_Seq_Transmit_IT+0x10>
 80083f0:	461f      	mov	r7, r3
 80083f2:	4616      	mov	r6, r2
 80083f4:	460d      	mov	r5, r1
 80083f6:	4604      	mov	r4, r0
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80083f8:	2105      	movs	r1, #5
 80083fa:	f7fe f8a5 	bl	8006548 <I2C_Disable_IRQ>
    __HAL_LOCK(hi2c);
 80083fe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008402:	2b01      	cmp	r3, #1
 8008404:	d046      	beq.n	8008494 <HAL_I2C_Slave_Seq_Transmit_IT+0xc4>
 8008406:	2301      	movs	r3, #1
 8008408:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800840c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b2a      	cmp	r3, #42	; 0x2a
 8008414:	d023      	beq.n	800845e <HAL_I2C_Slave_Seq_Transmit_IT+0x8e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8008416:	2329      	movs	r3, #41	; 0x29
 8008418:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800841c:	2320      	movs	r3, #32
 800841e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008422:	2300      	movs	r3, #0
 8008424:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8008426:	6822      	ldr	r2, [r4, #0]
 8008428:	6853      	ldr	r3, [r2, #4]
 800842a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800842e:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8008430:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008432:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008434:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008436:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008438:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800843a:	4b17      	ldr	r3, [pc, #92]	; (8008498 <HAL_I2C_Slave_Seq_Transmit_IT+0xc8>)
 800843c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	f412 3f80 	tst.w	r2, #65536	; 0x10000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008446:	bf1c      	itt	ne
 8008448:	2208      	movne	r2, #8
 800844a:	61da      	strne	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800844c:	2500      	movs	r5, #0
 800844e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8008452:	2105      	movs	r1, #5
 8008454:	4620      	mov	r0, r4
 8008456:	f7fe f83d 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 800845a:	4628      	mov	r0, r5
 800845c:	e7c0      	b.n	80083e0 <HAL_I2C_Slave_Seq_Transmit_IT+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800845e:	2102      	movs	r1, #2
 8008460:	4620      	mov	r0, r4
 8008462:	f7fe f871 	bl	8006548 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800846e:	d0d2      	beq.n	8008416 <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008476:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmarx != NULL)
 8008478:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0cb      	beq.n	8008416 <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800847e:	4a07      	ldr	r2, [pc, #28]	; (800849c <HAL_I2C_Slave_Seq_Transmit_IT+0xcc>)
 8008480:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008482:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008484:	f7fc fde7 	bl	8005056 <HAL_DMA_Abort_IT>
 8008488:	2800      	cmp	r0, #0
 800848a:	d0c4      	beq.n	8008416 <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800848c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800848e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008490:	4798      	blx	r3
 8008492:	e7c0      	b.n	8008416 <HAL_I2C_Slave_Seq_Transmit_IT+0x46>
    __HAL_LOCK(hi2c);
 8008494:	2002      	movs	r0, #2
 8008496:	e7a3      	b.n	80083e0 <HAL_I2C_Slave_Seq_Transmit_IT+0x10>
 8008498:	08008d8d 	.word	0x08008d8d
 800849c:	080094b3 	.word	0x080094b3

080084a0 <HAL_I2C_Slave_Seq_Transmit_DMA>:
{
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084a2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80084a6:	f005 0528 	and.w	r5, r5, #40	; 0x28
 80084aa:	2d28      	cmp	r5, #40	; 0x28
 80084ac:	d002      	beq.n	80084b4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x14>
    return HAL_ERROR;
 80084ae:	2501      	movs	r5, #1
}
 80084b0:	4628      	mov	r0, r5
 80084b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d05e      	beq.n	8008576 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd6>
 80084b8:	2a00      	cmp	r2, #0
 80084ba:	d05c      	beq.n	8008576 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd6>
    __HAL_LOCK(hi2c);
 80084bc:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80084c0:	2c01      	cmp	r4, #1
 80084c2:	f000 80af 	beq.w	8008624 <HAL_I2C_Slave_Seq_Transmit_DMA+0x184>
 80084c6:	461f      	mov	r7, r3
 80084c8:	4616      	mov	r6, r2
 80084ca:	460d      	mov	r5, r1
 80084cc:	4604      	mov	r4, r0
 80084ce:	2301      	movs	r3, #1
 80084d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80084d4:	2105      	movs	r1, #5
 80084d6:	f7fe f837 	bl	8006548 <I2C_Disable_IRQ>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80084da:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b2a      	cmp	r3, #42	; 0x2a
 80084e2:	d04d      	beq.n	8008580 <HAL_I2C_Slave_Seq_Transmit_DMA+0xe0>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80084e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b29      	cmp	r3, #41	; 0x29
 80084ec:	d064      	beq.n	80085b8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80084ee:	2329      	movs	r3, #41	; 0x29
 80084f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80084f4:	2320      	movs	r3, #32
 80084f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80084fe:	6822      	ldr	r2, [r4, #0]
 8008500:	6853      	ldr	r3, [r2, #4]
 8008502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008506:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8008508:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800850a:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800850c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800850e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008510:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8008512:	4b45      	ldr	r3, [pc, #276]	; (8008628 <HAL_I2C_Slave_Seq_Transmit_DMA+0x188>)
 8008514:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->hdmatx != NULL)
 8008516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008518:	2b00      	cmp	r3, #0
 800851a:	d064      	beq.n	80085e6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x146>
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 800851c:	4a43      	ldr	r2, [pc, #268]	; (800862c <HAL_I2C_Slave_Seq_Transmit_DMA+0x18c>)
 800851e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008522:	4a43      	ldr	r2, [pc, #268]	; (8008630 <HAL_I2C_Slave_Seq_Transmit_DMA+0x190>)
 8008524:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008526:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008528:	2300      	movs	r3, #0
 800852a:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 800852c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800852e:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008530:	6822      	ldr	r2, [r4, #0]
 8008532:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008534:	3228      	adds	r2, #40	; 0x28
 8008536:	4629      	mov	r1, r5
 8008538:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800853a:	f7fc fd1a 	bl	8004f72 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 800853e:	4605      	mov	r5, r0
 8008540:	2800      	cmp	r0, #0
 8008542:	d15e      	bne.n	8008602 <HAL_I2C_Slave_Seq_Transmit_DMA+0x162>
      hi2c->XferCount -= hi2c->XferSize;
 8008544:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008546:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008548:	1a9b      	subs	r3, r3, r2
 800854a:	b29b      	uxth	r3, r3
 800854c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	8523      	strh	r3, [r4, #40]	; 0x28
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800855a:	d160      	bne.n	800861e <HAL_I2C_Slave_Seq_Transmit_DMA+0x17e>
    __HAL_UNLOCK(hi2c);
 800855c:	2300      	movs	r3, #0
 800855e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008562:	2104      	movs	r1, #4
 8008564:	4620      	mov	r0, r4
 8008566:	f7fd ffb5 	bl	80064d4 <I2C_Enable_IRQ>
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800856a:	6822      	ldr	r2, [r4, #0]
 800856c:	6813      	ldr	r3, [r2, #0]
 800856e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008572:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8008574:	e79c      	b.n	80084b0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800857a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800857c:	2501      	movs	r5, #1
 800857e:	e797      	b.n	80084b0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008580:	2102      	movs	r1, #2
 8008582:	4620      	mov	r0, r4
 8008584:	f7fd ffe0 	bl	8006548 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008590:	d0ad      	beq.n	80084ee <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
        if (hi2c->hdmarx != NULL)
 8008592:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008594:	2a00      	cmp	r2, #0
 8008596:	d0aa      	beq.n	80084ee <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800859e:	601a      	str	r2, [r3, #0]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80085a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085a2:	4a24      	ldr	r2, [pc, #144]	; (8008634 <HAL_I2C_Slave_Seq_Transmit_DMA+0x194>)
 80085a4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80085a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80085a8:	f7fc fd55 	bl	8005056 <HAL_DMA_Abort_IT>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d09e      	beq.n	80084ee <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80085b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80085b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80085b4:	4798      	blx	r3
 80085b6:	e79a      	b.n	80084ee <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80085c0:	d095      	beq.n	80084ee <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80085c8:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 80085ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d08e      	beq.n	80084ee <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80085d0:	4a18      	ldr	r2, [pc, #96]	; (8008634 <HAL_I2C_Slave_Seq_Transmit_DMA+0x194>)
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80085d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80085d6:	f7fc fd3e 	bl	8005056 <HAL_DMA_Abort_IT>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d087      	beq.n	80084ee <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80085de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80085e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80085e2:	4798      	blx	r3
 80085e4:	e783      	b.n	80084ee <HAL_I2C_Slave_Seq_Transmit_DMA+0x4e>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80085e6:	2328      	movs	r3, #40	; 0x28
 80085e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80085ec:	2200      	movs	r2, #0
 80085ee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80085f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80085f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f8:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80085fa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80085fe:	2501      	movs	r5, #1
 8008600:	e756      	b.n	80084b0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8008602:	2328      	movs	r3, #40	; 0x28
 8008604:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008608:	2200      	movs	r2, #0
 800860a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800860e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008610:	f043 0310 	orr.w	r3, r3, #16
 8008614:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008616:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800861a:	2501      	movs	r5, #1
 800861c:	e748      	b.n	80084b0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800861e:	2208      	movs	r2, #8
 8008620:	61da      	str	r2, [r3, #28]
 8008622:	e79b      	b.n	800855c <HAL_I2C_Slave_Seq_Transmit_DMA+0xbc>
    __HAL_LOCK(hi2c);
 8008624:	2502      	movs	r5, #2
 8008626:	e743      	b.n	80084b0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10>
 8008628:	08009131 	.word	0x08009131
 800862c:	08008a2d 	.word	0x08008a2d
 8008630:	0800936b 	.word	0x0800936b
 8008634:	080094b3 	.word	0x080094b3

08008638 <HAL_I2C_Slave_Seq_Receive_IT>:
{
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800863a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800863e:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8008642:	2c28      	cmp	r4, #40	; 0x28
 8008644:	d001      	beq.n	800864a <HAL_I2C_Slave_Seq_Receive_IT+0x12>
    return HAL_ERROR;
 8008646:	2001      	movs	r0, #1
}
 8008648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 800864a:	b101      	cbz	r1, 800864e <HAL_I2C_Slave_Seq_Receive_IT+0x16>
 800864c:	b922      	cbnz	r2, 8008658 <HAL_I2C_Slave_Seq_Receive_IT+0x20>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800864e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008652:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8008654:	2001      	movs	r0, #1
 8008656:	e7f7      	b.n	8008648 <HAL_I2C_Slave_Seq_Receive_IT+0x10>
 8008658:	461f      	mov	r7, r3
 800865a:	4616      	mov	r6, r2
 800865c:	460d      	mov	r5, r1
 800865e:	4604      	mov	r4, r0
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008660:	2106      	movs	r1, #6
 8008662:	f7fd ff71 	bl	8006548 <I2C_Disable_IRQ>
    __HAL_LOCK(hi2c);
 8008666:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800866a:	2b01      	cmp	r3, #1
 800866c:	d046      	beq.n	80086fc <HAL_I2C_Slave_Seq_Receive_IT+0xc4>
 800866e:	2301      	movs	r3, #1
 8008670:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008674:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b29      	cmp	r3, #41	; 0x29
 800867c:	d023      	beq.n	80086c6 <HAL_I2C_Slave_Seq_Receive_IT+0x8e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800867e:	232a      	movs	r3, #42	; 0x2a
 8008680:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008684:	2320      	movs	r3, #32
 8008686:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800868a:	2300      	movs	r3, #0
 800868c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	6853      	ldr	r3, [r2, #4]
 8008692:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008696:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8008698:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800869a:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800869c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800869e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80086a0:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80086a2:	4b17      	ldr	r3, [pc, #92]	; (8008700 <HAL_I2C_Slave_Seq_Receive_IT+0xc8>)
 80086a4:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	699a      	ldr	r2, [r3, #24]
 80086aa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80086ae:	bf04      	itt	eq
 80086b0:	2208      	moveq	r2, #8
 80086b2:	61da      	streq	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80086b4:	2500      	movs	r5, #0
 80086b6:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80086ba:	2106      	movs	r1, #6
 80086bc:	4620      	mov	r0, r4
 80086be:	f7fd ff09 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 80086c2:	4628      	mov	r0, r5
 80086c4:	e7c0      	b.n	8008648 <HAL_I2C_Slave_Seq_Receive_IT+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80086c6:	2101      	movs	r1, #1
 80086c8:	4620      	mov	r0, r4
 80086ca:	f7fd ff3d 	bl	8006548 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80086d6:	d0d2      	beq.n	800867e <HAL_I2C_Slave_Seq_Receive_IT+0x46>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086de:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 80086e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0cb      	beq.n	800867e <HAL_I2C_Slave_Seq_Receive_IT+0x46>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80086e6:	4a07      	ldr	r2, [pc, #28]	; (8008704 <HAL_I2C_Slave_Seq_Receive_IT+0xcc>)
 80086e8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80086ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80086ec:	f7fc fcb3 	bl	8005056 <HAL_DMA_Abort_IT>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d0c4      	beq.n	800867e <HAL_I2C_Slave_Seq_Receive_IT+0x46>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80086f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80086f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80086f8:	4798      	blx	r3
 80086fa:	e7c0      	b.n	800867e <HAL_I2C_Slave_Seq_Receive_IT+0x46>
    __HAL_LOCK(hi2c);
 80086fc:	2002      	movs	r0, #2
 80086fe:	e7a3      	b.n	8008648 <HAL_I2C_Slave_Seq_Receive_IT+0x10>
 8008700:	08008d8d 	.word	0x08008d8d
 8008704:	080094b3 	.word	0x080094b3

08008708 <HAL_I2C_Slave_Seq_Receive_DMA>:
{
 8008708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800870a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800870e:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8008712:	2c28      	cmp	r4, #40	; 0x28
 8008714:	d002      	beq.n	800871c <HAL_I2C_Slave_Seq_Receive_DMA+0x14>
    return HAL_ERROR;
 8008716:	2501      	movs	r5, #1
}
 8008718:	4628      	mov	r0, r5
 800871a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 800871c:	b101      	cbz	r1, 8008720 <HAL_I2C_Slave_Seq_Receive_DMA+0x18>
 800871e:	b922      	cbnz	r2, 800872a <HAL_I2C_Slave_Seq_Receive_DMA+0x22>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008724:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8008726:	2501      	movs	r5, #1
 8008728:	e7f6      	b.n	8008718 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
 800872a:	461f      	mov	r7, r3
 800872c:	4616      	mov	r6, r2
 800872e:	460d      	mov	r5, r1
 8008730:	4604      	mov	r4, r0
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008732:	2106      	movs	r1, #6
 8008734:	f7fd ff08 	bl	8006548 <I2C_Disable_IRQ>
    __HAL_LOCK(hi2c);
 8008738:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800873c:	2b01      	cmp	r3, #1
 800873e:	f000 80a3 	beq.w	8008888 <HAL_I2C_Slave_Seq_Receive_DMA+0x180>
 8008742:	2301      	movs	r3, #1
 8008744:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008748:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b29      	cmp	r3, #41	; 0x29
 8008750:	d048      	beq.n	80087e4 <HAL_I2C_Slave_Seq_Receive_DMA+0xdc>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008752:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b2a      	cmp	r3, #42	; 0x2a
 800875a:	d05f      	beq.n	800881c <HAL_I2C_Slave_Seq_Receive_DMA+0x114>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800875c:	232a      	movs	r3, #42	; 0x2a
 800875e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008762:	2320      	movs	r3, #32
 8008764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008768:	2300      	movs	r3, #0
 800876a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800876c:	6822      	ldr	r2, [r4, #0]
 800876e:	6853      	ldr	r3, [r2, #4]
 8008770:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008774:	6053      	str	r3, [r2, #4]
    hi2c->pBuffPtr    = pData;
 8008776:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008778:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800877a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800877c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800877e:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8008780:	4b42      	ldr	r3, [pc, #264]	; (800888c <HAL_I2C_Slave_Seq_Receive_DMA+0x184>)
 8008782:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->hdmarx != NULL)
 8008784:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d05f      	beq.n	800884a <HAL_I2C_Slave_Seq_Receive_DMA+0x142>
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800878a:	4a41      	ldr	r2, [pc, #260]	; (8008890 <HAL_I2C_Slave_Seq_Receive_DMA+0x188>)
 800878c:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800878e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008790:	4a40      	ldr	r2, [pc, #256]	; (8008894 <HAL_I2C_Slave_Seq_Receive_DMA+0x18c>)
 8008792:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008794:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008796:	2300      	movs	r3, #0
 8008798:	6313      	str	r3, [r2, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800879a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800879c:	6393      	str	r3, [r2, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800879e:	6821      	ldr	r1, [r4, #0]
 80087a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80087a2:	462a      	mov	r2, r5
 80087a4:	3124      	adds	r1, #36	; 0x24
 80087a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80087a8:	f7fc fbe3 	bl	8004f72 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 80087ac:	4605      	mov	r5, r0
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d159      	bne.n	8008866 <HAL_I2C_Slave_Seq_Receive_DMA+0x15e>
      hi2c->XferCount -= hi2c->XferSize;
 80087b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80087b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	8523      	strh	r3, [r4, #40]	; 0x28
    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	699a      	ldr	r2, [r3, #24]
 80087c4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80087c8:	d05b      	beq.n	8008882 <HAL_I2C_Slave_Seq_Receive_DMA+0x17a>
    __HAL_UNLOCK(hi2c);
 80087ca:	2300      	movs	r3, #0
 80087cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80087d0:	2106      	movs	r1, #6
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7fd fe7e 	bl	80064d4 <I2C_Enable_IRQ>
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	6813      	ldr	r3, [r2, #0]
 80087dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e0:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80087e2:	e799      	b.n	8008718 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80087e4:	2101      	movs	r1, #1
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7fd feae 	bl	8006548 <I2C_Disable_IRQ>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80087f4:	d0b2      	beq.n	800875c <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
        if (hi2c->hdmatx != NULL)
 80087f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	d0af      	beq.n	800875c <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008802:	601a      	str	r2, [r3, #0]
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008804:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008806:	4a24      	ldr	r2, [pc, #144]	; (8008898 <HAL_I2C_Slave_Seq_Receive_DMA+0x190>)
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800880a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800880c:	f7fc fc23 	bl	8005056 <HAL_DMA_Abort_IT>
 8008810:	2800      	cmp	r0, #0
 8008812:	d0a3      	beq.n	800875c <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008814:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008816:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008818:	4798      	blx	r3
 800881a:	e79f      	b.n	800875c <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008824:	d09a      	beq.n	800875c <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800882c:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmarx != NULL)
 800882e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008830:	2b00      	cmp	r3, #0
 8008832:	d093      	beq.n	800875c <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008834:	4a18      	ldr	r2, [pc, #96]	; (8008898 <HAL_I2C_Slave_Seq_Receive_DMA+0x190>)
 8008836:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008838:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800883a:	f7fc fc0c 	bl	8005056 <HAL_DMA_Abort_IT>
 800883e:	2800      	cmp	r0, #0
 8008840:	d08c      	beq.n	800875c <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008842:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008844:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008846:	4798      	blx	r3
 8008848:	e788      	b.n	800875c <HAL_I2C_Slave_Seq_Receive_DMA+0x54>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800884a:	2328      	movs	r3, #40	; 0x28
 800884c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008850:	2200      	movs	r2, #0
 8008852:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008856:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885c:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800885e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008862:	2501      	movs	r5, #1
 8008864:	e758      	b.n	8008718 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8008866:	2328      	movs	r3, #40	; 0x28
 8008868:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800886c:	2200      	movs	r2, #0
 800886e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008872:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008874:	f043 0310 	orr.w	r3, r3, #16
 8008878:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800887a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800887e:	2501      	movs	r5, #1
 8008880:	e74a      	b.n	8008718 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008882:	2208      	movs	r2, #8
 8008884:	61da      	str	r2, [r3, #28]
 8008886:	e7a0      	b.n	80087ca <HAL_I2C_Slave_Seq_Receive_DMA+0xc2>
    __HAL_LOCK(hi2c);
 8008888:	2502      	movs	r5, #2
 800888a:	e745      	b.n	8008718 <HAL_I2C_Slave_Seq_Receive_DMA+0x10>
 800888c:	08009131 	.word	0x08009131
 8008890:	08008a49 	.word	0x08008a49
 8008894:	0800936b 	.word	0x0800936b
 8008898:	080094b3 	.word	0x080094b3

0800889c <HAL_I2C_EnableListen_IT>:
{
 800889c:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800889e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d001      	beq.n	80088ac <HAL_I2C_EnableListen_IT+0x10>
    return HAL_BUSY;
 80088a8:	2002      	movs	r0, #2
}
 80088aa:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80088ac:	2328      	movs	r3, #40	; 0x28
 80088ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80088b2:	4b03      	ldr	r3, [pc, #12]	; (80088c0 <HAL_I2C_EnableListen_IT+0x24>)
 80088b4:	6343      	str	r3, [r0, #52]	; 0x34
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80088b6:	2104      	movs	r1, #4
 80088b8:	f7fd fe0c 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 80088bc:	2000      	movs	r0, #0
 80088be:	e7f4      	b.n	80088aa <HAL_I2C_EnableListen_IT+0xe>
 80088c0:	08008d8d 	.word	0x08008d8d

080088c4 <HAL_I2C_DisableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80088c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b28      	cmp	r3, #40	; 0x28
 80088cc:	d001      	beq.n	80088d2 <HAL_I2C_DisableListen_IT+0xe>
    return HAL_BUSY;
 80088ce:	2002      	movs	r0, #2
}
 80088d0:	4770      	bx	lr
{
 80088d2:	b510      	push	{r4, lr}
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 80088d4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 80088d8:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80088dc:	f002 0203 	and.w	r2, r2, #3
 80088e0:	4313      	orrs	r3, r2
 80088e2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80088e4:	2320      	movs	r3, #32
 80088e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ea:	2400      	movs	r4, #0
 80088ec:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->XferISR = NULL;
 80088f0:	6344      	str	r4, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80088f2:	2104      	movs	r1, #4
 80088f4:	f7fd fe28 	bl	8006548 <I2C_Disable_IRQ>
    return HAL_OK;
 80088f8:	4620      	mov	r0, r4
}
 80088fa:	bd10      	pop	{r4, pc}

080088fc <HAL_I2C_Master_Abort_IT>:
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80088fc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b10      	cmp	r3, #16
 8008904:	d001      	beq.n	800890a <HAL_I2C_Master_Abort_IT+0xe>
    return HAL_ERROR;
 8008906:	2001      	movs	r0, #1
 8008908:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800890a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800890e:	2b01      	cmp	r3, #1
 8008910:	d023      	beq.n	800895a <HAL_I2C_Master_Abort_IT+0x5e>
{
 8008912:	b570      	push	{r4, r5, r6, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	460d      	mov	r5, r1
 8008918:	4604      	mov	r4, r0
    __HAL_LOCK(hi2c);
 800891a:	2601      	movs	r6, #1
 800891c:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008920:	2102      	movs	r1, #2
 8008922:	f7fd fe11 	bl	8006548 <I2C_Disable_IRQ>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008926:	4631      	mov	r1, r6
 8008928:	4620      	mov	r0, r4
 800892a:	f7fd fe0d 	bl	8006548 <I2C_Disable_IRQ>
    hi2c->State = HAL_I2C_STATE_ABORT;
 800892e:	2360      	movs	r3, #96	; 0x60
 8008930:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
 8008934:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <HAL_I2C_Master_Abort_IT+0x64>)
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800893c:	4632      	mov	r2, r6
 800893e:	4629      	mov	r1, r5
 8008940:	4620      	mov	r0, r4
 8008942:	f7fd fdac 	bl	800649e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8008946:	2500      	movs	r5, #0
 8008948:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800894c:	2112      	movs	r1, #18
 800894e:	4620      	mov	r0, r4
 8008950:	f7fd fdc0 	bl	80064d4 <I2C_Enable_IRQ>
    return HAL_OK;
 8008954:	4628      	mov	r0, r5
}
 8008956:	b002      	add	sp, #8
 8008958:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 800895a:	2002      	movs	r0, #2
}
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	80004000 	.word	0x80004000

08008964 <HAL_I2C_EV_IRQHandler>:
{
 8008964:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008966:	6803      	ldr	r3, [r0, #0]
 8008968:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800896a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800896c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800896e:	b103      	cbz	r3, 8008972 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8008970:	4798      	blx	r3
}
 8008972:	bd08      	pop	{r3, pc}

08008974 <HAL_I2C_MasterTxCpltCallback>:
}
 8008974:	4770      	bx	lr

08008976 <HAL_I2C_MasterRxCpltCallback>:
}
 8008976:	4770      	bx	lr

08008978 <I2C_ITMasterSeqCplt>:
{
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800897c:	2300      	movs	r3, #0
 800897e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008982:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b21      	cmp	r3, #33	; 0x21
 800898a:	d00f      	beq.n	80089ac <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 800898c:	2320      	movs	r3, #32
 800898e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008992:	2312      	movs	r3, #18
 8008994:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008996:	2500      	movs	r5, #0
 8008998:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800899a:	2102      	movs	r1, #2
 800899c:	f7fd fdd4 	bl	8006548 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80089a0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80089a4:	4620      	mov	r0, r4
 80089a6:	f7ff ffe6 	bl	8008976 <HAL_I2C_MasterRxCpltCallback>
}
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 80089ac:	2320      	movs	r3, #32
 80089ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80089b2:	2311      	movs	r3, #17
 80089b4:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80089b6:	2500      	movs	r5, #0
 80089b8:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80089ba:	2101      	movs	r1, #1
 80089bc:	f7fd fdc4 	bl	8006548 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80089c0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7ff ffd5 	bl	8008974 <HAL_I2C_MasterTxCpltCallback>
 80089ca:	e7ee      	b.n	80089aa <I2C_ITMasterSeqCplt+0x32>

080089cc <HAL_I2C_SlaveTxCpltCallback>:
}
 80089cc:	4770      	bx	lr

080089ce <HAL_I2C_SlaveRxCpltCallback>:
}
 80089ce:	4770      	bx	lr

080089d0 <I2C_ITSlaveSeqCplt>:
{
 80089d0:	b510      	push	{r4, lr}
 80089d2:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80089da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b29      	cmp	r3, #41	; 0x29
 80089e2:	d005      	beq.n	80089f0 <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80089e4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b2a      	cmp	r3, #42	; 0x2a
 80089ec:	d00f      	beq.n	8008a0e <I2C_ITSlaveSeqCplt+0x3e>
}
 80089ee:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80089f0:	2328      	movs	r3, #40	; 0x28
 80089f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80089f6:	2321      	movs	r3, #33	; 0x21
 80089f8:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80089fa:	2101      	movs	r1, #1
 80089fc:	f7fd fda4 	bl	8006548 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008a00:	2300      	movs	r3, #0
 8008a02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a06:	4620      	mov	r0, r4
 8008a08:	f7ff ffe0 	bl	80089cc <HAL_I2C_SlaveTxCpltCallback>
 8008a0c:	e7ef      	b.n	80089ee <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a0e:	2328      	movs	r3, #40	; 0x28
 8008a10:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008a14:	2322      	movs	r3, #34	; 0x22
 8008a16:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008a18:	2102      	movs	r1, #2
 8008a1a:	f7fd fd95 	bl	8006548 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7ff ffd2 	bl	80089ce <HAL_I2C_SlaveRxCpltCallback>
}
 8008a2a:	e7e0      	b.n	80089ee <I2C_ITSlaveSeqCplt+0x1e>

08008a2c <I2C_DMASlaveTransmitCplt>:
{
 8008a2c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a2e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008a32:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8008a36:	d106      	bne.n	8008a46 <I2C_DMASlaveTransmitCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008a38:	6802      	ldr	r2, [r0, #0]
 8008a3a:	6813      	ldr	r3, [r2, #0]
 8008a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a40:	6013      	str	r3, [r2, #0]
    I2C_ITSlaveSeqCplt(hi2c);
 8008a42:	f7ff ffc5 	bl	80089d0 <I2C_ITSlaveSeqCplt>
}
 8008a46:	bd08      	pop	{r3, pc}

08008a48 <I2C_DMASlaveReceiveCplt>:
{
 8008a48:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a4c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
 8008a4e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	b94b      	cbnz	r3, 8008a6a <I2C_DMASlaveReceiveCplt+0x22>
 8008a56:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008a5a:	d006      	beq.n	8008a6a <I2C_DMASlaveReceiveCplt+0x22>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a5c:	6802      	ldr	r2, [r0, #0]
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a64:	6013      	str	r3, [r2, #0]
    I2C_ITSlaveSeqCplt(hi2c);
 8008a66:	f7ff ffb3 	bl	80089d0 <I2C_ITSlaveSeqCplt>
}
 8008a6a:	bd08      	pop	{r3, pc}

08008a6c <HAL_I2C_AddrCallback>:
}
 8008a6c:	4770      	bx	lr

08008a6e <I2C_ITAddrCplt>:
{
 8008a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a70:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008a74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a78:	2b28      	cmp	r3, #40	; 0x28
 8008a7a:	d006      	beq.n	8008a8a <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008a7c:	6803      	ldr	r3, [r0, #0]
 8008a7e:	2208      	movs	r2, #8
 8008a80:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008a82:	2300      	movs	r3, #0
 8008a84:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8008a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a8a:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8008a8c:	6803      	ldr	r3, [r0, #0]
 8008a8e:	699e      	ldr	r6, [r3, #24]
 8008a90:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	0c12      	lsrs	r2, r2, #16
 8008a98:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008a9c:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008a9e:	68df      	ldr	r7, [r3, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008aa0:	68c1      	ldr	r1, [r0, #12]
 8008aa2:	2902      	cmp	r1, #2
 8008aa4:	d124      	bne.n	8008af0 <I2C_ITAddrCplt+0x82>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008aa6:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008aaa:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8008aae:	f015 0f06 	tst.w	r5, #6
 8008ab2:	d110      	bne.n	8008ad6 <I2C_ITAddrCplt+0x68>
        hi2c->AddrEventCount++;
 8008ab4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008ab6:	3101      	adds	r1, #1
 8008ab8:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008aba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008abc:	2902      	cmp	r1, #2
 8008abe:	d1e3      	bne.n	8008a88 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ac4:	2008      	movs	r0, #8
 8008ac6:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8008ac8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008acc:	4631      	mov	r1, r6
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f7ff ffcc 	bl	8008a6c <HAL_I2C_AddrCallback>
 8008ad4:	e7d8      	b.n	8008a88 <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ad6:	2104      	movs	r1, #4
 8008ad8:	f7fd fd36 	bl	8006548 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008adc:	2300      	movs	r3, #0
 8008ade:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ae2:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f7ff ffbf 	bl	8008a6c <HAL_I2C_AddrCallback>
 8008aee:	e7cb      	b.n	8008a88 <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008af0:	2104      	movs	r1, #4
 8008af2:	f7fd fd29 	bl	8006548 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008af6:	2300      	movs	r3, #0
 8008af8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008afc:	462a      	mov	r2, r5
 8008afe:	4631      	mov	r1, r6
 8008b00:	4620      	mov	r0, r4
 8008b02:	f7ff ffb3 	bl	8008a6c <HAL_I2C_AddrCallback>
 8008b06:	e7bf      	b.n	8008a88 <I2C_ITAddrCplt+0x1a>

08008b08 <HAL_I2C_ListenCpltCallback>:
}
 8008b08:	4770      	bx	lr
	...

08008b0c <I2C_ITListenCplt>:
{
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b10:	4b16      	ldr	r3, [pc, #88]	; (8008b6c <I2C_ITListenCplt+0x60>)
 8008b12:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b1e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008b22:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008b24:	f011 0f04 	tst.w	r1, #4
 8008b28:	d012      	beq.n	8008b50 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b2a:	6803      	ldr	r3, [r0, #0]
 8008b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008b32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b34:	3301      	adds	r3, #1
 8008b36:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8008b38:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008b3a:	b14b      	cbz	r3, 8008b50 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8008b40:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008b4a:	f043 0304 	orr.w	r3, r3, #4
 8008b4e:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b50:	2107      	movs	r1, #7
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7fd fcf8 	bl	8006548 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	2210      	movs	r2, #16
 8008b5c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8008b64:	4620      	mov	r0, r4
 8008b66:	f7ff ffcf 	bl	8008b08 <HAL_I2C_ListenCpltCallback>
}
 8008b6a:	bd10      	pop	{r4, pc}
 8008b6c:	ffff0000 	.word	0xffff0000

08008b70 <HAL_I2C_MemTxCpltCallback>:
}
 8008b70:	4770      	bx	lr

08008b72 <HAL_I2C_MemRxCpltCallback>:
}
 8008b72:	4770      	bx	lr

08008b74 <HAL_I2C_ErrorCallback>:
}
 8008b74:	4770      	bx	lr

08008b76 <HAL_I2C_AbortCpltCallback>:
}
 8008b76:	4770      	bx	lr

08008b78 <I2C_ITError>:
{
 8008b78:	b510      	push	{r4, lr}
 8008b7a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008b7c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b80:	2200      	movs	r2, #0
 8008b82:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b86:	4836      	ldr	r0, [pc, #216]	; (8008c60 <I2C_ITError+0xe8>)
 8008b88:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008b8a:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8008b8c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008b8e:	4311      	orrs	r1, r2
 8008b90:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008b92:	3b28      	subs	r3, #40	; 0x28
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d822      	bhi.n	8008be0 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b9a:	2103      	movs	r1, #3
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7fd fcd3 	bl	8006548 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ba2:	2328      	movs	r3, #40	; 0x28
 8008ba4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008bac:	4b2d      	ldr	r3, [pc, #180]	; (8008c64 <I2C_ITError+0xec>)
 8008bae:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008bb8:	d022      	beq.n	8008c00 <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bc0:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8008bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bc4:	b15b      	cbz	r3, 8008bde <I2C_ITError+0x66>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008bc6:	4a28      	ldr	r2, [pc, #160]	; (8008c68 <I2C_ITError+0xf0>)
 8008bc8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008bd0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008bd2:	f7fc fa40 	bl	8005056 <HAL_DMA_Abort_IT>
 8008bd6:	b110      	cbz	r0, 8008bde <I2C_ITError+0x66>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008bd8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008bda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008bdc:	4798      	blx	r3
}
 8008bde:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008be0:	2107      	movs	r1, #7
 8008be2:	4620      	mov	r0, r4
 8008be4:	f7fd fcb0 	bl	8006548 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008be8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8008bf0:	bf1c      	itt	ne
 8008bf2:	2320      	movne	r3, #32
 8008bf4:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8008bfe:	e7d7      	b.n	8008bb0 <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008c06:	d014      	beq.n	8008c32 <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c0e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8008c10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0e3      	beq.n	8008bde <I2C_ITError+0x66>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008c16:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <I2C_ITError+0xf0>)
 8008c18:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008c20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008c22:	f7fc fa18 	bl	8005056 <HAL_DMA_Abort_IT>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d0d9      	beq.n	8008bde <I2C_ITError+0x66>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008c2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008c2e:	4798      	blx	r3
 8008c30:	e7d5      	b.n	8008bde <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008c32:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b60      	cmp	r3, #96	; 0x60
 8008c3a:	d006      	beq.n	8008c4a <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008c42:	4620      	mov	r0, r4
 8008c44:	f7ff ff96 	bl	8008b74 <HAL_I2C_ErrorCallback>
}
 8008c48:	e7c9      	b.n	8008bde <I2C_ITError+0x66>
    hi2c->State = HAL_I2C_STATE_READY;
 8008c4a:	2320      	movs	r3, #32
 8008c4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008c50:	2300      	movs	r3, #0
 8008c52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c56:	4620      	mov	r0, r4
 8008c58:	f7ff ff8d 	bl	8008b76 <HAL_I2C_AbortCpltCallback>
 8008c5c:	e7bf      	b.n	8008bde <I2C_ITError+0x66>
 8008c5e:	bf00      	nop
 8008c60:	ffff0000 	.word	0xffff0000
 8008c64:	08008d8d 	.word	0x08008d8d
 8008c68:	080094b3 	.word	0x080094b3

08008c6c <I2C_ITSlaveCplt>:
{
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	4604      	mov	r4, r0
 8008c70:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008c72:	6803      	ldr	r3, [r0, #0]
 8008c74:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c76:	2220      	movs	r2, #32
 8008c78:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008c7a:	2107      	movs	r1, #7
 8008c7c:	f7fd fc64 	bl	8006548 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008c80:	6822      	ldr	r2, [r4, #0]
 8008c82:	6853      	ldr	r3, [r2, #4]
 8008c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c88:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8008c8a:	6822      	ldr	r2, [r4, #0]
 8008c8c:	6853      	ldr	r3, [r2, #4]
 8008c8e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8008c92:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8008c96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8008c9a:	f023 0301 	bic.w	r3, r3, #1
 8008c9e:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f7fd fbeb 	bl	800647c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008ca6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8008caa:	d03a      	beq.n	8008d22 <I2C_ITSlaveCplt+0xb6>
    if (hi2c->hdmatx != NULL)
 8008cac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008cae:	b11b      	cbz	r3, 8008cb8 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008cb8:	f015 0f04 	tst.w	r5, #4
 8008cbc:	d010      	beq.n	8008ce0 <I2C_ITSlaveCplt+0x74>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008cbe:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ccc:	3301      	adds	r3, #1
 8008cce:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8008cd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008cd2:	b12b      	cbz	r3, 8008ce0 <I2C_ITSlaveCplt+0x74>
      hi2c->XferSize--;
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008cd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8008ce0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	b11b      	cbz	r3, 8008cee <I2C_ITSlaveCplt+0x82>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ce6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008ce8:	f043 0304 	orr.w	r3, r3, #4
 8008cec:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008cf6:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008cf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008cfa:	b9eb      	cbnz	r3, 8008d38 <I2C_ITSlaveCplt+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008cfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d02:	d127      	bne.n	8008d54 <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d04:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b22      	cmp	r3, #34	; 0x22
 8008d0c:	d031      	beq.n	8008d72 <I2C_ITSlaveCplt+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8008d0e:	2320      	movs	r3, #32
 8008d10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008d14:	2300      	movs	r3, #0
 8008d16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7ff fe56 	bl	80089cc <HAL_I2C_SlaveTxCpltCallback>
}
 8008d20:	e026      	b.n	8008d70 <I2C_ITSlaveCplt+0x104>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008d22:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8008d26:	d0c7      	beq.n	8008cb8 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8008d28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0c4      	beq.n	8008cb8 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008d36:	e7bf      	b.n	8008cb8 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d38:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7ff ff1c 	bl	8008b78 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008d40:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b28      	cmp	r3, #40	; 0x28
 8008d48:	d112      	bne.n	8008d70 <I2C_ITSlaveCplt+0x104>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f7ff fedd 	bl	8008b0c <I2C_ITListenCplt>
 8008d52:	e00d      	b.n	8008d70 <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 8008d54:	4620      	mov	r0, r4
 8008d56:	f7ff fe3b 	bl	80089d0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <I2C_ITSlaveCplt+0x11c>)
 8008d5c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008d5e:	2320      	movs	r3, #32
 8008d60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008d64:	2300      	movs	r3, #0
 8008d66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f7ff fecc 	bl	8008b08 <HAL_I2C_ListenCpltCallback>
}
 8008d70:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8008d72:	2320      	movs	r3, #32
 8008d74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7ff fe25 	bl	80089ce <HAL_I2C_SlaveRxCpltCallback>
 8008d84:	e7f4      	b.n	8008d70 <I2C_ITSlaveCplt+0x104>
 8008d86:	bf00      	nop
 8008d88:	ffff0000 	.word	0xffff0000

08008d8c <I2C_Slave_ISR_IT>:
{
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	4616      	mov	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 8008d90:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8008d92:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	f000 8099 	beq.w	8008ece <I2C_Slave_ISR_IT+0x142>
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	2301      	movs	r3, #1
 8008da2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008da6:	f011 0f10 	tst.w	r1, #16
 8008daa:	d03d      	beq.n	8008e28 <I2C_Slave_ISR_IT+0x9c>
 8008dac:	f016 0f10 	tst.w	r6, #16
 8008db0:	d03a      	beq.n	8008e28 <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 8008db2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	bb4b      	cbnz	r3, 8008e0c <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008db8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b28      	cmp	r3, #40	; 0x28
 8008dc0:	d011      	beq.n	8008de6 <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008dc2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b29      	cmp	r3, #41	; 0x29
 8008dca:	d012      	beq.n	8008df2 <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	2210      	movs	r2, #16
 8008dd0:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008dd2:	f015 0f20 	tst.w	r5, #32
 8008dd6:	d002      	beq.n	8008dde <I2C_Slave_ISR_IT+0x52>
 8008dd8:	f016 0f20 	tst.w	r6, #32
 8008ddc:	d172      	bne.n	8008ec4 <I2C_Slave_ISR_IT+0x138>
  __HAL_UNLOCK(hi2c);
 8008dde:	2000      	movs	r0, #0
 8008de0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8008de4:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008de6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8008dea:	d1ea      	bne.n	8008dc2 <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008dec:	f7ff fe8e 	bl	8008b0c <I2C_ITListenCplt>
 8008df0:	e7ef      	b.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008df2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008df6:	d0e9      	beq.n	8008dcc <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	2210      	movs	r2, #16
 8008dfc:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f7fd fb3c 	bl	800647c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8008e04:	4620      	mov	r0, r4
 8008e06:	f7ff fde3 	bl	80089d0 <I2C_ITSlaveSeqCplt>
 8008e0a:	e7e2      	b.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e0c:	6803      	ldr	r3, [r0, #0]
 8008e0e:	2110      	movs	r1, #16
 8008e10:	61d9      	str	r1, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008e14:	f043 0304 	orr.w	r3, r3, #4
 8008e18:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e1a:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 8008e1e:	d1d8      	bne.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e20:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008e22:	f7ff fea9 	bl	8008b78 <I2C_ITError>
 8008e26:	e7d4      	b.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008e28:	f015 0f04 	tst.w	r5, #4
 8008e2c:	d020      	beq.n	8008e70 <I2C_Slave_ISR_IT+0xe4>
 8008e2e:	f016 0f04 	tst.w	r6, #4
 8008e32:	d01d      	beq.n	8008e70 <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount > 0U)
 8008e34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	b17b      	cbz	r3, 8008e5a <I2C_Slave_ISR_IT+0xce>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8008e3a:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e44:	7019      	strb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8008e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e48:	3301      	adds	r3, #1
 8008e4a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8008e4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008e52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8008e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1b7      	bne.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
 8008e62:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008e66:	d0b4      	beq.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSeqCplt(hi2c);
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f7ff fdb1 	bl	80089d0 <I2C_ITSlaveSeqCplt>
 8008e6e:	e7b0      	b.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008e70:	f015 0f08 	tst.w	r5, #8
 8008e74:	d002      	beq.n	8008e7c <I2C_Slave_ISR_IT+0xf0>
 8008e76:	f016 0f08 	tst.w	r6, #8
 8008e7a:	d117      	bne.n	8008eac <I2C_Slave_ISR_IT+0x120>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008e7c:	f015 0f02 	tst.w	r5, #2
 8008e80:	d0a7      	beq.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
 8008e82:	f016 0f02 	tst.w	r6, #2
 8008e86:	d0a4      	beq.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 8008e88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	b19b      	cbz	r3, 8008eb6 <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e98:	3301      	adds	r3, #1
 8008e9a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008e9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008ea4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	8523      	strh	r3, [r4, #40]	; 0x28
 8008eaa:	e792      	b.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008eac:	4629      	mov	r1, r5
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7ff fddd 	bl	8008a6e <I2C_ITAddrCplt>
 8008eb4:	e78d      	b.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008eb6:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 8008eba:	d18a      	bne.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSeqCplt(hi2c);
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f7ff fd87 	bl	80089d0 <I2C_ITSlaveSeqCplt>
 8008ec2:	e786      	b.n	8008dd2 <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f7ff fed0 	bl	8008c6c <I2C_ITSlaveCplt>
 8008ecc:	e787      	b.n	8008dde <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8008ece:	2002      	movs	r0, #2
 8008ed0:	e788      	b.n	8008de4 <I2C_Slave_ISR_IT+0x58>

08008ed2 <I2C_ITMasterCplt>:
{
 8008ed2:	b510      	push	{r4, lr}
 8008ed4:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ed6:	6803      	ldr	r3, [r0, #0]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8008edc:	6802      	ldr	r2, [r0, #0]
 8008ede:	6853      	ldr	r3, [r2, #4]
 8008ee0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8008ee4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8008ee8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8008eec:	f023 0301 	bic.w	r3, r3, #1
 8008ef0:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8008ef6:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ef8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8008efc:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8008efe:	f011 0f10 	tst.w	r1, #16
 8008f02:	d006      	beq.n	8008f12 <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f04:	6803      	ldr	r3, [r0, #0]
 8008f06:	2210      	movs	r2, #16
 8008f08:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008f0c:	f043 0304 	orr.w	r3, r3, #4
 8008f10:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8008f12:	4620      	mov	r0, r4
 8008f14:	f7fd fab2 	bl	800647c <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008f18:	2103      	movs	r1, #3
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f7fd fb14 	bl	8006548 <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 8008f20:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008f22:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b60      	cmp	r3, #96	; 0x60
 8008f2a:	d01b      	beq.n	8008f64 <I2C_ITMasterCplt+0x92>
 8008f2c:	b9d2      	cbnz	r2, 8008f64 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f2e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b21      	cmp	r3, #33	; 0x21
 8008f36:	d01a      	beq.n	8008f6e <I2C_ITMasterCplt+0x9c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f38:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b22      	cmp	r3, #34	; 0x22
 8008f40:	d114      	bne.n	8008f6c <I2C_ITMasterCplt+0x9a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008f42:	2320      	movs	r3, #32
 8008f44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f48:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b40      	cmp	r3, #64	; 0x40
 8008f50:	d027      	beq.n	8008fa2 <I2C_ITMasterCplt+0xd0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008f58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f7ff fd0a 	bl	8008976 <HAL_I2C_MasterRxCpltCallback>
}
 8008f62:	e003      	b.n	8008f6c <I2C_ITMasterCplt+0x9a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f64:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff fe06 	bl	8008b78 <I2C_ITError>
}
 8008f6c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8008f6e:	2320      	movs	r3, #32
 8008f70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f74:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b40      	cmp	r3, #64	; 0x40
 8008f7c:	d008      	beq.n	8008f90 <I2C_ITMasterCplt+0xbe>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008f84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f7ff fcf3 	bl	8008974 <HAL_I2C_MasterTxCpltCallback>
 8008f8e:	e7ed      	b.n	8008f6c <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f90:	2300      	movs	r3, #0
 8008f92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008f96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f7ff fde8 	bl	8008b70 <HAL_I2C_MemTxCpltCallback>
 8008fa0:	e7e4      	b.n	8008f6c <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008fa8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008fac:	4620      	mov	r0, r4
 8008fae:	f7ff fde0 	bl	8008b72 <HAL_I2C_MemRxCpltCallback>
 8008fb2:	e7db      	b.n	8008f6c <I2C_ITMasterCplt+0x9a>

08008fb4 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 8008fb4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	f000 80b7 	beq.w	800912c <I2C_Master_ISR_IT+0x178>
{
 8008fbe:	b570      	push	{r4, r5, r6, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008fce:	f011 0f10 	tst.w	r1, #16
 8008fd2:	d002      	beq.n	8008fda <I2C_Master_ISR_IT+0x26>
 8008fd4:	f012 0f10 	tst.w	r2, #16
 8008fd8:	d121      	bne.n	800901e <I2C_Master_ISR_IT+0x6a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008fda:	f015 0f04 	tst.w	r5, #4
 8008fde:	d028      	beq.n	8009032 <I2C_Master_ISR_IT+0x7e>
 8008fe0:	f016 0f04 	tst.w	r6, #4
 8008fe4:	d025      	beq.n	8009032 <I2C_Master_ISR_IT+0x7e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008fe6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8008ff8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8008ffe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009000:	3b01      	subs	r3, #1
 8009002:	b29b      	uxth	r3, r3
 8009004:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009006:	f015 0f20 	tst.w	r5, #32
 800900a:	d003      	beq.n	8009014 <I2C_Master_ISR_IT+0x60>
 800900c:	f016 0f20 	tst.w	r6, #32
 8009010:	f040 8087 	bne.w	8009122 <I2C_Master_ISR_IT+0x16e>
  __HAL_UNLOCK(hi2c);
 8009014:	2000      	movs	r0, #0
 8009016:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800901a:	b002      	add	sp, #8
 800901c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800901e:	6803      	ldr	r3, [r0, #0]
 8009020:	2210      	movs	r2, #16
 8009022:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009024:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009026:	f043 0304 	orr.w	r3, r3, #4
 800902a:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 800902c:	f7fd fa26 	bl	800647c <I2C_Flush_TXDR>
 8009030:	e7e9      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009032:	f015 0f02 	tst.w	r5, #2
 8009036:	d011      	beq.n	800905c <I2C_Master_ISR_IT+0xa8>
 8009038:	f016 0f02 	tst.w	r6, #2
 800903c:	d00e      	beq.n	800905c <I2C_Master_ISR_IT+0xa8>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009042:	7812      	ldrb	r2, [r2, #0]
 8009044:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 8009046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009048:	3301      	adds	r3, #1
 800904a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 800904c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800904e:	3b01      	subs	r3, #1
 8009050:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8009052:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009054:	3b01      	subs	r3, #1
 8009056:	b29b      	uxth	r3, r3
 8009058:	8563      	strh	r3, [r4, #42]	; 0x2a
 800905a:	e7d4      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800905c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8009060:	d03f      	beq.n	80090e2 <I2C_Master_ISR_IT+0x12e>
 8009062:	f016 0f40 	tst.w	r6, #64	; 0x40
 8009066:	d0ce      	beq.n	8009006 <I2C_Master_ISR_IT+0x52>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009068:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800906a:	b29b      	uxth	r3, r3
 800906c:	b35b      	cbz	r3, 80090c6 <I2C_Master_ISR_IT+0x112>
 800906e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009070:	bb4b      	cbnz	r3, 80090c6 <I2C_Master_ISR_IT+0x112>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	6859      	ldr	r1, [r3, #4]
 8009076:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800907a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800907c:	b29b      	uxth	r3, r3
 800907e:	2bff      	cmp	r3, #255	; 0xff
 8009080:	d80e      	bhi.n	80090a0 <I2C_Master_ISR_IT+0xec>
        hi2c->XferSize = hi2c->XferCount;
 8009082:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009084:	b292      	uxth	r2, r2
 8009086:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009088:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800908a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800908e:	d011      	beq.n	80090b4 <I2C_Master_ISR_IT+0x100>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8009090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009092:	2000      	movs	r0, #0
 8009094:	9000      	str	r0, [sp, #0]
 8009096:	b2d2      	uxtb	r2, r2
 8009098:	4620      	mov	r0, r4
 800909a:	f7fd fa00 	bl	800649e <I2C_TransferConfig>
 800909e:	e7b2      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80090a4:	2300      	movs	r3, #0
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090ac:	4620      	mov	r0, r4
 80090ae:	f7fd f9f6 	bl	800649e <I2C_TransferConfig>
 80090b2:	e7a8      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80090b4:	2300      	movs	r3, #0
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090bc:	b2d2      	uxtb	r2, r2
 80090be:	4620      	mov	r0, r4
 80090c0:	f7fd f9ed 	bl	800649e <I2C_TransferConfig>
 80090c4:	e79f      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80090ce:	d103      	bne.n	80090d8 <I2C_Master_ISR_IT+0x124>
        I2C_ITMasterSeqCplt(hi2c);
 80090d0:	4620      	mov	r0, r4
 80090d2:	f7ff fc51 	bl	8008978 <I2C_ITMasterSeqCplt>
 80090d6:	e796      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80090d8:	2140      	movs	r1, #64	; 0x40
 80090da:	4620      	mov	r0, r4
 80090dc:	f7ff fd4c 	bl	8008b78 <I2C_ITError>
 80090e0:	e791      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80090e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090e6:	d08e      	beq.n	8009006 <I2C_Master_ISR_IT+0x52>
 80090e8:	f016 0f40 	tst.w	r6, #64	; 0x40
 80090ec:	d08b      	beq.n	8009006 <I2C_Master_ISR_IT+0x52>
    if (hi2c->XferCount == 0U)
 80090ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	b98b      	cbnz	r3, 8009118 <I2C_Master_ISR_IT+0x164>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80090fc:	d183      	bne.n	8009006 <I2C_Master_ISR_IT+0x52>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80090fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009100:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8009104:	d104      	bne.n	8009110 <I2C_Master_ISR_IT+0x15c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800910c:	605a      	str	r2, [r3, #4]
 800910e:	e77a      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
          I2C_ITMasterSeqCplt(hi2c);
 8009110:	4620      	mov	r0, r4
 8009112:	f7ff fc31 	bl	8008978 <I2C_ITMasterSeqCplt>
 8009116:	e776      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009118:	2140      	movs	r1, #64	; 0x40
 800911a:	4620      	mov	r0, r4
 800911c:	f7ff fd2c 	bl	8008b78 <I2C_ITError>
 8009120:	e771      	b.n	8009006 <I2C_Master_ISR_IT+0x52>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009122:	4629      	mov	r1, r5
 8009124:	4620      	mov	r0, r4
 8009126:	f7ff fed4 	bl	8008ed2 <I2C_ITMasterCplt>
 800912a:	e773      	b.n	8009014 <I2C_Master_ISR_IT+0x60>
  __HAL_LOCK(hi2c);
 800912c:	2002      	movs	r0, #2
}
 800912e:	4770      	bx	lr

08009130 <I2C_Slave_ISR_DMA>:
{
 8009130:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8009132:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8009134:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009138:	2b01      	cmp	r3, #1
 800913a:	d065      	beq.n	8009208 <I2C_Slave_ISR_DMA+0xd8>
 800913c:	4604      	mov	r4, r0
 800913e:	2301      	movs	r3, #1
 8009140:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009144:	f011 0f10 	tst.w	r1, #16
 8009148:	d046      	beq.n	80091d8 <I2C_Slave_ISR_DMA+0xa8>
 800914a:	f012 0f10 	tst.w	r2, #16
 800914e:	d043      	beq.n	80091d8 <I2C_Slave_ISR_DMA+0xa8>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009150:	0b93      	lsrs	r3, r2, #14
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009152:	0bd2      	lsrs	r2, r2, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009154:	ea43 0002 	orr.w	r0, r3, r2
 8009158:	f010 0f01 	tst.w	r0, #1
 800915c:	d038      	beq.n	80091d0 <I2C_Slave_ISR_DMA+0xa0>
      if (hi2c->hdmarx != NULL)
 800915e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009160:	2800      	cmp	r0, #0
 8009162:	d053      	beq.n	800920c <I2C_Slave_ISR_DMA+0xdc>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009164:	f012 0f01 	tst.w	r2, #1
 8009168:	d050      	beq.n	800920c <I2C_Slave_ISR_DMA+0xdc>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800916a:	6802      	ldr	r2, [r0, #0]
 800916c:	6852      	ldr	r2, [r2, #4]
 800916e:	fab2 f282 	clz	r2, r2
 8009172:	0952      	lsrs	r2, r2, #5
      if (hi2c->hdmatx != NULL)
 8009174:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009176:	b138      	cbz	r0, 8009188 <I2C_Slave_ISR_DMA+0x58>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009178:	f013 0f01 	tst.w	r3, #1
 800917c:	d004      	beq.n	8009188 <I2C_Slave_ISR_DMA+0x58>
 800917e:	e000      	b.n	8009182 <I2C_Slave_ISR_DMA+0x52>
 8009180:	2200      	movs	r2, #0
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009182:	6803      	ldr	r3, [r0, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b10b      	cbz	r3, 800918c <I2C_Slave_ISR_DMA+0x5c>
      if (treatdmanack == 1U)
 8009188:	2a00      	cmp	r2, #0
 800918a:	d044      	beq.n	8009216 <I2C_Slave_ISR_DMA+0xe6>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800918c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b28      	cmp	r3, #40	; 0x28
 8009194:	d008      	beq.n	80091a8 <I2C_Slave_ISR_DMA+0x78>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009196:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b29      	cmp	r3, #41	; 0x29
 800919e:	d00a      	beq.n	80091b6 <I2C_Slave_ISR_DMA+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	2210      	movs	r2, #16
 80091a4:	61da      	str	r2, [r3, #28]
 80091a6:	e023      	b.n	80091f0 <I2C_Slave_ISR_DMA+0xc0>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80091a8:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 80091ac:	d1f3      	bne.n	8009196 <I2C_Slave_ISR_DMA+0x66>
          I2C_ITListenCplt(hi2c, ITFlags);
 80091ae:	4620      	mov	r0, r4
 80091b0:	f7ff fcac 	bl	8008b0c <I2C_ITListenCplt>
 80091b4:	e01c      	b.n	80091f0 <I2C_Slave_ISR_DMA+0xc0>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80091b6:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80091ba:	d0f1      	beq.n	80091a0 <I2C_Slave_ISR_DMA+0x70>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	2210      	movs	r2, #16
 80091c0:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 80091c2:	4620      	mov	r0, r4
 80091c4:	f7fd f95a 	bl	800647c <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 80091c8:	4620      	mov	r0, r4
 80091ca:	f7ff fc01 	bl	80089d0 <I2C_ITSlaveSeqCplt>
 80091ce:	e00f      	b.n	80091f0 <I2C_Slave_ISR_DMA+0xc0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	2210      	movs	r2, #16
 80091d4:	61da      	str	r2, [r3, #28]
 80091d6:	e00b      	b.n	80091f0 <I2C_Slave_ISR_DMA+0xc0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80091d8:	f011 0f08 	tst.w	r1, #8
 80091dc:	d002      	beq.n	80091e4 <I2C_Slave_ISR_DMA+0xb4>
 80091de:	f012 0f08 	tst.w	r2, #8
 80091e2:	d109      	bne.n	80091f8 <I2C_Slave_ISR_DMA+0xc8>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80091e4:	f011 0f20 	tst.w	r1, #32
 80091e8:	d002      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0xc0>
 80091ea:	f012 0f20 	tst.w	r2, #32
 80091ee:	d107      	bne.n	8009200 <I2C_Slave_ISR_DMA+0xd0>
  __HAL_UNLOCK(hi2c);
 80091f0:	2000      	movs	r0, #0
 80091f2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 80091f8:	4620      	mov	r0, r4
 80091fa:	f7ff fc38 	bl	8008a6e <I2C_ITAddrCplt>
 80091fe:	e7f7      	b.n	80091f0 <I2C_Slave_ISR_DMA+0xc0>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009200:	4620      	mov	r0, r4
 8009202:	f7ff fd33 	bl	8008c6c <I2C_ITSlaveCplt>
 8009206:	e7f3      	b.n	80091f0 <I2C_Slave_ISR_DMA+0xc0>
  __HAL_LOCK(hi2c);
 8009208:	2002      	movs	r0, #2
 800920a:	e7f4      	b.n	80091f6 <I2C_Slave_ISR_DMA+0xc6>
      if (hi2c->hdmatx != NULL)
 800920c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800920e:	b110      	cbz	r0, 8009216 <I2C_Slave_ISR_DMA+0xe6>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009210:	f013 0f01 	tst.w	r3, #1
 8009214:	d1b4      	bne.n	8009180 <I2C_Slave_ISR_DMA+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	2210      	movs	r2, #16
 800921a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800921c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800921e:	f043 0304 	orr.w	r3, r3, #4
 8009222:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009224:	f035 7380 	bics.w	r3, r5, #16777216	; 0x1000000
 8009228:	d1e2      	bne.n	80091f0 <I2C_Slave_ISR_DMA+0xc0>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800922a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800922c:	4620      	mov	r0, r4
 800922e:	f7ff fca3 	bl	8008b78 <I2C_ITError>
 8009232:	e7dd      	b.n	80091f0 <I2C_Slave_ISR_DMA+0xc0>

08009234 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8009234:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009238:	2b01      	cmp	r3, #1
 800923a:	f000 8094 	beq.w	8009366 <I2C_Master_ISR_DMA+0x132>
{
 800923e:	b510      	push	{r4, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8009244:	2301      	movs	r3, #1
 8009246:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800924a:	f011 0f10 	tst.w	r1, #16
 800924e:	d002      	beq.n	8009256 <I2C_Master_ISR_DMA+0x22>
 8009250:	f012 0f10 	tst.w	r2, #16
 8009254:	d133      	bne.n	80092be <I2C_Master_ISR_DMA+0x8a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009256:	f011 0f80 	tst.w	r1, #128	; 0x80
 800925a:	d05a      	beq.n	8009312 <I2C_Master_ISR_DMA+0xde>
 800925c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009260:	d077      	beq.n	8009352 <I2C_Master_ISR_DMA+0x11e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	6813      	ldr	r3, [r2, #0]
 8009266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800926a:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 800926c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800926e:	b29b      	uxth	r3, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	d040      	beq.n	80092f6 <I2C_Master_ISR_DMA+0xc2>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	6859      	ldr	r1, [r3, #4]
 8009278:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800927c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800927e:	b29b      	uxth	r3, r3
 8009280:	2bff      	cmp	r3, #255	; 0xff
 8009282:	d92e      	bls.n	80092e2 <I2C_Master_ISR_DMA+0xae>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009284:	23ff      	movs	r3, #255	; 0xff
 8009286:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800928c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8009290:	2000      	movs	r0, #0
 8009292:	9000      	str	r0, [sp, #0]
 8009294:	4620      	mov	r0, r4
 8009296:	f7fd f902 	bl	800649e <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800929a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800929c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800929e:	1a9b      	subs	r3, r3, r2
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092a4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b22      	cmp	r3, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	6813      	ldr	r3, [r2, #0]
 80092b0:	bf0c      	ite	eq
 80092b2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80092b6:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	e00c      	b.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092be:	6803      	ldr	r3, [r0, #0]
 80092c0:	2210      	movs	r2, #16
 80092c2:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80092c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80092c6:	f043 0304 	orr.w	r3, r3, #4
 80092ca:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80092cc:	2112      	movs	r1, #18
 80092ce:	f7fd f901 	bl	80064d4 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80092d2:	4620      	mov	r0, r4
 80092d4:	f7fd f8d2 	bl	800647c <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80092d8:	2000      	movs	r0, #0
 80092da:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80092de:	b002      	add	sp, #8
 80092e0:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 80092e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80092e4:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80092e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80092e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
          xfermode = hi2c->XferOptions;
 80092ec:	bf14      	ite	ne
 80092ee:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
          xfermode = I2C_AUTOEND_MODE;
 80092f0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80092f4:	e7ca      	b.n	800928c <I2C_Master_ISR_DMA+0x58>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80092fe:	d103      	bne.n	8009308 <I2C_Master_ISR_DMA+0xd4>
        I2C_ITMasterSeqCplt(hi2c);
 8009300:	4620      	mov	r0, r4
 8009302:	f7ff fb39 	bl	8008978 <I2C_ITMasterSeqCplt>
 8009306:	e7e7      	b.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009308:	2140      	movs	r1, #64	; 0x40
 800930a:	4620      	mov	r0, r4
 800930c:	f7ff fc34 	bl	8008b78 <I2C_ITError>
 8009310:	e7e2      	b.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009312:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009316:	d01c      	beq.n	8009352 <I2C_Master_ISR_DMA+0x11e>
 8009318:	f012 0f40 	tst.w	r2, #64	; 0x40
 800931c:	d019      	beq.n	8009352 <I2C_Master_ISR_DMA+0x11e>
    if (hi2c->XferCount == 0U)
 800931e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009320:	b29b      	uxth	r3, r3
 8009322:	b98b      	cbnz	r3, 8009348 <I2C_Master_ISR_DMA+0x114>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800932c:	d1d4      	bne.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800932e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009330:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8009334:	d104      	bne.n	8009340 <I2C_Master_ISR_DMA+0x10c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800933c:	605a      	str	r2, [r3, #4]
 800933e:	e7cb      	b.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
          I2C_ITMasterSeqCplt(hi2c);
 8009340:	4620      	mov	r0, r4
 8009342:	f7ff fb19 	bl	8008978 <I2C_ITMasterSeqCplt>
 8009346:	e7c7      	b.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009348:	2140      	movs	r1, #64	; 0x40
 800934a:	4620      	mov	r0, r4
 800934c:	f7ff fc14 	bl	8008b78 <I2C_ITError>
 8009350:	e7c2      	b.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009352:	f011 0f20 	tst.w	r1, #32
 8009356:	d0bf      	beq.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
 8009358:	f012 0f20 	tst.w	r2, #32
 800935c:	d0bc      	beq.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
    I2C_ITMasterCplt(hi2c, ITFlags);
 800935e:	4620      	mov	r0, r4
 8009360:	f7ff fdb7 	bl	8008ed2 <I2C_ITMasterCplt>
 8009364:	e7b8      	b.n	80092d8 <I2C_Master_ISR_DMA+0xa4>
  __HAL_LOCK(hi2c);
 8009366:	2002      	movs	r0, #2
}
 8009368:	4770      	bx	lr

0800936a <I2C_DMAError>:
{
 800936a:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800936c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800936e:	6802      	ldr	r2, [r0, #0]
 8009370:	6853      	ldr	r3, [r2, #4]
 8009372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009376:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009378:	2110      	movs	r1, #16
 800937a:	f7ff fbfd 	bl	8008b78 <I2C_ITError>
}
 800937e:	bd08      	pop	{r3, pc}

08009380 <I2C_DMAMasterTransmitCplt>:
{
 8009380:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009382:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009384:	6822      	ldr	r2, [r4, #0]
 8009386:	6813      	ldr	r3, [r2, #0]
 8009388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800938c:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 800938e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009390:	b29b      	uxth	r3, r3
 8009392:	b1b3      	cbz	r3, 80093c2 <I2C_DMAMasterTransmitCplt+0x42>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009394:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009396:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009398:	4419      	add	r1, r3
 800939a:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800939c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800939e:	b29b      	uxth	r3, r3
 80093a0:	2bff      	cmp	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093a2:	bf8c      	ite	hi
 80093a4:	23ff      	movhi	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 80093a6:	8d63      	ldrhls	r3, [r4, #42]	; 0x2a
 80093a8:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80093ae:	3228      	adds	r2, #40	; 0x28
 80093b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80093b2:	f7fb fdde 	bl	8004f72 <HAL_DMA_Start_IT>
 80093b6:	b948      	cbnz	r0, 80093cc <I2C_DMAMasterTransmitCplt+0x4c>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80093b8:	2112      	movs	r1, #18
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7fd f88a 	bl	80064d4 <I2C_Enable_IRQ>
}
 80093c0:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80093c2:	2112      	movs	r1, #18
 80093c4:	4620      	mov	r0, r4
 80093c6:	f7fd f885 	bl	80064d4 <I2C_Enable_IRQ>
 80093ca:	e7f9      	b.n	80093c0 <I2C_DMAMasterTransmitCplt+0x40>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80093cc:	2110      	movs	r1, #16
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff fbd2 	bl	8008b78 <I2C_ITError>
 80093d4:	e7f4      	b.n	80093c0 <I2C_DMAMasterTransmitCplt+0x40>

080093d6 <I2C_DMAMasterReceiveCplt>:
{
 80093d6:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093da:	6822      	ldr	r2, [r4, #0]
 80093dc:	6813      	ldr	r3, [r2, #0]
 80093de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093e2:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 80093e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	b1b3      	cbz	r3, 8009418 <I2C_DMAMasterReceiveCplt+0x42>
    hi2c->pBuffPtr += hi2c->XferSize;
 80093ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80093ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80093ee:	441a      	add	r2, r3
 80093f0:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2bff      	cmp	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093f8:	bf8c      	ite	hi
 80093fa:	23ff      	movhi	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 80093fc:	8d63      	ldrhls	r3, [r4, #42]	; 0x2a
 80093fe:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8009400:	6821      	ldr	r1, [r4, #0]
 8009402:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009404:	3124      	adds	r1, #36	; 0x24
 8009406:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009408:	f7fb fdb3 	bl	8004f72 <HAL_DMA_Start_IT>
 800940c:	b948      	cbnz	r0, 8009422 <I2C_DMAMasterReceiveCplt+0x4c>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800940e:	2112      	movs	r1, #18
 8009410:	4620      	mov	r0, r4
 8009412:	f7fd f85f 	bl	80064d4 <I2C_Enable_IRQ>
}
 8009416:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009418:	2112      	movs	r1, #18
 800941a:	4620      	mov	r0, r4
 800941c:	f7fd f85a 	bl	80064d4 <I2C_Enable_IRQ>
 8009420:	e7f9      	b.n	8009416 <I2C_DMAMasterReceiveCplt+0x40>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009422:	2110      	movs	r1, #16
 8009424:	4620      	mov	r0, r4
 8009426:	f7ff fba7 	bl	8008b78 <I2C_ITError>
 800942a:	e7f4      	b.n	8009416 <I2C_DMAMasterReceiveCplt+0x40>

0800942c <HAL_I2C_ER_IRQHandler>:
{
 800942c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800942e:	6802      	ldr	r2, [r0, #0]
 8009430:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009432:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009434:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009438:	d010      	beq.n	800945c <HAL_I2C_ER_IRQHandler+0x30>
 800943a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800943e:	d02e      	beq.n	800949e <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009440:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8009442:	f041 0101 	orr.w	r1, r1, #1
 8009446:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800944c:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800944e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009452:	d109      	bne.n	8009468 <HAL_I2C_ER_IRQHandler+0x3c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009454:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009458:	d111      	bne.n	800947e <HAL_I2C_ER_IRQHandler+0x52>
 800945a:	e018      	b.n	800948e <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800945c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009460:	d020      	beq.n	80094a4 <HAL_I2C_ER_IRQHandler+0x78>
 8009462:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009466:	d012      	beq.n	800948e <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009468:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800946a:	f042 0208 	orr.w	r2, r2, #8
 800946e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009470:	6802      	ldr	r2, [r0, #0]
 8009472:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009476:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009478:	f413 7f00 	tst.w	r3, #512	; 0x200
 800947c:	d007      	beq.n	800948e <HAL_I2C_ER_IRQHandler+0x62>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800947e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009486:	6803      	ldr	r3, [r0, #0]
 8009488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800948c:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800948e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009490:	f011 0f0b 	tst.w	r1, #11
 8009494:	d100      	bne.n	8009498 <HAL_I2C_ER_IRQHandler+0x6c>
}
 8009496:	bd08      	pop	{r3, pc}
    I2C_ITError(hi2c, tmperror);
 8009498:	f7ff fb6e 	bl	8008b78 <I2C_ITError>
}
 800949c:	e7fb      	b.n	8009496 <HAL_I2C_ER_IRQHandler+0x6a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800949e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80094a2:	d1f4      	bne.n	800948e <HAL_I2C_ER_IRQHandler+0x62>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80094a4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80094a8:	d0f1      	beq.n	800948e <HAL_I2C_ER_IRQHandler+0x62>
 80094aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80094ae:	d0ee      	beq.n	800948e <HAL_I2C_ER_IRQHandler+0x62>
 80094b0:	e7e5      	b.n	800947e <HAL_I2C_ER_IRQHandler+0x52>

080094b2 <I2C_DMAAbort>:
{
 80094b2:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 80094b6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80094b8:	2300      	movs	r3, #0
 80094ba:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80094bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80094be:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80094c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b60      	cmp	r3, #96	; 0x60
 80094c8:	d002      	beq.n	80094d0 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 80094ca:	f7ff fb53 	bl	8008b74 <HAL_I2C_ErrorCallback>
}
 80094ce:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80094d0:	2320      	movs	r3, #32
 80094d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80094d6:	f7ff fb4e 	bl	8008b76 <HAL_I2C_AbortCpltCallback>
 80094da:	e7f8      	b.n	80094ce <I2C_DMAAbort+0x1c>

080094dc <HAL_I2C_GetState>:
  return hi2c->State;
 80094dc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80094e0:	4770      	bx	lr

080094e2 <HAL_I2C_GetMode>:
  return hi2c->Mode;
 80094e2:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
}
 80094e6:	4770      	bx	lr

080094e8 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80094e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80094ea:	4770      	bx	lr

080094ec <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b20      	cmp	r3, #32
 80094f4:	d124      	bne.n	8009540 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d022      	beq.n	8009544 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80094fe:	2301      	movs	r3, #1
 8009500:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009504:	2324      	movs	r3, #36	; 0x24
 8009506:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800950a:	6802      	ldr	r2, [r0, #0]
 800950c:	6813      	ldr	r3, [r2, #0]
 800950e:	f023 0301 	bic.w	r3, r3, #1
 8009512:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009514:	6802      	ldr	r2, [r0, #0]
 8009516:	6813      	ldr	r3, [r2, #0]
 8009518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800951c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800951e:	6802      	ldr	r2, [r0, #0]
 8009520:	6813      	ldr	r3, [r2, #0]
 8009522:	4319      	orrs	r1, r3
 8009524:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009526:	6802      	ldr	r2, [r0, #0]
 8009528:	6813      	ldr	r3, [r2, #0]
 800952a:	f043 0301 	orr.w	r3, r3, #1
 800952e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009530:	2320      	movs	r3, #32
 8009532:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009536:	2300      	movs	r3, #0
 8009538:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800953c:	4618      	mov	r0, r3
 800953e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8009540:	2002      	movs	r0, #2
 8009542:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8009544:	2002      	movs	r0, #2
  }
}
 8009546:	4770      	bx	lr

08009548 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009548:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b20      	cmp	r3, #32
 8009550:	d122      	bne.n	8009598 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009552:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009556:	2b01      	cmp	r3, #1
 8009558:	d020      	beq.n	800959c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800955a:	2301      	movs	r3, #1
 800955c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009560:	2324      	movs	r3, #36	; 0x24
 8009562:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009566:	6802      	ldr	r2, [r0, #0]
 8009568:	6813      	ldr	r3, [r2, #0]
 800956a:	f023 0301 	bic.w	r3, r3, #1
 800956e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009570:	6802      	ldr	r2, [r0, #0]
 8009572:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009574:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009578:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800957c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800957e:	6802      	ldr	r2, [r0, #0]
 8009580:	6813      	ldr	r3, [r2, #0]
 8009582:	f043 0301 	orr.w	r3, r3, #1
 8009586:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009588:	2320      	movs	r3, #32
 800958a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800958e:	2300      	movs	r3, #0
 8009590:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009594:	4618      	mov	r0, r3
 8009596:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8009598:	2002      	movs	r0, #2
 800959a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800959c:	2002      	movs	r0, #2
  }
}
 800959e:	4770      	bx	lr

080095a0 <HAL_I2CEx_EnableWakeUp>:
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d120      	bne.n	80095ec <HAL_I2CEx_EnableWakeUp+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095aa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d01e      	beq.n	80095f0 <HAL_I2CEx_EnableWakeUp+0x50>
 80095b2:	2301      	movs	r3, #1
 80095b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80095b8:	2324      	movs	r3, #36	; 0x24
 80095ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095be:	6802      	ldr	r2, [r0, #0]
 80095c0:	6813      	ldr	r3, [r2, #0]
 80095c2:	f023 0301 	bic.w	r3, r3, #1
 80095c6:	6013      	str	r3, [r2, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
 80095c8:	6802      	ldr	r2, [r0, #0]
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095d0:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095d2:	6802      	ldr	r2, [r0, #0]
 80095d4:	6813      	ldr	r3, [r2, #0]
 80095d6:	f043 0301 	orr.w	r3, r3, #1
 80095da:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095dc:	2320      	movs	r3, #32
 80095de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095e2:	2300      	movs	r3, #0
 80095e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80095e8:	4618      	mov	r0, r3
 80095ea:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80095ec:	2002      	movs	r0, #2
 80095ee:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80095f0:	2002      	movs	r0, #2
  }
}
 80095f2:	4770      	bx	lr

080095f4 <HAL_I2CEx_DisableWakeUp>:
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d120      	bne.n	8009640 <HAL_I2CEx_DisableWakeUp+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009602:	2b01      	cmp	r3, #1
 8009604:	d01e      	beq.n	8009644 <HAL_I2CEx_DisableWakeUp+0x50>
 8009606:	2301      	movs	r3, #1
 8009608:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800960c:	2324      	movs	r3, #36	; 0x24
 800960e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009612:	6802      	ldr	r2, [r0, #0]
 8009614:	6813      	ldr	r3, [r2, #0]
 8009616:	f023 0301 	bic.w	r3, r3, #1
 800961a:	6013      	str	r3, [r2, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
 800961c:	6802      	ldr	r2, [r0, #0]
 800961e:	6813      	ldr	r3, [r2, #0]
 8009620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009624:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009626:	6802      	ldr	r2, [r0, #0]
 8009628:	6813      	ldr	r3, [r2, #0]
 800962a:	f043 0301 	orr.w	r3, r3, #1
 800962e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009630:	2320      	movs	r3, #32
 8009632:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009636:	2300      	movs	r3, #0
 8009638:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800963c:	4618      	mov	r0, r3
 800963e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8009640:	2002      	movs	r0, #2
 8009642:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8009644:	2002      	movs	r0, #2
  }
}
 8009646:	4770      	bx	lr

08009648 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009648:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800964a:	4b08      	ldr	r3, [pc, #32]	; (800966c <HAL_I2CEx_EnableFastModePlus+0x24>)
 800964c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	661a      	str	r2, [r3, #96]	; 0x60
 8009654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	9301      	str	r3, [sp, #4]
 800965c:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800965e:	4a04      	ldr	r2, [pc, #16]	; (8009670 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8009660:	6853      	ldr	r3, [r2, #4]
 8009662:	4318      	orrs	r0, r3
 8009664:	6050      	str	r0, [r2, #4]
}
 8009666:	b002      	add	sp, #8
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	40021000 	.word	0x40021000
 8009670:	40010000 	.word	0x40010000

08009674 <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009674:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009676:	4b08      	ldr	r3, [pc, #32]	; (8009698 <HAL_I2CEx_DisableFastModePlus+0x24>)
 8009678:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800967a:	f042 0201 	orr.w	r2, r2, #1
 800967e:	661a      	str	r2, [r3, #96]	; 0x60
 8009680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	9b01      	ldr	r3, [sp, #4]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800968a:	4a04      	ldr	r2, [pc, #16]	; (800969c <HAL_I2CEx_DisableFastModePlus+0x28>)
 800968c:	6853      	ldr	r3, [r2, #4]
 800968e:	ea23 0000 	bic.w	r0, r3, r0
 8009692:	6050      	str	r0, [r2, #4]
}
 8009694:	b002      	add	sp, #8
 8009696:	4770      	bx	lr
 8009698:	40021000 	.word	0x40021000
 800969c:	40010000 	.word	0x40010000

080096a0 <HAL_PWR_DeInit>:
  * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
  __HAL_RCC_PWR_FORCE_RESET();
 80096a0:	4b04      	ldr	r3, [pc, #16]	; (80096b4 <HAL_PWR_DeInit+0x14>)
 80096a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80096a8:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_PWR_RELEASE_RESET();
 80096aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096ac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80096b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80096b2:	4770      	bx	lr
 80096b4:	40021000 	.word	0x40021000

080096b8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096b8:	4a02      	ldr	r2, [pc, #8]	; (80096c4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80096ba:	6813      	ldr	r3, [r2, #0]
 80096bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096c0:	6013      	str	r3, [r2, #0]
}
 80096c2:	4770      	bx	lr
 80096c4:	40007000 	.word	0x40007000

080096c8 <HAL_PWR_DisableBkUpAccess>:
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80096c8:	4a02      	ldr	r2, [pc, #8]	; (80096d4 <HAL_PWR_DisableBkUpAccess+0xc>)
 80096ca:	6813      	ldr	r3, [r2, #0]
 80096cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096d0:	6013      	str	r3, [r2, #0]
}
 80096d2:	4770      	bx	lr
 80096d4:	40007000 	.word	0x40007000

080096d8 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80096d8:	4a1e      	ldr	r2, [pc, #120]	; (8009754 <HAL_PWR_ConfigPVD+0x7c>)
 80096da:	6853      	ldr	r3, [r2, #4]
 80096dc:	f023 030e 	bic.w	r3, r3, #14
 80096e0:	6801      	ldr	r1, [r0, #0]
 80096e2:	430b      	orrs	r3, r1
 80096e4:	6053      	str	r3, [r2, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80096e6:	4b1c      	ldr	r3, [pc, #112]	; (8009758 <HAL_PWR_ConfigPVD+0x80>)
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80096ee:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80096f6:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80096fe:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8009700:	689a      	ldr	r2, [r3, #8]
 8009702:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009706:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8009708:	6843      	ldr	r3, [r0, #4]
 800970a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800970e:	d004      	beq.n	800971a <HAL_PWR_ConfigPVD+0x42>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8009710:	4a11      	ldr	r2, [pc, #68]	; (8009758 <HAL_PWR_ConfigPVD+0x80>)
 8009712:	6813      	ldr	r3, [r2, #0]
 8009714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009718:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800971a:	6843      	ldr	r3, [r0, #4]
 800971c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009720:	d004      	beq.n	800972c <HAL_PWR_ConfigPVD+0x54>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8009722:	4a0d      	ldr	r2, [pc, #52]	; (8009758 <HAL_PWR_ConfigPVD+0x80>)
 8009724:	6853      	ldr	r3, [r2, #4]
 8009726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800972a:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800972c:	6843      	ldr	r3, [r0, #4]
 800972e:	f013 0f01 	tst.w	r3, #1
 8009732:	d004      	beq.n	800973e <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8009734:	4a08      	ldr	r2, [pc, #32]	; (8009758 <HAL_PWR_ConfigPVD+0x80>)
 8009736:	6893      	ldr	r3, [r2, #8]
 8009738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800973c:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800973e:	6843      	ldr	r3, [r0, #4]
 8009740:	f013 0f02 	tst.w	r3, #2
 8009744:	d004      	beq.n	8009750 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8009746:	4a04      	ldr	r2, [pc, #16]	; (8009758 <HAL_PWR_ConfigPVD+0x80>)
 8009748:	68d3      	ldr	r3, [r2, #12]
 800974a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800974e:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
}
 8009750:	2000      	movs	r0, #0
 8009752:	4770      	bx	lr
 8009754:	40007000 	.word	0x40007000
 8009758:	40010400 	.word	0x40010400

0800975c <HAL_PWR_EnablePVD>:
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800975c:	4a02      	ldr	r2, [pc, #8]	; (8009768 <HAL_PWR_EnablePVD+0xc>)
 800975e:	6853      	ldr	r3, [r2, #4]
 8009760:	f043 0301 	orr.w	r3, r3, #1
 8009764:	6053      	str	r3, [r2, #4]
}
 8009766:	4770      	bx	lr
 8009768:	40007000 	.word	0x40007000

0800976c <HAL_PWR_DisablePVD>:
  * @brief Disable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 800976c:	4a02      	ldr	r2, [pc, #8]	; (8009778 <HAL_PWR_DisablePVD+0xc>)
 800976e:	6853      	ldr	r3, [r2, #4]
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	6053      	str	r3, [r2, #4]
}
 8009776:	4770      	bx	lr
 8009778:	40007000 	.word	0x40007000

0800977c <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 800977c:	4a06      	ldr	r2, [pc, #24]	; (8009798 <HAL_PWR_EnableWakeUpPin+0x1c>)
 800977e:	68d3      	ldr	r3, [r2, #12]
 8009780:	f000 011f 	and.w	r1, r0, #31
 8009784:	ea23 0301 	bic.w	r3, r3, r1
 8009788:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800978c:	60d0      	str	r0, [r2, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800978e:	6893      	ldr	r3, [r2, #8]
 8009790:	4319      	orrs	r1, r3
 8009792:	6091      	str	r1, [r2, #8]


}
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	40007000 	.word	0x40007000

0800979c <HAL_PWR_DisableWakeUpPin>:
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 800979c:	4a03      	ldr	r2, [pc, #12]	; (80097ac <HAL_PWR_DisableWakeUpPin+0x10>)
 800979e:	6893      	ldr	r3, [r2, #8]
 80097a0:	f000 001f 	and.w	r0, r0, #31
 80097a4:	ea23 0300 	bic.w	r3, r3, r0
 80097a8:	6093      	str	r3, [r2, #8]
}
 80097aa:	4770      	bx	lr
 80097ac:	40007000 	.word	0x40007000

080097b0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80097b0:	b510      	push	{r4, lr}
 80097b2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80097b4:	b9a0      	cbnz	r0, 80097e0 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80097b6:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <HAL_PWR_EnterSLEEPMode+0x44>)
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80097be:	d10a      	bne.n	80097d6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80097c0:	4a0d      	ldr	r2, [pc, #52]	; (80097f8 <HAL_PWR_EnterSLEEPMode+0x48>)
 80097c2:	6913      	ldr	r3, [r2, #16]
 80097c4:	f023 0304 	bic.w	r3, r3, #4
 80097c8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80097ca:	2c01      	cmp	r4, #1
 80097cc:	d010      	beq.n	80097f0 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80097ce:	bf40      	sev
    __WFE();
 80097d0:	bf20      	wfe
    __WFE();
 80097d2:	bf20      	wfe
  }

}
 80097d4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80097d6:	f000 fba3 	bl	8009f20 <HAL_PWREx_DisableLowPowerRunMode>
 80097da:	2800      	cmp	r0, #0
 80097dc:	d0f0      	beq.n	80097c0 <HAL_PWR_EnterSLEEPMode+0x10>
 80097de:	e7f9      	b.n	80097d4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80097e0:	4b04      	ldr	r3, [pc, #16]	; (80097f4 <HAL_PWR_EnterSLEEPMode+0x44>)
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80097e8:	d1ea      	bne.n	80097c0 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 80097ea:	f000 fb91 	bl	8009f10 <HAL_PWREx_EnableLowPowerRunMode>
 80097ee:	e7e7      	b.n	80097c0 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 80097f0:	bf30      	wfi
 80097f2:	e7ef      	b.n	80097d4 <HAL_PWR_EnterSLEEPMode+0x24>
 80097f4:	40007000 	.word	0x40007000
 80097f8:	e000ed00 	.word	0xe000ed00

080097fc <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80097fc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80097fe:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009802:	d003      	beq.n	800980c <HAL_PWR_EnterSTOPMode+0x10>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8009804:	4608      	mov	r0, r1
 8009806:	f000 fbb7 	bl	8009f78 <HAL_PWREx_EnterSTOP0Mode>
  }
}
 800980a:	bd08      	pop	{r3, pc}
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800980c:	4608      	mov	r0, r1
 800980e:	f000 fbcf 	bl	8009fb0 <HAL_PWREx_EnterSTOP1Mode>
 8009812:	e7fa      	b.n	800980a <HAL_PWR_EnterSTOPMode+0xe>

08009814 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8009814:	4a06      	ldr	r2, [pc, #24]	; (8009830 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 8009816:	6813      	ldr	r3, [r2, #0]
 8009818:	f023 0307 	bic.w	r3, r3, #7
 800981c:	f043 0303 	orr.w	r3, r3, #3
 8009820:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009822:	4a04      	ldr	r2, [pc, #16]	; (8009834 <HAL_PWR_EnterSTANDBYMode+0x20>)
 8009824:	6913      	ldr	r3, [r2, #16]
 8009826:	f043 0304 	orr.w	r3, r3, #4
 800982a:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800982c:	bf30      	wfi
}
 800982e:	4770      	bx	lr
 8009830:	40007000 	.word	0x40007000
 8009834:	e000ed00 	.word	0xe000ed00

08009838 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009838:	4a02      	ldr	r2, [pc, #8]	; (8009844 <HAL_PWR_EnableSleepOnExit+0xc>)
 800983a:	6913      	ldr	r3, [r2, #16]
 800983c:	f043 0302 	orr.w	r3, r3, #2
 8009840:	6113      	str	r3, [r2, #16]
}
 8009842:	4770      	bx	lr
 8009844:	e000ed00 	.word	0xe000ed00

08009848 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009848:	4a02      	ldr	r2, [pc, #8]	; (8009854 <HAL_PWR_DisableSleepOnExit+0xc>)
 800984a:	6913      	ldr	r3, [r2, #16]
 800984c:	f023 0302 	bic.w	r3, r3, #2
 8009850:	6113      	str	r3, [r2, #16]
}
 8009852:	4770      	bx	lr
 8009854:	e000ed00 	.word	0xe000ed00

08009858 <HAL_PWR_EnableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8009858:	4a02      	ldr	r2, [pc, #8]	; (8009864 <HAL_PWR_EnableSEVOnPend+0xc>)
 800985a:	6913      	ldr	r3, [r2, #16]
 800985c:	f043 0310 	orr.w	r3, r3, #16
 8009860:	6113      	str	r3, [r2, #16]
}
 8009862:	4770      	bx	lr
 8009864:	e000ed00 	.word	0xe000ed00

08009868 <HAL_PWR_DisableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8009868:	4a02      	ldr	r2, [pc, #8]	; (8009874 <HAL_PWR_DisableSEVOnPend+0xc>)
 800986a:	6913      	ldr	r3, [r2, #16]
 800986c:	f023 0310 	bic.w	r3, r3, #16
 8009870:	6113      	str	r3, [r2, #16]
}
 8009872:	4770      	bx	lr
 8009874:	e000ed00 	.word	0xe000ed00

08009878 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8009878:	4770      	bx	lr
	...

0800987c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800987c:	4b02      	ldr	r3, [pc, #8]	; (8009888 <HAL_PWREx_GetVoltageRange+0xc>)
 800987e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8009880:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	40007000 	.word	0x40007000

0800988c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800988c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009890:	d00f      	beq.n	80098b2 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009892:	4b21      	ldr	r3, [pc, #132]	; (8009918 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800989a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800989e:	d038      	beq.n	8009912 <HAL_PWREx_ControlVoltageScaling+0x86>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80098a0:	4a1d      	ldr	r2, [pc, #116]	; (8009918 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80098a2:	6813      	ldr	r3, [r2, #0]
 80098a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80098a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80098ae:	2000      	movs	r0, #0
 80098b0:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80098b2:	4b19      	ldr	r3, [pc, #100]	; (8009918 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098be:	d026      	beq.n	800990e <HAL_PWREx_ControlVoltageScaling+0x82>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80098c0:	4a15      	ldr	r2, [pc, #84]	; (8009918 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80098c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098cc:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <HAL_PWREx_ControlVoltageScaling+0x90>)
 80098d0:	6819      	ldr	r1, [r3, #0]
 80098d2:	2332      	movs	r3, #50	; 0x32
 80098d4:	fb03 f301 	mul.w	r3, r3, r1
 80098d8:	4911      	ldr	r1, [pc, #68]	; (8009920 <HAL_PWREx_ControlVoltageScaling+0x94>)
 80098da:	fba1 1303 	umull	r1, r3, r1, r3
 80098de:	0c9b      	lsrs	r3, r3, #18
 80098e0:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80098e2:	6952      	ldr	r2, [r2, #20]
 80098e4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80098e8:	d008      	beq.n	80098fc <HAL_PWREx_ControlVoltageScaling+0x70>
 80098ea:	b13b      	cbz	r3, 80098fc <HAL_PWREx_ControlVoltageScaling+0x70>
 80098ec:	490a      	ldr	r1, [pc, #40]	; (8009918 <HAL_PWREx_ControlVoltageScaling+0x8c>)
        wait_loop_index--;
 80098ee:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80098f0:	694a      	ldr	r2, [r1, #20]
 80098f2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80098f6:	d001      	beq.n	80098fc <HAL_PWREx_ControlVoltageScaling+0x70>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1f8      	bne.n	80098ee <HAL_PWREx_ControlVoltageScaling+0x62>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80098fc:	4b06      	ldr	r3, [pc, #24]	; (8009918 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8009904:	2b00      	cmp	r3, #0
 8009906:	bf14      	ite	ne
 8009908:	2003      	movne	r0, #3
 800990a:	2000      	moveq	r0, #0
 800990c:	4770      	bx	lr
 800990e:	2000      	movs	r0, #0
 8009910:	4770      	bx	lr
 8009912:	2000      	movs	r0, #0
}
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	40007000 	.word	0x40007000
 800991c:	20000008 	.word	0x20000008
 8009920:	431bde83 	.word	0x431bde83

08009924 <HAL_PWREx_EnableBatteryCharging>:
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));

  /* Specify resistor selection */
  MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 8009924:	4a05      	ldr	r2, [pc, #20]	; (800993c <HAL_PWREx_EnableBatteryCharging+0x18>)
 8009926:	68d3      	ldr	r3, [r2, #12]
 8009928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800992c:	4318      	orrs	r0, r3
 800992e:	60d0      	str	r0, [r2, #12]

  /* Enable battery charging */
  SET_BIT(PWR->CR4, PWR_CR4_VBE);
 8009930:	68d3      	ldr	r3, [r2, #12]
 8009932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009936:	60d3      	str	r3, [r2, #12]
}
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	40007000 	.word	0x40007000

08009940 <HAL_PWREx_DisableBatteryCharging>:
  * @brief Disable battery charging.
  * @retval None
  */
void HAL_PWREx_DisableBatteryCharging(void)
{
  CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 8009940:	4a02      	ldr	r2, [pc, #8]	; (800994c <HAL_PWREx_DisableBatteryCharging+0xc>)
 8009942:	68d3      	ldr	r3, [r2, #12]
 8009944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009948:	60d3      	str	r3, [r2, #12]
}
 800994a:	4770      	bx	lr
 800994c:	40007000 	.word	0x40007000

08009950 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009950:	4a02      	ldr	r2, [pc, #8]	; (800995c <HAL_PWREx_EnableVddUSB+0xc>)
 8009952:	6853      	ldr	r3, [r2, #4]
 8009954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009958:	6053      	str	r3, [r2, #4]
}
 800995a:	4770      	bx	lr
 800995c:	40007000 	.word	0x40007000

08009960 <HAL_PWREx_DisableVddUSB>:
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8009960:	4a02      	ldr	r2, [pc, #8]	; (800996c <HAL_PWREx_DisableVddUSB+0xc>)
 8009962:	6853      	ldr	r3, [r2, #4]
 8009964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009968:	6053      	str	r3, [r2, #4]
}
 800996a:	4770      	bx	lr
 800996c:	40007000 	.word	0x40007000

08009970 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8009970:	4a02      	ldr	r2, [pc, #8]	; (800997c <HAL_PWREx_EnableVddIO2+0xc>)
 8009972:	6853      	ldr	r3, [r2, #4]
 8009974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009978:	6053      	str	r3, [r2, #4]
}
 800997a:	4770      	bx	lr
 800997c:	40007000 	.word	0x40007000

08009980 <HAL_PWREx_DisableVddIO2>:
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8009980:	4a02      	ldr	r2, [pc, #8]	; (800998c <HAL_PWREx_DisableVddIO2+0xc>)
 8009982:	6853      	ldr	r3, [r2, #4]
 8009984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009988:	6053      	str	r3, [r2, #4]
}
 800998a:	4770      	bx	lr
 800998c:	40007000 	.word	0x40007000

08009990 <HAL_PWREx_EnableInternalWakeUpLine>:
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 8009990:	4a02      	ldr	r2, [pc, #8]	; (800999c <HAL_PWREx_EnableInternalWakeUpLine+0xc>)
 8009992:	6893      	ldr	r3, [r2, #8]
 8009994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009998:	6093      	str	r3, [r2, #8]
}
 800999a:	4770      	bx	lr
 800999c:	40007000 	.word	0x40007000

080099a0 <HAL_PWREx_DisableInternalWakeUpLine>:
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 80099a0:	4a02      	ldr	r2, [pc, #8]	; (80099ac <HAL_PWREx_DisableInternalWakeUpLine+0xc>)
 80099a2:	6893      	ldr	r3, [r2, #8]
 80099a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099a8:	6093      	str	r3, [r2, #8]
}
 80099aa:	4770      	bx	lr
 80099ac:	40007000 	.word	0x40007000

080099b0 <HAL_PWREx_EnableGPIOPullUp>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80099b0:	2807      	cmp	r0, #7
 80099b2:	d85d      	bhi.n	8009a70 <HAL_PWREx_EnableGPIOPullUp+0xc0>
 80099b4:	e8df f000 	tbb	[pc, r0]
 80099b8:	281e1204 	.word	0x281e1204
 80099bc:	50463c32 	.word	0x50463c32
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80099c0:	4b2c      	ldr	r3, [pc, #176]	; (8009a74 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 80099c2:	6a18      	ldr	r0, [r3, #32]
 80099c4:	f421 4280 	bic.w	r2, r1, #16384	; 0x4000
 80099c8:	4302      	orrs	r2, r0
 80099ca:	621a      	str	r2, [r3, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80099cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099ce:	f421 4120 	bic.w	r1, r1, #40960	; 0xa000
 80099d2:	ea22 0101 	bic.w	r1, r2, r1
 80099d6:	6259      	str	r1, [r3, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 80099d8:	2000      	movs	r0, #0
       break;
 80099da:	4770      	bx	lr
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 80099dc:	4b25      	ldr	r3, [pc, #148]	; (8009a74 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 80099de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099e0:	430a      	orrs	r2, r1
 80099e2:	629a      	str	r2, [r3, #40]	; 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80099e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e6:	f021 0110 	bic.w	r1, r1, #16
 80099ea:	ea22 0101 	bic.w	r1, r2, r1
 80099ee:	62d9      	str	r1, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 80099f0:	2000      	movs	r0, #0
       break;
 80099f2:	4770      	bx	lr
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 80099f4:	4b1f      	ldr	r3, [pc, #124]	; (8009a74 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 80099f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099f8:	430a      	orrs	r2, r1
 80099fa:	631a      	str	r2, [r3, #48]	; 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 80099fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099fe:	ea22 0101 	bic.w	r1, r2, r1
 8009a02:	6359      	str	r1, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8009a04:	2000      	movs	r0, #0
       break;
 8009a06:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 8009a08:	4b1a      	ldr	r3, [pc, #104]	; (8009a74 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8009a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a0c:	430a      	orrs	r2, r1
 8009a0e:	639a      	str	r2, [r3, #56]	; 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 8009a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a12:	ea22 0101 	bic.w	r1, r2, r1
 8009a16:	63d9      	str	r1, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8009a18:	2000      	movs	r0, #0
       break;
 8009a1a:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 8009a1c:	4b15      	ldr	r3, [pc, #84]	; (8009a74 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8009a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a20:	430a      	orrs	r2, r1
 8009a22:	641a      	str	r2, [r3, #64]	; 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8009a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a26:	ea22 0101 	bic.w	r1, r2, r1
 8009a2a:	6459      	str	r1, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8009a2c:	2000      	movs	r0, #0
       break;
 8009a2e:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, GPIONumber);
 8009a30:	4b10      	ldr	r3, [pc, #64]	; (8009a74 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8009a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a34:	430a      	orrs	r2, r1
 8009a36:	649a      	str	r2, [r3, #72]	; 0x48
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8009a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a3a:	ea22 0101 	bic.w	r1, r2, r1
 8009a3e:	64d9      	str	r1, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8009a40:	2000      	movs	r0, #0
       break;
 8009a42:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, GPIONumber);
 8009a44:	4b0b      	ldr	r3, [pc, #44]	; (8009a74 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8009a46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	651a      	str	r2, [r3, #80]	; 0x50
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8009a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a4e:	ea22 0101 	bic.w	r1, r2, r1
 8009a52:	6559      	str	r1, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8009a54:	2000      	movs	r0, #0
       break;
 8009a56:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
       SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009a58:	4b06      	ldr	r3, [pc, #24]	; (8009a74 <HAL_PWREx_EnableGPIOPullUp+0xc4>)
 8009a5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a5c:	f001 0103 	and.w	r1, r1, #3
 8009a60:	430a      	orrs	r2, r1
 8009a62:	659a      	str	r2, [r3, #88]	; 0x58
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009a64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a66:	ea22 0101 	bic.w	r1, r2, r1
 8009a6a:	65d9      	str	r1, [r3, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8009a6c:	2000      	movs	r0, #0
#endif
       break;
 8009a6e:	4770      	bx	lr
       SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8009a70:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8009a72:	4770      	bx	lr
 8009a74:	40007000 	.word	0x40007000

08009a78 <HAL_PWREx_DisableGPIOPullUp>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8009a78:	2807      	cmp	r0, #7
 8009a7a:	d841      	bhi.n	8009b00 <HAL_PWREx_DisableGPIOPullUp+0x88>
 8009a7c:	e8df f000 	tbb	[pc, r0]
 8009a80:	1b140d04 	.word	0x1b140d04
 8009a84:	37302922 	.word	0x37302922
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8009a88:	4a1e      	ldr	r2, [pc, #120]	; (8009b04 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8009a8a:	6a13      	ldr	r3, [r2, #32]
 8009a8c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009a90:	ea23 0101 	bic.w	r1, r3, r1
 8009a94:	6211      	str	r1, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8009a96:	2000      	movs	r0, #0
       break;
 8009a98:	4770      	bx	lr
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8009a9a:	4a1a      	ldr	r2, [pc, #104]	; (8009b04 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8009a9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009a9e:	ea23 0101 	bic.w	r1, r3, r1
 8009aa2:	6291      	str	r1, [r2, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8009aa4:	2000      	movs	r0, #0
       break;
 8009aa6:	4770      	bx	lr
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8009aa8:	4a16      	ldr	r2, [pc, #88]	; (8009b04 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8009aaa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009aac:	ea23 0101 	bic.w	r1, r3, r1
 8009ab0:	6311      	str	r1, [r2, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8009ab2:	2000      	movs	r0, #0
       break;
 8009ab4:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8009ab6:	4a13      	ldr	r2, [pc, #76]	; (8009b04 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8009ab8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009aba:	ea23 0101 	bic.w	r1, r3, r1
 8009abe:	6391      	str	r1, [r2, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8009ac0:	2000      	movs	r0, #0
       break;
 8009ac2:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 8009ac4:	4a0f      	ldr	r2, [pc, #60]	; (8009b04 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8009ac6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009ac8:	ea23 0101 	bic.w	r1, r3, r1
 8009acc:	6411      	str	r1, [r2, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8009ace:	2000      	movs	r0, #0
       break;
 8009ad0:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8009ad2:	4a0c      	ldr	r2, [pc, #48]	; (8009b04 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8009ad4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009ad6:	ea23 0101 	bic.w	r1, r3, r1
 8009ada:	6491      	str	r1, [r2, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8009adc:	2000      	movs	r0, #0
       break;
 8009ade:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8009ae0:	4a08      	ldr	r2, [pc, #32]	; (8009b04 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8009ae2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ae4:	ea23 0101 	bic.w	r1, r3, r1
 8009ae8:	6511      	str	r1, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009aea:	2000      	movs	r0, #0
       break;
 8009aec:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009aee:	4a05      	ldr	r2, [pc, #20]	; (8009b04 <HAL_PWREx_DisableGPIOPullUp+0x8c>)
 8009af0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009af2:	f001 0103 	and.w	r1, r1, #3
 8009af6:	ea23 0101 	bic.w	r1, r3, r1
 8009afa:	6591      	str	r1, [r2, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8009afc:	2000      	movs	r0, #0
       break;
 8009afe:	4770      	bx	lr
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
       status = HAL_ERROR;
 8009b00:	2001      	movs	r0, #1
       break;
  }

  return status;
}
 8009b02:	4770      	bx	lr
 8009b04:	40007000 	.word	0x40007000

08009b08 <HAL_PWREx_EnableGPIOPullDown>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8009b08:	2807      	cmp	r0, #7
 8009b0a:	d85d      	bhi.n	8009bc8 <HAL_PWREx_EnableGPIOPullDown+0xc0>
 8009b0c:	e8df f000 	tbb	[pc, r0]
 8009b10:	281e1204 	.word	0x281e1204
 8009b14:	50463c32 	.word	0x50463c32
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8009b18:	4b2c      	ldr	r3, [pc, #176]	; (8009bcc <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8009b1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009b1c:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
 8009b20:	4302      	orrs	r2, r0
 8009b22:	625a      	str	r2, [r3, #36]	; 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8009b24:	6a1a      	ldr	r2, [r3, #32]
 8009b26:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009b2a:	ea22 0101 	bic.w	r1, r2, r1
 8009b2e:	6219      	str	r1, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8009b30:	2000      	movs	r0, #0
       break;
 8009b32:	4770      	bx	lr
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8009b34:	4b25      	ldr	r3, [pc, #148]	; (8009bcc <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8009b36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009b38:	f021 0210 	bic.w	r2, r1, #16
 8009b3c:	4302      	orrs	r2, r0
 8009b3e:	62da      	str	r2, [r3, #44]	; 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8009b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b42:	ea22 0101 	bic.w	r1, r2, r1
 8009b46:	6299      	str	r1, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8009b48:	2000      	movs	r0, #0
       break;
 8009b4a:	4770      	bx	lr
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 8009b4c:	4b1f      	ldr	r3, [pc, #124]	; (8009bcc <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8009b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b50:	430a      	orrs	r2, r1
 8009b52:	635a      	str	r2, [r3, #52]	; 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8009b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b56:	ea22 0101 	bic.w	r1, r2, r1
 8009b5a:	6319      	str	r1, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8009b5c:	2000      	movs	r0, #0
       break;
 8009b5e:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 8009b60:	4b1a      	ldr	r3, [pc, #104]	; (8009bcc <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8009b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b64:	430a      	orrs	r2, r1
 8009b66:	63da      	str	r2, [r3, #60]	; 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8009b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b6a:	ea22 0101 	bic.w	r1, r2, r1
 8009b6e:	6399      	str	r1, [r3, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8009b70:	2000      	movs	r0, #0
       break;
 8009b72:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 8009b74:	4b15      	ldr	r3, [pc, #84]	; (8009bcc <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8009b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	645a      	str	r2, [r3, #68]	; 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 8009b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b7e:	ea22 0101 	bic.w	r1, r2, r1
 8009b82:	6419      	str	r1, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8009b84:	2000      	movs	r0, #0
       break;
 8009b86:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 8009b88:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8009b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	64da      	str	r2, [r3, #76]	; 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8009b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b92:	ea22 0101 	bic.w	r1, r2, r1
 8009b96:	6499      	str	r1, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8009b98:	2000      	movs	r0, #0
       break;
 8009b9a:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 8009b9c:	4b0b      	ldr	r3, [pc, #44]	; (8009bcc <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8009b9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	655a      	str	r2, [r3, #84]	; 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8009ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ba6:	ea22 0101 	bic.w	r1, r2, r1
 8009baa:	6519      	str	r1, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009bac:	2000      	movs	r0, #0
       break;
 8009bae:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009bb0:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <HAL_PWREx_EnableGPIOPullDown+0xc4>)
 8009bb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009bb4:	f001 0103 	and.w	r1, r1, #3
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	65da      	str	r2, [r3, #92]	; 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009bbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009bbe:	ea22 0101 	bic.w	r1, r2, r1
 8009bc2:	6599      	str	r1, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8009bc4:	2000      	movs	r0, #0
       break;
 8009bc6:	4770      	bx	lr
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8009bc8:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8009bca:	4770      	bx	lr
 8009bcc:	40007000 	.word	0x40007000

08009bd0 <HAL_PWREx_DisableGPIOPullDown>:
  HAL_StatusTypeDef status = HAL_OK;

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8009bd0:	2807      	cmp	r0, #7
 8009bd2:	d843      	bhi.n	8009c5c <HAL_PWREx_DisableGPIOPullDown+0x8c>
 8009bd4:	e8df f000 	tbb	[pc, r0]
 8009bd8:	1d160d04 	.word	0x1d160d04
 8009bdc:	39322b24 	.word	0x39322b24
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8009be0:	4a1f      	ldr	r2, [pc, #124]	; (8009c60 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8009be2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009be4:	f421 4120 	bic.w	r1, r1, #40960	; 0xa000
 8009be8:	ea23 0101 	bic.w	r1, r3, r1
 8009bec:	6251      	str	r1, [r2, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8009bee:	2000      	movs	r0, #0
       break;
 8009bf0:	4770      	bx	lr
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8009bf2:	4a1b      	ldr	r2, [pc, #108]	; (8009c60 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8009bf4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009bf6:	f021 0110 	bic.w	r1, r1, #16
 8009bfa:	ea23 0101 	bic.w	r1, r3, r1
 8009bfe:	62d1      	str	r1, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8009c00:	2000      	movs	r0, #0
       break;
 8009c02:	4770      	bx	lr
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 8009c04:	4a16      	ldr	r2, [pc, #88]	; (8009c60 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8009c06:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009c08:	ea23 0101 	bic.w	r1, r3, r1
 8009c0c:	6351      	str	r1, [r2, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8009c0e:	2000      	movs	r0, #0
       break;
 8009c10:	4770      	bx	lr
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 8009c12:	4a13      	ldr	r2, [pc, #76]	; (8009c60 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8009c14:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009c16:	ea23 0101 	bic.w	r1, r3, r1
 8009c1a:	63d1      	str	r1, [r2, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8009c1c:	2000      	movs	r0, #0
       break;
 8009c1e:	4770      	bx	lr
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8009c20:	4a0f      	ldr	r2, [pc, #60]	; (8009c60 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8009c22:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8009c24:	ea23 0101 	bic.w	r1, r3, r1
 8009c28:	6451      	str	r1, [r2, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8009c2a:	2000      	movs	r0, #0
       break;
 8009c2c:	4770      	bx	lr
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8009c2e:	4a0c      	ldr	r2, [pc, #48]	; (8009c60 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8009c30:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009c32:	ea23 0101 	bic.w	r1, r3, r1
 8009c36:	64d1      	str	r1, [r2, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8009c38:	2000      	movs	r0, #0
       break;
 8009c3a:	4770      	bx	lr
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8009c3c:	4a08      	ldr	r2, [pc, #32]	; (8009c60 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8009c3e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009c40:	ea23 0101 	bic.w	r1, r3, r1
 8009c44:	6551      	str	r1, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8009c46:	2000      	movs	r0, #0
       break;
 8009c48:	4770      	bx	lr
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8009c4a:	4a05      	ldr	r2, [pc, #20]	; (8009c60 <HAL_PWREx_DisableGPIOPullDown+0x90>)
 8009c4c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8009c4e:	f001 0103 	and.w	r1, r1, #3
 8009c52:	ea23 0101 	bic.w	r1, r3, r1
 8009c56:	65d1      	str	r1, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8009c58:	2000      	movs	r0, #0
#endif
       break;
 8009c5a:	4770      	bx	lr
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8009c5c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8009c5e:	4770      	bx	lr
 8009c60:	40007000 	.word	0x40007000

08009c64 <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8009c64:	4a02      	ldr	r2, [pc, #8]	; (8009c70 <HAL_PWREx_EnablePullUpPullDownConfig+0xc>)
 8009c66:	6893      	ldr	r3, [r2, #8]
 8009c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c6c:	6093      	str	r3, [r2, #8]
}
 8009c6e:	4770      	bx	lr
 8009c70:	40007000 	.word	0x40007000

08009c74 <HAL_PWREx_DisablePullUpPullDownConfig>:
  *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8009c74:	4a02      	ldr	r2, [pc, #8]	; (8009c80 <HAL_PWREx_DisablePullUpPullDownConfig+0xc>)
 8009c76:	6893      	ldr	r3, [r2, #8]
 8009c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c7c:	6093      	str	r3, [r2, #8]
}
 8009c7e:	4770      	bx	lr
 8009c80:	40007000 	.word	0x40007000

08009c84 <HAL_PWREx_EnableSRAM2ContentRetention>:
  *         Standby mode and its content is kept.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8009c84:	4a02      	ldr	r2, [pc, #8]	; (8009c90 <HAL_PWREx_EnableSRAM2ContentRetention+0xc>)
 8009c86:	6893      	ldr	r3, [r2, #8]
 8009c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c8c:	6093      	str	r3, [r2, #8]
}
 8009c8e:	4770      	bx	lr
 8009c90:	40007000 	.word	0x40007000

08009c94 <HAL_PWREx_DisableSRAM2ContentRetention>:
  *        and its content is lost.
  * @retval None
  */
void HAL_PWREx_DisableSRAM2ContentRetention(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 8009c94:	4a02      	ldr	r2, [pc, #8]	; (8009ca0 <HAL_PWREx_DisableSRAM2ContentRetention+0xc>)
 8009c96:	6893      	ldr	r3, [r2, #8]
 8009c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c9c:	6093      	str	r3, [r2, #8]
}
 8009c9e:	4770      	bx	lr
 8009ca0:	40007000 	.word	0x40007000

08009ca4 <HAL_PWREx_EnablePVM1>:
  * @brief Enable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM1(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_1);
 8009ca4:	4a02      	ldr	r2, [pc, #8]	; (8009cb0 <HAL_PWREx_EnablePVM1+0xc>)
 8009ca6:	6853      	ldr	r3, [r2, #4]
 8009ca8:	f043 0310 	orr.w	r3, r3, #16
 8009cac:	6053      	str	r3, [r2, #4]
}
 8009cae:	4770      	bx	lr
 8009cb0:	40007000 	.word	0x40007000

08009cb4 <HAL_PWREx_DisablePVM1>:
  * @brief Disable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM1(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 8009cb4:	4a02      	ldr	r2, [pc, #8]	; (8009cc0 <HAL_PWREx_DisablePVM1+0xc>)
 8009cb6:	6853      	ldr	r3, [r2, #4]
 8009cb8:	f023 0310 	bic.w	r3, r3, #16
 8009cbc:	6053      	str	r3, [r2, #4]
}
 8009cbe:	4770      	bx	lr
 8009cc0:	40007000 	.word	0x40007000

08009cc4 <HAL_PWREx_EnablePVM2>:
  * @brief Enable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_EnablePVM2(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_2);
 8009cc4:	4a02      	ldr	r2, [pc, #8]	; (8009cd0 <HAL_PWREx_EnablePVM2+0xc>)
 8009cc6:	6853      	ldr	r3, [r2, #4]
 8009cc8:	f043 0320 	orr.w	r3, r3, #32
 8009ccc:	6053      	str	r3, [r2, #4]
}
 8009cce:	4770      	bx	lr
 8009cd0:	40007000 	.word	0x40007000

08009cd4 <HAL_PWREx_DisablePVM2>:
  * @brief Disable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_DisablePVM2(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_2);
 8009cd4:	4a02      	ldr	r2, [pc, #8]	; (8009ce0 <HAL_PWREx_DisablePVM2+0xc>)
 8009cd6:	6853      	ldr	r3, [r2, #4]
 8009cd8:	f023 0320 	bic.w	r3, r3, #32
 8009cdc:	6053      	str	r3, [r2, #4]
}
 8009cde:	4770      	bx	lr
 8009ce0:	40007000 	.word	0x40007000

08009ce4 <HAL_PWREx_EnablePVM3>:
  * @brief Enable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_EnablePVM3(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_3);
 8009ce4:	4a02      	ldr	r2, [pc, #8]	; (8009cf0 <HAL_PWREx_EnablePVM3+0xc>)
 8009ce6:	6853      	ldr	r3, [r2, #4]
 8009ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cec:	6053      	str	r3, [r2, #4]
}
 8009cee:	4770      	bx	lr
 8009cf0:	40007000 	.word	0x40007000

08009cf4 <HAL_PWREx_DisablePVM3>:
  * @brief Disable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_DisablePVM3(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_3);
 8009cf4:	4a02      	ldr	r2, [pc, #8]	; (8009d00 <HAL_PWREx_DisablePVM3+0xc>)
 8009cf6:	6853      	ldr	r3, [r2, #4]
 8009cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cfc:	6053      	str	r3, [r2, #4]
}
 8009cfe:	4770      	bx	lr
 8009d00:	40007000 	.word	0x40007000

08009d04 <HAL_PWREx_EnablePVM4>:
  * @brief Enable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM4(void)
{
  SET_BIT(PWR->CR2, PWR_PVM_4);
 8009d04:	4a02      	ldr	r2, [pc, #8]	; (8009d10 <HAL_PWREx_EnablePVM4+0xc>)
 8009d06:	6853      	ldr	r3, [r2, #4]
 8009d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d0c:	6053      	str	r3, [r2, #4]
}
 8009d0e:	4770      	bx	lr
 8009d10:	40007000 	.word	0x40007000

08009d14 <HAL_PWREx_DisablePVM4>:
  * @brief Disable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM4(void)
{
  CLEAR_BIT(PWR->CR2, PWR_PVM_4);
 8009d14:	4a02      	ldr	r2, [pc, #8]	; (8009d20 <HAL_PWREx_DisablePVM4+0xc>)
 8009d16:	6853      	ldr	r3, [r2, #4]
 8009d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d1c:	6053      	str	r3, [r2, #4]
}
 8009d1e:	4770      	bx	lr
 8009d20:	40007000 	.word	0x40007000

08009d24 <HAL_PWREx_ConfigPVM>:


  /* Configure EXTI 35 to 38 interrupts if so required:
     scan thru PVMType to detect which PVMx is set and
     configure the corresponding EXTI line accordingly. */
  switch (sConfigPVM->PVMType)
 8009d24:	6803      	ldr	r3, [r0, #0]
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	d078      	beq.n	8009e1c <HAL_PWREx_ConfigPVM+0xf8>
 8009d2a:	d93d      	bls.n	8009da8 <HAL_PWREx_ConfigPVM+0x84>
 8009d2c:	2b40      	cmp	r3, #64	; 0x40
 8009d2e:	f000 80ac 	beq.w	8009e8a <HAL_PWREx_ConfigPVM+0x166>
 8009d32:	2b80      	cmp	r3, #128	; 0x80
 8009d34:	f040 80e0 	bne.w	8009ef8 <HAL_PWREx_ConfigPVM+0x1d4>
      }
      break;

    case PWR_PVM_4:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM4_EXTI_DISABLE_EVENT();
 8009d38:	4b74      	ldr	r3, [pc, #464]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d40:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM4_EXTI_DISABLE_IT();
 8009d42:	6a1a      	ldr	r2, [r3, #32]
 8009d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d48:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM4_EXTI_DISABLE_FALLING_EDGE();
 8009d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d50:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM4_EXTI_DISABLE_RISING_EDGE();
 8009d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8009d5a:	6843      	ldr	r3, [r0, #4]
 8009d5c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009d60:	d004      	beq.n	8009d6c <HAL_PWREx_ConfigPVM+0x48>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_IT();
 8009d62:	4a6a      	ldr	r2, [pc, #424]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009d64:	6a13      	ldr	r3, [r2, #32]
 8009d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d6a:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8009d6c:	6843      	ldr	r3, [r0, #4]
 8009d6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009d72:	d004      	beq.n	8009d7e <HAL_PWREx_ConfigPVM+0x5a>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
 8009d74:	4a65      	ldr	r2, [pc, #404]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009d76:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d7c:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8009d7e:	6843      	ldr	r3, [r0, #4]
 8009d80:	f013 0f01 	tst.w	r3, #1
 8009d84:	d004      	beq.n	8009d90 <HAL_PWREx_ConfigPVM+0x6c>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
 8009d86:	4a61      	ldr	r2, [pc, #388]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009d88:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d8e:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8009d90:	6843      	ldr	r3, [r0, #4]
 8009d92:	f013 0f02 	tst.w	r3, #2
 8009d96:	f000 80b7 	beq.w	8009f08 <HAL_PWREx_ConfigPVM+0x1e4>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
 8009d9a:	4a5c      	ldr	r2, [pc, #368]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009d9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da2:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8009da4:	2000      	movs	r0, #0
 8009da6:	4770      	bx	lr
  switch (sConfigPVM->PVMType)
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	f040 80a5 	bne.w	8009ef8 <HAL_PWREx_ConfigPVM+0x1d4>
      __HAL_PWR_PVM1_EXTI_DISABLE_EVENT();
 8009dae:	4b57      	ldr	r3, [pc, #348]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009db2:	f022 0208 	bic.w	r2, r2, #8
 8009db6:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM1_EXTI_DISABLE_IT();
 8009db8:	6a1a      	ldr	r2, [r3, #32]
 8009dba:	f022 0208 	bic.w	r2, r2, #8
 8009dbe:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM1_EXTI_DISABLE_FALLING_EDGE();
 8009dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc2:	f022 0208 	bic.w	r2, r2, #8
 8009dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM1_EXTI_DISABLE_RISING_EDGE();
 8009dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dca:	f022 0208 	bic.w	r2, r2, #8
 8009dce:	629a      	str	r2, [r3, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8009dd0:	6843      	ldr	r3, [r0, #4]
 8009dd2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009dd6:	d004      	beq.n	8009de2 <HAL_PWREx_ConfigPVM+0xbe>
        __HAL_PWR_PVM1_EXTI_ENABLE_IT();
 8009dd8:	4a4c      	ldr	r2, [pc, #304]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009dda:	6a13      	ldr	r3, [r2, #32]
 8009ddc:	f043 0308 	orr.w	r3, r3, #8
 8009de0:	6213      	str	r3, [r2, #32]
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8009de2:	6843      	ldr	r3, [r0, #4]
 8009de4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009de8:	d004      	beq.n	8009df4 <HAL_PWREx_ConfigPVM+0xd0>
        __HAL_PWR_PVM1_EXTI_ENABLE_EVENT();
 8009dea:	4a48      	ldr	r2, [pc, #288]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009dec:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009dee:	f043 0308 	orr.w	r3, r3, #8
 8009df2:	6253      	str	r3, [r2, #36]	; 0x24
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8009df4:	6843      	ldr	r3, [r0, #4]
 8009df6:	f013 0f01 	tst.w	r3, #1
 8009dfa:	d004      	beq.n	8009e06 <HAL_PWREx_ConfigPVM+0xe2>
        __HAL_PWR_PVM1_EXTI_ENABLE_RISING_EDGE();
 8009dfc:	4a43      	ldr	r2, [pc, #268]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009dfe:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009e00:	f043 0308 	orr.w	r3, r3, #8
 8009e04:	6293      	str	r3, [r2, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8009e06:	6843      	ldr	r3, [r0, #4]
 8009e08:	f013 0f02 	tst.w	r3, #2
 8009e0c:	d076      	beq.n	8009efc <HAL_PWREx_ConfigPVM+0x1d8>
        __HAL_PWR_PVM1_EXTI_ENABLE_FALLING_EDGE();
 8009e0e:	4a3f      	ldr	r2, [pc, #252]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009e10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e12:	f043 0308 	orr.w	r3, r3, #8
 8009e16:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8009e18:	2000      	movs	r0, #0
 8009e1a:	4770      	bx	lr
      __HAL_PWR_PVM2_EXTI_DISABLE_EVENT();
 8009e1c:	4b3b      	ldr	r3, [pc, #236]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e20:	f022 0210 	bic.w	r2, r2, #16
 8009e24:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM2_EXTI_DISABLE_IT();
 8009e26:	6a1a      	ldr	r2, [r3, #32]
 8009e28:	f022 0210 	bic.w	r2, r2, #16
 8009e2c:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM2_EXTI_DISABLE_FALLING_EDGE();
 8009e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e30:	f022 0210 	bic.w	r2, r2, #16
 8009e34:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM2_EXTI_DISABLE_RISING_EDGE();
 8009e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e38:	f022 0210 	bic.w	r2, r2, #16
 8009e3c:	629a      	str	r2, [r3, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8009e3e:	6843      	ldr	r3, [r0, #4]
 8009e40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009e44:	d004      	beq.n	8009e50 <HAL_PWREx_ConfigPVM+0x12c>
        __HAL_PWR_PVM2_EXTI_ENABLE_IT();
 8009e46:	4a31      	ldr	r2, [pc, #196]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009e48:	6a13      	ldr	r3, [r2, #32]
 8009e4a:	f043 0310 	orr.w	r3, r3, #16
 8009e4e:	6213      	str	r3, [r2, #32]
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8009e50:	6843      	ldr	r3, [r0, #4]
 8009e52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009e56:	d004      	beq.n	8009e62 <HAL_PWREx_ConfigPVM+0x13e>
        __HAL_PWR_PVM2_EXTI_ENABLE_EVENT();
 8009e58:	4a2c      	ldr	r2, [pc, #176]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009e5a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009e5c:	f043 0310 	orr.w	r3, r3, #16
 8009e60:	6253      	str	r3, [r2, #36]	; 0x24
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8009e62:	6843      	ldr	r3, [r0, #4]
 8009e64:	f013 0f01 	tst.w	r3, #1
 8009e68:	d004      	beq.n	8009e74 <HAL_PWREx_ConfigPVM+0x150>
        __HAL_PWR_PVM2_EXTI_ENABLE_RISING_EDGE();
 8009e6a:	4a28      	ldr	r2, [pc, #160]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009e6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009e6e:	f043 0310 	orr.w	r3, r3, #16
 8009e72:	6293      	str	r3, [r2, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8009e74:	6843      	ldr	r3, [r0, #4]
 8009e76:	f013 0f02 	tst.w	r3, #2
 8009e7a:	d041      	beq.n	8009f00 <HAL_PWREx_ConfigPVM+0x1dc>
        __HAL_PWR_PVM2_EXTI_ENABLE_FALLING_EDGE();
 8009e7c:	4a23      	ldr	r2, [pc, #140]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009e7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e80:	f043 0310 	orr.w	r3, r3, #16
 8009e84:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8009e86:	2000      	movs	r0, #0
 8009e88:	4770      	bx	lr
      __HAL_PWR_PVM3_EXTI_DISABLE_EVENT();
 8009e8a:	4b20      	ldr	r3, [pc, #128]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e8e:	f022 0220 	bic.w	r2, r2, #32
 8009e92:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_PWR_PVM3_EXTI_DISABLE_IT();
 8009e94:	6a1a      	ldr	r2, [r3, #32]
 8009e96:	f022 0220 	bic.w	r2, r2, #32
 8009e9a:	621a      	str	r2, [r3, #32]
      __HAL_PWR_PVM3_EXTI_DISABLE_FALLING_EDGE();
 8009e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9e:	f022 0220 	bic.w	r2, r2, #32
 8009ea2:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_PWR_PVM3_EXTI_DISABLE_RISING_EDGE();
 8009ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ea6:	f022 0220 	bic.w	r2, r2, #32
 8009eaa:	629a      	str	r2, [r3, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8009eac:	6843      	ldr	r3, [r0, #4]
 8009eae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009eb2:	d004      	beq.n	8009ebe <HAL_PWREx_ConfigPVM+0x19a>
        __HAL_PWR_PVM3_EXTI_ENABLE_IT();
 8009eb4:	4a15      	ldr	r2, [pc, #84]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009eb6:	6a13      	ldr	r3, [r2, #32]
 8009eb8:	f043 0320 	orr.w	r3, r3, #32
 8009ebc:	6213      	str	r3, [r2, #32]
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8009ebe:	6843      	ldr	r3, [r0, #4]
 8009ec0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009ec4:	d004      	beq.n	8009ed0 <HAL_PWREx_ConfigPVM+0x1ac>
        __HAL_PWR_PVM3_EXTI_ENABLE_EVENT();
 8009ec6:	4a11      	ldr	r2, [pc, #68]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009ec8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009eca:	f043 0320 	orr.w	r3, r3, #32
 8009ece:	6253      	str	r3, [r2, #36]	; 0x24
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8009ed0:	6843      	ldr	r3, [r0, #4]
 8009ed2:	f013 0f01 	tst.w	r3, #1
 8009ed6:	d004      	beq.n	8009ee2 <HAL_PWREx_ConfigPVM+0x1be>
        __HAL_PWR_PVM3_EXTI_ENABLE_RISING_EDGE();
 8009ed8:	4a0c      	ldr	r2, [pc, #48]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009eda:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009edc:	f043 0320 	orr.w	r3, r3, #32
 8009ee0:	6293      	str	r3, [r2, #40]	; 0x28
      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8009ee2:	6843      	ldr	r3, [r0, #4]
 8009ee4:	f013 0f02 	tst.w	r3, #2
 8009ee8:	d00c      	beq.n	8009f04 <HAL_PWREx_ConfigPVM+0x1e0>
        __HAL_PWR_PVM3_EXTI_ENABLE_FALLING_EDGE();
 8009eea:	4a08      	ldr	r2, [pc, #32]	; (8009f0c <HAL_PWREx_ConfigPVM+0x1e8>)
 8009eec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009eee:	f043 0320 	orr.w	r3, r3, #32
 8009ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	4770      	bx	lr
      }
      break;

    default:
      status = HAL_ERROR;
 8009ef8:	2001      	movs	r0, #1
 8009efa:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8009efc:	2000      	movs	r0, #0
 8009efe:	4770      	bx	lr
 8009f00:	2000      	movs	r0, #0
 8009f02:	4770      	bx	lr
 8009f04:	2000      	movs	r0, #0
 8009f06:	4770      	bx	lr
 8009f08:	2000      	movs	r0, #0
      break;
  }

  return status;
}
 8009f0a:	4770      	bx	lr
 8009f0c:	40010400 	.word	0x40010400

08009f10 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8009f10:	4a02      	ldr	r2, [pc, #8]	; (8009f1c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8009f12:	6813      	ldr	r3, [r2, #0]
 8009f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f18:	6013      	str	r3, [r2, #0]
}
 8009f1a:	4770      	bx	lr
 8009f1c:	40007000 	.word	0x40007000

08009f20 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8009f20:	4a12      	ldr	r2, [pc, #72]	; (8009f6c <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8009f22:	6813      	ldr	r3, [r2, #0]
 8009f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f28:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009f2a:	4b11      	ldr	r3, [pc, #68]	; (8009f70 <HAL_PWREx_DisableLowPowerRunMode+0x50>)
 8009f2c:	6819      	ldr	r1, [r3, #0]
 8009f2e:	2332      	movs	r3, #50	; 0x32
 8009f30:	fb03 f301 	mul.w	r3, r3, r1
 8009f34:	490f      	ldr	r1, [pc, #60]	; (8009f74 <HAL_PWREx_DisableLowPowerRunMode+0x54>)
 8009f36:	fba1 1303 	umull	r1, r3, r1, r3
 8009f3a:	0c9b      	lsrs	r3, r3, #18
 8009f3c:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8009f3e:	6952      	ldr	r2, [r2, #20]
 8009f40:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009f44:	d008      	beq.n	8009f58 <HAL_PWREx_DisableLowPowerRunMode+0x38>
 8009f46:	b13b      	cbz	r3, 8009f58 <HAL_PWREx_DisableLowPowerRunMode+0x38>
 8009f48:	4908      	ldr	r1, [pc, #32]	; (8009f6c <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
  {
    wait_loop_index--;
 8009f4a:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8009f4c:	694a      	ldr	r2, [r1, #20]
 8009f4e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009f52:	d001      	beq.n	8009f58 <HAL_PWREx_DisableLowPowerRunMode+0x38>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1f8      	bne.n	8009f4a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8009f58:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8009f5a:	695b      	ldr	r3, [r3, #20]
 8009f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8009f60:	2b00      	cmp	r3, #0
}
 8009f62:	bf14      	ite	ne
 8009f64:	2003      	movne	r0, #3
 8009f66:	2000      	moveq	r0, #0
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	40007000 	.word	0x40007000
 8009f70:	20000008 	.word	0x20000008
 8009f74:	431bde83 	.word	0x431bde83

08009f78 <HAL_PWREx_EnterSTOP0Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8009f78:	4a0b      	ldr	r2, [pc, #44]	; (8009fa8 <HAL_PWREx_EnterSTOP0Mode+0x30>)
 8009f7a:	6813      	ldr	r3, [r2, #0]
 8009f7c:	f023 0307 	bic.w	r3, r3, #7
 8009f80:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009f82:	4a0a      	ldr	r2, [pc, #40]	; (8009fac <HAL_PWREx_EnterSTOP0Mode+0x34>)
 8009f84:	6913      	ldr	r3, [r2, #16]
 8009f86:	f043 0304 	orr.w	r3, r3, #4
 8009f8a:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009f8c:	2801      	cmp	r0, #1
 8009f8e:	d008      	beq.n	8009fa2 <HAL_PWREx_EnterSTOP0Mode+0x2a>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009f90:	bf40      	sev
    __WFE();
 8009f92:	bf20      	wfe
    __WFE();
 8009f94:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009f96:	4a05      	ldr	r2, [pc, #20]	; (8009fac <HAL_PWREx_EnterSTOP0Mode+0x34>)
 8009f98:	6913      	ldr	r3, [r2, #16]
 8009f9a:	f023 0304 	bic.w	r3, r3, #4
 8009f9e:	6113      	str	r3, [r2, #16]
}
 8009fa0:	4770      	bx	lr
    __WFI();
 8009fa2:	bf30      	wfi
 8009fa4:	e7f7      	b.n	8009f96 <HAL_PWREx_EnterSTOP0Mode+0x1e>
 8009fa6:	bf00      	nop
 8009fa8:	40007000 	.word	0x40007000
 8009fac:	e000ed00 	.word	0xe000ed00

08009fb0 <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8009fb0:	4a0c      	ldr	r2, [pc, #48]	; (8009fe4 <HAL_PWREx_EnterSTOP1Mode+0x34>)
 8009fb2:	6813      	ldr	r3, [r2, #0]
 8009fb4:	f023 0307 	bic.w	r3, r3, #7
 8009fb8:	f043 0301 	orr.w	r3, r3, #1
 8009fbc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009fbe:	4a0a      	ldr	r2, [pc, #40]	; (8009fe8 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 8009fc0:	6913      	ldr	r3, [r2, #16]
 8009fc2:	f043 0304 	orr.w	r3, r3, #4
 8009fc6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009fc8:	2801      	cmp	r0, #1
 8009fca:	d008      	beq.n	8009fde <HAL_PWREx_EnterSTOP1Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009fcc:	bf40      	sev
    __WFE();
 8009fce:	bf20      	wfe
    __WFE();
 8009fd0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009fd2:	4a05      	ldr	r2, [pc, #20]	; (8009fe8 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 8009fd4:	6913      	ldr	r3, [r2, #16]
 8009fd6:	f023 0304 	bic.w	r3, r3, #4
 8009fda:	6113      	str	r3, [r2, #16]
}
 8009fdc:	4770      	bx	lr
    __WFI();
 8009fde:	bf30      	wfi
 8009fe0:	e7f7      	b.n	8009fd2 <HAL_PWREx_EnterSTOP1Mode+0x22>
 8009fe2:	bf00      	nop
 8009fe4:	40007000 	.word	0x40007000
 8009fe8:	e000ed00 	.word	0xe000ed00

08009fec <HAL_PWREx_EnterSTOP2Mode>:
{
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8009fec:	4a0c      	ldr	r2, [pc, #48]	; (800a020 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8009fee:	6813      	ldr	r3, [r2, #0]
 8009ff0:	f023 0307 	bic.w	r3, r3, #7
 8009ff4:	f043 0302 	orr.w	r3, r3, #2
 8009ff8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009ffa:	4a0a      	ldr	r2, [pc, #40]	; (800a024 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8009ffc:	6913      	ldr	r3, [r2, #16]
 8009ffe:	f043 0304 	orr.w	r3, r3, #4
 800a002:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800a004:	2801      	cmp	r0, #1
 800a006:	d008      	beq.n	800a01a <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a008:	bf40      	sev
    __WFE();
 800a00a:	bf20      	wfe
    __WFE();
 800a00c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a00e:	4a05      	ldr	r2, [pc, #20]	; (800a024 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800a010:	6913      	ldr	r3, [r2, #16]
 800a012:	f023 0304 	bic.w	r3, r3, #4
 800a016:	6113      	str	r3, [r2, #16]
}
 800a018:	4770      	bx	lr
    __WFI();
 800a01a:	bf30      	wfi
 800a01c:	e7f7      	b.n	800a00e <HAL_PWREx_EnterSTOP2Mode+0x22>
 800a01e:	bf00      	nop
 800a020:	40007000 	.word	0x40007000
 800a024:	e000ed00 	.word	0xe000ed00

0800a028 <HAL_PWREx_EnterSHUTDOWNMode>:
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 800a028:	4a06      	ldr	r2, [pc, #24]	; (800a044 <HAL_PWREx_EnterSHUTDOWNMode+0x1c>)
 800a02a:	6813      	ldr	r3, [r2, #0]
 800a02c:	f023 0307 	bic.w	r3, r3, #7
 800a030:	f043 0304 	orr.w	r3, r3, #4
 800a034:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a036:	4a04      	ldr	r2, [pc, #16]	; (800a048 <HAL_PWREx_EnterSHUTDOWNMode+0x20>)
 800a038:	6913      	ldr	r3, [r2, #16]
 800a03a:	f043 0304 	orr.w	r3, r3, #4
 800a03e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800a040:	bf30      	wfi
}
 800a042:	4770      	bx	lr
 800a044:	40007000 	.word	0x40007000
 800a048:	e000ed00 	.word	0xe000ed00

0800a04c <HAL_PWREx_PVM1Callback>:
__weak void HAL_PWREx_PVM1Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800a04c:	4770      	bx	lr

0800a04e <HAL_PWREx_PVM2Callback>:
__weak void HAL_PWREx_PVM2Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800a04e:	4770      	bx	lr

0800a050 <HAL_PWREx_PVM3Callback>:
__weak void HAL_PWREx_PVM3Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800a050:	4770      	bx	lr

0800a052 <HAL_PWREx_PVM4Callback>:
__weak void HAL_PWREx_PVM4Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800a052:	4770      	bx	lr

0800a054 <HAL_PWREx_PVD_PVM_IRQHandler>:
{
 800a054:	b508      	push	{r3, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800a056:	4b1c      	ldr	r3, [pc, #112]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a05e:	d114      	bne.n	800a08a <HAL_PWREx_PVD_PVM_IRQHandler+0x36>
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 800a060:	4b19      	ldr	r3, [pc, #100]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a064:	f013 0f08 	tst.w	r3, #8
 800a068:	d116      	bne.n	800a098 <HAL_PWREx_PVD_PVM_IRQHandler+0x44>
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800a06a:	4b17      	ldr	r3, [pc, #92]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06e:	f013 0f10 	tst.w	r3, #16
 800a072:	d117      	bne.n	800a0a4 <HAL_PWREx_PVD_PVM_IRQHandler+0x50>
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800a074:	4b14      	ldr	r3, [pc, #80]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a078:	f013 0f20 	tst.w	r3, #32
 800a07c:	d118      	bne.n	800a0b0 <HAL_PWREx_PVD_PVM_IRQHandler+0x5c>
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800a07e:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a082:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a086:	d119      	bne.n	800a0bc <HAL_PWREx_PVD_PVM_IRQHandler+0x68>
}
 800a088:	bd08      	pop	{r3, pc}
    HAL_PWR_PVDCallback();
 800a08a:	f7ff fbf5 	bl	8009878 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800a08e:	4b0e      	ldr	r3, [pc, #56]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a090:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a094:	615a      	str	r2, [r3, #20]
 800a096:	e7e3      	b.n	800a060 <HAL_PWREx_PVD_PVM_IRQHandler+0xc>
    HAL_PWREx_PVM1Callback();
 800a098:	f7ff ffd8 	bl	800a04c <HAL_PWREx_PVM1Callback>
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800a09c:	4b0a      	ldr	r3, [pc, #40]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a09e:	2208      	movs	r2, #8
 800a0a0:	635a      	str	r2, [r3, #52]	; 0x34
 800a0a2:	e7e2      	b.n	800a06a <HAL_PWREx_PVD_PVM_IRQHandler+0x16>
    HAL_PWREx_PVM2Callback();
 800a0a4:	f7ff ffd3 	bl	800a04e <HAL_PWREx_PVM2Callback>
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800a0a8:	4b07      	ldr	r3, [pc, #28]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a0aa:	2210      	movs	r2, #16
 800a0ac:	635a      	str	r2, [r3, #52]	; 0x34
 800a0ae:	e7e1      	b.n	800a074 <HAL_PWREx_PVD_PVM_IRQHandler+0x20>
    HAL_PWREx_PVM3Callback();
 800a0b0:	f7ff ffce 	bl	800a050 <HAL_PWREx_PVM3Callback>
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800a0b4:	4b04      	ldr	r3, [pc, #16]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	635a      	str	r2, [r3, #52]	; 0x34
 800a0ba:	e7e0      	b.n	800a07e <HAL_PWREx_PVD_PVM_IRQHandler+0x2a>
    HAL_PWREx_PVM4Callback();
 800a0bc:	f7ff ffc9 	bl	800a052 <HAL_PWREx_PVM4Callback>
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800a0c0:	4b01      	ldr	r3, [pc, #4]	; (800a0c8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>)
 800a0c2:	2240      	movs	r2, #64	; 0x40
 800a0c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a0c6:	e7df      	b.n	800a088 <HAL_PWREx_PVD_PVM_IRQHandler+0x34>
 800a0c8:	40010400 	.word	0x40010400

0800a0cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a0cc:	b530      	push	{r4, r5, lr}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a0d2:	4b1e      	ldr	r3, [pc, #120]	; (800a14c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800a0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800a0da:	d00c      	beq.n	800a0f6 <RCC_SetFlashLatencyFromMSIRange+0x2a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a0dc:	f7ff fbce 	bl	800987c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a0e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a0e4:	d018      	beq.n	800a118 <RCC_SetFlashLatencyFromMSIRange+0x4c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a0e6:	2c80      	cmp	r4, #128	; 0x80
 800a0e8:	d81f      	bhi.n	800a12a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a0ea:	d02d      	beq.n	800a148 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a0ec:	2c70      	cmp	r4, #112	; 0x70
 800a0ee:	bf14      	ite	ne
 800a0f0:	2400      	movne	r4, #0
 800a0f2:	2401      	moveq	r4, #1
 800a0f4:	e01a      	b.n	800a12c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800a0f6:	4d15      	ldr	r5, [pc, #84]	; (800a14c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800a0f8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a0fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0fe:	65ab      	str	r3, [r5, #88]	; 0x58
 800a100:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800a10a:	f7ff fbb7 	bl	800987c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800a10e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a114:	65ab      	str	r3, [r5, #88]	; 0x58
 800a116:	e7e3      	b.n	800a0e0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800a118:	2c80      	cmp	r4, #128	; 0x80
 800a11a:	d904      	bls.n	800a126 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 800a11c:	2ca0      	cmp	r4, #160	; 0xa0
 800a11e:	bf8c      	ite	hi
 800a120:	2402      	movhi	r4, #2
 800a122:	2401      	movls	r4, #1
 800a124:	e002      	b.n	800a12c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a126:	2400      	movs	r4, #0
 800a128:	e000      	b.n	800a12c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800a12a:	2403      	movs	r4, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a12c:	4908      	ldr	r1, [pc, #32]	; (800a150 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800a12e:	680b      	ldr	r3, [r1, #0]
 800a130:	f023 0307 	bic.w	r3, r3, #7
 800a134:	4323      	orrs	r3, r4
 800a136:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a138:	6808      	ldr	r0, [r1, #0]
 800a13a:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800a13e:	1b00      	subs	r0, r0, r4
 800a140:	bf18      	it	ne
 800a142:	2001      	movne	r0, #1
 800a144:	b003      	add	sp, #12
 800a146:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 800a148:	2402      	movs	r4, #2
 800a14a:	e7ef      	b.n	800a12c <RCC_SetFlashLatencyFromMSIRange+0x60>
 800a14c:	40021000 	.word	0x40021000
 800a150:	40022000 	.word	0x40022000

0800a154 <HAL_RCC_DeInit>:
{
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a156:	4a37      	ldr	r2, [pc, #220]	; (800a234 <HAL_RCC_DeInit+0xe0>)
 800a158:	6813      	ldr	r3, [r2, #0]
 800a15a:	f043 0301 	orr.w	r3, r3, #1
 800a15e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800a160:	f7fa fb94 	bl	800488c <HAL_GetTick>
 800a164:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a166:	4c33      	ldr	r4, [pc, #204]	; (800a234 <HAL_RCC_DeInit+0xe0>)
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	f013 0f02 	tst.w	r3, #2
 800a16e:	d107      	bne.n	800a180 <HAL_RCC_DeInit+0x2c>
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a170:	f7fa fb8c 	bl	800488c <HAL_GetTick>
 800a174:	1b40      	subs	r0, r0, r5
 800a176:	2802      	cmp	r0, #2
 800a178:	d9f6      	bls.n	800a168 <HAL_RCC_DeInit+0x14>
      return HAL_TIMEOUT;
 800a17a:	2403      	movs	r4, #3
}
 800a17c:	4620      	mov	r0, r4
 800a17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 800a180:	4a2c      	ldr	r2, [pc, #176]	; (800a234 <HAL_RCC_DeInit+0xe0>)
 800a182:	6813      	ldr	r3, [r2, #0]
 800a184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a188:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a18c:	6013      	str	r3, [r2, #0]
  CLEAR_REG(RCC->CFGR);
 800a18e:	2300      	movs	r3, #0
 800a190:	6093      	str	r3, [r2, #8]
  SystemCoreClock = MSI_VALUE;
 800a192:	4b29      	ldr	r3, [pc, #164]	; (800a238 <HAL_RCC_DeInit+0xe4>)
 800a194:	4a29      	ldr	r2, [pc, #164]	; (800a23c <HAL_RCC_DeInit+0xe8>)
 800a196:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800a198:	4b29      	ldr	r3, [pc, #164]	; (800a240 <HAL_RCC_DeInit+0xec>)
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	f7fa fb2c 	bl	80047f8 <HAL_InitTick>
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	b108      	cbz	r0, 800a1a8 <HAL_RCC_DeInit+0x54>
    return HAL_ERROR;
 800a1a4:	2401      	movs	r4, #1
 800a1a6:	e7e9      	b.n	800a17c <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 800a1a8:	f7fa fb70 	bl	800488c <HAL_GetTick>
 800a1ac:	4607      	mov	r7, r0
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800a1ae:	4d21      	ldr	r5, [pc, #132]	; (800a234 <HAL_RCC_DeInit+0xe0>)
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1b0:	f241 3688 	movw	r6, #5000	; 0x1388
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800a1b4:	68ab      	ldr	r3, [r5, #8]
 800a1b6:	f013 0f0c 	tst.w	r3, #12
 800a1ba:	d006      	beq.n	800a1ca <HAL_RCC_DeInit+0x76>
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1bc:	f7fa fb66 	bl	800488c <HAL_GetTick>
 800a1c0:	1bc0      	subs	r0, r0, r7
 800a1c2:	42b0      	cmp	r0, r6
 800a1c4:	d9f6      	bls.n	800a1b4 <HAL_RCC_DeInit+0x60>
      return HAL_TIMEOUT;
 800a1c6:	2403      	movs	r4, #3
 800a1c8:	e7d8      	b.n	800a17c <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 800a1ca:	4a1a      	ldr	r2, [pc, #104]	; (800a234 <HAL_RCC_DeInit+0xe0>)
 800a1cc:	6811      	ldr	r1, [r2, #0]
 800a1ce:	4b1d      	ldr	r3, [pc, #116]	; (800a244 <HAL_RCC_DeInit+0xf0>)
 800a1d0:	400b      	ands	r3, r1
 800a1d2:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800a1d4:	f7fa fb5a 	bl	800488c <HAL_GetTick>
 800a1d8:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 800a1da:	4d16      	ldr	r5, [pc, #88]	; (800a234 <HAL_RCC_DeInit+0xe0>)
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	f013 5f28 	tst.w	r3, #704643072	; 0x2a000000
 800a1e2:	d006      	beq.n	800a1f2 <HAL_RCC_DeInit+0x9e>
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1e4:	f7fa fb52 	bl	800488c <HAL_GetTick>
 800a1e8:	1b80      	subs	r0, r0, r6
 800a1ea:	2802      	cmp	r0, #2
 800a1ec:	d9f6      	bls.n	800a1dc <HAL_RCC_DeInit+0x88>
      return HAL_TIMEOUT;
 800a1ee:	2403      	movs	r4, #3
 800a1f0:	e7c4      	b.n	800a17c <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->PLLCFGR);
 800a1f2:	4b10      	ldr	r3, [pc, #64]	; (800a234 <HAL_RCC_DeInit+0xe0>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 800a1f8:	68d9      	ldr	r1, [r3, #12]
 800a1fa:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a1fe:	60d9      	str	r1, [r3, #12]
  CLEAR_REG(RCC->PLLSAI1CFGR);
 800a200:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 800a202:	6919      	ldr	r1, [r3, #16]
 800a204:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a208:	6119      	str	r1, [r3, #16]
  CLEAR_REG(RCC->PLLSAI2CFGR);
 800a20a:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 800a20c:	6959      	ldr	r1, [r3, #20]
 800a20e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a212:	6159      	str	r1, [r3, #20]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800a214:	6819      	ldr	r1, [r3, #0]
 800a216:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800a21a:	6019      	str	r1, [r3, #0]
  CLEAR_REG(RCC->CIER);
 800a21c:	619a      	str	r2, [r3, #24]
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800a21e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a222:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800a224:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a228:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a22c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return HAL_OK;
 800a230:	e7a4      	b.n	800a17c <HAL_RCC_DeInit+0x28>
 800a232:	bf00      	nop
 800a234:	40021000 	.word	0x40021000
 800a238:	20000008 	.word	0x20000008
 800a23c:	003d0900 	.word	0x003d0900
 800a240:	20000010 	.word	0x20000010
 800a244:	eafef4ff 	.word	0xeafef4ff

0800a248 <HAL_RCC_MCOConfig>:
{
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	460d      	mov	r5, r1
 800a24e:	4616      	mov	r6, r2
  __MCO1_CLK_ENABLE();
 800a250:	4c0f      	ldr	r4, [pc, #60]	; (800a290 <HAL_RCC_MCOConfig+0x48>)
 800a252:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a254:	f043 0301 	orr.w	r3, r3, #1
 800a258:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a25a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = MCO1_PIN;
 800a264:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a268:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a26a:	2302      	movs	r3, #2
 800a26c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a26e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a270:	2300      	movs	r3, #0
 800a272:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a274:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a276:	a901      	add	r1, sp, #4
 800a278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a27c:	f7fb ff32 	bl	80060e4 <HAL_GPIO_Init>
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 800a280:	68a1      	ldr	r1, [r4, #8]
 800a282:	f021 41ee 	bic.w	r1, r1, #1996488704	; 0x77000000
 800a286:	4331      	orrs	r1, r6
 800a288:	4329      	orrs	r1, r5
 800a28a:	60a1      	str	r1, [r4, #8]
}
 800a28c:	b006      	add	sp, #24
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	40021000 	.word	0x40021000

0800a294 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a294:	4a25      	ldr	r2, [pc, #148]	; (800a32c <HAL_RCC_GetSysClockFreq+0x98>)
 800a296:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a298:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a29a:	f013 030c 	ands.w	r3, r3, #12
 800a29e:	d00e      	beq.n	800a2be <HAL_RCC_GetSysClockFreq+0x2a>
 800a2a0:	2b0c      	cmp	r3, #12
 800a2a2:	d006      	beq.n	800a2b2 <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d03f      	beq.n	800a328 <HAL_RCC_GetSysClockFreq+0x94>
 800a2a8:	2b08      	cmp	r3, #8
 800a2aa:	4821      	ldr	r0, [pc, #132]	; (800a330 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a2ac:	bf18      	it	ne
 800a2ae:	2000      	movne	r0, #0
 800a2b0:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a2b2:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a2b6:	2a01      	cmp	r2, #1
 800a2b8:	d001      	beq.n	800a2be <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e012      	b.n	800a2e4 <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a2be:	4a1b      	ldr	r2, [pc, #108]	; (800a32c <HAL_RCC_GetSysClockFreq+0x98>)
 800a2c0:	6812      	ldr	r2, [r2, #0]
 800a2c2:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a2c6:	4a19      	ldr	r2, [pc, #100]	; (800a32c <HAL_RCC_GetSysClockFreq+0x98>)
 800a2c8:	bf07      	ittee	eq
 800a2ca:	f8d2 2094 	ldreq.w	r2, [r2, #148]	; 0x94
 800a2ce:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a2d2:	6812      	ldrne	r2, [r2, #0]
 800a2d4:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800a2d8:	4916      	ldr	r1, [pc, #88]	; (800a334 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a2da:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a2de:	b323      	cbz	r3, 800a32a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a2e0:	2b0c      	cmp	r3, #12
 800a2e2:	d11f      	bne.n	800a324 <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a2e4:	4b11      	ldr	r3, [pc, #68]	; (800a32c <HAL_RCC_GetSysClockFreq+0x98>)
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d017      	beq.n	800a320 <HAL_RCC_GetSysClockFreq+0x8c>
      pllvco = HSE_VALUE;
 800a2f0:	4a0f      	ldr	r2, [pc, #60]	; (800a330 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	bf08      	it	eq
 800a2f6:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <HAL_RCC_GetSysClockFreq+0x98>)
 800a2fa:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a2fc:	68d9      	ldr	r1, [r3, #12]
 800a2fe:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800a302:	fb00 f001 	mul.w	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a306:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a308:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800a30c:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a30e:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a312:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800a316:	3301      	adds	r3, #1
 800a318:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 800a31a:	fbb0 f0f3 	udiv	r0, r0, r3
 800a31e:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800a320:	4805      	ldr	r0, [pc, #20]	; (800a338 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a322:	e7e9      	b.n	800a2f8 <HAL_RCC_GetSysClockFreq+0x64>
 800a324:	2000      	movs	r0, #0
  return sysclockfreq;
 800a326:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800a328:	4803      	ldr	r0, [pc, #12]	; (800a338 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800a32a:	4770      	bx	lr
 800a32c:	40021000 	.word	0x40021000
 800a330:	007a1200 	.word	0x007a1200
 800a334:	080144b8 	.word	0x080144b8
 800a338:	00f42400 	.word	0x00f42400

0800a33c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f000 82db 	beq.w	800a8f8 <HAL_RCC_OscConfig+0x5bc>
{
 800a342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a346:	b083      	sub	sp, #12
 800a348:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a34a:	4bad      	ldr	r3, [pc, #692]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a34c:	689d      	ldr	r5, [r3, #8]
 800a34e:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a352:	68de      	ldr	r6, [r3, #12]
 800a354:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a358:	6803      	ldr	r3, [r0, #0]
 800a35a:	f013 0f10 	tst.w	r3, #16
 800a35e:	d062      	beq.n	800a426 <HAL_RCC_OscConfig+0xea>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a360:	b1ed      	cbz	r5, 800a39e <HAL_RCC_OscConfig+0x62>
 800a362:	2d0c      	cmp	r5, #12
 800a364:	d019      	beq.n	800a39a <HAL_RCC_OscConfig+0x5e>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a366:	69a3      	ldr	r3, [r4, #24]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 80b6 	beq.w	800a4da <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_MSI_ENABLE();
 800a36e:	4aa4      	ldr	r2, [pc, #656]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a370:	6813      	ldr	r3, [r2, #0]
 800a372:	f043 0301 	orr.w	r3, r3, #1
 800a376:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a378:	f7fa fa88 	bl	800488c <HAL_GetTick>
 800a37c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a37e:	4fa0      	ldr	r7, [pc, #640]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	f013 0f02 	tst.w	r3, #2
 800a386:	f040 8095 	bne.w	800a4b4 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a38a:	f7fa fa7f 	bl	800488c <HAL_GetTick>
 800a38e:	eba0 0008 	sub.w	r0, r0, r8
 800a392:	2802      	cmp	r0, #2
 800a394:	d9f4      	bls.n	800a380 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800a396:	2303      	movs	r3, #3
 800a398:	e2ba      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a39a:	2e01      	cmp	r6, #1
 800a39c:	d1e3      	bne.n	800a366 <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a39e:	4b98      	ldr	r3, [pc, #608]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f013 0f02 	tst.w	r3, #2
 800a3a6:	d003      	beq.n	800a3b0 <HAL_RCC_OscConfig+0x74>
 800a3a8:	69a3      	ldr	r3, [r4, #24]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 82a7 	beq.w	800a8fe <HAL_RCC_OscConfig+0x5c2>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a3b0:	6a20      	ldr	r0, [r4, #32]
 800a3b2:	4b93      	ldr	r3, [pc, #588]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f013 0f08 	tst.w	r3, #8
 800a3ba:	4b91      	ldr	r3, [pc, #580]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a3bc:	bf12      	itee	ne
 800a3be:	681b      	ldrne	r3, [r3, #0]
 800a3c0:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 800a3c4:	091b      	lsreq	r3, r3, #4
 800a3c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3ca:	4298      	cmp	r0, r3
 800a3cc:	d959      	bls.n	800a482 <HAL_RCC_OscConfig+0x146>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a3ce:	f7ff fe7d 	bl	800a0cc <RCC_SetFlashLatencyFromMSIRange>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	f040 8295 	bne.w	800a902 <HAL_RCC_OscConfig+0x5c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3d8:	4b89      	ldr	r3, [pc, #548]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	f042 0208 	orr.w	r2, r2, #8
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a3e8:	6a21      	ldr	r1, [r4, #32]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	69e1      	ldr	r1, [r4, #28]
 800a3f2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a3f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a3fa:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a3fc:	f7ff ff4a 	bl	800a294 <HAL_RCC_GetSysClockFreq>
 800a400:	4b7f      	ldr	r3, [pc, #508]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a408:	4a7e      	ldr	r2, [pc, #504]	; (800a604 <HAL_RCC_OscConfig+0x2c8>)
 800a40a:	5cd3      	ldrb	r3, [r2, r3]
 800a40c:	f003 031f 	and.w	r3, r3, #31
 800a410:	40d8      	lsrs	r0, r3
 800a412:	4b7d      	ldr	r3, [pc, #500]	; (800a608 <HAL_RCC_OscConfig+0x2cc>)
 800a414:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800a416:	4b7d      	ldr	r3, [pc, #500]	; (800a60c <HAL_RCC_OscConfig+0x2d0>)
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	f7fa f9ed 	bl	80047f8 <HAL_InitTick>
        if(status != HAL_OK)
 800a41e:	4603      	mov	r3, r0
 800a420:	2800      	cmp	r0, #0
 800a422:	f040 8275 	bne.w	800a910 <HAL_RCC_OscConfig+0x5d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	f013 0f01 	tst.w	r3, #1
 800a42c:	d075      	beq.n	800a51a <HAL_RCC_OscConfig+0x1de>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a42e:	2d08      	cmp	r5, #8
 800a430:	d06a      	beq.n	800a508 <HAL_RCC_OscConfig+0x1cc>
 800a432:	2d0c      	cmp	r5, #12
 800a434:	d066      	beq.n	800a504 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a436:	6863      	ldr	r3, [r4, #4]
 800a438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a43c:	f000 808c 	beq.w	800a558 <HAL_RCC_OscConfig+0x21c>
 800a440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a444:	f000 808e 	beq.w	800a564 <HAL_RCC_OscConfig+0x228>
 800a448:	4b6d      	ldr	r3, [pc, #436]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a458:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a45a:	6863      	ldr	r3, [r4, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 808e 	beq.w	800a57e <HAL_RCC_OscConfig+0x242>
        tickstart = HAL_GetTick();
 800a462:	f7fa fa13 	bl	800488c <HAL_GetTick>
 800a466:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a468:	4f65      	ldr	r7, [pc, #404]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a470:	d153      	bne.n	800a51a <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a472:	f7fa fa0b 	bl	800488c <HAL_GetTick>
 800a476:	eba0 0008 	sub.w	r0, r0, r8
 800a47a:	2864      	cmp	r0, #100	; 0x64
 800a47c:	d9f5      	bls.n	800a46a <HAL_RCC_OscConfig+0x12e>
            return HAL_TIMEOUT;
 800a47e:	2303      	movs	r3, #3
 800a480:	e246      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a482:	4b5f      	ldr	r3, [pc, #380]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	f042 0208 	orr.w	r2, r2, #8
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a492:	6a21      	ldr	r1, [r4, #32]
 800a494:	430a      	orrs	r2, r1
 800a496:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	69e1      	ldr	r1, [r4, #28]
 800a49c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a4a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a4a4:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a4a6:	6a20      	ldr	r0, [r4, #32]
 800a4a8:	f7ff fe10 	bl	800a0cc <RCC_SetFlashLatencyFromMSIRange>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d0a5      	beq.n	800a3fc <HAL_RCC_OscConfig+0xc0>
            return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e22d      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4b4:	4b52      	ldr	r3, [pc, #328]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	f042 0208 	orr.w	r2, r2, #8
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a4c4:	6a21      	ldr	r1, [r4, #32]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	69e1      	ldr	r1, [r4, #28]
 800a4ce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a4d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a4d6:	605a      	str	r2, [r3, #4]
 800a4d8:	e7a5      	b.n	800a426 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 800a4da:	4a49      	ldr	r2, [pc, #292]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a4dc:	6813      	ldr	r3, [r2, #0]
 800a4de:	f023 0301 	bic.w	r3, r3, #1
 800a4e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a4e4:	f7fa f9d2 	bl	800488c <HAL_GetTick>
 800a4e8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a4ea:	4f45      	ldr	r7, [pc, #276]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f013 0f02 	tst.w	r3, #2
 800a4f2:	d098      	beq.n	800a426 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a4f4:	f7fa f9ca 	bl	800488c <HAL_GetTick>
 800a4f8:	eba0 0008 	sub.w	r0, r0, r8
 800a4fc:	2802      	cmp	r0, #2
 800a4fe:	d9f5      	bls.n	800a4ec <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 800a500:	2303      	movs	r3, #3
 800a502:	e205      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a504:	2e03      	cmp	r6, #3
 800a506:	d196      	bne.n	800a436 <HAL_RCC_OscConfig+0xfa>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a508:	4b3d      	ldr	r3, [pc, #244]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a510:	d003      	beq.n	800a51a <HAL_RCC_OscConfig+0x1de>
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 81f6 	beq.w	800a906 <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	f013 0f02 	tst.w	r3, #2
 800a520:	d050      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x288>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a522:	2d04      	cmp	r5, #4
 800a524:	d03d      	beq.n	800a5a2 <HAL_RCC_OscConfig+0x266>
 800a526:	2d0c      	cmp	r5, #12
 800a528:	d039      	beq.n	800a59e <HAL_RCC_OscConfig+0x262>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a52a:	68e3      	ldr	r3, [r4, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d078      	beq.n	800a622 <HAL_RCC_OscConfig+0x2e6>
        __HAL_RCC_HSI_ENABLE();
 800a530:	4a33      	ldr	r2, [pc, #204]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a532:	6813      	ldr	r3, [r2, #0]
 800a534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a538:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a53a:	f7fa f9a7 	bl	800488c <HAL_GetTick>
 800a53e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a540:	4e2f      	ldr	r6, [pc, #188]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a542:	6833      	ldr	r3, [r6, #0]
 800a544:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a548:	d162      	bne.n	800a610 <HAL_RCC_OscConfig+0x2d4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a54a:	f7fa f99f 	bl	800488c <HAL_GetTick>
 800a54e:	1bc0      	subs	r0, r0, r7
 800a550:	2802      	cmp	r0, #2
 800a552:	d9f6      	bls.n	800a542 <HAL_RCC_OscConfig+0x206>
            return HAL_TIMEOUT;
 800a554:	2303      	movs	r3, #3
 800a556:	e1db      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a558:	4a29      	ldr	r2, [pc, #164]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a55a:	6813      	ldr	r3, [r2, #0]
 800a55c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	e77a      	b.n	800a45a <HAL_RCC_OscConfig+0x11e>
 800a564:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a568:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	e76d      	b.n	800a45a <HAL_RCC_OscConfig+0x11e>
        tickstart = HAL_GetTick();
 800a57e:	f7fa f985 	bl	800488c <HAL_GetTick>
 800a582:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a584:	4f1e      	ldr	r7, [pc, #120]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a58c:	d0c5      	beq.n	800a51a <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a58e:	f7fa f97d 	bl	800488c <HAL_GetTick>
 800a592:	eba0 0008 	sub.w	r0, r0, r8
 800a596:	2864      	cmp	r0, #100	; 0x64
 800a598:	d9f5      	bls.n	800a586 <HAL_RCC_OscConfig+0x24a>
            return HAL_TIMEOUT;
 800a59a:	2303      	movs	r3, #3
 800a59c:	e1b8      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a59e:	2e02      	cmp	r6, #2
 800a5a0:	d1c3      	bne.n	800a52a <HAL_RCC_OscConfig+0x1ee>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5a2:	4b17      	ldr	r3, [pc, #92]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a5aa:	d003      	beq.n	800a5b4 <HAL_RCC_OscConfig+0x278>
 800a5ac:	68e3      	ldr	r3, [r4, #12]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f000 81ab 	beq.w	800a90a <HAL_RCC_OscConfig+0x5ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5b4:	4a12      	ldr	r2, [pc, #72]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a5b6:	6853      	ldr	r3, [r2, #4]
 800a5b8:	6921      	ldr	r1, [r4, #16]
 800a5ba:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800a5be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a5c2:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	f013 0f08 	tst.w	r3, #8
 800a5ca:	d055      	beq.n	800a678 <HAL_RCC_OscConfig+0x33c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a5cc:	6963      	ldr	r3, [r4, #20]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d03b      	beq.n	800a64a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 800a5d2:	4a0b      	ldr	r2, [pc, #44]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a5d4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a5d8:	f043 0301 	orr.w	r3, r3, #1
 800a5dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a5e0:	f7fa f954 	bl	800488c <HAL_GetTick>
 800a5e4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a5e6:	4e06      	ldr	r6, [pc, #24]	; (800a600 <HAL_RCC_OscConfig+0x2c4>)
 800a5e8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800a5ec:	f013 0f02 	tst.w	r3, #2
 800a5f0:	d142      	bne.n	800a678 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5f2:	f7fa f94b 	bl	800488c <HAL_GetTick>
 800a5f6:	1bc0      	subs	r0, r0, r7
 800a5f8:	2802      	cmp	r0, #2
 800a5fa:	d9f5      	bls.n	800a5e8 <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e187      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
 800a600:	40021000 	.word	0x40021000
 800a604:	080144a0 	.word	0x080144a0
 800a608:	20000008 	.word	0x20000008
 800a60c:	20000010 	.word	0x20000010
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a610:	4ab6      	ldr	r2, [pc, #728]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a612:	6853      	ldr	r3, [r2, #4]
 800a614:	6921      	ldr	r1, [r4, #16]
 800a616:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800a61a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a61e:	6053      	str	r3, [r2, #4]
 800a620:	e7d0      	b.n	800a5c4 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_HSI_DISABLE();
 800a622:	4ab2      	ldr	r2, [pc, #712]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a624:	6813      	ldr	r3, [r2, #0]
 800a626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a62a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a62c:	f7fa f92e 	bl	800488c <HAL_GetTick>
 800a630:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a632:	4eae      	ldr	r6, [pc, #696]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a634:	6833      	ldr	r3, [r6, #0]
 800a636:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a63a:	d0c3      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x288>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a63c:	f7fa f926 	bl	800488c <HAL_GetTick>
 800a640:	1bc0      	subs	r0, r0, r7
 800a642:	2802      	cmp	r0, #2
 800a644:	d9f6      	bls.n	800a634 <HAL_RCC_OscConfig+0x2f8>
            return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e162      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_LSI_DISABLE();
 800a64a:	4aa8      	ldr	r2, [pc, #672]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a64c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a650:	f023 0301 	bic.w	r3, r3, #1
 800a654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a658:	f7fa f918 	bl	800488c <HAL_GetTick>
 800a65c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a65e:	4ea3      	ldr	r6, [pc, #652]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a660:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800a664:	f013 0f02 	tst.w	r3, #2
 800a668:	d006      	beq.n	800a678 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a66a:	f7fa f90f 	bl	800488c <HAL_GetTick>
 800a66e:	1bc0      	subs	r0, r0, r7
 800a670:	2802      	cmp	r0, #2
 800a672:	d9f5      	bls.n	800a660 <HAL_RCC_OscConfig+0x324>
          return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e14b      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	f013 0f04 	tst.w	r3, #4
 800a67e:	d07d      	beq.n	800a77c <HAL_RCC_OscConfig+0x440>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a680:	4b9a      	ldr	r3, [pc, #616]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a684:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800a688:	d10b      	bne.n	800a6a2 <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a68a:	4b98      	ldr	r3, [pc, #608]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a68c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a68e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a692:	659a      	str	r2, [r3, #88]	; 0x58
 800a694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a69e:	2601      	movs	r6, #1
 800a6a0:	e000      	b.n	800a6a4 <HAL_RCC_OscConfig+0x368>
    FlagStatus       pwrclkchanged = RESET;
 800a6a2:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6a4:	4b92      	ldr	r3, [pc, #584]	; (800a8f0 <HAL_RCC_OscConfig+0x5b4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a6ac:	d027      	beq.n	800a6fe <HAL_RCC_OscConfig+0x3c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d039      	beq.n	800a728 <HAL_RCC_OscConfig+0x3ec>
 800a6b4:	2b05      	cmp	r3, #5
 800a6b6:	d03f      	beq.n	800a738 <HAL_RCC_OscConfig+0x3fc>
 800a6b8:	4b8c      	ldr	r3, [pc, #560]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a6ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a6be:	f022 0201 	bic.w	r2, r2, #1
 800a6c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a6c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a6ca:	f022 0204 	bic.w	r2, r2, #4
 800a6ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6d2:	68a3      	ldr	r3, [r4, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d03d      	beq.n	800a754 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800a6d8:	f7fa f8d8 	bl	800488c <HAL_GetTick>
 800a6dc:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6de:	4f83      	ldr	r7, [pc, #524]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6e0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6e8:	f013 0f02 	tst.w	r3, #2
 800a6ec:	d145      	bne.n	800a77a <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ee:	f7fa f8cd 	bl	800488c <HAL_GetTick>
 800a6f2:	eba0 0009 	sub.w	r0, r0, r9
 800a6f6:	4540      	cmp	r0, r8
 800a6f8:	d9f4      	bls.n	800a6e4 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e108      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a6fe:	4a7c      	ldr	r2, [pc, #496]	; (800a8f0 <HAL_RCC_OscConfig+0x5b4>)
 800a700:	6813      	ldr	r3, [r2, #0]
 800a702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a706:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a708:	f7fa f8c0 	bl	800488c <HAL_GetTick>
 800a70c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a70e:	4f78      	ldr	r7, [pc, #480]	; (800a8f0 <HAL_RCC_OscConfig+0x5b4>)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a716:	d1ca      	bne.n	800a6ae <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a718:	f7fa f8b8 	bl	800488c <HAL_GetTick>
 800a71c:	eba0 0008 	sub.w	r0, r0, r8
 800a720:	2802      	cmp	r0, #2
 800a722:	d9f5      	bls.n	800a710 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e0f3      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a728:	4a70      	ldr	r2, [pc, #448]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a72a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a72e:	f043 0301 	orr.w	r3, r3, #1
 800a732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a736:	e7cc      	b.n	800a6d2 <HAL_RCC_OscConfig+0x396>
 800a738:	4b6c      	ldr	r3, [pc, #432]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a73a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a73e:	f042 0204 	orr.w	r2, r2, #4
 800a742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a746:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a74a:	f042 0201 	orr.w	r2, r2, #1
 800a74e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a752:	e7be      	b.n	800a6d2 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800a754:	f7fa f89a 	bl	800488c <HAL_GetTick>
 800a758:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a75a:	4f64      	ldr	r7, [pc, #400]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a75c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a764:	f013 0f02 	tst.w	r3, #2
 800a768:	d007      	beq.n	800a77a <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a76a:	f7fa f88f 	bl	800488c <HAL_GetTick>
 800a76e:	eba0 0009 	sub.w	r0, r0, r9
 800a772:	4540      	cmp	r0, r8
 800a774:	d9f4      	bls.n	800a760 <HAL_RCC_OscConfig+0x424>
          return HAL_TIMEOUT;
 800a776:	2303      	movs	r3, #3
 800a778:	e0ca      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
    if(pwrclkchanged == SET)
 800a77a:	bb5e      	cbnz	r6, 800a7d4 <HAL_RCC_OscConfig+0x498>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a77c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 80c5 	beq.w	800a90e <HAL_RCC_OscConfig+0x5d2>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a784:	2d0c      	cmp	r5, #12
 800a786:	d076      	beq.n	800a876 <HAL_RCC_OscConfig+0x53a>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d029      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x4a4>
        __HAL_RCC_PLL_DISABLE();
 800a78c:	4b57      	ldr	r3, [pc, #348]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a794:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 800a79c:	d104      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a79e:	4a53      	ldr	r2, [pc, #332]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a7a0:	68d3      	ldr	r3, [r2, #12]
 800a7a2:	f023 0303 	bic.w	r3, r3, #3
 800a7a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a7a8:	4a50      	ldr	r2, [pc, #320]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a7aa:	68d3      	ldr	r3, [r2, #12]
 800a7ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a7b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7b4:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800a7b6:	f7fa f869 	bl	800488c <HAL_GetTick>
 800a7ba:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7bc:	4c4b      	ldr	r4, [pc, #300]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a7c4:	d055      	beq.n	800a872 <HAL_RCC_OscConfig+0x536>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7c6:	f7fa f861 	bl	800488c <HAL_GetTick>
 800a7ca:	1b40      	subs	r0, r0, r5
 800a7cc:	2802      	cmp	r0, #2
 800a7ce:	d9f6      	bls.n	800a7be <HAL_RCC_OscConfig+0x482>
            return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e09d      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7d4:	4a45      	ldr	r2, [pc, #276]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a7d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a7d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7dc:	6593      	str	r3, [r2, #88]	; 0x58
 800a7de:	e7cd      	b.n	800a77c <HAL_RCC_OscConfig+0x440>
        __HAL_RCC_PLL_DISABLE();
 800a7e0:	4a42      	ldr	r2, [pc, #264]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a7e2:	6813      	ldr	r3, [r2, #0]
 800a7e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a7ea:	f7fa f84f 	bl	800488c <HAL_GetTick>
 800a7ee:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7f0:	4d3e      	ldr	r5, [pc, #248]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a7f2:	682b      	ldr	r3, [r5, #0]
 800a7f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a7f8:	d006      	beq.n	800a808 <HAL_RCC_OscConfig+0x4cc>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7fa:	f7fa f847 	bl	800488c <HAL_GetTick>
 800a7fe:	1b80      	subs	r0, r0, r6
 800a800:	2802      	cmp	r0, #2
 800a802:	d9f6      	bls.n	800a7f2 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	e083      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a808:	4a38      	ldr	r2, [pc, #224]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a80a:	68d1      	ldr	r1, [r2, #12]
 800a80c:	4b39      	ldr	r3, [pc, #228]	; (800a8f4 <HAL_RCC_OscConfig+0x5b8>)
 800a80e:	400b      	ands	r3, r1
 800a810:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a812:	430b      	orrs	r3, r1
 800a814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a816:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a81a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a81c:	3901      	subs	r1, #1
 800a81e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800a822:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a824:	0909      	lsrs	r1, r1, #4
 800a826:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800a82a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a82c:	0849      	lsrs	r1, r1, #1
 800a82e:	3901      	subs	r1, #1
 800a830:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800a834:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a836:	0849      	lsrs	r1, r1, #1
 800a838:	3901      	subs	r1, #1
 800a83a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a83e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800a840:	6813      	ldr	r3, [r2, #0]
 800a842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a846:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a848:	68d3      	ldr	r3, [r2, #12]
 800a84a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a84e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800a850:	f7fa f81c 	bl	800488c <HAL_GetTick>
 800a854:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a856:	4c25      	ldr	r4, [pc, #148]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a85e:	d106      	bne.n	800a86e <HAL_RCC_OscConfig+0x532>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a860:	f7fa f814 	bl	800488c <HAL_GetTick>
 800a864:	1b40      	subs	r0, r0, r5
 800a866:	2802      	cmp	r0, #2
 800a868:	d9f6      	bls.n	800a858 <HAL_RCC_OscConfig+0x51c>
            return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e050      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	e04e      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
 800a872:	2300      	movs	r3, #0
 800a874:	e04c      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a876:	2b01      	cmp	r3, #1
 800a878:	d04e      	beq.n	800a918 <HAL_RCC_OscConfig+0x5dc>
        pll_config = RCC->PLLCFGR;
 800a87a:	4b1c      	ldr	r3, [pc, #112]	; (800a8ec <HAL_RCC_OscConfig+0x5b0>)
 800a87c:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a87e:	f003 0103 	and.w	r1, r3, #3
 800a882:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a884:	4291      	cmp	r1, r2
 800a886:	d001      	beq.n	800a88c <HAL_RCC_OscConfig+0x550>
          return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e041      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a88c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a890:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a892:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a894:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800a898:	d001      	beq.n	800a89e <HAL_RCC_OscConfig+0x562>
          return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e038      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a89e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a8a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a8a4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800a8a8:	d001      	beq.n	800a8ae <HAL_RCC_OscConfig+0x572>
          return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e030      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a8ae:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800a8b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a8b4:	3a07      	subs	r2, #7
 800a8b6:	bf18      	it	ne
 800a8b8:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a8ba:	4291      	cmp	r1, r2
 800a8bc:	d001      	beq.n	800a8c2 <HAL_RCC_OscConfig+0x586>
          return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e026      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a8c2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800a8c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a8c8:	0852      	lsrs	r2, r2, #1
 800a8ca:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a8cc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800a8d0:	d001      	beq.n	800a8d6 <HAL_RCC_OscConfig+0x59a>
          return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e01c      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a8d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a8d8:	0852      	lsrs	r2, r2, #1
 800a8da:	3a01      	subs	r2, #1
 800a8dc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a8e0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800a8e4:	bf14      	ite	ne
 800a8e6:	2301      	movne	r3, #1
 800a8e8:	2300      	moveq	r3, #0
 800a8ea:	e011      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
 800a8ec:	40021000 	.word	0x40021000
 800a8f0:	40007000 	.word	0x40007000
 800a8f4:	f99d808c 	.word	0xf99d808c
 800a8f8:	2301      	movs	r3, #1
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	4770      	bx	lr
        return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e006      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
            return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e004      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e002      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e000      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>
  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	b003      	add	sp, #12
 800a914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e7f9      	b.n	800a910 <HAL_RCC_OscConfig+0x5d4>

0800a91c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800a91c:	2800      	cmp	r0, #0
 800a91e:	f000 809e 	beq.w	800aa5e <HAL_RCC_ClockConfig+0x142>
{
 800a922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a926:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a928:	4b4f      	ldr	r3, [pc, #316]	; (800aa68 <HAL_RCC_ClockConfig+0x14c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 0307 	and.w	r3, r3, #7
 800a930:	428b      	cmp	r3, r1
 800a932:	d20d      	bcs.n	800a950 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a934:	4a4c      	ldr	r2, [pc, #304]	; (800aa68 <HAL_RCC_ClockConfig+0x14c>)
 800a936:	6813      	ldr	r3, [r2, #0]
 800a938:	f023 0307 	bic.w	r3, r3, #7
 800a93c:	430b      	orrs	r3, r1
 800a93e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a940:	6813      	ldr	r3, [r2, #0]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	428b      	cmp	r3, r1
 800a948:	d002      	beq.n	800a950 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
 800a94a:	2001      	movs	r0, #1
}
 800a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a950:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	f013 0f01 	tst.w	r3, #1
 800a958:	d03a      	beq.n	800a9d0 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a95a:	6863      	ldr	r3, [r4, #4]
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d009      	beq.n	800a974 <HAL_RCC_ClockConfig+0x58>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a960:	2b02      	cmp	r3, #2
 800a962:	d027      	beq.n	800a9b4 <HAL_RCC_ClockConfig+0x98>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a964:	bb6b      	cbnz	r3, 800a9c2 <HAL_RCC_ClockConfig+0xa6>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a966:	4a41      	ldr	r2, [pc, #260]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
 800a968:	6812      	ldr	r2, [r2, #0]
 800a96a:	f012 0f02 	tst.w	r2, #2
 800a96e:	d106      	bne.n	800a97e <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 800a970:	2001      	movs	r0, #1
 800a972:	e7eb      	b.n	800a94c <HAL_RCC_ClockConfig+0x30>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a974:	4a3d      	ldr	r2, [pc, #244]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
 800a976:	6812      	ldr	r2, [r2, #0]
 800a978:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800a97c:	d071      	beq.n	800aa62 <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a97e:	493b      	ldr	r1, [pc, #236]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
 800a980:	688a      	ldr	r2, [r1, #8]
 800a982:	f022 0203 	bic.w	r2, r2, #3
 800a986:	4313      	orrs	r3, r2
 800a988:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a98a:	f7f9 ff7f 	bl	800488c <HAL_GetTick>
 800a98e:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a990:	4e36      	ldr	r6, [pc, #216]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a992:	f241 3788 	movw	r7, #5000	; 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a996:	68b3      	ldr	r3, [r6, #8]
 800a998:	f003 030c 	and.w	r3, r3, #12
 800a99c:	6862      	ldr	r2, [r4, #4]
 800a99e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a9a2:	d015      	beq.n	800a9d0 <HAL_RCC_ClockConfig+0xb4>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9a4:	f7f9 ff72 	bl	800488c <HAL_GetTick>
 800a9a8:	eba0 0008 	sub.w	r0, r0, r8
 800a9ac:	42b8      	cmp	r0, r7
 800a9ae:	d9f2      	bls.n	800a996 <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 800a9b0:	2003      	movs	r0, #3
 800a9b2:	e7cb      	b.n	800a94c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9b4:	4a2d      	ldr	r2, [pc, #180]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
 800a9b6:	6812      	ldr	r2, [r2, #0]
 800a9b8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800a9bc:	d1df      	bne.n	800a97e <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 800a9be:	2001      	movs	r0, #1
 800a9c0:	e7c4      	b.n	800a94c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a9c2:	4a2a      	ldr	r2, [pc, #168]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a9ca:	d1d8      	bne.n	800a97e <HAL_RCC_ClockConfig+0x62>
          return HAL_ERROR;
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	e7bd      	b.n	800a94c <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	f013 0f02 	tst.w	r3, #2
 800a9d6:	d006      	beq.n	800a9e6 <HAL_RCC_ClockConfig+0xca>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9d8:	4a24      	ldr	r2, [pc, #144]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
 800a9da:	6893      	ldr	r3, [r2, #8]
 800a9dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9e0:	68a1      	ldr	r1, [r4, #8]
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9e6:	4b20      	ldr	r3, [pc, #128]	; (800aa68 <HAL_RCC_ClockConfig+0x14c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	42ab      	cmp	r3, r5
 800a9f0:	d90c      	bls.n	800aa0c <HAL_RCC_ClockConfig+0xf0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9f2:	4a1d      	ldr	r2, [pc, #116]	; (800aa68 <HAL_RCC_ClockConfig+0x14c>)
 800a9f4:	6813      	ldr	r3, [r2, #0]
 800a9f6:	f023 0307 	bic.w	r3, r3, #7
 800a9fa:	432b      	orrs	r3, r5
 800a9fc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9fe:	6813      	ldr	r3, [r2, #0]
 800aa00:	f003 0307 	and.w	r3, r3, #7
 800aa04:	42ab      	cmp	r3, r5
 800aa06:	d001      	beq.n	800aa0c <HAL_RCC_ClockConfig+0xf0>
      return HAL_ERROR;
 800aa08:	2001      	movs	r0, #1
 800aa0a:	e79f      	b.n	800a94c <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	f013 0f04 	tst.w	r3, #4
 800aa12:	d006      	beq.n	800aa22 <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa14:	4a15      	ldr	r2, [pc, #84]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
 800aa16:	6893      	ldr	r3, [r2, #8]
 800aa18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800aa1c:	68e1      	ldr	r1, [r4, #12]
 800aa1e:	430b      	orrs	r3, r1
 800aa20:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	f013 0f08 	tst.w	r3, #8
 800aa28:	d007      	beq.n	800aa3a <HAL_RCC_ClockConfig+0x11e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa2a:	4a10      	ldr	r2, [pc, #64]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
 800aa2c:	6893      	ldr	r3, [r2, #8]
 800aa2e:	6921      	ldr	r1, [r4, #16]
 800aa30:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800aa34:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800aa38:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aa3a:	f7ff fc2b 	bl	800a294 <HAL_RCC_GetSysClockFreq>
 800aa3e:	4b0b      	ldr	r3, [pc, #44]	; (800aa6c <HAL_RCC_ClockConfig+0x150>)
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800aa46:	4a0a      	ldr	r2, [pc, #40]	; (800aa70 <HAL_RCC_ClockConfig+0x154>)
 800aa48:	5cd3      	ldrb	r3, [r2, r3]
 800aa4a:	f003 031f 	and.w	r3, r3, #31
 800aa4e:	40d8      	lsrs	r0, r3
 800aa50:	4b08      	ldr	r3, [pc, #32]	; (800aa74 <HAL_RCC_ClockConfig+0x158>)
 800aa52:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800aa54:	4b08      	ldr	r3, [pc, #32]	; (800aa78 <HAL_RCC_ClockConfig+0x15c>)
 800aa56:	6818      	ldr	r0, [r3, #0]
 800aa58:	f7f9 fece 	bl	80047f8 <HAL_InitTick>
  return status;
 800aa5c:	e776      	b.n	800a94c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800aa5e:	2001      	movs	r0, #1
}
 800aa60:	4770      	bx	lr
        return HAL_ERROR;
 800aa62:	2001      	movs	r0, #1
 800aa64:	e772      	b.n	800a94c <HAL_RCC_ClockConfig+0x30>
 800aa66:	bf00      	nop
 800aa68:	40022000 	.word	0x40022000
 800aa6c:	40021000 	.word	0x40021000
 800aa70:	080144a0 	.word	0x080144a0
 800aa74:	20000008 	.word	0x20000008
 800aa78:	20000010 	.word	0x20000010

0800aa7c <HAL_RCC_GetHCLKFreq>:
}
 800aa7c:	4b01      	ldr	r3, [pc, #4]	; (800aa84 <HAL_RCC_GetHCLKFreq+0x8>)
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	20000008 	.word	0x20000008

0800aa88 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800aa88:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800aa90:	4a04      	ldr	r2, [pc, #16]	; (800aaa4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800aa92:	5cd3      	ldrb	r3, [r2, r3]
 800aa94:	f003 031f 	and.w	r3, r3, #31
 800aa98:	4a03      	ldr	r2, [pc, #12]	; (800aaa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa9a:	6810      	ldr	r0, [r2, #0]
}
 800aa9c:	40d8      	lsrs	r0, r3
 800aa9e:	4770      	bx	lr
 800aaa0:	40021000 	.word	0x40021000
 800aaa4:	080144b0 	.word	0x080144b0
 800aaa8:	20000008 	.word	0x20000008

0800aaac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800aab4:	4a04      	ldr	r2, [pc, #16]	; (800aac8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800aab6:	5cd3      	ldrb	r3, [r2, r3]
 800aab8:	f003 031f 	and.w	r3, r3, #31
 800aabc:	4a03      	ldr	r2, [pc, #12]	; (800aacc <HAL_RCC_GetPCLK2Freq+0x20>)
 800aabe:	6810      	ldr	r0, [r2, #0]
}
 800aac0:	40d8      	lsrs	r0, r3
 800aac2:	4770      	bx	lr
 800aac4:	40021000 	.word	0x40021000
 800aac8:	080144b0 	.word	0x080144b0
 800aacc:	20000008 	.word	0x20000008

0800aad0 <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 800aad0:	231f      	movs	r3, #31
 800aad2:	6003      	str	r3, [r0, #0]
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800aad4:	4b3c      	ldr	r3, [pc, #240]	; (800abc8 <HAL_RCC_GetOscConfig+0xf8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800aadc:	d05f      	beq.n	800ab9e <HAL_RCC_GetOscConfig+0xce>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800aade:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800aae2:	6043      	str	r3, [r0, #4]
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 800aae4:	4b38      	ldr	r3, [pc, #224]	; (800abc8 <HAL_RCC_GetOscConfig+0xf8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f013 0f01 	tst.w	r3, #1
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 800aaec:	bf14      	ite	ne
 800aaee:	2301      	movne	r3, #1
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 800aaf0:	2300      	moveq	r3, #0
 800aaf2:	6183      	str	r3, [r0, #24]
  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 800aaf4:	4b34      	ldr	r3, [pc, #208]	; (800abc8 <HAL_RCC_GetOscConfig+0xf8>)
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800aafc:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ab04:	6202      	str	r2, [r0, #32]
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f413 7f80 	tst.w	r3, #256	; 0x100
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800ab0c:	bf14      	ite	ne
 800ab0e:	f44f 7380 	movne.w	r3, #256	; 0x100
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800ab12:	2300      	moveq	r3, #0
 800ab14:	60c3      	str	r3, [r0, #12]
  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 800ab16:	4a2c      	ldr	r2, [pc, #176]	; (800abc8 <HAL_RCC_GetOscConfig+0xf8>)
 800ab18:	6853      	ldr	r3, [r2, #4]
 800ab1a:	f3c3 6304 	ubfx	r3, r3, #24, #5
 800ab1e:	6103      	str	r3, [r0, #16]
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 800ab20:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800ab24:	f013 0f04 	tst.w	r3, #4
 800ab28:	d043      	beq.n	800abb2 <HAL_RCC_GetOscConfig+0xe2>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800ab2a:	2305      	movs	r3, #5
 800ab2c:	6083      	str	r3, [r0, #8]
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 800ab2e:	4b26      	ldr	r3, [pc, #152]	; (800abc8 <HAL_RCC_GetOscConfig+0xf8>)
 800ab30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab34:	f013 0f01 	tst.w	r3, #1
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800ab38:	bf14      	ite	ne
 800ab3a:	2301      	movne	r3, #1
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800ab3c:	2300      	moveq	r3, #0
 800ab3e:	6143      	str	r3, [r0, #20]
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 800ab40:	2300      	movs	r3, #0
 800ab42:	6243      	str	r3, [r0, #36]	; 0x24
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 800ab44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab48:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800ab52:	bf14      	ite	ne
 800ab54:	2302      	movne	r3, #2
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800ab56:	2301      	moveq	r3, #1
 800ab58:	6283      	str	r3, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ab5a:	4a1b      	ldr	r2, [pc, #108]	; (800abc8 <HAL_RCC_GetOscConfig+0xf8>)
 800ab5c:	68d3      	ldr	r3, [r2, #12]
 800ab5e:	f003 0303 	and.w	r3, r3, #3
 800ab62:	62c3      	str	r3, [r0, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800ab64:	68d3      	ldr	r3, [r2, #12]
 800ab66:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	6303      	str	r3, [r0, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ab6e:	68d3      	ldr	r3, [r2, #12]
 800ab70:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800ab74:	6343      	str	r3, [r0, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800ab76:	68d3      	ldr	r3, [r2, #12]
 800ab78:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	63c3      	str	r3, [r0, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 800ab82:	68d3      	ldr	r3, [r2, #12]
 800ab84:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800ab88:	3301      	adds	r3, #1
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	6403      	str	r3, [r0, #64]	; 0x40
  if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ab8e:	68d3      	ldr	r3, [r2, #12]
 800ab90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 800ab94:	bf14      	ite	ne
 800ab96:	2311      	movne	r3, #17
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
 800ab98:	2307      	moveq	r3, #7
 800ab9a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800ab9c:	4770      	bx	lr
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 800ab9e:	4b0a      	ldr	r3, [pc, #40]	; (800abc8 <HAL_RCC_GetOscConfig+0xf8>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800aba6:	bf14      	ite	ne
 800aba8:	f44f 3380 	movne.w	r3, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800abac:	2300      	moveq	r3, #0
 800abae:	6043      	str	r3, [r0, #4]
 800abb0:	e798      	b.n	800aae4 <HAL_RCC_GetOscConfig+0x14>
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800abb2:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <HAL_RCC_GetOscConfig+0xf8>)
 800abb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abb8:	f013 0f01 	tst.w	r3, #1
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800abbc:	bf14      	ite	ne
 800abbe:	2301      	movne	r3, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 800abc0:	2300      	moveq	r3, #0
 800abc2:	6083      	str	r3, [r0, #8]
 800abc4:	e7b3      	b.n	800ab2e <HAL_RCC_GetOscConfig+0x5e>
 800abc6:	bf00      	nop
 800abc8:	40021000 	.word	0x40021000

0800abcc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800abcc:	230f      	movs	r3, #15
 800abce:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800abd0:	4b0b      	ldr	r3, [pc, #44]	; (800ac00 <HAL_RCC_GetClockConfig+0x34>)
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	f002 0203 	and.w	r2, r2, #3
 800abd8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800abda:	689a      	ldr	r2, [r3, #8]
 800abdc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800abe0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800abe8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	08db      	lsrs	r3, r3, #3
 800abee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abf2:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800abf4:	4b03      	ldr	r3, [pc, #12]	; (800ac04 <HAL_RCC_GetClockConfig+0x38>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	600b      	str	r3, [r1, #0]
}
 800abfe:	4770      	bx	lr
 800ac00:	40021000 	.word	0x40021000
 800ac04:	40022000 	.word	0x40022000

0800ac08 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800ac08:	4a02      	ldr	r2, [pc, #8]	; (800ac14 <HAL_RCC_EnableCSS+0xc>)
 800ac0a:	6813      	ldr	r3, [r2, #0]
 800ac0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac10:	6013      	str	r3, [r2, #0]
}
 800ac12:	4770      	bx	lr
 800ac14:	40021000 	.word	0x40021000

0800ac18 <HAL_RCC_CSSCallback>:
}
 800ac18:	4770      	bx	lr
	...

0800ac1c <HAL_RCC_NMI_IRQHandler>:
{
 800ac1c:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800ac1e:	4b06      	ldr	r3, [pc, #24]	; (800ac38 <HAL_RCC_NMI_IRQHandler+0x1c>)
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ac26:	d100      	bne.n	800ac2a <HAL_RCC_NMI_IRQHandler+0xe>
}
 800ac28:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 800ac2a:	f7ff fff5 	bl	800ac18 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800ac2e:	4b02      	ldr	r3, [pc, #8]	; (800ac38 <HAL_RCC_NMI_IRQHandler+0x1c>)
 800ac30:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac34:	621a      	str	r2, [r3, #32]
}
 800ac36:	e7f7      	b.n	800ac28 <HAL_RCC_NMI_IRQHandler+0xc>
 800ac38:	40021000 	.word	0x40021000

0800ac3c <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac3c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800ac40:	d01d      	beq.n	800ac7e <RCCEx_GetSAIxPeriphCLKFreq+0x42>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800ac42:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ac46:	d043      	beq.n	800acd0 <RCCEx_GetSAIxPeriphCLKFreq+0x94>
        frequency = (pllvco * plln) / pllp;
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800ac48:	4b3d      	ldr	r3, [pc, #244]	; (800ad40 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ac50:	d071      	beq.n	800ad36 <RCCEx_GetSAIxPeriphCLKFreq+0xfa>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ac52:	4b3b      	ldr	r3, [pc, #236]	; (800ad40 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800ac54:	68d8      	ldr	r0, [r3, #12]
 800ac56:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ac60:	6918      	ldr	r0, [r3, #16]
 800ac62:	f3c0 2006 	ubfx	r0, r0, #8, #7
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	bf14      	ite	ne
 800ac70:	2311      	movne	r3, #17
 800ac72:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ac74:	fb00 f001 	mul.w	r0, r0, r1
 800ac78:	fbb0 f0f3 	udiv	r0, r0, r3
 800ac7c:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ac7e:	4b30      	ldr	r3, [pc, #192]	; (800ad40 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800ac80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac84:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800ac88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ac8c:	d04f      	beq.n	800ad2e <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800ac8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac92:	d002      	beq.n	800ac9a <RCCEx_GetSAIxPeriphCLKFreq+0x5e>
 800ac94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac98:	d124      	bne.n	800ace4 <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800ac9a:	4b29      	ldr	r3, [pc, #164]	; (800ad40 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800aca2:	d046      	beq.n	800ad32 <RCCEx_GetSAIxPeriphCLKFreq+0xf6>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aca4:	4b26      	ldr	r3, [pc, #152]	; (800ad40 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800aca6:	68d8      	ldr	r0, [r3, #12]
 800aca8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800acac:	3001      	adds	r0, #1
 800acae:	fbb1 f1f0 	udiv	r1, r1, r0
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800acb2:	68d8      	ldr	r0, [r3, #12]
 800acb4:	f3c0 2006 	ubfx	r0, r0, #8, #7
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
            pllp = 7U;
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bf14      	ite	ne
 800acc2:	2311      	movne	r3, #17
 800acc4:	2307      	moveq	r3, #7
        frequency = (pllvco * plln) / pllp;
 800acc6:	fb00 f001 	mul.w	r0, r0, r1
 800acca:	fbb0 f0f3 	udiv	r0, r0, r3
 800acce:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800acd0:	4b1b      	ldr	r3, [pc, #108]	; (800ad40 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800acd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800acda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acde:	d1d6      	bne.n	800ac8e <RCCEx_GetSAIxPeriphCLKFreq+0x52>
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800ace0:	4818      	ldr	r0, [pc, #96]	; (800ad44 <RCCEx_GetSAIxPeriphCLKFreq+0x108>)
 800ace2:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d0af      	beq.n	800ac48 <RCCEx_GetSAIxPeriphCLKFreq+0xc>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800ace8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acec:	d004      	beq.n	800acf8 <RCCEx_GetSAIxPeriphCLKFreq+0xbc>
 800acee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acf2:	d001      	beq.n	800acf8 <RCCEx_GetSAIxPeriphCLKFreq+0xbc>
 800acf4:	2000      	movs	r0, #0
 800acf6:	4770      	bx	lr
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 800acf8:	4b11      	ldr	r3, [pc, #68]	; (800ad40 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ad00:	d01b      	beq.n	800ad3a <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad02:	4b0f      	ldr	r3, [pc, #60]	; (800ad40 <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 800ad04:	68d8      	ldr	r0, [r3, #12]
 800ad06:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800ad10:	6958      	ldr	r0, [r3, #20]
 800ad12:	f3c0 2006 	ubfx	r0, r0, #8, #7
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bf14      	ite	ne
 800ad20:	2311      	movne	r3, #17
 800ad22:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ad24:	fb00 f001 	mul.w	r0, r0, r1
 800ad28:	fbb0 f0f3 	udiv	r0, r0, r3
 800ad2c:	4770      	bx	lr
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ad2e:	4805      	ldr	r0, [pc, #20]	; (800ad44 <RCCEx_GetSAIxPeriphCLKFreq+0x108>)
 800ad30:	4770      	bx	lr
 800ad32:	2000      	movs	r0, #0
 800ad34:	4770      	bx	lr
 800ad36:	2000      	movs	r0, #0
 800ad38:	4770      	bx	lr
 800ad3a:	2000      	movs	r0, #0
    }
  }


  return frequency;
}
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	40021000 	.word	0x40021000
 800ad44:	001fff68 	.word	0x001fff68

0800ad48 <RCCEx_PLLSAI1_Config>:
{
 800ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ad4a:	4b56      	ldr	r3, [pc, #344]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	f013 0f03 	tst.w	r3, #3
 800ad52:	d014      	beq.n	800ad7e <RCCEx_PLLSAI1_Config+0x36>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ad54:	4b53      	ldr	r3, [pc, #332]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f003 0303 	and.w	r3, r3, #3
 800ad5c:	6802      	ldr	r2, [r0, #0]
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d001      	beq.n	800ad66 <RCCEx_PLLSAI1_Config+0x1e>
 800ad62:	2001      	movs	r0, #1
}
 800ad64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d07c      	beq.n	800ae64 <RCCEx_PLLSAI1_Config+0x11c>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ad6a:	4b4e      	ldr	r3, [pc, #312]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ad72:	3301      	adds	r3, #1
       ||
 800ad74:	6842      	ldr	r2, [r0, #4]
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d019      	beq.n	800adae <RCCEx_PLLSAI1_Config+0x66>
 800ad7a:	2001      	movs	r0, #1
 800ad7c:	e7f2      	b.n	800ad64 <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 800ad7e:	6803      	ldr	r3, [r0, #0]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d02a      	beq.n	800adda <RCCEx_PLLSAI1_Config+0x92>
 800ad84:	2b03      	cmp	r3, #3
 800ad86:	d02f      	beq.n	800ade8 <RCCEx_PLLSAI1_Config+0xa0>
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d001      	beq.n	800ad90 <RCCEx_PLLSAI1_Config+0x48>
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	e7e9      	b.n	800ad64 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ad90:	4a44      	ldr	r2, [pc, #272]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ad92:	6812      	ldr	r2, [r2, #0]
 800ad94:	f012 0f02 	tst.w	r2, #2
 800ad98:	d066      	beq.n	800ae68 <RCCEx_PLLSAI1_Config+0x120>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ad9a:	4d42      	ldr	r5, [pc, #264]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ad9c:	68ea      	ldr	r2, [r5, #12]
 800ad9e:	6844      	ldr	r4, [r0, #4]
 800ada0:	3c01      	subs	r4, #1
 800ada2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ada6:	4313      	orrs	r3, r2
 800ada8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800adac:	60eb      	str	r3, [r5, #12]
 800adae:	460f      	mov	r7, r1
 800adb0:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 800adb2:	4a3c      	ldr	r2, [pc, #240]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800adb4:	6813      	ldr	r3, [r2, #0]
 800adb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800adba:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800adbc:	f7f9 fd66 	bl	800488c <HAL_GetTick>
 800adc0:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800adc2:	4d38      	ldr	r5, [pc, #224]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800adca:	d04f      	beq.n	800ae6c <RCCEx_PLLSAI1_Config+0x124>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800adcc:	f7f9 fd5e 	bl	800488c <HAL_GetTick>
 800add0:	1b80      	subs	r0, r0, r6
 800add2:	2802      	cmp	r0, #2
 800add4:	d9f6      	bls.n	800adc4 <RCCEx_PLLSAI1_Config+0x7c>
        status = HAL_TIMEOUT;
 800add6:	2003      	movs	r0, #3
 800add8:	e7c4      	b.n	800ad64 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800adda:	4a32      	ldr	r2, [pc, #200]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800addc:	6812      	ldr	r2, [r2, #0]
 800adde:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800ade2:	d1da      	bne.n	800ad9a <RCCEx_PLLSAI1_Config+0x52>
 800ade4:	2001      	movs	r0, #1
 800ade6:	e7bd      	b.n	800ad64 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ade8:	4a2e      	ldr	r2, [pc, #184]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800adea:	6812      	ldr	r2, [r2, #0]
 800adec:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800adf0:	d1d3      	bne.n	800ad9a <RCCEx_PLLSAI1_Config+0x52>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800adf2:	4a2c      	ldr	r2, [pc, #176]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800adf4:	6812      	ldr	r2, [r2, #0]
 800adf6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800adfa:	d1ce      	bne.n	800ad9a <RCCEx_PLLSAI1_Config+0x52>
 800adfc:	2001      	movs	r0, #1
 800adfe:	e7b1      	b.n	800ad64 <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ae00:	4928      	ldr	r1, [pc, #160]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ae02:	690b      	ldr	r3, [r1, #16]
 800ae04:	68a2      	ldr	r2, [r4, #8]
 800ae06:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ae0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ae12:	68e2      	ldr	r2, [r4, #12]
 800ae14:	0912      	lsrs	r2, r2, #4
 800ae16:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800ae1a:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800ae1c:	4a21      	ldr	r2, [pc, #132]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ae1e:	6813      	ldr	r3, [r2, #0]
 800ae20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae24:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800ae26:	f7f9 fd31 	bl	800488c <HAL_GetTick>
 800ae2a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ae2c:	4d1d      	ldr	r5, [pc, #116]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ae2e:	682b      	ldr	r3, [r5, #0]
 800ae30:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800ae34:	d12e      	bne.n	800ae94 <RCCEx_PLLSAI1_Config+0x14c>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ae36:	f7f9 fd29 	bl	800488c <HAL_GetTick>
 800ae3a:	1b80      	subs	r0, r0, r6
 800ae3c:	2802      	cmp	r0, #2
 800ae3e:	d9f6      	bls.n	800ae2e <RCCEx_PLLSAI1_Config+0xe6>
          status = HAL_TIMEOUT;
 800ae40:	2003      	movs	r0, #3
 800ae42:	e78f      	b.n	800ad64 <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ae44:	4917      	ldr	r1, [pc, #92]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ae46:	690b      	ldr	r3, [r1, #16]
 800ae48:	6922      	ldr	r2, [r4, #16]
 800ae4a:	0852      	lsrs	r2, r2, #1
 800ae4c:	3a01      	subs	r2, #1
 800ae4e:	68a0      	ldr	r0, [r4, #8]
 800ae50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ae54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ae58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ae5c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800ae60:	610b      	str	r3, [r1, #16]
 800ae62:	e7db      	b.n	800ae1c <RCCEx_PLLSAI1_Config+0xd4>
 800ae64:	2001      	movs	r0, #1
 800ae66:	e77d      	b.n	800ad64 <RCCEx_PLLSAI1_Config+0x1c>
 800ae68:	2001      	movs	r0, #1
 800ae6a:	e77b      	b.n	800ad64 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 800ae6c:	2f00      	cmp	r7, #0
 800ae6e:	d0c7      	beq.n	800ae00 <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 800ae70:	2f01      	cmp	r7, #1
 800ae72:	d0e7      	beq.n	800ae44 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ae74:	490b      	ldr	r1, [pc, #44]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ae76:	690b      	ldr	r3, [r1, #16]
 800ae78:	6962      	ldr	r2, [r4, #20]
 800ae7a:	0852      	lsrs	r2, r2, #1
 800ae7c:	3a01      	subs	r2, #1
 800ae7e:	68a0      	ldr	r0, [r4, #8]
 800ae80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ae84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ae88:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ae8c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800ae90:	610b      	str	r3, [r1, #16]
 800ae92:	e7c3      	b.n	800ae1c <RCCEx_PLLSAI1_Config+0xd4>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ae94:	4a03      	ldr	r2, [pc, #12]	; (800aea4 <RCCEx_PLLSAI1_Config+0x15c>)
 800ae96:	6913      	ldr	r3, [r2, #16]
 800ae98:	69a1      	ldr	r1, [r4, #24]
 800ae9a:	430b      	orrs	r3, r1
 800ae9c:	6113      	str	r3, [r2, #16]
 800ae9e:	2000      	movs	r0, #0
  return status;
 800aea0:	e760      	b.n	800ad64 <RCCEx_PLLSAI1_Config+0x1c>
 800aea2:	bf00      	nop
 800aea4:	40021000 	.word	0x40021000

0800aea8 <RCCEx_PLLSAI2_Config>:
{
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aeaa:	4b4d      	ldr	r3, [pc, #308]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	f013 0f03 	tst.w	r3, #3
 800aeb2:	d014      	beq.n	800aede <RCCEx_PLLSAI2_Config+0x36>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800aeb4:	4b4a      	ldr	r3, [pc, #296]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	f003 0303 	and.w	r3, r3, #3
 800aebc:	6802      	ldr	r2, [r0, #0]
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d001      	beq.n	800aec6 <RCCEx_PLLSAI2_Config+0x1e>
 800aec2:	2001      	movs	r0, #1
}
 800aec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d06c      	beq.n	800afa4 <RCCEx_PLLSAI2_Config+0xfc>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800aeca:	4b45      	ldr	r3, [pc, #276]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800aed2:	3301      	adds	r3, #1
       ||
 800aed4:	6842      	ldr	r2, [r0, #4]
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d019      	beq.n	800af0e <RCCEx_PLLSAI2_Config+0x66>
 800aeda:	2001      	movs	r0, #1
 800aedc:	e7f2      	b.n	800aec4 <RCCEx_PLLSAI2_Config+0x1c>
    switch(PllSai2->PLLSAI2Source)
 800aede:	6803      	ldr	r3, [r0, #0]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d02a      	beq.n	800af3a <RCCEx_PLLSAI2_Config+0x92>
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d02f      	beq.n	800af48 <RCCEx_PLLSAI2_Config+0xa0>
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d001      	beq.n	800aef0 <RCCEx_PLLSAI2_Config+0x48>
 800aeec:	2001      	movs	r0, #1
 800aeee:	e7e9      	b.n	800aec4 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aef0:	4a3b      	ldr	r2, [pc, #236]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800aef2:	6812      	ldr	r2, [r2, #0]
 800aef4:	f012 0f02 	tst.w	r2, #2
 800aef8:	d056      	beq.n	800afa8 <RCCEx_PLLSAI2_Config+0x100>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800aefa:	4d39      	ldr	r5, [pc, #228]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800aefc:	68ea      	ldr	r2, [r5, #12]
 800aefe:	6844      	ldr	r4, [r0, #4]
 800af00:	3c01      	subs	r4, #1
 800af02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800af06:	4313      	orrs	r3, r2
 800af08:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800af0c:	60eb      	str	r3, [r5, #12]
 800af0e:	460f      	mov	r7, r1
 800af10:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI2_DISABLE();
 800af12:	4a33      	ldr	r2, [pc, #204]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800af14:	6813      	ldr	r3, [r2, #0]
 800af16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800af1c:	f7f9 fcb6 	bl	800488c <HAL_GetTick>
 800af20:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800af22:	4d2f      	ldr	r5, [pc, #188]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800af24:	682b      	ldr	r3, [r5, #0]
 800af26:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800af2a:	d03f      	beq.n	800afac <RCCEx_PLLSAI2_Config+0x104>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800af2c:	f7f9 fcae 	bl	800488c <HAL_GetTick>
 800af30:	1b80      	subs	r0, r0, r6
 800af32:	2802      	cmp	r0, #2
 800af34:	d9f6      	bls.n	800af24 <RCCEx_PLLSAI2_Config+0x7c>
        status = HAL_TIMEOUT;
 800af36:	2003      	movs	r0, #3
 800af38:	e7c4      	b.n	800aec4 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800af3a:	4a29      	ldr	r2, [pc, #164]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800af3c:	6812      	ldr	r2, [r2, #0]
 800af3e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800af42:	d1da      	bne.n	800aefa <RCCEx_PLLSAI2_Config+0x52>
 800af44:	2001      	movs	r0, #1
 800af46:	e7bd      	b.n	800aec4 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800af48:	4a25      	ldr	r2, [pc, #148]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800af4a:	6812      	ldr	r2, [r2, #0]
 800af4c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800af50:	d1d3      	bne.n	800aefa <RCCEx_PLLSAI2_Config+0x52>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800af52:	4a23      	ldr	r2, [pc, #140]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800af54:	6812      	ldr	r2, [r2, #0]
 800af56:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800af5a:	d1ce      	bne.n	800aefa <RCCEx_PLLSAI2_Config+0x52>
 800af5c:	2001      	movs	r0, #1
 800af5e:	e7b1      	b.n	800aec4 <RCCEx_PLLSAI2_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800af60:	491f      	ldr	r1, [pc, #124]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800af62:	694b      	ldr	r3, [r1, #20]
 800af64:	68a2      	ldr	r2, [r4, #8]
 800af66:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800af6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800af72:	68e2      	ldr	r2, [r4, #12]
 800af74:	0912      	lsrs	r2, r2, #4
 800af76:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800af7a:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800af7c:	4a18      	ldr	r2, [pc, #96]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800af7e:	6813      	ldr	r3, [r2, #0]
 800af80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af84:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800af86:	f7f9 fc81 	bl	800488c <HAL_GetTick>
 800af8a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800af8c:	4d14      	ldr	r5, [pc, #80]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800af8e:	682b      	ldr	r3, [r5, #0]
 800af90:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800af94:	d11c      	bne.n	800afd0 <RCCEx_PLLSAI2_Config+0x128>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800af96:	f7f9 fc79 	bl	800488c <HAL_GetTick>
 800af9a:	1b80      	subs	r0, r0, r6
 800af9c:	2802      	cmp	r0, #2
 800af9e:	d9f6      	bls.n	800af8e <RCCEx_PLLSAI2_Config+0xe6>
          status = HAL_TIMEOUT;
 800afa0:	2003      	movs	r0, #3
 800afa2:	e78f      	b.n	800aec4 <RCCEx_PLLSAI2_Config+0x1c>
 800afa4:	2001      	movs	r0, #1
 800afa6:	e78d      	b.n	800aec4 <RCCEx_PLLSAI2_Config+0x1c>
 800afa8:	2001      	movs	r0, #1
 800afaa:	e78b      	b.n	800aec4 <RCCEx_PLLSAI2_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 800afac:	2f00      	cmp	r7, #0
 800afae:	d0d7      	beq.n	800af60 <RCCEx_PLLSAI2_Config+0xb8>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800afb0:	480b      	ldr	r0, [pc, #44]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800afb2:	6942      	ldr	r2, [r0, #20]
 800afb4:	6923      	ldr	r3, [r4, #16]
 800afb6:	085b      	lsrs	r3, r3, #1
 800afb8:	1e59      	subs	r1, r3, #1
 800afba:	68a5      	ldr	r5, [r4, #8]
 800afbc:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800afc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800afc4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800afc8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800afcc:	6143      	str	r3, [r0, #20]
 800afce:	e7d5      	b.n	800af7c <RCCEx_PLLSAI2_Config+0xd4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800afd0:	4a03      	ldr	r2, [pc, #12]	; (800afe0 <RCCEx_PLLSAI2_Config+0x138>)
 800afd2:	6953      	ldr	r3, [r2, #20]
 800afd4:	6961      	ldr	r1, [r4, #20]
 800afd6:	430b      	orrs	r3, r1
 800afd8:	6153      	str	r3, [r2, #20]
 800afda:	2000      	movs	r0, #0
  return status;
 800afdc:	e772      	b.n	800aec4 <RCCEx_PLLSAI2_Config+0x1c>
 800afde:	bf00      	nop
 800afe0:	40021000 	.word	0x40021000

0800afe4 <HAL_RCCEx_PeriphCLKConfig>:
{
 800afe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afe8:	b083      	sub	sp, #12
 800afea:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800afec:	6803      	ldr	r3, [r0, #0]
 800afee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800aff2:	d029      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->Sai1ClockSelection)
 800aff4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800aff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800affa:	d01f      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x58>
 800affc:	d910      	bls.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800affe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b002:	d015      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800b004:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b008:	d131      	bne.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b00a:	4a2c      	ldr	r2, [pc, #176]	; (800b0bc <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800b00c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b010:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b014:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b016:	430b      	orrs	r3, r1
 800b018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800b01c:	2500      	movs	r5, #0
 800b01e:	e014      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b020:	bb2b      	cbnz	r3, 800b06e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b022:	2100      	movs	r1, #0
 800b024:	3004      	adds	r0, #4
 800b026:	f7ff fe8f 	bl	800ad48 <RCCEx_PLLSAI1_Config>
 800b02a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b02c:	b96d      	cbnz	r5, 800b04a <HAL_RCCEx_PeriphCLKConfig+0x66>
 800b02e:	e7ec      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x26>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b030:	4a22      	ldr	r2, [pc, #136]	; (800b0bc <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800b032:	68d3      	ldr	r3, [r2, #12]
 800b034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b038:	60d3      	str	r3, [r2, #12]
 800b03a:	e7e6      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b03c:	2100      	movs	r1, #0
 800b03e:	3020      	adds	r0, #32
 800b040:	f7ff ff32 	bl	800aea8 <RCCEx_PLLSAI2_Config>
 800b044:	4605      	mov	r5, r0
      break;
 800b046:	e7f1      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x48>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b048:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800b050:	d036      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    switch(PeriphClkInit->Sai2ClockSelection)
 800b052:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b058:	d028      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800b05a:	d90a      	bls.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800b05c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b060:	d010      	beq.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800b062:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b066:	f040 8160 	bne.w	800b32a <HAL_RCCEx_PeriphCLKConfig+0x346>
 800b06a:	46a8      	mov	r8, r5
 800b06c:	e010      	b.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xac>
      ret = HAL_ERROR;
 800b06e:	2501      	movs	r5, #1
 800b070:	e7eb      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai2ClockSelection)
 800b072:	2b00      	cmp	r3, #0
 800b074:	f040 8159 	bne.w	800b32a <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b078:	2100      	movs	r1, #0
 800b07a:	1d20      	adds	r0, r4, #4
 800b07c:	f7ff fe64 	bl	800ad48 <RCCEx_PLLSAI1_Config>
 800b080:	4680      	mov	r8, r0
      break;
 800b082:	e005      	b.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b084:	4a0d      	ldr	r2, [pc, #52]	; (800b0bc <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800b086:	68d3      	ldr	r3, [r2, #12]
 800b088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b08c:	60d3      	str	r3, [r2, #12]
      break;
 800b08e:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 800b090:	f1b8 0f00 	cmp.w	r8, #0
 800b094:	f040 814c 	bne.w	800b330 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b098:	4a08      	ldr	r2, [pc, #32]	; (800b0bc <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800b09a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b09e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800b0a2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b0a4:	430b      	orrs	r3, r1
 800b0a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800b0aa:	e00a      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	f104 0020 	add.w	r0, r4, #32
 800b0b2:	f7ff fef9 	bl	800aea8 <RCCEx_PLLSAI2_Config>
 800b0b6:	4680      	mov	r8, r0
      break;
 800b0b8:	e7ea      	b.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800b0ba:	bf00      	nop
 800b0bc:	40021000 	.word	0x40021000
 800b0c0:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b0c8:	d029      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b0ca:	4bc3      	ldr	r3, [pc, #780]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800b0d2:	f040 812f 	bne.w	800b334 <HAL_RCCEx_PeriphCLKConfig+0x350>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0d6:	4bc0      	ldr	r3, [pc, #768]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b0d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b0de:	659a      	str	r2, [r3, #88]	; 0x58
 800b0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0e6:	9301      	str	r3, [sp, #4]
 800b0e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b0ea:	f04f 0901 	mov.w	r9, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b0ee:	4abb      	ldr	r2, [pc, #748]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 800b0f0:	6813      	ldr	r3, [r2, #0]
 800b0f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0f6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800b0f8:	f7f9 fbc8 	bl	800488c <HAL_GetTick>
 800b0fc:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b0fe:	4eb7      	ldr	r6, [pc, #732]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 800b100:	6833      	ldr	r3, [r6, #0]
 800b102:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b106:	f040 8118 	bne.w	800b33a <HAL_RCCEx_PeriphCLKConfig+0x356>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b10a:	f7f9 fbbf 	bl	800488c <HAL_GetTick>
 800b10e:	1bc0      	subs	r0, r0, r7
 800b110:	2802      	cmp	r0, #2
 800b112:	d9f5      	bls.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        ret = HAL_TIMEOUT;
 800b114:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800b116:	f1b9 0f00 	cmp.w	r9, #0
 800b11a:	f040 8151 	bne.w	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	f013 0f01 	tst.w	r3, #1
 800b124:	d008      	beq.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b126:	4aac      	ldr	r2, [pc, #688]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b128:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b12c:	f023 0303 	bic.w	r3, r3, #3
 800b130:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b132:	430b      	orrs	r3, r1
 800b134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	f013 0f02 	tst.w	r3, #2
 800b13e:	d008      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b140:	4aa5      	ldr	r2, [pc, #660]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b142:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b146:	f023 030c 	bic.w	r3, r3, #12
 800b14a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b14c:	430b      	orrs	r3, r1
 800b14e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	f013 0f04 	tst.w	r3, #4
 800b158:	d008      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x188>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b15a:	4a9f      	ldr	r2, [pc, #636]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b15c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b160:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b164:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b166:	430b      	orrs	r3, r1
 800b168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	f013 0f08 	tst.w	r3, #8
 800b172:	d008      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b174:	4a98      	ldr	r2, [pc, #608]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b176:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b17a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b17e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b180:	430b      	orrs	r3, r1
 800b182:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	f013 0f10 	tst.w	r3, #16
 800b18c:	d008      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b18e:	4a92      	ldr	r2, [pc, #584]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b190:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b198:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b19a:	430b      	orrs	r3, r1
 800b19c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1a0:	6823      	ldr	r3, [r4, #0]
 800b1a2:	f013 0f20 	tst.w	r3, #32
 800b1a6:	d008      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1a8:	4a8b      	ldr	r2, [pc, #556]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b1aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b1ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b1b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b1b4:	430b      	orrs	r3, r1
 800b1b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b1c0:	d008      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b1c2:	4a85      	ldr	r2, [pc, #532]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b1c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b1c8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800b1cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b1ce:	430b      	orrs	r3, r1
 800b1d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b1da:	d008      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b1dc:	4a7e      	ldr	r2, [pc, #504]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b1de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b1e2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b1e6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800b1e8:	430b      	orrs	r3, r1
 800b1ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b1f4:	d008      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b1f6:	4a78      	ldr	r2, [pc, #480]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b1f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b1fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b200:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b202:	430b      	orrs	r3, r1
 800b204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b20e:	d008      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b210:	4a71      	ldr	r2, [pc, #452]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b212:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b216:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b21a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b21c:	430b      	orrs	r3, r1
 800b21e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b228:	d008      	beq.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b22a:	4a6b      	ldr	r2, [pc, #428]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b22c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b230:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b234:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b236:	430b      	orrs	r3, r1
 800b238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b242:	d011      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b244:	4a64      	ldr	r2, [pc, #400]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b246:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b24a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800b24e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b250:	430b      	orrs	r3, r1
 800b252:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b256:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b25c:	f000 80b6 	beq.w	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b264:	f000 80bc 	beq.w	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800b26e:	d011      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b270:	4a59      	ldr	r2, [pc, #356]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b272:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b276:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800b27a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b27c:	430b      	orrs	r3, r1
 800b27e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b282:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b288:	f000 80b2 	beq.w	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b28c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b290:	f000 80b3 	beq.w	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x416>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800b29a:	d011      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b29c:	4a4e      	ldr	r2, [pc, #312]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b29e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b2a2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800b2a6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800b2a8:	430b      	orrs	r3, r1
 800b2aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b2ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b2b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2b4:	f000 80a9 	beq.w	800b40a <HAL_RCCEx_PeriphCLKConfig+0x426>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b2b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2bc:	f000 80aa 	beq.w	800b414 <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b2c6:	d011      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b2c8:	4a43      	ldr	r2, [pc, #268]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b2ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b2ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800b2d2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b2d4:	430b      	orrs	r3, r1
 800b2d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b2da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b2dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2e0:	f000 80a0 	beq.w	800b424 <HAL_RCCEx_PeriphCLKConfig+0x440>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b2e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e8:	f000 80a4 	beq.w	800b434 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b2f2:	d008      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x322>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b2f4:	4a38      	ldr	r2, [pc, #224]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b2f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b2fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b2fe:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800b300:	430b      	orrs	r3, r1
 800b302:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b30c:	d009      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b30e:	4a32      	ldr	r2, [pc, #200]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b310:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b318:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800b31c:	430b      	orrs	r3, r1
 800b31e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800b322:	4628      	mov	r0, r5
 800b324:	b003      	add	sp, #12
 800b326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = HAL_ERROR;
 800b32a:	2501      	movs	r5, #1
 800b32c:	46a8      	mov	r8, r5
 800b32e:	e6c8      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800b330:	4645      	mov	r5, r8
 800b332:	e6c6      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
    FlagStatus       pwrclkchanged = RESET;
 800b334:	f04f 0900 	mov.w	r9, #0
 800b338:	e6d9      	b.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x10a>
    if(ret == HAL_OK)
 800b33a:	f1b8 0f00 	cmp.w	r8, #0
 800b33e:	d13d      	bne.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b340:	4b25      	ldr	r3, [pc, #148]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b346:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800b34a:	d02c      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800b34c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800b350:	429a      	cmp	r2, r3
 800b352:	d012      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x396>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b354:	4a20      	ldr	r2, [pc, #128]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b356:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b35a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b35e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800b362:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800b366:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b36a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800b36e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b372:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800b376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b37a:	f013 0f01 	tst.w	r3, #1
 800b37e:	d012      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        tickstart = HAL_GetTick();
 800b380:	f7f9 fa84 	bl	800488c <HAL_GetTick>
 800b384:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b386:	4e14      	ldr	r6, [pc, #80]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b388:	f241 3788 	movw	r7, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b38c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800b390:	f013 0f02 	tst.w	r3, #2
 800b394:	d107      	bne.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b396:	f7f9 fa79 	bl	800488c <HAL_GetTick>
 800b39a:	eba0 0008 	sub.w	r0, r0, r8
 800b39e:	42b8      	cmp	r0, r7
 800b3a0:	d9f4      	bls.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
            ret = HAL_TIMEOUT;
 800b3a2:	2503      	movs	r5, #3
 800b3a4:	e6b7      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x132>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b3a6:	4a0c      	ldr	r2, [pc, #48]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b3a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b3ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3b0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800b3b4:	430b      	orrs	r3, r1
 800b3b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b3ba:	e6ac      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x132>
 800b3bc:	4645      	mov	r5, r8
 800b3be:	e6aa      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3c0:	4a05      	ldr	r2, [pc, #20]	; (800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b3c2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b3c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3c8:	6593      	str	r3, [r2, #88]	; 0x58
 800b3ca:	e6a8      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3cc:	68d3      	ldr	r3, [r2, #12]
 800b3ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3d2:	60d3      	str	r3, [r2, #12]
 800b3d4:	e748      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800b3d6:	bf00      	nop
 800b3d8:	40021000 	.word	0x40021000
 800b3dc:	40007000 	.word	0x40007000
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	1d20      	adds	r0, r4, #4
 800b3e4:	f7ff fcb0 	bl	800ad48 <RCCEx_PLLSAI1_Config>
          status = ret;
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	bf18      	it	ne
 800b3ec:	4605      	movne	r5, r0
 800b3ee:	e73b      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3f0:	68d3      	ldr	r3, [r2, #12]
 800b3f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3f6:	60d3      	str	r3, [r2, #12]
 800b3f8:	e74c      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	1d20      	adds	r0, r4, #4
 800b3fe:	f7ff fca3 	bl	800ad48 <RCCEx_PLLSAI1_Config>
        status = ret;
 800b402:	2800      	cmp	r0, #0
 800b404:	bf18      	it	ne
 800b406:	4605      	movne	r5, r0
 800b408:	e744      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b40a:	68d3      	ldr	r3, [r2, #12]
 800b40c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b410:	60d3      	str	r3, [r2, #12]
 800b412:	e755      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b414:	2101      	movs	r1, #1
 800b416:	1d20      	adds	r0, r4, #4
 800b418:	f7ff fc96 	bl	800ad48 <RCCEx_PLLSAI1_Config>
        status = ret;
 800b41c:	2800      	cmp	r0, #0
 800b41e:	bf18      	it	ne
 800b420:	4605      	movne	r5, r0
 800b422:	e74d      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b424:	2102      	movs	r1, #2
 800b426:	1d20      	adds	r0, r4, #4
 800b428:	f7ff fc8e 	bl	800ad48 <RCCEx_PLLSAI1_Config>
        status = ret;
 800b42c:	2800      	cmp	r0, #0
 800b42e:	bf18      	it	ne
 800b430:	4605      	movne	r5, r0
 800b432:	e75b      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b434:	2102      	movs	r1, #2
 800b436:	f104 0020 	add.w	r0, r4, #32
 800b43a:	f7ff fd35 	bl	800aea8 <RCCEx_PLLSAI2_Config>
        status = ret;
 800b43e:	2800      	cmp	r0, #0
 800b440:	bf18      	it	ne
 800b442:	4605      	movne	r5, r0
 800b444:	e752      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x308>
 800b446:	bf00      	nop

0800b448 <HAL_RCCEx_GetPeriphCLKConfig>:
{
 800b448:	b410      	push	{r4}
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 800b44a:	4b4e      	ldr	r3, [pc, #312]	; (800b584 <HAL_RCCEx_GetPeriphCLKConfig+0x13c>)
 800b44c:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800b44e:	4b4e      	ldr	r3, [pc, #312]	; (800b588 <HAL_RCCEx_GetPeriphCLKConfig+0x140>)
 800b450:	68dc      	ldr	r4, [r3, #12]
 800b452:	f004 0403 	and.w	r4, r4, #3
 800b456:	6044      	str	r4, [r0, #4]
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800b458:	68d9      	ldr	r1, [r3, #12]
 800b45a:	f3c1 1102 	ubfx	r1, r1, #4, #3
 800b45e:	3101      	adds	r1, #1
 800b460:	6081      	str	r1, [r0, #8]
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b462:	691a      	ldr	r2, [r3, #16]
 800b464:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800b468:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 800b46a:	691a      	ldr	r2, [r3, #16]
 800b46c:	0b52      	lsrs	r2, r2, #13
 800b46e:	f002 0210 	and.w	r2, r2, #16
 800b472:	3207      	adds	r2, #7
 800b474:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800b476:	691a      	ldr	r2, [r3, #16]
 800b478:	f3c2 5241 	ubfx	r2, r2, #21, #2
 800b47c:	3201      	adds	r2, #1
 800b47e:	0052      	lsls	r2, r2, #1
 800b480:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 800b482:	691a      	ldr	r2, [r3, #16]
 800b484:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800b488:	3201      	adds	r2, #1
 800b48a:	0052      	lsls	r2, r2, #1
 800b48c:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 800b48e:	6204      	str	r4, [r0, #32]
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 800b490:	6241      	str	r1, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b492:	695a      	ldr	r2, [r3, #20]
 800b494:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800b498:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 800b49a:	695a      	ldr	r2, [r3, #20]
 800b49c:	0b52      	lsrs	r2, r2, #13
 800b49e:	f002 0210 	and.w	r2, r2, #16
 800b4a2:	3207      	adds	r2, #7
 800b4a4:	62c2      	str	r2, [r0, #44]	; 0x2c
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 800b4a6:	695a      	ldr	r2, [r3, #20]
 800b4a8:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800b4ac:	3201      	adds	r2, #1
 800b4ae:	0052      	lsls	r2, r2, #1
 800b4b0:	6302      	str	r2, [r0, #48]	; 0x30
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 800b4b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4b6:	f002 0203 	and.w	r2, r2, #3
 800b4ba:	6382      	str	r2, [r0, #56]	; 0x38
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800b4bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4c0:	f002 020c 	and.w	r2, r2, #12
 800b4c4:	63c2      	str	r2, [r0, #60]	; 0x3c
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 800b4c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4ca:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800b4ce:	6402      	str	r2, [r0, #64]	; 0x40
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 800b4d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4d4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800b4d8:	6442      	str	r2, [r0, #68]	; 0x44
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 800b4da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4de:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800b4e2:	6482      	str	r2, [r0, #72]	; 0x48
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 800b4e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4e8:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800b4ec:	64c2      	str	r2, [r0, #76]	; 0x4c
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 800b4ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4f2:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800b4f6:	6502      	str	r2, [r0, #80]	; 0x50
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 800b4f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4fc:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800b500:	6542      	str	r2, [r0, #84]	; 0x54
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 800b502:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b506:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800b50a:	6582      	str	r2, [r0, #88]	; 0x58
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b50c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b510:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800b514:	65c2      	str	r2, [r0, #92]	; 0x5c
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b516:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b51a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800b51e:	6602      	str	r2, [r0, #96]	; 0x60
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800b520:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b524:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800b528:	6642      	str	r2, [r0, #100]	; 0x64
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 800b52a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b52e:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 800b532:	6682      	str	r2, [r0, #104]	; 0x68
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 800b534:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b538:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800b53c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 800b540:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b544:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 800b548:	66c2      	str	r2, [r0, #108]	; 0x6c
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b54a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b54e:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 800b552:	6702      	str	r2, [r0, #112]	; 0x70
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 800b554:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b558:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 800b55c:	6742      	str	r2, [r0, #116]	; 0x74
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 800b55e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b562:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 800b566:	6782      	str	r2, [r0, #120]	; 0x78
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 800b568:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b56c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b570:	67c2      	str	r2, [r0, #124]	; 0x7c
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 800b572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b57a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800b57e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b582:	4770      	bx	lr
 800b584:	000fffff 	.word	0x000fffff
 800b588:	40021000 	.word	0x40021000

0800b58c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800b58c:	b508      	push	{r3, lr}
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800b58e:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 800b592:	d00b      	beq.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x20>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b594:	4bbe      	ldr	r3, [pc, #760]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d04a      	beq.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d07f      	beq.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d030      	beq.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
      pllvco = 0U;
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	e04c      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b5ac:	4bb8      	ldr	r3, [pc, #736]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
    switch(srcclk)
 800b5b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ba:	d012      	beq.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 800b5bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5c0:	d01a      	beq.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 800b5c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c6:	d001      	beq.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
  uint32_t frequency = 0U;
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e009      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b5cc:	4bb0      	ldr	r3, [pc, #704]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5d2:	f003 0302 	and.w	r3, r3, #2
        frequency = LSE_VALUE;
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	bf0c      	ite	eq
 800b5da:	2000      	moveq	r0, #0
 800b5dc:	f44f 4000 	movne.w	r0, #32768	; 0x8000
}
 800b5e0:	bd08      	pop	{r3, pc}
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b5e2:	4bab      	ldr	r3, [pc, #684]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b5e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5e8:	f003 0302 	and.w	r3, r3, #2
          frequency = LSI_VALUE;
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	bf0c      	ite	eq
 800b5f0:	2000      	moveq	r0, #0
 800b5f2:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800b5f6:	e7f3      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5f8:	4ba5      	ldr	r3, [pc, #660]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
        frequency = HSE_VALUE / 32U;
 800b600:	2b00      	cmp	r3, #0
 800b602:	48a4      	ldr	r0, [pc, #656]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800b604:	bf08      	it	eq
 800b606:	2000      	moveq	r0, #0
 800b608:	e7ea      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b60a:	4ba1      	ldr	r3, [pc, #644]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f013 0f02 	tst.w	r3, #2
 800b612:	d050      	beq.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b614:	4b9e      	ldr	r3, [pc, #632]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f013 0f08 	tst.w	r3, #8
 800b61c:	4b9c      	ldr	r3, [pc, #624]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b61e:	bf19      	ittee	ne
 800b620:	681b      	ldrne	r3, [r3, #0]
 800b622:	f3c3 1303 	ubfxne	r3, r3, #4, #4
 800b626:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 800b62a:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 800b62e:	4a9a      	ldr	r2, [pc, #616]	; (800b898 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800b630:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b634:	e007      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b636:	4b96      	ldr	r3, [pc, #600]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        pllvco = 0U;
 800b63e:	2b00      	cmp	r3, #0
 800b640:	4996      	ldr	r1, [pc, #600]	; (800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800b642:	bf08      	it	eq
 800b644:	2100      	moveq	r1, #0
    switch(PeriphClk)
 800b646:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b64a:	f000 82b1 	beq.w	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800b64e:	f200 8082 	bhi.w	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800b652:	2810      	cmp	r0, #16
 800b654:	f000 81cd 	beq.w	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b658:	d840      	bhi.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800b65a:	2802      	cmp	r0, #2
 800b65c:	f000 815c 	beq.w	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 800b660:	d92b      	bls.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 800b662:	2804      	cmp	r0, #4
 800b664:	f000 8189 	beq.w	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 800b668:	2808      	cmp	r0, #8
 800b66a:	f040 80d3 	bne.w	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b66e:	4b88      	ldr	r3, [pc, #544]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b674:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        switch(srcclk)
 800b678:	2b40      	cmp	r3, #64	; 0x40
 800b67a:	f000 81ae 	beq.w	800b9da <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b67e:	f240 81a6 	bls.w	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b682:	2b80      	cmp	r3, #128	; 0x80
 800b684:	f000 81ac 	beq.w	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 800b688:	2bc0      	cmp	r3, #192	; 0xc0
 800b68a:	f040 82f9 	bne.w	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b68e:	4b80      	ldr	r3, [pc, #512]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b694:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 800b698:	2b00      	cmp	r3, #0
 800b69a:	bf0c      	ite	eq
 800b69c:	2000      	moveq	r0, #0
 800b69e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800b6a2:	e79d      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6a4:	4b7a      	ldr	r3, [pc, #488]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
        pllvco = 0U;
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	497c      	ldr	r1, [pc, #496]	; (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 800b6b0:	bf08      	it	eq
 800b6b2:	2100      	moveq	r1, #0
 800b6b4:	e7c7      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
        pllvco = 0U;
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	e7c5      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    switch(PeriphClk)
 800b6ba:	2801      	cmp	r0, #1
 800b6bc:	f040 80aa 	bne.w	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b6c0:	4b73      	ldr	r3, [pc, #460]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6c6:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	f200 82d2 	bhi.w	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 800b6d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b6d4:	010b0108 	.word	0x010b0108
 800b6d8:	0117010e 	.word	0x0117010e
    switch(PeriphClk)
 800b6dc:	2840      	cmp	r0, #64	; 0x40
 800b6de:	f000 8219 	beq.w	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
 800b6e2:	d918      	bls.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 800b6e4:	2880      	cmp	r0, #128	; 0x80
 800b6e6:	f000 8232 	beq.w	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800b6ea:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b6ee:	f040 8091 	bne.w	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b6f2:	4b67      	ldr	r3, [pc, #412]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        switch(srcclk)
 800b6fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b700:	f000 824a 	beq.w	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800b704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b708:	f000 8249 	beq.w	800bb9e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 8240 	beq.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
  uint32_t frequency = 0U;
 800b712:	2000      	movs	r0, #0
 800b714:	e764      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 800b716:	2820      	cmp	r0, #32
 800b718:	d17c      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b71a:	4b5d      	ldr	r3, [pc, #372]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b720:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        switch(srcclk)
 800b724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b728:	f000 8196 	beq.w	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800b72c:	f240 818e 	bls.w	800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 800b730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b734:	f000 8193 	beq.w	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800b738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b73c:	f040 82a4 	bne.w	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b740:	4b53      	ldr	r3, [pc, #332]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b746:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bf0c      	ite	eq
 800b74e:	2000      	moveq	r0, #0
 800b750:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800b754:	e744      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 800b756:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800b75a:	f000 8189 	beq.w	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 800b75e:	d83f      	bhi.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800b760:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800b764:	d058      	beq.n	800b818 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
 800b766:	d907      	bls.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 800b768:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800b76c:	d125      	bne.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800b76e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b772:	f7ff fa63 	bl	800ac3c <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 800b776:	e733      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 800b778:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b77c:	d14a      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b77e:	4b44      	ldr	r3, [pc, #272]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b784:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 800b788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b78c:	f000 8248 	beq.w	800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
 800b790:	f240 8241 	bls.w	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b798:	f000 824d 	beq.w	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
 800b79c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7a0:	f040 827a 	bne.w	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b7a4:	4b3a      	ldr	r3, [pc, #232]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7aa:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bf0c      	ite	eq
 800b7b2:	2000      	moveq	r0, #0
 800b7b4:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800b7b8:	e712      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 800b7ba:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b7be:	d129      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800b7c0:	4b33      	ldr	r3, [pc, #204]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7c6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
        switch(srcclk)
 800b7ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7ce:	d03f      	beq.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b7d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b7d4:	d025      	beq.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
 800b7d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7da:	d063      	beq.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
  uint32_t frequency = 0U;
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e6ff      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 800b7e0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b7e4:	f000 818b 	beq.w	800bafe <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 800b7e8:	d80e      	bhi.n	800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800b7ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b7ee:	d111      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800b7f0:	4b27      	ldr	r3, [pc, #156]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        switch(srcclk)
 800b7f6:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 800b7fa:	f000 8225 	beq.w	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f040 8225 	bne.w	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
  uint32_t frequency = 0U;
 800b804:	2000      	movs	r0, #0
 800b806:	e6eb      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    switch(PeriphClk)
 800b808:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800b80c:	d0d8      	beq.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800b80e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800b812:	d0d5      	beq.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
  uint32_t frequency = 0U;
 800b814:	2000      	movs	r0, #0
 800b816:	e6e3      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800b818:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b81c:	f7ff fa0e 	bl	800ac3c <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 800b820:	e6de      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b822:	4b1b      	ldr	r3, [pc, #108]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f013 0f02 	tst.w	r3, #2
 800b82a:	f000 8219 	beq.w	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b82e:	4b18      	ldr	r3, [pc, #96]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f013 0f08 	tst.w	r3, #8
 800b836:	4b16      	ldr	r3, [pc, #88]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b838:	bf19      	ittee	ne
 800b83a:	681b      	ldrne	r3, [r3, #0]
 800b83c:	f3c3 1303 	ubfxne	r3, r3, #4, #4
 800b840:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 800b844:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 800b848:	4a13      	ldr	r2, [pc, #76]	; (800b898 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800b84a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b84e:	e6c7      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b850:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b858:	f000 8204 	beq.w	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b85c:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b864:	f000 8200 	beq.w	800bc68 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b868:	4809      	ldr	r0, [pc, #36]	; (800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b86a:	68c3      	ldr	r3, [r0, #12]
 800b86c:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b870:	fb01 f303 	mul.w	r3, r1, r3
 800b874:	68c2      	ldr	r2, [r0, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b876:	68c0      	ldr	r0, [r0, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b878:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800b87c:	3201      	adds	r2, #1
 800b87e:	fbb3 f3f2 	udiv	r3, r3, r2
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b882:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800b886:	3001      	adds	r0, #1
 800b888:	0040      	lsls	r0, r0, #1
 800b88a:	fbb3 f0f0 	udiv	r0, r3, r0
 800b88e:	e6a7      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800b890:	40021000 	.word	0x40021000
 800b894:	0003d090 	.word	0x0003d090
 800b898:	080144b8 	.word	0x080144b8
 800b89c:	00f42400 	.word	0x00f42400
 800b8a0:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800b8a4:	4bb4      	ldr	r3, [pc, #720]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b8ac:	f000 81de 	beq.w	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800b8b0:	4bb1      	ldr	r3, [pc, #708]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b8b8:	f000 81da 	beq.w	800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b8bc:	48ae      	ldr	r0, [pc, #696]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b8be:	6903      	ldr	r3, [r0, #16]
 800b8c0:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b8c4:	fb01 f303 	mul.w	r3, r1, r3
 800b8c8:	68c2      	ldr	r2, [r0, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800b8ca:	6900      	ldr	r0, [r0, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b8cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800b8d0:	3201      	adds	r2, #1
 800b8d2:	fbb3 f3f2 	udiv	r3, r3, r2
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800b8d6:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800b8da:	3001      	adds	r0, #1
 800b8dc:	0040      	lsls	r0, r0, #1
 800b8de:	fbb3 f0f0 	udiv	r0, r3, r0
 800b8e2:	e67d      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK2Freq();
 800b8e4:	f7ff f8e2 	bl	800aaac <HAL_RCC_GetPCLK2Freq>
          break;
 800b8e8:	e67a      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800b8ea:	f7fe fcd3 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800b8ee:	e677      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b8f0:	4ba1      	ldr	r3, [pc, #644]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	48a0      	ldr	r0, [pc, #640]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800b8fc:	bf08      	it	eq
 800b8fe:	2000      	moveq	r0, #0
 800b900:	e66e      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b902:	4b9d      	ldr	r3, [pc, #628]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b908:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	bf0c      	ite	eq
 800b910:	2000      	moveq	r0, #0
 800b912:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800b916:	e663      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b918:	4b97      	ldr	r3, [pc, #604]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b91e:	f003 030c 	and.w	r3, r3, #12
        switch(srcclk)
 800b922:	2b0c      	cmp	r3, #12
 800b924:	f200 81a8 	bhi.w	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800b928:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b92c:	01a6000d 	.word	0x01a6000d
 800b930:	01a601a6 	.word	0x01a601a6
 800b934:	01a60010 	.word	0x01a60010
 800b938:	01a601a6 	.word	0x01a601a6
 800b93c:	01a60013 	.word	0x01a60013
 800b940:	01a601a6 	.word	0x01a601a6
 800b944:	001c      	.short	0x001c
          frequency = HAL_RCC_GetPCLK1Freq();
 800b946:	f7ff f89f 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800b94a:	e649      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800b94c:	f7fe fca2 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800b950:	e646      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b952:	4b89      	ldr	r3, [pc, #548]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	4887      	ldr	r0, [pc, #540]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800b95e:	bf08      	it	eq
 800b960:	2000      	moveq	r0, #0
 800b962:	e63d      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b964:	4b84      	ldr	r3, [pc, #528]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b96a:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 800b96e:	2b00      	cmp	r3, #0
 800b970:	bf0c      	ite	eq
 800b972:	2000      	moveq	r0, #0
 800b974:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800b978:	e632      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b97a:	4b7f      	ldr	r3, [pc, #508]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b980:	f003 0330 	and.w	r3, r3, #48	; 0x30
        switch(srcclk)
 800b984:	2b10      	cmp	r3, #16
 800b986:	d016      	beq.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
 800b988:	d90f      	bls.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 800b98a:	2b20      	cmp	r3, #32
 800b98c:	d016      	beq.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 800b98e:	2b30      	cmp	r3, #48	; 0x30
 800b990:	f040 8174 	bne.w	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b994:	4b78      	ldr	r3, [pc, #480]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b99a:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	bf0c      	ite	eq
 800b9a2:	2000      	moveq	r0, #0
 800b9a4:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800b9a8:	e61a      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f040 8166 	bne.w	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b9b0:	f7ff f86a 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800b9b4:	e614      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800b9b6:	f7fe fc6d 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800b9ba:	e611      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9bc:	4b6e      	ldr	r3, [pc, #440]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	486d      	ldr	r0, [pc, #436]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800b9c8:	bf08      	it	eq
 800b9ca:	2000      	moveq	r0, #0
 800b9cc:	e608      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f040 8156 	bne.w	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b9d4:	f7ff f858 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800b9d8:	e602      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800b9da:	f7fe fc5b 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800b9de:	e5ff      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9e0:	4b65      	ldr	r3, [pc, #404]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	4864      	ldr	r0, [pc, #400]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800b9ec:	bf08      	it	eq
 800b9ee:	2000      	moveq	r0, #0
 800b9f0:	e5f6      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b9f2:	4b61      	ldr	r3, [pc, #388]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800b9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
        switch(srcclk)
 800b9fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba00:	d018      	beq.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800ba02:	d911      	bls.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800ba04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba08:	d017      	beq.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ba0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba0e:	f040 8139 	bne.w	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ba12:	4b59      	ldr	r3, [pc, #356]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800ba14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba18:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	bf0c      	ite	eq
 800ba20:	2000      	moveq	r0, #0
 800ba22:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800ba26:	e5db      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f040 812b 	bne.w	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ba2e:	f7ff f82b 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800ba32:	e5d5      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800ba34:	f7fe fc2e 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800ba38:	e5d2      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba3a:	4b4f      	ldr	r3, [pc, #316]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	484d      	ldr	r0, [pc, #308]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800ba46:	bf08      	it	eq
 800ba48:	2000      	moveq	r0, #0
 800ba4a:	e5c9      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f040 811b 	bne.w	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ba52:	f7ff f819 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800ba56:	e5c3      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800ba58:	f7fe fc1c 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800ba5c:	e5c0      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba5e:	4b46      	ldr	r3, [pc, #280]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	4844      	ldr	r0, [pc, #272]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800ba6a:	bf08      	it	eq
 800ba6c:	2000      	moveq	r0, #0
 800ba6e:	e5b7      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ba70:	4b41      	ldr	r3, [pc, #260]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800ba72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        switch(srcclk)
 800ba7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba7e:	d024      	beq.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 800ba80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba84:	d004      	beq.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ba86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba8a:	d004      	beq.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
  uint32_t frequency = 0U;
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	e5a7      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800ba90:	f7fe fc00 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800ba94:	e5a4      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800ba96:	4b38      	ldr	r3, [pc, #224]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800ba98:	691b      	ldr	r3, [r3, #16]
 800ba9a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800ba9e:	f000 80f5 	beq.w	800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800baa2:	4835      	ldr	r0, [pc, #212]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800baa4:	6903      	ldr	r3, [r0, #16]
 800baa6:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800baaa:	fb01 f303 	mul.w	r3, r1, r3
 800baae:	68c2      	ldr	r2, [r0, #12]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800bab0:	6900      	ldr	r0, [r0, #16]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bab2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800bab6:	3201      	adds	r2, #1
 800bab8:	fbb3 f3f2 	udiv	r3, r3, r2
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800babc:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800bac0:	3001      	adds	r0, #1
 800bac2:	0040      	lsls	r0, r0, #1
 800bac4:	fbb3 f0f0 	udiv	r0, r3, r0
 800bac8:	e58a      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 800baca:	4b2b      	ldr	r3, [pc, #172]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800bad2:	f000 80dd 	beq.w	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800bad6:	4b28      	ldr	r3, [pc, #160]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800bad8:	6958      	ldr	r0, [r3, #20]
 800bada:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bade:	fb01 f000 	mul.w	r0, r1, r0
 800bae2:	68da      	ldr	r2, [r3, #12]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800bae4:	695b      	ldr	r3, [r3, #20]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bae6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800baea:	3201      	adds	r2, #1
 800baec:	fbb0 f0f2 	udiv	r0, r0, r2
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800baf0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800baf4:	3301      	adds	r3, #1
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	fbb0 f0f3 	udiv	r0, r0, r3
 800bafc:	e570      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800bafe:	4b1e      	ldr	r3, [pc, #120]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800bb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	db02      	blt.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x582>
          frequency = HAL_RCC_GetPCLK2Freq();
 800bb08:	f7fe ffd0 	bl	800aaac <HAL_RCC_GetPCLK2Freq>
 800bb0c:	e568      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800bb0e:	f7fe fbc1 	bl	800a294 <HAL_RCC_GetSysClockFreq>
 800bb12:	e565      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800bb14:	4b18      	ldr	r3, [pc, #96]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800bb16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
        switch(srcclk)
 800bb1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb22:	d008      	beq.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 800bb24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb28:	d008      	beq.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800bb2a:	b10b      	cbz	r3, 800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
  uint32_t frequency = 0U;
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	e557      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb30:	f7fe ffaa 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800bb34:	e554      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800bb36:	f7fe fbad 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800bb3a:	e551      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb3c:	4b0e      	ldr	r3, [pc, #56]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	480d      	ldr	r0, [pc, #52]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800bb48:	bf08      	it	eq
 800bb4a:	2000      	moveq	r0, #0
 800bb4c:	e548      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800bb4e:	4b0a      	ldr	r3, [pc, #40]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800bb50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        switch(srcclk)
 800bb58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb5c:	d008      	beq.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800bb5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb62:	d00d      	beq.n	800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 800bb64:	b10b      	cbz	r3, 800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
  uint32_t frequency = 0U;
 800bb66:	2000      	movs	r0, #0
 800bb68:	e53a      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb6a:	f7fe ff8d 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800bb6e:	e537      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800bb70:	f7fe fb90 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800bb74:	e534      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bb76:	bf00      	nop
 800bb78:	40021000 	.word	0x40021000
 800bb7c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb80:	4b46      	ldr	r3, [pc, #280]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	4845      	ldr	r0, [pc, #276]	; (800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 800bb8c:	bf08      	it	eq
 800bb8e:	2000      	moveq	r0, #0
 800bb90:	e526      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb92:	f7fe ff79 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800bb96:	e523      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetSysClockFreq();
 800bb98:	f7fe fb7c 	bl	800a294 <HAL_RCC_GetSysClockFreq>
          break;
 800bb9c:	e520      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb9e:	4b3f      	ldr	r3, [pc, #252]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	483d      	ldr	r0, [pc, #244]	; (800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 800bbaa:	bf08      	it	eq
 800bbac:	2000      	moveq	r0, #0
 800bbae:	e517      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800bbb0:	4b3a      	ldr	r3, [pc, #232]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800bbb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbb6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        switch(srcclk)
 800bbba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bbbe:	d016      	beq.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 800bbc0:	d910      	bls.n	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800bbc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bbc6:	d01d      	beq.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 800bbc8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bbcc:	d162      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bbce:	4b33      	ldr	r3, [pc, #204]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800bbd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbd4:	f003 0302 	and.w	r3, r3, #2
            frequency = LSE_VALUE;
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	bf0c      	ite	eq
 800bbdc:	2000      	moveq	r0, #0
 800bbde:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800bbe2:	e4fd      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d155      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bbe8:	f7fe ff4e 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800bbec:	e4f8      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800bbee:	4b2b      	ldr	r3, [pc, #172]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800bbf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbf4:	f003 0302 	and.w	r3, r3, #2
              frequency = LSI_VALUE;
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	bf0c      	ite	eq
 800bbfc:	2000      	moveq	r0, #0
 800bbfe:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800bc02:	e4ed      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc04:	4b25      	ldr	r3, [pc, #148]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	4824      	ldr	r0, [pc, #144]	; (800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 800bc10:	bf08      	it	eq
 800bc12:	2000      	moveq	r0, #0
 800bc14:	e4e4      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        switch(srcclk)
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d13e      	bne.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc1a:	f7fe ff35 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800bc1e:	e4df      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800bc20:	4b1e      	ldr	r3, [pc, #120]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800bc22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc26:	f003 0302 	and.w	r3, r3, #2
              frequency = LSI_VALUE;
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	bf0c      	ite	eq
 800bc2e:	2000      	moveq	r0, #0
 800bc30:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800bc34:	e4d4      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc36:	4b19      	ldr	r3, [pc, #100]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	4817      	ldr	r0, [pc, #92]	; (800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 800bc42:	bf08      	it	eq
 800bc44:	2000      	moveq	r0, #0
 800bc46:	e4cb      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc48:	f7fe ff1e 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
          break;
 800bc4c:	e4c8      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc4e:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            frequency = HSI_VALUE;
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	4811      	ldr	r0, [pc, #68]	; (800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>)
 800bc5a:	bf08      	it	eq
 800bc5c:	2000      	moveq	r0, #0
 800bc5e:	e4bf      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0U;
 800bc60:	2000      	movs	r0, #0
 800bc62:	e4bd      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc64:	2000      	movs	r0, #0
 800bc66:	e4bb      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	e4b9      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e4b7      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc70:	2000      	movs	r0, #0
 800bc72:	e4b5      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc74:	2000      	movs	r0, #0
 800bc76:	e4b3      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc78:	2000      	movs	r0, #0
 800bc7a:	e4b1      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	e4af      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc80:	2000      	movs	r0, #0
 800bc82:	e4ad      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc84:	2000      	movs	r0, #0
 800bc86:	e4ab      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc88:	2000      	movs	r0, #0
 800bc8a:	e4a9      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	e4a7      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc90:	2000      	movs	r0, #0
 800bc92:	e4a5      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc94:	2000      	movs	r0, #0
 800bc96:	e4a3      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc98:	2000      	movs	r0, #0
 800bc9a:	e4a1      	b.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800bc9c:	40021000 	.word	0x40021000
 800bca0:	00f42400 	.word	0x00f42400

0800bca4 <HAL_RCCEx_EnablePLLSAI1>:
{
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	4606      	mov	r6, r0
  __HAL_RCC_PLLSAI1_DISABLE();
 800bca8:	4a21      	ldr	r2, [pc, #132]	; (800bd30 <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bcb0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800bcb2:	f7f8 fdeb 	bl	800488c <HAL_GetTick>
 800bcb6:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bcb8:	4c1d      	ldr	r4, [pc, #116]	; (800bd30 <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 800bcba:	6823      	ldr	r3, [r4, #0]
 800bcbc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800bcc0:	d008      	beq.n	800bcd4 <HAL_RCCEx_EnablePLLSAI1+0x30>
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bcc2:	f7f8 fde3 	bl	800488c <HAL_GetTick>
 800bcc6:	1b40      	subs	r0, r0, r5
 800bcc8:	2802      	cmp	r0, #2
 800bcca:	d9f6      	bls.n	800bcba <HAL_RCCEx_EnablePLLSAI1+0x16>
      status = HAL_TIMEOUT;
 800bccc:	2003      	movs	r0, #3
}
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	e7fc      	b.n	800bcce <HAL_RCCEx_EnablePLLSAI1+0x2a>
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
 800bcd4:	4a16      	ldr	r2, [pc, #88]	; (800bd30 <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 800bcd6:	6910      	ldr	r0, [r2, #16]
 800bcd8:	68b1      	ldr	r1, [r6, #8]
 800bcda:	4b16      	ldr	r3, [pc, #88]	; (800bd34 <HAL_RCCEx_EnablePLLSAI1+0x90>)
 800bcdc:	4003      	ands	r3, r0
 800bcde:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bce2:	68f1      	ldr	r1, [r6, #12]
 800bce4:	0909      	lsrs	r1, r1, #4
 800bce6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800bcea:	6931      	ldr	r1, [r6, #16]
 800bcec:	0849      	lsrs	r1, r1, #1
 800bcee:	3901      	subs	r1, #1
 800bcf0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800bcf4:	6971      	ldr	r1, [r6, #20]
 800bcf6:	0849      	lsrs	r1, r1, #1
 800bcf8:	3901      	subs	r1, #1
 800bcfa:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800bcfe:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1Init->PLLSAI1ClockOut);
 800bd00:	6913      	ldr	r3, [r2, #16]
 800bd02:	69b1      	ldr	r1, [r6, #24]
 800bd04:	430b      	orrs	r3, r1
 800bd06:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 800bd08:	6813      	ldr	r3, [r2, #0]
 800bd0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd0e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800bd10:	f7f8 fdbc 	bl	800488c <HAL_GetTick>
 800bd14:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bd16:	4c06      	ldr	r4, [pc, #24]	; (800bd30 <HAL_RCCEx_EnablePLLSAI1+0x8c>)
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800bd1e:	d1d7      	bne.n	800bcd0 <HAL_RCCEx_EnablePLLSAI1+0x2c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bd20:	f7f8 fdb4 	bl	800488c <HAL_GetTick>
 800bd24:	1b40      	subs	r0, r0, r5
 800bd26:	2802      	cmp	r0, #2
 800bd28:	d9f6      	bls.n	800bd18 <HAL_RCCEx_EnablePLLSAI1+0x74>
        status = HAL_TIMEOUT;
 800bd2a:	2003      	movs	r0, #3
  return status;
 800bd2c:	e7cf      	b.n	800bcce <HAL_RCCEx_EnablePLLSAI1+0x2a>
 800bd2e:	bf00      	nop
 800bd30:	40021000 	.word	0x40021000
 800bd34:	f99d80ff 	.word	0xf99d80ff

0800bd38 <HAL_RCCEx_DisablePLLSAI1>:
{
 800bd38:	b538      	push	{r3, r4, r5, lr}
  __HAL_RCC_PLLSAI1_DISABLE();
 800bd3a:	4a12      	ldr	r2, [pc, #72]	; (800bd84 <HAL_RCCEx_DisablePLLSAI1+0x4c>)
 800bd3c:	6813      	ldr	r3, [r2, #0]
 800bd3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd42:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800bd44:	f7f8 fda2 	bl	800488c <HAL_GetTick>
 800bd48:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bd4a:	4c0e      	ldr	r4, [pc, #56]	; (800bd84 <HAL_RCCEx_DisablePLLSAI1+0x4c>)
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800bd52:	d006      	beq.n	800bd62 <HAL_RCCEx_DisablePLLSAI1+0x2a>
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bd54:	f7f8 fd9a 	bl	800488c <HAL_GetTick>
 800bd58:	1b40      	subs	r0, r0, r5
 800bd5a:	2802      	cmp	r0, #2
 800bd5c:	d9f6      	bls.n	800bd4c <HAL_RCCEx_DisablePLLSAI1+0x14>
      status = HAL_TIMEOUT;
 800bd5e:	2003      	movs	r0, #3
 800bd60:	e000      	b.n	800bd64 <HAL_RCCEx_DisablePLLSAI1+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 800bd62:	2000      	movs	r0, #0
  __HAL_RCC_PLLSAI1CLKOUT_DISABLE(RCC_PLLSAI1CFGR_PLLSAI1PEN|RCC_PLLSAI1CFGR_PLLSAI1QEN|RCC_PLLSAI1CFGR_PLLSAI1REN);
 800bd64:	4a07      	ldr	r2, [pc, #28]	; (800bd84 <HAL_RCCEx_DisablePLLSAI1+0x4c>)
 800bd66:	6913      	ldr	r3, [r2, #16]
 800bd68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bd6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd70:	6113      	str	r3, [r2, #16]
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800bd72:	6813      	ldr	r3, [r2, #0]
 800bd74:	f013 5f08 	tst.w	r3, #570425344	; 0x22000000
 800bd78:	d103      	bne.n	800bd82 <HAL_RCCEx_DisablePLLSAI1+0x4a>
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800bd7a:	68d3      	ldr	r3, [r2, #12]
 800bd7c:	f023 0303 	bic.w	r3, r3, #3
 800bd80:	60d3      	str	r3, [r2, #12]
}
 800bd82:	bd38      	pop	{r3, r4, r5, pc}
 800bd84:	40021000 	.word	0x40021000

0800bd88 <HAL_RCCEx_EnablePLLSAI2>:
{
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	4606      	mov	r6, r0
  __HAL_RCC_PLLSAI2_DISABLE();
 800bd8c:	4a1e      	ldr	r2, [pc, #120]	; (800be08 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 800bd8e:	6813      	ldr	r3, [r2, #0]
 800bd90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd94:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800bd96:	f7f8 fd79 	bl	800488c <HAL_GetTick>
 800bd9a:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bd9c:	4c1a      	ldr	r4, [pc, #104]	; (800be08 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800bda4:	d008      	beq.n	800bdb8 <HAL_RCCEx_EnablePLLSAI2+0x30>
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bda6:	f7f8 fd71 	bl	800488c <HAL_GetTick>
 800bdaa:	1b40      	subs	r0, r0, r5
 800bdac:	2802      	cmp	r0, #2
 800bdae:	d9f6      	bls.n	800bd9e <HAL_RCCEx_EnablePLLSAI2+0x16>
      status = HAL_TIMEOUT;
 800bdb0:	2003      	movs	r0, #3
}
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	e7fc      	b.n	800bdb2 <HAL_RCCEx_EnablePLLSAI2+0x2a>
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2R);
 800bdb8:	4a13      	ldr	r2, [pc, #76]	; (800be08 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 800bdba:	6950      	ldr	r0, [r2, #20]
 800bdbc:	68b1      	ldr	r1, [r6, #8]
 800bdbe:	4b13      	ldr	r3, [pc, #76]	; (800be0c <HAL_RCCEx_EnablePLLSAI2+0x84>)
 800bdc0:	4003      	ands	r3, r0
 800bdc2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bdc6:	68f1      	ldr	r1, [r6, #12]
 800bdc8:	0909      	lsrs	r1, r1, #4
 800bdca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800bdce:	6931      	ldr	r1, [r6, #16]
 800bdd0:	0849      	lsrs	r1, r1, #1
 800bdd2:	3901      	subs	r1, #1
 800bdd4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800bdd8:	6153      	str	r3, [r2, #20]
    __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PLLSAI2Init->PLLSAI2ClockOut);
 800bdda:	6953      	ldr	r3, [r2, #20]
 800bddc:	6971      	ldr	r1, [r6, #20]
 800bdde:	430b      	orrs	r3, r1
 800bde0:	6153      	str	r3, [r2, #20]
    __HAL_RCC_PLLSAI2_ENABLE();
 800bde2:	6813      	ldr	r3, [r2, #0]
 800bde4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bde8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800bdea:	f7f8 fd4f 	bl	800488c <HAL_GetTick>
 800bdee:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bdf0:	4c05      	ldr	r4, [pc, #20]	; (800be08 <HAL_RCCEx_EnablePLLSAI2+0x80>)
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800bdf8:	d1dc      	bne.n	800bdb4 <HAL_RCCEx_EnablePLLSAI2+0x2c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bdfa:	f7f8 fd47 	bl	800488c <HAL_GetTick>
 800bdfe:	1b40      	subs	r0, r0, r5
 800be00:	2802      	cmp	r0, #2
 800be02:	d9f6      	bls.n	800bdf2 <HAL_RCCEx_EnablePLLSAI2+0x6a>
        status = HAL_TIMEOUT;
 800be04:	2003      	movs	r0, #3
  return status;
 800be06:	e7d4      	b.n	800bdb2 <HAL_RCCEx_EnablePLLSAI2+0x2a>
 800be08:	40021000 	.word	0x40021000
 800be0c:	f9fd80ff 	.word	0xf9fd80ff

0800be10 <HAL_RCCEx_DisablePLLSAI2>:
{
 800be10:	b538      	push	{r3, r4, r5, lr}
  __HAL_RCC_PLLSAI2_DISABLE();
 800be12:	4a12      	ldr	r2, [pc, #72]	; (800be5c <HAL_RCCEx_DisablePLLSAI2+0x4c>)
 800be14:	6813      	ldr	r3, [r2, #0]
 800be16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be1a:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800be1c:	f7f8 fd36 	bl	800488c <HAL_GetTick>
 800be20:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800be22:	4c0e      	ldr	r4, [pc, #56]	; (800be5c <HAL_RCCEx_DisablePLLSAI2+0x4c>)
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800be2a:	d006      	beq.n	800be3a <HAL_RCCEx_DisablePLLSAI2+0x2a>
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800be2c:	f7f8 fd2e 	bl	800488c <HAL_GetTick>
 800be30:	1b40      	subs	r0, r0, r5
 800be32:	2802      	cmp	r0, #2
 800be34:	d9f6      	bls.n	800be24 <HAL_RCCEx_DisablePLLSAI2+0x14>
      status = HAL_TIMEOUT;
 800be36:	2003      	movs	r0, #3
 800be38:	e000      	b.n	800be3c <HAL_RCCEx_DisablePLLSAI2+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 800be3a:	2000      	movs	r0, #0
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
 800be3c:	4a07      	ldr	r2, [pc, #28]	; (800be5c <HAL_RCCEx_DisablePLLSAI2+0x4c>)
 800be3e:	6953      	ldr	r3, [r2, #20]
 800be40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be48:	6153      	str	r3, [r2, #20]
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY)) == 0U)
 800be4a:	6813      	ldr	r3, [r2, #0]
 800be4c:	f013 6f20 	tst.w	r3, #167772160	; 0xa000000
 800be50:	d103      	bne.n	800be5a <HAL_RCCEx_DisablePLLSAI2+0x4a>
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800be52:	68d3      	ldr	r3, [r2, #12]
 800be54:	f023 0303 	bic.w	r3, r3, #3
 800be58:	60d3      	str	r3, [r2, #12]
}
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	40021000 	.word	0x40021000

0800be60 <HAL_RCCEx_WakeUpStopCLKConfig>:
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 800be60:	4a03      	ldr	r2, [pc, #12]	; (800be70 <HAL_RCCEx_WakeUpStopCLKConfig+0x10>)
 800be62:	6893      	ldr	r3, [r2, #8]
 800be64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be68:	4318      	orrs	r0, r3
 800be6a:	6090      	str	r0, [r2, #8]
}
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	40021000 	.word	0x40021000

0800be74 <HAL_RCCEx_StandbyMSIRangeConfig>:
  __HAL_RCC_MSI_STANDBY_RANGE_CONFIG(MSIRange);
 800be74:	4a04      	ldr	r2, [pc, #16]	; (800be88 <HAL_RCCEx_StandbyMSIRangeConfig+0x14>)
 800be76:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800be7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800be7e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800be82:	f8c2 0094 	str.w	r0, [r2, #148]	; 0x94
}
 800be86:	4770      	bx	lr
 800be88:	40021000 	.word	0x40021000

0800be8c <HAL_RCCEx_EnableLSECSS>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800be8c:	4a03      	ldr	r2, [pc, #12]	; (800be9c <HAL_RCCEx_EnableLSECSS+0x10>)
 800be8e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800be92:	f043 0320 	orr.w	r3, r3, #32
 800be96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800be9a:	4770      	bx	lr
 800be9c:	40021000 	.word	0x40021000

0800bea0 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800bea0:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <HAL_RCCEx_DisableLSECSS+0x18>)
 800bea2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800bea6:	f022 0220 	bic.w	r2, r2, #32
 800beaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800beae:	699a      	ldr	r2, [r3, #24]
 800beb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800beb4:	619a      	str	r2, [r3, #24]
}
 800beb6:	4770      	bx	lr
 800beb8:	40021000 	.word	0x40021000

0800bebc <HAL_RCCEx_EnableLSECSS_IT>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800bebc:	4b0a      	ldr	r3, [pc, #40]	; (800bee8 <HAL_RCCEx_EnableLSECSS_IT+0x2c>)
 800bebe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800bec2:	f042 0220 	orr.w	r2, r2, #32
 800bec6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 800beca:	699a      	ldr	r2, [r3, #24]
 800becc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bed0:	619a      	str	r2, [r3, #24]
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 800bed2:	f5a3 3386 	sub.w	r3, r3, #68608	; 0x10c00
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800bedc:	601a      	str	r2, [r3, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 800bede:	689a      	ldr	r2, [r3, #8]
 800bee0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800bee4:	609a      	str	r2, [r3, #8]
}
 800bee6:	4770      	bx	lr
 800bee8:	40021000 	.word	0x40021000

0800beec <HAL_RCCEx_LSECSS_Callback>:
}
 800beec:	4770      	bx	lr
	...

0800bef0 <HAL_RCCEx_LSECSS_IRQHandler>:
{
 800bef0:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 800bef2:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <HAL_RCCEx_LSECSS_IRQHandler+0x1c>)
 800bef4:	69db      	ldr	r3, [r3, #28]
 800bef6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800befa:	d100      	bne.n	800befe <HAL_RCCEx_LSECSS_IRQHandler+0xe>
}
 800befc:	bd08      	pop	{r3, pc}
    HAL_RCCEx_LSECSS_Callback();
 800befe:	f7ff fff5 	bl	800beec <HAL_RCCEx_LSECSS_Callback>
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800bf02:	4b02      	ldr	r3, [pc, #8]	; (800bf0c <HAL_RCCEx_LSECSS_IRQHandler+0x1c>)
 800bf04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf08:	621a      	str	r2, [r3, #32]
}
 800bf0a:	e7f7      	b.n	800befc <HAL_RCCEx_LSECSS_IRQHandler+0xc>
 800bf0c:	40021000 	.word	0x40021000

0800bf10 <HAL_RCCEx_EnableLSCO>:
{
 800bf10:	b530      	push	{r4, r5, lr}
 800bf12:	b089      	sub	sp, #36	; 0x24
 800bf14:	4605      	mov	r5, r0
  __LSCO_CLK_ENABLE();
 800bf16:	4c27      	ldr	r4, [pc, #156]	; (800bfb4 <HAL_RCCEx_EnableLSCO+0xa4>)
 800bf18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bf1a:	f043 0301 	orr.w	r3, r3, #1
 800bf1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bf20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bf22:	f003 0301 	and.w	r3, r3, #1
 800bf26:	9301      	str	r3, [sp, #4]
 800bf28:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LSCO_PIN;
 800bf2a:	2304      	movs	r3, #4
 800bf2c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bf32:	2302      	movs	r3, #2
 800bf34:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800bf3a:	a903      	add	r1, sp, #12
 800bf3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bf40:	f7fa f8d0 	bl	80060e4 <HAL_GPIO_Init>
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf46:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800bf4a:	d11b      	bne.n	800bf84 <HAL_RCCEx_EnableLSCO+0x74>
    __HAL_RCC_PWR_CLK_ENABLE();
 800bf4c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800bf4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bf52:	65a2      	str	r2, [r4, #88]	; 0x58
 800bf54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf5a:	9302      	str	r3, [sp, #8]
 800bf5c:	9b02      	ldr	r3, [sp, #8]
    pwrclkchanged = SET;
 800bf5e:	2401      	movs	r4, #1
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf60:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <HAL_RCCEx_EnableLSCO+0xa8>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f413 7f80 	tst.w	r3, #256	; 0x100
 800bf68:	d00e      	beq.n	800bf88 <HAL_RCCEx_EnableLSCO+0x78>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800bf6a:	4b12      	ldr	r3, [pc, #72]	; (800bfb4 <HAL_RCCEx_EnableLSCO+0xa4>)
 800bf6c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bf70:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800bf74:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800bf78:	4328      	orrs	r0, r5
 800bf7a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
  if(pwrclkchanged == SET)
 800bf7e:	b994      	cbnz	r4, 800bfa6 <HAL_RCCEx_EnableLSCO+0x96>
}
 800bf80:	b009      	add	sp, #36	; 0x24
 800bf82:	bd30      	pop	{r4, r5, pc}
  FlagStatus       pwrclkchanged = RESET;
 800bf84:	2400      	movs	r4, #0
 800bf86:	e7eb      	b.n	800bf60 <HAL_RCCEx_EnableLSCO+0x50>
    HAL_PWR_EnableBkUpAccess();
 800bf88:	f7fd fb96 	bl	80096b8 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800bf8c:	4b09      	ldr	r3, [pc, #36]	; (800bfb4 <HAL_RCCEx_EnableLSCO+0xa4>)
 800bf8e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bf92:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800bf96:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800bf9a:	4328      	orrs	r0, r5
 800bf9c:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
    HAL_PWR_DisableBkUpAccess();
 800bfa0:	f7fd fb92 	bl	80096c8 <HAL_PWR_DisableBkUpAccess>
 800bfa4:	e7eb      	b.n	800bf7e <HAL_RCCEx_EnableLSCO+0x6e>
    __HAL_RCC_PWR_CLK_DISABLE();
 800bfa6:	4a03      	ldr	r2, [pc, #12]	; (800bfb4 <HAL_RCCEx_EnableLSCO+0xa4>)
 800bfa8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800bfaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfae:	6593      	str	r3, [r2, #88]	; 0x58
}
 800bfb0:	e7e6      	b.n	800bf80 <HAL_RCCEx_EnableLSCO+0x70>
 800bfb2:	bf00      	nop
 800bfb4:	40021000 	.word	0x40021000
 800bfb8:	40007000 	.word	0x40007000

0800bfbc <HAL_RCCEx_DisableLSCO>:
{
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	b082      	sub	sp, #8
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bfc0:	4b19      	ldr	r3, [pc, #100]	; (800c028 <HAL_RCCEx_DisableLSCO+0x6c>)
 800bfc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfc4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800bfc8:	d119      	bne.n	800bffe <HAL_RCCEx_DisableLSCO+0x42>
    __HAL_RCC_PWR_CLK_ENABLE();
 800bfca:	4b17      	ldr	r3, [pc, #92]	; (800c028 <HAL_RCCEx_DisableLSCO+0x6c>)
 800bfcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bfce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bfd2:	659a      	str	r2, [r3, #88]	; 0x58
 800bfd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfda:	9301      	str	r3, [sp, #4]
 800bfdc:	9b01      	ldr	r3, [sp, #4]
    pwrclkchanged = SET;
 800bfde:	2401      	movs	r4, #1
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bfe0:	4b12      	ldr	r3, [pc, #72]	; (800c02c <HAL_RCCEx_DisableLSCO+0x70>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f413 7f80 	tst.w	r3, #256	; 0x100
 800bfe8:	d00b      	beq.n	800c002 <HAL_RCCEx_DisableLSCO+0x46>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 800bfea:	4a0f      	ldr	r2, [pc, #60]	; (800c028 <HAL_RCCEx_DisableLSCO+0x6c>)
 800bfec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if(pwrclkchanged == SET)
 800bff8:	b97c      	cbnz	r4, 800c01a <HAL_RCCEx_DisableLSCO+0x5e>
}
 800bffa:	b002      	add	sp, #8
 800bffc:	bd10      	pop	{r4, pc}
  FlagStatus       pwrclkchanged = RESET;
 800bffe:	2400      	movs	r4, #0
 800c000:	e7ee      	b.n	800bfe0 <HAL_RCCEx_DisableLSCO+0x24>
    HAL_PWR_EnableBkUpAccess();
 800c002:	f7fd fb59 	bl	80096b8 <HAL_PWR_EnableBkUpAccess>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 800c006:	4a08      	ldr	r2, [pc, #32]	; (800c028 <HAL_RCCEx_DisableLSCO+0x6c>)
 800c008:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800c00c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    HAL_PWR_DisableBkUpAccess();
 800c014:	f7fd fb58 	bl	80096c8 <HAL_PWR_DisableBkUpAccess>
 800c018:	e7ee      	b.n	800bff8 <HAL_RCCEx_DisableLSCO+0x3c>
    __HAL_RCC_PWR_CLK_DISABLE();
 800c01a:	4a03      	ldr	r2, [pc, #12]	; (800c028 <HAL_RCCEx_DisableLSCO+0x6c>)
 800c01c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c01e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c022:	6593      	str	r3, [r2, #88]	; 0x58
}
 800c024:	e7e9      	b.n	800bffa <HAL_RCCEx_DisableLSCO+0x3e>
 800c026:	bf00      	nop
 800c028:	40021000 	.word	0x40021000
 800c02c:	40007000 	.word	0x40007000

0800c030 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800c030:	4a02      	ldr	r2, [pc, #8]	; (800c03c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800c032:	6813      	ldr	r3, [r2, #0]
 800c034:	f043 0304 	orr.w	r3, r3, #4
 800c038:	6013      	str	r3, [r2, #0]
}
 800c03a:	4770      	bx	lr
 800c03c:	40021000 	.word	0x40021000

0800c040 <HAL_RCCEx_DisableMSIPLLMode>:
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800c040:	4a02      	ldr	r2, [pc, #8]	; (800c04c <HAL_RCCEx_DisableMSIPLLMode+0xc>)
 800c042:	6813      	ldr	r3, [r2, #0]
 800c044:	f023 0304 	bic.w	r3, r3, #4
 800c048:	6013      	str	r3, [r2, #0]
}
 800c04a:	4770      	bx	lr
 800c04c:	40021000 	.word	0x40021000

0800c050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	4607      	mov	r7, r0
 800c054:	460e      	mov	r6, r1
 800c056:	4615      	mov	r5, r2
 800c058:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	6893      	ldr	r3, [r2, #8]
 800c05e:	ea36 0303 	bics.w	r3, r6, r3
 800c062:	bf0c      	ite	eq
 800c064:	2301      	moveq	r3, #1
 800c066:	2300      	movne	r3, #0
 800c068:	42ab      	cmp	r3, r5
 800c06a:	d037      	beq.n	800c0dc <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c06c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800c070:	d0f4      	beq.n	800c05c <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c072:	f7f8 fc0b 	bl	800488c <HAL_GetTick>
 800c076:	9b06      	ldr	r3, [sp, #24]
 800c078:	1ac0      	subs	r0, r0, r3
 800c07a:	42a0      	cmp	r0, r4
 800c07c:	d201      	bcs.n	800c082 <SPI_WaitFlagStateUntilTimeout+0x32>
 800c07e:	2c00      	cmp	r4, #0
 800c080:	d1eb      	bne.n	800c05a <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	6853      	ldr	r3, [r2, #4]
 800c086:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800c08a:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c092:	d00b      	beq.n	800c0ac <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c09a:	d014      	beq.n	800c0c6 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c09c:	2301      	movs	r3, #1
 800c09e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c0a8:	2003      	movs	r0, #3
 800c0aa:	e018      	b.n	800c0de <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0b2:	d002      	beq.n	800c0ba <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c0b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0b8:	d1ec      	bne.n	800c094 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	6813      	ldr	r3, [r2, #0]
 800c0be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	e7e6      	b.n	800c094 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	6813      	ldr	r3, [r2, #0]
 800c0ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0ce:	6013      	str	r3, [r2, #0]
 800c0d0:	683a      	ldr	r2, [r7, #0]
 800c0d2:	6813      	ldr	r3, [r2, #0]
 800c0d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c0d8:	6013      	str	r3, [r2, #0]
 800c0da:	e7df      	b.n	800c09c <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 800c0dc:	2000      	movs	r0, #0
}
 800c0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c0e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	4607      	mov	r7, r0
 800c0e4:	460c      	mov	r4, r1
 800c0e6:	4615      	mov	r5, r2
 800c0e8:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	e002      	b.n	800c0f4 <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 800c0ee:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800c0f2:	d10a      	bne.n	800c10a <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 800c0f4:	6893      	ldr	r3, [r2, #8]
 800c0f6:	4023      	ands	r3, r4
 800c0f8:	42ab      	cmp	r3, r5
 800c0fa:	d03b      	beq.n	800c174 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c0fc:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800c100:	d1f5      	bne.n	800c0ee <SPI_WaitFifoStateUntilTimeout+0xe>
 800c102:	2d00      	cmp	r5, #0
 800c104:	d1f3      	bne.n	800c0ee <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800c106:	7b13      	ldrb	r3, [r2, #12]
 800c108:	e7f1      	b.n	800c0ee <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c10a:	f7f8 fbbf 	bl	800488c <HAL_GetTick>
 800c10e:	9b06      	ldr	r3, [sp, #24]
 800c110:	1ac0      	subs	r0, r0, r3
 800c112:	42b0      	cmp	r0, r6
 800c114:	d201      	bcs.n	800c11a <SPI_WaitFifoStateUntilTimeout+0x3a>
 800c116:	2e00      	cmp	r6, #0
 800c118:	d1e7      	bne.n	800c0ea <SPI_WaitFifoStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	6853      	ldr	r3, [r2, #4]
 800c11e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800c122:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c12a:	d00b      	beq.n	800c144 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c132:	d014      	beq.n	800c15e <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c134:	2301      	movs	r3, #1
 800c136:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c13a:	2300      	movs	r3, #0
 800c13c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c140:	2003      	movs	r0, #3
 800c142:	e018      	b.n	800c176 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c14a:	d002      	beq.n	800c152 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c14c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c150:	d1ec      	bne.n	800c12c <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	6813      	ldr	r3, [r2, #0]
 800c156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	e7e6      	b.n	800c12c <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	6813      	ldr	r3, [r2, #0]
 800c162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	6813      	ldr	r3, [r2, #0]
 800c16c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c170:	6013      	str	r3, [r2, #0]
 800c172:	e7df      	b.n	800c134 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 800c174:	2000      	movs	r0, #0
}
 800c176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	4604      	mov	r4, r0
 800c17e:	460d      	mov	r5, r1
 800c180:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c182:	9200      	str	r2, [sp, #0]
 800c184:	460b      	mov	r3, r1
 800c186:	2200      	movs	r2, #0
 800c188:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c18c:	f7ff ffa8 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800c190:	b9b8      	cbnz	r0, 800c1c2 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c192:	9600      	str	r6, [sp, #0]
 800c194:	462b      	mov	r3, r5
 800c196:	2200      	movs	r2, #0
 800c198:	2180      	movs	r1, #128	; 0x80
 800c19a:	4620      	mov	r0, r4
 800c19c:	f7ff ff58 	bl	800c050 <SPI_WaitFlagStateUntilTimeout>
 800c1a0:	b9b8      	cbnz	r0, 800c1d2 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c1a2:	9600      	str	r6, [sp, #0]
 800c1a4:	462b      	mov	r3, r5
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f7ff ff97 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	b150      	cbz	r0, 800c1cc <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c1b8:	f043 0320 	orr.w	r3, r3, #32
 800c1bc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800c1be:	2303      	movs	r3, #3
 800c1c0:	e004      	b.n	800c1cc <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c1c4:	f043 0320 	orr.w	r3, r3, #32
 800c1c8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800c1ca:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	b002      	add	sp, #8
 800c1d0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c1d4:	f043 0320 	orr.w	r3, r3, #32
 800c1d8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	e7f6      	b.n	800c1cc <SPI_EndRxTxTransaction+0x54>

0800c1de <SPI_EndRxTransaction>:
{
 800c1de:	b570      	push	{r4, r5, r6, lr}
 800c1e0:	b082      	sub	sp, #8
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	460d      	mov	r5, r1
 800c1e6:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1e8:	6843      	ldr	r3, [r0, #4]
 800c1ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1ee:	d00f      	beq.n	800c210 <SPI_EndRxTransaction+0x32>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c1f0:	9600      	str	r6, [sp, #0]
 800c1f2:	462b      	mov	r3, r5
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2180      	movs	r1, #128	; 0x80
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f7ff ff29 	bl	800c050 <SPI_WaitFlagStateUntilTimeout>
 800c1fe:	4603      	mov	r3, r0
 800c200:	b998      	cbnz	r0, 800c22a <SPI_EndRxTransaction+0x4c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c202:	6862      	ldr	r2, [r4, #4]
 800c204:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800c208:	d015      	beq.n	800c236 <SPI_EndRxTransaction+0x58>
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	b002      	add	sp, #8
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c210:	6883      	ldr	r3, [r0, #8]
 800c212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c216:	d002      	beq.n	800c21e <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c21c:	d1e8      	bne.n	800c1f0 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800c21e:	6822      	ldr	r2, [r4, #0]
 800c220:	6813      	ldr	r3, [r2, #0]
 800c222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	e7e2      	b.n	800c1f0 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c22a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c22c:	f043 0320 	orr.w	r3, r3, #32
 800c230:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e7e9      	b.n	800c20a <SPI_EndRxTransaction+0x2c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c236:	68a2      	ldr	r2, [r4, #8]
 800c238:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c23c:	d002      	beq.n	800c244 <SPI_EndRxTransaction+0x66>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c23e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c242:	d1e2      	bne.n	800c20a <SPI_EndRxTransaction+0x2c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c244:	9600      	str	r6, [sp, #0]
 800c246:	462b      	mov	r3, r5
 800c248:	2200      	movs	r2, #0
 800c24a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c24e:	4620      	mov	r0, r4
 800c250:	f7ff ff46 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800c254:	4603      	mov	r3, r0
 800c256:	2800      	cmp	r0, #0
 800c258:	d0d7      	beq.n	800c20a <SPI_EndRxTransaction+0x2c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c25a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c25c:	f043 0320 	orr.w	r3, r3, #32
 800c260:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800c262:	2303      	movs	r3, #3
 800c264:	e7d1      	b.n	800c20a <SPI_EndRxTransaction+0x2c>
	...

0800c268 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800c268:	b510      	push	{r4, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	4604      	mov	r4, r0
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c26e:	6802      	ldr	r2, [r0, #0]
 800c270:	6813      	ldr	r3, [r2, #0]
 800c272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c276:	6013      	str	r3, [r2, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c278:	4b1d      	ldr	r3, [pc, #116]	; (800c2f0 <SPI_AbortRx_ISR+0x88>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a1d      	ldr	r2, [pc, #116]	; (800c2f4 <SPI_AbortRx_ISR+0x8c>)
 800c27e:	fba2 2303 	umull	r2, r3, r2, r3
 800c282:	0a5b      	lsrs	r3, r3, #9
 800c284:	2264      	movs	r2, #100	; 0x64
 800c286:	fb02 f303 	mul.w	r3, r2, r3
 800c28a:	9303      	str	r3, [sp, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800c28c:	6802      	ldr	r2, [r0, #0]
 800c28e:	6853      	ldr	r3, [r2, #4]
 800c290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c294:	6053      	str	r3, [r2, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800c296:	9b03      	ldr	r3, [sp, #12]
 800c298:	b143      	cbz	r3, 800c2ac <SPI_AbortRx_ISR+0x44>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
      break;
    }
    count--;
 800c29a:	9b03      	ldr	r3, [sp, #12]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	9303      	str	r3, [sp, #12]
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c2a8:	d1f5      	bne.n	800c296 <SPI_AbortRx_ISR+0x2e>
 800c2aa:	e003      	b.n	800c2b4 <SPI_AbortRx_ISR+0x4c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c2ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b2:	6623      	str	r3, [r4, #96]	; 0x60

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800c2b4:	f7f8 faea 	bl	800488c <HAL_GetTick>
 800c2b8:	9000      	str	r0, [sp, #0]
 800c2ba:	2364      	movs	r3, #100	; 0x64
 800c2bc:	2200      	movs	r2, #0
 800c2be:	2180      	movs	r1, #128	; 0x80
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f7ff fec5 	bl	800c050 <SPI_WaitFlagStateUntilTimeout>
 800c2c6:	b108      	cbz	r0, 800c2cc <SPI_AbortRx_ISR+0x64>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800c2c8:	2340      	movs	r3, #64	; 0x40
 800c2ca:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800c2cc:	f7f8 fade 	bl	800488c <HAL_GetTick>
 800c2d0:	9000      	str	r0, [sp, #0]
 800c2d2:	2364      	movs	r3, #100	; 0x64
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f7ff ff00 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800c2e0:	b108      	cbz	r0, 800c2e6 <SPI_AbortRx_ISR+0x7e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800c2e2:	2340      	movs	r3, #64	; 0x40
 800c2e4:	6623      	str	r3, [r4, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800c2e6:	2307      	movs	r3, #7
 800c2e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800c2ec:	b004      	add	sp, #16
 800c2ee:	bd10      	pop	{r4, pc}
 800c2f0:	20000008 	.word	0x20000008
 800c2f4:	057619f1 	.word	0x057619f1

0800c2f8 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	4604      	mov	r4, r0
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c2fe:	4b38      	ldr	r3, [pc, #224]	; (800c3e0 <SPI_AbortTx_ISR+0xe8>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a38      	ldr	r2, [pc, #224]	; (800c3e4 <SPI_AbortTx_ISR+0xec>)
 800c304:	fba2 2303 	umull	r2, r3, r2, r3
 800c308:	0a5b      	lsrs	r3, r3, #9
 800c30a:	2264      	movs	r2, #100	; 0x64
 800c30c:	fb02 f303 	mul.w	r3, r2, r3
 800c310:	9303      	str	r3, [sp, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800c312:	6802      	ldr	r2, [r0, #0]
 800c314:	6853      	ldr	r3, [r2, #4]
 800c316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c31a:	6053      	str	r3, [r2, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800c31c:	9b03      	ldr	r3, [sp, #12]
 800c31e:	b143      	cbz	r3, 800c332 <SPI_AbortTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
      break;
    }
    count--;
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	3b01      	subs	r3, #1
 800c324:	9303      	str	r3, [sp, #12]
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c32e:	d1f5      	bne.n	800c31c <SPI_AbortTx_ISR+0x24>
 800c330:	e003      	b.n	800c33a <SPI_AbortTx_ISR+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c332:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c338:	6623      	str	r3, [r4, #96]	; 0x60

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800c33a:	f7f8 faa7 	bl	800488c <HAL_GetTick>
 800c33e:	4602      	mov	r2, r0
 800c340:	2164      	movs	r1, #100	; 0x64
 800c342:	4620      	mov	r0, r4
 800c344:	f7ff ff18 	bl	800c178 <SPI_EndRxTxTransaction>
 800c348:	b108      	cbz	r0, 800c34e <SPI_AbortTx_ISR+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800c34a:	2340      	movs	r3, #64	; 0x40
 800c34c:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c34e:	6822      	ldr	r2, [r4, #0]
 800c350:	6813      	ldr	r3, [r2, #0]
 800c352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c356:	6013      	str	r3, [r2, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800c358:	f7f8 fa98 	bl	800488c <HAL_GetTick>
 800c35c:	9000      	str	r0, [sp, #0]
 800c35e:	2364      	movs	r3, #100	; 0x64
 800c360:	2200      	movs	r2, #0
 800c362:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c366:	4620      	mov	r0, r4
 800c368:	f7ff feba 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800c36c:	b108      	cbz	r0, 800c372 <SPI_AbortTx_ISR+0x7a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800c36e:	2340      	movs	r3, #64	; 0x40
 800c370:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c37a:	d02b      	beq.n	800c3d4 <SPI_AbortTx_ISR+0xdc>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c382:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800c384:	9b03      	ldr	r3, [sp, #12]
 800c386:	b143      	cbz	r3, 800c39a <SPI_AbortTx_ISR+0xa2>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
        break;
      }
      count--;
 800c388:	9b03      	ldr	r3, [sp, #12]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	9303      	str	r3, [sp, #12]
    }
    while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c396:	d1f5      	bne.n	800c384 <SPI_AbortTx_ISR+0x8c>
 800c398:	e003      	b.n	800c3a2 <SPI_AbortTx_ISR+0xaa>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c39a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c39c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a0:	6623      	str	r3, [r4, #96]	; 0x60

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800c3a2:	f7f8 fa73 	bl	800488c <HAL_GetTick>
 800c3a6:	9000      	str	r0, [sp, #0]
 800c3a8:	2364      	movs	r3, #100	; 0x64
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	2180      	movs	r1, #128	; 0x80
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7ff fe4e 	bl	800c050 <SPI_WaitFlagStateUntilTimeout>
 800c3b4:	b108      	cbz	r0, 800c3ba <SPI_AbortTx_ISR+0xc2>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800c3b6:	2340      	movs	r3, #64	; 0x40
 800c3b8:	6623      	str	r3, [r4, #96]	; 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800c3ba:	f7f8 fa67 	bl	800488c <HAL_GetTick>
 800c3be:	9000      	str	r0, [sp, #0]
 800c3c0:	2364      	movs	r3, #100	; 0x64
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f7ff fe89 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800c3ce:	b108      	cbz	r0, 800c3d4 <SPI_AbortTx_ISR+0xdc>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800c3d0:	2340      	movs	r3, #64	; 0x40
 800c3d2:	6623      	str	r3, [r4, #96]	; 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800c3d4:	2307      	movs	r3, #7
 800c3d6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800c3da:	b004      	add	sp, #16
 800c3dc:	bd10      	pop	{r4, pc}
 800c3de:	bf00      	nop
 800c3e0:	20000008 	.word	0x20000008
 800c3e4:	057619f1 	.word	0x057619f1
}
 800c3e8:	4770      	bx	lr

0800c3ea <HAL_SPI_Init>:
  if (hspi == NULL)
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d052      	beq.n	800c494 <HAL_SPI_Init+0xaa>
{
 800c3ee:	b510      	push	{r4, lr}
 800c3f0:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3f6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800c3fa:	b1bb      	cbz	r3, 800c42c <HAL_SPI_Init+0x42>
  hspi->State = HAL_SPI_STATE_BUSY;
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800c402:	6822      	ldr	r2, [r4, #0]
 800c404:	6813      	ldr	r3, [r2, #0]
 800c406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c40a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c40c:	68e3      	ldr	r3, [r4, #12]
 800c40e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c412:	d841      	bhi.n	800c498 <HAL_SPI_Init+0xae>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c414:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c418:	d04d      	beq.n	800c4b6 <HAL_SPI_Init+0xcc>
 800c41a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c41e:	d10a      	bne.n	800c436 <HAL_SPI_Init+0x4c>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c420:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c422:	2b00      	cmp	r3, #0
 800c424:	d033      	beq.n	800c48e <HAL_SPI_Init+0xa4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c42a:	e00b      	b.n	800c444 <HAL_SPI_Init+0x5a>
    hspi->Lock = HAL_UNLOCKED;
 800c42c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800c430:	f7f7 ff10 	bl	8004254 <HAL_SPI_MspInit>
 800c434:	e7e2      	b.n	800c3fc <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c43a:	e031      	b.n	800c4a0 <HAL_SPI_Init+0xb6>
 800c43c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c440:	2302      	movs	r3, #2
 800c442:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c444:	6822      	ldr	r2, [r4, #0]
 800c446:	6863      	ldr	r3, [r4, #4]
 800c448:	68a0      	ldr	r0, [r4, #8]
 800c44a:	4303      	orrs	r3, r0
 800c44c:	6920      	ldr	r0, [r4, #16]
 800c44e:	4303      	orrs	r3, r0
 800c450:	6960      	ldr	r0, [r4, #20]
 800c452:	4303      	orrs	r3, r0
 800c454:	69e0      	ldr	r0, [r4, #28]
 800c456:	4303      	orrs	r3, r0
 800c458:	6a20      	ldr	r0, [r4, #32]
 800c45a:	4303      	orrs	r3, r0
 800c45c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c45e:	4303      	orrs	r3, r0
 800c460:	69a0      	ldr	r0, [r4, #24]
 800c462:	f400 7000 	and.w	r0, r0, #512	; 0x200
 800c466:	4303      	orrs	r3, r0
 800c468:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c46a:	6822      	ldr	r2, [r4, #0]
 800c46c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c46e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c470:	4303      	orrs	r3, r0
 800c472:	68e0      	ldr	r0, [r4, #12]
 800c474:	4303      	orrs	r3, r0
 800c476:	8b60      	ldrh	r0, [r4, #26]
 800c478:	f000 0004 	and.w	r0, r0, #4
 800c47c:	4303      	orrs	r3, r0
 800c47e:	430b      	orrs	r3, r1
 800c480:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c482:	2000      	movs	r0, #0
 800c484:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c486:	2301      	movs	r3, #1
 800c488:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800c48c:	bd10      	pop	{r4, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c48e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c492:	e00d      	b.n	800c4b0 <HAL_SPI_Init+0xc6>
    return HAL_ERROR;
 800c494:	2001      	movs	r0, #1
}
 800c496:	4770      	bx	lr
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c498:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c49c:	d011      	beq.n	800c4c2 <HAL_SPI_Init+0xd8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c49e:	2100      	movs	r1, #0
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c4a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c4a6:	2a00      	cmp	r2, #0
 800c4a8:	d1cc      	bne.n	800c444 <HAL_SPI_Init+0x5a>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c4ae:	d8c7      	bhi.n	800c440 <HAL_SPI_Init+0x56>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	6323      	str	r3, [r4, #48]	; 0x30
 800c4b4:	e7c6      	b.n	800c444 <HAL_SPI_Init+0x5a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c4b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d0bf      	beq.n	800c43c <HAL_SPI_Init+0x52>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c4bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c4c0:	e7c0      	b.n	800c444 <HAL_SPI_Init+0x5a>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c4c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c4c4:	2900      	cmp	r1, #0
 800c4c6:	d0bb      	beq.n	800c440 <HAL_SPI_Init+0x56>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	e7bb      	b.n	800c444 <HAL_SPI_Init+0x5a>
}
 800c4cc:	4770      	bx	lr

0800c4ce <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800c4ce:	b190      	cbz	r0, 800c4f6 <HAL_SPI_DeInit+0x28>
{
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800c4da:	6802      	ldr	r2, [r0, #0]
 800c4dc:	6813      	ldr	r3, [r2, #0]
 800c4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4e2:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800c4e4:	f7f7 ff02 	bl	80042ec <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800c4ec:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c4f0:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
}
 800c4f4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c4f6:	2001      	movs	r0, #1
}
 800c4f8:	4770      	bx	lr

0800c4fa <HAL_SPI_Transmit>:
{
 800c4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4fe:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800c500:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800c504:	2c01      	cmp	r4, #1
 800c506:	f000 80e3 	beq.w	800c6d0 <HAL_SPI_Transmit+0x1d6>
 800c50a:	461e      	mov	r6, r3
 800c50c:	4615      	mov	r5, r2
 800c50e:	4688      	mov	r8, r1
 800c510:	4604      	mov	r4, r0
 800c512:	2301      	movs	r3, #1
 800c514:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800c518:	f7f8 f9b8 	bl	800488c <HAL_GetTick>
 800c51c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800c51e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800c522:	b2d2      	uxtb	r2, r2
 800c524:	2a01      	cmp	r2, #1
 800c526:	d009      	beq.n	800c53c <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800c528:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c52a:	2301      	movs	r3, #1
 800c52c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c530:	2300      	movs	r3, #0
 800c532:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800c536:	b002      	add	sp, #8
 800c538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800c53c:	f1b8 0f00 	cmp.w	r8, #0
 800c540:	f000 80c0 	beq.w	800c6c4 <HAL_SPI_Transmit+0x1ca>
 800c544:	2d00      	cmp	r5, #0
 800c546:	f000 80bf 	beq.w	800c6c8 <HAL_SPI_Transmit+0x1ce>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c54a:	2303      	movs	r3, #3
 800c54c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c550:	2300      	movs	r3, #0
 800c552:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c554:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c558:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c55a:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c55c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c55e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c562:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c566:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c568:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c56a:	68a3      	ldr	r3, [r4, #8]
 800c56c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c570:	d01c      	beq.n	800c5ac <HAL_SPI_Transmit+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c57a:	d103      	bne.n	800c584 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c582:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c584:	68e3      	ldr	r3, [r4, #12]
 800c586:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c58a:	d936      	bls.n	800c5fa <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	b10b      	cbz	r3, 800c594 <HAL_SPI_Transmit+0x9a>
 800c590:	2d01      	cmp	r5, #1
 800c592:	d11a      	bne.n	800c5ca <HAL_SPI_Transmit+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c598:	8812      	ldrh	r2, [r2, #0]
 800c59a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c59c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c59e:	3302      	adds	r3, #2
 800c5a0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800c5a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c5aa:	e00e      	b.n	800c5ca <HAL_SPI_Transmit+0xd0>
    SPI_1LINE_TX(hspi);
 800c5ac:	6822      	ldr	r2, [r4, #0]
 800c5ae:	6813      	ldr	r3, [r2, #0]
 800c5b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c5b4:	6013      	str	r3, [r2, #0]
 800c5b6:	e7dc      	b.n	800c572 <HAL_SPI_Transmit+0x78>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5b8:	f7f8 f968 	bl	800488c <HAL_GetTick>
 800c5bc:	1bc0      	subs	r0, r0, r7
 800c5be:	42b0      	cmp	r0, r6
 800c5c0:	d317      	bcc.n	800c5f2 <HAL_SPI_Transmit+0xf8>
 800c5c2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800c5c6:	f040 8081 	bne.w	800c6cc <HAL_SPI_Transmit+0x1d2>
    while (hspi->TxXferCount > 0U)
 800c5ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d062      	beq.n	800c698 <HAL_SPI_Transmit+0x19e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	689a      	ldr	r2, [r3, #8]
 800c5d6:	f012 0f02 	tst.w	r2, #2
 800c5da:	d0ed      	beq.n	800c5b8 <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c5de:	8812      	ldrh	r2, [r2, #0]
 800c5e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c5e4:	3302      	adds	r3, #2
 800c5e6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c5e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c5f0:	e7eb      	b.n	800c5ca <HAL_SPI_Transmit+0xd0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5f2:	2e00      	cmp	r6, #0
 800c5f4:	d1e9      	bne.n	800c5ca <HAL_SPI_Transmit+0xd0>
          errorcode = HAL_TIMEOUT;
 800c5f6:	2003      	movs	r0, #3
 800c5f8:	e797      	b.n	800c52a <HAL_SPI_Transmit+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c5fa:	6863      	ldr	r3, [r4, #4]
 800c5fc:	b10b      	cbz	r3, 800c602 <HAL_SPI_Transmit+0x108>
 800c5fe:	2d01      	cmp	r5, #1
 800c600:	d125      	bne.n	800c64e <HAL_SPI_Transmit+0x154>
      if (hspi->TxXferCount > 1U)
 800c602:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c604:	b29b      	uxth	r3, r3
 800c606:	2b01      	cmp	r3, #1
 800c608:	d90b      	bls.n	800c622 <HAL_SPI_Transmit+0x128>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c60e:	8812      	ldrh	r2, [r2, #0]
 800c610:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c614:	3302      	adds	r3, #2
 800c616:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c618:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c61a:	3b02      	subs	r3, #2
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c620:	e015      	b.n	800c64e <HAL_SPI_Transmit+0x154>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c622:	6823      	ldr	r3, [r4, #0]
 800c624:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c626:	7812      	ldrb	r2, [r2, #0]
 800c628:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800c62a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c62c:	3301      	adds	r3, #1
 800c62e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c630:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c632:	3b01      	subs	r3, #1
 800c634:	b29b      	uxth	r3, r3
 800c636:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c638:	e009      	b.n	800c64e <HAL_SPI_Transmit+0x154>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c63a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800c640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c642:	3301      	adds	r3, #1
 800c644:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800c646:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c648:	3b01      	subs	r3, #1
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800c64e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c650:	b29b      	uxth	r3, r3
 800c652:	b30b      	cbz	r3, 800c698 <HAL_SPI_Transmit+0x19e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c654:	6822      	ldr	r2, [r4, #0]
 800c656:	6893      	ldr	r3, [r2, #8]
 800c658:	f013 0f02 	tst.w	r3, #2
 800c65c:	d00e      	beq.n	800c67c <HAL_SPI_Transmit+0x182>
        if (hspi->TxXferCount > 1U)
 800c65e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c660:	b29b      	uxth	r3, r3
 800c662:	2b01      	cmp	r3, #1
 800c664:	d9e9      	bls.n	800c63a <HAL_SPI_Transmit+0x140>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c66c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c66e:	3302      	adds	r3, #2
 800c670:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c672:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c674:	3b02      	subs	r3, #2
 800c676:	b29b      	uxth	r3, r3
 800c678:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c67a:	e7e8      	b.n	800c64e <HAL_SPI_Transmit+0x154>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c67c:	f7f8 f906 	bl	800488c <HAL_GetTick>
 800c680:	1bc0      	subs	r0, r0, r7
 800c682:	42b0      	cmp	r0, r6
 800c684:	d304      	bcc.n	800c690 <HAL_SPI_Transmit+0x196>
 800c686:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800c68a:	d0e0      	beq.n	800c64e <HAL_SPI_Transmit+0x154>
          errorcode = HAL_TIMEOUT;
 800c68c:	2003      	movs	r0, #3
 800c68e:	e74c      	b.n	800c52a <HAL_SPI_Transmit+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c690:	2e00      	cmp	r6, #0
 800c692:	d1dc      	bne.n	800c64e <HAL_SPI_Transmit+0x154>
          errorcode = HAL_TIMEOUT;
 800c694:	2003      	movs	r0, #3
 800c696:	e748      	b.n	800c52a <HAL_SPI_Transmit+0x30>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c698:	463a      	mov	r2, r7
 800c69a:	4631      	mov	r1, r6
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7ff fd6b 	bl	800c178 <SPI_EndRxTxTransaction>
 800c6a2:	b108      	cbz	r0, 800c6a8 <HAL_SPI_Transmit+0x1ae>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c6a4:	2320      	movs	r3, #32
 800c6a6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c6a8:	68a3      	ldr	r3, [r4, #8]
 800c6aa:	b933      	cbnz	r3, 800c6ba <HAL_SPI_Transmit+0x1c0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	68da      	ldr	r2, [r3, #12]
 800c6b2:	9201      	str	r2, [sp, #4]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	9301      	str	r3, [sp, #4]
 800c6b8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c6ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800c6bc:	3000      	adds	r0, #0
 800c6be:	bf18      	it	ne
 800c6c0:	2001      	movne	r0, #1
error:
 800c6c2:	e732      	b.n	800c52a <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 800c6c4:	2001      	movs	r0, #1
 800c6c6:	e730      	b.n	800c52a <HAL_SPI_Transmit+0x30>
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	e72e      	b.n	800c52a <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800c6cc:	2003      	movs	r0, #3
 800c6ce:	e72c      	b.n	800c52a <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800c6d0:	2002      	movs	r0, #2
 800c6d2:	e730      	b.n	800c536 <HAL_SPI_Transmit+0x3c>

0800c6d4 <HAL_SPI_TransmitReceive>:
{
 800c6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 800c6dc:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800c6e0:	2c01      	cmp	r4, #1
 800c6e2:	f000 8161 	beq.w	800c9a8 <HAL_SPI_TransmitReceive+0x2d4>
 800c6e6:	461d      	mov	r5, r3
 800c6e8:	4617      	mov	r7, r2
 800c6ea:	460e      	mov	r6, r1
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800c6f4:	f7f8 f8ca 	bl	800488c <HAL_GetTick>
 800c6f8:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800c6fa:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800c6fe:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c700:	2801      	cmp	r0, #1
 800c702:	d015      	beq.n	800c730 <HAL_SPI_TransmitReceive+0x5c>
 800c704:	6863      	ldr	r3, [r4, #4]
 800c706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c70a:	d009      	beq.n	800c720 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 800c70c:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c70e:	2201      	movs	r2, #1
 800c710:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c714:	2200      	movs	r2, #0
 800c716:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c720:	68a3      	ldr	r3, [r4, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	f040 8134 	bne.w	800c990 <HAL_SPI_TransmitReceive+0x2bc>
 800c728:	2804      	cmp	r0, #4
 800c72a:	d001      	beq.n	800c730 <HAL_SPI_TransmitReceive+0x5c>
    errorcode = HAL_BUSY;
 800c72c:	2302      	movs	r3, #2
 800c72e:	e7ee      	b.n	800c70e <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c730:	2e00      	cmp	r6, #0
 800c732:	f000 812f 	beq.w	800c994 <HAL_SPI_TransmitReceive+0x2c0>
 800c736:	2f00      	cmp	r7, #0
 800c738:	f000 812e 	beq.w	800c998 <HAL_SPI_TransmitReceive+0x2c4>
 800c73c:	2d00      	cmp	r5, #0
 800c73e:	f000 812d 	beq.w	800c99c <HAL_SPI_TransmitReceive+0x2c8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c742:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c74a:	bf1c      	itt	ne
 800c74c:	2305      	movne	r3, #5
 800c74e:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c752:	2300      	movs	r3, #0
 800c754:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c756:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c758:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c75c:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c760:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c762:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c764:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800c766:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c768:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c76a:	68e3      	ldr	r3, [r4, #12]
 800c76c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c770:	d801      	bhi.n	800c776 <HAL_SPI_TransmitReceive+0xa2>
 800c772:	2d01      	cmp	r5, #1
 800c774:	d924      	bls.n	800c7c0 <HAL_SPI_TransmitReceive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c776:	6822      	ldr	r2, [r4, #0]
 800c778:	6853      	ldr	r3, [r2, #4]
 800c77a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c77e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c780:	6823      	ldr	r3, [r4, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c788:	d103      	bne.n	800c792 <HAL_SPI_TransmitReceive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c790:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c792:	68e3      	ldr	r3, [r4, #12]
 800c794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c798:	d958      	bls.n	800c84c <HAL_SPI_TransmitReceive+0x178>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c79a:	6863      	ldr	r3, [r4, #4]
 800c79c:	b10b      	cbz	r3, 800c7a2 <HAL_SPI_TransmitReceive+0xce>
 800c79e:	2d01      	cmp	r5, #1
 800c7a0:	d10a      	bne.n	800c7b8 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c7a6:	8812      	ldrh	r2, [r2, #0]
 800c7a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c7ac:	3302      	adds	r3, #2
 800c7ae:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800c7b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800c7b8:	2501      	movs	r5, #1
        txallowed = 0U;
 800c7ba:	2700      	movs	r7, #0
        txallowed = 1U;
 800c7bc:	462e      	mov	r6, r5
 800c7be:	e025      	b.n	800c80c <HAL_SPI_TransmitReceive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c7c0:	6822      	ldr	r2, [r4, #0]
 800c7c2:	6853      	ldr	r3, [r2, #4]
 800c7c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c7c8:	6053      	str	r3, [r2, #4]
 800c7ca:	e7d9      	b.n	800c780 <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	689a      	ldr	r2, [r3, #8]
 800c7d0:	f012 0f01 	tst.w	r2, #1
 800c7d4:	d010      	beq.n	800c7f8 <HAL_SPI_TransmitReceive+0x124>
 800c7d6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800c7da:	b292      	uxth	r2, r2
 800c7dc:	b162      	cbz	r2, 800c7f8 <HAL_SPI_TransmitReceive+0x124>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c7de:	68da      	ldr	r2, [r3, #12]
 800c7e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c7e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7e6:	3302      	adds	r3, #2
 800c7e8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800c7ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800c7f6:	4635      	mov	r5, r6
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c7f8:	f7f8 f848 	bl	800488c <HAL_GetTick>
 800c7fc:	eba0 0009 	sub.w	r0, r0, r9
 800c800:	4540      	cmp	r0, r8
 800c802:	d303      	bcc.n	800c80c <HAL_SPI_TransmitReceive+0x138>
 800c804:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800c808:	f040 80ca 	bne.w	800c9a0 <HAL_SPI_TransmitReceive+0x2cc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c80c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c80e:	b29b      	uxth	r3, r3
 800c810:	b92b      	cbnz	r3, 800c81e <HAL_SPI_TransmitReceive+0x14a>
 800c812:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800c816:	b29b      	uxth	r3, r3
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 80ac 	beq.w	800c976 <HAL_SPI_TransmitReceive+0x2a2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	689a      	ldr	r2, [r3, #8]
 800c822:	f012 0f02 	tst.w	r2, #2
 800c826:	d0d1      	beq.n	800c7cc <HAL_SPI_TransmitReceive+0xf8>
 800c828:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c82a:	b292      	uxth	r2, r2
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	d0cd      	beq.n	800c7cc <HAL_SPI_TransmitReceive+0xf8>
 800c830:	2d00      	cmp	r5, #0
 800c832:	d0cb      	beq.n	800c7cc <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c834:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c836:	8812      	ldrh	r2, [r2, #0]
 800c838:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c83a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c83c:	3302      	adds	r3, #2
 800c83e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c840:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c842:	3b01      	subs	r3, #1
 800c844:	b29b      	uxth	r3, r3
 800c846:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800c848:	463d      	mov	r5, r7
 800c84a:	e7bf      	b.n	800c7cc <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c84c:	6863      	ldr	r3, [r4, #4]
 800c84e:	b10b      	cbz	r3, 800c854 <HAL_SPI_TransmitReceive+0x180>
 800c850:	2d01      	cmp	r5, #1
 800c852:	d10e      	bne.n	800c872 <HAL_SPI_TransmitReceive+0x19e>
      if (hspi->TxXferCount > 1U)
 800c854:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c856:	b29b      	uxth	r3, r3
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d90e      	bls.n	800c87a <HAL_SPI_TransmitReceive+0x1a6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c860:	8812      	ldrh	r2, [r2, #0]
 800c862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c866:	3302      	adds	r3, #2
 800c868:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c86a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c86c:	3b02      	subs	r3, #2
 800c86e:	b29b      	uxth	r3, r3
 800c870:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800c872:	2501      	movs	r5, #1
        txallowed = 0U;
 800c874:	2700      	movs	r7, #0
        txallowed = 1U;
 800c876:	462e      	mov	r6, r5
 800c878:	e044      	b.n	800c904 <HAL_SPI_TransmitReceive+0x230>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c87e:	7812      	ldrb	r2, [r2, #0]
 800c880:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800c882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c884:	3301      	adds	r3, #1
 800c886:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c888:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c88a:	3b01      	subs	r3, #1
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c890:	e7ef      	b.n	800c872 <HAL_SPI_TransmitReceive+0x19e>
        if (hspi->TxXferCount > 1U)
 800c892:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c894:	b292      	uxth	r2, r2
 800c896:	2a01      	cmp	r2, #1
 800c898:	d90b      	bls.n	800c8b2 <HAL_SPI_TransmitReceive+0x1de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c89a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c89c:	8812      	ldrh	r2, [r2, #0]
 800c89e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c8a2:	3302      	adds	r3, #2
 800c8a4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c8a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c8a8:	3b02      	subs	r3, #2
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800c8ae:	463d      	mov	r5, r7
 800c8b0:	e03a      	b.n	800c928 <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c8b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c8b4:	7812      	ldrb	r2, [r2, #0]
 800c8b6:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800c8b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800c8be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800c8c6:	463d      	mov	r5, r7
 800c8c8:	e02e      	b.n	800c928 <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c8ca:	6822      	ldr	r2, [r4, #0]
 800c8cc:	6853      	ldr	r3, [r2, #4]
 800c8ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c8d2:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800c8d4:	4635      	mov	r5, r6
 800c8d6:	e00c      	b.n	800c8f2 <HAL_SPI_TransmitReceive+0x21e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c8d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c8da:	7b1b      	ldrb	r3, [r3, #12]
 800c8dc:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800c8de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800c8e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800c8f0:	4635      	mov	r5, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c8f2:	f7f7 ffcb 	bl	800488c <HAL_GetTick>
 800c8f6:	eba0 0009 	sub.w	r0, r0, r9
 800c8fa:	4540      	cmp	r0, r8
 800c8fc:	d336      	bcc.n	800c96c <HAL_SPI_TransmitReceive+0x298>
 800c8fe:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800c902:	d14f      	bne.n	800c9a4 <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c904:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c906:	b29b      	uxth	r3, r3
 800c908:	b923      	cbnz	r3, 800c914 <HAL_SPI_TransmitReceive+0x240>
 800c90a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800c90e:	b29b      	uxth	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d030      	beq.n	800c976 <HAL_SPI_TransmitReceive+0x2a2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	689a      	ldr	r2, [r3, #8]
 800c918:	f012 0f02 	tst.w	r2, #2
 800c91c:	d004      	beq.n	800c928 <HAL_SPI_TransmitReceive+0x254>
 800c91e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c920:	b292      	uxth	r2, r2
 800c922:	b10a      	cbz	r2, 800c928 <HAL_SPI_TransmitReceive+0x254>
 800c924:	2d01      	cmp	r5, #1
 800c926:	d0b4      	beq.n	800c892 <HAL_SPI_TransmitReceive+0x1be>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	689a      	ldr	r2, [r3, #8]
 800c92c:	f012 0f01 	tst.w	r2, #1
 800c930:	d0df      	beq.n	800c8f2 <HAL_SPI_TransmitReceive+0x21e>
 800c932:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800c936:	b292      	uxth	r2, r2
 800c938:	2a00      	cmp	r2, #0
 800c93a:	d0da      	beq.n	800c8f2 <HAL_SPI_TransmitReceive+0x21e>
        if (hspi->RxXferCount > 1U)
 800c93c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800c940:	b292      	uxth	r2, r2
 800c942:	2a01      	cmp	r2, #1
 800c944:	d9c8      	bls.n	800c8d8 <HAL_SPI_TransmitReceive+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c946:	68da      	ldr	r2, [r3, #12]
 800c948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c94a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c94c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c94e:	3302      	adds	r3, #2
 800c950:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c952:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800c956:	3b02      	subs	r3, #2
 800c958:	b29b      	uxth	r3, r3
 800c95a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c95e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800c962:	b29b      	uxth	r3, r3
 800c964:	2b01      	cmp	r3, #1
 800c966:	d9b0      	bls.n	800c8ca <HAL_SPI_TransmitReceive+0x1f6>
        txallowed = 1U;
 800c968:	4635      	mov	r5, r6
 800c96a:	e7c2      	b.n	800c8f2 <HAL_SPI_TransmitReceive+0x21e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c96c:	f1b8 0f00 	cmp.w	r8, #0
 800c970:	d1c8      	bne.n	800c904 <HAL_SPI_TransmitReceive+0x230>
        errorcode = HAL_TIMEOUT;
 800c972:	2303      	movs	r3, #3
 800c974:	e6cb      	b.n	800c70e <HAL_SPI_TransmitReceive+0x3a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c976:	464a      	mov	r2, r9
 800c978:	4641      	mov	r1, r8
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7ff fbfc 	bl	800c178 <SPI_EndRxTxTransaction>
 800c980:	4603      	mov	r3, r0
 800c982:	2800      	cmp	r0, #0
 800c984:	f43f aec3 	beq.w	800c70e <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c988:	2320      	movs	r3, #32
 800c98a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	e6be      	b.n	800c70e <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 800c990:	2302      	movs	r3, #2
 800c992:	e6bc      	b.n	800c70e <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e6ba      	b.n	800c70e <HAL_SPI_TransmitReceive+0x3a>
 800c998:	2301      	movs	r3, #1
 800c99a:	e6b8      	b.n	800c70e <HAL_SPI_TransmitReceive+0x3a>
 800c99c:	2301      	movs	r3, #1
 800c99e:	e6b6      	b.n	800c70e <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	e6b4      	b.n	800c70e <HAL_SPI_TransmitReceive+0x3a>
        errorcode = HAL_TIMEOUT;
 800c9a4:	2303      	movs	r3, #3
 800c9a6:	e6b2      	b.n	800c70e <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	e6b6      	b.n	800c71a <HAL_SPI_TransmitReceive+0x46>

0800c9ac <HAL_SPI_Receive>:
{
 800c9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	4690      	mov	r8, r2
 800c9b8:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c9ba:	6843      	ldr	r3, [r0, #4]
 800c9bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9c0:	d019      	beq.n	800c9f6 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800c9c2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	f000 80b4 	beq.w	800cb34 <HAL_SPI_Receive+0x188>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800c9d2:	f7f7 ff5b 	bl	800488c <HAL_GetTick>
 800c9d6:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800c9d8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d015      	beq.n	800ca0e <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800c9e2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800c9f0:	b002      	add	sp, #8
 800c9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c9f6:	6883      	ldr	r3, [r0, #8]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e2      	bne.n	800c9c2 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c9fc:	2304      	movs	r3, #4
 800c9fe:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ca02:	9500      	str	r5, [sp, #0]
 800ca04:	4613      	mov	r3, r2
 800ca06:	460a      	mov	r2, r1
 800ca08:	f7ff fe64 	bl	800c6d4 <HAL_SPI_TransmitReceive>
 800ca0c:	e7f0      	b.n	800c9f0 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 800ca0e:	2f00      	cmp	r7, #0
 800ca10:	f000 8088 	beq.w	800cb24 <HAL_SPI_Receive+0x178>
 800ca14:	f1b8 0f00 	cmp.w	r8, #0
 800ca18:	f000 8086 	beq.w	800cb28 <HAL_SPI_Receive+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ca1c:	2304      	movs	r3, #4
 800ca1e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca22:	2300      	movs	r3, #0
 800ca24:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ca26:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ca28:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ca2c:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ca30:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800ca32:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ca34:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800ca36:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ca38:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca3a:	68e3      	ldr	r3, [r4, #12]
 800ca3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	6853      	ldr	r3, [r2, #4]
 800ca44:	bf8c      	ite	hi
 800ca46:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca4a:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 800ca4e:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca50:	68a3      	ldr	r3, [r4, #8]
 800ca52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca56:	d00d      	beq.n	800ca74 <HAL_SPI_Receive+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ca60:	d103      	bne.n	800ca6a <HAL_SPI_Receive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca68:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ca6a:	68e3      	ldr	r3, [r4, #12]
 800ca6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca70:	d90e      	bls.n	800ca90 <HAL_SPI_Receive+0xe4>
 800ca72:	e030      	b.n	800cad6 <HAL_SPI_Receive+0x12a>
    SPI_1LINE_RX(hspi);
 800ca74:	6822      	ldr	r2, [r4, #0]
 800ca76:	6813      	ldr	r3, [r2, #0]
 800ca78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca7c:	6013      	str	r3, [r2, #0]
 800ca7e:	e7eb      	b.n	800ca58 <HAL_SPI_Receive+0xac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca80:	f7f7 ff04 	bl	800488c <HAL_GetTick>
 800ca84:	1b80      	subs	r0, r0, r6
 800ca86:	42a8      	cmp	r0, r5
 800ca88:	d319      	bcc.n	800cabe <HAL_SPI_Receive+0x112>
 800ca8a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800ca8e:	d14d      	bne.n	800cb2c <HAL_SPI_Receive+0x180>
    while (hspi->RxXferCount > 0U)
 800ca90:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d037      	beq.n	800cb0a <HAL_SPI_Receive+0x15e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ca9a:	6823      	ldr	r3, [r4, #0]
 800ca9c:	689a      	ldr	r2, [r3, #8]
 800ca9e:	f012 0f01 	tst.w	r2, #1
 800caa2:	d0ed      	beq.n	800ca80 <HAL_SPI_Receive+0xd4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800caa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800caa6:	7b1b      	ldrb	r3, [r3, #12]
 800caa8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800caaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caac:	3301      	adds	r3, #1
 800caae:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800cab0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cab4:	3b01      	subs	r3, #1
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800cabc:	e7e8      	b.n	800ca90 <HAL_SPI_Receive+0xe4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cabe:	2d00      	cmp	r5, #0
 800cac0:	d1e6      	bne.n	800ca90 <HAL_SPI_Receive+0xe4>
          errorcode = HAL_TIMEOUT;
 800cac2:	2003      	movs	r0, #3
 800cac4:	e78e      	b.n	800c9e4 <HAL_SPI_Receive+0x38>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cac6:	f7f7 fee1 	bl	800488c <HAL_GetTick>
 800caca:	1b80      	subs	r0, r0, r6
 800cacc:	42a8      	cmp	r0, r5
 800cace:	d318      	bcc.n	800cb02 <HAL_SPI_Receive+0x156>
 800cad0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800cad4:	d12c      	bne.n	800cb30 <HAL_SPI_Receive+0x184>
    while (hspi->RxXferCount > 0U)
 800cad6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cada:	b29b      	uxth	r3, r3
 800cadc:	b1ab      	cbz	r3, 800cb0a <HAL_SPI_Receive+0x15e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	689a      	ldr	r2, [r3, #8]
 800cae2:	f012 0f01 	tst.w	r2, #1
 800cae6:	d0ee      	beq.n	800cac6 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cae8:	68da      	ldr	r2, [r3, #12]
 800caea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800caee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caf0:	3302      	adds	r3, #2
 800caf2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800caf4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800caf8:	3b01      	subs	r3, #1
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800cb00:	e7e9      	b.n	800cad6 <HAL_SPI_Receive+0x12a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb02:	2d00      	cmp	r5, #0
 800cb04:	d1e7      	bne.n	800cad6 <HAL_SPI_Receive+0x12a>
          errorcode = HAL_TIMEOUT;
 800cb06:	2003      	movs	r0, #3
 800cb08:	e76c      	b.n	800c9e4 <HAL_SPI_Receive+0x38>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cb0a:	4632      	mov	r2, r6
 800cb0c:	4629      	mov	r1, r5
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f7ff fb65 	bl	800c1de <SPI_EndRxTransaction>
 800cb14:	b108      	cbz	r0, 800cb1a <HAL_SPI_Receive+0x16e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cb16:	2320      	movs	r3, #32
 800cb18:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb1a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800cb1c:	3000      	adds	r0, #0
 800cb1e:	bf18      	it	ne
 800cb20:	2001      	movne	r0, #1
error :
 800cb22:	e75f      	b.n	800c9e4 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800cb24:	2001      	movs	r0, #1
 800cb26:	e75d      	b.n	800c9e4 <HAL_SPI_Receive+0x38>
 800cb28:	2001      	movs	r0, #1
 800cb2a:	e75b      	b.n	800c9e4 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800cb2c:	2003      	movs	r0, #3
 800cb2e:	e759      	b.n	800c9e4 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800cb30:	2003      	movs	r0, #3
 800cb32:	e757      	b.n	800c9e4 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 800cb34:	2002      	movs	r0, #2
 800cb36:	e75b      	b.n	800c9f0 <HAL_SPI_Receive+0x44>

0800cb38 <HAL_SPI_Transmit_IT>:
{
 800cb38:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800cb3a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800cb3e:	2801      	cmp	r0, #1
 800cb40:	d045      	beq.n	800cbce <HAL_SPI_Transmit_IT+0x96>
 800cb42:	2001      	movs	r0, #1
 800cb44:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	d037      	beq.n	800cbbc <HAL_SPI_Transmit_IT+0x84>
 800cb4c:	2a00      	cmp	r2, #0
 800cb4e:	d037      	beq.n	800cbc0 <HAL_SPI_Transmit_IT+0x88>
  if (hspi->State != HAL_SPI_STATE_READY)
 800cb50:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 800cb54:	b2c0      	uxtb	r0, r0
 800cb56:	2801      	cmp	r0, #1
 800cb58:	d001      	beq.n	800cb5e <HAL_SPI_Transmit_IT+0x26>
    errorcode = HAL_BUSY;
 800cb5a:	2002      	movs	r0, #2
 800cb5c:	e031      	b.n	800cbc2 <HAL_SPI_Transmit_IT+0x8a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cb5e:	2003      	movs	r0, #3
 800cb60:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb64:	2000      	movs	r0, #0
 800cb66:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cb68:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cb6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cb6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cb6e:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800cb70:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cb74:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800cb78:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb7a:	68da      	ldr	r2, [r3, #12]
 800cb7c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    hspi->TxISR = SPI_TxISR_16BIT;
 800cb80:	bf8c      	ite	hi
 800cb82:	4a14      	ldrhi	r2, [pc, #80]	; (800cbd4 <HAL_SPI_Transmit_IT+0x9c>)
    hspi->TxISR = SPI_TxISR_8BIT;
 800cb84:	4a14      	ldrls	r2, [pc, #80]	; (800cbd8 <HAL_SPI_Transmit_IT+0xa0>)
 800cb86:	651a      	str	r2, [r3, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb88:	689a      	ldr	r2, [r3, #8]
 800cb8a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800cb8e:	d00f      	beq.n	800cbb0 <HAL_SPI_Transmit_IT+0x78>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800cb90:	6819      	ldr	r1, [r3, #0]
 800cb92:	684a      	ldr	r2, [r1, #4]
 800cb94:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800cb98:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	6811      	ldr	r1, [r2, #0]
 800cb9e:	f011 0f40 	tst.w	r1, #64	; 0x40
 800cba2:	d112      	bne.n	800cbca <HAL_SPI_Transmit_IT+0x92>
    __HAL_SPI_ENABLE(hspi);
 800cba4:	6811      	ldr	r1, [r2, #0]
 800cba6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800cbaa:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cbac:	2000      	movs	r0, #0
 800cbae:	e008      	b.n	800cbc2 <HAL_SPI_Transmit_IT+0x8a>
    SPI_1LINE_TX(hspi);
 800cbb0:	6819      	ldr	r1, [r3, #0]
 800cbb2:	680a      	ldr	r2, [r1, #0]
 800cbb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbb8:	600a      	str	r2, [r1, #0]
 800cbba:	e7e9      	b.n	800cb90 <HAL_SPI_Transmit_IT+0x58>
    errorcode = HAL_ERROR;
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	e000      	b.n	800cbc2 <HAL_SPI_Transmit_IT+0x8a>
 800cbc0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cbc8:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cbca:	2000      	movs	r0, #0
 800cbcc:	e7f9      	b.n	800cbc2 <HAL_SPI_Transmit_IT+0x8a>
  __HAL_LOCK(hspi);
 800cbce:	2002      	movs	r0, #2
}
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	0800d513 	.word	0x0800d513
 800cbd8:	0800d4ed 	.word	0x0800d4ed

0800cbdc <HAL_SPI_TransmitReceive_IT>:
{
 800cbdc:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 800cbde:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800cbe2:	2c01      	cmp	r4, #1
 800cbe4:	d064      	beq.n	800ccb0 <HAL_SPI_TransmitReceive_IT+0xd4>
 800cbe6:	2401      	movs	r4, #1
 800cbe8:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 800cbec:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800cbf0:	b2e4      	uxtb	r4, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cbf2:	2c01      	cmp	r4, #1
 800cbf4:	d011      	beq.n	800cc1a <HAL_SPI_TransmitReceive_IT+0x3e>
 800cbf6:	6845      	ldr	r5, [r0, #4]
 800cbf8:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800cbfc:	d006      	beq.n	800cc0c <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 800cbfe:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800cc00:	2200      	movs	r2, #0
 800cc02:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	bc30      	pop	{r4, r5}
 800cc0a:	4770      	bx	lr
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cc0c:	6885      	ldr	r5, [r0, #8]
 800cc0e:	2d00      	cmp	r5, #0
 800cc10:	d144      	bne.n	800cc9c <HAL_SPI_TransmitReceive_IT+0xc0>
 800cc12:	2c04      	cmp	r4, #4
 800cc14:	d001      	beq.n	800cc1a <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 800cc16:	2302      	movs	r3, #2
 800cc18:	e7f2      	b.n	800cc00 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cc1a:	2900      	cmp	r1, #0
 800cc1c:	d040      	beq.n	800cca0 <HAL_SPI_TransmitReceive_IT+0xc4>
 800cc1e:	2a00      	cmp	r2, #0
 800cc20:	d040      	beq.n	800cca4 <HAL_SPI_TransmitReceive_IT+0xc8>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d040      	beq.n	800cca8 <HAL_SPI_TransmitReceive_IT+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc26:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800cc2a:	b2e4      	uxtb	r4, r4
 800cc2c:	2c04      	cmp	r4, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cc2e:	bf1c      	itt	ne
 800cc30:	2405      	movne	r4, #5
 800cc32:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc36:	2400      	movs	r4, #0
 800cc38:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cc3a:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cc3c:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cc3e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc40:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cc42:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cc46:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc4a:	68c2      	ldr	r2, [r0, #12]
 800cc4c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800cc50:	d918      	bls.n	800cc84 <HAL_SPI_TransmitReceive_IT+0xa8>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800cc52:	4b18      	ldr	r3, [pc, #96]	; (800ccb4 <HAL_SPI_TransmitReceive_IT+0xd8>)
 800cc54:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800cc56:	4b18      	ldr	r3, [pc, #96]	; (800ccb8 <HAL_SPI_TransmitReceive_IT+0xdc>)
 800cc58:	6503      	str	r3, [r0, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc5a:	6802      	ldr	r2, [r0, #0]
 800cc5c:	6853      	ldr	r3, [r2, #4]
 800cc5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc62:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cc64:	6802      	ldr	r2, [r0, #0]
 800cc66:	6853      	ldr	r3, [r2, #4]
 800cc68:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800cc6c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc6e:	6803      	ldr	r3, [r0, #0]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	f012 0f40 	tst.w	r2, #64	; 0x40
 800cc76:	d119      	bne.n	800ccac <HAL_SPI_TransmitReceive_IT+0xd0>
    __HAL_SPI_ENABLE(hspi);
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc7e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	e7bd      	b.n	800cc00 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800cc84:	4a0d      	ldr	r2, [pc, #52]	; (800ccbc <HAL_SPI_TransmitReceive_IT+0xe0>)
 800cc86:	64c2      	str	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800cc88:	4a0d      	ldr	r2, [pc, #52]	; (800ccc0 <HAL_SPI_TransmitReceive_IT+0xe4>)
 800cc8a:	6502      	str	r2, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d8e4      	bhi.n	800cc5a <HAL_SPI_TransmitReceive_IT+0x7e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc90:	6802      	ldr	r2, [r0, #0]
 800cc92:	6853      	ldr	r3, [r2, #4]
 800cc94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cc98:	6053      	str	r3, [r2, #4]
 800cc9a:	e7e3      	b.n	800cc64 <HAL_SPI_TransmitReceive_IT+0x88>
    errorcode = HAL_BUSY;
 800cc9c:	2302      	movs	r3, #2
 800cc9e:	e7af      	b.n	800cc00 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	e7ad      	b.n	800cc00 <HAL_SPI_TransmitReceive_IT+0x24>
 800cca4:	2301      	movs	r3, #1
 800cca6:	e7ab      	b.n	800cc00 <HAL_SPI_TransmitReceive_IT+0x24>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e7a9      	b.n	800cc00 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	e7a7      	b.n	800cc00 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	e7a8      	b.n	800cc06 <HAL_SPI_TransmitReceive_IT+0x2a>
 800ccb4:	0800d737 	.word	0x0800d737
 800ccb8:	0800d6ff 	.word	0x0800d6ff
 800ccbc:	0800d687 	.word	0x0800d687
 800ccc0:	0800d62f 	.word	0x0800d62f

0800ccc4 <HAL_SPI_Receive_IT>:
{
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ccc8:	6880      	ldr	r0, [r0, #8]
 800ccca:	b918      	cbnz	r0, 800ccd4 <HAL_SPI_Receive_IT+0x10>
 800cccc:	6863      	ldr	r3, [r4, #4]
 800ccce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccd2:	d010      	beq.n	800ccf6 <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 800ccd4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 800ccd8:	2801      	cmp	r0, #1
 800ccda:	d05a      	beq.n	800cd92 <HAL_SPI_Receive_IT+0xce>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800cce2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800cce6:	b2c0      	uxtb	r0, r0
 800cce8:	4298      	cmp	r0, r3
 800ccea:	d00d      	beq.n	800cd08 <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 800ccec:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 800ccee:	2300      	movs	r3, #0
 800ccf0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800ccf4:	bd10      	pop	{r4, pc}
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ccfa:	2204      	movs	r2, #4
 800ccfc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800cd00:	460a      	mov	r2, r1
 800cd02:	f7ff ff6b 	bl	800cbdc <HAL_SPI_TransmitReceive_IT>
 800cd06:	e7f5      	b.n	800ccf4 <HAL_SPI_Receive_IT+0x30>
  if ((pData == NULL) || (Size == 0U))
 800cd08:	2900      	cmp	r1, #0
 800cd0a:	d03c      	beq.n	800cd86 <HAL_SPI_Receive_IT+0xc2>
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	d03c      	beq.n	800cd8a <HAL_SPI_Receive_IT+0xc6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cd10:	2304      	movs	r3, #4
 800cd12:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd16:	2300      	movs	r3, #0
 800cd18:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cd1a:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cd1c:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cd20:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cd24:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800cd26:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800cd28:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800cd2a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd2c:	68e3      	ldr	r3, [r4, #12]
 800cd2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd32:	d91a      	bls.n	800cd6a <HAL_SPI_Receive_IT+0xa6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd34:	6822      	ldr	r2, [r4, #0]
 800cd36:	6853      	ldr	r3, [r2, #4]
 800cd38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd3c:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800cd3e:	4b16      	ldr	r3, [pc, #88]	; (800cd98 <HAL_SPI_Receive_IT+0xd4>)
 800cd40:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd42:	68a3      	ldr	r3, [r4, #8]
 800cd44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd48:	d017      	beq.n	800cd7a <HAL_SPI_Receive_IT+0xb6>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800cd4a:	6822      	ldr	r2, [r4, #0]
 800cd4c:	6853      	ldr	r3, [r2, #4]
 800cd4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cd52:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	f012 0f40 	tst.w	r2, #64	; 0x40
 800cd5c:	d117      	bne.n	800cd8e <HAL_SPI_Receive_IT+0xca>
    __HAL_SPI_ENABLE(hspi);
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd64:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd66:	2000      	movs	r0, #0
 800cd68:	e7c1      	b.n	800ccee <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd6a:	6822      	ldr	r2, [r4, #0]
 800cd6c:	6853      	ldr	r3, [r2, #4]
 800cd6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd72:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800cd74:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <HAL_SPI_Receive_IT+0xd8>)
 800cd76:	64e3      	str	r3, [r4, #76]	; 0x4c
 800cd78:	e7e3      	b.n	800cd42 <HAL_SPI_Receive_IT+0x7e>
    SPI_1LINE_RX(hspi);
 800cd7a:	6822      	ldr	r2, [r4, #0]
 800cd7c:	6813      	ldr	r3, [r2, #0]
 800cd7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd82:	6013      	str	r3, [r2, #0]
 800cd84:	e7e1      	b.n	800cd4a <HAL_SPI_Receive_IT+0x86>
    errorcode = HAL_ERROR;
 800cd86:	2001      	movs	r0, #1
 800cd88:	e7b1      	b.n	800ccee <HAL_SPI_Receive_IT+0x2a>
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	e7af      	b.n	800ccee <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd8e:	2000      	movs	r0, #0
 800cd90:	e7ad      	b.n	800ccee <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 800cd92:	2002      	movs	r0, #2
 800cd94:	e7ae      	b.n	800ccf4 <HAL_SPI_Receive_IT+0x30>
 800cd96:	bf00      	nop
 800cd98:	0800d5a5 	.word	0x0800d5a5
 800cd9c:	0800d579 	.word	0x0800d579

0800cda0 <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 800cda0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	f000 8087 	beq.w	800ceb8 <HAL_SPI_Transmit_DMA+0x118>
{
 800cdaa:	b510      	push	{r4, lr}
 800cdac:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800cdae:	2301      	movs	r3, #1
 800cdb0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800cdb4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d005      	beq.n	800cdca <HAL_SPI_Transmit_DMA+0x2a>
    errorcode = HAL_BUSY;
 800cdbe:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 800cdca:	2900      	cmp	r1, #0
 800cdcc:	d070      	beq.n	800ceb0 <HAL_SPI_Transmit_DMA+0x110>
 800cdce:	2a00      	cmp	r2, #0
 800cdd0:	d070      	beq.n	800ceb4 <HAL_SPI_Transmit_DMA+0x114>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cddc:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cdde:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cde0:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cde2:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cde4:	6503      	str	r3, [r0, #80]	; 0x50
  hspi->RxISR       = NULL;
 800cde6:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800cde8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cdec:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cdf0:	6883      	ldr	r3, [r0, #8]
 800cdf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdf6:	d02a      	beq.n	800ce4e <HAL_SPI_Transmit_DMA+0xae>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800cdf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cdfa:	4a31      	ldr	r2, [pc, #196]	; (800cec0 <HAL_SPI_Transmit_DMA+0x120>)
 800cdfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cdfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ce00:	4a30      	ldr	r2, [pc, #192]	; (800cec4 <HAL_SPI_Transmit_DMA+0x124>)
 800ce02:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ce04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ce06:	4a30      	ldr	r2, [pc, #192]	; (800cec8 <HAL_SPI_Transmit_DMA+0x128>)
 800ce08:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 800ce0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ce10:	6822      	ldr	r2, [r4, #0]
 800ce12:	6853      	ldr	r3, [r2, #4]
 800ce14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce18:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ce1a:	68e3      	ldr	r3, [r4, #12]
 800ce1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ce20:	d804      	bhi.n	800ce2c <HAL_SPI_Transmit_DMA+0x8c>
 800ce22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce2a:	d016      	beq.n	800ce5a <HAL_SPI_Transmit_DMA+0xba>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800ce2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ce2e:	6822      	ldr	r2, [r4, #0]
 800ce30:	320c      	adds	r2, #12
 800ce32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ce34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce36:	f7f8 f89c 	bl	8004f72 <HAL_DMA_Start_IT>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	b320      	cbz	r0, 800ce88 <HAL_SPI_Transmit_DMA+0xe8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ce3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ce40:	f043 0310 	orr.w	r3, r3, #16
 800ce44:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800ce46:	2301      	movs	r3, #1
 800ce48:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800ce4c:	e7b8      	b.n	800cdc0 <HAL_SPI_Transmit_DMA+0x20>
    SPI_1LINE_TX(hspi);
 800ce4e:	6802      	ldr	r2, [r0, #0]
 800ce50:	6813      	ldr	r3, [r2, #0]
 800ce52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	e7ce      	b.n	800cdf8 <HAL_SPI_Transmit_DMA+0x58>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ce5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ce5c:	f013 0f01 	tst.w	r3, #1
 800ce60:	d108      	bne.n	800ce74 <HAL_SPI_Transmit_DMA+0xd4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ce62:	6822      	ldr	r2, [r4, #0]
 800ce64:	6853      	ldr	r3, [r2, #4]
 800ce66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce6a:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800ce6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ce6e:	085b      	lsrs	r3, r3, #1
 800ce70:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ce72:	e7db      	b.n	800ce2c <HAL_SPI_Transmit_DMA+0x8c>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ce74:	6822      	ldr	r2, [r4, #0]
 800ce76:	6853      	ldr	r3, [r2, #4]
 800ce78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce7c:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ce7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ce80:	085b      	lsrs	r3, r3, #1
 800ce82:	3301      	adds	r3, #1
 800ce84:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ce86:	e7d1      	b.n	800ce2c <HAL_SPI_Transmit_DMA+0x8c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce88:	6822      	ldr	r2, [r4, #0]
 800ce8a:	6811      	ldr	r1, [r2, #0]
 800ce8c:	f011 0f40 	tst.w	r1, #64	; 0x40
 800ce90:	d103      	bne.n	800ce9a <HAL_SPI_Transmit_DMA+0xfa>
    __HAL_SPI_ENABLE(hspi);
 800ce92:	6811      	ldr	r1, [r2, #0]
 800ce94:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800ce98:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ce9a:	6821      	ldr	r1, [r4, #0]
 800ce9c:	684a      	ldr	r2, [r1, #4]
 800ce9e:	f042 0220 	orr.w	r2, r2, #32
 800cea2:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cea4:	6821      	ldr	r1, [r4, #0]
 800cea6:	684a      	ldr	r2, [r1, #4]
 800cea8:	f042 0202 	orr.w	r2, r2, #2
 800ceac:	604a      	str	r2, [r1, #4]
 800ceae:	e787      	b.n	800cdc0 <HAL_SPI_Transmit_DMA+0x20>
    errorcode = HAL_ERROR;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e785      	b.n	800cdc0 <HAL_SPI_Transmit_DMA+0x20>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e783      	b.n	800cdc0 <HAL_SPI_Transmit_DMA+0x20>
  __HAL_LOCK(hspi);
 800ceb8:	2302      	movs	r3, #2
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	0800d473 	.word	0x0800d473
 800cec4:	0800d795 	.word	0x0800d795
 800cec8:	0800d773 	.word	0x0800d773

0800cecc <HAL_SPI_TransmitReceive_DMA>:
{
 800cecc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800cece:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800ced2:	2c01      	cmp	r4, #1
 800ced4:	f000 80f2 	beq.w	800d0bc <HAL_SPI_TransmitReceive_DMA+0x1f0>
 800ced8:	4604      	mov	r4, r0
 800ceda:	2001      	movs	r0, #1
 800cedc:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 800cee0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800cee4:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800cee6:	2801      	cmp	r0, #1
 800cee8:	d011      	beq.n	800cf0e <HAL_SPI_TransmitReceive_DMA+0x42>
 800ceea:	6865      	ldr	r5, [r4, #4]
 800ceec:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800cef0:	d005      	beq.n	800cefe <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 800cef2:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800cef4:	2200      	movs	r2, #0
 800cef6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cefe:	68a5      	ldr	r5, [r4, #8]
 800cf00:	2d00      	cmp	r5, #0
 800cf02:	f040 80d3 	bne.w	800d0ac <HAL_SPI_TransmitReceive_DMA+0x1e0>
 800cf06:	2804      	cmp	r0, #4
 800cf08:	d001      	beq.n	800cf0e <HAL_SPI_TransmitReceive_DMA+0x42>
    errorcode = HAL_BUSY;
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	e7f2      	b.n	800cef4 <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cf0e:	2900      	cmp	r1, #0
 800cf10:	f000 80ce 	beq.w	800d0b0 <HAL_SPI_TransmitReceive_DMA+0x1e4>
 800cf14:	2a00      	cmp	r2, #0
 800cf16:	f000 80cd 	beq.w	800d0b4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 80cc 	beq.w	800d0b8 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cf20:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800cf24:	b2c0      	uxtb	r0, r0
 800cf26:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cf28:	bf1c      	itt	ne
 800cf2a:	2005      	movne	r0, #5
 800cf2c:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf30:	2000      	movs	r0, #0
 800cf32:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cf34:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cf36:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cf38:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cf3a:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cf3c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cf40:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800cf44:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cf46:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800cf48:	6822      	ldr	r2, [r4, #0]
 800cf4a:	6853      	ldr	r3, [r2, #4]
 800cf4c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800cf50:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf52:	68e3      	ldr	r3, [r4, #12]
 800cf54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cf58:	d927      	bls.n	800cfaa <HAL_SPI_TransmitReceive_DMA+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cf5a:	6822      	ldr	r2, [r4, #0]
 800cf5c:	6853      	ldr	r3, [r2, #4]
 800cf5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf62:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cf64:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d064      	beq.n	800d038 <HAL_SPI_TransmitReceive_DMA+0x16c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cf6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf70:	4a53      	ldr	r2, [pc, #332]	; (800d0c0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800cf72:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cf74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf76:	4a53      	ldr	r2, [pc, #332]	; (800d0c4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800cf78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cf7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf7c:	4a52      	ldr	r2, [pc, #328]	; (800d0c8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800cf7e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800cf80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf82:	2200      	movs	r2, #0
 800cf84:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800cf86:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cf8a:	6821      	ldr	r1, [r4, #0]
 800cf8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cf8e:	310c      	adds	r1, #12
 800cf90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf92:	f7f7 ffee 	bl	8004f72 <HAL_DMA_Start_IT>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d055      	beq.n	800d046 <HAL_SPI_TransmitReceive_DMA+0x17a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cf9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800cf9c:	f043 0310 	orr.w	r3, r3, #16
 800cfa0:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800cfa8:	e7a4      	b.n	800cef4 <HAL_SPI_TransmitReceive_DMA+0x28>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfaa:	6822      	ldr	r2, [r4, #0]
 800cfac:	6853      	ldr	r3, [r2, #4]
 800cfae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cfb2:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cfb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfbc:	d019      	beq.n	800cff2 <HAL_SPI_TransmitReceive_DMA+0x126>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cfbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfc6:	d1cd      	bne.n	800cf64 <HAL_SPI_TransmitReceive_DMA+0x98>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfc8:	6822      	ldr	r2, [r4, #0]
 800cfca:	6853      	ldr	r3, [r2, #4]
 800cfcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfd0:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cfd2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cfd6:	f013 0f01 	tst.w	r3, #1
 800cfda:	d121      	bne.n	800d020 <HAL_SPI_TransmitReceive_DMA+0x154>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cfdc:	6822      	ldr	r2, [r4, #0]
 800cfde:	6853      	ldr	r3, [r2, #4]
 800cfe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cfe4:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cfe6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800cfea:	085b      	lsrs	r3, r3, #1
 800cfec:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800cff0:	e7b8      	b.n	800cf64 <HAL_SPI_TransmitReceive_DMA+0x98>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800cff2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800cff4:	f013 0f01 	tst.w	r3, #1
 800cff8:	d108      	bne.n	800d00c <HAL_SPI_TransmitReceive_DMA+0x140>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cffa:	6822      	ldr	r2, [r4, #0]
 800cffc:	6853      	ldr	r3, [r2, #4]
 800cffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d002:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800d004:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d006:	085b      	lsrs	r3, r3, #1
 800d008:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d00a:	e7d8      	b.n	800cfbe <HAL_SPI_TransmitReceive_DMA+0xf2>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d00c:	6822      	ldr	r2, [r4, #0]
 800d00e:	6853      	ldr	r3, [r2, #4]
 800d010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d014:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d016:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d018:	085b      	lsrs	r3, r3, #1
 800d01a:	3301      	adds	r3, #1
 800d01c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d01e:	e7ce      	b.n	800cfbe <HAL_SPI_TransmitReceive_DMA+0xf2>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d020:	6822      	ldr	r2, [r4, #0]
 800d022:	6853      	ldr	r3, [r2, #4]
 800d024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d028:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d02a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d02e:	085b      	lsrs	r3, r3, #1
 800d030:	3301      	adds	r3, #1
 800d032:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800d036:	e795      	b.n	800cf64 <HAL_SPI_TransmitReceive_DMA+0x98>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d038:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d03a:	4a24      	ldr	r2, [pc, #144]	; (800d0cc <HAL_SPI_TransmitReceive_DMA+0x200>)
 800d03c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d03e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d040:	4a23      	ldr	r2, [pc, #140]	; (800d0d0 <HAL_SPI_TransmitReceive_DMA+0x204>)
 800d042:	62da      	str	r2, [r3, #44]	; 0x2c
 800d044:	e799      	b.n	800cf7a <HAL_SPI_TransmitReceive_DMA+0xae>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d046:	6822      	ldr	r2, [r4, #0]
 800d048:	6853      	ldr	r3, [r2, #4]
 800d04a:	f043 0301 	orr.w	r3, r3, #1
 800d04e:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d050:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d052:	2300      	movs	r3, #0
 800d054:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d056:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d058:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d05a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d05c:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d05e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d060:	6393      	str	r3, [r2, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800d062:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d064:	6822      	ldr	r2, [r4, #0]
 800d066:	320c      	adds	r2, #12
 800d068:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d06a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d06c:	f7f7 ff81 	bl	8004f72 <HAL_DMA_Start_IT>
 800d070:	4603      	mov	r3, r0
 800d072:	b138      	cbz	r0, 800d084 <HAL_SPI_TransmitReceive_DMA+0x1b8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d074:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d076:	f043 0310 	orr.w	r3, r3, #16
 800d07a:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800d07c:	2301      	movs	r3, #1
 800d07e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800d082:	e737      	b.n	800cef4 <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d084:	6822      	ldr	r2, [r4, #0]
 800d086:	6811      	ldr	r1, [r2, #0]
 800d088:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d08c:	d103      	bne.n	800d096 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    __HAL_SPI_ENABLE(hspi);
 800d08e:	6811      	ldr	r1, [r2, #0]
 800d090:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800d094:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d096:	6821      	ldr	r1, [r4, #0]
 800d098:	684a      	ldr	r2, [r1, #4]
 800d09a:	f042 0220 	orr.w	r2, r2, #32
 800d09e:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d0a0:	6821      	ldr	r1, [r4, #0]
 800d0a2:	684a      	ldr	r2, [r1, #4]
 800d0a4:	f042 0202 	orr.w	r2, r2, #2
 800d0a8:	604a      	str	r2, [r1, #4]
 800d0aa:	e723      	b.n	800cef4 <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_BUSY;
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	e721      	b.n	800cef4 <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e71f      	b.n	800cef4 <HAL_SPI_TransmitReceive_DMA+0x28>
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e71d      	b.n	800cef4 <HAL_SPI_TransmitReceive_DMA+0x28>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e71b      	b.n	800cef4 <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 800d0bc:	2302      	movs	r3, #2
 800d0be:	e71c      	b.n	800cefa <HAL_SPI_TransmitReceive_DMA+0x2e>
 800d0c0:	0800d48b 	.word	0x0800d48b
 800d0c4:	0800d85d 	.word	0x0800d85d
 800d0c8:	0800d773 	.word	0x0800d773
 800d0cc:	0800d47f 	.word	0x0800d47f
 800d0d0:	0800d805 	.word	0x0800d805

0800d0d4 <HAL_SPI_Receive_DMA>:
{
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d0d8:	6885      	ldr	r5, [r0, #8]
 800d0da:	b91d      	cbnz	r5, 800d0e4 <HAL_SPI_Receive_DMA+0x10>
 800d0dc:	6843      	ldr	r3, [r0, #4]
 800d0de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0e2:	d012      	beq.n	800d10a <HAL_SPI_Receive_DMA+0x36>
  __HAL_LOCK(hspi);
 800d0e4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 800d0e8:	2801      	cmp	r0, #1
 800d0ea:	f000 80a4 	beq.w	800d236 <HAL_SPI_Receive_DMA+0x162>
 800d0ee:	2001      	movs	r0, #1
 800d0f0:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800d0f4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800d0f8:	b2c0      	uxtb	r0, r0
 800d0fa:	2801      	cmp	r0, #1
 800d0fc:	d00e      	beq.n	800d11c <HAL_SPI_Receive_DMA+0x48>
    errorcode = HAL_BUSY;
 800d0fe:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800d100:	2200      	movs	r2, #0
 800d102:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800d106:	4618      	mov	r0, r3
 800d108:	bd38      	pop	{r3, r4, r5, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d10a:	2304      	movs	r3, #4
 800d10c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800d110:	4613      	mov	r3, r2
 800d112:	460a      	mov	r2, r1
 800d114:	f7ff feda 	bl	800cecc <HAL_SPI_TransmitReceive_DMA>
 800d118:	4603      	mov	r3, r0
 800d11a:	e7f4      	b.n	800d106 <HAL_SPI_Receive_DMA+0x32>
  if ((pData == NULL) || (Size == 0U))
 800d11c:	2900      	cmp	r1, #0
 800d11e:	f000 8086 	beq.w	800d22e <HAL_SPI_Receive_DMA+0x15a>
 800d122:	2a00      	cmp	r2, #0
 800d124:	f000 8085 	beq.w	800d232 <HAL_SPI_Receive_DMA+0x15e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d128:	2304      	movs	r3, #4
 800d12a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d12e:	2300      	movs	r3, #0
 800d130:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d132:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d134:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d138:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800d13c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d13e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800d140:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d142:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d144:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800d148:	d02c      	beq.n	800d1a4 <HAL_SPI_Receive_DMA+0xd0>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d14a:	6822      	ldr	r2, [r4, #0]
 800d14c:	6853      	ldr	r3, [r2, #4]
 800d14e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d152:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d154:	68e3      	ldr	r3, [r4, #12]
 800d156:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d15a:	d929      	bls.n	800d1b0 <HAL_SPI_Receive_DMA+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d15c:	6822      	ldr	r2, [r4, #0]
 800d15e:	6853      	ldr	r3, [r2, #4]
 800d160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d164:	6053      	str	r3, [r2, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d168:	4a34      	ldr	r2, [pc, #208]	; (800d23c <HAL_SPI_Receive_DMA+0x168>)
 800d16a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800d16c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d16e:	4a34      	ldr	r2, [pc, #208]	; (800d240 <HAL_SPI_Receive_DMA+0x16c>)
 800d170:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d172:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d174:	4a33      	ldr	r2, [pc, #204]	; (800d244 <HAL_SPI_Receive_DMA+0x170>)
 800d176:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800d178:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d17a:	2200      	movs	r2, #0
 800d17c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800d17e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d182:	6821      	ldr	r1, [r4, #0]
 800d184:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d186:	310c      	adds	r1, #12
 800d188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d18a:	f7f7 fef2 	bl	8004f72 <HAL_DMA_Start_IT>
 800d18e:	4603      	mov	r3, r0
 800d190:	2800      	cmp	r0, #0
 800d192:	d038      	beq.n	800d206 <HAL_SPI_Receive_DMA+0x132>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d194:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d196:	f043 0310 	orr.w	r3, r3, #16
 800d19a:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800d19c:	2301      	movs	r3, #1
 800d19e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800d1a2:	e7ad      	b.n	800d100 <HAL_SPI_Receive_DMA+0x2c>
    SPI_1LINE_RX(hspi);
 800d1a4:	6822      	ldr	r2, [r4, #0]
 800d1a6:	6813      	ldr	r3, [r2, #0]
 800d1a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d1ac:	6013      	str	r3, [r2, #0]
 800d1ae:	e7cc      	b.n	800d14a <HAL_SPI_Receive_DMA+0x76>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d1b0:	6822      	ldr	r2, [r4, #0]
 800d1b2:	6853      	ldr	r3, [r2, #4]
 800d1b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d1b8:	6053      	str	r3, [r2, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d1ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d1bc:	699b      	ldr	r3, [r3, #24]
 800d1be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1c2:	d1d0      	bne.n	800d166 <HAL_SPI_Receive_DMA+0x92>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d1c4:	6822      	ldr	r2, [r4, #0]
 800d1c6:	6853      	ldr	r3, [r2, #4]
 800d1c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1cc:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d1ce:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d1d2:	f013 0f01 	tst.w	r3, #1
 800d1d6:	d10a      	bne.n	800d1ee <HAL_SPI_Receive_DMA+0x11a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d1d8:	6822      	ldr	r2, [r4, #0]
 800d1da:	6853      	ldr	r3, [r2, #4]
 800d1dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1e0:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d1e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d1e6:	085b      	lsrs	r3, r3, #1
 800d1e8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800d1ec:	e7bb      	b.n	800d166 <HAL_SPI_Receive_DMA+0x92>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d1ee:	6822      	ldr	r2, [r4, #0]
 800d1f0:	6853      	ldr	r3, [r2, #4]
 800d1f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d1f6:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d1f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d1fc:	085b      	lsrs	r3, r3, #1
 800d1fe:	3301      	adds	r3, #1
 800d200:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800d204:	e7af      	b.n	800d166 <HAL_SPI_Receive_DMA+0x92>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d206:	6822      	ldr	r2, [r4, #0]
 800d208:	6811      	ldr	r1, [r2, #0]
 800d20a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d20e:	d103      	bne.n	800d218 <HAL_SPI_Receive_DMA+0x144>
    __HAL_SPI_ENABLE(hspi);
 800d210:	6811      	ldr	r1, [r2, #0]
 800d212:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800d216:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d218:	6821      	ldr	r1, [r4, #0]
 800d21a:	684a      	ldr	r2, [r1, #4]
 800d21c:	f042 0220 	orr.w	r2, r2, #32
 800d220:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d222:	6821      	ldr	r1, [r4, #0]
 800d224:	684a      	ldr	r2, [r1, #4]
 800d226:	f042 0201 	orr.w	r2, r2, #1
 800d22a:	604a      	str	r2, [r1, #4]
 800d22c:	e768      	b.n	800d100 <HAL_SPI_Receive_DMA+0x2c>
    errorcode = HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e766      	b.n	800d100 <HAL_SPI_Receive_DMA+0x2c>
 800d232:	2301      	movs	r3, #1
 800d234:	e764      	b.n	800d100 <HAL_SPI_Receive_DMA+0x2c>
  __HAL_LOCK(hspi);
 800d236:	2302      	movs	r3, #2
 800d238:	e765      	b.n	800d106 <HAL_SPI_Receive_DMA+0x32>
 800d23a:	bf00      	nop
 800d23c:	0800d47f 	.word	0x0800d47f
 800d240:	0800d805 	.word	0x0800d805
 800d244:	0800d773 	.word	0x0800d773

0800d248 <HAL_SPI_Abort>:
{
 800d248:	b510      	push	{r4, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	4604      	mov	r4, r0
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800d24e:	4b5e      	ldr	r3, [pc, #376]	; (800d3c8 <HAL_SPI_Abort+0x180>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a5e      	ldr	r2, [pc, #376]	; (800d3cc <HAL_SPI_Abort+0x184>)
 800d254:	fba2 2303 	umull	r2, r3, r2, r3
 800d258:	0a5b      	lsrs	r3, r3, #9
 800d25a:	2264      	movs	r2, #100	; 0x64
 800d25c:	fb02 f303 	mul.w	r3, r2, r3
 800d260:	9304      	str	r3, [sp, #16]
  count = resetcount;
 800d262:	9b04      	ldr	r3, [sp, #16]
 800d264:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800d266:	6802      	ldr	r2, [r0, #0]
 800d268:	6853      	ldr	r3, [r2, #4]
 800d26a:	f023 0320 	bic.w	r3, r3, #32
 800d26e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800d270:	6802      	ldr	r2, [r0, #0]
 800d272:	6853      	ldr	r3, [r2, #4]
 800d274:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d278:	d012      	beq.n	800d2a0 <HAL_SPI_Abort+0x58>
    hspi->TxISR = SPI_AbortTx_ISR;
 800d27a:	4b55      	ldr	r3, [pc, #340]	; (800d3d0 <HAL_SPI_Abort+0x188>)
 800d27c:	6503      	str	r3, [r0, #80]	; 0x50
      if (count == 0U)
 800d27e:	9b05      	ldr	r3, [sp, #20]
 800d280:	b143      	cbz	r3, 800d294 <HAL_SPI_Abort+0x4c>
      count--;
 800d282:	9b05      	ldr	r3, [sp, #20]
 800d284:	3b01      	subs	r3, #1
 800d286:	9305      	str	r3, [sp, #20]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800d288:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	2b07      	cmp	r3, #7
 800d290:	d1f5      	bne.n	800d27e <HAL_SPI_Abort+0x36>
 800d292:	e003      	b.n	800d29c <HAL_SPI_Abort+0x54>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d294:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d29a:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800d29c:	9b04      	ldr	r3, [sp, #16]
 800d29e:	9305      	str	r3, [sp, #20]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800d2a0:	6853      	ldr	r3, [r2, #4]
 800d2a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d2a6:	d012      	beq.n	800d2ce <HAL_SPI_Abort+0x86>
    hspi->RxISR = SPI_AbortRx_ISR;
 800d2a8:	4b4a      	ldr	r3, [pc, #296]	; (800d3d4 <HAL_SPI_Abort+0x18c>)
 800d2aa:	64e3      	str	r3, [r4, #76]	; 0x4c
      if (count == 0U)
 800d2ac:	9b05      	ldr	r3, [sp, #20]
 800d2ae:	b143      	cbz	r3, 800d2c2 <HAL_SPI_Abort+0x7a>
      count--;
 800d2b0:	9b05      	ldr	r3, [sp, #20]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	9305      	str	r3, [sp, #20]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800d2b6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b07      	cmp	r3, #7
 800d2be:	d1f5      	bne.n	800d2ac <HAL_SPI_Abort+0x64>
 800d2c0:	e003      	b.n	800d2ca <HAL_SPI_Abort+0x82>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d2c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c8:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800d2ca:	9b04      	ldr	r3, [sp, #16]
 800d2cc:	9305      	str	r3, [sp, #20]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800d2ce:	6853      	ldr	r3, [r2, #4]
 800d2d0:	f013 0f02 	tst.w	r3, #2
 800d2d4:	d02a      	beq.n	800d32c <HAL_SPI_Abort+0xe4>
    if (hspi->hdmatx != NULL)
 800d2d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d2d8:	b343      	cbz	r3, 800d32c <HAL_SPI_Abort+0xe4>
      hspi->hdmatx->XferAbortCallback = NULL;
 800d2da:	2200      	movs	r2, #0
 800d2dc:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800d2de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2e0:	f7f7 fe94 	bl	800500c <HAL_DMA_Abort>
 800d2e4:	b108      	cbz	r0, 800d2ea <HAL_SPI_Abort+0xa2>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800d2e6:	2340      	movs	r3, #64	; 0x40
 800d2e8:	6623      	str	r3, [r4, #96]	; 0x60
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 800d2ea:	6822      	ldr	r2, [r4, #0]
 800d2ec:	6853      	ldr	r3, [r2, #4]
 800d2ee:	f023 0302 	bic.w	r3, r3, #2
 800d2f2:	6053      	str	r3, [r2, #4]
      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800d2f4:	f7f7 faca 	bl	800488c <HAL_GetTick>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	2164      	movs	r1, #100	; 0x64
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f7fe ff3b 	bl	800c178 <SPI_EndRxTxTransaction>
 800d302:	b108      	cbz	r0, 800d308 <HAL_SPI_Abort+0xc0>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800d304:	2340      	movs	r3, #64	; 0x40
 800d306:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_DISABLE(hspi);
 800d308:	6822      	ldr	r2, [r4, #0]
 800d30a:	6813      	ldr	r3, [r2, #0]
 800d30c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d310:	6013      	str	r3, [r2, #0]
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800d312:	f7f7 fabb 	bl	800488c <HAL_GetTick>
 800d316:	9000      	str	r0, [sp, #0]
 800d318:	2364      	movs	r3, #100	; 0x64
 800d31a:	2200      	movs	r2, #0
 800d31c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d320:	4620      	mov	r0, r4
 800d322:	f7fe fedd 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800d326:	b108      	cbz	r0, 800d32c <HAL_SPI_Abort+0xe4>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800d328:	2340      	movs	r3, #64	; 0x40
 800d32a:	6623      	str	r3, [r4, #96]	; 0x60
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	f013 0f01 	tst.w	r3, #1
 800d334:	d02c      	beq.n	800d390 <HAL_SPI_Abort+0x148>
    if (hspi->hdmarx != NULL)
 800d336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d338:	b353      	cbz	r3, 800d390 <HAL_SPI_Abort+0x148>
      hspi->hdmarx->XferAbortCallback = NULL;
 800d33a:	2200      	movs	r2, #0
 800d33c:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800d33e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d340:	f7f7 fe64 	bl	800500c <HAL_DMA_Abort>
 800d344:	b108      	cbz	r0, 800d34a <HAL_SPI_Abort+0x102>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800d346:	2340      	movs	r3, #64	; 0x40
 800d348:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_DISABLE(hspi);
 800d34a:	6822      	ldr	r2, [r4, #0]
 800d34c:	6813      	ldr	r3, [r2, #0]
 800d34e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d352:	6013      	str	r3, [r2, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800d354:	f7f7 fa9a 	bl	800488c <HAL_GetTick>
 800d358:	9000      	str	r0, [sp, #0]
 800d35a:	2364      	movs	r3, #100	; 0x64
 800d35c:	2200      	movs	r2, #0
 800d35e:	2180      	movs	r1, #128	; 0x80
 800d360:	4620      	mov	r0, r4
 800d362:	f7fe fe75 	bl	800c050 <SPI_WaitFlagStateUntilTimeout>
 800d366:	b108      	cbz	r0, 800d36c <HAL_SPI_Abort+0x124>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800d368:	2340      	movs	r3, #64	; 0x40
 800d36a:	6623      	str	r3, [r4, #96]	; 0x60
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800d36c:	f7f7 fa8e 	bl	800488c <HAL_GetTick>
 800d370:	9000      	str	r0, [sp, #0]
 800d372:	2364      	movs	r3, #100	; 0x64
 800d374:	2200      	movs	r2, #0
 800d376:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d37a:	4620      	mov	r0, r4
 800d37c:	f7fe feb0 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800d380:	b108      	cbz	r0, 800d386 <HAL_SPI_Abort+0x13e>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800d382:	2340      	movs	r3, #64	; 0x40
 800d384:	6623      	str	r3, [r4, #96]	; 0x60
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 800d386:	6822      	ldr	r2, [r4, #0]
 800d388:	6853      	ldr	r3, [r2, #4]
 800d38a:	f023 0301 	bic.w	r3, r3, #1
 800d38e:	6053      	str	r3, [r2, #4]
  hspi->RxXferCount = 0U;
 800d390:	2300      	movs	r3, #0
 800d392:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d396:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800d398:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d39a:	2b40      	cmp	r3, #64	; 0x40
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d39c:	bf1a      	itte	ne
 800d39e:	2000      	movne	r0, #0
 800d3a0:	6620      	strne	r0, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d3a2:	2001      	moveq	r0, #1
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	9202      	str	r2, [sp, #8]
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	68d9      	ldr	r1, [r3, #12]
 800d3ac:	9102      	str	r1, [sp, #8]
 800d3ae:	6899      	ldr	r1, [r3, #8]
 800d3b0:	9102      	str	r1, [sp, #8]
 800d3b2:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d3b4:	9203      	str	r2, [sp, #12]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	9303      	str	r3, [sp, #12]
 800d3ba:	9b03      	ldr	r3, [sp, #12]
  hspi->State = HAL_SPI_STATE_READY;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800d3c2:	b006      	add	sp, #24
 800d3c4:	bd10      	pop	{r4, pc}
 800d3c6:	bf00      	nop
 800d3c8:	20000008 	.word	0x20000008
 800d3cc:	057619f1 	.word	0x057619f1
 800d3d0:	0800c2f9 	.word	0x0800c2f9
 800d3d4:	0800c269 	.word	0x0800c269

0800d3d8 <HAL_SPI_DMAPause>:
  __HAL_LOCK(hspi);
 800d3d8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d00c      	beq.n	800d3fa <HAL_SPI_DMAPause+0x22>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d3e6:	6802      	ldr	r2, [r0, #0]
 800d3e8:	6853      	ldr	r3, [r2, #4]
 800d3ea:	f023 0303 	bic.w	r3, r3, #3
 800d3ee:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hspi);
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	4770      	bx	lr
  __HAL_LOCK(hspi);
 800d3fa:	2002      	movs	r0, #2
}
 800d3fc:	4770      	bx	lr

0800d3fe <HAL_SPI_DMAResume>:
  __HAL_LOCK(hspi);
 800d3fe:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800d402:	2b01      	cmp	r3, #1
 800d404:	d00c      	beq.n	800d420 <HAL_SPI_DMAResume+0x22>
 800d406:	2301      	movs	r3, #1
 800d408:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d40c:	6802      	ldr	r2, [r0, #0]
 800d40e:	6853      	ldr	r3, [r2, #4]
 800d410:	f043 0303 	orr.w	r3, r3, #3
 800d414:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hspi);
 800d416:	2300      	movs	r3, #0
 800d418:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800d41c:	4618      	mov	r0, r3
 800d41e:	4770      	bx	lr
  __HAL_LOCK(hspi);
 800d420:	2002      	movs	r0, #2
}
 800d422:	4770      	bx	lr

0800d424 <HAL_SPI_DMAStop>:
{
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4604      	mov	r4, r0
  if (hspi->hdmatx != NULL)
 800d428:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800d42a:	b148      	cbz	r0, 800d440 <HAL_SPI_DMAStop+0x1c>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800d42c:	f7f7 fdee 	bl	800500c <HAL_DMA_Abort>
 800d430:	4605      	mov	r5, r0
 800d432:	b130      	cbz	r0, 800d442 <HAL_SPI_DMAStop+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d434:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d436:	f043 0310 	orr.w	r3, r3, #16
 800d43a:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800d43c:	2501      	movs	r5, #1
 800d43e:	e000      	b.n	800d442 <HAL_SPI_DMAStop+0x1e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d440:	2500      	movs	r5, #0
  if (hspi->hdmarx != NULL)
 800d442:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d444:	b138      	cbz	r0, 800d456 <HAL_SPI_DMAStop+0x32>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800d446:	f7f7 fde1 	bl	800500c <HAL_DMA_Abort>
 800d44a:	b120      	cbz	r0, 800d456 <HAL_SPI_DMAStop+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d44c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d44e:	f043 0310 	orr.w	r3, r3, #16
 800d452:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800d454:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d456:	6822      	ldr	r2, [r4, #0]
 800d458:	6853      	ldr	r3, [r2, #4]
 800d45a:	f023 0303 	bic.w	r3, r3, #3
 800d45e:	6053      	str	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800d460:	2301      	movs	r3, #1
 800d462:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800d466:	4628      	mov	r0, r5
 800d468:	bd38      	pop	{r3, r4, r5, pc}

0800d46a <HAL_SPI_TxCpltCallback>:
}
 800d46a:	4770      	bx	lr

0800d46c <HAL_SPI_RxCpltCallback>:
}
 800d46c:	4770      	bx	lr

0800d46e <HAL_SPI_TxRxCpltCallback>:
}
 800d46e:	4770      	bx	lr

0800d470 <HAL_SPI_TxHalfCpltCallback>:
}
 800d470:	4770      	bx	lr

0800d472 <SPI_DMAHalfTransmitCplt>:
{
 800d472:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d474:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d476:	f7ff fffb 	bl	800d470 <HAL_SPI_TxHalfCpltCallback>
}
 800d47a:	bd08      	pop	{r3, pc}

0800d47c <HAL_SPI_RxHalfCpltCallback>:
}
 800d47c:	4770      	bx	lr

0800d47e <SPI_DMAHalfReceiveCplt>:
{
 800d47e:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d480:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d482:	f7ff fffb 	bl	800d47c <HAL_SPI_RxHalfCpltCallback>
}
 800d486:	bd08      	pop	{r3, pc}

0800d488 <HAL_SPI_TxRxHalfCpltCallback>:
}
 800d488:	4770      	bx	lr

0800d48a <SPI_DMAHalfTransmitReceiveCplt>:
{
 800d48a:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d48c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d48e:	f7ff fffb 	bl	800d488 <HAL_SPI_TxRxHalfCpltCallback>
}
 800d492:	bd08      	pop	{r3, pc}

0800d494 <HAL_SPI_ErrorCallback>:
}
 800d494:	4770      	bx	lr

0800d496 <SPI_CloseTx_ISR>:
{
 800d496:	b510      	push	{r4, lr}
 800d498:	b082      	sub	sp, #8
 800d49a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800d49c:	f7f7 f9f6 	bl	800488c <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800d4a0:	6822      	ldr	r2, [r4, #0]
 800d4a2:	6853      	ldr	r3, [r2, #4]
 800d4a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d4a8:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	2164      	movs	r1, #100	; 0x64
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f7fe fe62 	bl	800c178 <SPI_EndRxTxTransaction>
 800d4b4:	b118      	cbz	r0, 800d4be <SPI_CloseTx_ISR+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d4b8:	f043 0320 	orr.w	r3, r3, #32
 800d4bc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	b933      	cbnz	r3, 800d4d0 <SPI_CloseTx_ISR+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d4c2:	9301      	str	r3, [sp, #4]
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	68da      	ldr	r2, [r3, #12]
 800d4c8:	9201      	str	r2, [sp, #4]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	9301      	str	r3, [sp, #4]
 800d4ce:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d4d8:	b923      	cbnz	r3, 800d4e4 <SPI_CloseTx_ISR+0x4e>
    HAL_SPI_TxCpltCallback(hspi);
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f7ff ffc5 	bl	800d46a <HAL_SPI_TxCpltCallback>
}
 800d4e0:	b002      	add	sp, #8
 800d4e2:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f7ff ffd5 	bl	800d494 <HAL_SPI_ErrorCallback>
 800d4ea:	e7f9      	b.n	800d4e0 <SPI_CloseTx_ISR+0x4a>

0800d4ec <SPI_TxISR_8BIT>:
{
 800d4ec:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d4ee:	6803      	ldr	r3, [r0, #0]
 800d4f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800d4f2:	7812      	ldrb	r2, [r2, #0]
 800d4f4:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 800d4f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800d4fc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d4fe:	3b01      	subs	r3, #1
 800d500:	b29b      	uxth	r3, r3
 800d502:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800d504:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d506:	b29b      	uxth	r3, r3
 800d508:	b103      	cbz	r3, 800d50c <SPI_TxISR_8BIT+0x20>
}
 800d50a:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800d50c:	f7ff ffc3 	bl	800d496 <SPI_CloseTx_ISR>
}
 800d510:	e7fb      	b.n	800d50a <SPI_TxISR_8BIT+0x1e>

0800d512 <SPI_TxISR_16BIT>:
{
 800d512:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d514:	6803      	ldr	r3, [r0, #0]
 800d516:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800d518:	8812      	ldrh	r2, [r2, #0]
 800d51a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800d51c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d51e:	3302      	adds	r3, #2
 800d520:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800d522:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d524:	3b01      	subs	r3, #1
 800d526:	b29b      	uxth	r3, r3
 800d528:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800d52a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	b103      	cbz	r3, 800d532 <SPI_TxISR_16BIT+0x20>
}
 800d530:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800d532:	f7ff ffb0 	bl	800d496 <SPI_CloseTx_ISR>
}
 800d536:	e7fb      	b.n	800d530 <SPI_TxISR_16BIT+0x1e>

0800d538 <SPI_CloseRx_ISR>:
{
 800d538:	b510      	push	{r4, lr}
 800d53a:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800d53c:	6802      	ldr	r2, [r0, #0]
 800d53e:	6853      	ldr	r3, [r2, #4]
 800d540:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800d544:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800d546:	f7f7 f9a1 	bl	800488c <HAL_GetTick>
 800d54a:	4602      	mov	r2, r0
 800d54c:	2164      	movs	r1, #100	; 0x64
 800d54e:	4620      	mov	r0, r4
 800d550:	f7fe fe45 	bl	800c1de <SPI_EndRxTransaction>
 800d554:	b118      	cbz	r0, 800d55e <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d556:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d558:	f043 0320 	orr.w	r3, r3, #32
 800d55c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d55e:	2301      	movs	r3, #1
 800d560:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800d564:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d566:	b11b      	cbz	r3, 800d570 <SPI_CloseRx_ISR+0x38>
      HAL_SPI_ErrorCallback(hspi);
 800d568:	4620      	mov	r0, r4
 800d56a:	f7ff ff93 	bl	800d494 <HAL_SPI_ErrorCallback>
}
 800d56e:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800d570:	4620      	mov	r0, r4
 800d572:	f7ff ff7b 	bl	800d46c <HAL_SPI_RxCpltCallback>
 800d576:	e7fa      	b.n	800d56e <SPI_CloseRx_ISR+0x36>

0800d578 <SPI_RxISR_8BIT>:
{
 800d578:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800d57a:	6802      	ldr	r2, [r0, #0]
 800d57c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d57e:	7b12      	ldrb	r2, [r2, #12]
 800d580:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800d582:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d584:	3301      	adds	r3, #1
 800d586:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800d588:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d58c:	3b01      	subs	r3, #1
 800d58e:	b29b      	uxth	r3, r3
 800d590:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800d594:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d598:	b29b      	uxth	r3, r3
 800d59a:	b103      	cbz	r3, 800d59e <SPI_RxISR_8BIT+0x26>
}
 800d59c:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 800d59e:	f7ff ffcb 	bl	800d538 <SPI_CloseRx_ISR>
}
 800d5a2:	e7fb      	b.n	800d59c <SPI_RxISR_8BIT+0x24>

0800d5a4 <SPI_RxISR_16BIT>:
{
 800d5a4:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800d5a6:	6803      	ldr	r3, [r0, #0]
 800d5a8:	68da      	ldr	r2, [r3, #12]
 800d5aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d5ac:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d5ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d5b0:	3302      	adds	r3, #2
 800d5b2:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800d5b4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800d5c0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	b103      	cbz	r3, 800d5ca <SPI_RxISR_16BIT+0x26>
}
 800d5c8:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 800d5ca:	f7ff ffb5 	bl	800d538 <SPI_CloseRx_ISR>
}
 800d5ce:	e7fb      	b.n	800d5c8 <SPI_RxISR_16BIT+0x24>

0800d5d0 <SPI_CloseRxTx_ISR>:
{
 800d5d0:	b510      	push	{r4, lr}
 800d5d2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800d5d4:	f7f7 f95a 	bl	800488c <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d5d8:	6822      	ldr	r2, [r4, #0]
 800d5da:	6853      	ldr	r3, [r2, #4]
 800d5dc:	f023 0320 	bic.w	r3, r3, #32
 800d5e0:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	2164      	movs	r1, #100	; 0x64
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f7fe fdc6 	bl	800c178 <SPI_EndRxTxTransaction>
 800d5ec:	b118      	cbz	r0, 800d5f6 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d5f0:	f043 0320 	orr.w	r3, r3, #32
 800d5f4:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800d5f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d5f8:	b993      	cbnz	r3, 800d620 <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d5fa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	2b04      	cmp	r3, #4
 800d602:	d006      	beq.n	800d612 <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 800d604:	2301      	movs	r3, #1
 800d606:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800d60a:	4620      	mov	r0, r4
 800d60c:	f7ff ff2f 	bl	800d46e <HAL_SPI_TxRxCpltCallback>
}
 800d610:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800d612:	2301      	movs	r3, #1
 800d614:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800d618:	4620      	mov	r0, r4
 800d61a:	f7ff ff27 	bl	800d46c <HAL_SPI_RxCpltCallback>
 800d61e:	e7f7      	b.n	800d610 <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 800d620:	2301      	movs	r3, #1
 800d622:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800d626:	4620      	mov	r0, r4
 800d628:	f7ff ff34 	bl	800d494 <HAL_SPI_ErrorCallback>
}
 800d62c:	e7f0      	b.n	800d610 <SPI_CloseRxTx_ISR+0x40>

0800d62e <SPI_2linesTxISR_8BIT>:
{
 800d62e:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 800d630:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d632:	b29b      	uxth	r3, r3
 800d634:	2b01      	cmp	r3, #1
 800d636:	d917      	bls.n	800d668 <SPI_2linesTxISR_8BIT+0x3a>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d638:	6803      	ldr	r3, [r0, #0]
 800d63a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800d63c:	8812      	ldrh	r2, [r2, #0]
 800d63e:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800d640:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d642:	3302      	adds	r3, #2
 800d644:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800d646:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d648:	3b02      	subs	r3, #2
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800d64e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d650:	b29b      	uxth	r3, r3
 800d652:	b943      	cbnz	r3, 800d666 <SPI_2linesTxISR_8BIT+0x38>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800d654:	6802      	ldr	r2, [r0, #0]
 800d656:	6853      	ldr	r3, [r2, #4]
 800d658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d65c:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800d65e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d662:	b29b      	uxth	r3, r3
 800d664:	b163      	cbz	r3, 800d680 <SPI_2linesTxISR_8BIT+0x52>
}
 800d666:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d668:	6803      	ldr	r3, [r0, #0]
 800d66a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800d66c:	7812      	ldrb	r2, [r2, #0]
 800d66e:	731a      	strb	r2, [r3, #12]
    hspi->pTxBuffPtr++;
 800d670:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d672:	3301      	adds	r3, #1
 800d674:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 800d676:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d678:	3b01      	subs	r3, #1
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	87c3      	strh	r3, [r0, #62]	; 0x3e
 800d67e:	e7e6      	b.n	800d64e <SPI_2linesTxISR_8BIT+0x20>
      SPI_CloseRxTx_ISR(hspi);
 800d680:	f7ff ffa6 	bl	800d5d0 <SPI_CloseRxTx_ISR>
}
 800d684:	e7ef      	b.n	800d666 <SPI_2linesTxISR_8BIT+0x38>

0800d686 <SPI_2linesRxISR_8BIT>:
{
 800d686:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 800d688:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d924      	bls.n	800d6dc <SPI_2linesRxISR_8BIT+0x56>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800d692:	6803      	ldr	r3, [r0, #0]
 800d694:	68da      	ldr	r2, [r3, #12]
 800d696:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d698:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800d69a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d69c:	3302      	adds	r3, #2
 800d69e:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800d6a0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d6a4:	3b02      	subs	r3, #2
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800d6ac:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d00c      	beq.n	800d6d0 <SPI_2linesRxISR_8BIT+0x4a>
  if (hspi->RxXferCount == 0U)
 800d6b6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	b93b      	cbnz	r3, 800d6ce <SPI_2linesRxISR_8BIT+0x48>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800d6be:	6802      	ldr	r2, [r0, #0]
 800d6c0:	6853      	ldr	r3, [r2, #4]
 800d6c2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800d6c6:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800d6c8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	b1a3      	cbz	r3, 800d6f8 <SPI_2linesRxISR_8BIT+0x72>
}
 800d6ce:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d6d0:	6802      	ldr	r2, [r0, #0]
 800d6d2:	6853      	ldr	r3, [r2, #4]
 800d6d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d6d8:	6053      	str	r3, [r2, #4]
 800d6da:	e7ec      	b.n	800d6b6 <SPI_2linesRxISR_8BIT+0x30>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800d6dc:	6802      	ldr	r2, [r0, #0]
 800d6de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d6e0:	7b12      	ldrb	r2, [r2, #12]
 800d6e2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800d6e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 800d6ea:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 800d6f6:	e7de      	b.n	800d6b6 <SPI_2linesRxISR_8BIT+0x30>
      SPI_CloseRxTx_ISR(hspi);
 800d6f8:	f7ff ff6a 	bl	800d5d0 <SPI_CloseRxTx_ISR>
}
 800d6fc:	e7e7      	b.n	800d6ce <SPI_2linesRxISR_8BIT+0x48>

0800d6fe <SPI_2linesTxISR_16BIT>:
{
 800d6fe:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d700:	6803      	ldr	r3, [r0, #0]
 800d702:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800d704:	8812      	ldrh	r2, [r2, #0]
 800d706:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800d708:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d70a:	3302      	adds	r3, #2
 800d70c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800d70e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d710:	3b01      	subs	r3, #1
 800d712:	b29b      	uxth	r3, r3
 800d714:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800d716:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d718:	b29b      	uxth	r3, r3
 800d71a:	b943      	cbnz	r3, 800d72e <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800d71c:	6802      	ldr	r2, [r0, #0]
 800d71e:	6853      	ldr	r3, [r2, #4]
 800d720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d724:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800d726:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	b103      	cbz	r3, 800d730 <SPI_2linesTxISR_16BIT+0x32>
}
 800d72e:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800d730:	f7ff ff4e 	bl	800d5d0 <SPI_CloseRxTx_ISR>
}
 800d734:	e7fb      	b.n	800d72e <SPI_2linesTxISR_16BIT+0x30>

0800d736 <SPI_2linesRxISR_16BIT>:
{
 800d736:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800d738:	6803      	ldr	r3, [r0, #0]
 800d73a:	68da      	ldr	r2, [r3, #12]
 800d73c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d73e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d740:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d742:	3302      	adds	r3, #2
 800d744:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800d746:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d74a:	3b01      	subs	r3, #1
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800d752:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800d756:	b29b      	uxth	r3, r3
 800d758:	b93b      	cbnz	r3, 800d76a <SPI_2linesRxISR_16BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800d75a:	6802      	ldr	r2, [r0, #0]
 800d75c:	6853      	ldr	r3, [r2, #4]
 800d75e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d762:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800d764:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800d766:	b29b      	uxth	r3, r3
 800d768:	b103      	cbz	r3, 800d76c <SPI_2linesRxISR_16BIT+0x36>
}
 800d76a:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800d76c:	f7ff ff30 	bl	800d5d0 <SPI_CloseRxTx_ISR>
}
 800d770:	e7fb      	b.n	800d76a <SPI_2linesRxISR_16BIT+0x34>

0800d772 <SPI_DMAError>:
{
 800d772:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d774:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d776:	6802      	ldr	r2, [r0, #0]
 800d778:	6853      	ldr	r3, [r2, #4]
 800d77a:	f023 0303 	bic.w	r3, r3, #3
 800d77e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d780:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d782:	f043 0310 	orr.w	r3, r3, #16
 800d786:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d788:	2301      	movs	r3, #1
 800d78a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 800d78e:	f7ff fe81 	bl	800d494 <HAL_SPI_ErrorCallback>
}
 800d792:	bd08      	pop	{r3, pc}

0800d794 <SPI_DMATransmitCplt>:
{
 800d794:	b530      	push	{r4, r5, lr}
 800d796:	b083      	sub	sp, #12
 800d798:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d79a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800d79c:	f7f7 f876 	bl	800488c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f013 0f20 	tst.w	r3, #32
 800d7a8:	d123      	bne.n	800d7f2 <SPI_DMATransmitCplt+0x5e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d7aa:	6822      	ldr	r2, [r4, #0]
 800d7ac:	6853      	ldr	r3, [r2, #4]
 800d7ae:	f023 0320 	bic.w	r3, r3, #32
 800d7b2:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d7b4:	6822      	ldr	r2, [r4, #0]
 800d7b6:	6853      	ldr	r3, [r2, #4]
 800d7b8:	f023 0302 	bic.w	r3, r3, #2
 800d7bc:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d7be:	4602      	mov	r2, r0
 800d7c0:	2164      	movs	r1, #100	; 0x64
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f7fe fcd8 	bl	800c178 <SPI_EndRxTxTransaction>
 800d7c8:	b118      	cbz	r0, 800d7d2 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d7cc:	f043 0320 	orr.w	r3, r3, #32
 800d7d0:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d7d2:	68a3      	ldr	r3, [r4, #8]
 800d7d4:	b933      	cbnz	r3, 800d7e4 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	68da      	ldr	r2, [r3, #12]
 800d7dc:	9201      	str	r2, [sp, #4]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	9301      	str	r3, [sp, #4]
 800d7e2:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d7ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d7f0:	b923      	cbnz	r3, 800d7fc <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f7ff fe39 	bl	800d46a <HAL_SPI_TxCpltCallback>
}
 800d7f8:	b003      	add	sp, #12
 800d7fa:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f7ff fe49 	bl	800d494 <HAL_SPI_ErrorCallback>
      return;
 800d802:	e7f9      	b.n	800d7f8 <SPI_DMATransmitCplt+0x64>

0800d804 <SPI_DMAReceiveCplt>:
{
 800d804:	b538      	push	{r3, r4, r5, lr}
 800d806:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d808:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800d80a:	f7f7 f83f 	bl	800488c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d80e:	682b      	ldr	r3, [r5, #0]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f013 0f20 	tst.w	r3, #32
 800d816:	d119      	bne.n	800d84c <SPI_DMAReceiveCplt+0x48>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d818:	6822      	ldr	r2, [r4, #0]
 800d81a:	6853      	ldr	r3, [r2, #4]
 800d81c:	f023 0320 	bic.w	r3, r3, #32
 800d820:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d822:	6822      	ldr	r2, [r4, #0]
 800d824:	6853      	ldr	r3, [r2, #4]
 800d826:	f023 0303 	bic.w	r3, r3, #3
 800d82a:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d82c:	4602      	mov	r2, r0
 800d82e:	2164      	movs	r1, #100	; 0x64
 800d830:	4620      	mov	r0, r4
 800d832:	f7fe fcd4 	bl	800c1de <SPI_EndRxTransaction>
 800d836:	b108      	cbz	r0, 800d83c <SPI_DMAReceiveCplt+0x38>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d838:	2320      	movs	r3, #32
 800d83a:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 800d83c:	2300      	movs	r3, #0
 800d83e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d842:	2301      	movs	r3, #1
 800d844:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d848:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d84a:	b91b      	cbnz	r3, 800d854 <SPI_DMAReceiveCplt+0x50>
  HAL_SPI_RxCpltCallback(hspi);
 800d84c:	4620      	mov	r0, r4
 800d84e:	f7ff fe0d 	bl	800d46c <HAL_SPI_RxCpltCallback>
}
 800d852:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800d854:	4620      	mov	r0, r4
 800d856:	f7ff fe1d 	bl	800d494 <HAL_SPI_ErrorCallback>
      return;
 800d85a:	e7fa      	b.n	800d852 <SPI_DMAReceiveCplt+0x4e>

0800d85c <SPI_DMATransmitReceiveCplt>:
{
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d860:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800d862:	f7f7 f813 	bl	800488c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d866:	682b      	ldr	r3, [r5, #0]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f013 0f20 	tst.w	r3, #32
 800d86e:	d11c      	bne.n	800d8aa <SPI_DMATransmitReceiveCplt+0x4e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d870:	6822      	ldr	r2, [r4, #0]
 800d872:	6853      	ldr	r3, [r2, #4]
 800d874:	f023 0320 	bic.w	r3, r3, #32
 800d878:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d87a:	4602      	mov	r2, r0
 800d87c:	2164      	movs	r1, #100	; 0x64
 800d87e:	4620      	mov	r0, r4
 800d880:	f7fe fc7a 	bl	800c178 <SPI_EndRxTxTransaction>
 800d884:	b118      	cbz	r0, 800d88e <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d886:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d888:	f043 0320 	orr.w	r3, r3, #32
 800d88c:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d88e:	6822      	ldr	r2, [r4, #0]
 800d890:	6853      	ldr	r3, [r2, #4]
 800d892:	f023 0303 	bic.w	r3, r3, #3
 800d896:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 800d898:	2300      	movs	r3, #0
 800d89a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d89c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d8a8:	b91b      	cbnz	r3, 800d8b2 <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f7ff fddf 	bl	800d46e <HAL_SPI_TxRxCpltCallback>
}
 800d8b0:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f7ff fdee 	bl	800d494 <HAL_SPI_ErrorCallback>
      return;
 800d8b8:	e7fa      	b.n	800d8b0 <SPI_DMATransmitReceiveCplt+0x54>
	...

0800d8bc <HAL_SPI_IRQHandler>:
{
 800d8bc:	b570      	push	{r4, r5, r6, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800d8c2:	6801      	ldr	r1, [r0, #0]
 800d8c4:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800d8c6:	688a      	ldr	r2, [r1, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d8c8:	0993      	lsrs	r3, r2, #6
 800d8ca:	f013 0501 	ands.w	r5, r3, #1
 800d8ce:	d109      	bne.n	800d8e4 <HAL_SPI_IRQHandler+0x28>
 800d8d0:	f012 0f01 	tst.w	r2, #1
 800d8d4:	d006      	beq.n	800d8e4 <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d8d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8da:	d003      	beq.n	800d8e4 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800d8dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d8de:	4620      	mov	r0, r4
 800d8e0:	4798      	blx	r3
    return;
 800d8e2:	e008      	b.n	800d8f6 <HAL_SPI_IRQHandler+0x3a>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d8e4:	f012 0f02 	tst.w	r2, #2
 800d8e8:	d007      	beq.n	800d8fa <HAL_SPI_IRQHandler+0x3e>
 800d8ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d8ee:	d004      	beq.n	800d8fa <HAL_SPI_IRQHandler+0x3e>
    hspi->TxISR(hspi);
 800d8f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	4798      	blx	r3
}
 800d8f6:	b004      	add	sp, #16
 800d8f8:	bd70      	pop	{r4, r5, r6, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d8fa:	0956      	lsrs	r6, r2, #5
 800d8fc:	4333      	orrs	r3, r6
 800d8fe:	f013 0f01 	tst.w	r3, #1
 800d902:	d05e      	beq.n	800d9c2 <HAL_SPI_IRQHandler+0x106>
 800d904:	f010 0f20 	tst.w	r0, #32
 800d908:	d0f5      	beq.n	800d8f6 <HAL_SPI_IRQHandler+0x3a>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d90a:	b17d      	cbz	r5, 800d92c <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d90c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d910:	b2db      	uxtb	r3, r3
 800d912:	2b03      	cmp	r3, #3
 800d914:	d059      	beq.n	800d9ca <HAL_SPI_IRQHandler+0x10e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d916:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d918:	f043 0304 	orr.w	r3, r3, #4
 800d91c:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d91e:	2300      	movs	r3, #0
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	68cb      	ldr	r3, [r1, #12]
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	688b      	ldr	r3, [r1, #8]
 800d928:	9300      	str	r3, [sp, #0]
 800d92a:	9b00      	ldr	r3, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d92c:	f016 0f01 	tst.w	r6, #1
 800d930:	d00c      	beq.n	800d94c <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d932:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d934:	f043 0301 	orr.w	r3, r3, #1
 800d938:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d93a:	2300      	movs	r3, #0
 800d93c:	9302      	str	r3, [sp, #8]
 800d93e:	688b      	ldr	r3, [r1, #8]
 800d940:	9302      	str	r3, [sp, #8]
 800d942:	680b      	ldr	r3, [r1, #0]
 800d944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d948:	600b      	str	r3, [r1, #0]
 800d94a:	9b02      	ldr	r3, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d94c:	f412 7f80 	tst.w	r2, #256	; 0x100
 800d950:	d009      	beq.n	800d966 <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d952:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d954:	f043 0308 	orr.w	r3, r3, #8
 800d958:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d95a:	2300      	movs	r3, #0
 800d95c:	9303      	str	r3, [sp, #12]
 800d95e:	6823      	ldr	r3, [r4, #0]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	9303      	str	r3, [sp, #12]
 800d964:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d966:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0c4      	beq.n	800d8f6 <HAL_SPI_IRQHandler+0x3a>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d96c:	6822      	ldr	r2, [r4, #0]
 800d96e:	6853      	ldr	r3, [r2, #4]
 800d970:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800d974:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800d976:	2301      	movs	r3, #1
 800d978:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d97c:	f010 0f03 	tst.w	r0, #3
 800d980:	d02b      	beq.n	800d9da <HAL_SPI_IRQHandler+0x11e>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d982:	6822      	ldr	r2, [r4, #0]
 800d984:	6853      	ldr	r3, [r2, #4]
 800d986:	f023 0303 	bic.w	r3, r3, #3
 800d98a:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800d98c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d98e:	b14b      	cbz	r3, 800d9a4 <HAL_SPI_IRQHandler+0xe8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d990:	4a14      	ldr	r2, [pc, #80]	; (800d9e4 <HAL_SPI_IRQHandler+0x128>)
 800d992:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d996:	f7f7 fb5e 	bl	8005056 <HAL_DMA_Abort_IT>
 800d99a:	b118      	cbz	r0, 800d9a4 <HAL_SPI_IRQHandler+0xe8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d99c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9a2:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800d9a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d0a5      	beq.n	800d8f6 <HAL_SPI_IRQHandler+0x3a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d9aa:	4a0e      	ldr	r2, [pc, #56]	; (800d9e4 <HAL_SPI_IRQHandler+0x128>)
 800d9ac:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d9ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d9b0:	f7f7 fb51 	bl	8005056 <HAL_DMA_Abort_IT>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d09e      	beq.n	800d8f6 <HAL_SPI_IRQHandler+0x3a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d9b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9be:	6623      	str	r3, [r4, #96]	; 0x60
 800d9c0:	e799      	b.n	800d8f6 <HAL_SPI_IRQHandler+0x3a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d9c2:	f412 7f80 	tst.w	r2, #256	; 0x100
 800d9c6:	d19d      	bne.n	800d904 <HAL_SPI_IRQHandler+0x48>
 800d9c8:	e795      	b.n	800d8f6 <HAL_SPI_IRQHandler+0x3a>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	9301      	str	r3, [sp, #4]
 800d9ce:	68cb      	ldr	r3, [r1, #12]
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	688b      	ldr	r3, [r1, #8]
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	9b01      	ldr	r3, [sp, #4]
        return;
 800d9d8:	e78d      	b.n	800d8f6 <HAL_SPI_IRQHandler+0x3a>
        HAL_SPI_ErrorCallback(hspi);
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f7ff fd5a 	bl	800d494 <HAL_SPI_ErrorCallback>
 800d9e0:	e789      	b.n	800d8f6 <HAL_SPI_IRQHandler+0x3a>
 800d9e2:	bf00      	nop
 800d9e4:	0800d9e9 	.word	0x0800d9e9

0800d9e8 <SPI_DMAAbortOnError>:
{
 800d9e8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d9ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d9f2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800d9f4:	f7ff fd4e 	bl	800d494 <HAL_SPI_ErrorCallback>
}
 800d9f8:	bd08      	pop	{r3, pc}

0800d9fa <HAL_SPI_AbortCpltCallback>:
}
 800d9fa:	4770      	bx	lr

0800d9fc <HAL_SPI_Abort_IT>:
{
 800d9fc:	b570      	push	{r4, r5, r6, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	4604      	mov	r4, r0
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800da02:	4b50      	ldr	r3, [pc, #320]	; (800db44 <HAL_SPI_Abort_IT+0x148>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a50      	ldr	r2, [pc, #320]	; (800db48 <HAL_SPI_Abort_IT+0x14c>)
 800da08:	fba2 2303 	umull	r2, r3, r2, r3
 800da0c:	0a5b      	lsrs	r3, r3, #9
 800da0e:	2264      	movs	r2, #100	; 0x64
 800da10:	fb02 f303 	mul.w	r3, r2, r3
 800da14:	9302      	str	r3, [sp, #8]
  count = resetcount;
 800da16:	9b02      	ldr	r3, [sp, #8]
 800da18:	9303      	str	r3, [sp, #12]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800da1a:	6802      	ldr	r2, [r0, #0]
 800da1c:	6853      	ldr	r3, [r2, #4]
 800da1e:	f023 0320 	bic.w	r3, r3, #32
 800da22:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800da24:	6802      	ldr	r2, [r0, #0]
 800da26:	6853      	ldr	r3, [r2, #4]
 800da28:	f013 0f80 	tst.w	r3, #128	; 0x80
 800da2c:	d012      	beq.n	800da54 <HAL_SPI_Abort_IT+0x58>
    hspi->TxISR = SPI_AbortTx_ISR;
 800da2e:	4b47      	ldr	r3, [pc, #284]	; (800db4c <HAL_SPI_Abort_IT+0x150>)
 800da30:	6503      	str	r3, [r0, #80]	; 0x50
      if (count == 0U)
 800da32:	9b03      	ldr	r3, [sp, #12]
 800da34:	b143      	cbz	r3, 800da48 <HAL_SPI_Abort_IT+0x4c>
      count--;
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	3b01      	subs	r3, #1
 800da3a:	9303      	str	r3, [sp, #12]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800da3c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800da40:	b2db      	uxtb	r3, r3
 800da42:	2b07      	cmp	r3, #7
 800da44:	d1f5      	bne.n	800da32 <HAL_SPI_Abort_IT+0x36>
 800da46:	e003      	b.n	800da50 <HAL_SPI_Abort_IT+0x54>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800da48:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800da4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da4e:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800da50:	9b02      	ldr	r3, [sp, #8]
 800da52:	9303      	str	r3, [sp, #12]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800da54:	6853      	ldr	r3, [r2, #4]
 800da56:	f013 0f40 	tst.w	r3, #64	; 0x40
 800da5a:	d012      	beq.n	800da82 <HAL_SPI_Abort_IT+0x86>
    hspi->RxISR = SPI_AbortRx_ISR;
 800da5c:	4b3c      	ldr	r3, [pc, #240]	; (800db50 <HAL_SPI_Abort_IT+0x154>)
 800da5e:	64e3      	str	r3, [r4, #76]	; 0x4c
      if (count == 0U)
 800da60:	9b03      	ldr	r3, [sp, #12]
 800da62:	b143      	cbz	r3, 800da76 <HAL_SPI_Abort_IT+0x7a>
      count--;
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	3b01      	subs	r3, #1
 800da68:	9303      	str	r3, [sp, #12]
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800da6a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	2b07      	cmp	r3, #7
 800da72:	d1f5      	bne.n	800da60 <HAL_SPI_Abort_IT+0x64>
 800da74:	e003      	b.n	800da7e <HAL_SPI_Abort_IT+0x82>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800da76:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800da78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da7c:	6623      	str	r3, [r4, #96]	; 0x60
    count = resetcount;
 800da7e:	9b02      	ldr	r3, [sp, #8]
 800da80:	9303      	str	r3, [sp, #12]
  if (hspi->hdmatx != NULL)
 800da82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800da84:	b133      	cbz	r3, 800da94 <HAL_SPI_Abort_IT+0x98>
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800da86:	6852      	ldr	r2, [r2, #4]
 800da88:	f012 0f02 	tst.w	r2, #2
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800da8c:	bf14      	ite	ne
 800da8e:	4a31      	ldrne	r2, [pc, #196]	; (800db54 <HAL_SPI_Abort_IT+0x158>)
      hspi->hdmatx->XferAbortCallback = NULL;
 800da90:	2200      	moveq	r2, #0
 800da92:	639a      	str	r2, [r3, #56]	; 0x38
  if (hspi->hdmarx != NULL)
 800da94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da96:	b13b      	cbz	r3, 800daa8 <HAL_SPI_Abort_IT+0xac>
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800da98:	6822      	ldr	r2, [r4, #0]
 800da9a:	6852      	ldr	r2, [r2, #4]
 800da9c:	f012 0f01 	tst.w	r2, #1
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800daa0:	bf14      	ite	ne
 800daa2:	4a2d      	ldrne	r2, [pc, #180]	; (800db58 <HAL_SPI_Abort_IT+0x15c>)
      hspi->hdmarx->XferAbortCallback = NULL;
 800daa4:	2200      	moveq	r2, #0
 800daa6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	f013 0f02 	tst.w	r3, #2
 800dab0:	d00b      	beq.n	800daca <HAL_SPI_Abort_IT+0xce>
    if (hspi->hdmatx != NULL)
 800dab2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dab4:	b148      	cbz	r0, 800daca <HAL_SPI_Abort_IT+0xce>
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800dab6:	f7f7 face 	bl	8005056 <HAL_DMA_Abort_IT>
 800daba:	4605      	mov	r5, r0
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d037      	beq.n	800db30 <HAL_SPI_Abort_IT+0x134>
        hspi->hdmatx->XferAbortCallback = NULL;
 800dac0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dac2:	2200      	movs	r2, #0
 800dac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800dac6:	2340      	movs	r3, #64	; 0x40
 800dac8:	6623      	str	r3, [r4, #96]	; 0x60
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800daca:	6823      	ldr	r3, [r4, #0]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	f013 0f01 	tst.w	r3, #1
 800dad2:	d010      	beq.n	800daf6 <HAL_SPI_Abort_IT+0xfa>
    if (hspi->hdmarx != NULL)
 800dad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dad6:	2601      	movs	r6, #1
 800dad8:	b168      	cbz	r0, 800daf6 <HAL_SPI_Abort_IT+0xfa>
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800dada:	f7f7 fabc 	bl	8005056 <HAL_DMA_Abort_IT>
 800dade:	4605      	mov	r5, r0
 800dae0:	b130      	cbz	r0, 800daf0 <HAL_SPI_Abort_IT+0xf4>
        hspi->hdmarx->XferAbortCallback = NULL;
 800dae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dae4:	2200      	movs	r2, #0
 800dae6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800dae8:	2340      	movs	r3, #64	; 0x40
 800daea:	6623      	str	r3, [r4, #96]	; 0x60
  errorcode = HAL_OK;
 800daec:	2500      	movs	r5, #0
  if (abortcplt == 1U)
 800daee:	b916      	cbnz	r6, 800daf6 <HAL_SPI_Abort_IT+0xfa>
}
 800daf0:	4628      	mov	r0, r5
 800daf2:	b004      	add	sp, #16
 800daf4:	bd70      	pop	{r4, r5, r6, pc}
    hspi->RxXferCount = 0U;
 800daf6:	2300      	movs	r3, #0
 800daf8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->TxXferCount = 0U;
 800dafc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800dafe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800db00:	2b40      	cmp	r3, #64	; 0x40
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db02:	bf1a      	itte	ne
 800db04:	2500      	movne	r5, #0
 800db06:	6625      	strne	r5, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800db08:	2501      	moveq	r5, #1
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db0a:	2200      	movs	r2, #0
 800db0c:	9200      	str	r2, [sp, #0]
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	68d9      	ldr	r1, [r3, #12]
 800db12:	9100      	str	r1, [sp, #0]
 800db14:	6899      	ldr	r1, [r3, #8]
 800db16:	9100      	str	r1, [sp, #0]
 800db18:	9900      	ldr	r1, [sp, #0]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800db1a:	9201      	str	r2, [sp, #4]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY;
 800db22:	2301      	movs	r3, #1
 800db24:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    HAL_SPI_AbortCpltCallback(hspi);
 800db28:	4620      	mov	r0, r4
 800db2a:	f7ff ff66 	bl	800d9fa <HAL_SPI_AbortCpltCallback>
 800db2e:	e7df      	b.n	800daf0 <HAL_SPI_Abort_IT+0xf4>
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800db30:	6823      	ldr	r3, [r4, #0]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	f013 0f01 	tst.w	r3, #1
 800db38:	d0da      	beq.n	800daf0 <HAL_SPI_Abort_IT+0xf4>
    if (hspi->hdmarx != NULL)
 800db3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d0d7      	beq.n	800daf0 <HAL_SPI_Abort_IT+0xf4>
        abortcplt = 0U;
 800db40:	2600      	movs	r6, #0
 800db42:	e7ca      	b.n	800dada <HAL_SPI_Abort_IT+0xde>
 800db44:	20000008 	.word	0x20000008
 800db48:	057619f1 	.word	0x057619f1
 800db4c:	0800c2f9 	.word	0x0800c2f9
 800db50:	0800c269 	.word	0x0800c269
 800db54:	0800dbf1 	.word	0x0800dbf1
 800db58:	0800db5d 	.word	0x0800db5d

0800db5c <SPI_DMARxAbortCallback>:
{
 800db5c:	b530      	push	{r4, r5, lr}
 800db5e:	b085      	sub	sp, #20
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800db60:	6a84      	ldr	r4, [r0, #40]	; 0x28
  __HAL_SPI_DISABLE(hspi);
 800db62:	6822      	ldr	r2, [r4, #0]
 800db64:	6813      	ldr	r3, [r2, #0]
 800db66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db6a:	6013      	str	r3, [r2, #0]
  hspi->hdmarx->XferAbortCallback = NULL;
 800db6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db6e:	2500      	movs	r5, #0
 800db70:	639d      	str	r5, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800db72:	6822      	ldr	r2, [r4, #0]
 800db74:	6853      	ldr	r3, [r2, #4]
 800db76:	f023 0301 	bic.w	r3, r3, #1
 800db7a:	6053      	str	r3, [r2, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800db7c:	f7f6 fe86 	bl	800488c <HAL_GetTick>
 800db80:	9000      	str	r0, [sp, #0]
 800db82:	2364      	movs	r3, #100	; 0x64
 800db84:	462a      	mov	r2, r5
 800db86:	2180      	movs	r1, #128	; 0x80
 800db88:	4620      	mov	r0, r4
 800db8a:	f7fe fa61 	bl	800c050 <SPI_WaitFlagStateUntilTimeout>
 800db8e:	b108      	cbz	r0, 800db94 <SPI_DMARxAbortCallback+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800db90:	2340      	movs	r3, #64	; 0x40
 800db92:	6623      	str	r3, [r4, #96]	; 0x60
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800db94:	f7f6 fe7a 	bl	800488c <HAL_GetTick>
 800db98:	9000      	str	r0, [sp, #0]
 800db9a:	2364      	movs	r3, #100	; 0x64
 800db9c:	2200      	movs	r2, #0
 800db9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800dba2:	4620      	mov	r0, r4
 800dba4:	f7fe fa9c 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800dba8:	b108      	cbz	r0, 800dbae <SPI_DMARxAbortCallback+0x52>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800dbaa:	2340      	movs	r3, #64	; 0x40
 800dbac:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->hdmatx != NULL)
 800dbae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dbb0:	b10b      	cbz	r3, 800dbb6 <SPI_DMARxAbortCallback+0x5a>
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800dbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb4:	b9d3      	cbnz	r3, 800dbec <SPI_DMARxAbortCallback+0x90>
  hspi->RxXferCount = 0U;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800dbbc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800dbbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dbc0:	2b40      	cmp	r3, #64	; 0x40
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dbc2:	bf1c      	itt	ne
 800dbc4:	2300      	movne	r3, #0
 800dbc6:	6623      	strne	r3, [r4, #96]	; 0x60
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dbc8:	2200      	movs	r2, #0
 800dbca:	9202      	str	r2, [sp, #8]
 800dbcc:	6823      	ldr	r3, [r4, #0]
 800dbce:	68d9      	ldr	r1, [r3, #12]
 800dbd0:	9102      	str	r1, [sp, #8]
 800dbd2:	6899      	ldr	r1, [r3, #8]
 800dbd4:	9102      	str	r1, [sp, #8]
 800dbd6:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dbd8:	9203      	str	r2, [sp, #12]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	9303      	str	r3, [sp, #12]
 800dbde:	9b03      	ldr	r3, [sp, #12]
  hspi->State  = HAL_SPI_STATE_READY;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_SPI_AbortCpltCallback(hspi);
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f7ff ff07 	bl	800d9fa <HAL_SPI_AbortCpltCallback>
}
 800dbec:	b005      	add	sp, #20
 800dbee:	bd30      	pop	{r4, r5, pc}

0800dbf0 <SPI_DMATxAbortCallback>:
{
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	b084      	sub	sp, #16
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dbf4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hspi->hdmatx->XferAbortCallback = NULL;
 800dbf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dbfc:	6822      	ldr	r2, [r4, #0]
 800dbfe:	6853      	ldr	r3, [r2, #4]
 800dc00:	f023 0302 	bic.w	r3, r3, #2
 800dc04:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800dc06:	f7f6 fe41 	bl	800488c <HAL_GetTick>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	2164      	movs	r1, #100	; 0x64
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f7fe fab2 	bl	800c178 <SPI_EndRxTxTransaction>
 800dc14:	b108      	cbz	r0, 800dc1a <SPI_DMATxAbortCallback+0x2a>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800dc16:	2340      	movs	r3, #64	; 0x40
 800dc18:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_SPI_DISABLE(hspi);
 800dc1a:	6822      	ldr	r2, [r4, #0]
 800dc1c:	6813      	ldr	r3, [r2, #0]
 800dc1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc22:	6013      	str	r3, [r2, #0]
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800dc24:	f7f6 fe32 	bl	800488c <HAL_GetTick>
 800dc28:	9000      	str	r0, [sp, #0]
 800dc2a:	2364      	movs	r3, #100	; 0x64
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800dc32:	4620      	mov	r0, r4
 800dc34:	f7fe fa54 	bl	800c0e0 <SPI_WaitFifoStateUntilTimeout>
 800dc38:	b108      	cbz	r0, 800dc3e <SPI_DMATxAbortCallback+0x4e>
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800dc3a:	2340      	movs	r3, #64	; 0x40
 800dc3c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->hdmarx != NULL)
 800dc3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc40:	b10b      	cbz	r3, 800dc46 <SPI_DMATxAbortCallback+0x56>
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800dc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc44:	b9d3      	cbnz	r3, 800dc7c <SPI_DMATxAbortCallback+0x8c>
  hspi->RxXferCount = 0U;
 800dc46:	2300      	movs	r3, #0
 800dc48:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800dc4c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800dc4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dc50:	2b40      	cmp	r3, #64	; 0x40
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc52:	bf1c      	itt	ne
 800dc54:	2300      	movne	r3, #0
 800dc56:	6623      	strne	r3, [r4, #96]	; 0x60
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dc58:	2200      	movs	r2, #0
 800dc5a:	9202      	str	r2, [sp, #8]
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	68d9      	ldr	r1, [r3, #12]
 800dc60:	9102      	str	r1, [sp, #8]
 800dc62:	6899      	ldr	r1, [r3, #8]
 800dc64:	9102      	str	r1, [sp, #8]
 800dc66:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dc68:	9203      	str	r2, [sp, #12]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	9303      	str	r3, [sp, #12]
 800dc6e:	9b03      	ldr	r3, [sp, #12]
  hspi->State  = HAL_SPI_STATE_READY;
 800dc70:	2301      	movs	r3, #1
 800dc72:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_SPI_AbortCpltCallback(hspi);
 800dc76:	4620      	mov	r0, r4
 800dc78:	f7ff febf 	bl	800d9fa <HAL_SPI_AbortCpltCallback>
}
 800dc7c:	b004      	add	sp, #16
 800dc7e:	bd10      	pop	{r4, pc}

0800dc80 <HAL_SPI_GetState>:
  return hspi->State;
 800dc80:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 800dc84:	4770      	bx	lr

0800dc86 <HAL_SPI_GetError>:
  return hspi->ErrorCode;
 800dc86:	6e00      	ldr	r0, [r0, #96]	; 0x60
}
 800dc88:	4770      	bx	lr

0800dc8a <HAL_SPIEx_FlushRxFifo>:
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800dc8a:	6802      	ldr	r2, [r0, #0]
 800dc8c:	2304      	movs	r3, #4
 800dc8e:	6891      	ldr	r1, [r2, #8]
 800dc90:	f411 6fc0 	tst.w	r1, #1536	; 0x600
 800dc94:	d011      	beq.n	800dcba <HAL_SPIEx_FlushRxFifo+0x30>
{
 800dc96:	b082      	sub	sp, #8
 800dc98:	e003      	b.n	800dca2 <HAL_SPIEx_FlushRxFifo+0x18>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800dc9a:	6891      	ldr	r1, [r2, #8]
 800dc9c:	f411 6fc0 	tst.w	r1, #1536	; 0x600
 800dca0:	d009      	beq.n	800dcb6 <HAL_SPIEx_FlushRxFifo+0x2c>
  {
    count++;
    tmpreg = hspi->Instance->DR;
 800dca2:	68d1      	ldr	r1, [r2, #12]
 800dca4:	9101      	str	r1, [sp, #4]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800dca6:	9901      	ldr	r1, [sp, #4]
 800dca8:	3b01      	subs	r3, #1
    if (count == SPI_FIFO_SIZE)
 800dcaa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800dcae:	d1f4      	bne.n	800dc9a <HAL_SPIEx_FlushRxFifo+0x10>
    {
      return HAL_TIMEOUT;
 800dcb0:	2003      	movs	r0, #3
    }
  }
  return HAL_OK;
}
 800dcb2:	b002      	add	sp, #8
 800dcb4:	4770      	bx	lr
  return HAL_OK;
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	e7fb      	b.n	800dcb2 <HAL_SPIEx_FlushRxFifo+0x28>
 800dcba:	2000      	movs	r0, #0
}
 800dcbc:	4770      	bx	lr
	...

0800dcc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dcc0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcc2:	6a03      	ldr	r3, [r0, #32]
 800dcc4:	f023 0301 	bic.w	r3, r3, #1
 800dcc8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dccc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dcce:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dcd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dcd4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcd8:	680d      	ldr	r5, [r1, #0]
 800dcda:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dcdc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dce0:	688d      	ldr	r5, [r1, #8]
 800dce2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dce4:	4d20      	ldr	r5, [pc, #128]	; (800dd68 <TIM_OC1_SetConfig+0xa8>)
 800dce6:	42a8      	cmp	r0, r5
 800dce8:	d02a      	beq.n	800dd40 <TIM_OC1_SetConfig+0x80>
 800dcea:	4f20      	ldr	r7, [pc, #128]	; (800dd6c <TIM_OC1_SetConfig+0xac>)
 800dcec:	42b8      	cmp	r0, r7
 800dcee:	d019      	beq.n	800dd24 <TIM_OC1_SetConfig+0x64>
 800dcf0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800dcf4:	42a8      	cmp	r0, r5
 800dcf6:	d01c      	beq.n	800dd32 <TIM_OC1_SetConfig+0x72>
 800dcf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800dcfc:	42a8      	cmp	r0, r5
 800dcfe:	d00a      	beq.n	800dd16 <TIM_OC1_SetConfig+0x56>
 800dd00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800dd04:	42a8      	cmp	r0, r5
 800dd06:	d127      	bne.n	800dd58 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd08:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dd0c:	68cd      	ldr	r5, [r1, #12]
 800dd0e:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd10:	f023 0304 	bic.w	r3, r3, #4
 800dd14:	e01a      	b.n	800dd4c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd16:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800dd1a:	68cd      	ldr	r5, [r1, #12]
 800dd1c:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd1e:	f023 0304 	bic.w	r3, r3, #4
 800dd22:	e013      	b.n	800dd4c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd24:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800dd28:	68cd      	ldr	r5, [r1, #12]
 800dd2a:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd2c:	f023 0304 	bic.w	r3, r3, #4
 800dd30:	e00c      	b.n	800dd4c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd32:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800dd36:	68cd      	ldr	r5, [r1, #12]
 800dd38:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd3a:	f023 0304 	bic.w	r3, r3, #4
 800dd3e:	e005      	b.n	800dd4c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd40:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800dd44:	68cd      	ldr	r5, [r1, #12]
 800dd46:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd48:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dd4c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dd50:	694c      	ldr	r4, [r1, #20]
 800dd52:	698f      	ldr	r7, [r1, #24]
 800dd54:	433c      	orrs	r4, r7
 800dd56:	4326      	orrs	r6, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd58:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd5a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dd5c:	684a      	ldr	r2, [r1, #4]
 800dd5e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd60:	6203      	str	r3, [r0, #32]
}
 800dd62:	bcf0      	pop	{r4, r5, r6, r7}
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	40012c00 	.word	0x40012c00
 800dd6c:	40013400 	.word	0x40013400

0800dd70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd70:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd72:	6a03      	ldr	r3, [r0, #32]
 800dd74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd78:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd7a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd7c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd7e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dd80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dd84:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd88:	680d      	ldr	r5, [r1, #0]
 800dd8a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dd8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dd90:	688d      	ldr	r5, [r1, #8]
 800dd92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dd96:	4d18      	ldr	r5, [pc, #96]	; (800ddf8 <TIM_OC3_SetConfig+0x88>)
 800dd98:	42a8      	cmp	r0, r5
 800dd9a:	d017      	beq.n	800ddcc <TIM_OC3_SetConfig+0x5c>
 800dd9c:	4f17      	ldr	r7, [pc, #92]	; (800ddfc <TIM_OC3_SetConfig+0x8c>)
 800dd9e:	42b8      	cmp	r0, r7
 800dda0:	d00c      	beq.n	800ddbc <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dda2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800dda6:	42a8      	cmp	r0, r5
 800dda8:	d017      	beq.n	800ddda <TIM_OC3_SetConfig+0x6a>
 800ddaa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ddae:	42a8      	cmp	r0, r5
 800ddb0:	d013      	beq.n	800ddda <TIM_OC3_SetConfig+0x6a>
 800ddb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ddb6:	42a8      	cmp	r0, r5
 800ddb8:	d116      	bne.n	800dde8 <TIM_OC3_SetConfig+0x78>
 800ddba:	e00e      	b.n	800ddda <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800ddbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ddc0:	68cd      	ldr	r5, [r1, #12]
 800ddc2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800ddc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ddca:	e006      	b.n	800ddda <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800ddcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ddd0:	68cd      	ldr	r5, [r1, #12]
 800ddd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800ddd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ddda:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ddde:	694c      	ldr	r4, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dde0:	698f      	ldr	r7, [r1, #24]
 800dde2:	433c      	orrs	r4, r7
 800dde4:	ea46 1604 	orr.w	r6, r6, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dde8:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ddea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ddec:	684a      	ldr	r2, [r1, #4]
 800ddee:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddf0:	6203      	str	r3, [r0, #32]
}
 800ddf2:	bcf0      	pop	{r4, r5, r6, r7}
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	40012c00 	.word	0x40012c00
 800ddfc:	40013400 	.word	0x40013400

0800de00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de02:	6a03      	ldr	r3, [r0, #32]
 800de04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de0e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800de10:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800de14:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de18:	680d      	ldr	r5, [r1, #0]
 800de1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800de1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800de22:	688d      	ldr	r5, [r1, #8]
 800de24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de28:	4d0f      	ldr	r5, [pc, #60]	; (800de68 <TIM_OC4_SetConfig+0x68>)
 800de2a:	42a8      	cmp	r0, r5
 800de2c:	d00f      	beq.n	800de4e <TIM_OC4_SetConfig+0x4e>
 800de2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800de32:	42a8      	cmp	r0, r5
 800de34:	d00b      	beq.n	800de4e <TIM_OC4_SetConfig+0x4e>
 800de36:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800de3a:	42a8      	cmp	r0, r5
 800de3c:	d007      	beq.n	800de4e <TIM_OC4_SetConfig+0x4e>
 800de3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800de42:	42a8      	cmp	r0, r5
 800de44:	d003      	beq.n	800de4e <TIM_OC4_SetConfig+0x4e>
 800de46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800de4a:	42a8      	cmp	r0, r5
 800de4c:	d104      	bne.n	800de58 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800de4e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800de52:	694d      	ldr	r5, [r1, #20]
 800de54:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de58:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de5a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800de5c:	684a      	ldr	r2, [r1, #4]
 800de5e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de60:	6203      	str	r3, [r0, #32]
}
 800de62:	bc30      	pop	{r4, r5}
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	40012c00 	.word	0x40012c00

0800de6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800de6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800de6e:	6a03      	ldr	r3, [r0, #32]
 800de70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de78:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de7a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800de7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800de80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de84:	680d      	ldr	r5, [r1, #0]
 800de86:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800de88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800de8c:	688d      	ldr	r5, [r1, #8]
 800de8e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de92:	4d0f      	ldr	r5, [pc, #60]	; (800ded0 <TIM_OC5_SetConfig+0x64>)
 800de94:	42a8      	cmp	r0, r5
 800de96:	d00f      	beq.n	800deb8 <TIM_OC5_SetConfig+0x4c>
 800de98:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800de9c:	42a8      	cmp	r0, r5
 800de9e:	d00b      	beq.n	800deb8 <TIM_OC5_SetConfig+0x4c>
 800dea0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800dea4:	42a8      	cmp	r0, r5
 800dea6:	d007      	beq.n	800deb8 <TIM_OC5_SetConfig+0x4c>
 800dea8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800deac:	42a8      	cmp	r0, r5
 800deae:	d003      	beq.n	800deb8 <TIM_OC5_SetConfig+0x4c>
 800deb0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800deb4:	42a8      	cmp	r0, r5
 800deb6:	d104      	bne.n	800dec2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800deb8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800debc:	694d      	ldr	r5, [r1, #20]
 800debe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dec2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dec4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dec6:	684a      	ldr	r2, [r1, #4]
 800dec8:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deca:	6203      	str	r3, [r0, #32]
}
 800decc:	bc30      	pop	{r4, r5}
 800dece:	4770      	bx	lr
 800ded0:	40012c00 	.word	0x40012c00

0800ded4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ded4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ded6:	6a03      	ldr	r3, [r0, #32]
 800ded8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dedc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dede:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dee0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dee2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dee4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800dee8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800deec:	680d      	ldr	r5, [r1, #0]
 800deee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800def2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800def6:	688d      	ldr	r5, [r1, #8]
 800def8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800defc:	4d0f      	ldr	r5, [pc, #60]	; (800df3c <TIM_OC6_SetConfig+0x68>)
 800defe:	42a8      	cmp	r0, r5
 800df00:	d00f      	beq.n	800df22 <TIM_OC6_SetConfig+0x4e>
 800df02:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800df06:	42a8      	cmp	r0, r5
 800df08:	d00b      	beq.n	800df22 <TIM_OC6_SetConfig+0x4e>
 800df0a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800df0e:	42a8      	cmp	r0, r5
 800df10:	d007      	beq.n	800df22 <TIM_OC6_SetConfig+0x4e>
 800df12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800df16:	42a8      	cmp	r0, r5
 800df18:	d003      	beq.n	800df22 <TIM_OC6_SetConfig+0x4e>
 800df1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800df1e:	42a8      	cmp	r0, r5
 800df20:	d104      	bne.n	800df2c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800df22:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800df26:	694d      	ldr	r5, [r1, #20]
 800df28:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df2c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df2e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df30:	684a      	ldr	r2, [r1, #4]
 800df32:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df34:	6203      	str	r3, [r0, #32]
}
 800df36:	bc30      	pop	{r4, r5}
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	40012c00 	.word	0x40012c00
}
 800df40:	4770      	bx	lr
}
 800df42:	4770      	bx	lr

0800df44 <HAL_TIM_Base_DeInit>:
{
 800df44:	b510      	push	{r4, lr}
 800df46:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800df48:	2302      	movs	r3, #2
 800df4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800df4e:	6803      	ldr	r3, [r0, #0]
 800df50:	6a19      	ldr	r1, [r3, #32]
 800df52:	f241 1211 	movw	r2, #4369	; 0x1111
 800df56:	4211      	tst	r1, r2
 800df58:	d108      	bne.n	800df6c <HAL_TIM_Base_DeInit+0x28>
 800df5a:	6a19      	ldr	r1, [r3, #32]
 800df5c:	f240 4244 	movw	r2, #1092	; 0x444
 800df60:	4211      	tst	r1, r2
 800df62:	d103      	bne.n	800df6c <HAL_TIM_Base_DeInit+0x28>
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	f022 0201 	bic.w	r2, r2, #1
 800df6a:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 800df6c:	4620      	mov	r0, r4
 800df6e:	f7f6 fa35 	bl	80043dc <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800df72:	2000      	movs	r0, #0
 800df74:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800df78:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800df7c:	bd10      	pop	{r4, pc}
	...

0800df80 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800df80:	2302      	movs	r3, #2
 800df82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df86:	6802      	ldr	r2, [r0, #0]
 800df88:	6891      	ldr	r1, [r2, #8]
 800df8a:	4b08      	ldr	r3, [pc, #32]	; (800dfac <HAL_TIM_Base_Start+0x2c>)
 800df8c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df8e:	2b06      	cmp	r3, #6
 800df90:	d006      	beq.n	800dfa0 <HAL_TIM_Base_Start+0x20>
 800df92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df96:	d003      	beq.n	800dfa0 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 800df98:	6813      	ldr	r3, [r2, #0]
 800df9a:	f043 0301 	orr.w	r3, r3, #1
 800df9e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	00010007 	.word	0x00010007

0800dfb0 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800dfb6:	6803      	ldr	r3, [r0, #0]
 800dfb8:	6a19      	ldr	r1, [r3, #32]
 800dfba:	f241 1211 	movw	r2, #4369	; 0x1111
 800dfbe:	4211      	tst	r1, r2
 800dfc0:	d108      	bne.n	800dfd4 <HAL_TIM_Base_Stop+0x24>
 800dfc2:	6a19      	ldr	r1, [r3, #32]
 800dfc4:	f240 4244 	movw	r2, #1092	; 0x444
 800dfc8:	4211      	tst	r1, r2
 800dfca:	d103      	bne.n	800dfd4 <HAL_TIM_Base_Stop+0x24>
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	f022 0201 	bic.w	r2, r2, #1
 800dfd2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800dfda:	2000      	movs	r0, #0
 800dfdc:	4770      	bx	lr
	...

0800dfe0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dfe0:	6802      	ldr	r2, [r0, #0]
 800dfe2:	68d3      	ldr	r3, [r2, #12]
 800dfe4:	f043 0301 	orr.w	r3, r3, #1
 800dfe8:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfea:	6802      	ldr	r2, [r0, #0]
 800dfec:	6891      	ldr	r1, [r2, #8]
 800dfee:	4b06      	ldr	r3, [pc, #24]	; (800e008 <HAL_TIM_Base_Start_IT+0x28>)
 800dff0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dff2:	2b06      	cmp	r3, #6
 800dff4:	d006      	beq.n	800e004 <HAL_TIM_Base_Start_IT+0x24>
 800dff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dffa:	d003      	beq.n	800e004 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 800dffc:	6813      	ldr	r3, [r2, #0]
 800dffe:	f043 0301 	orr.w	r3, r3, #1
 800e002:	6013      	str	r3, [r2, #0]
}
 800e004:	2000      	movs	r0, #0
 800e006:	4770      	bx	lr
 800e008:	00010007 	.word	0x00010007

0800e00c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e00c:	6802      	ldr	r2, [r0, #0]
 800e00e:	68d3      	ldr	r3, [r2, #12]
 800e010:	f023 0301 	bic.w	r3, r3, #1
 800e014:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800e016:	6803      	ldr	r3, [r0, #0]
 800e018:	6a19      	ldr	r1, [r3, #32]
 800e01a:	f241 1211 	movw	r2, #4369	; 0x1111
 800e01e:	4211      	tst	r1, r2
 800e020:	d108      	bne.n	800e034 <HAL_TIM_Base_Stop_IT+0x28>
 800e022:	6a19      	ldr	r1, [r3, #32]
 800e024:	f240 4244 	movw	r2, #1092	; 0x444
 800e028:	4211      	tst	r1, r2
 800e02a:	d103      	bne.n	800e034 <HAL_TIM_Base_Stop_IT+0x28>
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	f022 0201 	bic.w	r2, r2, #1
 800e032:	601a      	str	r2, [r3, #0]
}
 800e034:	2000      	movs	r0, #0
 800e036:	4770      	bx	lr

0800e038 <HAL_TIM_Base_Start_DMA>:
{
 800e038:	b538      	push	{r3, r4, r5, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800e03a:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800e03e:	b2ed      	uxtb	r5, r5
 800e040:	2d02      	cmp	r5, #2
 800e042:	d031      	beq.n	800e0a8 <HAL_TIM_Base_Start_DMA+0x70>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800e044:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d103      	bne.n	800e056 <HAL_TIM_Base_Start_DMA+0x1e>
    if ((pData == NULL) && (Length > 0U))
 800e04e:	b339      	cbz	r1, 800e0a0 <HAL_TIM_Base_Start_DMA+0x68>
      htim->State = HAL_TIM_STATE_BUSY;
 800e050:	2302      	movs	r3, #2
 800e052:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800e056:	4613      	mov	r3, r2
 800e058:	4604      	mov	r4, r0
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800e05a:	6a02      	ldr	r2, [r0, #32]
 800e05c:	4815      	ldr	r0, [pc, #84]	; (800e0b4 <HAL_TIM_Base_Start_DMA+0x7c>)
 800e05e:	62d0      	str	r0, [r2, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800e060:	6a22      	ldr	r2, [r4, #32]
 800e062:	4815      	ldr	r0, [pc, #84]	; (800e0b8 <HAL_TIM_Base_Start_DMA+0x80>)
 800e064:	6310      	str	r0, [r2, #48]	; 0x30
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800e066:	6a22      	ldr	r2, [r4, #32]
 800e068:	4814      	ldr	r0, [pc, #80]	; (800e0bc <HAL_TIM_Base_Start_DMA+0x84>)
 800e06a:	6350      	str	r0, [r2, #52]	; 0x34
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length) != HAL_OK)
 800e06c:	6822      	ldr	r2, [r4, #0]
 800e06e:	322c      	adds	r2, #44	; 0x2c
 800e070:	6a20      	ldr	r0, [r4, #32]
 800e072:	f7f6 ff7e 	bl	8004f72 <HAL_DMA_Start_IT>
 800e076:	4603      	mov	r3, r0
 800e078:	b9c0      	cbnz	r0, 800e0ac <HAL_TIM_Base_Start_DMA+0x74>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800e07a:	6821      	ldr	r1, [r4, #0]
 800e07c:	68ca      	ldr	r2, [r1, #12]
 800e07e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e082:	60ca      	str	r2, [r1, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e084:	6821      	ldr	r1, [r4, #0]
 800e086:	6888      	ldr	r0, [r1, #8]
 800e088:	4a0d      	ldr	r2, [pc, #52]	; (800e0c0 <HAL_TIM_Base_Start_DMA+0x88>)
 800e08a:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e08c:	2a06      	cmp	r2, #6
 800e08e:	d00e      	beq.n	800e0ae <HAL_TIM_Base_Start_DMA+0x76>
 800e090:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e094:	d00b      	beq.n	800e0ae <HAL_TIM_Base_Start_DMA+0x76>
    __HAL_TIM_ENABLE(htim);
 800e096:	680a      	ldr	r2, [r1, #0]
 800e098:	f042 0201 	orr.w	r2, r2, #1
 800e09c:	600a      	str	r2, [r1, #0]
 800e09e:	e006      	b.n	800e0ae <HAL_TIM_Base_Start_DMA+0x76>
    if ((pData == NULL) && (Length > 0U))
 800e0a0:	2a00      	cmp	r2, #0
 800e0a2:	d0d5      	beq.n	800e050 <HAL_TIM_Base_Start_DMA+0x18>
      return HAL_ERROR;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e002      	b.n	800e0ae <HAL_TIM_Base_Start_DMA+0x76>
    return HAL_BUSY;
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	e000      	b.n	800e0ae <HAL_TIM_Base_Start_DMA+0x76>
    return HAL_ERROR;
 800e0ac:	2301      	movs	r3, #1
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	bd38      	pop	{r3, r4, r5, pc}
 800e0b2:	bf00      	nop
 800e0b4:	0800e73b 	.word	0x0800e73b
 800e0b8:	0800e74d 	.word	0x0800e74d
 800e0bc:	0800ea37 	.word	0x0800ea37
 800e0c0:	00010007 	.word	0x00010007

0800e0c4 <HAL_TIM_Base_Stop_DMA>:
{
 800e0c4:	b510      	push	{r4, lr}
 800e0c6:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 800e0c8:	6802      	ldr	r2, [r0, #0]
 800e0ca:	68d3      	ldr	r3, [r2, #12]
 800e0cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0d0:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800e0d2:	6a00      	ldr	r0, [r0, #32]
 800e0d4:	f7f6 ffbf 	bl	8005056 <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	6a19      	ldr	r1, [r3, #32]
 800e0dc:	f241 1211 	movw	r2, #4369	; 0x1111
 800e0e0:	4211      	tst	r1, r2
 800e0e2:	d108      	bne.n	800e0f6 <HAL_TIM_Base_Stop_DMA+0x32>
 800e0e4:	6a19      	ldr	r1, [r3, #32]
 800e0e6:	f240 4244 	movw	r2, #1092	; 0x444
 800e0ea:	4211      	tst	r1, r2
 800e0ec:	d103      	bne.n	800e0f6 <HAL_TIM_Base_Stop_DMA+0x32>
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	f022 0201 	bic.w	r2, r2, #1
 800e0f4:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	bd10      	pop	{r4, pc}

0800e100 <HAL_TIM_OC_MspInit>:
}
 800e100:	4770      	bx	lr

0800e102 <HAL_TIM_OC_MspDeInit>:
}
 800e102:	4770      	bx	lr

0800e104 <HAL_TIM_OC_DeInit>:
{
 800e104:	b510      	push	{r4, lr}
 800e106:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800e108:	2302      	movs	r3, #2
 800e10a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800e10e:	6803      	ldr	r3, [r0, #0]
 800e110:	6a19      	ldr	r1, [r3, #32]
 800e112:	f241 1211 	movw	r2, #4369	; 0x1111
 800e116:	4211      	tst	r1, r2
 800e118:	d108      	bne.n	800e12c <HAL_TIM_OC_DeInit+0x28>
 800e11a:	6a19      	ldr	r1, [r3, #32]
 800e11c:	f240 4244 	movw	r2, #1092	; 0x444
 800e120:	4211      	tst	r1, r2
 800e122:	d103      	bne.n	800e12c <HAL_TIM_OC_DeInit+0x28>
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	f022 0201 	bic.w	r2, r2, #1
 800e12a:	601a      	str	r2, [r3, #0]
  HAL_TIM_OC_MspDeInit(htim);
 800e12c:	4620      	mov	r0, r4
 800e12e:	f7ff ffe8 	bl	800e102 <HAL_TIM_OC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800e132:	2000      	movs	r0, #0
 800e134:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e138:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800e13c:	bd10      	pop	{r4, pc}

0800e13e <HAL_TIM_PWM_MspInit>:
}
 800e13e:	4770      	bx	lr

0800e140 <HAL_TIM_PWM_MspDeInit>:
}
 800e140:	4770      	bx	lr

0800e142 <HAL_TIM_PWM_DeInit>:
{
 800e142:	b510      	push	{r4, lr}
 800e144:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800e146:	2302      	movs	r3, #2
 800e148:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800e14c:	6803      	ldr	r3, [r0, #0]
 800e14e:	6a19      	ldr	r1, [r3, #32]
 800e150:	f241 1211 	movw	r2, #4369	; 0x1111
 800e154:	4211      	tst	r1, r2
 800e156:	d108      	bne.n	800e16a <HAL_TIM_PWM_DeInit+0x28>
 800e158:	6a19      	ldr	r1, [r3, #32]
 800e15a:	f240 4244 	movw	r2, #1092	; 0x444
 800e15e:	4211      	tst	r1, r2
 800e160:	d103      	bne.n	800e16a <HAL_TIM_PWM_DeInit+0x28>
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	f022 0201 	bic.w	r2, r2, #1
 800e168:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 800e16a:	4620      	mov	r0, r4
 800e16c:	f7ff ffe8 	bl	800e140 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800e170:	2000      	movs	r0, #0
 800e172:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e176:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800e17a:	bd10      	pop	{r4, pc}

0800e17c <HAL_TIM_IC_MspInit>:
}
 800e17c:	4770      	bx	lr

0800e17e <HAL_TIM_IC_MspDeInit>:
}
 800e17e:	4770      	bx	lr

0800e180 <HAL_TIM_IC_DeInit>:
{
 800e180:	b510      	push	{r4, lr}
 800e182:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800e184:	2302      	movs	r3, #2
 800e186:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800e18a:	6803      	ldr	r3, [r0, #0]
 800e18c:	6a19      	ldr	r1, [r3, #32]
 800e18e:	f241 1211 	movw	r2, #4369	; 0x1111
 800e192:	4211      	tst	r1, r2
 800e194:	d108      	bne.n	800e1a8 <HAL_TIM_IC_DeInit+0x28>
 800e196:	6a19      	ldr	r1, [r3, #32]
 800e198:	f240 4244 	movw	r2, #1092	; 0x444
 800e19c:	4211      	tst	r1, r2
 800e19e:	d103      	bne.n	800e1a8 <HAL_TIM_IC_DeInit+0x28>
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	f022 0201 	bic.w	r2, r2, #1
 800e1a6:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_MspDeInit(htim);
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f7ff ffe8 	bl	800e17e <HAL_TIM_IC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e1b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800e1b8:	bd10      	pop	{r4, pc}

0800e1ba <HAL_TIM_OnePulse_MspInit>:
}
 800e1ba:	4770      	bx	lr

0800e1bc <HAL_TIM_OnePulse_MspDeInit>:
}
 800e1bc:	4770      	bx	lr

0800e1be <HAL_TIM_OnePulse_DeInit>:
{
 800e1be:	b510      	push	{r4, lr}
 800e1c0:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800e1c8:	6803      	ldr	r3, [r0, #0]
 800e1ca:	6a19      	ldr	r1, [r3, #32]
 800e1cc:	f241 1211 	movw	r2, #4369	; 0x1111
 800e1d0:	4211      	tst	r1, r2
 800e1d2:	d108      	bne.n	800e1e6 <HAL_TIM_OnePulse_DeInit+0x28>
 800e1d4:	6a19      	ldr	r1, [r3, #32]
 800e1d6:	f240 4244 	movw	r2, #1092	; 0x444
 800e1da:	4211      	tst	r1, r2
 800e1dc:	d103      	bne.n	800e1e6 <HAL_TIM_OnePulse_DeInit+0x28>
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	f022 0201 	bic.w	r2, r2, #1
 800e1e4:	601a      	str	r2, [r3, #0]
  HAL_TIM_OnePulse_MspDeInit(htim);
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f7ff ffe8 	bl	800e1bc <HAL_TIM_OnePulse_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e1f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800e1f6:	bd10      	pop	{r4, pc}

0800e1f8 <HAL_TIM_Encoder_MspInit>:
}
 800e1f8:	4770      	bx	lr

0800e1fa <HAL_TIM_Encoder_MspDeInit>:
}
 800e1fa:	4770      	bx	lr

0800e1fc <HAL_TIM_Encoder_DeInit>:
{
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800e200:	2302      	movs	r3, #2
 800e202:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800e206:	6803      	ldr	r3, [r0, #0]
 800e208:	6a19      	ldr	r1, [r3, #32]
 800e20a:	f241 1211 	movw	r2, #4369	; 0x1111
 800e20e:	4211      	tst	r1, r2
 800e210:	d108      	bne.n	800e224 <HAL_TIM_Encoder_DeInit+0x28>
 800e212:	6a19      	ldr	r1, [r3, #32]
 800e214:	f240 4244 	movw	r2, #1092	; 0x444
 800e218:	4211      	tst	r1, r2
 800e21a:	d103      	bne.n	800e224 <HAL_TIM_Encoder_DeInit+0x28>
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	f022 0201 	bic.w	r2, r2, #1
 800e222:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_MspDeInit(htim);
 800e224:	4620      	mov	r0, r4
 800e226:	f7ff ffe8 	bl	800e1fa <HAL_TIM_Encoder_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800e22a:	2000      	movs	r0, #0
 800e22c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e230:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800e234:	bd10      	pop	{r4, pc}
	...

0800e238 <HAL_TIM_DMABurst_WriteStart>:
{
 800e238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23c:	9e06      	ldr	r6, [sp, #24]
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800e23e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e242:	b2e4      	uxtb	r4, r4
 800e244:	2c02      	cmp	r4, #2
 800e246:	f000 80cd 	beq.w	800e3e4 <HAL_TIM_DMABurst_WriteStart+0x1ac>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800e24a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e24e:	b2e4      	uxtb	r4, r4
 800e250:	2c01      	cmp	r4, #1
 800e252:	d01e      	beq.n	800e292 <HAL_TIM_DMABurst_WriteStart+0x5a>
 800e254:	461f      	mov	r7, r3
 800e256:	4615      	mov	r5, r2
 800e258:	4688      	mov	r8, r1
 800e25a:	4604      	mov	r4, r0
  switch (BurstRequestSrc)
 800e25c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800e260:	d07e      	beq.n	800e360 <HAL_TIM_DMABurst_WriteStart+0x128>
 800e262:	d81f      	bhi.n	800e2a4 <HAL_TIM_DMABurst_WriteStart+0x6c>
 800e264:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800e268:	d050      	beq.n	800e30c <HAL_TIM_DMABurst_WriteStart+0xd4>
 800e26a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e26e:	d062      	beq.n	800e336 <HAL_TIM_DMABurst_WriteStart+0xfe>
 800e270:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e274:	d035      	beq.n	800e2e2 <HAL_TIM_DMABurst_WriteStart+0xaa>
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800e276:	6823      	ldr	r3, [r4, #0]
 800e278:	ea46 0608 	orr.w	r6, r6, r8
 800e27c:	649e      	str	r6, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800e27e:	6823      	ldr	r3, [r4, #0]
 800e280:	68da      	ldr	r2, [r3, #12]
 800e282:	4315      	orrs	r5, r2
 800e284:	60dd      	str	r5, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800e286:	2301      	movs	r3, #1
 800e288:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800e28c:	2000      	movs	r0, #0
}
 800e28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800e292:	b11b      	cbz	r3, 800e29c <HAL_TIM_DMABurst_WriteStart+0x64>
      htim->State = HAL_TIM_STATE_BUSY;
 800e294:	2402      	movs	r4, #2
 800e296:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800e29a:	e7db      	b.n	800e254 <HAL_TIM_DMABurst_WriteStart+0x1c>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800e29c:	2e00      	cmp	r6, #0
 800e29e:	d0f9      	beq.n	800e294 <HAL_TIM_DMABurst_WriteStart+0x5c>
      return HAL_ERROR;
 800e2a0:	2001      	movs	r0, #1
 800e2a2:	e7f4      	b.n	800e28e <HAL_TIM_DMABurst_WriteStart+0x56>
  switch (BurstRequestSrc)
 800e2a4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e2a8:	d070      	beq.n	800e38c <HAL_TIM_DMABurst_WriteStart+0x154>
 800e2aa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800e2ae:	f000 8083 	beq.w	800e3b8 <HAL_TIM_DMABurst_WriteStart+0x180>
 800e2b2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800e2b6:	d1de      	bne.n	800e276 <HAL_TIM_DMABurst_WriteStart+0x3e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e2b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e2ba:	4a4b      	ldr	r2, [pc, #300]	; (800e3e8 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800e2bc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e2be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e2c0:	4a4a      	ldr	r2, [pc, #296]	; (800e3ec <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800e2c2:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e2c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e2c6:	4a4a      	ldr	r2, [pc, #296]	; (800e3f0 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800e2c8:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e2ca:	0a33      	lsrs	r3, r6, #8
 800e2cc:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	324c      	adds	r2, #76	; 0x4c
 800e2d2:	4639      	mov	r1, r7
 800e2d4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e2d6:	f7f6 fe4c 	bl	8004f72 <HAL_DMA_Start_IT>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d0cb      	beq.n	800e276 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800e2de:	2001      	movs	r0, #1
 800e2e0:	e7d5      	b.n	800e28e <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800e2e2:	6a03      	ldr	r3, [r0, #32]
 800e2e4:	4a43      	ldr	r2, [pc, #268]	; (800e3f4 <HAL_TIM_DMABurst_WriteStart+0x1bc>)
 800e2e6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800e2e8:	6a03      	ldr	r3, [r0, #32]
 800e2ea:	4a43      	ldr	r2, [pc, #268]	; (800e3f8 <HAL_TIM_DMABurst_WriteStart+0x1c0>)
 800e2ec:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800e2ee:	6a03      	ldr	r3, [r0, #32]
 800e2f0:	4a3f      	ldr	r2, [pc, #252]	; (800e3f0 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800e2f2:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e2f4:	0a33      	lsrs	r3, r6, #8
 800e2f6:	6802      	ldr	r2, [r0, #0]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	324c      	adds	r2, #76	; 0x4c
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	6a00      	ldr	r0, [r0, #32]
 800e300:	f7f6 fe37 	bl	8004f72 <HAL_DMA_Start_IT>
 800e304:	2800      	cmp	r0, #0
 800e306:	d0b6      	beq.n	800e276 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800e308:	2001      	movs	r0, #1
 800e30a:	e7c0      	b.n	800e28e <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e30c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e30e:	4a36      	ldr	r2, [pc, #216]	; (800e3e8 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800e310:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e312:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e314:	4a35      	ldr	r2, [pc, #212]	; (800e3ec <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800e316:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e318:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e31a:	4a35      	ldr	r2, [pc, #212]	; (800e3f0 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800e31c:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e31e:	0a33      	lsrs	r3, r6, #8
 800e320:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800e322:	3301      	adds	r3, #1
 800e324:	324c      	adds	r2, #76	; 0x4c
 800e326:	4639      	mov	r1, r7
 800e328:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e32a:	f7f6 fe22 	bl	8004f72 <HAL_DMA_Start_IT>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d0a1      	beq.n	800e276 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800e332:	2001      	movs	r0, #1
 800e334:	e7ab      	b.n	800e28e <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e336:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e338:	4a2b      	ldr	r2, [pc, #172]	; (800e3e8 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800e33a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e33c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e33e:	4a2b      	ldr	r2, [pc, #172]	; (800e3ec <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800e340:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e342:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e344:	4a2a      	ldr	r2, [pc, #168]	; (800e3f0 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800e346:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e348:	0a33      	lsrs	r3, r6, #8
 800e34a:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 800e34c:	3301      	adds	r3, #1
 800e34e:	324c      	adds	r2, #76	; 0x4c
 800e350:	4639      	mov	r1, r7
 800e352:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e354:	f7f6 fe0d 	bl	8004f72 <HAL_DMA_Start_IT>
 800e358:	2800      	cmp	r0, #0
 800e35a:	d08c      	beq.n	800e276 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800e35c:	2001      	movs	r0, #1
 800e35e:	e796      	b.n	800e28e <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e360:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e362:	4a21      	ldr	r2, [pc, #132]	; (800e3e8 <HAL_TIM_DMABurst_WriteStart+0x1b0>)
 800e364:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e366:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e368:	4a20      	ldr	r2, [pc, #128]	; (800e3ec <HAL_TIM_DMABurst_WriteStart+0x1b4>)
 800e36a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e36c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e36e:	4a20      	ldr	r2, [pc, #128]	; (800e3f0 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800e370:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e372:	0a33      	lsrs	r3, r6, #8
 800e374:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 800e376:	3301      	adds	r3, #1
 800e378:	324c      	adds	r2, #76	; 0x4c
 800e37a:	4639      	mov	r1, r7
 800e37c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e37e:	f7f6 fdf8 	bl	8004f72 <HAL_DMA_Start_IT>
 800e382:	2800      	cmp	r0, #0
 800e384:	f43f af77 	beq.w	800e276 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800e388:	2001      	movs	r0, #1
 800e38a:	e780      	b.n	800e28e <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800e38c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e38e:	4a1b      	ldr	r2, [pc, #108]	; (800e3fc <HAL_TIM_DMABurst_WriteStart+0x1c4>)
 800e390:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800e392:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e394:	4a1a      	ldr	r2, [pc, #104]	; (800e400 <HAL_TIM_DMABurst_WriteStart+0x1c8>)
 800e396:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800e398:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e39a:	4a15      	ldr	r2, [pc, #84]	; (800e3f0 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800e39c:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e39e:	0a33      	lsrs	r3, r6, #8
 800e3a0:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	324c      	adds	r2, #76	; 0x4c
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e3aa:	f7f6 fde2 	bl	8004f72 <HAL_DMA_Start_IT>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	f43f af61 	beq.w	800e276 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800e3b4:	2001      	movs	r0, #1
 800e3b6:	e76a      	b.n	800e28e <HAL_TIM_DMABurst_WriteStart+0x56>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800e3b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e3ba:	4a12      	ldr	r2, [pc, #72]	; (800e404 <HAL_TIM_DMABurst_WriteStart+0x1cc>)
 800e3bc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800e3be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e3c0:	4a11      	ldr	r2, [pc, #68]	; (800e408 <HAL_TIM_DMABurst_WriteStart+0x1d0>)
 800e3c2:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800e3c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e3c6:	4a0a      	ldr	r2, [pc, #40]	; (800e3f0 <HAL_TIM_DMABurst_WriteStart+0x1b8>)
 800e3c8:	635a      	str	r2, [r3, #52]	; 0x34
                           (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e3ca:	0a33      	lsrs	r3, r6, #8
 800e3cc:	6802      	ldr	r2, [r0, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	324c      	adds	r2, #76	; 0x4c
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e3d6:	f7f6 fdcc 	bl	8004f72 <HAL_DMA_Start_IT>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	f43f af4b 	beq.w	800e276 <HAL_TIM_DMABurst_WriteStart+0x3e>
        return HAL_ERROR;
 800e3e0:	2001      	movs	r0, #1
 800e3e2:	e754      	b.n	800e28e <HAL_TIM_DMABurst_WriteStart+0x56>
    return HAL_BUSY;
 800e3e4:	2002      	movs	r0, #2
 800e3e6:	e752      	b.n	800e28e <HAL_TIM_DMABurst_WriteStart+0x56>
 800e3e8:	0800e7ed 	.word	0x0800e7ed
 800e3ec:	0800e833 	.word	0x0800e833
 800e3f0:	0800ea37 	.word	0x0800ea37
 800e3f4:	0800e73b 	.word	0x0800e73b
 800e3f8:	0800e74d 	.word	0x0800e74d
 800e3fc:	08011675 	.word	0x08011675
 800e400:	08011687 	.word	0x08011687
 800e404:	0800ea13 	.word	0x0800ea13
 800e408:	0800ea25 	.word	0x0800ea25

0800e40c <HAL_TIM_DMABurst_WriteStop>:
{
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	4605      	mov	r5, r0
 800e410:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800e412:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800e416:	d029      	beq.n	800e46c <HAL_TIM_DMABurst_WriteStop+0x60>
 800e418:	d813      	bhi.n	800e442 <HAL_TIM_DMABurst_WriteStop+0x36>
 800e41a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e41e:	d01d      	beq.n	800e45c <HAL_TIM_DMABurst_WriteStop+0x50>
 800e420:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e424:	d01e      	beq.n	800e464 <HAL_TIM_DMABurst_WriteStop+0x58>
 800e426:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e42a:	d103      	bne.n	800e434 <HAL_TIM_DMABurst_WriteStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800e42c:	6a00      	ldr	r0, [r0, #32]
 800e42e:	f7f6 fe12 	bl	8005056 <HAL_DMA_Abort_IT>
  if (HAL_OK == status)
 800e432:	b928      	cbnz	r0, 800e440 <HAL_TIM_DMABurst_WriteStop+0x34>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800e434:	682a      	ldr	r2, [r5, #0]
 800e436:	68d3      	ldr	r3, [r2, #12]
 800e438:	ea23 0404 	bic.w	r4, r3, r4
 800e43c:	60d4      	str	r4, [r2, #12]
 800e43e:	2000      	movs	r0, #0
}
 800e440:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 800e442:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800e446:	d015      	beq.n	800e474 <HAL_TIM_DMABurst_WriteStop+0x68>
 800e448:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800e44c:	d016      	beq.n	800e47c <HAL_TIM_DMABurst_WriteStop+0x70>
 800e44e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800e452:	d1ef      	bne.n	800e434 <HAL_TIM_DMABurst_WriteStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e454:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e456:	f7f6 fdfe 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e45a:	e7ea      	b.n	800e432 <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e45c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e45e:	f7f6 fdfa 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e462:	e7e6      	b.n	800e432 <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e464:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e466:	f7f6 fdf6 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e46a:	e7e2      	b.n	800e432 <HAL_TIM_DMABurst_WriteStop+0x26>
      status =  HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e46c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e46e:	f7f6 fdf2 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e472:	e7de      	b.n	800e432 <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800e474:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e476:	f7f6 fdee 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e47a:	e7da      	b.n	800e432 <HAL_TIM_DMABurst_WriteStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800e47c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e47e:	f7f6 fdea 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e482:	e7d6      	b.n	800e432 <HAL_TIM_DMABurst_WriteStop+0x26>

0800e484 <HAL_TIM_DMABurst_ReadStart>:
{
 800e484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e488:	9e06      	ldr	r6, [sp, #24]
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800e48a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e48e:	b2e4      	uxtb	r4, r4
 800e490:	2c02      	cmp	r4, #2
 800e492:	f000 80cd 	beq.w	800e630 <HAL_TIM_DMABurst_ReadStart+0x1ac>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800e496:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e49a:	b2e4      	uxtb	r4, r4
 800e49c:	2c01      	cmp	r4, #1
 800e49e:	d01e      	beq.n	800e4de <HAL_TIM_DMABurst_ReadStart+0x5a>
 800e4a0:	461f      	mov	r7, r3
 800e4a2:	4615      	mov	r5, r2
 800e4a4:	4688      	mov	r8, r1
 800e4a6:	4604      	mov	r4, r0
  switch (BurstRequestSrc)
 800e4a8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800e4ac:	d07e      	beq.n	800e5ac <HAL_TIM_DMABurst_ReadStart+0x128>
 800e4ae:	d81f      	bhi.n	800e4f0 <HAL_TIM_DMABurst_ReadStart+0x6c>
 800e4b0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800e4b4:	d050      	beq.n	800e558 <HAL_TIM_DMABurst_ReadStart+0xd4>
 800e4b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e4ba:	d062      	beq.n	800e582 <HAL_TIM_DMABurst_ReadStart+0xfe>
 800e4bc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e4c0:	d035      	beq.n	800e52e <HAL_TIM_DMABurst_ReadStart+0xaa>
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800e4c2:	6823      	ldr	r3, [r4, #0]
 800e4c4:	ea46 0608 	orr.w	r6, r6, r8
 800e4c8:	649e      	str	r6, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800e4ca:	6823      	ldr	r3, [r4, #0]
 800e4cc:	68da      	ldr	r2, [r3, #12]
 800e4ce:	4315      	orrs	r5, r2
 800e4d0:	60dd      	str	r5, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800e4d8:	2000      	movs	r0, #0
}
 800e4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800e4de:	b11b      	cbz	r3, 800e4e8 <HAL_TIM_DMABurst_ReadStart+0x64>
      htim->State = HAL_TIM_STATE_BUSY;
 800e4e0:	2402      	movs	r4, #2
 800e4e2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800e4e6:	e7db      	b.n	800e4a0 <HAL_TIM_DMABurst_ReadStart+0x1c>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800e4e8:	2e00      	cmp	r6, #0
 800e4ea:	d0f9      	beq.n	800e4e0 <HAL_TIM_DMABurst_ReadStart+0x5c>
      return HAL_ERROR;
 800e4ec:	2001      	movs	r0, #1
 800e4ee:	e7f4      	b.n	800e4da <HAL_TIM_DMABurst_ReadStart+0x56>
  switch (BurstRequestSrc)
 800e4f0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e4f4:	d070      	beq.n	800e5d8 <HAL_TIM_DMABurst_ReadStart+0x154>
 800e4f6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800e4fa:	f000 8083 	beq.w	800e604 <HAL_TIM_DMABurst_ReadStart+0x180>
 800e4fe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800e502:	d1de      	bne.n	800e4c2 <HAL_TIM_DMABurst_ReadStart+0x3e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800e504:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e506:	4a4b      	ldr	r2, [pc, #300]	; (800e634 <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800e508:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e50a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e50c:	4a4a      	ldr	r2, [pc, #296]	; (800e638 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800e50e:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e510:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e512:	4a4a      	ldr	r2, [pc, #296]	; (800e63c <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800e514:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e516:	0a33      	lsrs	r3, r6, #8
 800e518:	6801      	ldr	r1, [r0, #0]
 800e51a:	3301      	adds	r3, #1
 800e51c:	463a      	mov	r2, r7
 800e51e:	314c      	adds	r1, #76	; 0x4c
 800e520:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e522:	f7f6 fd26 	bl	8004f72 <HAL_DMA_Start_IT>
 800e526:	2800      	cmp	r0, #0
 800e528:	d0cb      	beq.n	800e4c2 <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800e52a:	2001      	movs	r0, #1
 800e52c:	e7d5      	b.n	800e4da <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800e52e:	6a03      	ldr	r3, [r0, #32]
 800e530:	4a43      	ldr	r2, [pc, #268]	; (800e640 <HAL_TIM_DMABurst_ReadStart+0x1bc>)
 800e532:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800e534:	6a03      	ldr	r3, [r0, #32]
 800e536:	4a43      	ldr	r2, [pc, #268]	; (800e644 <HAL_TIM_DMABurst_ReadStart+0x1c0>)
 800e538:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800e53a:	6a03      	ldr	r3, [r0, #32]
 800e53c:	4a3f      	ldr	r2, [pc, #252]	; (800e63c <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800e53e:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e540:	0a33      	lsrs	r3, r6, #8
 800e542:	6801      	ldr	r1, [r0, #0]
 800e544:	3301      	adds	r3, #1
 800e546:	463a      	mov	r2, r7
 800e548:	314c      	adds	r1, #76	; 0x4c
 800e54a:	6a00      	ldr	r0, [r0, #32]
 800e54c:	f7f6 fd11 	bl	8004f72 <HAL_DMA_Start_IT>
 800e550:	2800      	cmp	r0, #0
 800e552:	d0b6      	beq.n	800e4c2 <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800e554:	2001      	movs	r0, #1
 800e556:	e7c0      	b.n	800e4da <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800e558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e55a:	4a36      	ldr	r2, [pc, #216]	; (800e634 <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800e55c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e55e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e560:	4a35      	ldr	r2, [pc, #212]	; (800e638 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800e562:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e564:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e566:	4a35      	ldr	r2, [pc, #212]	; (800e63c <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800e568:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e56a:	0a33      	lsrs	r3, r6, #8
 800e56c:	6801      	ldr	r1, [r0, #0]
 800e56e:	3301      	adds	r3, #1
 800e570:	463a      	mov	r2, r7
 800e572:	314c      	adds	r1, #76	; 0x4c
 800e574:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e576:	f7f6 fcfc 	bl	8004f72 <HAL_DMA_Start_IT>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d0a1      	beq.n	800e4c2 <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800e57e:	2001      	movs	r0, #1
 800e580:	e7ab      	b.n	800e4da <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800e582:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e584:	4a2b      	ldr	r2, [pc, #172]	; (800e634 <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800e586:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e588:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e58a:	4a2b      	ldr	r2, [pc, #172]	; (800e638 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800e58c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e58e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e590:	4a2a      	ldr	r2, [pc, #168]	; (800e63c <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800e592:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e594:	0a33      	lsrs	r3, r6, #8
 800e596:	6801      	ldr	r1, [r0, #0]
 800e598:	3301      	adds	r3, #1
 800e59a:	463a      	mov	r2, r7
 800e59c:	314c      	adds	r1, #76	; 0x4c
 800e59e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e5a0:	f7f6 fce7 	bl	8004f72 <HAL_DMA_Start_IT>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d08c      	beq.n	800e4c2 <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800e5a8:	2001      	movs	r0, #1
 800e5aa:	e796      	b.n	800e4da <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800e5ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e5ae:	4a21      	ldr	r2, [pc, #132]	; (800e634 <HAL_TIM_DMABurst_ReadStart+0x1b0>)
 800e5b0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e5b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e5b4:	4a20      	ldr	r2, [pc, #128]	; (800e638 <HAL_TIM_DMABurst_ReadStart+0x1b4>)
 800e5b6:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e5b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e5ba:	4a20      	ldr	r2, [pc, #128]	; (800e63c <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800e5bc:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e5be:	0a33      	lsrs	r3, r6, #8
 800e5c0:	6801      	ldr	r1, [r0, #0]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	463a      	mov	r2, r7
 800e5c6:	314c      	adds	r1, #76	; 0x4c
 800e5c8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e5ca:	f7f6 fcd2 	bl	8004f72 <HAL_DMA_Start_IT>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	f43f af77 	beq.w	800e4c2 <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800e5d4:	2001      	movs	r0, #1
 800e5d6:	e780      	b.n	800e4da <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800e5d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e5da:	4a1b      	ldr	r2, [pc, #108]	; (800e648 <HAL_TIM_DMABurst_ReadStart+0x1c4>)
 800e5dc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800e5de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e5e0:	4a1a      	ldr	r2, [pc, #104]	; (800e64c <HAL_TIM_DMABurst_ReadStart+0x1c8>)
 800e5e2:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800e5e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e5e6:	4a15      	ldr	r2, [pc, #84]	; (800e63c <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800e5e8:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e5ea:	0a33      	lsrs	r3, r6, #8
 800e5ec:	6801      	ldr	r1, [r0, #0]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	463a      	mov	r2, r7
 800e5f2:	314c      	adds	r1, #76	; 0x4c
 800e5f4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e5f6:	f7f6 fcbc 	bl	8004f72 <HAL_DMA_Start_IT>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	f43f af61 	beq.w	800e4c2 <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800e600:	2001      	movs	r0, #1
 800e602:	e76a      	b.n	800e4da <HAL_TIM_DMABurst_ReadStart+0x56>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800e604:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e606:	4a12      	ldr	r2, [pc, #72]	; (800e650 <HAL_TIM_DMABurst_ReadStart+0x1cc>)
 800e608:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800e60a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e60c:	4a11      	ldr	r2, [pc, #68]	; (800e654 <HAL_TIM_DMABurst_ReadStart+0x1d0>)
 800e60e:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800e610:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e612:	4a0a      	ldr	r2, [pc, #40]	; (800e63c <HAL_TIM_DMABurst_ReadStart+0x1b8>)
 800e614:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 800e616:	0a33      	lsrs	r3, r6, #8
 800e618:	6801      	ldr	r1, [r0, #0]
 800e61a:	3301      	adds	r3, #1
 800e61c:	463a      	mov	r2, r7
 800e61e:	314c      	adds	r1, #76	; 0x4c
 800e620:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e622:	f7f6 fca6 	bl	8004f72 <HAL_DMA_Start_IT>
 800e626:	2800      	cmp	r0, #0
 800e628:	f43f af4b 	beq.w	800e4c2 <HAL_TIM_DMABurst_ReadStart+0x3e>
        return HAL_ERROR;
 800e62c:	2001      	movs	r0, #1
 800e62e:	e754      	b.n	800e4da <HAL_TIM_DMABurst_ReadStart+0x56>
    return HAL_BUSY;
 800e630:	2002      	movs	r0, #2
 800e632:	e752      	b.n	800e4da <HAL_TIM_DMABurst_ReadStart+0x56>
 800e634:	0800e761 	.word	0x0800e761
 800e638:	0800e7a7 	.word	0x0800e7a7
 800e63c:	0800ea37 	.word	0x0800ea37
 800e640:	0800e73b 	.word	0x0800e73b
 800e644:	0800e74d 	.word	0x0800e74d
 800e648:	08011675 	.word	0x08011675
 800e64c:	08011687 	.word	0x08011687
 800e650:	0800ea13 	.word	0x0800ea13
 800e654:	0800ea25 	.word	0x0800ea25

0800e658 <HAL_TIM_DMABurst_ReadStop>:
{
 800e658:	b538      	push	{r3, r4, r5, lr}
 800e65a:	4605      	mov	r5, r0
 800e65c:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800e65e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800e662:	d029      	beq.n	800e6b8 <HAL_TIM_DMABurst_ReadStop+0x60>
 800e664:	d813      	bhi.n	800e68e <HAL_TIM_DMABurst_ReadStop+0x36>
 800e666:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e66a:	d01d      	beq.n	800e6a8 <HAL_TIM_DMABurst_ReadStop+0x50>
 800e66c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e670:	d01e      	beq.n	800e6b0 <HAL_TIM_DMABurst_ReadStop+0x58>
 800e672:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e676:	d103      	bne.n	800e680 <HAL_TIM_DMABurst_ReadStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800e678:	6a00      	ldr	r0, [r0, #32]
 800e67a:	f7f6 fcec 	bl	8005056 <HAL_DMA_Abort_IT>
  if (HAL_OK == status)
 800e67e:	b928      	cbnz	r0, 800e68c <HAL_TIM_DMABurst_ReadStop+0x34>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800e680:	682a      	ldr	r2, [r5, #0]
 800e682:	68d3      	ldr	r3, [r2, #12]
 800e684:	ea23 0404 	bic.w	r4, r3, r4
 800e688:	60d4      	str	r4, [r2, #12]
 800e68a:	2000      	movs	r0, #0
}
 800e68c:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 800e68e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800e692:	d015      	beq.n	800e6c0 <HAL_TIM_DMABurst_ReadStop+0x68>
 800e694:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800e698:	d016      	beq.n	800e6c8 <HAL_TIM_DMABurst_ReadStop+0x70>
 800e69a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800e69e:	d1ef      	bne.n	800e680 <HAL_TIM_DMABurst_ReadStop+0x28>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e6a0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e6a2:	f7f6 fcd8 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e6a6:	e7ea      	b.n	800e67e <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e6a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e6aa:	f7f6 fcd4 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e6ae:	e7e6      	b.n	800e67e <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e6b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e6b2:	f7f6 fcd0 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e6b6:	e7e2      	b.n	800e67e <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e6b8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e6ba:	f7f6 fccc 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e6be:	e7de      	b.n	800e67e <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800e6c0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e6c2:	f7f6 fcc8 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e6c6:	e7da      	b.n	800e67e <HAL_TIM_DMABurst_ReadStop+0x26>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800e6c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e6ca:	f7f6 fcc4 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800e6ce:	e7d6      	b.n	800e67e <HAL_TIM_DMABurst_ReadStop+0x26>

0800e6d0 <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 800e6d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d00c      	beq.n	800e6f2 <HAL_TIM_GenerateEvent+0x22>
  htim->State = HAL_TIM_STATE_BUSY;
 800e6d8:	2302      	movs	r3, #2
 800e6da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 800e6de:	6803      	ldr	r3, [r0, #0]
 800e6e0:	6159      	str	r1, [r3, #20]
  htim->State = HAL_TIM_STATE_READY;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	4770      	bx	lr
  __HAL_LOCK(htim);
 800e6f2:	2002      	movs	r0, #2
}
 800e6f4:	4770      	bx	lr

0800e6f6 <HAL_TIM_ConfigTI1Input>:
  tmpcr2 = htim->Instance->CR2;
 800e6f6:	6802      	ldr	r2, [r0, #0]
 800e6f8:	6853      	ldr	r3, [r2, #4]
  tmpcr2 &= ~TIM_CR2_TI1S;
 800e6fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr2 |= TI1_Selection;
 800e6fe:	4319      	orrs	r1, r3
  htim->Instance->CR2 = tmpcr2;
 800e700:	6051      	str	r1, [r2, #4]
}
 800e702:	2000      	movs	r0, #0
 800e704:	4770      	bx	lr

0800e706 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800e706:	290c      	cmp	r1, #12
 800e708:	d814      	bhi.n	800e734 <HAL_TIM_ReadCapturedValue+0x2e>
 800e70a:	e8df f001 	tbb	[pc, r1]
 800e70e:	1307      	.short	0x1307
 800e710:	130a1313 	.word	0x130a1313
 800e714:	130d1313 	.word	0x130d1313
 800e718:	1313      	.short	0x1313
 800e71a:	10          	.byte	0x10
 800e71b:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800e71c:	6803      	ldr	r3, [r0, #0]
 800e71e:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800e720:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800e722:	6803      	ldr	r3, [r0, #0]
 800e724:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800e726:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800e728:	6803      	ldr	r3, [r0, #0]
 800e72a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800e72c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800e72e:	6803      	ldr	r3, [r0, #0]
 800e730:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 800e732:	4770      	bx	lr
  uint32_t tmpreg = 0U;
 800e734:	2000      	movs	r0, #0
}
 800e736:	4770      	bx	lr
}
 800e738:	4770      	bx	lr

0800e73a <TIM_DMAPeriodElapsedCplt>:
{
 800e73a:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e73c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800e73e:	2301      	movs	r3, #1
 800e740:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedCallback(htim);
 800e744:	f7f5 fb88 	bl	8003e58 <HAL_TIM_PeriodElapsedCallback>
}
 800e748:	bd08      	pop	{r3, pc}

0800e74a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
}
 800e74a:	4770      	bx	lr

0800e74c <TIM_DMAPeriodElapsedHalfCplt>:
{
 800e74c:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e74e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800e750:	2301      	movs	r3, #1
 800e752:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800e756:	f7ff fff8 	bl	800e74a <HAL_TIM_PeriodElapsedHalfCpltCallback>
}
 800e75a:	bd08      	pop	{r3, pc}

0800e75c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800e75c:	4770      	bx	lr

0800e75e <HAL_TIM_IC_CaptureCallback>:
}
 800e75e:	4770      	bx	lr

0800e760 <TIM_DMACaptureCplt>:
{
 800e760:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e762:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800e764:	2301      	movs	r3, #1
 800e766:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e76c:	4283      	cmp	r3, r0
 800e76e:	d010      	beq.n	800e792 <TIM_DMACaptureCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e772:	4283      	cmp	r3, r0
 800e774:	d010      	beq.n	800e798 <TIM_DMACaptureCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e776:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e778:	4283      	cmp	r3, r0
 800e77a:	d010      	beq.n	800e79e <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e77c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e77e:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e780:	bf04      	itt	eq
 800e782:	2308      	moveq	r3, #8
 800e784:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800e786:	4620      	mov	r0, r4
 800e788:	f7ff ffe9 	bl	800e75e <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e78c:	2300      	movs	r3, #0
 800e78e:	7723      	strb	r3, [r4, #28]
}
 800e790:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e792:	2301      	movs	r3, #1
 800e794:	7723      	strb	r3, [r4, #28]
 800e796:	e7f6      	b.n	800e786 <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e798:	2302      	movs	r3, #2
 800e79a:	7723      	strb	r3, [r4, #28]
 800e79c:	e7f3      	b.n	800e786 <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e79e:	2304      	movs	r3, #4
 800e7a0:	7723      	strb	r3, [r4, #28]
 800e7a2:	e7f0      	b.n	800e786 <TIM_DMACaptureCplt+0x26>

0800e7a4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
}
 800e7a4:	4770      	bx	lr

0800e7a6 <TIM_DMACaptureHalfCplt>:
{
 800e7a6:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7b2:	4283      	cmp	r3, r0
 800e7b4:	d010      	beq.n	800e7d8 <TIM_DMACaptureHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e7b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e7b8:	4283      	cmp	r3, r0
 800e7ba:	d010      	beq.n	800e7de <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e7bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e7be:	4283      	cmp	r3, r0
 800e7c0:	d010      	beq.n	800e7e4 <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e7c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e7c4:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7c6:	bf04      	itt	eq
 800e7c8:	2308      	moveq	r3, #8
 800e7ca:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f7ff ffe9 	bl	800e7a4 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	7723      	strb	r3, [r4, #28]
}
 800e7d6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	7723      	strb	r3, [r4, #28]
 800e7dc:	e7f6      	b.n	800e7cc <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e7de:	2302      	movs	r3, #2
 800e7e0:	7723      	strb	r3, [r4, #28]
 800e7e2:	e7f3      	b.n	800e7cc <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e7e4:	2304      	movs	r3, #4
 800e7e6:	7723      	strb	r3, [r4, #28]
 800e7e8:	e7f0      	b.n	800e7cc <TIM_DMACaptureHalfCplt+0x26>

0800e7ea <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800e7ea:	4770      	bx	lr

0800e7ec <TIM_DMADelayPulseCplt>:
{
 800e7ec:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e7f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7f8:	4283      	cmp	r3, r0
 800e7fa:	d010      	beq.n	800e81e <TIM_DMADelayPulseCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e7fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e7fe:	4283      	cmp	r3, r0
 800e800:	d010      	beq.n	800e824 <TIM_DMADelayPulseCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e802:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e804:	4283      	cmp	r3, r0
 800e806:	d010      	beq.n	800e82a <TIM_DMADelayPulseCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e808:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e80a:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e80c:	bf04      	itt	eq
 800e80e:	2308      	moveq	r3, #8
 800e810:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e812:	4620      	mov	r0, r4
 800e814:	f7ff ffe9 	bl	800e7ea <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e818:	2300      	movs	r3, #0
 800e81a:	7723      	strb	r3, [r4, #28]
}
 800e81c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e81e:	2301      	movs	r3, #1
 800e820:	7723      	strb	r3, [r4, #28]
 800e822:	e7f6      	b.n	800e812 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e824:	2302      	movs	r3, #2
 800e826:	7723      	strb	r3, [r4, #28]
 800e828:	e7f3      	b.n	800e812 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e82a:	2304      	movs	r3, #4
 800e82c:	7723      	strb	r3, [r4, #28]
 800e82e:	e7f0      	b.n	800e812 <TIM_DMADelayPulseCplt+0x26>

0800e830 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 800e830:	4770      	bx	lr

0800e832 <TIM_DMADelayPulseHalfCplt>:
{
 800e832:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e834:	6a84      	ldr	r4, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800e836:	2301      	movs	r3, #1
 800e838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e83c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e83e:	4283      	cmp	r3, r0
 800e840:	d010      	beq.n	800e864 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e844:	4283      	cmp	r3, r0
 800e846:	d010      	beq.n	800e86a <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e848:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e84a:	4283      	cmp	r3, r0
 800e84c:	d010      	beq.n	800e870 <TIM_DMADelayPulseHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e84e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e850:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e852:	bf04      	itt	eq
 800e854:	2308      	moveq	r3, #8
 800e856:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800e858:	4620      	mov	r0, r4
 800e85a:	f7ff ffe9 	bl	800e830 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e85e:	2300      	movs	r3, #0
 800e860:	7723      	strb	r3, [r4, #28]
}
 800e862:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e864:	2301      	movs	r3, #1
 800e866:	7723      	strb	r3, [r4, #28]
 800e868:	e7f6      	b.n	800e858 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e86a:	2302      	movs	r3, #2
 800e86c:	7723      	strb	r3, [r4, #28]
 800e86e:	e7f3      	b.n	800e858 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e870:	2304      	movs	r3, #4
 800e872:	7723      	strb	r3, [r4, #28]
 800e874:	e7f0      	b.n	800e858 <TIM_DMADelayPulseHalfCplt+0x26>

0800e876 <HAL_TIM_TriggerCallback>:
}
 800e876:	4770      	bx	lr

0800e878 <HAL_TIM_IRQHandler>:
{
 800e878:	b510      	push	{r4, lr}
 800e87a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e87c:	6803      	ldr	r3, [r0, #0]
 800e87e:	691a      	ldr	r2, [r3, #16]
 800e880:	f012 0f02 	tst.w	r2, #2
 800e884:	d011      	beq.n	800e8aa <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e886:	68da      	ldr	r2, [r3, #12]
 800e888:	f012 0f02 	tst.w	r2, #2
 800e88c:	d00d      	beq.n	800e8aa <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e88e:	f06f 0202 	mvn.w	r2, #2
 800e892:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e894:	2301      	movs	r3, #1
 800e896:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e898:	6803      	ldr	r3, [r0, #0]
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	f013 0f03 	tst.w	r3, #3
 800e8a0:	d079      	beq.n	800e996 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800e8a2:	f7ff ff5c 	bl	800e75e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e8aa:	6823      	ldr	r3, [r4, #0]
 800e8ac:	691a      	ldr	r2, [r3, #16]
 800e8ae:	f012 0f04 	tst.w	r2, #4
 800e8b2:	d012      	beq.n	800e8da <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e8b4:	68da      	ldr	r2, [r3, #12]
 800e8b6:	f012 0f04 	tst.w	r2, #4
 800e8ba:	d00e      	beq.n	800e8da <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e8bc:	f06f 0204 	mvn.w	r2, #4
 800e8c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e8c2:	2302      	movs	r3, #2
 800e8c4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e8c6:	6823      	ldr	r3, [r4, #0]
 800e8c8:	699b      	ldr	r3, [r3, #24]
 800e8ca:	f413 7f40 	tst.w	r3, #768	; 0x300
 800e8ce:	d068      	beq.n	800e9a2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f7ff ff44 	bl	800e75e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	691a      	ldr	r2, [r3, #16]
 800e8de:	f012 0f08 	tst.w	r2, #8
 800e8e2:	d012      	beq.n	800e90a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e8e4:	68da      	ldr	r2, [r3, #12]
 800e8e6:	f012 0f08 	tst.w	r2, #8
 800e8ea:	d00e      	beq.n	800e90a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e8ec:	f06f 0208 	mvn.w	r2, #8
 800e8f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e8f2:	2304      	movs	r3, #4
 800e8f4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e8f6:	6823      	ldr	r3, [r4, #0]
 800e8f8:	69db      	ldr	r3, [r3, #28]
 800e8fa:	f013 0f03 	tst.w	r3, #3
 800e8fe:	d057      	beq.n	800e9b0 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800e900:	4620      	mov	r0, r4
 800e902:	f7ff ff2c 	bl	800e75e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e906:	2300      	movs	r3, #0
 800e908:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	691a      	ldr	r2, [r3, #16]
 800e90e:	f012 0f10 	tst.w	r2, #16
 800e912:	d012      	beq.n	800e93a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e914:	68da      	ldr	r2, [r3, #12]
 800e916:	f012 0f10 	tst.w	r2, #16
 800e91a:	d00e      	beq.n	800e93a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e91c:	f06f 0210 	mvn.w	r2, #16
 800e920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e922:	2308      	movs	r3, #8
 800e924:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	69db      	ldr	r3, [r3, #28]
 800e92a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800e92e:	d046      	beq.n	800e9be <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800e930:	4620      	mov	r0, r4
 800e932:	f7ff ff14 	bl	800e75e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e936:	2300      	movs	r3, #0
 800e938:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	691a      	ldr	r2, [r3, #16]
 800e93e:	f012 0f01 	tst.w	r2, #1
 800e942:	d003      	beq.n	800e94c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e944:	68da      	ldr	r2, [r3, #12]
 800e946:	f012 0f01 	tst.w	r2, #1
 800e94a:	d13f      	bne.n	800e9cc <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	691a      	ldr	r2, [r3, #16]
 800e950:	f012 0f80 	tst.w	r2, #128	; 0x80
 800e954:	d003      	beq.n	800e95e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e956:	68da      	ldr	r2, [r3, #12]
 800e958:	f012 0f80 	tst.w	r2, #128	; 0x80
 800e95c:	d13d      	bne.n	800e9da <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e95e:	6823      	ldr	r3, [r4, #0]
 800e960:	691a      	ldr	r2, [r3, #16]
 800e962:	f412 7f80 	tst.w	r2, #256	; 0x100
 800e966:	d003      	beq.n	800e970 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e968:	68da      	ldr	r2, [r3, #12]
 800e96a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800e96e:	d13b      	bne.n	800e9e8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	691a      	ldr	r2, [r3, #16]
 800e974:	f012 0f40 	tst.w	r2, #64	; 0x40
 800e978:	d003      	beq.n	800e982 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e97a:	68da      	ldr	r2, [r3, #12]
 800e97c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800e980:	d139      	bne.n	800e9f6 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	691a      	ldr	r2, [r3, #16]
 800e986:	f012 0f20 	tst.w	r2, #32
 800e98a:	d003      	beq.n	800e994 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e98c:	68da      	ldr	r2, [r3, #12]
 800e98e:	f012 0f20 	tst.w	r2, #32
 800e992:	d137      	bne.n	800ea04 <HAL_TIM_IRQHandler+0x18c>
}
 800e994:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e996:	f7ff fee1 	bl	800e75c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e99a:	4620      	mov	r0, r4
 800e99c:	f7ff ff25 	bl	800e7ea <HAL_TIM_PWM_PulseFinishedCallback>
 800e9a0:	e781      	b.n	800e8a6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f7ff feda 	bl	800e75c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	f7ff ff1e 	bl	800e7ea <HAL_TIM_PWM_PulseFinishedCallback>
 800e9ae:	e792      	b.n	800e8d6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f7ff fed3 	bl	800e75c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f7ff ff17 	bl	800e7ea <HAL_TIM_PWM_PulseFinishedCallback>
 800e9bc:	e7a3      	b.n	800e906 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f7ff fecc 	bl	800e75c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	f7ff ff10 	bl	800e7ea <HAL_TIM_PWM_PulseFinishedCallback>
 800e9ca:	e7b4      	b.n	800e936 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e9cc:	f06f 0201 	mvn.w	r2, #1
 800e9d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f7f5 fa40 	bl	8003e58 <HAL_TIM_PeriodElapsedCallback>
 800e9d8:	e7b8      	b.n	800e94c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e9da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e9de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f002 fe58 	bl	8011696 <HAL_TIMEx_BreakCallback>
 800e9e6:	e7ba      	b.n	800e95e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e9e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e9ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f002 fe52 	bl	8011698 <HAL_TIMEx_Break2Callback>
 800e9f4:	e7bc      	b.n	800e970 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e9f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e9fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f7ff ff3a 	bl	800e876 <HAL_TIM_TriggerCallback>
 800ea02:	e7be      	b.n	800e982 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ea04:	f06f 0220 	mvn.w	r2, #32
 800ea08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f002 fe31 	bl	8011672 <HAL_TIMEx_CommutCallback>
}
 800ea10:	e7c0      	b.n	800e994 <HAL_TIM_IRQHandler+0x11c>

0800ea12 <TIM_DMATriggerCplt>:
{
 800ea12:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea14:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800ea16:	2301      	movs	r3, #1
 800ea18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerCallback(htim);
 800ea1c:	f7ff ff2b 	bl	800e876 <HAL_TIM_TriggerCallback>
}
 800ea20:	bd08      	pop	{r3, pc}

0800ea22 <HAL_TIM_TriggerHalfCpltCallback>:
}
 800ea22:	4770      	bx	lr

0800ea24 <TIM_DMATriggerHalfCplt>:
{
 800ea24:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea26:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerHalfCpltCallback(htim);
 800ea2e:	f7ff fff8 	bl	800ea22 <HAL_TIM_TriggerHalfCpltCallback>
}
 800ea32:	bd08      	pop	{r3, pc}

0800ea34 <HAL_TIM_ErrorCallback>:
}
 800ea34:	4770      	bx	lr

0800ea36 <TIM_DMAError>:
{
 800ea36:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea38:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800ea40:	f7ff fff8 	bl	800ea34 <HAL_TIM_ErrorCallback>
}
 800ea44:	bd08      	pop	{r3, pc}

0800ea46 <HAL_TIM_Base_GetState>:
  return htim->State;
 800ea46:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800ea4a:	4770      	bx	lr

0800ea4c <HAL_TIM_OC_GetState>:
  return htim->State;
 800ea4c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800ea50:	4770      	bx	lr

0800ea52 <HAL_TIM_PWM_GetState>:
  return htim->State;
 800ea52:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800ea56:	4770      	bx	lr

0800ea58 <HAL_TIM_IC_GetState>:
  return htim->State;
 800ea58:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800ea5c:	4770      	bx	lr

0800ea5e <HAL_TIM_OnePulse_GetState>:
  return htim->State;
 800ea5e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800ea62:	4770      	bx	lr

0800ea64 <HAL_TIM_Encoder_GetState>:
  return htim->State;
 800ea64:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800ea68:	4770      	bx	lr
	...

0800ea6c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800ea6c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea6e:	4a4c      	ldr	r2, [pc, #304]	; (800eba0 <TIM_Base_SetConfig+0x134>)
 800ea70:	4290      	cmp	r0, r2
 800ea72:	d032      	beq.n	800eada <TIM_Base_SetConfig+0x6e>
 800ea74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ea78:	d062      	beq.n	800eb40 <TIM_Base_SetConfig+0xd4>
 800ea7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ea7e:	4290      	cmp	r0, r2
 800ea80:	d026      	beq.n	800ead0 <TIM_Base_SetConfig+0x64>
 800ea82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ea86:	4290      	cmp	r0, r2
 800ea88:	d055      	beq.n	800eb36 <TIM_Base_SetConfig+0xca>
 800ea8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ea8e:	4290      	cmp	r0, r2
 800ea90:	d019      	beq.n	800eac6 <TIM_Base_SetConfig+0x5a>
 800ea92:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ea96:	4290      	cmp	r0, r2
 800ea98:	d048      	beq.n	800eb2c <TIM_Base_SetConfig+0xc0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea9a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ea9e:	4290      	cmp	r0, r2
 800eaa0:	d053      	beq.n	800eb4a <TIM_Base_SetConfig+0xde>
 800eaa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eaa6:	4290      	cmp	r0, r2
 800eaa8:	d05d      	beq.n	800eb66 <TIM_Base_SetConfig+0xfa>
 800eaaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eaae:	4290      	cmp	r0, r2
 800eab0:	d067      	beq.n	800eb82 <TIM_Base_SetConfig+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eab6:	694a      	ldr	r2, [r1, #20]
 800eab8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800eaba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eabc:	688b      	ldr	r3, [r1, #8]
 800eabe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800eac0:	680b      	ldr	r3, [r1, #0]
 800eac2:	6283      	str	r3, [r0, #40]	; 0x28
 800eac4:	e02f      	b.n	800eb26 <TIM_Base_SetConfig+0xba>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800eaca:	684a      	ldr	r2, [r1, #4]
 800eacc:	4313      	orrs	r3, r2
 800eace:	e008      	b.n	800eae2 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ead0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ead4:	684a      	ldr	r2, [r1, #4]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	e003      	b.n	800eae2 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800eade:	684a      	ldr	r2, [r1, #4]
 800eae0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800eae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eae6:	68ca      	ldr	r2, [r1, #12]
 800eae8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eaea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eaee:	694a      	ldr	r2, [r1, #20]
 800eaf0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800eaf2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eaf4:	688b      	ldr	r3, [r1, #8]
 800eaf6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800eaf8:	680b      	ldr	r3, [r1, #0]
 800eafa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eafc:	4b28      	ldr	r3, [pc, #160]	; (800eba0 <TIM_Base_SetConfig+0x134>)
 800eafe:	4298      	cmp	r0, r3
 800eb00:	d00f      	beq.n	800eb22 <TIM_Base_SetConfig+0xb6>
 800eb02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb06:	4298      	cmp	r0, r3
 800eb08:	d00b      	beq.n	800eb22 <TIM_Base_SetConfig+0xb6>
 800eb0a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800eb0e:	4298      	cmp	r0, r3
 800eb10:	d007      	beq.n	800eb22 <TIM_Base_SetConfig+0xb6>
 800eb12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb16:	4298      	cmp	r0, r3
 800eb18:	d003      	beq.n	800eb22 <TIM_Base_SetConfig+0xb6>
 800eb1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb1e:	4298      	cmp	r0, r3
 800eb20:	d101      	bne.n	800eb26 <TIM_Base_SetConfig+0xba>
    TIMx->RCR = Structure->RepetitionCounter;
 800eb22:	690b      	ldr	r3, [r1, #16]
 800eb24:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800eb26:	2301      	movs	r3, #1
 800eb28:	6143      	str	r3, [r0, #20]
}
 800eb2a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800eb30:	684a      	ldr	r2, [r1, #4]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	e7d5      	b.n	800eae2 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800eb3a:	684a      	ldr	r2, [r1, #4]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	e7d0      	b.n	800eae2 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800eb44:	684a      	ldr	r2, [r1, #4]
 800eb46:	4313      	orrs	r3, r2
 800eb48:	e7cb      	b.n	800eae2 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb4e:	68ca      	ldr	r2, [r1, #12]
 800eb50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb56:	694a      	ldr	r2, [r1, #20]
 800eb58:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800eb5a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb5c:	688b      	ldr	r3, [r1, #8]
 800eb5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800eb60:	680b      	ldr	r3, [r1, #0]
 800eb62:	6283      	str	r3, [r0, #40]	; 0x28
 800eb64:	e7dd      	b.n	800eb22 <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb6a:	68ca      	ldr	r2, [r1, #12]
 800eb6c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb72:	694a      	ldr	r2, [r1, #20]
 800eb74:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800eb76:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb78:	688b      	ldr	r3, [r1, #8]
 800eb7a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800eb7c:	680b      	ldr	r3, [r1, #0]
 800eb7e:	6283      	str	r3, [r0, #40]	; 0x28
 800eb80:	e7cf      	b.n	800eb22 <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb86:	68ca      	ldr	r2, [r1, #12]
 800eb88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb8e:	694a      	ldr	r2, [r1, #20]
 800eb90:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800eb92:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb94:	688b      	ldr	r3, [r1, #8]
 800eb96:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800eb98:	680b      	ldr	r3, [r1, #0]
 800eb9a:	6283      	str	r3, [r0, #40]	; 0x28
 800eb9c:	e7c1      	b.n	800eb22 <TIM_Base_SetConfig+0xb6>
 800eb9e:	bf00      	nop
 800eba0:	40012c00 	.word	0x40012c00

0800eba4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800eba4:	b1a8      	cbz	r0, 800ebd2 <HAL_TIM_Base_Init+0x2e>
{
 800eba6:	b510      	push	{r4, lr}
 800eba8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ebaa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ebae:	b15b      	cbz	r3, 800ebc8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800ebb0:	2302      	movs	r3, #2
 800ebb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebb6:	1d21      	adds	r1, r4, #4
 800ebb8:	6820      	ldr	r0, [r4, #0]
 800ebba:	f7ff ff57 	bl	800ea6c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800ebc4:	2000      	movs	r0, #0
}
 800ebc6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800ebc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ebcc:	f7f5 fbac 	bl	8004328 <HAL_TIM_Base_MspInit>
 800ebd0:	e7ee      	b.n	800ebb0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800ebd2:	2001      	movs	r0, #1
}
 800ebd4:	4770      	bx	lr

0800ebd6 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800ebd6:	b1a8      	cbz	r0, 800ec04 <HAL_TIM_OC_Init+0x2e>
{
 800ebd8:	b510      	push	{r4, lr}
 800ebda:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ebdc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ebe0:	b15b      	cbz	r3, 800ebfa <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800ebe2:	2302      	movs	r3, #2
 800ebe4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ebe8:	1d21      	adds	r1, r4, #4
 800ebea:	6820      	ldr	r0, [r4, #0]
 800ebec:	f7ff ff3e 	bl	800ea6c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800ebf6:	2000      	movs	r0, #0
}
 800ebf8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800ebfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800ebfe:	f7ff fa7f 	bl	800e100 <HAL_TIM_OC_MspInit>
 800ec02:	e7ee      	b.n	800ebe2 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800ec04:	2001      	movs	r0, #1
}
 800ec06:	4770      	bx	lr

0800ec08 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800ec08:	b1a8      	cbz	r0, 800ec36 <HAL_TIM_PWM_Init+0x2e>
{
 800ec0a:	b510      	push	{r4, lr}
 800ec0c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ec0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ec12:	b15b      	cbz	r3, 800ec2c <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800ec14:	2302      	movs	r3, #2
 800ec16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec1a:	1d21      	adds	r1, r4, #4
 800ec1c:	6820      	ldr	r0, [r4, #0]
 800ec1e:	f7ff ff25 	bl	800ea6c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800ec22:	2301      	movs	r3, #1
 800ec24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800ec28:	2000      	movs	r0, #0
}
 800ec2a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800ec2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800ec30:	f7ff fa85 	bl	800e13e <HAL_TIM_PWM_MspInit>
 800ec34:	e7ee      	b.n	800ec14 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800ec36:	2001      	movs	r0, #1
}
 800ec38:	4770      	bx	lr

0800ec3a <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800ec3a:	b1a8      	cbz	r0, 800ec68 <HAL_TIM_IC_Init+0x2e>
{
 800ec3c:	b510      	push	{r4, lr}
 800ec3e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ec40:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ec44:	b15b      	cbz	r3, 800ec5e <HAL_TIM_IC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800ec46:	2302      	movs	r3, #2
 800ec48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec4c:	1d21      	adds	r1, r4, #4
 800ec4e:	6820      	ldr	r0, [r4, #0]
 800ec50:	f7ff ff0c 	bl	800ea6c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800ec54:	2301      	movs	r3, #1
 800ec56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800ec5a:	2000      	movs	r0, #0
}
 800ec5c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800ec5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800ec62:	f7ff fa8b 	bl	800e17c <HAL_TIM_IC_MspInit>
 800ec66:	e7ee      	b.n	800ec46 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800ec68:	2001      	movs	r0, #1
}
 800ec6a:	4770      	bx	lr

0800ec6c <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 800ec6c:	b1f8      	cbz	r0, 800ecae <HAL_TIM_OnePulse_Init+0x42>
{
 800ec6e:	b538      	push	{r3, r4, r5, lr}
 800ec70:	4604      	mov	r4, r0
 800ec72:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800ec74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ec78:	b1a3      	cbz	r3, 800eca4 <HAL_TIM_OnePulse_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800ec7a:	2302      	movs	r3, #2
 800ec7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec80:	1d21      	adds	r1, r4, #4
 800ec82:	6820      	ldr	r0, [r4, #0]
 800ec84:	f7ff fef2 	bl	800ea6c <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800ec88:	6822      	ldr	r2, [r4, #0]
 800ec8a:	6813      	ldr	r3, [r2, #0]
 800ec8c:	f023 0308 	bic.w	r3, r3, #8
 800ec90:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800ec92:	6822      	ldr	r2, [r4, #0]
 800ec94:	6813      	ldr	r3, [r2, #0]
 800ec96:	432b      	orrs	r3, r5
 800ec98:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800eca0:	2000      	movs	r0, #0
}
 800eca2:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800eca4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800eca8:	f7ff fa87 	bl	800e1ba <HAL_TIM_OnePulse_MspInit>
 800ecac:	e7e5      	b.n	800ec7a <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 800ecae:	2001      	movs	r0, #1
}
 800ecb0:	4770      	bx	lr

0800ecb2 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d049      	beq.n	800ed4a <HAL_TIM_Encoder_Init+0x98>
{
 800ecb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb8:	4605      	mov	r5, r0
 800ecba:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 800ecbc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d03d      	beq.n	800ed40 <HAL_TIM_Encoder_Init+0x8e>
  htim->State = HAL_TIM_STATE_BUSY;
 800ecc4:	2302      	movs	r3, #2
 800ecc6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ecca:	4629      	mov	r1, r5
 800eccc:	f851 2b04 	ldr.w	r2, [r1], #4
 800ecd0:	6893      	ldr	r3, [r2, #8]
 800ecd2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800ecd6:	f023 0307 	bic.w	r3, r3, #7
 800ecda:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecdc:	6828      	ldr	r0, [r5, #0]
 800ecde:	f7ff fec5 	bl	800ea6c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800ece2:	6828      	ldr	r0, [r5, #0]
 800ece4:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800ece6:	6982      	ldr	r2, [r0, #24]
  tmpccer = htim->Instance->CCER;
 800ece8:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	431e      	orrs	r6, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ecee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ecf2:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ecf6:	69a3      	ldr	r3, [r4, #24]
 800ecf8:	68a1      	ldr	r1, [r4, #8]
 800ecfa:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800ecfe:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ed00:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
 800ed04:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ed08:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	011b      	lsls	r3, r3, #4
 800ed0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ed12:	68e1      	ldr	r1, [r4, #12]
 800ed14:	430b      	orrs	r3, r1
 800ed16:	6a21      	ldr	r1, [r4, #32]
 800ed18:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800ed1c:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ed1e:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ed22:	6961      	ldr	r1, [r4, #20]
 800ed24:	6862      	ldr	r2, [r4, #4]
 800ed26:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ed2a:	4317      	orrs	r7, r2
  htim->Instance->SMCR = tmpsmcr;
 800ed2c:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800ed2e:	682a      	ldr	r2, [r5, #0]
 800ed30:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 800ed32:	682b      	ldr	r3, [r5, #0]
 800ed34:	621f      	str	r7, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 800ed36:	2301      	movs	r3, #1
 800ed38:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 800ed3c:	2000      	movs	r0, #0
}
 800ed3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800ed40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800ed44:	f7ff fa58 	bl	800e1f8 <HAL_TIM_Encoder_MspInit>
 800ed48:	e7bc      	b.n	800ecc4 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800ed4a:	2001      	movs	r0, #1
}
 800ed4c:	4770      	bx	lr
	...

0800ed50 <TIM_OC2_SetConfig>:
{
 800ed50:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed52:	6a03      	ldr	r3, [r0, #32]
 800ed54:	f023 0310 	bic.w	r3, r3, #16
 800ed58:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800ed5a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800ed5c:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800ed5e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ed60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ed64:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed68:	680d      	ldr	r5, [r1, #0]
 800ed6a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800ed6e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ed72:	688d      	ldr	r5, [r1, #8]
 800ed74:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ed78:	4d17      	ldr	r5, [pc, #92]	; (800edd8 <TIM_OC2_SetConfig+0x88>)
 800ed7a:	42a8      	cmp	r0, r5
 800ed7c:	d017      	beq.n	800edae <TIM_OC2_SetConfig+0x5e>
 800ed7e:	4f17      	ldr	r7, [pc, #92]	; (800eddc <TIM_OC2_SetConfig+0x8c>)
 800ed80:	42b8      	cmp	r0, r7
 800ed82:	d00c      	beq.n	800ed9e <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed84:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800ed88:	42a8      	cmp	r0, r5
 800ed8a:	d017      	beq.n	800edbc <TIM_OC2_SetConfig+0x6c>
 800ed8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ed90:	42a8      	cmp	r0, r5
 800ed92:	d013      	beq.n	800edbc <TIM_OC2_SetConfig+0x6c>
 800ed94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ed98:	42a8      	cmp	r0, r5
 800ed9a:	d116      	bne.n	800edca <TIM_OC2_SetConfig+0x7a>
 800ed9c:	e00e      	b.n	800edbc <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800ed9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eda2:	68cd      	ldr	r5, [r1, #12]
 800eda4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800eda8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edac:	e006      	b.n	800edbc <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800edae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800edb2:	68cd      	ldr	r5, [r1, #12]
 800edb4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800edb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800edbc:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800edc0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800edc2:	698f      	ldr	r7, [r1, #24]
 800edc4:	433c      	orrs	r4, r7
 800edc6:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800edca:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800edcc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800edce:	684a      	ldr	r2, [r1, #4]
 800edd0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800edd2:	6203      	str	r3, [r0, #32]
}
 800edd4:	bcf0      	pop	{r4, r5, r6, r7}
 800edd6:	4770      	bx	lr
 800edd8:	40012c00 	.word	0x40012c00
 800eddc:	40013400 	.word	0x40013400

0800ede0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800ede0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d034      	beq.n	800ee52 <HAL_TIM_OC_ConfigChannel+0x72>
{
 800ede8:	b510      	push	{r4, lr}
 800edea:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800edec:	2301      	movs	r3, #1
 800edee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800edf2:	2302      	movs	r3, #2
 800edf4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800edf8:	2a14      	cmp	r2, #20
 800edfa:	d80f      	bhi.n	800ee1c <HAL_TIM_OC_ConfigChannel+0x3c>
 800edfc:	e8df f002 	tbb	[pc, r2]
 800ee00:	0e0e0e0b 	.word	0x0e0e0e0b
 800ee04:	0e0e0e15 	.word	0x0e0e0e15
 800ee08:	0e0e0e19 	.word	0x0e0e0e19
 800ee0c:	0e0e0e1d 	.word	0x0e0e0e1d
 800ee10:	0e0e0e21 	.word	0x0e0e0e21
 800ee14:	25          	.byte	0x25
 800ee15:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee16:	6800      	ldr	r0, [r0, #0]
 800ee18:	f7fe ff52 	bl	800dcc0 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ee22:	2000      	movs	r0, #0
 800ee24:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ee28:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ee2a:	6800      	ldr	r0, [r0, #0]
 800ee2c:	f7ff ff90 	bl	800ed50 <TIM_OC2_SetConfig>
      break;
 800ee30:	e7f4      	b.n	800ee1c <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ee32:	6800      	ldr	r0, [r0, #0]
 800ee34:	f7fe ff9c 	bl	800dd70 <TIM_OC3_SetConfig>
      break;
 800ee38:	e7f0      	b.n	800ee1c <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ee3a:	6800      	ldr	r0, [r0, #0]
 800ee3c:	f7fe ffe0 	bl	800de00 <TIM_OC4_SetConfig>
      break;
 800ee40:	e7ec      	b.n	800ee1c <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ee42:	6800      	ldr	r0, [r0, #0]
 800ee44:	f7ff f812 	bl	800de6c <TIM_OC5_SetConfig>
      break;
 800ee48:	e7e8      	b.n	800ee1c <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ee4a:	6800      	ldr	r0, [r0, #0]
 800ee4c:	f7ff f842 	bl	800ded4 <TIM_OC6_SetConfig>
      break;
 800ee50:	e7e4      	b.n	800ee1c <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 800ee52:	2002      	movs	r0, #2
}
 800ee54:	4770      	bx	lr

0800ee56 <HAL_TIM_PWM_ConfigChannel>:
{
 800ee56:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800ee58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	f000 8092 	beq.w	800ef86 <HAL_TIM_PWM_ConfigChannel+0x130>
 800ee62:	460d      	mov	r5, r1
 800ee64:	4604      	mov	r4, r0
 800ee66:	2301      	movs	r3, #1
 800ee68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800ee72:	2a14      	cmp	r2, #20
 800ee74:	d81e      	bhi.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x5e>
 800ee76:	e8df f002 	tbb	[pc, r2]
 800ee7a:	1d0b      	.short	0x1d0b
 800ee7c:	1d241d1d 	.word	0x1d241d1d
 800ee80:	1d381d1d 	.word	0x1d381d1d
 800ee84:	1d4b1d1d 	.word	0x1d4b1d1d
 800ee88:	1d5f1d1d 	.word	0x1d5f1d1d
 800ee8c:	1d1d      	.short	0x1d1d
 800ee8e:	72          	.byte	0x72
 800ee8f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee90:	6800      	ldr	r0, [r0, #0]
 800ee92:	f7fe ff15 	bl	800dcc0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee96:	6822      	ldr	r2, [r4, #0]
 800ee98:	6993      	ldr	r3, [r2, #24]
 800ee9a:	f043 0308 	orr.w	r3, r3, #8
 800ee9e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eea0:	6822      	ldr	r2, [r4, #0]
 800eea2:	6993      	ldr	r3, [r2, #24]
 800eea4:	f023 0304 	bic.w	r3, r3, #4
 800eea8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eeaa:	6822      	ldr	r2, [r4, #0]
 800eeac:	6993      	ldr	r3, [r2, #24]
 800eeae:	6929      	ldr	r1, [r5, #16]
 800eeb0:	430b      	orrs	r3, r1
 800eeb2:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800eeba:	2000      	movs	r0, #0
 800eebc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800eec0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eec2:	6800      	ldr	r0, [r0, #0]
 800eec4:	f7ff ff44 	bl	800ed50 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eec8:	6822      	ldr	r2, [r4, #0]
 800eeca:	6993      	ldr	r3, [r2, #24]
 800eecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eed0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eed2:	6822      	ldr	r2, [r4, #0]
 800eed4:	6993      	ldr	r3, [r2, #24]
 800eed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eeda:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eedc:	6822      	ldr	r2, [r4, #0]
 800eede:	6993      	ldr	r3, [r2, #24]
 800eee0:	6929      	ldr	r1, [r5, #16]
 800eee2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800eee6:	6193      	str	r3, [r2, #24]
      break;
 800eee8:	e7e4      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eeea:	6800      	ldr	r0, [r0, #0]
 800eeec:	f7fe ff40 	bl	800dd70 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eef0:	6822      	ldr	r2, [r4, #0]
 800eef2:	69d3      	ldr	r3, [r2, #28]
 800eef4:	f043 0308 	orr.w	r3, r3, #8
 800eef8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eefa:	6822      	ldr	r2, [r4, #0]
 800eefc:	69d3      	ldr	r3, [r2, #28]
 800eefe:	f023 0304 	bic.w	r3, r3, #4
 800ef02:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ef04:	6822      	ldr	r2, [r4, #0]
 800ef06:	69d3      	ldr	r3, [r2, #28]
 800ef08:	6929      	ldr	r1, [r5, #16]
 800ef0a:	430b      	orrs	r3, r1
 800ef0c:	61d3      	str	r3, [r2, #28]
      break;
 800ef0e:	e7d1      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ef10:	6800      	ldr	r0, [r0, #0]
 800ef12:	f7fe ff75 	bl	800de00 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ef16:	6822      	ldr	r2, [r4, #0]
 800ef18:	69d3      	ldr	r3, [r2, #28]
 800ef1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ef1e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ef20:	6822      	ldr	r2, [r4, #0]
 800ef22:	69d3      	ldr	r3, [r2, #28]
 800ef24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ef28:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ef2a:	6822      	ldr	r2, [r4, #0]
 800ef2c:	69d3      	ldr	r3, [r2, #28]
 800ef2e:	6929      	ldr	r1, [r5, #16]
 800ef30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ef34:	61d3      	str	r3, [r2, #28]
      break;
 800ef36:	e7bd      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef38:	6800      	ldr	r0, [r0, #0]
 800ef3a:	f7fe ff97 	bl	800de6c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ef3e:	6822      	ldr	r2, [r4, #0]
 800ef40:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef42:	f043 0308 	orr.w	r3, r3, #8
 800ef46:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ef48:	6822      	ldr	r2, [r4, #0]
 800ef4a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef4c:	f023 0304 	bic.w	r3, r3, #4
 800ef50:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ef52:	6822      	ldr	r2, [r4, #0]
 800ef54:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef56:	6929      	ldr	r1, [r5, #16]
 800ef58:	430b      	orrs	r3, r1
 800ef5a:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800ef5c:	e7aa      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ef5e:	6800      	ldr	r0, [r0, #0]
 800ef60:	f7fe ffb8 	bl	800ded4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ef64:	6822      	ldr	r2, [r4, #0]
 800ef66:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ef6c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ef6e:	6822      	ldr	r2, [r4, #0]
 800ef70:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ef76:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ef78:	6822      	ldr	r2, [r4, #0]
 800ef7a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef7c:	6929      	ldr	r1, [r5, #16]
 800ef7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ef82:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800ef84:	e796      	b.n	800eeb4 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 800ef86:	2002      	movs	r0, #2
 800ef88:	e79a      	b.n	800eec0 <HAL_TIM_PWM_ConfigChannel+0x6a>
	...

0800ef8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ef8c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef8e:	6a04      	ldr	r4, [r0, #32]
 800ef90:	f024 0401 	bic.w	r4, r4, #1
 800ef94:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef96:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800ef98:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ef9a:	4e17      	ldr	r6, [pc, #92]	; (800eff8 <TIM_TI1_SetConfig+0x6c>)
 800ef9c:	42b0      	cmp	r0, r6
 800ef9e:	d019      	beq.n	800efd4 <TIM_TI1_SetConfig+0x48>
 800efa0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800efa4:	d016      	beq.n	800efd4 <TIM_TI1_SetConfig+0x48>
 800efa6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800efaa:	42b0      	cmp	r0, r6
 800efac:	d012      	beq.n	800efd4 <TIM_TI1_SetConfig+0x48>
 800efae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800efb2:	42b0      	cmp	r0, r6
 800efb4:	d00e      	beq.n	800efd4 <TIM_TI1_SetConfig+0x48>
 800efb6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800efba:	42b0      	cmp	r0, r6
 800efbc:	d00a      	beq.n	800efd4 <TIM_TI1_SetConfig+0x48>
 800efbe:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800efc2:	42b0      	cmp	r0, r6
 800efc4:	d006      	beq.n	800efd4 <TIM_TI1_SetConfig+0x48>
 800efc6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800efca:	42b0      	cmp	r0, r6
 800efcc:	d002      	beq.n	800efd4 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800efce:	f044 0201 	orr.w	r2, r4, #1
 800efd2:	e002      	b.n	800efda <TIM_TI1_SetConfig+0x4e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800efd4:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800efd8:	4322      	orrs	r2, r4
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800efda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800efde:	011b      	lsls	r3, r3, #4
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800efe4:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800efe8:	f001 010a 	and.w	r1, r1, #10
 800efec:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800efee:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800eff0:	6201      	str	r1, [r0, #32]
}
 800eff2:	bc70      	pop	{r4, r5, r6}
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	40012c00 	.word	0x40012c00

0800effc <HAL_TIM_IC_ConfigChannel>:
{
 800effc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800effe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f002:	2b01      	cmp	r3, #1
 800f004:	f000 8098 	beq.w	800f138 <HAL_TIM_IC_ConfigChannel+0x13c>
 800f008:	460d      	mov	r5, r1
 800f00a:	4604      	mov	r4, r0
 800f00c:	2301      	movs	r3, #1
 800f00e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f012:	2302      	movs	r3, #2
 800f014:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800f018:	2a00      	cmp	r2, #0
 800f01a:	d030      	beq.n	800f07e <HAL_TIM_IC_ConfigChannel+0x82>
  else if (Channel == TIM_CHANNEL_2)
 800f01c:	2a04      	cmp	r2, #4
 800f01e:	d03f      	beq.n	800f0a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  else if (Channel == TIM_CHANNEL_3)
 800f020:	2a08      	cmp	r2, #8
 800f022:	d064      	beq.n	800f0ee <HAL_TIM_IC_ConfigChannel+0xf2>
    TIM_TI4_SetConfig(htim->Instance,
 800f024:	6800      	ldr	r0, [r0, #0]
 800f026:	680b      	ldr	r3, [r1, #0]
 800f028:	684f      	ldr	r7, [r1, #4]
 800f02a:	68ca      	ldr	r2, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f02c:	6a06      	ldr	r6, [r0, #32]
 800f02e:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
 800f032:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f034:	69c1      	ldr	r1, [r0, #28]
  tmpccer = TIMx->CCER;
 800f036:	6a06      	ldr	r6, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f038:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f03c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f040:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f044:	0312      	lsls	r2, r2, #12
 800f046:	b292      	uxth	r2, r2
 800f048:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f04a:	f426 4120 	bic.w	r1, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f04e:	031b      	lsls	r3, r3, #12
 800f050:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800f054:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f056:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800f058:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f05a:	6822      	ldr	r2, [r4, #0]
 800f05c:	69d3      	ldr	r3, [r2, #28]
 800f05e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f062:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f064:	6822      	ldr	r2, [r4, #0]
 800f066:	69d3      	ldr	r3, [r2, #28]
 800f068:	68a9      	ldr	r1, [r5, #8]
 800f06a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f06e:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800f070:	2301      	movs	r3, #1
 800f072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f076:	2000      	movs	r0, #0
 800f078:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800f07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800f07e:	68cb      	ldr	r3, [r1, #12]
 800f080:	684a      	ldr	r2, [r1, #4]
 800f082:	6809      	ldr	r1, [r1, #0]
 800f084:	6800      	ldr	r0, [r0, #0]
 800f086:	f7ff ff81 	bl	800ef8c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f08a:	6822      	ldr	r2, [r4, #0]
 800f08c:	6993      	ldr	r3, [r2, #24]
 800f08e:	f023 030c 	bic.w	r3, r3, #12
 800f092:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f094:	6822      	ldr	r2, [r4, #0]
 800f096:	6993      	ldr	r3, [r2, #24]
 800f098:	68a9      	ldr	r1, [r5, #8]
 800f09a:	430b      	orrs	r3, r1
 800f09c:	6193      	str	r3, [r2, #24]
 800f09e:	e7e7      	b.n	800f070 <HAL_TIM_IC_ConfigChannel+0x74>
    TIM_TI2_SetConfig(htim->Instance,
 800f0a0:	6800      	ldr	r0, [r0, #0]
 800f0a2:	680b      	ldr	r3, [r1, #0]
 800f0a4:	684f      	ldr	r7, [r1, #4]
 800f0a6:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f0a8:	6a06      	ldr	r6, [r0, #32]
 800f0aa:	f026 0610 	bic.w	r6, r6, #16
 800f0ae:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f0b0:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800f0b2:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f0b4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f0b8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f0bc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f0c0:	0312      	lsls	r2, r2, #12
 800f0c2:	b292      	uxth	r2, r2
 800f0c4:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f0c6:	f026 01a0 	bic.w	r1, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f0ca:	011b      	lsls	r3, r3, #4
 800f0cc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f0d0:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800f0d2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800f0d4:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f0d6:	6822      	ldr	r2, [r4, #0]
 800f0d8:	6993      	ldr	r3, [r2, #24]
 800f0da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f0de:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f0e0:	6822      	ldr	r2, [r4, #0]
 800f0e2:	6993      	ldr	r3, [r2, #24]
 800f0e4:	68a9      	ldr	r1, [r5, #8]
 800f0e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f0ea:	6193      	str	r3, [r2, #24]
 800f0ec:	e7c0      	b.n	800f070 <HAL_TIM_IC_ConfigChannel+0x74>
    TIM_TI3_SetConfig(htim->Instance,
 800f0ee:	6801      	ldr	r1, [r0, #0]
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	6868      	ldr	r0, [r5, #4]
 800f0f4:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f0f6:	6a0e      	ldr	r6, [r1, #32]
 800f0f8:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 800f0fc:	620e      	str	r6, [r1, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f0fe:	69cf      	ldr	r7, [r1, #28]
  tmpccer = TIMx->CCER;
 800f100:	6a0e      	ldr	r6, [r1, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f102:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800f106:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f108:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f10c:	0112      	lsls	r2, r2, #4
 800f10e:	b2d2      	uxtb	r2, r2
 800f110:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f112:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f116:	021b      	lsls	r3, r3, #8
 800f118:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800f11c:	4303      	orrs	r3, r0
  TIMx->CCMR2 = tmpccmr2;
 800f11e:	61ca      	str	r2, [r1, #28]
  TIMx->CCER = tmpccer;
 800f120:	620b      	str	r3, [r1, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f122:	6822      	ldr	r2, [r4, #0]
 800f124:	69d3      	ldr	r3, [r2, #28]
 800f126:	f023 030c 	bic.w	r3, r3, #12
 800f12a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f12c:	6822      	ldr	r2, [r4, #0]
 800f12e:	69d3      	ldr	r3, [r2, #28]
 800f130:	68a9      	ldr	r1, [r5, #8]
 800f132:	430b      	orrs	r3, r1
 800f134:	61d3      	str	r3, [r2, #28]
 800f136:	e79b      	b.n	800f070 <HAL_TIM_IC_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 800f138:	2002      	movs	r0, #2
 800f13a:	e79f      	b.n	800f07c <HAL_TIM_IC_ConfigChannel+0x80>

0800f13c <HAL_TIM_OnePulse_ConfigChannel>:
  if (OutputChannel != InputChannel)
 800f13c:	429a      	cmp	r2, r3
 800f13e:	f000 808d 	beq.w	800f25c <HAL_TIM_OnePulse_ConfigChannel+0x120>
{
 800f142:	b570      	push	{r4, r5, r6, lr}
 800f144:	b088      	sub	sp, #32
    __HAL_LOCK(htim);
 800f146:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800f14a:	2c01      	cmp	r4, #1
 800f14c:	f000 8088 	beq.w	800f260 <HAL_TIM_OnePulse_ConfigChannel+0x124>
 800f150:	461e      	mov	r6, r3
 800f152:	460d      	mov	r5, r1
 800f154:	4604      	mov	r4, r0
 800f156:	2301      	movs	r3, #1
 800f158:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    htim->State = HAL_TIM_STATE_BUSY;
 800f15c:	2302      	movs	r3, #2
 800f15e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    temp1.OCMode = sConfig->OCMode;
 800f162:	680b      	ldr	r3, [r1, #0]
 800f164:	9301      	str	r3, [sp, #4]
    temp1.Pulse = sConfig->Pulse;
 800f166:	684b      	ldr	r3, [r1, #4]
 800f168:	9302      	str	r3, [sp, #8]
    temp1.OCPolarity = sConfig->OCPolarity;
 800f16a:	688b      	ldr	r3, [r1, #8]
 800f16c:	9303      	str	r3, [sp, #12]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 800f16e:	68cb      	ldr	r3, [r1, #12]
 800f170:	9304      	str	r3, [sp, #16]
    temp1.OCIdleState = sConfig->OCIdleState;
 800f172:	690b      	ldr	r3, [r1, #16]
 800f174:	9306      	str	r3, [sp, #24]
    temp1.OCNIdleState = sConfig->OCNIdleState;
 800f176:	694b      	ldr	r3, [r1, #20]
 800f178:	9307      	str	r3, [sp, #28]
    switch (OutputChannel)
 800f17a:	b162      	cbz	r2, 800f196 <HAL_TIM_OnePulse_ConfigChannel+0x5a>
 800f17c:	2a04      	cmp	r2, #4
 800f17e:	d00f      	beq.n	800f1a0 <HAL_TIM_OnePulse_ConfigChannel+0x64>
    switch (InputChannel)
 800f180:	b19e      	cbz	r6, 800f1aa <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 800f182:	2e04      	cmp	r6, #4
 800f184:	d033      	beq.n	800f1ee <HAL_TIM_OnePulse_ConfigChannel+0xb2>
    htim->State = HAL_TIM_STATE_READY;
 800f186:	2301      	movs	r3, #1
 800f188:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800f18c:	2000      	movs	r0, #0
 800f18e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800f192:	b008      	add	sp, #32
 800f194:	bd70      	pop	{r4, r5, r6, pc}
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 800f196:	a901      	add	r1, sp, #4
 800f198:	6800      	ldr	r0, [r0, #0]
 800f19a:	f7fe fd91 	bl	800dcc0 <TIM_OC1_SetConfig>
        break;
 800f19e:	e7ef      	b.n	800f180 <HAL_TIM_OnePulse_ConfigChannel+0x44>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 800f1a0:	a901      	add	r1, sp, #4
 800f1a2:	6800      	ldr	r0, [r0, #0]
 800f1a4:	f7ff fdd4 	bl	800ed50 <TIM_OC2_SetConfig>
        break;
 800f1a8:	e7ea      	b.n	800f180 <HAL_TIM_OnePulse_ConfigChannel+0x44>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 800f1aa:	6a2b      	ldr	r3, [r5, #32]
 800f1ac:	69ea      	ldr	r2, [r5, #28]
 800f1ae:	69a9      	ldr	r1, [r5, #24]
 800f1b0:	6820      	ldr	r0, [r4, #0]
 800f1b2:	f7ff feeb 	bl	800ef8c <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f1b6:	6822      	ldr	r2, [r4, #0]
 800f1b8:	6993      	ldr	r3, [r2, #24]
 800f1ba:	f023 030c 	bic.w	r3, r3, #12
 800f1be:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800f1c0:	6822      	ldr	r2, [r4, #0]
 800f1c2:	6893      	ldr	r3, [r2, #8]
 800f1c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1c8:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800f1ca:	6822      	ldr	r2, [r4, #0]
 800f1cc:	6893      	ldr	r3, [r2, #8]
 800f1ce:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800f1d2:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800f1d4:	6822      	ldr	r2, [r4, #0]
 800f1d6:	6893      	ldr	r3, [r2, #8]
 800f1d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f1dc:	f023 0307 	bic.w	r3, r3, #7
 800f1e0:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800f1e2:	6822      	ldr	r2, [r4, #0]
 800f1e4:	6893      	ldr	r3, [r2, #8]
 800f1e6:	f043 0306 	orr.w	r3, r3, #6
 800f1ea:	6093      	str	r3, [r2, #8]
        break;
 800f1ec:	e7cb      	b.n	800f186 <HAL_TIM_OnePulse_ConfigChannel+0x4a>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800f1ee:	6820      	ldr	r0, [r4, #0]
 800f1f0:	69ab      	ldr	r3, [r5, #24]
 800f1f2:	69ee      	ldr	r6, [r5, #28]
 800f1f4:	6a2a      	ldr	r2, [r5, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f1f6:	6a05      	ldr	r5, [r0, #32]
 800f1f8:	f025 0510 	bic.w	r5, r5, #16
 800f1fc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f1fe:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800f200:	6a05      	ldr	r5, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f202:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f206:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f20a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f20e:	0312      	lsls	r2, r2, #12
 800f210:	b292      	uxth	r2, r2
 800f212:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f214:	f025 01a0 	bic.w	r1, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f218:	011b      	lsls	r3, r3, #4
 800f21a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f21e:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800f220:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800f222:	6203      	str	r3, [r0, #32]
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f224:	6822      	ldr	r2, [r4, #0]
 800f226:	6993      	ldr	r3, [r2, #24]
 800f228:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f22c:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800f22e:	6822      	ldr	r2, [r4, #0]
 800f230:	6893      	ldr	r3, [r2, #8]
 800f232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f236:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800f238:	6822      	ldr	r2, [r4, #0]
 800f23a:	6893      	ldr	r3, [r2, #8]
 800f23c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f240:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800f242:	6822      	ldr	r2, [r4, #0]
 800f244:	6893      	ldr	r3, [r2, #8]
 800f246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f24a:	f023 0307 	bic.w	r3, r3, #7
 800f24e:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800f250:	6822      	ldr	r2, [r4, #0]
 800f252:	6893      	ldr	r3, [r2, #8]
 800f254:	f043 0306 	orr.w	r3, r3, #6
 800f258:	6093      	str	r3, [r2, #8]
        break;
 800f25a:	e794      	b.n	800f186 <HAL_TIM_OnePulse_ConfigChannel+0x4a>
    return HAL_ERROR;
 800f25c:	2001      	movs	r0, #1
}
 800f25e:	4770      	bx	lr
    __HAL_LOCK(htim);
 800f260:	2002      	movs	r0, #2
 800f262:	e796      	b.n	800f192 <HAL_TIM_OnePulse_ConfigChannel+0x56>

0800f264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f264:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f266:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f268:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f26c:	430a      	orrs	r2, r1
 800f26e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800f272:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f274:	6083      	str	r3, [r0, #8]
}
 800f276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <HAL_TIM_ConfigOCrefClear>:
  __HAL_LOCK(htim);
 800f27c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f280:	2b01      	cmp	r3, #1
 800f282:	f000 809c 	beq.w	800f3be <HAL_TIM_ConfigOCrefClear+0x142>
{
 800f286:	b570      	push	{r4, r5, r6, lr}
 800f288:	4616      	mov	r6, r2
 800f28a:	460d      	mov	r5, r1
 800f28c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800f28e:	2301      	movs	r3, #1
 800f290:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f294:	2302      	movs	r3, #2
 800f296:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (sClearInputConfig->ClearInputSource)
 800f29a:	684b      	ldr	r3, [r1, #4]
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d01f      	beq.n	800f2e0 <HAL_TIM_ConfigOCrefClear+0x64>
 800f2a0:	b183      	cbz	r3, 800f2c4 <HAL_TIM_ConfigOCrefClear+0x48>
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	d016      	beq.n	800f2d4 <HAL_TIM_ConfigOCrefClear+0x58>
  switch (Channel)
 800f2a6:	2e14      	cmp	r6, #20
 800f2a8:	d836      	bhi.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
 800f2aa:	e8df f006 	tbb	[pc, r6]
 800f2ae:	352e      	.short	0x352e
 800f2b0:	35423535 	.word	0x35423535
 800f2b4:	35503535 	.word	0x35503535
 800f2b8:	355e3535 	.word	0x355e3535
 800f2bc:	356c3535 	.word	0x356c3535
 800f2c0:	3535      	.short	0x3535
 800f2c2:	7a          	.byte	0x7a
 800f2c3:	00          	.byte	0x00
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800f2c4:	6802      	ldr	r2, [r0, #0]
 800f2c6:	6893      	ldr	r3, [r2, #8]
 800f2c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f2cc:	f023 0308 	bic.w	r3, r3, #8
 800f2d0:	6093      	str	r3, [r2, #8]
      break;
 800f2d2:	e7e8      	b.n	800f2a6 <HAL_TIM_ConfigOCrefClear+0x2a>
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 800f2d4:	6802      	ldr	r2, [r0, #0]
 800f2d6:	6893      	ldr	r3, [r2, #8]
 800f2d8:	f023 0308 	bic.w	r3, r3, #8
 800f2dc:	6093      	str	r3, [r2, #8]
    break;
 800f2de:	e7e2      	b.n	800f2a6 <HAL_TIM_ConfigOCrefClear+0x2a>
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800f2e0:	68cb      	ldr	r3, [r1, #12]
 800f2e2:	b133      	cbz	r3, 800f2f2 <HAL_TIM_ConfigOCrefClear+0x76>
        htim->State = HAL_TIM_STATE_READY;
 800f2e4:	2001      	movs	r0, #1
 800f2e6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800f2f0:	e018      	b.n	800f324 <HAL_TIM_ConfigOCrefClear+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 800f2f2:	690b      	ldr	r3, [r1, #16]
 800f2f4:	688a      	ldr	r2, [r1, #8]
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	6800      	ldr	r0, [r0, #0]
 800f2fa:	f7ff ffb3 	bl	800f264 <TIM_ETR_SetConfig>
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 800f2fe:	6822      	ldr	r2, [r4, #0]
 800f300:	6893      	ldr	r3, [r2, #8]
 800f302:	f043 0308 	orr.w	r3, r3, #8
 800f306:	6093      	str	r3, [r2, #8]
      break;
 800f308:	e7cd      	b.n	800f2a6 <HAL_TIM_ConfigOCrefClear+0x2a>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800f30a:	682b      	ldr	r3, [r5, #0]
 800f30c:	b15b      	cbz	r3, 800f326 <HAL_TIM_ConfigOCrefClear+0xaa>
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800f30e:	6822      	ldr	r2, [r4, #0]
 800f310:	6993      	ldr	r3, [r2, #24]
 800f312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f316:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800f318:	2301      	movs	r3, #1
 800f31a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f31e:	2000      	movs	r0, #0
 800f320:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800f324:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800f326:	6822      	ldr	r2, [r4, #0]
 800f328:	6993      	ldr	r3, [r2, #24]
 800f32a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f32e:	6193      	str	r3, [r2, #24]
 800f330:	e7f2      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800f332:	682b      	ldr	r3, [r5, #0]
 800f334:	b12b      	cbz	r3, 800f342 <HAL_TIM_ConfigOCrefClear+0xc6>
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800f336:	6822      	ldr	r2, [r4, #0]
 800f338:	6993      	ldr	r3, [r2, #24]
 800f33a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f33e:	6193      	str	r3, [r2, #24]
 800f340:	e7ea      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800f342:	6822      	ldr	r2, [r4, #0]
 800f344:	6993      	ldr	r3, [r2, #24]
 800f346:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f34a:	6193      	str	r3, [r2, #24]
 800f34c:	e7e4      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800f34e:	682b      	ldr	r3, [r5, #0]
 800f350:	b12b      	cbz	r3, 800f35e <HAL_TIM_ConfigOCrefClear+0xe2>
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800f352:	6822      	ldr	r2, [r4, #0]
 800f354:	69d3      	ldr	r3, [r2, #28]
 800f356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f35a:	61d3      	str	r3, [r2, #28]
 800f35c:	e7dc      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800f35e:	6822      	ldr	r2, [r4, #0]
 800f360:	69d3      	ldr	r3, [r2, #28]
 800f362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f366:	61d3      	str	r3, [r2, #28]
 800f368:	e7d6      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800f36a:	682b      	ldr	r3, [r5, #0]
 800f36c:	b12b      	cbz	r3, 800f37a <HAL_TIM_ConfigOCrefClear+0xfe>
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800f36e:	6822      	ldr	r2, [r4, #0]
 800f370:	69d3      	ldr	r3, [r2, #28]
 800f372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f376:	61d3      	str	r3, [r2, #28]
 800f378:	e7ce      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800f37a:	6822      	ldr	r2, [r4, #0]
 800f37c:	69d3      	ldr	r3, [r2, #28]
 800f37e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f382:	61d3      	str	r3, [r2, #28]
 800f384:	e7c8      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800f386:	682b      	ldr	r3, [r5, #0]
 800f388:	b12b      	cbz	r3, 800f396 <HAL_TIM_ConfigOCrefClear+0x11a>
        SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800f38a:	6822      	ldr	r2, [r4, #0]
 800f38c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f38e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f392:	6553      	str	r3, [r2, #84]	; 0x54
 800f394:	e7c0      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800f396:	6822      	ldr	r2, [r4, #0]
 800f398:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f39a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f39e:	6553      	str	r3, [r2, #84]	; 0x54
 800f3a0:	e7ba      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800f3a2:	682b      	ldr	r3, [r5, #0]
 800f3a4:	b12b      	cbz	r3, 800f3b2 <HAL_TIM_ConfigOCrefClear+0x136>
        SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 800f3a6:	6822      	ldr	r2, [r4, #0]
 800f3a8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f3aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3ae:	6553      	str	r3, [r2, #84]	; 0x54
 800f3b0:	e7b2      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
        CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 800f3b2:	6822      	ldr	r2, [r4, #0]
 800f3b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f3b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f3ba:	6553      	str	r3, [r2, #84]	; 0x54
 800f3bc:	e7ac      	b.n	800f318 <HAL_TIM_ConfigOCrefClear+0x9c>
  __HAL_LOCK(htim);
 800f3be:	2002      	movs	r0, #2
}
 800f3c0:	4770      	bx	lr
	...

0800f3c4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800f3c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	f000 809b 	beq.w	800f504 <HAL_TIM_ConfigClockSource+0x140>
{
 800f3ce:	b570      	push	{r4, r5, r6, lr}
 800f3d0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f3d8:	2302      	movs	r3, #2
 800f3da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800f3de:	6802      	ldr	r2, [r0, #0]
 800f3e0:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f3e2:	4b49      	ldr	r3, [pc, #292]	; (800f508 <HAL_TIM_ConfigClockSource+0x144>)
 800f3e4:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800f3e6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800f3e8:	680b      	ldr	r3, [r1, #0]
 800f3ea:	2b40      	cmp	r3, #64	; 0x40
 800f3ec:	d070      	beq.n	800f4d0 <HAL_TIM_ConfigClockSource+0x10c>
 800f3ee:	d913      	bls.n	800f418 <HAL_TIM_ConfigClockSource+0x54>
 800f3f0:	2b60      	cmp	r3, #96	; 0x60
 800f3f2:	d052      	beq.n	800f49a <HAL_TIM_ConfigClockSource+0xd6>
 800f3f4:	d923      	bls.n	800f43e <HAL_TIM_ConfigClockSource+0x7a>
 800f3f6:	2b70      	cmp	r3, #112	; 0x70
 800f3f8:	d03d      	beq.n	800f476 <HAL_TIM_ConfigClockSource+0xb2>
 800f3fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3fe:	d145      	bne.n	800f48c <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 800f400:	68cb      	ldr	r3, [r1, #12]
 800f402:	684a      	ldr	r2, [r1, #4]
 800f404:	6889      	ldr	r1, [r1, #8]
 800f406:	6820      	ldr	r0, [r4, #0]
 800f408:	f7ff ff2c 	bl	800f264 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f40c:	6822      	ldr	r2, [r4, #0]
 800f40e:	6893      	ldr	r3, [r2, #8]
 800f410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f414:	6093      	str	r3, [r2, #8]
      break;
 800f416:	e039      	b.n	800f48c <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800f418:	2b10      	cmp	r3, #16
 800f41a:	d007      	beq.n	800f42c <HAL_TIM_ConfigClockSource+0x68>
 800f41c:	d904      	bls.n	800f428 <HAL_TIM_ConfigClockSource+0x64>
 800f41e:	2b20      	cmp	r3, #32
 800f420:	d004      	beq.n	800f42c <HAL_TIM_ConfigClockSource+0x68>
 800f422:	2b30      	cmp	r3, #48	; 0x30
 800f424:	d002      	beq.n	800f42c <HAL_TIM_ConfigClockSource+0x68>
 800f426:	e031      	b.n	800f48c <HAL_TIM_ConfigClockSource+0xc8>
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d12f      	bne.n	800f48c <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f42c:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f42e:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f430:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f434:	f043 0307 	orr.w	r3, r3, #7
 800f438:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800f43a:	608b      	str	r3, [r1, #8]
 800f43c:	e026      	b.n	800f48c <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800f43e:	2b50      	cmp	r3, #80	; 0x50
 800f440:	d124      	bne.n	800f48c <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	6848      	ldr	r0, [r1, #4]
 800f446:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800f448:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f44a:	6a1d      	ldr	r5, [r3, #32]
 800f44c:	f025 0501 	bic.w	r5, r5, #1
 800f450:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f452:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f454:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f458:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f45c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800f460:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800f462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f464:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f466:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f468:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f46e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800f472:	6093      	str	r3, [r2, #8]
 800f474:	e00a      	b.n	800f48c <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 800f476:	68cb      	ldr	r3, [r1, #12]
 800f478:	684a      	ldr	r2, [r1, #4]
 800f47a:	6889      	ldr	r1, [r1, #8]
 800f47c:	6820      	ldr	r0, [r4, #0]
 800f47e:	f7ff fef1 	bl	800f264 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f482:	6822      	ldr	r2, [r4, #0]
 800f484:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f486:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800f48a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800f48c:	2301      	movs	r3, #1
 800f48e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f492:	2000      	movs	r0, #0
 800f494:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800f498:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f49a:	6823      	ldr	r3, [r4, #0]
 800f49c:	684d      	ldr	r5, [r1, #4]
 800f49e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4a0:	6a18      	ldr	r0, [r3, #32]
 800f4a2:	f020 0010 	bic.w	r0, r0, #16
 800f4a6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4a8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800f4aa:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f4ac:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f4b0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f4b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800f4b8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800f4bc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4be:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4c0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f4c2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f4c8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800f4cc:	6093      	str	r3, [r2, #8]
 800f4ce:	e7dd      	b.n	800f48c <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4d0:	6823      	ldr	r3, [r4, #0]
 800f4d2:	6848      	ldr	r0, [r1, #4]
 800f4d4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800f4d6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4d8:	6a1d      	ldr	r5, [r3, #32]
 800f4da:	f025 0501 	bic.w	r5, r5, #1
 800f4de:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4e0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f4e6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f4ea:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800f4ee:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800f4f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4f2:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4f4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f4f6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f4f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f4fc:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800f500:	6093      	str	r3, [r2, #8]
 800f502:	e7c3      	b.n	800f48c <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 800f504:	2002      	movs	r0, #2
}
 800f506:	4770      	bx	lr
 800f508:	fffe0088 	.word	0xfffe0088

0800f50c <TIM_SlaveTimer_SetConfig>:
{
 800f50c:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800f50e:	6802      	ldr	r2, [r0, #0]
 800f510:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f516:	684c      	ldr	r4, [r1, #4]
 800f518:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f51a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f51e:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f522:	680c      	ldr	r4, [r1, #0]
 800f524:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 800f526:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 800f528:	684b      	ldr	r3, [r1, #4]
 800f52a:	2b50      	cmp	r3, #80	; 0x50
 800f52c:	d023      	beq.n	800f576 <TIM_SlaveTimer_SetConfig+0x6a>
 800f52e:	d90b      	bls.n	800f548 <TIM_SlaveTimer_SetConfig+0x3c>
 800f530:	2b60      	cmp	r3, #96	; 0x60
 800f532:	d034      	beq.n	800f59e <TIM_SlaveTimer_SetConfig+0x92>
 800f534:	2b70      	cmp	r3, #112	; 0x70
 800f536:	d147      	bne.n	800f5c8 <TIM_SlaveTimer_SetConfig+0xbc>
      TIM_ETR_SetConfig(htim->Instance,
 800f538:	690b      	ldr	r3, [r1, #16]
 800f53a:	688a      	ldr	r2, [r1, #8]
 800f53c:	68c9      	ldr	r1, [r1, #12]
 800f53e:	6800      	ldr	r0, [r0, #0]
 800f540:	f7ff fe90 	bl	800f264 <TIM_ETR_SetConfig>
  return HAL_OK;
 800f544:	2000      	movs	r0, #0
}
 800f546:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800f548:	2b40      	cmp	r3, #64	; 0x40
 800f54a:	d13d      	bne.n	800f5c8 <TIM_SlaveTimer_SetConfig+0xbc>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800f54c:	680b      	ldr	r3, [r1, #0]
 800f54e:	2b05      	cmp	r3, #5
 800f550:	d03c      	beq.n	800f5cc <TIM_SlaveTimer_SetConfig+0xc0>
      tmpccer = htim->Instance->CCER;
 800f552:	6803      	ldr	r3, [r0, #0]
 800f554:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f556:	6a1a      	ldr	r2, [r3, #32]
 800f558:	f022 0201 	bic.w	r2, r2, #1
 800f55c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f55e:	6802      	ldr	r2, [r0, #0]
 800f560:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f566:	6909      	ldr	r1, [r1, #16]
 800f568:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800f56c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800f56e:	6803      	ldr	r3, [r0, #0]
 800f570:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 800f572:	2000      	movs	r0, #0
      break;
 800f574:	e7e7      	b.n	800f546 <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f576:	6803      	ldr	r3, [r0, #0]
 800f578:	6888      	ldr	r0, [r1, #8]
 800f57a:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800f57c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f57e:	6a1c      	ldr	r4, [r3, #32]
 800f580:	f024 0401 	bic.w	r4, r4, #1
 800f584:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f586:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f588:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f58c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f590:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800f594:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800f596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f598:	6219      	str	r1, [r3, #32]
  return HAL_OK;
 800f59a:	2000      	movs	r0, #0
 800f59c:	e7d3      	b.n	800f546 <TIM_SlaveTimer_SetConfig+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f59e:	6803      	ldr	r3, [r0, #0]
 800f5a0:	688c      	ldr	r4, [r1, #8]
 800f5a2:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5a4:	6a18      	ldr	r0, [r3, #32]
 800f5a6:	f020 0010 	bic.w	r0, r0, #16
 800f5aa:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5ac:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800f5ae:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f5b0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f5b4:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f5b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800f5bc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800f5c0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5c2:	621a      	str	r2, [r3, #32]
  return HAL_OK;
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e7be      	b.n	800f546 <TIM_SlaveTimer_SetConfig+0x3a>
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	e7bc      	b.n	800f546 <TIM_SlaveTimer_SetConfig+0x3a>
        return HAL_ERROR;
 800f5cc:	2001      	movs	r0, #1
 800f5ce:	e7ba      	b.n	800f546 <TIM_SlaveTimer_SetConfig+0x3a>

0800f5d0 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800f5d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d024      	beq.n	800f622 <HAL_TIM_SlaveConfigSynchro+0x52>
{
 800f5d8:	b510      	push	{r4, lr}
 800f5da:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800f5dc:	2301      	movs	r3, #1
 800f5de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f5e2:	2302      	movs	r3, #2
 800f5e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800f5e8:	f7ff ff90 	bl	800f50c <TIM_SlaveTimer_SetConfig>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	b988      	cbnz	r0, 800f614 <HAL_TIM_SlaveConfigSynchro+0x44>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800f5f0:	6821      	ldr	r1, [r4, #0]
 800f5f2:	68ca      	ldr	r2, [r1, #12]
 800f5f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f5f8:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800f5fa:	6821      	ldr	r1, [r4, #0]
 800f5fc:	68ca      	ldr	r2, [r1, #12]
 800f5fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f602:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 800f604:	2201      	movs	r2, #1
 800f606:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f60a:	2200      	movs	r2, #0
 800f60c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800f610:	4618      	mov	r0, r3
 800f612:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800f614:	2301      	movs	r3, #1
 800f616:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800f61a:	2200      	movs	r2, #0
 800f61c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800f620:	e7f6      	b.n	800f610 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 800f622:	2302      	movs	r3, #2
}
 800f624:	4618      	mov	r0, r3
 800f626:	4770      	bx	lr

0800f628 <HAL_TIM_SlaveConfigSynchro_IT>:
  __HAL_LOCK(htim);
 800f628:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d024      	beq.n	800f67a <HAL_TIM_SlaveConfigSynchro_IT+0x52>
{
 800f630:	b510      	push	{r4, lr}
 800f632:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800f634:	2301      	movs	r3, #1
 800f636:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f63a:	2302      	movs	r3, #2
 800f63c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800f640:	f7ff ff64 	bl	800f50c <TIM_SlaveTimer_SetConfig>
 800f644:	4603      	mov	r3, r0
 800f646:	b988      	cbnz	r0, 800f66c <HAL_TIM_SlaveConfigSynchro_IT+0x44>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800f648:	6821      	ldr	r1, [r4, #0]
 800f64a:	68ca      	ldr	r2, [r1, #12]
 800f64c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f650:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800f652:	6821      	ldr	r1, [r4, #0]
 800f654:	68ca      	ldr	r2, [r1, #12]
 800f656:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f65a:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 800f65c:	2201      	movs	r2, #1
 800f65e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f662:	2200      	movs	r2, #0
 800f664:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800f668:	4618      	mov	r0, r3
 800f66a:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800f66c:	2301      	movs	r3, #1
 800f66e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800f672:	2200      	movs	r2, #0
 800f674:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800f678:	e7f6      	b.n	800f668 <HAL_TIM_SlaveConfigSynchro_IT+0x40>
  __HAL_LOCK(htim);
 800f67a:	2302      	movs	r3, #2
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	4770      	bx	lr

0800f680 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f680:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f682:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f686:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f688:	2401      	movs	r4, #1
 800f68a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800f68c:	ea23 0304 	bic.w	r3, r3, r4
 800f690:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f692:	6a03      	ldr	r3, [r0, #32]
 800f694:	408a      	lsls	r2, r1
 800f696:	431a      	orrs	r2, r3
 800f698:	6202      	str	r2, [r0, #32]
}
 800f69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f69e:	4770      	bx	lr

0800f6a0 <HAL_TIM_OC_Start>:
{
 800f6a0:	b510      	push	{r4, lr}
 800f6a2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	6800      	ldr	r0, [r0, #0]
 800f6a8:	f7ff ffea 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f6ac:	6823      	ldr	r3, [r4, #0]
 800f6ae:	4a13      	ldr	r2, [pc, #76]	; (800f6fc <HAL_TIM_OC_Start+0x5c>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d00f      	beq.n	800f6d4 <HAL_TIM_OC_Start+0x34>
 800f6b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d00b      	beq.n	800f6d4 <HAL_TIM_OC_Start+0x34>
 800f6bc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d007      	beq.n	800f6d4 <HAL_TIM_OC_Start+0x34>
 800f6c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d003      	beq.n	800f6d4 <HAL_TIM_OC_Start+0x34>
 800f6cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d103      	bne.n	800f6dc <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_MOE_ENABLE(htim);
 800f6d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6da:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f6dc:	6822      	ldr	r2, [r4, #0]
 800f6de:	6891      	ldr	r1, [r2, #8]
 800f6e0:	4b07      	ldr	r3, [pc, #28]	; (800f700 <HAL_TIM_OC_Start+0x60>)
 800f6e2:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6e4:	2b06      	cmp	r3, #6
 800f6e6:	d006      	beq.n	800f6f6 <HAL_TIM_OC_Start+0x56>
 800f6e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6ec:	d003      	beq.n	800f6f6 <HAL_TIM_OC_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800f6ee:	6813      	ldr	r3, [r2, #0]
 800f6f0:	f043 0301 	orr.w	r3, r3, #1
 800f6f4:	6013      	str	r3, [r2, #0]
}
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	bd10      	pop	{r4, pc}
 800f6fa:	bf00      	nop
 800f6fc:	40012c00 	.word	0x40012c00
 800f700:	00010007 	.word	0x00010007

0800f704 <HAL_TIM_OC_Stop>:
{
 800f704:	b510      	push	{r4, lr}
 800f706:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f708:	2200      	movs	r2, #0
 800f70a:	6800      	ldr	r0, [r0, #0]
 800f70c:	f7ff ffb8 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f710:	6823      	ldr	r3, [r4, #0]
 800f712:	4a19      	ldr	r2, [pc, #100]	; (800f778 <HAL_TIM_OC_Stop+0x74>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d00f      	beq.n	800f738 <HAL_TIM_OC_Stop+0x34>
 800f718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d00b      	beq.n	800f738 <HAL_TIM_OC_Stop+0x34>
 800f720:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800f724:	4293      	cmp	r3, r2
 800f726:	d007      	beq.n	800f738 <HAL_TIM_OC_Stop+0x34>
 800f728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d003      	beq.n	800f738 <HAL_TIM_OC_Stop+0x34>
 800f730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f734:	4293      	cmp	r3, r2
 800f736:	d10d      	bne.n	800f754 <HAL_TIM_OC_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 800f738:	6a19      	ldr	r1, [r3, #32]
 800f73a:	f241 1211 	movw	r2, #4369	; 0x1111
 800f73e:	4211      	tst	r1, r2
 800f740:	d108      	bne.n	800f754 <HAL_TIM_OC_Stop+0x50>
 800f742:	6a19      	ldr	r1, [r3, #32]
 800f744:	f240 4244 	movw	r2, #1092	; 0x444
 800f748:	4211      	tst	r1, r2
 800f74a:	d103      	bne.n	800f754 <HAL_TIM_OC_Stop+0x50>
 800f74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f74e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f752:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800f754:	6823      	ldr	r3, [r4, #0]
 800f756:	6a19      	ldr	r1, [r3, #32]
 800f758:	f241 1211 	movw	r2, #4369	; 0x1111
 800f75c:	4211      	tst	r1, r2
 800f75e:	d108      	bne.n	800f772 <HAL_TIM_OC_Stop+0x6e>
 800f760:	6a19      	ldr	r1, [r3, #32]
 800f762:	f240 4244 	movw	r2, #1092	; 0x444
 800f766:	4211      	tst	r1, r2
 800f768:	d103      	bne.n	800f772 <HAL_TIM_OC_Stop+0x6e>
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	f022 0201 	bic.w	r2, r2, #1
 800f770:	601a      	str	r2, [r3, #0]
}
 800f772:	2000      	movs	r0, #0
 800f774:	bd10      	pop	{r4, pc}
 800f776:	bf00      	nop
 800f778:	40012c00 	.word	0x40012c00

0800f77c <HAL_TIM_OC_Start_IT>:
{
 800f77c:	b510      	push	{r4, lr}
 800f77e:	4604      	mov	r4, r0
  switch (Channel)
 800f780:	290c      	cmp	r1, #12
 800f782:	d80d      	bhi.n	800f7a0 <HAL_TIM_OC_Start_IT+0x24>
 800f784:	e8df f001 	tbb	[pc, r1]
 800f788:	0c0c0c07 	.word	0x0c0c0c07
 800f78c:	0c0c0c37 	.word	0x0c0c0c37
 800f790:	0c0c0c3d 	.word	0x0c0c0c3d
 800f794:	43          	.byte	0x43
 800f795:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f796:	6802      	ldr	r2, [r0, #0]
 800f798:	68d3      	ldr	r3, [r2, #12]
 800f79a:	f043 0302 	orr.w	r3, r3, #2
 800f79e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	6820      	ldr	r0, [r4, #0]
 800f7a4:	f7ff ff6c 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f7a8:	6823      	ldr	r3, [r4, #0]
 800f7aa:	4a1c      	ldr	r2, [pc, #112]	; (800f81c <HAL_TIM_OC_Start_IT+0xa0>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d00f      	beq.n	800f7d0 <HAL_TIM_OC_Start_IT+0x54>
 800f7b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d00b      	beq.n	800f7d0 <HAL_TIM_OC_Start_IT+0x54>
 800f7b8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d007      	beq.n	800f7d0 <HAL_TIM_OC_Start_IT+0x54>
 800f7c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d003      	beq.n	800f7d0 <HAL_TIM_OC_Start_IT+0x54>
 800f7c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d103      	bne.n	800f7d8 <HAL_TIM_OC_Start_IT+0x5c>
    __HAL_TIM_MOE_ENABLE(htim);
 800f7d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f7d6:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7d8:	6822      	ldr	r2, [r4, #0]
 800f7da:	6891      	ldr	r1, [r2, #8]
 800f7dc:	4b10      	ldr	r3, [pc, #64]	; (800f820 <HAL_TIM_OC_Start_IT+0xa4>)
 800f7de:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7e0:	2b06      	cmp	r3, #6
 800f7e2:	d006      	beq.n	800f7f2 <HAL_TIM_OC_Start_IT+0x76>
 800f7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7e8:	d003      	beq.n	800f7f2 <HAL_TIM_OC_Start_IT+0x76>
    __HAL_TIM_ENABLE(htim);
 800f7ea:	6813      	ldr	r3, [r2, #0]
 800f7ec:	f043 0301 	orr.w	r3, r3, #1
 800f7f0:	6013      	str	r3, [r2, #0]
}
 800f7f2:	2000      	movs	r0, #0
 800f7f4:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f7f6:	6802      	ldr	r2, [r0, #0]
 800f7f8:	68d3      	ldr	r3, [r2, #12]
 800f7fa:	f043 0304 	orr.w	r3, r3, #4
 800f7fe:	60d3      	str	r3, [r2, #12]
      break;
 800f800:	e7ce      	b.n	800f7a0 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f802:	6802      	ldr	r2, [r0, #0]
 800f804:	68d3      	ldr	r3, [r2, #12]
 800f806:	f043 0308 	orr.w	r3, r3, #8
 800f80a:	60d3      	str	r3, [r2, #12]
      break;
 800f80c:	e7c8      	b.n	800f7a0 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f80e:	6802      	ldr	r2, [r0, #0]
 800f810:	68d3      	ldr	r3, [r2, #12]
 800f812:	f043 0310 	orr.w	r3, r3, #16
 800f816:	60d3      	str	r3, [r2, #12]
      break;
 800f818:	e7c2      	b.n	800f7a0 <HAL_TIM_OC_Start_IT+0x24>
 800f81a:	bf00      	nop
 800f81c:	40012c00 	.word	0x40012c00
 800f820:	00010007 	.word	0x00010007

0800f824 <HAL_TIM_OC_Stop_IT>:
{
 800f824:	b510      	push	{r4, lr}
 800f826:	4604      	mov	r4, r0
  switch (Channel)
 800f828:	290c      	cmp	r1, #12
 800f82a:	d80d      	bhi.n	800f848 <HAL_TIM_OC_Stop_IT+0x24>
 800f82c:	e8df f001 	tbb	[pc, r1]
 800f830:	0c0c0c07 	.word	0x0c0c0c07
 800f834:	0c0c0c43 	.word	0x0c0c0c43
 800f838:	0c0c0c49 	.word	0x0c0c0c49
 800f83c:	4f          	.byte	0x4f
 800f83d:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f83e:	6802      	ldr	r2, [r0, #0]
 800f840:	68d3      	ldr	r3, [r2, #12]
 800f842:	f023 0302 	bic.w	r3, r3, #2
 800f846:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f848:	2200      	movs	r2, #0
 800f84a:	6820      	ldr	r0, [r4, #0]
 800f84c:	f7ff ff18 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f850:	6823      	ldr	r3, [r4, #0]
 800f852:	4a22      	ldr	r2, [pc, #136]	; (800f8dc <HAL_TIM_OC_Stop_IT+0xb8>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d00f      	beq.n	800f878 <HAL_TIM_OC_Stop_IT+0x54>
 800f858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d00b      	beq.n	800f878 <HAL_TIM_OC_Stop_IT+0x54>
 800f860:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800f864:	4293      	cmp	r3, r2
 800f866:	d007      	beq.n	800f878 <HAL_TIM_OC_Stop_IT+0x54>
 800f868:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d003      	beq.n	800f878 <HAL_TIM_OC_Stop_IT+0x54>
 800f870:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f874:	4293      	cmp	r3, r2
 800f876:	d10d      	bne.n	800f894 <HAL_TIM_OC_Stop_IT+0x70>
    __HAL_TIM_MOE_DISABLE(htim);
 800f878:	6a19      	ldr	r1, [r3, #32]
 800f87a:	f241 1211 	movw	r2, #4369	; 0x1111
 800f87e:	4211      	tst	r1, r2
 800f880:	d108      	bne.n	800f894 <HAL_TIM_OC_Stop_IT+0x70>
 800f882:	6a19      	ldr	r1, [r3, #32]
 800f884:	f240 4244 	movw	r2, #1092	; 0x444
 800f888:	4211      	tst	r1, r2
 800f88a:	d103      	bne.n	800f894 <HAL_TIM_OC_Stop_IT+0x70>
 800f88c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f88e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f892:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800f894:	6823      	ldr	r3, [r4, #0]
 800f896:	6a19      	ldr	r1, [r3, #32]
 800f898:	f241 1211 	movw	r2, #4369	; 0x1111
 800f89c:	4211      	tst	r1, r2
 800f89e:	d108      	bne.n	800f8b2 <HAL_TIM_OC_Stop_IT+0x8e>
 800f8a0:	6a19      	ldr	r1, [r3, #32]
 800f8a2:	f240 4244 	movw	r2, #1092	; 0x444
 800f8a6:	4211      	tst	r1, r2
 800f8a8:	d103      	bne.n	800f8b2 <HAL_TIM_OC_Stop_IT+0x8e>
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	f022 0201 	bic.w	r2, r2, #1
 800f8b0:	601a      	str	r2, [r3, #0]
}
 800f8b2:	2000      	movs	r0, #0
 800f8b4:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f8b6:	6802      	ldr	r2, [r0, #0]
 800f8b8:	68d3      	ldr	r3, [r2, #12]
 800f8ba:	f023 0304 	bic.w	r3, r3, #4
 800f8be:	60d3      	str	r3, [r2, #12]
      break;
 800f8c0:	e7c2      	b.n	800f848 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f8c2:	6802      	ldr	r2, [r0, #0]
 800f8c4:	68d3      	ldr	r3, [r2, #12]
 800f8c6:	f023 0308 	bic.w	r3, r3, #8
 800f8ca:	60d3      	str	r3, [r2, #12]
      break;
 800f8cc:	e7bc      	b.n	800f848 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f8ce:	6802      	ldr	r2, [r0, #0]
 800f8d0:	68d3      	ldr	r3, [r2, #12]
 800f8d2:	f023 0310 	bic.w	r3, r3, #16
 800f8d6:	60d3      	str	r3, [r2, #12]
      break;
 800f8d8:	e7b6      	b.n	800f848 <HAL_TIM_OC_Stop_IT+0x24>
 800f8da:	bf00      	nop
 800f8dc:	40012c00 	.word	0x40012c00

0800f8e0 <HAL_TIM_OC_Start_DMA>:
{
 800f8e0:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800f8e2:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800f8e6:	b2f6      	uxtb	r6, r6
 800f8e8:	2e02      	cmp	r6, #2
 800f8ea:	f000 80a1 	beq.w	800fa30 <HAL_TIM_OC_Start_DMA+0x150>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800f8ee:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800f8f2:	b2f6      	uxtb	r6, r6
 800f8f4:	2e01      	cmp	r6, #1
 800f8f6:	d00d      	beq.n	800f914 <HAL_TIM_OC_Start_DMA+0x34>
 800f8f8:	4616      	mov	r6, r2
 800f8fa:	460d      	mov	r5, r1
 800f8fc:	4604      	mov	r4, r0
  switch (Channel)
 800f8fe:	290c      	cmp	r1, #12
 800f900:	d827      	bhi.n	800f952 <HAL_TIM_OC_Start_DMA+0x72>
 800f902:	e8df f001 	tbb	[pc, r1]
 800f906:	2610      	.short	0x2610
 800f908:	26522626 	.word	0x26522626
 800f90c:	26692626 	.word	0x26692626
 800f910:	2626      	.short	0x2626
 800f912:	7f          	.byte	0x7f
 800f913:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800f914:	b11a      	cbz	r2, 800f91e <HAL_TIM_OC_Start_DMA+0x3e>
      htim->State = HAL_TIM_STATE_BUSY;
 800f916:	2402      	movs	r4, #2
 800f918:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800f91c:	e7ec      	b.n	800f8f8 <HAL_TIM_OC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d0f9      	beq.n	800f916 <HAL_TIM_OC_Start_DMA+0x36>
      return HAL_ERROR;
 800f922:	2001      	movs	r0, #1
 800f924:	e040      	b.n	800f9a8 <HAL_TIM_OC_Start_DMA+0xc8>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f926:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800f928:	4948      	ldr	r1, [pc, #288]	; (800fa4c <HAL_TIM_OC_Start_DMA+0x16c>)
 800f92a:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f92c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800f92e:	4948      	ldr	r1, [pc, #288]	; (800fa50 <HAL_TIM_OC_Start_DMA+0x170>)
 800f930:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f932:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800f934:	4947      	ldr	r1, [pc, #284]	; (800fa54 <HAL_TIM_OC_Start_DMA+0x174>)
 800f936:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800f938:	6802      	ldr	r2, [r0, #0]
 800f93a:	3234      	adds	r2, #52	; 0x34
 800f93c:	4631      	mov	r1, r6
 800f93e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f940:	f7f5 fb17 	bl	8004f72 <HAL_DMA_Start_IT>
 800f944:	2800      	cmp	r0, #0
 800f946:	d175      	bne.n	800fa34 <HAL_TIM_OC_Start_DMA+0x154>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f948:	6822      	ldr	r2, [r4, #0]
 800f94a:	68d3      	ldr	r3, [r2, #12]
 800f94c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f950:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f952:	2201      	movs	r2, #1
 800f954:	4629      	mov	r1, r5
 800f956:	6820      	ldr	r0, [r4, #0]
 800f958:	f7ff fe92 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f95c:	6823      	ldr	r3, [r4, #0]
 800f95e:	4a3e      	ldr	r2, [pc, #248]	; (800fa58 <HAL_TIM_OC_Start_DMA+0x178>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d00f      	beq.n	800f984 <HAL_TIM_OC_Start_DMA+0xa4>
 800f964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f968:	4293      	cmp	r3, r2
 800f96a:	d00b      	beq.n	800f984 <HAL_TIM_OC_Start_DMA+0xa4>
 800f96c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800f970:	4293      	cmp	r3, r2
 800f972:	d007      	beq.n	800f984 <HAL_TIM_OC_Start_DMA+0xa4>
 800f974:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f978:	4293      	cmp	r3, r2
 800f97a:	d003      	beq.n	800f984 <HAL_TIM_OC_Start_DMA+0xa4>
 800f97c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f980:	4293      	cmp	r3, r2
 800f982:	d103      	bne.n	800f98c <HAL_TIM_OC_Start_DMA+0xac>
    __HAL_TIM_MOE_ENABLE(htim);
 800f984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f98a:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f98c:	6822      	ldr	r2, [r4, #0]
 800f98e:	6891      	ldr	r1, [r2, #8]
 800f990:	4b32      	ldr	r3, [pc, #200]	; (800fa5c <HAL_TIM_OC_Start_DMA+0x17c>)
 800f992:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f994:	2b06      	cmp	r3, #6
 800f996:	d055      	beq.n	800fa44 <HAL_TIM_OC_Start_DMA+0x164>
 800f998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f99c:	d054      	beq.n	800fa48 <HAL_TIM_OC_Start_DMA+0x168>
    __HAL_TIM_ENABLE(htim);
 800f99e:	6813      	ldr	r3, [r2, #0]
 800f9a0:	f043 0301 	orr.w	r3, r3, #1
 800f9a4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800f9a6:	2000      	movs	r0, #0
}
 800f9a8:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f9ac:	4927      	ldr	r1, [pc, #156]	; (800fa4c <HAL_TIM_OC_Start_DMA+0x16c>)
 800f9ae:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9b0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f9b2:	4927      	ldr	r1, [pc, #156]	; (800fa50 <HAL_TIM_OC_Start_DMA+0x170>)
 800f9b4:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f9b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f9b8:	4926      	ldr	r1, [pc, #152]	; (800fa54 <HAL_TIM_OC_Start_DMA+0x174>)
 800f9ba:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800f9bc:	6802      	ldr	r2, [r0, #0]
 800f9be:	3238      	adds	r2, #56	; 0x38
 800f9c0:	4631      	mov	r1, r6
 800f9c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f9c4:	f7f5 fad5 	bl	8004f72 <HAL_DMA_Start_IT>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d135      	bne.n	800fa38 <HAL_TIM_OC_Start_DMA+0x158>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f9cc:	6822      	ldr	r2, [r4, #0]
 800f9ce:	68d3      	ldr	r3, [r2, #12]
 800f9d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f9d4:	60d3      	str	r3, [r2, #12]
      break;
 800f9d6:	e7bc      	b.n	800f952 <HAL_TIM_OC_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f9da:	491c      	ldr	r1, [pc, #112]	; (800fa4c <HAL_TIM_OC_Start_DMA+0x16c>)
 800f9dc:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9de:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f9e0:	491b      	ldr	r1, [pc, #108]	; (800fa50 <HAL_TIM_OC_Start_DMA+0x170>)
 800f9e2:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f9e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f9e6:	491b      	ldr	r1, [pc, #108]	; (800fa54 <HAL_TIM_OC_Start_DMA+0x174>)
 800f9e8:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800f9ea:	6802      	ldr	r2, [r0, #0]
 800f9ec:	323c      	adds	r2, #60	; 0x3c
 800f9ee:	4631      	mov	r1, r6
 800f9f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f9f2:	f7f5 fabe 	bl	8004f72 <HAL_DMA_Start_IT>
 800f9f6:	bb08      	cbnz	r0, 800fa3c <HAL_TIM_OC_Start_DMA+0x15c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f9f8:	6822      	ldr	r2, [r4, #0]
 800f9fa:	68d3      	ldr	r3, [r2, #12]
 800f9fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fa00:	60d3      	str	r3, [r2, #12]
      break;
 800fa02:	e7a6      	b.n	800f952 <HAL_TIM_OC_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa04:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800fa06:	4911      	ldr	r1, [pc, #68]	; (800fa4c <HAL_TIM_OC_Start_DMA+0x16c>)
 800fa08:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa0a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800fa0c:	4910      	ldr	r1, [pc, #64]	; (800fa50 <HAL_TIM_OC_Start_DMA+0x170>)
 800fa0e:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fa10:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800fa12:	4910      	ldr	r1, [pc, #64]	; (800fa54 <HAL_TIM_OC_Start_DMA+0x174>)
 800fa14:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800fa16:	6802      	ldr	r2, [r0, #0]
 800fa18:	3240      	adds	r2, #64	; 0x40
 800fa1a:	4631      	mov	r1, r6
 800fa1c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800fa1e:	f7f5 faa8 	bl	8004f72 <HAL_DMA_Start_IT>
 800fa22:	b968      	cbnz	r0, 800fa40 <HAL_TIM_OC_Start_DMA+0x160>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fa24:	6822      	ldr	r2, [r4, #0]
 800fa26:	68d3      	ldr	r3, [r2, #12]
 800fa28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fa2c:	60d3      	str	r3, [r2, #12]
      break;
 800fa2e:	e790      	b.n	800f952 <HAL_TIM_OC_Start_DMA+0x72>
    return HAL_BUSY;
 800fa30:	2002      	movs	r0, #2
 800fa32:	e7b9      	b.n	800f9a8 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800fa34:	2001      	movs	r0, #1
 800fa36:	e7b7      	b.n	800f9a8 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800fa38:	2001      	movs	r0, #1
 800fa3a:	e7b5      	b.n	800f9a8 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800fa3c:	2001      	movs	r0, #1
 800fa3e:	e7b3      	b.n	800f9a8 <HAL_TIM_OC_Start_DMA+0xc8>
        return HAL_ERROR;
 800fa40:	2001      	movs	r0, #1
 800fa42:	e7b1      	b.n	800f9a8 <HAL_TIM_OC_Start_DMA+0xc8>
  return HAL_OK;
 800fa44:	2000      	movs	r0, #0
 800fa46:	e7af      	b.n	800f9a8 <HAL_TIM_OC_Start_DMA+0xc8>
 800fa48:	2000      	movs	r0, #0
 800fa4a:	e7ad      	b.n	800f9a8 <HAL_TIM_OC_Start_DMA+0xc8>
 800fa4c:	0800e7ed 	.word	0x0800e7ed
 800fa50:	0800e833 	.word	0x0800e833
 800fa54:	0800ea37 	.word	0x0800ea37
 800fa58:	40012c00 	.word	0x40012c00
 800fa5c:	00010007 	.word	0x00010007

0800fa60 <HAL_TIM_OC_Stop_DMA>:
{
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4604      	mov	r4, r0
 800fa64:	460d      	mov	r5, r1
  switch (Channel)
 800fa66:	290c      	cmp	r1, #12
 800fa68:	d810      	bhi.n	800fa8c <HAL_TIM_OC_Stop_DMA+0x2c>
 800fa6a:	e8df f001 	tbb	[pc, r1]
 800fa6e:	0f07      	.short	0x0f07
 800fa70:	0f4a0f0f 	.word	0x0f4a0f0f
 800fa74:	0f530f0f 	.word	0x0f530f0f
 800fa78:	0f0f      	.short	0x0f0f
 800fa7a:	5c          	.byte	0x5c
 800fa7b:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800fa7c:	6802      	ldr	r2, [r0, #0]
 800fa7e:	68d3      	ldr	r3, [r2, #12]
 800fa80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa84:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800fa86:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fa88:	f7f5 fae5 	bl	8005056 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	4629      	mov	r1, r5
 800fa90:	6820      	ldr	r0, [r4, #0]
 800fa92:	f7ff fdf5 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa96:	6823      	ldr	r3, [r4, #0]
 800fa98:	4a27      	ldr	r2, [pc, #156]	; (800fb38 <HAL_TIM_OC_Stop_DMA+0xd8>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d00f      	beq.n	800fabe <HAL_TIM_OC_Stop_DMA+0x5e>
 800fa9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d00b      	beq.n	800fabe <HAL_TIM_OC_Stop_DMA+0x5e>
 800faa6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800faaa:	4293      	cmp	r3, r2
 800faac:	d007      	beq.n	800fabe <HAL_TIM_OC_Stop_DMA+0x5e>
 800faae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d003      	beq.n	800fabe <HAL_TIM_OC_Stop_DMA+0x5e>
 800fab6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800faba:	4293      	cmp	r3, r2
 800fabc:	d10d      	bne.n	800fada <HAL_TIM_OC_Stop_DMA+0x7a>
    __HAL_TIM_MOE_DISABLE(htim);
 800fabe:	6a19      	ldr	r1, [r3, #32]
 800fac0:	f241 1211 	movw	r2, #4369	; 0x1111
 800fac4:	4211      	tst	r1, r2
 800fac6:	d108      	bne.n	800fada <HAL_TIM_OC_Stop_DMA+0x7a>
 800fac8:	6a19      	ldr	r1, [r3, #32]
 800faca:	f240 4244 	movw	r2, #1092	; 0x444
 800face:	4211      	tst	r1, r2
 800fad0:	d103      	bne.n	800fada <HAL_TIM_OC_Stop_DMA+0x7a>
 800fad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fad8:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800fada:	6823      	ldr	r3, [r4, #0]
 800fadc:	6a19      	ldr	r1, [r3, #32]
 800fade:	f241 1211 	movw	r2, #4369	; 0x1111
 800fae2:	4211      	tst	r1, r2
 800fae4:	d108      	bne.n	800faf8 <HAL_TIM_OC_Stop_DMA+0x98>
 800fae6:	6a19      	ldr	r1, [r3, #32]
 800fae8:	f240 4244 	movw	r2, #1092	; 0x444
 800faec:	4211      	tst	r1, r2
 800faee:	d103      	bne.n	800faf8 <HAL_TIM_OC_Stop_DMA+0x98>
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	f022 0201 	bic.w	r2, r2, #1
 800faf6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800faf8:	2301      	movs	r3, #1
 800fafa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800fafe:	2000      	movs	r0, #0
 800fb00:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800fb02:	6802      	ldr	r2, [r0, #0]
 800fb04:	68d3      	ldr	r3, [r2, #12]
 800fb06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb0a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800fb0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800fb0e:	f7f5 faa2 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800fb12:	e7bb      	b.n	800fa8c <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800fb14:	6802      	ldr	r2, [r0, #0]
 800fb16:	68d3      	ldr	r3, [r2, #12]
 800fb18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb1c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800fb1e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800fb20:	f7f5 fa99 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800fb24:	e7b2      	b.n	800fa8c <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800fb26:	6802      	ldr	r2, [r0, #0]
 800fb28:	68d3      	ldr	r3, [r2, #12]
 800fb2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb2e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800fb30:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800fb32:	f7f5 fa90 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800fb36:	e7a9      	b.n	800fa8c <HAL_TIM_OC_Stop_DMA+0x2c>
 800fb38:	40012c00 	.word	0x40012c00

0800fb3c <HAL_TIM_PWM_Start>:
{
 800fb3c:	b510      	push	{r4, lr}
 800fb3e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb40:	2201      	movs	r2, #1
 800fb42:	6800      	ldr	r0, [r0, #0]
 800fb44:	f7ff fd9c 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fb48:	6823      	ldr	r3, [r4, #0]
 800fb4a:	4a13      	ldr	r2, [pc, #76]	; (800fb98 <HAL_TIM_PWM_Start+0x5c>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d00f      	beq.n	800fb70 <HAL_TIM_PWM_Start+0x34>
 800fb50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d00b      	beq.n	800fb70 <HAL_TIM_PWM_Start+0x34>
 800fb58:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d007      	beq.n	800fb70 <HAL_TIM_PWM_Start+0x34>
 800fb60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d003      	beq.n	800fb70 <HAL_TIM_PWM_Start+0x34>
 800fb68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d103      	bne.n	800fb78 <HAL_TIM_PWM_Start+0x3c>
    __HAL_TIM_MOE_ENABLE(htim);
 800fb70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb76:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb78:	6822      	ldr	r2, [r4, #0]
 800fb7a:	6891      	ldr	r1, [r2, #8]
 800fb7c:	4b07      	ldr	r3, [pc, #28]	; (800fb9c <HAL_TIM_PWM_Start+0x60>)
 800fb7e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb80:	2b06      	cmp	r3, #6
 800fb82:	d006      	beq.n	800fb92 <HAL_TIM_PWM_Start+0x56>
 800fb84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb88:	d003      	beq.n	800fb92 <HAL_TIM_PWM_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800fb8a:	6813      	ldr	r3, [r2, #0]
 800fb8c:	f043 0301 	orr.w	r3, r3, #1
 800fb90:	6013      	str	r3, [r2, #0]
}
 800fb92:	2000      	movs	r0, #0
 800fb94:	bd10      	pop	{r4, pc}
 800fb96:	bf00      	nop
 800fb98:	40012c00 	.word	0x40012c00
 800fb9c:	00010007 	.word	0x00010007

0800fba0 <HAL_TIM_PWM_Stop>:
{
 800fba0:	b510      	push	{r4, lr}
 800fba2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fba4:	2200      	movs	r2, #0
 800fba6:	6800      	ldr	r0, [r0, #0]
 800fba8:	f7ff fd6a 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fbac:	6823      	ldr	r3, [r4, #0]
 800fbae:	4a1a      	ldr	r2, [pc, #104]	; (800fc18 <HAL_TIM_PWM_Stop+0x78>)
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d00f      	beq.n	800fbd4 <HAL_TIM_PWM_Stop+0x34>
 800fbb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d00b      	beq.n	800fbd4 <HAL_TIM_PWM_Stop+0x34>
 800fbbc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d007      	beq.n	800fbd4 <HAL_TIM_PWM_Stop+0x34>
 800fbc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d003      	beq.n	800fbd4 <HAL_TIM_PWM_Stop+0x34>
 800fbcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d10d      	bne.n	800fbf0 <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 800fbd4:	6a19      	ldr	r1, [r3, #32]
 800fbd6:	f241 1211 	movw	r2, #4369	; 0x1111
 800fbda:	4211      	tst	r1, r2
 800fbdc:	d108      	bne.n	800fbf0 <HAL_TIM_PWM_Stop+0x50>
 800fbde:	6a19      	ldr	r1, [r3, #32]
 800fbe0:	f240 4244 	movw	r2, #1092	; 0x444
 800fbe4:	4211      	tst	r1, r2
 800fbe6:	d103      	bne.n	800fbf0 <HAL_TIM_PWM_Stop+0x50>
 800fbe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fbee:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800fbf0:	6823      	ldr	r3, [r4, #0]
 800fbf2:	6a19      	ldr	r1, [r3, #32]
 800fbf4:	f241 1211 	movw	r2, #4369	; 0x1111
 800fbf8:	4211      	tst	r1, r2
 800fbfa:	d108      	bne.n	800fc0e <HAL_TIM_PWM_Stop+0x6e>
 800fbfc:	6a19      	ldr	r1, [r3, #32]
 800fbfe:	f240 4244 	movw	r2, #1092	; 0x444
 800fc02:	4211      	tst	r1, r2
 800fc04:	d103      	bne.n	800fc0e <HAL_TIM_PWM_Stop+0x6e>
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	f022 0201 	bic.w	r2, r2, #1
 800fc0c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800fc14:	2000      	movs	r0, #0
 800fc16:	bd10      	pop	{r4, pc}
 800fc18:	40012c00 	.word	0x40012c00

0800fc1c <HAL_TIM_PWM_Start_IT>:
{
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	4604      	mov	r4, r0
  switch (Channel)
 800fc20:	290c      	cmp	r1, #12
 800fc22:	d80d      	bhi.n	800fc40 <HAL_TIM_PWM_Start_IT+0x24>
 800fc24:	e8df f001 	tbb	[pc, r1]
 800fc28:	0c0c0c07 	.word	0x0c0c0c07
 800fc2c:	0c0c0c37 	.word	0x0c0c0c37
 800fc30:	0c0c0c3d 	.word	0x0c0c0c3d
 800fc34:	43          	.byte	0x43
 800fc35:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800fc36:	6802      	ldr	r2, [r0, #0]
 800fc38:	68d3      	ldr	r3, [r2, #12]
 800fc3a:	f043 0302 	orr.w	r3, r3, #2
 800fc3e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fc40:	2201      	movs	r2, #1
 800fc42:	6820      	ldr	r0, [r4, #0]
 800fc44:	f7ff fd1c 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fc48:	6823      	ldr	r3, [r4, #0]
 800fc4a:	4a1c      	ldr	r2, [pc, #112]	; (800fcbc <HAL_TIM_PWM_Start_IT+0xa0>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d00f      	beq.n	800fc70 <HAL_TIM_PWM_Start_IT+0x54>
 800fc50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d00b      	beq.n	800fc70 <HAL_TIM_PWM_Start_IT+0x54>
 800fc58:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d007      	beq.n	800fc70 <HAL_TIM_PWM_Start_IT+0x54>
 800fc60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d003      	beq.n	800fc70 <HAL_TIM_PWM_Start_IT+0x54>
 800fc68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d103      	bne.n	800fc78 <HAL_TIM_PWM_Start_IT+0x5c>
    __HAL_TIM_MOE_ENABLE(htim);
 800fc70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fc76:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc78:	6822      	ldr	r2, [r4, #0]
 800fc7a:	6891      	ldr	r1, [r2, #8]
 800fc7c:	4b10      	ldr	r3, [pc, #64]	; (800fcc0 <HAL_TIM_PWM_Start_IT+0xa4>)
 800fc7e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc80:	2b06      	cmp	r3, #6
 800fc82:	d006      	beq.n	800fc92 <HAL_TIM_PWM_Start_IT+0x76>
 800fc84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc88:	d003      	beq.n	800fc92 <HAL_TIM_PWM_Start_IT+0x76>
    __HAL_TIM_ENABLE(htim);
 800fc8a:	6813      	ldr	r3, [r2, #0]
 800fc8c:	f043 0301 	orr.w	r3, r3, #1
 800fc90:	6013      	str	r3, [r2, #0]
}
 800fc92:	2000      	movs	r0, #0
 800fc94:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800fc96:	6802      	ldr	r2, [r0, #0]
 800fc98:	68d3      	ldr	r3, [r2, #12]
 800fc9a:	f043 0304 	orr.w	r3, r3, #4
 800fc9e:	60d3      	str	r3, [r2, #12]
      break;
 800fca0:	e7ce      	b.n	800fc40 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800fca2:	6802      	ldr	r2, [r0, #0]
 800fca4:	68d3      	ldr	r3, [r2, #12]
 800fca6:	f043 0308 	orr.w	r3, r3, #8
 800fcaa:	60d3      	str	r3, [r2, #12]
      break;
 800fcac:	e7c8      	b.n	800fc40 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800fcae:	6802      	ldr	r2, [r0, #0]
 800fcb0:	68d3      	ldr	r3, [r2, #12]
 800fcb2:	f043 0310 	orr.w	r3, r3, #16
 800fcb6:	60d3      	str	r3, [r2, #12]
      break;
 800fcb8:	e7c2      	b.n	800fc40 <HAL_TIM_PWM_Start_IT+0x24>
 800fcba:	bf00      	nop
 800fcbc:	40012c00 	.word	0x40012c00
 800fcc0:	00010007 	.word	0x00010007

0800fcc4 <HAL_TIM_PWM_Stop_IT>:
{
 800fcc4:	b510      	push	{r4, lr}
 800fcc6:	4604      	mov	r4, r0
  switch (Channel)
 800fcc8:	290c      	cmp	r1, #12
 800fcca:	d80d      	bhi.n	800fce8 <HAL_TIM_PWM_Stop_IT+0x24>
 800fccc:	e8df f001 	tbb	[pc, r1]
 800fcd0:	0c0c0c07 	.word	0x0c0c0c07
 800fcd4:	0c0c0c43 	.word	0x0c0c0c43
 800fcd8:	0c0c0c49 	.word	0x0c0c0c49
 800fcdc:	4f          	.byte	0x4f
 800fcdd:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800fcde:	6802      	ldr	r2, [r0, #0]
 800fce0:	68d3      	ldr	r3, [r2, #12]
 800fce2:	f023 0302 	bic.w	r3, r3, #2
 800fce6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fce8:	2200      	movs	r2, #0
 800fcea:	6820      	ldr	r0, [r4, #0]
 800fcec:	f7ff fcc8 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fcf0:	6823      	ldr	r3, [r4, #0]
 800fcf2:	4a22      	ldr	r2, [pc, #136]	; (800fd7c <HAL_TIM_PWM_Stop_IT+0xb8>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d00f      	beq.n	800fd18 <HAL_TIM_PWM_Stop_IT+0x54>
 800fcf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	d00b      	beq.n	800fd18 <HAL_TIM_PWM_Stop_IT+0x54>
 800fd00:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d007      	beq.n	800fd18 <HAL_TIM_PWM_Stop_IT+0x54>
 800fd08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d003      	beq.n	800fd18 <HAL_TIM_PWM_Stop_IT+0x54>
 800fd10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d10d      	bne.n	800fd34 <HAL_TIM_PWM_Stop_IT+0x70>
    __HAL_TIM_MOE_DISABLE(htim);
 800fd18:	6a19      	ldr	r1, [r3, #32]
 800fd1a:	f241 1211 	movw	r2, #4369	; 0x1111
 800fd1e:	4211      	tst	r1, r2
 800fd20:	d108      	bne.n	800fd34 <HAL_TIM_PWM_Stop_IT+0x70>
 800fd22:	6a19      	ldr	r1, [r3, #32]
 800fd24:	f240 4244 	movw	r2, #1092	; 0x444
 800fd28:	4211      	tst	r1, r2
 800fd2a:	d103      	bne.n	800fd34 <HAL_TIM_PWM_Stop_IT+0x70>
 800fd2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fd32:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800fd34:	6823      	ldr	r3, [r4, #0]
 800fd36:	6a19      	ldr	r1, [r3, #32]
 800fd38:	f241 1211 	movw	r2, #4369	; 0x1111
 800fd3c:	4211      	tst	r1, r2
 800fd3e:	d108      	bne.n	800fd52 <HAL_TIM_PWM_Stop_IT+0x8e>
 800fd40:	6a19      	ldr	r1, [r3, #32]
 800fd42:	f240 4244 	movw	r2, #1092	; 0x444
 800fd46:	4211      	tst	r1, r2
 800fd48:	d103      	bne.n	800fd52 <HAL_TIM_PWM_Stop_IT+0x8e>
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	f022 0201 	bic.w	r2, r2, #1
 800fd50:	601a      	str	r2, [r3, #0]
}
 800fd52:	2000      	movs	r0, #0
 800fd54:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800fd56:	6802      	ldr	r2, [r0, #0]
 800fd58:	68d3      	ldr	r3, [r2, #12]
 800fd5a:	f023 0304 	bic.w	r3, r3, #4
 800fd5e:	60d3      	str	r3, [r2, #12]
      break;
 800fd60:	e7c2      	b.n	800fce8 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800fd62:	6802      	ldr	r2, [r0, #0]
 800fd64:	68d3      	ldr	r3, [r2, #12]
 800fd66:	f023 0308 	bic.w	r3, r3, #8
 800fd6a:	60d3      	str	r3, [r2, #12]
      break;
 800fd6c:	e7bc      	b.n	800fce8 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800fd6e:	6802      	ldr	r2, [r0, #0]
 800fd70:	68d3      	ldr	r3, [r2, #12]
 800fd72:	f023 0310 	bic.w	r3, r3, #16
 800fd76:	60d3      	str	r3, [r2, #12]
      break;
 800fd78:	e7b6      	b.n	800fce8 <HAL_TIM_PWM_Stop_IT+0x24>
 800fd7a:	bf00      	nop
 800fd7c:	40012c00 	.word	0x40012c00

0800fd80 <HAL_TIM_PWM_Start_DMA>:
{
 800fd80:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800fd82:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800fd86:	b2f6      	uxtb	r6, r6
 800fd88:	2e02      	cmp	r6, #2
 800fd8a:	f000 80a1 	beq.w	800fed0 <HAL_TIM_PWM_Start_DMA+0x150>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800fd8e:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
 800fd92:	b2f6      	uxtb	r6, r6
 800fd94:	2e01      	cmp	r6, #1
 800fd96:	d00d      	beq.n	800fdb4 <HAL_TIM_PWM_Start_DMA+0x34>
 800fd98:	4616      	mov	r6, r2
 800fd9a:	460d      	mov	r5, r1
 800fd9c:	4604      	mov	r4, r0
  switch (Channel)
 800fd9e:	290c      	cmp	r1, #12
 800fda0:	d827      	bhi.n	800fdf2 <HAL_TIM_PWM_Start_DMA+0x72>
 800fda2:	e8df f001 	tbb	[pc, r1]
 800fda6:	2610      	.short	0x2610
 800fda8:	26522626 	.word	0x26522626
 800fdac:	26692626 	.word	0x26692626
 800fdb0:	2626      	.short	0x2626
 800fdb2:	7f          	.byte	0x7f
 800fdb3:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 800fdb4:	b11a      	cbz	r2, 800fdbe <HAL_TIM_PWM_Start_DMA+0x3e>
      htim->State = HAL_TIM_STATE_BUSY;
 800fdb6:	2402      	movs	r4, #2
 800fdb8:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800fdbc:	e7ec      	b.n	800fd98 <HAL_TIM_PWM_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d0f9      	beq.n	800fdb6 <HAL_TIM_PWM_Start_DMA+0x36>
      return HAL_ERROR;
 800fdc2:	2001      	movs	r0, #1
 800fdc4:	e040      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0xc8>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fdc6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800fdc8:	4948      	ldr	r1, [pc, #288]	; (800feec <HAL_TIM_PWM_Start_DMA+0x16c>)
 800fdca:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fdcc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800fdce:	4948      	ldr	r1, [pc, #288]	; (800fef0 <HAL_TIM_PWM_Start_DMA+0x170>)
 800fdd0:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fdd2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800fdd4:	4947      	ldr	r1, [pc, #284]	; (800fef4 <HAL_TIM_PWM_Start_DMA+0x174>)
 800fdd6:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800fdd8:	6802      	ldr	r2, [r0, #0]
 800fdda:	3234      	adds	r2, #52	; 0x34
 800fddc:	4631      	mov	r1, r6
 800fdde:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fde0:	f7f5 f8c7 	bl	8004f72 <HAL_DMA_Start_IT>
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d175      	bne.n	800fed4 <HAL_TIM_PWM_Start_DMA+0x154>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fde8:	6822      	ldr	r2, [r4, #0]
 800fdea:	68d3      	ldr	r3, [r2, #12]
 800fdec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fdf0:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	6820      	ldr	r0, [r4, #0]
 800fdf8:	f7ff fc42 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fdfc:	6823      	ldr	r3, [r4, #0]
 800fdfe:	4a3e      	ldr	r2, [pc, #248]	; (800fef8 <HAL_TIM_PWM_Start_DMA+0x178>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d00f      	beq.n	800fe24 <HAL_TIM_PWM_Start_DMA+0xa4>
 800fe04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d00b      	beq.n	800fe24 <HAL_TIM_PWM_Start_DMA+0xa4>
 800fe0c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d007      	beq.n	800fe24 <HAL_TIM_PWM_Start_DMA+0xa4>
 800fe14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d003      	beq.n	800fe24 <HAL_TIM_PWM_Start_DMA+0xa4>
 800fe1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d103      	bne.n	800fe2c <HAL_TIM_PWM_Start_DMA+0xac>
    __HAL_TIM_MOE_ENABLE(htim);
 800fe24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fe2a:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fe2c:	6822      	ldr	r2, [r4, #0]
 800fe2e:	6891      	ldr	r1, [r2, #8]
 800fe30:	4b32      	ldr	r3, [pc, #200]	; (800fefc <HAL_TIM_PWM_Start_DMA+0x17c>)
 800fe32:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe34:	2b06      	cmp	r3, #6
 800fe36:	d055      	beq.n	800fee4 <HAL_TIM_PWM_Start_DMA+0x164>
 800fe38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe3c:	d054      	beq.n	800fee8 <HAL_TIM_PWM_Start_DMA+0x168>
    __HAL_TIM_ENABLE(htim);
 800fe3e:	6813      	ldr	r3, [r2, #0]
 800fe40:	f043 0301 	orr.w	r3, r3, #1
 800fe44:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800fe46:	2000      	movs	r0, #0
}
 800fe48:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fe4a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800fe4c:	4927      	ldr	r1, [pc, #156]	; (800feec <HAL_TIM_PWM_Start_DMA+0x16c>)
 800fe4e:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fe50:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800fe52:	4927      	ldr	r1, [pc, #156]	; (800fef0 <HAL_TIM_PWM_Start_DMA+0x170>)
 800fe54:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fe56:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800fe58:	4926      	ldr	r1, [pc, #152]	; (800fef4 <HAL_TIM_PWM_Start_DMA+0x174>)
 800fe5a:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800fe5c:	6802      	ldr	r2, [r0, #0]
 800fe5e:	3238      	adds	r2, #56	; 0x38
 800fe60:	4631      	mov	r1, r6
 800fe62:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800fe64:	f7f5 f885 	bl	8004f72 <HAL_DMA_Start_IT>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d135      	bne.n	800fed8 <HAL_TIM_PWM_Start_DMA+0x158>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fe6c:	6822      	ldr	r2, [r4, #0]
 800fe6e:	68d3      	ldr	r3, [r2, #12]
 800fe70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fe74:	60d3      	str	r3, [r2, #12]
      break;
 800fe76:	e7bc      	b.n	800fdf2 <HAL_TIM_PWM_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fe78:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fe7a:	491c      	ldr	r1, [pc, #112]	; (800feec <HAL_TIM_PWM_Start_DMA+0x16c>)
 800fe7c:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fe7e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fe80:	491b      	ldr	r1, [pc, #108]	; (800fef0 <HAL_TIM_PWM_Start_DMA+0x170>)
 800fe82:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fe84:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fe86:	491b      	ldr	r1, [pc, #108]	; (800fef4 <HAL_TIM_PWM_Start_DMA+0x174>)
 800fe88:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800fe8a:	6802      	ldr	r2, [r0, #0]
 800fe8c:	323c      	adds	r2, #60	; 0x3c
 800fe8e:	4631      	mov	r1, r6
 800fe90:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800fe92:	f7f5 f86e 	bl	8004f72 <HAL_DMA_Start_IT>
 800fe96:	bb08      	cbnz	r0, 800fedc <HAL_TIM_PWM_Start_DMA+0x15c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fe98:	6822      	ldr	r2, [r4, #0]
 800fe9a:	68d3      	ldr	r3, [r2, #12]
 800fe9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fea0:	60d3      	str	r3, [r2, #12]
      break;
 800fea2:	e7a6      	b.n	800fdf2 <HAL_TIM_PWM_Start_DMA+0x72>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fea4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800fea6:	4911      	ldr	r1, [pc, #68]	; (800feec <HAL_TIM_PWM_Start_DMA+0x16c>)
 800fea8:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800feaa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800feac:	4910      	ldr	r1, [pc, #64]	; (800fef0 <HAL_TIM_PWM_Start_DMA+0x170>)
 800feae:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800feb0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800feb2:	4910      	ldr	r1, [pc, #64]	; (800fef4 <HAL_TIM_PWM_Start_DMA+0x174>)
 800feb4:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800feb6:	6802      	ldr	r2, [r0, #0]
 800feb8:	3240      	adds	r2, #64	; 0x40
 800feba:	4631      	mov	r1, r6
 800febc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800febe:	f7f5 f858 	bl	8004f72 <HAL_DMA_Start_IT>
 800fec2:	b968      	cbnz	r0, 800fee0 <HAL_TIM_PWM_Start_DMA+0x160>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fec4:	6822      	ldr	r2, [r4, #0]
 800fec6:	68d3      	ldr	r3, [r2, #12]
 800fec8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fecc:	60d3      	str	r3, [r2, #12]
      break;
 800fece:	e790      	b.n	800fdf2 <HAL_TIM_PWM_Start_DMA+0x72>
    return HAL_BUSY;
 800fed0:	2002      	movs	r0, #2
 800fed2:	e7b9      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800fed4:	2001      	movs	r0, #1
 800fed6:	e7b7      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800fed8:	2001      	movs	r0, #1
 800feda:	e7b5      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800fedc:	2001      	movs	r0, #1
 800fede:	e7b3      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0xc8>
        return HAL_ERROR;
 800fee0:	2001      	movs	r0, #1
 800fee2:	e7b1      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0xc8>
  return HAL_OK;
 800fee4:	2000      	movs	r0, #0
 800fee6:	e7af      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0xc8>
 800fee8:	2000      	movs	r0, #0
 800feea:	e7ad      	b.n	800fe48 <HAL_TIM_PWM_Start_DMA+0xc8>
 800feec:	0800e7ed 	.word	0x0800e7ed
 800fef0:	0800e833 	.word	0x0800e833
 800fef4:	0800ea37 	.word	0x0800ea37
 800fef8:	40012c00 	.word	0x40012c00
 800fefc:	00010007 	.word	0x00010007

0800ff00 <HAL_TIM_PWM_Stop_DMA>:
{
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4604      	mov	r4, r0
 800ff04:	460d      	mov	r5, r1
  switch (Channel)
 800ff06:	290c      	cmp	r1, #12
 800ff08:	d810      	bhi.n	800ff2c <HAL_TIM_PWM_Stop_DMA+0x2c>
 800ff0a:	e8df f001 	tbb	[pc, r1]
 800ff0e:	0f07      	.short	0x0f07
 800ff10:	0f4a0f0f 	.word	0x0f4a0f0f
 800ff14:	0f530f0f 	.word	0x0f530f0f
 800ff18:	0f0f      	.short	0x0f0f
 800ff1a:	5c          	.byte	0x5c
 800ff1b:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ff1c:	6802      	ldr	r2, [r0, #0]
 800ff1e:	68d3      	ldr	r3, [r2, #12]
 800ff20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ff24:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ff26:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ff28:	f7f5 f895 	bl	8005056 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	4629      	mov	r1, r5
 800ff30:	6820      	ldr	r0, [r4, #0]
 800ff32:	f7ff fba5 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff36:	6823      	ldr	r3, [r4, #0]
 800ff38:	4a27      	ldr	r2, [pc, #156]	; (800ffd8 <HAL_TIM_PWM_Stop_DMA+0xd8>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d00f      	beq.n	800ff5e <HAL_TIM_PWM_Stop_DMA+0x5e>
 800ff3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d00b      	beq.n	800ff5e <HAL_TIM_PWM_Stop_DMA+0x5e>
 800ff46:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d007      	beq.n	800ff5e <HAL_TIM_PWM_Stop_DMA+0x5e>
 800ff4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff52:	4293      	cmp	r3, r2
 800ff54:	d003      	beq.n	800ff5e <HAL_TIM_PWM_Stop_DMA+0x5e>
 800ff56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d10d      	bne.n	800ff7a <HAL_TIM_PWM_Stop_DMA+0x7a>
    __HAL_TIM_MOE_DISABLE(htim);
 800ff5e:	6a19      	ldr	r1, [r3, #32]
 800ff60:	f241 1211 	movw	r2, #4369	; 0x1111
 800ff64:	4211      	tst	r1, r2
 800ff66:	d108      	bne.n	800ff7a <HAL_TIM_PWM_Stop_DMA+0x7a>
 800ff68:	6a19      	ldr	r1, [r3, #32]
 800ff6a:	f240 4244 	movw	r2, #1092	; 0x444
 800ff6e:	4211      	tst	r1, r2
 800ff70:	d103      	bne.n	800ff7a <HAL_TIM_PWM_Stop_DMA+0x7a>
 800ff72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ff78:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800ff7a:	6823      	ldr	r3, [r4, #0]
 800ff7c:	6a19      	ldr	r1, [r3, #32]
 800ff7e:	f241 1211 	movw	r2, #4369	; 0x1111
 800ff82:	4211      	tst	r1, r2
 800ff84:	d108      	bne.n	800ff98 <HAL_TIM_PWM_Stop_DMA+0x98>
 800ff86:	6a19      	ldr	r1, [r3, #32]
 800ff88:	f240 4244 	movw	r2, #1092	; 0x444
 800ff8c:	4211      	tst	r1, r2
 800ff8e:	d103      	bne.n	800ff98 <HAL_TIM_PWM_Stop_DMA+0x98>
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	f022 0201 	bic.w	r2, r2, #1
 800ff96:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800ff98:	2301      	movs	r3, #1
 800ff9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ffa2:	6802      	ldr	r2, [r0, #0]
 800ffa4:	68d3      	ldr	r3, [r2, #12]
 800ffa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffaa:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ffac:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ffae:	f7f5 f852 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800ffb2:	e7bb      	b.n	800ff2c <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ffb4:	6802      	ldr	r2, [r0, #0]
 800ffb6:	68d3      	ldr	r3, [r2, #12]
 800ffb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffbc:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ffbe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800ffc0:	f7f5 f849 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800ffc4:	e7b2      	b.n	800ff2c <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ffc6:	6802      	ldr	r2, [r0, #0]
 800ffc8:	68d3      	ldr	r3, [r2, #12]
 800ffca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffce:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ffd0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ffd2:	f7f5 f840 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 800ffd6:	e7a9      	b.n	800ff2c <HAL_TIM_PWM_Stop_DMA+0x2c>
 800ffd8:	40012c00 	.word	0x40012c00

0800ffdc <HAL_TIM_IC_Start>:
{
 800ffdc:	b510      	push	{r4, lr}
 800ffde:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	6800      	ldr	r0, [r0, #0]
 800ffe4:	f7ff fb4c 	bl	800f680 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ffe8:	6822      	ldr	r2, [r4, #0]
 800ffea:	6891      	ldr	r1, [r2, #8]
 800ffec:	4b06      	ldr	r3, [pc, #24]	; (8010008 <HAL_TIM_IC_Start+0x2c>)
 800ffee:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fff0:	2b06      	cmp	r3, #6
 800fff2:	d006      	beq.n	8010002 <HAL_TIM_IC_Start+0x26>
 800fff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fff8:	d003      	beq.n	8010002 <HAL_TIM_IC_Start+0x26>
    __HAL_TIM_ENABLE(htim);
 800fffa:	6813      	ldr	r3, [r2, #0]
 800fffc:	f043 0301 	orr.w	r3, r3, #1
 8010000:	6013      	str	r3, [r2, #0]
}
 8010002:	2000      	movs	r0, #0
 8010004:	bd10      	pop	{r4, pc}
 8010006:	bf00      	nop
 8010008:	00010007 	.word	0x00010007

0801000c <HAL_TIM_IC_Stop>:
{
 801000c:	b510      	push	{r4, lr}
 801000e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010010:	2200      	movs	r2, #0
 8010012:	6800      	ldr	r0, [r0, #0]
 8010014:	f7ff fb34 	bl	800f680 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8010018:	6823      	ldr	r3, [r4, #0]
 801001a:	6a19      	ldr	r1, [r3, #32]
 801001c:	f241 1211 	movw	r2, #4369	; 0x1111
 8010020:	4211      	tst	r1, r2
 8010022:	d108      	bne.n	8010036 <HAL_TIM_IC_Stop+0x2a>
 8010024:	6a19      	ldr	r1, [r3, #32]
 8010026:	f240 4244 	movw	r2, #1092	; 0x444
 801002a:	4211      	tst	r1, r2
 801002c:	d103      	bne.n	8010036 <HAL_TIM_IC_Stop+0x2a>
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	f022 0201 	bic.w	r2, r2, #1
 8010034:	601a      	str	r2, [r3, #0]
}
 8010036:	2000      	movs	r0, #0
 8010038:	bd10      	pop	{r4, pc}
	...

0801003c <HAL_TIM_IC_Start_IT>:
{
 801003c:	b510      	push	{r4, lr}
 801003e:	4604      	mov	r4, r0
  switch (Channel)
 8010040:	290c      	cmp	r1, #12
 8010042:	d80d      	bhi.n	8010060 <HAL_TIM_IC_Start_IT+0x24>
 8010044:	e8df f001 	tbb	[pc, r1]
 8010048:	0c0c0c07 	.word	0x0c0c0c07
 801004c:	0c0c0c1f 	.word	0x0c0c0c1f
 8010050:	0c0c0c25 	.word	0x0c0c0c25
 8010054:	2b          	.byte	0x2b
 8010055:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010056:	6802      	ldr	r2, [r0, #0]
 8010058:	68d3      	ldr	r3, [r2, #12]
 801005a:	f043 0302 	orr.w	r3, r3, #2
 801005e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010060:	2201      	movs	r2, #1
 8010062:	6820      	ldr	r0, [r4, #0]
 8010064:	f7ff fb0c 	bl	800f680 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010068:	6822      	ldr	r2, [r4, #0]
 801006a:	6891      	ldr	r1, [r2, #8]
 801006c:	4b0f      	ldr	r3, [pc, #60]	; (80100ac <HAL_TIM_IC_Start_IT+0x70>)
 801006e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010070:	2b06      	cmp	r3, #6
 8010072:	d006      	beq.n	8010082 <HAL_TIM_IC_Start_IT+0x46>
 8010074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010078:	d003      	beq.n	8010082 <HAL_TIM_IC_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 801007a:	6813      	ldr	r3, [r2, #0]
 801007c:	f043 0301 	orr.w	r3, r3, #1
 8010080:	6013      	str	r3, [r2, #0]
}
 8010082:	2000      	movs	r0, #0
 8010084:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010086:	6802      	ldr	r2, [r0, #0]
 8010088:	68d3      	ldr	r3, [r2, #12]
 801008a:	f043 0304 	orr.w	r3, r3, #4
 801008e:	60d3      	str	r3, [r2, #12]
      break;
 8010090:	e7e6      	b.n	8010060 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010092:	6802      	ldr	r2, [r0, #0]
 8010094:	68d3      	ldr	r3, [r2, #12]
 8010096:	f043 0308 	orr.w	r3, r3, #8
 801009a:	60d3      	str	r3, [r2, #12]
      break;
 801009c:	e7e0      	b.n	8010060 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801009e:	6802      	ldr	r2, [r0, #0]
 80100a0:	68d3      	ldr	r3, [r2, #12]
 80100a2:	f043 0310 	orr.w	r3, r3, #16
 80100a6:	60d3      	str	r3, [r2, #12]
      break;
 80100a8:	e7da      	b.n	8010060 <HAL_TIM_IC_Start_IT+0x24>
 80100aa:	bf00      	nop
 80100ac:	00010007 	.word	0x00010007

080100b0 <HAL_TIM_IC_Stop_IT>:
{
 80100b0:	b510      	push	{r4, lr}
 80100b2:	4604      	mov	r4, r0
  switch (Channel)
 80100b4:	290c      	cmp	r1, #12
 80100b6:	d80d      	bhi.n	80100d4 <HAL_TIM_IC_Stop_IT+0x24>
 80100b8:	e8df f001 	tbb	[pc, r1]
 80100bc:	0c0c0c07 	.word	0x0c0c0c07
 80100c0:	0c0c0c21 	.word	0x0c0c0c21
 80100c4:	0c0c0c27 	.word	0x0c0c0c27
 80100c8:	2d          	.byte	0x2d
 80100c9:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80100ca:	6802      	ldr	r2, [r0, #0]
 80100cc:	68d3      	ldr	r3, [r2, #12]
 80100ce:	f023 0302 	bic.w	r3, r3, #2
 80100d2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80100d4:	2200      	movs	r2, #0
 80100d6:	6820      	ldr	r0, [r4, #0]
 80100d8:	f7ff fad2 	bl	800f680 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 80100dc:	6823      	ldr	r3, [r4, #0]
 80100de:	6a19      	ldr	r1, [r3, #32]
 80100e0:	f241 1211 	movw	r2, #4369	; 0x1111
 80100e4:	4211      	tst	r1, r2
 80100e6:	d108      	bne.n	80100fa <HAL_TIM_IC_Stop_IT+0x4a>
 80100e8:	6a19      	ldr	r1, [r3, #32]
 80100ea:	f240 4244 	movw	r2, #1092	; 0x444
 80100ee:	4211      	tst	r1, r2
 80100f0:	d103      	bne.n	80100fa <HAL_TIM_IC_Stop_IT+0x4a>
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	f022 0201 	bic.w	r2, r2, #1
 80100f8:	601a      	str	r2, [r3, #0]
}
 80100fa:	2000      	movs	r0, #0
 80100fc:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80100fe:	6802      	ldr	r2, [r0, #0]
 8010100:	68d3      	ldr	r3, [r2, #12]
 8010102:	f023 0304 	bic.w	r3, r3, #4
 8010106:	60d3      	str	r3, [r2, #12]
      break;
 8010108:	e7e4      	b.n	80100d4 <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 801010a:	6802      	ldr	r2, [r0, #0]
 801010c:	68d3      	ldr	r3, [r2, #12]
 801010e:	f023 0308 	bic.w	r3, r3, #8
 8010112:	60d3      	str	r3, [r2, #12]
      break;
 8010114:	e7de      	b.n	80100d4 <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010116:	6802      	ldr	r2, [r0, #0]
 8010118:	68d3      	ldr	r3, [r2, #12]
 801011a:	f023 0310 	bic.w	r3, r3, #16
 801011e:	60d3      	str	r3, [r2, #12]
      break;
 8010120:	e7d8      	b.n	80100d4 <HAL_TIM_IC_Stop_IT+0x24>
	...

08010124 <HAL_TIM_IC_Start_DMA>:
{
 8010124:	b538      	push	{r3, r4, r5, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 8010126:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 801012a:	b2e4      	uxtb	r4, r4
 801012c:	2c02      	cmp	r4, #2
 801012e:	f000 8084 	beq.w	801023a <HAL_TIM_IC_Start_DMA+0x116>
  else if ((htim->State == HAL_TIM_STATE_READY))
 8010132:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8010136:	b2e4      	uxtb	r4, r4
 8010138:	2c01      	cmp	r4, #1
 801013a:	d00c      	beq.n	8010156 <HAL_TIM_IC_Start_DMA+0x32>
 801013c:	460d      	mov	r5, r1
 801013e:	4604      	mov	r4, r0
  switch (Channel)
 8010140:	2d0c      	cmp	r5, #12
 8010142:	d826      	bhi.n	8010192 <HAL_TIM_IC_Start_DMA+0x6e>
 8010144:	e8df f005 	tbb	[pc, r5]
 8010148:	25252510 	.word	0x25252510
 801014c:	25252539 	.word	0x25252539
 8010150:	2525254f 	.word	0x2525254f
 8010154:	64          	.byte	0x64
 8010155:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 8010156:	b11a      	cbz	r2, 8010160 <HAL_TIM_IC_Start_DMA+0x3c>
      htim->State = HAL_TIM_STATE_BUSY;
 8010158:	2402      	movs	r4, #2
 801015a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 801015e:	e7ed      	b.n	801013c <HAL_TIM_IC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 8010160:	2b00      	cmp	r3, #0
 8010162:	d0f9      	beq.n	8010158 <HAL_TIM_IC_Start_DMA+0x34>
      return HAL_ERROR;
 8010164:	2001      	movs	r0, #1
 8010166:	e027      	b.n	80101b8 <HAL_TIM_IC_Start_DMA+0x94>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8010168:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801016a:	483b      	ldr	r0, [pc, #236]	; (8010258 <HAL_TIM_IC_Start_DMA+0x134>)
 801016c:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801016e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010170:	483a      	ldr	r0, [pc, #232]	; (801025c <HAL_TIM_IC_Start_DMA+0x138>)
 8010172:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010174:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010176:	483a      	ldr	r0, [pc, #232]	; (8010260 <HAL_TIM_IC_Start_DMA+0x13c>)
 8010178:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 801017a:	6821      	ldr	r1, [r4, #0]
 801017c:	3134      	adds	r1, #52	; 0x34
 801017e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010180:	f7f4 fef7 	bl	8004f72 <HAL_DMA_Start_IT>
 8010184:	2800      	cmp	r0, #0
 8010186:	d15a      	bne.n	801023e <HAL_TIM_IC_Start_DMA+0x11a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010188:	6822      	ldr	r2, [r4, #0]
 801018a:	68d3      	ldr	r3, [r2, #12]
 801018c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010190:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010192:	2201      	movs	r2, #1
 8010194:	4629      	mov	r1, r5
 8010196:	6820      	ldr	r0, [r4, #0]
 8010198:	f7ff fa72 	bl	800f680 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801019c:	6822      	ldr	r2, [r4, #0]
 801019e:	6891      	ldr	r1, [r2, #8]
 80101a0:	4b30      	ldr	r3, [pc, #192]	; (8010264 <HAL_TIM_IC_Start_DMA+0x140>)
 80101a2:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101a4:	2b06      	cmp	r3, #6
 80101a6:	d052      	beq.n	801024e <HAL_TIM_IC_Start_DMA+0x12a>
 80101a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101ac:	d051      	beq.n	8010252 <HAL_TIM_IC_Start_DMA+0x12e>
    __HAL_TIM_ENABLE(htim);
 80101ae:	6813      	ldr	r3, [r2, #0]
 80101b0:	f043 0301 	orr.w	r3, r3, #1
 80101b4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80101b6:	2000      	movs	r0, #0
}
 80101b8:	bd38      	pop	{r3, r4, r5, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80101ba:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80101bc:	4826      	ldr	r0, [pc, #152]	; (8010258 <HAL_TIM_IC_Start_DMA+0x134>)
 80101be:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80101c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80101c2:	4826      	ldr	r0, [pc, #152]	; (801025c <HAL_TIM_IC_Start_DMA+0x138>)
 80101c4:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80101c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80101c8:	4825      	ldr	r0, [pc, #148]	; (8010260 <HAL_TIM_IC_Start_DMA+0x13c>)
 80101ca:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 80101cc:	6821      	ldr	r1, [r4, #0]
 80101ce:	3138      	adds	r1, #56	; 0x38
 80101d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80101d2:	f7f4 fece 	bl	8004f72 <HAL_DMA_Start_IT>
 80101d6:	2800      	cmp	r0, #0
 80101d8:	d133      	bne.n	8010242 <HAL_TIM_IC_Start_DMA+0x11e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80101da:	6822      	ldr	r2, [r4, #0]
 80101dc:	68d3      	ldr	r3, [r2, #12]
 80101de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80101e2:	60d3      	str	r3, [r2, #12]
      break;
 80101e4:	e7d5      	b.n	8010192 <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80101e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80101e8:	481b      	ldr	r0, [pc, #108]	; (8010258 <HAL_TIM_IC_Start_DMA+0x134>)
 80101ea:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80101ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80101ee:	481b      	ldr	r0, [pc, #108]	; (801025c <HAL_TIM_IC_Start_DMA+0x138>)
 80101f0:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80101f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80101f4:	481a      	ldr	r0, [pc, #104]	; (8010260 <HAL_TIM_IC_Start_DMA+0x13c>)
 80101f6:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 80101f8:	6821      	ldr	r1, [r4, #0]
 80101fa:	313c      	adds	r1, #60	; 0x3c
 80101fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80101fe:	f7f4 feb8 	bl	8004f72 <HAL_DMA_Start_IT>
 8010202:	bb00      	cbnz	r0, 8010246 <HAL_TIM_IC_Start_DMA+0x122>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010204:	6822      	ldr	r2, [r4, #0]
 8010206:	68d3      	ldr	r3, [r2, #12]
 8010208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801020c:	60d3      	str	r3, [r2, #12]
      break;
 801020e:	e7c0      	b.n	8010192 <HAL_TIM_IC_Start_DMA+0x6e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8010210:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8010212:	4811      	ldr	r0, [pc, #68]	; (8010258 <HAL_TIM_IC_Start_DMA+0x134>)
 8010214:	62c8      	str	r0, [r1, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010216:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010218:	4810      	ldr	r0, [pc, #64]	; (801025c <HAL_TIM_IC_Start_DMA+0x138>)
 801021a:	6308      	str	r0, [r1, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 801021c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801021e:	4810      	ldr	r0, [pc, #64]	; (8010260 <HAL_TIM_IC_Start_DMA+0x13c>)
 8010220:	6348      	str	r0, [r1, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8010222:	6821      	ldr	r1, [r4, #0]
 8010224:	3140      	adds	r1, #64	; 0x40
 8010226:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010228:	f7f4 fea3 	bl	8004f72 <HAL_DMA_Start_IT>
 801022c:	b968      	cbnz	r0, 801024a <HAL_TIM_IC_Start_DMA+0x126>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801022e:	6822      	ldr	r2, [r4, #0]
 8010230:	68d3      	ldr	r3, [r2, #12]
 8010232:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010236:	60d3      	str	r3, [r2, #12]
      break;
 8010238:	e7ab      	b.n	8010192 <HAL_TIM_IC_Start_DMA+0x6e>
    return HAL_BUSY;
 801023a:	2002      	movs	r0, #2
 801023c:	e7bc      	b.n	80101b8 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 801023e:	2001      	movs	r0, #1
 8010240:	e7ba      	b.n	80101b8 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 8010242:	2001      	movs	r0, #1
 8010244:	e7b8      	b.n	80101b8 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 8010246:	2001      	movs	r0, #1
 8010248:	e7b6      	b.n	80101b8 <HAL_TIM_IC_Start_DMA+0x94>
        return HAL_ERROR;
 801024a:	2001      	movs	r0, #1
 801024c:	e7b4      	b.n	80101b8 <HAL_TIM_IC_Start_DMA+0x94>
  return HAL_OK;
 801024e:	2000      	movs	r0, #0
 8010250:	e7b2      	b.n	80101b8 <HAL_TIM_IC_Start_DMA+0x94>
 8010252:	2000      	movs	r0, #0
 8010254:	e7b0      	b.n	80101b8 <HAL_TIM_IC_Start_DMA+0x94>
 8010256:	bf00      	nop
 8010258:	0800e761 	.word	0x0800e761
 801025c:	0800e7a7 	.word	0x0800e7a7
 8010260:	0800ea37 	.word	0x0800ea37
 8010264:	00010007 	.word	0x00010007

08010268 <HAL_TIM_IC_Stop_DMA>:
{
 8010268:	b538      	push	{r3, r4, r5, lr}
 801026a:	4604      	mov	r4, r0
 801026c:	460d      	mov	r5, r1
  switch (Channel)
 801026e:	290c      	cmp	r1, #12
 8010270:	d810      	bhi.n	8010294 <HAL_TIM_IC_Stop_DMA+0x2c>
 8010272:	e8df f001 	tbb	[pc, r1]
 8010276:	0f07      	.short	0x0f07
 8010278:	0f280f0f 	.word	0x0f280f0f
 801027c:	0f310f0f 	.word	0x0f310f0f
 8010280:	0f0f      	.short	0x0f0f
 8010282:	3a          	.byte	0x3a
 8010283:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010284:	6802      	ldr	r2, [r0, #0]
 8010286:	68d3      	ldr	r3, [r2, #12]
 8010288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801028c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 801028e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010290:	f7f4 fee1 	bl	8005056 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010294:	2200      	movs	r2, #0
 8010296:	4629      	mov	r1, r5
 8010298:	6820      	ldr	r0, [r4, #0]
 801029a:	f7ff f9f1 	bl	800f680 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 801029e:	6823      	ldr	r3, [r4, #0]
 80102a0:	6a19      	ldr	r1, [r3, #32]
 80102a2:	f241 1211 	movw	r2, #4369	; 0x1111
 80102a6:	4211      	tst	r1, r2
 80102a8:	d108      	bne.n	80102bc <HAL_TIM_IC_Stop_DMA+0x54>
 80102aa:	6a19      	ldr	r1, [r3, #32]
 80102ac:	f240 4244 	movw	r2, #1092	; 0x444
 80102b0:	4211      	tst	r1, r2
 80102b2:	d103      	bne.n	80102bc <HAL_TIM_IC_Stop_DMA+0x54>
 80102b4:	681a      	ldr	r2, [r3, #0]
 80102b6:	f022 0201 	bic.w	r2, r2, #1
 80102ba:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80102bc:	2301      	movs	r3, #1
 80102be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80102c2:	2000      	movs	r0, #0
 80102c4:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80102c6:	6802      	ldr	r2, [r0, #0]
 80102c8:	68d3      	ldr	r3, [r2, #12]
 80102ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80102ce:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80102d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80102d2:	f7f4 fec0 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 80102d6:	e7dd      	b.n	8010294 <HAL_TIM_IC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80102d8:	6802      	ldr	r2, [r0, #0]
 80102da:	68d3      	ldr	r3, [r2, #12]
 80102dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80102e0:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80102e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80102e4:	f7f4 feb7 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 80102e8:	e7d4      	b.n	8010294 <HAL_TIM_IC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80102ea:	6802      	ldr	r2, [r0, #0]
 80102ec:	68d3      	ldr	r3, [r2, #12]
 80102ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102f2:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80102f4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80102f6:	f7f4 feae 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 80102fa:	e7cb      	b.n	8010294 <HAL_TIM_IC_Stop_DMA+0x2c>

080102fc <HAL_TIM_OnePulse_Start>:
{
 80102fc:	b510      	push	{r4, lr}
 80102fe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010300:	2201      	movs	r2, #1
 8010302:	2100      	movs	r1, #0
 8010304:	6800      	ldr	r0, [r0, #0]
 8010306:	f7ff f9bb 	bl	800f680 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801030a:	2201      	movs	r2, #1
 801030c:	2104      	movs	r1, #4
 801030e:	6820      	ldr	r0, [r4, #0]
 8010310:	f7ff f9b6 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010314:	6823      	ldr	r3, [r4, #0]
 8010316:	4a0c      	ldr	r2, [pc, #48]	; (8010348 <HAL_TIM_OnePulse_Start+0x4c>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d00f      	beq.n	801033c <HAL_TIM_OnePulse_Start+0x40>
 801031c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010320:	4293      	cmp	r3, r2
 8010322:	d00b      	beq.n	801033c <HAL_TIM_OnePulse_Start+0x40>
 8010324:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8010328:	4293      	cmp	r3, r2
 801032a:	d007      	beq.n	801033c <HAL_TIM_OnePulse_Start+0x40>
 801032c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010330:	4293      	cmp	r3, r2
 8010332:	d003      	beq.n	801033c <HAL_TIM_OnePulse_Start+0x40>
 8010334:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010338:	4293      	cmp	r3, r2
 801033a:	d103      	bne.n	8010344 <HAL_TIM_OnePulse_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 801033c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801033e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010342:	645a      	str	r2, [r3, #68]	; 0x44
}
 8010344:	2000      	movs	r0, #0
 8010346:	bd10      	pop	{r4, pc}
 8010348:	40012c00 	.word	0x40012c00

0801034c <HAL_TIM_OnePulse_Stop>:
{
 801034c:	b510      	push	{r4, lr}
 801034e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8010350:	2200      	movs	r2, #0
 8010352:	4611      	mov	r1, r2
 8010354:	6800      	ldr	r0, [r0, #0]
 8010356:	f7ff f993 	bl	800f680 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801035a:	2200      	movs	r2, #0
 801035c:	2104      	movs	r1, #4
 801035e:	6820      	ldr	r0, [r4, #0]
 8010360:	f7ff f98e 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	4a19      	ldr	r2, [pc, #100]	; (80103cc <HAL_TIM_OnePulse_Stop+0x80>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d00f      	beq.n	801038c <HAL_TIM_OnePulse_Stop+0x40>
 801036c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010370:	4293      	cmp	r3, r2
 8010372:	d00b      	beq.n	801038c <HAL_TIM_OnePulse_Stop+0x40>
 8010374:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8010378:	4293      	cmp	r3, r2
 801037a:	d007      	beq.n	801038c <HAL_TIM_OnePulse_Stop+0x40>
 801037c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010380:	4293      	cmp	r3, r2
 8010382:	d003      	beq.n	801038c <HAL_TIM_OnePulse_Stop+0x40>
 8010384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010388:	4293      	cmp	r3, r2
 801038a:	d10d      	bne.n	80103a8 <HAL_TIM_OnePulse_Stop+0x5c>
    __HAL_TIM_MOE_DISABLE(htim);
 801038c:	6a19      	ldr	r1, [r3, #32]
 801038e:	f241 1211 	movw	r2, #4369	; 0x1111
 8010392:	4211      	tst	r1, r2
 8010394:	d108      	bne.n	80103a8 <HAL_TIM_OnePulse_Stop+0x5c>
 8010396:	6a19      	ldr	r1, [r3, #32]
 8010398:	f240 4244 	movw	r2, #1092	; 0x444
 801039c:	4211      	tst	r1, r2
 801039e:	d103      	bne.n	80103a8 <HAL_TIM_OnePulse_Stop+0x5c>
 80103a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80103a6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	6a19      	ldr	r1, [r3, #32]
 80103ac:	f241 1211 	movw	r2, #4369	; 0x1111
 80103b0:	4211      	tst	r1, r2
 80103b2:	d108      	bne.n	80103c6 <HAL_TIM_OnePulse_Stop+0x7a>
 80103b4:	6a19      	ldr	r1, [r3, #32]
 80103b6:	f240 4244 	movw	r2, #1092	; 0x444
 80103ba:	4211      	tst	r1, r2
 80103bc:	d103      	bne.n	80103c6 <HAL_TIM_OnePulse_Stop+0x7a>
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	f022 0201 	bic.w	r2, r2, #1
 80103c4:	601a      	str	r2, [r3, #0]
}
 80103c6:	2000      	movs	r0, #0
 80103c8:	bd10      	pop	{r4, pc}
 80103ca:	bf00      	nop
 80103cc:	40012c00 	.word	0x40012c00

080103d0 <HAL_TIM_OnePulse_Start_IT>:
{
 80103d0:	b510      	push	{r4, lr}
 80103d2:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80103d4:	6802      	ldr	r2, [r0, #0]
 80103d6:	68d3      	ldr	r3, [r2, #12]
 80103d8:	f043 0302 	orr.w	r3, r3, #2
 80103dc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80103de:	6802      	ldr	r2, [r0, #0]
 80103e0:	68d3      	ldr	r3, [r2, #12]
 80103e2:	f043 0304 	orr.w	r3, r3, #4
 80103e6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80103e8:	2201      	movs	r2, #1
 80103ea:	2100      	movs	r1, #0
 80103ec:	6800      	ldr	r0, [r0, #0]
 80103ee:	f7ff f947 	bl	800f680 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80103f2:	2201      	movs	r2, #1
 80103f4:	2104      	movs	r1, #4
 80103f6:	6820      	ldr	r0, [r4, #0]
 80103f8:	f7ff f942 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80103fc:	6823      	ldr	r3, [r4, #0]
 80103fe:	4a0c      	ldr	r2, [pc, #48]	; (8010430 <HAL_TIM_OnePulse_Start_IT+0x60>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d00f      	beq.n	8010424 <HAL_TIM_OnePulse_Start_IT+0x54>
 8010404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010408:	4293      	cmp	r3, r2
 801040a:	d00b      	beq.n	8010424 <HAL_TIM_OnePulse_Start_IT+0x54>
 801040c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8010410:	4293      	cmp	r3, r2
 8010412:	d007      	beq.n	8010424 <HAL_TIM_OnePulse_Start_IT+0x54>
 8010414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010418:	4293      	cmp	r3, r2
 801041a:	d003      	beq.n	8010424 <HAL_TIM_OnePulse_Start_IT+0x54>
 801041c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010420:	4293      	cmp	r3, r2
 8010422:	d103      	bne.n	801042c <HAL_TIM_OnePulse_Start_IT+0x5c>
    __HAL_TIM_MOE_ENABLE(htim);
 8010424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801042a:	645a      	str	r2, [r3, #68]	; 0x44
}
 801042c:	2000      	movs	r0, #0
 801042e:	bd10      	pop	{r4, pc}
 8010430:	40012c00 	.word	0x40012c00

08010434 <HAL_TIM_OnePulse_Stop_IT>:
{
 8010434:	b510      	push	{r4, lr}
 8010436:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010438:	6802      	ldr	r2, [r0, #0]
 801043a:	68d3      	ldr	r3, [r2, #12]
 801043c:	f023 0302 	bic.w	r3, r3, #2
 8010440:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010442:	6802      	ldr	r2, [r0, #0]
 8010444:	68d3      	ldr	r3, [r2, #12]
 8010446:	f023 0304 	bic.w	r3, r3, #4
 801044a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801044c:	2200      	movs	r2, #0
 801044e:	4611      	mov	r1, r2
 8010450:	6800      	ldr	r0, [r0, #0]
 8010452:	f7ff f915 	bl	800f680 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8010456:	2200      	movs	r2, #0
 8010458:	2104      	movs	r1, #4
 801045a:	6820      	ldr	r0, [r4, #0]
 801045c:	f7ff f910 	bl	800f680 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	4a19      	ldr	r2, [pc, #100]	; (80104c8 <HAL_TIM_OnePulse_Stop_IT+0x94>)
 8010464:	4293      	cmp	r3, r2
 8010466:	d00f      	beq.n	8010488 <HAL_TIM_OnePulse_Stop_IT+0x54>
 8010468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801046c:	4293      	cmp	r3, r2
 801046e:	d00b      	beq.n	8010488 <HAL_TIM_OnePulse_Stop_IT+0x54>
 8010470:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8010474:	4293      	cmp	r3, r2
 8010476:	d007      	beq.n	8010488 <HAL_TIM_OnePulse_Stop_IT+0x54>
 8010478:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801047c:	4293      	cmp	r3, r2
 801047e:	d003      	beq.n	8010488 <HAL_TIM_OnePulse_Stop_IT+0x54>
 8010480:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010484:	4293      	cmp	r3, r2
 8010486:	d10d      	bne.n	80104a4 <HAL_TIM_OnePulse_Stop_IT+0x70>
    __HAL_TIM_MOE_DISABLE(htim);
 8010488:	6a19      	ldr	r1, [r3, #32]
 801048a:	f241 1211 	movw	r2, #4369	; 0x1111
 801048e:	4211      	tst	r1, r2
 8010490:	d108      	bne.n	80104a4 <HAL_TIM_OnePulse_Stop_IT+0x70>
 8010492:	6a19      	ldr	r1, [r3, #32]
 8010494:	f240 4244 	movw	r2, #1092	; 0x444
 8010498:	4211      	tst	r1, r2
 801049a:	d103      	bne.n	80104a4 <HAL_TIM_OnePulse_Stop_IT+0x70>
 801049c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801049e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80104a2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	6a19      	ldr	r1, [r3, #32]
 80104a8:	f241 1211 	movw	r2, #4369	; 0x1111
 80104ac:	4211      	tst	r1, r2
 80104ae:	d108      	bne.n	80104c2 <HAL_TIM_OnePulse_Stop_IT+0x8e>
 80104b0:	6a19      	ldr	r1, [r3, #32]
 80104b2:	f240 4244 	movw	r2, #1092	; 0x444
 80104b6:	4211      	tst	r1, r2
 80104b8:	d103      	bne.n	80104c2 <HAL_TIM_OnePulse_Stop_IT+0x8e>
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	f022 0201 	bic.w	r2, r2, #1
 80104c0:	601a      	str	r2, [r3, #0]
}
 80104c2:	2000      	movs	r0, #0
 80104c4:	bd10      	pop	{r4, pc}
 80104c6:	bf00      	nop
 80104c8:	40012c00 	.word	0x40012c00

080104cc <HAL_TIM_Encoder_Start>:
{
 80104cc:	b510      	push	{r4, lr}
 80104ce:	4604      	mov	r4, r0
  switch (Channel)
 80104d0:	b161      	cbz	r1, 80104ec <HAL_TIM_Encoder_Start+0x20>
 80104d2:	2904      	cmp	r1, #4
 80104d4:	d016      	beq.n	8010504 <HAL_TIM_Encoder_Start+0x38>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80104d6:	2201      	movs	r2, #1
 80104d8:	2100      	movs	r1, #0
 80104da:	6800      	ldr	r0, [r0, #0]
 80104dc:	f7ff f8d0 	bl	800f680 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80104e0:	2201      	movs	r2, #1
 80104e2:	2104      	movs	r1, #4
 80104e4:	6820      	ldr	r0, [r4, #0]
 80104e6:	f7ff f8cb 	bl	800f680 <TIM_CCxChannelCmd>
      break;
 80104ea:	e004      	b.n	80104f6 <HAL_TIM_Encoder_Start+0x2a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80104ec:	2201      	movs	r2, #1
 80104ee:	2100      	movs	r1, #0
 80104f0:	6800      	ldr	r0, [r0, #0]
 80104f2:	f7ff f8c5 	bl	800f680 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80104f6:	6822      	ldr	r2, [r4, #0]
 80104f8:	6813      	ldr	r3, [r2, #0]
 80104fa:	f043 0301 	orr.w	r3, r3, #1
 80104fe:	6013      	str	r3, [r2, #0]
}
 8010500:	2000      	movs	r0, #0
 8010502:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010504:	2201      	movs	r2, #1
 8010506:	2104      	movs	r1, #4
 8010508:	6800      	ldr	r0, [r0, #0]
 801050a:	f7ff f8b9 	bl	800f680 <TIM_CCxChannelCmd>
      break;
 801050e:	e7f2      	b.n	80104f6 <HAL_TIM_Encoder_Start+0x2a>

08010510 <HAL_TIM_Encoder_Stop>:
{
 8010510:	b510      	push	{r4, lr}
 8010512:	4604      	mov	r4, r0
  switch (Channel)
 8010514:	b161      	cbz	r1, 8010530 <HAL_TIM_Encoder_Stop+0x20>
 8010516:	2904      	cmp	r1, #4
 8010518:	d020      	beq.n	801055c <HAL_TIM_Encoder_Stop+0x4c>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801051a:	2200      	movs	r2, #0
 801051c:	4611      	mov	r1, r2
 801051e:	6800      	ldr	r0, [r0, #0]
 8010520:	f7ff f8ae 	bl	800f680 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8010524:	2200      	movs	r2, #0
 8010526:	2104      	movs	r1, #4
 8010528:	6820      	ldr	r0, [r4, #0]
 801052a:	f7ff f8a9 	bl	800f680 <TIM_CCxChannelCmd>
      break;
 801052e:	e004      	b.n	801053a <HAL_TIM_Encoder_Stop+0x2a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8010530:	2200      	movs	r2, #0
 8010532:	4611      	mov	r1, r2
 8010534:	6800      	ldr	r0, [r0, #0]
 8010536:	f7ff f8a3 	bl	800f680 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 801053a:	6823      	ldr	r3, [r4, #0]
 801053c:	6a19      	ldr	r1, [r3, #32]
 801053e:	f241 1211 	movw	r2, #4369	; 0x1111
 8010542:	4211      	tst	r1, r2
 8010544:	d108      	bne.n	8010558 <HAL_TIM_Encoder_Stop+0x48>
 8010546:	6a19      	ldr	r1, [r3, #32]
 8010548:	f240 4244 	movw	r2, #1092	; 0x444
 801054c:	4211      	tst	r1, r2
 801054e:	d103      	bne.n	8010558 <HAL_TIM_Encoder_Stop+0x48>
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	f022 0201 	bic.w	r2, r2, #1
 8010556:	601a      	str	r2, [r3, #0]
}
 8010558:	2000      	movs	r0, #0
 801055a:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801055c:	2200      	movs	r2, #0
 801055e:	2104      	movs	r1, #4
 8010560:	6800      	ldr	r0, [r0, #0]
 8010562:	f7ff f88d 	bl	800f680 <TIM_CCxChannelCmd>
      break;
 8010566:	e7e8      	b.n	801053a <HAL_TIM_Encoder_Stop+0x2a>

08010568 <HAL_TIM_Encoder_Start_IT>:
{
 8010568:	b510      	push	{r4, lr}
 801056a:	4604      	mov	r4, r0
  switch (Channel)
 801056c:	b1b1      	cbz	r1, 801059c <HAL_TIM_Encoder_Start_IT+0x34>
 801056e:	2904      	cmp	r1, #4
 8010570:	d025      	beq.n	80105be <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010572:	2201      	movs	r2, #1
 8010574:	2100      	movs	r1, #0
 8010576:	6800      	ldr	r0, [r0, #0]
 8010578:	f7ff f882 	bl	800f680 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801057c:	2201      	movs	r2, #1
 801057e:	2104      	movs	r1, #4
 8010580:	6820      	ldr	r0, [r4, #0]
 8010582:	f7ff f87d 	bl	800f680 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010586:	6822      	ldr	r2, [r4, #0]
 8010588:	68d3      	ldr	r3, [r2, #12]
 801058a:	f043 0302 	orr.w	r3, r3, #2
 801058e:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010590:	6822      	ldr	r2, [r4, #0]
 8010592:	68d3      	ldr	r3, [r2, #12]
 8010594:	f043 0304 	orr.w	r3, r3, #4
 8010598:	60d3      	str	r3, [r2, #12]
      break;
 801059a:	e009      	b.n	80105b0 <HAL_TIM_Encoder_Start_IT+0x48>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801059c:	2201      	movs	r2, #1
 801059e:	2100      	movs	r1, #0
 80105a0:	6800      	ldr	r0, [r0, #0]
 80105a2:	f7ff f86d 	bl	800f680 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80105a6:	6822      	ldr	r2, [r4, #0]
 80105a8:	68d3      	ldr	r3, [r2, #12]
 80105aa:	f043 0302 	orr.w	r3, r3, #2
 80105ae:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 80105b0:	6822      	ldr	r2, [r4, #0]
 80105b2:	6813      	ldr	r3, [r2, #0]
 80105b4:	f043 0301 	orr.w	r3, r3, #1
 80105b8:	6013      	str	r3, [r2, #0]
}
 80105ba:	2000      	movs	r0, #0
 80105bc:	bd10      	pop	{r4, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80105be:	2201      	movs	r2, #1
 80105c0:	2104      	movs	r1, #4
 80105c2:	6800      	ldr	r0, [r0, #0]
 80105c4:	f7ff f85c 	bl	800f680 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80105c8:	6822      	ldr	r2, [r4, #0]
 80105ca:	68d3      	ldr	r3, [r2, #12]
 80105cc:	f043 0304 	orr.w	r3, r3, #4
 80105d0:	60d3      	str	r3, [r2, #12]
      break;
 80105d2:	e7ed      	b.n	80105b0 <HAL_TIM_Encoder_Start_IT+0x48>

080105d4 <HAL_TIM_Encoder_Stop_IT>:
{
 80105d4:	b510      	push	{r4, lr}
 80105d6:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 80105d8:	b349      	cbz	r1, 801062e <HAL_TIM_Encoder_Stop_IT+0x5a>
  else if (Channel == TIM_CHANNEL_2)
 80105da:	2904      	cmp	r1, #4
 80105dc:	d032      	beq.n	8010644 <HAL_TIM_Encoder_Stop_IT+0x70>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80105de:	2200      	movs	r2, #0
 80105e0:	4611      	mov	r1, r2
 80105e2:	6800      	ldr	r0, [r0, #0]
 80105e4:	f7ff f84c 	bl	800f680 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80105e8:	2200      	movs	r2, #0
 80105ea:	2104      	movs	r1, #4
 80105ec:	6820      	ldr	r0, [r4, #0]
 80105ee:	f7ff f847 	bl	800f680 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80105f2:	6822      	ldr	r2, [r4, #0]
 80105f4:	68d3      	ldr	r3, [r2, #12]
 80105f6:	f023 0302 	bic.w	r3, r3, #2
 80105fa:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80105fc:	6822      	ldr	r2, [r4, #0]
 80105fe:	68d3      	ldr	r3, [r2, #12]
 8010600:	f023 0304 	bic.w	r3, r3, #4
 8010604:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8010606:	6823      	ldr	r3, [r4, #0]
 8010608:	6a19      	ldr	r1, [r3, #32]
 801060a:	f241 1211 	movw	r2, #4369	; 0x1111
 801060e:	4211      	tst	r1, r2
 8010610:	d108      	bne.n	8010624 <HAL_TIM_Encoder_Stop_IT+0x50>
 8010612:	6a19      	ldr	r1, [r3, #32]
 8010614:	f240 4244 	movw	r2, #1092	; 0x444
 8010618:	4211      	tst	r1, r2
 801061a:	d103      	bne.n	8010624 <HAL_TIM_Encoder_Stop_IT+0x50>
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	f022 0201 	bic.w	r2, r2, #1
 8010622:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8010624:	2301      	movs	r3, #1
 8010626:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 801062a:	2000      	movs	r0, #0
 801062c:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801062e:	2200      	movs	r2, #0
 8010630:	4611      	mov	r1, r2
 8010632:	6800      	ldr	r0, [r0, #0]
 8010634:	f7ff f824 	bl	800f680 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010638:	6822      	ldr	r2, [r4, #0]
 801063a:	68d3      	ldr	r3, [r2, #12]
 801063c:	f023 0302 	bic.w	r3, r3, #2
 8010640:	60d3      	str	r3, [r2, #12]
 8010642:	e7e0      	b.n	8010606 <HAL_TIM_Encoder_Stop_IT+0x32>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8010644:	2200      	movs	r2, #0
 8010646:	2104      	movs	r1, #4
 8010648:	6800      	ldr	r0, [r0, #0]
 801064a:	f7ff f819 	bl	800f680 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801064e:	6822      	ldr	r2, [r4, #0]
 8010650:	68d3      	ldr	r3, [r2, #12]
 8010652:	f023 0304 	bic.w	r3, r3, #4
 8010656:	60d3      	str	r3, [r2, #12]
 8010658:	e7d5      	b.n	8010606 <HAL_TIM_Encoder_Stop_IT+0x32>
	...

0801065c <HAL_TIM_Encoder_Start_DMA>:
{
 801065c:	b570      	push	{r4, r5, r6, lr}
 801065e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((htim->State == HAL_TIM_STATE_BUSY))
 8010662:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8010666:	b2e4      	uxtb	r4, r4
 8010668:	2c02      	cmp	r4, #2
 801066a:	f000 809f 	beq.w	80107ac <HAL_TIM_Encoder_Start_DMA+0x150>
  else if ((htim->State == HAL_TIM_STATE_READY))
 801066e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8010672:	b2e4      	uxtb	r4, r4
 8010674:	2c01      	cmp	r4, #1
 8010676:	d008      	beq.n	801068a <HAL_TIM_Encoder_Start_DMA+0x2e>
 8010678:	461e      	mov	r6, r3
 801067a:	4604      	mov	r4, r0
  switch (Channel)
 801067c:	2904      	cmp	r1, #4
 801067e:	d031      	beq.n	80106e4 <HAL_TIM_Encoder_Start_DMA+0x88>
 8010680:	293c      	cmp	r1, #60	; 0x3c
 8010682:	d053      	beq.n	801072c <HAL_TIM_Encoder_Start_DMA+0xd0>
 8010684:	b159      	cbz	r1, 801069e <HAL_TIM_Encoder_Start_DMA+0x42>
  return HAL_OK;
 8010686:	2500      	movs	r5, #0
 8010688:	e091      	b.n	80107ae <HAL_TIM_Encoder_Start_DMA+0x152>
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 801068a:	b122      	cbz	r2, 8010696 <HAL_TIM_Encoder_Start_DMA+0x3a>
 801068c:	b11b      	cbz	r3, 8010696 <HAL_TIM_Encoder_Start_DMA+0x3a>
      htim->State = HAL_TIM_STATE_BUSY;
 801068e:	2402      	movs	r4, #2
 8010690:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8010694:	e7f0      	b.n	8010678 <HAL_TIM_Encoder_Start_DMA+0x1c>
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 8010696:	2d00      	cmp	r5, #0
 8010698:	d0f9      	beq.n	801068e <HAL_TIM_Encoder_Start_DMA+0x32>
      return HAL_ERROR;
 801069a:	2501      	movs	r5, #1
 801069c:	e087      	b.n	80107ae <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801069e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80106a0:	4944      	ldr	r1, [pc, #272]	; (80107b4 <HAL_TIM_Encoder_Start_DMA+0x158>)
 80106a2:	62d9      	str	r1, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80106a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80106a6:	4944      	ldr	r1, [pc, #272]	; (80107b8 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 80106a8:	6319      	str	r1, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80106aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80106ac:	4943      	ldr	r1, [pc, #268]	; (80107bc <HAL_TIM_Encoder_Start_DMA+0x160>)
 80106ae:	6359      	str	r1, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 80106b0:	6801      	ldr	r1, [r0, #0]
 80106b2:	462b      	mov	r3, r5
 80106b4:	3134      	adds	r1, #52	; 0x34
 80106b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80106b8:	f7f4 fc5b 	bl	8004f72 <HAL_DMA_Start_IT>
 80106bc:	4605      	mov	r5, r0
 80106be:	b108      	cbz	r0, 80106c4 <HAL_TIM_Encoder_Start_DMA+0x68>
        return HAL_ERROR;
 80106c0:	2501      	movs	r5, #1
 80106c2:	e074      	b.n	80107ae <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80106c4:	6822      	ldr	r2, [r4, #0]
 80106c6:	68d3      	ldr	r3, [r2, #12]
 80106c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80106cc:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 80106ce:	6822      	ldr	r2, [r4, #0]
 80106d0:	6813      	ldr	r3, [r2, #0]
 80106d2:	f043 0301 	orr.w	r3, r3, #1
 80106d6:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80106d8:	2201      	movs	r2, #1
 80106da:	2100      	movs	r1, #0
 80106dc:	6820      	ldr	r0, [r4, #0]
 80106de:	f7fe ffcf 	bl	800f680 <TIM_CCxChannelCmd>
      break;
 80106e2:	e064      	b.n	80107ae <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80106e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80106e6:	4a33      	ldr	r2, [pc, #204]	; (80107b4 <HAL_TIM_Encoder_Start_DMA+0x158>)
 80106e8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80106ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80106ec:	4a32      	ldr	r2, [pc, #200]	; (80107b8 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 80106ee:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 80106f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80106f2:	4a32      	ldr	r2, [pc, #200]	; (80107bc <HAL_TIM_Encoder_Start_DMA+0x160>)
 80106f4:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 80106f6:	6801      	ldr	r1, [r0, #0]
 80106f8:	462b      	mov	r3, r5
 80106fa:	4632      	mov	r2, r6
 80106fc:	3138      	adds	r1, #56	; 0x38
 80106fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010700:	f7f4 fc37 	bl	8004f72 <HAL_DMA_Start_IT>
 8010704:	4605      	mov	r5, r0
 8010706:	b108      	cbz	r0, 801070c <HAL_TIM_Encoder_Start_DMA+0xb0>
        return HAL_ERROR;
 8010708:	2501      	movs	r5, #1
 801070a:	e050      	b.n	80107ae <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801070c:	6822      	ldr	r2, [r4, #0]
 801070e:	68d3      	ldr	r3, [r2, #12]
 8010710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010714:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 8010716:	6822      	ldr	r2, [r4, #0]
 8010718:	6813      	ldr	r3, [r2, #0]
 801071a:	f043 0301 	orr.w	r3, r3, #1
 801071e:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010720:	2201      	movs	r2, #1
 8010722:	2104      	movs	r1, #4
 8010724:	6820      	ldr	r0, [r4, #0]
 8010726:	f7fe ffab 	bl	800f680 <TIM_CCxChannelCmd>
      break;
 801072a:	e040      	b.n	80107ae <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801072c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801072e:	4921      	ldr	r1, [pc, #132]	; (80107b4 <HAL_TIM_Encoder_Start_DMA+0x158>)
 8010730:	62d9      	str	r1, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010732:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010734:	4920      	ldr	r1, [pc, #128]	; (80107b8 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 8010736:	6319      	str	r1, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010738:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801073a:	4920      	ldr	r1, [pc, #128]	; (80107bc <HAL_TIM_Encoder_Start_DMA+0x160>)
 801073c:	6359      	str	r1, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 801073e:	6801      	ldr	r1, [r0, #0]
 8010740:	462b      	mov	r3, r5
 8010742:	3134      	adds	r1, #52	; 0x34
 8010744:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010746:	f7f4 fc14 	bl	8004f72 <HAL_DMA_Start_IT>
 801074a:	b108      	cbz	r0, 8010750 <HAL_TIM_Encoder_Start_DMA+0xf4>
        return HAL_ERROR;
 801074c:	2501      	movs	r5, #1
 801074e:	e02e      	b.n	80107ae <HAL_TIM_Encoder_Start_DMA+0x152>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8010750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010752:	4a18      	ldr	r2, [pc, #96]	; (80107b4 <HAL_TIM_Encoder_Start_DMA+0x158>)
 8010754:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010758:	4a17      	ldr	r2, [pc, #92]	; (80107b8 <HAL_TIM_Encoder_Start_DMA+0x15c>)
 801075a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801075c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801075e:	4a17      	ldr	r2, [pc, #92]	; (80107bc <HAL_TIM_Encoder_Start_DMA+0x160>)
 8010760:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 8010762:	6821      	ldr	r1, [r4, #0]
 8010764:	462b      	mov	r3, r5
 8010766:	4632      	mov	r2, r6
 8010768:	3138      	adds	r1, #56	; 0x38
 801076a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801076c:	f7f4 fc01 	bl	8004f72 <HAL_DMA_Start_IT>
 8010770:	4605      	mov	r5, r0
 8010772:	b108      	cbz	r0, 8010778 <HAL_TIM_Encoder_Start_DMA+0x11c>
        return HAL_ERROR;
 8010774:	2501      	movs	r5, #1
 8010776:	e01a      	b.n	80107ae <HAL_TIM_Encoder_Start_DMA+0x152>
      __HAL_TIM_ENABLE(htim);
 8010778:	6822      	ldr	r2, [r4, #0]
 801077a:	6813      	ldr	r3, [r2, #0]
 801077c:	f043 0301 	orr.w	r3, r3, #1
 8010780:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010782:	2201      	movs	r2, #1
 8010784:	2100      	movs	r1, #0
 8010786:	6820      	ldr	r0, [r4, #0]
 8010788:	f7fe ff7a 	bl	800f680 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801078c:	2201      	movs	r2, #1
 801078e:	2104      	movs	r1, #4
 8010790:	6820      	ldr	r0, [r4, #0]
 8010792:	f7fe ff75 	bl	800f680 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010796:	6822      	ldr	r2, [r4, #0]
 8010798:	68d3      	ldr	r3, [r2, #12]
 801079a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801079e:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80107a0:	6822      	ldr	r2, [r4, #0]
 80107a2:	68d3      	ldr	r3, [r2, #12]
 80107a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80107a8:	60d3      	str	r3, [r2, #12]
      break;
 80107aa:	e000      	b.n	80107ae <HAL_TIM_Encoder_Start_DMA+0x152>
    return HAL_BUSY;
 80107ac:	2502      	movs	r5, #2
}
 80107ae:	4628      	mov	r0, r5
 80107b0:	bd70      	pop	{r4, r5, r6, pc}
 80107b2:	bf00      	nop
 80107b4:	0800e761 	.word	0x0800e761
 80107b8:	0800e7a7 	.word	0x0800e7a7
 80107bc:	0800ea37 	.word	0x0800ea37

080107c0 <HAL_TIM_Encoder_Stop_DMA>:
{
 80107c0:	b510      	push	{r4, lr}
 80107c2:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 80107c4:	2900      	cmp	r1, #0
 80107c6:	d02f      	beq.n	8010828 <HAL_TIM_Encoder_Stop_DMA+0x68>
  else if (Channel == TIM_CHANNEL_2)
 80107c8:	2904      	cmp	r1, #4
 80107ca:	d03b      	beq.n	8010844 <HAL_TIM_Encoder_Stop_DMA+0x84>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80107cc:	2200      	movs	r2, #0
 80107ce:	4611      	mov	r1, r2
 80107d0:	6800      	ldr	r0, [r0, #0]
 80107d2:	f7fe ff55 	bl	800f680 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80107d6:	2200      	movs	r2, #0
 80107d8:	2104      	movs	r1, #4
 80107da:	6820      	ldr	r0, [r4, #0]
 80107dc:	f7fe ff50 	bl	800f680 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80107e0:	6822      	ldr	r2, [r4, #0]
 80107e2:	68d3      	ldr	r3, [r2, #12]
 80107e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80107e8:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80107ea:	6822      	ldr	r2, [r4, #0]
 80107ec:	68d3      	ldr	r3, [r2, #12]
 80107ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80107f2:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80107f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80107f6:	f7f4 fc2e 	bl	8005056 <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80107fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80107fc:	f7f4 fc2b 	bl	8005056 <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 8010800:	6823      	ldr	r3, [r4, #0]
 8010802:	6a19      	ldr	r1, [r3, #32]
 8010804:	f241 1211 	movw	r2, #4369	; 0x1111
 8010808:	4211      	tst	r1, r2
 801080a:	d108      	bne.n	801081e <HAL_TIM_Encoder_Stop_DMA+0x5e>
 801080c:	6a19      	ldr	r1, [r3, #32]
 801080e:	f240 4244 	movw	r2, #1092	; 0x444
 8010812:	4211      	tst	r1, r2
 8010814:	d103      	bne.n	801081e <HAL_TIM_Encoder_Stop_DMA+0x5e>
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	f022 0201 	bic.w	r2, r2, #1
 801081c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 801081e:	2301      	movs	r3, #1
 8010820:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010824:	2000      	movs	r0, #0
 8010826:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8010828:	2200      	movs	r2, #0
 801082a:	4611      	mov	r1, r2
 801082c:	6800      	ldr	r0, [r0, #0]
 801082e:	f7fe ff27 	bl	800f680 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010832:	6822      	ldr	r2, [r4, #0]
 8010834:	68d3      	ldr	r3, [r2, #12]
 8010836:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801083a:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 801083c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801083e:	f7f4 fc0a 	bl	8005056 <HAL_DMA_Abort_IT>
 8010842:	e7dd      	b.n	8010800 <HAL_TIM_Encoder_Stop_DMA+0x40>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8010844:	2200      	movs	r2, #0
 8010846:	2104      	movs	r1, #4
 8010848:	6800      	ldr	r0, [r0, #0]
 801084a:	f7fe ff19 	bl	800f680 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 801084e:	6822      	ldr	r2, [r4, #0]
 8010850:	68d3      	ldr	r3, [r2, #12]
 8010852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010856:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010858:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801085a:	f7f4 fbfc 	bl	8005056 <HAL_DMA_Abort_IT>
 801085e:	e7cf      	b.n	8010800 <HAL_TIM_Encoder_Stop_DMA+0x40>

08010860 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8010860:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010862:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8010866:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010868:	2404      	movs	r4, #4
 801086a:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 801086c:	ea23 0304 	bic.w	r3, r3, r4
 8010870:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010872:	6a03      	ldr	r3, [r0, #32]
 8010874:	408a      	lsls	r2, r1
 8010876:	431a      	orrs	r2, r3
 8010878:	6202      	str	r2, [r0, #32]
}
 801087a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801087e:	4770      	bx	lr

08010880 <HAL_TIMEx_HallSensor_MspInit>:
}
 8010880:	4770      	bx	lr

08010882 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8010882:	2800      	cmp	r0, #0
 8010884:	d05c      	beq.n	8010940 <HAL_TIMEx_HallSensor_Init+0xbe>
{
 8010886:	b570      	push	{r4, r5, r6, lr}
 8010888:	b088      	sub	sp, #32
 801088a:	4604      	mov	r4, r0
 801088c:	460e      	mov	r6, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 801088e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010892:	2b00      	cmp	r3, #0
 8010894:	d04f      	beq.n	8010936 <HAL_TIMEx_HallSensor_Init+0xb4>
  htim->State = HAL_TIM_STATE_BUSY;
 8010896:	2302      	movs	r3, #2
 8010898:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801089c:	1d21      	adds	r1, r4, #4
 801089e:	6820      	ldr	r0, [r4, #0]
 80108a0:	f7fe f8e4 	bl	800ea6c <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80108a4:	68b3      	ldr	r3, [r6, #8]
 80108a6:	2203      	movs	r2, #3
 80108a8:	6831      	ldr	r1, [r6, #0]
 80108aa:	6820      	ldr	r0, [r4, #0]
 80108ac:	f7fe fb6e 	bl	800ef8c <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80108b0:	6822      	ldr	r2, [r4, #0]
 80108b2:	6993      	ldr	r3, [r2, #24]
 80108b4:	f023 030c 	bic.w	r3, r3, #12
 80108b8:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80108ba:	6822      	ldr	r2, [r4, #0]
 80108bc:	6993      	ldr	r3, [r2, #24]
 80108be:	6871      	ldr	r1, [r6, #4]
 80108c0:	430b      	orrs	r3, r1
 80108c2:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80108c4:	6822      	ldr	r2, [r4, #0]
 80108c6:	6853      	ldr	r3, [r2, #4]
 80108c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108cc:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80108ce:	6822      	ldr	r2, [r4, #0]
 80108d0:	6893      	ldr	r3, [r2, #8]
 80108d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108d6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80108d8:	6822      	ldr	r2, [r4, #0]
 80108da:	6893      	ldr	r3, [r2, #8]
 80108dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108e0:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80108e2:	6822      	ldr	r2, [r4, #0]
 80108e4:	6893      	ldr	r3, [r2, #8]
 80108e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108ea:	f023 0307 	bic.w	r3, r3, #7
 80108ee:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80108f0:	6822      	ldr	r2, [r4, #0]
 80108f2:	6893      	ldr	r3, [r2, #8]
 80108f4:	f043 0304 	orr.w	r3, r3, #4
 80108f8:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80108fa:	2500      	movs	r5, #0
 80108fc:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80108fe:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8010900:	2370      	movs	r3, #112	; 0x70
 8010902:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8010904:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8010906:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010908:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 801090a:	68f3      	ldr	r3, [r6, #12]
 801090c:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 801090e:	a901      	add	r1, sp, #4
 8010910:	6820      	ldr	r0, [r4, #0]
 8010912:	f7fe fa1d 	bl	800ed50 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8010916:	6822      	ldr	r2, [r4, #0]
 8010918:	6853      	ldr	r3, [r2, #4]
 801091a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801091e:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8010920:	6822      	ldr	r2, [r4, #0]
 8010922:	6853      	ldr	r3, [r2, #4]
 8010924:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8010928:	6053      	str	r3, [r2, #4]
  htim->State = HAL_TIM_STATE_READY;
 801092a:	2301      	movs	r3, #1
 801092c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8010930:	4628      	mov	r0, r5
}
 8010932:	b008      	add	sp, #32
 8010934:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8010936:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 801093a:	f7ff ffa1 	bl	8010880 <HAL_TIMEx_HallSensor_MspInit>
 801093e:	e7aa      	b.n	8010896 <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 8010940:	2001      	movs	r0, #1
}
 8010942:	4770      	bx	lr

08010944 <HAL_TIMEx_HallSensor_MspDeInit>:
}
 8010944:	4770      	bx	lr

08010946 <HAL_TIMEx_HallSensor_DeInit>:
{
 8010946:	b510      	push	{r4, lr}
 8010948:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 801094a:	2302      	movs	r3, #2
 801094c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8010950:	6803      	ldr	r3, [r0, #0]
 8010952:	6a19      	ldr	r1, [r3, #32]
 8010954:	f241 1211 	movw	r2, #4369	; 0x1111
 8010958:	4211      	tst	r1, r2
 801095a:	d108      	bne.n	801096e <HAL_TIMEx_HallSensor_DeInit+0x28>
 801095c:	6a19      	ldr	r1, [r3, #32]
 801095e:	f240 4244 	movw	r2, #1092	; 0x444
 8010962:	4211      	tst	r1, r2
 8010964:	d103      	bne.n	801096e <HAL_TIMEx_HallSensor_DeInit+0x28>
 8010966:	681a      	ldr	r2, [r3, #0]
 8010968:	f022 0201 	bic.w	r2, r2, #1
 801096c:	601a      	str	r2, [r3, #0]
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 801096e:	4620      	mov	r0, r4
 8010970:	f7ff ffe8 	bl	8010944 <HAL_TIMEx_HallSensor_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8010974:	2000      	movs	r0, #0
 8010976:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801097a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 801097e:	bd10      	pop	{r4, pc}

08010980 <HAL_TIMEx_HallSensor_Start>:
{
 8010980:	b510      	push	{r4, lr}
 8010982:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010984:	2201      	movs	r2, #1
 8010986:	2100      	movs	r1, #0
 8010988:	6800      	ldr	r0, [r0, #0]
 801098a:	f7fe fe79 	bl	800f680 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801098e:	6822      	ldr	r2, [r4, #0]
 8010990:	6891      	ldr	r1, [r2, #8]
 8010992:	4b06      	ldr	r3, [pc, #24]	; (80109ac <HAL_TIMEx_HallSensor_Start+0x2c>)
 8010994:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010996:	2b06      	cmp	r3, #6
 8010998:	d006      	beq.n	80109a8 <HAL_TIMEx_HallSensor_Start+0x28>
 801099a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801099e:	d003      	beq.n	80109a8 <HAL_TIMEx_HallSensor_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 80109a0:	6813      	ldr	r3, [r2, #0]
 80109a2:	f043 0301 	orr.w	r3, r3, #1
 80109a6:	6013      	str	r3, [r2, #0]
}
 80109a8:	2000      	movs	r0, #0
 80109aa:	bd10      	pop	{r4, pc}
 80109ac:	00010007 	.word	0x00010007

080109b0 <HAL_TIMEx_HallSensor_Stop>:
{
 80109b0:	b510      	push	{r4, lr}
 80109b2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80109b4:	2200      	movs	r2, #0
 80109b6:	4611      	mov	r1, r2
 80109b8:	6800      	ldr	r0, [r0, #0]
 80109ba:	f7fe fe61 	bl	800f680 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 80109be:	6823      	ldr	r3, [r4, #0]
 80109c0:	6a19      	ldr	r1, [r3, #32]
 80109c2:	f241 1211 	movw	r2, #4369	; 0x1111
 80109c6:	4211      	tst	r1, r2
 80109c8:	d108      	bne.n	80109dc <HAL_TIMEx_HallSensor_Stop+0x2c>
 80109ca:	6a19      	ldr	r1, [r3, #32]
 80109cc:	f240 4244 	movw	r2, #1092	; 0x444
 80109d0:	4211      	tst	r1, r2
 80109d2:	d103      	bne.n	80109dc <HAL_TIMEx_HallSensor_Stop+0x2c>
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	f022 0201 	bic.w	r2, r2, #1
 80109da:	601a      	str	r2, [r3, #0]
}
 80109dc:	2000      	movs	r0, #0
 80109de:	bd10      	pop	{r4, pc}

080109e0 <HAL_TIMEx_HallSensor_Start_IT>:
{
 80109e0:	b510      	push	{r4, lr}
 80109e2:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80109e4:	6802      	ldr	r2, [r0, #0]
 80109e6:	68d3      	ldr	r3, [r2, #12]
 80109e8:	f043 0302 	orr.w	r3, r3, #2
 80109ec:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80109ee:	2201      	movs	r2, #1
 80109f0:	2100      	movs	r1, #0
 80109f2:	6800      	ldr	r0, [r0, #0]
 80109f4:	f7fe fe44 	bl	800f680 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80109f8:	6822      	ldr	r2, [r4, #0]
 80109fa:	6891      	ldr	r1, [r2, #8]
 80109fc:	4b06      	ldr	r3, [pc, #24]	; (8010a18 <HAL_TIMEx_HallSensor_Start_IT+0x38>)
 80109fe:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a00:	2b06      	cmp	r3, #6
 8010a02:	d006      	beq.n	8010a12 <HAL_TIMEx_HallSensor_Start_IT+0x32>
 8010a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a08:	d003      	beq.n	8010a12 <HAL_TIMEx_HallSensor_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 8010a0a:	6813      	ldr	r3, [r2, #0]
 8010a0c:	f043 0301 	orr.w	r3, r3, #1
 8010a10:	6013      	str	r3, [r2, #0]
}
 8010a12:	2000      	movs	r0, #0
 8010a14:	bd10      	pop	{r4, pc}
 8010a16:	bf00      	nop
 8010a18:	00010007 	.word	0x00010007

08010a1c <HAL_TIMEx_HallSensor_Stop_IT>:
{
 8010a1c:	b510      	push	{r4, lr}
 8010a1e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8010a20:	2200      	movs	r2, #0
 8010a22:	4611      	mov	r1, r2
 8010a24:	6800      	ldr	r0, [r0, #0]
 8010a26:	f7fe fe2b 	bl	800f680 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010a2a:	6822      	ldr	r2, [r4, #0]
 8010a2c:	68d3      	ldr	r3, [r2, #12]
 8010a2e:	f023 0302 	bic.w	r3, r3, #2
 8010a32:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8010a34:	6823      	ldr	r3, [r4, #0]
 8010a36:	6a19      	ldr	r1, [r3, #32]
 8010a38:	f241 1211 	movw	r2, #4369	; 0x1111
 8010a3c:	4211      	tst	r1, r2
 8010a3e:	d108      	bne.n	8010a52 <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 8010a40:	6a19      	ldr	r1, [r3, #32]
 8010a42:	f240 4244 	movw	r2, #1092	; 0x444
 8010a46:	4211      	tst	r1, r2
 8010a48:	d103      	bne.n	8010a52 <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	f022 0201 	bic.w	r2, r2, #1
 8010a50:	601a      	str	r2, [r3, #0]
}
 8010a52:	2000      	movs	r0, #0
 8010a54:	bd10      	pop	{r4, pc}
	...

08010a58 <HAL_TIMEx_HallSensor_Start_DMA>:
{
 8010a58:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 8010a5a:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8010a5e:	b2ed      	uxtb	r5, r5
 8010a60:	2d02      	cmp	r5, #2
 8010a62:	d03a      	beq.n	8010ada <HAL_TIMEx_HallSensor_Start_DMA+0x82>
  else if ((htim->State == HAL_TIM_STATE_READY))
 8010a64:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8010a68:	b2e4      	uxtb	r4, r4
 8010a6a:	2c01      	cmp	r4, #1
 8010a6c:	d104      	bne.n	8010a78 <HAL_TIMEx_HallSensor_Start_DMA+0x20>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8010a6e:	2900      	cmp	r1, #0
 8010a70:	d02f      	beq.n	8010ad2 <HAL_TIMEx_HallSensor_Start_DMA+0x7a>
      htim->State = HAL_TIM_STATE_BUSY;
 8010a72:	2302      	movs	r3, #2
 8010a74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8010a78:	4616      	mov	r6, r2
 8010a7a:	460d      	mov	r5, r1
 8010a7c:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010a7e:	2201      	movs	r2, #1
 8010a80:	2100      	movs	r1, #0
 8010a82:	6800      	ldr	r0, [r0, #0]
 8010a84:	f7fe fdfc 	bl	800f680 <TIM_CCxChannelCmd>
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8010a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a8a:	4a16      	ldr	r2, [pc, #88]	; (8010ae4 <HAL_TIMEx_HallSensor_Start_DMA+0x8c>)
 8010a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a90:	4a15      	ldr	r2, [pc, #84]	; (8010ae8 <HAL_TIMEx_HallSensor_Start_DMA+0x90>)
 8010a92:	631a      	str	r2, [r3, #48]	; 0x30
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a96:	4a15      	ldr	r2, [pc, #84]	; (8010aec <HAL_TIMEx_HallSensor_Start_DMA+0x94>)
 8010a98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8010a9a:	6821      	ldr	r1, [r4, #0]
 8010a9c:	4633      	mov	r3, r6
 8010a9e:	462a      	mov	r2, r5
 8010aa0:	3134      	adds	r1, #52	; 0x34
 8010aa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010aa4:	f7f4 fa65 	bl	8004f72 <HAL_DMA_Start_IT>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	b9c0      	cbnz	r0, 8010ade <HAL_TIMEx_HallSensor_Start_DMA+0x86>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010aac:	6821      	ldr	r1, [r4, #0]
 8010aae:	68ca      	ldr	r2, [r1, #12]
 8010ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010ab4:	60ca      	str	r2, [r1, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ab6:	6821      	ldr	r1, [r4, #0]
 8010ab8:	6888      	ldr	r0, [r1, #8]
 8010aba:	4a0d      	ldr	r2, [pc, #52]	; (8010af0 <HAL_TIMEx_HallSensor_Start_DMA+0x98>)
 8010abc:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010abe:	2a06      	cmp	r2, #6
 8010ac0:	d00e      	beq.n	8010ae0 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
 8010ac2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010ac6:	d00b      	beq.n	8010ae0 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    __HAL_TIM_ENABLE(htim);
 8010ac8:	680a      	ldr	r2, [r1, #0]
 8010aca:	f042 0201 	orr.w	r2, r2, #1
 8010ace:	600a      	str	r2, [r1, #0]
 8010ad0:	e006      	b.n	8010ae0 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8010ad2:	2a00      	cmp	r2, #0
 8010ad4:	d0cd      	beq.n	8010a72 <HAL_TIMEx_HallSensor_Start_DMA+0x1a>
      return HAL_ERROR;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e002      	b.n	8010ae0 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    return HAL_BUSY;
 8010ada:	2302      	movs	r3, #2
 8010adc:	e000      	b.n	8010ae0 <HAL_TIMEx_HallSensor_Start_DMA+0x88>
    return HAL_ERROR;
 8010ade:	2301      	movs	r3, #1
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	bd70      	pop	{r4, r5, r6, pc}
 8010ae4:	0800e761 	.word	0x0800e761
 8010ae8:	0800e7a7 	.word	0x0800e7a7
 8010aec:	0800ea37 	.word	0x0800ea37
 8010af0:	00010007 	.word	0x00010007

08010af4 <HAL_TIMEx_HallSensor_Stop_DMA>:
{
 8010af4:	b510      	push	{r4, lr}
 8010af6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8010af8:	2200      	movs	r2, #0
 8010afa:	4611      	mov	r1, r2
 8010afc:	6800      	ldr	r0, [r0, #0]
 8010afe:	f7fe fdbf 	bl	800f680 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010b02:	6822      	ldr	r2, [r4, #0]
 8010b04:	68d3      	ldr	r3, [r2, #12]
 8010b06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010b0a:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010b0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010b0e:	f7f4 faa2 	bl	8005056 <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 8010b12:	6823      	ldr	r3, [r4, #0]
 8010b14:	6a19      	ldr	r1, [r3, #32]
 8010b16:	f241 1211 	movw	r2, #4369	; 0x1111
 8010b1a:	4211      	tst	r1, r2
 8010b1c:	d108      	bne.n	8010b30 <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 8010b1e:	6a19      	ldr	r1, [r3, #32]
 8010b20:	f240 4244 	movw	r2, #1092	; 0x444
 8010b24:	4211      	tst	r1, r2
 8010b26:	d103      	bne.n	8010b30 <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	f022 0201 	bic.w	r2, r2, #1
 8010b2e:	601a      	str	r2, [r3, #0]
}
 8010b30:	2000      	movs	r0, #0
 8010b32:	bd10      	pop	{r4, pc}

08010b34 <HAL_TIMEx_OCN_Start>:
{
 8010b34:	b510      	push	{r4, lr}
 8010b36:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010b38:	2204      	movs	r2, #4
 8010b3a:	6800      	ldr	r0, [r0, #0]
 8010b3c:	f7ff fe90 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8010b40:	6822      	ldr	r2, [r4, #0]
 8010b42:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b48:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b4a:	6822      	ldr	r2, [r4, #0]
 8010b4c:	6891      	ldr	r1, [r2, #8]
 8010b4e:	4b06      	ldr	r3, [pc, #24]	; (8010b68 <HAL_TIMEx_OCN_Start+0x34>)
 8010b50:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b52:	2b06      	cmp	r3, #6
 8010b54:	d006      	beq.n	8010b64 <HAL_TIMEx_OCN_Start+0x30>
 8010b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b5a:	d003      	beq.n	8010b64 <HAL_TIMEx_OCN_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8010b5c:	6813      	ldr	r3, [r2, #0]
 8010b5e:	f043 0301 	orr.w	r3, r3, #1
 8010b62:	6013      	str	r3, [r2, #0]
}
 8010b64:	2000      	movs	r0, #0
 8010b66:	bd10      	pop	{r4, pc}
 8010b68:	00010007 	.word	0x00010007

08010b6c <HAL_TIMEx_OCN_Stop>:
{
 8010b6c:	b510      	push	{r4, lr}
 8010b6e:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010b70:	2200      	movs	r2, #0
 8010b72:	6800      	ldr	r0, [r0, #0]
 8010b74:	f7ff fe74 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8010b78:	6823      	ldr	r3, [r4, #0]
 8010b7a:	6a19      	ldr	r1, [r3, #32]
 8010b7c:	f241 1211 	movw	r2, #4369	; 0x1111
 8010b80:	4211      	tst	r1, r2
 8010b82:	d108      	bne.n	8010b96 <HAL_TIMEx_OCN_Stop+0x2a>
 8010b84:	6a19      	ldr	r1, [r3, #32]
 8010b86:	f240 4244 	movw	r2, #1092	; 0x444
 8010b8a:	4211      	tst	r1, r2
 8010b8c:	d103      	bne.n	8010b96 <HAL_TIMEx_OCN_Stop+0x2a>
 8010b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010b94:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8010b96:	6823      	ldr	r3, [r4, #0]
 8010b98:	6a19      	ldr	r1, [r3, #32]
 8010b9a:	f241 1211 	movw	r2, #4369	; 0x1111
 8010b9e:	4211      	tst	r1, r2
 8010ba0:	d108      	bne.n	8010bb4 <HAL_TIMEx_OCN_Stop+0x48>
 8010ba2:	6a19      	ldr	r1, [r3, #32]
 8010ba4:	f240 4244 	movw	r2, #1092	; 0x444
 8010ba8:	4211      	tst	r1, r2
 8010baa:	d103      	bne.n	8010bb4 <HAL_TIMEx_OCN_Stop+0x48>
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	f022 0201 	bic.w	r2, r2, #1
 8010bb2:	601a      	str	r2, [r3, #0]
}
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	bd10      	pop	{r4, pc}

08010bb8 <HAL_TIMEx_OCN_Start_IT>:
{
 8010bb8:	b510      	push	{r4, lr}
 8010bba:	4604      	mov	r4, r0
  switch (Channel)
 8010bbc:	2904      	cmp	r1, #4
 8010bbe:	d025      	beq.n	8010c0c <HAL_TIMEx_OCN_Start_IT+0x54>
 8010bc0:	2908      	cmp	r1, #8
 8010bc2:	d029      	beq.n	8010c18 <HAL_TIMEx_OCN_Start_IT+0x60>
 8010bc4:	b1e1      	cbz	r1, 8010c00 <HAL_TIMEx_OCN_Start_IT+0x48>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8010bc6:	6822      	ldr	r2, [r4, #0]
 8010bc8:	68d3      	ldr	r3, [r2, #12]
 8010bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bce:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010bd0:	2204      	movs	r2, #4
 8010bd2:	6820      	ldr	r0, [r4, #0]
 8010bd4:	f7ff fe44 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8010bd8:	6822      	ldr	r2, [r4, #0]
 8010bda:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010be0:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010be2:	6822      	ldr	r2, [r4, #0]
 8010be4:	6891      	ldr	r1, [r2, #8]
 8010be6:	4b0f      	ldr	r3, [pc, #60]	; (8010c24 <HAL_TIMEx_OCN_Start_IT+0x6c>)
 8010be8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bea:	2b06      	cmp	r3, #6
 8010bec:	d006      	beq.n	8010bfc <HAL_TIMEx_OCN_Start_IT+0x44>
 8010bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bf2:	d003      	beq.n	8010bfc <HAL_TIMEx_OCN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8010bf4:	6813      	ldr	r3, [r2, #0]
 8010bf6:	f043 0301 	orr.w	r3, r3, #1
 8010bfa:	6013      	str	r3, [r2, #0]
}
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010c00:	6802      	ldr	r2, [r0, #0]
 8010c02:	68d3      	ldr	r3, [r2, #12]
 8010c04:	f043 0302 	orr.w	r3, r3, #2
 8010c08:	60d3      	str	r3, [r2, #12]
      break;
 8010c0a:	e7dc      	b.n	8010bc6 <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010c0c:	6802      	ldr	r2, [r0, #0]
 8010c0e:	68d3      	ldr	r3, [r2, #12]
 8010c10:	f043 0304 	orr.w	r3, r3, #4
 8010c14:	60d3      	str	r3, [r2, #12]
      break;
 8010c16:	e7d6      	b.n	8010bc6 <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010c18:	6802      	ldr	r2, [r0, #0]
 8010c1a:	68d3      	ldr	r3, [r2, #12]
 8010c1c:	f043 0308 	orr.w	r3, r3, #8
 8010c20:	60d3      	str	r3, [r2, #12]
      break;
 8010c22:	e7d0      	b.n	8010bc6 <HAL_TIMEx_OCN_Start_IT+0xe>
 8010c24:	00010007 	.word	0x00010007

08010c28 <HAL_TIMEx_OCN_Stop_IT>:
{
 8010c28:	b510      	push	{r4, lr}
 8010c2a:	4604      	mov	r4, r0
  switch (Channel)
 8010c2c:	2904      	cmp	r1, #4
 8010c2e:	d037      	beq.n	8010ca0 <HAL_TIMEx_OCN_Stop_IT+0x78>
 8010c30:	2908      	cmp	r1, #8
 8010c32:	d03b      	beq.n	8010cac <HAL_TIMEx_OCN_Stop_IT+0x84>
 8010c34:	2900      	cmp	r1, #0
 8010c36:	d02d      	beq.n	8010c94 <HAL_TIMEx_OCN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010c38:	2200      	movs	r2, #0
 8010c3a:	6820      	ldr	r0, [r4, #0]
 8010c3c:	f7ff fe10 	bl	8010860 <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8010c44:	f240 4244 	movw	r2, #1092	; 0x444
 8010c48:	4211      	tst	r1, r2
 8010c4a:	d103      	bne.n	8010c54 <HAL_TIMEx_OCN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8010c4c:	68da      	ldr	r2, [r3, #12]
 8010c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010c52:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 8010c54:	6823      	ldr	r3, [r4, #0]
 8010c56:	6a19      	ldr	r1, [r3, #32]
 8010c58:	f241 1211 	movw	r2, #4369	; 0x1111
 8010c5c:	4211      	tst	r1, r2
 8010c5e:	d108      	bne.n	8010c72 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 8010c60:	6a19      	ldr	r1, [r3, #32]
 8010c62:	f240 4244 	movw	r2, #1092	; 0x444
 8010c66:	4211      	tst	r1, r2
 8010c68:	d103      	bne.n	8010c72 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 8010c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010c70:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8010c72:	6823      	ldr	r3, [r4, #0]
 8010c74:	6a19      	ldr	r1, [r3, #32]
 8010c76:	f241 1211 	movw	r2, #4369	; 0x1111
 8010c7a:	4211      	tst	r1, r2
 8010c7c:	d108      	bne.n	8010c90 <HAL_TIMEx_OCN_Stop_IT+0x68>
 8010c7e:	6a19      	ldr	r1, [r3, #32]
 8010c80:	f240 4244 	movw	r2, #1092	; 0x444
 8010c84:	4211      	tst	r1, r2
 8010c86:	d103      	bne.n	8010c90 <HAL_TIMEx_OCN_Stop_IT+0x68>
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	f022 0201 	bic.w	r2, r2, #1
 8010c8e:	601a      	str	r2, [r3, #0]
}
 8010c90:	2000      	movs	r0, #0
 8010c92:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010c94:	6802      	ldr	r2, [r0, #0]
 8010c96:	68d3      	ldr	r3, [r2, #12]
 8010c98:	f023 0302 	bic.w	r3, r3, #2
 8010c9c:	60d3      	str	r3, [r2, #12]
      break;
 8010c9e:	e7cb      	b.n	8010c38 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010ca0:	6802      	ldr	r2, [r0, #0]
 8010ca2:	68d3      	ldr	r3, [r2, #12]
 8010ca4:	f023 0304 	bic.w	r3, r3, #4
 8010ca8:	60d3      	str	r3, [r2, #12]
      break;
 8010caa:	e7c5      	b.n	8010c38 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010cac:	6802      	ldr	r2, [r0, #0]
 8010cae:	68d3      	ldr	r3, [r2, #12]
 8010cb0:	f023 0308 	bic.w	r3, r3, #8
 8010cb4:	60d3      	str	r3, [r2, #12]
      break;
 8010cb6:	e7bf      	b.n	8010c38 <HAL_TIMEx_OCN_Stop_IT+0x10>

08010cb8 <HAL_TIMEx_OCN_Start_DMA>:
{
 8010cb8:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 8010cba:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8010cbe:	b2e4      	uxtb	r4, r4
 8010cc0:	2c02      	cmp	r4, #2
 8010cc2:	d071      	beq.n	8010da8 <HAL_TIMEx_OCN_Start_DMA+0xf0>
  else if ((htim->State == HAL_TIM_STATE_READY))
 8010cc4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8010cc8:	b2e4      	uxtb	r4, r4
 8010cca:	2c01      	cmp	r4, #1
 8010ccc:	d020      	beq.n	8010d10 <HAL_TIMEx_OCN_Start_DMA+0x58>
 8010cce:	4616      	mov	r6, r2
 8010cd0:	460d      	mov	r5, r1
 8010cd2:	4604      	mov	r4, r0
  switch (Channel)
 8010cd4:	2904      	cmp	r1, #4
 8010cd6:	d03b      	beq.n	8010d50 <HAL_TIMEx_OCN_Start_DMA+0x98>
 8010cd8:	2908      	cmp	r1, #8
 8010cda:	d04f      	beq.n	8010d7c <HAL_TIMEx_OCN_Start_DMA+0xc4>
 8010cdc:	b309      	cbz	r1, 8010d22 <HAL_TIMEx_OCN_Start_DMA+0x6a>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010cde:	2204      	movs	r2, #4
 8010ce0:	4629      	mov	r1, r5
 8010ce2:	6820      	ldr	r0, [r4, #0]
 8010ce4:	f7ff fdbc 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8010ce8:	6822      	ldr	r2, [r4, #0]
 8010cea:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cf0:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010cf2:	6822      	ldr	r2, [r4, #0]
 8010cf4:	6891      	ldr	r1, [r2, #8]
 8010cf6:	4b32      	ldr	r3, [pc, #200]	; (8010dc0 <HAL_TIMEx_OCN_Start_DMA+0x108>)
 8010cf8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010cfa:	2b06      	cmp	r3, #6
 8010cfc:	d05c      	beq.n	8010db8 <HAL_TIMEx_OCN_Start_DMA+0x100>
 8010cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d02:	d05b      	beq.n	8010dbc <HAL_TIMEx_OCN_Start_DMA+0x104>
    __HAL_TIM_ENABLE(htim);
 8010d04:	6813      	ldr	r3, [r2, #0]
 8010d06:	f043 0301 	orr.w	r3, r3, #1
 8010d0a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8010d0c:	2000      	movs	r0, #0
}
 8010d0e:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8010d10:	b11a      	cbz	r2, 8010d1a <HAL_TIMEx_OCN_Start_DMA+0x62>
      htim->State = HAL_TIM_STATE_BUSY;
 8010d12:	2402      	movs	r4, #2
 8010d14:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8010d18:	e7d9      	b.n	8010cce <HAL_TIMEx_OCN_Start_DMA+0x16>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d0f9      	beq.n	8010d12 <HAL_TIMEx_OCN_Start_DMA+0x5a>
      return HAL_ERROR;
 8010d1e:	2001      	movs	r0, #1
 8010d20:	e7f5      	b.n	8010d0e <HAL_TIMEx_OCN_Start_DMA+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d22:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8010d24:	4927      	ldr	r1, [pc, #156]	; (8010dc4 <HAL_TIMEx_OCN_Start_DMA+0x10c>)
 8010d26:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010d28:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8010d2a:	4927      	ldr	r1, [pc, #156]	; (8010dc8 <HAL_TIMEx_OCN_Start_DMA+0x110>)
 8010d2c:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010d2e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8010d30:	4926      	ldr	r1, [pc, #152]	; (8010dcc <HAL_TIMEx_OCN_Start_DMA+0x114>)
 8010d32:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8010d34:	6802      	ldr	r2, [r0, #0]
 8010d36:	3234      	adds	r2, #52	; 0x34
 8010d38:	4631      	mov	r1, r6
 8010d3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010d3c:	f7f4 f919 	bl	8004f72 <HAL_DMA_Start_IT>
 8010d40:	2800      	cmp	r0, #0
 8010d42:	d133      	bne.n	8010dac <HAL_TIMEx_OCN_Start_DMA+0xf4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010d44:	6822      	ldr	r2, [r4, #0]
 8010d46:	68d3      	ldr	r3, [r2, #12]
 8010d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010d4c:	60d3      	str	r3, [r2, #12]
      break;
 8010d4e:	e7c6      	b.n	8010cde <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d50:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010d52:	491c      	ldr	r1, [pc, #112]	; (8010dc4 <HAL_TIMEx_OCN_Start_DMA+0x10c>)
 8010d54:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010d56:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010d58:	491b      	ldr	r1, [pc, #108]	; (8010dc8 <HAL_TIMEx_OCN_Start_DMA+0x110>)
 8010d5a:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010d5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010d5e:	491b      	ldr	r1, [pc, #108]	; (8010dcc <HAL_TIMEx_OCN_Start_DMA+0x114>)
 8010d60:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8010d62:	6802      	ldr	r2, [r0, #0]
 8010d64:	3238      	adds	r2, #56	; 0x38
 8010d66:	4631      	mov	r1, r6
 8010d68:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010d6a:	f7f4 f902 	bl	8004f72 <HAL_DMA_Start_IT>
 8010d6e:	b9f8      	cbnz	r0, 8010db0 <HAL_TIMEx_OCN_Start_DMA+0xf8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010d70:	6822      	ldr	r2, [r4, #0]
 8010d72:	68d3      	ldr	r3, [r2, #12]
 8010d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010d78:	60d3      	str	r3, [r2, #12]
      break;
 8010d7a:	e7b0      	b.n	8010cde <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d7c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010d7e:	4911      	ldr	r1, [pc, #68]	; (8010dc4 <HAL_TIMEx_OCN_Start_DMA+0x10c>)
 8010d80:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010d82:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010d84:	4910      	ldr	r1, [pc, #64]	; (8010dc8 <HAL_TIMEx_OCN_Start_DMA+0x110>)
 8010d86:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010d88:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010d8a:	4910      	ldr	r1, [pc, #64]	; (8010dcc <HAL_TIMEx_OCN_Start_DMA+0x114>)
 8010d8c:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8010d8e:	6802      	ldr	r2, [r0, #0]
 8010d90:	323c      	adds	r2, #60	; 0x3c
 8010d92:	4631      	mov	r1, r6
 8010d94:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8010d96:	f7f4 f8ec 	bl	8004f72 <HAL_DMA_Start_IT>
 8010d9a:	b958      	cbnz	r0, 8010db4 <HAL_TIMEx_OCN_Start_DMA+0xfc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010d9c:	6822      	ldr	r2, [r4, #0]
 8010d9e:	68d3      	ldr	r3, [r2, #12]
 8010da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010da4:	60d3      	str	r3, [r2, #12]
      break;
 8010da6:	e79a      	b.n	8010cde <HAL_TIMEx_OCN_Start_DMA+0x26>
    return HAL_BUSY;
 8010da8:	2002      	movs	r0, #2
 8010daa:	e7b0      	b.n	8010d0e <HAL_TIMEx_OCN_Start_DMA+0x56>
        return HAL_ERROR;
 8010dac:	2001      	movs	r0, #1
 8010dae:	e7ae      	b.n	8010d0e <HAL_TIMEx_OCN_Start_DMA+0x56>
        return HAL_ERROR;
 8010db0:	2001      	movs	r0, #1
 8010db2:	e7ac      	b.n	8010d0e <HAL_TIMEx_OCN_Start_DMA+0x56>
        return HAL_ERROR;
 8010db4:	2001      	movs	r0, #1
 8010db6:	e7aa      	b.n	8010d0e <HAL_TIMEx_OCN_Start_DMA+0x56>
  return HAL_OK;
 8010db8:	2000      	movs	r0, #0
 8010dba:	e7a8      	b.n	8010d0e <HAL_TIMEx_OCN_Start_DMA+0x56>
 8010dbc:	2000      	movs	r0, #0
 8010dbe:	e7a6      	b.n	8010d0e <HAL_TIMEx_OCN_Start_DMA+0x56>
 8010dc0:	00010007 	.word	0x00010007
 8010dc4:	0800e7ed 	.word	0x0800e7ed
 8010dc8:	0800e833 	.word	0x0800e833
 8010dcc:	0800ea37 	.word	0x0800ea37

08010dd0 <HAL_TIMEx_OCN_Stop_DMA>:
{
 8010dd0:	b538      	push	{r3, r4, r5, lr}
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	460d      	mov	r5, r1
  switch (Channel)
 8010dd6:	2904      	cmp	r1, #4
 8010dd8:	d033      	beq.n	8010e42 <HAL_TIMEx_OCN_Stop_DMA+0x72>
 8010dda:	2908      	cmp	r1, #8
 8010ddc:	d03a      	beq.n	8010e54 <HAL_TIMEx_OCN_Stop_DMA+0x84>
 8010dde:	b339      	cbz	r1, 8010e30 <HAL_TIMEx_OCN_Stop_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010de0:	2200      	movs	r2, #0
 8010de2:	4629      	mov	r1, r5
 8010de4:	6820      	ldr	r0, [r4, #0]
 8010de6:	f7ff fd3b 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	6a19      	ldr	r1, [r3, #32]
 8010dee:	f241 1211 	movw	r2, #4369	; 0x1111
 8010df2:	4211      	tst	r1, r2
 8010df4:	d108      	bne.n	8010e08 <HAL_TIMEx_OCN_Stop_DMA+0x38>
 8010df6:	6a19      	ldr	r1, [r3, #32]
 8010df8:	f240 4244 	movw	r2, #1092	; 0x444
 8010dfc:	4211      	tst	r1, r2
 8010dfe:	d103      	bne.n	8010e08 <HAL_TIMEx_OCN_Stop_DMA+0x38>
 8010e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010e06:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8010e08:	6823      	ldr	r3, [r4, #0]
 8010e0a:	6a19      	ldr	r1, [r3, #32]
 8010e0c:	f241 1211 	movw	r2, #4369	; 0x1111
 8010e10:	4211      	tst	r1, r2
 8010e12:	d108      	bne.n	8010e26 <HAL_TIMEx_OCN_Stop_DMA+0x56>
 8010e14:	6a19      	ldr	r1, [r3, #32]
 8010e16:	f240 4244 	movw	r2, #1092	; 0x444
 8010e1a:	4211      	tst	r1, r2
 8010e1c:	d103      	bne.n	8010e26 <HAL_TIMEx_OCN_Stop_DMA+0x56>
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	f022 0201 	bic.w	r2, r2, #1
 8010e24:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8010e26:	2301      	movs	r3, #1
 8010e28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010e30:	6802      	ldr	r2, [r0, #0]
 8010e32:	68d3      	ldr	r3, [r2, #12]
 8010e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010e38:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010e3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e3c:	f7f4 f90b 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 8010e40:	e7ce      	b.n	8010de0 <HAL_TIMEx_OCN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010e42:	6802      	ldr	r2, [r0, #0]
 8010e44:	68d3      	ldr	r3, [r2, #12]
 8010e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010e4a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010e4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010e4e:	f7f4 f902 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 8010e52:	e7c5      	b.n	8010de0 <HAL_TIMEx_OCN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8010e54:	6802      	ldr	r2, [r0, #0]
 8010e56:	68d3      	ldr	r3, [r2, #12]
 8010e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e5c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010e5e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8010e60:	f7f4 f8f9 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 8010e64:	e7bc      	b.n	8010de0 <HAL_TIMEx_OCN_Stop_DMA+0x10>
	...

08010e68 <HAL_TIMEx_PWMN_Start>:
{
 8010e68:	b510      	push	{r4, lr}
 8010e6a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010e6c:	2204      	movs	r2, #4
 8010e6e:	6800      	ldr	r0, [r0, #0]
 8010e70:	f7ff fcf6 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8010e74:	6822      	ldr	r2, [r4, #0]
 8010e76:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e7c:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e7e:	6822      	ldr	r2, [r4, #0]
 8010e80:	6891      	ldr	r1, [r2, #8]
 8010e82:	4b06      	ldr	r3, [pc, #24]	; (8010e9c <HAL_TIMEx_PWMN_Start+0x34>)
 8010e84:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e86:	2b06      	cmp	r3, #6
 8010e88:	d006      	beq.n	8010e98 <HAL_TIMEx_PWMN_Start+0x30>
 8010e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e8e:	d003      	beq.n	8010e98 <HAL_TIMEx_PWMN_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8010e90:	6813      	ldr	r3, [r2, #0]
 8010e92:	f043 0301 	orr.w	r3, r3, #1
 8010e96:	6013      	str	r3, [r2, #0]
}
 8010e98:	2000      	movs	r0, #0
 8010e9a:	bd10      	pop	{r4, pc}
 8010e9c:	00010007 	.word	0x00010007

08010ea0 <HAL_TIMEx_PWMN_Stop>:
{
 8010ea0:	b510      	push	{r4, lr}
 8010ea2:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	6800      	ldr	r0, [r0, #0]
 8010ea8:	f7ff fcda 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8010eac:	6823      	ldr	r3, [r4, #0]
 8010eae:	6a19      	ldr	r1, [r3, #32]
 8010eb0:	f241 1211 	movw	r2, #4369	; 0x1111
 8010eb4:	4211      	tst	r1, r2
 8010eb6:	d108      	bne.n	8010eca <HAL_TIMEx_PWMN_Stop+0x2a>
 8010eb8:	6a19      	ldr	r1, [r3, #32]
 8010eba:	f240 4244 	movw	r2, #1092	; 0x444
 8010ebe:	4211      	tst	r1, r2
 8010ec0:	d103      	bne.n	8010eca <HAL_TIMEx_PWMN_Stop+0x2a>
 8010ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010ec8:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8010eca:	6823      	ldr	r3, [r4, #0]
 8010ecc:	6a19      	ldr	r1, [r3, #32]
 8010ece:	f241 1211 	movw	r2, #4369	; 0x1111
 8010ed2:	4211      	tst	r1, r2
 8010ed4:	d108      	bne.n	8010ee8 <HAL_TIMEx_PWMN_Stop+0x48>
 8010ed6:	6a19      	ldr	r1, [r3, #32]
 8010ed8:	f240 4244 	movw	r2, #1092	; 0x444
 8010edc:	4211      	tst	r1, r2
 8010ede:	d103      	bne.n	8010ee8 <HAL_TIMEx_PWMN_Stop+0x48>
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	f022 0201 	bic.w	r2, r2, #1
 8010ee6:	601a      	str	r2, [r3, #0]
}
 8010ee8:	2000      	movs	r0, #0
 8010eea:	bd10      	pop	{r4, pc}

08010eec <HAL_TIMEx_PWMN_Start_IT>:
{
 8010eec:	b510      	push	{r4, lr}
 8010eee:	4604      	mov	r4, r0
  switch (Channel)
 8010ef0:	2904      	cmp	r1, #4
 8010ef2:	d025      	beq.n	8010f40 <HAL_TIMEx_PWMN_Start_IT+0x54>
 8010ef4:	2908      	cmp	r1, #8
 8010ef6:	d029      	beq.n	8010f4c <HAL_TIMEx_PWMN_Start_IT+0x60>
 8010ef8:	b1e1      	cbz	r1, 8010f34 <HAL_TIMEx_PWMN_Start_IT+0x48>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8010efa:	6822      	ldr	r2, [r4, #0]
 8010efc:	68d3      	ldr	r3, [r2, #12]
 8010efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f02:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010f04:	2204      	movs	r2, #4
 8010f06:	6820      	ldr	r0, [r4, #0]
 8010f08:	f7ff fcaa 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8010f0c:	6822      	ldr	r2, [r4, #0]
 8010f0e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f14:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010f16:	6822      	ldr	r2, [r4, #0]
 8010f18:	6891      	ldr	r1, [r2, #8]
 8010f1a:	4b0f      	ldr	r3, [pc, #60]	; (8010f58 <HAL_TIMEx_PWMN_Start_IT+0x6c>)
 8010f1c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f1e:	2b06      	cmp	r3, #6
 8010f20:	d006      	beq.n	8010f30 <HAL_TIMEx_PWMN_Start_IT+0x44>
 8010f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f26:	d003      	beq.n	8010f30 <HAL_TIMEx_PWMN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8010f28:	6813      	ldr	r3, [r2, #0]
 8010f2a:	f043 0301 	orr.w	r3, r3, #1
 8010f2e:	6013      	str	r3, [r2, #0]
}
 8010f30:	2000      	movs	r0, #0
 8010f32:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010f34:	6802      	ldr	r2, [r0, #0]
 8010f36:	68d3      	ldr	r3, [r2, #12]
 8010f38:	f043 0302 	orr.w	r3, r3, #2
 8010f3c:	60d3      	str	r3, [r2, #12]
      break;
 8010f3e:	e7dc      	b.n	8010efa <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010f40:	6802      	ldr	r2, [r0, #0]
 8010f42:	68d3      	ldr	r3, [r2, #12]
 8010f44:	f043 0304 	orr.w	r3, r3, #4
 8010f48:	60d3      	str	r3, [r2, #12]
      break;
 8010f4a:	e7d6      	b.n	8010efa <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010f4c:	6802      	ldr	r2, [r0, #0]
 8010f4e:	68d3      	ldr	r3, [r2, #12]
 8010f50:	f043 0308 	orr.w	r3, r3, #8
 8010f54:	60d3      	str	r3, [r2, #12]
      break;
 8010f56:	e7d0      	b.n	8010efa <HAL_TIMEx_PWMN_Start_IT+0xe>
 8010f58:	00010007 	.word	0x00010007

08010f5c <HAL_TIMEx_PWMN_Stop_IT>:
{
 8010f5c:	b510      	push	{r4, lr}
 8010f5e:	4604      	mov	r4, r0
  switch (Channel)
 8010f60:	2904      	cmp	r1, #4
 8010f62:	d037      	beq.n	8010fd4 <HAL_TIMEx_PWMN_Stop_IT+0x78>
 8010f64:	2908      	cmp	r1, #8
 8010f66:	d03b      	beq.n	8010fe0 <HAL_TIMEx_PWMN_Stop_IT+0x84>
 8010f68:	2900      	cmp	r1, #0
 8010f6a:	d02d      	beq.n	8010fc8 <HAL_TIMEx_PWMN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	6820      	ldr	r0, [r4, #0]
 8010f70:	f7ff fc76 	bl	8010860 <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 8010f74:	6823      	ldr	r3, [r4, #0]
 8010f76:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8010f78:	f240 4244 	movw	r2, #1092	; 0x444
 8010f7c:	4211      	tst	r1, r2
 8010f7e:	d103      	bne.n	8010f88 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8010f80:	68da      	ldr	r2, [r3, #12]
 8010f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f86:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 8010f88:	6823      	ldr	r3, [r4, #0]
 8010f8a:	6a19      	ldr	r1, [r3, #32]
 8010f8c:	f241 1211 	movw	r2, #4369	; 0x1111
 8010f90:	4211      	tst	r1, r2
 8010f92:	d108      	bne.n	8010fa6 <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 8010f94:	6a19      	ldr	r1, [r3, #32]
 8010f96:	f240 4244 	movw	r2, #1092	; 0x444
 8010f9a:	4211      	tst	r1, r2
 8010f9c:	d103      	bne.n	8010fa6 <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 8010f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010fa4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8010fa6:	6823      	ldr	r3, [r4, #0]
 8010fa8:	6a19      	ldr	r1, [r3, #32]
 8010faa:	f241 1211 	movw	r2, #4369	; 0x1111
 8010fae:	4211      	tst	r1, r2
 8010fb0:	d108      	bne.n	8010fc4 <HAL_TIMEx_PWMN_Stop_IT+0x68>
 8010fb2:	6a19      	ldr	r1, [r3, #32]
 8010fb4:	f240 4244 	movw	r2, #1092	; 0x444
 8010fb8:	4211      	tst	r1, r2
 8010fba:	d103      	bne.n	8010fc4 <HAL_TIMEx_PWMN_Stop_IT+0x68>
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	f022 0201 	bic.w	r2, r2, #1
 8010fc2:	601a      	str	r2, [r3, #0]
}
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010fc8:	6802      	ldr	r2, [r0, #0]
 8010fca:	68d3      	ldr	r3, [r2, #12]
 8010fcc:	f023 0302 	bic.w	r3, r3, #2
 8010fd0:	60d3      	str	r3, [r2, #12]
      break;
 8010fd2:	e7cb      	b.n	8010f6c <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010fd4:	6802      	ldr	r2, [r0, #0]
 8010fd6:	68d3      	ldr	r3, [r2, #12]
 8010fd8:	f023 0304 	bic.w	r3, r3, #4
 8010fdc:	60d3      	str	r3, [r2, #12]
      break;
 8010fde:	e7c5      	b.n	8010f6c <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010fe0:	6802      	ldr	r2, [r0, #0]
 8010fe2:	68d3      	ldr	r3, [r2, #12]
 8010fe4:	f023 0308 	bic.w	r3, r3, #8
 8010fe8:	60d3      	str	r3, [r2, #12]
      break;
 8010fea:	e7bf      	b.n	8010f6c <HAL_TIMEx_PWMN_Stop_IT+0x10>

08010fec <HAL_TIMEx_PWMN_Start_DMA>:
{
 8010fec:	b570      	push	{r4, r5, r6, lr}
  if ((htim->State == HAL_TIM_STATE_BUSY))
 8010fee:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8010ff2:	b2e4      	uxtb	r4, r4
 8010ff4:	2c02      	cmp	r4, #2
 8010ff6:	d071      	beq.n	80110dc <HAL_TIMEx_PWMN_Start_DMA+0xf0>
  else if ((htim->State == HAL_TIM_STATE_READY))
 8010ff8:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8010ffc:	b2e4      	uxtb	r4, r4
 8010ffe:	2c01      	cmp	r4, #1
 8011000:	d020      	beq.n	8011044 <HAL_TIMEx_PWMN_Start_DMA+0x58>
 8011002:	4616      	mov	r6, r2
 8011004:	460d      	mov	r5, r1
 8011006:	4604      	mov	r4, r0
  switch (Channel)
 8011008:	2904      	cmp	r1, #4
 801100a:	d03b      	beq.n	8011084 <HAL_TIMEx_PWMN_Start_DMA+0x98>
 801100c:	2908      	cmp	r1, #8
 801100e:	d04f      	beq.n	80110b0 <HAL_TIMEx_PWMN_Start_DMA+0xc4>
 8011010:	b309      	cbz	r1, 8011056 <HAL_TIMEx_PWMN_Start_DMA+0x6a>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8011012:	2204      	movs	r2, #4
 8011014:	4629      	mov	r1, r5
 8011016:	6820      	ldr	r0, [r4, #0]
 8011018:	f7ff fc22 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 801101c:	6822      	ldr	r2, [r4, #0]
 801101e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8011020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011024:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011026:	6822      	ldr	r2, [r4, #0]
 8011028:	6891      	ldr	r1, [r2, #8]
 801102a:	4b32      	ldr	r3, [pc, #200]	; (80110f4 <HAL_TIMEx_PWMN_Start_DMA+0x108>)
 801102c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801102e:	2b06      	cmp	r3, #6
 8011030:	d05c      	beq.n	80110ec <HAL_TIMEx_PWMN_Start_DMA+0x100>
 8011032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011036:	d05b      	beq.n	80110f0 <HAL_TIMEx_PWMN_Start_DMA+0x104>
    __HAL_TIM_ENABLE(htim);
 8011038:	6813      	ldr	r3, [r2, #0]
 801103a:	f043 0301 	orr.w	r3, r3, #1
 801103e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8011040:	2000      	movs	r0, #0
}
 8011042:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8011044:	b11a      	cbz	r2, 801104e <HAL_TIMEx_PWMN_Start_DMA+0x62>
      htim->State = HAL_TIM_STATE_BUSY;
 8011046:	2402      	movs	r4, #2
 8011048:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 801104c:	e7d9      	b.n	8011002 <HAL_TIMEx_PWMN_Start_DMA+0x16>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 801104e:	2b00      	cmp	r3, #0
 8011050:	d0f9      	beq.n	8011046 <HAL_TIMEx_PWMN_Start_DMA+0x5a>
      return HAL_ERROR;
 8011052:	2001      	movs	r0, #1
 8011054:	e7f5      	b.n	8011042 <HAL_TIMEx_PWMN_Start_DMA+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011056:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8011058:	4927      	ldr	r1, [pc, #156]	; (80110f8 <HAL_TIMEx_PWMN_Start_DMA+0x10c>)
 801105a:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801105c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801105e:	4927      	ldr	r1, [pc, #156]	; (80110fc <HAL_TIMEx_PWMN_Start_DMA+0x110>)
 8011060:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8011062:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8011064:	4926      	ldr	r1, [pc, #152]	; (8011100 <HAL_TIMEx_PWMN_Start_DMA+0x114>)
 8011066:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8011068:	6802      	ldr	r2, [r0, #0]
 801106a:	3234      	adds	r2, #52	; 0x34
 801106c:	4631      	mov	r1, r6
 801106e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011070:	f7f3 ff7f 	bl	8004f72 <HAL_DMA_Start_IT>
 8011074:	2800      	cmp	r0, #0
 8011076:	d133      	bne.n	80110e0 <HAL_TIMEx_PWMN_Start_DMA+0xf4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8011078:	6822      	ldr	r2, [r4, #0]
 801107a:	68d3      	ldr	r3, [r2, #12]
 801107c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011080:	60d3      	str	r3, [r2, #12]
      break;
 8011082:	e7c6      	b.n	8011012 <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011084:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8011086:	491c      	ldr	r1, [pc, #112]	; (80110f8 <HAL_TIMEx_PWMN_Start_DMA+0x10c>)
 8011088:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801108a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801108c:	491b      	ldr	r1, [pc, #108]	; (80110fc <HAL_TIMEx_PWMN_Start_DMA+0x110>)
 801108e:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8011090:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8011092:	491b      	ldr	r1, [pc, #108]	; (8011100 <HAL_TIMEx_PWMN_Start_DMA+0x114>)
 8011094:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8011096:	6802      	ldr	r2, [r0, #0]
 8011098:	3238      	adds	r2, #56	; 0x38
 801109a:	4631      	mov	r1, r6
 801109c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801109e:	f7f3 ff68 	bl	8004f72 <HAL_DMA_Start_IT>
 80110a2:	b9f8      	cbnz	r0, 80110e4 <HAL_TIMEx_PWMN_Start_DMA+0xf8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80110a4:	6822      	ldr	r2, [r4, #0]
 80110a6:	68d3      	ldr	r3, [r2, #12]
 80110a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80110ac:	60d3      	str	r3, [r2, #12]
      break;
 80110ae:	e7b0      	b.n	8011012 <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80110b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80110b2:	4911      	ldr	r1, [pc, #68]	; (80110f8 <HAL_TIMEx_PWMN_Start_DMA+0x10c>)
 80110b4:	62d1      	str	r1, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80110b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80110b8:	4910      	ldr	r1, [pc, #64]	; (80110fc <HAL_TIMEx_PWMN_Start_DMA+0x110>)
 80110ba:	6311      	str	r1, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80110bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80110be:	4910      	ldr	r1, [pc, #64]	; (8011100 <HAL_TIMEx_PWMN_Start_DMA+0x114>)
 80110c0:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80110c2:	6802      	ldr	r2, [r0, #0]
 80110c4:	323c      	adds	r2, #60	; 0x3c
 80110c6:	4631      	mov	r1, r6
 80110c8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80110ca:	f7f3 ff52 	bl	8004f72 <HAL_DMA_Start_IT>
 80110ce:	b958      	cbnz	r0, 80110e8 <HAL_TIMEx_PWMN_Start_DMA+0xfc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80110d0:	6822      	ldr	r2, [r4, #0]
 80110d2:	68d3      	ldr	r3, [r2, #12]
 80110d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110d8:	60d3      	str	r3, [r2, #12]
      break;
 80110da:	e79a      	b.n	8011012 <HAL_TIMEx_PWMN_Start_DMA+0x26>
    return HAL_BUSY;
 80110dc:	2002      	movs	r0, #2
 80110de:	e7b0      	b.n	8011042 <HAL_TIMEx_PWMN_Start_DMA+0x56>
        return HAL_ERROR;
 80110e0:	2001      	movs	r0, #1
 80110e2:	e7ae      	b.n	8011042 <HAL_TIMEx_PWMN_Start_DMA+0x56>
        return HAL_ERROR;
 80110e4:	2001      	movs	r0, #1
 80110e6:	e7ac      	b.n	8011042 <HAL_TIMEx_PWMN_Start_DMA+0x56>
        return HAL_ERROR;
 80110e8:	2001      	movs	r0, #1
 80110ea:	e7aa      	b.n	8011042 <HAL_TIMEx_PWMN_Start_DMA+0x56>
  return HAL_OK;
 80110ec:	2000      	movs	r0, #0
 80110ee:	e7a8      	b.n	8011042 <HAL_TIMEx_PWMN_Start_DMA+0x56>
 80110f0:	2000      	movs	r0, #0
 80110f2:	e7a6      	b.n	8011042 <HAL_TIMEx_PWMN_Start_DMA+0x56>
 80110f4:	00010007 	.word	0x00010007
 80110f8:	0800e7ed 	.word	0x0800e7ed
 80110fc:	0800e833 	.word	0x0800e833
 8011100:	0800ea37 	.word	0x0800ea37

08011104 <HAL_TIMEx_PWMN_Stop_DMA>:
{
 8011104:	b538      	push	{r3, r4, r5, lr}
 8011106:	4604      	mov	r4, r0
 8011108:	460d      	mov	r5, r1
  switch (Channel)
 801110a:	2904      	cmp	r1, #4
 801110c:	d033      	beq.n	8011176 <HAL_TIMEx_PWMN_Stop_DMA+0x72>
 801110e:	2908      	cmp	r1, #8
 8011110:	d03a      	beq.n	8011188 <HAL_TIMEx_PWMN_Stop_DMA+0x84>
 8011112:	b339      	cbz	r1, 8011164 <HAL_TIMEx_PWMN_Stop_DMA+0x60>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8011114:	2200      	movs	r2, #0
 8011116:	4629      	mov	r1, r5
 8011118:	6820      	ldr	r0, [r4, #0]
 801111a:	f7ff fba1 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 801111e:	6823      	ldr	r3, [r4, #0]
 8011120:	6a19      	ldr	r1, [r3, #32]
 8011122:	f241 1211 	movw	r2, #4369	; 0x1111
 8011126:	4211      	tst	r1, r2
 8011128:	d108      	bne.n	801113c <HAL_TIMEx_PWMN_Stop_DMA+0x38>
 801112a:	6a19      	ldr	r1, [r3, #32]
 801112c:	f240 4244 	movw	r2, #1092	; 0x444
 8011130:	4211      	tst	r1, r2
 8011132:	d103      	bne.n	801113c <HAL_TIMEx_PWMN_Stop_DMA+0x38>
 8011134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801113a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 801113c:	6823      	ldr	r3, [r4, #0]
 801113e:	6a19      	ldr	r1, [r3, #32]
 8011140:	f241 1211 	movw	r2, #4369	; 0x1111
 8011144:	4211      	tst	r1, r2
 8011146:	d108      	bne.n	801115a <HAL_TIMEx_PWMN_Stop_DMA+0x56>
 8011148:	6a19      	ldr	r1, [r3, #32]
 801114a:	f240 4244 	movw	r2, #1092	; 0x444
 801114e:	4211      	tst	r1, r2
 8011150:	d103      	bne.n	801115a <HAL_TIMEx_PWMN_Stop_DMA+0x56>
 8011152:	681a      	ldr	r2, [r3, #0]
 8011154:	f022 0201 	bic.w	r2, r2, #1
 8011158:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 801115a:	2301      	movs	r3, #1
 801115c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011160:	2000      	movs	r0, #0
 8011162:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011164:	6802      	ldr	r2, [r0, #0]
 8011166:	68d3      	ldr	r3, [r2, #12]
 8011168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801116c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 801116e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011170:	f7f3 ff71 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 8011174:	e7ce      	b.n	8011114 <HAL_TIMEx_PWMN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011176:	6802      	ldr	r2, [r0, #0]
 8011178:	68d3      	ldr	r3, [r2, #12]
 801117a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801117e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011180:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011182:	f7f3 ff68 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 8011186:	e7c5      	b.n	8011114 <HAL_TIMEx_PWMN_Stop_DMA+0x10>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011188:	6802      	ldr	r2, [r0, #0]
 801118a:	68d3      	ldr	r3, [r2, #12]
 801118c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011190:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011192:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8011194:	f7f3 ff5f 	bl	8005056 <HAL_DMA_Abort_IT>
      break;
 8011198:	e7bc      	b.n	8011114 <HAL_TIMEx_PWMN_Stop_DMA+0x10>

0801119a <HAL_TIMEx_OnePulseN_Start>:
{
 801119a:	b510      	push	{r4, lr}
 801119c:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 801119e:	2204      	movs	r2, #4
 80111a0:	6800      	ldr	r0, [r0, #0]
 80111a2:	f7ff fb5d 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80111a6:	6822      	ldr	r2, [r4, #0]
 80111a8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80111aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111ae:	6453      	str	r3, [r2, #68]	; 0x44
}
 80111b0:	2000      	movs	r0, #0
 80111b2:	bd10      	pop	{r4, pc}

080111b4 <HAL_TIMEx_OnePulseN_Stop>:
{
 80111b4:	b510      	push	{r4, lr}
 80111b6:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 80111b8:	2200      	movs	r2, #0
 80111ba:	6800      	ldr	r0, [r0, #0]
 80111bc:	f7ff fb50 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 80111c0:	6823      	ldr	r3, [r4, #0]
 80111c2:	6a19      	ldr	r1, [r3, #32]
 80111c4:	f241 1211 	movw	r2, #4369	; 0x1111
 80111c8:	4211      	tst	r1, r2
 80111ca:	d108      	bne.n	80111de <HAL_TIMEx_OnePulseN_Stop+0x2a>
 80111cc:	6a19      	ldr	r1, [r3, #32]
 80111ce:	f240 4244 	movw	r2, #1092	; 0x444
 80111d2:	4211      	tst	r1, r2
 80111d4:	d103      	bne.n	80111de <HAL_TIMEx_OnePulseN_Stop+0x2a>
 80111d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80111dc:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80111de:	6823      	ldr	r3, [r4, #0]
 80111e0:	6a19      	ldr	r1, [r3, #32]
 80111e2:	f241 1211 	movw	r2, #4369	; 0x1111
 80111e6:	4211      	tst	r1, r2
 80111e8:	d108      	bne.n	80111fc <HAL_TIMEx_OnePulseN_Stop+0x48>
 80111ea:	6a19      	ldr	r1, [r3, #32]
 80111ec:	f240 4244 	movw	r2, #1092	; 0x444
 80111f0:	4211      	tst	r1, r2
 80111f2:	d103      	bne.n	80111fc <HAL_TIMEx_OnePulseN_Stop+0x48>
 80111f4:	681a      	ldr	r2, [r3, #0]
 80111f6:	f022 0201 	bic.w	r2, r2, #1
 80111fa:	601a      	str	r2, [r3, #0]
}
 80111fc:	2000      	movs	r0, #0
 80111fe:	bd10      	pop	{r4, pc}

08011200 <HAL_TIMEx_OnePulseN_Start_IT>:
{
 8011200:	b510      	push	{r4, lr}
 8011202:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011204:	6802      	ldr	r2, [r0, #0]
 8011206:	68d3      	ldr	r3, [r2, #12]
 8011208:	f043 0302 	orr.w	r3, r3, #2
 801120c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801120e:	6802      	ldr	r2, [r0, #0]
 8011210:	68d3      	ldr	r3, [r2, #12]
 8011212:	f043 0304 	orr.w	r3, r3, #4
 8011216:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8011218:	2204      	movs	r2, #4
 801121a:	6800      	ldr	r0, [r0, #0]
 801121c:	f7ff fb20 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8011220:	6822      	ldr	r2, [r4, #0]
 8011222:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8011224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011228:	6453      	str	r3, [r2, #68]	; 0x44
}
 801122a:	2000      	movs	r0, #0
 801122c:	bd10      	pop	{r4, pc}

0801122e <HAL_TIMEx_OnePulseN_Stop_IT>:
{
 801122e:	b510      	push	{r4, lr}
 8011230:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011232:	6802      	ldr	r2, [r0, #0]
 8011234:	68d3      	ldr	r3, [r2, #12]
 8011236:	f023 0302 	bic.w	r3, r3, #2
 801123a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801123c:	6802      	ldr	r2, [r0, #0]
 801123e:	68d3      	ldr	r3, [r2, #12]
 8011240:	f023 0304 	bic.w	r3, r3, #4
 8011244:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8011246:	2200      	movs	r2, #0
 8011248:	6800      	ldr	r0, [r0, #0]
 801124a:	f7ff fb09 	bl	8010860 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 801124e:	6823      	ldr	r3, [r4, #0]
 8011250:	6a19      	ldr	r1, [r3, #32]
 8011252:	f241 1211 	movw	r2, #4369	; 0x1111
 8011256:	4211      	tst	r1, r2
 8011258:	d108      	bne.n	801126c <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 801125a:	6a19      	ldr	r1, [r3, #32]
 801125c:	f240 4244 	movw	r2, #1092	; 0x444
 8011260:	4211      	tst	r1, r2
 8011262:	d103      	bne.n	801126c <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 8011264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801126a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 801126c:	6823      	ldr	r3, [r4, #0]
 801126e:	6a19      	ldr	r1, [r3, #32]
 8011270:	f241 1211 	movw	r2, #4369	; 0x1111
 8011274:	4211      	tst	r1, r2
 8011276:	d108      	bne.n	801128a <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 8011278:	6a19      	ldr	r1, [r3, #32]
 801127a:	f240 4244 	movw	r2, #1092	; 0x444
 801127e:	4211      	tst	r1, r2
 8011280:	d103      	bne.n	801128a <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	f022 0201 	bic.w	r2, r2, #1
 8011288:	601a      	str	r2, [r3, #0]
}
 801128a:	2000      	movs	r0, #0
 801128c:	bd10      	pop	{r4, pc}

0801128e <HAL_TIMEx_ConfigCommutEvent>:
  __HAL_LOCK(htim);
 801128e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011292:	2b01      	cmp	r3, #1
 8011294:	d030      	beq.n	80112f8 <HAL_TIMEx_ConfigCommutEvent+0x6a>
{
 8011296:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8011298:	2301      	movs	r3, #1
 801129a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 801129e:	f031 0310 	bics.w	r3, r1, #16
 80112a2:	d001      	beq.n	80112a8 <HAL_TIMEx_ConfigCommutEvent+0x1a>
 80112a4:	2b20      	cmp	r3, #32
 80112a6:	d108      	bne.n	80112ba <HAL_TIMEx_ConfigCommutEvent+0x2c>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80112a8:	6804      	ldr	r4, [r0, #0]
 80112aa:	68a3      	ldr	r3, [r4, #8]
 80112ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112b0:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 80112b2:	6804      	ldr	r4, [r0, #0]
 80112b4:	68a3      	ldr	r3, [r4, #8]
 80112b6:	4319      	orrs	r1, r3
 80112b8:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80112ba:	6801      	ldr	r1, [r0, #0]
 80112bc:	684b      	ldr	r3, [r1, #4]
 80112be:	f043 0301 	orr.w	r3, r3, #1
 80112c2:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 80112c4:	6801      	ldr	r1, [r0, #0]
 80112c6:	684b      	ldr	r3, [r1, #4]
 80112c8:	f023 0304 	bic.w	r3, r3, #4
 80112cc:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 80112ce:	6801      	ldr	r1, [r0, #0]
 80112d0:	684b      	ldr	r3, [r1, #4]
 80112d2:	431a      	orrs	r2, r3
 80112d4:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 80112d6:	6802      	ldr	r2, [r0, #0]
 80112d8:	68d3      	ldr	r3, [r2, #12]
 80112da:	f023 0320 	bic.w	r3, r3, #32
 80112de:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 80112e0:	6802      	ldr	r2, [r0, #0]
 80112e2:	68d3      	ldr	r3, [r2, #12]
 80112e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80112e8:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 80112ea:	2300      	movs	r3, #0
 80112ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80112f0:	4618      	mov	r0, r3
}
 80112f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112f6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80112f8:	2002      	movs	r0, #2
}
 80112fa:	4770      	bx	lr

080112fc <HAL_TIMEx_ConfigCommutEvent_IT>:
  __HAL_LOCK(htim);
 80112fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011300:	2b01      	cmp	r3, #1
 8011302:	d030      	beq.n	8011366 <HAL_TIMEx_ConfigCommutEvent_IT+0x6a>
{
 8011304:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8011306:	2301      	movs	r3, #1
 8011308:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 801130c:	f031 0310 	bics.w	r3, r1, #16
 8011310:	d001      	beq.n	8011316 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8011312:	2b20      	cmp	r3, #32
 8011314:	d108      	bne.n	8011328 <HAL_TIMEx_ConfigCommutEvent_IT+0x2c>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8011316:	6804      	ldr	r4, [r0, #0]
 8011318:	68a3      	ldr	r3, [r4, #8]
 801131a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801131e:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 8011320:	6804      	ldr	r4, [r0, #0]
 8011322:	68a3      	ldr	r3, [r4, #8]
 8011324:	4319      	orrs	r1, r3
 8011326:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8011328:	6801      	ldr	r1, [r0, #0]
 801132a:	684b      	ldr	r3, [r1, #4]
 801132c:	f043 0301 	orr.w	r3, r3, #1
 8011330:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8011332:	6801      	ldr	r1, [r0, #0]
 8011334:	684b      	ldr	r3, [r1, #4]
 8011336:	f023 0304 	bic.w	r3, r3, #4
 801133a:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 801133c:	6801      	ldr	r1, [r0, #0]
 801133e:	684b      	ldr	r3, [r1, #4]
 8011340:	431a      	orrs	r2, r3
 8011342:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8011344:	6802      	ldr	r2, [r0, #0]
 8011346:	68d3      	ldr	r3, [r2, #12]
 8011348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801134c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 801134e:	6802      	ldr	r2, [r0, #0]
 8011350:	68d3      	ldr	r3, [r2, #12]
 8011352:	f043 0320 	orr.w	r3, r3, #32
 8011356:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 8011358:	2300      	movs	r3, #0
 801135a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 801135e:	4618      	mov	r0, r3
}
 8011360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011364:	4770      	bx	lr
  __HAL_LOCK(htim);
 8011366:	2002      	movs	r0, #2
}
 8011368:	4770      	bx	lr
	...

0801136c <HAL_TIMEx_ConfigCommutEvent_DMA>:
  __HAL_LOCK(htim);
 801136c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011370:	2b01      	cmp	r3, #1
 8011372:	d039      	beq.n	80113e8 <HAL_TIMEx_ConfigCommutEvent_DMA+0x7c>
{
 8011374:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8011376:	2301      	movs	r3, #1
 8011378:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 801137c:	f031 0310 	bics.w	r3, r1, #16
 8011380:	d001      	beq.n	8011386 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 8011382:	2b20      	cmp	r3, #32
 8011384:	d108      	bne.n	8011398 <HAL_TIMEx_ConfigCommutEvent_DMA+0x2c>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8011386:	6804      	ldr	r4, [r0, #0]
 8011388:	68a3      	ldr	r3, [r4, #8]
 801138a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801138e:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 8011390:	6804      	ldr	r4, [r0, #0]
 8011392:	68a3      	ldr	r3, [r4, #8]
 8011394:	4319      	orrs	r1, r3
 8011396:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8011398:	6801      	ldr	r1, [r0, #0]
 801139a:	684b      	ldr	r3, [r1, #4]
 801139c:	f043 0301 	orr.w	r3, r3, #1
 80113a0:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 80113a2:	6801      	ldr	r1, [r0, #0]
 80113a4:	684b      	ldr	r3, [r1, #4]
 80113a6:	f023 0304 	bic.w	r3, r3, #4
 80113aa:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 80113ac:	6801      	ldr	r1, [r0, #0]
 80113ae:	684b      	ldr	r3, [r1, #4]
 80113b0:	431a      	orrs	r2, r3
 80113b2:	604a      	str	r2, [r1, #4]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 80113b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80113b6:	4a0d      	ldr	r2, [pc, #52]	; (80113ec <HAL_TIMEx_ConfigCommutEvent_DMA+0x80>)
 80113b8:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 80113ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80113bc:	4a0c      	ldr	r2, [pc, #48]	; (80113f0 <HAL_TIMEx_ConfigCommutEvent_DMA+0x84>)
 80113be:	631a      	str	r2, [r3, #48]	; 0x30
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 80113c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80113c2:	4a0c      	ldr	r2, [pc, #48]	; (80113f4 <HAL_TIMEx_ConfigCommutEvent_DMA+0x88>)
 80113c4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 80113c6:	6802      	ldr	r2, [r0, #0]
 80113c8:	68d3      	ldr	r3, [r2, #12]
 80113ca:	f023 0320 	bic.w	r3, r3, #32
 80113ce:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 80113d0:	6802      	ldr	r2, [r0, #0]
 80113d2:	68d3      	ldr	r3, [r2, #12]
 80113d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80113d8:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 80113da:	2300      	movs	r3, #0
 80113dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80113e0:	4618      	mov	r0, r3
}
 80113e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113e6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80113e8:	2002      	movs	r0, #2
}
 80113ea:	4770      	bx	lr
 80113ec:	08011675 	.word	0x08011675
 80113f0:	08011687 	.word	0x08011687
 80113f4:	0800ea37 	.word	0x0800ea37

080113f8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80113f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d028      	beq.n	8011452 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 8011400:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8011402:	2301      	movs	r3, #1
 8011404:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8011408:	2302      	movs	r3, #2
 801140a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 801140e:	6804      	ldr	r4, [r0, #0]
 8011410:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 8011412:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011414:	4d10      	ldr	r5, [pc, #64]	; (8011458 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8011416:	42ac      	cmp	r4, r5
 8011418:	d003      	beq.n	8011422 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 801141a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 801141e:	42ac      	cmp	r4, r5
 8011420:	d103      	bne.n	801142a <HAL_TIMEx_MasterConfigSynchronization+0x32>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011422:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011426:	684d      	ldr	r5, [r1, #4]
 8011428:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 801142a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801142e:	680d      	ldr	r5, [r1, #0]
 8011430:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8011432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011436:	6889      	ldr	r1, [r1, #8]
 8011438:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 801143a:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 801143c:	6803      	ldr	r3, [r0, #0]
 801143e:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8011440:	2301      	movs	r3, #1
 8011442:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011446:	2300      	movs	r3, #0
 8011448:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 801144c:	4618      	mov	r0, r3
}
 801144e:	bc30      	pop	{r4, r5}
 8011450:	4770      	bx	lr
  __HAL_LOCK(htim);
 8011452:	2002      	movs	r0, #2
}
 8011454:	4770      	bx	lr
 8011456:	bf00      	nop
 8011458:	40012c00 	.word	0x40012c00

0801145c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 801145c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011460:	2b01      	cmp	r3, #1
 8011462:	d03e      	beq.n	80114e2 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8011464:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8011466:	2301      	movs	r3, #1
 8011468:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801146c:	68cb      	ldr	r3, [r1, #12]
 801146e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011472:	688a      	ldr	r2, [r1, #8]
 8011474:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801147a:	684a      	ldr	r2, [r1, #4]
 801147c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801147e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011482:	680a      	ldr	r2, [r1, #0]
 8011484:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801148a:	690a      	ldr	r2, [r1, #16]
 801148c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801148e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011492:	694a      	ldr	r2, [r1, #20]
 8011494:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801149a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 801149c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801149e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80114a2:	698a      	ldr	r2, [r1, #24]
 80114a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80114a8:	6802      	ldr	r2, [r0, #0]
 80114aa:	4c0f      	ldr	r4, [pc, #60]	; (80114e8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80114ac:	42a2      	cmp	r2, r4
 80114ae:	d003      	beq.n	80114b8 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 80114b0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80114b4:	42a2      	cmp	r2, r4
 80114b6:	d10c      	bne.n	80114d2 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80114b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80114bc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80114be:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80114c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80114c6:	69cc      	ldr	r4, [r1, #28]
 80114c8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80114ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80114ce:	6a09      	ldr	r1, [r1, #32]
 80114d0:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80114d2:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80114d4:	2300      	movs	r3, #0
 80114d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80114da:	4618      	mov	r0, r3
}
 80114dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114e0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80114e2:	2002      	movs	r0, #2
}
 80114e4:	4770      	bx	lr
 80114e6:	bf00      	nop
 80114e8:	40012c00 	.word	0x40012c00

080114ec <HAL_TIMEx_ConfigBreakInput>:
  __HAL_LOCK(htim);
 80114ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d023      	beq.n	801153c <HAL_TIMEx_ConfigBreakInput+0x50>
{
 80114f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80114f6:	2301      	movs	r3, #1
 80114f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (sBreakInputConfig->Source)
 80114fc:	6814      	ldr	r4, [r2, #0]
 80114fe:	1e63      	subs	r3, r4, #1
 8011500:	2b07      	cmp	r3, #7
 8011502:	d80b      	bhi.n	801151c <HAL_TIMEx_ConfigBreakInput+0x30>
 8011504:	e8df f003 	tbb	[pc, r3]
 8011508:	360a0430 	.word	0x360a0430
 801150c:	5d0a0a0a 	.word	0x5d0a0a0a
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8011510:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8011512:	260a      	movs	r6, #10
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8011514:	2301      	movs	r3, #1
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8011516:	f44f 6580 	mov.w	r5, #1024	; 0x400
 801151a:	e030      	b.n	801157e <HAL_TIMEx_ConfigBreakInput+0x92>
  switch (BreakInput)
 801151c:	2901      	cmp	r1, #1
 801151e:	d006      	beq.n	801152e <HAL_TIMEx_ConfigBreakInput+0x42>
 8011520:	2902      	cmp	r1, #2
 8011522:	d11c      	bne.n	801155e <HAL_TIMEx_ConfigBreakInput+0x72>
  uint32_t bkin_polarity_bitpos = 0U;
 8011524:	2600      	movs	r6, #0
  uint32_t bkin_enable_bitpos = 0U;
 8011526:	4633      	mov	r3, r6
  uint32_t bkin_polarity_mask = 0U;
 8011528:	4635      	mov	r5, r6
  uint32_t bkin_enable_mask = 0U;
 801152a:	46b4      	mov	ip, r6
 801152c:	e02b      	b.n	8011586 <HAL_TIMEx_ConfigBreakInput+0x9a>
      tmporx = htim->Instance->OR2;
 801152e:	6801      	ldr	r1, [r0, #0]
 8011530:	6e0b      	ldr	r3, [r1, #96]	; 0x60
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8011532:	2c08      	cmp	r4, #8
 8011534:	d012      	beq.n	801155c <HAL_TIMEx_ConfigBreakInput+0x70>
  uint32_t bkin_polarity_bitpos = 0U;
 8011536:	2600      	movs	r6, #0
  uint32_t bkin_polarity_mask = 0U;
 8011538:	4635      	mov	r5, r6
 801153a:	e00a      	b.n	8011552 <HAL_TIMEx_ConfigBreakInput+0x66>
  __HAL_LOCK(htim);
 801153c:	2002      	movs	r0, #2
}
 801153e:	4770      	bx	lr
      tmporx = htim->Instance->OR2;
 8011540:	6801      	ldr	r1, [r0, #0]
 8011542:	6e0c      	ldr	r4, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8011544:	6857      	ldr	r7, [r2, #4]
 8011546:	fa07 f303 	lsl.w	r3, r7, r3
 801154a:	4063      	eors	r3, r4
 801154c:	ea03 030c 	and.w	r3, r3, ip
 8011550:	4063      	eors	r3, r4
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8011552:	6892      	ldr	r2, [r2, #8]
 8011554:	40b2      	lsls	r2, r6
 8011556:	405a      	eors	r2, r3
 8011558:	402a      	ands	r2, r5
 801155a:	4053      	eors	r3, r2
      htim->Instance->OR2 = tmporx;
 801155c:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 801155e:	2300      	movs	r3, #0
 8011560:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8011564:	4618      	mov	r0, r3
}
 8011566:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_enable_mask = TIM1_OR2_BKINE;
 8011568:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 801156a:	2609      	movs	r6, #9
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 801156c:	2300      	movs	r3, #0
      bkin_polarity_mask = TIM1_OR2_BKINP;
 801156e:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011572:	e004      	b.n	801157e <HAL_TIMEx_ConfigBreakInput+0x92>
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8011574:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 8011576:	260b      	movs	r6, #11
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8011578:	2302      	movs	r3, #2
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 801157a:	f44f 6500 	mov.w	r5, #2048	; 0x800
  switch (BreakInput)
 801157e:	2901      	cmp	r1, #1
 8011580:	d0de      	beq.n	8011540 <HAL_TIMEx_ConfigBreakInput+0x54>
 8011582:	2902      	cmp	r1, #2
 8011584:	d1eb      	bne.n	801155e <HAL_TIMEx_ConfigBreakInput+0x72>
      tmporx = htim->Instance->OR3;
 8011586:	6807      	ldr	r7, [r0, #0]
 8011588:	f8d7 e064 	ldr.w	lr, [r7, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 801158c:	6851      	ldr	r1, [r2, #4]
 801158e:	fa01 f303 	lsl.w	r3, r1, r3
 8011592:	ea83 030e 	eor.w	r3, r3, lr
 8011596:	ea03 030c 	and.w	r3, r3, ip
 801159a:	ea83 030e 	eor.w	r3, r3, lr
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 801159e:	2c08      	cmp	r4, #8
 80115a0:	d004      	beq.n	80115ac <HAL_TIMEx_ConfigBreakInput+0xc0>
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80115a2:	6892      	ldr	r2, [r2, #8]
 80115a4:	40b2      	lsls	r2, r6
 80115a6:	405a      	eors	r2, r3
 80115a8:	402a      	ands	r2, r5
 80115aa:	4053      	eors	r3, r2
      htim->Instance->OR3 = tmporx;
 80115ac:	667b      	str	r3, [r7, #100]	; 0x64
      break;
 80115ae:	e7d6      	b.n	801155e <HAL_TIMEx_ConfigBreakInput+0x72>
      tmporx = htim->Instance->OR2;
 80115b0:	6801      	ldr	r1, [r0, #0]
 80115b2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80115b4:	6852      	ldr	r2, [r2, #4]
 80115b6:	ea83 2202 	eor.w	r2, r3, r2, lsl #8
 80115ba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80115be:	4053      	eors	r3, r2
 80115c0:	e7cc      	b.n	801155c <HAL_TIMEx_ConfigBreakInput+0x70>
  switch (BreakInput)
 80115c2:	2901      	cmp	r1, #1
 80115c4:	d0f4      	beq.n	80115b0 <HAL_TIMEx_ConfigBreakInput+0xc4>
 80115c6:	2902      	cmp	r1, #2
 80115c8:	d1c9      	bne.n	801155e <HAL_TIMEx_ConfigBreakInput+0x72>
  uint32_t bkin_polarity_bitpos = 0U;
 80115ca:	2600      	movs	r6, #0
      bkin_enable_bitpos = 8U;
 80115cc:	2308      	movs	r3, #8
  uint32_t bkin_polarity_mask = 0U;
 80115ce:	4635      	mov	r5, r6
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 80115d0:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80115d4:	e7d7      	b.n	8011586 <HAL_TIMEx_ConfigBreakInput+0x9a>
	...

080115d8 <HAL_TIMEx_RemapConfig>:
  __HAL_LOCK(htim);
 80115d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d024      	beq.n	801162a <HAL_TIMEx_RemapConfig+0x52>
{
 80115e0:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80115e2:	2301      	movs	r3, #1
 80115e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 80115e8:	6803      	ldr	r3, [r0, #0]
 80115ea:	4a11      	ldr	r2, [pc, #68]	; (8011630 <HAL_TIMEx_RemapConfig+0x58>)
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d00a      	beq.n	8011606 <HAL_TIMEx_RemapConfig+0x2e>
 80115f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115f4:	d007      	beq.n	8011606 <HAL_TIMEx_RemapConfig+0x2e>
 80115f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d003      	beq.n	8011606 <HAL_TIMEx_RemapConfig+0x2e>
 80115fe:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
 8011602:	4293      	cmp	r3, r2
 8011604:	d106      	bne.n	8011614 <HAL_TIMEx_RemapConfig+0x3c>
    tmpor2 = htim->Instance->OR2;
 8011606:	6e1c      	ldr	r4, [r3, #96]	; 0x60
    tmpor2 &= ~TIM1_OR2_ETRSEL_Msk;
 8011608:	f424 34e0 	bic.w	r4, r4, #114688	; 0x1c000
    tmpor2 |= (Remap & TIM1_OR2_ETRSEL_Msk);
 801160c:	f401 32e0 	and.w	r2, r1, #114688	; 0x1c000
 8011610:	4322      	orrs	r2, r4
    htim->Instance->OR2 = tmpor2;
 8011612:	661a      	str	r2, [r3, #96]	; 0x60
  tmpor1 &= ~TIM1_OR2_ETRSEL_Msk;
 8011614:	f421 31e0 	bic.w	r1, r1, #114688	; 0x1c000
  htim->Instance->OR1 = tmpor1;
 8011618:	6803      	ldr	r3, [r0, #0]
 801161a:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 801161c:	2300      	movs	r3, #0
 801161e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8011622:	4618      	mov	r0, r3
}
 8011624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011628:	4770      	bx	lr
  __HAL_LOCK(htim);
 801162a:	2002      	movs	r0, #2
}
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	40012c00 	.word	0x40012c00

08011634 <HAL_TIMEx_GroupChannel5>:
  __HAL_LOCK(htim);
 8011634:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011638:	2b01      	cmp	r3, #1
 801163a:	d018      	beq.n	801166e <HAL_TIMEx_GroupChannel5+0x3a>
{
 801163c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 801163e:	2201      	movs	r2, #1
 8011640:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8011644:	2302      	movs	r3, #2
 8011646:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->CCR5 &= ~(TIM_CCR5_GC5C3 | TIM_CCR5_GC5C2 | TIM_CCR5_GC5C1);
 801164a:	6804      	ldr	r4, [r0, #0]
 801164c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801164e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8011652:	65a3      	str	r3, [r4, #88]	; 0x58
  htim->Instance->CCR5 |= Channels;
 8011654:	6804      	ldr	r4, [r0, #0]
 8011656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011658:	4319      	orrs	r1, r3
 801165a:	65a1      	str	r1, [r4, #88]	; 0x58
  htim->State = HAL_TIM_STATE_READY;
 801165c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011660:	2300      	movs	r3, #0
 8011662:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8011666:	4618      	mov	r0, r3
}
 8011668:	f85d 4b04 	ldr.w	r4, [sp], #4
 801166c:	4770      	bx	lr
  __HAL_LOCK(htim);
 801166e:	2002      	movs	r0, #2
}
 8011670:	4770      	bx	lr

08011672 <HAL_TIMEx_CommutCallback>:
}
 8011672:	4770      	bx	lr

08011674 <TIMEx_DMACommutationCplt>:
{
 8011674:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011676:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 8011678:	2301      	movs	r3, #1
 801167a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutCallback(htim);
 801167e:	f7ff fff8 	bl	8011672 <HAL_TIMEx_CommutCallback>
}
 8011682:	bd08      	pop	{r3, pc}

08011684 <HAL_TIMEx_CommutHalfCpltCallback>:
}
 8011684:	4770      	bx	lr

08011686 <TIMEx_DMACommutationHalfCplt>:
{
 8011686:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011688:	6a80      	ldr	r0, [r0, #40]	; 0x28
  htim->State = HAL_TIM_STATE_READY;
 801168a:	2301      	movs	r3, #1
 801168c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 8011690:	f7ff fff8 	bl	8011684 <HAL_TIMEx_CommutHalfCpltCallback>
}
 8011694:	bd08      	pop	{r3, pc}

08011696 <HAL_TIMEx_BreakCallback>:
}
 8011696:	4770      	bx	lr

08011698 <HAL_TIMEx_Break2Callback>:
}
 8011698:	4770      	bx	lr

0801169a <HAL_TIMEx_HallSensor_GetState>:
  return htim->State;
 801169a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 801169e:	4770      	bx	lr

080116a0 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80116a0:	6802      	ldr	r2, [r0, #0]
 80116a2:	6813      	ldr	r3, [r2, #0]
 80116a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80116a8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116aa:	6802      	ldr	r2, [r0, #0]
 80116ac:	6893      	ldr	r3, [r2, #8]
 80116ae:	f023 0301 	bic.w	r3, r3, #1
 80116b2:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80116b4:	2320      	movs	r3, #32
 80116b6:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80116b8:	2300      	movs	r3, #0
 80116ba:	6603      	str	r3, [r0, #96]	; 0x60
}
 80116bc:	4770      	bx	lr

080116be <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80116be:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80116c0:	2b21      	cmp	r3, #33	; 0x21
 80116c2:	d000      	beq.n	80116c6 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80116c4:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80116c6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	b16b      	cbz	r3, 80116ea <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80116ce:	6803      	ldr	r3, [r0, #0]
 80116d0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80116d2:	7812      	ldrb	r2, [r2, #0]
 80116d4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80116d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80116d8:	3301      	adds	r3, #1
 80116da:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80116dc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80116e0:	3b01      	subs	r3, #1
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 80116e8:	e7ec      	b.n	80116c4 <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80116ea:	6802      	ldr	r2, [r0, #0]
 80116ec:	6813      	ldr	r3, [r2, #0]
 80116ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80116f2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80116f4:	6802      	ldr	r2, [r0, #0]
 80116f6:	6813      	ldr	r3, [r2, #0]
 80116f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116fc:	6013      	str	r3, [r2, #0]
 80116fe:	4770      	bx	lr

08011700 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011700:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8011702:	2b21      	cmp	r3, #33	; 0x21
 8011704:	d000      	beq.n	8011708 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8011706:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8011708:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 801170c:	b29b      	uxth	r3, r3
 801170e:	b17b      	cbz	r3, 8011730 <UART_TxISR_16BIT+0x30>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011710:	6802      	ldr	r2, [r0, #0]
 8011712:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011714:	881b      	ldrh	r3, [r3, #0]
 8011716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801171a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801171c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801171e:	3302      	adds	r3, #2
 8011720:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8011722:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8011726:	3b01      	subs	r3, #1
 8011728:	b29b      	uxth	r3, r3
 801172a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 801172e:	e7ea      	b.n	8011706 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8011730:	6802      	ldr	r2, [r0, #0]
 8011732:	6813      	ldr	r3, [r2, #0]
 8011734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011738:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801173a:	6802      	ldr	r2, [r0, #0]
 801173c:	6813      	ldr	r3, [r2, #0]
 801173e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011742:	6013      	str	r3, [r2, #0]
 8011744:	4770      	bx	lr
}
 8011746:	4770      	bx	lr
}
 8011748:	4770      	bx	lr

0801174a <HAL_UART_DeInit>:
  if (huart == NULL)
 801174a:	b1c0      	cbz	r0, 801177e <HAL_UART_DeInit+0x34>
{
 801174c:	b538      	push	{r3, r4, r5, lr}
 801174e:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8011750:	2324      	movs	r3, #36	; 0x24
 8011752:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8011754:	6802      	ldr	r2, [r0, #0]
 8011756:	6813      	ldr	r3, [r2, #0]
 8011758:	f023 0301 	bic.w	r3, r3, #1
 801175c:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 801175e:	6803      	ldr	r3, [r0, #0]
 8011760:	2500      	movs	r5, #0
 8011762:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8011764:	6803      	ldr	r3, [r0, #0]
 8011766:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8011768:	6803      	ldr	r3, [r0, #0]
 801176a:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801176c:	f7f2 feaa 	bl	80044c4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011770:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8011772:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8011774:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8011776:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 801177a:	4628      	mov	r0, r5
}
 801177c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801177e:	2001      	movs	r0, #1
}
 8011780:	4770      	bx	lr
	...

08011784 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8011784:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8011786:	2b20      	cmp	r3, #32
 8011788:	d128      	bne.n	80117dc <HAL_UART_Transmit_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 801178a:	b349      	cbz	r1, 80117e0 <HAL_UART_Transmit_IT+0x5c>
 801178c:	b352      	cbz	r2, 80117e4 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 801178e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8011792:	2b01      	cmp	r3, #1
 8011794:	d028      	beq.n	80117e8 <HAL_UART_Transmit_IT+0x64>
 8011796:	2301      	movs	r3, #1
 8011798:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 801179c:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 801179e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80117a2:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 80117a6:	2300      	movs	r3, #0
 80117a8:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117aa:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80117ac:	2321      	movs	r3, #33	; 0x21
 80117ae:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117b0:	6883      	ldr	r3, [r0, #8]
 80117b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117b6:	d00b      	beq.n	80117d0 <HAL_UART_Transmit_IT+0x4c>
      huart->TxISR = UART_TxISR_8BIT;
 80117b8:	4b0c      	ldr	r3, [pc, #48]	; (80117ec <HAL_UART_Transmit_IT+0x68>)
 80117ba:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 80117bc:	2300      	movs	r3, #0
 80117be:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80117c2:	6801      	ldr	r1, [r0, #0]
 80117c4:	680a      	ldr	r2, [r1, #0]
 80117c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80117ca:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80117cc:	4618      	mov	r0, r3
 80117ce:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117d0:	6903      	ldr	r3, [r0, #16]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d1f0      	bne.n	80117b8 <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 80117d6:	4b06      	ldr	r3, [pc, #24]	; (80117f0 <HAL_UART_Transmit_IT+0x6c>)
 80117d8:	6643      	str	r3, [r0, #100]	; 0x64
 80117da:	e7ef      	b.n	80117bc <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 80117dc:	2002      	movs	r0, #2
 80117de:	4770      	bx	lr
      return HAL_ERROR;
 80117e0:	2001      	movs	r0, #1
 80117e2:	4770      	bx	lr
 80117e4:	2001      	movs	r0, #1
 80117e6:	4770      	bx	lr
    __HAL_LOCK(huart);
 80117e8:	2002      	movs	r0, #2
}
 80117ea:	4770      	bx	lr
 80117ec:	080116bf 	.word	0x080116bf
 80117f0:	08011701 	.word	0x08011701

080117f4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80117f4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80117f6:	2b20      	cmp	r3, #32
 80117f8:	d15a      	bne.n	80118b0 <HAL_UART_Receive_IT+0xbc>
    if ((pData == NULL) || (Size == 0U))
 80117fa:	2900      	cmp	r1, #0
 80117fc:	d05a      	beq.n	80118b4 <HAL_UART_Receive_IT+0xc0>
 80117fe:	2a00      	cmp	r2, #0
 8011800:	d05a      	beq.n	80118b8 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 8011802:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8011806:	2b01      	cmp	r3, #1
 8011808:	d058      	beq.n	80118bc <HAL_UART_Receive_IT+0xc8>
 801180a:	2301      	movs	r3, #1
 801180c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 8011810:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8011812:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8011816:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 801181a:	2300      	movs	r3, #0
 801181c:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 801181e:	6883      	ldr	r3, [r0, #8]
 8011820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011824:	d006      	beq.n	8011834 <HAL_UART_Receive_IT+0x40>
 8011826:	b9a3      	cbnz	r3, 8011852 <HAL_UART_Receive_IT+0x5e>
 8011828:	6903      	ldr	r3, [r0, #16]
 801182a:	b973      	cbnz	r3, 801184a <HAL_UART_Receive_IT+0x56>
 801182c:	23ff      	movs	r3, #255	; 0xff
 801182e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8011832:	e014      	b.n	801185e <HAL_UART_Receive_IT+0x6a>
 8011834:	6903      	ldr	r3, [r0, #16]
 8011836:	b923      	cbnz	r3, 8011842 <HAL_UART_Receive_IT+0x4e>
 8011838:	f240 13ff 	movw	r3, #511	; 0x1ff
 801183c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8011840:	e00d      	b.n	801185e <HAL_UART_Receive_IT+0x6a>
 8011842:	23ff      	movs	r3, #255	; 0xff
 8011844:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8011848:	e009      	b.n	801185e <HAL_UART_Receive_IT+0x6a>
 801184a:	237f      	movs	r3, #127	; 0x7f
 801184c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8011850:	e005      	b.n	801185e <HAL_UART_Receive_IT+0x6a>
 8011852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011856:	d01b      	beq.n	8011890 <HAL_UART_Receive_IT+0x9c>
 8011858:	2300      	movs	r3, #0
 801185a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801185e:	2300      	movs	r3, #0
 8011860:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011862:	2322      	movs	r3, #34	; 0x22
 8011864:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011866:	6802      	ldr	r2, [r0, #0]
 8011868:	6893      	ldr	r3, [r2, #8]
 801186a:	f043 0301 	orr.w	r3, r3, #1
 801186e:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011870:	6883      	ldr	r3, [r0, #8]
 8011872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011876:	d015      	beq.n	80118a4 <HAL_UART_Receive_IT+0xb0>
      huart->RxISR = UART_RxISR_8BIT;
 8011878:	4b11      	ldr	r3, [pc, #68]	; (80118c0 <HAL_UART_Receive_IT+0xcc>)
 801187a:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 801187c:	2300      	movs	r3, #0
 801187e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8011882:	6801      	ldr	r1, [r0, #0]
 8011884:	680a      	ldr	r2, [r1, #0]
 8011886:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 801188a:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 801188c:	4618      	mov	r0, r3
 801188e:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8011890:	6903      	ldr	r3, [r0, #16]
 8011892:	b91b      	cbnz	r3, 801189c <HAL_UART_Receive_IT+0xa8>
 8011894:	237f      	movs	r3, #127	; 0x7f
 8011896:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801189a:	e7e0      	b.n	801185e <HAL_UART_Receive_IT+0x6a>
 801189c:	233f      	movs	r3, #63	; 0x3f
 801189e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80118a2:	e7dc      	b.n	801185e <HAL_UART_Receive_IT+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80118a4:	6903      	ldr	r3, [r0, #16]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1e6      	bne.n	8011878 <HAL_UART_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80118aa:	4b06      	ldr	r3, [pc, #24]	; (80118c4 <HAL_UART_Receive_IT+0xd0>)
 80118ac:	6603      	str	r3, [r0, #96]	; 0x60
 80118ae:	e7e5      	b.n	801187c <HAL_UART_Receive_IT+0x88>
    return HAL_BUSY;
 80118b0:	2002      	movs	r0, #2
 80118b2:	4770      	bx	lr
      return HAL_ERROR;
 80118b4:	2001      	movs	r0, #1
 80118b6:	4770      	bx	lr
 80118b8:	2001      	movs	r0, #1
 80118ba:	4770      	bx	lr
    __HAL_LOCK(huart);
 80118bc:	2002      	movs	r0, #2
}
 80118be:	4770      	bx	lr
 80118c0:	08011d07 	.word	0x08011d07
 80118c4:	08011d67 	.word	0x08011d67

080118c8 <HAL_UART_Transmit_DMA>:
{
 80118c8:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80118ca:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80118cc:	2c20      	cmp	r4, #32
 80118ce:	d13e      	bne.n	801194e <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 80118d0:	2900      	cmp	r1, #0
 80118d2:	d03e      	beq.n	8011952 <HAL_UART_Transmit_DMA+0x8a>
 80118d4:	2a00      	cmp	r2, #0
 80118d6:	d03e      	beq.n	8011956 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_LOCK(huart);
 80118d8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d03c      	beq.n	801195a <HAL_UART_Transmit_DMA+0x92>
 80118e0:	4613      	mov	r3, r2
 80118e2:	4604      	mov	r4, r0
 80118e4:	2201      	movs	r2, #1
 80118e6:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 80118ea:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80118ec:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80118f0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118f4:	2200      	movs	r2, #0
 80118f6:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80118f8:	2221      	movs	r2, #33	; 0x21
 80118fa:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 80118fc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80118fe:	b18a      	cbz	r2, 8011924 <HAL_UART_Transmit_DMA+0x5c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011900:	4917      	ldr	r1, [pc, #92]	; (8011960 <HAL_UART_Transmit_DMA+0x98>)
 8011902:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011904:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8011906:	4917      	ldr	r1, [pc, #92]	; (8011964 <HAL_UART_Transmit_DMA+0x9c>)
 8011908:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801190a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 801190c:	4916      	ldr	r1, [pc, #88]	; (8011968 <HAL_UART_Transmit_DMA+0xa0>)
 801190e:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8011910:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8011912:	2100      	movs	r1, #0
 8011914:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011916:	6802      	ldr	r2, [r0, #0]
 8011918:	3228      	adds	r2, #40	; 0x28
 801191a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801191c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801191e:	f7f3 fb28 	bl	8004f72 <HAL_DMA_Start_IT>
 8011922:	b958      	cbnz	r0, 801193c <HAL_UART_Transmit_DMA+0x74>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011924:	6823      	ldr	r3, [r4, #0]
 8011926:	2240      	movs	r2, #64	; 0x40
 8011928:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 801192a:	2000      	movs	r0, #0
 801192c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011930:	6822      	ldr	r2, [r4, #0]
 8011932:	6893      	ldr	r3, [r2, #8]
 8011934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011938:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 801193a:	e009      	b.n	8011950 <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801193c:	2310      	movs	r3, #16
 801193e:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8011940:	2300      	movs	r3, #0
 8011942:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8011946:	2320      	movs	r3, #32
 8011948:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 801194a:	2001      	movs	r0, #1
 801194c:	e000      	b.n	8011950 <HAL_UART_Transmit_DMA+0x88>
    return HAL_BUSY;
 801194e:	2002      	movs	r0, #2
}
 8011950:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8011952:	2001      	movs	r0, #1
 8011954:	e7fc      	b.n	8011950 <HAL_UART_Transmit_DMA+0x88>
 8011956:	2001      	movs	r0, #1
 8011958:	e7fa      	b.n	8011950 <HAL_UART_Transmit_DMA+0x88>
    __HAL_LOCK(huart);
 801195a:	2002      	movs	r0, #2
 801195c:	e7f8      	b.n	8011950 <HAL_UART_Transmit_DMA+0x88>
 801195e:	bf00      	nop
 8011960:	08011cc7 	.word	0x08011cc7
 8011964:	08011cfb 	.word	0x08011cfb
 8011968:	08011e13 	.word	0x08011e13

0801196c <HAL_UART_Receive_DMA>:
{
 801196c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 801196e:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8011970:	2c20      	cmp	r4, #32
 8011972:	d143      	bne.n	80119fc <HAL_UART_Receive_DMA+0x90>
    if ((pData == NULL) || (Size == 0U))
 8011974:	2900      	cmp	r1, #0
 8011976:	d043      	beq.n	8011a00 <HAL_UART_Receive_DMA+0x94>
 8011978:	2a00      	cmp	r2, #0
 801197a:	d043      	beq.n	8011a04 <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 801197c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8011980:	2b01      	cmp	r3, #1
 8011982:	d041      	beq.n	8011a08 <HAL_UART_Receive_DMA+0x9c>
 8011984:	4613      	mov	r3, r2
 8011986:	4604      	mov	r4, r0
 8011988:	2201      	movs	r2, #1
 801198a:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pRxBuffPtr = pData;
 801198e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8011990:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011994:	2200      	movs	r2, #0
 8011996:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011998:	2222      	movs	r2, #34	; 0x22
 801199a:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 801199c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801199e:	b18a      	cbz	r2, 80119c4 <HAL_UART_Receive_DMA+0x58>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80119a0:	491a      	ldr	r1, [pc, #104]	; (8011a0c <HAL_UART_Receive_DMA+0xa0>)
 80119a2:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80119a4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80119a6:	491a      	ldr	r1, [pc, #104]	; (8011a10 <HAL_UART_Receive_DMA+0xa4>)
 80119a8:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80119aa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80119ac:	4919      	ldr	r1, [pc, #100]	; (8011a14 <HAL_UART_Receive_DMA+0xa8>)
 80119ae:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmarx->XferAbortCallback = NULL;
 80119b0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80119b2:	2100      	movs	r1, #0
 80119b4:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80119b6:	6801      	ldr	r1, [r0, #0]
 80119b8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80119ba:	3124      	adds	r1, #36	; 0x24
 80119bc:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80119be:	f7f3 fad8 	bl	8004f72 <HAL_DMA_Start_IT>
 80119c2:	b990      	cbnz	r0, 80119ea <HAL_UART_Receive_DMA+0x7e>
    __HAL_UNLOCK(huart);
 80119c4:	2000      	movs	r0, #0
 80119c6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80119ca:	6822      	ldr	r2, [r4, #0]
 80119cc:	6813      	ldr	r3, [r2, #0]
 80119ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119d2:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119d4:	6822      	ldr	r2, [r4, #0]
 80119d6:	6893      	ldr	r3, [r2, #8]
 80119d8:	f043 0301 	orr.w	r3, r3, #1
 80119dc:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80119de:	6822      	ldr	r2, [r4, #0]
 80119e0:	6893      	ldr	r3, [r2, #8]
 80119e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119e6:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 80119e8:	e009      	b.n	80119fe <HAL_UART_Receive_DMA+0x92>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80119ea:	2310      	movs	r3, #16
 80119ec:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80119ee:	2300      	movs	r3, #0
 80119f0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 80119f4:	2320      	movs	r3, #32
 80119f6:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 80119f8:	2001      	movs	r0, #1
 80119fa:	e000      	b.n	80119fe <HAL_UART_Receive_DMA+0x92>
    return HAL_BUSY;
 80119fc:	2002      	movs	r0, #2
}
 80119fe:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8011a00:	2001      	movs	r0, #1
 8011a02:	e7fc      	b.n	80119fe <HAL_UART_Receive_DMA+0x92>
 8011a04:	2001      	movs	r0, #1
 8011a06:	e7fa      	b.n	80119fe <HAL_UART_Receive_DMA+0x92>
    __HAL_LOCK(huart);
 8011a08:	2002      	movs	r0, #2
 8011a0a:	e7f8      	b.n	80119fe <HAL_UART_Receive_DMA+0x92>
 8011a0c:	08011dc7 	.word	0x08011dc7
 8011a10:	08011e07 	.word	0x08011e07
 8011a14:	08011e13 	.word	0x08011e13

08011a18 <HAL_UART_DMAPause>:
{
 8011a18:	b410      	push	{r4}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011a1a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011a1c:	6f81      	ldr	r1, [r0, #120]	; 0x78
  __HAL_LOCK(huart);
 8011a1e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8011a22:	2b01      	cmp	r3, #1
 8011a24:	d02b      	beq.n	8011a7e <HAL_UART_DMAPause+0x66>
 8011a26:	2301      	movs	r3, #1
 8011a28:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011a2c:	6803      	ldr	r3, [r0, #0]
 8011a2e:	689a      	ldr	r2, [r3, #8]
 8011a30:	f012 0f80 	tst.w	r2, #128	; 0x80
 8011a34:	d001      	beq.n	8011a3a <HAL_UART_DMAPause+0x22>
 8011a36:	2c21      	cmp	r4, #33	; 0x21
 8011a38:	d00d      	beq.n	8011a56 <HAL_UART_DMAPause+0x3e>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011a3a:	6803      	ldr	r3, [r0, #0]
 8011a3c:	689a      	ldr	r2, [r3, #8]
 8011a3e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8011a42:	d001      	beq.n	8011a48 <HAL_UART_DMAPause+0x30>
 8011a44:	2922      	cmp	r1, #34	; 0x22
 8011a46:	d00b      	beq.n	8011a60 <HAL_UART_DMAPause+0x48>
  __HAL_UNLOCK(huart);
 8011a48:	2300      	movs	r3, #0
 8011a4a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 8011a4e:	4618      	mov	r0, r3
}
 8011a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a54:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011a56:	689a      	ldr	r2, [r3, #8]
 8011a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011a5c:	609a      	str	r2, [r3, #8]
 8011a5e:	e7ec      	b.n	8011a3a <HAL_UART_DMAPause+0x22>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011a60:	681a      	ldr	r2, [r3, #0]
 8011a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011a66:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a68:	6802      	ldr	r2, [r0, #0]
 8011a6a:	6893      	ldr	r3, [r2, #8]
 8011a6c:	f023 0301 	bic.w	r3, r3, #1
 8011a70:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011a72:	6802      	ldr	r2, [r0, #0]
 8011a74:	6893      	ldr	r3, [r2, #8]
 8011a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a7a:	6093      	str	r3, [r2, #8]
 8011a7c:	e7e4      	b.n	8011a48 <HAL_UART_DMAPause+0x30>
  __HAL_LOCK(huart);
 8011a7e:	2002      	movs	r0, #2
 8011a80:	e7e6      	b.n	8011a50 <HAL_UART_DMAPause+0x38>

08011a82 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8011a82:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d026      	beq.n	8011ad8 <HAL_UART_DMAResume+0x56>
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011a90:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8011a92:	2b21      	cmp	r3, #33	; 0x21
 8011a94:	d007      	beq.n	8011aa6 <HAL_UART_DMAResume+0x24>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011a96:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8011a98:	2b22      	cmp	r3, #34	; 0x22
 8011a9a:	d00a      	beq.n	8011ab2 <HAL_UART_DMAResume+0x30>
  __HAL_UNLOCK(huart);
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	4770      	bx	lr
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011aa6:	6802      	ldr	r2, [r0, #0]
 8011aa8:	6893      	ldr	r3, [r2, #8]
 8011aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011aae:	6093      	str	r3, [r2, #8]
 8011ab0:	e7f1      	b.n	8011a96 <HAL_UART_DMAResume+0x14>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ab2:	6803      	ldr	r3, [r0, #0]
 8011ab4:	2208      	movs	r2, #8
 8011ab6:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011ab8:	6802      	ldr	r2, [r0, #0]
 8011aba:	6813      	ldr	r3, [r2, #0]
 8011abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ac0:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ac2:	6802      	ldr	r2, [r0, #0]
 8011ac4:	6893      	ldr	r3, [r2, #8]
 8011ac6:	f043 0301 	orr.w	r3, r3, #1
 8011aca:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011acc:	6802      	ldr	r2, [r0, #0]
 8011ace:	6893      	ldr	r3, [r2, #8]
 8011ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ad4:	6093      	str	r3, [r2, #8]
 8011ad6:	e7e1      	b.n	8011a9c <HAL_UART_DMAResume+0x1a>
  __HAL_LOCK(huart);
 8011ad8:	2002      	movs	r0, #2
}
 8011ada:	4770      	bx	lr

08011adc <HAL_UART_DMAStop>:
{
 8011adc:	b538      	push	{r3, r4, r5, lr}
 8011ade:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011ae0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011ae2:	6f85      	ldr	r5, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011ae4:	6803      	ldr	r3, [r0, #0]
 8011ae6:	689a      	ldr	r2, [r3, #8]
 8011ae8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8011aec:	d001      	beq.n	8011af2 <HAL_UART_DMAStop+0x16>
 8011aee:	2921      	cmp	r1, #33	; 0x21
 8011af0:	d008      	beq.n	8011b04 <HAL_UART_DMAStop+0x28>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	689a      	ldr	r2, [r3, #8]
 8011af6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8011afa:	d034      	beq.n	8011b66 <HAL_UART_DMAStop+0x8a>
 8011afc:	2d22      	cmp	r5, #34	; 0x22
 8011afe:	d01b      	beq.n	8011b38 <HAL_UART_DMAStop+0x5c>
  return HAL_OK;
 8011b00:	2000      	movs	r0, #0
 8011b02:	e031      	b.n	8011b68 <HAL_UART_DMAStop+0x8c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011b04:	689a      	ldr	r2, [r3, #8]
 8011b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011b0a:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8011b0c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8011b0e:	b110      	cbz	r0, 8011b16 <HAL_UART_DMAStop+0x3a>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8011b10:	f7f3 fa7c 	bl	800500c <HAL_DMA_Abort>
 8011b14:	b938      	cbnz	r0, 8011b26 <HAL_UART_DMAStop+0x4a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011b16:	6822      	ldr	r2, [r4, #0]
 8011b18:	6813      	ldr	r3, [r2, #0]
 8011b1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011b1e:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011b20:	2320      	movs	r3, #32
 8011b22:	6763      	str	r3, [r4, #116]	; 0x74
 8011b24:	e7e5      	b.n	8011af2 <HAL_UART_DMAStop+0x16>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8011b26:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8011b28:	f7f3 fbe9 	bl	80052fe <HAL_DMA_GetError>
 8011b2c:	2820      	cmp	r0, #32
 8011b2e:	d1f2      	bne.n	8011b16 <HAL_UART_DMAStop+0x3a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011b30:	2310      	movs	r3, #16
 8011b32:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8011b34:	2003      	movs	r0, #3
 8011b36:	e017      	b.n	8011b68 <HAL_UART_DMAStop+0x8c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011b38:	689a      	ldr	r2, [r3, #8]
 8011b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b3e:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8011b40:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011b42:	b110      	cbz	r0, 8011b4a <HAL_UART_DMAStop+0x6e>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8011b44:	f7f3 fa62 	bl	800500c <HAL_DMA_Abort>
 8011b48:	b920      	cbnz	r0, 8011b54 <HAL_UART_DMAStop+0x78>
    UART_EndRxTransfer(huart);
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	f7ff fda8 	bl	80116a0 <UART_EndRxTransfer>
  return HAL_OK;
 8011b50:	2000      	movs	r0, #0
 8011b52:	e009      	b.n	8011b68 <HAL_UART_DMAStop+0x8c>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8011b54:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011b56:	f7f3 fbd2 	bl	80052fe <HAL_DMA_GetError>
 8011b5a:	2820      	cmp	r0, #32
 8011b5c:	d1f5      	bne.n	8011b4a <HAL_UART_DMAStop+0x6e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011b5e:	2310      	movs	r3, #16
 8011b60:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8011b62:	2003      	movs	r0, #3
 8011b64:	e000      	b.n	8011b68 <HAL_UART_DMAStop+0x8c>
  return HAL_OK;
 8011b66:	2000      	movs	r0, #0
}
 8011b68:	bd38      	pop	{r3, r4, r5, pc}

08011b6a <HAL_UART_Abort>:
{
 8011b6a:	b510      	push	{r4, lr}
 8011b6c:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8011b6e:	6802      	ldr	r2, [r0, #0]
 8011b70:	6813      	ldr	r3, [r2, #0]
 8011b72:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8011b76:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b78:	6802      	ldr	r2, [r0, #0]
 8011b7a:	6893      	ldr	r3, [r2, #8]
 8011b7c:	f023 0301 	bic.w	r3, r3, #1
 8011b80:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011b82:	6803      	ldr	r3, [r0, #0]
 8011b84:	689a      	ldr	r2, [r3, #8]
 8011b86:	f012 0f80 	tst.w	r2, #128	; 0x80
 8011b8a:	d00b      	beq.n	8011ba4 <HAL_UART_Abort+0x3a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011b8c:	689a      	ldr	r2, [r3, #8]
 8011b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011b92:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8011b94:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8011b96:	b12b      	cbz	r3, 8011ba4 <HAL_UART_Abort+0x3a>
      huart->hdmatx->XferAbortCallback = NULL;
 8011b98:	2200      	movs	r2, #0
 8011b9a:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8011b9c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8011b9e:	f7f3 fa35 	bl	800500c <HAL_DMA_Abort>
 8011ba2:	bb10      	cbnz	r0, 8011bea <HAL_UART_Abort+0x80>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ba4:	6823      	ldr	r3, [r4, #0]
 8011ba6:	689a      	ldr	r2, [r3, #8]
 8011ba8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8011bac:	d00b      	beq.n	8011bc6 <HAL_UART_Abort+0x5c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011bae:	689a      	ldr	r2, [r3, #8]
 8011bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011bb4:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8011bb6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011bb8:	b12b      	cbz	r3, 8011bc6 <HAL_UART_Abort+0x5c>
      huart->hdmarx->XferAbortCallback = NULL;
 8011bba:	2200      	movs	r2, #0
 8011bbc:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8011bbe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011bc0:	f7f3 fa24 	bl	800500c <HAL_DMA_Abort>
 8011bc4:	b9d0      	cbnz	r0, 8011bfc <HAL_UART_Abort+0x92>
  huart->TxXferCount = 0U;
 8011bc6:	2000      	movs	r0, #0
 8011bc8:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
  huart->RxXferCount = 0U;
 8011bcc:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011bd0:	6823      	ldr	r3, [r4, #0]
 8011bd2:	220f      	movs	r2, #15
 8011bd4:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011bd6:	6822      	ldr	r2, [r4, #0]
 8011bd8:	8b13      	ldrh	r3, [r2, #24]
 8011bda:	f043 0308 	orr.w	r3, r3, #8
 8011bde:	8313      	strh	r3, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8011be0:	2320      	movs	r3, #32
 8011be2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8011be4:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011be6:	67e0      	str	r0, [r4, #124]	; 0x7c
}
 8011be8:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8011bea:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8011bec:	f7f3 fb87 	bl	80052fe <HAL_DMA_GetError>
 8011bf0:	2820      	cmp	r0, #32
 8011bf2:	d1d7      	bne.n	8011ba4 <HAL_UART_Abort+0x3a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011bf4:	2310      	movs	r3, #16
 8011bf6:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8011bf8:	2003      	movs	r0, #3
 8011bfa:	e7f5      	b.n	8011be8 <HAL_UART_Abort+0x7e>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8011bfc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011bfe:	f7f3 fb7e 	bl	80052fe <HAL_DMA_GetError>
 8011c02:	2820      	cmp	r0, #32
 8011c04:	d1df      	bne.n	8011bc6 <HAL_UART_Abort+0x5c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011c06:	2310      	movs	r3, #16
 8011c08:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8011c0a:	2003      	movs	r0, #3
 8011c0c:	e7ec      	b.n	8011be8 <HAL_UART_Abort+0x7e>

08011c0e <HAL_UART_AbortTransmit>:
{
 8011c0e:	b510      	push	{r4, lr}
 8011c10:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011c12:	6802      	ldr	r2, [r0, #0]
 8011c14:	6813      	ldr	r3, [r2, #0]
 8011c16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011c1a:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011c1c:	6803      	ldr	r3, [r0, #0]
 8011c1e:	689a      	ldr	r2, [r3, #8]
 8011c20:	f012 0f80 	tst.w	r2, #128	; 0x80
 8011c24:	d00b      	beq.n	8011c3e <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011c26:	689a      	ldr	r2, [r3, #8]
 8011c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011c2c:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8011c2e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8011c30:	b12b      	cbz	r3, 8011c3e <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 8011c32:	2200      	movs	r2, #0
 8011c34:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8011c36:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8011c38:	f7f3 f9e8 	bl	800500c <HAL_DMA_Abort>
 8011c3c:	b928      	cbnz	r0, 8011c4a <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0U;
 8011c3e:	2000      	movs	r0, #0
 8011c40:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
  huart->gState = HAL_UART_STATE_READY;
 8011c44:	2320      	movs	r3, #32
 8011c46:	6763      	str	r3, [r4, #116]	; 0x74
}
 8011c48:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8011c4a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8011c4c:	f7f3 fb57 	bl	80052fe <HAL_DMA_GetError>
 8011c50:	2820      	cmp	r0, #32
 8011c52:	d1f4      	bne.n	8011c3e <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011c54:	2310      	movs	r3, #16
 8011c56:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8011c58:	2003      	movs	r0, #3
 8011c5a:	e7f5      	b.n	8011c48 <HAL_UART_AbortTransmit+0x3a>

08011c5c <HAL_UART_AbortReceive>:
{
 8011c5c:	b510      	push	{r4, lr}
 8011c5e:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011c60:	6802      	ldr	r2, [r0, #0]
 8011c62:	6813      	ldr	r3, [r2, #0]
 8011c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c68:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c6a:	6802      	ldr	r2, [r0, #0]
 8011c6c:	6893      	ldr	r3, [r2, #8]
 8011c6e:	f023 0301 	bic.w	r3, r3, #1
 8011c72:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011c74:	6803      	ldr	r3, [r0, #0]
 8011c76:	689a      	ldr	r2, [r3, #8]
 8011c78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8011c7c:	d00b      	beq.n	8011c96 <HAL_UART_AbortReceive+0x3a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c7e:	689a      	ldr	r2, [r3, #8]
 8011c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011c84:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8011c86:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011c88:	b12b      	cbz	r3, 8011c96 <HAL_UART_AbortReceive+0x3a>
      huart->hdmarx->XferAbortCallback = NULL;
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8011c8e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8011c90:	f7f3 f9bc 	bl	800500c <HAL_DMA_Abort>
 8011c94:	b968      	cbnz	r0, 8011cb2 <HAL_UART_AbortReceive+0x56>
  huart->RxXferCount = 0U;
 8011c96:	2000      	movs	r0, #0
 8011c98:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011c9c:	6823      	ldr	r3, [r4, #0]
 8011c9e:	220f      	movs	r2, #15
 8011ca0:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ca2:	6822      	ldr	r2, [r4, #0]
 8011ca4:	8b13      	ldrh	r3, [r2, #24]
 8011ca6:	f043 0308 	orr.w	r3, r3, #8
 8011caa:	8313      	strh	r3, [r2, #24]
  huart->RxState = HAL_UART_STATE_READY;
 8011cac:	2320      	movs	r3, #32
 8011cae:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8011cb0:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8011cb2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011cb4:	f7f3 fb23 	bl	80052fe <HAL_DMA_GetError>
 8011cb8:	2820      	cmp	r0, #32
 8011cba:	d1ec      	bne.n	8011c96 <HAL_UART_AbortReceive+0x3a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011cbc:	2310      	movs	r3, #16
 8011cbe:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8011cc0:	2003      	movs	r0, #3
 8011cc2:	e7f5      	b.n	8011cb0 <HAL_UART_AbortReceive+0x54>

08011cc4 <HAL_UART_TxCpltCallback>:
}
 8011cc4:	4770      	bx	lr

08011cc6 <UART_DMATransmitCplt>:
{
 8011cc6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011cca:	6802      	ldr	r2, [r0, #0]
 8011ccc:	6812      	ldr	r2, [r2, #0]
 8011cce:	f012 0f20 	tst.w	r2, #32
 8011cd2:	d10d      	bne.n	8011cf0 <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0U;
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011cda:	6819      	ldr	r1, [r3, #0]
 8011cdc:	688a      	ldr	r2, [r1, #8]
 8011cde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011ce2:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	6813      	ldr	r3, [r2, #0]
 8011ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cec:	6013      	str	r3, [r2, #0]
}
 8011cee:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7ff ffe7 	bl	8011cc4 <HAL_UART_TxCpltCallback>
}
 8011cf6:	e7fa      	b.n	8011cee <UART_DMATransmitCplt+0x28>

08011cf8 <HAL_UART_TxHalfCpltCallback>:
}
 8011cf8:	4770      	bx	lr

08011cfa <UART_DMATxHalfCplt>:
{
 8011cfa:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8011cfc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011cfe:	f7ff fffb 	bl	8011cf8 <HAL_UART_TxHalfCpltCallback>
}
 8011d02:	bd08      	pop	{r3, pc}
}
 8011d04:	4770      	bx	lr

08011d06 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011d06:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011d08:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8011d0a:	2b22      	cmp	r3, #34	; 0x22
 8011d0c:	d005      	beq.n	8011d1a <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d0e:	6802      	ldr	r2, [r0, #0]
 8011d10:	8b13      	ldrh	r3, [r2, #24]
 8011d12:	f043 0308 	orr.w	r3, r3, #8
 8011d16:	8313      	strh	r3, [r2, #24]
  }
}
 8011d18:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011d1a:	6803      	ldr	r3, [r0, #0]
 8011d1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011d1e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8011d20:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
 8011d24:	400b      	ands	r3, r1
 8011d26:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8011d28:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011d2e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8011d32:	3b01      	subs	r3, #1
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8011d3a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d1e9      	bne.n	8011d18 <UART_RxISR_8BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011d44:	6802      	ldr	r2, [r0, #0]
 8011d46:	6813      	ldr	r3, [r2, #0]
 8011d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d4c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d4e:	6802      	ldr	r2, [r0, #0]
 8011d50:	6893      	ldr	r3, [r2, #8]
 8011d52:	f023 0301 	bic.w	r3, r3, #1
 8011d56:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8011d58:	2320      	movs	r3, #32
 8011d5a:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8011d60:	f7f1 f9a4 	bl	80030ac <HAL_UART_RxCpltCallback>
 8011d64:	e7d8      	b.n	8011d18 <UART_RxISR_8BIT+0x12>

08011d66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011d66:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011d68:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8011d6a:	2b22      	cmp	r3, #34	; 0x22
 8011d6c:	d005      	beq.n	8011d7a <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d6e:	6802      	ldr	r2, [r0, #0]
 8011d70:	8b13      	ldrh	r3, [r2, #24]
 8011d72:	f043 0308 	orr.w	r3, r3, #8
 8011d76:	8313      	strh	r3, [r2, #24]
  }
}
 8011d78:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011d7a:	6803      	ldr	r3, [r0, #0]
 8011d7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011d7e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8011d80:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8011d84:	400b      	ands	r3, r1
 8011d86:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8011d88:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011d8a:	3302      	adds	r3, #2
 8011d8c:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011d8e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8011d92:	3b01      	subs	r3, #1
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8011d9a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d1e9      	bne.n	8011d78 <UART_RxISR_16BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011da4:	6802      	ldr	r2, [r0, #0]
 8011da6:	6813      	ldr	r3, [r2, #0]
 8011da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011dac:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dae:	6802      	ldr	r2, [r0, #0]
 8011db0:	6893      	ldr	r3, [r2, #8]
 8011db2:	f023 0301 	bic.w	r3, r3, #1
 8011db6:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8011db8:	2320      	movs	r3, #32
 8011dba:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8011dc0:	f7f1 f974 	bl	80030ac <HAL_UART_RxCpltCallback>
 8011dc4:	e7d8      	b.n	8011d78 <UART_RxISR_16BIT+0x12>

08011dc6 <UART_DMAReceiveCplt>:
{
 8011dc6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011dc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011dca:	6802      	ldr	r2, [r0, #0]
 8011dcc:	6812      	ldr	r2, [r2, #0]
 8011dce:	f012 0f20 	tst.w	r2, #32
 8011dd2:	d113      	bne.n	8011dfc <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011dda:	6819      	ldr	r1, [r3, #0]
 8011ddc:	680a      	ldr	r2, [r1, #0]
 8011dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011de2:	600a      	str	r2, [r1, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011de4:	6819      	ldr	r1, [r3, #0]
 8011de6:	688a      	ldr	r2, [r1, #8]
 8011de8:	f022 0201 	bic.w	r2, r2, #1
 8011dec:	608a      	str	r2, [r1, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011dee:	6819      	ldr	r1, [r3, #0]
 8011df0:	688a      	ldr	r2, [r1, #8]
 8011df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011df6:	608a      	str	r2, [r1, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8011df8:	2220      	movs	r2, #32
 8011dfa:	679a      	str	r2, [r3, #120]	; 0x78
  HAL_UART_RxCpltCallback(huart);
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7f1 f955 	bl	80030ac <HAL_UART_RxCpltCallback>
}
 8011e02:	bd08      	pop	{r3, pc}

08011e04 <HAL_UART_RxHalfCpltCallback>:
}
 8011e04:	4770      	bx	lr

08011e06 <UART_DMARxHalfCplt>:
{
 8011e06:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8011e08:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011e0a:	f7ff fffb 	bl	8011e04 <HAL_UART_RxHalfCpltCallback>
}
 8011e0e:	bd08      	pop	{r3, pc}

08011e10 <HAL_UART_ErrorCallback>:
}
 8011e10:	4770      	bx	lr

08011e12 <UART_DMAError>:
{
 8011e12:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e14:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011e16:	6f60      	ldr	r0, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011e18:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011e1a:	6823      	ldr	r3, [r4, #0]
 8011e1c:	689a      	ldr	r2, [r3, #8]
 8011e1e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8011e22:	d001      	beq.n	8011e28 <UART_DMAError+0x16>
 8011e24:	2821      	cmp	r0, #33	; 0x21
 8011e26:	d00e      	beq.n	8011e46 <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011e28:	6823      	ldr	r3, [r4, #0]
 8011e2a:	689b      	ldr	r3, [r3, #8]
 8011e2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011e30:	d001      	beq.n	8011e36 <UART_DMAError+0x24>
 8011e32:	2922      	cmp	r1, #34	; 0x22
 8011e34:	d011      	beq.n	8011e5a <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011e36:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8011e38:	f043 0310 	orr.w	r3, r3, #16
 8011e3c:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f7ff ffe6 	bl	8011e10 <HAL_UART_ErrorCallback>
}
 8011e44:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8011e46:	2200      	movs	r2, #0
 8011e48:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011e52:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011e54:	2320      	movs	r3, #32
 8011e56:	6763      	str	r3, [r4, #116]	; 0x74
 8011e58:	e7e6      	b.n	8011e28 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8011e60:	4620      	mov	r0, r4
 8011e62:	f7ff fc1d 	bl	80116a0 <UART_EndRxTransfer>
 8011e66:	e7e6      	b.n	8011e36 <UART_DMAError+0x24>

08011e68 <HAL_UART_IRQHandler>:
{
 8011e68:	b538      	push	{r3, r4, r5, lr}
 8011e6a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011e6c:	6802      	ldr	r2, [r0, #0]
 8011e6e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011e70:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011e72:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8011e74:	f013 0f0f 	tst.w	r3, #15
 8011e78:	d10c      	bne.n	8011e94 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011e7a:	f013 0f20 	tst.w	r3, #32
 8011e7e:	d07e      	beq.n	8011f7e <HAL_UART_IRQHandler+0x116>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011e80:	f011 0f20 	tst.w	r1, #32
 8011e84:	d07b      	beq.n	8011f7e <HAL_UART_IRQHandler+0x116>
      if (huart->RxISR != NULL)
 8011e86:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f000 8096 	beq.w	8011fba <HAL_UART_IRQHandler+0x152>
        huart->RxISR(huart);
 8011e8e:	4620      	mov	r0, r4
 8011e90:	4798      	blx	r3
 8011e92:	e092      	b.n	8011fba <HAL_UART_IRQHandler+0x152>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011e94:	f010 0501 	ands.w	r5, r0, #1
 8011e98:	d102      	bne.n	8011ea0 <HAL_UART_IRQHandler+0x38>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8011e9a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8011e9e:	d06e      	beq.n	8011f7e <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011ea0:	f013 0f01 	tst.w	r3, #1
 8011ea4:	d007      	beq.n	8011eb6 <HAL_UART_IRQHandler+0x4e>
 8011ea6:	f411 7f80 	tst.w	r1, #256	; 0x100
 8011eaa:	d004      	beq.n	8011eb6 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011eac:	2001      	movs	r0, #1
 8011eae:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011eb0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8011eb2:	4302      	orrs	r2, r0
 8011eb4:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011eb6:	f013 0f02 	tst.w	r3, #2
 8011eba:	d04c      	beq.n	8011f56 <HAL_UART_IRQHandler+0xee>
 8011ebc:	b185      	cbz	r5, 8011ee0 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011ebe:	6822      	ldr	r2, [r4, #0]
 8011ec0:	2002      	movs	r0, #2
 8011ec2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011ec4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8011ec6:	f042 0204 	orr.w	r2, r2, #4
 8011eca:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ecc:	f013 0f04 	tst.w	r3, #4
 8011ed0:	d006      	beq.n	8011ee0 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011ed2:	6822      	ldr	r2, [r4, #0]
 8011ed4:	2004      	movs	r0, #4
 8011ed6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011ed8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8011eda:	f042 0202 	orr.w	r2, r2, #2
 8011ede:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011ee0:	f013 0f08 	tst.w	r3, #8
 8011ee4:	d009      	beq.n	8011efa <HAL_UART_IRQHandler+0x92>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011ee6:	f011 0f20 	tst.w	r1, #32
 8011eea:	d100      	bne.n	8011eee <HAL_UART_IRQHandler+0x86>
 8011eec:	b12d      	cbz	r5, 8011efa <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011eee:	6822      	ldr	r2, [r4, #0]
 8011ef0:	2008      	movs	r0, #8
 8011ef2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011ef4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8011ef6:	4302      	orrs	r2, r0
 8011ef8:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011efa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8011efc:	2a00      	cmp	r2, #0
 8011efe:	d05c      	beq.n	8011fba <HAL_UART_IRQHandler+0x152>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011f00:	f013 0f20 	tst.w	r3, #32
 8011f04:	d006      	beq.n	8011f14 <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011f06:	f011 0f20 	tst.w	r1, #32
 8011f0a:	d003      	beq.n	8011f14 <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 8011f0c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011f0e:	b10b      	cbz	r3, 8011f14 <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 8011f10:	4620      	mov	r0, r4
 8011f12:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8011f14:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011f16:	6823      	ldr	r3, [r4, #0]
 8011f18:	689b      	ldr	r3, [r3, #8]
 8011f1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011f1e:	d102      	bne.n	8011f26 <HAL_UART_IRQHandler+0xbe>
 8011f20:	f012 0f08 	tst.w	r2, #8
 8011f24:	d025      	beq.n	8011f72 <HAL_UART_IRQHandler+0x10a>
        UART_EndRxTransfer(huart);
 8011f26:	4620      	mov	r0, r4
 8011f28:	f7ff fbba 	bl	80116a0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f2c:	6823      	ldr	r3, [r4, #0]
 8011f2e:	689a      	ldr	r2, [r3, #8]
 8011f30:	f012 0f40 	tst.w	r2, #64	; 0x40
 8011f34:	d019      	beq.n	8011f6a <HAL_UART_IRQHandler+0x102>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f36:	689a      	ldr	r2, [r3, #8]
 8011f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011f3c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8011f3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011f40:	b17b      	cbz	r3, 8011f62 <HAL_UART_IRQHandler+0xfa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011f42:	4a24      	ldr	r2, [pc, #144]	; (8011fd4 <HAL_UART_IRQHandler+0x16c>)
 8011f44:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011f46:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011f48:	f7f3 f885 	bl	8005056 <HAL_DMA_Abort_IT>
 8011f4c:	b3a8      	cbz	r0, 8011fba <HAL_UART_IRQHandler+0x152>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011f4e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011f50:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011f52:	4798      	blx	r3
 8011f54:	e031      	b.n	8011fba <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f56:	f013 0f04 	tst.w	r3, #4
 8011f5a:	d0c1      	beq.n	8011ee0 <HAL_UART_IRQHandler+0x78>
 8011f5c:	2d00      	cmp	r5, #0
 8011f5e:	d1b8      	bne.n	8011ed2 <HAL_UART_IRQHandler+0x6a>
 8011f60:	e7be      	b.n	8011ee0 <HAL_UART_IRQHandler+0x78>
            HAL_UART_ErrorCallback(huart);
 8011f62:	4620      	mov	r0, r4
 8011f64:	f7ff ff54 	bl	8011e10 <HAL_UART_ErrorCallback>
 8011f68:	e027      	b.n	8011fba <HAL_UART_IRQHandler+0x152>
          HAL_UART_ErrorCallback(huart);
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	f7ff ff50 	bl	8011e10 <HAL_UART_ErrorCallback>
 8011f70:	e023      	b.n	8011fba <HAL_UART_IRQHandler+0x152>
        HAL_UART_ErrorCallback(huart);
 8011f72:	4620      	mov	r0, r4
 8011f74:	f7ff ff4c 	bl	8011e10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8011f7c:	e01d      	b.n	8011fba <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011f7e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8011f82:	d002      	beq.n	8011f8a <HAL_UART_IRQHandler+0x122>
 8011f84:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8011f88:	d10a      	bne.n	8011fa0 <HAL_UART_IRQHandler+0x138>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011f8a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011f8e:	d00e      	beq.n	8011fae <HAL_UART_IRQHandler+0x146>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011f90:	f011 0f80 	tst.w	r1, #128	; 0x80
 8011f94:	d00b      	beq.n	8011fae <HAL_UART_IRQHandler+0x146>
    if (huart->TxISR != NULL)
 8011f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f98:	b17b      	cbz	r3, 8011fba <HAL_UART_IRQHandler+0x152>
      huart->TxISR(huart);
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	4798      	blx	r3
 8011f9e:	e00c      	b.n	8011fba <HAL_UART_IRQHandler+0x152>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011fa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011fa4:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f000 ff04 	bl	8012db4 <HAL_UARTEx_WakeupCallback>
    return;
 8011fac:	e005      	b.n	8011fba <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011fae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011fb2:	d002      	beq.n	8011fba <HAL_UART_IRQHandler+0x152>
 8011fb4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8011fb8:	d100      	bne.n	8011fbc <HAL_UART_IRQHandler+0x154>
}
 8011fba:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011fbc:	6813      	ldr	r3, [r2, #0]
 8011fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011fc2:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011fc4:	2320      	movs	r3, #32
 8011fc6:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8011fcc:	4620      	mov	r0, r4
 8011fce:	f7ff fe79 	bl	8011cc4 <HAL_UART_TxCpltCallback>
 8011fd2:	e7f2      	b.n	8011fba <HAL_UART_IRQHandler+0x152>
 8011fd4:	08011fd9 	.word	0x08011fd9

08011fd8 <UART_DMAAbortOnError>:
{
 8011fd8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fda:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8011fe2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8011fe6:	f7ff ff13 	bl	8011e10 <HAL_UART_ErrorCallback>
}
 8011fea:	bd08      	pop	{r3, pc}

08011fec <HAL_UART_AbortCpltCallback>:
}
 8011fec:	4770      	bx	lr
	...

08011ff0 <HAL_UART_Abort_IT>:
{
 8011ff0:	b510      	push	{r4, lr}
 8011ff2:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8011ff4:	6802      	ldr	r2, [r0, #0]
 8011ff6:	6813      	ldr	r3, [r2, #0]
 8011ff8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8011ffc:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ffe:	6802      	ldr	r2, [r0, #0]
 8012000:	6893      	ldr	r3, [r2, #8]
 8012002:	f023 0301 	bic.w	r3, r3, #1
 8012006:	6093      	str	r3, [r2, #8]
  if (huart->hdmatx != NULL)
 8012008:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801200a:	b13b      	cbz	r3, 801201c <HAL_UART_Abort_IT+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801200c:	6802      	ldr	r2, [r0, #0]
 801200e:	6892      	ldr	r2, [r2, #8]
 8012010:	f012 0f80 	tst.w	r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8012014:	bf14      	ite	ne
 8012016:	4a2a      	ldrne	r2, [pc, #168]	; (80120c0 <HAL_UART_Abort_IT+0xd0>)
      huart->hdmatx->XferAbortCallback = NULL;
 8012018:	2200      	moveq	r2, #0
 801201a:	639a      	str	r2, [r3, #56]	; 0x38
  if (huart->hdmarx != NULL)
 801201c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801201e:	b13b      	cbz	r3, 8012030 <HAL_UART_Abort_IT+0x40>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012020:	6822      	ldr	r2, [r4, #0]
 8012022:	6892      	ldr	r2, [r2, #8]
 8012024:	f012 0f40 	tst.w	r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8012028:	bf14      	ite	ne
 801202a:	4a26      	ldrne	r2, [pc, #152]	; (80120c4 <HAL_UART_Abort_IT+0xd4>)
      huart->hdmarx->XferAbortCallback = NULL;
 801202c:	2200      	moveq	r2, #0
 801202e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8012030:	6823      	ldr	r3, [r4, #0]
 8012032:	689a      	ldr	r2, [r3, #8]
 8012034:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012038:	d00b      	beq.n	8012052 <HAL_UART_Abort_IT+0x62>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801203a:	689a      	ldr	r2, [r3, #8]
 801203c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012040:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8012042:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8012044:	b128      	cbz	r0, 8012052 <HAL_UART_Abort_IT+0x62>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8012046:	f7f3 f806 	bl	8005056 <HAL_DMA_Abort_IT>
 801204a:	b358      	cbz	r0, 80120a4 <HAL_UART_Abort_IT+0xb4>
        huart->hdmatx->XferAbortCallback = NULL;
 801204c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801204e:	2200      	movs	r2, #0
 8012050:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012052:	6823      	ldr	r3, [r4, #0]
 8012054:	689a      	ldr	r2, [r3, #8]
 8012056:	f012 0f40 	tst.w	r2, #64	; 0x40
 801205a:	d00b      	beq.n	8012074 <HAL_UART_Abort_IT+0x84>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801205c:	689a      	ldr	r2, [r3, #8]
 801205e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012062:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8012064:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012066:	b128      	cbz	r0, 8012074 <HAL_UART_Abort_IT+0x84>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012068:	f7f2 fff5 	bl	8005056 <HAL_DMA_Abort_IT>
 801206c:	b1c0      	cbz	r0, 80120a0 <HAL_UART_Abort_IT+0xb0>
        huart->hdmarx->XferAbortCallback = NULL;
 801206e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012070:	2200      	movs	r2, #0
 8012072:	639a      	str	r2, [r3, #56]	; 0x38
    huart->TxXferCount = 0U;
 8012074:	2300      	movs	r3, #0
 8012076:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->RxXferCount = 0U;
 801207a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    huart->RxISR = NULL;
 801207e:	6623      	str	r3, [r4, #96]	; 0x60
    huart->TxISR = NULL;
 8012080:	6663      	str	r3, [r4, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012082:	67e3      	str	r3, [r4, #124]	; 0x7c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012084:	6823      	ldr	r3, [r4, #0]
 8012086:	220f      	movs	r2, #15
 8012088:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801208a:	6822      	ldr	r2, [r4, #0]
 801208c:	8b13      	ldrh	r3, [r2, #24]
 801208e:	f043 0308 	orr.w	r3, r3, #8
 8012092:	8313      	strh	r3, [r2, #24]
    huart->gState  = HAL_UART_STATE_READY;
 8012094:	2320      	movs	r3, #32
 8012096:	6763      	str	r3, [r4, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_READY;
 8012098:	67a3      	str	r3, [r4, #120]	; 0x78
    HAL_UART_AbortCpltCallback(huart);
 801209a:	4620      	mov	r0, r4
 801209c:	f7ff ffa6 	bl	8011fec <HAL_UART_AbortCpltCallback>
}
 80120a0:	2000      	movs	r0, #0
 80120a2:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80120a4:	6823      	ldr	r3, [r4, #0]
 80120a6:	689a      	ldr	r2, [r3, #8]
 80120a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80120ac:	d0f8      	beq.n	80120a0 <HAL_UART_Abort_IT+0xb0>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80120ae:	689a      	ldr	r2, [r3, #8]
 80120b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80120b4:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 80120b6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d1d5      	bne.n	8012068 <HAL_UART_Abort_IT+0x78>
 80120bc:	e7f0      	b.n	80120a0 <HAL_UART_Abort_IT+0xb0>
 80120be:	bf00      	nop
 80120c0:	08012105 	.word	0x08012105
 80120c4:	080120c9 	.word	0x080120c9

080120c8 <UART_DMARxAbortCallback>:
{
 80120c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->hdmarx->XferAbortCallback = NULL;
 80120cc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80120ce:	2200      	movs	r2, #0
 80120d0:	639a      	str	r2, [r3, #56]	; 0x38
  if (huart->hdmatx != NULL)
 80120d2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80120d4:	b113      	cbz	r3, 80120dc <UART_DMARxAbortCallback+0x14>
    if (huart->hdmatx->XferAbortCallback != NULL)
 80120d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120d8:	b103      	cbz	r3, 80120dc <UART_DMARxAbortCallback+0x14>
}
 80120da:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0U;
 80120dc:	2300      	movs	r3, #0
 80120de:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 80120e2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120e6:	67c3      	str	r3, [r0, #124]	; 0x7c
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80120e8:	6803      	ldr	r3, [r0, #0]
 80120ea:	220f      	movs	r2, #15
 80120ec:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80120ee:	6802      	ldr	r2, [r0, #0]
 80120f0:	8b13      	ldrh	r3, [r2, #24]
 80120f2:	f043 0308 	orr.w	r3, r3, #8
 80120f6:	8313      	strh	r3, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80120f8:	2320      	movs	r3, #32
 80120fa:	6743      	str	r3, [r0, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80120fc:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_AbortCpltCallback(huart);
 80120fe:	f7ff ff75 	bl	8011fec <HAL_UART_AbortCpltCallback>
 8012102:	e7ea      	b.n	80120da <UART_DMARxAbortCallback+0x12>

08012104 <UART_DMATxAbortCallback>:
{
 8012104:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012106:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->hdmatx->XferAbortCallback = NULL;
 8012108:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801210a:	2200      	movs	r2, #0
 801210c:	639a      	str	r2, [r3, #56]	; 0x38
  if (huart->hdmarx != NULL)
 801210e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012110:	b113      	cbz	r3, 8012118 <UART_DMATxAbortCallback+0x14>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8012112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012114:	b103      	cbz	r3, 8012118 <UART_DMATxAbortCallback+0x14>
}
 8012116:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0U;
 8012118:	2300      	movs	r3, #0
 801211a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 801211e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012122:	67c3      	str	r3, [r0, #124]	; 0x7c
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012124:	6803      	ldr	r3, [r0, #0]
 8012126:	220f      	movs	r2, #15
 8012128:	621a      	str	r2, [r3, #32]
  huart->gState  = HAL_UART_STATE_READY;
 801212a:	2320      	movs	r3, #32
 801212c:	6743      	str	r3, [r0, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 801212e:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_AbortCpltCallback(huart);
 8012130:	f7ff ff5c 	bl	8011fec <HAL_UART_AbortCpltCallback>
 8012134:	e7ef      	b.n	8012116 <UART_DMATxAbortCallback+0x12>

08012136 <HAL_UART_AbortTransmitCpltCallback>:
}
 8012136:	4770      	bx	lr

08012138 <HAL_UART_AbortTransmit_IT>:
{
 8012138:	b510      	push	{r4, lr}
 801213a:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801213c:	6802      	ldr	r2, [r0, #0]
 801213e:	6813      	ldr	r3, [r2, #0]
 8012140:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012144:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8012146:	6803      	ldr	r3, [r0, #0]
 8012148:	689a      	ldr	r2, [r3, #8]
 801214a:	f012 0f80 	tst.w	r2, #128	; 0x80
 801214e:	d019      	beq.n	8012184 <HAL_UART_AbortTransmit_IT+0x4c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012150:	689a      	ldr	r2, [r3, #8]
 8012152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012156:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8012158:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801215a:	b153      	cbz	r3, 8012172 <HAL_UART_AbortTransmit_IT+0x3a>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 801215c:	4a0e      	ldr	r2, [pc, #56]	; (8012198 <HAL_UART_AbortTransmit_IT+0x60>)
 801215e:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8012160:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012162:	f7f2 ff78 	bl	8005056 <HAL_DMA_Abort_IT>
 8012166:	b110      	cbz	r0, 801216e <HAL_UART_AbortTransmit_IT+0x36>
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8012168:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 801216a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801216c:	4798      	blx	r3
}
 801216e:	2000      	movs	r0, #0
 8012170:	bd10      	pop	{r4, pc}
      huart->TxXferCount = 0U;
 8012172:	2300      	movs	r3, #0
 8012174:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      huart->TxISR = NULL;
 8012178:	6643      	str	r3, [r0, #100]	; 0x64
      huart->gState = HAL_UART_STATE_READY;
 801217a:	2320      	movs	r3, #32
 801217c:	6743      	str	r3, [r0, #116]	; 0x74
      HAL_UART_AbortTransmitCpltCallback(huart);
 801217e:	f7ff ffda 	bl	8012136 <HAL_UART_AbortTransmitCpltCallback>
 8012182:	e7f4      	b.n	801216e <HAL_UART_AbortTransmit_IT+0x36>
    huart->TxXferCount = 0U;
 8012184:	2300      	movs	r3, #0
 8012186:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->TxISR = NULL;
 801218a:	6643      	str	r3, [r0, #100]	; 0x64
    huart->gState = HAL_UART_STATE_READY;
 801218c:	2320      	movs	r3, #32
 801218e:	6743      	str	r3, [r0, #116]	; 0x74
    HAL_UART_AbortTransmitCpltCallback(huart);
 8012190:	f7ff ffd1 	bl	8012136 <HAL_UART_AbortTransmitCpltCallback>
 8012194:	e7eb      	b.n	801216e <HAL_UART_AbortTransmit_IT+0x36>
 8012196:	bf00      	nop
 8012198:	0801219d 	.word	0x0801219d

0801219c <UART_DMATxOnlyAbortCallback>:
{
 801219c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801219e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->TxXferCount = 0U;
 80121a0:	2300      	movs	r3, #0
 80121a2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->gState = HAL_UART_STATE_READY;
 80121a6:	2320      	movs	r3, #32
 80121a8:	6743      	str	r3, [r0, #116]	; 0x74
  HAL_UART_AbortTransmitCpltCallback(huart);
 80121aa:	f7ff ffc4 	bl	8012136 <HAL_UART_AbortTransmitCpltCallback>
}
 80121ae:	bd08      	pop	{r3, pc}

080121b0 <HAL_UART_AbortReceiveCpltCallback>:
}
 80121b0:	4770      	bx	lr
	...

080121b4 <HAL_UART_AbortReceive_IT>:
{
 80121b4:	b510      	push	{r4, lr}
 80121b6:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80121b8:	6802      	ldr	r2, [r0, #0]
 80121ba:	6813      	ldr	r3, [r2, #0]
 80121bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80121c0:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121c2:	6802      	ldr	r2, [r0, #0]
 80121c4:	6893      	ldr	r3, [r2, #8]
 80121c6:	f023 0301 	bic.w	r3, r3, #1
 80121ca:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121cc:	6803      	ldr	r3, [r0, #0]
 80121ce:	689a      	ldr	r2, [r3, #8]
 80121d0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80121d4:	d021      	beq.n	801221a <HAL_UART_AbortReceive_IT+0x66>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80121d6:	689a      	ldr	r2, [r3, #8]
 80121d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80121dc:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 80121de:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80121e0:	b153      	cbz	r3, 80121f8 <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80121e2:	4a13      	ldr	r2, [pc, #76]	; (8012230 <HAL_UART_AbortReceive_IT+0x7c>)
 80121e4:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80121e6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80121e8:	f7f2 ff35 	bl	8005056 <HAL_DMA_Abort_IT>
 80121ec:	b110      	cbz	r0, 80121f4 <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80121ee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80121f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80121f2:	4798      	blx	r3
}
 80121f4:	2000      	movs	r0, #0
 80121f6:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0U;
 80121f8:	2300      	movs	r3, #0
 80121fa:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
      huart->pRxBuffPtr = NULL;
 80121fe:	6543      	str	r3, [r0, #84]	; 0x54
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012200:	6803      	ldr	r3, [r0, #0]
 8012202:	220f      	movs	r2, #15
 8012204:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012206:	6802      	ldr	r2, [r0, #0]
 8012208:	8b13      	ldrh	r3, [r2, #24]
 801220a:	f043 0308 	orr.w	r3, r3, #8
 801220e:	8313      	strh	r3, [r2, #24]
      huart->RxState = HAL_UART_STATE_READY;
 8012210:	2320      	movs	r3, #32
 8012212:	6783      	str	r3, [r0, #120]	; 0x78
      HAL_UART_AbortReceiveCpltCallback(huart);
 8012214:	f7ff ffcc 	bl	80121b0 <HAL_UART_AbortReceiveCpltCallback>
 8012218:	e7ec      	b.n	80121f4 <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0U;
 801221a:	2200      	movs	r2, #0
 801221c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr = NULL;
 8012220:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012222:	220f      	movs	r2, #15
 8012224:	621a      	str	r2, [r3, #32]
    huart->RxState = HAL_UART_STATE_READY;
 8012226:	2320      	movs	r3, #32
 8012228:	6783      	str	r3, [r0, #120]	; 0x78
    HAL_UART_AbortReceiveCpltCallback(huart);
 801222a:	f7ff ffc1 	bl	80121b0 <HAL_UART_AbortReceiveCpltCallback>
 801222e:	e7e1      	b.n	80121f4 <HAL_UART_AbortReceive_IT+0x40>
 8012230:	08012235 	.word	0x08012235

08012234 <UART_DMARxOnlyAbortCallback>:
{
 8012234:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012236:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8012238:	2300      	movs	r3, #0
 801223a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801223e:	6803      	ldr	r3, [r0, #0]
 8012240:	220f      	movs	r2, #15
 8012242:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012244:	6802      	ldr	r2, [r0, #0]
 8012246:	8b13      	ldrh	r3, [r2, #24]
 8012248:	f043 0308 	orr.w	r3, r3, #8
 801224c:	8313      	strh	r3, [r2, #24]
  huart->RxState = HAL_UART_STATE_READY;
 801224e:	2320      	movs	r3, #32
 8012250:	6783      	str	r3, [r0, #120]	; 0x78
  HAL_UART_AbortReceiveCpltCallback(huart);
 8012252:	f7ff ffad 	bl	80121b0 <HAL_UART_AbortReceiveCpltCallback>
}
 8012256:	bd08      	pop	{r3, pc}

08012258 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 8012258:	6802      	ldr	r2, [r0, #0]
 801225a:	8b13      	ldrh	r3, [r2, #24]
 801225c:	f043 0304 	orr.w	r3, r3, #4
 8012260:	8313      	strh	r3, [r2, #24]
}
 8012262:	4770      	bx	lr

08012264 <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 8012264:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8012268:	2b01      	cmp	r3, #1
 801226a:	d015      	beq.n	8012298 <HAL_HalfDuplex_EnableTransmitter+0x34>
 801226c:	2301      	movs	r3, #1
 801226e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 8012272:	2324      	movs	r3, #36	; 0x24
 8012274:	6743      	str	r3, [r0, #116]	; 0x74
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8012276:	6802      	ldr	r2, [r0, #0]
 8012278:	6813      	ldr	r3, [r2, #0]
 801227a:	f023 030c 	bic.w	r3, r3, #12
 801227e:	6013      	str	r3, [r2, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8012280:	6802      	ldr	r2, [r0, #0]
 8012282:	6813      	ldr	r3, [r2, #0]
 8012284:	f043 0308 	orr.w	r3, r3, #8
 8012288:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 801228a:	2320      	movs	r3, #32
 801228c:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UNLOCK(huart);
 801228e:	2300      	movs	r3, #0
 8012290:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 8012294:	4618      	mov	r0, r3
 8012296:	4770      	bx	lr
  __HAL_LOCK(huart);
 8012298:	2002      	movs	r0, #2
}
 801229a:	4770      	bx	lr

0801229c <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 801229c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80122a0:	2b01      	cmp	r3, #1
 80122a2:	d015      	beq.n	80122d0 <HAL_HalfDuplex_EnableReceiver+0x34>
 80122a4:	2301      	movs	r3, #1
 80122a6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 80122aa:	2324      	movs	r3, #36	; 0x24
 80122ac:	6743      	str	r3, [r0, #116]	; 0x74
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80122ae:	6802      	ldr	r2, [r0, #0]
 80122b0:	6813      	ldr	r3, [r2, #0]
 80122b2:	f023 030c 	bic.w	r3, r3, #12
 80122b6:	6013      	str	r3, [r2, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80122b8:	6802      	ldr	r2, [r0, #0]
 80122ba:	6813      	ldr	r3, [r2, #0]
 80122bc:	f043 0304 	orr.w	r3, r3, #4
 80122c0:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80122c2:	2320      	movs	r3, #32
 80122c4:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80122c6:	2300      	movs	r3, #0
 80122c8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 80122cc:	4618      	mov	r0, r3
 80122ce:	4770      	bx	lr
  __HAL_LOCK(huart);
 80122d0:	2002      	movs	r0, #2
}
 80122d2:	4770      	bx	lr

080122d4 <HAL_LIN_SendBreak>:
  __HAL_LOCK(huart);
 80122d4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d010      	beq.n	80122fe <HAL_LIN_SendBreak+0x2a>
 80122dc:	2301      	movs	r3, #1
 80122de:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 80122e2:	2324      	movs	r3, #36	; 0x24
 80122e4:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 80122e6:	6802      	ldr	r2, [r0, #0]
 80122e8:	8b13      	ldrh	r3, [r2, #24]
 80122ea:	f043 0302 	orr.w	r3, r3, #2
 80122ee:	8313      	strh	r3, [r2, #24]
  huart->gState = HAL_UART_STATE_READY;
 80122f0:	2320      	movs	r3, #32
 80122f2:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80122f4:	2300      	movs	r3, #0
 80122f6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 80122fa:	4618      	mov	r0, r3
 80122fc:	4770      	bx	lr
  __HAL_LOCK(huart);
 80122fe:	2002      	movs	r0, #2
}
 8012300:	4770      	bx	lr

08012302 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8012302:	6f42      	ldr	r2, [r0, #116]	; 0x74
  temp2 = huart->RxState;
 8012304:	6f80      	ldr	r0, [r0, #120]	; 0x78
}
 8012306:	4310      	orrs	r0, r2
 8012308:	4770      	bx	lr

0801230a <HAL_UART_GetError>:
  return huart->ErrorCode;
 801230a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
 801230c:	4770      	bx	lr
	...

08012310 <UART_SetConfig>:
{
 8012310:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8012314:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8012316:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012318:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801231a:	68a3      	ldr	r3, [r4, #8]
 801231c:	6922      	ldr	r2, [r4, #16]
 801231e:	4313      	orrs	r3, r2
 8012320:	6962      	ldr	r2, [r4, #20]
 8012322:	4313      	orrs	r3, r2
 8012324:	69e2      	ldr	r2, [r4, #28]
 8012326:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012328:	4aab      	ldr	r2, [pc, #684]	; (80125d8 <UART_SetConfig+0x2c8>)
 801232a:	4002      	ands	r2, r0
 801232c:	4313      	orrs	r3, r2
 801232e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012330:	6822      	ldr	r2, [r4, #0]
 8012332:	6853      	ldr	r3, [r2, #4]
 8012334:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8012338:	68e1      	ldr	r1, [r4, #12]
 801233a:	430b      	orrs	r3, r1
 801233c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801233e:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012340:	6822      	ldr	r2, [r4, #0]
 8012342:	4ba6      	ldr	r3, [pc, #664]	; (80125dc <UART_SetConfig+0x2cc>)
 8012344:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8012346:	bf1c      	itt	ne
 8012348:	6a23      	ldrne	r3, [r4, #32]
 801234a:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801234c:	6893      	ldr	r3, [r2, #8]
 801234e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8012352:	430b      	orrs	r3, r1
 8012354:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012356:	6823      	ldr	r3, [r4, #0]
 8012358:	4aa1      	ldr	r2, [pc, #644]	; (80125e0 <UART_SetConfig+0x2d0>)
 801235a:	4293      	cmp	r3, r2
 801235c:	d023      	beq.n	80123a6 <UART_SetConfig+0x96>
 801235e:	4aa1      	ldr	r2, [pc, #644]	; (80125e4 <UART_SetConfig+0x2d4>)
 8012360:	4293      	cmp	r3, r2
 8012362:	d032      	beq.n	80123ca <UART_SetConfig+0xba>
 8012364:	4aa0      	ldr	r2, [pc, #640]	; (80125e8 <UART_SetConfig+0x2d8>)
 8012366:	4293      	cmp	r3, r2
 8012368:	d04c      	beq.n	8012404 <UART_SetConfig+0xf4>
 801236a:	4aa0      	ldr	r2, [pc, #640]	; (80125ec <UART_SetConfig+0x2dc>)
 801236c:	4293      	cmp	r3, r2
 801236e:	d060      	beq.n	8012432 <UART_SetConfig+0x122>
 8012370:	4a9f      	ldr	r2, [pc, #636]	; (80125f0 <UART_SetConfig+0x2e0>)
 8012372:	4293      	cmp	r3, r2
 8012374:	d074      	beq.n	8012460 <UART_SetConfig+0x150>
 8012376:	4a99      	ldr	r2, [pc, #612]	; (80125dc <UART_SetConfig+0x2cc>)
 8012378:	4293      	cmp	r3, r2
 801237a:	f000 808b 	beq.w	8012494 <UART_SetConfig+0x184>
 801237e:	2510      	movs	r5, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012380:	69e3      	ldr	r3, [r4, #28]
 8012382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012386:	f000 813b 	beq.w	8012600 <UART_SetConfig+0x2f0>
    switch (clocksource)
 801238a:	2d08      	cmp	r5, #8
 801238c:	f200 81c5 	bhi.w	801271a <UART_SetConfig+0x40a>
 8012390:	e8df f015 	tbh	[pc, r5, lsl #1]
 8012394:	019b0185 	.word	0x019b0185
 8012398:	01c301a5 	.word	0x01c301a5
 801239c:	01c301b0 	.word	0x01c301b0
 80123a0:	01c301c3 	.word	0x01c301c3
 80123a4:	01ba      	.short	0x01ba
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123a6:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80123aa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80123ae:	f002 0203 	and.w	r2, r2, #3
 80123b2:	2a03      	cmp	r2, #3
 80123b4:	d807      	bhi.n	80123c6 <UART_SetConfig+0xb6>
 80123b6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80123ba:	0087      	.short	0x0087
 80123bc:	01c30004 	.word	0x01c30004
 80123c0:	01c5      	.short	0x01c5
 80123c2:	2504      	movs	r5, #4
 80123c4:	e7dc      	b.n	8012380 <UART_SetConfig+0x70>
 80123c6:	2510      	movs	r5, #16
 80123c8:	e7da      	b.n	8012380 <UART_SetConfig+0x70>
 80123ca:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80123ce:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80123d2:	f002 020c 	and.w	r2, r2, #12
 80123d6:	2a0c      	cmp	r2, #12
 80123d8:	d812      	bhi.n	8012400 <UART_SetConfig+0xf0>
 80123da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80123de:	0088      	.short	0x0088
 80123e0:	00110011 	.word	0x00110011
 80123e4:	000d0011 	.word	0x000d0011
 80123e8:	00110011 	.word	0x00110011
 80123ec:	01b50011 	.word	0x01b50011
 80123f0:	00110011 	.word	0x00110011
 80123f4:	000f0011 	.word	0x000f0011
 80123f8:	2504      	movs	r5, #4
 80123fa:	e7c1      	b.n	8012380 <UART_SetConfig+0x70>
 80123fc:	2508      	movs	r5, #8
 80123fe:	e7bf      	b.n	8012380 <UART_SetConfig+0x70>
 8012400:	2510      	movs	r5, #16
 8012402:	e7bd      	b.n	8012380 <UART_SetConfig+0x70>
 8012404:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8012408:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 801240c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8012410:	2a10      	cmp	r2, #16
 8012412:	d00a      	beq.n	801242a <UART_SetConfig+0x11a>
 8012414:	d906      	bls.n	8012424 <UART_SetConfig+0x114>
 8012416:	2a20      	cmp	r2, #32
 8012418:	f000 8198 	beq.w	801274c <UART_SetConfig+0x43c>
 801241c:	2a30      	cmp	r2, #48	; 0x30
 801241e:	d106      	bne.n	801242e <UART_SetConfig+0x11e>
 8012420:	2508      	movs	r5, #8
 8012422:	e7ad      	b.n	8012380 <UART_SetConfig+0x70>
 8012424:	b91a      	cbnz	r2, 801242e <UART_SetConfig+0x11e>
 8012426:	2500      	movs	r5, #0
 8012428:	e04f      	b.n	80124ca <UART_SetConfig+0x1ba>
 801242a:	2504      	movs	r5, #4
 801242c:	e7a8      	b.n	8012380 <UART_SetConfig+0x70>
 801242e:	2510      	movs	r5, #16
 8012430:	e7a6      	b.n	8012380 <UART_SetConfig+0x70>
 8012432:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8012436:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 801243a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 801243e:	2a40      	cmp	r2, #64	; 0x40
 8012440:	d00a      	beq.n	8012458 <UART_SetConfig+0x148>
 8012442:	d906      	bls.n	8012452 <UART_SetConfig+0x142>
 8012444:	2a80      	cmp	r2, #128	; 0x80
 8012446:	f000 8183 	beq.w	8012750 <UART_SetConfig+0x440>
 801244a:	2ac0      	cmp	r2, #192	; 0xc0
 801244c:	d106      	bne.n	801245c <UART_SetConfig+0x14c>
 801244e:	2508      	movs	r5, #8
 8012450:	e796      	b.n	8012380 <UART_SetConfig+0x70>
 8012452:	b91a      	cbnz	r2, 801245c <UART_SetConfig+0x14c>
 8012454:	2500      	movs	r5, #0
 8012456:	e038      	b.n	80124ca <UART_SetConfig+0x1ba>
 8012458:	2504      	movs	r5, #4
 801245a:	e791      	b.n	8012380 <UART_SetConfig+0x70>
 801245c:	2510      	movs	r5, #16
 801245e:	e78f      	b.n	8012380 <UART_SetConfig+0x70>
 8012460:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8012464:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8012468:	f402 7240 	and.w	r2, r2, #768	; 0x300
 801246c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8012470:	d00c      	beq.n	801248c <UART_SetConfig+0x17c>
 8012472:	d908      	bls.n	8012486 <UART_SetConfig+0x176>
 8012474:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8012478:	f000 816c 	beq.w	8012754 <UART_SetConfig+0x444>
 801247c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8012480:	d106      	bne.n	8012490 <UART_SetConfig+0x180>
 8012482:	2508      	movs	r5, #8
 8012484:	e77c      	b.n	8012380 <UART_SetConfig+0x70>
 8012486:	b91a      	cbnz	r2, 8012490 <UART_SetConfig+0x180>
 8012488:	2500      	movs	r5, #0
 801248a:	e01e      	b.n	80124ca <UART_SetConfig+0x1ba>
 801248c:	2504      	movs	r5, #4
 801248e:	e777      	b.n	8012380 <UART_SetConfig+0x70>
 8012490:	2510      	movs	r5, #16
 8012492:	e775      	b.n	8012380 <UART_SetConfig+0x70>
 8012494:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8012498:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 801249c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80124a0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80124a4:	d040      	beq.n	8012528 <UART_SetConfig+0x218>
 80124a6:	d90a      	bls.n	80124be <UART_SetConfig+0x1ae>
 80124a8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80124ac:	d040      	beq.n	8012530 <UART_SetConfig+0x220>
 80124ae:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80124b2:	f040 8135 	bne.w	8012720 <UART_SetConfig+0x410>
 80124b6:	2508      	movs	r5, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80124b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80124bc:	e021      	b.n	8012502 <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124be:	2a00      	cmp	r2, #0
 80124c0:	f040 812e 	bne.w	8012720 <UART_SetConfig+0x410>
 80124c4:	2500      	movs	r5, #0
 80124c6:	e000      	b.n	80124ca <UART_SetConfig+0x1ba>
 80124c8:	2501      	movs	r5, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 80124ca:	4a44      	ldr	r2, [pc, #272]	; (80125dc <UART_SetConfig+0x2cc>)
 80124cc:	4293      	cmp	r3, r2
 80124ce:	f47f af57 	bne.w	8012380 <UART_SetConfig+0x70>
    switch (clocksource)
 80124d2:	2d08      	cmp	r5, #8
 80124d4:	f200 8126 	bhi.w	8012724 <UART_SetConfig+0x414>
 80124d8:	e8df f015 	tbh	[pc, r5, lsl #1]
 80124dc:	0124000e 	.word	0x0124000e
 80124e0:	0124002d 	.word	0x0124002d
 80124e4:	01240026 	.word	0x01240026
 80124e8:	01240124 	.word	0x01240124
 80124ec:	000b      	.short	0x000b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124ee:	2500      	movs	r5, #0
 80124f0:	e7eb      	b.n	80124ca <UART_SetConfig+0x1ba>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80124f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80124f6:	e004      	b.n	8012502 <UART_SetConfig+0x1f2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80124f8:	f7f8 fac6 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 80124fc:	2800      	cmp	r0, #0
 80124fe:	f000 8113 	beq.w	8012728 <UART_SetConfig+0x418>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012502:	6862      	ldr	r2, [r4, #4]
 8012504:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8012508:	4283      	cmp	r3, r0
 801250a:	f200 810f 	bhi.w	801272c <UART_SetConfig+0x41c>
 801250e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8012512:	f200 810d 	bhi.w	8012730 <UART_SetConfig+0x420>
        switch (clocksource)
 8012516:	2d08      	cmp	r5, #8
 8012518:	d85b      	bhi.n	80125d2 <UART_SetConfig+0x2c2>
 801251a:	e8df f005 	tbb	[pc, r5]
 801251e:	5a0f      	.short	0x5a0f
 8012520:	5a3a5a2a 	.word	0x5a3a5a2a
 8012524:	5a5a      	.short	0x5a5a
 8012526:	4d          	.byte	0x4d
 8012527:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8012528:	f7f7 feb4 	bl	800a294 <HAL_RCC_GetSysClockFreq>
        break;
 801252c:	2504      	movs	r5, #4
 801252e:	e7e5      	b.n	80124fc <UART_SetConfig+0x1ec>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012530:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8012532:	4830      	ldr	r0, [pc, #192]	; (80125f4 <UART_SetConfig+0x2e4>)
 8012534:	e7e5      	b.n	8012502 <UART_SetConfig+0x1f2>
    switch (clocksource)
 8012536:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8012538:	482e      	ldr	r0, [pc, #184]	; (80125f4 <UART_SetConfig+0x2e4>)
 801253a:	e7e2      	b.n	8012502 <UART_SetConfig+0x1f2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801253c:	f7f8 faa4 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
 8012540:	6862      	ldr	r2, [r4, #4]
 8012542:	2500      	movs	r5, #0
 8012544:	0e07      	lsrs	r7, r0, #24
 8012546:	0206      	lsls	r6, r0, #8
 8012548:	0850      	lsrs	r0, r2, #1
 801254a:	462b      	mov	r3, r5
 801254c:	eb16 0b00 	adds.w	fp, r6, r0
 8012550:	f147 0c00 	adc.w	ip, r7, #0
 8012554:	4658      	mov	r0, fp
 8012556:	4661      	mov	r1, ip
 8012558:	f7ed fe7a 	bl	8000250 <__aeabi_uldivmod>
 801255c:	4603      	mov	r3, r0
            break;
 801255e:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012560:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8012564:	4a24      	ldr	r2, [pc, #144]	; (80125f8 <UART_SetConfig+0x2e8>)
 8012566:	4291      	cmp	r1, r2
 8012568:	f200 80e4 	bhi.w	8012734 <UART_SetConfig+0x424>
          huart->Instance->BRR = usartdiv;
 801256c:	6822      	ldr	r2, [r4, #0]
 801256e:	60d3      	str	r3, [r2, #12]
 8012570:	e0a6      	b.n	80126c0 <UART_SetConfig+0x3b0>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8012572:	0856      	lsrs	r6, r2, #1
 8012574:	2500      	movs	r5, #0
 8012576:	462b      	mov	r3, r5
 8012578:	f8df b080 	ldr.w	fp, [pc, #128]	; 80125fc <UART_SetConfig+0x2ec>
 801257c:	f04f 0c00 	mov.w	ip, #0
 8012580:	eb1b 0006 	adds.w	r0, fp, r6
 8012584:	f14c 0100 	adc.w	r1, ip, #0
 8012588:	f7ed fe62 	bl	8000250 <__aeabi_uldivmod>
 801258c:	4603      	mov	r3, r0
            break;
 801258e:	4628      	mov	r0, r5
 8012590:	e7e6      	b.n	8012560 <UART_SetConfig+0x250>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012592:	f7f7 fe7f 	bl	800a294 <HAL_RCC_GetSysClockFreq>
 8012596:	6862      	ldr	r2, [r4, #4]
 8012598:	2500      	movs	r5, #0
 801259a:	0e07      	lsrs	r7, r0, #24
 801259c:	0206      	lsls	r6, r0, #8
 801259e:	0850      	lsrs	r0, r2, #1
 80125a0:	462b      	mov	r3, r5
 80125a2:	eb16 0b00 	adds.w	fp, r6, r0
 80125a6:	f147 0c00 	adc.w	ip, r7, #0
 80125aa:	4658      	mov	r0, fp
 80125ac:	4661      	mov	r1, ip
 80125ae:	f7ed fe4f 	bl	8000250 <__aeabi_uldivmod>
 80125b2:	4603      	mov	r3, r0
            break;
 80125b4:	4628      	mov	r0, r5
 80125b6:	e7d3      	b.n	8012560 <UART_SetConfig+0x250>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80125b8:	0850      	lsrs	r0, r2, #1
 80125ba:	2700      	movs	r7, #0
 80125bc:	2500      	movs	r5, #0
 80125be:	462b      	mov	r3, r5
 80125c0:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80125c4:	f147 0100 	adc.w	r1, r7, #0
 80125c8:	f7ed fe42 	bl	8000250 <__aeabi_uldivmod>
 80125cc:	4603      	mov	r3, r0
            break;
 80125ce:	4628      	mov	r0, r5
 80125d0:	e7c6      	b.n	8012560 <UART_SetConfig+0x250>
            ret = HAL_ERROR;
 80125d2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80125d4:	2300      	movs	r3, #0
 80125d6:	e7c3      	b.n	8012560 <UART_SetConfig+0x250>
 80125d8:	efff69f3 	.word	0xefff69f3
 80125dc:	40008000 	.word	0x40008000
 80125e0:	40013800 	.word	0x40013800
 80125e4:	40004400 	.word	0x40004400
 80125e8:	40004800 	.word	0x40004800
 80125ec:	40004c00 	.word	0x40004c00
 80125f0:	40005000 	.word	0x40005000
 80125f4:	00f42400 	.word	0x00f42400
 80125f8:	000ffcff 	.word	0x000ffcff
 80125fc:	f4240000 	.word	0xf4240000
    switch (clocksource)
 8012600:	2d08      	cmp	r5, #8
 8012602:	d849      	bhi.n	8012698 <UART_SetConfig+0x388>
 8012604:	e8df f005 	tbb	[pc, r5]
 8012608:	48291e05 	.word	0x48291e05
 801260c:	48484834 	.word	0x48484834
 8012610:	3f          	.byte	0x3f
 8012611:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012612:	f7f8 fa39 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
 8012616:	6862      	ldr	r2, [r4, #4]
 8012618:	0853      	lsrs	r3, r2, #1
 801261a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801261e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012622:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8012624:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012626:	f1a3 0110 	sub.w	r1, r3, #16
 801262a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 801262e:	4291      	cmp	r1, r2
 8012630:	f200 8082 	bhi.w	8012738 <UART_SetConfig+0x428>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012634:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8012638:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801263a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 801263e:	4313      	orrs	r3, r2
 8012640:	60cb      	str	r3, [r1, #12]
 8012642:	e03d      	b.n	80126c0 <UART_SetConfig+0x3b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8012644:	f7f8 fa32 	bl	800aaac <HAL_RCC_GetPCLK2Freq>
 8012648:	6862      	ldr	r2, [r4, #4]
 801264a:	0853      	lsrs	r3, r2, #1
 801264c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8012650:	fbb3 f3f2 	udiv	r3, r3, r2
 8012654:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8012656:	2000      	movs	r0, #0
        break;
 8012658:	e7e5      	b.n	8012626 <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 801265a:	6862      	ldr	r2, [r4, #4]
 801265c:	0853      	lsrs	r3, r2, #1
 801265e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8012662:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8012666:	fbb3 f3f2 	udiv	r3, r3, r2
 801266a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 801266c:	2000      	movs	r0, #0
        break;
 801266e:	e7da      	b.n	8012626 <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012670:	f7f7 fe10 	bl	800a294 <HAL_RCC_GetSysClockFreq>
 8012674:	6862      	ldr	r2, [r4, #4]
 8012676:	0853      	lsrs	r3, r2, #1
 8012678:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801267c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012680:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8012682:	2000      	movs	r0, #0
        break;
 8012684:	e7cf      	b.n	8012626 <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012686:	6862      	ldr	r2, [r4, #4]
 8012688:	0853      	lsrs	r3, r2, #1
 801268a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801268e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012692:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8012694:	2000      	movs	r0, #0
        break;
 8012696:	e7c6      	b.n	8012626 <UART_SetConfig+0x316>
        ret = HAL_ERROR;
 8012698:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 801269a:	2300      	movs	r3, #0
 801269c:	e7c3      	b.n	8012626 <UART_SetConfig+0x316>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801269e:	f7f8 f9f3 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
 80126a2:	6863      	ldr	r3, [r4, #4]
 80126a4:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80126a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80126ac:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80126ae:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126b0:	f1a2 0110 	sub.w	r1, r2, #16
 80126b4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80126b8:	4299      	cmp	r1, r3
 80126ba:	d83f      	bhi.n	801273c <UART_SetConfig+0x42c>
      huart->Instance->BRR = usartdiv;
 80126bc:	6823      	ldr	r3, [r4, #0]
 80126be:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 80126c0:	2200      	movs	r2, #0
 80126c2:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80126c4:	6662      	str	r2, [r4, #100]	; 0x64
}
 80126c6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80126ca:	f7f8 f9ef 	bl	800aaac <HAL_RCC_GetPCLK2Freq>
 80126ce:	6863      	ldr	r3, [r4, #4]
 80126d0:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80126d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80126d8:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80126da:	2000      	movs	r0, #0
        break;
 80126dc:	e7e8      	b.n	80126b0 <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80126de:	6863      	ldr	r3, [r4, #4]
 80126e0:	085a      	lsrs	r2, r3, #1
 80126e2:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 80126e6:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
 80126ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80126ee:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80126f0:	2000      	movs	r0, #0
        break;
 80126f2:	e7dd      	b.n	80126b0 <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80126f4:	f7f7 fdce 	bl	800a294 <HAL_RCC_GetSysClockFreq>
 80126f8:	6863      	ldr	r3, [r4, #4]
 80126fa:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80126fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8012702:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8012704:	2000      	movs	r0, #0
        break;
 8012706:	e7d3      	b.n	80126b0 <UART_SetConfig+0x3a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8012708:	6863      	ldr	r3, [r4, #4]
 801270a:	085a      	lsrs	r2, r3, #1
 801270c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012710:	fbb2 f2f3 	udiv	r2, r2, r3
 8012714:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8012716:	2000      	movs	r0, #0
        break;
 8012718:	e7ca      	b.n	80126b0 <UART_SetConfig+0x3a0>
        ret = HAL_ERROR;
 801271a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 801271c:	2200      	movs	r2, #0
 801271e:	e7c7      	b.n	80126b0 <UART_SetConfig+0x3a0>
        ret = HAL_ERROR;
 8012720:	2001      	movs	r0, #1
 8012722:	e7cd      	b.n	80126c0 <UART_SetConfig+0x3b0>
 8012724:	2001      	movs	r0, #1
 8012726:	e7cb      	b.n	80126c0 <UART_SetConfig+0x3b0>
 8012728:	2000      	movs	r0, #0
 801272a:	e7c9      	b.n	80126c0 <UART_SetConfig+0x3b0>
        ret = HAL_ERROR;
 801272c:	2001      	movs	r0, #1
 801272e:	e7c7      	b.n	80126c0 <UART_SetConfig+0x3b0>
 8012730:	2001      	movs	r0, #1
 8012732:	e7c5      	b.n	80126c0 <UART_SetConfig+0x3b0>
          ret = HAL_ERROR;
 8012734:	2001      	movs	r0, #1
 8012736:	e7c3      	b.n	80126c0 <UART_SetConfig+0x3b0>
      ret = HAL_ERROR;
 8012738:	2001      	movs	r0, #1
 801273a:	e7c1      	b.n	80126c0 <UART_SetConfig+0x3b0>
      ret = HAL_ERROR;
 801273c:	2001      	movs	r0, #1
 801273e:	e7bf      	b.n	80126c0 <UART_SetConfig+0x3b0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012740:	2502      	movs	r5, #2
 8012742:	e61d      	b.n	8012380 <UART_SetConfig+0x70>
 8012744:	2508      	movs	r5, #8
 8012746:	e61b      	b.n	8012380 <UART_SetConfig+0x70>
 8012748:	2502      	movs	r5, #2
 801274a:	e619      	b.n	8012380 <UART_SetConfig+0x70>
 801274c:	2502      	movs	r5, #2
 801274e:	e617      	b.n	8012380 <UART_SetConfig+0x70>
 8012750:	2502      	movs	r5, #2
 8012752:	e615      	b.n	8012380 <UART_SetConfig+0x70>
 8012754:	2502      	movs	r5, #2
 8012756:	e613      	b.n	8012380 <UART_SetConfig+0x70>

08012758 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012758:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801275a:	f013 0f01 	tst.w	r3, #1
 801275e:	d006      	beq.n	801276e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012760:	6802      	ldr	r2, [r0, #0]
 8012762:	6853      	ldr	r3, [r2, #4]
 8012764:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012768:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801276a:	430b      	orrs	r3, r1
 801276c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801276e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012770:	f013 0f02 	tst.w	r3, #2
 8012774:	d006      	beq.n	8012784 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012776:	6802      	ldr	r2, [r0, #0]
 8012778:	6853      	ldr	r3, [r2, #4]
 801277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801277e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012780:	430b      	orrs	r3, r1
 8012782:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012784:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012786:	f013 0f04 	tst.w	r3, #4
 801278a:	d006      	beq.n	801279a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801278c:	6802      	ldr	r2, [r0, #0]
 801278e:	6853      	ldr	r3, [r2, #4]
 8012790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012794:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012796:	430b      	orrs	r3, r1
 8012798:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801279a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801279c:	f013 0f08 	tst.w	r3, #8
 80127a0:	d006      	beq.n	80127b0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80127a2:	6802      	ldr	r2, [r0, #0]
 80127a4:	6853      	ldr	r3, [r2, #4]
 80127a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80127aa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80127ac:	430b      	orrs	r3, r1
 80127ae:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80127b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127b2:	f013 0f10 	tst.w	r3, #16
 80127b6:	d006      	beq.n	80127c6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80127b8:	6802      	ldr	r2, [r0, #0]
 80127ba:	6893      	ldr	r3, [r2, #8]
 80127bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127c0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80127c2:	430b      	orrs	r3, r1
 80127c4:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80127c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127c8:	f013 0f20 	tst.w	r3, #32
 80127cc:	d006      	beq.n	80127dc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80127ce:	6802      	ldr	r2, [r0, #0]
 80127d0:	6893      	ldr	r3, [r2, #8]
 80127d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127d6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80127d8:	430b      	orrs	r3, r1
 80127da:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80127dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80127e2:	d00a      	beq.n	80127fa <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80127e4:	6802      	ldr	r2, [r0, #0]
 80127e6:	6853      	ldr	r3, [r2, #4]
 80127e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80127ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80127ee:	430b      	orrs	r3, r1
 80127f0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80127f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80127f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80127f8:	d00b      	beq.n	8012812 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80127fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012800:	d006      	beq.n	8012810 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012802:	6802      	ldr	r2, [r0, #0]
 8012804:	6853      	ldr	r3, [r2, #4]
 8012806:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801280a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801280c:	430b      	orrs	r3, r1
 801280e:	6053      	str	r3, [r2, #4]
}
 8012810:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012812:	6802      	ldr	r2, [r0, #0]
 8012814:	6853      	ldr	r3, [r2, #4]
 8012816:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 801281a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801281c:	430b      	orrs	r3, r1
 801281e:	6053      	str	r3, [r2, #4]
 8012820:	e7eb      	b.n	80127fa <UART_AdvFeatureConfig+0xa2>

08012822 <UART_WaitOnFlagUntilTimeout>:
{
 8012822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012826:	4607      	mov	r7, r0
 8012828:	460e      	mov	r6, r1
 801282a:	4615      	mov	r5, r2
 801282c:	4698      	mov	r8, r3
 801282e:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012830:	683a      	ldr	r2, [r7, #0]
 8012832:	69d3      	ldr	r3, [r2, #28]
 8012834:	ea36 0303 	bics.w	r3, r6, r3
 8012838:	bf0c      	ite	eq
 801283a:	2301      	moveq	r3, #1
 801283c:	2300      	movne	r3, #0
 801283e:	42ab      	cmp	r3, r5
 8012840:	d11c      	bne.n	801287c <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8012842:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8012846:	d0f4      	beq.n	8012832 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012848:	f7f2 f820 	bl	800488c <HAL_GetTick>
 801284c:	eba0 0008 	sub.w	r0, r0, r8
 8012850:	42a0      	cmp	r0, r4
 8012852:	d801      	bhi.n	8012858 <UART_WaitOnFlagUntilTimeout+0x36>
 8012854:	2c00      	cmp	r4, #0
 8012856:	d1eb      	bne.n	8012830 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012858:	683a      	ldr	r2, [r7, #0]
 801285a:	6813      	ldr	r3, [r2, #0]
 801285c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012860:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012862:	683a      	ldr	r2, [r7, #0]
 8012864:	6893      	ldr	r3, [r2, #8]
 8012866:	f023 0301 	bic.w	r3, r3, #1
 801286a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 801286c:	2320      	movs	r3, #32
 801286e:	677b      	str	r3, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8012870:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8012872:	2300      	movs	r3, #0
 8012874:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        return HAL_TIMEOUT;
 8012878:	2003      	movs	r0, #3
 801287a:	e000      	b.n	801287e <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 801287c:	2000      	movs	r0, #0
}
 801287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012882 <HAL_UART_Transmit>:
{
 8012882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 801288a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801288c:	2b20      	cmp	r3, #32
 801288e:	d15d      	bne.n	801294c <HAL_UART_Transmit+0xca>
 8012890:	4604      	mov	r4, r0
 8012892:	460d      	mov	r5, r1
 8012894:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8012896:	2900      	cmp	r1, #0
 8012898:	d05d      	beq.n	8012956 <HAL_UART_Transmit+0xd4>
 801289a:	2a00      	cmp	r2, #0
 801289c:	d05d      	beq.n	801295a <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 801289e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d05b      	beq.n	801295e <HAL_UART_Transmit+0xdc>
 80128a6:	2301      	movs	r3, #1
 80128a8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128ac:	2300      	movs	r3, #0
 80128ae:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80128b0:	2321      	movs	r3, #33	; 0x21
 80128b2:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80128b4:	f7f1 ffea 	bl	800488c <HAL_GetTick>
 80128b8:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80128ba:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80128be:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128c2:	68a3      	ldr	r3, [r4, #8]
 80128c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80128c8:	d00a      	beq.n	80128e0 <HAL_UART_Transmit+0x5e>
      pdata16bits = NULL;
 80128ca:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 80128ce:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	b35b      	cbz	r3, 801292e <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80128d6:	f04f 0900 	mov.w	r9, #0
 80128da:	f04f 0880 	mov.w	r8, #128	; 0x80
 80128de:	e017      	b.n	8012910 <HAL_UART_Transmit+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128e0:	6923      	ldr	r3, [r4, #16]
 80128e2:	b913      	cbnz	r3, 80128ea <HAL_UART_Transmit+0x68>
      pdata16bits = (uint16_t *) pData;
 80128e4:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80128e6:	2500      	movs	r5, #0
 80128e8:	e7f1      	b.n	80128ce <HAL_UART_Transmit+0x4c>
      pdata16bits = NULL;
 80128ea:	f04f 0a00 	mov.w	sl, #0
 80128ee:	e7ee      	b.n	80128ce <HAL_UART_Transmit+0x4c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80128f0:	6822      	ldr	r2, [r4, #0]
 80128f2:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80128f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128fa:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80128fc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8012900:	3b01      	subs	r3, #1
 8012902:	b29b      	uxth	r3, r3
 8012904:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8012908:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801290c:	b29b      	uxth	r3, r3
 801290e:	b173      	cbz	r3, 801292e <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012910:	9600      	str	r6, [sp, #0]
 8012912:	463b      	mov	r3, r7
 8012914:	464a      	mov	r2, r9
 8012916:	4641      	mov	r1, r8
 8012918:	4620      	mov	r0, r4
 801291a:	f7ff ff82 	bl	8012822 <UART_WaitOnFlagUntilTimeout>
 801291e:	bb00      	cbnz	r0, 8012962 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 8012920:	2d00      	cmp	r5, #0
 8012922:	d0e5      	beq.n	80128f0 <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012924:	6823      	ldr	r3, [r4, #0]
 8012926:	f815 2b01 	ldrb.w	r2, [r5], #1
 801292a:	851a      	strh	r2, [r3, #40]	; 0x28
 801292c:	e7e6      	b.n	80128fc <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801292e:	9600      	str	r6, [sp, #0]
 8012930:	463b      	mov	r3, r7
 8012932:	2200      	movs	r2, #0
 8012934:	2140      	movs	r1, #64	; 0x40
 8012936:	4620      	mov	r0, r4
 8012938:	f7ff ff73 	bl	8012822 <UART_WaitOnFlagUntilTimeout>
 801293c:	4603      	mov	r3, r0
 801293e:	b990      	cbnz	r0, 8012966 <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 8012940:	2220      	movs	r2, #32
 8012942:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8012944:	2200      	movs	r2, #0
 8012946:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 801294a:	e000      	b.n	801294e <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 801294c:	2302      	movs	r3, #2
}
 801294e:	4618      	mov	r0, r3
 8012950:	b002      	add	sp, #8
 8012952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8012956:	2301      	movs	r3, #1
 8012958:	e7f9      	b.n	801294e <HAL_UART_Transmit+0xcc>
 801295a:	2301      	movs	r3, #1
 801295c:	e7f7      	b.n	801294e <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 801295e:	2302      	movs	r3, #2
 8012960:	e7f5      	b.n	801294e <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 8012962:	2303      	movs	r3, #3
 8012964:	e7f3      	b.n	801294e <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 8012966:	2303      	movs	r3, #3
 8012968:	e7f1      	b.n	801294e <HAL_UART_Transmit+0xcc>

0801296a <HAL_UART_Receive>:
{
 801296a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801296e:	b083      	sub	sp, #12
 8012970:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8012972:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8012974:	2b20      	cmp	r3, #32
 8012976:	d178      	bne.n	8012a6a <HAL_UART_Receive+0x100>
 8012978:	4604      	mov	r4, r0
 801297a:	460d      	mov	r5, r1
 801297c:	4617      	mov	r7, r2
    if ((pData == NULL) || (Size == 0U))
 801297e:	2900      	cmp	r1, #0
 8012980:	d077      	beq.n	8012a72 <HAL_UART_Receive+0x108>
 8012982:	2a00      	cmp	r2, #0
 8012984:	d077      	beq.n	8012a76 <HAL_UART_Receive+0x10c>
    __HAL_LOCK(huart);
 8012986:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 801298a:	2b01      	cmp	r3, #1
 801298c:	d075      	beq.n	8012a7a <HAL_UART_Receive+0x110>
 801298e:	2301      	movs	r3, #1
 8012990:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012994:	2300      	movs	r3, #0
 8012996:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012998:	2322      	movs	r3, #34	; 0x22
 801299a:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 801299c:	f7f1 ff76 	bl	800488c <HAL_GetTick>
 80129a0:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 80129a2:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 80129a6:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80129aa:	68a3      	ldr	r3, [r4, #8]
 80129ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80129b0:	d006      	beq.n	80129c0 <HAL_UART_Receive+0x56>
 80129b2:	b9c3      	cbnz	r3, 80129e6 <HAL_UART_Receive+0x7c>
 80129b4:	6923      	ldr	r3, [r4, #16]
 80129b6:	b993      	cbnz	r3, 80129de <HAL_UART_Receive+0x74>
 80129b8:	23ff      	movs	r3, #255	; 0xff
 80129ba:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80129be:	e018      	b.n	80129f2 <HAL_UART_Receive+0x88>
 80129c0:	6923      	ldr	r3, [r4, #16]
 80129c2:	b933      	cbnz	r3, 80129d2 <HAL_UART_Receive+0x68>
 80129c4:	f240 17ff 	movw	r7, #511	; 0x1ff
 80129c8:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = (uint16_t *) pData;
 80129cc:	46ab      	mov	fp, r5
      pdata8bits  = NULL;
 80129ce:	2500      	movs	r5, #0
 80129d0:	e013      	b.n	80129fa <HAL_UART_Receive+0x90>
    UART_MASK_COMPUTATION(huart);
 80129d2:	27ff      	movs	r7, #255	; 0xff
 80129d4:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = NULL;
 80129d8:	f04f 0b00 	mov.w	fp, #0
 80129dc:	e00d      	b.n	80129fa <HAL_UART_Receive+0x90>
    UART_MASK_COMPUTATION(huart);
 80129de:	237f      	movs	r3, #127	; 0x7f
 80129e0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80129e4:	e005      	b.n	80129f2 <HAL_UART_Receive+0x88>
 80129e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80129ea:	d00f      	beq.n	8012a0c <HAL_UART_Receive+0xa2>
 80129ec:	2300      	movs	r3, #0
 80129ee:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80129f2:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = NULL;
 80129f6:	f04f 0b00 	mov.w	fp, #0
    while (huart->RxXferCount > 0U)
 80129fa:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	b36b      	cbz	r3, 8012a5e <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012a02:	f04f 0a00 	mov.w	sl, #0
 8012a06:	f04f 0920 	mov.w	r9, #32
 8012a0a:	e018      	b.n	8012a3e <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 8012a0c:	6923      	ldr	r3, [r4, #16]
 8012a0e:	b91b      	cbnz	r3, 8012a18 <HAL_UART_Receive+0xae>
 8012a10:	237f      	movs	r3, #127	; 0x7f
 8012a12:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8012a16:	e7ec      	b.n	80129f2 <HAL_UART_Receive+0x88>
 8012a18:	233f      	movs	r3, #63	; 0x3f
 8012a1a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8012a1e:	e7e8      	b.n	80129f2 <HAL_UART_Receive+0x88>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012a24:	403b      	ands	r3, r7
 8012a26:	f82b 3b02 	strh.w	r3, [fp], #2
      huart->RxXferCount--;
 8012a2a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8012a36:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	b17b      	cbz	r3, 8012a5e <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012a3e:	9600      	str	r6, [sp, #0]
 8012a40:	4643      	mov	r3, r8
 8012a42:	4652      	mov	r2, sl
 8012a44:	4649      	mov	r1, r9
 8012a46:	4620      	mov	r0, r4
 8012a48:	f7ff feeb 	bl	8012822 <UART_WaitOnFlagUntilTimeout>
 8012a4c:	b9b8      	cbnz	r0, 8012a7e <HAL_UART_Receive+0x114>
      if (pdata8bits == NULL)
 8012a4e:	2d00      	cmp	r5, #0
 8012a50:	d0e6      	beq.n	8012a20 <HAL_UART_Receive+0xb6>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012a52:	6823      	ldr	r3, [r4, #0]
 8012a54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012a56:	403b      	ands	r3, r7
 8012a58:	f805 3b01 	strb.w	r3, [r5], #1
 8012a5c:	e7e5      	b.n	8012a2a <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 8012a5e:	2320      	movs	r3, #32
 8012a60:	67a3      	str	r3, [r4, #120]	; 0x78
    __HAL_UNLOCK(huart);
 8012a62:	2000      	movs	r0, #0
 8012a64:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8012a68:	e000      	b.n	8012a6c <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8012a6a:	2002      	movs	r0, #2
}
 8012a6c:	b003      	add	sp, #12
 8012a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8012a72:	2001      	movs	r0, #1
 8012a74:	e7fa      	b.n	8012a6c <HAL_UART_Receive+0x102>
 8012a76:	2001      	movs	r0, #1
 8012a78:	e7f8      	b.n	8012a6c <HAL_UART_Receive+0x102>
    __HAL_LOCK(huart);
 8012a7a:	2002      	movs	r0, #2
 8012a7c:	e7f6      	b.n	8012a6c <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 8012a7e:	2003      	movs	r0, #3
 8012a80:	e7f4      	b.n	8012a6c <HAL_UART_Receive+0x102>

08012a82 <UART_CheckIdleState>:
{
 8012a82:	b530      	push	{r4, r5, lr}
 8012a84:	b083      	sub	sp, #12
 8012a86:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8012a8c:	f7f1 fefe 	bl	800488c <HAL_GetTick>
 8012a90:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012a92:	6823      	ldr	r3, [r4, #0]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	f013 0f08 	tst.w	r3, #8
 8012a9a:	d10c      	bne.n	8012ab6 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012a9c:	6823      	ldr	r3, [r4, #0]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	f013 0f04 	tst.w	r3, #4
 8012aa4:	d115      	bne.n	8012ad2 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8012aa6:	2320      	movs	r3, #32
 8012aa8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8012aaa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8012aac:	2000      	movs	r0, #0
 8012aae:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8012ab2:	b003      	add	sp, #12
 8012ab4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012ab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012aba:	9300      	str	r3, [sp, #0]
 8012abc:	4603      	mov	r3, r0
 8012abe:	2200      	movs	r2, #0
 8012ac0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f7ff feac 	bl	8012822 <UART_WaitOnFlagUntilTimeout>
 8012aca:	2800      	cmp	r0, #0
 8012acc:	d0e6      	beq.n	8012a9c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8012ace:	2003      	movs	r0, #3
 8012ad0:	e7ef      	b.n	8012ab2 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012ad2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012ad6:	9300      	str	r3, [sp, #0]
 8012ad8:	462b      	mov	r3, r5
 8012ada:	2200      	movs	r2, #0
 8012adc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	f7ff fe9e 	bl	8012822 <UART_WaitOnFlagUntilTimeout>
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	d0dd      	beq.n	8012aa6 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8012aea:	2003      	movs	r0, #3
 8012aec:	e7e1      	b.n	8012ab2 <UART_CheckIdleState+0x30>

08012aee <HAL_UART_Init>:
  if (huart == NULL)
 8012aee:	b368      	cbz	r0, 8012b4c <HAL_UART_Init+0x5e>
{
 8012af0:	b510      	push	{r4, lr}
 8012af2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8012af4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8012af6:	b303      	cbz	r3, 8012b3a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8012af8:	2324      	movs	r3, #36	; 0x24
 8012afa:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8012afc:	6822      	ldr	r2, [r4, #0]
 8012afe:	6813      	ldr	r3, [r2, #0]
 8012b00:	f023 0301 	bic.w	r3, r3, #1
 8012b04:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012b06:	4620      	mov	r0, r4
 8012b08:	f7ff fc02 	bl	8012310 <UART_SetConfig>
 8012b0c:	2801      	cmp	r0, #1
 8012b0e:	d013      	beq.n	8012b38 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b12:	b9bb      	cbnz	r3, 8012b44 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012b14:	6822      	ldr	r2, [r4, #0]
 8012b16:	6853      	ldr	r3, [r2, #4]
 8012b18:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8012b1c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012b1e:	6822      	ldr	r2, [r4, #0]
 8012b20:	6893      	ldr	r3, [r2, #8]
 8012b22:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8012b26:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012b28:	6822      	ldr	r2, [r4, #0]
 8012b2a:	6813      	ldr	r3, [r2, #0]
 8012b2c:	f043 0301 	orr.w	r3, r3, #1
 8012b30:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012b32:	4620      	mov	r0, r4
 8012b34:	f7ff ffa5 	bl	8012a82 <UART_CheckIdleState>
}
 8012b38:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012b3a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8012b3e:	f7f1 fc6b 	bl	8004418 <HAL_UART_MspInit>
 8012b42:	e7d9      	b.n	8012af8 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8012b44:	4620      	mov	r0, r4
 8012b46:	f7ff fe07 	bl	8012758 <UART_AdvFeatureConfig>
 8012b4a:	e7e3      	b.n	8012b14 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8012b4c:	2001      	movs	r0, #1
}
 8012b4e:	4770      	bx	lr

08012b50 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8012b50:	2800      	cmp	r0, #0
 8012b52:	d032      	beq.n	8012bba <HAL_HalfDuplex_Init+0x6a>
{
 8012b54:	b510      	push	{r4, lr}
 8012b56:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8012b58:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8012b5a:	b32b      	cbz	r3, 8012ba8 <HAL_HalfDuplex_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 8012b5c:	2324      	movs	r3, #36	; 0x24
 8012b5e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8012b60:	6822      	ldr	r2, [r4, #0]
 8012b62:	6813      	ldr	r3, [r2, #0]
 8012b64:	f023 0301 	bic.w	r3, r3, #1
 8012b68:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f7ff fbd0 	bl	8012310 <UART_SetConfig>
 8012b70:	2801      	cmp	r0, #1
 8012b72:	d018      	beq.n	8012ba6 <HAL_HalfDuplex_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b76:	b9e3      	cbnz	r3, 8012bb2 <HAL_HalfDuplex_Init+0x62>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012b78:	6822      	ldr	r2, [r4, #0]
 8012b7a:	6853      	ldr	r3, [r2, #4]
 8012b7c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8012b80:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8012b82:	6822      	ldr	r2, [r4, #0]
 8012b84:	6893      	ldr	r3, [r2, #8]
 8012b86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8012b8a:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8012b8c:	6822      	ldr	r2, [r4, #0]
 8012b8e:	6893      	ldr	r3, [r2, #8]
 8012b90:	f043 0308 	orr.w	r3, r3, #8
 8012b94:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012b96:	6822      	ldr	r2, [r4, #0]
 8012b98:	6813      	ldr	r3, [r2, #0]
 8012b9a:	f043 0301 	orr.w	r3, r3, #1
 8012b9e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f7ff ff6e 	bl	8012a82 <UART_CheckIdleState>
}
 8012ba6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012ba8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8012bac:	f7f1 fc34 	bl	8004418 <HAL_UART_MspInit>
 8012bb0:	e7d4      	b.n	8012b5c <HAL_HalfDuplex_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	f7ff fdd0 	bl	8012758 <UART_AdvFeatureConfig>
 8012bb8:	e7de      	b.n	8012b78 <HAL_HalfDuplex_Init+0x28>
    return HAL_ERROR;
 8012bba:	2001      	movs	r0, #1
}
 8012bbc:	4770      	bx	lr

08012bbe <HAL_LIN_Init>:
  if (huart == NULL)
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d040      	beq.n	8012c44 <HAL_LIN_Init+0x86>
{
 8012bc2:	b538      	push	{r3, r4, r5, lr}
 8012bc4:	4604      	mov	r4, r0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012bc6:	69c3      	ldr	r3, [r0, #28]
 8012bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012bcc:	d03c      	beq.n	8012c48 <HAL_LIN_Init+0x8a>
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 8012bce:	6883      	ldr	r3, [r0, #8]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d13b      	bne.n	8012c4c <HAL_LIN_Init+0x8e>
 8012bd4:	460d      	mov	r5, r1
  if (huart->gState == HAL_UART_STATE_RESET)
 8012bd6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8012bd8:	b35b      	cbz	r3, 8012c32 <HAL_LIN_Init+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 8012bda:	2324      	movs	r3, #36	; 0x24
 8012bdc:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8012bde:	6822      	ldr	r2, [r4, #0]
 8012be0:	6813      	ldr	r3, [r2, #0]
 8012be2:	f023 0301 	bic.w	r3, r3, #1
 8012be6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012be8:	4620      	mov	r0, r4
 8012bea:	f7ff fb91 	bl	8012310 <UART_SetConfig>
 8012bee:	2801      	cmp	r0, #1
 8012bf0:	d02d      	beq.n	8012c4e <HAL_LIN_Init+0x90>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bf4:	bb13      	cbnz	r3, 8012c3c <HAL_LIN_Init+0x7e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8012bf6:	6822      	ldr	r2, [r4, #0]
 8012bf8:	6853      	ldr	r3, [r2, #4]
 8012bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012bfe:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8012c00:	6822      	ldr	r2, [r4, #0]
 8012c02:	6893      	ldr	r3, [r2, #8]
 8012c04:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8012c08:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8012c0a:	6822      	ldr	r2, [r4, #0]
 8012c0c:	6853      	ldr	r3, [r2, #4]
 8012c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012c12:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	6859      	ldr	r1, [r3, #4]
 8012c18:	f021 0120 	bic.w	r1, r1, #32
 8012c1c:	4329      	orrs	r1, r5
 8012c1e:	6059      	str	r1, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8012c20:	6822      	ldr	r2, [r4, #0]
 8012c22:	6813      	ldr	r3, [r2, #0]
 8012c24:	f043 0301 	orr.w	r3, r3, #1
 8012c28:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	f7ff ff29 	bl	8012a82 <UART_CheckIdleState>
 8012c30:	e00d      	b.n	8012c4e <HAL_LIN_Init+0x90>
    huart->Lock = HAL_UNLOCKED;
 8012c32:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8012c36:	f7f1 fbef 	bl	8004418 <HAL_UART_MspInit>
 8012c3a:	e7ce      	b.n	8012bda <HAL_LIN_Init+0x1c>
    UART_AdvFeatureConfig(huart);
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f7ff fd8b 	bl	8012758 <UART_AdvFeatureConfig>
 8012c42:	e7d8      	b.n	8012bf6 <HAL_LIN_Init+0x38>
    return HAL_ERROR;
 8012c44:	2001      	movs	r0, #1
}
 8012c46:	4770      	bx	lr
    return HAL_ERROR;
 8012c48:	2001      	movs	r0, #1
 8012c4a:	e000      	b.n	8012c4e <HAL_LIN_Init+0x90>
    return HAL_ERROR;
 8012c4c:	2001      	movs	r0, #1
}
 8012c4e:	bd38      	pop	{r3, r4, r5, pc}

08012c50 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8012c50:	2800      	cmp	r0, #0
 8012c52:	d040      	beq.n	8012cd6 <HAL_MultiProcessor_Init+0x86>
{
 8012c54:	b570      	push	{r4, r5, r6, lr}
 8012c56:	4604      	mov	r4, r0
 8012c58:	4615      	mov	r5, r2
 8012c5a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_RESET)
 8012c5c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8012c5e:	b34b      	cbz	r3, 8012cb4 <HAL_MultiProcessor_Init+0x64>
  huart->gState = HAL_UART_STATE_BUSY;
 8012c60:	2324      	movs	r3, #36	; 0x24
 8012c62:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8012c64:	6822      	ldr	r2, [r4, #0]
 8012c66:	6813      	ldr	r3, [r2, #0]
 8012c68:	f023 0301 	bic.w	r3, r3, #1
 8012c6c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f7ff fb4e 	bl	8012310 <UART_SetConfig>
 8012c74:	2801      	cmp	r0, #1
 8012c76:	d01c      	beq.n	8012cb2 <HAL_MultiProcessor_Init+0x62>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c7a:	bb03      	cbnz	r3, 8012cbe <HAL_MultiProcessor_Init+0x6e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012c7c:	6822      	ldr	r2, [r4, #0]
 8012c7e:	6853      	ldr	r3, [r2, #4]
 8012c80:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8012c84:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012c86:	6822      	ldr	r2, [r4, #0]
 8012c88:	6893      	ldr	r3, [r2, #8]
 8012c8a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8012c8e:	6093      	str	r3, [r2, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8012c90:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8012c94:	d017      	beq.n	8012cc6 <HAL_MultiProcessor_Init+0x76>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8012c96:	6823      	ldr	r3, [r4, #0]
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012c9e:	4315      	orrs	r5, r2
 8012ca0:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8012ca2:	6822      	ldr	r2, [r4, #0]
 8012ca4:	6813      	ldr	r3, [r2, #0]
 8012ca6:	f043 0301 	orr.w	r3, r3, #1
 8012caa:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012cac:	4620      	mov	r0, r4
 8012cae:	f7ff fee8 	bl	8012a82 <UART_CheckIdleState>
}
 8012cb2:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8012cb4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8012cb8:	f7f1 fbae 	bl	8004418 <HAL_UART_MspInit>
 8012cbc:	e7d0      	b.n	8012c60 <HAL_MultiProcessor_Init+0x10>
    UART_AdvFeatureConfig(huart);
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f7ff fd4a 	bl	8012758 <UART_AdvFeatureConfig>
 8012cc4:	e7da      	b.n	8012c7c <HAL_MultiProcessor_Init+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8012cc6:	6823      	ldr	r3, [r4, #0]
 8012cc8:	6859      	ldr	r1, [r3, #4]
 8012cca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8012cce:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 8012cd2:	605e      	str	r6, [r3, #4]
 8012cd4:	e7df      	b.n	8012c96 <HAL_MultiProcessor_Init+0x46>
    return HAL_ERROR;
 8012cd6:	2001      	movs	r0, #1
}
 8012cd8:	4770      	bx	lr

08012cda <HAL_MultiProcessor_EnableMuteMode>:
{
 8012cda:	b508      	push	{r3, lr}
  __HAL_LOCK(huart);
 8012cdc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	d00e      	beq.n	8012d02 <HAL_MultiProcessor_EnableMuteMode+0x28>
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 8012cea:	2324      	movs	r3, #36	; 0x24
 8012cec:	6743      	str	r3, [r0, #116]	; 0x74
  SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 8012cee:	6802      	ldr	r2, [r0, #0]
 8012cf0:	6813      	ldr	r3, [r2, #0]
 8012cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012cf6:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8012cf8:	2320      	movs	r3, #32
 8012cfa:	6743      	str	r3, [r0, #116]	; 0x74
  return (UART_CheckIdleState(huart));
 8012cfc:	f7ff fec1 	bl	8012a82 <UART_CheckIdleState>
}
 8012d00:	bd08      	pop	{r3, pc}
  __HAL_LOCK(huart);
 8012d02:	2002      	movs	r0, #2
 8012d04:	e7fc      	b.n	8012d00 <HAL_MultiProcessor_EnableMuteMode+0x26>

08012d06 <HAL_MultiProcessor_DisableMuteMode>:
{
 8012d06:	b508      	push	{r3, lr}
  __HAL_LOCK(huart);
 8012d08:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d00e      	beq.n	8012d2e <HAL_MultiProcessor_DisableMuteMode+0x28>
 8012d10:	2301      	movs	r3, #1
 8012d12:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 8012d16:	2324      	movs	r3, #36	; 0x24
 8012d18:	6743      	str	r3, [r0, #116]	; 0x74
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 8012d1a:	6802      	ldr	r2, [r0, #0]
 8012d1c:	6813      	ldr	r3, [r2, #0]
 8012d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012d22:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8012d24:	2320      	movs	r3, #32
 8012d26:	6743      	str	r3, [r0, #116]	; 0x74
  return (UART_CheckIdleState(huart));
 8012d28:	f7ff feab 	bl	8012a82 <UART_CheckIdleState>
}
 8012d2c:	bd08      	pop	{r3, pc}
  __HAL_LOCK(huart);
 8012d2e:	2002      	movs	r0, #2
 8012d30:	e7fc      	b.n	8012d2c <HAL_MultiProcessor_DisableMuteMode+0x26>

08012d32 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8012d32:	2800      	cmp	r0, #0
 8012d34:	d03c      	beq.n	8012db0 <HAL_RS485Ex_Init+0x7e>
{
 8012d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d38:	4604      	mov	r4, r0
 8012d3a:	461d      	mov	r5, r3
 8012d3c:	4616      	mov	r6, r2
 8012d3e:	460f      	mov	r7, r1
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012d40:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8012d42:	b363      	cbz	r3, 8012d9e <HAL_RS485Ex_Init+0x6c>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012d44:	2324      	movs	r3, #36	; 0x24
 8012d46:	6763      	str	r3, [r4, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012d48:	6822      	ldr	r2, [r4, #0]
 8012d4a:	6813      	ldr	r3, [r2, #0]
 8012d4c:	f023 0301 	bic.w	r3, r3, #1
 8012d50:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012d52:	4620      	mov	r0, r4
 8012d54:	f7ff fadc 	bl	8012310 <UART_SetConfig>
 8012d58:	2801      	cmp	r0, #1
 8012d5a:	d01f      	beq.n	8012d9c <HAL_RS485Ex_Init+0x6a>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d5e:	bb1b      	cbnz	r3, 8012da8 <HAL_RS485Ex_Init+0x76>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012d60:	6822      	ldr	r2, [r4, #0]
 8012d62:	6893      	ldr	r3, [r2, #8]
 8012d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012d68:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8012d6a:	6822      	ldr	r2, [r4, #0]
 8012d6c:	6893      	ldr	r3, [r2, #8]
 8012d6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012d72:	433b      	orrs	r3, r7
 8012d74:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012d76:	6821      	ldr	r1, [r4, #0]
 8012d78:	680b      	ldr	r3, [r1, #0]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8012d7a:	042d      	lsls	r5, r5, #16
 8012d7c:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012d80:	f023 757f 	bic.w	r5, r3, #66846720	; 0x3fc0000
 8012d84:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
 8012d88:	4315      	orrs	r5, r2
 8012d8a:	600d      	str	r5, [r1, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8012d8c:	6822      	ldr	r2, [r4, #0]
 8012d8e:	6813      	ldr	r3, [r2, #0]
 8012d90:	f043 0301 	orr.w	r3, r3, #1
 8012d94:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012d96:	4620      	mov	r0, r4
 8012d98:	f7ff fe73 	bl	8012a82 <UART_CheckIdleState>
}
 8012d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8012d9e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8012da2:	f7f1 fb39 	bl	8004418 <HAL_UART_MspInit>
 8012da6:	e7cd      	b.n	8012d44 <HAL_RS485Ex_Init+0x12>
    UART_AdvFeatureConfig(huart);
 8012da8:	4620      	mov	r0, r4
 8012daa:	f7ff fcd5 	bl	8012758 <UART_AdvFeatureConfig>
 8012dae:	e7d7      	b.n	8012d60 <HAL_RS485Ex_Init+0x2e>
    return HAL_ERROR;
 8012db0:	2001      	movs	r0, #1
}
 8012db2:	4770      	bx	lr

08012db4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012db4:	4770      	bx	lr

08012db6 <HAL_UARTEx_EnableClockStopMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)
{
  /* Process Locked */
  __HAL_LOCK(huart);
 8012db6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	d00c      	beq.n	8012dd8 <HAL_UARTEx_EnableClockStopMode+0x22>
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  /* Set UCESM bit */
  SET_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 8012dc4:	6802      	ldr	r2, [r0, #0]
 8012dc6:	6893      	ldr	r3, [r2, #8]
 8012dc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012dcc:	6093      	str	r3, [r2, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012dce:	2300      	movs	r3, #0
 8012dd0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  return HAL_OK;
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8012dd8:	2002      	movs	r0, #2
}
 8012dda:	4770      	bx	lr

08012ddc <HAL_UARTEx_DisableClockStopMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)
{
  /* Process Locked */
  __HAL_LOCK(huart);
 8012ddc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	d00c      	beq.n	8012dfe <HAL_UARTEx_DisableClockStopMode+0x22>
 8012de4:	2301      	movs	r3, #1
 8012de6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  /* Clear UCESM bit */
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 8012dea:	6802      	ldr	r2, [r0, #0]
 8012dec:	6893      	ldr	r3, [r2, #8]
 8012dee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012df2:	6093      	str	r3, [r2, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012df4:	2300      	movs	r3, #0
 8012df6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  return HAL_OK;
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	4770      	bx	lr
  __HAL_LOCK(huart);
 8012dfe:	2002      	movs	r0, #2
}
 8012e00:	4770      	bx	lr

08012e02 <HAL_MultiProcessorEx_AddressLength_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012e02:	b1a8      	cbz	r0, 8012e30 <HAL_MultiProcessorEx_AddressLength_Set+0x2e>
{
 8012e04:	b508      	push	{r3, lr}
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 8012e06:	2324      	movs	r3, #36	; 0x24
 8012e08:	6743      	str	r3, [r0, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012e0a:	6802      	ldr	r2, [r0, #0]
 8012e0c:	6813      	ldr	r3, [r2, #0]
 8012e0e:	f023 0301 	bic.w	r3, r3, #1
 8012e12:	6013      	str	r3, [r2, #0]

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 8012e14:	6802      	ldr	r2, [r0, #0]
 8012e16:	6853      	ldr	r3, [r2, #4]
 8012e18:	f023 0310 	bic.w	r3, r3, #16
 8012e1c:	4319      	orrs	r1, r3
 8012e1e:	6051      	str	r1, [r2, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8012e20:	6802      	ldr	r2, [r0, #0]
 8012e22:	6813      	ldr	r3, [r2, #0]
 8012e24:	f043 0301 	orr.w	r3, r3, #1
 8012e28:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 8012e2a:	f7ff fe2a 	bl	8012a82 <UART_CheckIdleState>
}
 8012e2e:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8012e30:	2001      	movs	r0, #1
}
 8012e32:	4770      	bx	lr

08012e34 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8012e34:	b510      	push	{r4, lr}
 8012e36:	b084      	sub	sp, #16
 8012e38:	ab04      	add	r3, sp, #16
 8012e3a:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e3e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8012e42:	2b01      	cmp	r3, #1
 8012e44:	d041      	beq.n	8012eca <HAL_UARTEx_StopModeWakeUpSourceConfig+0x96>
 8012e46:	9a02      	ldr	r2, [sp, #8]
 8012e48:	2301      	movs	r3, #1
 8012e4a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 8012e4e:	2324      	movs	r3, #36	; 0x24
 8012e50:	6743      	str	r3, [r0, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012e52:	6801      	ldr	r1, [r0, #0]
 8012e54:	680b      	ldr	r3, [r1, #0]
 8012e56:	f023 0301 	bic.w	r3, r3, #1
 8012e5a:	600b      	str	r3, [r1, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8012e5c:	6801      	ldr	r1, [r0, #0]
 8012e5e:	688b      	ldr	r3, [r1, #8]
 8012e60:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012e64:	4313      	orrs	r3, r2
 8012e66:	608b      	str	r3, [r1, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8012e68:	b1b2      	cbz	r2, 8012e98 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x64>
 8012e6a:	4604      	mov	r4, r0
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8012e6c:	6802      	ldr	r2, [r0, #0]
 8012e6e:	6813      	ldr	r3, [r2, #0]
 8012e70:	f043 0301 	orr.w	r3, r3, #1
 8012e74:	6013      	str	r3, [r2, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8012e76:	f7f1 fd09 	bl	800488c <HAL_GetTick>

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012e7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012e7e:	9300      	str	r3, [sp, #0]
 8012e80:	4603      	mov	r3, r0
 8012e82:	2200      	movs	r2, #0
 8012e84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f7ff fcca 	bl	8012822 <UART_WaitOnFlagUntilTimeout>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	b9a0      	cbnz	r0, 8012ebc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>
    status = HAL_TIMEOUT;
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8012e92:	2220      	movs	r2, #32
 8012e94:	6762      	str	r2, [r4, #116]	; 0x74
 8012e96:	e012      	b.n	8012ebe <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8a>
 8012e98:	f89d 400e 	ldrb.w	r4, [sp, #14]
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8012e9c:	6801      	ldr	r1, [r0, #0]
 8012e9e:	684a      	ldr	r2, [r1, #4]
 8012ea0:	f022 0210 	bic.w	r2, r2, #16
 8012ea4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012ea8:	431a      	orrs	r2, r3
 8012eaa:	604a      	str	r2, [r1, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8012eac:	6802      	ldr	r2, [r0, #0]
 8012eae:	6853      	ldr	r3, [r2, #4]
 8012eb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012eb4:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8012eb8:	6053      	str	r3, [r2, #4]
 8012eba:	e7d6      	b.n	8012e6a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x36>
    status = HAL_TIMEOUT;
 8012ebc:	2303      	movs	r3, #3
  __HAL_UNLOCK(huart);
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	b004      	add	sp, #16
 8012ec8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8012eca:	2302      	movs	r3, #2
 8012ecc:	e7fa      	b.n	8012ec4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x90>

08012ece <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8012ece:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8012ed2:	2b01      	cmp	r3, #1
 8012ed4:	d00c      	beq.n	8012ef0 <HAL_UARTEx_EnableStopMode+0x22>
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012edc:	6802      	ldr	r2, [r0, #0]
 8012ede:	6813      	ldr	r3, [r2, #0]
 8012ee0:	f043 0302 	orr.w	r3, r3, #2
 8012ee4:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 8012eec:	4618      	mov	r0, r3
 8012eee:	4770      	bx	lr
  __HAL_LOCK(huart);
 8012ef0:	2002      	movs	r0, #2
}
 8012ef2:	4770      	bx	lr

08012ef4 <HAL_UARTEx_DisableStopMode>:
  __HAL_LOCK(huart);
 8012ef4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8012ef8:	2b01      	cmp	r3, #1
 8012efa:	d00c      	beq.n	8012f16 <HAL_UARTEx_DisableStopMode+0x22>
 8012efc:	2301      	movs	r3, #1
 8012efe:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012f02:	6802      	ldr	r2, [r0, #0]
 8012f04:	6813      	ldr	r3, [r2, #0]
 8012f06:	f023 0302 	bic.w	r3, r3, #2
 8012f0a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  return HAL_OK;
 8012f12:	4618      	mov	r0, r3
 8012f14:	4770      	bx	lr
  __HAL_LOCK(huart);
 8012f16:	2002      	movs	r0, #2
}
 8012f18:	4770      	bx	lr
	...

08012f1c <__errno>:
 8012f1c:	4b01      	ldr	r3, [pc, #4]	; (8012f24 <__errno+0x8>)
 8012f1e:	6818      	ldr	r0, [r3, #0]
 8012f20:	4770      	bx	lr
 8012f22:	bf00      	nop
 8012f24:	20000034 	.word	0x20000034

08012f28 <exit>:
 8012f28:	b508      	push	{r3, lr}
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	f000 f85b 	bl	8012fe8 <__call_exitprocs>
 8012f32:	4b04      	ldr	r3, [pc, #16]	; (8012f44 <exit+0x1c>)
 8012f34:	6818      	ldr	r0, [r3, #0]
 8012f36:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8012f38:	b103      	cbz	r3, 8012f3c <exit+0x14>
 8012f3a:	4798      	blx	r3
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f7f1 fb0c 	bl	800455a <_exit>
 8012f42:	bf00      	nop
 8012f44:	080144e8 	.word	0x080144e8

08012f48 <__libc_init_array>:
 8012f48:	b570      	push	{r4, r5, r6, lr}
 8012f4a:	4e0d      	ldr	r6, [pc, #52]	; (8012f80 <__libc_init_array+0x38>)
 8012f4c:	4c0d      	ldr	r4, [pc, #52]	; (8012f84 <__libc_init_array+0x3c>)
 8012f4e:	1ba4      	subs	r4, r4, r6
 8012f50:	10a4      	asrs	r4, r4, #2
 8012f52:	2500      	movs	r5, #0
 8012f54:	42a5      	cmp	r5, r4
 8012f56:	d109      	bne.n	8012f6c <__libc_init_array+0x24>
 8012f58:	4e0b      	ldr	r6, [pc, #44]	; (8012f88 <__libc_init_array+0x40>)
 8012f5a:	4c0c      	ldr	r4, [pc, #48]	; (8012f8c <__libc_init_array+0x44>)
 8012f5c:	f000 f92a 	bl	80131b4 <_init>
 8012f60:	1ba4      	subs	r4, r4, r6
 8012f62:	10a4      	asrs	r4, r4, #2
 8012f64:	2500      	movs	r5, #0
 8012f66:	42a5      	cmp	r5, r4
 8012f68:	d105      	bne.n	8012f76 <__libc_init_array+0x2e>
 8012f6a:	bd70      	pop	{r4, r5, r6, pc}
 8012f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012f70:	4798      	blx	r3
 8012f72:	3501      	adds	r5, #1
 8012f74:	e7ee      	b.n	8012f54 <__libc_init_array+0xc>
 8012f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012f7a:	4798      	blx	r3
 8012f7c:	3501      	adds	r5, #1
 8012f7e:	e7f2      	b.n	8012f66 <__libc_init_array+0x1e>
 8012f80:	080144f4 	.word	0x080144f4
 8012f84:	080144f4 	.word	0x080144f4
 8012f88:	080144f4 	.word	0x080144f4
 8012f8c:	080144fc 	.word	0x080144fc

08012f90 <memcmp>:
 8012f90:	b530      	push	{r4, r5, lr}
 8012f92:	2400      	movs	r4, #0
 8012f94:	42a2      	cmp	r2, r4
 8012f96:	d101      	bne.n	8012f9c <memcmp+0xc>
 8012f98:	2000      	movs	r0, #0
 8012f9a:	e007      	b.n	8012fac <memcmp+0x1c>
 8012f9c:	5d03      	ldrb	r3, [r0, r4]
 8012f9e:	3401      	adds	r4, #1
 8012fa0:	190d      	adds	r5, r1, r4
 8012fa2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8012fa6:	42ab      	cmp	r3, r5
 8012fa8:	d0f4      	beq.n	8012f94 <memcmp+0x4>
 8012faa:	1b58      	subs	r0, r3, r5
 8012fac:	bd30      	pop	{r4, r5, pc}

08012fae <memcpy>:
 8012fae:	b510      	push	{r4, lr}
 8012fb0:	1e43      	subs	r3, r0, #1
 8012fb2:	440a      	add	r2, r1
 8012fb4:	4291      	cmp	r1, r2
 8012fb6:	d100      	bne.n	8012fba <memcpy+0xc>
 8012fb8:	bd10      	pop	{r4, pc}
 8012fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fc2:	e7f7      	b.n	8012fb4 <memcpy+0x6>

08012fc4 <memset>:
 8012fc4:	4402      	add	r2, r0
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	d100      	bne.n	8012fce <memset+0xa>
 8012fcc:	4770      	bx	lr
 8012fce:	f803 1b01 	strb.w	r1, [r3], #1
 8012fd2:	e7f9      	b.n	8012fc8 <memset+0x4>

08012fd4 <register_fini>:
 8012fd4:	4b02      	ldr	r3, [pc, #8]	; (8012fe0 <register_fini+0xc>)
 8012fd6:	b113      	cbz	r3, 8012fde <register_fini+0xa>
 8012fd8:	4802      	ldr	r0, [pc, #8]	; (8012fe4 <register_fini+0x10>)
 8012fda:	f000 b86d 	b.w	80130b8 <atexit>
 8012fde:	4770      	bx	lr
 8012fe0:	00000000 	.word	0x00000000
 8012fe4:	080130c5 	.word	0x080130c5

08012fe8 <__call_exitprocs>:
 8012fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fec:	4c2f      	ldr	r4, [pc, #188]	; (80130ac <__call_exitprocs+0xc4>)
 8012fee:	9001      	str	r0, [sp, #4]
 8012ff0:	6820      	ldr	r0, [r4, #0]
 8012ff2:	460e      	mov	r6, r1
 8012ff4:	f000 f87f 	bl	80130f6 <__retarget_lock_acquire_recursive>
 8012ff8:	4b2d      	ldr	r3, [pc, #180]	; (80130b0 <__call_exitprocs+0xc8>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	9300      	str	r3, [sp, #0]
 8012ffe:	46a0      	mov	r8, r4
 8013000:	f503 79a4 	add.w	r9, r3, #328	; 0x148
 8013004:	9b00      	ldr	r3, [sp, #0]
 8013006:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801300a:	464d      	mov	r5, r9
 801300c:	f04f 0a01 	mov.w	sl, #1
 8013010:	b134      	cbz	r4, 8013020 <__call_exitprocs+0x38>
 8013012:	6863      	ldr	r3, [r4, #4]
 8013014:	1e5f      	subs	r7, r3, #1
 8013016:	2f00      	cmp	r7, #0
 8013018:	da09      	bge.n	801302e <__call_exitprocs+0x46>
 801301a:	4b26      	ldr	r3, [pc, #152]	; (80130b4 <__call_exitprocs+0xcc>)
 801301c:	2b00      	cmp	r3, #0
 801301e:	d138      	bne.n	8013092 <__call_exitprocs+0xaa>
 8013020:	f8d8 0000 	ldr.w	r0, [r8]
 8013024:	b003      	add	sp, #12
 8013026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302a:	f000 b86a 	b.w	8013102 <__retarget_lock_release_recursive>
 801302e:	00b9      	lsls	r1, r7, #2
 8013030:	b136      	cbz	r6, 8013040 <__call_exitprocs+0x58>
 8013032:	1862      	adds	r2, r4, r1
 8013034:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
 8013038:	42b2      	cmp	r2, r6
 801303a:	d001      	beq.n	8013040 <__call_exitprocs+0x58>
 801303c:	3f01      	subs	r7, #1
 801303e:	e7ea      	b.n	8013016 <__call_exitprocs+0x2e>
 8013040:	6860      	ldr	r0, [r4, #4]
 8013042:	4421      	add	r1, r4
 8013044:	3801      	subs	r0, #1
 8013046:	42b8      	cmp	r0, r7
 8013048:	688a      	ldr	r2, [r1, #8]
 801304a:	bf0e      	itee	eq
 801304c:	6067      	streq	r7, [r4, #4]
 801304e:	2300      	movne	r3, #0
 8013050:	608b      	strne	r3, [r1, #8]
 8013052:	2a00      	cmp	r2, #0
 8013054:	d0f2      	beq.n	801303c <__call_exitprocs+0x54>
 8013056:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
 801305a:	f8d4 b004 	ldr.w	fp, [r4, #4]
 801305e:	fa0a fc07 	lsl.w	ip, sl, r7
 8013062:	ea1c 0f00 	tst.w	ip, r0
 8013066:	d107      	bne.n	8013078 <__call_exitprocs+0x90>
 8013068:	4790      	blx	r2
 801306a:	6862      	ldr	r2, [r4, #4]
 801306c:	455a      	cmp	r2, fp
 801306e:	d1c9      	bne.n	8013004 <__call_exitprocs+0x1c>
 8013070:	682a      	ldr	r2, [r5, #0]
 8013072:	42a2      	cmp	r2, r4
 8013074:	d0e2      	beq.n	801303c <__call_exitprocs+0x54>
 8013076:	e7c5      	b.n	8013004 <__call_exitprocs+0x1c>
 8013078:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 801307c:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 8013080:	ea1c 0f03 	tst.w	ip, r3
 8013084:	d102      	bne.n	801308c <__call_exitprocs+0xa4>
 8013086:	9801      	ldr	r0, [sp, #4]
 8013088:	4790      	blx	r2
 801308a:	e7ee      	b.n	801306a <__call_exitprocs+0x82>
 801308c:	4608      	mov	r0, r1
 801308e:	4790      	blx	r2
 8013090:	e7eb      	b.n	801306a <__call_exitprocs+0x82>
 8013092:	e9d4 3200 	ldrd	r3, r2, [r4]
 8013096:	b93a      	cbnz	r2, 80130a8 <__call_exitprocs+0xc0>
 8013098:	b133      	cbz	r3, 80130a8 <__call_exitprocs+0xc0>
 801309a:	602b      	str	r3, [r5, #0]
 801309c:	4620      	mov	r0, r4
 801309e:	f3af 8000 	nop.w
 80130a2:	682b      	ldr	r3, [r5, #0]
 80130a4:	461c      	mov	r4, r3
 80130a6:	e7b3      	b.n	8013010 <__call_exitprocs+0x28>
 80130a8:	4625      	mov	r5, r4
 80130aa:	e7fb      	b.n	80130a4 <__call_exitprocs+0xbc>
 80130ac:	20000460 	.word	0x20000460
 80130b0:	080144e8 	.word	0x080144e8
 80130b4:	00000000 	.word	0x00000000

080130b8 <atexit>:
 80130b8:	2300      	movs	r3, #0
 80130ba:	4601      	mov	r1, r0
 80130bc:	461a      	mov	r2, r3
 80130be:	4618      	mov	r0, r3
 80130c0:	f000 b820 	b.w	8013104 <__register_exitproc>

080130c4 <__libc_fini_array>:
 80130c4:	b538      	push	{r3, r4, r5, lr}
 80130c6:	4d07      	ldr	r5, [pc, #28]	; (80130e4 <__libc_fini_array+0x20>)
 80130c8:	4c07      	ldr	r4, [pc, #28]	; (80130e8 <__libc_fini_array+0x24>)
 80130ca:	1b64      	subs	r4, r4, r5
 80130cc:	10a4      	asrs	r4, r4, #2
 80130ce:	b91c      	cbnz	r4, 80130d8 <__libc_fini_array+0x14>
 80130d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130d4:	f000 b874 	b.w	80131c0 <_fini>
 80130d8:	3c01      	subs	r4, #1
 80130da:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80130de:	4798      	blx	r3
 80130e0:	e7f5      	b.n	80130ce <__libc_fini_array+0xa>
 80130e2:	bf00      	nop
 80130e4:	080144fc 	.word	0x080144fc
 80130e8:	08014500 	.word	0x08014500

080130ec <__retarget_lock_init>:
 80130ec:	4770      	bx	lr

080130ee <__retarget_lock_init_recursive>:
 80130ee:	4770      	bx	lr

080130f0 <__retarget_lock_close>:
 80130f0:	4770      	bx	lr

080130f2 <__retarget_lock_close_recursive>:
 80130f2:	4770      	bx	lr

080130f4 <__retarget_lock_acquire>:
 80130f4:	4770      	bx	lr

080130f6 <__retarget_lock_acquire_recursive>:
 80130f6:	4770      	bx	lr

080130f8 <__retarget_lock_try_acquire>:
 80130f8:	2001      	movs	r0, #1
 80130fa:	4770      	bx	lr

080130fc <__retarget_lock_try_acquire_recursive>:
 80130fc:	2001      	movs	r0, #1
 80130fe:	4770      	bx	lr

08013100 <__retarget_lock_release>:
 8013100:	4770      	bx	lr

08013102 <__retarget_lock_release_recursive>:
 8013102:	4770      	bx	lr

08013104 <__register_exitproc>:
 8013104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013108:	4c26      	ldr	r4, [pc, #152]	; (80131a4 <__register_exitproc+0xa0>)
 801310a:	4606      	mov	r6, r0
 801310c:	6820      	ldr	r0, [r4, #0]
 801310e:	4698      	mov	r8, r3
 8013110:	460f      	mov	r7, r1
 8013112:	4691      	mov	r9, r2
 8013114:	f7ff ffef 	bl	80130f6 <__retarget_lock_acquire_recursive>
 8013118:	4b23      	ldr	r3, [pc, #140]	; (80131a8 <__register_exitproc+0xa4>)
 801311a:	681d      	ldr	r5, [r3, #0]
 801311c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8013120:	b918      	cbnz	r0, 801312a <__register_exitproc+0x26>
 8013122:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8013126:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 801312a:	6843      	ldr	r3, [r0, #4]
 801312c:	2b1f      	cmp	r3, #31
 801312e:	dd19      	ble.n	8013164 <__register_exitproc+0x60>
 8013130:	4b1e      	ldr	r3, [pc, #120]	; (80131ac <__register_exitproc+0xa8>)
 8013132:	b933      	cbnz	r3, 8013142 <__register_exitproc+0x3e>
 8013134:	6820      	ldr	r0, [r4, #0]
 8013136:	f7ff ffe4 	bl	8013102 <__retarget_lock_release_recursive>
 801313a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801313e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013142:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8013146:	f3af 8000 	nop.w
 801314a:	2800      	cmp	r0, #0
 801314c:	d0f2      	beq.n	8013134 <__register_exitproc+0x30>
 801314e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8013152:	6003      	str	r3, [r0, #0]
 8013154:	2200      	movs	r2, #0
 8013156:	6042      	str	r2, [r0, #4]
 8013158:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 801315c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8013160:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8013164:	6843      	ldr	r3, [r0, #4]
 8013166:	b19e      	cbz	r6, 8013190 <__register_exitproc+0x8c>
 8013168:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 801316c:	2201      	movs	r2, #1
 801316e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8013172:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8013176:	409a      	lsls	r2, r3
 8013178:	4311      	orrs	r1, r2
 801317a:	2e02      	cmp	r6, #2
 801317c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8013180:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8013184:	bf02      	ittt	eq
 8013186:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 801318a:	430a      	orreq	r2, r1
 801318c:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8013190:	1c5a      	adds	r2, r3, #1
 8013192:	3302      	adds	r3, #2
 8013194:	6042      	str	r2, [r0, #4]
 8013196:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 801319a:	6820      	ldr	r0, [r4, #0]
 801319c:	f7ff ffb1 	bl	8013102 <__retarget_lock_release_recursive>
 80131a0:	2000      	movs	r0, #0
 80131a2:	e7cc      	b.n	801313e <__register_exitproc+0x3a>
 80131a4:	20000460 	.word	0x20000460
 80131a8:	080144e8 	.word	0x080144e8
 80131ac:	00000000 	.word	0x00000000

080131b0 <__EH_FRAME_BEGIN__>:
 80131b0:	00000000                                ....

080131b4 <_init>:
 80131b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131b6:	bf00      	nop
 80131b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131ba:	bc08      	pop	{r3}
 80131bc:	469e      	mov	lr, r3
 80131be:	4770      	bx	lr

080131c0 <_fini>:
 80131c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131c2:	bf00      	nop
 80131c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131c6:	bc08      	pop	{r3}
 80131c8:	469e      	mov	lr, r3
 80131ca:	4770      	bx	lr

Disassembly of section .RamFunc:

080131cc <HAL_FLASHEx_EnableRunPowerDown>:
  * @retval None
  */
__RAM_FUNC HAL_FLASHEx_EnableRunPowerDown(void)
{
  /* Enable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_ENABLE();
 80131cc:	4b05      	ldr	r3, [pc, #20]	; (80131e4 <_etext+0x18>)
 80131ce:	4a06      	ldr	r2, [pc, #24]	; (80131e8 <_etext+0x1c>)
 80131d0:	605a      	str	r2, [r3, #4]
 80131d2:	4a06      	ldr	r2, [pc, #24]	; (80131ec <_etext+0x20>)
 80131d4:	605a      	str	r2, [r3, #4]
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80131dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;

}
 80131de:	2000      	movs	r0, #0
 80131e0:	4770      	bx	lr
 80131e2:	bf00      	nop
 80131e4:	40022000 	.word	0x40022000
 80131e8:	04152637 	.word	0x04152637
 80131ec:	fafbfcfd 	.word	0xfafbfcfd

080131f0 <HAL_FLASHEx_DisableRunPowerDown>:
  * @retval None
  */
__RAM_FUNC HAL_FLASHEx_DisableRunPowerDown(void)
{
  /* Disable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_DISABLE();
 80131f0:	4b05      	ldr	r3, [pc, #20]	; (8013208 <HAL_FLASHEx_DisableRunPowerDown+0x18>)
 80131f2:	4a06      	ldr	r2, [pc, #24]	; (801320c <HAL_FLASHEx_DisableRunPowerDown+0x1c>)
 80131f4:	605a      	str	r2, [r3, #4]
 80131f6:	4a06      	ldr	r2, [pc, #24]	; (8013210 <HAL_FLASHEx_DisableRunPowerDown+0x20>)
 80131f8:	605a      	str	r2, [r3, #4]
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013200:	601a      	str	r2, [r3, #0]

  return HAL_OK;
}
 8013202:	2000      	movs	r0, #0
 8013204:	4770      	bx	lr
 8013206:	bf00      	nop
 8013208:	40022000 	.word	0x40022000
 801320c:	04152637 	.word	0x04152637
 8013210:	fafbfcfd 	.word	0xfafbfcfd
