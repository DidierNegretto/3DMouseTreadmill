
MouseTreadmillSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007694  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa0  08007aa0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa0  08007aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa8  08007aa8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000010  08007ac0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  08007ac0  000208f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f39  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023fa  00000000  00000000  00032f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00035378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00036400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002831e  00000000  00000000  00037398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d71a  00000000  00000000  0005f6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5219  00000000  00000000  0006cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161fe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  00162064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007804 	.word	0x08007804

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007804 	.word	0x08007804

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	4053      	eors	r3, r2
 80004de:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	b25a      	sxtb	r2, r3
 80004e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ea:	4053      	eors	r3, r2
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	b21a      	sxth	r2, r3
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	b21b      	sxth	r3, r3
 8000500:	4053      	eors	r3, r2
 8000502:	b21a      	sxth	r2, r3
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	b21b      	sxth	r3, r3
 800050a:	4053      	eors	r3, r2
 800050c:	b21a      	sxth	r2, r3
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	091b      	lsrs	r3, r3, #4
 8000512:	b2db      	uxtb	r3, r3
 8000514:	b21b      	sxth	r3, r3
 8000516:	4053      	eors	r3, r2
 8000518:	b21b      	sxth	r3, r3
 800051a:	b29a      	uxth	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	801a      	strh	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053a:	801a      	strh	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000554:	f107 030e 	add.w	r3, r7, #14
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffe7 	bl	800052c <crc_init>
	while (length--) {
 800055e:	e009      	b.n	8000574 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f107 020e 	add.w	r2, r7, #14
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ffaa 	bl	80004c8 <crc_accumulate>
	while (length--) {
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	1e5a      	subs	r2, r3, #1
 8000578:	807a      	strh	r2, [r7, #2]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f0      	bne.n	8000560 <crc_calculate+0x18>
        }
        return crcTmp;
 800057e:	89fb      	ldrh	r3, [r7, #14]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	4613      	mov	r3, r2
 8000594:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	617b      	str	r3, [r7, #20]
	while (length--) {
 800059a:	e007      	b.n	80005ac <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	617a      	str	r2, [r7, #20]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	68f9      	ldr	r1, [r7, #12]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff8e 	bl	80004c8 <crc_accumulate>
	while (length--) {
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	80fa      	strh	r2, [r7, #6]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f2      	bne.n	800059c <crc_accumulate_buffer+0x14>
        }
}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <mavlink_sha256_init+0x50>)
 80005d8:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <mavlink_sha256_init+0x54>)
 80005de:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <mavlink_sha256_init+0x58>)
 80005e4:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <mavlink_sha256_init+0x5c>)
 80005ea:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <mavlink_sha256_init+0x60>)
 80005f0:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <mavlink_sha256_init+0x64>)
 80005f6:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <mavlink_sha256_init+0x68>)
 80005fc:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <mavlink_sha256_init+0x6c>)
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	6a09e667 	.word	0x6a09e667
 8000614:	bb67ae85 	.word	0xbb67ae85
 8000618:	3c6ef372 	.word	0x3c6ef372
 800061c:	a54ff53a 	.word	0xa54ff53a
 8000620:	510e527f 	.word	0x510e527f
 8000624:	9b05688c 	.word	0x9b05688c
 8000628:	1f83d9ab 	.word	0x1f83d9ab
 800062c:	5be0cd19 	.word	0x5be0cd19

08000630 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000630:	b480      	push	{r7}
 8000632:	b0cf      	sub	sp, #316	; 0x13c
 8000634:	af00      	add	r7, sp, #0
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	6018      	str	r0, [r3, #0]
 800063a:	463b      	mov	r3, r7
 800063c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000694:	e011      	b.n	80006ba <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 8000696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	463a      	mov	r2, r7
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80006ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80006b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006b4:	3301      	adds	r3, #1
 80006b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	dde9      	ble.n	8000696 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80006c2:	2310      	movs	r3, #16
 80006c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006c8:	e057      	b.n	800077a <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80006ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006ce:	1e9a      	subs	r2, r3, #2
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d8:	ea4f 4273 	mov.w	r2, r3, ror #17
 80006dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e0:	1e99      	subs	r1, r3, #2
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006ea:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80006ee:	405a      	eors	r2, r3
 80006f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006f4:	1e99      	subs	r1, r3, #2
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006fe:	0a9b      	lsrs	r3, r3, #10
 8000700:	405a      	eors	r2, r3
 8000702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000706:	1fd9      	subs	r1, r3, #7
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000710:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000716:	f1a3 010f 	sub.w	r1, r3, #15
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000722:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800072a:	f1a3 000f 	sub.w	r0, r3, #15
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000736:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800073a:	4059      	eors	r1, r3
 800073c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000740:	f1a3 000f 	sub.w	r0, r3, #15
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000750:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000756:	f1a3 0110 	sub.w	r1, r3, #16
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000762:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800076c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000774:	3301      	adds	r3, #1
 8000776:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800077a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800077e:	2b3f      	cmp	r3, #63	; 0x3f
 8000780:	dda3      	ble.n	80006ca <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000788:	e076      	b.n	8000878 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 800078a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800078e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000792:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000796:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800079a:	405a      	eors	r2, r3
 800079c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007a0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80007a4:	405a      	eors	r2, r3
 80007a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80007aa:	441a      	add	r2, r3
 80007ac:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80007b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007b4:	4019      	ands	r1, r3
 80007b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007ba:	43d8      	mvns	r0, r3
 80007bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007c0:	4003      	ands	r3, r0
 80007c2:	404b      	eors	r3, r1
 80007c4:	441a      	add	r2, r3
 80007c6:	4956      	ldr	r1, [pc, #344]	; (8000920 <mavlink_sha256_calc+0x2f0>)
 80007c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d0:	441a      	add	r2, r3
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80007da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007de:	4413      	add	r3, r2
 80007e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80007e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007e8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80007ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007f0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80007f4:	405a      	eors	r2, r3
 80007f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007fa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80007fe:	405a      	eors	r2, r3
 8000800:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000808:	4059      	eors	r1, r3
 800080a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800080e:	4019      	ands	r1, r3
 8000810:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000818:	4003      	ands	r3, r0
 800081a:	404b      	eors	r3, r1
 800081c:	4413      	add	r3, r2
 800081e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8000822:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000826:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 800082a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800082e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000832:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000836:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 800083a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800083e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000842:	4413      	add	r3, r2
 8000844:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800084c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000850:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000854:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000858:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800085c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000860:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000868:	4413      	add	r3, r2
 800086a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 800086e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000872:	3301      	adds	r3, #1
 8000874:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800087c:	2b3f      	cmp	r3, #63	; 0x3f
 800087e:	dd84      	ble.n	800078a <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800088a:	441a      	add	r2, r3
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	609a      	str	r2, [r3, #8]
    B += BB;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800089c:	441a      	add	r2, r3
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	60da      	str	r2, [r3, #12]
    C += CC;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008ae:	441a      	add	r2, r3
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	611a      	str	r2, [r3, #16]
    D += DD;
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80008c0:	441a      	add	r2, r3
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	615a      	str	r2, [r3, #20]
    E += EE;
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008d2:	441a      	add	r2, r3
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	619a      	str	r2, [r3, #24]
    F += FF;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008e4:	441a      	add	r2, r3
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	61da      	str	r2, [r3, #28]
    G += GG;
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6a1a      	ldr	r2, [r3, #32]
 80008f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008f6:	441a      	add	r2, r3
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	621a      	str	r2, [r3, #32]
    H += HH;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000904:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000908:	441a      	add	r2, r3
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000910:	bf00      	nop
 8000912:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	0800781c 	.word	0x0800781c

08000924 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	; 0x70
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	441a      	add	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800094e:	429a      	cmp	r2, r3
 8000950:	d904      	bls.n	800095c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 800095c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000966:	e054      	b.n	8000a12 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8000968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800096a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800096e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000974:	429a      	cmp	r2, r3
 8000976:	d201      	bcs.n	800097c <mavlink_sha256_update+0x58>
            l = len;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000984:	4413      	add	r3, r2
 8000986:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000988:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800098a:	4618      	mov	r0, r3
 800098c:	f006 ff27 	bl	80077de <memcpy>
	offset += l;
 8000990:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000994:	4413      	add	r3, r2
 8000996:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800099a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800099c:	4413      	add	r3, r2
 800099e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80009a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009aa:	2b40      	cmp	r3, #64	; 0x40
 80009ac:	d131      	bne.n	8000a12 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3328      	adds	r3, #40	; 0x28
 80009b2:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 80009b4:	2300      	movs	r3, #0
 80009b6:	663b      	str	r3, [r7, #96]	; 0x60
 80009b8:	e020      	b.n	80009fc <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80009ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009c0:	4413      	add	r3, r2
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80009d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009d2:	78da      	ldrb	r2, [r3, #3]
 80009d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d6:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	3301      	adds	r3, #1
 80009dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009de:	7892      	ldrb	r2, [r2, #2]
 80009e0:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80009e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009e4:	3302      	adds	r3, #2
 80009e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009e8:	7852      	ldrb	r2, [r2, #1]
 80009ea:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80009ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ee:	3303      	adds	r3, #3
 80009f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80009f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009f8:	3301      	adds	r3, #1
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
 80009fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	dddb      	ble.n	80009ba <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fe11 	bl	8000630 <mavlink_sha256_calc>
	    offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1a7      	bne.n	8000968 <mavlink_sha256_update+0x44>
	}
    }
}
 8000a18:	bf00      	nop
 8000a1a:	3770      	adds	r7, #112	; 0x70
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b098      	sub	sp, #96	; 0x60
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a38:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a40:	3301      	adds	r3, #1
 8000a42:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3308      	adds	r3, #8
 8000a48:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	3301      	adds	r3, #1
 8000a54:	2247      	movs	r2, #71	; 0x47
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 fecb 	bl	80077f4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a64:	3307      	adds	r3, #7
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a6c:	440b      	add	r3, r1
 8000a6e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	0a1a      	lsrs	r2, r3, #8
 8000a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a7a:	3306      	adds	r3, #6
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a82:	440b      	add	r3, r1
 8000a84:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	0c1a      	lsrs	r2, r3, #16
 8000a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a90:	3305      	adds	r3, #5
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a98:	440b      	add	r3, r1
 8000a9a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	0e1a      	lsrs	r2, r3, #24
 8000aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aae:	440b      	add	r3, r1
 8000ab0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aba:	3303      	adds	r3, #3
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	0a1a      	lsrs	r2, r3, #8
 8000ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ad8:	440b      	add	r3, r1
 8000ada:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	0c1a      	lsrs	r2, r3, #16
 8000ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aee:	440b      	add	r3, r1
 8000af0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	0e1b      	lsrs	r3, r3, #24
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b0a:	f103 0208 	add.w	r2, r3, #8
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff05 	bl	8000924 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b1c:	78da      	ldrb	r2, [r3, #3]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b28:	7892      	ldrb	r2, [r2, #2]
 8000b2a:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	3302      	adds	r3, #2
 8000b30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b32:	7852      	ldrb	r2, [r2, #1]
 8000b34:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	3304      	adds	r3, #4
 8000b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b46:	79d2      	ldrb	r2, [r2, #7]
 8000b48:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	3305      	adds	r3, #5
 8000b4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b50:	7992      	ldrb	r2, [r2, #6]
 8000b52:	701a      	strb	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3760      	adds	r7, #96	; 0x60
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <mavlink_get_channel_status+0x24>)
 8000b72:	4413      	add	r3, r2
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000258 	.word	0x20000258

08000b84 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b0a1      	sub	sp, #132	; 0x84
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <mavlink_sign_packet+0x20>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <mavlink_sign_packet+0x24>
	    return 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e04f      	b.n	8000c48 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	785a      	ldrb	r2, [r3, #1]
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000bb6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f107 0110 	add.w	r1, r7, #16
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f006 fe0a 	bl	80077de <memcpy>
	signing->timestamp++;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000bd0:	1c4b      	adds	r3, r1, #1
 8000bd2:	f142 0400 	adc.w	r4, r2, #0
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	
	mavlink_sha256_init(&ctx);
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fced 	bl	80005c0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f103 0110 	add.w	r1, r3, #16
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe96 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000bf8:	78fa      	ldrb	r2, [r7, #3]
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe8f 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000c06:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fe86 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe7e 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe77 	bl	8000924 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1dda      	adds	r2, r3, #7
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff feed 	bl	8000a20 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000c46:	230d      	movs	r3, #13
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3784      	adds	r7, #132	; 0x84
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd90      	pop	{r4, r7, pc}

08000c50 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c5c:	e002      	b.n	8000c64 <_mav_trim_payload+0x14>
		length--;
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d906      	bls.n	8000c78 <_mav_trim_payload+0x28>
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f2      	beq.n	8000c5e <_mav_trim_payload+0xe>
	}
	return length;
 8000c78:	78fb      	ldrb	r3, [r7, #3]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c88:	b08f      	sub	sp, #60	; 0x3c
 8000c8a:	af04      	add	r7, sp, #16
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	72fb      	strb	r3, [r7, #11]
 8000c94:	4613      	mov	r3, r2
 8000c96:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7b1b      	ldrb	r3, [r3, #12]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf14      	ite	ne
 8000ca4:	2301      	movne	r3, #1
 8000ca6:	2300      	moveq	r3, #0
 8000ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8000cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00c      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <mavlink_finalize_message_buffer+0x4e>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <mavlink_finalize_message_buffer+0x50>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000cda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8000ce6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <mavlink_finalize_message_buffer+0x6c>
 8000cee:	230d      	movs	r3, #13
 8000cf0:	e000      	b.n	8000cf4 <mavlink_finalize_message_buffer+0x6e>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8000cfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	22fe      	movs	r2, #254	; 0xfe
 8000d0a:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d12:	e002      	b.n	8000d1a <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	22fd      	movs	r2, #253	; 0xfd
 8000d18:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8000d1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <mavlink_finalize_message_buffer+0xb2>
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	330c      	adds	r3, #12
 8000d26:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff8f 	bl	8000c50 <_mav_trim_payload>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	e001      	b.n	8000d3c <mavlink_finalize_message_buffer+0xb6>
 8000d38:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	7afa      	ldrb	r2, [r7, #11]
 8000d44:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	7aba      	ldrb	r2, [r7, #10]
 8000d4a:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8000d52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	799a      	ldrb	r2, [r3, #6]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	799b      	ldrb	r3, [r3, #6]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	78db      	ldrb	r3, [r3, #3]
 8000d8c:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8000d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d013      	beq.n	8000dbe <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	799b      	ldrb	r3, [r3, #6]
 8000d9a:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	79db      	ldrb	r3, [r3, #7]
 8000da0:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	7a1b      	ldrb	r3, [r3, #8]
 8000da6:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	7a5a      	ldrb	r2, [r3, #9]
 8000dac:	7a99      	ldrb	r1, [r3, #10]
 8000dae:	0209      	lsls	r1, r1, #8
 8000db0:	430a      	orrs	r2, r1
 8000db2:	7adb      	ldrb	r3, [r3, #11]
 8000db4:	041b      	lsls	r3, r3, #16
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	777b      	strb	r3, [r7, #29]
 8000dbc:	e030      	b.n	8000e20 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	791b      	ldrb	r3, [r3, #4]
 8000dc2:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	795b      	ldrb	r3, [r3, #5]
 8000dc8:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	79db      	ldrb	r3, [r3, #7]
 8000dd4:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	7a1b      	ldrb	r3, [r3, #8]
 8000dda:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	7a5a      	ldrb	r2, [r3, #9]
 8000de0:	7a99      	ldrb	r1, [r3, #10]
 8000de2:	0209      	lsls	r1, r1, #8
 8000de4:	430a      	orrs	r2, r1
 8000de6:	7adb      	ldrb	r3, [r3, #11]
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	7a5a      	ldrb	r2, [r3, #9]
 8000df4:	7a99      	ldrb	r1, [r3, #10]
 8000df6:	0209      	lsls	r1, r1, #8
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	7adb      	ldrb	r3, [r3, #11]
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	121b      	asrs	r3, r3, #8
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	7a5a      	ldrb	r2, [r3, #9]
 8000e0c:	7a99      	ldrb	r1, [r3, #10]
 8000e0e:	0209      	lsls	r1, r1, #8
 8000e10:	430a      	orrs	r2, r1
 8000e12:	7adb      	ldrb	r3, [r3, #11]
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4313      	orrs	r3, r2
 8000e18:	141b      	asrs	r3, r3, #16
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8000e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb88 	bl	8000548 <crc_calculate>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f103 010c 	add.w	r1, r3, #12
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f107 0316 	add.w	r3, r7, #22
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb9b 	bl	8000588 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8000e52:	f107 0216 	add.w	r2, r7, #22
 8000e56:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb33 	bl	80004c8 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8000e62:	8af9      	ldrh	r1, [r7, #22]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	330c      	adds	r3, #12
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	78d2      	ldrb	r2, [r2, #3]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b2ca      	uxtb	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8000e72:	8afb      	ldrh	r3, [r7, #22]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b299      	uxth	r1, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f103 020c 	add.w	r2, r3, #12
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	78db      	ldrb	r3, [r3, #3]
 8000e82:	3301      	adds	r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8000e8a:	8afa      	ldrh	r2, [r7, #22]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8000e90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01a      	beq.n	8000ece <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8000eaa:	68f9      	ldr	r1, [r7, #12]
 8000eac:	310c      	adds	r1, #12
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8000eb2:	4401      	add	r1, r0
 8000eb4:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8000eb8:	f107 0018 	add.w	r0, r7, #24
 8000ebc:	9102      	str	r1, [sp, #8]
 8000ebe:	9201      	str	r2, [sp, #4]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4633      	mov	r3, r6
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f7ff fe5b 	bl	8000b84 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4413      	add	r3, r2
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	b29b      	uxth	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	372c      	adds	r7, #44	; 0x2c
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ef4 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	70fb      	strb	r3, [r7, #3]
 8000f06:	460b      	mov	r3, r1
 8000f08:	70bb      	strb	r3, [r7, #2]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8000f0e:	787b      	ldrb	r3, [r7, #1]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fe23 	bl	8000b5c <mavlink_get_channel_status>
 8000f16:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8000f18:	78ba      	ldrb	r2, [r7, #2]
 8000f1a:	78f9      	ldrb	r1, [r7, #3]
 8000f1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	7f3b      	ldrb	r3, [r7, #28]
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	7e3b      	ldrb	r3, [r7, #24]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff feaa 	bl	8000c86 <mavlink_finalize_message_buffer>
 8000f32:	4603      	mov	r3, r0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	70fb      	strb	r3, [r7, #3]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70bb      	strb	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8000f56:	78ba      	ldrb	r2, [r7, #2]
 8000f58:	78f9      	ldrb	r1, [r7, #3]
 8000f5a:	7d3b      	ldrb	r3, [r7, #20]
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	7c3b      	ldrb	r3, [r7, #16]
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2300      	movs	r3, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffc3 	bl	8000ef4 <mavlink_finalize_message_chan>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000f8e:	d13a      	bne.n	8001006 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8000f94:	2305      	movs	r3, #5
 8000f96:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	789a      	ldrb	r2, [r3, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3302      	adds	r3, #2
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	7992      	ldrb	r2, [r2, #6]
 8000fb0:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3303      	adds	r3, #3
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	79d2      	ldrb	r2, [r2, #7]
 8000fba:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	7a12      	ldrb	r2, [r2, #8]
 8000fc4:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	7a5a      	ldrb	r2, [r3, #9]
 8000fca:	7a99      	ldrb	r1, [r3, #10]
 8000fcc:	0209      	lsls	r1, r1, #8
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	7adb      	ldrb	r3, [r3, #11]
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3305      	adds	r3, #5
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	1d98      	adds	r0, r3, #6
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f103 010c 	add.w	r1, r3, #12
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	78db      	ldrb	r3, [r3, #3]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f006 fbf5 	bl	80077de <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8000ff4:	7dbb      	ldrb	r3, [r7, #22]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	78d2      	ldrb	r2, [r2, #3]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e06c      	b.n	80010e0 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	330c      	adds	r3, #12
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe1e 	bl	8000c50 <_mav_trim_payload>
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001018:	2309      	movs	r3, #9
 800101a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	789a      	ldrb	r2, [r3, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3302      	adds	r3, #2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	7912      	ldrb	r2, [r2, #4]
 8001034:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3303      	adds	r3, #3
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	7952      	ldrb	r2, [r2, #5]
 800103e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3304      	adds	r3, #4
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	7992      	ldrb	r2, [r2, #6]
 8001048:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3305      	adds	r3, #5
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	79d2      	ldrb	r2, [r2, #7]
 8001052:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3306      	adds	r3, #6
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	7a12      	ldrb	r2, [r2, #8]
 800105c:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	7a5a      	ldrb	r2, [r3, #9]
 8001062:	7a99      	ldrb	r1, [r3, #10]
 8001064:	0209      	lsls	r1, r1, #8
 8001066:	430a      	orrs	r2, r1
 8001068:	7adb      	ldrb	r3, [r3, #11]
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	4313      	orrs	r3, r2
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3307      	adds	r3, #7
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	7a5a      	ldrb	r2, [r3, #9]
 800107c:	7a99      	ldrb	r1, [r3, #10]
 800107e:	0209      	lsls	r1, r1, #8
 8001080:	430a      	orrs	r2, r1
 8001082:	7adb      	ldrb	r3, [r3, #11]
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	4313      	orrs	r3, r2
 8001088:	121a      	asrs	r2, r3, #8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3308      	adds	r3, #8
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	7a5a      	ldrb	r2, [r3, #9]
 8001096:	7a99      	ldrb	r1, [r3, #10]
 8001098:	0209      	lsls	r1, r1, #8
 800109a:	430a      	orrs	r2, r1
 800109c:	7adb      	ldrb	r3, [r3, #11]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	4313      	orrs	r3, r2
 80010a2:	141a      	asrs	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3309      	adds	r3, #9
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f103 000a 	add.w	r0, r3, #10
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	330c      	adds	r3, #12
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f006 fb90 	bl	80077de <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80010be:	7dba      	ldrb	r2, [r7, #22]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4413      	add	r3, r2
 80010c4:	3301      	adds	r3, #1
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <mavlink_msg_to_send_buffer+0x164>
 80010d8:	230d      	movs	r3, #13
 80010da:	e000      	b.n	80010de <mavlink_msg_to_send_buffer+0x166>
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1c98      	adds	r0, r3, #2
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	4619      	mov	r1, r3
 8001112:	f006 fb64 	bl	80077de <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001116:	7dbb      	ldrb	r3, [r7, #22]
 8001118:	b29a      	uxth	r2, r3
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b29a      	uxth	r2, r3
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	3303      	adds	r3, #3
 800112c:	b29b      	uxth	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <mavlink_msg_heartbeat_pack>:
 * @param time  Time from boot of system
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t mode, uint32_t time)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	603a      	str	r2, [r7, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 4, mode);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.time = time;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	60bb      	str	r3, [r7, #8]
    packet.mode = mode;
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	733b      	strb	r3, [r7, #12]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	330c      	adds	r3, #12
 8001158:	f107 0108 	add.w	r1, r7, #8
 800115c:	2205      	movs	r2, #5
 800115e:	4618      	mov	r0, r3
 8001160:	f006 fb3d 	bl	80077de <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	725a      	strb	r2, [r3, #9]
 800116a:	2200      	movs	r2, #0
 800116c:	729a      	strb	r2, [r3, #10]
 800116e:	2200      	movs	r2, #0
 8001170:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8001172:	79ba      	ldrb	r2, [r7, #6]
 8001174:	79f9      	ldrb	r1, [r7, #7]
 8001176:	2389      	movs	r3, #137	; 0x89
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2305      	movs	r3, #5
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2305      	movs	r3, #5
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f7ff fedb 	bl	8000f3c <mavlink_finalize_message>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <mavlink_msg_speed_info_pack>:
 * @param speed_z  Speed in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_speed_info_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time, float speed_x, float speed_y, float speed_z)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af02      	add	r7, sp, #8
 8001196:	613a      	str	r2, [r7, #16]
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	ed87 0a02 	vstr	s0, [r7, #8]
 800119e:	edc7 0a01 	vstr	s1, [r7, #4]
 80011a2:	ed87 1a00 	vstr	s2, [r7]
 80011a6:	4603      	mov	r3, r0
 80011a8:	75fb      	strb	r3, [r7, #23]
 80011aa:	460b      	mov	r3, r1
 80011ac:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 12, speed_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_SPEED_INFO_LEN);
#else
    mavlink_speed_info_t packet;
    packet.time = time;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
    packet.speed_x = speed_x;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	61fb      	str	r3, [r7, #28]
    packet.speed_y = speed_y;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	623b      	str	r3, [r7, #32]
    packet.speed_z = speed_z;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_INFO_LEN);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	330c      	adds	r3, #12
 80011c2:	f107 0118 	add.w	r1, r7, #24
 80011c6:	2210      	movs	r2, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f006 fb08 	bl	80077de <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_SPEED_INFO;
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	725a      	strb	r2, [r3, #9]
 80011d8:	2200      	movs	r2, #0
 80011da:	729a      	strb	r2, [r3, #10]
 80011dc:	2200      	movs	r2, #0
 80011de:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_SPEED_INFO_MIN_LEN, MAVLINK_MSG_ID_SPEED_INFO_LEN, MAVLINK_MSG_ID_SPEED_INFO_CRC);
 80011e0:	7dba      	ldrb	r2, [r7, #22]
 80011e2:	7df9      	ldrb	r1, [r7, #23]
 80011e4:	23ca      	movs	r3, #202	; 0xca
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2310      	movs	r3, #16
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2310      	movs	r3, #16
 80011ee:	6938      	ldr	r0, [r7, #16]
 80011f0:	f7ff fea4 	bl	8000f3c <mavlink_finalize_message>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <mavlink_msg_speed_info_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param speed_info C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_info_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_info_t* speed_info)
{
 80011fe:	b5b0      	push	{r4, r5, r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	460b      	mov	r3, r1
 800120e:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_speed_info_pack(system_id, component_id, msg, speed_info->time, speed_info->speed_x, speed_info->speed_y, speed_info->speed_z);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681d      	ldr	r5, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6899      	ldr	r1, [r3, #8]
 8001220:	460b      	mov	r3, r1
 8001222:	4619      	mov	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	7bbc      	ldrb	r4, [r7, #14]
 800122a:	7bf8      	ldrb	r0, [r7, #15]
 800122c:	ee01 3a10 	vmov	s2, r3
 8001230:	ee00 1a90 	vmov	s1, r1
 8001234:	ee00 2a10 	vmov	s0, r2
 8001238:	462b      	mov	r3, r5
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff ffa7 	bl	8001190 <mavlink_msg_speed_info_pack>
 8001242:	4603      	mov	r3, r0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bdb0      	pop	{r4, r5, r7, pc}

0800124c <mavlink_msg_speed_setpoint_pack>:
 * @param setpoint_z  Speed setpoint in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_speed_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float setpoint_x, float setpoint_y, float setpoint_z)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af02      	add	r7, sp, #8
 8001252:	4603      	mov	r3, r0
 8001254:	613a      	str	r2, [r7, #16]
 8001256:	ed87 0a03 	vstr	s0, [r7, #12]
 800125a:	edc7 0a02 	vstr	s1, [r7, #8]
 800125e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001262:	75fb      	strb	r3, [r7, #23]
 8001264:	460b      	mov	r3, r1
 8001266:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 8, setpoint_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
#else
    mavlink_speed_setpoint_t packet;
    packet.setpoint_x = setpoint_x;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	61fb      	str	r3, [r7, #28]
    packet.setpoint_y = setpoint_y;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	623b      	str	r3, [r7, #32]
    packet.setpoint_z = setpoint_z;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	330c      	adds	r3, #12
 8001278:	f107 011c 	add.w	r1, r7, #28
 800127c:	220c      	movs	r2, #12
 800127e:	4618      	mov	r0, r3
 8001280:	f006 faad 	bl	80077de <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_SPEED_SETPOINT;
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2200      	movs	r2, #0
 8001288:	f042 0202 	orr.w	r2, r2, #2
 800128c:	725a      	strb	r2, [r3, #9]
 800128e:	2200      	movs	r2, #0
 8001290:	729a      	strb	r2, [r3, #10]
 8001292:	2200      	movs	r2, #0
 8001294:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_SPEED_SETPOINT_MIN_LEN, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN, MAVLINK_MSG_ID_SPEED_SETPOINT_CRC);
 8001296:	7dba      	ldrb	r2, [r7, #22]
 8001298:	7df9      	ldrb	r1, [r7, #23]
 800129a:	2381      	movs	r3, #129	; 0x81
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	230c      	movs	r3, #12
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	230c      	movs	r3, #12
 80012a4:	6938      	ldr	r0, [r7, #16]
 80012a6:	f7ff fe49 	bl	8000f3c <mavlink_finalize_message>
 80012aa:	4603      	mov	r3, r0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <mavlink_msg_speed_setpoint_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param speed_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_speed_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_speed_setpoint_t* speed_setpoint)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60ba      	str	r2, [r7, #8]
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	460b      	mov	r3, r1
 80012c4:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_speed_setpoint_pack(system_id, component_id, msg, speed_setpoint->setpoint_x, speed_setpoint->setpoint_y, speed_setpoint->setpoint_z);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4613      	mov	r3, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6859      	ldr	r1, [r3, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	4619      	mov	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	7bbc      	ldrb	r4, [r7, #14]
 80012dc:	7bf8      	ldrb	r0, [r7, #15]
 80012de:	ee01 3a10 	vmov	s2, r3
 80012e2:	ee00 1a90 	vmov	s1, r1
 80012e6:	ee00 2a10 	vmov	s0, r2
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4621      	mov	r1, r4
 80012ee:	f7ff ffad 	bl	800124c <mavlink_msg_speed_setpoint_pack>
 80012f2:	4603      	mov	r3, r0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}

080012fc <mavlink_msg_speed_setpoint_decode>:
 *
 * @param msg The message to decode
 * @param speed_setpoint C-struct to decode the message contents into
 */
static inline void mavlink_msg_speed_setpoint_decode(const mavlink_message_t* msg, mavlink_speed_setpoint_t* speed_setpoint)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    speed_setpoint->setpoint_x = mavlink_msg_speed_setpoint_get_setpoint_x(msg);
    speed_setpoint->setpoint_y = mavlink_msg_speed_setpoint_get_setpoint_y(msg);
    speed_setpoint->setpoint_z = mavlink_msg_speed_setpoint_get_setpoint_z(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SPEED_SETPOINT_LEN? msg->len : MAVLINK_MSG_ID_SPEED_SETPOINT_LEN;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	bf28      	it	cs
 800130e:	230c      	movcs	r3, #12
 8001310:	73fb      	strb	r3, [r7, #15]
        memset(speed_setpoint, 0, MAVLINK_MSG_ID_SPEED_SETPOINT_LEN);
 8001312:	220c      	movs	r2, #12
 8001314:	2100      	movs	r1, #0
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f006 fa6c 	bl	80077f4 <memset>
    memcpy(speed_setpoint, _MAV_PAYLOAD(msg), len);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	330c      	adds	r3, #12
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	4619      	mov	r1, r3
 8001324:	6838      	ldr	r0, [r7, #0]
 8001326:	f006 fa5a 	bl	80077de <memcpy>
#endif
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <mavlink_msg_mode_selection_get_mode>:
 * @brief Get field mode from mode_selection message
 *
 * @return  Actual operating mode
 */
static inline uint8_t mavlink_msg_mode_selection_get_mode(const mavlink_message_t* msg)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  0);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	330c      	adds	r3, #12
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <mavlink_msg_motor_setpoint_pack>:
 * @param motor_z  Speed setpoint in z direction
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_motor_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time, float motor_x, float motor_y, float motor_z)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af02      	add	r7, sp, #8
 8001352:	613a      	str	r2, [r7, #16]
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	ed87 0a02 	vstr	s0, [r7, #8]
 800135a:	edc7 0a01 	vstr	s1, [r7, #4]
 800135e:	ed87 1a00 	vstr	s2, [r7]
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
 8001366:	460b      	mov	r3, r1
 8001368:	75bb      	strb	r3, [r7, #22]
    _mav_put_float(buf, 12, motor_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
#else
    mavlink_motor_setpoint_t packet;
    packet.time = time;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	61bb      	str	r3, [r7, #24]
    packet.motor_x = motor_x;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	61fb      	str	r3, [r7, #28]
    packet.motor_y = motor_y;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	623b      	str	r3, [r7, #32]
    packet.motor_z = motor_z;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	330c      	adds	r3, #12
 800137e:	f107 0118 	add.w	r1, r7, #24
 8001382:	2210      	movs	r2, #16
 8001384:	4618      	mov	r0, r3
 8001386:	f006 fa2a 	bl	80077de <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_MOTOR_SETPOINT;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2200      	movs	r2, #0
 800138e:	f042 0204 	orr.w	r2, r2, #4
 8001392:	725a      	strb	r2, [r3, #9]
 8001394:	2200      	movs	r2, #0
 8001396:	729a      	strb	r2, [r3, #10]
 8001398:	2200      	movs	r2, #0
 800139a:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_MOTOR_SETPOINT_MIN_LEN, MAVLINK_MSG_ID_MOTOR_SETPOINT_LEN, MAVLINK_MSG_ID_MOTOR_SETPOINT_CRC);
 800139c:	7dba      	ldrb	r2, [r7, #22]
 800139e:	7df9      	ldrb	r1, [r7, #23]
 80013a0:	23a3      	movs	r3, #163	; 0xa3
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2310      	movs	r3, #16
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2310      	movs	r3, #16
 80013aa:	6938      	ldr	r0, [r7, #16]
 80013ac:	f7ff fdc6 	bl	8000f3c <mavlink_finalize_message>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <mavlink_msg_motor_setpoint_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param motor_setpoint C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_motor_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_motor_setpoint_t* motor_setpoint)
{
 80013ba:	b5b0      	push	{r4, r5, r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	460b      	mov	r3, r1
 80013ca:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_motor_setpoint_pack(system_id, component_id, msg, motor_setpoint->time, motor_setpoint->motor_x, motor_setpoint->motor_y, motor_setpoint->motor_z);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681d      	ldr	r5, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	460b      	mov	r3, r1
 80013de:	4619      	mov	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	7bbc      	ldrb	r4, [r7, #14]
 80013e6:	7bf8      	ldrb	r0, [r7, #15]
 80013e8:	ee01 3a10 	vmov	s2, r3
 80013ec:	ee00 1a90 	vmov	s1, r1
 80013f0:	ee00 2a10 	vmov	s0, r2
 80013f4:	462b      	mov	r3, r5
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	4621      	mov	r1, r4
 80013fa:	f7ff ffa7 	bl	800134c <mavlink_msg_motor_setpoint_pack>
 80013fe:	4603      	mov	r3, r0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bdb0      	pop	{r4, r5, r7, pc}

08001408 <mouseDriver_initSetpoint>:
static mavlink_speed_setpoint_t actual_speed_setpoint;
static mavlink_motor_setpoint_t actual_motor_signal;

/* Private functions for mouseDriver.c*/
/* Private Init functions */
void mouseDriver_initSetpoint(void){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	actual_speed_setpoint.setpoint_x = 0;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <mouseDriver_initSetpoint+0x28>)
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	actual_speed_setpoint.setpoint_y = 0;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <mouseDriver_initSetpoint+0x28>)
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
	actual_speed_setpoint.setpoint_z = 0;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <mouseDriver_initSetpoint+0x28>)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000044 	.word	0x20000044

08001434 <mouseDriver_initTime>:

void mouseDriver_initTime(void){
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	actual_time = 0;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <mouseDriver_initTime+0x14>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	2000002c 	.word	0x2000002c

0800144c <mouseDriver_initMode>:

void mouseDriver_initMode(void){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	actual_mode = MOUSE_MODE_STOP;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <mouseDriver_initMode+0x14>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20000030 	.word	0x20000030

08001464 <mouseDriver_getSpeedFromSensors>:

void mouseDriver_getSpeedFromSensors(void){
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	actual_speed_measure.speed_x = 1;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <mouseDriver_getSpeedFromSensors+0x24>)
 800146a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800146e:	605a      	str	r2, [r3, #4]
	actual_speed_measure.speed_y = 2;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <mouseDriver_getSpeedFromSensors+0x24>)
 8001472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001476:	609a      	str	r2, [r3, #8]
	actual_speed_measure.speed_z = 3;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <mouseDriver_getSpeedFromSensors+0x24>)
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <mouseDriver_getSpeedFromSensors+0x28>)
 800147c:	60da      	str	r2, [r3, #12]
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20000034 	.word	0x20000034
 800148c:	40400000 	.word	0x40400000

08001490 <mouseDriver_setMode>:
/* Private set/get functions */
void mouseDriver_setSetpoint(const mavlink_speed_setpoint_t speed){
	actual_speed_setpoint = speed;
}

void mouseDriver_setMode(uint8_t mode){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	actual_mode = mode;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <mouseDriver_setMode+0x1c>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	7013      	strb	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	20000030 	.word	0x20000030

080014b0 <mouseDriver_sendMsg>:

/* Private message functions */
void mouseDriver_sendMsg(uint32_t msgid){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0ce      	sub	sp, #312	; 0x138
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	6018      	str	r0, [r3, #0]
	mavlink_message_t msg;
	static uint8_t outBuffer[MAX_BYTE_BUFFER_SIZE];
	static uint16_t msg_size = 0;

	while (tx_finish == 0){/*Wait for other messages to be sent*/}
 80014ba:	bf00      	nop
 80014bc:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <mouseDriver_sendMsg+0x118>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0fb      	beq.n	80014bc <mouseDriver_sendMsg+0xc>

	switch(msgid){
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d876      	bhi.n	80015ba <mouseDriver_sendMsg+0x10a>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <mouseDriver_sendMsg+0x24>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014e9 	.word	0x080014e9
 80014d8:	08001583 	.word	0x08001583
 80014dc:	08001523 	.word	0x08001523
 80014e0:	080015bb 	.word	0x080015bb
 80014e4:	08001553 	.word	0x08001553
		case MAVLINK_MSG_ID_HEARTBEAT:
			mavlink_msg_heartbeat_pack(SYS_ID,COMP_ID, &msg, actual_mode, actual_time);
 80014e8:	4b38      	ldr	r3, [pc, #224]	; (80015cc <mouseDriver_sendMsg+0x11c>)
 80014ea:	7819      	ldrb	r1, [r3, #0]
 80014ec:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <mouseDriver_sendMsg+0x120>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f107 020c 	add.w	r2, r7, #12
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	460b      	mov	r3, r1
 80014f8:	2100      	movs	r1, #0
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff fe1b 	bl	8001136 <mavlink_msg_heartbeat_pack>
			msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	4833      	ldr	r0, [pc, #204]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 8001508:	f7ff fd36 	bl	8000f78 <mavlink_msg_to_send_buffer>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001512:	801a      	strh	r2, [r3, #0]
			main_transmit_buffer(outBuffer, msg_size);
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	482e      	ldr	r0, [pc, #184]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 800151c:	f001 f944 	bl	80027a8 <main_transmit_buffer>
			break;
 8001520:	e04c      	b.n	80015bc <mouseDriver_sendMsg+0x10c>
		case MAVLINK_MSG_ID_SPEED_SETPOINT:
			mavlink_msg_speed_setpoint_encode(SYS_ID,COMP_ID, &msg, &actual_speed_setpoint);
 8001522:	f107 020c 	add.w	r2, r7, #12
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <mouseDriver_sendMsg+0x12c>)
 8001528:	2100      	movs	r1, #0
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fec2 	bl	80012b4 <mavlink_msg_speed_setpoint_encode>
			msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4619      	mov	r1, r3
 8001536:	4827      	ldr	r0, [pc, #156]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 8001538:	f7ff fd1e 	bl	8000f78 <mavlink_msg_to_send_buffer>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001542:	801a      	strh	r2, [r3, #0]
			main_transmit_buffer(outBuffer, msg_size);
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	4822      	ldr	r0, [pc, #136]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 800154c:	f001 f92c 	bl	80027a8 <main_transmit_buffer>
			break;
 8001550:	e034      	b.n	80015bc <mouseDriver_sendMsg+0x10c>
		case MAVLINK_MSG_ID_MOTOR_SETPOINT:
			mavlink_msg_motor_setpoint_encode(SYS_ID,COMP_ID, &msg, &actual_motor_signal);
 8001552:	f107 020c 	add.w	r2, r7, #12
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <mouseDriver_sendMsg+0x130>)
 8001558:	2100      	movs	r1, #0
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff ff2d 	bl	80013ba <mavlink_msg_motor_setpoint_encode>
			msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4619      	mov	r1, r3
 8001566:	481b      	ldr	r0, [pc, #108]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 8001568:	f7ff fd06 	bl	8000f78 <mavlink_msg_to_send_buffer>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001572:	801a      	strh	r2, [r3, #0]
			main_transmit_buffer(outBuffer, msg_size);
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	4816      	ldr	r0, [pc, #88]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 800157c:	f001 f914 	bl	80027a8 <main_transmit_buffer>
			break;
 8001580:	e01c      	b.n	80015bc <mouseDriver_sendMsg+0x10c>
		case MAVLINK_MSG_ID_SPEED_INFO:
			/* DEMO CODE INIT*/
				actual_speed_measure.time = actual_time;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <mouseDriver_sendMsg+0x120>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <mouseDriver_sendMsg+0x134>)
 8001588:	6013      	str	r3, [r2, #0]
			/* DEMO CODE END*/
			mavlink_msg_speed_info_encode(SYS_ID,COMP_ID, &msg, &actual_speed_measure);
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <mouseDriver_sendMsg+0x134>)
 8001590:	2100      	movs	r1, #0
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fe33 	bl	80011fe <mavlink_msg_speed_info_encode>
			msg_size = mavlink_msg_to_send_buffer(outBuffer, &msg);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 80015a0:	f7ff fcea 	bl	8000f78 <mavlink_msg_to_send_buffer>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 80015aa:	801a      	strh	r2, [r3, #0]
			main_transmit_buffer(outBuffer, msg_size);
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <mouseDriver_sendMsg+0x128>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4808      	ldr	r0, [pc, #32]	; (80015d4 <mouseDriver_sendMsg+0x124>)
 80015b4:	f001 f8f8 	bl	80027a8 <main_transmit_buffer>
			break;
 80015b8:	e000      	b.n	80015bc <mouseDriver_sendMsg+0x10c>
		default:
			break;
 80015ba:	bf00      	nop
	}
}
 80015bc:	bf00      	nop
 80015be:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000030 	.word	0x20000030
 80015d0:	2000002c 	.word	0x2000002c
 80015d4:	20000060 	.word	0x20000060
 80015d8:	20000254 	.word	0x20000254
 80015dc:	20000044 	.word	0x20000044
 80015e0:	20000050 	.word	0x20000050
 80015e4:	20000034 	.word	0x20000034

080015e8 <mouseDriver_init>:
/* Private Idle functions */

/* END of private functions */

/* Init functions */
void mouseDriver_init(void){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	mouseDriver_initTime();
 80015ec:	f7ff ff22 	bl	8001434 <mouseDriver_initTime>
	mouseDriver_initMode();
 80015f0:	f7ff ff2c 	bl	800144c <mouseDriver_initMode>
	mouseDriver_getSpeedFromSensors();
 80015f4:	f7ff ff36 	bl	8001464 <mouseDriver_getSpeedFromSensors>
	mouseDriver_initSetpoint();
 80015f8:	f7ff ff06 	bl	8001408 <mouseDriver_initSetpoint>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <mouseDriver_setTime>:
/* Function set/get */
void mouseDriver_setTime (const uint32_t time){
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	actual_time = time;
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <mouseDriver_setTime+0x1c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000002c 	.word	0x2000002c

08001620 <mouseDriver_getTime>:

uint32_t mouseDriver_getTime (void){
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	return actual_time;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <mouseDriver_getTime+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000002c 	.word	0x2000002c

08001638 <mouseDriver_readMsg>:
/* Message related functions */
void mouseDriver_readMsg(const mavlink_message_t msg){
 8001638:	b084      	sub	sp, #16
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
 800163e:	f107 0c08 	add.w	ip, r7, #8
 8001642:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	switch(msg.msgid){
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800164c:	2b03      	cmp	r3, #3
 800164e:	d004      	beq.n	800165a <mouseDriver_readMsg+0x22>
 8001650:	2b04      	cmp	r3, #4
 8001652:	d015      	beq.n	8001680 <mouseDriver_readMsg+0x48>
 8001654:	2b02      	cmp	r3, #2
 8001656:	d009      	beq.n	800166c <mouseDriver_readMsg+0x34>
	case MAVLINK_MSG_ID_MOTOR_SETPOINT:
		mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
		break;

	default:
		break;
 8001658:	e019      	b.n	800168e <mouseDriver_readMsg+0x56>
		mouseDriver_setMode( mavlink_msg_mode_selection_get_mode(&msg));
 800165a:	f107 0008 	add.w	r0, r7, #8
 800165e:	f7ff fe68 	bl	8001332 <mavlink_msg_mode_selection_get_mode>
 8001662:	4603      	mov	r3, r0
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff13 	bl	8001490 <mouseDriver_setMode>
		break;
 800166a:	e010      	b.n	800168e <mouseDriver_readMsg+0x56>
		if (actual_mode == MOUSE_MODE_SPEED)
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <mouseDriver_readMsg+0x64>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d10b      	bne.n	800168c <mouseDriver_readMsg+0x54>
			mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
 8001674:	490a      	ldr	r1, [pc, #40]	; (80016a0 <mouseDriver_readMsg+0x68>)
 8001676:	f107 0008 	add.w	r0, r7, #8
 800167a:	f7ff fe3f 	bl	80012fc <mavlink_msg_speed_setpoint_decode>
		break;
 800167e:	e005      	b.n	800168c <mouseDriver_readMsg+0x54>
		mavlink_msg_speed_setpoint_decode(&msg, &actual_speed_setpoint);
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <mouseDriver_readMsg+0x68>)
 8001682:	f107 0008 	add.w	r0, r7, #8
 8001686:	f7ff fe39 	bl	80012fc <mavlink_msg_speed_setpoint_decode>
		break;
 800168a:	e000      	b.n	800168e <mouseDriver_readMsg+0x56>
		break;
 800168c:	bf00      	nop
	};
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001696:	b004      	add	sp, #16
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000030 	.word	0x20000030
 80016a0:	20000044 	.word	0x20000044

080016a4 <mouseDriver_idle>:

/* Idle functions */
void mouseDriver_idle (void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	actual_motor_signal.time = actual_time;
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <mouseDriver_idle+0x88>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a20      	ldr	r2, [pc, #128]	; (8001730 <mouseDriver_idle+0x8c>)
 80016ae:	6013      	str	r3, [r2, #0]

	switch(actual_mode){
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <mouseDriver_idle+0x90>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d010      	beq.n	80016da <mouseDriver_idle+0x36>
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d01b      	beq.n	80016f4 <mouseDriver_idle+0x50>
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d11a      	bne.n	80016f6 <mouseDriver_idle+0x52>
	case MOUSE_MODE_STOP:
		mouseDriver_initSetpoint();
 80016c0:	f7ff fea2 	bl	8001408 <mouseDriver_initSetpoint>
		actual_motor_signal.motor_x = 0;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <mouseDriver_idle+0x8c>)
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
		actual_motor_signal.motor_y = 0;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <mouseDriver_idle+0x8c>)
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
		main_stop_motors();
 80016d4:	f001 f880 	bl	80027d8 <main_stop_motors>
		break;
 80016d8:	e00d      	b.n	80016f6 <mouseDriver_idle+0x52>
	case MOUSE_MODE_SPEED:
		/* BEGIN Code for DEMO */
			actual_motor_signal.motor_x = actual_speed_setpoint.setpoint_x;
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <mouseDriver_idle+0x94>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <mouseDriver_idle+0x8c>)
 80016e0:	6053      	str	r3, [r2, #4]
			actual_motor_signal.motor_y = actual_speed_setpoint.setpoint_y;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <mouseDriver_idle+0x94>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <mouseDriver_idle+0x8c>)
 80016e8:	6093      	str	r3, [r2, #8]
		/* END Code for DEMO */
		main_set_motors_speed(actual_motor_signal);
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <mouseDriver_idle+0x8c>)
 80016ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ee:	f001 f881 	bl	80027f4 <main_set_motors_speed>
		break;
 80016f2:	e000      	b.n	80016f6 <mouseDriver_idle+0x52>
	case MOUSE_MODE_AUTO:
		break;
 80016f4:	bf00      	nop
	}
	mouseDriver_sendMsg(MAVLINK_MSG_ID_HEARTBEAT);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff feda 	bl	80014b0 <mouseDriver_sendMsg>
	HAL_Delay(1);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f001 fde5 	bl	80032cc <HAL_Delay>
	mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_SETPOINT);
 8001702:	2002      	movs	r0, #2
 8001704:	f7ff fed4 	bl	80014b0 <mouseDriver_sendMsg>
	HAL_Delay(1);
 8001708:	2001      	movs	r0, #1
 800170a:	f001 fddf 	bl	80032cc <HAL_Delay>
	mouseDriver_sendMsg(MAVLINK_MSG_ID_MOTOR_SETPOINT);
 800170e:	2004      	movs	r0, #4
 8001710:	f7ff fece 	bl	80014b0 <mouseDriver_sendMsg>
	HAL_Delay(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f001 fdd9 	bl	80032cc <HAL_Delay>
	mouseDriver_sendMsg(MAVLINK_MSG_ID_SPEED_INFO);
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff fec8 	bl	80014b0 <mouseDriver_sendMsg>
	HAL_Delay(1);
 8001720:	2001      	movs	r0, #1
 8001722:	f001 fdd3 	bl	80032cc <HAL_Delay>

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000002c 	.word	0x2000002c
 8001730:	20000050 	.word	0x20000050
 8001734:	20000030 	.word	0x20000030
 8001738:	20000044 	.word	0x20000044

0800173c <mouseDriver_controlISR>:

/* ISR Functions */
void mouseDriver_controlISR(void){
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <crc_accumulate>:
{
 800174a:	b480      	push	{r7}
 800174c:	b085      	sub	sp, #20
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	6039      	str	r1, [r7, #0]
 8001754:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4053      	eors	r3, r2
 8001760:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	b25a      	sxtb	r2, r3
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176c:	4053      	eors	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	b29b      	uxth	r3, r3
 800177a:	b21a      	sxth	r2, r3
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21b      	sxth	r3, r3
 8001782:	4053      	eors	r3, r2
 8001784:	b21a      	sxth	r2, r3
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	b21b      	sxth	r3, r3
 800178c:	4053      	eors	r3, r2
 800178e:	b21a      	sxth	r2, r3
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	b2db      	uxtb	r3, r3
 8001796:	b21b      	sxth	r3, r3
 8001798:	4053      	eors	r3, r2
 800179a:	b21b      	sxth	r3, r3
 800179c:	b29a      	uxth	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	801a      	strh	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <crc_init>:
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017bc:	801a      	strh	r2, [r3, #0]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <mavlink_sha256_init>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <mavlink_sha256_init+0x50>)
 80017e4:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <mavlink_sha256_init+0x54>)
 80017ea:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <mavlink_sha256_init+0x58>)
 80017f0:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <mavlink_sha256_init+0x5c>)
 80017f6:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a0c      	ldr	r2, [pc, #48]	; (800182c <mavlink_sha256_init+0x60>)
 80017fc:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <mavlink_sha256_init+0x64>)
 8001802:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <mavlink_sha256_init+0x68>)
 8001808:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <mavlink_sha256_init+0x6c>)
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	6a09e667 	.word	0x6a09e667
 8001820:	bb67ae85 	.word	0xbb67ae85
 8001824:	3c6ef372 	.word	0x3c6ef372
 8001828:	a54ff53a 	.word	0xa54ff53a
 800182c:	510e527f 	.word	0x510e527f
 8001830:	9b05688c 	.word	0x9b05688c
 8001834:	1f83d9ab 	.word	0x1f83d9ab
 8001838:	5be0cd19 	.word	0x5be0cd19

0800183c <mavlink_sha256_calc>:
{
 800183c:	b480      	push	{r7}
 800183e:	b0cf      	sub	sp, #316	; 0x13c
 8001840:	af00      	add	r7, sp, #0
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	6018      	str	r0, [r3, #0]
 8001846:	463b      	mov	r3, r7
 8001848:	6019      	str	r1, [r3, #0]
    AA = A;
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for (i = 0; i < 16; ++i)
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018a0:	e011      	b.n	80018c6 <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 80018a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	463a      	mov	r2, r7
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	4413      	add	r3, r2
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80018bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018c0:	3301      	adds	r3, #1
 80018c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	dde9      	ble.n	80018a2 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80018ce:	2310      	movs	r3, #16
 80018d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018d4:	e057      	b.n	8001986 <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80018d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018da:	1e9a      	subs	r2, r3, #2
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e4:	ea4f 4273 	mov.w	r2, r3, ror #17
 80018e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ec:	1e99      	subs	r1, r3, #2
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018f6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80018fa:	405a      	eors	r2, r3
 80018fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001900:	1e99      	subs	r1, r3, #2
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800190a:	0a9b      	lsrs	r3, r3, #10
 800190c:	405a      	eors	r2, r3
 800190e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001912:	1fd9      	subs	r1, r3, #7
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800191c:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800191e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001922:	f1a3 010f 	sub.w	r1, r3, #15
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800192e:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8001932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001936:	f1a3 000f 	sub.w	r0, r3, #15
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001942:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001946:	4059      	eors	r1, r3
 8001948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800194c:	f1a3 000f 	sub.w	r0, r3, #15
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800195c:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800195e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001962:	f1a3 0110 	sub.w	r1, r3, #16
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800196e:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 800197c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001980:	3301      	adds	r3, #1
 8001982:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800198a:	2b3f      	cmp	r3, #63	; 0x3f
 800198c:	dda3      	ble.n	80018d6 <mavlink_sha256_calc+0x9a>
    for (i = 0; i < 64; i++) {
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001994:	e076      	b.n	8001a84 <mavlink_sha256_calc+0x248>
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001996:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800199a:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800199e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019a2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80019a6:	405a      	eors	r2, r3
 80019a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019ac:	ea4f 6373 	mov.w	r3, r3, ror #25
 80019b0:	405a      	eors	r2, r3
 80019b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019b6:	441a      	add	r2, r3
 80019b8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80019bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019c0:	4019      	ands	r1, r3
 80019c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019c6:	43d8      	mvns	r0, r3
 80019c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80019cc:	4003      	ands	r3, r0
 80019ce:	404b      	eors	r3, r1
 80019d0:	441a      	add	r2, r3
 80019d2:	4956      	ldr	r1, [pc, #344]	; (8001b2c <mavlink_sha256_calc+0x2f0>)
 80019d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019dc:	441a      	add	r2, r3
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80019e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019ea:	4413      	add	r3, r2
 80019ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80019f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019f4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80019f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019fc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001a00:	405a      	eors	r2, r3
 8001a02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a06:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001a0a:	405a      	eors	r2, r3
 8001a0c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a14:	4059      	eors	r1, r3
 8001a16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a1a:	4019      	ands	r1, r3
 8001a1c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a24:	4003      	ands	r3, r0
 8001a26:	404b      	eors	r3, r1
 8001a28:	4413      	add	r3, r2
 8001a2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	HH = GG;
 8001a2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8001a36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8001a3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8001a46:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001a4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a4e:	4413      	add	r3, r2
 8001a50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8001a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8001a5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8001a64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8001a6c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a74:	4413      	add	r3, r2
 8001a76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8001a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a88:	2b3f      	cmp	r3, #63	; 0x3f
 8001a8a:	dd84      	ble.n	8001996 <mavlink_sha256_calc+0x15a>
    A += AA;
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a96:	441a      	add	r2, r3
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	609a      	str	r2, [r3, #8]
    B += BB;
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001aa8:	441a      	add	r2, r3
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60da      	str	r2, [r3, #12]
    C += CC;
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001aba:	441a      	add	r2, r3
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	611a      	str	r2, [r3, #16]
    D += DD;
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001acc:	441a      	add	r2, r3
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	615a      	str	r2, [r3, #20]
    E += EE;
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ade:	441a      	add	r2, r3
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	619a      	str	r2, [r3, #24]
    F += FF;
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001af0:	441a      	add	r2, r3
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61da      	str	r2, [r3, #28]
    G += GG;
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a1a      	ldr	r2, [r3, #32]
 8001afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001b02:	441a      	add	r2, r3
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	621a      	str	r2, [r3, #32]
    H += HH;
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b14:	441a      	add	r2, r3
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b1c:	bf00      	nop
 8001b1e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	0800791c 	.word	0x0800791c

08001b30 <mavlink_sha256_update>:
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b09c      	sub	sp, #112	; 0x70
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	65fb      	str	r3, [r7, #92]	; 0x5c
    m->sz[0] += len * 8;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	441a      	add	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d904      	bls.n	8001b68 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b70:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001b72:	e054      	b.n	8001c1e <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8001b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b76:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b7a:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d201      	bcs.n	8001b88 <mavlink_sha256_update+0x58>
            l = len;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	667b      	str	r3, [r7, #100]	; 0x64
	memcpy(m->u.save_bytes + offset, p, l);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b90:	4413      	add	r3, r2
 8001b92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001b96:	4618      	mov	r0, r3
 8001b98:	f005 fe21 	bl	80077de <memcpy>
	offset += l;
 8001b9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ba0:	4413      	add	r3, r2
 8001ba2:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8001ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ba8:	4413      	add	r3, r2
 8001baa:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bb6:	2b40      	cmp	r3, #64	; 0x40
 8001bb8:	d131      	bne.n	8001c1e <mavlink_sha256_update+0xee>
	    const uint32_t *u = m->u.save_u32;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3328      	adds	r3, #40	; 0x28
 8001bbe:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8001bc4:	e020      	b.n	8001c08 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bcc:	4413      	add	r3, r2
 8001bce:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001bd0:	f107 0210 	add.w	r2, r7, #16
 8001bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bde:	78da      	ldrb	r2, [r3, #3]
 8001be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be2:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be6:	3301      	adds	r3, #1
 8001be8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bea:	7892      	ldrb	r2, [r2, #2]
 8001bec:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8001bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bf4:	7852      	ldrb	r2, [r2, #1]
 8001bf6:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8001bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bfa:	3303      	adds	r3, #3
 8001bfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c04:	3301      	adds	r3, #1
 8001c06:	663b      	str	r3, [r7, #96]	; 0x60
 8001c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	dddb      	ble.n	8001bc6 <mavlink_sha256_update+0x96>
	    mavlink_sha256_calc(m, current);
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	4619      	mov	r1, r3
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7ff fe11 	bl	800183c <mavlink_sha256_calc>
	    offset = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1a7      	bne.n	8001b74 <mavlink_sha256_update+0x44>
}
 8001c24:	bf00      	nop
 8001c26:	3770      	adds	r7, #112	; 0x70
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <mavlink_sha256_final_48>:
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b098      	sub	sp, #96	; 0x60
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
    unsigned offset = (m->sz[0] / 8) % 64;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c40:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c44:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8001c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3308      	adds	r3, #8
 8001c54:	657b      	str	r3, [r7, #84]	; 0x54
    *zeros = 0x80;
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	3301      	adds	r3, #1
 8001c60:	2247      	movs	r2, #71	; 0x47
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fdc5 	bl	80077f4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c70:	3307      	adds	r3, #7
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c78:	440b      	add	r3, r1
 8001c7a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0a1a      	lsrs	r2, r3, #8
 8001c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c86:	3306      	adds	r3, #6
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c8e:	440b      	add	r3, r1
 8001c90:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0c1a      	lsrs	r2, r3, #16
 8001c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c9c:	3305      	adds	r3, #5
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0e1a      	lsrs	r2, r3, #24
 8001cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001cba:	440b      	add	r3, r1
 8001cbc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001cce:	440b      	add	r3, r1
 8001cd0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0a1a      	lsrs	r2, r3, #8
 8001cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cdc:	3302      	adds	r3, #2
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0c1a      	lsrs	r2, r3, #16
 8001cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0e1b      	lsrs	r3, r3, #24
 8001d06:	b2d9      	uxtb	r1, r3
 8001d08:	f107 020c 	add.w	r2, r7, #12
 8001d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d0e:	4413      	add	r3, r2
 8001d10:	460a      	mov	r2, r1
 8001d12:	701a      	strb	r2, [r3, #0]
    mavlink_sha256_update(m, zeros, dstart + 8);
 8001d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d16:	f103 0208 	add.w	r2, r3, #8
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff05 	bl	8001b30 <mavlink_sha256_update>
    result[0] = p[3];
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	78da      	ldrb	r2, [r3, #3]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d34:	7892      	ldrb	r2, [r2, #2]
 8001d36:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d3e:	7852      	ldrb	r2, [r2, #1]
 8001d40:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	3303      	adds	r3, #3
 8001d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d52:	79d2      	ldrb	r2, [r2, #7]
 8001d54:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	3305      	adds	r3, #5
 8001d5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d5c:	7992      	ldrb	r2, [r2, #6]
 8001d5e:	701a      	strb	r2, [r3, #0]
}
 8001d60:	bf00      	nop
 8001d62:	3760      	adds	r7, #96	; 0x60
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <mavlink_get_channel_status>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <mavlink_get_channel_status+0x24>)
 8001d7e:	4413      	add	r3, r2
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	20000748 	.word	0x20000748

08001d90 <mavlink_get_channel_buffer>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_buffer[chan];
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f240 1223 	movw	r2, #291	; 0x123
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	4a03      	ldr	r2, [pc, #12]	; (8001db4 <mavlink_get_channel_buffer+0x24>)
 8001da6:	4413      	add	r3, r2
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	200002bc 	.word	0x200002bc

08001db8 <mavlink_signature_check>:
{
 8001db8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001dbc:	b0aa      	sub	sp, #168	; 0xa8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <mavlink_signature_check+0x18>
		return true;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e121      	b.n	8002014 <mavlink_signature_check+0x25c>
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001de6:	3307      	adds	r3, #7
 8001de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_init(&ctx);
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fceb 	bl	80017cc <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f103 0110 	add.w	r1, r3, #16
 8001dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e00:	2220      	movs	r2, #32
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fe94 	bl	8001b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	78db      	ldrb	r3, [r3, #3]
 8001e0c:	330a      	adds	r3, #10
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e14:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fe89 	bl	8001b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8001e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fe80 	bl	8001b30 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8001e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e34:	2207      	movs	r2, #7
 8001e36:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fe78 	bl	8001b30 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8001e40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff feee 	bl	8001c2c <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	2206      	movs	r2, #6
 8001e56:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 fcb0 	bl	80077c0 <memcmp>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <mavlink_signature_check+0xb2>
		return false;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e0d4      	b.n	8002014 <mavlink_signature_check+0x25c>
	uint8_t link_id = psig[0];
 8001e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	f04f 0400 	mov.w	r4, #0
 8001e7c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e84:	1c59      	adds	r1, r3, #1
 8001e86:	f107 0318 	add.w	r3, r7, #24
 8001e8a:	2206      	movs	r2, #6
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f005 fca6 	bl	80077de <memcpy>
	if (signing_streams == NULL) {
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <mavlink_signature_check+0xe4>
		return false;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e0bb      	b.n	8002014 <mavlink_signature_check+0x25c>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001ea2:	e02b      	b.n	8001efc <mavlink_signature_check+0x144>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	79d9      	ldrb	r1, [r3, #7]
 8001ea8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001eac:	68b8      	ldr	r0, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4403      	add	r3, r0
 8001eb6:	3303      	adds	r3, #3
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4299      	cmp	r1, r3
 8001ebc:	d119      	bne.n	8001ef2 <mavlink_signature_check+0x13a>
		    msg->compid == signing_streams->stream[i].compid &&
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7a19      	ldrb	r1, [r3, #8]
 8001ec2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ec6:	68b8      	ldr	r0, [r7, #8]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	4403      	add	r3, r0
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001ed4:	4299      	cmp	r1, r3
 8001ed6:	d10c      	bne.n	8001ef2 <mavlink_signature_check+0x13a>
		    link_id == signing_streams->stream[i].link_id) {
 8001ed8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001eea:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d00b      	beq.n	8001f0a <mavlink_signature_check+0x152>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001ef2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d3cd      	bcc.n	8001ea4 <mavlink_signature_check+0xec>
 8001f08:	e000      	b.n	8001f0c <mavlink_signature_check+0x154>
			break;
 8001f0a:	bf00      	nop
	if (i == signing_streams->num_signing_streams) {
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d141      	bne.n	8001f9c <mavlink_signature_check+0x1e4>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d901      	bls.n	8001f24 <mavlink_signature_check+0x16c>
			return false;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e077      	b.n	8002014 <mavlink_signature_check+0x25c>
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001f24:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f28:	493d      	ldr	r1, [pc, #244]	; (8002020 <mavlink_signature_check+0x268>)
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	eb11 0b03 	adds.w	fp, r1, r3
 8001f32:	eb42 0c04 	adc.w	ip, r2, r4
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001f3c:	45a4      	cmp	ip, r4
 8001f3e:	bf08      	it	eq
 8001f40:	459b      	cmpeq	fp, r3
 8001f42:	d201      	bcs.n	8001f48 <mavlink_signature_check+0x190>
			return false;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e065      	b.n	8002014 <mavlink_signature_check+0x25c>
		signing_streams->stream[i].sysid = msg->sysid;
 8001f48:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	79d8      	ldrb	r0, [r3, #7]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	3303      	adds	r3, #3
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001f60:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7a18      	ldrb	r0, [r3, #8]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	3304      	adds	r3, #4
 8001f74:	4602      	mov	r2, r0
 8001f76:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001f78:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	3302      	adds	r3, #2
 8001f88:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001f8c:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	e01d      	b.n	8001fd8 <mavlink_signature_check+0x220>
		last_tstamp.t64 = 0;
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	f04f 0400 	mov.w	r4, #0
 8001fa4:	e9c7 3404 	strd	r3, r4, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001fa8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	1d59      	adds	r1, r3, #5
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	2206      	movs	r2, #6
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f005 fc0d 	bl	80077de <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001fc4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001fcc:	42a2      	cmp	r2, r4
 8001fce:	bf08      	it	eq
 8001fd0:	4299      	cmpeq	r1, r3
 8001fd2:	d301      	bcc.n	8001fd8 <mavlink_signature_check+0x220>
			return false;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e01d      	b.n	8002014 <mavlink_signature_check+0x25c>
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001fd8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	1d58      	adds	r0, r3, #5
 8001fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fec:	3301      	adds	r3, #1
 8001fee:	2206      	movs	r2, #6
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f005 fbf4 	bl	80077de <memcpy>
	if (tstamp.t64 > signing->timestamp) {
 8001ff6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8002000:	42a2      	cmp	r2, r4
 8002002:	bf08      	it	eq
 8002004:	4299      	cmpeq	r1, r3
 8002006:	d204      	bcs.n	8002012 <mavlink_signature_check+0x25a>
		signing->timestamp = tstamp.t64;
 8002008:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	return true;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	37a8      	adds	r7, #168	; 0xa8
 8002018:	46bd      	mov	sp, r7
 800201a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800201e:	bf00      	nop
 8002020:	005b8d80 	.word	0x005b8d80

08002024 <_mav_parse_error>:
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	789b      	ldrb	r3, [r3, #2]
 8002030:	3301      	adds	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	709a      	strb	r2, [r3, #2]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8002050:	f107 030e 	add.w	r3, r7, #14
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fbaa 	bl	80017ae <crc_init>
	msg->checksum = crcTmp;
 800205a:	89fa      	ldrh	r2, [r7, #14]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	801a      	strh	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 800207c:	f107 020e 	add.w	r2, r7, #14
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fb60 	bl	800174a <crc_accumulate>
	msg->checksum = checksum;
 800208a:	89fa      	ldrh	r2, [r7, #14]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	801a      	strh	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	2304      	movs	r3, #4
 80020a6:	613b      	str	r3, [r7, #16]
        while (low < high) {
 80020a8:	e025      	b.n	80020f6 <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	3301      	adds	r3, #1
 80020b2:	085b      	lsrs	r3, r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80020b6:	491f      	ldr	r1, [pc, #124]	; (8002134 <mavlink_get_msg_entry+0x9c>)
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d203      	bcs.n	80020d4 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	613b      	str	r3, [r7, #16]
                continue;
 80020d2:	e010      	b.n	80020f6 <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80020d4:	4917      	ldr	r1, [pc, #92]	; (8002134 <mavlink_get_msg_entry+0x9c>)
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d902      	bls.n	80020f0 <mavlink_get_msg_entry+0x58>
                low = mid;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	617b      	str	r3, [r7, #20]
                continue;
 80020ee:	e002      	b.n	80020f6 <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	617b      	str	r3, [r7, #20]
            break;
 80020f4:	e003      	b.n	80020fe <mavlink_get_msg_entry+0x66>
        while (low < high) {
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d3d5      	bcc.n	80020aa <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <mavlink_get_msg_entry+0x9c>)
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	e006      	b.n	8002126 <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <mavlink_get_msg_entry+0x9c>)
 8002124:	4413      	add	r3, r2
}
 8002126:	4618      	mov	r0, r3
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	08007a1c 	.word	0x08007a1c

08002138 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	78db      	ldrb	r3, [r3, #3]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	f200 826e 	bhi.w	8002638 <mavlink_frame_char_buffer+0x500>
 800215c:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <mavlink_frame_char_buffer+0x2c>)
 800215e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002162:	bf00      	nop
 8002164:	080021a5 	.word	0x080021a5
 8002168:	080021a5 	.word	0x080021a5
 800216c:	08002203 	.word	0x08002203
 8002170:	08002269 	.word	0x08002269
 8002174:	080022a1 	.word	0x080022a1
 8002178:	080022b9 	.word	0x080022b9
 800217c:	080022d1 	.word	0x080022d1
 8002180:	080022e9 	.word	0x080022e9
 8002184:	08002301 	.word	0x08002301
 8002188:	0800235b 	.word	0x0800235b
 800218c:	080023a7 	.word	0x080023a7
 8002190:	08002403 	.word	0x08002403
 8002194:	0800243b 	.word	0x0800243b
 8002198:	080024c7 	.word	0x080024c7
 800219c:	080024c7 	.word	0x080024c7
 80021a0:	08002583 	.word	0x08002583
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	2bfd      	cmp	r3, #253	; 0xfd
 80021a8:	d113      	bne.n	80021d2 <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2202      	movs	r2, #2
 80021ae:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	7b1b      	ldrb	r3, [r3, #12]
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f7ff ff3a 	bl	8002044 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 80021d0:	e229      	b.n	8002626 <mavlink_frame_char_buffer+0x4ee>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2bfe      	cmp	r3, #254	; 0xfe
 80021d6:	f040 8226 	bne.w	8002626 <mavlink_frame_char_buffer+0x4ee>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2202      	movs	r2, #2
 80021de:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	79fa      	ldrb	r2, [r7, #7]
 80021ea:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	7b1b      	ldrb	r3, [r3, #12]
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff ff22 	bl	8002044 <mavlink_start_checksum>
		break;
 8002200:	e211      	b.n	8002626 <mavlink_frame_char_buffer+0x4ee>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00f      	beq.n	800222a <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	3301      	adds	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8002216:	68b8      	ldr	r0, [r7, #8]
 8002218:	f7ff ff04 	bl	8002024 <_mav_parse_error>
			status->msg_received = 0;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2201      	movs	r2, #1
 8002226:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8002228:	e206      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
			rxmsg->len = c;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	79fa      	ldrb	r2, [r7, #7]
 800222e:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	4619      	mov	r1, r3
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff ff14 	bl	8002068 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	7b1b      	ldrb	r3, [r3, #12]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2205      	movs	r2, #5
 800225c:	70da      	strb	r2, [r3, #3]
		break;
 800225e:	e1eb      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2203      	movs	r2, #3
 8002264:	70da      	strb	r2, [r3, #3]
		break;
 8002266:	e1e7      	b.n	8002638 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	79fa      	ldrb	r2, [r7, #7]
 800226c:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	791b      	ldrb	r3, [r3, #4]
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 800227a:	68b8      	ldr	r0, [r7, #8]
 800227c:	f7ff fed2 	bl	8002024 <_mav_parse_error>
			status->msg_received = 0;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2201      	movs	r2, #1
 800228a:	70da      	strb	r2, [r3, #3]
			break;
 800228c:	e1d4      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
		}
		mavlink_update_checksum(rxmsg, c);
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	4619      	mov	r1, r3
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7ff fee8 	bl	8002068 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2204      	movs	r2, #4
 800229c:	70da      	strb	r2, [r3, #3]
		break;
 800229e:	e1cb      	b.n	8002638 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4619      	mov	r1, r3
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff fedc 	bl	8002068 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2205      	movs	r2, #5
 80022b4:	70da      	strb	r2, [r3, #3]
		break;
 80022b6:	e1bf      	b.n	8002638 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	4619      	mov	r1, r3
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7ff fed0 	bl	8002068 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2206      	movs	r2, #6
 80022cc:	70da      	strb	r2, [r3, #3]
		break;
 80022ce:	e1b3      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	79fa      	ldrb	r2, [r7, #7]
 80022d4:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	4619      	mov	r1, r3
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f7ff fec4 	bl	8002068 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2207      	movs	r2, #7
 80022e4:	70da      	strb	r2, [r3, #3]
		break;
 80022e6:	e1a7      	b.n	8002638 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	79fa      	ldrb	r2, [r7, #7]
 80022ec:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4619      	mov	r1, r3
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff feb8 	bl	8002068 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2208      	movs	r2, #8
 80022fc:	70da      	strb	r2, [r3, #3]
		break;
 80022fe:	e19b      	b.n	8002638 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	b2d9      	uxtb	r1, r3
 800230a:	2000      	movs	r0, #0
 800230c:	4301      	orrs	r1, r0
 800230e:	7251      	strb	r1, [r2, #9]
 8002310:	0a19      	lsrs	r1, r3, #8
 8002312:	b2c9      	uxtb	r1, r1
 8002314:	2000      	movs	r0, #0
 8002316:	4301      	orrs	r1, r0
 8002318:	7291      	strb	r1, [r2, #10]
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2100      	movs	r1, #0
 8002320:	430b      	orrs	r3, r1
 8002322:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	4619      	mov	r1, r3
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fe9d 	bl	8002068 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	7b1b      	ldrb	r3, [r3, #12]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	78db      	ldrb	r3, [r3, #3]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	220b      	movs	r2, #11
 8002346:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8002348:	e176      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	220c      	movs	r2, #12
 800234e:	70da      	strb	r2, [r3, #3]
		break;
 8002350:	e172      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2209      	movs	r2, #9
 8002356:	70da      	strb	r2, [r3, #3]
		break;
 8002358:	e16e      	b.n	8002638 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	7a5a      	ldrb	r2, [r3, #9]
 800235e:	7a99      	ldrb	r1, [r3, #10]
 8002360:	0209      	lsls	r1, r1, #8
 8002362:	430a      	orrs	r2, r1
 8002364:	7adb      	ldrb	r3, [r3, #11]
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	4313      	orrs	r3, r2
 800236a:	461a      	mov	r2, r3
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	4313      	orrs	r3, r2
 8002372:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	b2d1      	uxtb	r1, r2
 800237a:	2000      	movs	r0, #0
 800237c:	4301      	orrs	r1, r0
 800237e:	7259      	strb	r1, [r3, #9]
 8002380:	0a11      	lsrs	r1, r2, #8
 8002382:	b2c9      	uxtb	r1, r1
 8002384:	2000      	movs	r0, #0
 8002386:	4301      	orrs	r1, r0
 8002388:	7299      	strb	r1, [r3, #10]
 800238a:	0c12      	lsrs	r2, r2, #16
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	2100      	movs	r1, #0
 8002390:	430a      	orrs	r2, r1
 8002392:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	4619      	mov	r1, r3
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7ff fe65 	bl	8002068 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	220a      	movs	r2, #10
 80023a2:	70da      	strb	r2, [r3, #3]
		break;
 80023a4:	e148      	b.n	8002638 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	7a5a      	ldrb	r2, [r3, #9]
 80023aa:	7a99      	ldrb	r1, [r3, #10]
 80023ac:	0209      	lsls	r1, r1, #8
 80023ae:	430a      	orrs	r2, r1
 80023b0:	7adb      	ldrb	r3, [r3, #11]
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	4313      	orrs	r3, r2
 80023b6:	461a      	mov	r2, r3
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	4313      	orrs	r3, r2
 80023be:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	b2d1      	uxtb	r1, r2
 80023c6:	2000      	movs	r0, #0
 80023c8:	4301      	orrs	r1, r0
 80023ca:	7259      	strb	r1, [r3, #9]
 80023cc:	0a11      	lsrs	r1, r2, #8
 80023ce:	b2c9      	uxtb	r1, r1
 80023d0:	2000      	movs	r0, #0
 80023d2:	4301      	orrs	r1, r0
 80023d4:	7299      	strb	r1, [r3, #10]
 80023d6:	0c12      	lsrs	r2, r2, #16
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	2100      	movs	r1, #0
 80023dc:	430a      	orrs	r2, r1
 80023de:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	4619      	mov	r1, r3
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff fe3f 	bl	8002068 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	78db      	ldrb	r3, [r3, #3]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	220b      	movs	r2, #11
 80023f6:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 80023f8:	e11e      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	220c      	movs	r2, #12
 80023fe:	70da      	strb	r2, [r3, #3]
		break;
 8002400:	e11a      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f103 020c 	add.w	r2, r3, #12
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	791b      	ldrb	r3, [r3, #4]
 800240c:	1c59      	adds	r1, r3, #1
 800240e:	b2c8      	uxtb	r0, r1
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	7108      	strb	r0, [r1, #4]
 8002414:	4413      	add	r3, r2
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4619      	mov	r1, r3
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f7ff fe22 	bl	8002068 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	791a      	ldrb	r2, [r3, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	78db      	ldrb	r3, [r3, #3]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 80fc 	bne.w	800262a <mavlink_frame_char_buffer+0x4f2>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	220c      	movs	r2, #12
 8002436:	70da      	strb	r2, [r3, #3]
		}
		break;
 8002438:	e0f7      	b.n	800262a <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	7a5a      	ldrb	r2, [r3, #9]
 800243e:	7a99      	ldrb	r1, [r3, #10]
 8002440:	0209      	lsls	r1, r1, #8
 8002442:	430a      	orrs	r2, r1
 8002444:	7adb      	ldrb	r3, [r3, #11]
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	4313      	orrs	r3, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe24 	bl	8002098 <mavlink_get_msg_entry>
 8002450:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <mavlink_frame_char_buffer+0x326>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	e000      	b.n	8002460 <mavlink_frame_char_buffer+0x328>
 800245e:	2300      	movs	r3, #0
 8002460:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	4619      	mov	r1, r3
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff fdfe 	bl	8002068 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 800246c:	79fa      	ldrb	r2, [r7, #7]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	429a      	cmp	r2, r3
 8002478:	d003      	beq.n	8002482 <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	220e      	movs	r2, #14
 800247e:	70da      	strb	r2, [r3, #3]
 8002480:	e002      	b.n	8002488 <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	220d      	movs	r2, #13
 8002486:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80cb 	beq.w	800262e <mavlink_frame_char_buffer+0x4f6>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	791a      	ldrb	r2, [r3, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	799b      	ldrb	r3, [r3, #6]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f080 80c4 	bcs.w	800262e <mavlink_frame_char_buffer+0x4f6>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	330c      	adds	r3, #12
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	7912      	ldrb	r2, [r2, #4]
 80024ae:	1898      	adds	r0, r3, r2
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	799b      	ldrb	r3, [r3, #6]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	791b      	ldrb	r3, [r3, #4]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f005 f998 	bl	80077f4 <memset>
		}
		break;
 80024c4:	e0b3      	b.n	800262e <mavlink_frame_char_buffer+0x4f6>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	2b0e      	cmp	r3, #14
 80024cc:	d008      	beq.n	80024e0 <mavlink_frame_char_buffer+0x3a8>
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	b29b      	uxth	r3, r3
 80024dc:	429a      	cmp	r2, r3
 80024de:	d003      	beq.n	80024e8 <mavlink_frame_char_buffer+0x3b0>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2202      	movs	r2, #2
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e002      	b.n	80024ee <mavlink_frame_char_buffer+0x3b6>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00e      	beq.n	8002520 <mavlink_frame_char_buffer+0x3e8>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	220f      	movs	r2, #15
 8002506:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	220d      	movs	r2, #13
 800250c:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b02      	cmp	r3, #2
 8002514:	f000 808d 	beq.w	8002632 <mavlink_frame_char_buffer+0x4fa>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 800251e:	e088      	b.n	8002632 <mavlink_frame_char_buffer+0x4fa>
			if (status->signing &&
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01f      	beq.n	8002568 <mavlink_frame_char_buffer+0x430>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	d013      	beq.n	800255a <mavlink_frame_char_buffer+0x422>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	7a59      	ldrb	r1, [r3, #9]
 800253c:	7a98      	ldrb	r0, [r3, #10]
 800253e:	0200      	lsls	r0, r0, #8
 8002540:	4301      	orrs	r1, r0
 8002542:	7adb      	ldrb	r3, [r3, #11]
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	430b      	orrs	r3, r1
 8002548:	4619      	mov	r1, r3
 800254a:	68b8      	ldr	r0, [r7, #8]
 800254c:	4790      	blx	r2
 800254e:	4603      	mov	r3, r0
 8002550:	f083 0301 	eor.w	r3, r3, #1
 8002554:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <mavlink_frame_char_buffer+0x430>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d002      	beq.n	8002568 <mavlink_frame_char_buffer+0x430>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2203      	movs	r2, #3
 8002566:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2201      	movs	r2, #1
 800256c:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d05e      	beq.n	8002632 <mavlink_frame_char_buffer+0x4fa>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002574:	f240 1223 	movw	r2, #291	; 0x123
 8002578:	68f9      	ldr	r1, [r7, #12]
 800257a:	6838      	ldr	r0, [r7, #0]
 800257c:	f005 f92f 	bl	80077de <memcpy>
		break;
 8002580:	e057      	b.n	8002632 <mavlink_frame_char_buffer+0x4fa>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	7b5b      	ldrb	r3, [r3, #13]
 8002586:	f1c3 030d 	rsb	r3, r3, #13
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	7b5b      	ldrb	r3, [r3, #13]
 8002598:	3b01      	subs	r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	7b5b      	ldrb	r3, [r3, #13]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d146      	bne.n	8002636 <mavlink_frame_char_buffer+0x4fe>
			// we have the whole signature, check it is OK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6918      	ldr	r0, [r3, #16]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7ff fc00 	bl	8001db8 <mavlink_signature_check>
 80025b8:	4603      	mov	r3, r0
 80025ba:	77fb      	strb	r3, [r7, #31]
			if (!sig_ok &&
 80025bc:	7ffb      	ldrb	r3, [r7, #31]
 80025be:	f083 0301 	eor.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d017      	beq.n	80025f8 <mavlink_frame_char_buffer+0x4c0>
			   	(status->signing->accept_unsigned_callback &&
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d012      	beq.n	80025f8 <mavlink_frame_char_buffer+0x4c0>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	7a59      	ldrb	r1, [r3, #9]
 80025dc:	7a98      	ldrb	r0, [r3, #10]
 80025de:	0200      	lsls	r0, r0, #8
 80025e0:	4301      	orrs	r1, r0
 80025e2:	7adb      	ldrb	r3, [r3, #11]
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	430b      	orrs	r3, r1
 80025e8:	4619      	mov	r1, r3
 80025ea:	68b8      	ldr	r0, [r7, #8]
 80025ec:	4790      	blx	r2
 80025ee:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <mavlink_frame_char_buffer+0x4c0>
				// accepted via application level override
				sig_ok = true;
 80025f4:	2301      	movs	r3, #1
 80025f6:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 80025f8:	7ffb      	ldrb	r3, [r7, #31]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <mavlink_frame_char_buffer+0x4ce>
				status->msg_received = MAVLINK_FRAMING_OK;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e002      	b.n	800260c <mavlink_frame_char_buffer+0x4d4>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2203      	movs	r2, #3
 800260a:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2201      	movs	r2, #1
 8002610:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00e      	beq.n	8002636 <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002618:	f240 1223 	movw	r2, #291	; 0x123
 800261c:	68f9      	ldr	r1, [r7, #12]
 800261e:	6838      	ldr	r0, [r7, #0]
 8002620:	f005 f8dd 	bl	80077de <memcpy>
			}
		}
		break;
 8002624:	e007      	b.n	8002636 <mavlink_frame_char_buffer+0x4fe>
		break;
 8002626:	bf00      	nop
 8002628:	e006      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
		break;
 800262a:	bf00      	nop
 800262c:	e004      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
		break;
 800262e:	bf00      	nop
 8002630:	e002      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
		break;
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <mavlink_frame_char_buffer+0x500>
		break;
 8002636:	bf00      	nop
	}

	bufferIndex++;
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	3301      	adds	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d110      	bne.n	8002668 <mavlink_frame_char_buffer+0x530>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	799a      	ldrb	r2, [r3, #6]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	891b      	ldrh	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <mavlink_frame_char_buffer+0x524>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	891b      	ldrh	r3, [r3, #8]
 8002660:	3301      	adds	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <mavlink_frame_char_buffer+0x53e>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	78da      	ldrb	r2, [r3, #3]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01a      	beq.n	80026b2 <mavlink_frame_char_buffer+0x57a>
           r_mavlink_status->parse_state = status->parse_state;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	78da      	ldrb	r2, [r3, #3]
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	791a      	ldrb	r2, [r3, #4]
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	795b      	ldrb	r3, [r3, #5]
 8002690:	3301      	adds	r3, #1
 8002692:	b2da      	uxtb	r2, r3
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	891a      	ldrh	r2, [r3, #8]
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	789b      	ldrb	r3, [r3, #2]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	7b1a      	ldrb	r2, [r3, #12]
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d110      	bne.n	80026e2 <mavlink_frame_char_buffer+0x5aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <mavlink_frame_char_buffer+0x5aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	4313      	orrs	r3, r2
 80026da:	b21b      	sxth	r3, r3
 80026dc:	b29a      	uxth	r2, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop

080026f0 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60ba      	str	r2, [r7, #8]
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	4603      	mov	r3, r0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	460b      	mov	r3, r1
 8002700:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fb43 	bl	8001d90 <mavlink_get_channel_buffer>
 800270a:	4604      	mov	r4, r0
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fb2a 	bl	8001d68 <mavlink_get_channel_status>
 8002714:	4601      	mov	r1, r0
 8002716:	7bba      	ldrb	r2, [r7, #14]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff fd0a 	bl	8002138 <mavlink_frame_char_buffer>
 8002724:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bd90      	pop	{r4, r7, pc}

0800272e <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b088      	sub	sp, #32
 8002732:	af00      	add	r7, sp, #0
 8002734:	60ba      	str	r2, [r7, #8]
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	460b      	mov	r3, r1
 800273e:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8002740:	7bb9      	ldrb	r1, [r7, #14]
 8002742:	7bf8      	ldrb	r0, [r7, #15]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f7ff ffd2 	bl	80026f0 <mavlink_frame_char>
 800274c:	4603      	mov	r3, r0
 800274e:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8002750:	7ffb      	ldrb	r3, [r7, #31]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d002      	beq.n	800275c <mavlink_parse_char+0x2e>
 8002756:	7ffb      	ldrb	r3, [r7, #31]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d120      	bne.n	800279e <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fb16 	bl	8001d90 <mavlink_get_channel_buffer>
 8002764:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fafd 	bl	8001d68 <mavlink_get_channel_status>
 800276e:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8002770:	6978      	ldr	r0, [r7, #20]
 8002772:	f7ff fc57 	bl	8002024 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2201      	movs	r2, #1
 8002780:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	2bfd      	cmp	r3, #253	; 0xfd
 8002786:	d108      	bne.n	800279a <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2202      	movs	r2, #2
 800278c:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2200      	movs	r2, #0
 8002792:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8002794:	69b8      	ldr	r0, [r7, #24]
 8002796:	f7ff fc55 	bl	8002044 <mavlink_start_checksum>
	    }
	    return 0;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <mavlink_parse_char+0x72>
    }
    return msg_received;
 800279e:	7ffb      	ldrb	r3, [r7, #31]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <main_transmit_buffer>:
static void MX_USART2_UART_Init(void);
static void MX_TIM7_Init(void);
static void MX_TIM1_Init(void);
static void MX_DMA_Init(void);
/* USER CODE BEGIN PFP */
void main_transmit_buffer(uint8_t *outBuffer, uint16_t msg_size){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
	tx_finish = 0;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <main_transmit_buffer+0x28>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart2, outBuffer,msg_size);
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	461a      	mov	r2, r3
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <main_transmit_buffer+0x2c>)
 80027c2:	f004 f815 	bl	80067f0 <HAL_UART_Transmit_DMA>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000001 	.word	0x20000001
 80027d4:	20000830 	.word	0x20000830

080027d8 <main_stop_motors>:
void main_stop_motors(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80027dc:	2100      	movs	r1, #0
 80027de:	4804      	ldr	r0, [pc, #16]	; (80027f0 <main_stop_motors+0x18>)
 80027e0:	f002 fe66 	bl	80054b0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80027e4:	2104      	movs	r1, #4
 80027e6:	4802      	ldr	r0, [pc, #8]	; (80027f0 <main_stop_motors+0x18>)
 80027e8:	f002 fe62 	bl	80054b0 <HAL_TIM_PWM_Stop>
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200007f0 	.word	0x200007f0

080027f4 <main_set_motors_speed>:
void main_set_motors_speed(mavlink_motor_setpoint_t motor )
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	463c      	mov	r4, r7
 80027fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htim1.Instance->CCR1 = motor.motor_x;
 8002800:	edd7 7a01 	vldr	s15, [r7, #4]
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <main_set_motors_speed+0x78>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800280c:	ee17 2a90 	vmov	r2, s15
 8002810:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = motor.motor_y;
 8002812:	edd7 7a02 	vldr	s15, [r7, #8]
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <main_set_motors_speed+0x78>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281e:	ee17 2a90 	vmov	r2, s15
 8002822:	639a      	str	r2, [r3, #56]	; 0x38

	if (motor.motor_x == 0)
 8002824:	edd7 7a01 	vldr	s15, [r7, #4]
 8002828:	eef5 7a40 	vcmp.f32	s15, #0.0
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	d104      	bne.n	800283c <main_set_motors_speed+0x48>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002832:	2100      	movs	r1, #0
 8002834:	480d      	ldr	r0, [pc, #52]	; (800286c <main_set_motors_speed+0x78>)
 8002836:	f002 fe3b 	bl	80054b0 <HAL_TIM_PWM_Stop>
 800283a:	e003      	b.n	8002844 <main_set_motors_speed+0x50>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800283c:	2100      	movs	r1, #0
 800283e:	480b      	ldr	r0, [pc, #44]	; (800286c <main_set_motors_speed+0x78>)
 8002840:	f002 fdde 	bl	8005400 <HAL_TIM_PWM_Start>

	if (motor.motor_y == 0)
 8002844:	edd7 7a02 	vldr	s15, [r7, #8]
 8002848:	eef5 7a40 	vcmp.f32	s15, #0.0
 800284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002850:	d104      	bne.n	800285c <main_set_motors_speed+0x68>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002852:	2104      	movs	r1, #4
 8002854:	4805      	ldr	r0, [pc, #20]	; (800286c <main_set_motors_speed+0x78>)
 8002856:	f002 fe2b 	bl	80054b0 <HAL_TIM_PWM_Stop>
	else
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

}
 800285a:	e003      	b.n	8002864 <main_set_motors_speed+0x70>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800285c:	2104      	movs	r1, #4
 800285e:	4803      	ldr	r0, [pc, #12]	; (800286c <main_set_motors_speed+0x78>)
 8002860:	f002 fdce 	bl	8005400 <HAL_TIM_PWM_Start>
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	200007f0 	.word	0x200007f0

08002870 <HAL_UART_RxCpltCallback>:
void TM7_IRQHandler(void){
	HAL_TIM_IRQHandler(&htim7);
}

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8002876:	af46      	add	r7, sp, #280	; 0x118
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	6018      	str	r0, [r3, #0]
	mavlink_message_t inmsg;
	mavlink_status_t msgStatus;
	if (huart->Instance == USART2){
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_UART_RxCpltCallback+0x60>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d11e      	bne.n	80028c6 <HAL_UART_RxCpltCallback+0x56>
		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(&huart2, &inByte, 1);
 8002888:	2201      	movs	r2, #1
 800288a:	4912      	ldr	r1, [pc, #72]	; (80028d4 <HAL_UART_RxCpltCallback+0x64>)
 800288c:	4812      	ldr	r0, [pc, #72]	; (80028d8 <HAL_UART_RxCpltCallback+0x68>)
 800288e:	f003 ff0d 	bl	80066ac <HAL_UART_Receive_IT>
		if(mavlink_parse_char(0, inByte, &inmsg, &msgStatus)){
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_UART_RxCpltCallback+0x64>)
 8002894:	7819      	ldrb	r1, [r3, #0]
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800289e:	2000      	movs	r0, #0
 80028a0:	f7ff ff45 	bl	800272e <mavlink_parse_char>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <HAL_UART_RxCpltCallback+0x56>

			mouseDriver_readMsg(inmsg);
 80028aa:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80028ae:	4668      	mov	r0, sp
 80028b0:	f104 0310 	add.w	r3, r4, #16
 80028b4:	f240 1213 	movw	r2, #275	; 0x113
 80028b8:	4619      	mov	r1, r3
 80028ba:	f004 ff90 	bl	80077de <memcpy>
 80028be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028c2:	f7fe feb9 	bl	8001638 <mouseDriver_readMsg>
		}
	}
}
 80028c6:	bf00      	nop
 80028c8:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd90      	pop	{r4, r7, pc}
 80028d0:	40004400 	.word	0x40004400
 80028d4:	200002b8 	.word	0x200002b8
 80028d8:	20000830 	.word	0x20000830

080028dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	tx_finish = 1;
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <HAL_UART_TxCpltCallback+0x1c>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000001 	.word	0x20000001

080028fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM7){
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10d      	bne.n	800292a <HAL_TIM_PeriodElapsedCallback+0x2e>
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800290e:	2120      	movs	r1, #32
 8002910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002914:	f001 fa06 	bl	8003d24 <HAL_GPIO_TogglePin>
    	mouseDriver_setTime(mouseDriver_getTime()+DT_HEART);
 8002918:	f7fe fe82 	bl	8001620 <mouseDriver_getTime>
 800291c:	4603      	mov	r3, r0
 800291e:	3305      	adds	r3, #5
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fe6d 	bl	8001600 <mouseDriver_setTime>
    	mouseDriver_controlISR();
 8002926:	f7fe ff09 	bl	800173c <mouseDriver_controlISR>
    }
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40001400 	.word	0x40001400

08002938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800293c:	f000 fc4e 	bl	80031dc <HAL_Init>

  /* USER CODE BEGIN Init */
	mouseDriver_init();
 8002940:	f7fe fe52 	bl	80015e8 <mouseDriver_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002944:	f000 f83c 	bl	80029c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002948:	f000 fa1e 	bl	8002d88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800294c:	f000 f99e 	bl	8002c8c <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8002950:	f000 f964 	bl	8002c1c <MX_TIM7_Init>
  MX_TIM1_Init();
 8002954:	f000 f8aa 	bl	8002aac <MX_TIM1_Init>
  MX_DMA_Init();
 8002958:	f000 f9f8 	bl	8002d4c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 800295c:	2200      	movs	r2, #0
 800295e:	2100      	movs	r1, #0
 8002960:	2026      	movs	r0, #38	; 0x26
 8002962:	f000 fdb0 	bl	80034c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002966:	2026      	movs	r0, #38	; 0x26
 8002968:	f000 fdc9 	bl	80034fe <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 1);
 800296c:	2201      	movs	r2, #1
 800296e:	2101      	movs	r1, #1
 8002970:	2011      	movs	r0, #17
 8002972:	f000 fda8 	bl	80034c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002976:	2011      	movs	r0, #17
 8002978:	f000 fdc1 	bl	80034fe <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM7_IRQn,2,2);
 800297c:	2202      	movs	r2, #2
 800297e:	2102      	movs	r1, #2
 8002980:	2037      	movs	r0, #55	; 0x37
 8002982:	f000 fda0 	bl	80034c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002986:	2037      	movs	r0, #55	; 0x37
 8002988:	f000 fdb9 	bl	80034fe <HAL_NVIC_EnableIRQ>

  HAL_UART_Receive_IT(&huart2, &inByte, 1);
 800298c:	2201      	movs	r2, #1
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <main+0x78>)
 8002990:	4808      	ldr	r0, [pc, #32]	; (80029b4 <main+0x7c>)
 8002992:	f003 fe8b 	bl	80066ac <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002996:	4808      	ldr	r0, [pc, #32]	; (80029b8 <main+0x80>)
 8002998:	f002 fcd2 	bl	8005340 <HAL_TIM_Base_Start_IT>
  tx_finish = 1;
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <main+0x84>)
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 mouseDriver_idle();
 80029a2:	f7fe fe7f 	bl	80016a4 <mouseDriver_idle>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80029a6:	2064      	movs	r0, #100	; 0x64
 80029a8:	f000 fc90 	bl	80032cc <HAL_Delay>
	 mouseDriver_idle();
 80029ac:	e7f9      	b.n	80029a2 <main+0x6a>
 80029ae:	bf00      	nop
 80029b0:	200002b8 	.word	0x200002b8
 80029b4:	20000830 	.word	0x20000830
 80029b8:	200008b0 	.word	0x200008b0
 80029bc:	20000001 	.word	0x20000001

080029c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b0b8      	sub	sp, #224	; 0xe0
 80029c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029ca:	2244      	movs	r2, #68	; 0x44
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 ff10 	bl	80077f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029e4:	463b      	mov	r3, r7
 80029e6:	2288      	movs	r2, #136	; 0x88
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 ff02 	bl	80077f4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029f0:	2302      	movs	r3, #2
 80029f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029fe:	2310      	movs	r3, #16
 8002a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a04:	2302      	movs	r3, #2
 8002a06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002a16:	230a      	movs	r3, #10
 8002a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a1c:	2307      	movs	r3, #7
 8002a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a22:	2302      	movs	r3, #2
 8002a24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a32:	4618      	mov	r0, r3
 8002a34:	f001 f9f4 	bl	8003e20 <HAL_RCC_OscConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002a3e:	f000 fa0b 	bl	8002e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a42:	230f      	movs	r3, #15
 8002a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a64:	2104      	movs	r1, #4
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 fd8a 	bl	8004580 <HAL_RCC_ClockConfig>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002a72:	f000 f9f1 	bl	8002e58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a76:	2302      	movs	r3, #2
 8002a78:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a7e:	463b      	mov	r3, r7
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 ff81 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002a8c:	f000 f9e4 	bl	8002e58 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a94:	f001 f96e 	bl	8003d74 <HAL_PWREx_ControlVoltageScaling>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002a9e:	f000 f9db 	bl	8002e58 <Error_Handler>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	37e0      	adds	r7, #224	; 0xe0
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b09a      	sub	sp, #104	; 0x68
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
 8002adc:	615a      	str	r2, [r3, #20]
 8002ade:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	222c      	movs	r2, #44	; 0x2c
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fe84 	bl	80077f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002aec:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002aee:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <MX_TIM1_Init+0x16c>)
 8002af0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PRESCALER_PWM;
 8002af2:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002af4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002af8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = COUNTER_PERIOD_PWM;
 8002b00:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002b02:	22c8      	movs	r2, #200	; 0xc8
 8002b04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b06:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b0c:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b12:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b18:	483e      	ldr	r0, [pc, #248]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002b1a:	f002 fbe5 	bl	80052e8 <HAL_TIM_Base_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002b24:	f000 f998 	bl	8002e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b32:	4619      	mov	r1, r3
 8002b34:	4837      	ldr	r0, [pc, #220]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002b36:	f002 ff61 	bl	80059fc <HAL_TIM_ConfigClockSource>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002b40:	f000 f98a 	bl	8002e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b44:	4833      	ldr	r0, [pc, #204]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002b46:	f002 fc25 	bl	8005394 <HAL_TIM_PWM_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002b50:	f000 f982 	bl	8002e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b64:	4619      	mov	r1, r3
 8002b66:	482b      	ldr	r0, [pc, #172]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002b68:	f003 fc5a 	bl	8006420 <HAL_TIMEx_MasterConfigSynchronization>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002b72:	f000 f971 	bl	8002e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b76:	2360      	movs	r3, #96	; 0x60
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = PULSE_PWM;
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b82:	2300      	movs	r3, #0
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b96:	2200      	movs	r2, #0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	481e      	ldr	r0, [pc, #120]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002b9c:	f002 fe16 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002ba6:	f000 f957 	bl	8002e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bae:	2204      	movs	r2, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4818      	ldr	r0, [pc, #96]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002bb4:	f002 fe0a 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002bbe:	f000 f94b 	bl	8002e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4807      	ldr	r0, [pc, #28]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002bf8:	f003 fc6e 	bl	80064d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002c02:	f000 f929 	bl	8002e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c06:	4803      	ldr	r0, [pc, #12]	; (8002c14 <MX_TIM1_Init+0x168>)
 8002c08:	f000 f98c 	bl	8002f24 <HAL_TIM_MspPostInit>

}
 8002c0c:	bf00      	nop
 8002c0e:	3768      	adds	r7, #104	; 0x68
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200007f0 	.word	0x200007f0
 8002c18:	40012c00 	.word	0x40012c00

08002c1c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <MX_TIM7_Init+0x68>)
 8002c2e:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <MX_TIM7_Init+0x6c>)
 8002c30:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PRESCALER_HEART;
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <MX_TIM7_Init+0x68>)
 8002c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c38:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <MX_TIM7_Init+0x68>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = COUNTER_PERIOD_HEART;
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <MX_TIM7_Init+0x68>)
 8002c42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c46:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_TIM7_Init+0x68>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c4e:	480d      	ldr	r0, [pc, #52]	; (8002c84 <MX_TIM7_Init+0x68>)
 8002c50:	f002 fb4a 	bl	80052e8 <HAL_TIM_Base_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002c5a:	f000 f8fd 	bl	8002e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4806      	ldr	r0, [pc, #24]	; (8002c84 <MX_TIM7_Init+0x68>)
 8002c6c:	f003 fbd8 	bl	8006420 <HAL_TIMEx_MasterConfigSynchronization>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002c76:	f000 f8ef 	bl	8002e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200008b0 	.word	0x200008b0
 8002c88:	40001400 	.word	0x40001400

08002c8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();
 8002c92:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <MX_USART2_UART_Init+0xb0>)
 8002c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c96:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <MX_USART2_UART_Init+0xb0>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6493      	str	r3, [r2, #72]	; 0x48
 8002c9e:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <MX_USART2_UART_Init+0xb0>)
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]

  /* Peripheral DMA init*/
  hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002caa:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002cac:	2210      	movs	r2, #16
 8002cae:	609a      	str	r2, [r3, #8]
  hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	611a      	str	r2, [r3, #16]
  hdma_usart2_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	615a      	str	r2, [r3, #20]
  hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
  hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cce:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	621a      	str	r2, [r3, #32]
  HAL_DMA_Init(&hdma_usart2_tx);
 8002cd4:	481a      	ldr	r0, [pc, #104]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002cd6:	f000 fc2d 	bl	8003534 <HAL_DMA_Init>

  __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002cde:	669a      	str	r2, [r3, #104]	; 0x68
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <MX_USART2_UART_Init+0xb4>)
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002ce8:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <MX_USART2_UART_Init+0xbc>)
 8002cea:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8002cec:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002cee:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002cf2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002d08:	220c      	movs	r2, #12
 8002d0a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d24:	4807      	ldr	r0, [pc, #28]	; (8002d44 <MX_USART2_UART_Init+0xb8>)
 8002d26:	f003 fc73 	bl	8006610 <HAL_UART_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_USART2_UART_Init+0xa8>
  {
    Error_Handler();
 8002d30:	f000 f892 	bl	8002e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	200007a8 	.word	0x200007a8
 8002d44:	20000830 	.word	0x20000830
 8002d48:	40004400 	.word	0x40004400

08002d4c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <MX_DMA_Init+0x38>)
 8002d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <MX_DMA_Init+0x38>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6493      	str	r3, [r2, #72]	; 0x48
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <MX_DMA_Init+0x38>)
 8002d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	2011      	movs	r0, #17
 8002d70:	f000 fba9 	bl	80034c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002d74:	2011      	movs	r0, #17
 8002d76:	f000 fbc2 	bl	80034fe <HAL_NVIC_EnableIRQ>

}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000

08002d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002daa:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002db6:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	4a24      	ldr	r2, [pc, #144]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dda:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df2:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <MX_GPIO_Init+0xc4>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2120      	movs	r1, #32
 8002e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e06:	f000 ff75 	bl	8003cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <MX_GPIO_Init+0xc8>)
 8002e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480d      	ldr	r0, [pc, #52]	; (8002e54 <MX_GPIO_Init+0xcc>)
 8002e20:	f000 fdc0 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e24:	2320      	movs	r3, #32
 8002e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3e:	f000 fdb1 	bl	80039a4 <HAL_GPIO_Init>

}
 8002e42:	bf00      	nop
 8002e44:	3728      	adds	r7, #40	; 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	10210000 	.word	0x10210000
 8002e54:	48000800 	.word	0x48000800

08002e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_MspInit+0x44>)
 8002e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e72:	4a0e      	ldr	r2, [pc, #56]	; (8002eac <HAL_MspInit+0x44>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6613      	str	r3, [r2, #96]	; 0x60
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_MspInit+0x44>)
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_MspInit+0x44>)
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_MspInit+0x44>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6593      	str	r3, [r2, #88]	; 0x58
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_MspInit+0x44>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000

08002eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <HAL_TIM_Base_MspInit+0x68>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10c      	bne.n	8002edc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <HAL_TIM_Base_MspInit+0x6c>)
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <HAL_TIM_Base_MspInit+0x6c>)
 8002ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_TIM_Base_MspInit+0x6c>)
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002eda:	e018      	b.n	8002f0e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_TIM_Base_MspInit+0x70>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d113      	bne.n	8002f0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_TIM_Base_MspInit+0x6c>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <HAL_TIM_Base_MspInit+0x6c>)
 8002eec:	f043 0320 	orr.w	r3, r3, #32
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <HAL_TIM_Base_MspInit+0x6c>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	2037      	movs	r0, #55	; 0x37
 8002f04:	f000 fadf 	bl	80034c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002f08:	2037      	movs	r0, #55	; 0x37
 8002f0a:	f000 faf8 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40001400 	.word	0x40001400

08002f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <HAL_TIM_MspPostInit+0x68>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d11d      	bne.n	8002f82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_TIM_MspPostInit+0x6c>)
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <HAL_TIM_MspPostInit+0x6c>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <HAL_TIM_MspPostInit+0x6c>)
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f74:	f107 030c 	add.w	r3, r7, #12
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f7e:	f000 fd11 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f82:	bf00      	nop
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	40021000 	.word	0x40021000

08002f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a30      	ldr	r2, [pc, #192]	; (8003074 <HAL_UART_MspInit+0xe0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d159      	bne.n	800306a <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_UART_MspInit+0xe4>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	4a2f      	ldr	r2, [pc, #188]	; (8003078 <HAL_UART_MspInit+0xe4>)
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_UART_MspInit+0xe4>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_UART_MspInit+0xe4>)
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	4a29      	ldr	r2, [pc, #164]	; (8003078 <HAL_UART_MspInit+0xe4>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fda:	4b27      	ldr	r3, [pc, #156]	; (8003078 <HAL_UART_MspInit+0xe4>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fe6:	230c      	movs	r3, #12
 8002fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ff6:	2307      	movs	r3, #7
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003004:	f000 fcce 	bl	80039a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003008:	4b1c      	ldr	r3, [pc, #112]	; (800307c <HAL_UART_MspInit+0xe8>)
 800300a:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <HAL_UART_MspInit+0xec>)
 800300c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_UART_MspInit+0xe8>)
 8003010:	2202      	movs	r2, #2
 8003012:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_UART_MspInit+0xe8>)
 8003016:	2210      	movs	r2, #16
 8003018:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_UART_MspInit+0xe8>)
 800301c:	2200      	movs	r2, #0
 800301e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <HAL_UART_MspInit+0xe8>)
 8003022:	2280      	movs	r2, #128	; 0x80
 8003024:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_UART_MspInit+0xe8>)
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_UART_MspInit+0xe8>)
 800302e:	2200      	movs	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_UART_MspInit+0xe8>)
 8003034:	2200      	movs	r2, #0
 8003036:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003038:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_UART_MspInit+0xe8>)
 800303a:	2200      	movs	r2, #0
 800303c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800303e:	480f      	ldr	r0, [pc, #60]	; (800307c <HAL_UART_MspInit+0xe8>)
 8003040:	f000 fa78 	bl	8003534 <HAL_DMA_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 800304a:	f7ff ff05 	bl	8002e58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_UART_MspInit+0xe8>)
 8003052:	669a      	str	r2, [r3, #104]	; 0x68
 8003054:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_UART_MspInit+0xe8>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	2026      	movs	r0, #38	; 0x26
 8003060:	f000 fa31 	bl	80034c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003064:	2026      	movs	r0, #38	; 0x26
 8003066:	f000 fa4a 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800306a:	bf00      	nop
 800306c:	3728      	adds	r7, #40	; 0x28
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40004400 	.word	0x40004400
 8003078:	40021000 	.word	0x40021000
 800307c:	200007a8 	.word	0x200007a8
 8003080:	40020080 	.word	0x40020080

08003084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003096:	e7fe      	b.n	8003096 <HardFault_Handler+0x4>

08003098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800309c:	e7fe      	b.n	800309c <MemManage_Handler+0x4>

0800309e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030a2:	e7fe      	b.n	80030a2 <BusFault_Handler+0x4>

080030a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030a8:	e7fe      	b.n	80030a8 <UsageFault_Handler+0x4>

080030aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d8:	f000 f8da 	bl	8003290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}

080030e0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <DMA1_Channel7_IRQHandler+0x10>)
 80030e6:	f000 fb7e 	bl	80037e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200007a8 	.word	0x200007a8

080030f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <USART2_IRQHandler+0x10>)
 80030fa:	f003 fbf5 	bl	80068e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000830 	.word	0x20000830

08003108 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <TIM7_IRQHandler+0x10>)
 800310e:	f002 fa3d 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200008b0 	.word	0x200008b0

0800311c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <SystemInit+0x64>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	4a16      	ldr	r2, [pc, #88]	; (8003180 <SystemInit+0x64>)
 8003128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800312c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <SystemInit+0x68>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <SystemInit+0x68>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <SystemInit+0x68>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <SystemInit+0x68>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <SystemInit+0x68>)
 8003148:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800314c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003150:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <SystemInit+0x68>)
 8003154:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003158:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <SystemInit+0x68>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a09      	ldr	r2, [pc, #36]	; (8003184 <SystemInit+0x68>)
 8003160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003164:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003166:	4b07      	ldr	r3, [pc, #28]	; (8003184 <SystemInit+0x68>)
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <SystemInit+0x64>)
 800316e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003172:	609a      	str	r2, [r3, #8]
#endif
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000ed00 	.word	0xe000ed00
 8003184:	40021000 	.word	0x40021000

08003188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800318c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800318e:	e003      	b.n	8003198 <LoopCopyDataInit>

08003190 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003192:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003194:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003196:	3104      	adds	r1, #4

08003198 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003198:	480b      	ldr	r0, [pc, #44]	; (80031c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800319c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800319e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031a0:	d3f6      	bcc.n	8003190 <CopyDataInit>
	ldr	r2, =_sbss
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031a4:	e002      	b.n	80031ac <LoopFillZerobss>

080031a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031a8:	f842 3b04 	str.w	r3, [r2], #4

080031ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <LoopForever+0x16>)
	cmp	r2, r3
 80031ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031b0:	d3f9      	bcc.n	80031a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031b2:	f7ff ffb3 	bl	800311c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b6:	f004 fadf 	bl	8007778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ba:	f7ff fbbd 	bl	8002938 <main>

080031be <LoopForever>:

LoopForever:
    b LoopForever
 80031be:	e7fe      	b.n	80031be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80031c4:	08007ab0 	.word	0x08007ab0
	ldr	r0, =_sdata
 80031c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80031cc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80031d0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80031d4:	200008f4 	.word	0x200008f4

080031d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031d8:	e7fe      	b.n	80031d8 <ADC1_2_IRQHandler>
	...

080031dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_Init+0x3c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <HAL_Init+0x3c>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f2:	2003      	movs	r0, #3
 80031f4:	f000 f95c 	bl	80034b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031f8:	2000      	movs	r0, #0
 80031fa:	f000 f80f 	bl	800321c <HAL_InitTick>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	71fb      	strb	r3, [r7, #7]
 8003208:	e001      	b.n	800320e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800320a:	f7ff fe2d 	bl	8002e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800320e:	79fb      	ldrb	r3, [r7, #7]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40022000 	.word	0x40022000

0800321c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <HAL_InitTick+0x68>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d022      	beq.n	8003276 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003230:	4b15      	ldr	r3, [pc, #84]	; (8003288 <HAL_InitTick+0x6c>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_InitTick+0x68>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800323c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f968 	bl	800351a <HAL_SYSTICK_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10f      	bne.n	8003270 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b0f      	cmp	r3, #15
 8003254:	d809      	bhi.n	800326a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003256:	2200      	movs	r2, #0
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800325e:	f000 f932 	bl	80034c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_InitTick+0x70>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e007      	b.n	800327a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e004      	b.n	800327a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e001      	b.n	800327a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	2000000c 	.word	0x2000000c
 8003288:	20000004 	.word	0x20000004
 800328c:	20000008 	.word	0x20000008

08003290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_IncTick+0x1c>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_IncTick+0x20>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4413      	add	r3, r2
 800329e:	4a03      	ldr	r2, [pc, #12]	; (80032ac <HAL_IncTick+0x1c>)
 80032a0:	6013      	str	r3, [r2, #0]
}
 80032a2:	bf00      	nop
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	200008f0 	.word	0x200008f0
 80032b0:	2000000c 	.word	0x2000000c

080032b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return uwTick;
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_GetTick+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	200008f0 	.word	0x200008f0

080032cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff ffee 	bl	80032b4 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e4:	d004      	beq.n	80032f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_Delay+0x40>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032f0:	bf00      	nop
 80032f2:	f7ff ffdf 	bl	80032b4 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d8f7      	bhi.n	80032f2 <HAL_Delay+0x26>
  {
  }
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000000c 	.word	0x2000000c

08003310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800332c:	4013      	ands	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800333c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003342:	4a04      	ldr	r2, [pc, #16]	; (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	60d3      	str	r3, [r2, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <__NVIC_GetPriorityGrouping+0x18>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 0307 	and.w	r3, r3, #7
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db0b      	blt.n	800339e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4907      	ldr	r1, [pc, #28]	; (80033ac <__NVIC_EnableIRQ+0x38>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2001      	movs	r0, #1
 8003396:	fa00 f202 	lsl.w	r2, r0, r2
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000e100 	.word	0xe000e100

080033b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	6039      	str	r1, [r7, #0]
 80033ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	db0a      	blt.n	80033da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <__NVIC_SetPriority+0x4c>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	440b      	add	r3, r1
 80033d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d8:	e00a      	b.n	80033f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4908      	ldr	r1, [pc, #32]	; (8003400 <__NVIC_SetPriority+0x50>)
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	3b04      	subs	r3, #4
 80033e8:	0112      	lsls	r2, r2, #4
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	440b      	add	r3, r1
 80033ee:	761a      	strb	r2, [r3, #24]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000e100 	.word	0xe000e100
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f1c3 0307 	rsb	r3, r3, #7
 800341e:	2b04      	cmp	r3, #4
 8003420:	bf28      	it	cs
 8003422:	2304      	movcs	r3, #4
 8003424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3304      	adds	r3, #4
 800342a:	2b06      	cmp	r3, #6
 800342c:	d902      	bls.n	8003434 <NVIC_EncodePriority+0x30>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3b03      	subs	r3, #3
 8003432:	e000      	b.n	8003436 <NVIC_EncodePriority+0x32>
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	401a      	ands	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800344c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43d9      	mvns	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	4313      	orrs	r3, r2
         );
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	; 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800347c:	d301      	bcc.n	8003482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347e:	2301      	movs	r3, #1
 8003480:	e00f      	b.n	80034a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <SysTick_Config+0x40>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348a:	210f      	movs	r1, #15
 800348c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003490:	f7ff ff8e 	bl	80033b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <SysTick_Config+0x40>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <SysTick_Config+0x40>)
 800349c:	2207      	movs	r2, #7
 800349e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	e000e010 	.word	0xe000e010

080034b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff29 	bl	8003310 <__NVIC_SetPriorityGrouping>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034d8:	f7ff ff3e 	bl	8003358 <__NVIC_GetPriorityGrouping>
 80034dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	6978      	ldr	r0, [r7, #20]
 80034e4:	f7ff ff8e 	bl	8003404 <NVIC_EncodePriority>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff5d 	bl	80033b0 <__NVIC_SetPriority>
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff31 	bl	8003374 <__NVIC_EnableIRQ>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ffa2 	bl	800346c <SysTick_Config>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e098      	b.n	8003678 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <HAL_DMA_Init+0x150>)
 800354e:	429a      	cmp	r2, r3
 8003550:	d80f      	bhi.n	8003572 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_DMA_Init+0x154>)
 800355a:	4413      	add	r3, r2
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <HAL_DMA_Init+0x158>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	009a      	lsls	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a48      	ldr	r2, [pc, #288]	; (8003690 <HAL_DMA_Init+0x15c>)
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
 8003570:	e00e      	b.n	8003590 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4b46      	ldr	r3, [pc, #280]	; (8003694 <HAL_DMA_Init+0x160>)
 800357a:	4413      	add	r3, r2
 800357c:	4a43      	ldr	r2, [pc, #268]	; (800368c <HAL_DMA_Init+0x158>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	009a      	lsls	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a42      	ldr	r2, [pc, #264]	; (8003698 <HAL_DMA_Init+0x164>)
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ea:	d039      	beq.n	8003660 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <HAL_DMA_Init+0x15c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d11a      	bne.n	800362c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035f6:	4b29      	ldr	r3, [pc, #164]	; (800369c <HAL_DMA_Init+0x168>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f003 031c 	and.w	r3, r3, #28
 8003602:	210f      	movs	r1, #15
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	4924      	ldr	r1, [pc, #144]	; (800369c <HAL_DMA_Init+0x168>)
 800360c:	4013      	ands	r3, r2
 800360e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_DMA_Init+0x168>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	f003 031c 	and.w	r3, r3, #28
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	491d      	ldr	r1, [pc, #116]	; (800369c <HAL_DMA_Init+0x168>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
 800362a:	e019      	b.n	8003660 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <HAL_DMA_Init+0x16c>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	f003 031c 	and.w	r3, r3, #28
 8003638:	210f      	movs	r1, #15
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	4917      	ldr	r1, [pc, #92]	; (80036a0 <HAL_DMA_Init+0x16c>)
 8003642:	4013      	ands	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_DMA_Init+0x16c>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f003 031c 	and.w	r3, r3, #28
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	4911      	ldr	r1, [pc, #68]	; (80036a0 <HAL_DMA_Init+0x16c>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40020407 	.word	0x40020407
 8003688:	bffdfff8 	.word	0xbffdfff8
 800368c:	cccccccd 	.word	0xcccccccd
 8003690:	40020000 	.word	0x40020000
 8003694:	bffdfbf8 	.word	0xbffdfbf8
 8003698:	40020400 	.word	0x40020400
 800369c:	400200a8 	.word	0x400200a8
 80036a0:	400204a8 	.word	0x400204a8

080036a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Start_IT+0x20>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e04b      	b.n	800375c <HAL_DMA_Start_IT+0xb8>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d13a      	bne.n	800374e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f921 	bl	8003944 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 020e 	orr.w	r2, r2, #14
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00f      	b.n	800373c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0204 	bic.w	r2, r2, #4
 800372a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 020a 	orr.w	r2, r2, #10
 800373a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e005      	b.n	800375a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003756:	2302      	movs	r3, #2
 8003758:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d005      	beq.n	8003788 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2204      	movs	r2, #4
 8003780:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	e029      	b.n	80037dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 020e 	bic.w	r2, r2, #14
 8003796:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f003 021c 	and.w	r2, r3, #28
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
    }
  }
  return status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f003 031c 	and.w	r3, r3, #28
 8003806:	2204      	movs	r2, #4
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d026      	beq.n	8003860 <HAL_DMA_IRQHandler+0x7a>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d021      	beq.n	8003860 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0204 	bic.w	r2, r2, #4
 8003838:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f003 021c 	and.w	r2, r3, #28
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2104      	movs	r1, #4
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	2b00      	cmp	r3, #0
 8003854:	d071      	beq.n	800393a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800385e:	e06c      	b.n	800393a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f003 031c 	and.w	r3, r3, #28
 8003868:	2202      	movs	r2, #2
 800386a:	409a      	lsls	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02e      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xec>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d029      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 020a 	bic.w	r2, r2, #10
 800389a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	f003 021c 	and.w	r2, r3, #28
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2102      	movs	r1, #2
 80038b2:	fa01 f202 	lsl.w	r2, r1, r2
 80038b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d038      	beq.n	800393a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038d0:	e033      	b.n	800393a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f003 031c 	and.w	r3, r3, #28
 80038da:	2208      	movs	r2, #8
 80038dc:	409a      	lsls	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02a      	beq.n	800393c <HAL_DMA_IRQHandler+0x156>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d025      	beq.n	800393c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 020e 	bic.w	r2, r2, #14
 80038fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	f003 021c 	and.w	r2, r3, #28
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2101      	movs	r1, #1
 800390e:	fa01 f202 	lsl.w	r2, r1, r2
 8003912:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800393a:	bf00      	nop
 800393c:	bf00      	nop
}
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f003 021c 	and.w	r2, r3, #28
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f202 	lsl.w	r2, r1, r2
 8003964:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b10      	cmp	r3, #16
 8003974:	d108      	bne.n	8003988 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003986:	e007      	b.n	8003998 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b2:	e17f      	b.n	8003cb4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	4013      	ands	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 8171 	beq.w	8003cae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x38>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b12      	cmp	r3, #18
 80039da:	d123      	bne.n	8003a24 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	220f      	movs	r2, #15
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	08da      	lsrs	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3208      	adds	r2, #8
 8003a1e:	6939      	ldr	r1, [r7, #16]
 8003a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2203      	movs	r2, #3
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0203 	and.w	r2, r3, #3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d00b      	beq.n	8003a78 <HAL_GPIO_Init+0xd4>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d007      	beq.n	8003a78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a6c:	2b11      	cmp	r3, #17
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b12      	cmp	r3, #18
 8003a76:	d130      	bne.n	8003ada <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aae:	2201      	movs	r2, #1
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0201 	and.w	r2, r3, #1
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d118      	bne.n	8003b18 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003aec:	2201      	movs	r2, #1
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	f003 0201 	and.w	r2, r3, #1
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2203      	movs	r2, #3
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80ac 	beq.w	8003cae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b56:	4b5e      	ldr	r3, [pc, #376]	; (8003cd0 <HAL_GPIO_Init+0x32c>)
 8003b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5a:	4a5d      	ldr	r2, [pc, #372]	; (8003cd0 <HAL_GPIO_Init+0x32c>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6613      	str	r3, [r2, #96]	; 0x60
 8003b62:	4b5b      	ldr	r3, [pc, #364]	; (8003cd0 <HAL_GPIO_Init+0x32c>)
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b6e:	4a59      	ldr	r2, [pc, #356]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	3302      	adds	r3, #2
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	220f      	movs	r2, #15
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b98:	d025      	beq.n	8003be6 <HAL_GPIO_Init+0x242>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4e      	ldr	r2, [pc, #312]	; (8003cd8 <HAL_GPIO_Init+0x334>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <HAL_GPIO_Init+0x23e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4d      	ldr	r2, [pc, #308]	; (8003cdc <HAL_GPIO_Init+0x338>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d019      	beq.n	8003bde <HAL_GPIO_Init+0x23a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4c      	ldr	r2, [pc, #304]	; (8003ce0 <HAL_GPIO_Init+0x33c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x236>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4b      	ldr	r2, [pc, #300]	; (8003ce4 <HAL_GPIO_Init+0x340>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x232>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ce8 <HAL_GPIO_Init+0x344>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x22e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a49      	ldr	r2, [pc, #292]	; (8003cec <HAL_GPIO_Init+0x348>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x22a>
 8003bca:	2306      	movs	r3, #6
 8003bcc:	e00c      	b.n	8003be8 <HAL_GPIO_Init+0x244>
 8003bce:	2307      	movs	r3, #7
 8003bd0:	e00a      	b.n	8003be8 <HAL_GPIO_Init+0x244>
 8003bd2:	2305      	movs	r3, #5
 8003bd4:	e008      	b.n	8003be8 <HAL_GPIO_Init+0x244>
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	e006      	b.n	8003be8 <HAL_GPIO_Init+0x244>
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e004      	b.n	8003be8 <HAL_GPIO_Init+0x244>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e002      	b.n	8003be8 <HAL_GPIO_Init+0x244>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_GPIO_Init+0x244>
 8003be6:	2300      	movs	r3, #0
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	f002 0203 	and.w	r2, r2, #3
 8003bee:	0092      	lsls	r2, r2, #2
 8003bf0:	4093      	lsls	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bf8:	4936      	ldr	r1, [pc, #216]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	089b      	lsrs	r3, r3, #2
 8003bfe:	3302      	adds	r3, #2
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c06:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <HAL_GPIO_Init+0x34c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c2a:	4a31      	ldr	r2, [pc, #196]	; (8003cf0 <HAL_GPIO_Init+0x34c>)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c30:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <HAL_GPIO_Init+0x34c>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c54:	4a26      	ldr	r2, [pc, #152]	; (8003cf0 <HAL_GPIO_Init+0x34c>)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c5a:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_GPIO_Init+0x34c>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c7e:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <HAL_GPIO_Init+0x34c>)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <HAL_GPIO_Init+0x34c>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ca8:	4a11      	ldr	r2, [pc, #68]	; (8003cf0 <HAL_GPIO_Init+0x34c>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f47f ae78 	bne.w	80039b4 <HAL_GPIO_Init+0x10>
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	48000400 	.word	0x48000400
 8003cdc:	48000800 	.word	0x48000800
 8003ce0:	48000c00 	.word	0x48000c00
 8003ce4:	48001000 	.word	0x48001000
 8003ce8:	48001400 	.word	0x48001400
 8003cec:	48001800 	.word	0x48001800
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	807b      	strh	r3, [r7, #2]
 8003d00:	4613      	mov	r3, r2
 8003d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d04:	787b      	ldrb	r3, [r7, #1]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d10:	e002      	b.n	8003d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	887b      	ldrh	r3, [r7, #2]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d3c:	887a      	ldrh	r2, [r7, #2]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003d42:	e002      	b.n	8003d4a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d44:	887a      	ldrh	r2, [r7, #2]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	619a      	str	r2, [r3, #24]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40007000 	.word	0x40007000

08003d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d82:	d130      	bne.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d84:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d90:	d038      	beq.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003da2:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2232      	movs	r2, #50	; 0x32
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	0c9b      	lsrs	r3, r3, #18
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003db8:	e002      	b.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dc0:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	d102      	bne.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f2      	bne.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d110      	bne.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e00f      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d007      	beq.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003df4:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dfc:	4a05      	ldr	r2, [pc, #20]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40007000 	.word	0x40007000
 8003e18:	20000004 	.word	0x20000004
 8003e1c:	431bde83 	.word	0x431bde83

08003e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e39d      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e32:	4ba4      	ldr	r3, [pc, #656]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e3c:	4ba1      	ldr	r3, [pc, #644]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80e1 	beq.w	8004016 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_RCC_OscConfig+0x4a>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	f040 8088 	bne.w	8003f72 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 8084 	bne.w	8003f72 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e6a:	4b96      	ldr	r3, [pc, #600]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_RCC_OscConfig+0x62>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e375      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1a      	ldr	r2, [r3, #32]
 8003e86:	4b8f      	ldr	r3, [pc, #572]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <HAL_RCC_OscConfig+0x7c>
 8003e92:	4b8c      	ldr	r3, [pc, #560]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9a:	e005      	b.n	8003ea8 <HAL_RCC_OscConfig+0x88>
 8003e9c:	4b89      	ldr	r3, [pc, #548]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d223      	bcs.n	8003ef4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fd09 	bl	80048c8 <RCC_SetFlashLatencyFromMSIRange>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e356      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ec0:	4b80      	ldr	r3, [pc, #512]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a7f      	ldr	r2, [pc, #508]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003ec6:	f043 0308 	orr.w	r3, r3, #8
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b7d      	ldr	r3, [pc, #500]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	497a      	ldr	r1, [pc, #488]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ede:	4b79      	ldr	r3, [pc, #484]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	4975      	ldr	r1, [pc, #468]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
 8003ef2:	e022      	b.n	8003f3a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef4:	4b73      	ldr	r3, [pc, #460]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a72      	ldr	r2, [pc, #456]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003efa:	f043 0308 	orr.w	r3, r3, #8
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b70      	ldr	r3, [pc, #448]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	496d      	ldr	r1, [pc, #436]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f12:	4b6c      	ldr	r3, [pc, #432]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	4968      	ldr	r1, [pc, #416]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fccc 	bl	80048c8 <RCC_SetFlashLatencyFromMSIRange>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e319      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f3a:	f000 fc03 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4601      	mov	r1, r0
 8003f40:	4b60      	ldr	r3, [pc, #384]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	4a5f      	ldr	r2, [pc, #380]	; (80040c8 <HAL_RCC_OscConfig+0x2a8>)
 8003f4c:	5cd3      	ldrb	r3, [r2, r3]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	fa21 f303 	lsr.w	r3, r1, r3
 8003f56:	4a5d      	ldr	r2, [pc, #372]	; (80040cc <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f5a:	4b5d      	ldr	r3, [pc, #372]	; (80040d0 <HAL_RCC_OscConfig+0x2b0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff f95c 	bl	800321c <HAL_InitTick>
 8003f64:	4603      	mov	r3, r0
 8003f66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d052      	beq.n	8004014 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	e2fd      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d032      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f7a:	4b52      	ldr	r3, [pc, #328]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a51      	ldr	r2, [pc, #324]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f86:	f7ff f995 	bl	80032b4 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f8e:	f7ff f991 	bl	80032b4 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e2e6      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa0:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fac:	4b45      	ldr	r3, [pc, #276]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a44      	ldr	r2, [pc, #272]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003fb2:	f043 0308 	orr.w	r3, r3, #8
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b42      	ldr	r3, [pc, #264]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	493f      	ldr	r1, [pc, #252]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fca:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	493a      	ldr	r1, [pc, #232]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
 8003fde:	e01a      	b.n	8004016 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fe0:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a37      	ldr	r2, [pc, #220]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fec:	f7ff f962 	bl	80032b4 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ff4:	f7ff f95e 	bl	80032b4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e2b3      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004006:	4b2f      	ldr	r3, [pc, #188]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x1d4>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d074      	beq.n	800410c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d005      	beq.n	8004034 <HAL_RCC_OscConfig+0x214>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d10e      	bne.n	800404c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d10b      	bne.n	800404c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	4b23      	ldr	r3, [pc, #140]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d064      	beq.n	800410a <HAL_RCC_OscConfig+0x2ea>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d160      	bne.n	800410a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e290      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d106      	bne.n	8004064 <HAL_RCC_OscConfig+0x244>
 8004056:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e01d      	b.n	80040a0 <HAL_RCC_OscConfig+0x280>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x268>
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8004074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0x280>
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <HAL_RCC_OscConfig+0x2a4>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01c      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7ff f904 	bl	80032b4 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ae:	e011      	b.n	80040d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7ff f900 	bl	80032b4 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d90a      	bls.n	80040d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e255      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	08007a58 	.word	0x08007a58
 80040cc:	20000004 	.word	0x20000004
 80040d0:	20000008 	.word	0x20000008
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d4:	4bae      	ldr	r3, [pc, #696]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0e7      	beq.n	80040b0 <HAL_RCC_OscConfig+0x290>
 80040e0:	e014      	b.n	800410c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7ff f8e7 	bl	80032b4 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ea:	f7ff f8e3 	bl	80032b4 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b64      	cmp	r3, #100	; 0x64
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e238      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fc:	4ba4      	ldr	r3, [pc, #656]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0x2ca>
 8004108:	e000      	b.n	800410c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d060      	beq.n	80041da <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b04      	cmp	r3, #4
 800411c:	d005      	beq.n	800412a <HAL_RCC_OscConfig+0x30a>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b0c      	cmp	r3, #12
 8004122:	d119      	bne.n	8004158 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d116      	bne.n	8004158 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800412a:	4b99      	ldr	r3, [pc, #612]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_RCC_OscConfig+0x322>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e215      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b93      	ldr	r3, [pc, #588]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	498f      	ldr	r1, [pc, #572]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004156:	e040      	b.n	80041da <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d023      	beq.n	80041a8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004160:	4b8b      	ldr	r3, [pc, #556]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a8a      	ldr	r2, [pc, #552]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7ff f8a2 	bl	80032b4 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004174:	f7ff f89e 	bl	80032b4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e1f3      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004186:	4b82      	ldr	r3, [pc, #520]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	4b7f      	ldr	r3, [pc, #508]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	061b      	lsls	r3, r3, #24
 80041a0:	497b      	ldr	r1, [pc, #492]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
 80041a6:	e018      	b.n	80041da <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a8:	4b79      	ldr	r3, [pc, #484]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a78      	ldr	r2, [pc, #480]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80041ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7ff f87e 	bl	80032b4 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041bc:	f7ff f87a 	bl	80032b4 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e1cf      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ce:	4b70      	ldr	r3, [pc, #448]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d03c      	beq.n	8004260 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01c      	beq.n	8004228 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ee:	4b68      	ldr	r3, [pc, #416]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f4:	4a66      	ldr	r2, [pc, #408]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7ff f859 	bl	80032b4 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004206:	f7ff f855 	bl	80032b4 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e1aa      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004218:	4b5d      	ldr	r3, [pc, #372]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ef      	beq.n	8004206 <HAL_RCC_OscConfig+0x3e6>
 8004226:	e01b      	b.n	8004260 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004228:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 800422a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422e:	4a58      	ldr	r2, [pc, #352]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004238:	f7ff f83c 	bl	80032b4 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004240:	f7ff f838 	bl	80032b4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e18d      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004252:	4b4f      	ldr	r3, [pc, #316]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ef      	bne.n	8004240 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a5 	beq.w	80043b8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004272:	4b47      	ldr	r3, [pc, #284]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10d      	bne.n	800429a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	4b44      	ldr	r3, [pc, #272]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	4a43      	ldr	r2, [pc, #268]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6593      	str	r3, [r2, #88]	; 0x58
 800428a:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004296:	2301      	movs	r3, #1
 8004298:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800429a:	4b3e      	ldr	r3, [pc, #248]	; (8004394 <HAL_RCC_OscConfig+0x574>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d118      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042a6:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <HAL_RCC_OscConfig+0x574>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a3a      	ldr	r2, [pc, #232]	; (8004394 <HAL_RCC_OscConfig+0x574>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b2:	f7fe ffff 	bl	80032b4 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ba:	f7fe fffb 	bl	80032b4 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e150      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042cc:	4b31      	ldr	r3, [pc, #196]	; (8004394 <HAL_RCC_OscConfig+0x574>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d108      	bne.n	80042f2 <HAL_RCC_OscConfig+0x4d2>
 80042e0:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	4a2a      	ldr	r2, [pc, #168]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f0:	e024      	b.n	800433c <HAL_RCC_OscConfig+0x51c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b05      	cmp	r3, #5
 80042f8:	d110      	bne.n	800431c <HAL_RCC_OscConfig+0x4fc>
 80042fa:	4b25      	ldr	r3, [pc, #148]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	4a23      	ldr	r2, [pc, #140]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004302:	f043 0304 	orr.w	r3, r3, #4
 8004306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430a:	4b21      	ldr	r3, [pc, #132]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800431a:	e00f      	b.n	800433c <HAL_RCC_OscConfig+0x51c>
 800431c:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800432c:	4b18      	ldr	r3, [pc, #96]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	4a17      	ldr	r2, [pc, #92]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004334:	f023 0304 	bic.w	r3, r3, #4
 8004338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d016      	beq.n	8004372 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fe ffb6 	bl	80032b4 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434c:	f7fe ffb2 	bl	80032b4 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	; 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e105      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_OscConfig+0x570>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ed      	beq.n	800434c <HAL_RCC_OscConfig+0x52c>
 8004370:	e019      	b.n	80043a6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004372:	f7fe ff9f 	bl	80032b4 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004378:	e00e      	b.n	8004398 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fe ff9b 	bl	80032b4 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f241 3288 	movw	r2, #5000	; 0x1388
 8004388:	4293      	cmp	r3, r2
 800438a:	d905      	bls.n	8004398 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0ee      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
 8004390:	40021000 	.word	0x40021000
 8004394:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004398:	4b77      	ldr	r3, [pc, #476]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e9      	bne.n	800437a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d105      	bne.n	80043b8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ac:	4b72      	ldr	r3, [pc, #456]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	4a71      	ldr	r2, [pc, #452]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80043b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80d5 	beq.w	800456c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	f000 808e 	beq.w	80044e6 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d15b      	bne.n	800448a <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d2:	4b69      	ldr	r3, [pc, #420]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a68      	ldr	r2, [pc, #416]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80043d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fe ff69 	bl	80032b4 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe ff65 	bl	80032b4 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0ba      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f8:	4b5f      	ldr	r3, [pc, #380]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f0      	bne.n	80043e6 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004404:	4b5c      	ldr	r3, [pc, #368]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	4b5c      	ldr	r3, [pc, #368]	; (800457c <HAL_RCC_OscConfig+0x75c>)
 800440a:	4013      	ands	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004414:	3a01      	subs	r2, #1
 8004416:	0112      	lsls	r2, r2, #4
 8004418:	4311      	orrs	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800441e:	0212      	lsls	r2, r2, #8
 8004420:	4311      	orrs	r1, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004426:	0852      	lsrs	r2, r2, #1
 8004428:	3a01      	subs	r2, #1
 800442a:	0552      	lsls	r2, r2, #21
 800442c:	4311      	orrs	r1, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004432:	0852      	lsrs	r2, r2, #1
 8004434:	3a01      	subs	r2, #1
 8004436:	0652      	lsls	r2, r2, #25
 8004438:	4311      	orrs	r1, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800443e:	0912      	lsrs	r2, r2, #4
 8004440:	0452      	lsls	r2, r2, #17
 8004442:	430a      	orrs	r2, r1
 8004444:	494c      	ldr	r1, [pc, #304]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 8004446:	4313      	orrs	r3, r2
 8004448:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800444a:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a4a      	ldr	r2, [pc, #296]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 8004450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004454:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004456:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	4a47      	ldr	r2, [pc, #284]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 800445c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004460:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004462:	f7fe ff27 	bl	80032b4 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446a:	f7fe ff23 	bl	80032b4 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e078      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447c:	4b3e      	ldr	r3, [pc, #248]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x64a>
 8004488:	e070      	b.n	800456c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448a:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a3a      	ldr	r2, [pc, #232]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 8004490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004494:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004496:	4b38      	ldr	r3, [pc, #224]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044a2:	4b35      	ldr	r3, [pc, #212]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	4a34      	ldr	r2, [pc, #208]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80044a8:	f023 0303 	bic.w	r3, r3, #3
 80044ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044ae:	4b32      	ldr	r3, [pc, #200]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4a31      	ldr	r2, [pc, #196]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80044b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fe fef9 	bl	80032b4 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fe fef5 	bl	80032b4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e04a      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x6a6>
 80044e4:	e042      	b.n	800456c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e03d      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80044f2:	4b21      	ldr	r3, [pc, #132]	; (8004578 <HAL_RCC_OscConfig+0x758>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 0203 	and.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	429a      	cmp	r2, r3
 8004504:	d130      	bne.n	8004568 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	3b01      	subs	r3, #1
 8004512:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d127      	bne.n	8004568 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d11f      	bne.n	8004568 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004532:	2a07      	cmp	r2, #7
 8004534:	bf14      	ite	ne
 8004536:	2201      	movne	r2, #1
 8004538:	2200      	moveq	r2, #0
 800453a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800453c:	4293      	cmp	r3, r2
 800453e:	d113      	bne.n	8004568 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	3b01      	subs	r3, #1
 800454e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d109      	bne.n	8004568 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	3b01      	subs	r3, #1
 8004562:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	f99d808c 	.word	0xf99d808c

08004580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0c8      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b66      	ldr	r3, [pc, #408]	; (8004730 <HAL_RCC_ClockConfig+0x1b0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d910      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b63      	ldr	r3, [pc, #396]	; (8004730 <HAL_RCC_ClockConfig+0x1b0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 0207 	bic.w	r2, r3, #7
 80045aa:	4961      	ldr	r1, [pc, #388]	; (8004730 <HAL_RCC_ClockConfig+0x1b0>)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b5f      	ldr	r3, [pc, #380]	; (8004730 <HAL_RCC_ClockConfig+0x1b0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0b0      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d04c      	beq.n	800466a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d8:	4b56      	ldr	r3, [pc, #344]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d121      	bne.n	8004628 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e09e      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f0:	4b50      	ldr	r3, [pc, #320]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d115      	bne.n	8004628 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e092      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d107      	bne.n	8004618 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004608:	4b4a      	ldr	r3, [pc, #296]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e086      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004618:	4b46      	ldr	r3, [pc, #280]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e07e      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004628:	4b42      	ldr	r3, [pc, #264]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f023 0203 	bic.w	r2, r3, #3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	493f      	ldr	r1, [pc, #252]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463a:	f7fe fe3b 	bl	80032b4 <HAL_GetTick>
 800463e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004640:	e00a      	b.n	8004658 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004642:	f7fe fe37 	bl	80032b4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e066      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004658:	4b36      	ldr	r3, [pc, #216]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 020c 	and.w	r2, r3, #12
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	429a      	cmp	r2, r3
 8004668:	d1eb      	bne.n	8004642 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004676:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	492c      	ldr	r1, [pc, #176]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004688:	4b29      	ldr	r3, [pc, #164]	; (8004730 <HAL_RCC_ClockConfig+0x1b0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d210      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_RCC_ClockConfig+0x1b0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 0207 	bic.w	r2, r3, #7
 800469e:	4924      	ldr	r1, [pc, #144]	; (8004730 <HAL_RCC_ClockConfig+0x1b0>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b22      	ldr	r3, [pc, #136]	; (8004730 <HAL_RCC_ClockConfig+0x1b0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e036      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4918      	ldr	r1, [pc, #96]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e2:	4b14      	ldr	r3, [pc, #80]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4910      	ldr	r1, [pc, #64]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046f6:	f000 f825 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 80046fa:	4601      	mov	r1, r0
 80046fc:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <HAL_RCC_ClockConfig+0x1b4>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	4a0c      	ldr	r2, [pc, #48]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	fa21 f303 	lsr.w	r3, r1, r3
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fd7e 	bl	800321c <HAL_InitTick>
 8004720:	4603      	mov	r3, r0
 8004722:	72fb      	strb	r3, [r7, #11]

  return status;
 8004724:	7afb      	ldrb	r3, [r7, #11]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40022000 	.word	0x40022000
 8004734:	40021000 	.word	0x40021000
 8004738:	08007a58 	.word	0x08007a58
 800473c:	20000004 	.word	0x20000004
 8004740:	20000008 	.word	0x20000008

08004744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	; 0x24
 8004748:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004752:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <HAL_RCC_GetSysClockFreq+0x104>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800475c:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <HAL_RCC_GetSysClockFreq+0x104>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x34>
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d121      	bne.n	80047b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d11e      	bne.n	80047b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004778:	4b33      	ldr	r3, [pc, #204]	; (8004848 <HAL_RCC_GetSysClockFreq+0x104>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004784:	4b30      	ldr	r3, [pc, #192]	; (8004848 <HAL_RCC_GetSysClockFreq+0x104>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	e005      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004794:	4b2c      	ldr	r3, [pc, #176]	; (8004848 <HAL_RCC_GetSysClockFreq+0x104>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047a0:	4a2a      	ldr	r2, [pc, #168]	; (800484c <HAL_RCC_GetSysClockFreq+0x108>)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10d      	bne.n	80047cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d102      	bne.n	80047c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e004      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047c8:	4b22      	ldr	r3, [pc, #136]	; (8004854 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b0c      	cmp	r3, #12
 80047d0:	d133      	bne.n	800483a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047d2:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_RCC_GetSysClockFreq+0x104>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d002      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0xa4>
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d003      	beq.n	80047ee <HAL_RCC_GetSysClockFreq+0xaa>
 80047e6:	e005      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047e8:	4b19      	ldr	r3, [pc, #100]	; (8004850 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ea:	617b      	str	r3, [r7, #20]
      break;
 80047ec:	e005      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047ee:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_RCC_GetSysClockFreq+0x110>)
 80047f0:	617b      	str	r3, [r7, #20]
      break;
 80047f2:	e002      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	617b      	str	r3, [r7, #20]
      break;
 80047f8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_RCC_GetSysClockFreq+0x104>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	3301      	adds	r3, #1
 8004806:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004808:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <HAL_RCC_GetSysClockFreq+0x104>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	0a1b      	lsrs	r3, r3, #8
 800480e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	fb02 f203 	mul.w	r2, r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <HAL_RCC_GetSysClockFreq+0x104>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	0e5b      	lsrs	r3, r3, #25
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	3301      	adds	r3, #1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800483a:	69bb      	ldr	r3, [r7, #24]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3724      	adds	r7, #36	; 0x24
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40021000 	.word	0x40021000
 800484c:	08007a70 	.word	0x08007a70
 8004850:	00f42400 	.word	0x00f42400
 8004854:	007a1200 	.word	0x007a1200

08004858 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <HAL_RCC_GetHCLKFreq+0x14>)
 800485e:	681b      	ldr	r3, [r3, #0]
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000004 	.word	0x20000004

08004870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004874:	f7ff fff0 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 8004878:	4601      	mov	r1, r0
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_RCC_GetPCLK1Freq+0x24>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4a04      	ldr	r2, [pc, #16]	; (8004898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004886:	5cd3      	ldrb	r3, [r2, r3]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40021000 	.word	0x40021000
 8004898:	08007a68 	.word	0x08007a68

0800489c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048a0:	f7ff ffda 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 80048a4:	4601      	mov	r1, r0
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0adb      	lsrs	r3, r3, #11
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4a04      	ldr	r2, [pc, #16]	; (80048c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048b2:	5cd3      	ldrb	r3, [r2, r3]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000
 80048c4:	08007a68 	.word	0x08007a68

080048c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048d4:	4b2a      	ldr	r3, [pc, #168]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048e0:	f7ff fa3a 	bl	8003d58 <HAL_PWREx_GetVoltageRange>
 80048e4:	6178      	str	r0, [r7, #20]
 80048e6:	e014      	b.n	8004912 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ec:	4a24      	ldr	r2, [pc, #144]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6593      	str	r3, [r2, #88]	; 0x58
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004900:	f7ff fa2a 	bl	8003d58 <HAL_PWREx_GetVoltageRange>
 8004904:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004910:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004918:	d10b      	bne.n	8004932 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d919      	bls.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2ba0      	cmp	r3, #160	; 0xa0
 8004924:	d902      	bls.n	800492c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004926:	2302      	movs	r3, #2
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e013      	b.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800492c:	2301      	movs	r3, #1
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	e010      	b.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b80      	cmp	r3, #128	; 0x80
 8004936:	d902      	bls.n	800493e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004938:	2303      	movs	r3, #3
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	e00a      	b.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b80      	cmp	r3, #128	; 0x80
 8004942:	d102      	bne.n	800494a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004944:	2302      	movs	r3, #2
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e004      	b.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b70      	cmp	r3, #112	; 0x70
 800494e:	d101      	bne.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004950:	2301      	movs	r3, #1
 8004952:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 0207 	bic.w	r2, r3, #7
 800495c:	4909      	ldr	r1, [pc, #36]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	40022000 	.word	0x40022000

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004990:	2300      	movs	r3, #0
 8004992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004994:	2300      	movs	r3, #0
 8004996:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d03f      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ac:	d01c      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80049ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b2:	d802      	bhi.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00e      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80049b8:	e01f      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x72>
 80049ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049be:	d003      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80049c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049c4:	d01c      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80049c6:	e018      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049c8:	4b85      	ldr	r3, [pc, #532]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a84      	ldr	r2, [pc, #528]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d4:	e015      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3304      	adds	r3, #4
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fab9 	bl	8004f54 <RCCEx_PLLSAI1_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e6:	e00c      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3320      	adds	r3, #32
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fba0 	bl	8005134 <RCCEx_PLLSAI2_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f8:	e003      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	74fb      	strb	r3, [r7, #19]
      break;
 80049fe:	e000      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a08:	4b75      	ldr	r3, [pc, #468]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a16:	4972      	ldr	r1, [pc, #456]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a1e:	e001      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d03f      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a38:	d01c      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a3e:	d802      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004a44:	e01f      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a4a:	d003      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004a4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a50:	d01c      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004a52:	e018      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a54:	4b62      	ldr	r3, [pc, #392]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a61      	ldr	r2, [pc, #388]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a60:	e015      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2100      	movs	r1, #0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fa73 	bl	8004f54 <RCCEx_PLLSAI1_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a72:	e00c      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3320      	adds	r3, #32
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fb5a 	bl	8005134 <RCCEx_PLLSAI2_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a84:	e003      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	74fb      	strb	r3, [r7, #19]
      break;
 8004a8a:	e000      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a8e:	7cfb      	ldrb	r3, [r7, #19]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10b      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a94:	4b52      	ldr	r3, [pc, #328]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa2:	494f      	ldr	r1, [pc, #316]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004aaa:	e001      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80a0 	beq.w	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ac2:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00d      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad8:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	4a40      	ldr	r2, [pc, #256]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af0:	2301      	movs	r3, #1
 8004af2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004af4:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a3a      	ldr	r2, [pc, #232]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b00:	f7fe fbd8 	bl	80032b4 <HAL_GetTick>
 8004b04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b06:	e009      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b08:	f7fe fbd4 	bl	80032b4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d902      	bls.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	74fb      	strb	r3, [r7, #19]
        break;
 8004b1a:	e005      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b1c:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0ef      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d15c      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b2e:	4b2c      	ldr	r3, [pc, #176]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01f      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d019      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b4c:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b78:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fb93 	bl	80032b4 <HAL_GetTick>
 8004b8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b90:	e00b      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fe fb8f 	bl	80032b4 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d902      	bls.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ba8:	e006      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ec      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bce:	4904      	ldr	r1, [pc, #16]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bd6:	e009      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	74bb      	strb	r3, [r7, #18]
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bec:	7c7b      	ldrb	r3, [r7, #17]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d105      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf2:	4b9e      	ldr	r3, [pc, #632]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	4a9d      	ldr	r2, [pc, #628]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c0a:	4b98      	ldr	r3, [pc, #608]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f023 0203 	bic.w	r2, r3, #3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	4994      	ldr	r1, [pc, #592]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c2c:	4b8f      	ldr	r3, [pc, #572]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	f023 020c 	bic.w	r2, r3, #12
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	498c      	ldr	r1, [pc, #560]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c4e:	4b87      	ldr	r3, [pc, #540]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	4983      	ldr	r1, [pc, #524]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c70:	4b7e      	ldr	r3, [pc, #504]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	497b      	ldr	r1, [pc, #492]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c92:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca0:	4972      	ldr	r1, [pc, #456]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cb4:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc2:	496a      	ldr	r1, [pc, #424]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cd6:	4b65      	ldr	r3, [pc, #404]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce4:	4961      	ldr	r1, [pc, #388]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cf8:	4b5c      	ldr	r3, [pc, #368]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d06:	4959      	ldr	r1, [pc, #356]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d1a:	4b54      	ldr	r3, [pc, #336]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	4950      	ldr	r1, [pc, #320]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d3c:	4b4b      	ldr	r3, [pc, #300]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	4948      	ldr	r1, [pc, #288]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d5e:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6c:	493f      	ldr	r1, [pc, #252]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d028      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d80:	4b3a      	ldr	r3, [pc, #232]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8e:	4937      	ldr	r1, [pc, #220]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9e:	d106      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da0:	4b32      	ldr	r3, [pc, #200]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4a31      	ldr	r2, [pc, #196]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004daa:	60d3      	str	r3, [r2, #12]
 8004dac:	e011      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004db6:	d10c      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f8c8 	bl	8004f54 <RCCEx_PLLSAI1_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004dce:	7cfb      	ldrb	r3, [r7, #19]
 8004dd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d028      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dde:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	491f      	ldr	r1, [pc, #124]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfc:	d106      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	4a1a      	ldr	r2, [pc, #104]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e08:	60d3      	str	r3, [r2, #12]
 8004e0a:	e011      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 f899 	bl	8004f54 <RCCEx_PLLSAI1_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e26:	7cfb      	ldrb	r3, [r7, #19]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02b      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4a:	4908      	ldr	r1, [pc, #32]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5a:	d109      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a02      	ldr	r2, [pc, #8]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e66:	60d3      	str	r3, [r2, #12]
 8004e68:	e014      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f867 	bl	8004f54 <RCCEx_PLLSAI1_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004e90:	7cfb      	ldrb	r3, [r7, #19]
 8004e92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d02f      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eae:	4928      	ldr	r1, [pc, #160]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ebe:	d10d      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f844 	bl	8004f54 <RCCEx_PLLSAI1_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d014      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004ed6:	7cfb      	ldrb	r3, [r7, #19]
 8004ed8:	74bb      	strb	r3, [r7, #18]
 8004eda:	e011      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee4:	d10c      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3320      	adds	r3, #32
 8004eea:	2102      	movs	r1, #2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f921 	bl	8005134 <RCCEx_PLLSAI2_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ef6:	7cfb      	ldrb	r3, [r7, #19]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004efc:	7cfb      	ldrb	r3, [r7, #19]
 8004efe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f0c:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1a:	490d      	ldr	r1, [pc, #52]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f2e:	4b08      	ldr	r3, [pc, #32]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f3e:	4904      	ldr	r1, [pc, #16]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f46:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000

08004f54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f62:	4b73      	ldr	r3, [pc, #460]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d018      	beq.n	8004fa0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f6e:	4b70      	ldr	r3, [pc, #448]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f003 0203 	and.w	r2, r3, #3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d10d      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
       ||
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f86:	4b6a      	ldr	r3, [pc, #424]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
       ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d044      	beq.n	8005024 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
 8004f9e:	e041      	b.n	8005024 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d00c      	beq.n	8004fc2 <RCCEx_PLLSAI1_Config+0x6e>
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d013      	beq.n	8004fd4 <RCCEx_PLLSAI1_Config+0x80>
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d120      	bne.n	8004ff2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fb0:	4b5f      	ldr	r3, [pc, #380]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11d      	bne.n	8004ff8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc0:	e01a      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fc2:	4b5b      	ldr	r3, [pc, #364]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d116      	bne.n	8004ffc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd2:	e013      	b.n	8004ffc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fd4:	4b56      	ldr	r3, [pc, #344]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10f      	bne.n	8005000 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fe0:	4b53      	ldr	r3, [pc, #332]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ff0:	e006      	b.n	8005000 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff6:	e004      	b.n	8005002 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ff8:	bf00      	nop
 8004ffa:	e002      	b.n	8005002 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ffc:	bf00      	nop
 8004ffe:	e000      	b.n	8005002 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005000:	bf00      	nop
    }

    if(status == HAL_OK)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10d      	bne.n	8005024 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005008:	4b49      	ldr	r3, [pc, #292]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	3b01      	subs	r3, #1
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	430b      	orrs	r3, r1
 800501e:	4944      	ldr	r1, [pc, #272]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d17d      	bne.n	8005126 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800502a:	4b41      	ldr	r3, [pc, #260]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a40      	ldr	r2, [pc, #256]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005030:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005036:	f7fe f93d 	bl	80032b4 <HAL_GetTick>
 800503a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800503c:	e009      	b.n	8005052 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800503e:	f7fe f939 	bl	80032b4 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d902      	bls.n	8005052 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	73fb      	strb	r3, [r7, #15]
        break;
 8005050:	e005      	b.n	800505e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005052:	4b37      	ldr	r3, [pc, #220]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1ef      	bne.n	800503e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d160      	bne.n	8005126 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d111      	bne.n	800508e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800506a:	4b31      	ldr	r3, [pc, #196]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6892      	ldr	r2, [r2, #8]
 800507a:	0211      	lsls	r1, r2, #8
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68d2      	ldr	r2, [r2, #12]
 8005080:	0912      	lsrs	r2, r2, #4
 8005082:	0452      	lsls	r2, r2, #17
 8005084:	430a      	orrs	r2, r1
 8005086:	492a      	ldr	r1, [pc, #168]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005088:	4313      	orrs	r3, r2
 800508a:	610b      	str	r3, [r1, #16]
 800508c:	e027      	b.n	80050de <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d112      	bne.n	80050ba <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005094:	4b26      	ldr	r3, [pc, #152]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800509c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6892      	ldr	r2, [r2, #8]
 80050a4:	0211      	lsls	r1, r2, #8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6912      	ldr	r2, [r2, #16]
 80050aa:	0852      	lsrs	r2, r2, #1
 80050ac:	3a01      	subs	r2, #1
 80050ae:	0552      	lsls	r2, r2, #21
 80050b0:	430a      	orrs	r2, r1
 80050b2:	491f      	ldr	r1, [pc, #124]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	610b      	str	r3, [r1, #16]
 80050b8:	e011      	b.n	80050de <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ba:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6892      	ldr	r2, [r2, #8]
 80050ca:	0211      	lsls	r1, r2, #8
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6952      	ldr	r2, [r2, #20]
 80050d0:	0852      	lsrs	r2, r2, #1
 80050d2:	3a01      	subs	r2, #1
 80050d4:	0652      	lsls	r2, r2, #25
 80050d6:	430a      	orrs	r2, r1
 80050d8:	4915      	ldr	r1, [pc, #84]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050de:	4b14      	ldr	r3, [pc, #80]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a13      	ldr	r2, [pc, #76]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ea:	f7fe f8e3 	bl	80032b4 <HAL_GetTick>
 80050ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050f0:	e009      	b.n	8005106 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050f2:	f7fe f8df 	bl	80032b4 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d902      	bls.n	8005106 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	73fb      	strb	r3, [r7, #15]
          break;
 8005104:	e005      	b.n	8005112 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ef      	beq.n	80050f2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	4903      	ldr	r1, [pc, #12]	; (8005130 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40021000 	.word	0x40021000

08005134 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005142:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d018      	beq.n	8005180 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800514e:	4b65      	ldr	r3, [pc, #404]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0203 	and.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d10d      	bne.n	800517a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
       ||
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005166:	4b5f      	ldr	r3, [pc, #380]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
       ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d044      	beq.n	8005204 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
 800517e:	e041      	b.n	8005204 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d00c      	beq.n	80051a2 <RCCEx_PLLSAI2_Config+0x6e>
 8005188:	2b03      	cmp	r3, #3
 800518a:	d013      	beq.n	80051b4 <RCCEx_PLLSAI2_Config+0x80>
 800518c:	2b01      	cmp	r3, #1
 800518e:	d120      	bne.n	80051d2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005190:	4b54      	ldr	r3, [pc, #336]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d11d      	bne.n	80051d8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a0:	e01a      	b.n	80051d8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a2:	4b50      	ldr	r3, [pc, #320]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d116      	bne.n	80051dc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b2:	e013      	b.n	80051dc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051b4:	4b4b      	ldr	r3, [pc, #300]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10f      	bne.n	80051e0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051c0:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051d0:	e006      	b.n	80051e0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
      break;
 80051d6:	e004      	b.n	80051e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051d8:	bf00      	nop
 80051da:	e002      	b.n	80051e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051dc:	bf00      	nop
 80051de:	e000      	b.n	80051e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10d      	bne.n	8005204 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051e8:	4b3e      	ldr	r3, [pc, #248]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	430b      	orrs	r3, r1
 80051fe:	4939      	ldr	r1, [pc, #228]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005200:	4313      	orrs	r3, r2
 8005202:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d167      	bne.n	80052da <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800520a:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a35      	ldr	r2, [pc, #212]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005216:	f7fe f84d 	bl	80032b4 <HAL_GetTick>
 800521a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800521c:	e009      	b.n	8005232 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800521e:	f7fe f849 	bl	80032b4 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d902      	bls.n	8005232 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	73fb      	strb	r3, [r7, #15]
        break;
 8005230:	e005      	b.n	800523e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005232:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1ef      	bne.n	800521e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d14a      	bne.n	80052da <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d111      	bne.n	800526e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800524a:	4b26      	ldr	r3, [pc, #152]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6892      	ldr	r2, [r2, #8]
 800525a:	0211      	lsls	r1, r2, #8
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68d2      	ldr	r2, [r2, #12]
 8005260:	0912      	lsrs	r2, r2, #4
 8005262:	0452      	lsls	r2, r2, #17
 8005264:	430a      	orrs	r2, r1
 8005266:	491f      	ldr	r1, [pc, #124]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005268:	4313      	orrs	r3, r2
 800526a:	614b      	str	r3, [r1, #20]
 800526c:	e011      	b.n	8005292 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800526e:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005276:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6892      	ldr	r2, [r2, #8]
 800527e:	0211      	lsls	r1, r2, #8
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6912      	ldr	r2, [r2, #16]
 8005284:	0852      	lsrs	r2, r2, #1
 8005286:	3a01      	subs	r2, #1
 8005288:	0652      	lsls	r2, r2, #25
 800528a:	430a      	orrs	r2, r1
 800528c:	4915      	ldr	r1, [pc, #84]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800528e:	4313      	orrs	r3, r2
 8005290:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529e:	f7fe f809 	bl	80032b4 <HAL_GetTick>
 80052a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052a4:	e009      	b.n	80052ba <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052a6:	f7fe f805 	bl	80032b4 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d902      	bls.n	80052ba <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	73fb      	strb	r3, [r7, #15]
          break;
 80052b8:	e005      	b.n	80052c6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0ef      	beq.n	80052a6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	4903      	ldr	r1, [pc, #12]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40021000 	.word	0x40021000

080052e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e01d      	b.n	8005336 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fd fdce 	bl	8002eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f000 fc4a 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <HAL_TIM_Base_Start_IT+0x50>)
 8005360:	4013      	ands	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d00b      	beq.n	8005382 <HAL_TIM_Base_Start_IT+0x42>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005370:	d007      	beq.n	8005382 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	00010007 	.word	0x00010007

08005394 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e01d      	b.n	80053e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f815 	bl	80053ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f000 fbf4 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 ffde 	bl	80063d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <HAL_TIM_PWM_Start+0x98>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_TIM_PWM_Start+0x4a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1d      	ldr	r2, [pc, #116]	; (800549c <HAL_TIM_PWM_Start+0x9c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_TIM_PWM_Start+0x4a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1b      	ldr	r2, [pc, #108]	; (80054a0 <HAL_TIM_PWM_Start+0xa0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_TIM_PWM_Start+0x4a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <HAL_TIM_PWM_Start+0xa4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_TIM_PWM_Start+0x4a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <HAL_TIM_PWM_Start+0xa8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_Start+0x4e>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_TIM_PWM_Start+0x50>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	4b10      	ldr	r3, [pc, #64]	; (80054ac <HAL_TIM_PWM_Start+0xac>)
 800546c:	4013      	ands	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b06      	cmp	r3, #6
 8005474:	d00b      	beq.n	800548e <HAL_TIM_PWM_Start+0x8e>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547c:	d007      	beq.n	800548e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40013400 	.word	0x40013400
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800
 80054ac:	00010007 	.word	0x00010007

080054b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2200      	movs	r2, #0
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 ff86 	bl	80063d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2a      	ldr	r2, [pc, #168]	; (8005578 <HAL_TIM_PWM_Stop+0xc8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_TIM_PWM_Stop+0x4a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a29      	ldr	r2, [pc, #164]	; (800557c <HAL_TIM_PWM_Stop+0xcc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIM_PWM_Stop+0x4a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a27      	ldr	r2, [pc, #156]	; (8005580 <HAL_TIM_PWM_Stop+0xd0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <HAL_TIM_PWM_Stop+0x4a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <HAL_TIM_PWM_Stop+0xd4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIM_PWM_Stop+0x4a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a24      	ldr	r2, [pc, #144]	; (8005588 <HAL_TIM_PWM_Stop+0xd8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_PWM_Stop+0x4e>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_TIM_PWM_Stop+0x50>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d017      	beq.n	8005534 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	f241 1311 	movw	r3, #4369	; 0x1111
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10f      	bne.n	8005534 <HAL_TIM_PWM_Stop+0x84>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	f240 4344 	movw	r3, #1092	; 0x444
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <HAL_TIM_PWM_Stop+0x84>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005532:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6a1a      	ldr	r2, [r3, #32]
 800553a:	f241 1311 	movw	r3, #4369	; 0x1111
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10f      	bne.n	8005564 <HAL_TIM_PWM_Stop+0xb4>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	f240 4344 	movw	r3, #1092	; 0x444
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <HAL_TIM_PWM_Stop+0xb4>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800

0800558c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d122      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d11b      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0202 	mvn.w	r2, #2
 80055b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fad7 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fac9 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fada 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d122      	bne.n	800563c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d11b      	bne.n	800563c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0204 	mvn.w	r2, #4
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 faad 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa9f 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fab0 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b08      	cmp	r3, #8
 8005648:	d122      	bne.n	8005690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b08      	cmp	r3, #8
 8005656:	d11b      	bne.n	8005690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0208 	mvn.w	r2, #8
 8005660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2204      	movs	r2, #4
 8005666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa83 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa75 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fa86 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b10      	cmp	r3, #16
 800569c:	d122      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d11b      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0210 	mvn.w	r2, #16
 80056b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2208      	movs	r2, #8
 80056ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fa59 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80056d0:	e005      	b.n	80056de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fa4b 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fa5c 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d10e      	bne.n	8005710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d107      	bne.n	8005710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0201 	mvn.w	r2, #1
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fd f8f6 	bl	80028fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	2b80      	cmp	r3, #128	; 0x80
 800571c:	d10e      	bne.n	800573c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005728:	2b80      	cmp	r3, #128	; 0x80
 800572a:	d107      	bne.n	800573c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 ff56 	bl	80065e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574a:	d10e      	bne.n	800576a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d107      	bne.n	800576a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 ff49 	bl	80065fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d10e      	bne.n	8005796 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d107      	bne.n	8005796 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800578e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fa0a 	bl	8005baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d10e      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d107      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f06f 0220 	mvn.w	r2, #32
 80057ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 ff09 	bl	80065d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e105      	b.n	80059f2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b14      	cmp	r3, #20
 80057fa:	f200 80f0 	bhi.w	80059de <HAL_TIM_PWM_ConfigChannel+0x212>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	08005859 	.word	0x08005859
 8005808:	080059df 	.word	0x080059df
 800580c:	080059df 	.word	0x080059df
 8005810:	080059df 	.word	0x080059df
 8005814:	08005899 	.word	0x08005899
 8005818:	080059df 	.word	0x080059df
 800581c:	080059df 	.word	0x080059df
 8005820:	080059df 	.word	0x080059df
 8005824:	080058db 	.word	0x080058db
 8005828:	080059df 	.word	0x080059df
 800582c:	080059df 	.word	0x080059df
 8005830:	080059df 	.word	0x080059df
 8005834:	0800591b 	.word	0x0800591b
 8005838:	080059df 	.word	0x080059df
 800583c:	080059df 	.word	0x080059df
 8005840:	080059df 	.word	0x080059df
 8005844:	0800595d 	.word	0x0800595d
 8005848:	080059df 	.word	0x080059df
 800584c:	080059df 	.word	0x080059df
 8005850:	080059df 	.word	0x080059df
 8005854:	0800599d 	.word	0x0800599d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fa48 	bl	8005cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0208 	orr.w	r2, r2, #8
 8005872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0204 	bic.w	r2, r2, #4
 8005882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6999      	ldr	r1, [r3, #24]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	619a      	str	r2, [r3, #24]
      break;
 8005896:	e0a3      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fab8 	bl	8005e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6999      	ldr	r1, [r3, #24]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	619a      	str	r2, [r3, #24]
      break;
 80058d8:	e082      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fb21 	bl	8005f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0208 	orr.w	r2, r2, #8
 80058f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0204 	bic.w	r2, r2, #4
 8005904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69d9      	ldr	r1, [r3, #28]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	61da      	str	r2, [r3, #28]
      break;
 8005918:	e062      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fb89 	bl	8006038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69d9      	ldr	r1, [r3, #28]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	021a      	lsls	r2, r3, #8
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	61da      	str	r2, [r3, #28]
      break;
 800595a:	e041      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fbd2 	bl	800610c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0208 	orr.w	r2, r2, #8
 8005976:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0204 	bic.w	r2, r2, #4
 8005986:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800599a:	e021      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fc16 	bl	80061d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	021a      	lsls	r2, r3, #8
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059dc:	e000      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80059de:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop

080059fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIM_ConfigClockSource+0x18>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e0a8      	b.n	8005b66 <HAL_TIM_ConfigClockSource+0x16a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	d067      	beq.n	8005b20 <HAL_TIM_ConfigClockSource+0x124>
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	d80b      	bhi.n	8005a6c <HAL_TIM_ConfigClockSource+0x70>
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d073      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x144>
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d802      	bhi.n	8005a62 <HAL_TIM_ConfigClockSource+0x66>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d06f      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005a60:	e078      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d06c      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x144>
 8005a66:	2b30      	cmp	r3, #48	; 0x30
 8005a68:	d06a      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005a6a:	e073      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d00d      	beq.n	8005a8c <HAL_TIM_ConfigClockSource+0x90>
 8005a70:	2b70      	cmp	r3, #112	; 0x70
 8005a72:	d804      	bhi.n	8005a7e <HAL_TIM_ConfigClockSource+0x82>
 8005a74:	2b50      	cmp	r3, #80	; 0x50
 8005a76:	d033      	beq.n	8005ae0 <HAL_TIM_ConfigClockSource+0xe4>
 8005a78:	2b60      	cmp	r3, #96	; 0x60
 8005a7a:	d041      	beq.n	8005b00 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005a7c:	e06a      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a82:	d066      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x156>
 8005a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a88:	d017      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005a8a:	e063      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6899      	ldr	r1, [r3, #8]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f000 fc7a 	bl	8006394 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	609a      	str	r2, [r3, #8]
      break;
 8005ab8:	e04c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6899      	ldr	r1, [r3, #8]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f000 fc63 	bl	8006394 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005adc:	609a      	str	r2, [r3, #8]
      break;
 8005ade:	e039      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	6859      	ldr	r1, [r3, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	461a      	mov	r2, r3
 8005aee:	f000 fbd7 	bl	80062a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2150      	movs	r1, #80	; 0x50
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fc30 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005afe:	e029      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6859      	ldr	r1, [r3, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f000 fbf6 	bl	80062fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2160      	movs	r1, #96	; 0x60
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fc20 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005b1e:	e019      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6859      	ldr	r1, [r3, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f000 fbb7 	bl	80062a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2140      	movs	r1, #64	; 0x40
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fc10 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005b3e:	e009      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f000 fc07 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005b50:	e000      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a40      	ldr	r2, [pc, #256]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d00f      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3d      	ldr	r2, [pc, #244]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3c      	ldr	r2, [pc, #240]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3b      	ldr	r2, [pc, #236]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3a      	ldr	r2, [pc, #232]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2f      	ldr	r2, [pc, #188]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01f      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c20:	d01b      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2c      	ldr	r2, [pc, #176]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d017      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00f      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a27      	ldr	r2, [pc, #156]	; (8005cec <TIM_Base_SetConfig+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a10      	ldr	r2, [pc, #64]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00f      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a12      	ldr	r2, [pc, #72]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a11      	ldr	r2, [pc, #68]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a10      	ldr	r2, [pc, #64]	; (8005cec <TIM_Base_SetConfig+0x12c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a0f      	ldr	r2, [pc, #60]	; (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d103      	bne.n	8005cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40013400 	.word	0x40013400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800

08005cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f023 0201 	bic.w	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0303 	bic.w	r3, r3, #3
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f023 0302 	bic.w	r3, r3, #2
 8005d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a2c      	ldr	r2, [pc, #176]	; (8005e00 <TIM_OC1_SetConfig+0x10c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00f      	beq.n	8005d74 <TIM_OC1_SetConfig+0x80>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a2b      	ldr	r2, [pc, #172]	; (8005e04 <TIM_OC1_SetConfig+0x110>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <TIM_OC1_SetConfig+0x80>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a2a      	ldr	r2, [pc, #168]	; (8005e08 <TIM_OC1_SetConfig+0x114>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <TIM_OC1_SetConfig+0x80>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a29      	ldr	r2, [pc, #164]	; (8005e0c <TIM_OC1_SetConfig+0x118>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_OC1_SetConfig+0x80>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a28      	ldr	r2, [pc, #160]	; (8005e10 <TIM_OC1_SetConfig+0x11c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10c      	bne.n	8005d8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 0308 	bic.w	r3, r3, #8
 8005d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f023 0304 	bic.w	r3, r3, #4
 8005d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <TIM_OC1_SetConfig+0x10c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00f      	beq.n	8005db6 <TIM_OC1_SetConfig+0xc2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1a      	ldr	r2, [pc, #104]	; (8005e04 <TIM_OC1_SetConfig+0x110>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00b      	beq.n	8005db6 <TIM_OC1_SetConfig+0xc2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a19      	ldr	r2, [pc, #100]	; (8005e08 <TIM_OC1_SetConfig+0x114>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d007      	beq.n	8005db6 <TIM_OC1_SetConfig+0xc2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <TIM_OC1_SetConfig+0x118>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_OC1_SetConfig+0xc2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a17      	ldr	r2, [pc, #92]	; (8005e10 <TIM_OC1_SetConfig+0x11c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d111      	bne.n	8005dda <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40013400 	.word	0x40013400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800

08005e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f023 0210 	bic.w	r2, r3, #16
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0320 	bic.w	r3, r3, #32
 8005e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a28      	ldr	r2, [pc, #160]	; (8005f14 <TIM_OC2_SetConfig+0x100>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_OC2_SetConfig+0x6c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a27      	ldr	r2, [pc, #156]	; (8005f18 <TIM_OC2_SetConfig+0x104>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10d      	bne.n	8005e9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <TIM_OC2_SetConfig+0x100>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_OC2_SetConfig+0xb0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a1c      	ldr	r2, [pc, #112]	; (8005f18 <TIM_OC2_SetConfig+0x104>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_OC2_SetConfig+0xb0>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <TIM_OC2_SetConfig+0x108>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_OC2_SetConfig+0xb0>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a1a      	ldr	r2, [pc, #104]	; (8005f20 <TIM_OC2_SetConfig+0x10c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC2_SetConfig+0xb0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <TIM_OC2_SetConfig+0x110>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d113      	bne.n	8005eec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40013400 	.word	0x40013400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40014400 	.word	0x40014400
 8005f24:	40014800 	.word	0x40014800

08005f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0303 	bic.w	r3, r3, #3
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a27      	ldr	r2, [pc, #156]	; (8006024 <TIM_OC3_SetConfig+0xfc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_OC3_SetConfig+0x6a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a26      	ldr	r2, [pc, #152]	; (8006028 <TIM_OC3_SetConfig+0x100>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d10d      	bne.n	8005fae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1c      	ldr	r2, [pc, #112]	; (8006024 <TIM_OC3_SetConfig+0xfc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00f      	beq.n	8005fd6 <TIM_OC3_SetConfig+0xae>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <TIM_OC3_SetConfig+0x100>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00b      	beq.n	8005fd6 <TIM_OC3_SetConfig+0xae>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a1a      	ldr	r2, [pc, #104]	; (800602c <TIM_OC3_SetConfig+0x104>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d007      	beq.n	8005fd6 <TIM_OC3_SetConfig+0xae>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a19      	ldr	r2, [pc, #100]	; (8006030 <TIM_OC3_SetConfig+0x108>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC3_SetConfig+0xae>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a18      	ldr	r2, [pc, #96]	; (8006034 <TIM_OC3_SetConfig+0x10c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d113      	bne.n	8005ffe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40012c00 	.word	0x40012c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800

08006038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	021b      	lsls	r3, r3, #8
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	031b      	lsls	r3, r3, #12
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <TIM_OC4_SetConfig+0xc0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00f      	beq.n	80060bc <TIM_OC4_SetConfig+0x84>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a17      	ldr	r2, [pc, #92]	; (80060fc <TIM_OC4_SetConfig+0xc4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_OC4_SetConfig+0x84>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a16      	ldr	r2, [pc, #88]	; (8006100 <TIM_OC4_SetConfig+0xc8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_OC4_SetConfig+0x84>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a15      	ldr	r2, [pc, #84]	; (8006104 <TIM_OC4_SetConfig+0xcc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC4_SetConfig+0x84>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a14      	ldr	r2, [pc, #80]	; (8006108 <TIM_OC4_SetConfig+0xd0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d109      	bne.n	80060d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	019b      	lsls	r3, r3, #6
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40013400 	.word	0x40013400
 8006100:	40014000 	.word	0x40014000
 8006104:	40014400 	.word	0x40014400
 8006108:	40014800 	.word	0x40014800

0800610c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006150:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a17      	ldr	r2, [pc, #92]	; (80061c0 <TIM_OC5_SetConfig+0xb4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00f      	beq.n	8006186 <TIM_OC5_SetConfig+0x7a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a16      	ldr	r2, [pc, #88]	; (80061c4 <TIM_OC5_SetConfig+0xb8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00b      	beq.n	8006186 <TIM_OC5_SetConfig+0x7a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <TIM_OC5_SetConfig+0xbc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <TIM_OC5_SetConfig+0x7a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a14      	ldr	r2, [pc, #80]	; (80061cc <TIM_OC5_SetConfig+0xc0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_OC5_SetConfig+0x7a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <TIM_OC5_SetConfig+0xc4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d109      	bne.n	800619a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800618c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40013400 	.word	0x40013400
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800

080061d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800621a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	051b      	lsls	r3, r3, #20
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a18      	ldr	r2, [pc, #96]	; (800628c <TIM_OC6_SetConfig+0xb8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00f      	beq.n	8006250 <TIM_OC6_SetConfig+0x7c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a17      	ldr	r2, [pc, #92]	; (8006290 <TIM_OC6_SetConfig+0xbc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00b      	beq.n	8006250 <TIM_OC6_SetConfig+0x7c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a16      	ldr	r2, [pc, #88]	; (8006294 <TIM_OC6_SetConfig+0xc0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d007      	beq.n	8006250 <TIM_OC6_SetConfig+0x7c>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a15      	ldr	r2, [pc, #84]	; (8006298 <TIM_OC6_SetConfig+0xc4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC6_SetConfig+0x7c>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a14      	ldr	r2, [pc, #80]	; (800629c <TIM_OC6_SetConfig+0xc8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d109      	bne.n	8006264 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006256:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40013400 	.word	0x40013400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800

080062a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f023 0201 	bic.w	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f023 030a 	bic.w	r3, r3, #10
 80062dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062fe:	b480      	push	{r7}
 8006300:	b087      	sub	sp, #28
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f023 0210 	bic.w	r2, r3, #16
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800633a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	f043 0307 	orr.w	r3, r3, #7
 8006380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	021a      	lsls	r2, r3, #8
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	bf00      	nop
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2201      	movs	r2, #1
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1a      	ldr	r2, [r3, #32]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	43db      	mvns	r3, r3
 80063f6:	401a      	ands	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	431a      	orrs	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006434:	2302      	movs	r3, #2
 8006436:	e045      	b.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1b      	ldr	r2, [pc, #108]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d108      	bne.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006472:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006484:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006496:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40013400 	.word	0x40013400

080064d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e065      	b.n	80065c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a16      	ldr	r2, [pc, #88]	; (80065cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d115      	bne.n	80065ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	051b      	lsls	r3, r3, #20
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40013400 	.word	0x40013400

080065d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e040      	b.n	80066a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fc fcae 	bl	8002f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2224      	movs	r2, #36	; 0x24
 800663c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fa8e 	bl	8006b70 <UART_SetConfig>
 8006654:	4603      	mov	r3, r0
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e022      	b.n	80066a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fdca 	bl	8007200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800667a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800668a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fe51 	bl	8007344 <UART_CheckIdleState>
 80066a2:	4603      	mov	r3, r0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066be:	2b20      	cmp	r3, #32
 80066c0:	f040 808a 	bne.w	80067d8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <HAL_UART_Receive_IT+0x24>
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e082      	b.n	80067da <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Receive_IT+0x36>
 80066de:	2302      	movs	r3, #2
 80066e0:	e07b      	b.n	80067da <HAL_UART_Receive_IT+0x12e>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	88fa      	ldrh	r2, [r7, #6]
 80066f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670e:	d10e      	bne.n	800672e <HAL_UART_Receive_IT+0x82>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <HAL_UART_Receive_IT+0x78>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800671e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006722:	e02d      	b.n	8006780 <HAL_UART_Receive_IT+0xd4>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	22ff      	movs	r2, #255	; 0xff
 8006728:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800672c:	e028      	b.n	8006780 <HAL_UART_Receive_IT+0xd4>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10d      	bne.n	8006752 <HAL_UART_Receive_IT+0xa6>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d104      	bne.n	8006748 <HAL_UART_Receive_IT+0x9c>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	22ff      	movs	r2, #255	; 0xff
 8006742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006746:	e01b      	b.n	8006780 <HAL_UART_Receive_IT+0xd4>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	227f      	movs	r2, #127	; 0x7f
 800674c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006750:	e016      	b.n	8006780 <HAL_UART_Receive_IT+0xd4>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800675a:	d10d      	bne.n	8006778 <HAL_UART_Receive_IT+0xcc>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <HAL_UART_Receive_IT+0xc2>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	227f      	movs	r2, #127	; 0x7f
 8006768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800676c:	e008      	b.n	8006780 <HAL_UART_Receive_IT+0xd4>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	223f      	movs	r2, #63	; 0x3f
 8006772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006776:	e003      	b.n	8006780 <HAL_UART_Receive_IT+0xd4>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2222      	movs	r2, #34	; 0x22
 800678a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a4:	d107      	bne.n	80067b6 <HAL_UART_Receive_IT+0x10a>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4a0d      	ldr	r2, [pc, #52]	; (80067e8 <HAL_UART_Receive_IT+0x13c>)
 80067b2:	661a      	str	r2, [r3, #96]	; 0x60
 80067b4:	e002      	b.n	80067bc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a0c      	ldr	r2, [pc, #48]	; (80067ec <HAL_UART_Receive_IT+0x140>)
 80067ba:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80067d2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e000      	b.n	80067da <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80067d8:	2302      	movs	r3, #2
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	080076b9 	.word	0x080076b9
 80067ec:	0800760f 	.word	0x0800760f

080067f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006802:	2b20      	cmp	r3, #32
 8006804:	d164      	bne.n	80068d0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <HAL_UART_Transmit_DMA+0x22>
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e05d      	b.n	80068d2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_UART_Transmit_DMA+0x34>
 8006820:	2302      	movs	r3, #2
 8006822:	e056      	b.n	80068d2 <HAL_UART_Transmit_DMA+0xe2>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	88fa      	ldrh	r2, [r7, #6]
 8006836:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	88fa      	ldrh	r2, [r7, #6]
 800683e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2221      	movs	r2, #33	; 0x21
 800684c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006852:	2b00      	cmp	r3, #0
 8006854:	d02a      	beq.n	80068ac <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685a:	4a20      	ldr	r2, [pc, #128]	; (80068dc <HAL_UART_Transmit_DMA+0xec>)
 800685c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006862:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <HAL_UART_Transmit_DMA+0xf0>)
 8006864:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800686a:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <HAL_UART_Transmit_DMA+0xf4>)
 800686c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006872:	2200      	movs	r2, #0
 8006874:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687e:	4619      	mov	r1, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3328      	adds	r3, #40	; 0x28
 8006886:	461a      	mov	r2, r3
 8006888:	88fb      	ldrh	r3, [r7, #6]
 800688a:	f7fc ff0b 	bl	80036a4 <HAL_DMA_Start_IT>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2210      	movs	r2, #16
 8006898:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e012      	b.n	80068d2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2240      	movs	r2, #64	; 0x40
 80068b2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068ca:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e000      	b.n	80068d2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80068d0:	2302      	movs	r3, #2
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	080074c9 	.word	0x080074c9
 80068e0:	0800751d 	.word	0x0800751d
 80068e4:	08007539 	.word	0x08007539

080068e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d113      	bne.n	800693e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00e      	beq.n	800693e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d009      	beq.n	800693e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80ff 	beq.w	8006b32 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
      }
      return;
 800693c:	e0f9      	b.n	8006b32 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 80c1 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 80b6 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <HAL_UART_IRQHandler+0x9c>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2201      	movs	r2, #1
 8006976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800697c:	f043 0201 	orr.w	r2, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <HAL_UART_IRQHandler+0xc4>
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2202      	movs	r2, #2
 800699e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069a4:	f043 0204 	orr.w	r2, r3, #4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00e      	beq.n	80069d4 <HAL_UART_IRQHandler+0xec>
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d009      	beq.n	80069d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2204      	movs	r2, #4
 80069c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069cc:	f043 0202 	orr.w	r2, r3, #2
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d013      	beq.n	8006a06 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d009      	beq.n	8006a06 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2208      	movs	r2, #8
 80069f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8093 	beq.w	8006b36 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a38:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d004      	beq.n	8006a52 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d031      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fd18 	bl	8007488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	d123      	bne.n	8006aae <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a74:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d013      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a82:	4a30      	ldr	r2, [pc, #192]	; (8006b44 <HAL_UART_IRQHandler+0x25c>)
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fc fe6a 	bl	8003764 <HAL_DMA_Abort_IT>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d016      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	e00e      	b.n	8006ac4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f858 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	e00a      	b.n	8006ac4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f854 	bl	8006b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab4:	e006      	b.n	8006ac4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f850 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006ac2:	e038      	b.n	8006b36 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	bf00      	nop
    return;
 8006ac6:	e036      	b.n	8006b36 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00d      	beq.n	8006aee <HAL_UART_IRQHandler+0x206>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ae4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fe3b 	bl	8007762 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aec:	e026      	b.n	8006b3c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00d      	beq.n	8006b14 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
    }
    return;
 8006b12:	e012      	b.n	8006b3a <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00e      	beq.n	8006b3c <HAL_UART_IRQHandler+0x254>
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fd57 	bl	80075dc <UART_EndTransmit_IT>
    return;
 8006b2e:	bf00      	nop
 8006b30:	e004      	b.n	8006b3c <HAL_UART_IRQHandler+0x254>
      return;
 8006b32:	bf00      	nop
 8006b34:	e002      	b.n	8006b3c <HAL_UART_IRQHandler+0x254>
    return;
 8006b36:	bf00      	nop
 8006b38:	e000      	b.n	8006b3c <HAL_UART_IRQHandler+0x254>
    return;
 8006b3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	080075b1 	.word	0x080075b1

08006b48 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b70:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4bac      	ldr	r3, [pc, #688]	; (8006e58 <UART_SetConfig+0x2e8>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	69f9      	ldr	r1, [r7, #28]
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4aa2      	ldr	r2, [pc, #648]	; (8006e5c <UART_SetConfig+0x2ec>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a99      	ldr	r2, [pc, #612]	; (8006e60 <UART_SetConfig+0x2f0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d121      	bne.n	8006c44 <UART_SetConfig+0xd4>
 8006c00:	4b98      	ldr	r3, [pc, #608]	; (8006e64 <UART_SetConfig+0x2f4>)
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d816      	bhi.n	8006c3c <UART_SetConfig+0xcc>
 8006c0e:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0xa4>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c25 	.word	0x08006c25
 8006c18:	08006c31 	.word	0x08006c31
 8006c1c:	08006c2b 	.word	0x08006c2b
 8006c20:	08006c37 	.word	0x08006c37
 8006c24:	2301      	movs	r3, #1
 8006c26:	76fb      	strb	r3, [r7, #27]
 8006c28:	e0e8      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	76fb      	strb	r3, [r7, #27]
 8006c2e:	e0e5      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006c30:	2304      	movs	r3, #4
 8006c32:	76fb      	strb	r3, [r7, #27]
 8006c34:	e0e2      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006c36:	2308      	movs	r3, #8
 8006c38:	76fb      	strb	r3, [r7, #27]
 8006c3a:	e0df      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	76fb      	strb	r3, [r7, #27]
 8006c40:	bf00      	nop
 8006c42:	e0db      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a87      	ldr	r2, [pc, #540]	; (8006e68 <UART_SetConfig+0x2f8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d134      	bne.n	8006cb8 <UART_SetConfig+0x148>
 8006c4e:	4b85      	ldr	r3, [pc, #532]	; (8006e64 <UART_SetConfig+0x2f4>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c54:	f003 030c 	and.w	r3, r3, #12
 8006c58:	2b0c      	cmp	r3, #12
 8006c5a:	d829      	bhi.n	8006cb0 <UART_SetConfig+0x140>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UART_SetConfig+0xf4>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c99 	.word	0x08006c99
 8006c68:	08006cb1 	.word	0x08006cb1
 8006c6c:	08006cb1 	.word	0x08006cb1
 8006c70:	08006cb1 	.word	0x08006cb1
 8006c74:	08006ca5 	.word	0x08006ca5
 8006c78:	08006cb1 	.word	0x08006cb1
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006cb1 	.word	0x08006cb1
 8006c84:	08006c9f 	.word	0x08006c9f
 8006c88:	08006cb1 	.word	0x08006cb1
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb1 	.word	0x08006cb1
 8006c94:	08006cab 	.word	0x08006cab
 8006c98:	2300      	movs	r3, #0
 8006c9a:	76fb      	strb	r3, [r7, #27]
 8006c9c:	e0ae      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	76fb      	strb	r3, [r7, #27]
 8006ca2:	e0ab      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	76fb      	strb	r3, [r7, #27]
 8006ca8:	e0a8      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006caa:	2308      	movs	r3, #8
 8006cac:	76fb      	strb	r3, [r7, #27]
 8006cae:	e0a5      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	76fb      	strb	r3, [r7, #27]
 8006cb4:	bf00      	nop
 8006cb6:	e0a1      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a6b      	ldr	r2, [pc, #428]	; (8006e6c <UART_SetConfig+0x2fc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d120      	bne.n	8006d04 <UART_SetConfig+0x194>
 8006cc2:	4b68      	ldr	r3, [pc, #416]	; (8006e64 <UART_SetConfig+0x2f4>)
 8006cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d00f      	beq.n	8006cf0 <UART_SetConfig+0x180>
 8006cd0:	2b10      	cmp	r3, #16
 8006cd2:	d802      	bhi.n	8006cda <UART_SetConfig+0x16a>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <UART_SetConfig+0x174>
 8006cd8:	e010      	b.n	8006cfc <UART_SetConfig+0x18c>
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d005      	beq.n	8006cea <UART_SetConfig+0x17a>
 8006cde:	2b30      	cmp	r3, #48	; 0x30
 8006ce0:	d009      	beq.n	8006cf6 <UART_SetConfig+0x186>
 8006ce2:	e00b      	b.n	8006cfc <UART_SetConfig+0x18c>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	76fb      	strb	r3, [r7, #27]
 8006ce8:	e088      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006cea:	2302      	movs	r3, #2
 8006cec:	76fb      	strb	r3, [r7, #27]
 8006cee:	e085      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	76fb      	strb	r3, [r7, #27]
 8006cf4:	e082      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	76fb      	strb	r3, [r7, #27]
 8006cfa:	e07f      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	76fb      	strb	r3, [r7, #27]
 8006d00:	bf00      	nop
 8006d02:	e07b      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a59      	ldr	r2, [pc, #356]	; (8006e70 <UART_SetConfig+0x300>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d120      	bne.n	8006d50 <UART_SetConfig+0x1e0>
 8006d0e:	4b55      	ldr	r3, [pc, #340]	; (8006e64 <UART_SetConfig+0x2f4>)
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	d00f      	beq.n	8006d3c <UART_SetConfig+0x1cc>
 8006d1c:	2b40      	cmp	r3, #64	; 0x40
 8006d1e:	d802      	bhi.n	8006d26 <UART_SetConfig+0x1b6>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <UART_SetConfig+0x1c0>
 8006d24:	e010      	b.n	8006d48 <UART_SetConfig+0x1d8>
 8006d26:	2b80      	cmp	r3, #128	; 0x80
 8006d28:	d005      	beq.n	8006d36 <UART_SetConfig+0x1c6>
 8006d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d2c:	d009      	beq.n	8006d42 <UART_SetConfig+0x1d2>
 8006d2e:	e00b      	b.n	8006d48 <UART_SetConfig+0x1d8>
 8006d30:	2300      	movs	r3, #0
 8006d32:	76fb      	strb	r3, [r7, #27]
 8006d34:	e062      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d36:	2302      	movs	r3, #2
 8006d38:	76fb      	strb	r3, [r7, #27]
 8006d3a:	e05f      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	76fb      	strb	r3, [r7, #27]
 8006d40:	e05c      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d42:	2308      	movs	r3, #8
 8006d44:	76fb      	strb	r3, [r7, #27]
 8006d46:	e059      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	76fb      	strb	r3, [r7, #27]
 8006d4c:	bf00      	nop
 8006d4e:	e055      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a47      	ldr	r2, [pc, #284]	; (8006e74 <UART_SetConfig+0x304>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d124      	bne.n	8006da4 <UART_SetConfig+0x234>
 8006d5a:	4b42      	ldr	r3, [pc, #264]	; (8006e64 <UART_SetConfig+0x2f4>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d68:	d012      	beq.n	8006d90 <UART_SetConfig+0x220>
 8006d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6e:	d802      	bhi.n	8006d76 <UART_SetConfig+0x206>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <UART_SetConfig+0x214>
 8006d74:	e012      	b.n	8006d9c <UART_SetConfig+0x22c>
 8006d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d7a:	d006      	beq.n	8006d8a <UART_SetConfig+0x21a>
 8006d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d80:	d009      	beq.n	8006d96 <UART_SetConfig+0x226>
 8006d82:	e00b      	b.n	8006d9c <UART_SetConfig+0x22c>
 8006d84:	2300      	movs	r3, #0
 8006d86:	76fb      	strb	r3, [r7, #27]
 8006d88:	e038      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	76fb      	strb	r3, [r7, #27]
 8006d8e:	e035      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d90:	2304      	movs	r3, #4
 8006d92:	76fb      	strb	r3, [r7, #27]
 8006d94:	e032      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d96:	2308      	movs	r3, #8
 8006d98:	76fb      	strb	r3, [r7, #27]
 8006d9a:	e02f      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	76fb      	strb	r3, [r7, #27]
 8006da0:	bf00      	nop
 8006da2:	e02b      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a2c      	ldr	r2, [pc, #176]	; (8006e5c <UART_SetConfig+0x2ec>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d124      	bne.n	8006df8 <UART_SetConfig+0x288>
 8006dae:	4b2d      	ldr	r3, [pc, #180]	; (8006e64 <UART_SetConfig+0x2f4>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dbc:	d012      	beq.n	8006de4 <UART_SetConfig+0x274>
 8006dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc2:	d802      	bhi.n	8006dca <UART_SetConfig+0x25a>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <UART_SetConfig+0x268>
 8006dc8:	e012      	b.n	8006df0 <UART_SetConfig+0x280>
 8006dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dce:	d006      	beq.n	8006dde <UART_SetConfig+0x26e>
 8006dd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd4:	d009      	beq.n	8006dea <UART_SetConfig+0x27a>
 8006dd6:	e00b      	b.n	8006df0 <UART_SetConfig+0x280>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	76fb      	strb	r3, [r7, #27]
 8006ddc:	e00e      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006dde:	2302      	movs	r3, #2
 8006de0:	76fb      	strb	r3, [r7, #27]
 8006de2:	e00b      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006de4:	2304      	movs	r3, #4
 8006de6:	76fb      	strb	r3, [r7, #27]
 8006de8:	e008      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006dea:	2308      	movs	r3, #8
 8006dec:	76fb      	strb	r3, [r7, #27]
 8006dee:	e005      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006df0:	2310      	movs	r3, #16
 8006df2:	76fb      	strb	r3, [r7, #27]
 8006df4:	bf00      	nop
 8006df6:	e001      	b.n	8006dfc <UART_SetConfig+0x28c>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <UART_SetConfig+0x2ec>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f040 80fa 	bne.w	8006ffc <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e08:	7efb      	ldrb	r3, [r7, #27]
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d836      	bhi.n	8006e7c <UART_SetConfig+0x30c>
 8006e0e:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <UART_SetConfig+0x2a4>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e7d 	.word	0x08006e7d
 8006e1c:	08006e41 	.word	0x08006e41
 8006e20:	08006e7d 	.word	0x08006e7d
 8006e24:	08006e47 	.word	0x08006e47
 8006e28:	08006e7d 	.word	0x08006e7d
 8006e2c:	08006e7d 	.word	0x08006e7d
 8006e30:	08006e7d 	.word	0x08006e7d
 8006e34:	08006e4f 	.word	0x08006e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006e38:	f7fd fd1a 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 8006e3c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e3e:	e020      	b.n	8006e82 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006e40:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <UART_SetConfig+0x308>)
 8006e42:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e44:	e01d      	b.n	8006e82 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006e46:	f7fd fc7d 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8006e4a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e4c:	e019      	b.n	8006e82 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e52:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e54:	e015      	b.n	8006e82 <UART_SetConfig+0x312>
 8006e56:	bf00      	nop
 8006e58:	efff69f3 	.word	0xefff69f3
 8006e5c:	40008000 	.word	0x40008000
 8006e60:	40013800 	.word	0x40013800
 8006e64:	40021000 	.word	0x40021000
 8006e68:	40004400 	.word	0x40004400
 8006e6c:	40004800 	.word	0x40004800
 8006e70:	40004c00 	.word	0x40004c00
 8006e74:	40005000 	.word	0x40005000
 8006e78:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	74fb      	strb	r3, [r7, #19]
        break;
 8006e80:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 81ac 	beq.w	80071e2 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4413      	add	r3, r2
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d305      	bcc.n	8006ea6 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d902      	bls.n	8006eac <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	74fb      	strb	r3, [r7, #19]
 8006eaa:	e19a      	b.n	80071e2 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8006eac:	7efb      	ldrb	r3, [r7, #27]
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	f200 8091 	bhi.w	8006fd6 <UART_SetConfig+0x466>
 8006eb4:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0x34c>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006fd7 	.word	0x08006fd7
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006fd7 	.word	0x08006fd7
 8006ecc:	08006f61 	.word	0x08006f61
 8006ed0:	08006fd7 	.word	0x08006fd7
 8006ed4:	08006fd7 	.word	0x08006fd7
 8006ed8:	08006fd7 	.word	0x08006fd7
 8006edc:	08006fad 	.word	0x08006fad
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006ee0:	f7fd fcc6 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	f04f 0400 	mov.w	r4, #0
 8006ef4:	0214      	lsls	r4, r2, #8
 8006ef6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006efa:	020b      	lsls	r3, r1, #8
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6852      	ldr	r2, [r2, #4]
 8006f00:	0852      	lsrs	r2, r2, #1
 8006f02:	4611      	mov	r1, r2
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	eb13 0b01 	adds.w	fp, r3, r1
 8006f0c:	eb44 0c02 	adc.w	ip, r4, r2
 8006f10:	4658      	mov	r0, fp
 8006f12:	4661      	mov	r1, ip
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f04f 0400 	mov.w	r4, #0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4623      	mov	r3, r4
 8006f20:	f7f9 f952 	bl	80001c8 <__aeabi_uldivmod>
 8006f24:	4603      	mov	r3, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f2a:	e057      	b.n	8006fdc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	f04f 0400 	mov.w	r4, #0
 8006f36:	49b1      	ldr	r1, [pc, #708]	; (80071fc <UART_SetConfig+0x68c>)
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	eb13 0b01 	adds.w	fp, r3, r1
 8006f40:	eb44 0c02 	adc.w	ip, r4, r2
 8006f44:	4658      	mov	r0, fp
 8006f46:	4661      	mov	r1, ip
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f04f 0400 	mov.w	r4, #0
 8006f50:	461a      	mov	r2, r3
 8006f52:	4623      	mov	r3, r4
 8006f54:	f7f9 f938 	bl	80001c8 <__aeabi_uldivmod>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f5e:	e03d      	b.n	8006fdc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006f60:	f7fd fbf0 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8006f64:	4603      	mov	r3, r0
 8006f66:	4619      	mov	r1, r3
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	f04f 0400 	mov.w	r4, #0
 8006f74:	0214      	lsls	r4, r2, #8
 8006f76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006f7a:	020b      	lsls	r3, r1, #8
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6852      	ldr	r2, [r2, #4]
 8006f80:	0852      	lsrs	r2, r2, #1
 8006f82:	4611      	mov	r1, r2
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	eb13 0b01 	adds.w	fp, r3, r1
 8006f8c:	eb44 0c02 	adc.w	ip, r4, r2
 8006f90:	4658      	mov	r0, fp
 8006f92:	4661      	mov	r1, ip
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f04f 0400 	mov.w	r4, #0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4623      	mov	r3, r4
 8006fa0:	f7f9 f912 	bl	80001c8 <__aeabi_uldivmod>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006faa:	e017      	b.n	8006fdc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	f04f 0400 	mov.w	r4, #0
 8006fb6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006fba:	f144 0100 	adc.w	r1, r4, #0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f04f 0400 	mov.w	r4, #0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	4623      	mov	r3, r4
 8006fca:	f7f9 f8fd 	bl	80001c8 <__aeabi_uldivmod>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006fd4:	e002      	b.n	8006fdc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	74fb      	strb	r3, [r7, #19]
            break;
 8006fda:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe2:	d308      	bcc.n	8006ff6 <UART_SetConfig+0x486>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fea:	d204      	bcs.n	8006ff6 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	60da      	str	r2, [r3, #12]
 8006ff4:	e0f5      	b.n	80071e2 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	74fb      	strb	r3, [r7, #19]
 8006ffa:	e0f2      	b.n	80071e2 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007004:	d17f      	bne.n	8007106 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8007006:	7efb      	ldrb	r3, [r7, #27]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d85c      	bhi.n	80070c6 <UART_SetConfig+0x556>
 800700c:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <UART_SetConfig+0x4a4>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	08007039 	.word	0x08007039
 8007018:	08007057 	.word	0x08007057
 800701c:	08007075 	.word	0x08007075
 8007020:	080070c7 	.word	0x080070c7
 8007024:	08007091 	.word	0x08007091
 8007028:	080070c7 	.word	0x080070c7
 800702c:	080070c7 	.word	0x080070c7
 8007030:	080070c7 	.word	0x080070c7
 8007034:	080070af 	.word	0x080070af
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007038:	f7fd fc1a 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 800703c:	4603      	mov	r3, r0
 800703e:	005a      	lsls	r2, r3, #1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	441a      	add	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	b29b      	uxth	r3, r3
 8007052:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007054:	e03a      	b.n	80070cc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007056:	f7fd fc21 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 800705a:	4603      	mov	r3, r0
 800705c:	005a      	lsls	r2, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	441a      	add	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	fbb2 f3f3 	udiv	r3, r2, r3
 800706e:	b29b      	uxth	r3, r3
 8007070:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007072:	e02b      	b.n	80070cc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	085b      	lsrs	r3, r3, #1
 800707a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800707e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6852      	ldr	r2, [r2, #4]
 8007086:	fbb3 f3f2 	udiv	r3, r3, r2
 800708a:	b29b      	uxth	r3, r3
 800708c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800708e:	e01d      	b.n	80070cc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007090:	f7fd fb58 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8007094:	4603      	mov	r3, r0
 8007096:	005a      	lsls	r2, r3, #1
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	441a      	add	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80070ac:	e00e      	b.n	80070cc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80070c4:	e002      	b.n	80070cc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	74fb      	strb	r3, [r7, #19]
        break;
 80070ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b0f      	cmp	r3, #15
 80070d0:	d916      	bls.n	8007100 <UART_SetConfig+0x590>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d8:	d212      	bcs.n	8007100 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f023 030f 	bic.w	r3, r3, #15
 80070e2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	897b      	ldrh	r3, [r7, #10]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	897a      	ldrh	r2, [r7, #10]
 80070fc:	60da      	str	r2, [r3, #12]
 80070fe:	e070      	b.n	80071e2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	74fb      	strb	r3, [r7, #19]
 8007104:	e06d      	b.n	80071e2 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8007106:	7efb      	ldrb	r3, [r7, #27]
 8007108:	2b08      	cmp	r3, #8
 800710a:	d859      	bhi.n	80071c0 <UART_SetConfig+0x650>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <UART_SetConfig+0x5a4>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007139 	.word	0x08007139
 8007118:	08007155 	.word	0x08007155
 800711c:	08007171 	.word	0x08007171
 8007120:	080071c1 	.word	0x080071c1
 8007124:	0800718d 	.word	0x0800718d
 8007128:	080071c1 	.word	0x080071c1
 800712c:	080071c1 	.word	0x080071c1
 8007130:	080071c1 	.word	0x080071c1
 8007134:	080071a9 	.word	0x080071a9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007138:	f7fd fb9a 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 800713c:	4602      	mov	r2, r0
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	441a      	add	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	fbb2 f3f3 	udiv	r3, r2, r3
 800714e:	b29b      	uxth	r3, r3
 8007150:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007152:	e038      	b.n	80071c6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007154:	f7fd fba2 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 8007158:	4602      	mov	r2, r0
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	085b      	lsrs	r3, r3, #1
 8007160:	441a      	add	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	fbb2 f3f3 	udiv	r3, r2, r3
 800716a:	b29b      	uxth	r3, r3
 800716c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800716e:	e02a      	b.n	80071c6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800717a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6852      	ldr	r2, [r2, #4]
 8007182:	fbb3 f3f2 	udiv	r3, r3, r2
 8007186:	b29b      	uxth	r3, r3
 8007188:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800718a:	e01c      	b.n	80071c6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800718c:	f7fd fada 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8007190:	4602      	mov	r2, r0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	441a      	add	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80071a6:	e00e      	b.n	80071c6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80071be:	e002      	b.n	80071c6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	74fb      	strb	r3, [r7, #19]
        break;
 80071c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b0f      	cmp	r3, #15
 80071ca:	d908      	bls.n	80071de <UART_SetConfig+0x66e>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d2:	d204      	bcs.n	80071de <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	60da      	str	r2, [r3, #12]
 80071dc:	e001      	b.n	80071e2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80071ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3720      	adds	r7, #32
 80071f4:	46bd      	mov	sp, r7
 80071f6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80071fa:	bf00      	nop
 80071fc:	f4240000 	.word	0xf4240000

08007200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	f003 0310 	and.w	r3, r3, #16
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01a      	beq.n	8007316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fe:	d10a      	bne.n	8007316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	605a      	str	r2, [r3, #4]
  }
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af02      	add	r7, sp, #8
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007352:	f7fb ffaf 	bl	80032b4 <HAL_GetTick>
 8007356:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b08      	cmp	r3, #8
 8007364:	d10e      	bne.n	8007384 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007366:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f82a 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e020      	b.n	80073c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b04      	cmp	r3, #4
 8007390:	d10e      	bne.n	80073b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007392:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f814 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e00a      	b.n	80073c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	603b      	str	r3, [r7, #0]
 80073da:	4613      	mov	r3, r2
 80073dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073de:	e02a      	b.n	8007436 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073e6:	d026      	beq.n	8007436 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073e8:	f7fb ff64 	bl	80032b4 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d302      	bcc.n	80073fe <UART_WaitOnFlagUntilTimeout+0x30>
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d11b      	bne.n	8007436 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800740c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0201 	bic.w	r2, r2, #1
 800741c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2220      	movs	r2, #32
 8007422:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e00f      	b.n	8007456 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4013      	ands	r3, r2
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	bf0c      	ite	eq
 8007446:	2301      	moveq	r3, #1
 8007448:	2300      	movne	r3, #0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	429a      	cmp	r2, r3
 8007452:	d0c5      	beq.n	80073e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007474:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800749e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0201 	bic.w	r2, r2, #1
 80074ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	661a      	str	r2, [r3, #96]	; 0x60
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d114      	bne.n	800750e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074fa:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800750a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800750c:	e002      	b.n	8007514 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7fb f9e4 	bl	80028dc <HAL_UART_TxCpltCallback>
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007528:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f7ff fb0c 	bl	8006b48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007550:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b80      	cmp	r3, #128	; 0x80
 800755e:	d109      	bne.n	8007574 <UART_DMAError+0x3c>
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	2b21      	cmp	r3, #33	; 0x21
 8007564:	d106      	bne.n	8007574 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2200      	movs	r2, #0
 800756a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800756e:	6978      	ldr	r0, [r7, #20]
 8007570:	f7ff ff75 	bl	800745e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757e:	2b40      	cmp	r3, #64	; 0x40
 8007580:	d109      	bne.n	8007596 <UART_DMAError+0x5e>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b22      	cmp	r3, #34	; 0x22
 8007586:	d106      	bne.n	8007596 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2200      	movs	r2, #0
 800758c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007590:	6978      	ldr	r0, [r7, #20]
 8007592:	f7ff ff79 	bl	8007488 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800759a:	f043 0210 	orr.w	r2, r3, #16
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075a2:	6978      	ldr	r0, [r7, #20]
 80075a4:	f7ff fada 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a8:	bf00      	nop
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff fac4 	bl	8006b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7fb f96b 	bl	80028dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800761c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007622:	2b22      	cmp	r3, #34	; 0x22
 8007624:	d13a      	bne.n	800769c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800762c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800762e:	89bb      	ldrh	r3, [r7, #12]
 8007630:	b2d9      	uxtb	r1, r3
 8007632:	89fb      	ldrh	r3, [r7, #14]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	400a      	ands	r2, r1
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d123      	bne.n	80076b0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007676:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0201 	bic.w	r2, r2, #1
 8007686:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7fb f8eb 	bl	8002870 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800769a:	e009      	b.n	80076b0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	8b1b      	ldrh	r3, [r3, #24]
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f042 0208 	orr.w	r2, r2, #8
 80076ac:	b292      	uxth	r2, r2
 80076ae:	831a      	strh	r2, [r3, #24]
}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076cc:	2b22      	cmp	r3, #34	; 0x22
 80076ce:	d13a      	bne.n	8007746 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076d6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076dc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80076de:	89ba      	ldrh	r2, [r7, #12]
 80076e0:	89fb      	ldrh	r3, [r7, #14]
 80076e2:	4013      	ands	r3, r2
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ee:	1c9a      	adds	r2, r3, #2
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d123      	bne.n	800775a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007720:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0201 	bic.w	r2, r2, #1
 8007730:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fb f896 	bl	8002870 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007744:	e009      	b.n	800775a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	8b1b      	ldrh	r3, [r3, #24]
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0208 	orr.w	r2, r2, #8
 8007756:	b292      	uxth	r2, r2
 8007758:	831a      	strh	r2, [r3, #24]
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
	...

08007778 <__libc_init_array>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	4e0d      	ldr	r6, [pc, #52]	; (80077b0 <__libc_init_array+0x38>)
 800777c:	4c0d      	ldr	r4, [pc, #52]	; (80077b4 <__libc_init_array+0x3c>)
 800777e:	1ba4      	subs	r4, r4, r6
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	2500      	movs	r5, #0
 8007784:	42a5      	cmp	r5, r4
 8007786:	d109      	bne.n	800779c <__libc_init_array+0x24>
 8007788:	4e0b      	ldr	r6, [pc, #44]	; (80077b8 <__libc_init_array+0x40>)
 800778a:	4c0c      	ldr	r4, [pc, #48]	; (80077bc <__libc_init_array+0x44>)
 800778c:	f000 f83a 	bl	8007804 <_init>
 8007790:	1ba4      	subs	r4, r4, r6
 8007792:	10a4      	asrs	r4, r4, #2
 8007794:	2500      	movs	r5, #0
 8007796:	42a5      	cmp	r5, r4
 8007798:	d105      	bne.n	80077a6 <__libc_init_array+0x2e>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077a0:	4798      	blx	r3
 80077a2:	3501      	adds	r5, #1
 80077a4:	e7ee      	b.n	8007784 <__libc_init_array+0xc>
 80077a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077aa:	4798      	blx	r3
 80077ac:	3501      	adds	r5, #1
 80077ae:	e7f2      	b.n	8007796 <__libc_init_array+0x1e>
 80077b0:	08007aa8 	.word	0x08007aa8
 80077b4:	08007aa8 	.word	0x08007aa8
 80077b8:	08007aa8 	.word	0x08007aa8
 80077bc:	08007aac 	.word	0x08007aac

080077c0 <memcmp>:
 80077c0:	b530      	push	{r4, r5, lr}
 80077c2:	2400      	movs	r4, #0
 80077c4:	42a2      	cmp	r2, r4
 80077c6:	d101      	bne.n	80077cc <memcmp+0xc>
 80077c8:	2000      	movs	r0, #0
 80077ca:	e007      	b.n	80077dc <memcmp+0x1c>
 80077cc:	5d03      	ldrb	r3, [r0, r4]
 80077ce:	3401      	adds	r4, #1
 80077d0:	190d      	adds	r5, r1, r4
 80077d2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80077d6:	42ab      	cmp	r3, r5
 80077d8:	d0f4      	beq.n	80077c4 <memcmp+0x4>
 80077da:	1b58      	subs	r0, r3, r5
 80077dc:	bd30      	pop	{r4, r5, pc}

080077de <memcpy>:
 80077de:	b510      	push	{r4, lr}
 80077e0:	1e43      	subs	r3, r0, #1
 80077e2:	440a      	add	r2, r1
 80077e4:	4291      	cmp	r1, r2
 80077e6:	d100      	bne.n	80077ea <memcpy+0xc>
 80077e8:	bd10      	pop	{r4, pc}
 80077ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f2:	e7f7      	b.n	80077e4 <memcpy+0x6>

080077f4 <memset>:
 80077f4:	4402      	add	r2, r0
 80077f6:	4603      	mov	r3, r0
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d100      	bne.n	80077fe <memset+0xa>
 80077fc:	4770      	bx	lr
 80077fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007802:	e7f9      	b.n	80077f8 <memset+0x4>

08007804 <_init>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	bf00      	nop
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr

08007810 <_fini>:
 8007810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007812:	bf00      	nop
 8007814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007816:	bc08      	pop	{r3}
 8007818:	469e      	mov	lr, r3
 800781a:	4770      	bx	lr
